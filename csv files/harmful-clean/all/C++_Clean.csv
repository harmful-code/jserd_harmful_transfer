id,language,text,smell,tokens,metrics
98566,C++,"class CPL_DLL OGRGeomFieldDefn
{
protected:
//! @cond Doxygen_Suppress
        char                *pszName = nullptr;
        OGRwkbGeometryType   eGeomType = wkbUnknown; /* all values possible except wkbNone */
        mutable OGRSpatialReference* poSRS = nullptr;

        int                 bIgnore = false;
        mutable int         bNullable = true;

        void                Initialize( const char *, OGRwkbGeometryType );
//! @endcond

public:
                            OGRGeomFieldDefn( const char *pszNameIn,
                                              OGRwkbGeometryType eGeomTypeIn );
                  explicit OGRGeomFieldDefn( const OGRGeomFieldDefn * );
        virtual            ~OGRGeomFieldDefn();

        void                SetName( const char * );
        const char         *GetNameRef() const { return pszName; }

        OGRwkbGeometryType  GetType() const { return eGeomType; }
        void                SetType( OGRwkbGeometryType eTypeIn );

        virtual OGRSpatialReference* GetSpatialRef() const;
        void                 SetSpatialRef( OGRSpatialReference* poSRSIn );

        int                 IsIgnored() const { return bIgnore; }
        void                SetIgnored( int bIgnoreIn ) { bIgnore = bIgnoreIn; }

        int                 IsNullable() const { return bNullable; }
        void                SetNullable( int bNullableIn )
            { bNullable = bNullableIn; }

        int                 IsSame( const OGRGeomFieldDefn * ) const;

        /** Convert a OGRGeomFieldDefn* to a OGRGeomFieldDefnH.
        * @since GDAL 2.3
        */
        static inline OGRGeomFieldDefnH ToHandle(OGRGeomFieldDefn* poGeomFieldDefn)
            { return reinterpret_cast<OGRGeomFieldDefnH>(poGeomFieldDefn); }

        /** Convert a OGRGeomFieldDefnH to a OGRGeomFieldDefn*.
        * @since GDAL 2.3
        */
        static inline OGRGeomFieldDefn* FromHandle(OGRGeomFieldDefnH hGeomFieldDefn)
            { return reinterpret_cast<OGRGeomFieldDefn*>(hGeomFieldDefn); }
  private:
    CPL_DISALLOW_COPY_ASSIGN(OGRGeomFieldDefn)
};",0,587 2000 2001 123 775 58 330 582 42 2002 61 753 59 2003 2004 61 2005 59 305 740 2006 42 2007 61 753 59 704 2008 61 655 59 740 704 2009 61 829 59 865 2010 40 601 582 42 44 2003 41 59 330 777 58 2001 40 601 582 42 2011 44 2003 2012 41 59 648 2001 40 601 2001 42 41 59 864 126 2001 40 41 59 865 2013 40 601 582 42 41 59 601 582 42 2014 40 41 601 123 792 2002 59 125 2003 2015 40 41 601 123 792 2004 59 125 865 2016 40 2003 2017 41 59 864 2006 42 2018 40 41 601 59 865 2019 40 2006 42 2020 41 59 704 2021 40 41 601 123 792 2008 59 125 865 2022 40 704 2023 41 123 2008 61 2023 59 125 704 2024 40 41 601 123 792 2009 59 125 865 2025 40 704 2026 41 123 2009 61 2026 59 125 704 2027 40 601 2001 42 41 601 59 306 809 700 2028 2029 40 2001 42 2030 41 123 792 786 60 2028 62 40 2030 41 59 125 306 809 700 2001 42 2031 40 2028 2032 41 123 792 786 60 2001 42 62 40 2032 41 59 125 773 58 2033 40 2001 41 125 59 ,"{'AvgLine': 4, 'CountLine': 124, 'CountStmt': 58, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 36, 'MaxEssential': 1, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 98, 'CountStmtDecl': 25, 'MaxCyclomatic': 3, 'SumCyclomatic': 23, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 18, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 19, 'AltCountLineCode': 98, 'CountLineCodeExe': 46, 'CountLineComment': 9, 'AltAvgLineComment': 0, 'AltCountLineBlank': 18, 'CountClassCoupled': 2, 'CountClassDerived': 9, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 19, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 28, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 16, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 23, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 17, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 5}"
98580,C++,"    class PCIDSKBuffer
    {
        friend class MetadataSegment; // ?
    public:
        PCIDSKBuffer( int size = 0 );
        PCIDSKBuffer( const char *src, int size );
        ~PCIDSKBuffer();

        char        *buffer;
        int         buffer_size;

        PCIDSKBuffer &operator=(const PCIDSKBuffer& src);

        const char *Get( int offset, int size ) const;
        void        Get( int offset, int size, std::string &target, int unpad=1 ) const;

        double      GetDouble( int offset, int size ) const;
        int         GetInt( int offset, int size ) const;
        int64       GetInt64( int offset, int size ) const;
        uint64      GetUInt64( int offset, int size ) const;

        void        Put( const char *value,  int offset, int size, bool null_term = false );
        void        Put( uint64 value, int offset, int size );
        void        Put( double value, int offset, int size, const char *fmt=nullptr );
        void        Put( int value, int offset, int size )
            { Put( (uint64) value, offset, size ); }
        void        Put( unsigned int value, int offset, int size )
            { Put( (uint64) value, offset, size ); }

        void        PutBin(double value, int offset);
        void        PutBin(int16 value, int offset);

        void        SetSize( int size );

    private:
        mutable std::string work_field;
    };",0,587 2000 123 667 587 2001 59 330 777 58 2000 40 704 2002 61 1500 41 59 2000 40 601 582 42 2003 44 704 2002 41 59 126 2000 40 41 59 582 42 2004 59 704 2005 59 2000 38 758 61 40 601 2000 38 2003 41 59 601 582 42 2006 40 704 2007 44 704 2002 41 601 59 865 2006 40 704 2007 44 704 2002 44 2008 321 2009 38 2010 44 704 2011 61 1501 41 601 59 625 2012 40 704 2007 44 704 2002 41 601 59 704 2013 40 704 2007 44 704 2002 41 601 59 2014 2015 40 704 2007 44 704 2002 41 601 59 2016 2017 40 704 2007 44 704 2002 41 601 59 865 2018 40 601 582 42 2019 44 704 2007 44 704 2002 44 569 2020 61 655 41 59 865 2018 40 2016 2019 44 704 2007 44 704 2002 41 59 865 2018 40 625 2019 44 704 2007 44 704 2002 44 601 582 42 2021 61 753 41 59 865 2018 40 704 2019 44 704 2007 44 704 2002 41 123 2018 40 40 2016 41 2019 44 2007 44 2002 41 59 125 865 2018 40 856 704 2019 44 704 2007 44 704 2002 41 123 2018 40 40 2016 41 2019 44 2007 44 2002 41 59 125 865 2022 40 625 2019 44 704 2007 41 59 865 2022 40 2023 2019 44 704 2007 41 59 865 2024 40 704 2002 41 59 773 58 740 2008 321 2009 2025 59 125 59 ,"{'AvgLine': 11, 'CountLine': 222, 'CountStmt': 107, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 81, 'MaxEssential': 1, 'SumEssential': 17, 'AvgCyclomatic': 2, 'CountLineCode': 169, 'CountStmtDecl': 34, 'MaxCyclomatic': 5, 'SumCyclomatic': 35, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 49, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 18, 'AltCountLineCode': 169, 'CountLineCodeExe': 105, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 49, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 31, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 36, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 7, 'CountDeclMethodPublic': 18, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 57, 'SumCyclomaticModified': 35, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 19, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98589,C++,"class CPL_DLL GDALColorTable
{
    GDALPaletteInterp eInterp;

    std::vector<GDALColorEntry> aoEntries{};

public:
    explicit     GDALColorTable( GDALPaletteInterp = GPI_RGB );
                ~GDALColorTable();

    GDALColorTable *Clone() const;
    int             IsSame(const GDALColorTable* poOtherCT) const;

    GDALPaletteInterp GetPaletteInterpretation() const;

    int           GetColorEntryCount() const;
    const GDALColorEntry *GetColorEntry( int ) const;
    int           GetColorEntryAsRGB( int, GDALColorEntry * ) const;
    void          SetColorEntry( int, const GDALColorEntry * );
    int           CreateColorRamp( int, const GDALColorEntry * ,
                                   int, const GDALColorEntry * );
    bool          IsIdentity() const;

    /** Convert a GDALColorTable* to a GDALRasterBandH.
     * @since GDAL 2.3
     */
    static inline GDALColorTableH ToHandle(GDALColorTable* poCT)
        { return static_cast<GDALColorTableH>(poCT); }

    /** Convert a GDALColorTableH to a GDALColorTable*.
     * @since GDAL 2.3
     */
    static inline GDALColorTable* FromHandle(GDALColorTableH hCT)
        { return static_cast<GDALColorTable*>(hCT); }

};",0,587 2000 2001 123 2002 2003 59 2004 321 2005 60 2006 62 2007 123 125 59 777 58 648 2001 40 2002 61 2008 41 59 126 2001 40 41 59 2001 42 2009 40 41 601 59 704 2010 40 601 2001 42 2011 41 601 59 2002 2012 40 41 601 59 704 2013 40 41 601 59 601 2006 42 2014 40 704 41 601 59 704 2015 40 704 44 2006 42 41 601 59 865 2016 40 704 44 601 2006 42 41 59 704 2017 40 704 44 601 2006 42 44 704 44 601 2006 42 41 59 569 2018 40 41 601 59 306 809 700 2019 2020 40 2001 42 2021 41 123 792 811 60 2019 62 40 2021 41 59 125 306 809 700 2001 42 2022 40 2019 2023 41 123 792 811 60 2001 42 62 40 2023 41 59 125 125 59 ,"{'AvgLine': 11, 'CountLine': 168, 'CountStmt': 58, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 33, 'MaxEssential': 4, 'SumEssential': 15, 'AvgCyclomatic': 1, 'CountLineCode': 126, 'CountStmtDecl': 27, 'MaxCyclomatic': 5, 'SumCyclomatic': 22, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 28, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 13, 'AltCountLineCode': 126, 'CountLineCodeExe': 37, 'CountLineComment': 15, 'AltAvgLineComment': 0, 'AltCountLineBlank': 28, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 26, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 15, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 27, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 22, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98592,C++,"class CPL_DLL GDALMajorObject
{
  protected:
//! @cond Doxygen_Suppress
    int                 nFlags; // GMO_* flags.
    CPLString           sDescription{};
    GDALMultiDomainMetadata oMDMD{};

//! @endcond

    char               **BuildMetadataDomainList( char** papszList,
                                                  int bCheckNonEmpty, ... ) CPL_NULL_TERMINATED;
  public:
                        GDALMajorObject();
    virtual            ~GDALMajorObject();

    int                 GetMOFlags() const;
    void                SetMOFlags( int nFlagsIn );

    virtual const char *GetDescription() const;
    virtual void        SetDescription( const char * );

    virtual char      **GetMetadataDomainList();

    virtual char      **GetMetadata( const char * pszDomain = """" );
    virtual CPLErr      SetMetadata( char ** papszMetadata,
                                     const char * pszDomain = """" );
    virtual const char *GetMetadataItem( const char * pszName,
                                         const char * pszDomain = """" );
    virtual CPLErr      SetMetadataItem( const char * pszName,
                                         const char * pszValue,
                                         const char * pszDomain = """" );

    /** Convert a GDALMajorObject* to a GDALMajorObjectH.
     * @since GDAL 2.3
     */
    static inline GDALMajorObjectH ToHandle(GDALMajorObject* poMajorObject)
        { return static_cast<GDALMajorObjectH>(poMajorObject); }

    /** Convert a GDALMajorObjectH to a GDALMajorObject*.
     * @since GDAL 2.3
     */
    static inline GDALMajorObject* FromHandle(GDALMajorObjectH hMajorObject)
        { return static_cast<GDALMajorObject*>(hMajorObject); }
};",0,587 2000 2001 123 775 58 330 704 2002 59 330 2003 2004 123 125 59 2005 2006 123 125 59 330 582 42 42 2007 40 582 42 42 2008 44 704 2009 44 322 41 2010 59 777 58 2001 40 41 59 864 126 2001 40 41 59 704 2011 40 41 601 59 865 2012 40 704 2013 41 59 864 601 582 42 2014 40 41 601 59 864 865 2015 40 601 582 42 41 59 864 582 42 42 2016 40 41 59 864 582 42 42 2017 40 601 582 42 2018 61 362 41 59 864 2019 2020 40 582 42 42 2021 44 601 582 42 2018 61 362 41 59 864 601 582 42 2022 40 601 582 42 2023 44 601 582 42 2018 61 362 41 59 864 2019 2024 40 601 582 42 2023 44 601 582 42 2025 44 601 582 42 2018 61 362 41 59 306 809 700 2026 2027 40 2001 42 2028 41 123 792 811 60 2026 62 40 2028 41 59 125 306 809 700 2001 42 2029 40 2026 2030 41 123 792 811 60 2001 42 62 40 2030 41 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 126, 'CountStmt': 40, 'MaxNesting': 2, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 21, 'MaxEssential': 1, 'SumEssential': 14, 'AvgCyclomatic': 1, 'CountLineCode': 97, 'CountStmtDecl': 20, 'MaxCyclomatic': 3, 'SumCyclomatic': 17, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 14, 'AltCountLineCode': 97, 'CountLineCodeExe': 21, 'CountLineComment': 9, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 2, 'CountClassDerived': 5, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
98612,C++,"class TimeDelta
{

  private:

    int days ;     /* number of days */
    int secs ;     /* number of seconds since day start */
    int usecs ;    /* number of micro sec. since second start */

    /* SETTERS */

    /* set object using number of days, seconds and micro-seconds */
    inline void set( int daysIn , int secsIn , int usecsIn )
    {
        int tmp0 , tmp1 ;
        /* overflow check with proper handling of negative values */
        /* note that division and modulo for negative values is impl.dependent */

        secsIn += ( tmp0 = usecsIn>=0 ? usecsIn/1000000 : -1-((-usecsIn)/1000000) ) ;
        daysIn += ( tmp1 = secsIn>=0 ? secsIn/86400 : -1-((-secsIn)/86400) ) ;

        this->usecs = usecsIn - 1000000*tmp0 ;
        this->secs  = secsIn - 86400*tmp1 ;
        this->days  = daysIn ;
    }

    /* set object from floating point number of seconds */
    inline void fromSeconds( double secsIn )
    {
        int _days = (int)( secsIn / 86400 ) ;
        int _secs = (int)( secsIn - 86400*_days ) ;
        int _uscs = (int)(( secsIn - ((int)secsIn) )*1e6) ;

        this->set( _days , _secs , _uscs ) ;
    }

  public:

    /* CONSTRUCTORS */
    TimeDelta( void ) : days(0), secs(0), usecs(0) {}

    /* construct object using number of days, seconds and micro-seconds */
    TimeDelta( int daysIn , int secsIn , int usecsIn )
    {
        this->set( daysIn, secsIn, usecsIn ) ;
    }

    /* construct object from floating point number of seconds */
    explicit TimeDelta( double secsIn )
    {
        this->fromSeconds( secsIn ) ;
    }

    /* GETTERS */

    inline int getDays( void ) const
    {
        return this->days ;
    }

    inline int getSeconds( void ) const
    {
        return this->secs ;
    }

    inline int getMicroseconds( void ) const
    {
        return this->usecs ;
    }

    /* convert to seconds - can handle safely at least 250 years dif. */
    /*  ... before losing the microsecond precision */
    inline operator double( void ) const
    {
        return (this->days*86400.0) + this->secs + (this->usecs*1e-6) ;
    }

    /* OPERATORS */

    /* difference */
    inline TimeDelta operator -( const TimeDelta & that ) const
    {
        return TimeDelta( this->days - that.days, this->secs - that.secs,
                                this->usecs - that.usecs ) ;
    }

    /* addition */
    inline TimeDelta operator +( const TimeDelta & that ) const
    {
        return TimeDelta( this->days + that.days, this->secs + that.secs,
                                this->usecs + that.usecs ) ;
    }

    /* division */
    inline double operator /( const TimeDelta & that ) const
    {
        return ( (double)*this / (double)that ) ;
    }

    /* integer multiplication */
    inline TimeDelta operator *( const int i ) const
    {
        return TimeDelta( i*this->days, i*this->secs, i*this->usecs ) ;
    }

    /* float multiplication */
    inline TimeDelta operator *( const double f ) const
    {
        return TimeDelta( f * (double)*this ) ;
    }

    /* comparisons operators */

    inline bool operator ==( const TimeDelta & that ) const
    {
        return ( (this->usecs == that.usecs)&&(this->secs == that.secs)&&
                 (this->days == that.days) )  ;
    }


    inline bool operator >( const TimeDelta & that ) const
    {
        return  (this->days > that.days)
                ||(
                    (this->days == that.days)
                    &&(
                        (this->secs > that.secs)
                        ||(
                            (this->secs == that.secs)
                            &&(this->usecs > that.usecs)
                        )
                    )
                ) ;
    }

    inline bool operator <( const TimeDelta & that ) const
    {
        return  (this->days < that.days)
                ||(
                    (this->days == that.days)
                    &&(
                        (this->secs < that.secs)
                        ||(
                            (this->secs == that.secs)
                            &&(this->usecs < that.usecs)
                        )
                    )
                ) ;
    }

    inline bool operator !=( const TimeDelta & that ) const
    {
        return !( *this == that ) ;
    }

    inline bool operator >=( const TimeDelta & that ) const
    {
        return !( *this < that ) ;
    }

    inline bool operator <=( const TimeDelta & that ) const
    {
        return !( *this > that ) ;
    }

};",0,587 2000 123 773 58 704 2001 59 305 704 2002 59 305 704 2003 59 305 305 305 700 865 2004 40 704 2005 44 704 2006 44 704 2007 41 123 704 2008 44 2009 59 305 305 2006 348 40 2008 61 2007 325 1500 63 2007 47 1507 58 45 1501 45 40 40 45 2007 41 47 1507 41 41 59 2005 348 40 2009 61 2006 325 1500 63 2006 47 1506 58 45 1501 45 40 40 45 2006 41 47 1506 41 41 59 823 354 2003 61 2007 45 1507 42 2008 59 823 354 2002 61 2006 45 1506 42 2009 59 823 354 2001 61 2005 59 125 305 700 865 2010 40 625 2006 41 123 704 2011 61 40 704 41 40 2006 47 1506 41 59 704 2012 61 40 704 41 40 2006 45 1506 42 2011 41 59 704 2013 61 40 704 41 40 40 2006 45 40 40 704 41 2006 41 41 42 1507 41 59 823 354 2004 40 2011 44 2012 44 2013 41 59 125 777 58 305 2000 40 865 41 58 2001 40 1500 41 44 2002 40 1500 41 44 2003 40 1500 41 123 125 305 2000 40 704 2005 44 704 2006 44 704 2007 41 123 823 354 2004 40 2005 44 2006 44 2007 41 59 125 305 648 2000 40 625 2006 41 123 823 354 2010 40 2006 41 59 125 305 700 704 2014 40 865 41 601 123 792 823 354 2001 59 125 700 704 2015 40 865 41 601 123 792 823 354 2002 59 125 700 704 2016 40 865 41 601 123 792 823 354 2003 59 125 305 305 700 758 625 40 865 41 601 123 792 40 823 354 2001 42 1506 41 43 823 354 2002 43 40 823 354 2003 42 1500 41 59 125 305 305 700 2000 758 45 40 601 2000 38 2017 41 601 123 792 2000 40 823 354 2001 45 2017 46 2001 44 823 354 2002 45 2017 46 2002 44 823 354 2003 45 2017 46 2003 41 59 125 305 700 2000 758 43 40 601 2000 38 2017 41 601 123 792 2000 40 823 354 2001 43 2017 46 2001 44 823 354 2002 43 2017 46 2002 44 823 354 2003 43 2017 46 2003 41 59 125 305 700 625 758 47 40 601 2000 38 2017 41 601 123 792 40 40 625 41 42 823 47 40 625 41 2017 41 59 125 305 700 2000 758 42 40 601 704 2018 41 601 123 792 2000 40 2018 42 823 354 2001 44 2018 42 823 354 2002 44 2018 42 823 354 2003 41 59 125 305 700 2000 758 42 40 601 625 2019 41 601 123 792 2000 40 2019 42 40 625 41 42 823 41 59 125 305 700 569 758 323 40 601 2000 38 2017 41 601 123 792 40 40 823 354 2003 323 2017 46 2003 41 307 40 823 354 2002 323 2017 46 2002 41 307 40 823 354 2001 323 2017 46 2001 41 41 59 125 700 569 758 62 40 601 2000 38 2017 41 601 123 792 40 823 354 2001 62 2017 46 2001 41 309 40 40 823 354 2001 323 2017 46 2001 41 307 40 40 823 354 2002 62 2017 46 2002 41 309 40 40 823 354 2002 323 2017 46 2002 41 307 40 823 354 2003 62 2017 46 2003 41 41 41 41 59 125 700 569 758 60 40 601 2000 38 2017 41 601 123 792 40 823 354 2001 60 2017 46 2001 41 309 40 40 823 354 2001 323 2017 46 2001 41 307 40 40 823 354 2002 60 2017 46 2002 41 309 40 40 823 354 2002 323 2017 46 2002 41 307 40 823 354 2003 60 2017 46 2003 41 41 41 41 59 125 700 569 758 340 40 601 2000 38 2017 41 601 123 792 33 40 42 823 323 2017 41 59 125 700 569 758 325 40 601 2000 38 2017 41 601 123 792 33 40 42 823 60 2017 41 59 125 700 569 758 329 40 601 2000 38 2017 41 601 123 792 33 40 42 823 62 2017 41 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 166, 'CountStmt': 54, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 20, 'AvgCyclomatic': 1, 'CountLineCode': 116, 'CountStmtDecl': 31, 'MaxCyclomatic': 3, 'SumCyclomatic': 22, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 32, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 20, 'AltCountLineCode': 116, 'CountLineCodeExe': 50, 'CountLineComment': 21, 'AltAvgLineComment': 0, 'AltCountLineBlank': 32, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 25, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.18', 'AltCountLineComment': 21, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 32, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 15, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 18, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 22, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 25, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
98629,C++,"class TigerZeroCellID final: public TigerFileBase
{
public:
                      TigerZeroCellID( OGRTigerDataSource *, const char * );
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 125 59 ,"{'AvgLine': 15, 'CountLine': 20, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 10, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 1, 'AltCountLineCode': 15, 'CountLineCodeExe': 6, 'CountLineComment': 3, 'AltAvgLineComment': 3, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98618,C++,"class FeatureDefnInfo
{
    OGRFeatureDefn* poTableDefn;
public:
    GeomFieldInfos  poGeomFieldInfos;
    StructFieldInfos poStructFieldInfos;

    FeatureDefnInfo() : poTableDefn(nullptr) {}
    ~FeatureDefnInfo() {
       if( poTableDefn )
           poTableDefn->Release();
    }
    FeatureDefnInfo(const FeatureDefnInfo& other)
    {
        poTableDefn = other.poTableDefn;
        if( poTableDefn )
            poTableDefn->Reference();
        poGeomFieldInfos = other.poGeomFieldInfos;
        poStructFieldInfos = other.poStructFieldInfos;
    }

    FeatureDefnInfo& operator= (const FeatureDefnInfo& other)
    {
        if( this != &other )
        {
            if( poTableDefn )
                poTableDefn->Release();
            poTableDefn = other.poTableDefn;
            if( poTableDefn )
                poTableDefn->Reference();
            poGeomFieldInfos = other.poGeomFieldInfos;
            poStructFieldInfos = other.poStructFieldInfos;
        }
        return *this;
    }

    OGRFeatureDefn* GetTableDefnRef() const { return poTableDefn; }
    void            SetTableDefn(OGRFeatureDefn* poTableDefnIn)
    {
        CPLAssert(poTableDefn == nullptr);
        poTableDefn= poTableDefnIn;
        if( poTableDefn )
            poTableDefn->Reference();
    }
};",0,587 2000 123 2001 42 2002 59 777 58 2003 2004 59 2005 2006 59 2000 40 41 58 2002 40 753 41 123 125 126 2000 40 41 123 688 40 2002 41 2002 354 2007 40 41 59 125 2000 40 601 2000 38 2008 41 123 2002 61 2008 46 2002 59 688 40 2002 41 2002 354 2009 40 41 59 2004 61 2008 46 2004 59 2006 61 2008 46 2006 59 125 2000 38 758 61 40 601 2000 38 2008 41 123 688 40 823 340 38 2008 41 123 688 40 2002 41 2002 354 2010 40 41 59 2002 61 2008 46 2002 59 688 40 2002 41 2002 354 2011 40 41 59 2004 61 2008 46 2004 59 2006 61 2008 46 2006 59 125 792 42 823 59 125 2001 42 2012 40 41 601 123 792 2002 59 125 865 2013 40 2001 42 2014 41 123 2015 40 2002 323 753 41 59 2002 61 2014 59 688 40 2002 41 2002 354 2016 40 41 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 45, 'CountStmt': 31, 'MaxNesting': 2, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 42, 'CountStmtDecl': 10, 'MaxCyclomatic': 4, 'SumCyclomatic': 12, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 42, 'CountLineCodeExe': 21, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 44, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98616,C++,"class OGRJMLDataset final: public GDALDataset
{
    OGRLayer           *poLayer;

    VSILFILE           *fp; /* Virtual file API */
    bool                bWriteMode;

  public:
                        OGRJMLDataset();
                        ~OGRJMLDataset();

    int                 GetLayerCount() override { return poLayer != nullptr ? 1 : 0; }
    OGRLayer*           GetLayer( int ) override;

    OGRLayer *          ICreateLayer( const char * pszLayerName,
                                    OGRSpatialReference *poSRS,
                                    OGRwkbGeometryType eType,
                                    char ** papszOptions ) override;

    int                 TestCapability( const char * ) override;

    static int          Identify( GDALOpenInfo* poOpenInfo );
    static GDALDataset* Open( GDALOpenInfo* poOpenInfo );
    static GDALDataset* Create( const char *pszFilename,
                                 int nBands,
                                 int nXSize,
                                 int nYSize,
                                 GDALDataType eDT,
                                 char **papszOptions );
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2005 42 2006 59 305 569 2007 59 777 58 2000 40 41 59 126 2000 40 41 59 704 2008 40 41 2009 123 792 2004 340 753 63 1501 58 1500 59 125 2003 42 2010 40 704 41 2009 59 2003 42 2011 40 601 582 42 2012 44 2013 42 2014 44 2015 2016 44 582 42 42 2017 41 2009 59 704 2018 40 601 582 42 41 2009 59 809 704 2019 40 2020 42 2021 41 59 809 2002 42 2022 40 2020 42 2021 41 59 809 2002 42 2023 40 601 582 42 2024 44 704 2025 44 704 2026 44 704 2027 44 2028 2029 44 582 42 42 2017 41 59 125 59 ,"{'AvgLine': 14, 'CountLine': 162, 'CountStmt': 57, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 40, 'MaxEssential': 3, 'SumEssential': 11, 'AvgCyclomatic': 2, 'CountLineCode': 121, 'CountStmtDecl': 21, 'MaxCyclomatic': 4, 'SumCyclomatic': 20, 'AltAvgLineCode': 12, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 22, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 9, 'AltCountLineCode': 131, 'CountLineCodeExe': 58, 'CountLineComment': 13, 'AltAvgLineComment': 1, 'AltCountLineBlank': 25, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 34, 'CountLineInactive': 10, 'CountDeclMethodAll': 151, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 13, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 25, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 57, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
98641,C++,"class VRTAverageFilteredSource final: public VRTKernelFilteredSource
{
    CPL_DISALLOW_COPY_ASSIGN(VRTAverageFilteredSource)

public:
            explicit VRTAverageFilteredSource( int nKernelSize );
    virtual ~VRTAverageFilteredSource();

    virtual CPLErr  XMLInit( CPLXMLNode *psTree, const char *,
                             std::map<CPLString, GDALDataset*>& ) override;
    virtual CPLXMLNode *SerializeToXML( const char *pszVRTPath ) override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 777 58 648 2000 40 704 2004 41 59 864 126 2000 40 41 59 864 2005 2006 40 2007 42 2008 44 601 582 42 44 2009 321 2010 60 2011 44 2012 42 62 38 41 2013 59 864 2007 42 2014 40 601 582 42 2015 41 2013 59 125 59 ,"{'AvgLine': 0, 'CountLine': 12, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 10, 'CountStmtDecl': 4, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 10, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 94, 'MaxInheritanceTree': 5, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98663,C++,"class CPL_DLL VRTSource
{
public:
    virtual ~VRTSource();

    virtual CPLErr  RasterIO( GDALDataType eBandDataType,
                              int nXOff, int nYOff, int nXSize, int nYSize,
                              void *pData, int nBufXSize, int nBufYSize,
                              GDALDataType eBufType,
                              GSpacing nPixelSpace, GSpacing nLineSpace,
                              GDALRasterIOExtraArg* psExtraArg ) = 0;

    virtual double GetMinimum( int nXSize, int nYSize, int *pbSuccess ) = 0;
    virtual double GetMaximum( int nXSize, int nYSize, int *pbSuccess ) = 0;
    virtual CPLErr ComputeRasterMinMax( int nXSize, int nYSize, int bApproxOK,
                                        double* adfMinMax ) = 0;
    virtual CPLErr ComputeStatistics( int nXSize, int nYSize,
                                      int bApproxOK,
                                      double *pdfMin, double *pdfMax,
                                      double *pdfMean, double *pdfStdDev,
                                      GDALProgressFunc pfnProgress,
                                      void *pProgressData ) = 0;
    virtual CPLErr  GetHistogram( int nXSize, int nYSize,
                                  double dfMin, double dfMax,
                                  int nBuckets, GUIntBig * panHistogram,
                                  int bIncludeOutOfRange, int bApproxOK,
                                  GDALProgressFunc pfnProgress,
                                  void *pProgressData ) = 0;

    virtual CPLErr  XMLInit( CPLXMLNode *psTree, const char *,
                             std::map<CPLString, GDALDataset*>& ) = 0;
    virtual CPLXMLNode *SerializeToXML( const char *pszVRTPath ) = 0;

    virtual void   GetFileList(char*** ppapszFileList, int *pnSize,
                               int *pnMaxSize, CPLHashSet* hSetFiles);

    virtual int    IsSimpleSource() { return FALSE; }
    virtual CPLErr FlushCache(bool /*bAtClosing*/) { return CE_None; }
};",0,587 2000 2001 123 777 58 864 126 2001 40 41 59 864 2002 2003 40 2004 2005 44 704 2006 44 704 2007 44 704 2008 44 704 2009 44 865 42 2010 44 704 2011 44 704 2012 44 2004 2013 44 2014 2015 44 2014 2016 44 2017 42 2018 41 61 1500 59 864 625 2019 40 704 2008 44 704 2009 44 704 42 2020 41 61 1500 59 864 625 2021 40 704 2008 44 704 2009 44 704 42 2020 41 61 1500 59 864 2002 2022 40 704 2008 44 704 2009 44 704 2023 44 625 42 2024 41 61 1500 59 864 2002 2025 40 704 2008 44 704 2009 44 704 2023 44 625 42 2026 44 625 42 2027 44 625 42 2028 44 625 42 2029 44 2030 2031 44 865 42 2032 41 61 1500 59 864 2002 2033 40 704 2008 44 704 2009 44 625 2034 44 625 2035 44 704 2036 44 2037 42 2038 44 704 2039 44 704 2023 44 2030 2031 44 865 42 2032 41 61 1500 59 864 2002 2040 40 2041 42 2042 44 601 582 42 44 2043 321 2044 60 2045 44 2046 42 62 38 41 61 1500 59 864 2041 42 2047 40 601 582 42 2048 41 61 1500 59 864 865 2049 40 582 42 42 42 2050 44 704 42 2051 44 704 42 2052 44 2053 42 2054 41 59 864 704 2055 40 41 123 792 2056 59 125 864 2002 2057 40 569 305 41 123 792 2058 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 45, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 40, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 2, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 12, 'AltCountLineCode': 40, 'CountLineCodeExe': 1, 'CountLineComment': 5, 'AltAvgLineComment': 1, 'AltCountLineBlank': 5, 'CountClassCoupled': 3, 'CountClassDerived': 2, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98676,C++,"class MRFLRasterBand final: public GDALPamRasterBand {
public:
    explicit MRFLRasterBand(MRFRasterBand *b) {
        pBand = b;
        eDataType = b->GetRasterDataType();
        b->GetBlockSize(&nBlockXSize, &nBlockYSize);
        eAccess = b->GetAccess();
        nRasterXSize = b->GetXSize();
        nRasterYSize = b->GetYSize();
    }
    virtual CPLErr IReadBlock(int xblk, int yblk, void *buffer) override {
        return pBand->IReadBlock(xblk, yblk, buffer);
    }
    virtual CPLErr IWriteBlock(int xblk, int yblk, void *buffer) override {
        return pBand->IWriteBlock(xblk, yblk, buffer);
    }
    virtual GDALColorTable *GetColorTable() override {
        return pBand->GetColorTable();
    }
    virtual GDALColorInterp GetColorInterpretation() override {
        return pBand->GetColorInterpretation();
    }
    virtual double  GetNoDataValue(int * pbSuccess) override {
        return pBand->GetNoDataValue(pbSuccess);
    }
    virtual double  GetMinimum(int *b) override {
        return pBand->GetMinimum(b);
    }
    virtual double  GetMaximum(int *b) override {
        return pBand->GetMaximum(b);
    }

protected:
    virtual int GetOverviewCount() override { return 0; }
    virtual GDALRasterBand *GetOverview(int ) override { return nullptr; }

    MRFRasterBand *pBand;
};",0,587 2000 2001 58 777 2002 123 777 58 648 2000 40 2003 42 2004 41 123 2005 61 2004 59 2006 61 2004 354 2007 40 41 59 2004 354 2008 40 38 2009 44 38 2010 41 59 2011 61 2004 354 2012 40 41 59 2013 61 2004 354 2014 40 41 59 2015 61 2004 354 2016 40 41 59 125 864 2017 2018 40 704 2019 44 704 2020 44 865 42 2021 41 2022 123 792 2023 354 2018 40 2019 44 2020 44 2021 41 59 125 864 2017 2024 40 704 2019 44 704 2020 44 865 42 2021 41 2022 123 792 2025 354 2024 40 2019 44 2020 44 2021 41 59 125 864 2026 42 2027 40 41 2022 123 792 2028 354 2027 40 41 59 125 864 2029 2030 40 41 2022 123 792 2031 354 2030 40 41 59 125 864 625 2032 40 704 42 2033 41 2022 123 792 2034 354 2032 40 2033 41 59 125 864 625 2035 40 704 42 2004 41 2022 123 792 2036 354 2035 40 2004 41 59 125 864 625 2037 40 704 42 2004 41 2022 123 792 2038 354 2037 40 2004 41 59 125 775 58 864 704 2039 40 41 2022 123 792 1500 59 125 864 2040 42 2041 40 704 41 2022 123 792 753 59 125 2003 42 2042 59 125 59 ,"{'AvgLine': 3, 'CountLine': 38, 'CountStmt': 26, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 10, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 36, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 138, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 46, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
98693,C++,"class BIGGIFDataset final: public GIFAbstractDataset
{
    friend class BIGGifRasterBand;

    int         nLastLineRead;

    GDALDataset *poWorkDS;

    CPLErr       ReOpen();

  protected:
    int CloseDependentDatasets() override;

  public:
    BIGGIFDataset();
    ~BIGGIFDataset() override;

    static GDALDataset *Open( GDALOpenInfo * );
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 704 2004 59 2005 42 2006 59 2007 2008 40 41 59 775 58 704 2009 40 41 2010 59 777 58 2000 40 41 59 126 2000 40 41 2010 59 809 2005 42 2011 40 2012 42 41 59 125 59 ,"{'AvgLine': 36, 'CountLine': 202, 'CountStmt': 76, 'MaxNesting': 2, 'AvgLineCode': 22, 'AvgEssential': 2, 'AvgLineBlank': 6, 'CountStmtExe': 63, 'MaxEssential': 6, 'SumEssential': 13, 'AvgCyclomatic': 3, 'CountLineCode': 127, 'CountStmtDecl': 18, 'MaxCyclomatic': 7, 'SumCyclomatic': 18, 'AltAvgLineCode': 22, 'AvgLineComment': 7, 'CountClassBase': 1, 'CountLineBlank': 39, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 6, 'CountDeclMethod': 5, 'AltCountLineCode': 127, 'CountLineCodeExe': 79, 'CountLineComment': 36, 'AltAvgLineComment': 7, 'AltCountLineBlank': 39, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 211, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.28', 'AltCountLineComment': 36, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 2, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 64, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
98696,C++,"class IVFKReader
{
private:
    virtual void AddInfo(const char *) = 0;

protected:
    virtual IVFKDataBlock *CreateDataBlock(const char *) = 0;
    virtual void           AddDataBlock(IVFKDataBlock * = nullptr, const char * = nullptr) = 0;
    virtual OGRErr         AddFeature(IVFKDataBlock * = nullptr, VFKFeature * = nullptr) = 0;

public:
    virtual ~IVFKReader();

    virtual const char    *GetFilename() const = 0;

    virtual bool           IsLatin2() const = 0;
    virtual bool           IsSpatial() const = 0;
    virtual bool           IsPreProcessed() const = 0;
    virtual bool           IsValid() const = 0;
    virtual bool           HasFileField() const = 0;
    virtual int            ReadDataBlocks(bool = false) = 0;
    virtual int            ReadDataRecords(IVFKDataBlock * = nullptr) = 0;
    virtual int            LoadGeometry() = 0;

    virtual int            GetDataBlockCount() const = 0;
    virtual IVFKDataBlock *GetDataBlock(int) const = 0;
    virtual IVFKDataBlock *GetDataBlock(const char *) const = 0;

    virtual const char    *GetInfo(const char *) = 0;
};",0,587 2000 123 773 58 864 865 2001 40 601 582 42 41 61 1500 59 775 58 864 2002 42 2003 40 601 582 42 41 61 1500 59 864 865 2004 40 2002 42 61 753 44 601 582 42 61 753 41 61 1500 59 864 2005 2006 40 2002 42 61 753 44 2007 42 61 753 41 61 1500 59 777 58 864 126 2000 40 41 59 864 601 582 42 2008 40 41 601 61 1500 59 864 569 2009 40 41 601 61 1500 59 864 569 2010 40 41 601 61 1500 59 864 569 2011 40 41 601 61 1500 59 864 569 2012 40 41 601 61 1500 59 864 569 2013 40 41 601 61 1500 59 864 704 2014 40 569 61 655 41 61 1500 59 864 704 2015 40 2002 42 61 753 41 61 1500 59 864 704 2016 40 41 61 1500 59 864 704 2017 40 41 601 61 1500 59 864 2002 42 2018 40 704 41 601 61 1500 59 864 2002 42 2018 40 601 582 42 41 601 61 1500 59 864 601 582 42 2019 40 601 582 42 41 61 1500 59 125 59 ,"{'AvgLine': 3, 'CountLine': 33, 'CountStmt': 18, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 27, 'CountStmtDecl': 18, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 18, 'AltCountLineCode': 27, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 2, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 9, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 14, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 19, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98728,C++,"class OCAD_EXTERN CADCircle : public CADPoint3D
{
public:
    CADCircle();
    virtual ~CADCircle(){}

    double getRadius() const;
    void   setRadius( double value );

    virtual void print() const override;
protected:
    double radius;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 625 2003 40 41 601 59 865 2004 40 625 2005 41 59 864 865 2006 40 41 601 2007 59 775 58 625 2008 59 125 59 ,"{'AvgLine': 4, 'CountLine': 33, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 31, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 29, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 42, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
98735,C++,"class OCAD_EXTERN CADPolyline3D : public CADGeometry
{
public:
    CADPolyline3D();
    virtual ~CADPolyline3D(){}
    void   addVertex( const CADVector& vertex );
    size_t getVertexCount() const;
    CADVector& getVertex( size_t index );

    virtual void print() const override;
    virtual void transform( const Matrix& matrix ) override;
protected:
    std::vector<CADVector> vertices;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 865 2003 40 601 2004 38 2005 41 59 2006 2007 40 41 601 59 2004 38 2008 40 2006 2009 41 59 864 865 2010 40 41 601 2011 59 864 865 2012 40 601 2013 38 2014 41 2011 59 775 58 2015 321 2016 60 2004 62 2017 59 125 59 ,"{'AvgLine': 5, 'CountLine': 48, 'CountStmt': 23, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 47, 'CountStmtDecl': 14, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 47, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 3, 'CountClassDerived': 1, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
98754,C++,"class ISCERasterBand final: public RawRasterBand
{
        CPL_DISALLOW_COPY_ASSIGN(ISCERasterBand)

    public:
                ISCERasterBand( GDALDataset *poDS, int nBand, VSILFILE *fpRaw,
                                  vsi_l_offset nImgOffset, int nPixelOffset,
                                  int nLineOffset,
                                  GDALDataType eDataType, int bNativeOrder );
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 777 58 2000 40 2004 42 2005 44 704 2006 44 2007 42 2008 44 2009 2010 44 704 2011 44 704 2012 44 2013 2014 44 704 2015 41 59 125 59 ,"{'AvgLine': 8, 'CountLine': 18, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 17, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 171, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98760,C++,"    class VecSegDataIndex
    {
        friend class CPCIDSKVectorSegment;
        friend class VecSegHeader;

    public:
        VecSegDataIndex();
        ~VecSegDataIndex();

        void                 Initialize( CPCIDSKVectorSegment *seg,
                                         int section );

        uint32               SerializedSize();

        void                 SetDirty();
        void                 Flush();

        const std::vector<uint32> *GetIndex();
        void            AddBlockToIndex( uint32 block );
        void            VacateBlockRange( uint32 start, uint32 count );

        uint32          GetSectionEnd();
        void            SetSectionEnd( uint32 new_size );

    private:
        CPCIDSKVectorSegment *vs;

        int                  section;

        uint32               offset_on_disk_within_section;
        uint32               size_on_disk;

        bool                 block_initialized;
        uint32               block_count;
        uint32               bytes;
        std::vector<uint32>  block_index;
        bool                 dirty;
    };",0,587 2000 123 667 587 2001 59 667 587 2002 59 777 58 2000 40 41 59 126 2000 40 41 59 865 2003 40 2001 42 2004 44 704 2005 41 59 2006 2007 40 41 59 865 2008 40 41 59 865 2009 40 41 59 601 2010 321 2011 60 2006 62 42 2012 40 41 59 865 2013 40 2006 2014 41 59 865 2015 40 2006 2016 44 2006 2017 41 59 2006 2018 40 41 59 865 2019 40 2006 2020 41 59 773 58 2001 42 2021 59 704 2005 59 2006 2022 59 2006 2023 59 569 2024 59 2006 2025 59 2006 2026 59 2010 321 2011 60 2006 62 2027 59 569 2028 59 125 59 ,"{'AvgLine': 18, 'CountLine': 240, 'CountStmt': 98, 'MaxNesting': 3, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 72, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 2, 'CountLineCode': 182, 'CountStmtDecl': 33, 'MaxCyclomatic': 6, 'SumCyclomatic': 26, 'AltAvgLineCode': 14, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 48, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 11, 'AltCountLineCode': 182, 'CountLineCodeExe': 99, 'CountLineComment': 13, 'AltAvgLineComment': 1, 'AltCountLineBlank': 48, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 13, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 27, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 54, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 26, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 9, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 9, 'CountDeclInstanceVariableProtected': 0}"
98770,C++,"class GDALAntiRecursionGuard
{
    GDALAntiRecursionStruct* m_psAntiRecursionStruct;
    std::string m_osIdentifier;
    int m_nDepth;

    GDALAntiRecursionGuard(const GDALAntiRecursionGuard&) = delete;
    GDALAntiRecursionGuard& operator= (const GDALAntiRecursionGuard&) = delete;

public:
    explicit GDALAntiRecursionGuard(const std::string& osIdentifier);
             GDALAntiRecursionGuard(const GDALAntiRecursionGuard& other, const std::string& osIdentifier);
    ~GDALAntiRecursionGuard();
    int GetCallDepth() const { return m_nDepth; }
};",0,587 2000 123 2001 42 2002 59 2003 321 2004 2005 59 704 2006 59 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 777 58 648 2000 40 601 2003 321 2004 38 2007 41 59 2000 40 601 2000 38 2008 44 601 2003 321 2004 38 2007 41 59 126 2000 40 41 59 704 2009 40 41 601 123 792 2006 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 35, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 33, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
98777,C++,"class CPL_DLL CPLJSONArray : public CPLJSONObject
{
    friend class CPLJSONObject;
    friend class CPLJSONDocument;
public:
/*! @cond Doxygen_Suppress */
    CPLJSONArray();
    explicit CPLJSONArray(const std::string &osName);
    explicit CPLJSONArray(const CPLJSONObject &other);

private:
    explicit CPLJSONArray(const std::string &osName, JSONObjectH poJsonObject);

    class CPL_DLL ConstIterator
    {
            const CPLJSONArray& m_oSelf;
            int m_nIdx;
            mutable CPLJSONObject m_oObj{};

        public:
            ConstIterator(const CPLJSONArray& oSelf, bool bStart): m_oSelf(oSelf), m_nIdx(bStart ? 0 : oSelf.Size()) {}
            ~ConstIterator() = default;
            CPLJSONObject& operator*() const { m_oObj = m_oSelf[m_nIdx]; return m_oObj; }
            ConstIterator& operator++() { m_nIdx ++; return *this; }
            bool operator==(const ConstIterator& it) const { return m_nIdx == it.m_nIdx; }
            bool operator!=(const ConstIterator& it) const { return m_nIdx != it.m_nIdx; }
    };

/*! @endcond */
public:
    int Size() const;
    void Add(const CPLJSONObject &oValue);
    void Add(const std::string &osValue);
    void Add(const char* pszValue);
    void Add(double dfValue);
    void Add(int nValue);
    void Add(GInt64 nValue);
    void Add(bool bValue);
    CPLJSONObject operator[](int nIndex);
    const CPLJSONObject operator[](int nIndex) const;

    /** Iterator to first element */
    ConstIterator begin() const { return ConstIterator(*this, true); }
    /** Iterator to after last element */
    ConstIterator end() const { return ConstIterator(*this, false); }
};",0,587 2000 2001 58 777 2002 123 667 587 2002 59 667 587 2003 59 777 58 305 2001 40 41 59 648 2001 40 601 2004 321 2005 38 2006 41 59 648 2001 40 601 2002 38 2007 41 59 773 58 648 2001 40 601 2004 321 2005 38 2006 44 2008 2009 41 59 587 2000 2010 123 601 2001 38 2011 59 704 2012 59 740 2002 2013 123 125 59 777 58 2010 40 601 2001 38 2014 44 569 2015 41 58 2011 40 2014 41 44 2012 40 2015 63 1500 58 2014 46 2016 40 41 41 123 125 126 2010 40 41 61 613 59 2002 38 758 42 40 41 601 123 2013 61 2011 91 2012 93 59 792 2013 59 125 2010 38 758 349 40 41 123 2012 349 59 792 42 823 59 125 569 758 323 40 601 2010 38 2017 41 601 123 792 2012 323 2017 46 2012 59 125 569 758 340 40 601 2010 38 2017 41 601 123 792 2012 340 2017 46 2012 59 125 125 59 305 777 58 704 2018 40 41 601 59 865 2019 40 601 2002 38 2020 41 59 865 2019 40 601 2004 321 2005 38 2021 41 59 865 2019 40 601 582 42 2022 41 59 865 2019 40 625 2023 41 59 865 2019 40 704 2024 41 59 865 2019 40 2025 2024 41 59 865 2019 40 569 2026 41 59 2002 758 91 93 40 704 2027 41 59 601 2002 758 91 93 40 704 2027 41 601 59 306 2010 2028 40 41 601 123 792 2010 40 42 823 44 829 41 59 125 306 2010 2029 40 41 601 123 792 2010 40 42 823 44 655 41 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 126, 'CountStmt': 59, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 32, 'MaxEssential': 1, 'SumEssential': 16, 'AvgCyclomatic': 1, 'CountLineCode': 115, 'CountStmtDecl': 28, 'MaxCyclomatic': 3, 'SumCyclomatic': 24, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 19, 'AltCountLineCode': 115, 'CountLineCodeExe': 64, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 97, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 25, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 100, 'CountDeclMethodPublic': 17, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 24, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 24, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98787,C++,"class ods_formula_parse_context {
public:
    ods_formula_parse_context() :
        nStartToken(0),
        pszInput(nullptr),
        pszNext(nullptr),
        poRoot(nullptr) {}

    int        nStartToken;
    const char *pszInput;
    const char *pszNext;

    ods_formula_node *poRoot;
};",0,587 2000 123 777 58 2000 40 41 58 2001 40 1500 41 44 2002 40 753 41 44 2003 40 753 41 44 2004 40 753 41 123 125 704 2001 59 601 582 42 2002 59 601 582 42 2003 59 2005 42 2004 59 125 59 ,"{'AvgLine': 5, 'CountLine': 14, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 12, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98793,C++,"class JPGMaskBand final: public GDALRasterBand
{
  protected:
    virtual CPLErr IReadBlock( int, int, void * ) override;

  public:
    explicit JPGMaskBand( JPGDatasetCommon *poDS );
    virtual ~JPGMaskBand() {}
};",0,587 2000 2001 58 777 2002 123 775 58 864 2003 2004 40 704 44 704 44 865 42 41 2005 59 777 58 648 2000 40 2006 42 2007 41 59 864 126 2000 40 41 123 125 125 59 ,"{'AvgLine': 17, 'CountLine': 61, 'CountStmt': 30, 'MaxNesting': 3, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 26, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 3, 'CountLineCode': 51, 'CountStmtDecl': 8, 'MaxCyclomatic': 7, 'SumCyclomatic': 9, 'AltAvgLineCode': 14, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 3, 'AltCountLineCode': 51, 'CountLineCodeExe': 28, 'CountLineComment': 3, 'AltAvgLineComment': 1, 'AltCountLineBlank': 8, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 97, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98798,C++,"class NullLock {
 public:
  void lock() {}
  void unlock() {}
  bool try_lock() { return true; }
};",0,587 2000 123 777 58 865 2001 40 41 123 125 865 2002 40 41 123 125 569 2003 40 41 123 792 829 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 6, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 6, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98797,C++,"class KeyNotFound : public std::invalid_argument {
 public:
  KeyNotFound() : std::invalid_argument(""key_not_found"") {}
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 41 58 2001 321 2002 40 362 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 4, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 4, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 4, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98796,C++,"template <class Key, class Value, class Lock = NullLock,
          class Map = std::unordered_map<
              Key, typename std::list<KeyValuePair<Key, Value>>::iterator>>
class Cache {
 public:
  typedef KeyValuePair<Key, Value> node_type;
  typedef std::list<KeyValuePair<Key, Value>> list_type;
  typedef Map map_type;
  typedef Lock lock_type;
  using Guard = std::lock_guard<lock_type>;
  /**
   * the max size is the hard limit of keys and (maxSize + elasticity) is the
   * soft limit
   * the cache is allowed to grow till maxSize + elasticity and is pruned back
   * to maxSize keys
   * set maxSize = 0 for an unbounded cache (but in that case, you're better off
   * using a std::unordered_map
   * directly anyway! :)
   */
  explicit Cache(size_t maxSize = 64, size_t elasticity = 10)
      : maxSize_(maxSize), elasticity_(elasticity) {}
  virtual ~Cache() = default;
  size_t size() const {
    Guard g(lock_);
    return cache_.size();
  }
  bool empty() const {
    Guard g(lock_);
    return cache_.empty();
  }
  void clear() {
    Guard g(lock_);
    cache_.clear();
    keys_.clear();
  }
  void insert(const Key& k, const Value& v) {
    Guard g(lock_);
    const auto iter = cache_.find(k);
    if (iter != cache_.end()) {
      iter->second->value = v;
      keys_.splice(keys_.begin(), keys_, iter->second);
      return;
    }

    keys_.emplace_front(k, v);
    cache_[k] = keys_.begin();
    prune();
  }
  bool tryGet(const Key& kIn, Value& vOut) {
    Guard g(lock_);
    const auto iter = cache_.find(kIn);
    if (iter == cache_.end()) {
      return false;
    }
    keys_.splice(keys_.begin(), keys_, iter->second);
    vOut = iter->second->value;
    return true;
  }
  /**
   *	The const reference returned here is only
   *    guaranteed to be valid till the next insert/delete
   */
  const Value& get(const Key& k) {
    Guard g(lock_);
    const auto iter = cache_.find(k);
    if (iter == cache_.end()) {
      throw KeyNotFound();
    }
    keys_.splice(keys_.begin(), keys_, iter->second);
    return iter->second->value;
  }
  /**
   * returns a copy of the stored object (if found)
   */
  Value getCopy(const Key& k) {
   return get(k);
  }
  bool remove(const Key& k) {
    Guard g(lock_);
    auto iter = cache_.find(k);
    if (iter == cache_.end()) {
      return false;
    }
    keys_.erase(iter->second);
    cache_.erase(iter);
    return true;
  }
  bool contains(const Key& k) {
    Guard g(lock_);
    return cache_.find(k) != cache_.end();
  }

  bool getOldestEntry(Key& kOut, Value& vOut) {
    Guard g(lock_);
    if( keys_.empty() ) {
        return false;
    }
    kOut = keys_.back().key;
    vOut = keys_.back().value;
    return true;
  }

  size_t getMaxSize() const { return maxSize_; }
  size_t getElasticity() const { return elasticity_; }
  size_t getMaxAllowedSize() const { return maxSize_ + elasticity_; }
  template <typename F>
  void cwalk(F& f) const {
    Guard g(lock_);
    std::for_each(keys_.begin(), keys_.end(), f);
  }

  Cache(Cache&& other):
    cache_(std::move(other.cache_)),
    keys_(std::move(other.keys_)),
    maxSize_(other.maxSize_),
    elasticity_(other.elasticity_) {}

 protected:
  size_t prune() {
    size_t maxAllowed = maxSize_ + elasticity_;
    if (maxSize_ == 0 || cache_.size() <= maxAllowed) { /* ERO: changed < to <= */
      return 0;
    }
    size_t count = 0;
    while (cache_.size() > maxSize_) {
      cache_.erase(keys_.back().key);
      keys_.pop_back();
      ++count;
    }
    return count;
  }

 private:
  // Disallow copying.
  Cache(const Cache&) = delete;
  Cache& operator=(const Cache&) = delete;

  mutable Lock lock_{};
  Map cache_{};
  list_type keys_{};
  size_t maxSize_;
  size_t elasticity_;
};",0,822 60 587 2000 44 587 2001 44 587 2002 61 2003 44 587 2004 61 2005 321 2006 60 2000 44 835 2005 321 2007 60 2008 60 2000 44 2001 355 321 2009 355 587 2010 123 777 58 833 2008 60 2000 44 2001 62 2011 59 833 2005 321 2007 60 2008 60 2000 44 2001 355 2012 59 833 2004 2013 59 833 2002 2014 59 860 2015 61 2005 321 2016 60 2014 62 59 306 648 2010 40 2017 2018 61 1503 44 2017 2019 61 1502 41 58 2020 40 2018 41 44 2021 40 2019 41 123 125 864 126 2010 40 41 61 613 59 2017 2022 40 41 601 123 2015 2023 40 2024 41 59 792 2025 46 2022 40 41 59 125 569 2026 40 41 601 123 2015 2027 40 2028 41 59 792 2029 46 2026 40 41 59 125 865 2030 40 41 123 2015 2031 40 2032 41 59 2033 46 2030 40 41 59 2034 46 2030 40 41 59 125 865 2035 40 601 2000 38 2036 44 601 2001 38 2037 41 123 2015 2038 40 2039 41 59 601 561 2040 61 2041 46 2042 40 2036 41 59 688 40 2040 340 2041 46 2043 40 41 41 123 2040 354 2044 354 2045 61 2037 59 2046 46 2047 40 2046 46 2048 40 41 44 2046 44 2040 354 2044 41 59 792 59 125 2049 46 2050 40 2036 44 2037 41 59 2041 91 2036 93 61 2049 46 2051 40 41 59 2052 40 41 59 125 569 2053 40 601 2000 38 2054 44 2001 38 2055 41 123 2015 2056 40 2057 41 59 601 561 2058 61 2059 46 2060 40 2054 41 59 688 40 2058 323 2059 46 2061 40 41 41 123 792 655 59 125 2062 46 2063 40 2062 46 2064 40 41 44 2062 44 2058 354 2065 41 59 2055 61 2058 354 2065 354 2066 59 792 829 59 125 306 601 2001 38 2067 40 601 2000 38 2036 41 123 2015 2068 40 2069 41 59 601 561 2070 61 2071 46 2072 40 2036 41 59 688 40 2070 323 2071 46 2073 40 41 41 123 825 2074 40 41 59 125 2075 46 2076 40 2075 46 2077 40 41 44 2075 44 2070 354 2078 41 59 792 2070 354 2078 354 2079 59 125 306 2001 2080 40 601 2000 38 2036 41 123 792 2067 40 2036 41 59 125 569 2081 40 601 2000 38 2036 41 123 2015 2082 40 2083 41 59 561 2084 61 2085 46 2086 40 2036 41 59 688 40 2084 323 2085 46 2087 40 41 41 123 792 655 59 125 2088 46 2089 40 2084 354 2090 41 59 2085 46 2089 40 2084 41 59 792 829 59 125 569 2091 40 601 2000 38 2036 41 123 2015 2092 40 2093 41 59 792 2094 46 2095 40 2036 41 340 2094 46 2096 40 41 59 125 569 2097 40 2000 38 2098 44 2001 38 2055 41 123 2015 2099 40 2100 41 59 688 40 2101 46 2026 40 41 41 123 792 655 59 125 2098 61 2101 46 2102 40 41 46 2103 59 2055 61 2101 46 2102 40 41 46 2104 59 792 829 59 125 2017 2105 40 41 601 123 792 2020 59 125 2017 2106 40 41 601 123 792 2021 59 125 2017 2107 40 41 601 123 792 2020 43 2021 59 125 822 60 835 2108 62 865 2109 40 2108 38 2110 41 601 123 2015 2111 40 2112 41 59 2005 321 2113 40 2114 46 2115 40 41 44 2114 46 2116 40 41 44 2110 41 59 125 2010 40 2010 307 2117 41 58 2118 40 2005 321 2119 40 2117 46 2118 41 41 44 2120 40 2005 321 2119 40 2117 46 2120 41 41 44 2020 40 2117 46 2020 41 44 2021 40 2117 46 2021 41 123 125 775 58 2017 2121 40 41 123 2017 2122 61 2020 43 2021 59 688 40 2020 323 1500 309 2118 46 2022 40 41 329 2122 41 123 305 792 1500 59 125 2017 2123 61 1500 59 870 40 2118 46 2022 40 41 62 2020 41 123 2118 46 2124 40 2120 46 2125 40 41 46 2126 41 59 2120 46 2127 40 41 59 349 2123 59 125 792 2123 59 125 773 58 330 2010 40 601 2010 38 41 61 619 59 2010 38 758 61 40 601 2010 38 41 61 619 59 740 2002 2128 123 125 59 2004 2118 123 125 59 2012 2120 123 125 59 2017 2020 59 2017 2021 59 125 59 ,"{'AvgLine': 5, 'CountLine': 140, 'CountStmt': 93, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 43, 'MaxEssential': 1, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 116, 'CountStmtDecl': 50, 'MaxCyclomatic': 3, 'SumCyclomatic': 24, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 20, 'AltCountLineCode': 116, 'CountLineCodeExe': 65, 'CountLineComment': 18, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 34, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.16', 'AltCountLineComment': 18, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 25, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 17, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 61, 'SumCyclomaticModified': 24, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 20, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
98804,C++,"    class PCIDSKBinarySegment
    {
    public:
        virtual const char* GetBuffer(void) const = 0;
        virtual unsigned int GetBufferSize(void) const = 0;
        virtual void SetBuffer(const char* pabyBuf,
            unsigned int nBufSize) = 0;

        // Virtual destructor
        virtual ~PCIDSKBinarySegment() {}
    };",0,587 2000 123 777 58 864 601 582 42 2001 40 865 41 601 61 1500 59 864 856 704 2002 40 865 41 601 61 1500 59 864 865 2003 40 601 582 42 2004 44 856 704 2005 41 61 1500 59 330 864 126 2000 40 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 11, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 9, 'CountLineCodeExe': 0, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98805,C++,"    class PCIDSK_DLL MutexHolder
    {
    public:
        MutexHolder( Mutex *mutexIn )
        {
            this->mutex = mutexIn;
            if( mutex != nullptr )
                mutex->Acquire();
        }
        ~MutexHolder()
        {
            if( mutex )
                mutex->Release();
        }

        void Release()
        {
            if (mutex)
            {
                mutex->Release();
                mutex = nullptr;
            }
        }

    private:
        Mutex     *mutex;

    };",0,587 2000 2001 123 777 58 2001 40 2002 42 2003 41 123 823 354 2004 61 2003 59 688 40 2004 340 753 41 2004 354 2005 40 41 59 125 126 2001 40 41 123 688 40 2006 41 2006 354 2007 40 41 59 125 865 2008 40 41 123 688 40 2009 41 123 2009 354 2008 40 41 59 2009 61 753 59 125 125 773 58 2002 42 2010 59 125 59 ,"{'AvgLine': 6, 'CountLine': 28, 'CountStmt': 12, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 25, 'CountStmtDecl': 4, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 25, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 25, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98821,C++,"class CPL_DLL IOGRTransactionBehaviour
{
    public:
        virtual ~IOGRTransactionBehaviour();

        /** Start a transaction.
        *
        * The implementation may update the poDSInOut reference by closing
        * and reopening the datasource (or assigning it to NULL in case of error).
        * In which case bOutHasReopenedDS must be set to TRUE.
        *
        * The implementation can for example backup the existing files/directories
        * that compose the current datasource.
        *
        * @param poDSInOut datasource handle that may be modified
        * @param bOutHasReopenedDS output boolean to indicate if datasource has been closed
        * @return OGRERR_NONE in case of success
        */
       virtual OGRErr StartTransaction(OGRDataSource*& poDSInOut,
                                       int& bOutHasReopenedDS) = 0;

        /** Commit a transaction.
        *
        * The implementation may update the poDSInOut reference by closing
        * and reopening the datasource (or assigning it to NULL in case of error).
        * In which case bOutHasReopenedDS must be set to TRUE.
        *
        * The implementation can for example remove the backup it may have done
        * at StartTransaction() time.
        *
        * @param poDSInOut datasource handle that may be modified
        * @param bOutHasReopenedDS output boolean to indicate if datasource has been closed
        * @return OGRERR_NONE in case of success
        */
       virtual OGRErr CommitTransaction(OGRDataSource*& poDSInOut,
                                        int& bOutHasReopenedDS) = 0;

        /** Rollback a transaction.
        *
        * The implementation may update the poDSInOut reference by closing
        * and reopening the datasource (or assigning it to NULL in case of error).
        * In which case bOutHasReopenedDS must be set to TRUE.
        *
        * The implementation can for example restore the backup it may have done
        * at StartTransaction() time.
        *
        * @param poDSInOut datasource handle that may be modified
        * @param bOutHasReopenedDS output boolean to indicate if datasource has been closed
        * @return OGRERR_NONE in case of success
        */
       virtual OGRErr RollbackTransaction(OGRDataSource*& poDSInOut,
                                          int& bOutHasReopenedDS) = 0;
};",0,587 2000 2001 123 777 58 864 126 2001 40 41 59 306 864 2002 2003 40 2004 42 38 2005 44 704 38 2006 41 61 1500 59 306 864 2002 2007 40 2004 42 38 2005 44 704 38 2006 41 61 1500 59 306 864 2002 2008 40 2004 42 38 2005 44 704 38 2006 41 61 1500 59 125 59 ,"{'AvgLine': 3, 'CountLine': 56, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 14, 'CountLineCodeExe': 0, 'CountLineComment': 39, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '2.79', 'AltCountLineComment': 39, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98830,C++,"class OGRSXFDriver final: public GDALDriver
{
  public:
                ~OGRSXFDriver();

    static GDALDataset* Open( GDALOpenInfo * );
    static int          Identify( GDALOpenInfo * );
    static CPLErr       DeleteDataSource(const char* pszName);
};",0,587 2000 2001 58 777 2002 123 777 58 126 2000 40 41 59 809 2003 42 2004 40 2005 42 41 59 809 704 2006 40 2005 42 41 59 809 2007 2008 40 601 582 42 2009 41 59 125 59 ,"{'AvgLine': 18, 'CountLine': 82, 'CountStmt': 29, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 23, 'MaxEssential': 4, 'SumEssential': 7, 'AvgCyclomatic': 3, 'CountLineCode': 65, 'CountStmtDecl': 10, 'MaxCyclomatic': 4, 'SumCyclomatic': 12, 'AltAvgLineCode': 14, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 4, 'AltCountLineCode': 65, 'CountLineCodeExe': 31, 'CountLineComment': 4, 'AltAvgLineComment': 1, 'AltCountLineBlank': 13, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 38, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98844,C++,"class OGRPLScenesDataV1FeatureDefn final: public OGRFeatureDefn
{
            OGRPLScenesDataV1Layer* m_poLayer;

    public:
        OGRPLScenesDataV1FeatureDefn(OGRPLScenesDataV1Layer* poLayer,
                                 const char* pszName):
                            OGRFeatureDefn(pszName), m_poLayer(poLayer) {}
       ~OGRPLScenesDataV1FeatureDefn() {}

       virtual int GetFieldCount() const override;

       void DropRefToLayer() { m_poLayer = nullptr; }
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 777 58 2000 40 2003 42 2005 44 601 582 42 2006 41 58 2002 40 2006 41 44 2004 40 2005 41 123 125 126 2000 40 41 123 125 864 704 2007 40 41 601 2008 59 865 2009 40 41 123 2004 61 753 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 20, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 17, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 43, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98851,C++,"class OGREDIGEOAttributeDef
{
    public:
        OGREDIGEOAttributeDef() {}

        CPLString osLAB; /* e.g. TEX2 */
        CPLString osTYP; /* e.g. T */
};",0,587 2000 123 777 58 2000 40 41 123 125 2001 2002 59 305 2001 2003 59 305 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 7, 'CountLineCodeExe': 1, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.29', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98852,C++,"class OGREDIGEOAttributeDescriptor
{
    public:
        OGREDIGEOAttributeDescriptor() : nWidth(0) {}

        CPLString osRID;        /* e.g. TEX2_id */
        CPLString osNameRID;    /* e.g. ID_N_ATT_TEX2 */
        int nWidth;             /* e.g. 80 */
};",0,587 2000 123 777 58 2000 40 41 58 2001 40 1500 41 123 125 2002 2003 59 305 2002 2004 59 305 704 2001 59 305 125 59 ,"{'AvgLine': 1, 'CountLine': 9, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 8, 'CountLineCodeExe': 1, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.38', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98857,C++,"class CPL_DLL CPLODBCSession {

    CPL_DISALLOW_COPY_ASSIGN(CPLODBCSession)

    CPLString m_osLastError{};
    HENV      m_hEnv = nullptr;
    HDBC      m_hDBC = nullptr;
    int       m_bInTransaction = false;
    int       m_bAutoCommit = true;

  public:
    CPLODBCSession();
    ~CPLODBCSession();

    int         EstablishSession( const char *pszDSN,
                                  const char *pszUserid,
                                  const char *pszPassword );
    const char  *GetLastError();

    // Transaction handling

    int         ClearTransaction();
    int         BeginTransaction();
    int         CommitTransaction();
    int         RollbackTransaction();
    /** Returns whether a transaction is active */
    int         IsInTransaction() { return m_bInTransaction; }

    // Essentially internal.

    int         CloseSession();

    int         Failed( int, HSTMT = nullptr );
    /** Return connection handle */
    HDBC        GetConnection() { return m_hDBC; }
    /** Return GetEnvironment handle */
    HENV        GetEnvironment()  { return m_hEnv; }

    bool ConnectToMsAccess( const char * pszName, const char* pszDSNStringTemplate );

};",0,587 2000 2001 123 2002 40 2001 41 2003 2004 123 125 59 2005 2006 61 753 59 2007 2008 61 753 59 704 2009 61 655 59 704 2010 61 829 59 777 58 2001 40 41 59 126 2001 40 41 59 704 2011 40 601 582 42 2012 44 601 582 42 2013 44 601 582 42 2014 41 59 601 582 42 2015 40 41 59 330 704 2016 40 41 59 704 2017 40 41 59 704 2018 40 41 59 704 2019 40 41 59 306 704 2020 40 41 123 792 2009 59 125 330 704 2021 40 41 59 704 2022 40 704 44 2023 61 753 41 59 306 2007 2024 40 41 123 792 2008 59 125 306 2005 2025 40 41 123 792 2006 59 125 569 2026 40 601 582 42 2027 44 601 582 42 2028 41 59 125 59 ,"{'AvgLine': 20, 'CountLine': 328, 'CountStmt': 71, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 40, 'MaxEssential': 4, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 198, 'CountStmtDecl': 32, 'MaxCyclomatic': 7, 'SumCyclomatic': 26, 'AltAvgLineCode': 17, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 39, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 16, 'AltCountLineCode': 260, 'CountLineCodeExe': 53, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 53, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 52, 'CountLineInactive': 72, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 15, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 26, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 14, 'CountLinePreprocessor': 22, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 98, 'SumCyclomaticModified': 26, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 16, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
98856,C++,"class OGREDIGEOObjectDescriptor
{
    public:
        OGREDIGEOObjectDescriptor() {}

        CPLString osRID;        /* e.g. BATIMENT_id */
        CPLString osNameRID;    /* e.g. ID_N_OBJ_E_2_1_0 */
        CPLString osKND;        /* e.g. ARE */
        strListType aosAttrRID; /* e.g. DUR_id, TEX_id */
};",0,587 2000 123 777 58 2000 40 41 123 125 2001 2002 59 305 2001 2003 59 305 2001 2004 59 305 2005 2006 59 305 125 59 ,"{'AvgLine': 1, 'CountLine': 10, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 9, 'CountLineCodeExe': 1, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.44', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98861,C++,"class IOGRSQLiteSelectLayer
{
    public:
        virtual                     ~IOGRSQLiteSelectLayer() {}

        virtual char*&               GetAttrQueryString() = 0;
        virtual OGRFeatureQuery*&    GetFeatureQuery() = 0;
        virtual OGRGeometry*&        GetFilterGeom() = 0;
        virtual int&                 GetIGeomFieldFilter() = 0;
        virtual OGRSpatialReference* GetSpatialRef() = 0;
        virtual OGRFeatureDefn      *GetLayerDefn() = 0;
        virtual int                  InstallFilter( OGRGeometry * ) = 0;
        virtual int                  HasReadFeature() = 0;
        virtual void                 BaseResetReading() = 0;
        virtual OGRFeature          *BaseGetNextFeature() = 0;
        virtual OGRErr               BaseSetAttributeFilter(const char* pszQuery) = 0;
        virtual GIntBig              BaseGetFeatureCount(int bForce) = 0;
        virtual int                  BaseTestCapability( const char * ) = 0;
        virtual OGRErr               BaseGetExtent(OGREnvelope *psExtent, int bForce) = 0;
        virtual OGRErr               BaseGetExtent(int iGeomField, OGREnvelope *psExtent, int bForce) = 0;
};",0,587 2000 123 777 58 864 126 2000 40 41 123 125 864 582 42 38 2001 40 41 61 1500 59 864 2002 42 38 2003 40 41 61 1500 59 864 2004 42 38 2005 40 41 61 1500 59 864 704 38 2006 40 41 61 1500 59 864 2007 42 2008 40 41 61 1500 59 864 2009 42 2010 40 41 61 1500 59 864 704 2011 40 2004 42 41 61 1500 59 864 704 2012 40 41 61 1500 59 864 865 2013 40 41 61 1500 59 864 2014 42 2015 40 41 61 1500 59 864 2016 2017 40 601 582 42 2018 41 61 1500 59 864 2019 2020 40 704 2021 41 61 1500 59 864 704 2022 40 601 582 42 41 61 1500 59 864 2016 2023 40 2024 42 2025 44 704 2021 41 61 1500 59 864 2016 2023 40 704 2026 44 2024 42 2025 44 704 2021 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 21, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 16, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 16, 'AltCountLineCode': 20, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 6, 'CountClassDerived': 2, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 16, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 17, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98869,C++,"class WMSMiniDriver_IIP : public WMSMiniDriver {
public:
    WMSMiniDriver_IIP();
    virtual ~WMSMiniDriver_IIP();

public:
    virtual CPLErr Initialize(CPLXMLNode *config, char **papszOpenOptions) override;
    virtual void GetCapabilities(WMSMiniDriverCapabilities *caps) override;
    virtual CPLErr TiledImageRequest(WMSHTTPRequest &request,
                                     const GDALWMSImageRequestInfo &iri,
                                     const GDALWMSTiledImageRequestInfo &tiri) override;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 864 126 2000 40 41 59 777 58 864 2002 2003 40 2004 42 2005 44 582 42 42 2006 41 2007 59 864 865 2008 40 2009 42 2010 41 2007 59 864 2002 2011 40 2012 38 2013 44 601 2014 38 2015 44 601 2016 38 2017 41 2007 59 125 59 ,"{'AvgLine': 6, 'CountLine': 46, 'CountStmt': 20, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 42, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 42, 'CountLineCodeExe': 18, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98865,C++,"class SDTSIndexedReader
{
    int                 nIndexSize;
    SDTSFeature       **papoFeatures;

    int                 iCurrentFeature;

protected:
    DDFModule           oDDFModule;

public:
                        SDTSIndexedReader();
    virtual            ~SDTSIndexedReader();

    virtual SDTSFeature  *GetNextRawFeature() = 0;

    SDTSFeature        *GetNextFeature();

    virtual void        Rewind();

    void                FillIndex();
    void                ClearIndex();
    int                 IsIndexed() const;

    SDTSFeature        *GetIndexedFeatureRef( int );
    char **             ScanModuleReferences( const char * = ""ATID"" );

    DDFModule          *GetModule() { return &oDDFModule; }
};",0,587 2000 123 704 2001 59 2002 42 42 2003 59 704 2004 59 775 58 2005 2006 59 777 58 2000 40 41 59 864 126 2000 40 41 59 864 2002 42 2007 40 41 61 1500 59 2002 42 2008 40 41 59 864 865 2009 40 41 59 865 2010 40 41 59 865 2011 40 41 59 704 2012 40 41 601 59 2002 42 2013 40 704 41 59 582 42 42 2014 40 601 582 42 61 362 41 59 2005 42 2015 40 41 123 792 38 2006 59 125 125 59 ,"{'AvgLine': 11, 'CountLine': 139, 'CountStmt': 66, 'MaxNesting': 3, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 47, 'MaxEssential': 5, 'SumEssential': 17, 'AvgCyclomatic': 2, 'CountLineCode': 108, 'CountStmtDecl': 23, 'MaxCyclomatic': 7, 'SumCyclomatic': 24, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 31, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 11, 'AltCountLineCode': 108, 'CountLineCodeExe': 58, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 31, 'CountClassCoupled': 3, 'CountClassDerived': 4, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 27, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 63, 'SumCyclomaticModified': 24, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 1}"
98888,C++,"class OCAD_EXTERN CADClasses
{
public:
    CADClasses();

public:
    void                addClass(CADClass stClass);
    CADClass            getClassByNum(short num) const;
    void                print() const;

protected:
    std::vector<CADClass>    classes;
};",0,587 2000 2001 123 777 58 2001 40 41 59 777 58 865 2002 40 2003 2004 41 59 2003 2005 40 803 2006 41 601 59 865 2007 40 41 601 59 775 58 2008 321 2009 60 2003 62 2010 59 125 59 ,"{'AvgLine': 10, 'CountLine': 56, 'CountStmt': 21, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 52, 'CountStmtDecl': 14, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 52, 'CountLineCodeExe': 26, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 55, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
98894,C++,"class OGRSQLiteFeatureDefn final : public OGRFeatureDefn
{
    public:
        explicit OGRSQLiteFeatureDefn( const char * pszName = nullptr ) :
            OGRFeatureDefn(pszName)
        {
            SetGeomType(wkbNone);
        }

        OGRSQLiteGeomFieldDefn* myGetGeomFieldDefn(int i)
        {
            return (OGRSQLiteGeomFieldDefn*) GetGeomFieldDefn(i);
        }
};",0,587 2000 2001 58 777 2002 123 777 58 648 2000 40 601 582 42 2003 61 753 41 58 2002 40 2003 41 123 2004 40 2005 41 59 125 2006 42 2007 40 704 2008 41 123 792 40 2006 42 41 2009 40 2008 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 14, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 13, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 41, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98896,C++,"class IOGRMemLayerFeatureIterator
{
  public:
    virtual ~IOGRMemLayerFeatureIterator() {}

    virtual OGRFeature *Next() = 0;
};",0,587 2000 123 777 58 864 126 2000 40 41 123 125 864 2001 42 2002 40 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 7, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98918,C++,"class GDALWMSCache {
    friend class GDALWMSDataset;

public:
    GDALWMSCache();
    ~GDALWMSCache();

public:
    CPLErr Initialize(const char *pszUrl, CPLXMLNode *pConfig);
    CPLErr Insert(const char *pszKey, const CPLString &osFileName);
    enum GDALWMSCacheItemStatus GetItemStatus(const char *pszKey) const;
    GDALDataset* GetDataset(const char *pszKey, char **papszOpenOptions) const;
    void Clean();

protected:
    CPLString CachePath() const { return m_osCachePath; }

protected:
    CPLString m_osCachePath;
    bool m_bIsCleanThreadRunning;
    time_t m_nCleanThreadLastRunTime;

private:
    GDALWMSCacheImpl* m_poCache;
    CPLJoinableThread* m_hThread;
};",0,587 2000 123 667 587 2001 59 777 58 2000 40 41 59 126 2000 40 41 59 777 58 2002 2003 40 601 582 42 2004 44 2005 42 2006 41 59 2002 2007 40 601 582 42 2008 44 601 2009 38 2010 41 59 640 2011 2012 40 601 582 42 2008 41 601 59 2013 42 2014 40 601 582 42 2008 44 582 42 42 2015 41 601 59 865 2016 40 41 59 775 58 2009 2017 40 41 601 123 792 2018 59 125 775 58 2009 2019 59 569 2020 59 2021 2022 59 773 58 2023 42 2024 59 2025 42 2026 59 125 59 ,"{'AvgLine': 12, 'CountLine': 122, 'CountStmt': 57, 'MaxNesting': 4, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 39, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 107, 'CountStmtDecl': 23, 'MaxCyclomatic': 5, 'SumCyclomatic': 20, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 107, 'CountLineCodeExe': 45, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 23, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 42, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 52, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 3}"
98936,C++,"template <typename PolygonWriter>
class PolygonRingAppender
{
private:
    struct Ring
    {
        Ring() : points(), interiorRings() {}
        Ring( const Ring& other ) = default;
        Ring& operator=( const Ring& other ) = default;

        LineString points;

        mutable std::vector<Ring> interiorRings;

        const Ring* closestExterior = nullptr;

        bool isIn( const Ring& other ) const
        {
            // Check if this is inside other using the winding number algorithm
            auto checkPoint = this->points.front();
            int windingNum = 0;
            auto otherIter = other.points.begin();
            // p1 and p2 define each segment of the ring other that will be tested
            auto p1 = *otherIter;
            while(true) {
                otherIter++;
                if (otherIter == other.points.end()) {
                    break;
                }
                auto p2 = *otherIter;
                if ( p1.y <= checkPoint.y ) {
                    if ( p2.y  > checkPoint.y ) {
                        if ( isLeft(p1, p2, checkPoint) )  {
                             ++windingNum;
                        }
                    }
                } else {
                    if ( p2.y <= checkPoint.y ) {
                        if ( !isLeft( p1, p2, checkPoint)  ) {
                            --windingNum;
                        }
                    }
                }
                p1 = p2;
            }
            return windingNum != 0;
        }

#ifdef DEBUG
        size_t id() const
        {
            return size_t(static_cast<const void*>(this)) & 0xffff;
        }

        void print( std::ostream& ostr ) const
        {
            ostr << id() << "":"";
            for ( const auto& pt : points ) {
                ostr << pt.x << "","" << pt.y << "" "";
            }
        }
#endif
    };

    void processTree(const std::vector<Ring> &tree, int level) {
        if ( level % 2 == 0 ) {
            for( auto &r: tree ) {
                writer_.addPart(r.points);
                for( auto &innerRing: r.interiorRings ) {
                    writer_.addInteriorRing(innerRing.points);
                }
            }
        }
        for( auto &r: tree ) {
            processTree(r.interiorRings, level + 1);
        }
    }

    // level -> rings
    std::map<double, std::vector<Ring>> rings_;

    PolygonWriter& writer_;

public:
    const bool polygonize = true;

    PolygonRingAppender( PolygonWriter& writer )
        : rings_()
        , writer_( writer )
    {}

    void addLine( double level, LineString& ls, bool )
    {
        // Create a new ring from the LineString
        Ring newRing;
        newRing.points.swap( ls );
        auto &levelRings = rings_[level];
        // This queue holds the rings to be checked
        std::deque<Ring*> queue;
        std::transform(levelRings.begin(),
                       levelRings.end(),
                       std::back_inserter(queue),
                       [](Ring &r) {
                           return &r;
                       });
        Ring *parentRing = nullptr;
        while( !queue.empty() ) {
            Ring *curRing = queue.front();
            queue.pop_front();
            if ( newRing.isIn(*curRing) ) {
                // We know that there should only be one ring per level that we should fit in,
                // so we can discard the rest of the queue and try again with the children of this ring
                parentRing = curRing;
                queue.clear();
                std::transform(curRing->interiorRings.begin(),
                            curRing->interiorRings.end(),
                            std::back_inserter(queue),
                            [](Ring &r) {
                                return &r;
                            });
            }
        }
        // Get a pointer to the list we need to check for rings to include in this ring
        std::vector<Ring> *parentRingList;
        if ( parentRing == nullptr ) {
            parentRingList = &levelRings;
        } else {
            parentRingList = &(parentRing->interiorRings);
        }
        // We found a valid parent, so we need to:
        // 1. Find all the inner rings of the parent that are inside the new ring
        auto trueGroupIt = std::partition(
            parentRingList->begin(),
            parentRingList->end(),
            [newRing](Ring &pRing) {
                return !pRing.isIn(newRing);
            }
        );
        // 2. Move those rings out of the parent and into the new ring's interior rings
        std::move(trueGroupIt, parentRingList->end(), std::back_inserter(newRing.interiorRings));
        // 3. Get rid of the moved-from elements in the parent's interior rings
        parentRingList->erase(trueGroupIt, parentRingList->end());
        // 4. Add the new ring to the parent's interior rings
        parentRingList->push_back(newRing);
    }

    ~PolygonRingAppender()
    {
        // If there's no rings, nothing to do here
        if ( rings_.size() == 0 )
            return;

        // Traverse tree of rings
        for ( auto& r: rings_ ) {
            // For each level, create a multipolygon by traversing the tree of
            // rings and adding a part for every other level
            writer_.startPolygon( r.first );
            processTree(r.second, 0);
            writer_.endPolygon();
        }
    }
};",0,822 60 835 2000 62 587 2001 123 773 58 816 2002 123 2002 40 41 58 2003 40 41 44 2004 40 41 123 125 2002 40 601 2002 38 2005 41 61 613 59 2002 38 758 61 40 601 2002 38 2005 41 61 613 59 2006 2003 59 740 2007 321 2008 60 2002 62 2004 59 601 2002 42 2009 61 753 59 569 2010 40 601 2002 38 2005 41 601 123 330 561 2011 61 823 354 2003 46 2012 40 41 59 704 2013 61 1500 59 561 2014 61 2005 46 2003 46 2015 40 41 59 330 561 2016 61 42 2014 59 870 40 829 41 123 2014 349 59 688 40 2014 323 2005 46 2003 46 2017 40 41 41 123 572 59 125 561 2018 61 42 2014 59 688 40 2016 46 2019 329 2011 46 2019 41 123 688 40 2018 46 2019 62 2011 46 2019 41 123 688 40 2020 40 2016 44 2018 44 2011 41 41 123 349 2013 59 125 125 125 630 123 688 40 2018 46 2019 329 2011 46 2019 41 123 688 40 33 2021 40 2016 44 2018 44 2011 41 41 123 338 2013 59 125 125 125 2016 61 2018 59 125 792 2013 340 1500 59 125 35 689 2022 2023 2024 40 41 601 123 792 2023 40 811 60 601 865 42 62 40 823 41 41 38 1506 59 125 865 2025 40 2007 321 2026 38 2027 41 601 123 2027 332 2024 40 41 332 362 59 664 40 601 561 38 2028 58 2003 41 123 2027 332 2028 46 2029 332 362 332 2028 46 2030 332 362 59 125 125 35 636 125 59 865 2031 40 601 2032 321 2033 60 2002 62 38 2034 44 704 2035 41 123 688 40 2035 37 1502 323 1500 41 123 664 40 561 38 2036 58 2034 41 123 2037 46 2038 40 2036 46 2039 41 59 664 40 561 38 2040 58 2036 46 2041 41 123 2037 46 2042 40 2040 46 2039 41 59 125 125 125 664 40 561 38 2043 58 2034 41 123 2031 40 2043 46 2044 44 2035 43 1501 41 59 125 125 330 2032 321 2045 60 625 44 2032 321 2033 60 2002 355 2046 59 2000 38 2047 59 777 58 601 569 2048 61 829 59 2001 40 2000 38 2049 41 58 2046 40 41 44 2047 40 2049 41 123 125 865 2050 40 625 2035 44 2051 38 2052 44 569 41 123 330 2002 2053 59 2053 46 2054 46 2055 40 2052 41 59 561 38 2056 61 2046 91 2035 93 59 330 2032 321 2057 60 2002 42 62 2058 59 2032 321 2059 40 2056 46 2060 40 41 44 2056 46 2061 40 41 44 2032 321 2062 40 2058 41 44 91 93 40 2002 38 2063 41 123 792 38 2063 59 125 41 59 2002 42 2064 61 753 59 870 40 33 2058 46 2065 40 41 41 123 2002 42 2066 61 2058 46 2067 40 41 59 2058 46 2068 40 41 59 688 40 2053 46 2069 40 42 2066 41 41 123 330 330 2064 61 2066 59 2058 46 2070 40 41 59 2032 321 2059 40 2066 354 2071 46 2060 40 41 44 2066 354 2071 46 2061 40 41 44 2032 321 2062 40 2058 41 44 91 93 40 2002 38 2063 41 123 792 38 2063 59 125 41 59 125 125 330 2032 321 2033 60 2002 62 42 2072 59 688 40 2064 323 753 41 123 2072 61 38 2056 59 125 630 123 2072 61 38 40 2064 354 2073 41 59 125 330 330 561 2074 61 2032 321 2075 40 2072 354 2060 40 41 44 2072 354 2061 40 41 44 91 2053 93 40 2002 38 2076 41 123 792 33 2076 46 2077 40 2053 41 59 125 41 59 330 2032 321 2078 40 2074 44 2072 354 2061 40 41 44 2032 321 2062 40 2053 46 2079 41 41 59 330 2072 354 2080 40 2074 44 2072 354 2061 40 41 41 59 330 2072 354 2081 40 2053 41 59 125 126 2001 40 41 123 330 688 40 2046 46 2082 40 41 323 1500 41 792 59 330 664 40 561 38 2083 58 2046 41 123 330 330 2047 46 2084 40 2083 46 2085 41 59 2031 40 2083 46 2086 44 1500 41 59 2047 46 2087 40 41 59 125 125 125 59 ,"{'AvgLine': 21, 'CountLine': 161, 'CountStmt': 25, 'MaxNesting': 1, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 117, 'CountStmtDecl': 20, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 17, 'AvgLineComment': 3, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 130, 'CountLineCodeExe': 7, 'CountLineComment': 17, 'AltAvgLineComment': 3, 'AltCountLineBlank': 14, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 12, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.15', 'AltCountLineComment': 17, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 91, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98957,C++,"    class PCIDSK_DLL PCIDSKInterfaces
    {
      public:
        PCIDSKInterfaces();

        const IOInterfaces *io;

        std::string       (*MergeRelativePath)(const PCIDSK::IOInterfaces *,
                                               const std::string& base,
                                               const std::string& filename);

        EDBFile           *(*OpenEDB)(const std::string& filename, const std::string& access);

        Mutex             *(*CreateMutex)(void);

        void              (*JPEGDecompressBlock)
            ( uint8 *src_data, int src_bytes, uint8 *dst_data, int dst_bytes,
              int xsize, int ysize, eChanType pixel_type );
        void              (*JPEGCompressBlock)
            ( uint8 *src_data, int src_bytes, uint8 *dst_data, int &dst_bytes,
              int xsize, int ysize, eChanType pixel_type, int quality );

        void              (*Debug)( const char * );
    };",0,587 2000 2001 123 777 58 2001 40 41 59 601 2002 42 2003 59 2004 321 2005 40 42 2006 41 40 601 2007 321 2002 42 44 601 2004 321 2005 38 2008 44 601 2004 321 2005 38 2009 41 59 2010 42 40 42 2011 41 40 601 2004 321 2005 38 2009 44 601 2004 321 2005 38 2012 41 59 2013 42 40 42 2014 41 40 865 41 59 865 40 42 2015 41 40 2016 42 2017 44 704 2018 44 2016 42 2019 44 704 2020 44 704 2021 44 704 2022 44 2023 2024 41 59 865 40 42 2025 41 40 2016 42 2017 44 704 2018 44 2016 42 2019 44 704 38 2020 44 704 2021 44 704 2022 44 2023 2024 44 704 2026 41 59 865 40 42 2027 41 40 601 582 42 41 59 125 59 ,"{'AvgLine': 17, 'CountLine': 41, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 1, 'AltCountLineCode': 33, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 2, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 7, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98955,C++,"    class GIL_Holder
    {
            bool             m_bExclusiveLock;
            PyGILState_STATE m_eState = 0;

        public:

            explicit GIL_Holder(bool bExclusiveLock);
            virtual ~GIL_Holder();
    };",0,587 2000 123 569 2001 59 2002 2003 61 1500 59 777 58 648 2000 40 569 2004 41 59 864 126 2000 40 41 59 125 59 ,"{'AvgLine': 10, 'CountLine': 30, 'CountStmt': 11, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 28, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 28, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
98962,C++,"class PackedRTree {
    NodeItem _extent;
    NodeItem *_nodeItems = nullptr;
    uint64_t _numItems;
    uint64_t _numNodes;
    uint16_t _nodeSize;
    std::vector<std::pair<uint64_t, uint64_t>> _levelBounds;
    void init(const uint16_t nodeSize);
    void generateNodes();
    void fromData(const void *data);
public:
    ~PackedRTree() {
        if (_nodeItems != nullptr)
            delete[] _nodeItems;
    }
    PackedRTree(const std::vector<std::shared_ptr<Item>> &items, const NodeItem &extent, const uint16_t nodeSize = 16);
    PackedRTree(const std::vector<NodeItem> &nodes, const NodeItem &extent, const uint16_t nodeSize = 16);
    PackedRTree(const void *data, const uint64_t numItems, const uint16_t nodeSize = 16);
    std::vector<SearchResultItem> search(double minX, double minY, double maxX, double maxY) const;
    static std::vector<SearchResultItem> streamSearch(
        const uint64_t numItems, const uint16_t nodeSize, const NodeItem &item,
        const std::function<void(uint8_t *, size_t, size_t)> &readNode);
    static std::vector<std::pair<uint64_t, uint64_t>> generateLevelBounds(const uint64_t numItems, const uint16_t nodeSize);
    uint64_t size() const;
    static uint64_t size(const uint64_t numItems, const uint16_t nodeSize = 16);
    NodeItem getExtent() const;
    void streamWrite(const std::function<void(uint8_t *, size_t)> &writeData);
};",0,587 2000 123 2001 2002 59 2001 42 2003 61 753 59 2004 2005 59 2004 2006 59 2007 2008 59 2009 321 2010 60 2009 321 2011 60 2004 44 2004 355 2012 59 865 2013 40 601 2007 2014 41 59 865 2015 40 41 59 865 2016 40 601 865 42 2017 41 59 777 58 126 2000 40 41 123 688 40 2003 340 753 41 619 91 93 2003 59 125 2000 40 601 2009 321 2010 60 2009 321 2018 60 2019 355 38 2020 44 601 2001 38 2021 44 601 2007 2014 61 1503 41 59 2000 40 601 2009 321 2010 60 2001 62 38 2022 44 601 2001 38 2021 44 601 2007 2014 61 1503 41 59 2000 40 601 865 42 2017 44 601 2004 2023 44 601 2007 2014 61 1503 41 59 2009 321 2010 60 2024 62 2025 40 625 2026 44 625 2027 44 625 2028 44 625 2029 41 601 59 809 2009 321 2010 60 2024 62 2030 40 601 2004 2023 44 601 2007 2014 44 601 2001 38 2031 44 601 2009 321 2032 60 865 40 2033 42 44 2034 44 2034 41 62 38 2035 41 59 809 2009 321 2010 60 2009 321 2011 60 2004 44 2004 355 2036 40 601 2004 2023 44 601 2007 2014 41 59 2004 2037 40 41 601 59 809 2004 2037 40 601 2004 2023 44 601 2007 2014 61 1503 41 59 2001 2038 40 41 601 59 865 2039 40 601 2009 321 2032 60 865 40 2033 42 44 2034 41 62 38 2040 41 59 125 59 ,"{'AvgLine': 15, 'CountLine': 238, 'CountStmt': 161, 'MaxNesting': 3, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 122, 'MaxEssential': 4, 'SumEssential': 20, 'AvgCyclomatic': 2, 'CountLineCode': 198, 'CountStmtDecl': 78, 'MaxCyclomatic': 7, 'SumCyclomatic': 41, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 14, 'AltCountLineCode': 228, 'CountLineCodeExe': 135, 'CountLineComment': 8, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 21, 'CountClassDerived': 0, 'CountLineCodeDecl': 66, 'CountLineInactive': 24, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 42, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 6, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 64, 'SumCyclomaticModified': 41, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 6, 'CountDeclInstanceVariableProtected': 0}"
98960,C++,"class OGRAVCDataSource CPL_NON_FINAL: public OGRDataSource
{
  protected:
    bool                 m_bSRSFetched = false;
    OGRSpatialReference *poSRS;
    char                *pszCoverageName;

  public:
                        OGRAVCDataSource();
    virtual ~OGRAVCDataSource();

    virtual OGRSpatialReference *DSGetSpatialRef();

    const char          *GetCoverageName();
};",0,587 2000 2001 58 777 2002 123 775 58 569 2003 61 655 59 2004 42 2005 59 582 42 2006 59 777 58 2000 40 41 59 864 126 2000 40 41 59 864 2004 42 2007 40 41 59 601 582 42 2008 40 41 59 125 59 ,"{'AvgLine': 6, 'CountLine': 39, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 32, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 32, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 149, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 3}"
98977,C++,"class test_runner_singleton
{
public:

    static test_runner& get()
    {
        static test_runner tr;
        return tr;
    }
};",0,587 2000 123 777 58 809 2001 38 2002 40 41 123 809 2001 2003 59 792 2003 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 10, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 9, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98976,C++,"class test_runner
{

public:

    /**
     * Constructor
     */
    test_runner()
    {
    }

    /**
     * Stores another group for getting by name.
     */
    void register_group(const std::string& name, group_base* gr)
    {
        if (gr == nullptr)
        {
            throw tut_error(""group shall be non-null"");
        }

        if (groups_.find(name) != groups_.end())
        {
            std::string msg(""attempt to add already existent group "" + name);
            // this exception terminates application so we use cerr also
            // TODO: should this message appear in stream?
            std::cerr << msg << std::endl;
            throw tut_error(msg);
        }

        groups_.insert( std::make_pair(name, gr) );
    }

    void set_callback(callback *cb)
    {
        clear_callbacks();
        insert_callback(cb);
    }

    /**
     * Stores callback object.
     */
    void insert_callback(callback* cb)
    {
        if(cb != nullptr)
        {
            callbacks_.insert(cb);
        }
    }

    void erase_callback(callback* cb)
    {
        callbacks_.erase(cb);
    }

    void clear_callbacks()
    {
        callbacks_.clear();
    }

    /**
     * Returns callback list.
     */
    const callbacks &get_callbacks() const
    {
        return callbacks_;
    }

    void set_callbacks(const callbacks &cb)
    {
        callbacks_ = cb;
    }

    /**
     * Returns list of known test groups.
     */
    const groupnames list_groups() const
    {
        groupnames ret;
        const_iterator i = groups_.begin();
        const_iterator e = groups_.end();
        while (i != e)
        {
            ret.push_back(i->first);
            ++i;
        }
        return ret;
    }

    /**
     * Runs all tests in all groups.
     */
    void run_tests() const
    {
        cb_run_started_();

        const_iterator i = groups_.begin();
        const_iterator e = groups_.end();
        while (i != e)
        {
            cb_group_started_(i->first);
            run_all_tests_in_group_(i);
            cb_group_completed_(i->first);

            ++i;
        }

        cb_run_completed_();
    }

    /**
     * Runs all tests in specified group.
     */
    void run_tests(const std::string& group_name) const
    {
        cb_run_started_();

        const_iterator i = groups_.find(group_name);
        if (i == groups_.end())
        {
            cb_run_completed_();
            throw no_such_group(group_name);
        }

        cb_group_started_(group_name);
        run_all_tests_in_group_(i);
        cb_group_completed_(group_name);
        cb_run_completed_();
    }

    /**
     * Runs one test in specified group.
     */
    bool run_test(const std::string& group_name, int n, test_result &tr) const
    {
        cb_run_started_();

        const_iterator i = groups_.find(group_name);
        if (i == groups_.end())
        {
            cb_run_completed_();
            throw no_such_group(group_name);
        }

        cb_group_started_(group_name);

        bool t = i->second->run_test(n, tr);

        if(t && tr.result != test_result::dummy)
        {
            cb_test_completed_(tr);
        }

        cb_group_completed_(group_name);
        cb_run_completed_();

        return t;
    }

protected:

    typedef std::map<std::string, group_base*> groups;
    typedef groups::iterator iterator;
    typedef groups::const_iterator const_iterator;
    groups groups_;

    callbacks callbacks_;

private:
    friend class restartable_wrapper;

    void cb_run_started_() const
    {
        for(callbacks::const_iterator i = callbacks_.begin(); i != callbacks_.end(); ++i)
        {
            (*i)->run_started();
        }
    }

    void cb_run_completed_() const
    {
        for(callbacks::const_iterator i = callbacks_.begin(); i != callbacks_.end(); ++i)
        {
            (*i)->run_completed();
        }
    }

    void cb_group_started_(const std::string &group_name) const
    {
        for(callbacks::const_iterator i = callbacks_.begin(); i != callbacks_.end(); ++i)
        {
            (*i)->group_started(group_name);
        }
    }

    void cb_group_completed_(const std::string &group_name) const
    {
        for(callbacks::const_iterator i = callbacks_.begin(); i != callbacks_.end(); ++i)
        {
            (*i)->group_completed(group_name);
        }
    }

    void cb_test_completed_(const test_result &tr) const
    {
        for(callbacks::const_iterator i = callbacks_.begin(); i != callbacks_.end(); ++i)
        {
            (*i)->test_completed(tr);
        }
    }

    void run_all_tests_in_group_(const_iterator i) const
    {
        i->second->rewind();

        test_result tr;
        while(i->second->run_next(tr))
        {
            if(tr.result != test_result::dummy)
            {
                cb_test_completed_(tr);
            }

            if (tr.result == test_result::ex_ctor)
            {
                // test object ctor failed, skip whole group
                break;
            }
        }
    }
};",0,587 2000 123 777 58 306 2000 40 41 123 125 306 865 2001 40 601 2002 321 2003 38 2004 44 2005 42 2006 41 123 688 40 2006 323 753 41 123 825 2007 40 362 41 59 125 688 40 2008 46 2009 40 2004 41 340 2008 46 2010 40 41 41 123 2002 321 2003 2011 40 362 43 2004 41 59 330 330 2002 321 2012 332 2011 332 2002 321 2013 59 825 2014 40 2011 41 59 125 2008 46 2015 40 2002 321 2016 40 2004 44 2006 41 41 59 125 865 2017 40 2018 42 2019 41 123 2020 40 41 59 2021 40 2019 41 59 125 306 865 2022 40 2018 42 2019 41 123 688 40 2019 340 753 41 123 2023 46 2024 40 2019 41 59 125 125 865 2025 40 2018 42 2019 41 123 2026 46 2027 40 2019 41 59 125 865 2028 40 41 123 2029 46 2030 40 41 59 125 306 601 2031 38 2032 40 41 601 123 792 2033 59 125 865 2034 40 601 2031 38 2019 41 123 2035 61 2019 59 125 306 601 2036 2037 40 41 601 123 2036 2038 59 2039 2040 61 2041 46 2042 40 41 59 2039 2043 61 2041 46 2044 40 41 59 870 40 2040 340 2043 41 123 2038 46 2045 40 2040 354 2046 41 59 349 2040 59 125 792 2038 59 125 306 865 2047 40 41 601 123 2048 40 41 59 2049 2050 61 2051 46 2052 40 41 59 2049 2053 61 2051 46 2054 40 41 59 870 40 2050 340 2053 41 123 2055 40 2050 354 2056 41 59 2057 40 2050 41 59 2058 40 2050 354 2056 41 59 349 2050 59 125 2059 40 41 59 125 306 865 2047 40 601 2002 321 2003 38 2060 41 601 123 2061 40 41 59 2062 2063 61 2064 46 2065 40 2060 41 59 688 40 2063 323 2064 46 2066 40 41 41 123 2067 40 41 59 825 2068 40 2060 41 59 125 2069 40 2060 41 59 2070 40 2063 41 59 2071 40 2060 41 59 2072 40 41 59 125 306 569 2073 40 601 2002 321 2003 38 2060 44 704 2074 44 2075 38 2076 41 601 123 2077 40 41 59 2078 2079 61 2080 46 2081 40 2060 41 59 688 40 2079 323 2080 46 2082 40 41 41 123 2083 40 41 59 825 2084 40 2060 41 59 125 2085 40 2060 41 59 569 2086 61 2079 354 2087 354 2073 40 2074 44 2076 41 59 688 40 2086 307 2076 46 2088 340 2075 321 2089 41 123 2090 40 2076 41 59 125 2091 40 2060 41 59 2092 40 41 59 792 2086 59 125 775 58 833 2002 321 2093 60 2002 321 2003 44 2005 42 62 2094 59 833 2094 321 2095 2095 59 833 2094 321 2096 2096 59 2094 2097 59 2031 2098 59 773 58 667 587 2099 59 865 2100 40 41 601 123 664 40 2031 321 2096 2101 61 2098 46 2102 40 41 59 2101 340 2098 46 2103 40 41 59 349 2101 41 123 40 42 2101 41 354 2104 40 41 59 125 125 865 2105 40 41 601 123 664 40 2031 321 2096 2106 61 2098 46 2107 40 41 59 2106 340 2098 46 2108 40 41 59 349 2106 41 123 40 42 2106 41 354 2109 40 41 59 125 125 865 2110 40 601 2002 321 2003 38 2060 41 601 123 664 40 2031 321 2096 2111 61 2098 46 2112 40 41 59 2111 340 2098 46 2113 40 41 59 349 2111 41 123 40 42 2111 41 354 2114 40 2060 41 59 125 125 865 2115 40 601 2002 321 2003 38 2060 41 601 123 664 40 2031 321 2096 2116 61 2098 46 2117 40 41 59 2116 340 2098 46 2118 40 41 59 349 2116 41 123 40 42 2116 41 354 2119 40 2060 41 59 125 125 865 2120 40 601 2075 38 2076 41 601 123 664 40 2031 321 2096 2121 61 2098 46 2122 40 41 59 2121 340 2098 46 2123 40 41 59 349 2121 41 123 40 42 2121 41 354 2124 40 2076 41 59 125 125 865 2125 40 2096 2126 41 601 123 2126 354 2127 354 2128 40 41 59 2075 2076 59 870 40 2126 354 2127 354 2129 40 2076 41 41 123 688 40 2076 46 2130 340 2075 321 2131 41 123 2120 40 2076 41 59 125 688 40 2076 46 2130 323 2075 321 2132 41 123 330 572 59 125 125 125 125 59 ,"{'AvgLine': 9, 'CountLine': 232, 'CountStmt': 86, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 48, 'MaxEssential': 3, 'SumEssential': 20, 'AvgCyclomatic': 1, 'CountLineCode': 167, 'CountStmtDecl': 39, 'MaxCyclomatic': 4, 'SumCyclomatic': 29, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 38, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 18, 'AltCountLineCode': 167, 'CountLineCodeExe': 55, 'CountLineComment': 27, 'AltAvgLineComment': 0, 'AltCountLineBlank': 38, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 34, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.16', 'AltCountLineComment': 27, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 30, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 11, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 14, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 29, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 6, 'CountDeclInstanceMethod': 20, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
99008,C++,"    class SG_Exception_Dep: public SG_Exception
    {
        std::string err_msg;

        public:
            const char* get_err_msg() override { return err_msg.c_str(); }
        
        SG_Exception_Dep(const char* geometry_container, const char* arg_1, const char* arg_2);
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 2004 46 2007 40 41 59 125 2000 40 601 582 42 2008 44 601 582 42 2009 44 601 582 42 2010 41 59 125 59 ,"{'AvgLine': 6, 'CountLine': 21, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 18, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99009,C++,"    class SG_Exception_Dim_MM : public SG_Exception
    {
        std::string err_msg;

        public:
            const char* get_err_msg() override { return err_msg.c_str(); }

        SG_Exception_Dim_MM(const char* geometry_container, const char* field_1, const char *field_2);
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 2004 46 2007 40 41 59 125 2000 40 601 582 42 2008 44 601 582 42 2009 44 601 582 42 2010 41 59 125 59 ,"{'AvgLine': 6, 'CountLine': 21, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 18, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98999,C++,"    class MetadataSet
    {
    public:
        MetadataSet();
        ~MetadataSet();

        void        Initialize( PCIDSKFile *file, const std::string& group, int id );
        std::string GetMetadataValue( const std::string& key );
        void        SetMetadataValue( const std::string& key, const std::string& value );
        std::vector<std::string> GetMetadataKeys();

    private:
        PCIDSKFile  *file;

        bool         loaded;
        std::map<std::string,std::string> md_set;

        std::string  group;
        int          id;

        void         Load();
    };",0,587 2000 123 777 58 2000 40 41 59 126 2000 40 41 59 865 2001 40 2002 42 2003 44 601 2004 321 2005 38 2006 44 704 2007 41 59 2004 321 2005 2008 40 601 2004 321 2005 38 2009 41 59 865 2010 40 601 2004 321 2005 38 2009 44 601 2004 321 2005 38 2011 41 59 2004 321 2012 60 2004 321 2005 62 2013 40 41 59 773 58 2002 42 2003 59 569 2014 59 2004 321 2015 60 2004 321 2005 44 2004 321 2005 62 2016 59 2004 321 2005 2006 59 704 2007 59 865 2017 40 41 59 125 59 ,"{'AvgLine': 14, 'CountLine': 123, 'CountStmt': 58, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 44, 'MaxEssential': 4, 'SumEssential': 10, 'AvgCyclomatic': 2, 'CountLineCode': 95, 'CountStmtDecl': 19, 'MaxCyclomatic': 5, 'SumCyclomatic': 20, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 24, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 7, 'AltCountLineCode': 95, 'CountLineCodeExe': 48, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 24, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 51, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
99005,C++,"    class SG_Exception_BadFeature : public SG_Exception
    {
        std::string err_msg;

        public:
            const char* get_err_msg() override { return err_msg.c_str(); }
        
        SG_Exception_BadFeature() : err_msg(""Unsupported or unrecognized feature type."") {}
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 2004 46 2007 40 41 59 125 2000 40 41 58 2004 40 362 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 9, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 7, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99007,C++,"    class SG_Exception_BadSum : public SG_Exception
    {
        std::string err_msg;

        public:
            const char* get_err_msg() override { return err_msg.c_str(); }
        
        SG_Exception_BadSum(const char* geometry_container, const char* arg_1, const char* arg_2);
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 2004 46 2007 40 41 59 125 2000 40 601 582 42 2008 44 601 582 42 2009 44 601 582 42 2010 41 59 125 59 ,"{'AvgLine': 7, 'CountLine': 22, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 19, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99013,C++,"    class SG_Exception_Not1D : public SG_Exception
    {
        std::string err_msg;

        public:
            const char* get_err_msg() override { return err_msg.c_str(); }
        
        SG_Exception_Not1D() : err_msg(""A node coordinates axis variable or node_counts is not one dimensional."") {}
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 2004 46 2007 40 41 59 125 2000 40 41 58 2004 40 362 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 9, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 7, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99011,C++,"    class SG_Exception_Existential: public SG_Exception
    {
        std::string err_msg;

        public:
            const char* get_err_msg() override { return err_msg.c_str(); }
        
        SG_Exception_Existential(const char* geometry_container, const char* missing_name);
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 2004 46 2007 40 41 59 125 2000 40 601 582 42 2008 44 601 582 42 2009 41 59 125 59 ,"{'AvgLine': 5, 'CountLine': 18, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 15, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99012,C++,"    class SG_Exception_General_Malformed : public SG_Exception
    {
        std::string err_msg;

        public:
            const char* get_err_msg() override { return err_msg.c_str(); }
        
        explicit SG_Exception_General_Malformed(const char*); 
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 2004 46 2007 40 41 59 125 648 2000 40 601 582 42 41 59 125 59 ,"{'AvgLine': 4, 'CountLine': 16, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 13, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99024,C++,"class Blob : public Sized {
 public:
  Blob(const uint8_t *data_buf, uint8_t byte_width)
      : Sized(data_buf, byte_width) {}

  static Blob EmptyBlob() {
    static const uint8_t empty_blob[] = { 0 /*len*/ };
    return Blob(empty_blob + 1, 1);
  }
  bool IsTheEmptyBlob() const { return data_ == EmptyBlob().data_; }
  const uint8_t *data() const { return data_; }
};",0,587 2000 58 777 2001 123 777 58 2000 40 601 2002 42 2003 44 2002 2004 41 58 2001 40 2003 44 2004 41 123 125 809 2000 2005 40 41 123 809 601 2002 2006 91 93 61 123 1500 305 125 59 792 2000 40 2006 43 1501 44 1501 41 59 125 569 2007 40 41 601 123 792 2008 323 2005 40 41 46 2008 59 125 601 2002 42 2009 40 41 601 123 792 2010 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 12, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 11, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99033,C++,"class Vector : public Sized {
 public:
  Vector(const uint8_t *data, uint8_t byte_width) : Sized(data, byte_width) {}

  Reference operator[](size_t i) const;

  static Vector EmptyVector() {
    static const uint8_t empty_vector[] = { 0 /*len*/ };
    return Vector(empty_vector + 1, 1);
  }
  bool IsTheEmptyVector() const { return data_ == EmptyVector().data_; }
};",0,587 2000 58 777 2001 123 777 58 2000 40 601 2002 42 2003 44 2002 2004 41 58 2001 40 2003 44 2004 41 123 125 2005 758 91 93 40 2006 2007 41 601 59 809 2000 2008 40 41 123 809 601 2002 2009 91 93 61 123 1500 305 125 59 792 2000 40 2009 43 1501 44 1501 41 59 125 569 2010 40 41 601 123 792 2011 323 2008 40 41 46 2011 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 19, 'CountStmt': 13, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 8, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 17, 'CountLineCodeExe': 9, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99039,C++,"class WMSMiniDriver_TileService : public WMSMiniDriver {
public:
    WMSMiniDriver_TileService();
    virtual ~WMSMiniDriver_TileService();

public:
    virtual CPLErr Initialize(CPLXMLNode *config, char **papszOpenOptions) override;
    virtual CPLErr TiledImageRequest(WMSHTTPRequest &request,
                                const GDALWMSImageRequestInfo &iri,
                                const GDALWMSTiledImageRequestInfo &tiri) override;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 864 126 2000 40 41 59 777 58 864 2002 2003 40 2004 42 2005 44 582 42 42 2006 41 2007 59 864 2002 2008 40 2009 38 2010 44 601 2011 38 2012 44 601 2013 38 2014 41 2007 59 125 59 ,"{'AvgLine': 7, 'CountLine': 42, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 8, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 36, 'CountLineCodeExe': 16, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99050,C++,    RegisterMinidriver(OGCAPIMaps);,0,2000 40 2001 41 59 ,"{'AvgLine': 19, 'CountLine': 19, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 15, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99048,C++,    RegisterMinidriver(MRF);,0,2000 40 2001 41 59 ,"{'AvgLine': 20, 'CountLine': 20, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 16, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 16, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 16, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99052,C++,    RegisterMinidriver(TileService);,0,2000 40 2001 41 59 ,"{'AvgLine': 27, 'CountLine': 27, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 23, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 23, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 23, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 23, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99049,C++,    RegisterMinidriver(OGCAPICoverage);,0,2000 40 2001 41 59 ,"{'AvgLine': 18, 'CountLine': 18, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 14, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99061,C++,"class OGRCouchDBRowsLayer final: public OGRCouchDBLayer
{
    bool                      bAllInOne;

    virtual bool              FetchNextRows() override;

    public:
            explicit OGRCouchDBRowsLayer( OGRCouchDBDataSource* poDS );
            virtual ~OGRCouchDBRowsLayer();

    virtual void                ResetReading() override;

    bool                        BuildFeatureDefn();

    virtual CouchDBLayerType    GetLayerType() override { return COUCHDB_TABLE_LAYER; }
};",0,587 2000 2001 58 777 2002 123 569 2003 59 864 569 2004 40 41 2005 59 777 58 648 2000 40 2006 42 2007 41 59 864 126 2000 40 41 59 864 865 2008 40 41 2005 59 569 2009 40 41 59 864 2010 2011 40 41 2005 123 792 2012 59 125 125 59 ,"{'AvgLine': 13, 'CountLine': 96, 'CountStmt': 46, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 38, 'MaxEssential': 3, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 77, 'CountStmtDecl': 14, 'MaxCyclomatic': 6, 'SumCyclomatic': 15, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 18, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 6, 'AltCountLineCode': 77, 'CountLineCodeExe': 50, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 18, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 105, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99076,C++,"class GMLASFakeDataset final: public GDALDataset
{
    public:
        GMLASFakeDataset() {}
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 5, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 5, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 5, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 143, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99081,C++,"class KEAMaskBand final: public GDALRasterBand
{
    int m_nSrcBand;
    kealib::KEAImageIO  *m_pImageIO; // our image access pointer - refcounted
    LockedRefCount      *m_pRefCount; // reference count of m_pImageIO
public:
    KEAMaskBand(GDALRasterBand *pParent, kealib::KEAImageIO *pImageIO, LockedRefCount *pRefCount );
    ~KEAMaskBand();

protected:
    // we just override these functions from GDALRasterBand
    virtual CPLErr IReadBlock( int, int, void * ) override;
    virtual CPLErr IWriteBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 704 2003 59 2004 321 2005 42 2006 59 330 2007 42 2008 59 330 777 58 2000 40 2002 42 2009 44 2004 321 2005 42 2010 44 2007 42 2011 41 59 126 2000 40 41 59 775 58 330 864 2012 2013 40 704 44 704 44 865 42 41 2014 59 864 2012 2015 40 704 44 704 44 865 42 41 2014 59 125 59 ,"{'AvgLine': 26, 'CountLine': 118, 'CountStmt': 49, 'MaxNesting': 1, 'AvgLineCode': 22, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 31, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 3, 'CountLineCode': 103, 'CountStmtDecl': 18, 'MaxCyclomatic': 5, 'SumCyclomatic': 15, 'AltAvgLineCode': 22, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 103, 'CountLineCodeExe': 39, 'CountLineComment': 11, 'AltAvgLineComment': 2, 'AltCountLineBlank': 6, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 98, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99085,C++,"class GMLASErrorHandler : public ErrorHandler
{
    public:
        GMLASErrorHandler () : m_bFailed (false),
                               m_bSchemaFullChecking (false),
                               m_bHandleMultipleImports (false)   {}

        void SetSchemaFullCheckingEnabled(bool b)
                                            { m_bSchemaFullChecking = b; }

        void SetHandleMultipleImportsEnabled(bool b)
                                            { m_bHandleMultipleImports = b; }

        bool hasFailed () const { return m_bFailed; }

        virtual void warning (const SAXParseException& e) override;
        virtual void error (const SAXParseException& e) override;
        virtual void fatalError (const SAXParseException& e) override;

        virtual void resetErrors () override { m_bFailed = false; }

    private:
        bool m_bFailed;
        bool m_bSchemaFullChecking;
        bool m_bHandleMultipleImports;

        void handle (const SAXParseException& e, CPLErr eErr);
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 58 2002 40 655 41 44 2003 40 655 41 44 2004 40 655 41 123 125 865 2005 40 569 2006 41 123 2003 61 2006 59 125 865 2007 40 569 2006 41 123 2004 61 2006 59 125 569 2008 40 41 601 123 792 2002 59 125 864 865 2009 40 601 2010 38 2011 41 2012 59 864 865 2013 40 601 2010 38 2011 41 2012 59 864 865 2014 40 601 2010 38 2011 41 2012 59 864 865 2015 40 41 2012 123 2002 61 655 59 125 773 58 569 2002 59 569 2003 59 569 2004 59 865 2016 40 601 2010 38 2011 44 2017 2018 41 59 125 59 ,"{'AvgLine': 5, 'CountLine': 71, 'CountStmt': 27, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 62, 'CountStmtDecl': 17, 'MaxCyclomatic': 3, 'SumCyclomatic': 11, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 62, 'CountLineCodeExe': 16, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 78, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99094,C++,"class ExponentialLevelRangeIterator
{
public:
    typedef RangeIterator<ExponentialLevelRangeIterator> Iterator;
    ExponentialLevelRangeIterator( double base ) : base_( base ), base_ln_( std::log( base_ ) ) {}

    double level( int idx ) const
    {
        if ( idx <= 0 )
            return 0.0;
        return std::pow( base_, idx - 1);
    }

    Range<Iterator> range( double min, double max ) const
    {
        if ( min > max )
            std::swap(min, max);

        int i1 = index1( min );
        double l1 = fudge( level( i1 ), min );
        if ( l1 > min )
            i1 = index1(l1 );
        Iterator b( *this, i1 );

        if ( min == max )
            return Range<Iterator>( b, b );

        int i2 = index2( max );
        double l2 = fudge( level( i2 ), max );
        if ( l2 > max )
            i2 = index2( l2 );
        Iterator e( *this, i2 );

        // Arbitrary threshold to avoid too much computation time and memory
        // consumption
        if( i2 > i1 + static_cast<double>(knMAX_NUMBER_LEVELS) )
            throw TooManyLevelsException();

        return Range<Iterator>( b, e );
    }

private:
    int index1( double plevel ) const
    {
        if ( plevel < 1.0 )
            return 1;
        const double dfVal = ceil(std::log( plevel ) / base_ln_)+1;
        if( !(dfVal >= INT_MIN && dfVal < INT_MAX) )
            throw TooManyLevelsException();
        return static_cast<int>(dfVal);
    }
    int index2( double plevel ) const
    {
        if ( plevel < 1.0 )
            return 0;
        const double dfVal = floor(std::log( plevel ) / base_ln_)+1+1;
        if( !(dfVal >= INT_MIN && dfVal < INT_MAX) )
            throw TooManyLevelsException();
        return static_cast<int>(dfVal);
    }

    // exponentiation base
    const double base_;
    const double base_ln_;
};",0,587 2000 123 777 58 833 2001 60 2000 62 2002 59 2000 40 625 2003 41 58 2004 40 2003 41 44 2005 40 2006 321 2007 40 2004 41 41 123 125 625 2008 40 704 2009 41 601 123 688 40 2009 329 1500 41 792 1500 59 792 2006 321 2010 40 2004 44 2009 45 1501 41 59 125 2011 60 2002 62 2012 40 625 2013 44 625 2014 41 601 123 688 40 2013 62 2014 41 2006 321 2015 40 2013 44 2014 41 59 704 2016 61 2017 40 2013 41 59 625 2018 61 2019 40 2008 40 2016 41 44 2013 41 59 688 40 2018 62 2013 41 2016 61 2017 40 2018 41 59 2002 2020 40 42 823 44 2016 41 59 688 40 2013 323 2014 41 792 2011 60 2002 62 40 2020 44 2020 41 59 704 2021 61 2022 40 2014 41 59 625 2023 61 2019 40 2008 40 2021 41 44 2014 41 59 688 40 2023 62 2014 41 2021 61 2022 40 2023 41 59 2002 2024 40 42 823 44 2021 41 59 330 330 688 40 2021 62 2016 43 811 60 625 62 40 2025 41 41 825 2026 40 41 59 792 2011 60 2002 62 40 2020 44 2024 41 59 125 773 58 704 2027 40 625 2028 41 601 123 688 40 2028 60 1501 41 792 1501 59 601 625 2029 61 2030 40 2006 321 2007 40 2028 41 47 2005 41 43 1501 59 688 40 33 40 2029 325 2031 307 2029 60 2032 41 41 825 2033 40 41 59 792 811 60 704 62 40 2029 41 59 125 704 2034 40 625 2028 41 601 123 688 40 2028 60 1501 41 792 1500 59 601 625 2035 61 2036 40 2006 321 2007 40 2028 41 47 2005 41 43 1501 43 1501 59 688 40 33 40 2035 325 2037 307 2035 60 2038 41 41 825 2039 40 41 59 792 811 60 704 62 40 2035 41 59 125 330 601 625 2004 59 601 625 2005 59 125 59 ,"{'AvgLine': 10, 'CountLine': 65, 'CountStmt': 42, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 33, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 3, 'CountLineCode': 53, 'CountStmtDecl': 17, 'MaxCyclomatic': 6, 'SumCyclomatic': 15, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 53, 'CountLineCodeExe': 33, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 64, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99095,C++,"    class PCIDSKEphemerisSegment
    {
    public:

        // Virtual destructor
        virtual ~PCIDSKEphemerisSegment() {}

        virtual const EphemerisSeg_t& GetEphemeris() const=0;
        virtual void SetEphemeris(const EphemerisSeg_t& oEph) =0;
    };",0,587 2000 123 777 58 330 864 126 2000 40 41 123 125 864 601 2001 38 2002 40 41 601 61 1500 59 864 865 2003 40 601 2001 38 2004 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 10, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99109,C++,"class GDALPDFObjectNum
{
        int m_nId;

    public:
        explicit GDALPDFObjectNum(int nId = 0): m_nId(nId) {}
        GDALPDFObjectNum(const GDALPDFObjectNum& other) = default;
        GDALPDFObjectNum& operator=(const GDALPDFObjectNum&) = default;
        GDALPDFObjectNum& operator=(int nId) { m_nId = nId; return *this; }

        int toInt() const { return m_nId; }
        bool toBool() const { return m_nId > 0; }
        bool operator==(const GDALPDFObjectNum& other) const { return m_nId == other.m_nId; }
        bool operator<(const GDALPDFObjectNum& other) const { return m_nId < other.m_nId; }
};",0,587 2000 123 704 2001 59 777 58 648 2000 40 704 2002 61 1500 41 58 2001 40 2002 41 123 125 2000 40 601 2000 38 2003 41 61 613 59 2000 38 758 61 40 601 2000 38 41 61 613 59 2000 38 758 61 40 704 2002 41 123 2001 61 2002 59 792 42 823 59 125 704 2004 40 41 601 123 792 2001 59 125 569 2005 40 41 601 123 792 2001 62 1500 59 125 569 758 323 40 601 2000 38 2003 41 601 123 792 2001 323 2003 46 2001 59 125 569 758 60 40 601 2000 38 2003 41 601 123 792 2001 60 2003 46 2001 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 13, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 11, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 11, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99107,C++,"class GDALPDFDictionaryRW : public GDALPDFDictionary
{
    private:
        std::map<CPLString, GDALPDFObject*> m_map;

    public:
                               GDALPDFDictionaryRW();
        virtual               ~GDALPDFDictionaryRW();

        virtual GDALPDFObject*                       Get(const char* pszKey) override;
        virtual std::map<CPLString, GDALPDFObject*>& GetValues() override;

        GDALPDFDictionaryRW&   Add(const char* pszKey, GDALPDFObject* poVal);
        GDALPDFDictionaryRW&   Remove(const char* pszKey);

        GDALPDFDictionaryRW&   Add(const char* pszKey, GDALPDFArrayRW* poArray) { return Add(pszKey, GDALPDFObjectRW::CreateArray(poArray)); }
        GDALPDFDictionaryRW&   Add(const char* pszKey, GDALPDFDictionaryRW* poDict) { return Add(pszKey, GDALPDFObjectRW::CreateDictionary(poDict)); }
        GDALPDFDictionaryRW&   Add(const char* pszKey, const char* pszVal) { return Add(pszKey, GDALPDFObjectRW::CreateString(pszVal)); }
        GDALPDFDictionaryRW&   Add(const char* pszKey, int nVal) { return Add(pszKey, GDALPDFObjectRW::CreateInt(nVal)); }
        GDALPDFDictionaryRW&   Add(const char* pszKey, double dfVal, int bCanRepresentRealAsString = FALSE) { return Add(pszKey, GDALPDFObjectRW::CreateReal(dfVal, bCanRepresentRealAsString)); }
        GDALPDFDictionaryRW&   Add(const char* pszKey, const GDALPDFObjectNum& nNum, int nGen) { return Add(pszKey, GDALPDFObjectRW::CreateIndirect(nNum, nGen)); }
};",0,587 2000 58 777 2001 123 773 58 2002 321 2003 60 2004 44 2005 42 62 2006 59 777 58 2000 40 41 59 864 126 2000 40 41 59 864 2005 42 2007 40 601 582 42 2008 41 2009 59 864 2002 321 2003 60 2004 44 2005 42 62 38 2010 40 41 2009 59 2000 38 2011 40 601 582 42 2008 44 2005 42 2012 41 59 2000 38 2013 40 601 582 42 2008 41 59 2000 38 2011 40 601 582 42 2008 44 2014 42 2015 41 123 792 2011 40 2008 44 2016 321 2017 40 2015 41 41 59 125 2000 38 2011 40 601 582 42 2008 44 2000 42 2018 41 123 792 2011 40 2008 44 2019 321 2020 40 2018 41 41 59 125 2000 38 2011 40 601 582 42 2008 44 601 582 42 2021 41 123 792 2011 40 2008 44 2022 321 2023 40 2021 41 41 59 125 2000 38 2011 40 601 582 42 2008 44 704 2024 41 123 792 2011 40 2008 44 2025 321 2026 40 2024 41 41 59 125 2000 38 2011 40 601 582 42 2008 44 625 2027 44 704 2028 61 2029 41 123 792 2011 40 2008 44 2030 321 2031 40 2027 44 2028 41 41 59 125 2000 38 2011 40 601 582 42 2008 44 601 2032 38 2033 44 704 2034 41 123 792 2011 40 2008 44 2035 321 2036 40 2033 44 2034 41 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 65, 'CountStmt': 30, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 59, 'CountStmtDecl': 18, 'MaxCyclomatic': 2, 'SumCyclomatic': 14, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 12, 'AltCountLineCode': 59, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 19, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99114,C++,"    class PCIDSK_DLL PCIDSK_BLUT
    {
    public:
        virtual ~PCIDSK_BLUT() {}

/**
\brief Read a LUT Segment (SEG_BLUT).

@param vBLUT  Breakpoint Pseudo-Color Table buffer into which the breakpoint
pseudo-color table is read.  It consists of a vector of BLUTEntry.

*/
        virtual void ReadBLUT(std::vector<BLUTEntry>& vBLUT) = 0;

/**
\brief Write a BLUT Segment.

@param vBLUT  Breakpoint Pseudo-Color Table buffer from which the breakpoint
pseudo-color table is written.  It consists of a vector of BLUTEntry.

*/
        virtual void WriteBLUT(const std::vector<BLUTEntry>& vBLUT) = 0;
    };",0,587 2000 2001 123 777 58 864 126 2001 40 41 123 125 306 864 865 2002 40 2003 321 2004 60 2005 62 38 2006 41 61 1500 59 306 864 865 2007 40 601 2003 321 2004 60 2005 62 38 2006 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 23, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 14, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '2.00', 'AltCountLineComment': 14, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99113,C++,"class BSBRasterBand final: public GDALPamRasterBand
{
    GDALColorTable      oCT;

  public:
    explicit    BSBRasterBand( BSBDataset * );

    CPLErr IReadBlock( int, int, void * ) override;
    GDALColorTable *GetColorTable() override;
    GDALColorInterp GetColorInterpretation() override;
};",0,587 2000 2001 58 777 2002 123 2003 2004 59 777 58 648 2000 40 2005 42 41 59 2006 2007 40 704 44 704 44 865 42 41 2008 59 2003 42 2009 40 41 2008 59 2010 2011 40 41 2008 59 125 59 ,"{'AvgLine': 14, 'CountLine': 69, 'CountStmt': 23, 'MaxNesting': 3, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 52, 'CountStmtDecl': 10, 'MaxCyclomatic': 4, 'SumCyclomatic': 8, 'AltAvgLineCode': 10, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 52, 'CountLineCodeExe': 21, 'CountLineComment': 5, 'AltAvgLineComment': 1, 'AltCountLineBlank': 12, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 132, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99147,C++,"class MessageBuilder : private detail::SliceAllocatorMember,
                       public FlatBufferBuilder {
 public:
  explicit MessageBuilder(uoffset_t initial_size = 1024)
      : FlatBufferBuilder(initial_size, &slice_allocator_, false) {}

  MessageBuilder(const MessageBuilder &other) = delete;
  MessageBuilder &operator=(const MessageBuilder &other) = delete;

  MessageBuilder(MessageBuilder &&other)
      : FlatBufferBuilder(1024, &slice_allocator_, false) {
    // Default construct and swap idiom.
    Swap(other);
  }

  /// Create a MessageBuilder from a FlatBufferBuilder.
  explicit MessageBuilder(FlatBufferBuilder &&src,
                          void (*dealloc)(void *,
                                          size_t) = &DefaultAllocator::dealloc)
      : FlatBufferBuilder(1024, &slice_allocator_, false) {
    src.Swap(*this);
    src.SwapBufAllocator(*this);
    if (buf_.capacity()) {
      uint8_t *buf = buf_.scratch_data();  // pointer to memory
      size_t capacity = buf_.capacity();   // size of memory
      slice_allocator_.slice_ = grpc_slice_new_with_len(buf, capacity, dealloc);
    } else {
      slice_allocator_.slice_ = grpc_empty_slice();
    }
  }

  /// Move-assign a FlatBufferBuilder to a MessageBuilder.
  /// Only FlatBufferBuilder with default allocator (basically, nullptr) is
  /// supported.
  MessageBuilder &operator=(FlatBufferBuilder &&src) {
    // Move construct a temporary and swap
    MessageBuilder temp(std::move(src));
    Swap(temp);
    return *this;
  }

  MessageBuilder &operator=(MessageBuilder &&other) {
    // Move construct a temporary and swap
    MessageBuilder temp(std::move(other));
    Swap(temp);
    return *this;
  }

  void Swap(MessageBuilder &other) {
    slice_allocator_.swap(other.slice_allocator_);
    FlatBufferBuilder::Swap(other);
    // After swapping the FlatBufferBuilder, we swap back the allocator, which
    // restores the original allocator back in place. This is necessary because
    // MessageBuilder's allocator is its own member (SliceAllocatorMember). The
    // allocator passed to FlatBufferBuilder::vector_downward must point to this
    // member.
    buf_.swap_allocator(other.buf_);
  }

  // Releases the ownership of the buffer pointer.
  // Returns the size, offset, and the original grpc_slice that
  // allocated the buffer. Also see grpc_slice_unref().
  uint8_t *ReleaseRaw(size_t &size, size_t &offset, grpc_slice &slice) {
    uint8_t *buf = FlatBufferBuilder::ReleaseRaw(size, offset);
    slice = slice_allocator_.slice_;
    slice_allocator_.slice_ = grpc_empty_slice();
    return buf;
  }

  ~MessageBuilder() {}

  // GetMessage extracts the subslice of the buffer corresponding to the
  // flatbuffers-encoded region and wraps it in a `Message<T>` to handle buffer
  // ownership.
  template<class T> Message<T> GetMessage() {
    auto buf_data = buf_.scratch_data();  // pointer to memory
    auto buf_size = buf_.capacity();      // size of memory
    auto msg_data = buf_.data();          // pointer to msg
    auto msg_size = buf_.size();          // size of msg
    // Do some sanity checks on data/size
    FLATBUFFERS_ASSERT(msg_data);
    FLATBUFFERS_ASSERT(msg_size);
    FLATBUFFERS_ASSERT(msg_data >= buf_data);
    FLATBUFFERS_ASSERT(msg_data + msg_size <= buf_data + buf_size);
    // Calculate offsets from the buffer start
    auto begin = msg_data - buf_data;
    auto end = begin + msg_size;
    // Get the slice we are working with (no refcount change)
    grpc_slice slice = slice_allocator_.get_slice(buf_data, buf_size);
    // Extract a subslice of the existing slice (increment refcount)
    grpc_slice subslice = grpc_slice_sub(slice, begin, end);
    // Wrap the subslice in a `Message<T>`, but don't increment refcount
    Message<T> msg(subslice, false);
    return msg;
  }

  template<class T> Message<T> ReleaseMessage() {
    Message<T> msg = GetMessage<T>();
    Reset();
    return msg;
  }

 private:
  // SliceAllocator slice_allocator_;  // part of SliceAllocatorMember
};",0,587 2000 58 773 2001 321 2002 44 777 2003 123 777 58 648 2000 40 2004 2005 61 1505 41 58 2003 40 2005 44 38 2006 44 655 41 123 125 2000 40 601 2000 38 2007 41 61 619 59 2000 38 758 61 40 601 2000 38 2007 41 61 619 59 2000 40 2000 307 2007 41 58 2003 40 1505 44 38 2006 44 655 41 123 330 2008 40 2007 41 59 125 331 648 2000 40 2003 307 2009 44 865 40 42 2010 41 40 865 42 44 2011 41 61 38 2012 321 2010 41 58 2003 40 1505 44 38 2006 44 655 41 123 2009 46 2013 40 42 823 41 59 2009 46 2014 40 42 823 41 59 688 40 2015 46 2016 40 41 41 123 2017 42 2018 61 2015 46 2019 40 41 59 330 2011 2016 61 2015 46 2016 40 41 59 330 2006 46 2020 61 2021 40 2018 44 2016 44 2010 41 59 125 630 123 2006 46 2022 61 2023 40 41 59 125 125 331 331 331 2000 38 758 61 40 2003 307 2009 41 123 330 2000 2024 40 2025 321 2026 40 2009 41 41 59 2027 40 2024 41 59 792 42 823 59 125 2000 38 758 61 40 2000 307 2007 41 123 330 2000 2028 40 2029 321 2030 40 2007 41 41 59 2031 40 2028 41 59 792 42 823 59 125 865 2032 40 2000 38 2007 41 123 2006 46 2033 40 2007 46 2006 41 59 2003 321 2032 40 2007 41 59 330 330 330 330 330 2034 46 2035 40 2007 46 2034 41 59 125 330 330 330 2036 42 2037 40 2011 38 2038 44 2011 38 2039 44 2040 38 2041 41 123 2036 42 2042 61 2003 321 2037 40 2038 44 2039 41 59 2041 61 2006 46 2043 59 2006 46 2043 61 2044 40 41 59 792 2042 59 125 126 2000 40 41 123 125 330 330 330 822 60 587 2045 62 2046 60 2045 62 2047 40 41 123 561 2048 61 2049 46 2050 40 41 59 330 561 2051 61 2049 46 2052 40 41 59 330 561 2053 61 2049 46 2054 40 41 59 330 561 2055 61 2049 46 2038 40 41 59 330 330 2056 40 2053 41 59 2056 40 2055 41 59 2056 40 2053 325 2048 41 59 2056 40 2053 43 2055 329 2048 43 2051 41 59 330 561 2057 61 2053 45 2048 59 561 2058 61 2057 43 2055 59 330 2040 2041 61 2006 46 2059 40 2048 44 2051 41 59 330 2040 2060 61 2061 40 2041 44 2057 44 2058 41 59 330 2046 60 2045 62 2062 40 2060 44 655 41 59 792 2062 59 125 822 60 587 2045 62 2046 60 2045 62 2063 40 41 123 2046 60 2045 62 2064 61 2047 60 2045 62 40 41 59 2065 40 41 59 792 2064 59 125 773 58 330 125 59 ,"{'AvgLine': 7, 'CountLine': 105, 'CountStmt': 45, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 24, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 70, 'CountStmtDecl': 27, 'MaxCyclomatic': 5, 'SumCyclomatic': 15, 'AltAvgLineCode': 6, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 12, 'AltCountLineCode': 70, 'CountLineCodeExe': 29, 'CountLineComment': 30, 'AltAvgLineComment': 1, 'AltCountLineBlank': 11, 'CountClassCoupled': 15, 'CountClassDerived': 0, 'CountLineCodeDecl': 28, 'CountLineInactive': 0, 'CountDeclMethodAll': 104, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.43', 'AltCountLineComment': 30, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99144,C++,"class Allocator {
 public:
  virtual ~Allocator() {}

  // Allocate `size` bytes of memory.
  virtual uint8_t *allocate(size_t size) = 0;

  // Deallocate `size` bytes of memory at `p` allocated by this allocator.
  virtual void deallocate(uint8_t *p, size_t size) = 0;

  // Reallocate `new_size` bytes of memory, replacing the old region of size
  // `old_size` at `p`. In contrast to a normal realloc, this grows downwards,
  // and is intended specifcally for `vector_downward` use.
  // `in_use_back` and `in_use_front` indicate how much of `old_size` is
  // actually in use at each end, and needs to be copied.
  virtual uint8_t *reallocate_downward(uint8_t *old_p, size_t old_size,
                                       size_t new_size, size_t in_use_back,
                                       size_t in_use_front) {
    FLATBUFFERS_ASSERT(new_size > old_size);  // vector_downward only grows
    uint8_t *new_p = allocate(new_size);
    memcpy_downward(old_p, old_size, new_p, new_size, in_use_back,
                    in_use_front);
    deallocate(old_p, old_size);
    return new_p;
  }

 protected:
  // Called by `reallocate_downward` to copy memory from `old_p` of `old_size`
  // to `new_p` of `new_size`. Only memory of size `in_use_front` and
  // `in_use_back` will be copied from the front and back of the old memory
  // allocation.
  void memcpy_downward(uint8_t *old_p, size_t old_size, uint8_t *new_p,
                       size_t new_size, size_t in_use_back,
                       size_t in_use_front) {
    memcpy(new_p + new_size - in_use_back, old_p + old_size - in_use_back,
           in_use_back);
    memcpy(new_p, old_p, in_use_front);
  }
};",0,587 2000 123 777 58 864 126 2000 40 41 123 125 330 864 2001 42 2002 40 2003 2004 41 61 1500 59 330 864 865 2005 40 2001 42 2006 44 2003 2004 41 61 1500 59 330 330 330 330 330 864 2001 42 2007 40 2001 42 2008 44 2003 2009 44 2003 2010 44 2003 2011 44 2003 2012 41 123 2013 40 2010 62 2009 41 59 330 2001 42 2014 61 2002 40 2010 41 59 2015 40 2008 44 2009 44 2014 44 2010 44 2011 44 2012 41 59 2005 40 2008 44 2009 41 59 792 2014 59 125 775 58 330 330 330 330 865 2016 40 2001 42 2008 44 2003 2009 44 2001 42 2017 44 2003 2010 44 2003 2011 44 2003 2012 41 123 2018 40 2017 43 2010 45 2011 44 2008 43 2009 45 2011 44 2011 41 59 2018 40 2017 44 2008 44 2012 41 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 39, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 24, 'CountLineCodeExe': 8, 'CountLineComment': 12, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.50', 'AltCountLineComment': 12, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99150,C++,"template<class T> class SerializationTraits<flatbuffers::grpc::Message<T>> {
 public:
  static grpc::Status Serialize(const flatbuffers::grpc::Message<T> &msg,
                                grpc_byte_buffer **buffer, bool *own_buffer) {
    // We are passed in a `Message<T>`, which is a wrapper around a
    // `grpc_slice`. We extract it here using `BorrowSlice()`. The const cast
    // is necessary because the `grpc_raw_byte_buffer_create` func expects
    // non-const slices in order to increment their refcounts.
    grpc_slice *slice = const_cast<grpc_slice *>(&msg.BorrowSlice());
    // Now use `grpc_raw_byte_buffer_create` to package the single slice into a
    // `grpc_byte_buffer`, incrementing the refcount in the process.
    *buffer = grpc_raw_byte_buffer_create(slice, 1);
    *own_buffer = true;
    return grpc::Status::OK;
  }

  // Deserialize by pulling the
  static grpc::Status Deserialize(ByteBuffer *buf,
                                  flatbuffers::grpc::Message<T> *msg) {
    grpc_byte_buffer *buffer = *reinterpret_cast<grpc_byte_buffer **>(buf);
    if (!buffer) {
      return ::grpc::Status(::grpc::StatusCode::INTERNAL, ""No payload"");
    }
    // Check if this is a single uncompressed slice.
    if ((buffer->type == GRPC_BB_RAW) &&
        (buffer->data.raw.compression == GRPC_COMPRESS_NONE) &&
        (buffer->data.raw.slice_buffer.count == 1)) {
      // If it is, then we can reference the `grpc_slice` directly.
      grpc_slice slice = buffer->data.raw.slice_buffer.slices[0];
      // We wrap a `Message<T>` around the slice, incrementing the refcount.
      *msg = flatbuffers::grpc::Message<T>(slice, true);
    } else {
      // Otherwise, we need to use `grpc_byte_buffer_reader_readall` to read
      // `buffer` into a single contiguous `grpc_slice`. The gRPC reader gives
      // us back a new slice with the refcount already incremented.
      grpc_byte_buffer_reader reader;
      grpc_byte_buffer_reader_init(&reader, buffer);
      grpc_slice slice = grpc_byte_buffer_reader_readall(&reader);
      grpc_byte_buffer_reader_destroy(&reader);
      // We wrap a `Message<T>` around the slice, but don't increment refcount
      *msg = flatbuffers::grpc::Message<T>(slice, false);
    }
    grpc_byte_buffer_destroy(buffer);
#if FLATBUFFERS_GRPC_DISABLE_AUTO_VERIFICATION
    return ::grpc::Status::OK;
#else
    if (msg->Verify()) {
      return ::grpc::Status::OK;
    } else {
      return ::grpc::Status(::grpc::StatusCode::INTERNAL,
                            ""Message verification failed"");
    }
#endif
  }
};",0,822 60 587 2000 62 587 2001 60 2002 321 2003 321 2004 60 2000 355 123 777 58 809 2003 321 2005 2006 40 601 2002 321 2003 321 2004 60 2000 62 38 2007 44 2008 42 42 2009 44 569 42 2010 41 123 330 330 330 330 2011 42 2012 61 602 60 2011 42 62 40 38 2007 46 2013 40 41 41 59 330 330 42 2009 61 2014 40 2012 44 1501 41 59 42 2010 61 829 59 792 2003 321 2005 321 2015 59 125 330 809 2003 321 2005 2016 40 2017 42 2018 44 2002 321 2003 321 2004 60 2000 62 42 2007 41 123 2008 42 2009 61 42 786 60 2008 42 42 62 40 2018 41 59 688 40 33 2009 41 123 792 321 2003 321 2005 40 321 2003 321 2019 321 2020 44 362 41 59 125 330 688 40 40 2009 354 2021 323 2022 41 307 40 2009 354 2023 46 2024 46 2025 323 2026 41 307 40 2009 354 2023 46 2024 46 2027 46 2028 323 1501 41 41 123 330 2029 2030 61 2009 354 2023 46 2024 46 2027 46 2031 91 1500 93 59 330 42 2007 61 2002 321 2003 321 2004 60 2000 62 40 2030 44 829 41 59 125 630 123 330 330 330 2032 2033 59 2034 40 38 2033 44 2009 41 59 2035 2036 61 2037 40 38 2033 41 59 2038 40 38 2033 41 59 330 42 2007 61 2002 321 2003 321 2004 60 2000 62 40 2036 44 655 41 59 125 2039 40 2009 41 59 35 688 2040 792 321 2003 321 2005 321 2041 59 35 630 688 40 2007 354 2042 40 41 41 123 792 321 2003 321 2005 321 2041 59 125 630 123 792 321 2003 321 2005 40 321 2003 321 2043 321 2044 44 362 41 59 125 35 636 125 125 59 ,"{'AvgLine': 25, 'CountLine': 55, 'CountStmt': 11, 'MaxNesting': 1, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 36, 'CountStmtDecl': 7, 'MaxCyclomatic': 4, 'SumCyclomatic': 5, 'AltAvgLineCode': 18, 'AvgLineComment': 6, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 40, 'CountLineCodeExe': 4, 'CountLineComment': 14, 'AltAvgLineComment': 6, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 1, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.39', 'AltCountLineComment': 14, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99174,C++,"    class PCIDSKToutinSegment
    {
    public:

        // Virtual destructor
        virtual ~PCIDSKToutinSegment() {}

        virtual SRITInfo_t GetInfo() const =0;
        virtual void SetInfo(const SRITInfo_t& poInfo) =0;
    };",0,587 2000 123 777 58 330 864 126 2000 40 41 123 125 864 2001 2002 40 41 601 61 1500 59 864 865 2003 40 601 2001 38 2004 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 10, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99175,C++,"class VSICacheChunk
{
    CPL_DISALLOW_COPY_ASSIGN(VSICacheChunk)

public:
    VSICacheChunk() = default;

    virtual ~VSICacheChunk()
    {
        VSIFree( pabyData );
    }

    bool Allocate( size_t nChunkSize )
    {
        CPLAssert( pabyData == nullptr );
        pabyData = static_cast<GByte *>(VSIMalloc( nChunkSize ));
        return (pabyData != nullptr);
    }

    vsi_l_offset   iBlock = 0;

    VSICacheChunk *poLRUPrev = nullptr;
    VSICacheChunk *poLRUNext = nullptr;

    size_t          nDataFilled = 0;
    GByte          *pabyData = nullptr;
};",0,587 2000 123 2001 40 2000 41 777 58 2000 40 41 61 613 59 864 126 2000 40 41 123 2002 40 2003 41 59 125 569 2004 40 2005 2006 41 123 2007 40 2008 323 753 41 59 2008 61 811 60 2009 42 62 40 2010 40 2006 41 41 59 792 40 2008 340 753 41 59 125 2011 2012 61 1500 59 2000 42 2013 61 753 59 2000 42 2014 61 753 59 2005 2015 61 1500 59 2016 42 2017 61 753 59 125 59 ,"{'AvgLine': 5, 'CountLine': 26, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 20, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99182,C++,"class ADSRangeLastAfter: public ADSRange
{

  public:

    /* CONSTRUCTOR */
    ADSRangeLastAfter( EnvisatFile & envfile, int  ads_idx , int mds_idx,
            const TimeDelta & line_interval ) ;
};",0,587 2000 58 777 2001 123 777 58 305 2000 40 2002 38 2003 44 704 2004 44 704 2005 44 601 2006 38 2007 41 59 125 59 ,"{'AvgLine': 66, 'CountLine': 75, 'CountStmt': 32, 'MaxNesting': 3, 'AvgLineCode': 43, 'AvgEssential': 7, 'AvgLineBlank': 15, 'CountStmtExe': 33, 'MaxEssential': 7, 'SumEssential': 7, 'AvgCyclomatic': 7, 'CountLineCode': 49, 'CountStmtDecl': 8, 'MaxCyclomatic': 7, 'SumCyclomatic': 7, 'AltAvgLineCode': 43, 'AvgLineComment': 20, 'CountClassBase': 1, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 15, 'CountDeclMethod': 1, 'AltCountLineCode': 49, 'CountLineCodeExe': 29, 'CountLineComment': 21, 'AltAvgLineComment': 20, 'AltCountLineBlank': 17, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.43', 'AltCountLineComment': 21, 'AvgCyclomaticStrict': 7, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 7, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99189,C++,"class HDF5SharedResources
{
    friend class ::HDF5Dataset;
    friend class ::BAGDataset;

    bool m_bReadOnly = true;
    hid_t            m_hHDF5 = 0;
    CPLString        m_osFilename{};
    std::shared_ptr<GDALPamMultiDim> m_poPAM{};

public:
    explicit HDF5SharedResources(const std::string& osFilename);
    ~HDF5SharedResources();

    const std::string& GetFilename() const { return m_osFilename; }

    inline hid_t GetHDF5() const { return m_hHDF5; }
    inline bool IsReadOnly() const { return m_bReadOnly; }

    const std::shared_ptr<GDALPamMultiDim>& GetPAM() { return m_poPAM; }
};",0,587 2000 123 667 587 321 2001 59 667 587 321 2002 59 569 2003 61 829 59 2004 2005 61 1500 59 2006 2007 123 125 59 2008 321 2009 60 2010 62 2011 123 125 59 777 58 648 2000 40 601 2008 321 2012 38 2013 41 59 126 2000 40 41 59 601 2008 321 2012 38 2014 40 41 601 123 792 2007 59 125 700 2004 2015 40 41 601 123 792 2005 59 125 700 569 2016 40 41 601 123 792 2003 59 125 601 2008 321 2009 60 2010 62 38 2017 40 41 123 792 2011 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 31, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 26, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 47, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99187,C++,"class DecodeEncodeException: public std::exception
{
    public:
        DecodeEncodeException() = default;
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 41 61 613 59 125 59 ,"{'AvgLine': 0, 'CountLine': 4, 'CountStmt': 0, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 4, 'CountStmtDecl': 0, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 4, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99194,C++,"class SDTSPolygonReader : public SDTSIndexedReader
{
    int         bRingsAssembled;

  public:
                SDTSPolygonReader();
    virtual    ~SDTSPolygonReader();

    int         Open( const char * );
    SDTSRawPolygon *GetNextPolygon();
    void        Close();

    SDTSFeature *GetNextRawFeature() override { return GetNextPolygon(); }

    void        AssembleRings( SDTSTransfer *, int iPolyLayer );
};",0,587 2000 58 777 2001 123 704 2002 59 777 58 2000 40 41 59 864 126 2000 40 41 59 704 2003 40 601 582 42 41 59 2004 42 2005 40 41 59 865 2006 40 41 59 2007 42 2008 40 41 2009 123 792 2005 40 41 59 125 865 2010 40 2011 42 44 704 2012 41 59 125 59 ,"{'AvgLine': 13, 'CountLine': 108, 'CountStmt': 42, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 32, 'MaxEssential': 6, 'SumEssential': 15, 'AvgCyclomatic': 2, 'CountLineCode': 70, 'CountStmtDecl': 15, 'MaxCyclomatic': 7, 'SumCyclomatic': 16, 'AltAvgLineCode': 8, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 22, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 7, 'AltCountLineCode': 70, 'CountLineCodeExe': 35, 'CountLineComment': 16, 'AltAvgLineComment': 2, 'AltCountLineBlank': 22, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.23', 'AltCountLineComment': 16, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99199,C++,"class GPBException: public std::exception
{
        std::string m_osMessage;
    public:
        explicit GPBException(int nLine): m_osMessage(
            CPLSPrintf(""Parsing error occurred at line %d"", nLine)) {}

        const char* what() const noexcept override
                                        { return m_osMessage.c_str(); }
};",0,587 2000 58 777 2001 321 2002 123 2001 321 2003 2004 59 777 58 648 2000 40 704 2005 41 58 2004 40 2006 40 362 44 2005 41 41 123 125 601 582 42 2007 40 41 601 748 2008 123 792 2004 46 2009 40 41 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 10, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 9, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99200,C++,"class CPLSafeIntOverflow: public std::exception
{
public:
    inline CPLSafeIntOverflow() {}
};",0,587 2000 58 777 2001 321 2002 123 777 58 700 2000 40 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 5, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 5, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 5, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99212,C++,"class ZarrRasterBand final: public GDALRasterBand
{
    friend class ZarrDataset;

    std::shared_ptr<GDALMDArray> m_poArray;

protected:
    CPLErr IReadBlock( int nBlockXOff, int nBlockYOff, void * pData ) override;
    CPLErr IWriteBlock( int nBlockXOff, int nBlockYOff, void * pData ) override;
    CPLErr IRasterIO( GDALRWFlag eRWFlag,
                                  int nXOff, int nYOff, int nXSize, int nYSize,
                                  void * pData, int nBufXSize, int nBufYSize,
                                  GDALDataType eBufType,
                                  GSpacing nPixelSpaceBuf,
                                  GSpacing nLineSpaceBuf,
                                  GDALRasterIOExtraArg* psExtraArg ) override;

public:
    explicit ZarrRasterBand(const std::shared_ptr<GDALMDArray>& poArray);

    double GetNoDataValue(int* pbHasNoData) override;
    CPLErr SetNoDataValue(double dfNoData) override;
    double GetOffset( int *pbSuccess = nullptr ) override;
    CPLErr SetOffset( double dfNewOffset ) override;
    double GetScale( int *pbSuccess = nullptr ) override;
    CPLErr SetScale( double dfNewScale ) override;
    const char *GetUnitType() override;
    CPLErr SetUnitType( const char * pszNewValue ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 321 2005 60 2006 62 2007 59 775 58 2008 2009 40 704 2010 44 704 2011 44 865 42 2012 41 2013 59 2008 2014 40 704 2010 44 704 2011 44 865 42 2012 41 2013 59 2008 2015 40 2016 2017 44 704 2018 44 704 2019 44 704 2020 44 704 2021 44 865 42 2012 44 704 2022 44 704 2023 44 2024 2025 44 2026 2027 44 2026 2028 44 2029 42 2030 41 2013 59 777 58 648 2000 40 601 2004 321 2005 60 2006 62 38 2031 41 59 625 2032 40 704 42 2033 41 2013 59 2008 2034 40 625 2035 41 2013 59 625 2036 40 704 42 2037 61 753 41 2013 59 2008 2038 40 625 2039 41 2013 59 625 2040 40 704 42 2037 61 753 41 2013 59 2008 2041 40 625 2042 41 2013 59 601 582 42 2043 40 41 2013 59 2008 2044 40 601 582 42 2045 41 2013 59 125 59 ,"{'AvgLine': 10, 'CountLine': 153, 'CountStmt': 52, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 147, 'CountStmtDecl': 40, 'MaxCyclomatic': 3, 'SumCyclomatic': 19, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 12, 'AltCountLineCode': 147, 'CountLineCodeExe': 42, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 45, 'CountLineInactive': 0, 'CountDeclMethodAll': 106, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 23, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 17, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99203,C++,"class restartable_wrapper
{
    test_runner& runner_;
    callbacks callbacks_;

    std::string dir_;
    std::string log_; // log file: last test being executed
    std::string jrn_; // journal file: results of all executed tests

public:
    /**
     * Default constructor.
     * @param dir Directory where to search/put log and journal files
     */
    restartable_wrapper(const std::string& dir = ""."")
        : runner_(runner.get()),
          dir_(dir)
    {
        // dozen: it works, but it would be better to use system path separator
        jrn_ = dir_ + '/' + ""journal.tut"";
        log_ = dir_ + '/' + ""log.tut"";
    }

    /**
     * Stores another group for getting by name.
     */
    void register_group(const std::string& name, group_base* gr)
    {
        runner_.register_group(name,gr);
    }

    /**
     * Stores callback object.
     */
    void set_callback(callback* cb)
    {
        callbacks_.clear();
        callbacks_.insert(cb);
    }

    void insert_callback(callback* cb)
    {
        callbacks_.insert(cb);
    }

    void erase_callback(callback* cb)
    {
        callbacks_.erase(cb);
    }

    void set_callbacks(const callbacks& cb)
    {
        callbacks_ = cb;
    }

    const callbacks& get_callbacks() const
    {
        return runner_.get_callbacks();
    }

    /**
     * Returns list of known test groups.
     */
    groupnames list_groups() const
    {
        return runner_.list_groups();
    }

    /**
     * Runs all tests in all groups.
     */
    void run_tests() const
    {
        // where last run was failed
        std::string fail_group;
        int fail_test;
        read_log_(fail_group,fail_test);
        bool fail_group_reached = (fail_group == """");

        // iterate over groups
        tut::groupnames gn = list_groups();
        tut::groupnames::const_iterator gni,gne;
        gni = gn.begin();
        gne = gn.end();
        while (gni != gne)
        {
            // skip all groups before one that failed
            if (!fail_group_reached)
            {
                if (*gni != fail_group)
                {
                    ++gni;
                    continue;
                }
                fail_group_reached = true;
            }

            // first or restarted run
            int test = (*gni == fail_group && fail_test >= 0) ? fail_test + 1 : 1;
            while(true)
            {
                // last executed test pos
                register_execution_(*gni,test);

                tut::test_result tr;
                if( !runner_.run_test(*gni,test, tr) || tr.result == test_result::dummy )
                {
                    break;
                }
                register_test_(tr);

                ++test;
            }

            ++gni;
        }

        // show final results to user
        invoke_callback_();

        // truncate files as mark of successful finish
        truncate_();
    }

private:
    /**
     * Shows results from journal file.
     */
    void invoke_callback_() const
    {
        runner_.set_callbacks(callbacks_);
        runner_.cb_run_started_();

        std::string current_group;
        std::ifstream ijournal(jrn_.c_str());
        while (ijournal.good())
        {
            tut::test_result tr;
            if( !util::deserialize(ijournal,tr) )
            {
                break;
            }
            runner_.cb_test_completed_(tr);
        }

        runner_.cb_run_completed_();
    }

    /**
     * Register test into journal.
     */
    void register_test_(const test_result& tr) const
    {
        std::ofstream ojournal(jrn_.c_str(), std::ios::app);
        util::serialize(ojournal, tr);
        ojournal << std::flush;
        if (!ojournal.good())
        {
            throw std::runtime_error(""unable to register test result in file ""
                + jrn_);
        }
    }

    /**
     * Mark the fact test going to be executed
     */
    void register_execution_(const std::string& grp, int test) const
    {
        // last executed test pos
        std::ofstream olog(log_.c_str());
        olog << util::escape(grp) << std::endl << test << std::endl << std::flush;
        if (!olog.good())
        {
            throw std::runtime_error(""unable to register execution in file ""
                + log_);
        }
    }

    /**
     * Truncate tests.
     */
    void truncate_() const
    {
        std::ofstream olog(log_.c_str());
        std::ofstream ojournal(jrn_.c_str());
    }

    /**
     * Read log file
     */
    void read_log_(std::string& fail_group, int& fail_test) const
    {
        // read failure point, if any
        std::ifstream ilog(log_.c_str());
        std::getline(ilog,fail_group);
        fail_group = util::unescape(fail_group);
        ilog >> fail_test;
        if (!ilog.good())
        {
            fail_group = """";
            fail_test = -1;
            truncate_();
        }
        else
        {
            // test was terminated...
            tut::test_result tr(fail_group, fail_test, """", tut::test_result::term);
            register_test_(tr);
        }
    }
};",0,587 2000 123 2001 38 2002 59 2003 2004 59 2005 321 2006 2007 59 2005 321 2006 2008 59 330 2005 321 2006 2009 59 330 777 58 306 2000 40 601 2005 321 2006 38 2010 61 362 41 58 2002 40 2011 46 2012 40 41 41 44 2007 40 2010 41 123 330 2009 61 2007 43 314 43 362 59 2008 61 2007 43 314 43 362 59 125 306 865 2013 40 601 2005 321 2006 38 2014 44 2015 42 2016 41 123 2002 46 2013 40 2014 44 2016 41 59 125 306 865 2017 40 2018 42 2019 41 123 2004 46 2020 40 41 59 2004 46 2021 40 2019 41 59 125 865 2022 40 2018 42 2019 41 123 2004 46 2023 40 2019 41 59 125 865 2024 40 2018 42 2019 41 123 2004 46 2025 40 2019 41 59 125 865 2026 40 601 2003 38 2019 41 123 2004 61 2019 59 125 601 2003 38 2027 40 41 601 123 792 2002 46 2027 40 41 59 125 306 2028 2029 40 41 601 123 792 2002 46 2029 40 41 59 125 306 865 2030 40 41 601 123 330 2005 321 2006 2031 59 704 2032 59 2033 40 2031 44 2032 41 59 569 2034 61 40 2031 323 362 41 59 330 2035 321 2028 2036 61 2029 40 41 59 2035 321 2028 321 2037 2038 44 2039 59 2038 61 2036 46 2040 40 41 59 2039 61 2036 46 2041 40 41 59 870 40 2038 340 2039 41 123 330 688 40 33 2034 41 123 688 40 42 2038 340 2031 41 123 349 2038 59 605 59 125 2034 61 829 59 125 330 704 2042 61 40 42 2038 323 2031 307 2032 325 1500 41 63 2032 43 1501 58 1501 59 870 40 829 41 123 330 2043 40 42 2038 44 2042 41 59 2035 321 2044 2045 59 688 40 33 2002 46 2046 40 42 2038 44 2042 44 2045 41 309 2045 46 2047 323 2044 321 2048 41 123 572 59 125 2049 40 2045 41 59 349 2042 59 125 349 2038 59 125 330 2050 40 41 59 330 2051 40 41 59 125 773 58 306 865 2052 40 41 601 123 2002 46 2026 40 2004 41 59 2002 46 2053 40 41 59 2005 321 2006 2054 59 2005 321 2055 2056 40 2009 46 2057 40 41 41 59 870 40 2056 46 2058 40 41 41 123 2059 321 2060 2061 59 688 40 33 2062 321 2063 40 2056 44 2061 41 41 123 572 59 125 2002 46 2064 40 2061 41 59 125 2002 46 2065 40 41 59 125 306 865 2066 40 601 2067 38 2068 41 601 123 2005 321 2069 2070 40 2009 46 2071 40 41 44 2005 321 2072 321 2073 41 59 2074 321 2075 40 2070 44 2068 41 59 2070 332 2005 321 2076 59 688 40 33 2070 46 2077 40 41 41 123 825 2005 321 2078 40 362 43 2009 41 59 125 125 306 865 2079 40 601 2005 321 2006 38 2080 44 704 2081 41 601 123 330 2005 321 2082 2083 40 2008 46 2084 40 41 41 59 2083 332 2085 321 2086 40 2080 41 332 2005 321 2087 332 2081 332 2005 321 2087 332 2005 321 2088 59 688 40 33 2083 46 2089 40 41 41 123 825 2005 321 2090 40 362 43 2008 41 59 125 125 306 865 2091 40 41 601 123 2005 321 2092 2093 40 2008 46 2094 40 41 41 59 2005 321 2092 2095 40 2009 46 2094 40 41 41 59 125 306 865 2096 40 2005 321 2006 38 2097 44 704 38 2098 41 601 123 330 2005 321 2099 2100 40 2008 46 2101 40 41 41 59 2005 321 2102 40 2100 44 2097 41 59 2097 61 2103 321 2104 40 2097 41 59 2100 355 2098 59 688 40 33 2100 46 2105 40 41 41 123 2097 61 362 59 2098 61 45 1501 59 2091 40 41 59 125 630 123 330 2106 321 2067 2068 40 2097 44 2098 44 362 44 2106 321 2067 321 2107 41 59 2066 40 2068 41 59 125 125 125 59 ,"{'AvgLine': 11, 'CountLine': 211, 'CountStmt': 91, 'MaxNesting': 3, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 70, 'MaxEssential': 6, 'SumEssential': 21, 'AvgCyclomatic': 1, 'CountLineCode': 145, 'CountStmtDecl': 37, 'MaxCyclomatic': 7, 'SumCyclomatic': 25, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 24, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 14, 'AltCountLineCode': 145, 'CountLineCodeExe': 71, 'CountLineComment': 44, 'AltAvgLineComment': 0, 'AltCountLineBlank': 24, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 31, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.30', 'AltCountLineComment': 44, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 27, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 8, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 25, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 17, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
99216,C++,"class CPL_DLL OGRStyleMgr
{
  private:
    OGRStyleTable   *m_poDataSetStyleTable = nullptr;
    char            *m_pszStyleString = nullptr;

    CPL_DISALLOW_COPY_ASSIGN(OGRStyleMgr)

  public:
    explicit OGRStyleMgr(OGRStyleTable *poDataSetStyleTable = nullptr);
    ~OGRStyleMgr();

    GBool SetFeatureStyleString(OGRFeature *,const char *pszStyleString=nullptr,
                                GBool bNoMatching = FALSE);
    /* It will set in the given feature the pszStyleString with
            the style or will set the style name found in
            dataset StyleTable (if bNoMatching == FALSE). */

    const char *InitFromFeature(OGRFeature *);
    GBool InitStyleString(const char *pszStyleString = nullptr);

    const char *GetStyleName(const char *pszStyleString= nullptr);
    const char *GetStyleByName(const char *pszStyleName);

    GBool AddStyle(const char *pszStyleName, const char *pszStyleString=nullptr);

    const char *GetStyleString(OGRFeature * = nullptr);

    GBool AddPart(OGRStyleTool *);
    GBool AddPart(const char *);

    int GetPartCount(const char *pszStyleString = nullptr);
    OGRStyleTool *GetPart(int hPartId, const char *pszStyleString = nullptr);

    /* It could have a reference counting process us for the OGRStyleTable, if
      needed. */
//! @cond Doxygen_Suppress
    OGRStyleTable *GetDataSetStyleTable(){return m_poDataSetStyleTable;}

    OGRStyleTool *CreateStyleToolFromStyleString(const char *pszStyleString);
//! @endcond
};",0,587 2000 2001 123 773 58 2002 42 2003 61 753 59 582 42 2004 61 753 59 2005 40 2001 41 777 58 648 2001 40 2002 42 2006 61 753 41 59 126 2001 40 41 59 2007 2008 40 2009 42 44 601 582 42 2010 61 753 44 2007 2011 61 2012 41 59 305 601 582 42 2013 40 2009 42 41 59 2007 2014 40 601 582 42 2010 61 753 41 59 601 582 42 2015 40 601 582 42 2010 61 753 41 59 601 582 42 2016 40 601 582 42 2017 41 59 2007 2018 40 601 582 42 2017 44 601 582 42 2010 61 753 41 59 601 582 42 2019 40 2009 42 61 753 41 59 2007 2020 40 2021 42 41 59 2007 2020 40 601 582 42 41 59 704 2022 40 601 582 42 2010 61 753 41 59 2021 42 2023 40 704 2024 44 601 582 42 2010 61 753 41 59 305 330 2002 42 2025 40 41 123 792 2003 59 125 2021 42 2026 40 601 582 42 2010 41 59 330 125 59 ,"{'AvgLine': 14, 'CountLine': 255, 'CountStmt': 117, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 89, 'MaxEssential': 3, 'SumEssential': 17, 'AvgCyclomatic': 3, 'CountLineCode': 208, 'CountStmtDecl': 35, 'MaxCyclomatic': 6, 'SumCyclomatic': 45, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 36, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 17, 'AltCountLineCode': 208, 'CountLineCodeExe': 131, 'CountLineComment': 11, 'AltAvgLineComment': 0, 'AltCountLineBlank': 36, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 51, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 49, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 15, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 55, 'SumCyclomaticModified': 45, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 17, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99228,C++,"class OGRDWGDriver final: public OGRSFDriver
{
    OGRDWGServices *poServices;

  public:
    OGRDWGDriver();
    ~OGRDWGDriver();

    OGRDWGServices *GetServices() { return poServices; }

    const char *GetName() override;
    OGRDataSource *Open( const char *, int ) override;
    int         TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 777 58 2000 40 41 59 126 2000 40 41 59 2003 42 2005 40 41 123 792 2004 59 125 601 582 42 2006 40 41 2007 59 2008 42 2009 40 601 582 42 44 704 41 2007 59 704 2010 40 601 582 42 41 2007 59 125 59 ,"{'AvgLine': 7, 'CountLine': 58, 'CountStmt': 23, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 14, 'MaxEssential': 4, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 43, 'CountStmtDecl': 10, 'MaxCyclomatic': 5, 'SumCyclomatic': 10, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 43, 'CountLineCodeExe': 14, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 46, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99226,C++,"class DWGBlockDefinition
{
public:
    DWGBlockDefinition() : poGeometry(nullptr) {}
    ~DWGBlockDefinition();

    OGRGeometry                *poGeometry;
    std::vector<OGRFeature *>  apoFeatures;
};",0,587 2000 123 777 58 2000 40 41 58 2001 40 753 41 123 125 126 2000 40 41 59 2002 42 2001 59 2003 321 2004 60 2005 42 62 2006 59 125 59 ,"{'AvgLine': 6, 'CountLine': 20, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 2, 'AltCountLineCode': 17, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99230,C++,"    class PCIDSK_DLL PCIDSKGeoref
    {
    public:
        virtual ~PCIDSKGeoref() {}

/**
\brief Get georeferencing transformation.

Returns the affine georeferencing transform coefficients for this image.
Used to map from pixel/line coordinates to georeferenced coordinates using
the transformation:

 Xgeo = a1 +   a2 * Xpix + xrot * Ypix

 Ygeo = b1 + yrot * Xpix +   b2 * Ypix

where Xpix and Ypix are pixel line locations with (0,0) being the top left
corner of the top left pixel, and (0.5,0.5) being the center of the top left
pixel.  For an ungeoreferenced image the values will be
(0.0,1.0,0.0,0.0,0.0,1.0).

@param a1 returns easting of top left corner.
@param a2 returns easting pixel size.
@param xrot returns rotational coefficient, normally zero.
@param b1 returns northing of the top left corner.
@param yrot returns rotational coefficient, normally zero.
@param b3 returns northing pixel size, normally negative indicating north-up.

*/
        virtual void GetTransform( double &a1, double &a2, double &xrot,
            double &b1, double &yrot, double &b3 ) = 0;

/**
\brief Fetch georeferencing string.

Returns the short, 16 character, georeferencing string.  This string is
sufficient to document the coordinate system of simple coordinate
systems (like ""UTM    17 S D000""), while other coordinate systems are
only fully defined with additional projection parameters.

@return the georeferencing string.

*/
        virtual std::string GetGeosys() = 0;

/**
\brief Fetch projection parameters.

Fetches the list of detailed projection parameters used for projection
methods not fully described by the Geosys string.  The projection
parameters are as shown below, though in the future more items might
be added to the array.  The first 15 are the classic USGS GCTP parameters.

<ul>
<li> Param[0]: diameter of earth - major axis (meters).
<li> Param[1]: diameter of earth - minor axis (meters).
<li> Param[2]: Reference Longitude (degrees)
<li> Param[3]: Reference Latitude (degrees)
<li> Param[4]: Standard Parallel 1 (degrees)
<li> Param[5]: Standard Parallel 2 (degrees)
<li> Param[6]: False Easting (meters?)
<li> Param[7]: False Northing (meters?)
<li> Param[8]: Scale (unitless)
<li> Param[9]: Height (meters?)
<li> Param[10]: Longitude 1 (degrees)
<li> Param[11]: Latitude 1 (degrees)
<li> Param[12]: Longitude 2 (degrees)
<li> Param[13]: Latitude 2 (degrees)
<li> Param[14]: Azimuth (degrees)
<li> Param[15]: Landsat Number
<li> Param[16]: Landsat Path
<li> Param[17]: Unit Code (1=US Foot, 2=Meter, 4=Degree, 5=Intl Foot).
</ul>

Review the PCIDSK Database Reference Manual to understand which parameters
apply to which projection methods.

@return an array of values, at least 18.
*/

        virtual std::vector<double> GetParameters() = 0;

/**
\brief Write simple georeferencing information

Writes out a georeferencing string and geotransform to the segment.

@param geosys 16 character coordinate system, like ""UTM    17 S D000"".
@param a1 easting of top left corner.
@param a2 easting pixel size.
@param xrot rotational coefficient, normally zero.
@param b1 northing of the top left corner.
@param yrot rotational coefficient, normally zero.
@param b3 northing pixel size, normally negative indicating north-up.

*/
        virtual void WriteSimple( std::string const& geosys,
            double a1, double a2, double xrot,
            double b1, double yrot, double b3 ) = 0;

/**
\brief Write complex projection parameters.

See GetParameters() for the description of the parameters list.

@param parameters A list of at least 17 projection parameters.

*/

        virtual void WriteParameters( std::vector<double> const& parameters ) = 0;
    };",0,587 2000 2001 123 777 58 864 126 2001 40 41 123 125 306 864 865 2002 40 625 38 2003 44 625 38 2004 44 625 38 2005 44 625 38 2006 44 625 38 2007 44 625 38 2008 41 61 1500 59 306 864 2009 321 2010 2011 40 41 61 1500 59 306 864 2009 321 2012 60 625 62 2013 40 41 61 1500 59 306 864 865 2014 40 2009 321 2010 601 38 2015 44 625 2003 44 625 2004 44 625 2005 44 625 2006 44 625 2007 44 625 2008 41 61 1500 59 306 864 865 2016 40 2009 321 2012 60 625 62 601 38 2017 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 111, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 13, 'CountLineCodeExe': 0, 'CountLineComment': 91, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '7.00', 'AltCountLineComment': 91, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99247,C++,"class WMSMiniDriver_OGCAPICoverage : public WMSMiniDriver {
public:
    WMSMiniDriver_OGCAPICoverage() = default;

public:
    virtual CPLErr Initialize(CPLXMLNode *config, char **papszOpenOptions) override;
    virtual CPLErr TiledImageRequest(WMSHTTPRequest &request,
                                     const GDALWMSImageRequestInfo &iri,
                                     const GDALWMSTiledImageRequestInfo &tiri) override;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 777 58 864 2002 2003 40 2004 42 2005 44 582 42 42 2006 41 2007 59 864 2002 2008 40 2009 38 2010 44 601 2011 38 2012 44 601 2013 38 2014 41 2007 59 125 59 ,"{'AvgLine': 18, 'CountLine': 46, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 13, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 3, 'AltCountLineCode': 36, 'CountLineCodeExe': 17, 'CountLineComment': 4, 'AltAvgLineComment': 2, 'AltCountLineBlank': 6, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99263,C++,"class ROIPACRasterBand final: public RawRasterBand
{
    CPL_DISALLOW_COPY_ASSIGN(ROIPACRasterBand)

    public:
                ROIPACRasterBand( GDALDataset *poDS, int nBand, VSILFILE *fpRaw,
                                  vsi_l_offset nImgOffset, int nPixelOffset,
                                  int nLineOffset,
                                  GDALDataType eDataType, int bNativeOrder );
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 777 58 2000 40 2004 42 2005 44 704 2006 44 2007 42 2008 44 2009 2010 44 704 2011 44 704 2012 44 2013 2014 44 704 2015 41 59 125 59 ,"{'AvgLine': 8, 'CountLine': 18, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 17, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 171, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99293,C++,"class ENVIRasterBand final: public RawRasterBand
{
    CPL_DISALLOW_COPY_ASSIGN(ENVIRasterBand)

  public:
    ENVIRasterBand( GDALDataset *poDSIn, int nBandIn, VSILFILE *fpRawIn,
                    vsi_l_offset nImgOffsetIn, int nPixelOffsetIn,
                    int nLineOffsetIn, GDALDataType eDataTypeIn,
                    int bNativeOrderIn );
    ~ENVIRasterBand() override {}

    void SetDescription( const char * ) override;
    CPLErr SetNoDataValue( double ) override;

    CPLErr SetCategoryNames( char ** ) override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 777 58 2000 40 2004 42 2005 44 704 2006 44 2007 42 2008 44 2009 2010 44 704 2011 44 704 2012 44 2013 2014 44 704 2015 41 59 126 2000 40 41 2016 123 125 865 2017 40 601 582 42 41 2016 59 2018 2019 40 625 41 2016 59 2018 2020 40 582 42 42 41 2016 59 125 59 ,"{'AvgLine': 4, 'CountLine': 39, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 36, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 175, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99302,C++,"class OGRSQLiteExecuteSQLLayer final: public OGRSQLiteSelectLayer
{
    char             *pszTmpDBName;

  public:
    OGRSQLiteExecuteSQLLayer( char* pszTmpDBName,
                              OGRSQLiteDataSource* poDS,
                              const CPLString& osSQL,
                              sqlite3_stmt * hStmt,
                              bool bUseStatementForGetNextFeature,
                              bool bEmptyLayer );
    virtual ~OGRSQLiteExecuteSQLLayer();
};",0,587 2000 2001 58 777 2002 123 582 42 2003 59 777 58 2000 40 582 42 2003 44 2004 42 2005 44 601 2006 38 2007 44 2008 42 2009 44 569 2010 44 569 2011 41 59 864 126 2000 40 41 59 125 59 ,"{'AvgLine': 12, 'CountLine': 37, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 9, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 31, 'CountLineCodeExe': 15, 'CountLineComment': 4, 'AltAvgLineComment': 2, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 165, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99301,C++,"class DIMAPRasterBand final: public GDALPamRasterBand
{
    friend class DIMAPDataset;

    VRTSourcedRasterBand *poVRTBand;

  public:
    DIMAPRasterBand( DIMAPDataset *, int, VRTSourcedRasterBand * );
    ~DIMAPRasterBand() override {}

    CPLErr IReadBlock( int, int, void * ) override;
    CPLErr IRasterIO( GDALRWFlag, int, int, int, int,
                      void *, int, int, GDALDataType,
                      GSpacing nPixelSpace, GSpacing nLineSpace,
                      GDALRasterIOExtraArg* psExtraArg ) override;
    int GetOverviewCount() override;
    GDALRasterBand *GetOverview( int ) override;
    CPLErr ComputeRasterMinMax( int bApproxOK,
                                double adfMinMax[2] ) override;
    CPLErr ComputeStatistics( int bApproxOK,
                              double *pdfMin, double *pdfMax,
                              double *pdfMean, double *pdfStdDev,
                              GDALProgressFunc, void *pProgressData ) override;

    CPLErr GetHistogram( double dfMin, double dfMax,
                         int nBuckets, GUIntBig * panHistogram,
                         int bIncludeOutOfRange, int bApproxOK,
                         GDALProgressFunc, void *pProgressData ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 42 2005 59 777 58 2000 40 2003 42 44 704 44 2004 42 41 59 126 2000 40 41 2006 123 125 2007 2008 40 704 44 704 44 865 42 41 2006 59 2007 2009 40 2010 44 704 44 704 44 704 44 704 44 865 42 44 704 44 704 44 2011 44 2012 2013 44 2012 2014 44 2015 42 2016 41 2006 59 704 2017 40 41 2006 59 2018 42 2019 40 704 41 2006 59 2007 2020 40 704 2021 44 625 2022 91 1502 93 41 2006 59 2007 2023 40 704 2021 44 625 42 2024 44 625 42 2025 44 625 42 2026 44 625 42 2027 44 2028 44 865 42 2029 41 2006 59 2007 2030 40 625 2031 44 625 2032 44 704 2033 44 2034 42 2035 44 704 2036 44 704 2021 44 2028 44 865 42 2029 41 2006 59 125 59 ,"{'AvgLine': 10, 'CountLine': 120, 'CountStmt': 32, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 21, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 111, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 15, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 111, 'CountLineCodeExe': 31, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 25, 'CountLineInactive': 0, 'CountDeclMethodAll': 137, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 36, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99308,C++,"class PhPrfBand final : public VRTSourcedRasterBand
{
    std::vector<GDALRasterBand*> osOverview;
public:
    PhPrfBand( GDALDataset* poDataset, int nBandCount, GDALDataType eType,
               int nXSize, int nYSize ) :
        VRTSourcedRasterBand( poDataset, nBandCount, eType, nXSize, nYSize )
    {}

    void AddOverview( GDALRasterBand* ov )
    {
        osOverview.push_back( ov );
    }

    int GetOverviewCount() override
    {
        if( !osOverview.empty() )
        {
            return static_cast<int>( osOverview.size() );
        }
        else
        {
            return VRTSourcedRasterBand::GetOverviewCount();
        }
    }

    GDALRasterBand* GetOverview( int i ) override
    {
        size_t n = static_cast<size_t>( i );
        if( n < osOverview.size() )
        {
            return osOverview[ n ];
        }
        else
        {
            return VRTSourcedRasterBand::GetOverview( i );
        }
    }
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 42 62 2006 59 777 58 2000 40 2007 42 2008 44 704 2009 44 2010 2011 44 704 2012 44 704 2013 41 58 2002 40 2008 44 2009 44 2011 44 2012 44 2013 41 123 125 865 2014 40 2005 42 2015 41 123 2006 46 2016 40 2015 41 59 125 704 2017 40 41 2018 123 688 40 33 2006 46 2019 40 41 41 123 792 811 60 704 62 40 2006 46 2020 40 41 41 59 125 630 123 792 2002 321 2017 40 41 59 125 125 2005 42 2021 40 704 2022 41 2018 123 2023 2024 61 811 60 2023 62 40 2022 41 59 688 40 2024 60 2006 46 2025 40 41 41 123 792 2006 91 2024 93 59 125 630 123 792 2002 321 2021 40 2022 41 59 125 125 125 59 ,"{'AvgLine': 7, 'CountLine': 39, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 36, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 178, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99328,C++,"class FileGDBSpatialIndexIterator: virtual public FileGDBIterator
{
    public:
        virtual bool                 SetEnvelope(const OGREnvelope& sFilterEnvelope) = 0;

        static FileGDBSpatialIndexIterator* Build(FileGDBTable* poParent,
                                                  const OGREnvelope& sFilterEnvelope);
};",0,587 2000 58 864 777 2001 123 777 58 864 569 2002 40 601 2003 38 2004 41 61 1500 59 809 2000 42 2005 40 2006 42 2007 44 601 2003 38 2004 41 59 125 59 ,"{'AvgLine': 12, 'CountLine': 20, 'CountStmt': 6, 'MaxNesting': 1, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 2, 'CountLineCode': 19, 'CountStmtDecl': 3, 'MaxCyclomatic': 2, 'SumCyclomatic': 2, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 19, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 3, 'CountClassDerived': 1, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99324,C++,"class FileGDBIndex
{
        friend class FileGDBTable;
        std::string                 osIndexName;
        std::string                 osFieldName;

    public:
                            FileGDBIndex() {}
        virtual            ~FileGDBIndex() {}

        const std::string&  GetIndexName() const { return osIndexName; }
        const std::string&  GetFieldName() const { return osFieldName; }
};",0,587 2000 123 667 587 2001 59 2002 321 2003 2004 59 2002 321 2003 2005 59 777 58 2000 40 41 123 125 864 126 2000 40 41 123 125 601 2002 321 2003 38 2006 40 41 601 123 792 2004 59 125 601 2002 321 2003 38 2007 40 41 601 123 792 2005 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 13, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 11, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 35, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99332,C++,"class RLEC3Packer:public Packer {
public:
    virtual int load(storage_manager *src, storage_manager *dst) override;
    virtual int store(storage_manager *src, storage_manager *dst) override;
};",0,587 2000 58 777 2001 123 777 58 864 704 2002 40 2003 42 2004 44 2003 42 2005 41 2006 59 864 704 2007 40 2003 42 2004 44 2003 42 2005 41 2006 59 125 59 ,"{'AvgLine': 8, 'CountLine': 21, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 4, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 7, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 20, 'CountLineCodeExe': 9, 'CountLineComment': 3, 'AltAvgLineComment': 1, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.15', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99331,C++,"class Packer {
public:
    virtual ~Packer() {}
    virtual int load(storage_manager *src, storage_manager *dst)
    {
        if (dst->size < src->size)
            return false;
        std::memcpy(dst->buffer, src->buffer, src->size);
        dst->size -= src->size; // Adjust the destination size
        return true;
    }

    virtual int store(storage_manager *src, storage_manager *dst)
    {
        return load(src, dst);
    }
};",0,587 2000 123 777 58 864 126 2000 40 41 123 125 864 704 2001 40 2002 42 2003 44 2002 42 2004 41 123 688 40 2004 354 2005 60 2003 354 2005 41 792 655 59 2006 321 2007 40 2004 354 2008 44 2003 354 2008 44 2003 354 2005 41 59 2004 354 2005 337 2003 354 2005 59 330 792 829 59 125 864 704 2009 40 2002 42 2003 44 2002 42 2004 41 123 792 2001 40 2003 44 2004 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 17, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 16, 'CountStmtDecl': 3, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 16, 'CountLineCodeExe': 6, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99334,C++,"class CPL_DLL OGRPointIterator
{
    public:
        virtual ~OGRPointIterator();
        virtual OGRBoolean getNextPoint( OGRPoint* p ) = 0;

        static void destroy( OGRPointIterator* );
};",0,587 2000 2001 123 777 58 864 126 2001 40 41 59 864 2002 2003 40 2004 42 2005 41 61 1500 59 809 865 2006 40 2001 42 41 59 125 59 ,"{'AvgLine': 4, 'CountLine': 12, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 11, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99358,C++,"class GMLJP2V2BoxDesc
{
    public:
        CPLString osFile{};
        CPLString osLabel{};
};",0,587 2000 123 777 58 2001 2002 123 125 59 2001 2003 123 125 59 125 59 ,"{'AvgLine': 0, 'CountLine': 6, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99351,C++,"class GDALHashSetBandBlockCache final : public GDALAbstractBandBlockCache
{
    struct BlockComparator
    {
        // Do not change this comparator, because this order is assumed by
        // tests like tiff_write_133 for flushing from top to bottom, left
        // to right.
        bool operator() (const GDALRasterBlock* const& lhs,
                         const GDALRasterBlock* const& rhs) const
        {
            if( lhs->GetYOff() < rhs->GetYOff() )
                return true;
            if( lhs->GetYOff() > rhs->GetYOff() )
                return false;
            return lhs->GetXOff() < rhs->GetXOff();
        }
    };

    std::set<GDALRasterBlock*, BlockComparator> m_oSet{};
    CPLLock        *hLock = nullptr;

    CPL_DISALLOW_COPY_ASSIGN(GDALHashSetBandBlockCache)

  public:
    explicit GDALHashSetBandBlockCache( GDALRasterBand* poBand );
    ~GDALHashSetBandBlockCache() override;

    bool Init() override;
    bool IsInitOK() override;
    CPLErr FlushCache() override;
    CPLErr AdoptBlock( GDALRasterBlock * ) override;
    GDALRasterBlock *TryGetLockedBlockRef( int nXBlockOff,
                                           int nYBlockYOff ) override;
    CPLErr UnreferenceBlock( GDALRasterBlock* poBlock ) override;
    CPLErr FlushBlock( int nXBlockOff, int nYBlockOff,
                       int bWriteDirtyBlock ) override;
};",0,587 2000 2001 58 777 2002 123 816 2003 123 330 330 330 569 758 40 41 40 601 2004 42 601 38 2005 44 601 2004 42 601 38 2006 41 601 123 688 40 2005 354 2007 40 41 60 2006 354 2007 40 41 41 792 829 59 688 40 2005 354 2007 40 41 62 2006 354 2007 40 41 41 792 655 59 792 2005 354 2008 40 41 60 2006 354 2008 40 41 59 125 125 59 2009 321 2010 60 2011 42 44 2003 62 2012 123 125 59 2013 42 2014 61 753 59 2015 40 2000 41 777 58 648 2000 40 2016 42 2017 41 59 126 2000 40 41 2018 59 569 2019 40 41 2018 59 569 2020 40 41 2018 59 2021 2022 40 41 2018 59 2021 2023 40 2011 42 41 2018 59 2011 42 2024 40 704 2025 44 704 2026 41 2018 59 2021 2027 40 2011 42 2028 41 2018 59 2021 2029 40 704 2025 44 704 2030 44 704 2031 41 2018 59 125 59 ,"{'AvgLine': 13, 'CountLine': 155, 'CountStmt': 66, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 39, 'MaxEssential': 3, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 128, 'CountStmtDecl': 29, 'MaxCyclomatic': 4, 'SumCyclomatic': 14, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 24, 'CountStmtEmpty': 5, 'AltAvgLineBlank': 2, 'CountDeclMethod': 11, 'AltCountLineCode': 128, 'CountLineCodeExe': 36, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 24, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 27, 'CountLineInactive': 0, 'CountDeclMethodAll': 32, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 68, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99371,C++,"class JPEG_Band final: public MRFRasterBand {
    friend class MRFDataset;
public:
    JPEG_Band(MRFDataset *pDS, const ILImage &image, int b, int level);
    virtual ~JPEG_Band() {}

protected:
    virtual CPLErr Decompress(buf_mgr &dst, buf_mgr &src) override;
    virtual CPLErr Compress(buf_mgr &dst, buf_mgr &src) override;

    JPEG_Codec codec;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 2000 40 2003 42 2004 44 601 2005 38 2006 44 704 2007 44 704 2008 41 59 864 126 2000 40 41 123 125 775 58 864 2009 2010 40 2011 38 2012 44 2011 38 2013 41 2014 59 864 2009 2015 40 2011 38 2012 44 2011 38 2013 41 2014 59 2016 2017 59 125 59 ,"{'AvgLine': 19, 'CountLine': 89, 'CountStmt': 16, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 49, 'CountStmtDecl': 7, 'MaxCyclomatic': 5, 'SumCyclomatic': 9, 'AltAvgLineCode': 17, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 80, 'CountLineCodeExe': 14, 'CountLineComment': 6, 'AltAvgLineComment': 2, 'AltCountLineBlank': 7, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 25, 'CountDeclMethodAll': 167, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 10, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99377,C++,"class TIF_Band final: public MRFRasterBand {
    friend class MRFDataset;
public:
    TIF_Band(MRFDataset *pDS, const ILImage &image, int b, int level);
    virtual ~TIF_Band();
protected:
    virtual CPLErr Decompress(buf_mgr &dst, buf_mgr &src) override;
    virtual CPLErr Compress(buf_mgr &dst, buf_mgr &src) override;

    // Create options for TIF pages
    char **papszOptions;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 2000 40 2003 42 2004 44 601 2005 38 2006 44 704 2007 44 704 2008 41 59 864 126 2000 40 41 59 775 58 864 2009 2010 40 2011 38 2012 44 2011 38 2013 41 2014 59 864 2009 2015 40 2011 38 2012 44 2011 38 2013 41 2014 59 330 582 42 42 2016 59 125 59 ,"{'AvgLine': 6, 'CountLine': 37, 'CountStmt': 13, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 31, 'CountLineCodeExe': 7, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 167, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
99368,C++,"class PLLinkedDataset
{
public:
    CPLString            osKey;
    GDALDataset         *poDS;
    PLLinkedDataset       *psPrev;
    PLLinkedDataset       *psNext;

                        PLLinkedDataset() : poDS(nullptr), psPrev(nullptr), psNext(nullptr) {}
};",0,587 2000 123 777 58 2001 2002 59 2003 42 2004 59 2000 42 2005 59 2000 42 2006 59 2000 40 41 58 2004 40 753 41 44 2005 40 753 41 44 2006 40 753 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 10, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 9, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99376,C++,"class Raw_Band final: public MRFRasterBand {
    friend class MRFDataset;
public:
    Raw_Band(MRFDataset *pDS, const ILImage &image, int b, int level) :
        MRFRasterBand(pDS, image, b, int(level)) {}
    virtual ~Raw_Band() {}
protected:
    virtual CPLErr Decompress(buf_mgr& dst, buf_mgr& src) override {
        if (src.size > dst.size)
            return CE_Failure;
        memcpy(dst.buffer, src.buffer, src.size);
        dst.size = src.size;
        return CE_None;
    }
    virtual CPLErr Compress(buf_mgr& dst, buf_mgr& src) override {
        return Decompress(dst, src);
    }
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 2000 40 2003 42 2004 44 601 2005 38 2006 44 704 2007 44 704 2008 41 58 2002 40 2004 44 2006 44 2007 44 704 40 2008 41 41 123 125 864 126 2000 40 41 123 125 775 58 864 2009 2010 40 2011 38 2012 44 2011 38 2013 41 2014 123 688 40 2013 46 2015 62 2012 46 2015 41 792 2016 59 2017 40 2012 46 2018 44 2013 46 2018 44 2013 46 2015 41 59 2012 46 2015 61 2013 46 2015 59 792 2019 59 125 864 2009 2020 40 2011 38 2012 44 2011 38 2013 41 2014 123 792 2010 40 2012 44 2013 41 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 18, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 4, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 18, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 167, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99379,C++,"    class SG_Exception_DupName: public SG_Exception
    {
        std::string err_msg;

        public:
            SG_Exception_DupName(const char * keyn, const char* dsname) :
                err_msg(std::string(""The key "") + std::string(keyn) + std::string("" already exists in"") + std::string(dsname)) {}
            const char* get_err_msg() override { return this->err_msg.c_str(); }
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 2000 40 601 582 42 2005 44 601 582 42 2006 41 58 2004 40 2002 321 2003 40 362 41 43 2002 321 2003 40 2005 41 43 2002 321 2003 40 362 41 43 2002 321 2003 40 2006 41 41 123 125 601 582 42 2007 40 41 2008 123 792 823 354 2004 46 2009 40 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 9, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 8, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99380,C++,"    class SG_Exception_NVOOB : public SG_Exception
    {
        std::string err_msg;

        public:
            explicit SG_Exception_NVOOB(const char* dsname) :
                err_msg(std::string(""An attempt to read an undefined ID from "") + std::string(dsname) + std::string("" was made"")) {}
            const char* get_err_msg() override { return this->err_msg.c_str(); }
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 648 2000 40 601 582 42 2005 41 58 2004 40 2002 321 2003 40 362 41 43 2002 321 2003 40 2005 41 43 2002 321 2003 40 362 41 41 123 125 601 582 42 2006 40 41 2007 123 792 823 354 2004 46 2008 40 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 9, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 8, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99382,C++,"    class netCDFVDimension
    {
        friend class netCDFVID;

        std::string real_dim_name;
        int r_did = INVALID_DIM_ID;
        int v_did;
        size_t dim_len;
        bool valid = true;

        protected:
            void setRealID(int realID) { this->r_did = realID; }
            void invalidate();
            void setLen(size_t len) { this->dim_len = len; }
        public:
            netCDFVDimension(const char * name, size_t len, int dimid) :
                             real_dim_name(name),
                             v_did(dimid),
                             dim_len(len)
                             {}

            std::string& getName() { return this->real_dim_name; }
            size_t getLen() { return this->dim_len; }
            int getRealID() { return this->r_did; }
            int getVirtualID() { return this->v_did; }
            bool isValid() { return this->valid; }
    };",0,587 2000 123 667 587 2001 59 2002 321 2003 2004 59 704 2005 61 2006 59 704 2007 59 2008 2009 59 569 2010 61 829 59 775 58 865 2011 40 704 2012 41 123 823 354 2005 61 2012 59 125 865 2013 40 41 59 865 2014 40 2008 2015 41 123 823 354 2009 61 2015 59 125 777 58 2000 40 601 582 42 2016 44 2008 2015 44 704 2017 41 58 2004 40 2016 41 44 2007 40 2017 41 44 2009 40 2015 41 123 125 2002 321 2003 38 2018 40 41 123 792 823 354 2004 59 125 2008 2019 40 41 123 792 823 354 2009 59 125 704 2020 40 41 123 792 823 354 2005 59 125 704 2021 40 41 123 792 823 354 2007 59 125 569 2022 40 41 123 792 823 354 2010 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 32, 'CountStmt': 27, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 29, 'CountStmtDecl': 17, 'MaxCyclomatic': 1, 'SumCyclomatic': 9, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 29, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 25, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 82, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
99401,C++,"class GDALColorReliefDataset : public GDALDataset
{
    friend class GDALColorReliefRasterBand;

    GDALDatasetH       hSrcDS;
    GDALRasterBandH    hSrcBand;
    int                nColorAssociation;
    ColorAssociation*  pasColorAssociation;
    ColorSelectionMode eColorSelectionMode;
    GByte*             pabyPrecomputed;
    int                nIndexOffset;
    float*             pafSourceBuf;
    int*               panSourceBuf;
    int                nCurBlockXOff;
    int                nCurBlockYOff;

  public:
                        GDALColorReliefDataset(
                            GDALDatasetH hSrcDS,
                            GDALRasterBandH hSrcBand,
                            const char* pszColorFilename,
                            ColorSelectionMode eColorSelectionMode,
                            int bAlpha);
                       ~GDALColorReliefDataset();

    bool        InitOK() const
        { return pafSourceBuf != nullptr || panSourceBuf != nullptr; }

    CPLErr      GetGeoTransform( double * padfGeoTransform ) override;
    const OGRSpatialReference* GetSpatialRef() const override;
};",0,587 2000 58 777 2001 123 667 587 2002 59 2003 2004 59 2005 2006 59 704 2007 59 2008 42 2009 59 2010 2011 59 2012 42 2013 59 704 2014 59 660 42 2015 59 704 42 2016 59 704 2017 59 704 2018 59 777 58 2000 40 2003 2004 44 2005 2006 44 601 582 42 2019 44 2010 2011 44 704 2020 41 59 126 2000 40 41 59 569 2021 40 41 601 123 792 2015 340 753 309 2016 340 753 59 125 2022 2023 40 625 42 2024 41 2025 59 601 2026 42 2027 40 41 601 2025 59 125 59 ,"{'AvgLine': 13, 'CountLine': 94, 'CountStmt': 48, 'MaxNesting': 1, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 19, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 85, 'CountStmtDecl': 31, 'MaxCyclomatic': 4, 'SumCyclomatic': 8, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 85, 'CountLineCodeExe': 42, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 147, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 3, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 11, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 11, 'CountDeclInstanceVariableProtected': 0}"
99403,C++,"template<class T>
class GDALGeneric3x3Dataset : public GDALDataset
{
    friend class GDALGeneric3x3RasterBand<T>;

    typename GDALGeneric3x3ProcessingAlg<T>::type pfnAlg;
    void*              pAlgData;
    GDALDatasetH       hSrcDS;
    GDALRasterBandH    hSrcBand;
    T*                 apafSourceBuf[3];
    int                bDstHasNoData;
    double             dfDstNoDataValue;
    int                nCurLine;
    bool               bComputeAtEdges;

  public:
                        GDALGeneric3x3Dataset(
                            GDALDatasetH hSrcDS,
                            GDALRasterBandH hSrcBand,
                            GDALDataType eDstDataType,
                            int bDstHasNoData,
                            double dfDstNoDataValue,
                            typename GDALGeneric3x3ProcessingAlg<T>::type pfnAlg,
                            void* pAlgData,
                            bool bComputeAtEdges );
                       ~GDALGeneric3x3Dataset();

    bool                InitOK() const { return apafSourceBuf[0] != nullptr &&
                                                apafSourceBuf[1] != nullptr &&
                                                apafSourceBuf[2] != nullptr; }

    CPLErr      GetGeoTransform( double * padfGeoTransform ) override;
    const OGRSpatialReference* GetSpatialRef() const override;
};",0,822 60 587 2000 62 587 2001 58 777 2002 123 667 587 2003 60 2000 62 59 835 2004 60 2000 62 321 2005 2006 59 865 42 2007 59 2008 2009 59 2010 2011 59 2000 42 2012 91 1502 93 59 704 2013 59 625 2014 59 704 2015 59 569 2016 59 777 58 2001 40 2008 2009 44 2010 2011 44 2017 2018 44 704 2013 44 625 2014 44 835 2004 60 2000 62 321 2005 2006 44 865 42 2007 44 569 2016 41 59 126 2001 40 41 59 569 2019 40 41 601 123 792 2012 91 1500 93 340 753 307 2012 91 1501 93 340 753 307 2012 91 1502 93 340 753 59 125 2020 2021 40 625 42 2022 41 2023 59 601 2024 42 2025 40 41 601 2023 59 125 59 ,"{'AvgLine': 10, 'CountLine': 83, 'CountStmt': 36, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 76, 'CountStmtDecl': 23, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 76, 'CountLineCodeExe': 28, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 18, 'CountLineInactive': 0, 'CountDeclMethodAll': 147, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 4, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 9, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 9, 'CountDeclInstanceVariableProtected': 0}"
99414,C++,"class TABMAPObjCustomPoint final : public TABMAPObjPoint
{
  public:
    GByte m_nUnknown_;
    GByte m_nCustomStyle;
    GByte m_nFontId;

    TABMAPObjCustomPoint():
        m_nUnknown_(0),
        m_nCustomStyle(0),
        m_nFontId(0)
        {}
    virtual ~TABMAPObjCustomPoint() {}

    virtual int WriteObj(TABMAPObjectBlock *) override;

//  protected:
    virtual int ReadObj(TABMAPObjectBlock *) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2003 2004 59 2003 2005 59 2003 2006 59 2000 40 41 58 2004 40 1500 41 44 2005 40 1500 41 44 2006 40 1500 41 123 125 864 126 2000 40 41 123 125 864 704 2007 40 2008 42 41 2009 59 330 864 704 2010 40 2008 42 41 2009 59 125 59 ,"{'AvgLine': 10, 'CountLine': 53, 'CountStmt': 28, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 39, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 7, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 39, 'CountLineCodeExe': 21, 'CountLineComment': 10, 'AltAvgLineComment': 2, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.26', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99418,C++,"class TABMAPObjNone final : public TABMAPObjHdr
{
  public:

    TABMAPObjNone() {}
    virtual ~TABMAPObjNone() {}

    virtual int WriteObj(TABMAPObjectBlock *) override {return 0;}

//  protected:
    virtual int ReadObj(TABMAPObjectBlock *) override {return 0;}
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 123 125 864 126 2000 40 41 123 125 864 704 2003 40 2004 42 41 2005 123 792 1500 59 125 330 864 704 2006 40 2004 42 41 2005 123 792 1500 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 12, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 8, 'CountLineCodeExe': 2, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99429,C++,"class test_group_posix
{
private:
    template<typename, int>
    friend class test_group;

    template<typename T>
    void send_result_(const T *obj, const test_result &tr)
    {
        if(obj->get_pipe_() == -1)
        {
            return;
        }

        if(tr.result != test_result::ok)
        {
            std::stringstream ss;
            ss << int(tr.result) << ""\n""
                << tr.group << ""\n""
                << tr.test << ""\n""
                << tr.name << ""\n""
                << tr.exception_typeid << ""\n"";
            std::copy( tr.message.begin(), tr.message.end(), std::ostreambuf_iterator<char>(ss.rdbuf()) );

            int size = static_cast<int>(ss.str().length());
            int w = static_cast<int>(write(obj->get_pipe_(), ss.str().c_str(), size));
            ensure_errno(""write() failed"", w == size);
        }
    }
};",0,587 2000 123 773 58 822 60 835 44 704 62 667 587 2001 59 822 60 835 2002 62 865 2003 40 601 2002 42 2004 44 601 2005 38 2006 41 123 688 40 2004 354 2007 40 41 323 45 1501 41 123 792 59 125 688 40 2006 46 2008 340 2005 321 2009 41 123 2010 321 2011 2012 59 2012 332 704 40 2006 46 2008 41 332 362 332 2006 46 2013 332 362 332 2006 46 2014 332 362 332 2006 46 2015 332 362 332 2006 46 2016 332 362 59 2010 321 2017 40 2006 46 2018 46 2019 40 41 44 2006 46 2018 46 2020 40 41 44 2010 321 2021 60 582 62 40 2012 46 2022 40 41 41 41 59 704 2023 61 811 60 704 62 40 2012 46 2024 40 41 46 2025 40 41 41 59 704 2026 61 811 60 704 62 40 2027 40 2004 354 2007 40 41 44 2012 46 2024 40 41 46 2028 40 41 44 2023 41 41 59 2029 40 362 44 2026 323 2023 41 59 125 125 125 59 ,"{'AvgLine': 22, 'CountLine': 30, 'CountStmt': 11, 'MaxNesting': 1, 'AvgLineCode': 20, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 3, 'CountLineCode': 27, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 3, 'AltAvgLineCode': 20, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 1, 'AltCountLineCode': 27, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99434,C++,"class PlannedCoverageHRVRecord
{
public:
  explicit PlannedCoverageHRVRecord(std::ifstream & ifile);
  int LowerSouthLinePlanned;
  int LowerNorthLinePlanned;
  int LowerEastColumnPlanned;
  int LowerWestColumnPlanned;
  int UpperSouthLinePlanned;
  int UpperNorthLinePlanned;
  int UpperEastColumnPlanned;
  int UpperWestColumnPlanned;
};",0,587 2000 123 777 58 648 2000 40 2001 321 2002 38 2003 41 59 704 2004 59 704 2005 59 704 2006 59 704 2007 59 704 2008 59 704 2009 59 704 2010 59 704 2011 59 125 59 ,"{'AvgLine': 11, 'CountLine': 24, 'CountStmt': 17, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 24, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 8, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99433,C++,"class ImageDescriptionRecord
{
  CPL_DISALLOW_COPY_ASSIGN( ImageDescriptionRecord )

public:
  explicit ImageDescriptionRecord(std::ifstream & ifile);
  virtual ~ImageDescriptionRecord();

  unsigned char TypeOfProjection; // 1 == Geostationary, Earth centered in grid
  double LongitudeOfSSP;
  ReferenceGridRecord * ReferenceGridVIS_IR;
  ReferenceGridRecord * ReferenceGridHRV;
  PlannedCoverageVIS_IRRecord * PlannedCoverageVIS_IR;
  PlannedCoverageHRVRecord * PlannedCoverageHRV;
  unsigned char ImageProcDirection; // 0 == north-south; 1 == south-north
  unsigned char PixelGenDirection; // 0 == east-west; 1 == west-east;
  unsigned char PlannedChannelProcessing [12];
};",0,587 2000 123 2001 40 2000 41 777 58 648 2000 40 2002 321 2003 38 2004 41 59 864 126 2000 40 41 59 856 582 2005 59 330 625 2006 59 2007 42 2008 59 2007 42 2009 59 2010 42 2011 59 2012 42 2013 59 856 582 2014 59 330 856 582 2015 59 330 856 582 2016 91 1503 93 59 125 59 ,"{'AvgLine': 10, 'CountLine': 38, 'CountStmt': 26, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 16, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 36, 'CountLineCodeExe': 14, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 63, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 9, 'CountDeclInstanceVariablePublic': 9, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99436,C++,"class Prologue
{
public:
  Prologue();
  virtual ~Prologue();

  void read(std::ifstream & ifile);

  const ImageDescriptionRecord * idr() const
  {
    return m_idr;
  }

  const RadiometricProcessingRecord * rpr() const
  {
    return m_rpr;
  }

private:
  ImageDescriptionRecord * m_idr;
  RadiometricProcessingRecord * m_rpr;
};",0,587 2000 123 777 58 2000 40 41 59 864 126 2000 40 41 59 865 2001 40 2002 321 2003 38 2004 41 59 601 2005 42 2006 40 41 601 123 792 2007 59 125 601 2008 42 2009 40 41 601 123 792 2010 59 125 773 58 2005 42 2011 59 2008 42 2012 59 125 59 ,"{'AvgLine': 6, 'CountLine': 46, 'CountStmt': 20, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 37, 'CountStmtDecl': 10, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 37, 'CountLineCodeExe': 13, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 42, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99445,C++,"  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };",0,587 2000 123 775 58 2001 42 2002 59 777 58 2000 40 41 58 2002 40 1500 41 123 125 2000 40 601 2000 38 2003 41 58 2002 40 2003 46 2002 41 123 2004 59 2005 40 2002 41 59 2006 59 125 2000 40 2001 42 2007 44 569 2008 61 829 41 58 2002 40 2007 41 123 688 40 2008 41 123 2009 59 2010 40 2002 41 59 2011 59 125 125 2000 38 758 61 40 601 2000 38 2003 41 123 2012 59 2013 40 2003 46 2002 41 59 2014 40 2002 41 59 2002 61 2003 46 2002 59 2015 59 792 42 823 59 125 126 2000 40 41 123 2016 59 2017 40 2002 41 59 2018 59 125 758 2001 42 40 41 601 123 792 2002 59 125 2001 42 758 354 40 41 601 123 792 2002 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 52, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 45, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99477,C++,"class TigerPolygonEconomic final: public TigerFileBase
{
public:
                      TigerPolygonEconomic( OGRTigerDataSource *, const char * );
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 125 59 ,"{'AvgLine': 15, 'CountLine': 20, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 10, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 1, 'AltCountLineCode': 15, 'CountLineCodeExe': 6, 'CountLineComment': 3, 'AltAvgLineComment': 3, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99484,C++,"class TerragenRasterBand final: public GDALPamRasterBand
{
    friend class TerragenDataset;

    void*               m_pvLine;
    bool            m_bFirstTime;

public:

    explicit TerragenRasterBand(TerragenDataset*);
    virtual ~TerragenRasterBand()
    {
        if(m_pvLine != nullptr)
            CPLFree(m_pvLine);
    }

    // Geomeasure support.
    virtual CPLErr IReadBlock( int, int, void * ) override;
    virtual const char* GetUnitType() override;
    virtual double GetOffset(int* pbSuccess = nullptr) override;
    virtual double GetScale(int* pbSuccess = nullptr) override;

    virtual CPLErr IWriteBlock( int, int, void * ) override;
    virtual CPLErr SetUnitType( const char* ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 865 42 2004 59 569 2005 59 777 58 648 2000 40 2003 42 41 59 864 126 2000 40 41 123 688 40 2004 340 753 41 2006 40 2004 41 59 125 330 864 2007 2008 40 704 44 704 44 865 42 41 2009 59 864 601 582 42 2010 40 41 2009 59 864 625 2011 40 704 42 2012 61 753 41 2009 59 864 625 2013 40 704 42 2012 61 753 41 2009 59 864 2007 2014 40 704 44 704 44 865 42 41 2009 59 864 2007 2015 40 601 582 42 41 2009 59 125 59 ,"{'AvgLine': 19, 'CountLine': 177, 'CountStmt': 70, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 41, 'MaxEssential': 4, 'SumEssential': 15, 'AvgCyclomatic': 2, 'CountLineCode': 129, 'CountStmtDecl': 26, 'MaxCyclomatic': 5, 'SumCyclomatic': 21, 'AltAvgLineCode': 15, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 25, 'CountStmtEmpty': 5, 'AltAvgLineBlank': 2, 'CountDeclMethod': 8, 'AltCountLineCode': 135, 'CountLineCodeExe': 71, 'CountLineComment': 18, 'AltAvgLineComment': 2, 'AltCountLineBlank': 25, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 31, 'CountLineInactive': 2, 'CountDeclMethodAll': 136, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 18, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 68, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99947,C++,"class TigerPolyChainLink final: public TigerFileBase
{
public:
                      TigerPolyChainLink( OGRTigerDataSource *, const char * );
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 125 59 ,"{'AvgLine': 23, 'CountLine': 28, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 2, 'CountLineCode': 21, 'CountStmtDecl': 2, 'MaxCyclomatic': 2, 'SumCyclomatic': 2, 'AltAvgLineCode': 16, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 1, 'AltCountLineCode': 21, 'CountLineCodeExe': 11, 'CountLineComment': 3, 'AltAvgLineComment': 3, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99488,C++,"class CheckedError {
 public:
  explicit CheckedError(bool error)
      : is_error_(error), has_been_checked_(false) {}

  CheckedError &operator=(const CheckedError &other) {
    is_error_ = other.is_error_;
    has_been_checked_ = false;
    other.has_been_checked_ = true;
    return *this;
  }

  CheckedError(const CheckedError &other) {
    *this = other;  // Use assignment operator.
  }

  ~CheckedError() { FLATBUFFERS_ASSERT(has_been_checked_); }

  bool Check() {
    has_been_checked_ = true;
    return is_error_;
  }

 private:
  bool is_error_;
  mutable bool has_been_checked_;
};",0,587 2000 123 777 58 648 2000 40 569 2001 41 58 2002 40 2001 41 44 2003 40 655 41 123 125 2000 38 758 61 40 601 2000 38 2004 41 123 2002 61 2004 46 2002 59 2003 61 655 59 2004 46 2003 61 829 59 792 42 823 59 125 2000 40 601 2000 38 2004 41 123 42 823 61 2004 59 330 125 126 2000 40 41 123 2005 40 2003 41 59 125 569 2006 40 41 123 2003 61 829 59 792 2002 59 125 773 58 569 2002 59 740 569 2003 59 125 59 ,"{'AvgLine': 3, 'CountLine': 27, 'CountStmt': 17, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 22, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 22, 'CountLineCodeExe': 8, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 30, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99496,C++,"class CALSRasterBand final: public GDALPamRasterBand
{
    GDALRasterBand* poUnderlyingBand;

  public:
    explicit CALSRasterBand( CALSDataset* poDSIn )
    {
        poDS = poDSIn;
        poUnderlyingBand = poDSIn->poUnderlyingDS->GetRasterBand(1);
        poUnderlyingBand->GetBlockSize(&nBlockXSize, &nBlockYSize);
        nBand = 1;
        eDataType = GDT_Byte;
    }

    CPLErr IReadBlock( int nBlockXOff, int nBlockYOff, void * pData ) override
    {
        return poUnderlyingBand->ReadBlock(nBlockXOff, nBlockYOff, pData);
    }

    CPLErr IRasterIO( GDALRWFlag eRWFlag,
                      int nXOff, int nYOff, int nXSize, int nYSize,
                      void * pData, int nBufXSize, int nBufYSize,
                      GDALDataType eBufType,
                      GSpacing nPixelSpace,
                      GSpacing nLineSpace,
                      GDALRasterIOExtraArg* psExtraArg ) override
    {
        return poUnderlyingBand->RasterIO(
            eRWFlag, nXOff, nYOff, nXSize, nYSize,
            pData, nBufXSize, nBufYSize, eBufType,
            nPixelSpace, nLineSpace, psExtraArg ) ;
    }

    GDALColorTable* GetColorTable() override
    {
        return poUnderlyingBand->GetColorTable();
    }

    GDALColorInterp GetColorInterpretation() override
    {
        return GCI_PaletteIndex;
    }

    char** GetMetadata(const char* pszDomain) override
    {
        return poUnderlyingBand->GetMetadata(pszDomain);
    }

    const char* GetMetadataItem( const char* pszKey,
                                 const char* pszDomain ) override
    {
        return poUnderlyingBand->GetMetadataItem(pszKey, pszDomain);
    }
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 777 58 648 2000 40 2005 42 2006 41 123 2007 61 2006 59 2004 61 2006 354 2008 354 2009 40 1501 41 59 2004 354 2010 40 38 2011 44 38 2012 41 59 2013 61 1501 59 2014 61 2015 59 125 2016 2017 40 704 2018 44 704 2019 44 865 42 2020 41 2021 123 792 2004 354 2022 40 2018 44 2019 44 2020 41 59 125 2016 2023 40 2024 2025 44 704 2026 44 704 2027 44 704 2028 44 704 2029 44 865 42 2020 44 704 2030 44 704 2031 44 2032 2033 44 2034 2035 44 2034 2036 44 2037 42 2038 41 2021 123 792 2004 354 2039 40 2025 44 2026 44 2027 44 2028 44 2029 44 2020 44 2030 44 2031 44 2033 44 2035 44 2036 44 2038 41 59 125 2040 42 2041 40 41 2021 123 792 2004 354 2041 40 41 59 125 2042 2043 40 41 2021 123 792 2044 59 125 582 42 42 2045 40 601 582 42 2046 41 2021 123 792 2004 354 2045 40 2046 41 59 125 601 582 42 2047 40 601 582 42 2048 44 601 582 42 2046 41 2021 123 792 2004 354 2047 40 2048 44 2046 41 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 54, 'CountStmt': 19, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 47, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 47, 'CountLineCodeExe': 14, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 135, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99520,C++,"class NTFGenericClass
{
public:
    int         nFeatureCount;

    int         b3D;
    int         nAttrCount;
    char        **papszAttrNames;
    char        **papszAttrFormats;
    int         *panAttrMaxWidth;
    int         *pabAttrMultiple;

                NTFGenericClass();
                ~NTFGenericClass();

    void        CheckAddAttr( const char *, const char *, int );
    void        SetMultiple( const char * );
};",0,587 2000 123 777 58 704 2001 59 704 2002 59 704 2003 59 582 42 42 2004 59 582 42 42 2005 59 704 42 2006 59 704 42 2007 59 2000 40 41 59 126 2000 40 41 59 865 2008 40 601 582 42 44 601 582 42 44 704 41 59 865 2009 40 601 582 42 41 59 125 59 ,"{'AvgLine': 16, 'CountLine': 84, 'CountStmt': 45, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 27, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 69, 'CountStmtDecl': 20, 'MaxCyclomatic': 5, 'SumCyclomatic': 11, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 4, 'AltCountLineCode': 69, 'CountLineCodeExe': 35, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 35, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 7, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99526,C++,"class CPL_UNSTABLE_API swq_op_registrar {
public:
    static const swq_operation *GetOperator( const char * );
    static const swq_operation *GetOperator( swq_op eOperation );
};",0,587 2000 2001 123 777 58 809 601 2002 42 2003 40 601 582 42 41 59 809 601 2002 42 2003 40 2004 2005 41 59 125 59 ,"{'AvgLine': 11, 'CountLine': 27, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 3, 'CountLineCode': 23, 'CountStmtDecl': 10, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 2, 'AltCountLineCode': 23, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99548,C++,"class WEBPRasterBand final: public GDALPamRasterBand
{
    friend class WEBPDataset;

  public:
                   WEBPRasterBand( WEBPDataset *, int );

    virtual CPLErr IReadBlock( int, int, void * ) override;
    virtual GDALColorInterp GetColorInterpretation() override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 2000 40 2003 42 44 704 41 59 864 2004 2005 40 704 44 704 44 865 42 41 2006 59 864 2007 2008 40 41 2006 59 125 59 ,"{'AvgLine': 13, 'CountLine': 50, 'CountStmt': 22, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 2, 'AvgLineBlank': 3, 'CountStmtExe': 18, 'MaxEssential': 4, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 39, 'CountStmtDecl': 6, 'MaxCyclomatic': 4, 'SumCyclomatic': 8, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 3, 'AltCountLineCode': 39, 'CountLineCodeExe': 20, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 131, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99514,C++,"    class MDIAsAttribute: public GDALAttribute
    {
        std::vector<std::shared_ptr<GDALDimension>> m_dims{};
        const GDALExtendedDataType m_dt = GDALExtendedDataType::CreateString();
        std::string m_osValue;

    public:
        MDIAsAttribute(const std::string& name, const std::string& value):
            GDALAbstractMDArray(std::string(), name),
            GDALAttribute(std::string(), name),
            m_osValue(value)
        {
        }

        const std::vector<std::shared_ptr<GDALDimension>>& GetDimensions() const override { return m_dims; }

        const GDALExtendedDataType &GetDataType() const override { return m_dt; }

        bool IRead(const GUInt64*, const size_t*,
                   const GInt64*, const GPtrDiff_t*,
                   const GDALExtendedDataType& bufferDataType,
                   void* pDstBuffer) const override
        {
            const char* pszStr = m_osValue.c_str();
            GDALExtendedDataType::CopyValue(&pszStr, m_dt,
                                            pDstBuffer, bufferDataType);
            return true;
        }
    };",0,587 2000 58 777 2001 123 2002 321 2003 60 2002 321 2004 60 2005 355 2006 123 125 59 601 2007 2008 61 2007 321 2009 40 41 59 2002 321 2010 2011 59 777 58 2000 40 601 2002 321 2010 38 2012 44 601 2002 321 2010 38 2013 41 58 2014 40 2002 321 2010 40 41 44 2012 41 44 2001 40 2002 321 2010 40 41 44 2012 41 44 2011 40 2013 41 123 125 601 2002 321 2003 60 2002 321 2004 60 2005 355 38 2015 40 41 601 2016 123 792 2006 59 125 601 2007 38 2017 40 41 601 2016 123 792 2008 59 125 569 2018 40 601 2019 42 44 601 2020 42 44 601 2021 42 44 601 2022 42 44 601 2007 38 2023 44 865 42 2024 41 601 2016 123 601 582 42 2025 61 2011 46 2026 40 41 59 2007 321 2027 40 38 2025 44 2008 44 2024 44 2023 41 59 792 829 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 29, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 25, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 25, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 36, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99515,C++,"class OGRDXFBlocksWriterLayer final: public OGRLayer
{
    OGRFeatureDefn     *poFeatureDefn;

  public:
    explicit OGRDXFBlocksWriterLayer( OGRDXFWriterDS *poDS );
    ~OGRDXFBlocksWriterLayer();

    void                ResetReading() override {}
    OGRFeature         *GetNextFeature() override { return nullptr; }

    OGRFeatureDefn *    GetLayerDefn() override { return poFeatureDefn; }

    int                 TestCapability( const char * ) override;
    OGRErr              ICreateFeature( OGRFeature *poFeature ) override;
    OGRErr              CreateField( OGRFieldDefn *poField,
                                     int bApproxOK = TRUE ) override;

    std::vector<OGRFeature*> apoBlocks;
    OGRFeature          *FindBlock( const char * );
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 777 58 648 2000 40 2005 42 2006 41 59 126 2000 40 41 59 865 2007 40 41 2008 123 125 2009 42 2010 40 41 2008 123 792 753 59 125 2003 42 2011 40 41 2008 123 792 2004 59 125 704 2012 40 601 582 42 41 2008 59 2013 2014 40 2009 42 2015 41 2008 59 2013 2016 40 2017 42 2018 44 704 2019 61 2020 41 2008 59 2021 321 2022 60 2009 42 62 2023 59 2009 42 2024 40 601 582 42 41 59 125 59 ,"{'AvgLine': 6, 'CountLine': 78, 'CountStmt': 28, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 61, 'CountStmtDecl': 14, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 61, 'CountLineCodeExe': 14, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 17, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 91, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99537,C++,"class PAuxRasterBand final: public RawRasterBand
{
    CPL_DISALLOW_COPY_ASSIGN(PAuxRasterBand)

  public:

    PAuxRasterBand( GDALDataset *poDS, int nBand, VSILFILE * fpRaw,
                    vsi_l_offset nImgOffset, int nPixelOffset,
                    int nLineOffset,
                    GDALDataType eDataType, int bNativeOrder );

    ~PAuxRasterBand() override;

    double GetNoDataValue( int *pbSuccess = nullptr ) override;
    CPLErr SetNoDataValue( double ) override;

    GDALColorTable *GetColorTable() override;
    GDALColorInterp GetColorInterpretation() override;

    void SetDescription( const char *pszNewDescription ) override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 777 58 2000 40 2004 42 2005 44 704 2006 44 2007 42 2008 44 2009 2010 44 704 2011 44 704 2012 44 2013 2014 44 704 2015 41 59 126 2000 40 41 2016 59 625 2017 40 704 42 2018 61 753 41 2016 59 2019 2020 40 625 41 2016 59 2021 42 2022 40 41 2016 59 2023 2024 40 41 2016 59 865 2025 40 601 582 42 2026 41 2016 59 125 59 ,"{'AvgLine': 19, 'CountLine': 159, 'CountStmt': 58, 'MaxNesting': 3, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 39, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 121, 'CountStmtDecl': 23, 'MaxCyclomatic': 6, 'SumCyclomatic': 17, 'AltAvgLineCode': 15, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 30, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 9, 'AltCountLineCode': 121, 'CountLineCodeExe': 71, 'CountLineComment': 8, 'AltAvgLineComment': 1, 'AltCountLineBlank': 30, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 33, 'CountLineInactive': 0, 'CountDeclMethodAll': 177, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99539,C++,"class PythonPluginDataset final: public GDALDataset
{
        PyObject* m_poDataset = nullptr;
        std::map<int, std::unique_ptr<OGRLayer>> m_oMapLayer{};
        std::map<CPLString, CPLStringList> m_oMapMD{};
        bool m_bHasLayersMember = false;

        PythonPluginDataset(const PythonPluginDataset&) = delete;
        PythonPluginDataset& operator= (const PythonPluginDataset&) = delete;

    public:

        PythonPluginDataset(GDALOpenInfo *poOpenInfo, PyObject* poDataset);
        ~PythonPluginDataset();

        int GetLayerCount() override;
        OGRLayer* GetLayer(int) override;
        char** GetMetadata(const char* pszDomain = """") override;
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 61 753 59 2005 321 2006 60 704 44 2005 321 2007 60 2008 355 2009 123 125 59 2005 321 2006 60 2010 44 2011 62 2012 123 125 59 569 2013 61 655 59 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 777 58 2000 40 2014 42 2015 44 2003 42 2016 41 59 126 2000 40 41 59 704 2017 40 41 2018 59 2008 42 2019 40 704 41 2018 59 582 42 42 2020 40 601 582 42 2021 61 362 41 2018 59 125 59 ,"{'AvgLine': 19, 'CountLine': 118, 'CountStmt': 55, 'MaxNesting': 3, 'AvgLineCode': 17, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 39, 'MaxEssential': 6, 'SumEssential': 10, 'AvgCyclomatic': 3, 'CountLineCode': 103, 'CountStmtDecl': 24, 'MaxCyclomatic': 6, 'SumCyclomatic': 15, 'AltAvgLineCode': 17, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 7, 'AltCountLineCode': 103, 'CountLineCodeExe': 45, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 149, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 78, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99552,C++,"class ODSCellEvaluator : public IODSCellEvaluator
{
private:
        OGRODSLayer* poLayer;
        std::set<std::pair<int,int> > oVisisitedCells;

public:
        explicit ODSCellEvaluator(OGRODSLayer* poLayerIn) : poLayer(poLayerIn) {}

        int EvaluateRange(int nRow1, int nCol1, int nRow2, int nCol2,
                          std::vector<ods_formula_node>& aoOutValues) override;

        int Evaluate(int nRow, int nCol);
};",0,587 2000 58 777 2001 123 773 58 2002 42 2003 59 2004 321 2005 60 2004 321 2006 60 704 44 704 62 62 2007 59 777 58 648 2000 40 2002 42 2008 41 58 2003 40 2008 41 123 125 704 2009 40 704 2010 44 704 2011 44 704 2012 44 704 2013 44 2004 321 2014 60 2015 62 38 2016 41 2017 59 704 2018 40 704 2019 44 704 2020 41 59 125 59 ,"{'AvgLine': 1, 'CountLine': 14, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 11, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99551,C++,"class SQLResult
{
    public:
        SQLResult(char** result, int nRow, int nCol);
        ~SQLResult ();

        int         RowCount() const { return nRowCount; }
        int         ColCount() const { return nColCount; }
        void        LimitRowCount(int nLimit);

        const char* GetValue(int iColumnNum, int iRowNum) const;
        int         GetValueAsInteger(int iColNum, int iRowNum) const;
    private:
        char** papszResult = nullptr;
        int nRowCount = 0;
        int nColCount = 0;
};",0,587 2000 123 777 58 2000 40 582 42 42 2001 44 704 2002 44 704 2003 41 59 126 2000 40 41 59 704 2004 40 41 601 123 792 2005 59 125 704 2006 40 41 601 123 792 2007 59 125 865 2008 40 704 2009 41 59 601 582 42 2010 40 704 2011 44 704 2012 41 601 59 704 2013 40 704 2014 44 704 2012 41 601 59 773 58 582 42 42 2015 61 753 59 704 2016 61 1500 59 704 2017 61 1500 59 125 59 ,"{'AvgLine': 4, 'CountLine': 48, 'CountStmt': 24, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 38, 'CountStmtDecl': 15, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 44, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 5, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 57, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99555,C++,"    class ShapeIterator : public std::iterator<std::input_iterator_tag, ShapeId>
    {
        ShapeId id;
        PCIDSKVectorSegment *seg;

    public:
        ShapeIterator(PCIDSKVectorSegment *seg_in)
                : seg(seg_in)  { id = seg->FindFirst(); }
        ShapeIterator(PCIDSKVectorSegment *seg_in, ShapeId id_in )
                : id(id_in), seg(seg_in)  {}
        ShapeIterator(const ShapeIterator& mit) : id(mit.id), seg(mit.seg) {}
        ShapeIterator& operator++() { id=seg->FindNext(id); return *this;}
        ShapeIterator& operator++(int) { id=seg->FindNext(id); return *this;}
        bool operator==(const ShapeIterator& rhs) {return id == rhs.id;}
        bool operator!=(const ShapeIterator& rhs) {return id != rhs.id;}
        ShapeId& operator*() {return id;}
    };",0,587 2000 58 777 2001 321 2002 60 2001 321 2003 44 2004 62 123 2004 2005 59 2006 42 2007 59 777 58 2000 40 2006 42 2008 41 58 2007 40 2008 41 123 2005 61 2007 354 2009 40 41 59 125 2000 40 2006 42 2008 44 2004 2010 41 58 2005 40 2010 41 44 2007 40 2008 41 123 125 2000 40 601 2000 38 2011 41 58 2005 40 2011 46 2005 41 44 2007 40 2011 46 2007 41 123 125 2000 38 758 349 40 41 123 2005 61 2007 354 2012 40 2005 41 59 792 42 823 59 125 2000 38 758 349 40 704 41 123 2005 61 2007 354 2013 40 2005 41 59 792 42 823 59 125 569 758 323 40 601 2000 38 2014 41 123 792 2005 323 2014 46 2005 59 125 569 758 340 40 601 2000 38 2014 41 123 792 2005 340 2014 46 2005 59 125 2004 38 758 42 40 41 123 792 2005 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 17, 'CountStmt': 23, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 16, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 16, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 27, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99564,C++,"class GDALWMSRasterIOHint {
public:
  GDALWMSRasterIOHint() :
      m_x0(0),
      m_y0(0),
      m_sx(0),
      m_sy(0),
      m_overview(0),
      m_valid(false)
  {}
    int m_x0;
    int m_y0;
    int m_sx;
    int m_sy;
    int m_overview;
    bool m_valid;
};",0,587 2000 123 777 58 2000 40 41 58 2001 40 1500 41 44 2002 40 1500 41 44 2003 40 1500 41 44 2004 40 1500 41 44 2005 40 1500 41 44 2006 40 655 41 123 125 704 2001 59 704 2002 59 704 2003 59 704 2004 59 704 2005 59 569 2006 59 125 59 ,"{'AvgLine': 8, 'CountLine': 17, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 17, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99562,C++,"class TigerPoint CPL_NON_FINAL: public TigerFileBase
{
 protected:
                      explicit TigerPoint(int bRequireGeom,
                                 const TigerRecordInfo *psRTInfoIn = nullptr,
                                 const char            *m_pszFileCodeIn = nullptr);

                      // The boolean bRequireGeom indicates whether
                      // the layer requires each feature to actual
                      // have a geom.  It's used in CreateFeature() to
                      // decide whether to report an error when a
                      // missing geom is detected.

 private:
 int                  bRequireGeom;

 public:
  virtual OGRFeature *GetFeature( int nFID) override { return TigerFileBase::GetFeature(nFID); } /* to avoid -Woverloaded-virtual warnings */
  OGRFeature *GetFeature( int              nRecordId,
                                  int nX0, int nX1,
                                  int nY0, int nY1 );

  virtual OGRErr CreateFeature( OGRFeature      *poFeature) override { return TigerFileBase::CreateFeature(poFeature); } /* to avoid -Woverloaded-virtual warnings */
  OGRErr CreateFeature( OGRFeature      *poFeature,
                                int nIndex );
};",0,587 2000 2001 58 777 2002 123 775 58 648 2000 40 704 2003 44 601 2004 42 2005 61 753 44 601 582 42 2006 61 753 41 59 330 330 330 330 330 773 58 704 2003 59 777 58 864 2007 42 2008 40 704 2009 41 2010 123 792 2002 321 2008 40 2009 41 59 125 305 2007 42 2008 40 704 2011 44 704 2012 44 704 2013 44 704 2014 44 704 2015 41 59 864 2016 2017 40 2007 42 2018 41 2010 123 792 2002 321 2017 40 2018 41 59 125 305 2016 2017 40 2007 42 2018 44 704 2019 41 59 125 59 ,"{'AvgLine': 18, 'CountLine': 116, 'CountStmt': 40, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 2, 'AvgLineBlank': 3, 'CountStmtExe': 31, 'MaxEssential': 5, 'SumEssential': 12, 'AvgCyclomatic': 2, 'CountLineCode': 77, 'CountStmtDecl': 13, 'MaxCyclomatic': 6, 'SumCyclomatic': 13, 'AltAvgLineCode': 12, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 23, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 5, 'AltCountLineCode': 77, 'CountLineCodeExe': 39, 'CountLineComment': 18, 'AltAvgLineComment': 2, 'AltCountLineBlank': 23, 'CountClassCoupled': 4, 'CountClassDerived': 3, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 29, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.23', 'AltCountLineComment': 18, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99570,C++,"class GTAIO final: public gta::custom_io
{
  private:
    VSILFILE *fp;

  public:
    GTAIO( ) throw ()
        : fp( nullptr )
    {
    }

    ~GTAIO( )
    {
        close( );
    }

    int open( const char *pszFilename, const char *pszMode )
    {
        fp = VSIFOpenL( pszFilename, pszMode );
        return fp == nullptr ? -1 : 0;
    }

    void close( )
    {
        if( fp != nullptr )
        {
            VSIFCloseL( fp );
            fp = nullptr;
        }
    }

    vsi_l_offset tell( )
    {
        return VSIFTellL( fp );
    }

    virtual size_t read(void *buffer, size_t size, bool *error) throw () override
    {
        size_t s;
        s = VSIFReadL( buffer, 1, size, fp );
        if( s != size )
        {
            errno = EIO;
            *error = true;
        }
        return size;
    }

    virtual size_t write(const void *buffer, size_t size, bool *error) throw () override
    {
        size_t s;
        s = VSIFWriteL( buffer, 1, size, fp );
        if( s != size )
        {
            errno = EIO;
            *error = true;
        }
        return size;
    }

    virtual bool seekable() throw () override
    {
        return true;
    }

    virtual void seek(intmax_t offset, int whence, bool *error) throw () override
    {
        int r;
        r = VSIFSeekL( fp, offset, whence );
        if( r != 0 )
        {
            errno = EIO;
            *error = true;
        }
    }
};",0,587 2000 2001 58 777 2002 321 2003 123 773 58 2004 42 2005 59 777 58 2000 40 41 825 40 41 58 2005 40 753 41 123 125 126 2000 40 41 123 2006 40 41 59 125 704 2007 40 601 582 42 2008 44 601 582 42 2009 41 123 2005 61 2010 40 2008 44 2009 41 59 792 2005 323 753 63 45 1501 58 1500 59 125 865 2011 40 41 123 688 40 2005 340 753 41 123 2012 40 2005 41 59 2005 61 753 59 125 125 2013 2014 40 41 123 792 2015 40 2005 41 59 125 864 2016 2017 40 865 42 2018 44 2016 2019 44 569 42 2020 41 825 40 41 2021 123 2016 2022 59 2022 61 2023 40 2018 44 1501 44 2019 44 2005 41 59 688 40 2022 340 2019 41 123 2024 61 2025 59 42 2020 61 829 59 125 792 2019 59 125 864 2016 2026 40 601 865 42 2018 44 2016 2019 44 569 42 2020 41 825 40 41 2021 123 2016 2027 59 2027 61 2028 40 2018 44 1501 44 2019 44 2005 41 59 688 40 2027 340 2019 41 123 2029 61 2030 59 42 2020 61 829 59 125 792 2019 59 125 864 569 2031 40 41 825 40 41 2021 123 792 829 59 125 864 865 2032 40 2033 2034 44 704 2035 44 569 42 2020 41 825 40 41 2021 123 704 2036 59 2036 61 2037 40 2005 44 2034 44 2035 41 59 688 40 2036 340 1500 41 123 2038 61 2039 59 42 2020 61 829 59 125 125 125 59 ,"{'AvgLine': 6, 'CountLine': 76, 'CountStmt': 36, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 67, 'CountStmtDecl': 14, 'MaxCyclomatic': 2, 'SumCyclomatic': 14, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 67, 'CountLineCodeExe': 20, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 36, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99586,C++,"class TSXRasterBand final: public GDALPamRasterBand {
    GDALDataset *poBand;
    ePolarization ePol;
public:
    TSXRasterBand( TSXDataset *poDSIn, GDALDataType eDataType,
        ePolarization ePol, GDALDataset *poBand );
    virtual ~TSXRasterBand();

    virtual CPLErr IReadBlock( int nBlockXOff, int nBlockYOff, void *pImage ) override;

    static GDALDataset *Open( GDALOpenInfo *poOpenInfo );
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2005 2006 59 777 58 2000 40 2007 42 2008 44 2009 2010 44 2005 2006 44 2003 42 2004 41 59 864 126 2000 40 41 59 864 2011 2012 40 704 2013 44 704 2014 44 865 42 2015 41 2016 59 809 2003 42 2017 40 2018 42 2019 41 59 125 59 ,"{'AvgLine': 20, 'CountLine': 72, 'CountStmt': 35, 'MaxNesting': 1, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 26, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 3, 'CountLineCode': 61, 'CountStmtDecl': 10, 'MaxCyclomatic': 5, 'SumCyclomatic': 10, 'AltAvgLineCode': 17, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 61, 'CountLineCodeExe': 36, 'CountLineComment': 4, 'AltAvgLineComment': 1, 'AltCountLineBlank': 7, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 132, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99596,C++,"class OGRGRASSDriver final: public OGRSFDriver
{
  public:
                        virtual ~OGRGRASSDriver();

    const char          *GetName() override;
    OGRDataSource       *Open( const char *, int ) override;

    int                 TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 864 126 2000 40 41 59 601 582 42 2003 40 41 2004 59 2005 42 2006 40 601 582 42 44 704 41 2004 59 704 2007 40 601 582 42 41 2004 59 125 59 ,"{'AvgLine': 6, 'CountLine': 36, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 33, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 44, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99933,C++,"class OGRCartoGeomFieldDefn final: public OGRGeomFieldDefn
{
    public:
        int nSRID;

        OGRCartoGeomFieldDefn(const char* pszNameIn, OGRwkbGeometryType eType) :
                OGRGeomFieldDefn(pszNameIn, eType), nSRID(0)
        {
        }
};",0,587 2000 2001 58 777 2002 123 777 58 704 2003 59 2000 40 601 582 42 2004 44 2005 2006 41 58 2002 40 2004 44 2006 41 44 2003 40 1500 41 123 125 125 59 ,"{'AvgLine': 4, 'CountLine': 10, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 9, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99615,C++,"class SectorCache {
public:
    explicit SectorCache(void *user_data,
                pread_t fn = nullptr,
                unsigned int size = 1024,
                unsigned int count = 2);

    // Fetches a pointer within the sector to the byte at the given address
    // No alignment is guaranteed, and only enough bytes to reach the end of the sector are available
    void *data(size_t address);

private:
    SectorCache();
    struct Sector {
        std::vector<char> range;
        size_t uid;
    };

    // N sectors of M bytes each
    unsigned int n, m;

    // Pointer to an pread like function
    pread_t reader;
    void *reader_data;
    // To avoid thrashing
    Sector *last_used;
    std::vector<Sector> store;
};",0,587 2000 123 777 58 648 2000 40 865 42 2001 44 2002 2003 61 753 44 856 704 2004 61 1505 44 856 704 2005 61 1502 41 59 330 330 865 42 2006 40 2007 2008 41 59 773 58 2000 40 41 59 816 2009 123 2010 321 2011 60 582 62 2012 59 2007 2013 59 125 59 330 856 704 2014 44 2015 59 330 2002 2016 59 865 42 2017 59 330 2009 42 2018 59 2019 321 2020 60 2009 62 2021 59 125 59 ,"{'AvgLine': 22, 'CountLine': 72, 'CountStmt': 25, 'MaxNesting': 2, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 54, 'CountStmtDecl': 17, 'MaxCyclomatic': 4, 'SumCyclomatic': 5, 'AltAvgLineCode': 17, 'AvgLineComment': 4, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 54, 'CountLineCodeExe': 11, 'CountLineComment': 14, 'AltAvgLineComment': 4, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.26', 'AltCountLineComment': 14, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
99619,C++,"class CompareAsNum
{
public:
    bool operator() (const std::string&, const std::string&) const;
};",0,587 2000 123 777 58 569 758 40 41 40 601 2001 321 2002 38 44 601 2001 321 2002 38 41 601 59 125 59 ,"{'AvgLine': 6, 'CountLine': 11, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 11, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99624,C++,"class PCIDSK_DLL CPCIDSKBlockFile : public BlockFile
{
protected:
    CPCIDSKFile *       mpoFile;

    uint16              mnGrowingSegment;

public:
    CPCIDSKBlockFile(PCIDSKFile * poFile);

    SysTileDir *        GetTileDir(void);

    SysTileDir *        CreateTileDir(void);

    virtual std::string GetFilename(void) const override;

    virtual bool        GetUpdatable(void) const override;

    virtual uint32      GetWidth(void) const override;
    virtual uint32      GetHeight(void) const override;

    virtual uint32      GetChannels(void) const override;

    virtual std::string GetFileOptions(void) const override;

    virtual uint64      GetImageFileSize(void) const override;

    virtual bool        IsValidFileOffset(uint64 nOffset) const override;

    virtual bool        IsCorruptedSegment(uint16 nSegment,
                                           uint64 nOffset, uint64 nSize) const override;

    virtual uint16      ExtendSegment(const std::string & oName,
                                      const std::string & oDesc,
                                      uint64 nExtendSize) override;

    virtual uint64      GetSegmentSize(uint16 nSegment) override;

    virtual void        WriteToSegment(uint16 nSegment, const void * pData,
                                       uint64 nOffset, uint64 nSize) override;

    virtual void        ReadFromSegment(uint16 nSegment, void * pData,
                                        uint64 nOffset, uint64 nSize) override;
};",0,587 2000 2001 58 777 2002 123 775 58 2003 42 2004 59 2005 2006 59 777 58 2001 40 2007 42 2008 41 59 2009 42 2010 40 865 41 59 2009 42 2011 40 865 41 59 864 2012 321 2013 2014 40 865 41 601 2015 59 864 569 2016 40 865 41 601 2015 59 864 2017 2018 40 865 41 601 2015 59 864 2017 2019 40 865 41 601 2015 59 864 2017 2020 40 865 41 601 2015 59 864 2012 321 2013 2021 40 865 41 601 2015 59 864 2022 2023 40 865 41 601 2015 59 864 569 2024 40 2022 2025 41 601 2015 59 864 569 2026 40 2005 2027 44 2022 2025 44 2022 2028 41 601 2015 59 864 2005 2029 40 601 2012 321 2013 38 2030 44 601 2012 321 2013 38 2031 44 2022 2032 41 2015 59 864 2022 2033 40 2005 2027 41 2015 59 864 865 2034 40 2005 2027 44 601 865 42 2035 44 2022 2025 44 2022 2028 41 2015 59 864 865 2036 40 2005 2027 44 865 42 2035 44 2022 2025 44 2022 2028 41 2015 59 125 59 ,"{'AvgLine': 12, 'CountLine': 243, 'CountStmt': 90, 'MaxNesting': 3, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 64, 'MaxEssential': 4, 'SumEssential': 19, 'AvgCyclomatic': 2, 'CountLineCode': 186, 'CountStmtDecl': 46, 'MaxCyclomatic': 7, 'SumCyclomatic': 32, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 50, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 16, 'AltCountLineCode': 186, 'CountLineCodeExe': 78, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 50, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 50, 'CountLineInactive': 0, 'CountDeclMethodAll': 30, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 39, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 9, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 16, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 57, 'SumCyclomaticModified': 32, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 21, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
99622,C++,"class IniFile
{
public:
    explicit IniFile(const std::string& filename);
    virtual ~IniFile();

    void SetKeyValue(const std::string& section, const std::string& key, const std::string& value);
    std::string GetKeyValue(const std::string& section, const std::string& key);

    void RemoveKeyValue(const std::string& section, const std::string& key);
    void RemoveSection(const std::string& section);

private:
    std::string filename;
    Sections sections;
    bool bChanged;

    void Load();
    void Store();
};",0,587 2000 123 777 58 648 2000 40 601 2001 321 2002 38 2003 41 59 864 126 2000 40 41 59 865 2004 40 601 2001 321 2002 38 2005 44 601 2001 321 2002 38 2006 44 601 2001 321 2002 38 2007 41 59 2001 321 2002 2008 40 601 2001 321 2002 38 2005 44 601 2001 321 2002 38 2006 41 59 865 2009 40 601 2001 321 2002 38 2005 44 601 2001 321 2002 38 2006 41 59 865 2010 40 601 2001 321 2002 38 2005 41 59 773 58 2001 321 2002 2003 59 2011 2012 59 569 2013 59 865 2014 40 41 59 865 2015 40 41 59 125 59 ,"{'AvgLine': 21, 'CountLine': 189, 'CountStmt': 59, 'MaxNesting': 1, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 167, 'CountStmtDecl': 38, 'MaxCyclomatic': 2, 'SumCyclomatic': 15, 'AltAvgLineCode': 18, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 167, 'CountLineCodeExe': 21, 'CountLineComment': 8, 'AltAvgLineComment': 1, 'AltCountLineBlank': 16, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 33, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 76, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99628,C++,"class GDALWMSFileCache : public GDALWMSCacheImpl
{
public:
    GDALWMSFileCache(const CPLString& soPath, CPLXMLNode *pConfig) :
        GDALWMSCacheImpl(soPath, pConfig),
        m_osPostfix(""""),
        m_nDepth(2),
        m_nExpires(604800),   // 7 days
        m_nMaxSize(67108864),  // 64 Mb
        m_nCleanThreadRunTimeout(120)  // 3 min
    {
        const char *pszCacheDepth = CPLGetXMLValue( pConfig, ""Depth"", ""2"" );
        if( pszCacheDepth != nullptr )
            m_nDepth = atoi( pszCacheDepth );

        const char *pszCacheExtension = CPLGetXMLValue( pConfig, ""Extension"", nullptr );
        if( pszCacheExtension != nullptr )
            m_osPostfix = pszCacheExtension;

        const char *pszCacheExpires = CPLGetXMLValue( pConfig, ""Expires"", nullptr );
        if( pszCacheExpires != nullptr )
        {
            m_nExpires = atoi( pszCacheExpires );
            CPLDebug(""WMS"", ""Cache expires in %d sec"", m_nExpires);
        }

        const char *pszCacheMaxSize = CPLGetXMLValue( pConfig, ""MaxSize"", nullptr );
        if( pszCacheMaxSize != nullptr )
            m_nMaxSize = atol( pszCacheMaxSize );

        const char *pszCleanThreadRunTimeout = CPLGetXMLValue( pConfig, ""CleanTimeout"", nullptr );
        if( pszCleanThreadRunTimeout != nullptr )
        {
            m_nCleanThreadRunTimeout = atoi( pszCleanThreadRunTimeout );
            CPLDebug(""WMS"", ""Clean Thread Run Timeout is %d sec"", m_nCleanThreadRunTimeout);
        }
    }

    virtual int GetCleanThreadRunTimeout() override
    {
        return m_nCleanThreadRunTimeout;
    }

    virtual CPLErr Insert(const char *pszKey, const CPLString &osFileName) override
    {
        // Warns if it fails to write, but returns success
        CPLString soFilePath = GetFilePath( pszKey );
        MakeDirs( CPLGetDirname(soFilePath) );
        if ( CPLCopyFile( soFilePath, osFileName ) == CE_None)
            return CE_None;
        // Warn if it fails after folder creation
        CPLError( CE_Warning, CPLE_FileIO, ""Error writing to WMS cache %s"",
                 m_soPath.c_str() );
        return CE_None;
    }

    virtual enum GDALWMSCacheItemStatus GetItemStatus(const char *pszKey) const override
    {
        VSIStatBufL  sStatBuf;
        if( VSIStatL( GetFilePath(pszKey), &sStatBuf ) == 0 )
        {
            long seconds = static_cast<long>( time( nullptr ) - sStatBuf.st_mtime );
            return seconds < m_nExpires ? CACHE_ITEM_OK : CACHE_ITEM_EXPIRED;
        }
        return  CACHE_ITEM_NOT_FOUND;
    }

    virtual GDALDataset* GetDataset(const char *pszKey, char **papszOpenOptions) const override
    {
        return reinterpret_cast<GDALDataset*>(
                    GDALOpenEx( GetFilePath( pszKey ), GDAL_OF_RASTER |
                               GDAL_OF_READONLY | GDAL_OF_VERBOSE_ERROR, nullptr,
                               papszOpenOptions, nullptr ) );
    }

    virtual void Clean() override
    {
        char **papszList = VSIReadDirRecursive( m_soPath );
        if( papszList == nullptr )
        {
            return;
        }

        int counter = 0;
        std::vector<int> toDelete;
        long nSize = 0;
        time_t nTime = time( nullptr );
        while( papszList[counter] != nullptr )
        {
            const char* pszPath = CPLFormFilename( m_soPath, papszList[counter], nullptr );
            VSIStatBufL sStatBuf;
            if( VSIStatL( pszPath, &sStatBuf ) == 0 )
            {
                if( !VSI_ISDIR( sStatBuf.st_mode ) )
                {
                    long seconds = static_cast<long>( nTime - sStatBuf.st_mtime );
                    if(seconds > m_nExpires)
                    {
                        toDelete.push_back(counter);
                    }

                    nSize += static_cast<long>( sStatBuf.st_size );
                }
            }
            counter++;
        }

        if( nSize > m_nMaxSize )
        {
            CPLDebug( ""WMS"", ""Delete %u items from cache"",
                                    static_cast<unsigned int>(toDelete.size()) );
            for( size_t i = 0; i < toDelete.size(); ++i )
            {
                const char* pszPath = CPLFormFilename( m_soPath,
                                                       papszList[toDelete[i]],
                                                       nullptr );
                VSIUnlink( pszPath );
            }
        }

        CSLDestroy(papszList);
    }

private:
    CPLString GetFilePath(const char* pszKey) const
    {
        CPLString soHash( CPLMD5String( pszKey ) );
        CPLString soCacheFile( m_soPath );

        if( !soCacheFile.empty() && soCacheFile.back() != '/' )
        {
            soCacheFile.append(1, '/');
        }

        for( int i = 0; i < m_nDepth; ++i )
        {
            soCacheFile.append( 1, soHash[i] );
            soCacheFile.append( 1, '/' );
        }
        soCacheFile.append( soHash );
        soCacheFile.append( m_osPostfix );
        return soCacheFile;
    }

    static void MakeDirs(const char *pszPath)
    {
        if( IsPathExists( pszPath ) )
        {
            return;
        }
        // Recursive makedirs, ignoring errors
        const char *pszDirPath = CPLGetDirname( pszPath );
        MakeDirs( pszDirPath );

        VSIMkdir( pszPath, 0744 );
    }

    static bool IsPathExists(const char *pszPath)
    {
        VSIStatBufL sbuf;
        return VSIStatL( pszPath, &sbuf ) == 0;
    }

private:
    CPLString m_osPostfix;
    int m_nDepth;
    int m_nExpires;
    long m_nMaxSize;
    int m_nCleanThreadRunTimeout;
};",0,587 2000 58 777 2001 123 777 58 2000 40 601 2002 38 2003 44 2004 42 2005 41 58 2001 40 2003 44 2005 41 44 2006 40 362 41 44 2007 40 1502 41 44 2008 40 1507 41 44 330 2009 40 1509 41 44 330 2010 40 1504 41 330 123 601 582 42 2011 61 2012 40 2005 44 362 44 362 41 59 688 40 2011 340 753 41 2007 61 2013 40 2011 41 59 601 582 42 2014 61 2012 40 2005 44 362 44 753 41 59 688 40 2014 340 753 41 2006 61 2014 59 601 582 42 2015 61 2012 40 2005 44 362 44 753 41 59 688 40 2015 340 753 41 123 2008 61 2013 40 2015 41 59 2016 40 362 44 362 44 2008 41 59 125 601 582 42 2017 61 2012 40 2005 44 362 44 753 41 59 688 40 2017 340 753 41 2009 61 2018 40 2017 41 59 601 582 42 2019 61 2012 40 2005 44 362 44 753 41 59 688 40 2019 340 753 41 123 2010 61 2013 40 2019 41 59 2020 40 362 44 362 44 2010 41 59 125 125 864 704 2021 40 41 2022 123 792 2010 59 125 864 2023 2024 40 601 582 42 2025 44 601 2002 38 2026 41 2022 123 330 2002 2027 61 2028 40 2025 41 59 2029 40 2030 40 2027 41 41 59 688 40 2031 40 2027 44 2026 41 323 2032 41 792 2032 59 330 2033 40 2034 44 2035 44 362 44 2036 46 2037 40 41 41 59 792 2032 59 125 864 640 2038 2039 40 601 582 42 2025 41 601 2022 123 2040 2041 59 688 40 2042 40 2043 40 2025 41 44 38 2041 41 323 1500 41 123 726 2044 61 811 60 726 62 40 2045 40 753 41 45 2041 46 2046 41 59 792 2044 60 2008 63 2047 58 2048 59 125 792 2049 59 125 864 2050 42 2051 40 601 582 42 2025 44 582 42 42 2052 41 601 2022 123 792 786 60 2050 42 62 40 2053 40 2054 40 2025 41 44 2055 124 2056 124 2057 44 753 44 2052 44 753 41 41 59 125 864 865 2058 40 41 2022 123 582 42 42 2059 61 2060 40 2061 41 59 688 40 2059 323 753 41 123 792 59 125 704 2062 61 1500 59 2063 321 2064 60 704 62 2065 59 726 2066 61 1500 59 2067 2068 61 2069 40 753 41 59 870 40 2059 91 2062 93 340 753 41 123 601 582 42 2070 61 2071 40 2061 44 2059 91 2062 93 44 753 41 59 2072 2073 59 688 40 2074 40 2070 44 38 2073 41 323 1500 41 123 688 40 33 2075 40 2073 46 2076 41 41 123 726 2077 61 811 60 726 62 40 2068 45 2073 46 2078 41 59 688 40 2077 62 2008 41 123 2065 46 2079 40 2062 41 59 125 2066 348 811 60 726 62 40 2073 46 2080 41 59 125 125 2062 349 59 125 688 40 2066 62 2009 41 123 2081 40 362 44 362 44 811 60 856 704 62 40 2065 46 2082 40 41 41 41 59 664 40 2083 2084 61 1500 59 2084 60 2065 46 2082 40 41 59 349 2084 41 123 601 582 42 2085 61 2086 40 2061 44 2059 91 2065 91 2084 93 93 44 753 41 59 2087 40 2085 41 59 125 125 2088 40 2059 41 59 125 773 58 2002 2089 40 601 582 42 2025 41 601 123 2002 2090 40 2091 40 2025 41 41 59 2002 2092 40 2093 41 59 688 40 33 2092 46 2094 40 41 307 2092 46 2095 40 41 340 314 41 123 2092 46 2096 40 1501 44 314 41 59 125 664 40 704 2097 61 1500 59 2097 60 2007 59 349 2097 41 123 2092 46 2098 40 1501 44 2090 91 2097 93 41 59 2092 46 2098 40 1501 44 314 41 59 125 2092 46 2099 40 2090 41 59 2092 46 2099 40 2006 41 59 792 2092 59 125 809 865 2100 40 601 582 42 2101 41 123 688 40 2102 40 2101 41 41 123 792 59 125 330 601 582 42 2103 61 2104 40 2101 41 59 2100 40 2103 41 59 2105 40 2101 44 1504 41 59 125 809 569 2106 40 601 582 42 2101 41 123 2107 2108 59 792 2109 40 2101 44 38 2108 41 323 1500 59 125 773 58 2002 2006 59 704 2007 59 704 2008 59 726 2009 59 704 2010 59 125 59 ,"{'AvgLine': 16, 'CountLine': 170, 'CountStmt': 87, 'MaxNesting': 4, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 60, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 147, 'CountStmtDecl': 41, 'MaxCyclomatic': 7, 'SumCyclomatic': 26, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 20, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 147, 'CountLineCodeExe': 73, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 20, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 43, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 27, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 84, 'SumCyclomaticModified': 26, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
99630,C++,"class OGRAmigoCloudGeomFieldDefn final: public OGRGeomFieldDefn
{
    public:
        int nSRID;

        OGRAmigoCloudGeomFieldDefn(const char* pszNameIn, OGRwkbGeometryType eType) :
                OGRGeomFieldDefn(pszNameIn, eType), nSRID(0)
        {
        }
};",0,587 2000 2001 58 777 2002 123 777 58 704 2003 59 2000 40 601 582 42 2004 44 2005 2006 41 58 2002 40 2004 44 2006 41 44 2003 40 1500 41 123 125 125 59 ,"{'AvgLine': 4, 'CountLine': 10, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 9, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99636,C++,"class OCAD_EXTERN CADHeader
{
public:
    /**
     * @brief The CAD нeader сonstants enum get from dxf reference:
     *        http://help.autodesk.com/view/ACD/2016/ENU/?guid=GUID-A85E8E67-27CD-4C59-BE61-4DC9FADBE74A
     */
    enum CADHeaderConstants
    {
        OPENCADVER          = 1, /**< enum CADVersions value*/
        ACADMAINTVER, /**< Maintenance version number (should be ignored) */
        ACADVER, /**< The AutoCAD drawing database version number:
                              AC1006 = R10
                              AC1009 = R11 and R12
                              AC1012 = R13
                              AC1014 = R14
                              AC1015 = AutoCAD 2000
                              AC1018 = AutoCAD 2004
                              AC1021 = AutoCAD 2007
                              AC1024 = AutoCAD 2010
                              AC1027 = AutoCAD 2013 */
        ANGBASE, /**< Angle 0 direction */
        ANGDIR, /**< 1 (Clockwise angles) or 0 (Counterclockwise angles) */
        ATTMODE, /**< Attribute visibility: 0,1,2 */
        ATTREQ, /**< todo: */
        ATTDIA, /**< todo: */
        AUNITS, /**< Units format for angles */
        AUPREC, /**< Units precision for angles */
        CECOLOR, /**< 0 = BYBLOCK; 256 = BYLAYER */
        CELTSCALE, /**< Current entity linetype scale */
        CELTYPE, /**< Entity linetype name, or BYBLOCK or BYLAYER */
        CELWEIGHT, /**< Lineweight of new objects */
        CEPSNID, /**< Plotstyle handle of new objects;
                              if CEPSNTYPE is 3, then this value indicates the
                              handle */
        CEPSNTYPE, /**< Plot style type of new objects:
                              0 = Plot style by layer,
                              1 = Plot style by block,
                              2 = Plot style by dictionary default,
                              3 = Plot style by object ID/handle */
        CHAMFERA, /**< First chamfer distance */
        CHAMFERB, /**< Second chamfer distance */
        CHAMFERC, /**< Chamfer length */
        CHAMFERD, /**< Chamfer angle */
        CLAYER, /**< Current layer name */
        CMLJUST, /**< Current multiline justification:
                              0 = Top;
                              1 = Middle;
                              2 = Bottom */
        CMLSCALE, /**< Current multiline scale */
        CMLSTYLE, /**< Current multiline style name */
        CSHADOW, /**< Shadow mode for a 3D object:
                              0 = Casts and receives shadows
                              1 = Casts shadows
                              2 = Receives shadows
                              3 = Ignores shadows */
        DIMADEC, /**< Number of precision places displayed in angular
                              dimensions */
        DIMALT, /**< Alternate unit dimensioning performed if nonzero */
        DIMALTD, /**< Alternate unit decimal places */
        DIMALTF, /**< Alternate unit scale factor */
        DIMALTRND, /**< Determines rounding of alternate units */
        DIMALTTD, /**< Number of decimal places for tolerance values of
                              an alternate units dimension */
        DIMALTTZ, /**< Controls suppression of zeros for alternate
                              tolerance values:
                              0 = Suppresses zero feet and precisely zero inches
                              1 = Includes zero feet and precisely zero inches
                              2 = Includes zero feet and suppresses zero inches
                              3 = Includes zero inches and suppresses zero feet */
        DIMALTU, /**< Units format for alternate units of all dimension
                              style family members except angular:
                              1 = Scientific
                              2 = Decimal
                              3 = Engineering
                              4 = Architectural (stacked)
                              5 = Fractional (stacked)
                              6 = Architectural
                              7 = Fractional */
        DIMALTZ, /**< Controls suppression of zeros for alternate unit
                              dimension, values:
                              0 = Suppresses zero feet and precisely zero inches
                              1 = Includes zero feet and precisely zero inches
                              2 = Includes zero feet and suppresses zero inches
                              3 = Includes zero inches and suppresses zero feet */
        DIMAPOST, /**< Alternate dimensioning suffix */
        DIMASO, /**< 1 = Create associative dimensioning,
                              0 = Draw individual entities */
        DIMASSOC, /**< Controls the associativity of dimension objects:
                              0 = Creates exploded dimensions; there is no
                                  association between elements of the dimension,
                                  and the lines, arcs, arrowheads, and text of a
                                  dimension are drawn as separate objects
                              1 = Creates non-associative dimension objects;
                                  the elements of the dimension are formed into
                                  a single object, and if the definition point
                                  on the object moves, then the dimension value
                                  is updated
                              2 = Creates associative dimension objects; the
                                  elements of the dimension are formed into a
                                  single object and one or more definition
                                  points of the dimension are coupled with
                                  association points on geometric objects */
        DIMASZ, /**< Dimensioning arrow size */
        DIMATFIT, /**< Controls dimension text and arrow placement when
                              space is not sufficient to place both within the
                              extension lines:
                              0 = Places both text and arrows outside extension
                                  lines
                              1 = Moves arrows first, then text
                              2 = Moves text first, then arrows
                              3 = Moves either text or arrows, whichever fits
                                  best AutoCAD adds a leader to moved dimension
                                  text when DIMTMOVE is set to 1 */
        DIMAUNIT, /**< Angle format for angular dimensions:
                              0 = Decimal degrees
                              1 = Degrees/minutes/seconds
                              2 = Gradians
                              3 = Radians
                              4 = Surveyor's units */
        DIMAZIN, /**< Controls suppression of zeros for angular
                              dimensions:
                              0 = Displays all leading and trailing zeros
                              1 = Suppresses leading zeros in decimal dimensions
                              2 = Suppresses trailing zeros in decimal dimensions
                              3 = Suppresses leading and trailing zeros */
        DIMBLK, /**< Arrow block name */
        DIMBLK1, /**< First arrow block name */
        DIMBLK2, /**< Second arrow block name */
        DIMCEN, /**< Size of center mark/lines */
        DIMCLRD, /**< Dimension line color:
                              range is 0 = BYBLOCK; 256 = BYLAYER */
        DIMCLRE, /**< Dimension extension line color:
                              range is 0 = BYBLOCK; 256 = BYLAYER */
        DIMCLRT, /**< Dimension text color:
                              range is 0 = BYBLOCK; 256 = BYLAYER */
        DIMDEC, /**< Number of decimal places for the tolerance values
                              of a primary units dimension */
        DIMDLE, /**< Dimension line extension */
        DIMDLI, /**< Dimension line increment */
        DIMDSEP, /**< Single-character decimal separator used when
                              creating dimensions whose unit format is decimal */
        DIMEXE, /**< Extension line extension */
        DIMEXO, /**< Extension line offset */
        DIMFAC, /**< Scale factor used to calculate the height of text
                              for dimension fractions and tolerances. AutoCAD
                              multiplies DIMTXT by DIMTFAC to set the fractional
                              or tolerance text height */
        DIMGAP, /**< Dimension line gap */
        DIMJUST, /**< Horizontal dimension text position:
                              0 = Above dimension line and center-justified
                                  between extension lines
                              1 = Above dimension line and next to first
                                  extension line
                              2 = Above dimension line and next to second
                                  extension line
                              3 = Above and center-justified to first extension
                                  line
                              4 = Above and center-justified to second
                                  extension line */
        DIMLDRBLK, /**< Arrow block name for leaders */
        DIMLFAC, /**< Linear measurements scale factor */
        DIMLIM, /**< Dimension limits generated if nonzero */
        DIMLUNIT, /**< Sets units for all dimension types except Angular:
                              1 = Scientific
                              2 = Decimal
                              3 = Engineering
                              4 = Architectural
                              5 = Fractional
                              6 = Windows desktop */
        DIMLWD, /**< Dimension line lineweight:
                              -3 = Standard
                              -2 = ByLayer
                              -1 = ByBlock
                              0-211 = an integer representing 100th of mm */
        DIMLWE, /**< Extension line lineweight:
                              -3 = Standard
                              -2 = ByLayer
                              -1 = ByBlock
                              0-211 = an integer representing 100th of mm */
        DIMPOST, /**< General dimensioning suffix */
        DIMRND, /**< Rounding value for dimension distances */
        DIMSAH, /**< Use separate arrow blocks if nonzero */
        DIMSCALE, /**< Overall dimensioning scale factor */
        DIMSD1, /**< Suppression of first extension line:
                              0 = Not suppressed
                              1 = Suppressed */
        DIMSD2, /**< Suppression of second extension line:
                              0 = Not suppressed
                              1 = Suppressed */
        DIMSE1, /**< First extension line suppressed if nonzero */
        DIMSE2, /**< Second extension line suppressed if nonzero */
        DIMSHO, /**< 1 = Recompute dimensions while dragging
                              0 = Drag original image */
        DIMSOXD, /**< Suppress outside-extensions dimension lines if
                              nonzero */
        DIMSTYLE, /**< Dimension style name */
        DIMTAD, /**< Text above dimension line if nonzero */
        DIMTDEC, /**< Number of decimal places to display the tolerance
                              values */
        DIMTFAC, /**< Dimension tolerance display scale factor */
        DIMTIH, /**< Text inside horizontal if nonzero */
        DIMTIX, /**< Force text inside extensions if nonzero */
        DIMTM, /**< Minus tolerance */
        DIMTMOVE, /**< Dimension text movement rules:
                              0 = Moves the dimension line with dimension text
                              1 = Adds a leader when dimension text is moved
                              2 = Allows text to be moved freely without a leader */
        DIMTOFL, /**< If text is outside extensions, force line
                              extensions between extensions if nonzero */
        DIMTOH, /**< Text outside horizontal if nonzero */
        DIMTOL, /**< Dimension tolerances generated if nonzero */
        DIMTOLJ, /**< Vertical justification for tolerance values:
                              0 = Top
                              1 = Middle
                              2 = Bottom */
        DIMTP, /**< Plus tolerance */
        DIMTSZ, /**< Dimensioning tick size:
                              0 = No ticks */
        DIMTVP, /**< Text vertical position */
        DIMTXSTY, /**< Dimension text style */
        DIMTXT, /**< Dimensioning text height */
        DIMTZIN, /**< Controls suppression of zeros for tolerance values:
                              0 = Suppresses zero feet and precisely zero inches
                              1 = Includes zero feet and precisely zero inches
                              2 = Includes zero feet and suppresses zero inches
                              3 = Includes zero inches and suppresses zero feet */
        DIMUPT, /**< Cursor functionality for user-positioned text:
                              0 = Controls only the dimension line location
                              1 = Controls the text position as well as the
                                  dimension line location */
        DIMZIN, /**< Controls suppression of zeros for primary unit
                              values:
                              0 = Suppresses zero feet and precisely zero inches
                              1 = Includes zero feet and precisely zero inches
                              2 = Includes zero feet and suppresses zero inches
                              3 = Includes zero inches and suppresses zero feet */
        DISPSILH, /**< Controls the display of silhouette curves of body
                              objects in Wireframe mode:
                              0 = Off
                              1 = On */
        DRAGVS, /**< Hard-pointer ID to visual style while creating 3D
                              solid primitives. The default value is NULL */
        DWGCODEPAGE, /**< Drawing code page; set to the system code page
                              when a new drawing is created, but not otherwise
                              maintained by AutoCAD */
        ELEVATION, /**< Current elevation set by ELEV command */
        ENDCAPS, /**< Lineweight endcaps setting for new objects:
                              0 = none
                              1 = round
                              2 = angle
                              3 = square */
        EXTMAX, /**< X, Y, and Z drawing extents upper-right corner
                              (in WCS) */
        EXTMIN, /**< X, Y, and Z drawing extents lower-left corner
                              (in WCS) */
        EXTNAMES, /**< Controls symbol table naming:
                              0 = Release 14 compatibility. Limits names to 31
                                  characters in length. Names can include the
                                  letters A to Z, the numerals 0 to 9, and the
                                  special characters dollar sign ($), underscore
                                  (_), and hyphen (-).
                              1 = AutoCAD 2000. Names can be up to 255 characters
                                  in length, and can include the letters A to Z,
                                  the numerals 0 to 9, spaces, and any special
                                  characters not used for other purposes by
                                  Microsoft Windows and AutoCAD */
        FILLETRAD, /**< Fillet radius */
        FILLMODE, /**< Fill mode on if nonzero */
        FINGERPRINTGUID, /**< Set at creation time, uniquely identifies a
                              particular drawing */
        HALOGAP, /**< Specifies a gap to be displayed where an object is
                              hidden by another object; the value is specified
                              as a percent of one unit and is independent of the
                              zoom level. A haloed line is shortened at the
                              point where it is hidden when HIDE or the Hidden
                              option of SHADEMODE is used */
        HANDSEED, /**< Next available handle */
        HIDETEXT, /**< Specifies HIDETEXT system variable:
                              0 = HIDE ignores text objects when producing the
                                  hidden view
                              1 = HIDE does not ignore text objects */
        HYPERLINKBASE, /**< Path for all relative hyperlinks in the drawing.
                              If null, the drawing path is used */
        INDEXCTL, /**< Controls whether layer and spatial indexes are
                              created and saved in drawing files:
                              0 = No indexes are created
                              1 = Layer index is created
                              2 = Spatial index is created
                              3 = Layer and spatial indexes are created */
        INSBASE, /**< Insertion base set by BASE command (in WCS) */
        INSUNITS, /**< Default drawing units for AutoCAD DesignCenter
                              blocks:
                              0 = Unitless
                              1 = Inches
                              2 = Feet
                              3 = Miles
                              4 = Millimeters
                              5 = Centimeters
                              6 = Meters
                              7 = Kilometers
                              8 = Microinches
                              9 = Mils
                             10 = Yards
                             11 = Angstroms
                             12 = Nanometers
                             13 = Microns
                             14 = Decimeters
                             15 = Decameters
                             16 = Hectometers
                             17 = Gigameters
                             18 = Astronomical units
                             19 = Light years
                             20 = Parsecs */
        INTERFERECOLOR, /**< Represents the ACI color index of the
                              ""interference objects"" created during the
                              interfere command. Default value is 1 */
        INTERFEREOBJVS, /**< Hard-pointer ID to the visual style for
                              interference objects. Default visual style is
                              Conceptual */
        INTERFEREVPVS, /**< Hard-pointer ID to the visual style for the
                              viewport during interference checking. Default
                              visual style is 3d Wireframe. */
        INTERSECTIONCOLOR, /**< Specifies the entity color of intersection
                                 polylines:
                                 Values 1-255 designate an AutoCAD color index (ACI)
                                 0 = Color BYBLOCK
                               256 = Color BYLAYER
                               257 = Color BYENTITY */
        INTERSECTIONDISPLAY, /**< Specifies the display of intersection polylines:
                                 0 = Turns off the display of intersection
                                     polylines
                                 1 = Turns on the display of intersection
                                     polylines */
        JOINSTYLE, /**< Lineweight joint setting for new objects:
                              0 = none
                              1 = round
                              2 = angle
                              3 = flat */
        LIMCHECK, /**< Nonzero if limits checking is on */
        LIMMAX, /**< XY drawing limits upper-right corner (in WCS) */
        LIMMIN, /**< XY drawing limits lower-left corner (in WCS) */
        LTSCALE, /**< Global linetype scale */
        LUNITS, /**< Units format for coordinates and distances */
        LUPREC, /**< Units precision for coordinates and distances */
        LWDISPLAY, /**< Controls the display of lineweights on the Model
                              or Layout tab:
                              0 = Lineweight is not displayed
                              1 = Lineweight is displayed */
        MAXACTVP, /**< Sets maximum number of viewports to be regenerated */
        MEASUREMENT, /**< Sets drawing units:
                              0 = English
                              1 = Metric */
        MENU, /**< Name of menu file */
        MIRRTEXT, /**< Mirror text if nonzero */
        OBSCOLOR, /**< Specifies the color of obscured lines. An obscured
                              line is a hidden line made visible by changing its
                              color and linetype and is visible only when the
                              HIDE or SHADEMODE command is used. The OBSCUREDCOLOR
                              setting is visible only if the OBSCUREDLTYPE is
                              turned ON by setting it to a value other than 0.
                              0 and 256 = Entity color
                              1-255 = An AutoCAD color index (ACI) */
        OBSLTYPE, /**< Specifies the linetype of obscured lines. Obscured
                              linetypes are independent of zoom level, unlike
                              regular AutoCAD linetypes. Value 0 turns off
                              display of obscured lines and is the default.
                              Linetype values are defined as follows:
                              0 = Off
                              1 = Solid
                              2 = Dashed
                              3 = Dotted
                              4 = Short Dash
                              5 = Medium Dash
                              6 = Long Dash
                              7 = Double Short Dash
                              8 = Double Medium Dash
                              9 = Double Long Dash
                             10 = Medium Long Dash
                             11 = Sparse Dot */
        ORTHOMODE, /**< Ortho mode on if nonzero */
        PDMODE, /**< Point display mode */
        PDSIZE, /**< Point display size */
        PELEVATION, /**< Current paper space elevation */
        PEXTMAX, /**< Maximum X, Y, and Z extents for paper space */
        PEXTMIN, /**< Minimum X, Y, and Z extents for paper space */
        PINSBASE, /**< Paper space insertion base point */
        PLIMCHECK, /**< Limits checking in paper space when nonzero */
        PLIMMAX, /**< Maximum X and Y limits in paper space */
        PLIMMIN, /**< Minimum X and Y limits in paper space */
        PLINEGEN, /**< Governs the generation of linetype patterns around
                              the vertices of a 2D polyline:
                              1 = Linetype is generated in a continuous pattern
                                  around vertices of the polyline
                              0 = Each segment of the polyline starts and ends
                                  with a dash */
        PLINEWID, /**< Default polyline width */
        PROJECTNAME, /**< Assigns a project name to the current drawing.
                              Used when an external reference or image is not
                              found on its original path. The project name
                              points to a section in the registry that can
                              contain one or more search paths for each project
                              name defined. Project names and their search
                              directories are created from the Files tab of the
                              Options dialog box */
        PROXYGRAPHICS, /**< Controls the saving of proxy object images */
        PSLTSCALE, /**< Controls paper space linetype scaling:
                              1 = No special linetype scaling
                              0 = Viewport scaling governs linetype scaling */
        PSTYLEMODE, /**< Indicates whether the current drawing is in a
                              Color-Dependent or Named Plot Style mode:
                              0 = Uses named plot style tables in the current
                                  drawing
                              1 = Uses color-dependent plot style tables in the
                                  current drawing */
        PSVPSCALE, /**< View scale factor for new viewports:
                              0 = Scaled to fit
                             >0 = Scale factor (a positive real value) */
        PUCSBASE, /**< Name of the UCS that defines the origin and
                              orientation of orthographic UCS settings (paper
                              space only) */
        PUCSNAME, /**< Current paper space UCS name */
        PUCSORG, /**< Current paper space UCS origin */
        PUCSORGBACK, /**< Point which becomes the new UCS origin after
                              changing paper space UCS to BACK when PUCSBASE is
                              set to WORLD */
        PUCSORGBOTTOM, /**< Point which becomes the new UCS origin after
                              changing paper space UCS to BOTTOM when PUCSBASE
                              is set to WORLD */
        PUCSORGFRONT, /**< Point which becomes the new UCS origin after
                              changing paper space UCS to FRONT when PUCSBASE is
                              set to WORLD */
        PUCSORGLEFT, /**< Point which becomes the new UCS origin after
                              changing paper space UCS to LEFT when PUCSBASE is
                              set to WORLD */
        PUCSORGRIGHT, /**< Point which becomes the new UCS origin after
                              changing paper space UCS to RIGHT when PUCSBASE is
                              set to WORLD */
        PUCSORGTOP, /**< Point which becomes the new UCS origin after
                              changing paper space UCS to TOP when PUCSBASE is
                              set to WORLD */
        PUCSORTHOREF, /**< If paper space UCS is orthographic (PUCSORTHOVIEW
                              not equal to 0), this is the name of the UCS that
                              the orthographic UCS is relative to. If blank, UCS
                              is relative to WORLD */
        PUCSORTHOVIEW, /**< Orthographic view type of paper space UCS:
                              0 = UCS is not orthographic
                              1 = Top
                              2 = Bottom
                              3 = Front
                              4 = Back
                              5 = Left
                              6 = Right */
        PUCSXDIR, /**< Current paper space UCS X axis */
        PUCSYDIR, /**< Current paper space UCS Y axis */
        QTEXTMODE, /**< Quick Text mode on if nonzero */
        REGENMODE, /**< REGENAUTO mode on if nonzero */
        SHADEDGE, /**< 0 = Faces shaded, edges not highlighted
                              1 = Faces shaded, edges highlighted in black
                              2 = Faces not filled, edges in entity color
                              3 = Faces in entity color, edges in black */
        SHADEDIF, /**< Percent ambient/diffuse light range 1-100
                              default 70 */
        SHADOWPLANELOCATION, /**< Location of the ground shadow plane. This is a
                                  Z axis ordinate. */
        SKETCHINC, /**< Sketch record increment */
        SKPOLY, /**< 0 = Sketch lines
                              1 = Sketch polylines */
        SORTENTS, /**< Controls the object sorting methods; accessible
                              from the Options dialog box User Preferences tab.
                              SORTENTS uses the following bitcodes:
                              0 = Disables SORTENTS
                              1 = Sorts for object selection
                              2 = Sorts for object snap
                              4 = Sorts for redraws
                              8 = Sorts for MSLIDE command slide creation
                             16 = Sorts for REGEN commands
                             32 = Sorts for plotting
                             64 = Sorts for PostScript output */
        SPLINESEGS, /**< Number of line segments per spline patch */
        SPLINETYPE, /**< Spline curve type for PEDIT Spline */
        SURFTAB1, /**< Number of mesh tabulations in first direction */
        SURFTAB2, /**< Number of mesh tabulations in second direction */
        SURFTYPE, /**< Surface type for PEDIT Smooth */
        SURFU, /**< Surface density (for PEDIT Smooth) in M direction */
        SURFV, /**< Surface density (for PEDIT Smooth) in N direction */
        TDCREATE, /**< Local date/time of drawing creation (see “Special
                              Handling of Date/Time Variables”) */
        TDINDWG, /**< Cumulative editing time for this drawing */
        TDUCREATE, /**< Universal date/time the drawing was created */
        TDUPDATE, /**< Local date/time of last drawing update */
        TDUSRTIMER, /**< User-elapsed timer */
        TDUUPDATE, /**< Universal date/time of the last update/save */
        TEXTSIZE, /**< Default text height */
        TEXTSTYLE, /**< Current text style name */
        THICKNESS, /**< Current thickness set by ELEV command */
        TILEMODE, /**< 1 for previous release compatibility mode
                              0 otherwise */
        TRACEWID, /**< Default trace width */
        TREEDEPTH, /**< Specifies the maximum depth of the spatial index */
        UCSBASE, /**< Name of the UCS that defines the origin and
                              orientation of orthographic UCS settings */
        UCSNAME, /**< Name of current UCS */
        UCSORG, /**< Origin of current UCS (in WCS) */
        UCSORGBACK, /**< Point which becomes the new UCS origin after
                              changing model space UCS to BACK when UCSBASE is
                              set to WORLD */
        UCSORGBOTTOM, /**< Point which becomes the new UCS origin after
                              changing model space UCS to BOTTOM when UCSBASE is
                              set to WORLD */
        UCSORGFRONT, /**< Point which becomes the new UCS origin after
                              changing model space UCS to FRONT when UCSBASE is
                              set to WORLD */
        UCSORGLEFT, /**< Point which becomes the new UCS origin after
                              changing model space UCS to LEFT when UCSBASE is
                              set to WORLD */
        UCSORGRIGHT, /**< Point which becomes the new UCS origin after
                              changing model space UCS to RIGHT when UCSBASE is
                              set to WORLD */
        UCSORGTOP, /**< Point which becomes the new UCS origin after
                              changing model space UCS to TOP when UCSBASE is
                              set to WORLD */
        UCSORTHOREF, /**< If model space UCS is orthographic (UCSORTHOVIEW
                              not equal to 0), this is the name of the UCS that
                              the orthographic UCS is relative to. If blank, UCS
                              is relative to WORLD */
        UCSORTHOVIEW, /**< Orthographic view type of model space UCS:
                              0 = UCS is not orthographic
                              1 = Top
                              2 = Bottom
                              3 = Front
                              4 = Back
                              5 = Left
                              6 = Right */
        UCSXDIR, /**< Direction of the current UCS X axis (in WCS) */
        UCSYDIR, /**< Direction of the current UCS Y axis (in WCS) */
        UNITMODE, /**< Low bit set = Display fractions, feet-and-inches,
                              and surveyor's angles in input format */
        USERI1, /**< Five integer variables intended for use by
                              third-party developers */
        USERI2, USERI3, USERI4, USERI5, USERR1, /**< Five real variables intended for use by
                              third-party developers */
        USERR2, USERR3, USERR4, USERR5, USRTIMER, /**< 0 = Timer off
                              1 = Timer on */
        VERSIONGUID, /**< Uniquely identifies a particular version of a
                              drawing. Updated when the drawing is modified */
        VISRETAIN, /**< 0 = Don't retain xref-dependent visibility settings
                              1 = Retain xref-dependent visibility settings */
        WORLDVIEW, /**< 1 = Set UCS to WCS during DVIEW/VPOINT
                              0 = Don't change UCS */
        XCLIPFRAME, /**< Controls the visibility of xref clipping
                              boundaries:
                              0 = Clipping boundary is not visible
                              1 = Clipping boundary is visible */
        XEDIT, /**< Controls whether the current drawing can be edited
                              in-place when being referenced by another drawing.
                              0 = Can't use in-place reference editing
                              1 = Can use in-place reference editing */
        SPLFRAME, /** ? */
        WORDLVIEW, /** ? */
        PELLIPSE, /** ? */
        ISOLINES, /** ? */
        TEXTQLTY, /** ? */
        FACETRES, /** ? */
        DIMFRAC, /** ? */
        OLESTARTUP, /** ? */
        STYLESHEET, /** ? */
        TSTACKALIGN, /**< default = 1 (not present in DXF) */
        TSTACKSIZE, /**< default = 70 (not present in DXF) */
        MAX_HEADER_CONSTANT = 1000 /**< max + num for user constants */

    };
public:
                     CADHeader();
    /**
     * @brief Add new value to the CAD file header
     * @param code The code from constants enum
     * @param val Value to add
     * @return SUCCESS or some value from CADErrorCodes
     */
    int              addValue( short code, const CADVariant& val );
    int              addValue( short code, const char * val );
    //int              addValue( short code, long val );
    int              addValue( short code, int val );
    int              addValue( short code, short val );
    int              addValue( short code, double val );
    int              addValue( short code, const std::string& val );
    int              addValue( short code, bool val );
    int              addValue( short code, double x, double y, double z = 0 );
    int              addValue( short code, long julianday, long milliseconds );
    static int              getGroupCode( short code );
    const CADVariant getValue( short code, const CADVariant& val = CADVariant() ) const;
    static const char * getValueName( short code );
    void   print() const;
    size_t getSize() const;
    short  getCode( int index ) const;
protected:
    std::map<short, CADVariant> valuesMap;
};",0,587 2000 2001 123 777 58 306 640 2002 123 2003 61 1501 44 306 2004 44 306 2005 44 306 2006 44 306 2007 44 306 2008 44 306 2009 44 306 2010 44 306 2011 44 306 2012 44 306 2013 44 306 2014 44 306 2015 44 306 2016 44 306 2017 44 306 2018 44 306 2019 44 306 2020 44 306 2021 44 306 2022 44 306 2023 44 306 2024 44 306 2025 44 306 2026 44 306 2027 44 306 2028 44 306 2029 44 306 2030 44 306 2031 44 306 2032 44 306 2033 44 306 2034 44 306 2035 44 306 2036 44 306 2037 44 306 2038 44 306 2039 44 306 2040 44 306 2041 44 306 2042 44 306 2043 44 306 2044 44 306 2045 44 306 2046 44 306 2047 44 306 2048 44 306 2049 44 306 2050 44 306 2051 44 306 2052 44 306 2053 44 306 2054 44 306 2055 44 306 2056 44 306 2057 44 306 2058 44 306 2059 44 306 2060 44 306 2061 44 306 2062 44 306 2063 44 306 2064 44 306 2065 44 306 2066 44 306 2067 44 306 2068 44 306 2069 44 306 2070 44 306 2071 44 306 2072 44 306 2073 44 306 2074 44 306 2075 44 306 2076 44 306 2077 44 306 2078 44 306 2079 44 306 2080 44 306 2081 44 306 2082 44 306 2083 44 306 2084 44 306 2085 44 306 2086 44 306 2087 44 306 2088 44 306 2089 44 306 2090 44 306 2091 44 306 2092 44 306 2093 44 306 2094 44 306 2095 44 306 2096 44 306 2097 44 306 2098 44 306 2099 44 306 2100 44 306 2101 44 306 2102 44 306 2103 44 306 2104 44 306 2105 44 306 2106 44 306 2107 44 306 2108 44 306 2109 44 306 2110 44 306 2111 44 306 2112 44 306 2113 44 306 2114 44 306 2115 44 306 2116 44 306 2117 44 306 2118 44 306 2119 44 306 2120 44 306 2121 44 306 2122 44 306 2123 44 306 2124 44 306 2125 44 306 2126 44 306 2127 44 306 2128 44 306 2129 44 306 2130 44 306 2131 44 306 2132 44 306 2133 44 306 2134 44 306 2135 44 306 2136 44 306 2137 44 306 2138 44 306 2139 44 306 2140 44 306 2141 44 306 2142 44 306 2143 44 306 2144 44 306 2145 44 306 2146 44 306 2147 44 306 2148 44 306 2149 44 306 2150 44 306 2151 44 306 2152 44 306 2153 44 306 2154 44 306 2155 44 306 2156 44 306 2157 44 306 2158 44 306 2159 44 306 2160 44 306 2161 44 306 2162 44 306 2163 44 306 2164 44 306 2165 44 306 2166 44 306 2167 44 306 2168 44 306 2169 44 306 2170 44 306 2171 44 306 2172 44 306 2173 44 306 2174 44 306 2175 44 306 2176 44 306 2177 44 306 2178 44 306 2179 44 306 2180 44 306 2181 44 306 2182 44 306 2183 44 306 2184 44 306 2185 44 306 2186 44 306 2187 44 306 2188 44 306 2189 44 306 2190 44 306 2191 44 306 2192 44 306 2193 44 306 2194 44 306 2195 44 306 2196 44 306 2197 44 306 2198 44 306 2199 44 306 2200 44 306 2201 44 306 2202 44 306 2203 44 306 2204 44 306 2205 44 2206 44 2207 44 2208 44 2209 44 306 2210 44 2211 44 2212 44 2213 44 2214 44 306 2215 44 306 2216 44 306 2217 44 306 2218 44 306 2219 44 306 2220 44 306 2221 44 306 2222 44 306 2223 44 306 2224 44 306 2225 44 306 2226 44 306 2227 44 306 2228 44 306 2229 44 306 2230 44 306 2231 61 1504 306 125 59 777 58 2001 40 41 59 306 704 2232 40 803 2233 44 601 2234 38 2235 41 59 704 2232 40 803 2233 44 601 582 42 2235 41 59 330 704 2232 40 803 2233 44 704 2235 41 59 704 2232 40 803 2233 44 803 2235 41 59 704 2232 40 803 2233 44 625 2235 41 59 704 2232 40 803 2233 44 601 2236 321 2237 38 2235 41 59 704 2232 40 803 2233 44 569 2235 41 59 704 2232 40 803 2233 44 625 2238 44 625 2239 44 625 2240 61 1500 41 59 704 2232 40 803 2233 44 726 2241 44 726 2242 41 59 809 704 2243 40 803 2233 41 59 601 2234 2244 40 803 2233 44 601 2234 38 2235 61 2234 40 41 41 601 59 809 601 582 42 2245 40 803 2233 41 59 865 2246 40 41 601 59 2247 2248 40 41 601 59 803 2249 40 704 2250 41 601 59 775 58 2236 321 2251 60 803 44 2234 62 2252 59 125 59 ,"{'AvgLine': 5, 'CountLine': 126, 'CountStmt': 60, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 32, 'MaxEssential': 1, 'SumEssential': 16, 'AvgCyclomatic': 1, 'CountLineCode': 110, 'CountStmtDecl': 33, 'MaxCyclomatic': 3, 'SumCyclomatic': 24, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 16, 'AltCountLineCode': 110, 'CountLineCodeExe': 34, 'CountLineComment': 13, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 13, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 24, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 16, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 24, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 19, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
99641,C++,"class GRIBGroup final: public GDALGroup
{
    friend class GRIBArray;
    std::shared_ptr<GRIBSharedResource> m_poShared{};
    std::vector<std::shared_ptr<GDALMDArray>> m_poArrays{};
    std::vector<std::shared_ptr<GDALDimension>> m_dims{};
    std::map<std::string, std::shared_ptr<GDALDimension>> m_oMapDims{};
    int m_nHorizDimCounter = 0;
    std::shared_ptr<GDALGroup> m_memRootGroup{};

public:
    explicit GRIBGroup(const std::shared_ptr<GRIBSharedResource>& poShared):
        GDALGroup(std::string(), ""/""),
        m_poShared(poShared)
    {
        std::unique_ptr<GDALDataset> poTmpDS(
                        MEMDataset::CreateMultiDimensional("""", nullptr, nullptr));
        m_memRootGroup = poTmpDS->GetRootGroup();
    }

    void AddArray(const std::shared_ptr<GDALMDArray>& array)
    {
        m_poArrays.emplace_back(array);
    }

    std::vector<std::string> GetMDArrayNames(CSLConstList papszOptions) const override;
    std::shared_ptr<GDALMDArray> OpenMDArray(const std::string& osName,
                                             CSLConstList papszOptions) const override;

    std::vector<std::shared_ptr<GDALDimension>> GetDimensions(CSLConstList) const override { return m_dims; }
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 321 2005 60 2006 62 2007 123 125 59 2004 321 2008 60 2004 321 2005 60 2009 355 2010 123 125 59 2004 321 2008 60 2004 321 2005 60 2011 355 2012 123 125 59 2004 321 2013 60 2004 321 2014 44 2004 321 2005 60 2011 355 2015 123 125 59 704 2016 61 1500 59 2004 321 2005 60 2002 62 2017 123 125 59 777 58 648 2000 40 601 2004 321 2005 60 2006 62 38 2018 41 58 2002 40 2004 321 2014 40 41 44 362 41 44 2007 40 2018 41 123 2004 321 2019 60 2020 62 2021 40 2022 321 2023 40 362 44 753 44 753 41 41 59 2017 61 2021 354 2024 40 41 59 125 865 2025 40 601 2004 321 2005 60 2009 62 38 2026 41 123 2010 46 2027 40 2026 41 59 125 2004 321 2008 60 2004 321 2014 62 2028 40 2029 2030 41 601 2031 59 2004 321 2005 60 2009 62 2032 40 601 2004 321 2014 38 2033 44 2029 2030 41 601 2031 59 2004 321 2008 60 2004 321 2005 60 2011 355 2034 40 2029 41 601 2031 123 792 2012 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 50, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 16, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 46, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 33, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 14, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99638,C++,"class InventoryWrapper
{
  public:
    InventoryWrapper() {}
    virtual ~InventoryWrapper() {}

    // Modifying the contents pointed to by the return is allowed.
    inventoryType * get(int i) const {
      if (i < 0 || i >= static_cast<int>(inv_len_)) return nullptr;
      return inv_ + i;
    }

    uInt4 length() const { return inv_len_; }
    size_t num_messages() const { return num_messages_; }
    int result() const { return result_; }

  protected:
    inventoryType *inv_ = nullptr;
    uInt4 inv_len_ = 0;
    int num_messages_ = 0;
    int result_ = 0;
};",0,587 2000 123 777 58 2000 40 41 123 125 864 126 2000 40 41 123 125 330 2001 42 2002 40 704 2003 41 601 123 688 40 2003 60 1500 309 2003 325 811 60 704 62 40 2004 41 41 792 753 59 792 2005 43 2003 59 125 2006 2007 40 41 601 123 792 2008 59 125 2009 2010 40 41 601 123 792 2011 59 125 704 2012 40 41 601 123 792 2013 59 125 775 58 2001 42 2014 61 753 59 2006 2015 61 1500 59 704 2016 61 1500 59 704 2017 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 22, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 18, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 82, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 4}"
99646,C++,"class OGRWFSSortDesc
{
    public:
        CPLString osColumn;
        bool      bAsc;

        OGRWFSSortDesc( const CPLString& osColumnIn, int bAscIn ) :
            osColumn(osColumnIn),
            bAsc(CPL_TO_BOOL(bAscIn)) {}
};",0,587 2000 123 777 58 2001 2002 59 569 2003 59 2000 40 601 2001 38 2004 44 704 2005 41 58 2002 40 2004 41 44 2003 40 2006 40 2005 41 41 123 125 125 59 ,"{'AvgLine': 3, 'CountLine': 10, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 9, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99658,C++,"class TABCustomPoint final : public TABPoint,
                      public ITABFeatureFont
{
  protected:
    GByte       m_nCustomStyle;         // Show BG/Apply Color

  public:
    GByte       m_nUnknown_;

  public:
    explicit TABCustomPoint(OGRFeatureDefn *poDefnIn);
    virtual ~TABCustomPoint();

    virtual TABFeatureClass GetFeatureClass() override { return TABFCCustomPoint; }

    virtual TABFeature *CloneTABFeature(OGRFeatureDefn *poNewDefn = nullptr ) override;

    virtual int ReadGeometryFromMAPFile(TABMAPFile *poMapFile, TABMAPObjHdr *,
                                        GBool bCoordDataOnly=FALSE,
                                        TABMAPCoordBlock **ppoCoordBlock=nullptr) override;
    virtual int WriteGeometryToMAPFile(TABMAPFile *poMapFile, TABMAPObjHdr *,
                                       GBool bCoordDataOnly=FALSE,
                                       TABMAPCoordBlock **ppoCoordBlock=nullptr) override;

    virtual int ReadGeometryFromMIFFile(MIDDATAFile *fp) override;
    virtual int WriteGeometryToMIFFile(MIDDATAFile *fp) override;

    virtual const char *GetSymbolStyleString(double dfAngle = 0.0) const override;
    virtual const char *GetStyleString() const override;
    virtual void SetSymbolFromStyle(OGRStyleSymbol* poSymbolStyle) override;

    const char *GetSymbolNameRef() const { return GetFontNameRef(); }
    void        SetSymbolName(const char *pszName) {SetFontName(pszName);}

    GByte       GetCustomSymbolStyle()              {return m_nCustomStyle;}
    void        SetCustomSymbolStyle(GByte nStyle)  {m_nCustomStyle = nStyle;}
};",0,587 2000 2001 58 777 2002 44 777 2003 123 775 58 2004 2005 59 330 777 58 2004 2006 59 777 58 648 2000 40 2007 42 2008 41 59 864 126 2000 40 41 59 864 2009 2010 40 41 2011 123 792 2012 59 125 864 2013 42 2014 40 2007 42 2015 61 753 41 2011 59 864 704 2016 40 2017 42 2018 44 2019 42 44 2020 2021 61 2022 44 2023 42 42 2024 61 753 41 2011 59 864 704 2025 40 2017 42 2018 44 2019 42 44 2020 2021 61 2022 44 2023 42 42 2024 61 753 41 2011 59 864 704 2026 40 2027 42 2028 41 2011 59 864 704 2029 40 2027 42 2028 41 2011 59 864 601 582 42 2030 40 625 2031 61 1500 41 601 2011 59 864 601 582 42 2032 40 41 601 2011 59 864 865 2033 40 2034 42 2035 41 2011 59 601 582 42 2036 40 41 601 123 792 2037 40 41 59 125 865 2038 40 601 582 42 2039 41 123 2040 40 2039 41 59 125 2004 2041 40 41 123 792 2005 59 125 865 2042 40 2004 2043 41 123 2005 61 2043 59 125 125 59 ,"{'AvgLine': 19, 'CountLine': 317, 'CountStmt': 141, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 102, 'MaxEssential': 4, 'SumEssential': 22, 'AvgCyclomatic': 2, 'CountLineCode': 223, 'CountStmtDecl': 49, 'MaxCyclomatic': 4, 'SumCyclomatic': 31, 'AltAvgLineCode': 13, 'AvgLineComment': 3, 'CountClassBase': 2, 'CountLineBlank': 56, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 3, 'CountDeclMethod': 15, 'AltCountLineCode': 223, 'CountLineCodeExe': 161, 'CountLineComment': 50, 'AltAvgLineComment': 3, 'AltCountLineBlank': 56, 'CountClassCoupled': 11, 'CountClassDerived': 0, 'CountLineCodeDecl': 54, 'CountLineInactive': 0, 'CountDeclMethodAll': 192, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.22', 'AltCountLineComment': 50, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 42, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 15, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 67, 'SumCyclomaticModified': 31, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 17, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
99651,C++,"class CPLThreadLocaleCPrivate
{
        char *pszOldLocale;

        CPL_DISALLOW_COPY_ASSIGN(CPLThreadLocaleCPrivate)

    public:
        CPLThreadLocaleCPrivate();
       ~CPLThreadLocaleCPrivate();
};",0,587 2000 123 582 42 2001 59 2002 40 2000 41 777 58 2000 40 41 59 126 2000 40 41 59 125 59 ,"{'AvgLine': 9, 'CountLine': 29, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 27, 'CountStmtDecl': 3, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 27, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99669,C++,"class OGROGDIDriver final: public OGRSFDriver
{
  public:
                ~OGROGDIDriver();

    const char *GetName() override;
    OGRDataSource *Open( const char *, int ) override;

    int         TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 126 2000 40 41 59 601 582 42 2003 40 41 2004 59 2005 42 2006 40 601 582 42 44 704 41 2004 59 704 2007 40 601 582 42 41 2004 59 125 59 ,"{'AvgLine': 11, 'CountLine': 55, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 39, 'CountStmtDecl': 5, 'MaxCyclomatic': 4, 'SumCyclomatic': 7, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 42, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 3, 'CountDeclMethodAll': 44, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99689,C++,"class SDTS_XREF
{
  public:
                SDTS_XREF();
                ~SDTS_XREF();

    int         Read( const char *pszFilename );

    /** Projection system name, from the RSNM field.  One of GEO, SPCS, UTM,
        UPS, OTHR, UNSP. */
    char        *pszSystemName;

    /** Horizontal datum name, from the HDAT field.  One of NAS, NAX, WGA,
        WGB, WGC, WGE. */
    char        *pszDatum;

    /** Zone number for UTM and SPCS projections, from the ZONE field. */
    int         nZone;
};",0,587 2000 123 777 58 2000 40 41 59 126 2000 40 41 59 704 2001 40 601 582 42 2002 41 59 306 582 42 2003 59 306 582 42 2004 59 306 704 2005 59 125 59 ,"{'AvgLine': 15, 'CountLine': 65, 'CountStmt': 25, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 18, 'MaxEssential': 4, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 39, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 6, 'AltAvgLineCode': 9, 'AvgLineComment': 3, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 3, 'AltCountLineCode': 39, 'CountLineCodeExe': 39, 'CountLineComment': 14, 'AltAvgLineComment': 3, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.36', 'AltCountLineComment': 14, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99694,C++,"class RS2RasterBand final: public GDALPamRasterBand
{
    GDALDataset     *poBandFile;

  public:
            RS2RasterBand( RS2Dataset *poDSIn,
                               GDALDataType eDataTypeIn,
                               const char *pszPole,
                               GDALDataset *poBandFile );
    virtual     ~RS2RasterBand();

    virtual CPLErr IReadBlock( int, int, void * ) override;

    static GDALDataset *Open( GDALOpenInfo * );
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 777 58 2000 40 2005 42 2006 44 2007 2008 44 601 582 42 2009 44 2003 42 2004 41 59 864 126 2000 40 41 59 864 2010 2011 40 704 44 704 44 865 42 41 2012 59 809 2003 42 2013 40 2014 42 41 59 125 59 ,"{'AvgLine': 40, 'CountLine': 136, 'CountStmt': 37, 'MaxNesting': 1, 'AvgLineCode': 29, 'AvgEssential': 2, 'AvgLineBlank': 4, 'CountStmtExe': 28, 'MaxEssential': 5, 'SumEssential': 7, 'AvgCyclomatic': 3, 'CountLineCode': 99, 'CountStmtDecl': 10, 'MaxCyclomatic': 7, 'SumCyclomatic': 11, 'AltAvgLineCode': 29, 'AvgLineComment': 6, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 4, 'CountDeclMethod': 4, 'AltCountLineCode': 101, 'CountLineCodeExe': 60, 'CountLineComment': 19, 'AltAvgLineComment': 6, 'AltCountLineBlank': 16, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 132, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.19', 'AltCountLineComment': 19, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99699,C++,"class CPL_DLL GDALDimensionWeakIndexingVar: public GDALDimension
{
    std::weak_ptr<GDALMDArray> m_poIndexingVariable{};

public:
    GDALDimensionWeakIndexingVar(const std::string& osParentName,
                  const std::string& osName,
                  const std::string& osType,
                  const std::string& osDirection,
                  GUInt64 nSize);

    std::shared_ptr<GDALMDArray> GetIndexingVariable() const override;

    bool SetIndexingVariable(std::shared_ptr<GDALMDArray> poIndexingVariable) override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 123 125 59 777 58 2001 40 601 2003 321 2007 38 2008 44 601 2003 321 2007 38 2009 44 601 2003 321 2007 38 2010 44 601 2003 321 2007 38 2011 44 2012 2013 41 59 2003 321 2014 60 2005 62 2015 40 41 601 2016 59 569 2017 40 2003 321 2014 60 2005 62 2018 41 2016 59 125 59 ,"{'AvgLine': 5, 'CountLine': 31, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 28, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99707,C++,"class GDALMDArrayResampledDataset final: public GDALPamDataset
{
    friend class GDALMDArrayResampled;
    friend class GDALMDArrayResampledDatasetRasterBand;

    std::shared_ptr<GDALMDArray> m_poArray;
    size_t m_iXDim;
    size_t m_iYDim;
    double m_adfGeoTransform[6]{0,1,0,0,0,1};
    bool m_bHasGT = false;
    mutable std::shared_ptr<OGRSpatialReference> m_poSRS{};

    std::vector<GUInt64>     m_anOffset{};
    std::vector<size_t>      m_anCount{};
    std::vector<GPtrDiff_t>  m_anStride{};

    std::string m_osFilenameLong{};
    std::string m_osFilenameLat{};

public:
    GDALMDArrayResampledDataset(const std::shared_ptr<GDALMDArray>& array,
                                size_t iXDim, size_t iYDim):
        m_poArray(array),
        m_iXDim(iXDim),
        m_iYDim(iYDim),
        m_anOffset(m_poArray->GetDimensionCount(), 0),
        m_anCount(m_poArray->GetDimensionCount(), 1),
        m_anStride(m_poArray->GetDimensionCount(), 0)
    {
        const auto& dims(m_poArray->GetDimensions());

        nRasterYSize = static_cast<int>(
            std::min(static_cast<GUInt64>(INT_MAX), dims[iYDim]->GetSize()));
        nRasterXSize = static_cast<int>(
            std::min(static_cast<GUInt64>(INT_MAX), dims[iXDim]->GetSize()));

        m_bHasGT = m_poArray->GuessGeoTransform(
            m_iXDim, m_iYDim, false, m_adfGeoTransform);

        SetBand(1, new GDALMDArrayResampledDatasetRasterBand(this));
    }

    ~GDALMDArrayResampledDataset()
    {
        if( !m_osFilenameLong.empty() )
            VSIUnlink(m_osFilenameLong.c_str());
        if( !m_osFilenameLat.empty() )
            VSIUnlink(m_osFilenameLat.c_str());
    }

    CPLErr GetGeoTransform(double* padfGeoTransform) override
    {
        memcpy(padfGeoTransform, m_adfGeoTransform, 6 * sizeof(double));
        return m_bHasGT ? CE_None : CE_Failure;
    }

    const OGRSpatialReference* GetSpatialRef() const override
    {
        m_poSRS = m_poArray->GetSpatialRef();
        if( m_poSRS )
        {
            m_poSRS.reset(m_poSRS->Clone());
            auto axisMapping = m_poSRS->GetDataAxisToSRSAxisMapping();
            for( auto& m: axisMapping )
            {
                if( m == static_cast<int>(m_iXDim) + 1 )
                    m = 1;
                else if( m == static_cast<int>(m_iYDim) + 1 )
                    m = 2;
                else
                    m = 0;
            }
            m_poSRS->SetDataAxisToSRSAxisMapping(axisMapping);
        }
        return m_poSRS.get();
    }

    void SetGeolocationArray(const std::string& osFilenameLong,
                             const std::string& osFilenameLat)
    {
        m_osFilenameLong = osFilenameLong;
        m_osFilenameLat = osFilenameLat;
        CPLStringList aosGeoLoc;
        aosGeoLoc.SetNameValue(""LINE_OFFSET"", ""0"");
        aosGeoLoc.SetNameValue(""LINE_STEP"", ""1"");
        aosGeoLoc.SetNameValue(""PIXEL_OFFSET"", ""0"");
        aosGeoLoc.SetNameValue(""PIXEL_STEP"", ""1"");
        aosGeoLoc.SetNameValue(""SRS"", SRS_WKT_WGS84_LAT_LONG); // FIXME?
        aosGeoLoc.SetNameValue(""X_BAND"", ""1"");
        aosGeoLoc.SetNameValue(""X_DATASET"", m_osFilenameLong.c_str());
        aosGeoLoc.SetNameValue(""Y_BAND"", ""1"");
        aosGeoLoc.SetNameValue(""Y_DATASET"", m_osFilenameLat.c_str());
        SetMetadata(aosGeoLoc.List(), ""GEOLOCATION"");
    }

};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 667 587 2004 59 2005 321 2006 60 2007 62 2008 59 2009 2010 59 2009 2011 59 625 2012 91 1502 93 123 1500 44 1501 44 1500 44 1500 44 1500 44 1501 125 59 569 2013 61 655 59 740 2005 321 2006 60 2014 62 2015 123 125 59 2005 321 2016 60 2017 62 2018 123 125 59 2005 321 2016 60 2009 62 2019 123 125 59 2005 321 2016 60 2020 62 2021 123 125 59 2005 321 2022 2023 123 125 59 2005 321 2022 2024 123 125 59 777 58 2000 40 601 2005 321 2006 60 2007 62 38 2025 44 2009 2026 44 2009 2027 41 58 2008 40 2025 41 44 2010 40 2026 41 44 2011 40 2027 41 44 2018 40 2008 354 2028 40 41 44 1500 41 44 2019 40 2008 354 2028 40 41 44 1501 41 44 2021 40 2008 354 2028 40 41 44 1500 41 123 601 561 38 2029 40 2008 354 2030 40 41 41 59 2031 61 811 60 704 62 40 2005 321 2032 40 811 60 2017 62 40 2033 41 44 2029 91 2027 93 354 2034 40 41 41 41 59 2035 61 811 60 704 62 40 2005 321 2032 40 811 60 2017 62 40 2033 41 44 2029 91 2026 93 354 2034 40 41 41 41 59 2013 61 2008 354 2036 40 2010 44 2011 44 655 44 2012 41 59 2037 40 1501 44 744 2004 40 823 41 41 59 125 126 2000 40 41 123 688 40 33 2023 46 2038 40 41 41 2039 40 2023 46 2040 40 41 41 59 688 40 33 2024 46 2038 40 41 41 2039 40 2024 46 2040 40 41 41 59 125 2041 2042 40 625 42 2043 41 2044 123 2045 40 2043 44 2012 44 1502 42 805 40 625 41 41 59 792 2013 63 2046 58 2047 59 125 601 2014 42 2048 40 41 601 2044 123 2015 61 2008 354 2048 40 41 59 688 40 2015 41 123 2015 46 2049 40 2015 354 2050 40 41 41 59 561 2051 61 2015 354 2052 40 41 59 664 40 561 38 2053 58 2051 41 123 688 40 2053 323 811 60 704 62 40 2010 41 43 1501 41 2053 61 1501 59 630 688 40 2053 323 811 60 704 62 40 2011 41 43 1501 41 2053 61 1502 59 630 2053 61 1500 59 125 2015 354 2054 40 2051 41 59 125 792 2015 46 2055 40 41 59 125 865 2056 40 601 2005 321 2022 38 2057 44 601 2005 321 2022 38 2058 41 123 2023 61 2057 59 2024 61 2058 59 2059 2060 59 2060 46 2061 40 362 44 362 41 59 2060 46 2061 40 362 44 362 41 59 2060 46 2061 40 362 44 362 41 59 2060 46 2061 40 362 44 362 41 59 2060 46 2061 40 362 44 2062 41 59 330 2060 46 2061 40 362 44 362 41 59 2060 46 2061 40 362 44 2023 46 2063 40 41 41 59 2060 46 2061 40 362 44 362 41 59 2060 46 2061 40 362 44 2024 46 2063 40 41 41 59 2064 40 2060 46 2065 40 41 44 362 41 59 125 125 59 ,"{'AvgLine': 14, 'CountLine': 96, 'CountStmt': 43, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 21, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 84, 'CountStmtDecl': 23, 'MaxCyclomatic': 3, 'SumCyclomatic': 9, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 84, 'CountLineCodeExe': 22, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 191, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 16, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 89, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 11, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 6, 'CountDeclInstanceVariableProtected': 0}"
99704,C++,"class GDALExtractFieldMDArray final: public GDALPamMDArray
{
private:
    std::shared_ptr<GDALMDArray> m_poParent{};
    GDALExtendedDataType m_dt;
    std::string m_srcCompName;
    mutable std::vector<GByte> m_pabyNoData{};

protected:
    GDALExtractFieldMDArray(
        const std::shared_ptr<GDALMDArray>& poParent,
        const std::string& fieldName,
        const std::unique_ptr<GDALEDTComponent>& srcComp)
    :
        GDALAbstractMDArray(
            std::string(), ""Extract field "" + fieldName + "" of "" + poParent->GetFullName()),
        GDALPamMDArray(
            std::string(), ""Extract field "" + fieldName + "" of "" + poParent->GetFullName(), ::GetPAM(poParent)),
        m_poParent(poParent),
        m_dt(srcComp->GetType()),
        m_srcCompName(srcComp->GetName())
    {
        m_pabyNoData.resize(m_dt.GetSize());
    }

    bool IRead(const GUInt64* arrayStartIdx,
                      const size_t* count,
                      const GInt64* arrayStep,
                      const GPtrDiff_t* bufferStride,
                      const GDALExtendedDataType& bufferDataType,
                      void* pDstBuffer) const override;

    bool IAdviseRead(const GUInt64* arrayStartIdx,
                     const size_t* count,
                     CSLConstList papszOptions) const override
        { return m_poParent->AdviseRead(arrayStartIdx, count, papszOptions); }

public:
    static std::shared_ptr<GDALExtractFieldMDArray> Create(
                    const std::shared_ptr<GDALMDArray>& poParent,
                    const std::string& fieldName,
                    const std::unique_ptr<GDALEDTComponent>& srcComp)
    {
        auto newAr(std::shared_ptr<GDALExtractFieldMDArray>(
            new GDALExtractFieldMDArray(poParent, fieldName, srcComp)));
        newAr->SetSelf(newAr);
        return newAr;
    }
    ~GDALExtractFieldMDArray()
    {
        m_dt.FreeDynamicMemory(&m_pabyNoData[0]);
    }

    bool IsWritable() const override { return m_poParent->IsWritable(); }

    const std::string& GetFilename() const override { return m_poParent->GetFilename(); }

    const std::vector<std::shared_ptr<GDALDimension>>& GetDimensions() const override
    { return m_poParent->GetDimensions(); }

    const GDALExtendedDataType &GetDataType() const override { return m_dt; }

    const std::string& GetUnit() const override { return m_poParent->GetUnit(); }

    std::shared_ptr<OGRSpatialReference> GetSpatialRef() const override { return m_poParent->GetSpatialRef(); }

    const void* GetRawNoDataValue() const override
    {
        const void* parentNoData = m_poParent->GetRawNoDataValue();
        if( parentNoData == nullptr )
            return nullptr;

        m_dt.FreeDynamicMemory(&m_pabyNoData[0]);
        memset(&m_pabyNoData[0], 0, m_dt.GetSize());

        std::vector<std::unique_ptr<GDALEDTComponent>> comps;
        comps.emplace_back(std::unique_ptr<GDALEDTComponent>(
            new GDALEDTComponent(m_srcCompName, 0, m_dt)));
        auto tmpDT(GDALExtendedDataType::Create(std::string(),
                                                m_dt.GetSize(),
                                                std::move(comps)));

        GDALExtendedDataType::CopyValue(
            parentNoData, m_poParent->GetDataType(),
            &m_pabyNoData[0], tmpDT);

        return &m_pabyNoData[0];
    }

    double GetOffset(bool* pbHasOffset, GDALDataType* peStorageType) const override { return m_poParent->GetOffset(pbHasOffset, peStorageType); }

    double GetScale(bool* pbHasScale, GDALDataType* peStorageType) const override { return m_poParent->GetScale(pbHasScale, peStorageType); }

    std::vector<GUInt64> GetBlockSize() const override { return m_poParent->GetBlockSize(); }
};",0,587 2000 2001 58 777 2002 123 773 58 2003 321 2004 60 2005 62 2006 123 125 59 2007 2008 59 2003 321 2009 2010 59 740 2003 321 2011 60 2012 62 2013 123 125 59 775 58 2000 40 601 2003 321 2004 60 2005 62 38 2014 44 601 2003 321 2009 38 2015 44 601 2003 321 2016 60 2017 62 38 2018 41 58 2019 40 2003 321 2009 40 41 44 362 43 2015 43 362 43 2014 354 2020 40 41 41 44 2002 40 2003 321 2009 40 41 44 362 43 2015 43 362 43 2014 354 2020 40 41 44 321 2021 40 2014 41 41 44 2006 40 2014 41 44 2008 40 2018 354 2022 40 41 41 44 2010 40 2018 354 2023 40 41 41 123 2013 46 2024 40 2008 46 2025 40 41 41 59 125 569 2026 40 601 2027 42 2028 44 601 2029 42 2030 44 601 2031 42 2032 44 601 2033 42 2034 44 601 2007 38 2035 44 865 42 2036 41 601 2037 59 569 2038 40 601 2027 42 2028 44 601 2029 42 2030 44 2039 2040 41 601 2037 123 792 2006 354 2041 40 2028 44 2030 44 2040 41 59 125 777 58 809 2003 321 2004 60 2000 62 2042 40 601 2003 321 2004 60 2005 62 38 2014 44 601 2003 321 2009 38 2015 44 601 2003 321 2016 60 2017 62 38 2018 41 123 561 2043 40 2003 321 2004 60 2000 62 40 744 2000 40 2014 44 2015 44 2018 41 41 41 59 2043 354 2044 40 2043 41 59 792 2043 59 125 126 2000 40 41 123 2008 46 2045 40 38 2013 91 1500 93 41 59 125 569 2046 40 41 601 2037 123 792 2006 354 2046 40 41 59 125 601 2003 321 2009 38 2047 40 41 601 2037 123 792 2006 354 2047 40 41 59 125 601 2003 321 2011 60 2003 321 2004 60 2048 355 38 2049 40 41 601 2037 123 792 2006 354 2049 40 41 59 125 601 2007 38 2050 40 41 601 2037 123 792 2008 59 125 601 2003 321 2009 38 2051 40 41 601 2037 123 792 2006 354 2051 40 41 59 125 2003 321 2004 60 2052 62 2053 40 41 601 2037 123 792 2006 354 2053 40 41 59 125 601 865 42 2054 40 41 601 2037 123 601 865 42 2055 61 2006 354 2054 40 41 59 688 40 2055 323 753 41 792 753 59 2008 46 2056 40 38 2013 91 1500 93 41 59 2057 40 38 2013 91 1500 93 44 1500 44 2008 46 2058 40 41 41 59 2003 321 2011 60 2003 321 2016 60 2017 355 2059 59 2059 46 2060 40 2003 321 2016 60 2017 62 40 744 2017 40 2010 44 1500 44 2008 41 41 41 59 561 2061 40 2007 321 2042 40 2003 321 2009 40 41 44 2008 46 2058 40 41 44 2003 321 2062 40 2059 41 41 41 59 2007 321 2063 40 2055 44 2006 354 2050 40 41 44 38 2013 91 1500 93 44 2061 41 59 792 38 2013 91 1500 93 59 125 625 2064 40 569 42 2065 44 2066 42 2067 41 601 2037 123 792 2006 354 2064 40 2065 44 2067 41 59 125 625 2068 40 569 42 2069 44 2066 42 2067 41 601 2037 123 792 2006 354 2068 40 2069 44 2067 41 59 125 2003 321 2011 60 2027 62 2070 40 41 601 2037 123 792 2006 354 2070 40 41 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 112, 'CountStmt': 27, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 15, 'AvgCyclomatic': 1, 'CountLineCode': 93, 'CountStmtDecl': 25, 'MaxCyclomatic': 2, 'SumCyclomatic': 16, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 19, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 15, 'AltCountLineCode': 93, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 19, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 33, 'CountLineInactive': 0, 'CountDeclMethodAll': 90, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 12, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 16, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99703,C++,"class GDALDatasetFromArray final: public GDALDataset
{
    friend class GDALRasterBandFromArray;

    std::shared_ptr<GDALMDArray> m_poArray;
    size_t m_iXDim;
    size_t m_iYDim;
    double m_adfGeoTransform[6]{0,1,0,0,0,1};
    bool m_bHasGT = false;
    mutable std::shared_ptr<OGRSpatialReference> m_poSRS{};
    GDALMultiDomainMetadata m_oMDD{};

public:
    GDALDatasetFromArray(const std::shared_ptr<GDALMDArray>& array,
                         size_t iXDim, size_t iYDim):
        m_poArray(array),
        m_iXDim(iXDim),
        m_iYDim(iYDim)
    {
        const auto& dims(m_poArray->GetDimensions());
        const auto nDimCount = dims.size();
        nRasterYSize = nDimCount < 2 ? 1 : static_cast<int>(
            std::min(static_cast<GUInt64>(INT_MAX), dims[iYDim]->GetSize()));
        nRasterXSize = static_cast<int>(
            std::min(static_cast<GUInt64>(INT_MAX), dims[iXDim]->GetSize()));
        eAccess = array->IsWritable() ? GA_Update: GA_ReadOnly;

        const size_t nNewDimCount = nDimCount >= 2 ? nDimCount - 2 : 0;
        std::vector<GUInt64> anOtherDimCoord(nNewDimCount);
        std::vector<GUInt64> anStackIters(nDimCount);
        std::vector<size_t> anMapNewToOld(nNewDimCount);
        for( size_t i = 0, j = 0; i < nDimCount; ++i )
        {
            if( i != iXDim && !(nDimCount >= 2 && i == iYDim) )
            {
                anMapNewToOld[j] = i;
                j++;
            }
        }

        m_bHasGT = m_poArray->GuessGeoTransform(
            m_iXDim, m_iYDim, false, m_adfGeoTransform);

        const auto attrs(array->GetAttributes());
        for( const auto& attr: attrs )
        {
            auto stringArray = attr->ReadAsStringArray();
            std::string val;
            if( stringArray.size() > 1 )
            {
                val += '{';
            }
            for( int i = 0; i < stringArray.size(); ++i )
            {
                if( i > 0 )
                    val += ',';
                val += stringArray[i];
            }
            if( stringArray.size() > 1 )
            {
                val += '}';
            }
            m_oMDD.SetMetadataItem(attr->GetName().c_str(), val.c_str());
        }

        // Instantiate bands by iterating over non-XY variables
        size_t iDim = 0;
lbl_next_depth:
        if( iDim < nNewDimCount )
        {
            anStackIters[iDim] = dims[anMapNewToOld[iDim]]->GetSize();
            anOtherDimCoord[iDim] = 0;
            while( true )
            {
                ++iDim;
                goto lbl_next_depth;
lbl_return_to_caller:
                --iDim;
                --anStackIters[iDim];
                if( anStackIters[iDim] == 0 )
                    break;
                ++anOtherDimCoord[iDim];
            }
        }
        else
        {
            SetBand(nBands + 1, new GDALRasterBandFromArray(this, anOtherDimCoord));
        }
        if( iDim > 0 )
            goto lbl_return_to_caller;
    }

    CPLErr GetGeoTransform(double* padfGeoTransform) override
    {
        memcpy(padfGeoTransform, m_adfGeoTransform, 6 * sizeof(double));
        return m_bHasGT ? CE_None : CE_Failure;
    }

    const OGRSpatialReference* GetSpatialRef() const override
    {
        if( m_poArray->GetDimensionCount() < 2 )
            return nullptr;
        m_poSRS = m_poArray->GetSpatialRef();
        if( m_poSRS )
        {
            m_poSRS.reset(m_poSRS->Clone());
            auto axisMapping = m_poSRS->GetDataAxisToSRSAxisMapping();
            for( auto& m: axisMapping )
            {
                if( m == static_cast<int>(m_iXDim) + 1 )
                    m = 1;
                else if( m == static_cast<int>(m_iYDim) + 1 )
                    m = 2;
                else
                    m = 0;
            }
            m_poSRS->SetDataAxisToSRSAxisMapping(axisMapping);
        }
        return m_poSRS.get();
    }

    CPLErr SetMetadata(char** papszMetadata, const char* pszDomain) override
    {
        return m_oMDD.SetMetadata(papszMetadata, pszDomain);
    }

    char** GetMetadata(const char* pszDomain) override
    {
        return m_oMDD.GetMetadata(pszDomain);
    }

    const char* GetMetadataItem(const char* pszName, const char* pszDomain) override
    {
        return m_oMDD.GetMetadataItem(pszName, pszDomain);
    }
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 321 2005 60 2006 62 2007 59 2008 2009 59 2008 2010 59 625 2011 91 1502 93 123 1500 44 1501 44 1500 44 1500 44 1500 44 1501 125 59 569 2012 61 655 59 740 2004 321 2005 60 2013 62 2014 123 125 59 2015 2016 123 125 59 777 58 2000 40 601 2004 321 2005 60 2006 62 38 2017 44 2008 2018 44 2008 2019 41 58 2007 40 2017 41 44 2009 40 2018 41 44 2010 40 2019 41 123 601 561 38 2020 40 2007 354 2021 40 41 41 59 601 561 2022 61 2020 46 2023 40 41 59 2024 61 2022 60 1502 63 1501 58 811 60 704 62 40 2004 321 2025 40 811 60 2026 62 40 2027 41 44 2020 91 2019 93 354 2028 40 41 41 41 59 2029 61 811 60 704 62 40 2004 321 2025 40 811 60 2026 62 40 2027 41 44 2020 91 2018 93 354 2028 40 41 41 41 59 2030 61 2017 354 2031 40 41 63 2032 58 2033 59 601 2008 2034 61 2022 325 1502 63 2022 45 1502 58 1500 59 2004 321 2035 60 2026 62 2036 40 2034 41 59 2004 321 2035 60 2026 62 2037 40 2022 41 59 2004 321 2035 60 2008 62 2038 40 2034 41 59 664 40 2008 2039 61 1500 44 2040 61 1500 59 2039 60 2022 59 349 2039 41 123 688 40 2039 340 2018 307 33 40 2022 325 1502 307 2039 323 2019 41 41 123 2038 91 2040 93 61 2039 59 2040 349 59 125 125 2012 61 2007 354 2041 40 2009 44 2010 44 655 44 2011 41 59 601 561 2042 40 2017 354 2043 40 41 41 59 664 40 601 561 38 2044 58 2042 41 123 561 2045 61 2044 354 2046 40 41 59 2004 321 2047 2048 59 688 40 2045 46 2023 40 41 62 1501 41 123 2048 348 314 59 125 664 40 704 2039 61 1500 59 2039 60 2045 46 2023 40 41 59 349 2039 41 123 688 40 2039 62 1500 41 2048 348 314 59 2048 348 2045 91 2039 93 59 125 688 40 2045 46 2023 40 41 62 1501 41 123 2048 348 314 59 125 2016 46 2049 40 2044 354 2050 40 41 46 2051 40 41 44 2048 46 2051 40 41 41 59 125 330 2008 2052 61 1500 59 2053 58 688 40 2052 60 2034 41 123 2037 91 2052 93 61 2020 91 2038 91 2052 93 93 354 2028 40 41 59 2036 91 2052 93 61 1500 59 870 40 829 41 123 349 2052 59 677 2053 59 2054 58 338 2052 59 338 2037 91 2052 93 59 688 40 2037 91 2052 93 323 1500 41 572 59 349 2036 91 2052 93 59 125 125 630 123 2055 40 2056 43 1501 44 744 2003 40 823 44 2036 41 41 59 125 688 40 2052 62 1500 41 677 2057 59 125 2058 2059 40 625 42 2060 41 2061 123 2062 40 2060 44 2011 44 1502 42 805 40 625 41 41 59 792 2012 63 2063 58 2064 59 125 601 2013 42 2065 40 41 601 2061 123 688 40 2007 354 2066 40 41 60 1502 41 792 753 59 2014 61 2007 354 2065 40 41 59 688 40 2014 41 123 2014 46 2067 40 2014 354 2068 40 41 41 59 561 2069 61 2014 354 2070 40 41 59 664 40 561 38 2071 58 2069 41 123 688 40 2071 323 811 60 704 62 40 2009 41 43 1501 41 2071 61 1501 59 630 688 40 2071 323 811 60 704 62 40 2010 41 43 1501 41 2071 61 1502 59 630 2071 61 1500 59 125 2014 354 2072 40 2069 41 59 125 792 2014 46 2073 40 41 59 125 2058 2074 40 582 42 42 2075 44 601 582 42 2076 41 2061 123 792 2016 46 2074 40 2075 44 2076 41 59 125 582 42 42 2077 40 601 582 42 2076 41 2061 123 792 2016 46 2077 40 2076 41 59 125 601 582 42 2078 40 601 582 42 2079 44 601 582 42 2076 41 2061 123 792 2016 46 2078 40 2079 44 2076 41 59 125 125 59 ,"{'AvgLine': 19, 'CountLine': 136, 'CountStmt': 50, 'MaxNesting': 3, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 18, 'MaxEssential': 5, 'SumEssential': 10, 'AvgCyclomatic': 2, 'CountLineCode': 124, 'CountStmtDecl': 33, 'MaxCyclomatic': 5, 'SumCyclomatic': 13, 'AltAvgLineCode': 18, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 124, 'CountLineCodeExe': 18, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 148, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
99711,C++,"class GDALRasterBandFromArray final: public GDALRasterBand
{
    std::vector<GUInt64>     m_anOffset{};
    std::vector<size_t>      m_anCount{};
    std::vector<GPtrDiff_t>  m_anStride{};

protected:
    CPLErr IReadBlock( int, int, void * ) override;
    CPLErr IWriteBlock( int, int, void * ) override;
    CPLErr IRasterIO( GDALRWFlag eRWFlag,
                                  int nXOff, int nYOff, int nXSize, int nYSize,
                                  void * pData, int nBufXSize, int nBufYSize,
                                  GDALDataType eBufType,
                                  GSpacing nPixelSpaceBuf,
                                  GSpacing nLineSpaceBuf,
                                  GDALRasterIOExtraArg* psExtraArg ) override;
public:
    explicit GDALRasterBandFromArray(GDALDatasetFromArray* poDSIn,
                                     const std::vector<GUInt64>& anOtherDimCoord);

    double GetNoDataValue(int* pbHasNoData) override;
    double GetOffset(int* pbHasOffset) override;
    double GetScale(int* pbHasScale) override;
    const char* GetUnitType() override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 123 125 59 2003 321 2004 60 2007 62 2008 123 125 59 2003 321 2004 60 2009 62 2010 123 125 59 775 58 2011 2012 40 704 44 704 44 865 42 41 2013 59 2011 2014 40 704 44 704 44 865 42 41 2013 59 2011 2015 40 2016 2017 44 704 2018 44 704 2019 44 704 2020 44 704 2021 44 865 42 2022 44 704 2023 44 704 2024 44 2025 2026 44 2027 2028 44 2027 2029 44 2030 42 2031 41 2013 59 777 58 648 2000 40 2032 42 2033 44 601 2003 321 2004 60 2005 62 38 2034 41 59 625 2035 40 704 42 2036 41 2013 59 625 2037 40 704 42 2038 41 2013 59 625 2039 40 704 42 2040 41 2013 59 601 582 42 2041 40 41 2013 59 125 59 ,"{'AvgLine': 24, 'CountLine': 219, 'CountStmt': 85, 'MaxNesting': 2, 'AvgLineCode': 23, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 31, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 214, 'CountStmtDecl': 57, 'MaxCyclomatic': 4, 'SumCyclomatic': 16, 'AltAvgLineCode': 23, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 214, 'CountLineCodeExe': 48, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 66, 'CountLineInactive': 0, 'CountDeclMethodAll': 102, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99722,C++,"class RRasterBand final: public GDALPamRasterBand
{
    friend class RDataset;

    const double *padfMatrixValues;

  public:
                RRasterBand( RDataset *, int, const double * );
    virtual ~RRasterBand() {}

    virtual CPLErr          IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 601 625 42 2004 59 777 58 2000 40 2003 42 44 704 44 601 625 42 41 59 864 126 2000 40 41 123 125 864 2005 2006 40 704 44 704 44 865 42 41 2007 59 125 59 ,"{'AvgLine': 7, 'CountLine': 32, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 27, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 27, 'CountLineCodeExe': 9, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 131, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99732,C++,"class OCAD_EXTERN CADSolid : public CADPoint3D
{
public:
    CADSolid();
    virtual ~CADSolid(){}

    double getElevation() const;
    void   setElevation( double value );
    void   addCorner( const CADVector& corner );
    std::vector<CADVector> getCorners();

    virtual void print() const override;
    virtual void transform( const Matrix& matrix ) override;
protected:
    double            elevation;
    std::vector<CADVector> avertCorners;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 625 2003 40 41 601 59 865 2004 40 625 2005 41 59 865 2006 40 601 2007 38 2008 41 59 2009 321 2010 60 2007 62 2011 40 41 59 864 865 2012 40 41 601 2013 59 864 865 2014 40 601 2015 38 2016 41 2013 59 775 58 625 2017 59 2009 321 2010 60 2007 62 2018 59 125 59 ,"{'AvgLine': 4, 'CountLine': 55, 'CountStmt': 27, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 53, 'CountStmtDecl': 17, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 53, 'CountLineCodeExe': 16, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 32, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 55, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
99734,C++,"class CADUnknown : public CADGeometry
{
public:
    CADUnknown();
    virtual ~CADUnknown(){}

    virtual void print() const override;
    void         transform( const Matrix& matrix ) override;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 864 865 2002 40 41 601 2003 59 865 2004 40 601 2005 38 2006 41 2003 59 125 59 ,"{'AvgLine': 2, 'CountLine': 19, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 18, 'CountLineCodeExe': 1, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99739,C++,"    class CPL_DLL TransformWithOptionsCache
    {
        friend class OGRGeometryFactory;
        struct Private;
        std::unique_ptr<Private> d;

    public:
        TransformWithOptionsCache();
        ~TransformWithOptionsCache();
    };",0,587 2000 2001 123 667 587 2002 59 816 2003 59 2004 321 2005 60 2003 62 2006 59 777 58 2001 40 41 59 126 2001 40 41 59 125 59 ,"{'AvgLine': 3, 'CountLine': 27, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 25, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 25, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 27, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99948,C++,"class TigerSpatialMetadata final: public TigerFileBase
{
public:
                      TigerSpatialMetadata( OGRTigerDataSource *, const char * );
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 125 59 ,"{'AvgLine': 16, 'CountLine': 21, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 10, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 1, 'AltCountLineCode': 15, 'CountLineCodeExe': 6, 'CountLineComment': 3, 'AltAvgLineComment': 3, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99748,C++,"class OGRVDV452Tables
{
    public:
        std::vector<OGRVDV452Table*> aosTables;
        std::map<CPLString, OGRVDV452Table*> oMapEnglish;
        std::map<CPLString, OGRVDV452Table*> oMapGerman;

            OGRVDV452Tables() {}
            ~OGRVDV452Tables()
            {
                for(size_t i=0;i<aosTables.size();i++)
                    delete aosTables[i];
            }
};",0,587 2000 123 777 58 2001 321 2002 60 2003 42 62 2004 59 2001 321 2005 60 2006 44 2003 42 62 2007 59 2001 321 2005 60 2006 44 2003 42 62 2008 59 2000 40 41 123 125 126 2000 40 41 123 664 40 2009 2010 61 1500 59 2010 60 2004 46 2011 40 41 59 2010 349 41 619 2004 91 2010 93 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 14, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 13, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99747,C++,"class OGRVDV452Field
{
    public:
        CPLString osEnglishName;
        CPLString osGermanName;
        CPLString osType;
        int       nWidth;

            OGRVDV452Field() : nWidth(0) {}
};",0,587 2000 123 777 58 2001 2002 59 2001 2003 59 2001 2004 59 704 2005 59 2000 40 41 58 2005 40 1500 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 10, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 9, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99756,C++,"class Track
{
public:
    Track(const char* pszName,
          unsigned char type,
          int color);
    ~Track();

    const char* getName() const;
    unsigned char getType() const;
    int getColor() const;

    void addPoint(double x, double y, GIntBig datetime, double altitude);
    int getNumPoints() const;
    const TrackPoint* getPoint(int pointNum) const;

private:
    char* pszName;
    unsigned char type;
    int color;
    int nPoints;
    TrackPoint* pasTrackPoints;
};",0,587 2000 123 777 58 2000 40 601 582 42 2001 44 856 582 2002 44 704 2003 41 59 126 2000 40 41 59 601 582 42 2004 40 41 601 59 856 582 2005 40 41 601 59 704 2006 40 41 601 59 865 2007 40 625 2008 44 625 2009 44 2010 2011 44 625 2012 41 59 704 2013 40 41 601 59 601 2014 42 2015 40 704 2016 41 601 59 773 58 582 42 2001 59 856 582 2002 59 704 2003 59 704 2017 59 2014 42 2018 59 125 59 ,"{'AvgLine': 6, 'CountLine': 71, 'CountStmt': 33, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 16, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 67, 'CountStmtDecl': 17, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 67, 'CountLineCodeExe': 23, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
99760,C++,"class CPL_UNSTABLE_API swq_custom_func_registrar
{
    public:
        virtual ~swq_custom_func_registrar() {}
        virtual const swq_operation *GetOperator( const char * ) = 0;
};",0,587 2000 2001 123 777 58 864 126 2001 40 41 123 125 864 601 2002 42 2003 40 601 582 42 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 6, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99768,C++,"template<typename T, uint16_t length> class Array {
  typedef
      typename flatbuffers::integral_constant<bool,
                                              flatbuffers::is_scalar<T>::value>
          scalar_tag;
  typedef
      typename flatbuffers::conditional<scalar_tag::value, T, const T *>::type
          IndirectHelperType;

 public:
  typedef uint16_t size_type;
  typedef typename IndirectHelper<IndirectHelperType>::return_type return_type;
  typedef VectorIterator<T, return_type> const_iterator;
  typedef VectorReverseIterator<const_iterator> const_reverse_iterator;

  FLATBUFFERS_CONSTEXPR uint16_t size() const { return length; }

  return_type Get(uoffset_t i) const {
    FLATBUFFERS_ASSERT(i < size());
    return IndirectHelper<IndirectHelperType>::Read(Data(), i);
  }

  return_type operator[](uoffset_t i) const { return Get(i); }

  // If this is a Vector of enums, T will be its storage type, not the enum
  // type. This function makes it convenient to retrieve value with enum
  // type E.
  template<typename E> E GetEnum(uoffset_t i) const {
    return static_cast<E>(Get(i));
  }

  const_iterator begin() const { return const_iterator(Data(), 0); }
  const_iterator end() const { return const_iterator(Data(), size()); }

  const_reverse_iterator rbegin() const {
    return const_reverse_iterator(end());
  }
  const_reverse_iterator rend() const {
    return const_reverse_iterator(begin());
  }

  const_iterator cbegin() const { return begin(); }
  const_iterator cend() const { return end(); }

  const_reverse_iterator crbegin() const { return rbegin(); }
  const_reverse_iterator crend() const { return rend(); }

  // Get a mutable pointer to elements inside this array.
  // This method used to mutate arrays of structs followed by a @p Mutate
  // operation. For primitive types use @p Mutate directly.
  // @warning Assignments and reads to/from the dereferenced pointer are not
  //  automatically converted to the correct endianness.
  typename flatbuffers::conditional<scalar_tag::value, void, T *>::type
  GetMutablePointer(uoffset_t i) const {
    FLATBUFFERS_ASSERT(i < size());
    return const_cast<T *>(&data()[i]);
  }

  // Change elements if you have a non-const pointer to this object.
  void Mutate(uoffset_t i, const T &val) { MutateImpl(scalar_tag(), i, val); }

  // The raw data in little endian format. Use with care.
  const uint8_t *Data() const { return data_; }

  uint8_t *Data() { return data_; }

  // Similarly, but typed, much like std::vector::data
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
  T *data() { return reinterpret_cast<T *>(Data()); }

  // Copy data from a span with endian conversion.
  // If this Array and the span overlap, the behavior is undefined.
  void CopyFromSpan(flatbuffers::span<const T, length> src) {
    const auto p1 = reinterpret_cast<const uint8_t *>(src.data());
    const auto p2 = Data();
    FLATBUFFERS_ASSERT(!(p1 >= p2 && p1 < (p2 + length)) &&
                       !(p2 >= p1 && p2 < (p1 + length)));
    (void)p1;
    (void)p2;

    CopyFromSpanImpl(
        flatbuffers::integral_constant < bool,
        !scalar_tag::value || sizeof(T) == 1 || FLATBUFFERS_LITTLEENDIAN > (),
        src);
  }

 protected:
  void MutateImpl(flatbuffers::integral_constant<bool, true>, uoffset_t i,
                  const T &val) {
    FLATBUFFERS_ASSERT(i < size());
    WriteScalar(data() + i, val);
  }

  void MutateImpl(flatbuffers::integral_constant<bool, false>, uoffset_t i,
                  const T &val) {
    *(GetMutablePointer(i)) = val;
  }

  void CopyFromSpanImpl(flatbuffers::integral_constant<bool, true>,
                        flatbuffers::span<const T, length> src) {
    // Use std::memcpy() instead of std::copy() to avoid performance degradation
    // due to aliasing if T is char or unsigned char.
    // The size is known at compile time, so memcpy would be inlined.
    std::memcpy(data(), src.data(), length * sizeof(T));
  }

  // Copy data from flatbuffers::span with endian conversion.
  void CopyFromSpanImpl(flatbuffers::integral_constant<bool, false>,
                        flatbuffers::span<const T, length> src) {
    for (size_type k = 0; k < length; k++) { Mutate(k, src[k]); }
  }

  // This class is only used to access pre-existing data. Don't ever
  // try to construct these manually.
  // 'constexpr' allows us to use 'size()' at compile time.
  // @note Must not use 'FLATBUFFERS_CONSTEXPR' here, as const is not allowed on
  //  a constructor.
#if defined(__cpp_constexpr)
  constexpr Array();
#else
  Array();
#endif

  uint8_t data_[length * sizeof(T)];

 private:
  // This class is a pointer. Copying will therefore create an invalid object.
  // Private and unimplemented copy constructor.
  Array(const Array &);
  Array &operator=(const Array &);
};",0,822 60 835 2000 44 2001 2002 62 587 2003 123 833 835 2004 321 2005 60 569 44 2004 321 2006 60 2000 62 321 2007 62 2008 59 833 835 2004 321 2009 60 2008 321 2007 44 2000 44 601 2000 42 62 321 2010 2011 59 777 58 833 2001 2012 59 833 835 2013 60 2011 62 321 2014 2014 59 833 2015 60 2000 44 2014 62 2016 59 833 2017 60 2016 62 2018 59 2019 2001 2020 40 41 601 123 792 2002 59 125 2014 2021 40 2022 2023 41 601 123 2024 40 2023 60 2020 40 41 41 59 792 2013 60 2011 62 321 2025 40 2026 40 41 44 2023 41 59 125 2014 758 91 93 40 2022 2023 41 601 123 792 2021 40 2023 41 59 125 330 330 330 822 60 835 2027 62 2027 2028 40 2022 2023 41 601 123 792 811 60 2027 62 40 2021 40 2023 41 41 59 125 2016 2029 40 41 601 123 792 2016 40 2030 40 41 44 1500 41 59 125 2016 2031 40 41 601 123 792 2016 40 2032 40 41 44 2020 40 41 41 59 125 2018 2033 40 41 601 123 792 2018 40 2031 40 41 41 59 125 2018 2034 40 41 601 123 792 2018 40 2029 40 41 41 59 125 2016 2035 40 41 601 123 792 2029 40 41 59 125 2016 2036 40 41 601 123 792 2031 40 41 59 125 2018 2037 40 41 601 123 792 2033 40 41 59 125 2018 2038 40 41 601 123 792 2034 40 41 59 125 330 330 330 330 330 835 2004 321 2009 60 2008 321 2007 44 865 44 2000 42 62 321 2010 2039 40 2022 2023 41 601 123 2040 40 2023 60 2020 40 41 41 59 792 602 60 2000 42 62 40 38 2041 40 41 91 2023 93 41 59 125 330 865 2042 40 2022 2023 44 601 2000 38 2043 41 123 2044 40 2008 40 41 44 2023 44 2043 41 59 125 330 601 2045 42 2046 40 41 601 123 792 2047 59 125 2045 42 2046 40 41 123 792 2048 59 125 330 601 2000 42 2049 40 41 601 123 792 786 60 601 2000 42 62 40 2046 40 41 41 59 125 2000 42 2049 40 41 123 792 786 60 2000 42 62 40 2046 40 41 41 59 125 330 330 865 2050 40 2004 321 2051 60 601 2000 44 2002 62 2052 41 123 601 561 2053 61 786 60 601 2045 42 62 40 2052 46 2049 40 41 41 59 601 561 2054 61 2046 40 41 59 2055 40 33 40 2053 325 2054 307 2053 60 40 2054 43 2002 41 41 307 33 40 2054 325 2053 307 2054 60 40 2053 43 2002 41 41 41 59 40 865 41 2053 59 40 865 41 2054 59 2056 40 2004 321 2005 60 569 44 33 2008 321 2007 309 805 40 2000 41 323 1501 309 2057 62 40 41 44 2052 41 59 125 775 58 865 2058 40 2004 321 2005 60 569 44 829 62 44 2022 2023 44 601 2000 38 2043 41 123 2059 40 2023 60 2020 40 41 41 59 2060 40 2049 40 41 43 2023 44 2043 41 59 125 865 2058 40 2004 321 2005 60 569 44 655 62 44 2022 2023 44 601 2000 38 2043 41 123 42 40 2039 40 2023 41 41 61 2043 59 125 865 2061 40 2004 321 2005 60 569 44 829 62 44 2004 321 2051 60 601 2000 44 2002 62 2052 41 123 330 330 330 2062 321 2063 40 2049 40 41 44 2052 46 2049 40 41 44 2002 42 805 40 2000 41 41 59 125 330 865 2061 40 2004 321 2005 60 569 44 655 62 44 2004 321 2051 60 601 2000 44 2002 62 2052 41 123 664 40 2012 2064 61 1500 59 2064 60 2002 59 2064 349 41 123 2042 40 2064 44 2052 91 2064 93 41 59 125 125 330 330 330 330 330 35 688 2065 40 2066 41 603 2003 40 41 59 35 630 2003 40 41 59 35 636 2045 2067 91 2002 42 805 40 2000 41 93 59 773 58 330 330 2003 40 601 2003 38 41 59 2003 38 758 61 40 601 2003 38 41 59 125 59 ,"{'AvgLine': 2, 'CountLine': 131, 'CountStmt': 67, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 32, 'MaxEssential': 1, 'SumEssential': 23, 'AvgCyclomatic': 1, 'CountLineCode': 80, 'CountStmtDecl': 37, 'MaxCyclomatic': 2, 'SumCyclomatic': 28, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 23, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 26, 'AltCountLineCode': 84, 'CountLineCodeExe': 38, 'CountLineComment': 24, 'AltAvgLineComment': 0, 'AltCountLineBlank': 23, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 31, 'CountLineInactive': 1, 'CountDeclMethodAll': 26, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.30', 'AltCountLineComment': 24, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 31, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 15, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 19, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 28, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 26, 'CountDeclMethodProtected': 5, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
99774,C++,"template<class T, std::size_t Extent = dynamic_extent>
class span FLATBUFFERS_FINAL_CLASS {
 public:
  typedef T element_type;
  typedef T& reference;
  typedef const T& const_reference;
  typedef T* pointer;
  typedef const T* const_pointer;
  typedef std::size_t size_type;

  static FLATBUFFERS_CONSTEXPR size_type extent = Extent;

  // Returns the number of elements in the span.
  FLATBUFFERS_CONSTEXPR_CPP11 size_type size() const FLATBUFFERS_NOEXCEPT {
    return count_;
  }

  // Returns the size of the sequence in bytes.
  FLATBUFFERS_CONSTEXPR_CPP11
  size_type size_bytes() const FLATBUFFERS_NOEXCEPT {
    return size() * sizeof(element_type);
  }

  // Checks if the span is empty.
  FLATBUFFERS_CONSTEXPR_CPP11 bool empty() const FLATBUFFERS_NOEXCEPT {
    return size() == 0;
  }

  // Returns a pointer to the beginning of the sequence.
  FLATBUFFERS_CONSTEXPR_CPP11 pointer data() const FLATBUFFERS_NOEXCEPT {
    return data_;
  }

  // Returns a reference to the idx-th element of the sequence.
  // The behavior is undefined if the idx is greater than or equal to size().
  FLATBUFFERS_CONSTEXPR_CPP11 reference operator[](size_type idx) const {
    return data()[idx];
  }

  FLATBUFFERS_CONSTEXPR_CPP11 span(const span &other) FLATBUFFERS_NOEXCEPT
      : data_(other.data_), count_(other.count_) {}

  FLATBUFFERS_CONSTEXPR_CPP14 span &operator=(const span &other)
      FLATBUFFERS_NOEXCEPT {
    data_ = other.data_;
    count_ = other.count_;
  }

  // Limited implementation of
  // `template <class It> constexpr std::span(It first, size_type count);`.
  //
  // Constructs a span that is a view over the range [first, first + count);
  // the resulting span has: data() == first and size() == count.
  // The behavior is undefined if [first, first + count) is not a valid range,
  // or if (extent != flatbuffers::dynamic_extent && count != extent).
  FLATBUFFERS_CONSTEXPR_CPP11
  explicit span(pointer first, size_type count) FLATBUFFERS_NOEXCEPT
    : data_ (Extent == dynamic_extent ? first : (Extent == count ? first : nullptr)),
      count_(Extent == dynamic_extent ? count : (Extent == count ? Extent : 0)) {
      // Make span empty if the count argument is incompatible with span<T,N>.
  }

  // Exclude this code if MSVC2010 is active. The MSVC2010 isn't C++11
  // compliant, it doesn't support default template arguments for functions.
  #if defined(FLATBUFFERS_SPAN_MINIMAL)
  FLATBUFFERS_CONSTEXPR_CPP11 span() FLATBUFFERS_NOEXCEPT : data_(nullptr),
                                                            count_(0) {
    static_assert(extent == 0 || extent == dynamic_extent, ""invalid span"");
  }

  #else
  // Constructs an empty span whose data() == nullptr and size() == 0.
  // This overload only participates in overload resolution if
  // extent == 0 || extent == flatbuffers::dynamic_extent.
  // A dummy template argument N is need dependency for SFINAE.
  template<std::size_t N = 0,
    typename internal::is_span_convertable<element_type, Extent, element_type, (N - N)>::type = 0>
  FLATBUFFERS_CONSTEXPR_CPP11 span() FLATBUFFERS_NOEXCEPT : data_(nullptr),
                                                            count_(0) {
    static_assert(extent == 0 || extent == dynamic_extent, ""invalid span"");
  }

  // Constructs a span that is a view over the array arr; the resulting span
  // has size() == N and data() == std::data(arr). These overloads only
  // participate in overload resolution if
  // extent == std::dynamic_extent || N == extent is true and
  // std::remove_pointer_t<decltype(std::data(arr))>(*)[]
  // is convertible to element_type (*)[].
  template<std::size_t N,
    typename internal::is_span_convertable<element_type, Extent, element_type, N>::type = 0>
  FLATBUFFERS_CONSTEXPR_CPP11 span(element_type (&arr)[N]) FLATBUFFERS_NOEXCEPT
      : data_(arr), count_(N) {}

  template<class U, std::size_t N,
    typename internal::is_span_convertable<element_type, Extent, U, N>::type = 0>
  FLATBUFFERS_CONSTEXPR_CPP11 span(std::array<U, N> &arr) FLATBUFFERS_NOEXCEPT
     : data_(arr.data()), count_(N) {}

  //template<class U, std::size_t N,
  //  int = 0>
  //FLATBUFFERS_CONSTEXPR_CPP11 span(std::array<U, N> &arr) FLATBUFFERS_NOEXCEPT
  //   : data_(arr.data()), count_(N) {}

  template<class U, std::size_t N,
    typename internal::is_span_convertable<element_type, Extent, U, N>::type = 0>
  FLATBUFFERS_CONSTEXPR_CPP11 span(const std::array<U, N> &arr) FLATBUFFERS_NOEXCEPT
    : data_(arr.data()), count_(N) {}

  // Converting constructor from another span s;
  // the resulting span has size() == s.size() and data() == s.data().
  // This overload only participates in overload resolution
  // if extent == std::dynamic_extent || N == extent is true and U (*)[]
  // is convertible to element_type (*)[].
  template<class U, std::size_t N,
    typename internal::is_span_convertable<element_type, Extent, U, N>::type = 0>
  FLATBUFFERS_CONSTEXPR_CPP11 span(const flatbuffers::span<U, N> &s) FLATBUFFERS_NOEXCEPT
      : span(s.data(), s.size()) {
  }

  #endif  // !defined(FLATBUFFERS_SPAN_MINIMAL)

 private:
  // This is a naive implementation with 'count_' member even if (Extent != dynamic_extent).
  pointer const data_;
  const size_type count_;
};",0,822 60 587 2000 44 2001 321 2002 2003 61 2004 62 587 2005 2006 123 777 58 833 2000 2007 59 833 2000 38 2008 59 833 601 2000 38 2009 59 833 2000 42 2010 59 833 601 2000 42 2011 59 833 2001 321 2002 2012 59 809 2013 2012 2014 61 2003 59 330 2015 2012 2016 40 41 601 2017 123 792 2018 59 125 330 2015 2012 2019 40 41 601 2017 123 792 2016 40 41 42 805 40 2007 41 59 125 330 2015 569 2020 40 41 601 2017 123 792 2016 40 41 323 1500 59 125 330 2015 2010 2021 40 41 601 2017 123 792 2022 59 125 330 330 2015 2008 758 91 93 40 2012 2023 41 601 123 792 2021 40 41 91 2023 93 59 125 2015 2005 40 601 2005 38 2024 41 2017 58 2025 40 2024 46 2025 41 44 2026 40 2024 46 2026 41 123 125 2027 2005 38 758 61 40 601 2005 38 2024 41 2017 123 2025 61 2024 46 2025 59 2026 61 2024 46 2026 59 125 330 330 330 330 330 330 330 2015 648 2005 40 2010 2028 44 2012 2029 41 2017 58 2025 40 2003 323 2004 63 2028 58 40 2003 323 2029 63 2028 58 753 41 41 44 2026 40 2003 323 2004 63 2029 58 40 2003 323 2029 63 2003 58 1500 41 41 123 330 125 330 330 35 688 2030 40 2031 41 2015 2005 40 41 2017 58 2025 40 753 41 44 2026 40 1500 41 123 810 40 2014 323 1500 309 2014 323 2004 44 362 41 59 125 35 630 330 330 330 330 822 60 2001 321 2002 2032 61 1500 44 835 2033 321 2034 60 2007 44 2003 44 2007 44 40 2032 45 2032 41 62 321 2035 61 1500 62 2015 2005 40 41 2017 58 2025 40 753 41 44 2026 40 1500 41 123 810 40 2014 323 1500 309 2014 323 2004 44 362 41 59 125 330 330 330 330 330 330 822 60 2001 321 2002 2032 44 835 2033 321 2034 60 2007 44 2003 44 2007 44 2032 62 321 2035 61 1500 62 2015 2005 40 2007 40 38 2036 41 91 2032 93 41 2017 58 2025 40 2036 41 44 2026 40 2032 41 123 125 822 60 587 2037 44 2001 321 2002 2032 44 835 2033 321 2034 60 2007 44 2003 44 2037 44 2032 62 321 2035 61 1500 62 2015 2005 40 2001 321 2038 60 2037 44 2032 62 38 2036 41 2017 58 2025 40 2036 46 2021 40 41 41 44 2026 40 2032 41 123 125 330 330 330 330 822 60 587 2037 44 2001 321 2002 2032 44 835 2033 321 2034 60 2007 44 2003 44 2037 44 2032 62 321 2035 61 1500 62 2015 2005 40 601 2001 321 2038 60 2037 44 2032 62 38 2036 41 2017 58 2025 40 2036 46 2021 40 41 41 44 2026 40 2032 41 123 125 330 330 330 330 330 822 60 587 2037 44 2001 321 2002 2032 44 835 2033 321 2034 60 2007 44 2003 44 2037 44 2032 62 321 2035 61 1500 62 2015 2005 40 601 2039 321 2005 60 2037 44 2032 62 38 2040 41 2017 58 2005 40 2040 46 2021 40 41 44 2040 46 2016 40 41 41 123 125 35 636 330 773 58 330 2010 601 2025 59 601 2012 2026 59 125 59 ,"{'AvgLine': 3, 'CountLine': 125, 'CountStmt': 47, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 64, 'CountStmtDecl': 40, 'MaxCyclomatic': 1, 'SumCyclomatic': 13, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 13, 'AltCountLineCode': 71, 'CountLineCodeExe': 19, 'CountLineComment': 37, 'AltAvgLineComment': 0, 'AltCountLineBlank': 18, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 5, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.58', 'AltCountLineComment': 37, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 58, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99778,C++,"    class OGR_SGFS_Transaction
    {
        int varId = INVALID_VAR_ID;

        public:
            /* int commit(...);
             * Arguments: int ncid, the dataset to write to
             *            int write_loc, the index in which to write to
             * Implementation: should write the transaction to netCDF file
             *
             */
            virtual void commit(netCDFVID& n, size_t write_loc) = 0;

            /* unsigned long long count(...)
             * Implementation: supposed to return an approximate count of memory usage
             * Most classes will implement with sizeof(*this), except if otherwise uncounted for dynamic allocation is involved.
             */
            virtual unsigned long long count() = 0;

            /* appendToLog
             * Implementation - given a file pointer, a transaction will be written to that log file in the format:
             * -
             * transactionVarId - sizeof(int) bytes
             * NC_TYPE - sizeof(int) bytes
             * (nc_char only) OP - 1 byte (0 if does not require COUNT or non-zero i.e. 1 if does)
             * (nc_char only): SIZE of data - sizeof(size_t) bytes
             * DATA - size depends on NC_TYPE
             */
            virtual void appendToLog(VSILFILE*) = 0;

            /* ~OGR_SGFS_Transaction()
             * Empty. Simply here to stop the compiler from complaining...
             */
            virtual ~OGR_SGFS_Transaction() {}


            /* OGR_SGFS_Transaction()
             * Empty. Simply here to stop one of the CI machines from complaining...
             */
            OGR_SGFS_Transaction() {}

            /* void getVarId(...);
             * Gets the var in which to commit the transaction to.
             */
            int getVarId() { return this->varId; }

            /* nc_type getType
             * Returns the type of transaction being saved
             */
            virtual nc_type getType() = 0;

            /* void setVarId(...);
             * Sets the var in which to commit the transaction to.
             */
            void setVarId(int vId) { this->varId = vId; }

    };",0,587 2000 123 704 2001 61 2002 59 777 58 305 864 865 2003 40 2004 38 2005 44 2006 2007 41 61 1500 59 305 864 856 726 726 2008 40 41 61 1500 59 305 864 865 2009 40 2010 42 41 61 1500 59 305 864 126 2000 40 41 123 125 305 2000 40 41 123 125 305 704 2011 40 41 123 792 823 354 2001 59 125 305 864 2012 2013 40 41 61 1500 59 305 865 2014 40 704 2015 41 123 823 354 2001 61 2015 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 57, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 13, 'CountLineCodeExe': 2, 'CountLineComment': 34, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 1, 'CountClassDerived': 3, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '2.62', 'AltCountLineComment': 34, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99780,C++,"    class SGWriter_Exception_NCDefFailure : public SGWriter_Exception
    {
        std::string msg;

        public:
            const char * get_err_msg() override { return this->msg.c_str(); }
            SGWriter_Exception_NCDefFailure(const char * layer_name, const char * failure_name,
                const char * failure_type);
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 823 354 2004 46 2007 40 41 59 125 2000 40 601 582 42 2008 44 601 582 42 2009 44 601 582 42 2010 41 59 125 59 ,"{'AvgLine': 2, 'CountLine': 13, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 12, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99785,C++,"    class WBuffer
    {
        unsigned long long used_mem = 0;

        public:
            /* addCount(...)
             * Takes in a size, and directly adds that size to memory count
             */
             void addCount(unsigned long long memuse);

            /* subCount(...)
             * Directly subtracts the specified size from used_mem
             */
             void subCount(unsigned long long memfree);
             unsigned long long& getUsage() { return used_mem; }

             void reset() { this->used_mem = 0; }

             WBuffer() {}
    };",0,587 2000 123 856 726 726 2001 61 1500 59 777 58 305 865 2002 40 856 726 726 2003 41 59 305 865 2004 40 856 726 726 2005 41 59 856 726 726 38 2006 40 41 123 792 2001 59 125 865 2007 40 41 123 823 354 2001 61 1500 59 125 2000 40 41 123 125 125 59 ,"{'AvgLine': 3, 'CountLine': 33, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 19, 'CountLineCodeExe': 4, 'CountLineComment': 9, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.47', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 55, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99786,C++,"    class WBufferManager
    {
        unsigned long long buffer_soft_limit = 0;
        std::vector<WBuffer*> bufs;

        public:
            bool isOverQuota();
            void adjustLimit(unsigned long long lim) { this->buffer_soft_limit = lim; }
            void addBuffer(WBuffer* b) { this->bufs.push_back(b); }
            explicit WBufferManager(unsigned long long lim) : buffer_soft_limit(lim){ }
    };",0,587 2000 123 856 726 726 2001 61 1500 59 2002 321 2003 60 2004 42 62 2005 59 777 58 569 2006 40 41 59 865 2007 40 856 726 726 2008 41 123 823 354 2001 61 2008 59 125 865 2009 40 2004 42 2010 41 123 823 354 2005 46 2011 40 2010 41 59 125 648 2000 40 856 726 726 2008 41 58 2001 40 2008 41 123 125 125 59 ,"{'AvgLine': 3, 'CountLine': 22, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 20, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 62, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99791,C++,"class CADWrapperRasterBand : public GDALProxyRasterBand
{
  GDALRasterBand* poBaseBand;

  protected:
    virtual GDALRasterBand* RefUnderlyingRasterBand() override { return poBaseBand; }

  public:
    explicit CADWrapperRasterBand( GDALRasterBand* poBaseBandIn ) :
                    poBaseBand( poBaseBandIn )
    {
        eDataType = poBaseBand->GetRasterDataType();
        poBaseBand->GetBlockSize(&nBlockXSize, &nBlockYSize);
    }
    virtual ~CADWrapperRasterBand() {}
};",0,587 2000 58 777 2001 123 2002 42 2003 59 775 58 864 2002 42 2004 40 41 2005 123 792 2003 59 125 777 58 648 2000 40 2002 42 2006 41 58 2003 40 2006 41 123 2007 61 2003 354 2008 40 41 59 2003 354 2009 40 38 2010 44 38 2011 41 59 125 864 126 2000 40 41 123 125 125 59 ,"{'AvgLine': 2, 'CountLine': 16, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 14, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 148, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99790,C++,"class OCAD_EXTERN CADVariant final
{
public:
    enum class DataType
    {
        INVALID = 0, DECIMAL, REAL, STRING, DATETIME, COORDINATES, HANDLE
    };

public:
    CADVariant();
    // cppcheck-suppress noExplicitConstructor
    CADVariant( const char * val );
    // cppcheck-suppress noExplicitConstructor
    CADVariant( int val );
    // cppcheck-suppress noExplicitConstructor
    CADVariant( short val );
    // cppcheck-suppress noExplicitConstructor
    CADVariant( double val );
    CADVariant( double x, double y, double z = 0 );
    // cppcheck-suppress noExplicitConstructor
    CADVariant( const CADHandle& val );
    // cppcheck-suppress noExplicitConstructor
    CADVariant( const std::string& val );
    // cppcheck-suppress noExplicitConstructor
    CADVariant( long julianday, long milliseconds );
public:
    long                getDecimal() const;
    double              getReal() const;
    const std::string&  getString() const;
    DataType            getType() const;
    double              getX() const;
    double              getY() const;
    double              getZ() const;
    const CADHandle&    getHandle() const;
protected:
    DataType            type;
    long                decimalVal;
    double              xVal;
    double              yVal;
    double              zVal;
    std::string         stringVal;
    CADHandle           handleVal;
    time_t              dateTimeVal;
};",0,587 2000 2001 2002 123 777 58 640 587 2003 123 2004 61 1500 44 2005 44 2006 44 2007 44 2008 44 2009 44 2010 125 59 777 58 2001 40 41 59 330 2001 40 601 582 42 2011 41 59 330 2001 40 704 2011 41 59 330 2001 40 803 2011 41 59 330 2001 40 625 2011 41 59 2001 40 625 2012 44 625 2013 44 625 2014 61 1500 41 59 330 2001 40 601 2015 38 2011 41 59 330 2001 40 601 2016 321 2017 38 2011 41 59 330 2001 40 726 2018 44 726 2019 41 59 777 58 726 2020 40 41 601 59 625 2021 40 41 601 59 601 2016 321 2017 38 2022 40 41 601 59 2003 2023 40 41 601 59 625 2024 40 41 601 59 625 2025 40 41 601 59 625 2026 40 41 601 59 601 2015 38 2027 40 41 601 59 775 58 2003 2028 59 726 2029 59 625 2030 59 625 2031 59 625 2032 59 2016 321 2017 2033 59 2015 2034 59 2035 2036 59 125 59 ,"{'AvgLine': 7, 'CountLine': 174, 'CountStmt': 119, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 36, 'MaxEssential': 1, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 165, 'CountStmtDecl': 84, 'MaxCyclomatic': 3, 'SumCyclomatic': 19, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 17, 'AltCountLineCode': 165, 'CountLineCodeExe': 90, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 8, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 17, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 54, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 22, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 8}"
99834,C++,"class OGR2OGRSpatialReferenceHolder
{
        OGRSpatialReference* m_poSRS;

    public:
        OGR2OGRSpatialReferenceHolder() : m_poSRS(nullptr) {}
       ~OGR2OGRSpatialReferenceHolder() { if( m_poSRS) m_poSRS->Release(); }

       void assignNoRefIncrease(OGRSpatialReference* poSRS) {
           CPLAssert(m_poSRS == nullptr);
           m_poSRS = poSRS;
       }
       OGRSpatialReference* get() { return m_poSRS; }
};",0,587 2000 123 2001 42 2002 59 777 58 2000 40 41 58 2002 40 753 41 123 125 126 2000 40 41 123 688 40 2002 41 2002 354 2003 40 41 59 125 865 2004 40 2001 42 2005 41 123 2006 40 2002 323 753 41 59 2002 61 2005 59 125 2001 42 2007 40 41 123 792 2002 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 14, 'CountStmt': 11, 'MaxNesting': 1, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 12, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 19, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99804,C++,"class AODriver final: public OGRSFDriver
{

public:
  AODriver();
  virtual ~AODriver();

  bool Init();

  const char *GetName() override;
  virtual OGRDataSource *Open( const char *, int ) override;
  int TestCapability( const char * ) override;
  virtual OGRDataSource *CreateDataSource( const char *pszName, char ** = NULL) override;

  static void OpenWorkspace(std::string, IWorkspace** ppWorkspace);

private:
  bool m_licensedCheckedOut;
  int  m_productCode;
  bool m_initialized;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 59 569 2003 40 41 59 601 582 42 2004 40 41 2005 59 864 2006 42 2007 40 601 582 42 44 704 41 2005 59 704 2008 40 601 582 42 41 2005 59 864 2006 42 2009 40 601 582 42 2010 44 582 42 42 61 2011 41 2005 59 809 865 2012 40 2013 321 2014 44 2015 42 42 2016 41 59 773 58 569 2017 59 704 2018 59 569 2019 59 125 59 ,"{'AvgLine': 18, 'CountLine': 168, 'CountStmt': 51, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 28, 'MaxEssential': 6, 'SumEssential': 15, 'AvgCyclomatic': 2, 'CountLineCode': 112, 'CountStmtDecl': 24, 'MaxCyclomatic': 6, 'SumCyclomatic': 18, 'AltAvgLineCode': 12, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 38, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 8, 'AltCountLineCode': 112, 'CountLineCodeExe': 20, 'CountLineComment': 23, 'AltAvgLineComment': 2, 'AltCountLineBlank': 38, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 20, 'CountLineInactive': 0, 'CountDeclMethodAll': 48, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.21', 'AltCountLineComment': 23, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99807,C++,"class GMTRasterBand final: public GDALPamRasterBand
{
    nc_type nc_datatype;
    int         nZId;

  public:

    GMTRasterBand( GMTDataset *poDS, int nZId, int nBand );
    virtual ~GMTRasterBand() {}

    virtual CPLErr IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 2003 2004 59 704 2005 59 777 58 2000 40 2006 42 2007 44 704 2005 44 704 2008 41 59 864 126 2000 40 41 123 125 864 2009 2010 40 704 44 704 44 865 42 41 2011 59 125 59 ,"{'AvgLine': 28, 'CountLine': 95, 'CountStmt': 43, 'MaxNesting': 1, 'AvgLineCode': 23, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 33, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 5, 'CountLineCode': 77, 'CountStmtDecl': 11, 'MaxCyclomatic': 7, 'SumCyclomatic': 15, 'AltAvgLineCode': 24, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 3, 'AltCountLineCode': 82, 'CountLineCodeExe': 42, 'CountLineComment': 3, 'AltAvgLineComment': 1, 'AltCountLineBlank': 10, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 2, 'CountDeclMethodAll': 131, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 5, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99812,C++,"class OGRLVBAGDataSource final: public GDALDataset
{
    OGRLVBAG::LayerPoolUniquePtr poPool;
    OGRLVBAG::LayerVector papoLayers;

    void                TryCoalesceLayers();

    friend GDALDataset *OGRLVBAGDriverOpen( GDALOpenInfo* poOpenInfo );

public:
                        OGRLVBAGDataSource();

    int                 Open( const char* pszFilename, char **papszOpenOptions );

    int                 GetLayerCount() override;
    OGRLayer*           GetLayer( int ) override;

    int                 TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 2005 59 2003 321 2006 2007 59 865 2008 40 41 59 667 2002 42 2009 40 2010 42 2011 41 59 777 58 2000 40 41 59 704 2012 40 601 582 42 2013 44 582 42 42 2014 41 59 704 2015 40 41 2016 59 2017 42 2018 40 704 41 2016 59 704 2019 40 601 582 42 41 2016 59 125 59 ,"{'AvgLine': 23, 'CountLine': 159, 'CountStmt': 47, 'MaxNesting': 1, 'AvgLineCode': 19, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 128, 'CountStmtDecl': 36, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 19, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 26, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 6, 'AltCountLineCode': 128, 'CountLineCodeExe': 6, 'CountLineComment': 6, 'AltAvgLineComment': 1, 'AltCountLineBlank': 26, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 38, 'CountLineInactive': 0, 'CountDeclMethodAll': 148, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 1, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99828,C++,"class AxisMappingCoordinateTransformation : public OGRCoordinateTransformation
{
public:

    bool bSwapXY = false;

    AxisMappingCoordinateTransformation( const std::vector<int>& mappingIn,
                                         const std::vector<int>& mappingOut )
    {
        if( mappingIn.size() >= 2 && mappingIn[0] == 1 && mappingIn[1] == 2 &&
            mappingOut.size() >= 2 && mappingOut[0] == 2 && mappingOut[1] == 1 )
        {
            bSwapXY = true;
        }
        else if( mappingIn.size() >= 2 && mappingIn[0] == 2 && mappingIn[1] == 1 &&
                 mappingOut.size() >= 2 && mappingOut[0] == 1 && mappingOut[1] == 2 )
        {
            bSwapXY = true;
        }
        else
        {
            CPLError(CE_Failure, CPLE_NotSupported,
                      ""Unsupported axis transformation"");
        }
    }

    ~AxisMappingCoordinateTransformation() override
    {
    }

    virtual OGRCoordinateTransformation *Clone() const override
    {
        return new AxisMappingCoordinateTransformation(*this);
    }

    virtual OGRSpatialReference *GetSourceCS() override
    {
        return nullptr;
    }

    virtual OGRSpatialReference *GetTargetCS() override
    {
        return nullptr;
    }

    virtual int Transform( int nCount,
                           double *x, double *y,
                           double * /*z*/,
                           double * /*t*/,
                           int *pabSuccess ) override
    {
        for(int i = 0; i < nCount; i++ )
        {
            if( pabSuccess )
                pabSuccess[i] = true;
            if( bSwapXY )
                std::swap(x[i], y[i]);
        }
        return true;
    }

    virtual OGRCoordinateTransformation* GetInverse() const override { return nullptr; }
};",0,587 2000 58 777 2001 123 777 58 569 2002 61 655 59 2000 40 601 2003 321 2004 60 704 62 38 2005 44 601 2003 321 2004 60 704 62 38 2006 41 123 688 40 2005 46 2007 40 41 325 1502 307 2005 91 1500 93 323 1501 307 2005 91 1501 93 323 1502 307 2006 46 2007 40 41 325 1502 307 2006 91 1500 93 323 1502 307 2006 91 1501 93 323 1501 41 123 2002 61 829 59 125 630 688 40 2005 46 2007 40 41 325 1502 307 2005 91 1500 93 323 1502 307 2005 91 1501 93 323 1501 307 2006 46 2007 40 41 325 1502 307 2006 91 1500 93 323 1501 307 2006 91 1501 93 323 1502 41 123 2002 61 829 59 125 630 123 2008 40 2009 44 2010 44 362 41 59 125 125 126 2000 40 41 2011 123 125 864 2001 42 2012 40 41 601 2011 123 792 744 2000 40 42 823 41 59 125 864 2013 42 2014 40 41 2011 123 792 753 59 125 864 2013 42 2015 40 41 2011 123 792 753 59 125 864 704 2016 40 704 2017 44 625 42 2018 44 625 42 2019 44 625 42 305 44 625 42 305 44 704 42 2020 41 2011 123 664 40 704 2021 61 1500 59 2021 60 2017 59 2021 349 41 123 688 40 2020 41 2020 91 2021 93 61 829 59 688 40 2002 41 2003 321 2022 40 2018 91 2021 93 44 2019 91 2021 93 41 59 125 792 829 59 125 864 2001 42 2023 40 41 601 2011 123 792 753 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 63, 'CountStmt': 24, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 55, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 12, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 55, 'CountLineCodeExe': 16, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99845,C++,"class CPL_DLL OGRAttrIndex
{
protected:
                OGRAttrIndex();

public:
    virtual     ~OGRAttrIndex();

    virtual GIntBig   GetFirstMatch( OGRField *psKey ) = 0;
    virtual GIntBig  *GetAllMatches( OGRField *psKey ) = 0;
    virtual GIntBig  *GetAllMatches( OGRField *psKey, GIntBig* panFIDList, int* nFIDCount, int* nLength ) = 0;

    virtual OGRErr AddEntry( OGRField *psKey, GIntBig nFID ) = 0;
    virtual OGRErr RemoveEntry( OGRField *psKey, GIntBig nFID ) = 0;

    virtual OGRErr Clear() = 0;
};",0,587 2000 2001 123 775 58 2001 40 41 59 777 58 864 126 2001 40 41 59 864 2002 2003 40 2004 42 2005 41 61 1500 59 864 2002 42 2006 40 2004 42 2005 41 61 1500 59 864 2002 42 2006 40 2004 42 2005 44 2002 42 2007 44 704 42 2008 44 704 42 2009 41 61 1500 59 864 2010 2011 40 2004 42 2005 44 2002 2012 41 61 1500 59 864 2010 2013 40 2004 42 2005 44 2002 2012 41 61 1500 59 864 2010 2014 40 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 19, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 15, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99854,C++,"class AIGErrorDescription
{
    public:
        CPLErr eErr;
        CPLErrorNum    no;
        CPLString osMsg;
};",0,587 2000 123 777 58 2001 2002 59 2003 2004 59 2005 2006 59 125 59 ,"{'AvgLine': 0, 'CountLine': 7, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100140,C++,"class COASPMetadataReader
{
        char **papszMetadata;
        int nMetadataCount;
        int nCurrentItem;
public:
        explicit COASPMetadataReader(char *pszFname);
        ~COASPMetadataReader();
        COASPMetadataItem *GetNextItem();
        COASPMetadataItem *GetItem(int nItem);
        int GotoMetadataItem(const char *pszName);
        int GetCurrentItem() const { return nCurrentItem; }
};",0,587 2000 123 582 42 42 2001 59 704 2002 59 704 2003 59 777 58 648 2000 40 582 42 2004 41 59 126 2000 40 41 59 2005 42 2006 40 41 59 2005 42 2007 40 704 2008 41 59 704 2009 40 601 582 42 2010 41 59 704 2011 40 41 601 123 792 2003 59 125 125 59 ,"{'AvgLine': 12, 'CountLine': 76, 'CountStmt': 41, 'MaxNesting': 3, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 29, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 70, 'CountStmtDecl': 22, 'MaxCyclomatic': 5, 'SumCyclomatic': 9, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 70, 'CountLineCodeExe': 52, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 52, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99878,C++,"    class PjPtr
    {
        PJ* m_pj = nullptr;
        void reset()
        {
            if( m_pj )
            {
                proj_assign_context(m_pj, OSRGetProjTLSContext());
                proj_destroy(m_pj);
            }
        }
    public:
        PjPtr() : m_pj(nullptr){}
        explicit PjPtr(PJ* pjIn) : m_pj(pjIn){}
        ~PjPtr()
        {
            reset();
        }
        PjPtr(const PjPtr& other) :
            m_pj((other.m_pj != nullptr) ?
                 (proj_clone(OSRGetProjTLSContext(), other.m_pj)) :
                 (nullptr))
        {}
        PjPtr(PjPtr&& other) :
            m_pj(other.m_pj)
        {
            other.m_pj = nullptr;
        }
        PjPtr& operator=(const PjPtr& other)
        {
            if(this != &other)
            {
                reset();
                m_pj = (other.m_pj != nullptr) ?
                       (proj_clone(OSRGetProjTLSContext(), other.m_pj)) :
                       (nullptr);
            }
            return *this;
        }
        PjPtr& operator=(PJ* pjIn)
        {
            if(m_pj != pjIn)
            {
                reset();
                m_pj = pjIn;
            }
            return *this;
        }
        operator PJ* () { return m_pj; }
        operator const PJ* () const{ return m_pj; }
    };",0,587 2000 123 2001 42 2002 61 753 59 865 2003 40 41 123 688 40 2002 41 123 2004 40 2002 44 2005 40 41 41 59 2006 40 2002 41 59 125 125 777 58 2000 40 41 58 2002 40 753 41 123 125 648 2000 40 2001 42 2007 41 58 2002 40 2007 41 123 125 126 2000 40 41 123 2003 40 41 59 125 2000 40 601 2000 38 2008 41 58 2002 40 40 2008 46 2002 340 753 41 63 40 2009 40 2010 40 41 44 2008 46 2002 41 41 58 40 753 41 41 123 125 2000 40 2000 307 2008 41 58 2002 40 2008 46 2002 41 123 2008 46 2002 61 753 59 125 2000 38 758 61 40 601 2000 38 2008 41 123 688 40 823 340 38 2008 41 123 2003 40 41 59 2002 61 40 2008 46 2002 340 753 41 63 40 2009 40 2010 40 41 44 2008 46 2002 41 41 58 40 753 41 59 125 792 42 823 59 125 2000 38 758 61 40 2001 42 2007 41 123 688 40 2002 340 2007 41 123 2003 40 41 59 2002 61 2007 59 125 792 42 823 59 125 758 2001 42 40 41 123 792 2002 59 125 758 601 2001 42 40 41 601 123 792 2002 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 51, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 51, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 51, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99885,C++,"    class CPCIDSK_BLUT : virtual public CPCIDSKSegment,
                        public PCIDSK_BLUT
    {
    public:
        CPCIDSK_BLUT( PCIDSKFile *file, int segment, const char *segment_pointer);

        virtual     ~CPCIDSK_BLUT();

        virtual void ReadBLUT( std::vector<BLUTEntry>& vBLUT ) override;
        virtual void WriteBLUT( const std::vector<BLUTEntry>& vBLUT ) override;
    };",0,587 2000 58 864 777 2001 44 777 2002 123 777 58 2000 40 2003 42 2004 44 704 2005 44 601 582 42 2006 41 59 864 126 2000 40 41 59 864 865 2007 40 2008 321 2009 60 2010 62 38 2011 41 2012 59 864 865 2013 40 601 2008 321 2009 60 2010 62 38 2011 41 2012 59 125 59 ,"{'AvgLine': 18, 'CountLine': 84, 'CountStmt': 36, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 33, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 3, 'CountLineCode': 61, 'CountStmtDecl': 13, 'MaxCyclomatic': 6, 'SumCyclomatic': 12, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 4, 'AltCountLineCode': 61, 'CountLineCodeExe': 33, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 57, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99884,C++,"class BYNRasterBand final: public RawRasterBand
{
    friend class BYNDataset;

    CPL_DISALLOW_COPY_ASSIGN(BYNRasterBand)

  public:
    BYNRasterBand( GDALDataset *poDS, int nBand, VSILFILE * fpRaw,
                   vsi_l_offset nImgOffset, int nPixelOffset,
                   int nLineOffset,
                   GDALDataType eDataType, int bNativeOrder );
    ~BYNRasterBand() override;

    double GetNoDataValue( int *pbSuccess = nullptr ) override;
    double GetScale( int *pbSuccess = nullptr ) override;
    CPLErr SetScale( double dfNewValue ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 40 2000 41 777 58 2000 40 2005 42 2006 44 704 2007 44 2008 42 2009 44 2010 2011 44 704 2012 44 704 2013 44 2014 2015 44 704 2016 41 59 126 2000 40 41 2017 59 625 2018 40 704 42 2019 61 753 41 2017 59 625 2020 40 704 42 2019 61 753 41 2017 59 2021 2022 40 625 2023 41 2017 59 125 59 ,"{'AvgLine': 8, 'CountLine': 57, 'CountStmt': 20, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 2, 'CountLineCode': 54, 'CountStmtDecl': 10, 'MaxCyclomatic': 4, 'SumCyclomatic': 10, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 54, 'CountLineCodeExe': 17, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 175, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99949,C++,"class TigerZipPlus4 final: public TigerFileBase
{
 public:
                      TigerZipPlus4( OGRTigerDataSource *, const char * );
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 125 59 ,"{'AvgLine': 14, 'CountLine': 19, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 10, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 1, 'AltCountLineCode': 15, 'CountLineCodeExe': 6, 'CountLineComment': 3, 'AltAvgLineComment': 3, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99969,C++,"class KmlSuperOverlayDummyDataset final: public GDALDataset
{
    public:
        KmlSuperOverlayDummyDataset() {}
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 5, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 5, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 5, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 143, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99900,C++,"class ACE2RasterBand final: public RawRasterBand
{
  public:
    ACE2RasterBand( VSILFILE* fpRaw,
                    GDALDataType eDataType,
                    int nXSize, int nYSize );
    ~ACE2RasterBand() override {}

    const char *GetUnitType() override;
    char **GetCategoryNames() override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 2004 44 2005 2006 44 704 2007 44 704 2008 41 59 126 2000 40 41 2009 123 125 601 582 42 2010 40 41 2009 59 582 42 42 2011 40 41 2009 59 125 59 ,"{'AvgLine': 7, 'CountLine': 41, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 2, 'AvgLineBlank': 1, 'CountStmtExe': 12, 'MaxEssential': 5, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 36, 'CountStmtDecl': 5, 'MaxCyclomatic': 5, 'SumCyclomatic': 9, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 36, 'CountLineCodeExe': 16, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 172, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99904,C++,"class GDAL_EDBFile final : public EDBFile
{
    GDALDataset     *poDS;

public:

    explicit GDAL_EDBFile( GDALDataset *poDSIn ) { poDS = poDSIn; }
    ~GDAL_EDBFile() { if( poDS ) GDAL_EDBFile::Close(); }

    int Close() const override;
    int GetWidth() const override;
    int GetHeight() const override;
    int GetChannels() const override;
    int GetBlockWidth(int channel ) const override;
    int GetBlockHeight(int channel ) const override;
    eChanType GetType(int channel ) const override;
    int ReadBlock(int channel,
                  int block_index, void *buffer,
                  int win_xoff, int win_yoff,
                  int win_xsize, int win_ysize ) override;
    int WriteBlock( int channel, int block_index, void *buffer) override;
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 777 58 648 2000 40 2003 42 2005 41 123 2004 61 2005 59 125 126 2000 40 41 123 688 40 2004 41 2000 321 2006 40 41 59 125 704 2007 40 41 601 2008 59 704 2009 40 41 601 2008 59 704 2010 40 41 601 2008 59 704 2011 40 41 601 2008 59 704 2012 40 704 2013 41 601 2008 59 704 2014 40 704 2013 41 601 2008 59 2015 2016 40 704 2013 41 601 2008 59 704 2017 40 704 2013 44 704 2018 44 865 42 2019 44 704 2020 44 704 2021 44 704 2022 44 704 2023 41 2008 59 704 2024 40 704 2013 44 704 2018 44 865 42 2019 41 2008 59 125 59 ,"{'AvgLine': 15, 'CountLine': 188, 'CountStmt': 83, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 56, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 2, 'CountLineCode': 139, 'CountStmtDecl': 34, 'MaxCyclomatic': 6, 'SumCyclomatic': 26, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 41, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 11, 'AltCountLineCode': 139, 'CountLineCodeExe': 75, 'CountLineComment': 8, 'AltAvgLineComment': 0, 'AltCountLineBlank': 41, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 43, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 26, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 15, 'SumCyclomaticModified': 22, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99907,C++,"class FITSRasterBand final: public GDALPamRasterBand {

  friend class  FITSDataset;

  bool               m_bHaveOffsetScale = false;
  double             m_dfOffset = 0.0;
  double             m_dfScale = 1.0;

 protected:
    FITSDataset       *m_poFDS = nullptr;

    bool               m_bNoDataSet = false;
    double             m_dfNoDataValue = -9999.0;

 public:

  FITSRasterBand(FITSDataset*, int);
  virtual ~FITSRasterBand();

  virtual CPLErr IReadBlock( int, int, void * ) override;
  virtual CPLErr IWriteBlock( int, int, void * ) override;

  virtual double GetNoDataValue( int * ) override final;
  virtual CPLErr SetNoDataValue( double ) override final;
  virtual CPLErr DeleteNoDataValue() override final;

  virtual double GetOffset( int *pbSuccess = nullptr ) override final;
  virtual CPLErr SetOffset( double dfNewValue ) override final;
  virtual double GetScale( int *pbSuccess = nullptr ) override final;
  virtual CPLErr SetScale( double dfNewValue ) override final;

};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 569 2004 61 655 59 625 2005 61 1500 59 625 2006 61 1501 59 775 58 2003 42 2007 61 753 59 569 2008 61 655 59 625 2009 61 45 1505 59 777 58 2000 40 2003 42 44 704 41 59 864 126 2000 40 41 59 864 2010 2011 40 704 44 704 44 865 42 41 2012 59 864 2010 2013 40 704 44 704 44 865 42 41 2012 59 864 625 2014 40 704 42 41 2012 2001 59 864 2010 2015 40 625 41 2012 2001 59 864 2010 2016 40 41 2012 2001 59 864 625 2017 40 704 42 2018 61 753 41 2012 2001 59 864 2010 2019 40 625 2020 41 2012 2001 59 864 625 2021 40 704 42 2018 61 753 41 2012 2001 59 864 2010 2022 40 625 2020 41 2012 2001 59 125 59 ,"{'AvgLine': 17, 'CountLine': 219, 'CountStmt': 94, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 64, 'MaxEssential': 3, 'SumEssential': 15, 'AvgCyclomatic': 2, 'CountLineCode': 153, 'CountStmtDecl': 28, 'MaxCyclomatic': 5, 'SumCyclomatic': 26, 'AltAvgLineCode': 11, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 42, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 2, 'CountDeclMethod': 11, 'AltCountLineCode': 153, 'CountLineCodeExe': 71, 'CountLineComment': 24, 'AltAvgLineComment': 2, 'AltCountLineBlank': 42, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 24, 'CountLineInactive': 0, 'CountDeclMethodAll': 139, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.16', 'AltCountLineComment': 24, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 29, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 26, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 3}"
99908,C++,"class TigerFeatureIds final: public TigerFileBase
{
 public:
                      TigerFeatureIds( OGRTigerDataSource *,
                                       const char * );
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 125 59 ,"{'AvgLine': 17, 'CountLine': 23, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 2, 'CountLineCode': 21, 'CountStmtDecl': 1, 'MaxCyclomatic': 2, 'SumCyclomatic': 2, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 1, 'AltCountLineCode': 21, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99970,C++,"class SubImageDesc
{
    public:
        GDALDataset* poDS;
        double       adfExtents[4];
};",0,587 2000 123 777 58 2001 42 2002 59 625 2003 91 1502 93 59 125 59 ,"{'AvgLine': 0, 'CountLine': 6, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99924,C++,"class PostGISRasterDriver final: public GDALDriver {

private:
    CPLMutex* hMutex;
    std::map<CPLString, PGconn*> oMapConnection{};

    CPL_DISALLOW_COPY_ASSIGN(PostGISRasterDriver)
public:
    PostGISRasterDriver();
    virtual ~PostGISRasterDriver();
  PGconn *GetConnection(const char *pszConnectionString,
                        const char *pszServiceIn, const char *pszDbnameIn,
                        const char *pszHostIn, const char *pszPortIn,
                        const char *pszUserIn);
};",0,587 2000 2001 58 777 2002 123 773 58 2003 42 2004 59 2005 321 2006 60 2007 44 2008 42 62 2009 123 125 59 2010 40 2000 41 777 58 2000 40 41 59 864 126 2000 40 41 59 2008 42 2011 40 601 582 42 2012 44 601 582 42 2013 44 601 582 42 2014 44 601 582 42 2015 44 601 582 42 2016 44 601 582 42 2017 41 59 125 59 ,"{'AvgLine': 19, 'CountLine': 74, 'CountStmt': 28, 'MaxNesting': 1, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 19, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 3, 'CountLineCode': 58, 'CountStmtDecl': 11, 'MaxCyclomatic': 6, 'SumCyclomatic': 9, 'AltAvgLineCode': 15, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 58, 'CountLineCodeExe': 15, 'CountLineComment': 9, 'AltAvgLineComment': 3, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.16', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99931,C++,"class TestRingAppender
{
public:
    struct Point
    {
        Point( double xx, double yy ): x(xx), y(yy) {}
        double x;
        double y;
        bool operator<( const Point& b ) const
        {
            return x == b.x ? y < b.y : x < b.x;
        }
        bool operator==( const Point& b ) const
        {
            return std::fabs(x - b.x) < 0.001 && std::fabs(y - b.y) < 0.001;
        }
        bool operator!=( const Point& b ) const
        {
            return ! (*this == b);
        }
    };

    void addLine( double level, LineString& ls, bool /* closed */ )
    {
        auto& v = points_[level];
        std::vector<Point> ring;
        for ( const auto& pt : ls ) {
            ring.push_back( Point( pt.x, pt.y ) );
        }
        v.push_back( ring );
    }

    bool hasRing( double level, const std::vector<Point>& other ) const
    {
        auto it = points_.find( level );
        if ( it == points_.end() ) {
            return false;
        }

        const auto& rings = it->second;
        for ( const auto& ring: rings ) {
            if ( ringEquals_( ring, other ) ) {
                return true;
            }
            else {
                // test also the reverse ring
                auto rev = other;
                std::reverse( rev.begin(), rev.end() );
                if ( ringEquals_( ring, rev ) ) {
                    return true;
                }
            }
        }
        return false;
    }

    void out( std::ostream& o, double level )
    {
        for ( const auto& p : points_[level] ) {
            out_( o, p );
        }
    }

private:
    // level -> vector of rings
    std::map<double, std::vector<std::vector<Point>>> points_;

    bool ringEquals_( const std::vector<Point>& aRing, const std::vector<Point>& bRing ) const
    {
        if ( aRing.size() - 1 != bRing.size() ) {
            return false;
        }

        // rings do not really have a ""first"" point, but since
        // we represent them with a vector, we need to find a common ""first"" point
        Point pfirst = aRing[0];
        size_t offset = 0;
        while ( offset < bRing.size() && pfirst != bRing[offset] )
            offset++;
        if ( offset >= bRing.size() ) {
            // can't find a common point
            return false;
        }
        // now compare each point of the two rings
        for ( size_t i = 0; i < aRing.size(); i++ ) {
            const Point& p2 = bRing[( i + offset ) % bRing.size()];
            if ( aRing[i] != p2 ) {
                return false;
            }
        }
        return true;
    }

    void out_( std::ostream& o, const std::vector<Point>& points ) const
    {
        o << ""{ "";
        for ( const auto& pt: points ) {
            o << ""{"" << pt.x << "","" << pt.y << ""}, "";
        }
        o << ""}, "";
    }
};",0,587 2000 123 777 58 816 2001 123 2001 40 625 2002 44 625 2003 41 58 2004 40 2002 41 44 2005 40 2003 41 123 125 625 2004 59 625 2005 59 569 758 60 40 601 2001 38 2006 41 601 123 792 2004 323 2006 46 2004 63 2005 60 2006 46 2005 58 2004 60 2006 46 2004 59 125 569 758 323 40 601 2001 38 2006 41 601 123 792 2007 321 2008 40 2004 45 2006 46 2004 41 60 1500 307 2007 321 2008 40 2005 45 2006 46 2005 41 60 1500 59 125 569 758 340 40 601 2001 38 2006 41 601 123 792 33 40 42 823 323 2006 41 59 125 125 59 865 2009 40 625 2010 44 2011 38 2012 44 569 305 41 123 561 38 2013 61 2014 91 2010 93 59 2015 321 2016 60 2001 62 2017 59 664 40 601 561 38 2018 58 2012 41 123 2017 46 2019 40 2001 40 2018 46 2020 44 2018 46 2021 41 41 59 125 2013 46 2022 40 2017 41 59 125 569 2023 40 625 2010 44 601 2024 321 2025 60 2001 62 38 2026 41 601 123 561 2027 61 2028 46 2029 40 2010 41 59 688 40 2027 323 2028 46 2030 40 41 41 123 792 655 59 125 601 561 38 2031 61 2027 354 2032 59 664 40 601 561 38 2033 58 2031 41 123 688 40 2034 40 2033 44 2026 41 41 123 792 829 59 125 630 123 330 561 2035 61 2026 59 2024 321 2036 40 2035 46 2037 40 41 44 2035 46 2030 40 41 41 59 688 40 2034 40 2033 44 2035 41 41 123 792 829 59 125 125 125 792 655 59 125 865 2038 40 2024 321 2039 38 2040 44 625 2010 41 123 664 40 601 561 38 2041 58 2042 91 2010 93 41 123 2043 40 2040 44 2041 41 59 125 125 773 58 330 2024 321 2044 60 625 44 2024 321 2025 60 2024 321 2025 60 2001 355 62 2045 59 569 2046 40 601 2024 321 2025 60 2001 62 38 2047 44 601 2024 321 2025 60 2001 62 38 2048 41 601 123 688 40 2047 46 2049 40 41 45 1501 340 2048 46 2049 40 41 41 123 792 655 59 125 330 330 2001 2050 61 2047 91 1500 93 59 2051 2052 61 1500 59 870 40 2052 60 2048 46 2049 40 41 307 2050 340 2048 91 2052 93 41 2052 349 59 688 40 2052 325 2048 46 2049 40 41 41 123 330 792 655 59 125 330 664 40 2051 2053 61 1500 59 2053 60 2047 46 2049 40 41 59 2053 349 41 123 601 2001 38 2054 61 2048 91 40 2053 43 2052 41 37 2048 46 2049 40 41 93 59 688 40 2047 91 2053 93 340 2054 41 123 792 655 59 125 125 792 829 59 125 865 2055 40 2024 321 2039 38 2040 44 601 2024 321 2025 60 2001 62 38 2056 41 601 123 2040 332 362 59 664 40 601 561 38 2057 58 2056 41 123 2040 332 362 332 2057 46 2058 332 362 332 2057 46 2059 332 362 59 125 2040 332 362 59 125 125 59 ,"{'AvgLine': 14, 'CountLine': 102, 'CountStmt': 42, 'MaxNesting': 1, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 3, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 88, 'CountStmtDecl': 29, 'MaxCyclomatic': 3, 'SumCyclomatic': 8, 'AltAvgLineCode': 12, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 88, 'CountLineCodeExe': 12, 'CountLineComment': 7, 'AltAvgLineComment': 1, 'AltCountLineBlank': 8, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 24, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99944,C++,"class TigerEntityNames final: public TigerFileBase
{
public:
                      TigerEntityNames( OGRTigerDataSource *, const char * );
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 125 59 ,"{'AvgLine': 19, 'CountLine': 24, 'CountStmt': 11, 'MaxNesting': 1, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 3, 'CountLineCode': 22, 'CountStmtDecl': 1, 'MaxCyclomatic': 3, 'SumCyclomatic': 3, 'AltAvgLineCode': 17, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 1, 'AltCountLineCode': 22, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99941,C++,"class OGRTigerLayer final: public OGRLayer
{
    TigerFileBase      *poReader;

    OGRTigerDataSource   *poDS;

    int                 nFeatureCount;
    int                 *panModuleFCount;
    int                 *panModuleOffset;

    int                 iLastFeatureId;
    int                 iLastModule;

  public:
                        OGRTigerLayer( OGRTigerDataSource * poDS,
                                       TigerFileBase * );
    virtual             ~OGRTigerLayer();

    void                ResetReading() override;
    OGRFeature *        GetNextFeature() override;
    OGRFeature         *GetFeature( GIntBig nFeatureId ) override;

    OGRFeatureDefn *    GetLayerDefn() override;

    GIntBig             GetFeatureCount( int ) override;

    int                 TestCapability( const char * ) override;

    virtual OGRErr      ICreateFeature( OGRFeature *poFeature ) override;
    virtual OGRErr      CreateField( OGRFieldDefn *poField,
                                     int bApproxOK = TRUE ) override;
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2005 42 2006 59 704 2007 59 704 42 2008 59 704 42 2009 59 704 2010 59 704 2011 59 777 58 2000 40 2005 42 2006 44 2003 42 41 59 864 126 2000 40 41 59 865 2012 40 41 2013 59 2014 42 2015 40 41 2013 59 2014 42 2016 40 2017 2018 41 2013 59 2019 42 2020 40 41 2013 59 2017 2021 40 704 41 2013 59 704 2022 40 601 582 42 41 2013 59 864 2023 2024 40 2014 42 2025 41 2013 59 864 2023 2026 40 2027 42 2028 44 704 2029 61 2030 41 2013 59 125 59 ,"{'AvgLine': 18, 'CountLine': 217, 'CountStmt': 83, 'MaxNesting': 3, 'AvgLineCode': 13, 'AvgEssential': 2, 'AvgLineBlank': 3, 'CountStmtExe': 57, 'MaxEssential': 6, 'SumEssential': 21, 'AvgCyclomatic': 3, 'CountLineCode': 158, 'CountStmtDecl': 28, 'MaxCyclomatic': 6, 'SumCyclomatic': 30, 'AltAvgLineCode': 13, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 42, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 3, 'CountDeclMethod': 10, 'AltCountLineCode': 158, 'CountLineCodeExe': 72, 'CountLineComment': 17, 'AltAvgLineComment': 1, 'AltCountLineBlank': 42, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 92, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 17, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 35, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 73, 'SumCyclomaticModified': 30, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 7, 'CountDeclInstanceVariableProtected': 0}"
99951,C++,"class LayerDesc
{
    public:
        bool operator < ( const LayerDesc& other ) const
        {
            return osOriginalStr < other.osOriginalStr;
        }

        CPLString osOriginalStr{};
        CPLString osSubstitutedName{};
        CPLString osDSName{};
        CPLString osLayerName{};
};",0,587 2000 123 777 58 569 758 60 40 601 2000 38 2001 41 601 123 792 2002 60 2001 46 2002 59 125 2003 2004 123 125 59 2003 2005 123 125 59 2003 2006 123 125 59 2003 2007 123 125 59 125 59 ,"{'AvgLine': 4, 'CountLine': 13, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 12, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99953,C++,"class GDALPDFStream
{
    public:
        virtual ~GDALPDFStream();

        virtual int GetLength() = 0;
        virtual char* GetBytes() = 0;

        virtual int GetRawLength() = 0;
        virtual char* GetRawBytes() = 0;
};",0,587 2000 123 777 58 864 126 2000 40 41 59 864 704 2001 40 41 61 1500 59 864 582 42 2002 40 41 61 1500 59 864 704 2003 40 41 61 1500 59 864 582 42 2004 40 41 61 1500 59 125 59 ,"{'AvgLine': 3, 'CountLine': 14, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 12, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100045,C++,"    class SGWriter_Exception_NCDelFailure : public SGWriter_Exception
    {
        std::string msg;

        public:
            const char * get_err_msg() override { return this->msg.c_str(); }
            SGWriter_Exception_NCDelFailure(const char* layer, const char* what)
                : msg(""["" + std::string(layer) + ""] Failed to delete: "" + std::string(what))
            {}
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 823 354 2004 46 2007 40 41 59 125 2000 40 601 582 42 2008 44 601 582 42 2009 41 58 2004 40 362 43 2002 321 2003 40 2008 41 43 362 43 2002 321 2003 40 2009 41 41 123 125 125 59 ,"{'AvgLine': 2, 'CountLine': 10, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 9, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99975,C++,"class OGROpenFileGDBSimpleSQLLayer final: public OGRLayer
{
        OGRLayer        *poBaseLayer;
        FileGDBIterator *poIter;
        OGRFeatureDefn  *poFeatureDefn;

    public:
        OGROpenFileGDBSimpleSQLLayer(OGRLayer* poBaseLayer,
                                     FileGDBIterator* poIter,
                                     int nColumns,
                                     swq_col_def* pasColDefs);
       virtual ~OGROpenFileGDBSimpleSQLLayer();

       virtual void        ResetReading() override;
       virtual OGRFeature* GetNextFeature() override;
       virtual OGRFeature* GetFeature( GIntBig nFeatureId ) override;
       virtual OGRFeatureDefn* GetLayerDefn() override { return poFeatureDefn; }
       virtual int         TestCapability( const char * ) override;
       virtual const char* GetFIDColumn() override { return poBaseLayer->GetFIDColumn(); }
       virtual OGRErr      GetExtent( OGREnvelope *psExtent, int bForce ) override
                            { return poBaseLayer->GetExtent(psExtent, bForce); }
       virtual OGRErr      GetExtent(int iGeomField, OGREnvelope *psExtent, int bForce) override
                { return OGRLayer::GetExtent(iGeomField, psExtent, bForce); }
       virtual GIntBig     GetFeatureCount(int bForce) override;
};",0,587 2000 2001 58 777 2002 123 2002 42 2003 59 2004 42 2005 59 2006 42 2007 59 777 58 2000 40 2002 42 2003 44 2004 42 2005 44 704 2008 44 2009 42 2010 41 59 864 126 2000 40 41 59 864 865 2011 40 41 2012 59 864 2013 42 2014 40 41 2012 59 864 2013 42 2015 40 2016 2017 41 2012 59 864 2006 42 2018 40 41 2012 123 792 2007 59 125 864 704 2019 40 601 582 42 41 2012 59 864 601 582 42 2020 40 41 2012 123 792 2003 354 2020 40 41 59 125 864 2021 2022 40 2023 42 2024 44 704 2025 41 2012 123 792 2003 354 2022 40 2024 44 2025 41 59 125 864 2021 2022 40 704 2026 44 2023 42 2024 44 704 2025 41 2012 123 792 2002 321 2022 40 2026 44 2024 44 2025 41 59 125 864 2016 2027 40 704 2025 41 2012 59 125 59 ,"{'AvgLine': 12, 'CountLine': 152, 'CountStmt': 76, 'MaxNesting': 4, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 58, 'MaxEssential': 5, 'SumEssential': 21, 'AvgCyclomatic': 2, 'CountLineCode': 142, 'CountStmtDecl': 24, 'MaxCyclomatic': 6, 'SumCyclomatic': 28, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 142, 'CountLineCodeExe': 59, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 93, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 34, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 28, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
100099,C++,"class DDSDatasetAllDecoded final: public GDALPamDataset
{
    friend class DDSRasterBandAllDecoded;

    std::vector<crn_uint32*> m_pImages{};
    crn_texture_desc         m_tex_desc{};

                        DDSDatasetAllDecoded() = default;
                       ~DDSDatasetAllDecoded();
public:
    static GDALDataset* Open(GDALOpenInfo* poOpenInfo);
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 321 2005 60 2006 42 62 2007 123 125 59 2008 2009 123 125 59 2000 40 41 61 613 59 126 2000 40 41 59 777 58 809 2010 42 2011 40 2012 42 2013 41 59 125 59 ,"{'AvgLine': 28, 'CountLine': 67, 'CountStmt': 28, 'MaxNesting': 1, 'AvgLineCode': 22, 'AvgEssential': 2, 'AvgLineBlank': 1, 'CountStmtExe': 17, 'MaxEssential': 4, 'SumEssential': 5, 'AvgCyclomatic': 3, 'CountLineCode': 54, 'CountStmtDecl': 14, 'MaxCyclomatic': 6, 'SumCyclomatic': 7, 'AltAvgLineCode': 27, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 63, 'CountLineCodeExe': 17, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 7, 'CountDeclMethodAll': 189, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 3, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99982,C++,"class HKVRasterBand final: public RawRasterBand
{
    friend class HKVDataset;

  public:
    HKVRasterBand( HKVDataset *poDS, int nBand, VSILFILE * fpRaw,
                   unsigned int nImgOffset, int nPixelOffset,
                   int nLineOffset,
                   GDALDataType eDataType, int bNativeOrder );
    ~HKVRasterBand() override {}

    CPLErr SetNoDataValue( double ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 2000 40 2003 42 2004 44 704 2005 44 2006 42 2007 44 856 704 2008 44 704 2009 44 704 2010 44 2011 2012 44 704 2013 41 59 126 2000 40 41 2014 123 125 2015 2016 40 625 41 2014 59 125 59 ,"{'AvgLine': 8, 'CountLine': 37, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 31, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 171, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 23, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99985,C++,"class SNODASRasterBand final: public RawRasterBand
{
    CPL_DISALLOW_COPY_ASSIGN(SNODASRasterBand)

  public:
    SNODASRasterBand( VSILFILE* fpRaw, int nXSize, int nYSize );
    ~SNODASRasterBand() override {}

    double GetNoDataValue( int *pbSuccess = nullptr ) override;
    double GetMinimum( int *pbSuccess = nullptr ) override;
    double GetMaximum( int *pbSuccess = nullptr ) override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 777 58 2000 40 2004 42 2005 44 704 2006 44 704 2007 41 59 126 2000 40 41 2008 123 125 625 2009 40 704 42 2010 61 753 41 2008 59 625 2011 40 704 42 2010 61 753 41 2008 59 625 2012 40 704 42 2010 61 753 41 2008 59 125 59 ,"{'AvgLine': 8, 'CountLine': 51, 'CountStmt': 23, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 2, 'CountLineCode': 43, 'CountStmtDecl': 8, 'MaxCyclomatic': 3, 'SumCyclomatic': 11, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 43, 'CountLineCodeExe': 21, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 175, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99983,C++,"class HKVSpheroidList : public SpheroidList
{
 public:
  HKVSpheroidList();
  ~HKVSpheroidList() {}
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 126 2000 40 41 123 125 125 59 ,"{'AvgLine': 33, 'CountLine': 72, 'CountStmt': 63, 'MaxNesting': 0, 'AvgLineCode': 32, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 61, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 70, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 32, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 2, 'AltCountLineCode': 70, 'CountLineCodeExe': 61, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99989,C++,"class VRTDerivedRasterBandPrivateData
{
        VRTDerivedRasterBandPrivateData(const VRTDerivedRasterBandPrivateData&) = delete;
        VRTDerivedRasterBandPrivateData& operator= (const VRTDerivedRasterBandPrivateData&) = delete;

    public:
        CPLString m_osCode{};
        CPLString m_osLanguage;
        int       m_nBufferRadius;
        PyObject* m_poGDALCreateNumpyArray;
        PyObject* m_poUserFunction;
        bool      m_bPythonInitializationDone;
        bool      m_bPythonInitializationSuccess;
        bool      m_bExclusiveLock;
        bool      m_bFirstTime;
        std::vector< std::pair<CPLString,CPLString> > m_oFunctionArgs{};

        VRTDerivedRasterBandPrivateData():
            m_osLanguage(""C""),
            m_nBufferRadius(0),
            m_poGDALCreateNumpyArray(nullptr),
            m_poUserFunction(nullptr),
            m_bPythonInitializationDone(false),
            m_bPythonInitializationSuccess(false),
            m_bExclusiveLock(false),
            m_bFirstTime(true)
        {
        }

        virtual ~VRTDerivedRasterBandPrivateData()
        {
            if( m_poGDALCreateNumpyArray )
                Py_DecRef(m_poGDALCreateNumpyArray);
            if( m_poUserFunction )
                Py_DecRef(m_poUserFunction);
        }
};",0,587 2000 123 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 777 58 2001 2002 123 125 59 2001 2003 59 704 2004 59 2005 42 2006 59 2005 42 2007 59 569 2008 59 569 2009 59 569 2010 59 569 2011 59 2012 321 2013 60 2012 321 2014 60 2001 44 2001 62 62 2015 123 125 59 2000 40 41 58 2003 40 362 41 44 2004 40 1500 41 44 2006 40 753 41 44 2007 40 753 41 44 2008 40 655 41 44 2009 40 655 41 44 2010 40 655 41 44 2011 40 829 41 123 125 864 126 2000 40 41 123 688 40 2006 41 2016 40 2006 41 59 688 40 2007 41 2016 40 2007 41 59 125 125 59 ,"{'AvgLine': 9, 'CountLine': 37, 'CountStmt': 24, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 34, 'CountStmtDecl': 19, 'MaxCyclomatic': 3, 'SumCyclomatic': 4, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 34, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 10, 'CountDeclInstanceVariablePublic': 10, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99993,C++,"class GDALEXRPreviewRasterBand final: public GDALPamRasterBand
{
        friend class GDALEXRDataset;

        std::string m_osChannelName;

    protected:
        CPLErr IReadBlock(int, int, void*) override;
        GDALColorInterp GetColorInterpretation() override {
            return static_cast<GDALColorInterp>(GCI_RedBand + nBand - 1); }

    public:
        GDALEXRPreviewRasterBand(GDALEXRDataset* poDSIn, int nBandIn);
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 321 2005 2006 59 775 58 2007 2008 40 704 44 704 44 865 42 41 2009 59 2010 2011 40 41 2009 123 792 811 60 2010 62 40 2012 43 2013 45 1501 41 59 125 777 58 2000 40 2003 42 2014 44 704 2015 41 59 125 59 ,"{'AvgLine': 11, 'CountLine': 47, 'CountStmt': 21, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 43, 'CountStmtDecl': 8, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 43, 'CountLineCodeExe': 14, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 131, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99992,C++,"class GDALEXRIOStreamException final: public std::exception
{
    std::string m_msg;

    public:
        explicit GDALEXRIOStreamException(const std::string& msg): m_msg(msg) {}
        const char* what() const noexcept override { return m_msg.c_str(); }
};",0,587 2000 2001 58 777 2002 321 2003 123 2002 321 2004 2005 59 777 58 648 2000 40 601 2002 321 2004 38 2006 41 58 2005 40 2006 41 123 125 601 582 42 2007 40 41 601 748 2008 123 792 2005 46 2009 40 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100000,C++,"class GDALFakePDFDataset final: public GDALDataset
{
    public:
        GDALFakePDFDataset() = default;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 61 613 59 125 59 ,"{'AvgLine': 0, 'CountLine': 4, 'CountStmt': 0, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 4, 'CountStmtDecl': 0, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 4, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 143, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100012,C++,"class VSISubFileHandle final: public VSIVirtualHandle
{
    CPL_DISALLOW_COPY_ASSIGN(VSISubFileHandle)

  public:
    VSILFILE     *fp = nullptr;
    vsi_l_offset  nSubregionOffset = 0;
    vsi_l_offset  nSubregionSize = 0;
    bool          bAtEOF = false;

    VSISubFileHandle() = default;
    ~VSISubFileHandle() override;

    int Seek( vsi_l_offset nOffset, int nWhence ) override;
    vsi_l_offset Tell() override;
    size_t Read( void *pBuffer, size_t nSize, size_t nMemb ) override;
    size_t Write( const void *pBuffer, size_t nSize, size_t nMemb ) override;
    int Eof() override;
    int Close() override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 777 58 2004 42 2005 61 753 59 2006 2007 61 1500 59 2006 2008 61 1500 59 569 2009 61 655 59 2000 40 41 61 613 59 126 2000 40 41 2010 59 704 2011 40 2006 2012 44 704 2013 41 2010 59 2006 2014 40 41 2010 59 2015 2016 40 865 42 2017 44 2015 2018 44 2015 2019 41 2010 59 2015 2020 40 601 865 42 2017 44 2015 2018 44 2015 2019 41 2010 59 704 2021 40 41 2010 59 704 2022 40 41 2010 59 125 59 ,"{'AvgLine': 18, 'CountLine': 148, 'CountStmt': 65, 'MaxNesting': 2, 'AvgLineCode': 15, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 51, 'MaxEssential': 5, 'SumEssential': 18, 'AvgCyclomatic': 3, 'CountLineCode': 126, 'CountStmtDecl': 20, 'MaxCyclomatic': 6, 'SumCyclomatic': 23, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 10, 'AltCountLineCode': 126, 'CountLineCodeExe': 65, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 27, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 23, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 23, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100021,C++,"class COSARDataset final: public GDALDataset
{
public:
        COSARDataset() : fp(nullptr) { }
        ~COSARDataset();
        VSILFILE *fp;

        static GDALDataset *Open( GDALOpenInfo * );
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 58 2003 40 753 41 123 125 126 2000 40 41 59 2004 42 2003 59 809 2002 42 2005 40 2006 42 41 59 125 59 ,"{'AvgLine': 20, 'CountLine': 70, 'CountStmt': 30, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 2, 'AvgLineBlank': 3, 'CountStmtExe': 24, 'MaxEssential': 5, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 47, 'CountStmtDecl': 7, 'MaxCyclomatic': 5, 'SumCyclomatic': 8, 'AltAvgLineCode': 15, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 3, 'AltCountLineCode': 53, 'CountLineCodeExe': 26, 'CountLineComment': 7, 'AltAvgLineComment': 2, 'AltCountLineBlank': 10, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 145, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.15', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 6, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 40, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100022,C++,"class COSARRasterBand final: public GDALRasterBand
{
    unsigned long nRTNB;

  public:
    COSARRasterBand( COSARDataset *, unsigned long nRTNB );
    CPLErr IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 856 726 2003 59 777 58 2000 40 2004 42 44 856 726 2003 41 59 2005 2006 40 704 44 704 44 865 42 41 2007 59 125 59 ,"{'AvgLine': 33, 'CountLine': 74, 'CountStmt': 26, 'MaxNesting': 1, 'AvgLineCode': 19, 'AvgEssential': 1, 'AvgLineBlank': 5, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 46, 'CountStmtDecl': 8, 'MaxCyclomatic': 4, 'SumCyclomatic': 5, 'AltAvgLineCode': 21, 'AvgLineComment': 6, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 5, 'CountDeclMethod': 2, 'AltCountLineCode': 50, 'CountLineCodeExe': 26, 'CountLineComment': 12, 'AltAvgLineComment': 6, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 96, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.26', 'AltCountLineComment': 12, 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100036,C++,"class MEMAttribute CPL_NON_FINAL: public MEMAbstractMDArray, public GDALAttribute
{
protected:
    MEMAttribute(const std::string& osParentName,
                 const std::string& osName,
                 const std::vector<GUInt64>& anDimensions,
                 const GDALExtendedDataType& oType);
public:
    // May return nullptr as it calls MEMAbstractMDArray::Init() which can
    // fail
    static std::shared_ptr<MEMAttribute> Create(const std::string& osParentName,
                                                const std::string& osName,
                                                const std::vector<GUInt64>& anDimensions,
                                                const GDALExtendedDataType& oType);
};",0,587 2000 2001 58 777 2002 44 777 2003 123 775 58 2000 40 601 2004 321 2005 38 2006 44 601 2004 321 2005 38 2007 44 601 2004 321 2008 60 2009 62 38 2010 44 601 2011 38 2012 41 59 777 58 330 330 809 2004 321 2013 60 2000 62 2014 40 601 2004 321 2005 38 2006 44 601 2004 321 2005 38 2007 44 601 2004 321 2008 60 2009 62 38 2010 44 601 2011 38 2012 41 59 125 59 ,"{'AvgLine': 10, 'CountLine': 36, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 34, 'CountLineCodeExe': 2, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 47, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100048,C++,"class EEDAIBandDesc
{
public:
    CPLString osName{};
    CPLString osWKT{};
    GDALDataType eDT{GDT_Unknown};
    bool      bSignedByte{false};
    std::vector<double> adfGeoTransform{0.0,1.0,0.0,0.0,0.0,1.0};
    int       nWidth{0};
    int       nHeight{0};

    /* Check if it similar enough for being considered as a compatible */
    /* GDAL band in the same dataset */
    bool IsSimilar(const EEDAIBandDesc& oOther) const
    {
        return osWKT == oOther.osWKT &&
               adfGeoTransform == oOther.adfGeoTransform &&
               nWidth == oOther.nWidth &&
               nHeight == oOther.nHeight;
    }
};",0,587 2000 123 777 58 2001 2002 123 125 59 2001 2003 123 125 59 2004 2005 123 2006 125 59 569 2007 123 655 125 59 2008 321 2009 60 625 62 2010 123 1500 44 1501 44 1500 44 1500 44 1500 44 1501 125 59 704 2011 123 1500 125 59 704 2012 123 1500 125 59 305 305 569 2013 40 601 2000 38 2014 41 601 123 792 2003 323 2014 46 2003 307 2010 323 2014 46 2010 307 2011 323 2014 46 2011 307 2012 323 2014 46 2012 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 21, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 18, 'CountLineCodeExe': 0, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 7, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100053,C++,"    class CPCIDSK_LUT : virtual public CPCIDSKSegment,
                        public PCIDSK_LUT
    {
    public:
        CPCIDSK_LUT( PCIDSKFile *file, int segment,const char *segment_pointer);

        virtual     ~CPCIDSK_LUT();

        virtual void ReadLUT(std::vector<unsigned char>& lut) override;
        virtual void WriteLUT(const std::vector<unsigned char>& lut) override;
    };",0,587 2000 58 864 777 2001 44 777 2002 123 777 58 2000 40 2003 42 2004 44 704 2005 44 601 582 42 2006 41 59 864 126 2000 40 41 59 864 865 2007 40 2008 321 2009 60 856 582 62 38 2010 41 2011 59 864 865 2012 40 601 2008 321 2009 60 856 582 62 38 2010 41 2011 59 125 59 ,"{'AvgLine': 11, 'CountLine': 58, 'CountStmt': 20, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 8, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 4, 'AltCountLineCode': 44, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 57, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100057,C++,"class HDF4EOSGridGroup final: public GDALGroup
{
    std::shared_ptr<HDF4SharedResources> m_poShared;
    std::shared_ptr<HDF4GDHandle> m_poGDHandle;
    mutable std::vector<std::shared_ptr<GDALDimension>> m_dims{};
    mutable std::shared_ptr<GDALMDArray> m_varX{};
    mutable std::shared_ptr<GDALMDArray> m_varY{};

public:
    HDF4EOSGridGroup(const std::string& osParentName,
              const std::string& osName,
              const std::shared_ptr<HDF4SharedResources>& poShared,
              const std::shared_ptr<HDF4GDHandle>& poGDHandle):
        GDALGroup(osParentName, osName),
        m_poShared(poShared),
        m_poGDHandle(poGDHandle)
    {
    }
    std::vector<std::shared_ptr<GDALDimension>> GetDimensions(CSLConstList papszOptions = nullptr) const override;

    std::vector<std::string> GetMDArrayNames(CSLConstList papszOptions) const override;
    std::shared_ptr<GDALMDArray> OpenMDArray(const std::string& osName,
                                             CSLConstList papszOptions) const override;

    std::vector<std::string> GetGroupNames(CSLConstList papszOptions) const override;
    std::shared_ptr<GDALGroup> OpenGroup(const std::string& osName, CSLConstList) const override;

    std::vector<std::shared_ptr<GDALAttribute>> GetAttributes(CSLConstList papszOptions = nullptr) const override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 2003 321 2004 60 2007 62 2008 59 740 2003 321 2009 60 2003 321 2004 60 2010 355 2011 123 125 59 740 2003 321 2004 60 2012 62 2013 123 125 59 740 2003 321 2004 60 2012 62 2014 123 125 59 777 58 2000 40 601 2003 321 2015 38 2016 44 601 2003 321 2015 38 2017 44 601 2003 321 2004 60 2005 62 38 2018 44 601 2003 321 2004 60 2007 62 38 2019 41 58 2002 40 2016 44 2017 41 44 2006 40 2018 41 44 2008 40 2019 41 123 125 2003 321 2009 60 2003 321 2004 60 2010 355 2020 40 2021 2022 61 753 41 601 2023 59 2003 321 2009 60 2003 321 2015 62 2024 40 2021 2022 41 601 2023 59 2003 321 2004 60 2012 62 2025 40 601 2003 321 2015 38 2017 44 2021 2022 41 601 2023 59 2003 321 2009 60 2003 321 2015 62 2026 40 2021 2022 41 601 2023 59 2003 321 2004 60 2002 62 2027 40 601 2003 321 2015 38 2017 44 2021 41 601 2023 59 2003 321 2009 60 2003 321 2004 60 2028 355 2029 40 2021 2022 61 753 41 601 2023 59 125 59 ,"{'AvgLine': 23, 'CountLine': 185, 'CountStmt': 46, 'MaxNesting': 2, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 17, 'MaxEssential': 4, 'SumEssential': 10, 'AvgCyclomatic': 2, 'CountLineCode': 143, 'CountStmtDecl': 32, 'MaxCyclomatic': 5, 'SumCyclomatic': 15, 'AltAvgLineCode': 21, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 169, 'CountLineCodeExe': 16, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 29, 'CountLineInactive': 26, 'CountDeclMethodAll': 35, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100062,C++,"class HDF4GRPalette final: public GDALAttribute
{
    std::shared_ptr<HDF4SharedResources> m_poShared;
    std::shared_ptr<HDF4GRHandle> m_poGRHandle;
    std::vector<std::shared_ptr<GDALDimension>> m_dims{};
    GDALExtendedDataType m_dt = GDALExtendedDataType::Create(GDT_Byte);
    int32 m_iPal = 0;
    int32 m_nValues = 0;

protected:

    bool IRead(const GUInt64* arrayStartIdx,
                      const size_t* count,
                      const GInt64* arrayStep,
                      const GPtrDiff_t* bufferStride,
                      const GDALExtendedDataType& bufferDataType,
                      void* pDstBuffer) const override;

public:
    HDF4GRPalette(const std::string& osParentName,
                  const std::string& osName,
                  const std::shared_ptr<HDF4SharedResources>& poShared,
                  const std::shared_ptr<HDF4GRHandle>& poGRHandle,
                  int32 iPal,
                  int32 nValues);

    const std::vector<std::shared_ptr<GDALDimension>>& GetDimensions() const override { return m_dims; }

    const GDALExtendedDataType &GetDataType() const override { return m_dt; }
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 2003 321 2004 60 2007 62 2008 59 2003 321 2009 60 2003 321 2004 60 2010 355 2011 123 125 59 2012 2013 61 2012 321 2014 40 2015 41 59 2016 2017 61 1500 59 2016 2018 61 1500 59 775 58 569 2019 40 601 2020 42 2021 44 601 2022 42 2023 44 601 2024 42 2025 44 601 2026 42 2027 44 601 2012 38 2028 44 865 42 2029 41 601 2030 59 777 58 2000 40 601 2003 321 2031 38 2032 44 601 2003 321 2031 38 2033 44 601 2003 321 2004 60 2005 62 38 2034 44 601 2003 321 2004 60 2007 62 38 2035 44 2016 2036 44 2016 2037 41 59 601 2003 321 2009 60 2003 321 2004 60 2010 355 38 2038 40 41 601 2030 123 792 2011 59 125 601 2012 38 2039 40 41 601 2030 123 792 2013 59 125 125 59 ,"{'AvgLine': 13, 'CountLine': 82, 'CountStmt': 23, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 74, 'CountStmtDecl': 20, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 74, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 24, 'CountLineInactive': 0, 'CountDeclMethodAll': 36, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100065,C++,"class HDF4SDAttribute final: public HDF4AbstractAttribute
{
    std::shared_ptr<HDF4SwathHandle> m_poSwathHandle;
    std::shared_ptr<HDF4GDHandle> m_poGDHandle;
    int32 m_sdHandle = 0;
    int32 m_iAttribute = 0;

public:
    HDF4SDAttribute(const std::string& osParentName,
                  const std::string& osName,
                  const std::shared_ptr<HDF4SharedResources>& poShared,
                  const std::shared_ptr<HDF4SwathHandle>& poSwathHandle,
                  const std::shared_ptr<HDF4GDHandle>& poGDHandle,
                  int32 sdHandle,
                  int32 iAttribute,
                  int32 iNumType,
                  int32 nValues):
        GDALAbstractMDArray(osParentName, osName),
        HDF4AbstractAttribute(osParentName, osName, poShared, iNumType, nValues),
        m_poSwathHandle(poSwathHandle),
        m_poGDHandle(poGDHandle),
        m_sdHandle(sdHandle),
        m_iAttribute(iAttribute)
    {}

    void ReadData(void* pDstBuffer) const override {
        SDreadattr( m_sdHandle, m_iAttribute, pDstBuffer);
    }
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 2003 321 2004 60 2007 62 2008 59 2009 2010 61 1500 59 2009 2011 61 1500 59 777 58 2000 40 601 2003 321 2012 38 2013 44 601 2003 321 2012 38 2014 44 601 2003 321 2004 60 2015 62 38 2016 44 601 2003 321 2004 60 2005 62 38 2017 44 601 2003 321 2004 60 2007 62 38 2018 44 2009 2019 44 2009 2020 44 2009 2021 44 2009 2022 41 58 2023 40 2013 44 2014 41 44 2002 40 2013 44 2014 44 2016 44 2021 44 2022 41 44 2006 40 2017 41 44 2008 40 2018 41 44 2010 40 2019 41 44 2011 40 2020 41 123 125 865 2024 40 865 42 2025 41 601 2026 123 2027 40 2010 44 2011 44 2025 41 59 125 125 59 ,"{'AvgLine': 9, 'CountLine': 29, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 27, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 27, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100246,C++,"class CADVertexPFaceObject final: public CADEntityObject
{
public:
    CADVertexPFaceObject();
    virtual ~CADVertexPFaceObject(){}
    CADVector vertPosition;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 59 125 59 ,"{'AvgLine': 2, 'CountLine': 11, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 11, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100075,C++,"                class XPathDerivedField
                {
                    public:

                        CPLString m_osName;

                        CPLString m_osType;

                        CPLString m_osXPath;
                };",0,587 2000 123 777 58 2001 2002 59 2001 2003 59 2001 2004 59 125 59 ,"{'AvgLine': 0, 'CountLine': 10, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100073,C++,"class HDF4SwathsGroup final: public GDALGroup
{
    std::shared_ptr<HDF4SharedResources> m_poShared;
    std::shared_ptr<HDF4SwathsHandle> m_poSwathsHandle;

public:
    HDF4SwathsGroup(const std::string& osParentName,
              const std::string& osName,
              const std::shared_ptr<HDF4SharedResources>& poShared,
              const std::shared_ptr<HDF4SwathsHandle>& poSwathsHandle):
        GDALGroup(osParentName, osName),
        m_poShared(poShared),
        m_poSwathsHandle(poSwathsHandle)
    {
    }

    std::vector<std::string> GetGroupNames(CSLConstList papszOptions) const override;
    std::shared_ptr<GDALGroup> OpenGroup(const std::string& osName, CSLConstList) const override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 2003 321 2004 60 2007 62 2008 59 777 58 2000 40 601 2003 321 2009 38 2010 44 601 2003 321 2009 38 2011 44 601 2003 321 2004 60 2005 62 38 2012 44 601 2003 321 2004 60 2007 62 38 2013 41 58 2002 40 2010 44 2011 41 44 2006 40 2012 41 44 2008 40 2013 41 123 125 2003 321 2014 60 2003 321 2009 62 2015 40 2016 2017 41 601 2018 59 2003 321 2004 60 2002 62 2019 40 601 2003 321 2009 38 2011 44 2016 41 601 2018 59 125 59 ,"{'AvgLine': 14, 'CountLine': 52, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 3, 'AltCountLineCode': 44, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 31, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100084,C++,"class BAGBaseBand CPL_NON_FINAL: public GDALRasterBand
{
    protected:
        bool        m_bHasNoData = false;
        float       m_fNoDataValue = std::numeric_limits<float>::quiet_NaN();

    public:
        BAGBaseBand() = default;
        ~BAGBaseBand() = default;

        double          GetNoDataValue( int * ) override;

        int GetOverviewCount() override;
        GDALRasterBand* GetOverview(int) override;
};",0,587 2000 2001 58 777 2002 123 775 58 569 2003 61 655 59 660 2004 61 2005 321 2006 60 660 62 321 2007 40 41 59 777 58 2000 40 41 61 613 59 126 2000 40 41 61 613 59 625 2008 40 704 42 41 2009 59 704 2010 40 41 2009 59 2002 42 2011 40 704 41 2009 59 125 59 ,"{'AvgLine': 7, 'CountLine': 36, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 30, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 30, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 99, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
100095,C++,"    class PCIDSKPolySegment
    {
    public:
        //Get the coefficients
        virtual std::vector<double> GetXForwardCoefficients() const=0;
        virtual std::vector<double> GetYForwardCoefficients() const=0;
        virtual std::vector<double> GetXBackwardCoefficients() const=0;
        virtual std::vector<double> GetYBackwardCoefficients() const=0;

        //Set the coefficients
        virtual void SetCoefficients(const std::vector<double>& oXForward,
                                     const std::vector<double>& oYForward,
                                     const std::vector<double>& oXBackward,
                                     const std::vector<double>& oYBackward) =0;

        // Get the number of lines
        virtual unsigned int GetLines() const=0;
        // Get the number of pixels
        virtual unsigned int GetPixels() const=0;
        // Set the number of lines/pixels
        virtual void SetRasterSize(unsigned int nLines,unsigned int nPixels) =0;

        // Get the Geosys String
        virtual std::string GetGeosysString() const=0;
        // Set the Geosys string
        virtual void SetGeosysString(const std::string& oGeosys) =0;

        //Get the projection information
        virtual std::vector<double> GetProjParamInfo() const=0;
        //Set the projection information
        virtual void SetProjParamInfo(const std::vector<double>& oInfo) =0;

        // Virtual destructor
        virtual ~PCIDSKPolySegment() {}
    };",0,587 2000 123 777 58 330 864 2001 321 2002 60 625 62 2003 40 41 601 61 1500 59 864 2001 321 2002 60 625 62 2004 40 41 601 61 1500 59 864 2001 321 2002 60 625 62 2005 40 41 601 61 1500 59 864 2001 321 2002 60 625 62 2006 40 41 601 61 1500 59 330 864 865 2007 40 601 2001 321 2002 60 625 62 38 2008 44 601 2001 321 2002 60 625 62 38 2009 44 601 2001 321 2002 60 625 62 38 2010 44 601 2001 321 2002 60 625 62 38 2011 41 61 1500 59 330 864 856 704 2012 40 41 601 61 1500 59 330 864 856 704 2013 40 41 601 61 1500 59 330 864 865 2014 40 856 704 2015 44 856 704 2016 41 61 1500 59 330 864 2001 321 2017 2018 40 41 601 61 1500 59 330 864 865 2019 40 601 2001 321 2017 38 2020 41 61 1500 59 330 864 2001 321 2002 60 625 62 2021 40 41 601 61 1500 59 330 864 865 2022 40 601 2001 321 2002 60 625 62 38 2023 41 61 1500 59 330 864 126 2000 40 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 35, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 13, 'AltCountLineCode': 20, 'CountLineCodeExe': 0, 'CountLineComment': 10, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.50', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 8, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100102,C++,"class OGRDXFFeatureQueue
{
        std::queue<OGRDXFFeature *> apoFeatures;

    public:
        OGRDXFFeatureQueue() {}

        void                push( OGRDXFFeature* poFeature );

        OGRDXFFeature*      front() const { return apoFeatures.front(); }

        void                pop();

        bool empty() const { return apoFeatures.empty(); }

        size_t size() const { return apoFeatures.size(); }
};",0,587 2000 123 2001 321 2002 60 2003 42 62 2004 59 777 58 2000 40 41 123 125 865 2005 40 2003 42 2006 41 59 2003 42 2007 40 41 601 123 792 2004 46 2007 40 41 59 125 865 2008 40 41 59 569 2009 40 41 601 123 792 2004 46 2009 40 41 59 125 2010 2011 40 41 601 123 792 2004 46 2011 40 41 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 26, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 20, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100110,C++,"class SENTINEL2_CPLXMLNodeHolder
{
    CPLXMLNode* m_psNode;
    public:
        explicit SENTINEL2_CPLXMLNodeHolder(CPLXMLNode* psNode) : m_psNode(psNode) {}
       ~SENTINEL2_CPLXMLNodeHolder() { if(m_psNode) CPLDestroyXMLNode(m_psNode); }

       CPLXMLNode* Release() {
           CPLXMLNode* psRet = m_psNode;
           m_psNode = nullptr;
           return psRet;
       }
};",0,587 2000 123 2001 42 2002 59 777 58 648 2000 40 2001 42 2003 41 58 2002 40 2003 41 123 125 126 2000 40 41 123 688 40 2002 41 2004 40 2002 41 59 125 2001 42 2005 40 41 123 2001 42 2006 61 2002 59 2002 61 753 59 792 2006 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 13, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 12, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 25, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100114,C++,"template<typename T = unsigned long long> class BitMap2D {
public:
    // Initialized to all bits set
    BitMap2D(unsigned int width, unsigned int height) : _w(width), _h(height)
    {
        // Prevent creation of bitmasks using any other types

        // Uncomment these statements to enforce only 64 and 16 bit units
        // They work but generate warnings on some compilers
        // Is_Same<T, unsigned long long>::type a;
        // Is_Same<T, unsigned short>::type b;
        // if (!(a.value || b.value))
        //   throw std::out_of_range(""Only bitmap units of unsigned 16 and 64 bits work"");

        // Precalculate row size in storage units, for speed
        _lw = Chunks<TGSIZE>(_w);
        // Defaults to all set
        init(~(T)0);
#if defined(PACKER)
        _packer = nullptr;
#endif
    }

    int getWidth() const { return _w; }
    int getHeight() const { return _h; }

    // Size in bytes
    size_t size() const {
        return _bits.size() * sizeof(T); 
    }

    // Returns the condition of a specific bit
    bool isSet(int x, int y) const {
        return 0 != (_bits[_idx(x, y)] & _bitmask(x, y));
    }

    void set(int x, int y) {
        _bits[_idx(x, y)] |= _bitmask(x, y);
    }

    void clear(int x, int y) {
        _bits[_idx(x, y)] &= ~_bitmask(x, y);
    }

    // Set a location bit to true or false
    void assign(int x, int y, bool val = true) {
        if (val) set(x,y);
        else clear(x,y);
    }

    // Flip a bit
    void flip(int x, int y) {
        _bits[_idx(x, y)] ^= _bitmask(x, y);
    }

    // Set all units to same bit pattern by unit
    // Use init(~(T)0)) for all set
    void init(T val) {
        _bits.assign(Chunks<TGSIZE>(_w) * Chunks<TGSIZE>(_h), val);
    }

 // Support for store and load
#if defined(PACKER)

    void set_packer(Packer *packer) { _packer = packer; }

    int store(storage_manager *dst) {
        int result;
        storage_manager src = { reinterpret_cast<char *>(&_bits[0]), size() };
        // Store the bytes in little endian format
        swab();
        if (_packer)
            result = _packer->store(&src, dst);
        else
            result = Packer().store(&src, dst);
        swab();
        return result;
    }

    int load(storage_manager *src) {
        int result;
        storage_manager dst = { reinterpret_cast<char *>(&_bits[0]), size() };
        if (_packer)
            result = _packer->load(src, &dst);
        else
            result = Packer().load(src, &dst);
        swab();
        return result;
    }
#endif

private:
    // unit index
    unsigned int _idx(int x, int y) const {
        return  _lw * (y / TGSIZE) + x / TGSIZE;
    }

    // one bit mask within a unit
    static T _bitmask(int x, int y) {
        return static_cast<T>(1) << (TGSIZE * (y % TGSIZE) + x % TGSIZE);
    }

#if defined(PACKER)
// Swap bytes of storage units within the bitmap to low endian
#if defined(CPL_LSB)
    static void swab() {}
#else
    void swab() {
        for (size_t i = 0; i < _bits.size(); i++)
        {
            if (sizeof(T) == sizeof(GUIntBig))
            {
                CPL_SWAP64PTR(reinterpret_cast<GUIntBig *>(&_bits[i]));
            }
            else
            {
                CPL_SWAP16PTR(reinterpret_cast<GUInt16 *> (&_bits[i]));
            }
        }
    }
#endif

    // Class that provides export and import capabilities, not owned
    Packer *_packer;
#endif

    // bit storage vector
    std::vector<T> _bits;
    // width and height of bitmap
    unsigned int _w, _h;
    // Line size in linear chunks
    unsigned int _lw;
};",0,822 60 835 2000 61 856 726 726 62 587 2001 123 777 58 330 2001 40 856 704 2002 44 856 704 2003 41 58 2004 40 2002 41 44 2005 40 2003 41 123 330 330 330 330 330 330 330 330 2006 61 2007 60 2008 62 40 2004 41 59 330 2009 40 126 40 2000 41 1500 41 59 35 688 2010 40 2011 41 2012 61 753 59 35 636 125 704 2013 40 41 601 123 792 2004 59 125 704 2014 40 41 601 123 792 2005 59 125 330 2015 2016 40 41 601 123 792 2017 46 2016 40 41 42 805 40 2000 41 59 125 330 569 2018 40 704 2019 44 704 2020 41 601 123 792 1500 340 40 2021 91 2022 40 2019 44 2020 41 93 38 2023 40 2019 44 2020 41 41 59 125 865 2024 40 704 2019 44 704 2020 41 123 2025 91 2026 40 2019 44 2020 41 93 347 2027 40 2019 44 2020 41 59 125 865 2028 40 704 2019 44 704 2020 41 123 2029 91 2030 40 2019 44 2020 41 93 301 126 2031 40 2019 44 2020 41 59 125 330 865 2032 40 704 2019 44 704 2020 44 569 2033 61 829 41 123 688 40 2033 41 2024 40 2019 44 2020 41 59 630 2028 40 2019 44 2020 41 59 125 330 865 2034 40 704 2019 44 704 2020 41 123 2035 91 2036 40 2019 44 2020 41 93 366 2037 40 2019 44 2020 41 59 125 330 330 865 2038 40 2000 2033 41 123 2039 46 2032 40 2040 60 2041 62 40 2004 41 42 2040 60 2041 62 40 2005 41 44 2033 41 59 125 330 35 688 2042 40 2043 41 865 2044 40 2045 42 2046 41 123 2047 61 2046 59 125 704 2048 40 2049 42 2050 41 123 704 2051 59 2049 2052 61 123 786 60 582 42 62 40 38 2053 91 1500 93 41 44 2016 40 41 125 59 330 2054 40 41 59 688 40 2055 41 2051 61 2055 354 2048 40 38 2052 44 2050 41 59 630 2051 61 2045 40 41 46 2048 40 38 2052 44 2050 41 59 2054 40 41 59 792 2051 59 125 704 2056 40 2049 42 2057 41 123 704 2058 59 2049 2050 61 123 786 60 582 42 62 40 38 2059 91 1500 93 41 44 2016 40 41 125 59 688 40 2060 41 2058 61 2060 354 2056 40 2057 44 38 2050 41 59 630 2058 61 2045 40 41 46 2056 40 2057 44 38 2050 41 59 2061 40 41 59 792 2058 59 125 35 636 773 58 330 856 704 2062 40 704 2019 44 704 2020 41 601 123 792 2063 42 40 2020 47 2064 41 43 2019 47 2064 59 125 330 809 2000 2065 40 704 2019 44 704 2020 41 123 792 811 60 2000 62 40 1501 41 332 40 2066 42 40 2020 37 2066 41 43 2019 37 2066 41 59 125 35 688 2042 40 2043 41 330 35 688 2042 40 2067 41 809 865 2068 40 41 123 125 35 630 865 2068 40 41 123 664 40 2015 2069 61 1500 59 2069 60 2070 46 2016 40 41 59 2069 349 41 123 688 40 805 40 2000 41 323 805 40 2071 41 41 123 2072 40 786 60 2071 42 62 40 38 2070 91 2069 93 41 41 59 125 630 123 2073 40 786 60 2074 42 62 40 38 2070 91 2069 93 41 41 59 125 125 125 35 636 330 2045 42 2075 59 35 636 330 2076 321 2077 60 2000 62 2078 59 330 856 704 2004 44 2005 59 330 856 704 2079 59 125 59 ,"{'AvgLine': 4, 'CountLine': 133, 'CountStmt': 46, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 19, 'MaxEssential': 1, 'SumEssential': 16, 'AvgCyclomatic': 1, 'CountLineCode': 67, 'CountStmtDecl': 27, 'MaxCyclomatic': 2, 'SumCyclomatic': 19, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 19, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 16, 'AltCountLineCode': 89, 'CountLineCodeExe': 22, 'CountLineComment': 25, 'AltAvgLineComment': 0, 'AltCountLineBlank': 19, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 21, 'CountLineInactive': 13, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.37', 'AltCountLineComment': 25, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 9, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
100126,C++,"class OGRFlatGeobufBaseLayerInterface CPL_NON_FINAL
{
    public:
        virtual ~OGRFlatGeobufBaseLayerInterface();

        virtual const std::string& GetFilename() const = 0;
        virtual OGRLayer* GetLayer() = 0;
};",0,587 2000 2001 123 777 58 864 126 2000 40 41 59 864 601 2002 321 2003 38 2004 40 41 601 61 1500 59 864 2005 42 2006 40 41 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 8, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100138,C++,"class COASPMetadataGeorefGridItem : public COASPMetadataItem
{
#ifdef unused
        int nId;
        int nPixels;
        int nLines;
        double ndLat;
        double ndLong;
#endif

public:
        COASPMetadataGeorefGridItem( int nId, int nPixels, int nLines,
                                     double ndLat, double ndLong );
        static const char *GetItemName() { return ""georef_grid""; }
        GDAL_GCP *GetItemValue();
        static int GetType() { return TYPE_GEOREF; }
};",0,587 2000 58 777 2001 123 35 689 2002 704 2003 59 704 2004 59 704 2005 59 625 2006 59 625 2007 59 35 636 777 58 2000 40 704 2003 44 704 2004 44 704 2005 44 625 2006 44 625 2007 41 59 809 601 582 42 2008 40 41 123 792 362 59 125 2009 42 2010 40 41 59 809 704 2011 40 41 123 792 2012 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 35, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 34, 'CountLineCodeExe': 4, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 11, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100135,C++,"class MFFSpheroidList : public SpheroidList
{
public:
  MFFSpheroidList();
  ~MFFSpheroidList() {}
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 126 2000 40 41 123 125 125 59 ,"{'AvgLine': 13, 'CountLine': 32, 'CountStmt': 23, 'MaxNesting': 0, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 21, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 30, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 2, 'AltCountLineCode': 30, 'CountLineCodeExe': 21, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100144,C++,"class GDALError
{
  public:
      CPLErr            m_eErr;
      CPLErrorNum       m_errNum;
      CPLString         m_osMsg;

      GDALError( CPLErr eErr = CE_None, CPLErrorNum errNum= CPLE_None,
                 const char * pszMsg = """" ) :
          m_eErr(eErr), m_errNum(errNum), m_osMsg(pszMsg ? pszMsg : """")
      {
      }
};",0,587 2000 123 777 58 2001 2002 59 2003 2004 59 2005 2006 59 2000 40 2001 2007 61 2008 44 2003 2009 61 2010 44 601 582 42 2011 61 362 41 58 2002 40 2007 41 44 2004 40 2009 41 44 2006 40 2011 63 2011 58 362 41 123 125 125 59 ,"{'AvgLine': 5, 'CountLine': 13, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 12, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100176,C++,"class OCAD_EXTERN CADDictionaryRecord
{
public:
    CADDictionaryRecord();
    virtual ~CADDictionaryRecord(){}

    CADObject::ObjectType getType() const;

protected:
    CADObject::ObjectType objType;
};",0,587 2000 2001 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 2002 321 2003 2004 40 41 601 59 775 58 2002 321 2003 2005 59 125 59 ,"{'AvgLine': 3, 'CountLine': 19, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 17, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
100177,C++,"class OCAD_EXTERN CADXRecord : public CADDictionaryRecord
{
public:
    CADXRecord();
    virtual ~CADXRecord(){}

    const std::string getRecordData() const;
    void              setRecordData( const std::string& data );

private:
    std::string sRecordData;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 601 2003 321 2004 2005 40 41 601 59 865 2006 40 601 2003 321 2004 38 2007 41 59 773 58 2003 321 2004 2008 59 125 59 ,"{'AvgLine': 3, 'CountLine': 24, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 22, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 22, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100161,C++,"class OGRGenSQLGeomFieldDefn final: public OGRGeomFieldDefn
{
    public:
        explicit OGRGenSQLGeomFieldDefn(OGRGeomFieldDefn* poGeomFieldDefn) :
            OGRGeomFieldDefn(poGeomFieldDefn->GetNameRef(),
                             poGeomFieldDefn->GetType()), bForceGeomType(FALSE)
        {
            SetSpatialRef(poGeomFieldDefn->GetSpatialRef());
        }

        int bForceGeomType;
};",0,587 2000 2001 58 777 2002 123 777 58 648 2000 40 2002 42 2003 41 58 2002 40 2003 354 2004 40 41 44 2003 354 2005 40 41 41 44 2006 40 2007 41 123 2008 40 2003 354 2009 40 41 41 59 125 704 2006 59 125 59 ,"{'AvgLine': 6, 'CountLine': 12, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 11, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100168,C++,"        class CPL_DLL Iterator
        {
                struct Private;
                std::unique_ptr<Private> m_poPrivate;
            public:

                using value_type = OGRLayer*; /**< value_type */
                using reference = OGRLayer*; /**< reference */
                using difference_type = void; /**< difference_type */
                using pointer = void; /**< pointer */
                using iterator_category = std::input_iterator_tag; /**< iterator_category */

                Iterator(); /**< Default constructor */
                Iterator(GDALDataset* poDS, bool bStart);  /**< Constructor */
                Iterator(const Iterator& oOther);  /**< Copy constructor */
                Iterator(Iterator&& oOther) noexcept;  /**< Move constructor */
                ~Iterator(); /**< Destructor */

                Iterator& operator=(const Iterator& oOther);  /**< Assignment operator */
                Iterator& operator=(Iterator&& oOther) noexcept; /**< Move assignment operator */

                OGRLayer* operator*() const; /**< Dereference operator */
                Iterator& operator++(); /**< Pre-increment operator */
                Iterator operator++(int); /**< Post-increment operator */
                bool operator!=(const Iterator& it) const; /**< Difference comparison operator */
        };",0,587 2000 2001 123 816 2002 59 2003 321 2004 60 2002 62 2005 59 777 58 860 2006 61 2007 42 59 306 860 2008 61 2007 42 59 306 860 2009 61 865 59 306 860 2010 61 865 59 306 860 2011 61 2003 321 2012 59 306 2001 40 41 59 306 2001 40 2013 42 2014 44 569 2015 41 59 306 2001 40 601 2001 38 2016 41 59 306 2001 40 2001 307 2016 41 748 59 306 126 2001 40 41 59 306 2001 38 758 61 40 601 2001 38 2016 41 59 306 2001 38 758 61 40 2001 307 2016 41 748 59 306 2007 42 758 42 40 41 601 59 306 2001 38 758 349 40 41 59 306 2001 758 349 40 704 41 59 306 569 758 340 40 601 2001 38 2017 41 601 59 306 125 59 ,"{'AvgLine': 6, 'CountLine': 99, 'CountStmt': 30, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 95, 'CountStmtDecl': 23, 'MaxCyclomatic': 2, 'SumCyclomatic': 12, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 95, 'CountLineCodeExe': 9, 'CountLineComment': 16, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.17', 'AltCountLineComment': 16, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100167,C++,"        class CPL_DLL Iterator
        {
                struct Private;
                std::unique_ptr<Private> m_poPrivate;
            public:
                Iterator(GDALDataset* poDS, bool bStart);
                Iterator(const Iterator& oOther); // declared but not defined. Needed for gcc 5.4 at least
                Iterator(Iterator&& oOther) noexcept; // declared but not defined. Needed for gcc 5.4 at least
                ~Iterator();
                const FeatureLayerPair& operator*() const;
                Iterator& operator++();
                bool operator!=(const Iterator& it) const;
        };",0,587 2000 2001 123 816 2002 59 2003 321 2004 60 2002 62 2005 59 777 58 2001 40 2006 42 2007 44 569 2008 41 59 2001 40 601 2001 38 2009 41 59 330 2001 40 2001 307 2009 41 748 59 330 126 2001 40 41 59 601 2010 38 758 42 40 41 601 59 2001 38 758 349 40 41 59 569 758 340 40 601 2001 38 2011 41 601 59 125 59 ,"{'AvgLine': 7, 'CountLine': 43, 'CountStmt': 12, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 43, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 43, 'CountLineCodeExe': 3, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100172,C++,"class GFSTemplateList
{
  private:
    bool            m_bSequentialLayers;
    GFSTemplateItem *pFirst;
    GFSTemplateItem *pLast;
    GFSTemplateItem *Insert( const char *pszName );

  public:
                    GFSTemplateList();
                    ~GFSTemplateList();
    void            Update( const char *pszName, int bHasGeom );
    GFSTemplateItem *GetFirst() { return pFirst; }
    bool            HaveSequentialLayers() { return m_bSequentialLayers; }
    int             GetClassCount();
};",0,587 2000 123 773 58 569 2001 59 2002 42 2003 59 2002 42 2004 59 2002 42 2005 40 601 582 42 2006 41 59 777 58 2000 40 41 59 126 2000 40 41 59 865 2007 40 601 582 42 2006 44 704 2008 41 59 2002 42 2009 40 41 123 792 2003 59 125 569 2010 40 41 123 792 2001 59 125 704 2011 40 41 59 125 59 ,"{'AvgLine': 10, 'CountLine': 90, 'CountStmt': 50, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 33, 'MaxEssential': 5, 'SumEssential': 11, 'AvgCyclomatic': 2, 'CountLineCode': 79, 'CountStmtDecl': 19, 'MaxCyclomatic': 5, 'SumCyclomatic': 15, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 79, 'CountLineCodeExe': 38, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
100181,C++,"class FileGDBOGRLinearRing: public OGRLinearRing
{
    public:
        FileGDBOGRLinearRing() {}

        OGRRawPoint * GetPoints() const { return paoPoints; }
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 123 125 2002 42 2003 40 41 601 123 792 2004 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 7, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 6, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 320, 'MaxInheritanceTree': 5, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100189,C++,"class ZMultiPointSetter
{
        OGRMultiPoint* poMPoint;
    public:
        explicit ZMultiPointSetter(OGRMultiPoint* poMPointIn) :
                                                    poMPoint(poMPointIn) {}

        void set(int i, double dfZ)
        {
            poMPoint->getGeometryRef(i)->setZ(dfZ);
        }
};",0,587 2000 123 2001 42 2002 59 777 58 648 2000 40 2001 42 2003 41 58 2002 40 2003 41 123 125 865 2004 40 704 2005 44 625 2006 41 123 2002 354 2007 40 2005 41 354 2008 40 2006 41 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 12, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 11, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100188,C++,"class ZLineStringSetter
{
        OGRLineString* poLS;
    public:
        explicit ZLineStringSetter(OGRLineString* poLSIn) : poLS(poLSIn) {}

        void set(int i, double dfZ)
        {
            poLS->setZ(i, dfZ);
        }
};",0,587 2000 123 2001 42 2002 59 777 58 648 2000 40 2001 42 2003 41 58 2002 40 2003 41 123 125 865 2004 40 704 2005 44 625 2006 41 123 2002 354 2007 40 2005 44 2006 41 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 11, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 10, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100193,C++,"class FASTRasterBand final: public RawRasterBand
{
    friend class FASTDataset;

    CPL_DISALLOW_COPY_ASSIGN(FASTRasterBand)

  public:
                FASTRasterBand( FASTDataset *, int, VSILFILE *, vsi_l_offset,
                                int, int, GDALDataType, int );
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 40 2000 41 777 58 2000 40 2003 42 44 704 44 2005 42 44 2006 44 704 44 704 44 2007 44 704 41 59 125 59 ,"{'AvgLine': 8, 'CountLine': 18, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 16, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 16, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 171, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100201,C++,"class CADAttdefObject final: public CADAttribObject
{
public:
    CADAttdefObject();
    virtual ~CADAttdefObject(){}
    std::string sPrompt;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 321 2004 2005 59 125 59 ,"{'AvgLine': 2, 'CountLine': 11, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 11, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100207,C++,"class CADCircleObject final: public CADEntityObject
{
public:
    CADCircleObject();
    virtual ~CADCircleObject(){}
    CADVector vertPosition;
    double    dfRadius;
    double    dfThickness;
    CADVector vectExtrusion;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 59 625 2005 59 625 2006 59 2003 2007 59 125 59 ,"{'AvgLine': 3, 'CountLine': 16, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 16, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 16, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100206,C++,"class CADBlockObject final: public CADEntityObject
{
public:
    CADBlockObject();
    virtual ~CADBlockObject(){}
    std::string sBlockName;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 321 2004 2005 59 125 59 ,"{'AvgLine': 2, 'CountLine': 11, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 11, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100210,C++,"class CADDimensionAngular2LnObject final: public CADDimensionAngular3PtObject
{
public:
    CADDimensionAngular2LnObject();
    virtual ~CADDimensionAngular2LnObject(){}

    CADVector vert16pt;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 59 125 59 ,"{'AvgLine': 2, 'CountLine': 12, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 11, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100212,C++,"class CADDimensionDiameterObject final: public CADDimensionRadiusObject
{
public:
    CADDimensionDiameterObject();
    virtual ~CADDimensionDiameterObject(){}
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 125 59 ,"{'AvgLine': 2, 'CountLine': 10, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 10, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100214,C++,"class CADDimensionObject CPL_NON_FINAL: public CADEntityObject
{
public:
    explicit CADDimensionObject( ObjectType typeIn ) : CADEntityObject(typeIn) {}
    virtual ~CADDimensionObject(){}
    CADCommonDimensionData cdd;
    CADVector              vert10pt;
    CADHandle              hDimstyle;
    CADHandle              hAnonymousBlock;
};",0,587 2000 2001 58 777 2002 123 777 58 648 2000 40 2003 2004 41 58 2002 40 2004 41 123 125 864 126 2000 40 41 123 125 2005 2006 59 2007 2008 59 2009 2010 59 2009 2011 59 125 59 ,"{'AvgLine': 1, 'CountLine': 10, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 10, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 3, 'CountClassDerived': 5, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100215,C++,"class CADDimensionOrdinateObject final: public CADDimensionObject
{
public:
    CADDimensionOrdinateObject();
    virtual ~CADDimensionOrdinateObject(){}
    CADVector     vert13pt, vert14pt;
    unsigned char Flags2;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 44 2005 59 856 582 2006 59 125 59 ,"{'AvgLine': 3, 'CountLine': 13, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 13, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100218,C++,"class CADEndblkObject final: public CADEntityObject
{
public:
    CADEndblkObject();
    virtual ~CADEndblkObject(){}
    // it actually has nothing more than CED and CEHD.
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 330 125 59 ,"{'AvgLine': 2, 'CountLine': 11, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 10, 'CountLineCodeExe': 1, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100221,C++,"class CADImageDefReactorObject CPL_NON_FINAL: public CADBaseControlObject
{
public:
    explicit CADImageDefReactorObject(ObjectType typeIn = IMAGEDEFREACTOR);
    virtual ~CADImageDefReactorObject(){}

    long              dClassVersion;
    CADHandle         hParentHandle;
    std::vector<CADHandle> hReactors;
    CADHandle         hXDictionary;
};",0,587 2000 2001 58 777 2002 123 777 58 648 2000 40 2003 2004 61 2005 41 59 864 126 2000 40 41 123 125 726 2006 59 2007 2008 59 2009 321 2010 60 2007 62 2011 59 2007 2012 59 125 59 ,"{'AvgLine': 3, 'CountLine': 16, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 15, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 1, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100238,C++,"class CADSeqendObject final: public CADEntityObject
{
public:
    CADSeqendObject();
    virtual ~CADSeqendObject(){}
    // it actually has nothing more than CED and CEHD.
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 330 125 59 ,"{'AvgLine': 2, 'CountLine': 11, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 10, 'CountLineCodeExe': 1, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100225,C++,"class CADLayerControlObject final: public CADBaseControlObject
{
public:
    CADLayerControlObject();
    virtual ~CADLayerControlObject(){}

    long           nNumEntries; // counts layer ""0""
    CADHandle      hNull;
    CADHandle      hXDictionary;
    CADHandleArray hLayers;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 726 2003 59 330 2004 2005 59 2004 2006 59 2007 2008 59 125 59 ,"{'AvgLine': 3, 'CountLine': 16, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 15, 'CountLineCodeExe': 3, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100228,C++,"class CADLineTypeControlObject final: public CADBaseControlObject
{
public:
    CADLineTypeControlObject();
    virtual ~CADLineTypeControlObject(){}

    long           nNumEntries; // doesn't count BYBLOCK / BYLAYER.
    CADHandle      hNull;
    CADHandle      hXDictionary;
    CADHandleArray hLTypes;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 726 2003 59 330 2004 2005 59 2004 2006 59 2007 2008 59 125 59 ,"{'AvgLine': 3, 'CountLine': 16, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 15, 'CountLineCodeExe': 3, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100239,C++,"class CADSolidObject final: public CADEntityObject
{
public:
    CADSolidObject();
    virtual ~CADSolidObject(){}

    double            dfThickness;
    double            dfElevation;
    std::vector<CADVector> avertCorners;
    CADVector         vectExtrusion;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 625 2003 59 625 2004 59 2005 321 2006 60 2007 62 2008 59 2007 2009 59 125 59 ,"{'AvgLine': 4, 'CountLine': 18, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 17, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100237,C++,"class CADRayObject final: public CADEntityObject
{
public:
    CADRayObject();
    virtual ~CADRayObject(){}

    CADVector vertPosition;
    CADVector vectVector;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 59 2003 2005 59 125 59 ,"{'AvgLine': 2, 'CountLine': 13, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 12, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100235,C++,"class CADPolyline3DObject final: public CADEntityObject
{
public:
    CADPolyline3DObject();
    virtual ~CADPolyline3DObject(){}
    unsigned char SplinedFlags;
    unsigned char ClosedFlags;

    long nObjectsOwned;

    CADHandleArray hVertices; // content really depends on DWG version.

    CADHandle hSeqend;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 856 582 2003 59 856 582 2004 59 726 2005 59 2006 2007 59 330 2008 2009 59 125 59 ,"{'AvgLine': 4, 'CountLine': 21, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 18, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100251,C++,"class GMLASPrefixMappingHander: public DefaultHandler
{
        std::map<CPLString, CPLString>& m_oMapURIToPrefix;
        const std::map<CPLString, CPLString>& m_oMapDocNSURIToPrefix;
        CPLString& m_osGMLVersionFound;

  public:
        GMLASPrefixMappingHander(
                        std::map<CPLString, CPLString>& oMapURIToPrefix,
                        const std::map<CPLString, CPLString>& oMapDocNSURIToPrefix,
                        CPLString& osGMLVersionFound) :
            m_oMapURIToPrefix( oMapURIToPrefix ),
            m_oMapDocNSURIToPrefix( oMapDocNSURIToPrefix ),
            m_osGMLVersionFound( osGMLVersionFound )
        {}

        virtual void startElement(
            const   XMLCh* const    uri,
            const   XMLCh* const    localname,
            const   XMLCh* const    qname,
            const   Attributes& attrs) override;

        virtual void startPrefixMapping(const XMLCh* const prefix,
                                        const XMLCh* const uri) override;
};",0,587 2000 58 777 2001 123 2002 321 2003 60 2004 44 2004 62 38 2005 59 601 2002 321 2003 60 2004 44 2004 62 38 2006 59 2004 38 2007 59 777 58 2000 40 2002 321 2003 60 2004 44 2004 62 38 2008 44 601 2002 321 2003 60 2004 44 2004 62 38 2009 44 2004 38 2010 41 58 2005 40 2008 41 44 2006 40 2009 41 44 2007 40 2010 41 123 125 864 865 2011 40 601 2012 42 601 2013 44 601 2012 42 601 2014 44 601 2012 42 601 2015 44 601 2016 38 2017 41 2018 59 864 865 2019 40 601 2012 42 601 2020 44 601 2012 42 601 2013 41 2018 59 125 59 ,"{'AvgLine': 23, 'CountLine': 88, 'CountStmt': 28, 'MaxNesting': 2, 'AvgLineCode': 23, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 3, 'CountLineCode': 84, 'CountStmtDecl': 17, 'MaxCyclomatic': 6, 'SumCyclomatic': 11, 'AltAvgLineCode': 23, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 84, 'CountLineCodeExe': 13, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100253,C++,"class CropableMG4PointReader : public MG4PointReader
{
   CONCRETE_OBJECT(CropableMG4PointReader);
   void init (IO *io, Bounds *bounds)
   {
      MG4PointReader::init(io);
      if (bounds != nullptr)
         setBounds(*bounds);
   }
};",0,587 2000 58 777 2001 123 2002 40 2000 41 59 865 2003 40 2004 42 2005 44 2006 42 2007 41 123 2001 321 2003 40 2005 41 59 688 40 2007 340 753 41 2008 40 42 2007 41 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 12, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 12, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100262,C++,"class VSIStdoutHandle final : public VSIVirtualHandle
{
    CPL_DISALLOW_COPY_ASSIGN(VSIStdoutHandle)

    vsi_l_offset      m_nOffset = 0;

  public:
    VSIStdoutHandle() = default;
    ~VSIStdoutHandle() override = default;

    int Seek( vsi_l_offset nOffset, int nWhence ) override;
    vsi_l_offset Tell() override;
    size_t Read( void *pBuffer, size_t nSize, size_t nMemb ) override;
    size_t Write( const void *pBuffer, size_t nSize, size_t nMemb ) override;
    int Eof() override;
    int Flush() override;
    int Close() override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 2004 2005 61 1500 59 777 58 2000 40 41 61 613 59 126 2000 40 41 2006 61 613 59 704 2007 40 2004 2008 44 704 2009 41 2006 59 2004 2010 40 41 2006 59 2011 2012 40 865 42 2013 44 2011 2014 44 2011 2015 41 2006 59 2011 2016 40 601 865 42 2013 44 2011 2014 44 2011 2015 41 2006 59 704 2017 40 41 2006 59 704 2018 40 41 2006 59 704 2019 40 41 2006 59 125 59 ,"{'AvgLine': 6, 'CountLine': 63, 'CountStmt': 25, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 16, 'MaxEssential': 3, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 55, 'CountStmtDecl': 9, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 55, 'CountLineCodeExe': 18, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 23, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100266,C++,"template <class Iterator>
class Range
{
public:
    Range( Iterator b, Iterator e ) : begin_( b ), end_( e ) {}
    Iterator begin() const { return begin_; }
    Iterator end() const { return end_; }
private:
    Iterator begin_;
    Iterator end_;
};",0,822 60 587 2000 62 587 2001 123 777 58 2001 40 2000 2002 44 2000 2003 41 58 2004 40 2002 41 44 2005 40 2003 41 123 125 2000 2006 40 41 601 123 792 2004 59 125 2000 2007 40 41 601 123 792 2005 59 125 773 58 2000 2004 59 2000 2005 59 125 59 ,"{'AvgLine': 1, 'CountLine': 10, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 10, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100264,C++,"class VSIStdoutRedirectHandle final : public VSIVirtualHandle
{
    VSIVirtualHandle* m_poHandle = nullptr;

    CPL_DISALLOW_COPY_ASSIGN(VSIStdoutRedirectHandle)

  public:
    explicit VSIStdoutRedirectHandle( VSIVirtualHandle* poHandle );
    ~VSIStdoutRedirectHandle() override;

    int Seek( vsi_l_offset nOffset, int nWhence ) override;
    vsi_l_offset Tell() override;
    size_t Read( void *pBuffer, size_t nSize, size_t nMemb ) override;
    size_t Write( const void *pBuffer, size_t nSize, size_t nMemb ) override;
    int Eof() override;
    int Flush() override;
    int Close() override;
};",0,587 2000 2001 58 777 2002 123 2002 42 2003 61 753 59 2004 40 2000 41 777 58 648 2000 40 2002 42 2005 41 59 126 2000 40 41 2006 59 704 2007 40 2008 2009 44 704 2010 41 2006 59 2008 2011 40 41 2006 59 2012 2013 40 865 42 2014 44 2012 2015 44 2012 2016 41 2006 59 2012 2017 40 601 865 42 2014 44 2012 2015 44 2012 2016 41 2006 59 704 2018 40 41 2006 59 704 2019 40 41 2006 59 704 2020 40 41 2006 59 125 59 ,"{'AvgLine': 5, 'CountLine': 66, 'CountStmt': 21, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 59, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 9, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 59, 'CountLineCodeExe': 13, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 23, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 36, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100275,C++,"class OGRWFSCustomFuncRegistrar: public swq_custom_func_registrar
{
    public:
        OGRWFSCustomFuncRegistrar() {}
        virtual const swq_operation *GetOperator( const char * ) override ;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 123 125 864 601 2002 42 2003 40 601 582 42 41 2004 59 125 59 ,"{'AvgLine': 5, 'CountLine': 15, 'CountStmt': 7, 'MaxNesting': 2, 'AvgLineCode': 5, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 3, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 15, 'CountStmtDecl': 3, 'MaxCyclomatic': 3, 'SumCyclomatic': 4, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 15, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100280,C++,"class L1BCloudsDataset final: public GDALDataset
{
    friend class L1BCloudsRasterBand;

    L1BDataset* poL1BDS;

    public:
       explicit L1BCloudsDataset(L1BDataset* poMainDS);
       virtual ~L1BCloudsDataset();

       static GDALDataset* CreateCloudsDS(L1BDataset* poL1BDS);
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 42 2005 59 777 58 648 2000 40 2004 42 2006 41 59 864 126 2000 40 41 59 809 2002 42 2007 40 2004 42 2005 41 59 125 59 ,"{'AvgLine': 6, 'CountLine': 31, 'CountStmt': 13, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 8, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 28, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 145, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 2, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100281,C++,"class L1BCloudsRasterBand final: public GDALRasterBand
{
    public:
            L1BCloudsRasterBand(L1BCloudsDataset* poDS, int nBand);

            virtual CPLErr IReadBlock(int, int, void*) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 2004 44 704 2005 41 59 864 2006 2007 40 704 44 704 44 865 42 41 2008 59 125 59 ,"{'AvgLine': 24, 'CountLine': 56, 'CountStmt': 25, 'MaxNesting': 2, 'AvgLineCode': 19, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 44, 'CountStmtDecl': 8, 'MaxCyclomatic': 4, 'SumCyclomatic': 5, 'AltAvgLineCode': 19, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 2, 'AltCountLineCode': 44, 'CountLineCodeExe': 43, 'CountLineComment': 3, 'AltAvgLineComment': 1, 'AltCountLineBlank': 9, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 96, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100289,C++,"class L1BSolarZenithAnglesDataset final: public GDALDataset
{
    friend class L1BSolarZenithAnglesRasterBand;

    L1BDataset* poL1BDS;

    public:
       explicit L1BSolarZenithAnglesDataset(L1BDataset* poMainDS);
       virtual ~L1BSolarZenithAnglesDataset();

       static GDALDataset* CreateSolarZenithAnglesDS(L1BDataset* poL1BDS);
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 42 2005 59 777 58 648 2000 40 2004 42 2006 41 59 864 126 2000 40 41 59 809 2002 42 2007 40 2004 42 2005 41 59 125 59 ,"{'AvgLine': 6, 'CountLine': 32, 'CountStmt': 13, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 29, 'CountStmtDecl': 7, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 29, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 145, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 3, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100344,C++,"template <class T>
class LTIDLLCopy : public T
{
public:
   explicit LTIDLLCopy(const T& original) : T(original) {}
   virtual ~LTIDLLCopy() {}
};",0,822 60 587 2000 62 587 2001 58 777 2000 123 777 58 648 2001 40 601 2000 38 2002 41 58 2000 40 2002 41 123 125 864 126 2001 40 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 6, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100300,C++,"    class JP2KAKException
    {
    };",0,587 2000 123 125 59 ,"{'AvgLine': 0, 'CountLine': 3, 'CountStmt': 0, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 3, 'CountStmtDecl': 0, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 3, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100345,C++,"template <class T>
class LTIDLLDefault : public T
{
public:
    LTIDLLDefault() : T() {}
    virtual ~LTIDLLDefault() {}
};",0,822 60 587 2000 62 587 2001 58 777 2000 123 777 58 2001 40 41 58 2000 40 41 123 125 864 126 2001 40 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 6, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100308,C++,"template<typename T > class TImage
{
public:
    TImage() : width_(0), height_(0) {}
    ~TImage() {}

    bool setsize(int width, int height) {
        width_ = width;
        height_ = height;
        values.resize(getSize());
        return true;
    }

    int getWidth() const { return width_; }
    int getHeight() const { return height_; }
    int getSize() const { return width_ * height_; }

    const T& operator() (int row, int col) const { return values[row * width_ + col]; }
    T& operator() (int row, int col) { return values[row * width_ + col]; }
    const T* data() const { return values.data(); }

private:
    int width_, height_;
    std::vector<T> values;
};",0,822 60 835 2000 62 587 2001 123 777 58 2001 40 41 58 2002 40 1500 41 44 2003 40 1500 41 123 125 126 2001 40 41 123 125 569 2004 40 704 2005 44 704 2006 41 123 2002 61 2005 59 2003 61 2006 59 2007 46 2008 40 2009 40 41 41 59 792 829 59 125 704 2010 40 41 601 123 792 2002 59 125 704 2011 40 41 601 123 792 2003 59 125 704 2012 40 41 601 123 792 2002 42 2003 59 125 601 2000 38 758 40 41 40 704 2013 44 704 2014 41 601 123 792 2015 91 2013 42 2002 43 2014 93 59 125 2000 38 758 40 41 40 704 2013 44 704 2014 41 123 792 2016 91 2013 42 2002 43 2014 93 59 125 601 2000 42 2017 40 41 601 123 792 2018 46 2017 40 41 59 125 773 58 704 2002 44 2003 59 2019 321 2020 60 2000 62 2021 59 125 59 ,"{'AvgLine': 1, 'CountLine': 25, 'CountStmt': 24, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 14, 'MaxCyclomatic': 1, 'SumCyclomatic': 9, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 21, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 48, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
100319,C++,"class OGRMapMLReaderDataset final: public GDALPamDataset
{
        friend class OGRMapMLReaderLayer;

        std::vector<std::unique_ptr<OGRMapMLReaderLayer>> m_apoLayers{};
        CPLXMLTreeCloser m_oRootCloser{nullptr};
        CPLString m_osDefaultLayerName{};

    public:
        int GetLayerCount() override { return static_cast<int>(m_apoLayers.size()); }
        OGRLayer* GetLayer(int idx) override;

        static int Identify(GDALOpenInfo* poOpenInfo);
        static GDALDataset* Open(GDALOpenInfo*);
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 321 2005 60 2004 321 2006 60 2003 355 2007 123 125 59 2008 2009 123 753 125 59 2010 2011 123 125 59 777 58 704 2012 40 41 2013 123 792 811 60 704 62 40 2007 46 2014 40 41 41 59 125 2015 42 2016 40 704 2017 41 2013 59 809 704 2018 40 2019 42 2020 41 59 809 2021 42 2022 40 2019 42 41 59 125 59 ,"{'AvgLine': 12, 'CountLine': 62, 'CountStmt': 31, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 21, 'MaxEssential': 7, 'SumEssential': 10, 'AvgCyclomatic': 2, 'CountLineCode': 59, 'CountStmtDecl': 17, 'MaxCyclomatic': 7, 'SumCyclomatic': 10, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 59, 'CountLineCodeExe': 24, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 190, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 7, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100347,C++,"template <class T>
class LTIDLLPixel : public T
{
public:
   LTIDLLPixel(LTIColorSpace colorSpace,
            lt_uint16 numBands,
            LTIDataType dataType) : T(colorSpace,numBands,dataType) {}
   virtual ~LTIDLLPixel() {}
};",0,822 60 587 2000 62 587 2001 58 777 2000 123 777 58 2001 40 2002 2003 44 2004 2005 44 2006 2007 41 58 2000 40 2003 44 2005 44 2007 41 123 125 864 126 2001 40 41 123 125 125 59 ,"{'AvgLine': 2, 'CountLine': 8, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 8, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100329,C++,"class JDEMRasterBand final: public GDALPamRasterBand
{
    friend class JDEMDataset;

    int          nRecordSize;
    char        *pszRecord;
    bool         bBufferAllocFailed;

  public:
                JDEMRasterBand( JDEMDataset *, int );
    virtual ~JDEMRasterBand();

    virtual CPLErr IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 704 2004 59 582 42 2005 59 569 2006 59 777 58 2000 40 2003 42 44 704 41 59 864 126 2000 40 41 59 864 2007 2008 40 704 44 704 44 865 42 41 2009 59 125 59 ,"{'AvgLine': 20, 'CountLine': 76, 'CountStmt': 35, 'MaxNesting': 2, 'AvgLineCode': 16, 'AvgEssential': 2, 'AvgLineBlank': 3, 'CountStmtExe': 26, 'MaxEssential': 6, 'SumEssential': 8, 'AvgCyclomatic': 3, 'CountLineCode': 61, 'CountStmtDecl': 11, 'MaxCyclomatic': 7, 'SumCyclomatic': 9, 'AltAvgLineCode': 16, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 3, 'AltCountLineCode': 61, 'CountLineCodeExe': 33, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 131, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 53, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
100337,C++,"class FloatConstantGenerator {
 public:
  virtual ~FloatConstantGenerator() {}
  std::string GenFloatConstant(const FieldDef &field) const;

 private:
  virtual std::string Value(double v, const std::string &src) const = 0;
  virtual std::string Inf(double v) const = 0;
  virtual std::string NaN(double v) const = 0;

  virtual std::string Value(float v, const std::string &src) const = 0;
  virtual std::string Inf(float v) const = 0;
  virtual std::string NaN(float v) const = 0;

  template<typename T>
  std::string GenFloatConstantImpl(const FieldDef &field) const;
};",0,587 2000 123 777 58 864 126 2000 40 41 123 125 2001 321 2002 2003 40 601 2004 38 2005 41 601 59 773 58 864 2001 321 2002 2006 40 625 2007 44 601 2001 321 2002 38 2008 41 601 61 1500 59 864 2001 321 2002 2009 40 625 2007 41 601 61 1500 59 864 2001 321 2002 2010 40 625 2007 41 601 61 1500 59 864 2001 321 2002 2006 40 660 2007 44 601 2001 321 2002 38 2008 41 601 61 1500 59 864 2001 321 2002 2009 40 660 2007 41 601 61 1500 59 864 2001 321 2002 2010 40 660 2007 41 601 61 1500 59 822 60 835 2011 62 2001 321 2002 2012 40 601 2004 38 2005 41 601 59 125 59 ,"{'AvgLine': 1, 'CountLine': 17, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 14, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 8, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 7, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100349,C++,"template <class T>
class LTIDLLWriter : public T
{
public:
    explicit LTIDLLWriter(LTIImageStage *image) : T(image) {}
    virtual ~LTIDLLWriter() {}
};",0,822 60 587 2000 62 587 2001 58 777 2000 123 777 58 648 2001 40 2002 42 2003 41 58 2000 40 2003 41 123 125 864 126 2001 40 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 6, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100340,C++,"class Win32Mutex final : public PCIDSK::Mutex

{
private:
    HANDLE hMutex;

public:
    Win32Mutex();
    ~Win32Mutex();

    int Acquire(void) override;
    int Release(void) override;
};",0,587 2000 2001 58 777 2002 321 2003 123 773 58 2004 2005 59 777 58 2000 40 41 59 126 2000 40 41 59 704 2006 40 865 41 2007 59 704 2008 40 865 41 2007 59 125 59 ,"{'AvgLine': 7, 'CountLine': 42, 'CountStmt': 11, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 32, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 32, 'CountLineCodeExe': 4, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100342,C++,"class PCIDSK_EDBFile final : public EDBFile
{
    mutable PCIDSKFile *file;

public:

    explicit PCIDSK_EDBFile( PCIDSKFile *file_in ) { file = file_in; }
    ~PCIDSK_EDBFile() { PCIDSK_EDBFile::Close(); }

    int Close() const override;
    int GetWidth() const override;
    int GetHeight() const override;
    int GetChannels() const override;
    int GetBlockWidth(int channel ) const override;
    int GetBlockHeight(int channel ) const override;
    eChanType GetType(int channel ) const override;
    int ReadBlock(int channel,
                  int block_index, void *buffer,
                  int win_xoff, int win_yoff,
                  int win_xsize, int win_ysize ) override;
    int WriteBlock( int channel, int block_index, void *buffer) override;
};",0,587 2000 2001 58 777 2002 123 740 2003 42 2004 59 777 58 648 2000 40 2003 42 2005 41 123 2004 61 2005 59 125 126 2000 40 41 123 2000 321 2006 40 41 59 125 704 2007 40 41 601 2008 59 704 2009 40 41 601 2008 59 704 2010 40 41 601 2008 59 704 2011 40 41 601 2008 59 704 2012 40 704 2013 41 601 2008 59 704 2014 40 704 2013 41 601 2008 59 2015 2016 40 704 2013 41 601 2008 59 704 2017 40 704 2013 44 704 2018 44 865 42 2019 44 704 2020 44 704 2021 44 704 2022 44 704 2023 41 2008 59 704 2024 40 704 2013 44 704 2018 44 865 42 2019 41 2008 59 125 59 ,"{'AvgLine': 5, 'CountLine': 78, 'CountStmt': 26, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 66, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 12, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 66, 'CountLineCodeExe': 17, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 23, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100343,C++,"template <class T>
class LTIDLLBuffer : public T
{
public:
   LTIDLLBuffer(const LTIPixel& pixelProps,
                  lt_uint32 totalNumCols,
                  lt_uint32 totalNumRows,
                  void** data ) : T(pixelProps,totalNumCols,totalNumRows,data) {}
   virtual ~LTIDLLBuffer() {}
};",0,822 60 587 2000 62 587 2001 58 777 2000 123 777 58 2001 40 601 2002 38 2003 44 2004 2005 44 2004 2006 44 865 42 42 2007 41 58 2000 40 2003 44 2005 44 2006 44 2007 41 123 125 864 126 2001 40 41 123 125 125 59 ,"{'AvgLine': 2, 'CountLine': 9, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 9, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100360,C++,"template< class T >
class FreeGuard
{
public:
    explicit FreeGuard( T *p ) : _ptr( p ) { }
    ~FreeGuard()
    {
        if ( _ptr )
            free( _ptr );
    }

    T *take()
    {
        T *tmp = _ptr;
        _ptr = NULL;
        return tmp;
    }

private:
    T *_ptr;
    // prevent default copy constructor and assignment operator
    FreeGuard( const FreeGuard & );
    FreeGuard &operator=( const FreeGuard & );
};",0,822 60 587 2000 62 587 2001 123 777 58 648 2001 40 2000 42 2002 41 58 2003 40 2002 41 123 125 126 2001 40 41 123 688 40 2003 41 2004 40 2003 41 59 125 2000 42 2005 40 41 123 2000 42 2006 61 2003 59 2003 61 2007 59 792 2006 59 125 773 58 2000 42 2003 59 330 2001 40 601 2001 38 41 59 2001 38 758 61 40 601 2001 38 41 59 125 59 ,"{'AvgLine': 4, 'CountLine': 23, 'CountStmt': 12, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 8, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 20, 'CountLineCodeExe': 6, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 40, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117538,C++,"class BatteryInfo :
	public UavcanPublisherBase,
	private uORB::SubscriptionCallbackWorkItem,
	private uavcan::Publisher<uavcan::equipment::power::BatteryInfo>
{
public:
	BatteryInfo(px4::WorkItem *work_item, uavcan::INode &node) :
		UavcanPublisherBase(uavcan::equipment::power::BatteryInfo::DefaultDataTypeID),
		uORB::SubscriptionCallbackWorkItem(work_item, ORB_ID(battery_status)),
		uavcan::Publisher<uavcan::equipment::power::BatteryInfo>(node)
	{
		this->setPriority(uavcan::TransferPriority::MiddleLower);
	}

	void PrintInfo() override
	{
		if (uORB::SubscriptionCallbackWorkItem::advertised()) {
			printf(""\t%s -> %s:%d\n"",
			       uORB::SubscriptionCallbackWorkItem::get_topic()->o_name,
			       uavcan::equipment::power::BatteryInfo::getDataTypeFullName(),
			       uavcan::equipment::power::BatteryInfo::DefaultDataTypeID);
		}
	}

	void BroadcastAnyUpdates() override
	{
		// battery_status -> uavcan::equipment::power::BatteryInfo
		battery_status_s battery;

		if (uORB::SubscriptionCallbackWorkItem::update(&battery)) {
			uavcan::equipment::power::BatteryInfo battery_info{};
			battery_info.voltage = battery.voltage_v;
			battery_info.current = fabs(battery.current_a);
			battery_info.temperature = battery.temperature - CONSTANTS_ABSOLUTE_NULL_CELSIUS; // convert from C to K
			battery_info.full_charge_capacity_wh = battery.capacity;
			battery_info.remaining_capacity_wh = battery.remaining * battery.capacity;
			battery_info.state_of_charge_pct = battery.remaining * 100;
			battery_info.state_of_charge_pct_stdev = battery.max_error;
			battery_info.model_instance_id = 0; // TODO: what goes here?
			battery_info.model_name = ""ARK BMS Rev 0.2"";
			battery_info.battery_id = battery.serial_number;
			battery_info.hours_to_full_charge = 0; // TODO: Read BQ40Z80_TIME_TO_FULL
			battery_info.state_of_health_pct = battery.state_of_health;

			if (battery.current_a > 0.0f) {
				battery_info.status_flags = uavcan::equipment::power::BatteryInfo::STATUS_FLAG_CHARGING;

			} else {
				battery_info.status_flags = uavcan::equipment::power::BatteryInfo::STATUS_FLAG_IN_USE;
			}

			uavcan::Publisher<uavcan::equipment::power::BatteryInfo>::broadcast(battery_info);

			// ensure callback is registered
			uORB::SubscriptionCallbackWorkItem::registerCallback();
		}
	}
};",0,587 2000 58 777 2001 44 773 2002 321 2003 44 773 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 123 777 58 2000 40 2008 321 2009 42 2010 44 2004 321 2011 38 2012 41 58 2001 40 2004 321 2006 321 2007 321 2000 321 2013 41 44 2002 321 2003 40 2010 44 2014 40 2015 41 41 44 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 40 2012 41 123 823 354 2016 40 2004 321 2017 321 2018 41 59 125 865 2019 40 41 2020 123 688 40 2002 321 2003 321 2021 40 41 41 123 2022 40 362 44 2002 321 2003 321 2023 40 41 354 2024 44 2004 321 2006 321 2007 321 2000 321 2025 40 41 44 2004 321 2006 321 2007 321 2000 321 2013 41 59 125 125 865 2026 40 41 2020 123 330 2027 2028 59 688 40 2002 321 2003 321 2029 40 38 2028 41 41 123 2004 321 2006 321 2007 321 2000 2030 123 125 59 2030 46 2031 61 2028 46 2032 59 2030 46 2033 61 2034 40 2028 46 2035 41 59 2030 46 2036 61 2028 46 2036 45 2037 59 330 2030 46 2038 61 2028 46 2039 59 2030 46 2040 61 2028 46 2041 42 2028 46 2039 59 2030 46 2042 61 2028 46 2041 42 1503 59 2030 46 2043 61 2028 46 2044 59 2030 46 2045 61 1500 59 330 2030 46 2046 61 362 59 2030 46 2047 61 2028 46 2048 59 2030 46 2049 61 1500 59 330 2030 46 2050 61 2028 46 2051 59 688 40 2028 46 2035 62 1500 41 123 2030 46 2052 61 2004 321 2006 321 2007 321 2000 321 2053 59 125 630 123 2030 46 2054 61 2004 321 2006 321 2007 321 2000 321 2055 59 125 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 321 2056 40 2030 41 59 330 2002 321 2003 321 2057 40 41 59 125 125 125 59 ,"{'AvgLine': 16, 'CountLine': 58, 'CountStmt': 9, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 49, 'CountStmtDecl': 5, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 14, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 49, 'CountLineCodeExe': 3, 'CountLineComment': 5, 'AltAvgLineComment': 1, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117549,C++,"template<typename Type, size_t M>
class Vector : public Matrix<Type, M, 1>
{
public:
	using MatrixM1 = Matrix<Type, M, 1>;

	Vector() = default;

	Vector(const MatrixM1 &other) :
		MatrixM1(other)
	{
	}

	explicit Vector(const Type data_[M]) :
		MatrixM1(data_)
	{
	}

	template<size_t P, size_t Q>
	Vector(const Slice<Type, M, 1, P, Q> &slice_in) :
		Matrix<Type, M, 1>(slice_in)
	{
	}

	template<size_t P, size_t Q, size_t DUMMY = 1>
	Vector(const Slice<Type, 1, M, P, Q> &slice_in)
	{
		Vector &self(*this);

		for (size_t i = 0; i < M; i++) {
			self(i) = slice_in(0, i);
		}
	}

	inline const Type &operator()(size_t i) const
	{
		assert(i < M);

		const MatrixM1 &v = *this;
		return v(i, 0);
	}

	inline Type &operator()(size_t i)
	{
		assert(i < M);

		MatrixM1 &v = *this;
		return v(i, 0);
	}

	Type dot(const MatrixM1 &b) const
	{
		const Vector &a(*this);
		Type r(0);

		for (size_t i = 0; i < M; i++) {
			r += a(i) * b(i, 0);
		}

		return r;
	}

	inline Type operator*(const MatrixM1 &b) const
	{
		const Vector &a(*this);
		return a.dot(b);
	}

	inline Vector operator*(Type b) const
	{
		return Vector(MatrixM1::operator*(b));
	}

	Type norm() const
	{
		const Vector &a(*this);
		return Type(matrix::sqrt(a.dot(a)));
	}

	Type norm_squared() const
	{
		const Vector &a(*this);
		return a.dot(a);
	}

	inline Type length() const
	{
		return norm();
	}

	inline void normalize()
	{
		(*this) /= norm();
	}

	Vector unit() const
	{
		return (*this) / norm();
	}

	Vector unit_or_zero(const Type eps = Type(1e-5)) const
	{
		const Type n = norm();

		if (n > eps) {
			return (*this) / n;
		}

		return Vector();
	}

	inline Vector normalized() const
	{
		return unit();
	}

	bool longerThan(Type testVal) const
	{
		return norm_squared() > testVal * testVal;
	}

	Vector sqrt() const
	{
		const Vector &a(*this);
		Vector r;

		for (size_t i = 0; i < M; i++) {
			r(i) = Type(matrix::sqrt(a(i)));
		}

		return r;
	}
};",0,822 60 835 2000 44 2001 2002 62 587 2003 58 777 2004 60 2000 44 2002 44 1501 62 123 777 58 860 2005 61 2004 60 2000 44 2002 44 1501 62 59 2003 40 41 61 613 59 2003 40 601 2005 38 2006 41 58 2005 40 2006 41 123 125 648 2003 40 601 2000 2007 91 2002 93 41 58 2005 40 2007 41 123 125 822 60 2001 2008 44 2001 2009 62 2003 40 601 2010 60 2000 44 2002 44 1501 44 2008 44 2009 62 38 2011 41 58 2004 60 2000 44 2002 44 1501 62 40 2011 41 123 125 822 60 2001 2008 44 2001 2009 44 2001 2012 61 1501 62 2003 40 601 2010 60 2000 44 1501 44 2002 44 2008 44 2009 62 38 2011 41 123 2003 38 2013 40 42 823 41 59 664 40 2001 2014 61 1500 59 2014 60 2002 59 2014 349 41 123 2013 40 2014 41 61 2011 40 1500 44 2014 41 59 125 125 700 601 2000 38 758 40 41 40 2001 2015 41 601 123 2016 40 2015 60 2002 41 59 601 2005 38 2017 61 42 823 59 792 2017 40 2015 44 1500 41 59 125 700 2000 38 758 40 41 40 2001 2015 41 123 2018 40 2015 60 2002 41 59 2005 38 2019 61 42 823 59 792 2019 40 2015 44 1500 41 59 125 2000 2020 40 601 2005 38 2021 41 601 123 601 2003 38 2022 40 42 823 41 59 2000 2023 40 1500 41 59 664 40 2001 2015 61 1500 59 2015 60 2002 59 2015 349 41 123 2023 348 2022 40 2015 41 42 2021 40 2015 44 1500 41 59 125 792 2023 59 125 700 2000 758 42 40 601 2005 38 2021 41 601 123 601 2003 38 2024 40 42 823 41 59 792 2024 46 2020 40 2021 41 59 125 700 2003 758 42 40 2000 2021 41 601 123 792 2003 40 2005 321 758 42 40 2021 41 41 59 125 2000 2025 40 41 601 123 601 2003 38 2026 40 42 823 41 59 792 2000 40 2027 321 2028 40 2026 46 2020 40 2026 41 41 41 59 125 2000 2029 40 41 601 123 601 2003 38 2030 40 42 823 41 59 792 2030 46 2020 40 2030 41 59 125 700 2000 2031 40 41 601 123 792 2025 40 41 59 125 700 865 2032 40 41 123 40 42 823 41 316 2025 40 41 59 125 2003 2033 40 41 601 123 792 40 42 823 41 47 2025 40 41 59 125 2003 2034 40 601 2000 2035 61 2000 40 1500 41 41 601 123 601 2000 2036 61 2025 40 41 59 688 40 2036 62 2035 41 123 792 40 42 823 41 47 2036 59 125 792 2003 40 41 59 125 700 2003 2037 40 41 601 123 792 2033 40 41 59 125 569 2038 40 2000 2039 41 601 123 792 2029 40 41 62 2039 42 2039 59 125 2003 2040 40 41 601 123 601 2003 38 2041 40 42 823 41 59 2003 2042 59 664 40 2001 2015 61 1500 59 2015 60 2002 59 2015 349 41 123 2042 40 2015 41 61 2000 40 2043 321 2040 40 2041 40 2015 41 41 41 59 125 792 2042 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 132, 'CountStmt': 59, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 31, 'MaxEssential': 1, 'SumEssential': 18, 'AvgCyclomatic': 1, 'CountLineCode': 104, 'CountStmtDecl': 35, 'MaxCyclomatic': 2, 'SumCyclomatic': 24, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 28, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 19, 'AltCountLineCode': 104, 'CountLineCodeExe': 37, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 28, 'CountClassCoupled': 1, 'CountClassDerived': 9, 'CountLineCodeDecl': 33, 'CountLineInactive': 0, 'CountDeclMethodAll': 75, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 24, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 12, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 19, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 24, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 19, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117547,C++,"class MapProjection final
{
private:
	uint64_t _ref_timestamp{0};
	double _ref_lat{0.0};
	double _ref_lon{0.0};
	double _ref_sin_lat{0.0};
	double _ref_cos_lat{0.0};
	bool _ref_init_done{false};

public:
	/**
	 * @brief Construct a new Map Projection object
	 * The generated object will be uninitialized.
	 * To initialize, use the `initReference` function
	 */
	MapProjection() = default;

	/**
	 * @brief Construct and initialize a new Map Projection object
	 */
	MapProjection(double lat_0, double lon_0)
	{
		initReference(lat_0, lon_0);
	}

	/**
	 * @brief Construct and initialize a new Map Projection object
	 */
	MapProjection(double lat_0, double lon_0, uint64_t timestamp)
	{
		initReference(lat_0, lon_0, timestamp);
	}

	/**
	 * Initialize the map transformation
	 *
	 * Initializes the transformation between the geographic coordinate system and
	 * the azimuthal equidistant plane
	 * @param lat in degrees (47.1234567°, not 471234567°)
	 * @param lon in degrees (8.1234567°, not 81234567°)
	 */
	void initReference(double lat_0, double lon_0, uint64_t timestamp);

	/**
	 * Initialize the map transformation
	 *
	 * with reference coordinates on the geographic coordinate system
	 * where the azimuthal equidistant plane's origin is located
	 * @param lat in degrees (47.1234567°, not 471234567°)
	 * @param lon in degrees (8.1234567°, not 81234567°)
	 */
	inline void initReference(double lat_0, double lon_0)
	{
		initReference(lat_0, lon_0, hrt_absolute_time());
	}

	/**
	 * @return true, if the map reference has been initialized before
	 */
	bool isInitialized() const { return _ref_init_done; };

	/**
	 * @return the timestamp of the reference which the map projection was initialized with
	 */
	uint64_t getProjectionReferenceTimestamp() const { return _ref_timestamp; };

	/**
	 * @return the projection reference latitude in degrees
	 */
	double getProjectionReferenceLat() const { return math::degrees(_ref_lat); };

	/**
	 * @return the projection reference longitude in degrees
	 */
	double getProjectionReferenceLon() const { return math::degrees(_ref_lon); };

	/**
	 * Transform a point in the geographic coordinate system to the local
	 * azimuthal equidistant plane using the projection
	 * @param lat in degrees (47.1234567°, not 471234567°)
	 * @param lon in degrees (8.1234567°, not 81234567°)
	 * @param x north
	 * @param y east
	 */
	void project(double lat, double lon, float &x, float &y) const;

	/**
	 * Transform a point in the geographic coordinate system to the local
	 * azimuthal equidistant plane using the projection
	 * @param lat in degrees (47.1234567°, not 471234567°)
	 * @param lon in degrees (8.1234567°, not 81234567°)
	 * @return the point in local coordinates as north / east
	 */
	inline matrix::Vector2f project(double lat, double lon) const
	{
		matrix::Vector2f res;
		project(lat, lon, res(0), res(1));
		return res;
	}

	/**
	 * Transform a point in the local azimuthal equidistant plane to the
	 * geographic coordinate system using the projection
	 *
	 * @param x north
	 * @param y east
	 * @param lat in degrees (47.1234567°, not 471234567°)
	 * @param lon in degrees (8.1234567°, not 81234567°)
	 */
	void reproject(float x, float y, double &lat, double &lon) const;
};",0,587 2000 2001 123 773 58 2002 2003 123 1500 125 59 625 2004 123 1500 125 59 625 2005 123 1500 125 59 625 2006 123 1500 125 59 625 2007 123 1500 125 59 569 2008 123 655 125 59 777 58 306 2000 40 41 61 613 59 306 2000 40 625 2009 44 625 2010 41 123 2011 40 2009 44 2010 41 59 125 306 2000 40 625 2009 44 625 2010 44 2002 2012 41 123 2013 40 2009 44 2010 44 2012 41 59 125 306 865 2014 40 625 2009 44 625 2010 44 2002 2012 41 59 306 700 865 2014 40 625 2009 44 625 2010 41 123 2014 40 2009 44 2010 44 2015 40 41 41 59 125 306 569 2016 40 41 601 123 792 2008 59 125 59 306 2002 2017 40 41 601 123 792 2003 59 125 59 306 625 2018 40 41 601 123 792 2019 321 2020 40 2004 41 59 125 59 306 625 2021 40 41 601 123 792 2022 321 2023 40 2005 41 59 125 59 306 865 2024 40 625 2025 44 625 2026 44 660 38 2027 44 660 38 2028 41 601 59 306 700 2029 321 2030 2024 40 625 2025 44 625 2026 41 601 123 2029 321 2030 2031 59 2024 40 2025 44 2026 44 2031 40 1500 41 44 2031 40 1501 41 41 59 792 2031 59 125 306 865 2032 40 660 2027 44 660 2028 44 625 38 2025 44 625 38 2026 41 601 59 125 59 ,"{'AvgLine': 6, 'CountLine': 164, 'CountStmt': 57, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 36, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 79, 'CountStmtDecl': 33, 'MaxCyclomatic': 2, 'SumCyclomatic': 13, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 22, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 12, 'AltCountLineCode': 79, 'CountLineCodeExe': 41, 'CountLineComment': 63, 'AltAvgLineComment': 0, 'AltCountLineBlank': 22, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 28, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.80', 'AltCountLineComment': 63, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 76, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 6, 'CountDeclInstanceVariableProtected': 0}"
117553,C++,"class Gps: public Sensor
{
public:
	Gps(std::shared_ptr<Ekf> ekf);
	~Gps();

	void setData(const gps_message &gps);
	void stepHeightByMeters(const float hgt_change);
	void stepHorizontalPositionByMeters(const Vector2f hpos_change);
	void setPositionRateNED(const Vector3f &rate);
	void setAltitude(const int32_t alt);
	void setLatitude(const int32_t lat);
	void setLongitude(const int32_t lon);
	void setVelocity(const Vector3f &vel);
	void setYaw(const float yaw);
	void setYawOffset(const float yaw);
	void setFixType(const int fix_type);
	void setNumberOfSatellites(const int num_satellites);
	void setPdop(const float pdop);

	gps_message getDefaultGpsData();

private:
	void send(uint64_t time) override;

	gps_message _gps_data{};
	Vector3f _gps_pos_rate{};
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 321 2003 60 2004 62 2005 41 59 126 2000 40 41 59 865 2006 40 601 2007 38 2008 41 59 865 2009 40 601 660 2010 41 59 865 2011 40 601 2012 2013 41 59 865 2014 40 601 2015 38 2016 41 59 865 2017 40 601 2018 2019 41 59 865 2020 40 601 2018 2021 41 59 865 2022 40 601 2018 2023 41 59 865 2024 40 601 2015 38 2025 41 59 865 2026 40 601 660 2027 41 59 865 2028 40 601 660 2027 41 59 865 2029 40 601 704 2030 41 59 865 2031 40 601 704 2032 41 59 865 2033 40 601 660 2034 41 59 2007 2035 40 41 59 773 58 865 2036 40 2037 2038 41 2039 59 2007 2040 123 125 59 2015 2041 123 125 59 125 59 ,"{'AvgLine': 6, 'CountLine': 136, 'CountStmt': 64, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 39, 'MaxEssential': 1, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 122, 'CountStmtDecl': 26, 'MaxCyclomatic': 3, 'SumCyclomatic': 19, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 17, 'AltCountLineCode': 122, 'CountLineCodeExe': 45, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountLineCodeDecl': 25, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 16, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 19, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
117557,C++,"class EkfFlowTest : public ::testing::Test
{
public:

	EkfFlowTest(): ::testing::Test(),
		_ekf{std::make_shared<Ekf>()},
		_sensor_simulator(_ekf),
		_ekf_wrapper(_ekf) {};

	std::shared_ptr<Ekf> _ekf;
	SensorSimulator _sensor_simulator;
	EkfWrapper _ekf_wrapper;

	// Setup the Ekf with synthetic measurements
	void SetUp() override
	{
		const float max_flow_rate = 5.f;
		const float min_ground_distance = 0.f;
		const float max_ground_distance = 50.f;
		_ekf->set_optical_flow_limits(max_flow_rate, min_ground_distance, max_ground_distance);

		_ekf->init(0);
		_sensor_simulator.runSeconds(7);
	}

	// Use this method to clean up any memory, network etc. after each test
	void TearDown() override
	{
	}

	void startRangeFinderFusion(float distance);
	void startZeroFlowFusion();
	void setFlowFromHorizontalVelocityAndDistance(flowSample &flow_sample, const Vector2f &simulated_horz_velocity,
			float estimated_distance_to_ground);
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 58 321 2001 321 2002 40 41 44 2003 123 2004 321 2005 60 2006 62 40 41 125 44 2007 40 2003 41 44 2008 40 2003 41 123 125 59 2009 321 2010 60 2011 62 2003 59 2012 2007 59 2013 2008 59 330 865 2014 40 41 2015 123 601 660 2016 61 1502 59 601 660 2017 61 1500 59 601 660 2018 61 1503 59 2003 354 2019 40 2016 44 2017 44 2018 41 59 2003 354 2020 40 1500 41 59 2007 46 2021 40 1502 41 59 125 330 865 2022 40 41 2015 123 125 865 2023 40 660 2024 41 59 865 2025 40 41 59 865 2026 40 2027 38 2028 44 601 2029 38 2030 44 660 2031 41 59 125 59 ,"{'AvgLine': 6, 'CountLine': 55, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 46, 'CountLineCodeExe': 6, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117559,C++,"class Hysteresis
{
public:
	explicit Hysteresis(bool init_state) :
		_state(init_state),
		_requested_state(init_state)
	{}
	Hysteresis() = delete; // no default constructor

	~Hysteresis() = default;

	bool get_state() const { return _state; }

	void set_hysteresis_time_from(const bool from_state, const hrt_abstime new_hysteresis_time_us);

	void set_state_and_update(const bool new_state, const hrt_abstime &now_us);

	void update(const hrt_abstime &now_us);

private:

	hrt_abstime _last_time_to_change_state{0};

	hrt_abstime _time_from_true_us{0};
	hrt_abstime _time_from_false_us{0};

	bool _state;
	bool _requested_state;
};",0,587 2000 123 777 58 648 2000 40 569 2001 41 58 2002 40 2001 41 44 2003 40 2001 41 123 125 2000 40 41 61 619 59 330 126 2000 40 41 61 613 59 569 2004 40 41 601 123 792 2002 59 125 865 2005 40 601 569 2006 44 601 2007 2008 41 59 865 2009 40 601 569 2010 44 601 2007 38 2011 41 59 865 2012 40 601 2007 38 2011 41 59 773 58 2007 2013 123 1500 125 59 2007 2014 123 1500 125 59 2007 2015 123 1500 125 59 569 2002 59 569 2003 59 125 59 ,"{'AvgLine': 10, 'CountLine': 75, 'CountStmt': 30, 'MaxNesting': 3, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 2, 'CountLineCode': 58, 'CountStmtDecl': 13, 'MaxCyclomatic': 6, 'SumCyclomatic': 13, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 58, 'CountLineCodeExe': 22, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 67, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
117571,C++,"class CanardInterface
{
public:
	CanardInterface() = default;
	virtual ~CanardInterface() = default;

	virtual int init() { return 0; };

	virtual int close() { return 0; };

	/// Send a CanardFrame
	/// This function is blocking
	/// The return value is number of bytes transferred, negative value on error.
	virtual int16_t transmit(const CanardFrame &txframe, int timeout_ms = 0) = 0;

	/// Receive a CanardFrame
	/// This function is blocking
	/// The return value is number of bytes received, negative value on error.
	virtual int16_t receive(CanardFrame *rxf) = 0;

private:

};",0,587 2000 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 61 613 59 864 704 2001 40 41 123 792 1500 59 125 59 864 704 2002 40 41 123 792 1500 59 125 59 331 331 331 864 2003 2004 40 601 2005 38 2006 44 704 2007 61 1500 41 61 1500 59 331 331 331 864 2003 2008 40 2005 42 2009 41 61 1500 59 773 58 125 59 ,"{'AvgLine': 1, 'CountLine': 22, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 10, 'CountLineCodeExe': 2, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.60', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117573,C++,"class UavcanMixingInterface : public OutputModuleInterface
{
public:
	UavcanMixingInterface(pthread_mutex_t &node_mutex,
			      UavcanEscController &esc_controller) //, UavcanServoController &servo_controller)
		: OutputModuleInterface(MODULE_NAME ""-actuators"", px4::wq_configurations::uavcan),
		  _node_mutex(node_mutex),
		  _esc_controller(esc_controller)/*,
		  _servo_controller(servo_controller)*/ {}

	bool updateOutputs(bool stop_motors, uint16_t outputs[MAX_ACTUATORS],
			   unsigned num_outputs, unsigned num_control_groups_updated) override;

	void mixerChanged() override {};

	void printInfo() { _mixing_output.printStatus(); }

	MixingOutput &mixingOutput() { return _mixing_output; }

	/// For use with PR-16808 once merged
	// const char *get_param_prefix() override { return ""UCAN1_ACT""; }

protected:
	void Run() override;
private:
	friend class UavcanNode;
	pthread_mutex_t &_node_mutex;
	UavcanEscController &_esc_controller;
	// UavcanServoController &_servo_controller;
	MixingOutput _mixing_output{""UCAN1_ESC"", MAX_ACTUATORS, *this, MixingOutput::SchedulingPolicy::Auto, false, false};
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 44 2004 38 2005 41 330 58 2001 40 2006 362 44 2007 321 2008 321 2009 41 44 2010 40 2003 41 44 2011 40 2005 41 305 123 125 569 2012 40 569 2013 44 2014 2015 91 2016 93 44 856 2017 44 856 2018 41 2019 59 865 2020 40 41 2019 123 125 59 865 2021 40 41 123 2022 46 2023 40 41 59 125 2024 38 2025 40 41 123 792 2026 59 125 331 330 775 58 865 2027 40 41 2019 59 773 58 667 587 2028 59 2002 38 2010 59 2004 38 2011 59 330 2024 2029 123 362 44 2016 44 42 823 44 2024 321 2030 321 2031 44 655 44 655 125 59 125 59 ,"{'AvgLine': 4, 'CountLine': 50, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 3, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 35, 'CountLineCodeExe': 7, 'CountLineComment': 10, 'AltAvgLineComment': 1, 'AltCountLineBlank': 8, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 53, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.29', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 41, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
117576,C++,"class ITxQueueInjector
{
public:
	virtual ~ITxQueueInjector() { }

	/**
	 * Flush contents of TX queues into the main node.
	 * @param main_node         Reference to the main node.
	 */
	virtual void injectTxFramesInto(uavcan::INode &main_node) = 0;
};",0,587 2000 123 777 58 864 126 2000 40 41 123 125 306 864 865 2001 40 2002 321 2003 38 2004 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 11, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.67', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117597,C++,"class UavcanNodeParamManager : public uavcan::IParamManager
{
public:
	UavcanNodeParamManager() = default;

	void getParamNameByIndex(Index index, Name &out_name) const override;
	void assignParamValue(const Name &name, const Value &value) override;
	void readParamValue(const Name &name, Value &out_value) const override;
	void readParamDefaultMaxMin(const Name &name, Value &out_default,
				    NumericValue &out_max, NumericValue &out_min) const override;
	int saveAllParams() override;
	int eraseAllParams() override;

private:

};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 41 61 613 59 865 2003 40 2004 2005 44 2006 38 2007 41 601 2008 59 865 2009 40 601 2006 38 2010 44 601 2011 38 2012 41 2008 59 865 2013 40 601 2006 38 2010 44 2011 38 2014 41 601 2008 59 865 2015 40 601 2006 38 2010 44 2011 38 2016 44 2017 38 2018 44 2017 38 2019 41 601 2008 59 704 2020 40 41 2008 59 704 2021 40 41 2008 59 773 58 125 59 ,"{'AvgLine': 15, 'CountLine': 111, 'CountStmt': 42, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 85, 'CountStmtDecl': 19, 'MaxCyclomatic': 5, 'SumCyclomatic': 17, 'AltAvgLineCode': 12, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 18, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 7, 'AltCountLineCode': 85, 'CountLineCodeExe': 23, 'CountLineComment': 8, 'AltAvgLineComment': 1, 'AltCountLineBlank': 18, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117606,C++,"class UavcanServoController
{
public:
	static constexpr int MAX_ACTUATORS = 8;
	static constexpr unsigned MAX_RATE_HZ = 50;
	static constexpr unsigned UAVCAN_COMMAND_TRANSFER_PRIORITY = 6;	///< 0..31, inclusive, 0 - highest, 31 - lowest

	UavcanServoController(uavcan::INode &node);
	~UavcanServoController() = default;

	void update_outputs(bool stop_motors, uint16_t outputs[MAX_ACTUATORS], unsigned num_outputs);

private:
	uavcan::INode								&_node;
	uavcan::Publisher<uavcan::equipment::actuator::ArrayCommand> _uavcan_pub_array_cmd;
};",0,587 2000 123 777 58 809 603 704 2001 61 1502 59 809 603 856 2002 61 1503 59 809 603 856 2003 61 1502 59 331 2000 40 2004 321 2005 38 2006 41 59 126 2000 40 41 61 613 59 865 2007 40 569 2008 44 2009 2010 91 2001 93 44 856 2011 41 59 773 58 2004 321 2005 38 2012 59 2004 321 2013 60 2004 321 2014 321 2015 321 2016 62 2017 59 125 59 ,"{'AvgLine': 11, 'CountLine': 38, 'CountStmt': 11, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 32, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 32, 'CountLineCodeExe': 2, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 3, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117610,C++,"class EkfImuSamplingTest : public ::testing::TestWithParam<std::tuple<float, float, Vector3f, Vector3f>>
{
public:

	Ekf _ekf{};

	uint32_t _t_us{0};

	// Setup the Ekf with synthetic measurements
	void SetUp() override
	{
		_ekf.init(0);

	}

	void TearDown() override
	{

	}
};",0,587 2000 58 777 321 2001 321 2002 60 2003 321 2004 60 660 44 660 44 2005 44 2005 355 123 777 58 2006 2007 123 125 59 2008 2009 123 1500 125 59 330 865 2010 40 41 2011 123 2007 46 2012 40 1500 41 59 125 865 2013 40 41 2011 123 125 125 59 ,"{'AvgLine': 4, 'CountLine': 20, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 2, 'AltCountLineCode': 13, 'CountLineCodeExe': 0, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117632,C++,"class IntegratorConing : public Integrator
{
public:
	IntegratorConing() = default;
	~IntegratorConing() = default;

	/**
	 * Put an item into the integral.
	 *
	 * @param timestamp	Timestamp of the current value.
	 * @param val		Item to put.
	 * @return		true if data was accepted and integrated.
	 */
	inline void put(const matrix::Vector3f &val, const float dt)
	{
		if ((dt > DT_MIN) && (_integral_dt + dt < DT_MAX)) {
			// Use trapezoidal integration to calculate the delta integral
			const matrix::Vector3f delta_alpha{integrate(val, dt)};

			// Calculate coning corrections
			// Coning compensation derived by Paul Riseborough and Jonathan Challinger,
			// following:
			// Strapdown Inertial Navigation Integration Algorithm Design Part 1: Attitude Algorithms
			// Sourced: https://arc.aiaa.org/doi/pdf/10.2514/2.4228
			// Simulated: https://github.com/priseborough/InertialNav/blob/master/models/imu_error_modelling.m
			_beta += ((_last_alpha + _last_delta_alpha * (1.f / 6.f)) % delta_alpha) * 0.5f;
			_last_delta_alpha = delta_alpha;
			_last_alpha = _alpha;

			// accumulate delta integrals
			_alpha += delta_alpha;

		} else {
			reset();
			_last_val = val;
		}
	}

	void reset()
	{
		Integrator::reset();
		_beta.zero();
		_last_alpha.zero();
	}

	/* Reset integrator and return current integral & integration time
	 *
	 * @param integral_dt	Get the dt in us of the current integration.
	 * @return		true if integral valid
	 */
	bool reset(matrix::Vector3f &integral, uint16_t &integral_dt)
	{
		if (Integrator::reset(integral, integral_dt)) {
			// apply coning corrections
			integral += _beta;
			_beta.zero();
			_last_alpha.zero();
			return true;
		}

		return false;
	}

private:
	matrix::Vector3f _beta{0.f, 0.f, 0.f};             /**< accumulated coning corrections */
	matrix::Vector3f _last_delta_alpha{0.f, 0.f, 0.f}; /**< integral from previous previous sampling interval */
	matrix::Vector3f _last_alpha{0.f, 0.f, 0.f};       /**< previous value of _alpha */

};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 126 2000 40 41 61 613 59 306 700 865 2002 40 601 2003 321 2004 38 2005 44 601 660 2006 41 123 688 40 40 2006 62 2007 41 307 40 2008 43 2006 60 2009 41 41 123 330 601 2003 321 2004 2010 123 2011 40 2005 44 2006 41 125 59 330 330 330 330 330 330 2012 348 40 40 2013 43 2014 42 40 1501 47 1502 41 41 37 2010 41 42 1500 59 2014 61 2010 59 2013 61 2015 59 330 2015 348 2010 59 125 630 123 2016 40 41 59 2017 61 2005 59 125 125 865 2018 40 41 123 2001 321 2018 40 41 59 2019 46 2020 40 41 59 2021 46 2020 40 41 59 125 305 569 2018 40 2003 321 2004 38 2022 44 2023 38 2024 41 123 688 40 2001 321 2018 40 2022 44 2024 41 41 123 330 2022 348 2025 59 2025 46 2026 40 41 59 2027 46 2026 40 41 59 792 829 59 125 792 655 59 125 773 58 2003 321 2004 2028 123 1500 44 1500 44 1500 125 59 306 2003 321 2004 2029 123 1500 44 1500 44 1500 125 59 306 2003 321 2004 2030 123 1500 44 1500 44 1500 125 59 306 125 59 ,"{'AvgLine': 14, 'CountLine': 68, 'CountStmt': 23, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 38, 'CountStmtDecl': 7, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 9, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 38, 'CountLineCodeExe': 18, 'CountLineComment': 24, 'AltAvgLineComment': 3, 'AltCountLineBlank': 9, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.63', 'AltCountLineComment': 24, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 61, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
117637,C++,"template <typename data_type>
class RingBuffer
{
public:
	explicit RingBuffer(size_t size) { allocate(size); }
	RingBuffer() { allocate(1); }
	~RingBuffer() { delete[] _buffer; }

	// no copy, assignment, move, move assignment
	RingBuffer(const RingBuffer &) = delete;
	RingBuffer &operator=(const RingBuffer &) = delete;
	RingBuffer(RingBuffer &&) = delete;
	RingBuffer &operator=(RingBuffer &&) = delete;

	bool allocate(uint8_t size)
	{
		if (valid() && (size == _size)) {
			// no change
			return true;
		}

		if (size == 0) {
			return false;
		}

		if (_buffer != nullptr) {
			delete[] _buffer;
		}

		_buffer = new data_type[size] {};

		if (_buffer == nullptr) {
			return false;
		}

		_size = size;

		_head = 0;
		_tail = 0;

		_first_write = true;

		return true;
	}

	bool valid() const { return (_buffer != nullptr) && (_size > 0); }

	void push(const data_type &sample)
	{
		uint8_t head_new = _head;

		if (!_first_write) {
			head_new = (_head + 1) % _size;
		}

		_buffer[head_new] = sample;
		_head = head_new;

		// move tail if we overwrite it
		if (_head == _tail && !_first_write) {
			_tail = (_tail + 1) % _size;

		} else {
			_first_write = false;
		}
	}

	uint8_t get_length() const { return _size; }

	data_type &operator[](const uint8_t index) { return _buffer[index]; }

	const data_type &get_newest() const { return _buffer[_head]; }
	const data_type &get_oldest() const { return _buffer[_tail]; }

	uint8_t get_oldest_index() const { return _tail; }

	bool pop_first_older_than(const uint64_t &timestamp, data_type *sample)
	{
		// start looking from newest observation data
		for (uint8_t i = 0; i < _size; i++) {
			int index = (_head - i);
			index = index < 0 ? _size + index : index;

			if (timestamp >= _buffer[index].time_us && timestamp < _buffer[index].time_us + (uint64_t)1e5) {
				*sample = _buffer[index];

				// Now we can set the tail to the item which
				// comes after the one we removed since we don't
				// want to have any older data in the buffer
				if (index == _head) {
					_tail = _head;
					_first_write = true;

				} else {
					_tail = (index + 1) % _size;
				}

				_buffer[index].time_us = 0;

				return true;
			}

			if (index == _tail) {
				// we have reached the tail and haven't got a
				// match
				return false;
			}
		}

		return false;
	}

	int get_total_size() const { return sizeof(*this) + sizeof(data_type) * _size; }

private:
	data_type *_buffer{nullptr};

	uint8_t _head{0};
	uint8_t _tail{0};
	uint8_t _size{0};

	bool _first_write{true};
};",0,822 60 835 2000 62 587 2001 123 777 58 648 2001 40 2002 2003 41 123 2004 40 2003 41 59 125 2001 40 41 123 2005 40 1501 41 59 125 126 2001 40 41 123 619 91 93 2006 59 125 330 2001 40 601 2001 38 41 61 619 59 2001 38 758 61 40 601 2001 38 41 61 619 59 2001 40 2001 307 41 61 619 59 2001 38 758 61 40 2001 307 41 61 619 59 569 2007 40 2008 2003 41 123 688 40 2009 40 41 307 40 2003 323 2010 41 41 123 330 792 829 59 125 688 40 2003 323 1500 41 123 792 655 59 125 688 40 2011 340 753 41 123 619 91 93 2011 59 125 2011 61 744 2000 91 2003 93 123 125 59 688 40 2011 323 753 41 123 792 655 59 125 2010 61 2003 59 2012 61 1500 59 2013 61 1500 59 2014 61 829 59 792 829 59 125 569 2015 40 41 601 123 792 40 2016 340 753 41 307 40 2017 62 1500 41 59 125 865 2018 40 601 2000 38 2019 41 123 2008 2020 61 2021 59 688 40 33 2022 41 123 2020 61 40 2021 43 1501 41 37 2023 59 125 2024 91 2020 93 61 2019 59 2021 61 2020 59 330 688 40 2021 323 2025 307 33 2022 41 123 2025 61 40 2025 43 1501 41 37 2026 59 125 630 123 2022 61 655 59 125 125 2008 2027 40 41 601 123 792 2028 59 125 2000 38 758 91 93 40 601 2008 2029 41 123 792 2030 91 2029 93 59 125 601 2000 38 2031 40 41 601 123 792 2032 91 2033 93 59 125 601 2000 38 2034 40 41 601 123 792 2035 91 2036 93 59 125 2008 2037 40 41 601 123 792 2038 59 125 569 2039 40 601 2040 38 2041 44 2000 42 2019 41 123 330 664 40 2008 2042 61 1500 59 2042 60 2043 59 2042 349 41 123 704 2029 61 40 2044 45 2042 41 59 2029 61 2029 60 1500 63 2043 43 2029 58 2029 59 688 40 2041 325 2045 91 2029 93 46 2046 307 2041 60 2045 91 2029 93 46 2046 43 40 2040 41 1506 41 123 42 2019 61 2045 91 2029 93 59 330 330 330 688 40 2029 323 2044 41 123 2047 61 2044 59 2048 61 829 59 125 630 123 2049 61 40 2029 43 1501 41 37 2043 59 125 2045 91 2029 93 46 2046 61 1500 59 792 829 59 125 688 40 2029 323 2050 41 123 330 330 792 655 59 125 125 792 655 59 125 704 2051 40 41 601 123 792 805 40 42 823 41 43 805 40 2000 41 42 2052 59 125 773 58 2000 42 2053 123 753 125 59 2008 2054 123 1500 125 59 2008 2055 123 1500 125 59 2008 2056 123 1500 125 59 569 2057 123 829 125 59 125 59 ,"{'AvgLine': 7, 'CountLine': 122, 'CountStmt': 65, 'MaxNesting': 3, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 46, 'MaxEssential': 4, 'SumEssential': 19, 'AvgCyclomatic': 1, 'CountLineCode': 81, 'CountStmtDecl': 21, 'MaxCyclomatic': 6, 'SumCyclomatic': 24, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 32, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 17, 'AltCountLineCode': 81, 'CountLineCodeExe': 48, 'CountLineComment': 9, 'AltAvgLineComment': 0, 'AltCountLineBlank': 32, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 28, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 17, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 69, 'SumCyclomaticModified': 24, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 17, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
117651,C++,"class Land : public MissionBlock
{
public:
	Land(Navigator *navigator);
	~Land() = default;

	void on_activation() override;
	void on_active() override;
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 42 2003 41 59 126 2000 40 41 61 613 59 865 2004 40 41 2005 59 865 2006 40 41 2005 59 125 59 ,"{'AvgLine': 15, 'CountLine': 55, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 6, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 12, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 45, 'CountLineCodeExe': 14, 'CountLineComment': 3, 'AltAvgLineComment': 1, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 35, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117661,C++,"class PX4Rangefinder
{
public:
	PX4Rangefinder(const uint32_t device_id,
		       const uint8_t device_orientation = distance_sensor_s::ROTATION_DOWNWARD_FACING);
	~PX4Rangefinder();

	// Set the MAV_DISTANCE_SENSOR type (LASER, ULTRASOUND, INFRARED, RADAR)
	void set_rangefinder_type(uint8_t rangefinder_type) { _distance_sensor_pub.get().type = rangefinder_type; };

	void set_device_id(const uint32_t device_id) { _distance_sensor_pub.get().device_id = device_id; };
	void set_device_type(const uint8_t device_type);

	void set_fov(const float fov) { set_hfov(fov); set_vfov(fov); }
	void set_hfov(const float fov) { _distance_sensor_pub.get().h_fov = fov; }
	void set_vfov(const float fov) { _distance_sensor_pub.get().v_fov = fov; }

	void set_max_distance(const float distance) { _distance_sensor_pub.get().max_distance = distance; }
	void set_min_distance(const float distance) { _distance_sensor_pub.get().min_distance = distance; }

	void set_orientation(const uint8_t device_orientation = distance_sensor_s::ROTATION_DOWNWARD_FACING);

	void update(const hrt_abstime &timestamp_sample, const float distance, const int8_t quality = -1);

	int get_instance() { return _distance_sensor_pub.get_instance(); };

private:
	uORB::PublicationMultiData<distance_sensor_s> _distance_sensor_pub{ORB_ID(distance_sensor)};
};",0,587 2000 123 777 58 2000 40 601 2001 2002 44 601 2003 2004 61 2005 321 2006 41 59 126 2000 40 41 59 330 865 2007 40 2003 2008 41 123 2009 46 2010 40 41 46 2011 61 2008 59 125 59 865 2012 40 601 2001 2002 41 123 2013 46 2014 40 41 46 2002 61 2002 59 125 59 865 2015 40 601 2003 2016 41 59 865 2017 40 601 660 2018 41 123 2019 40 2018 41 59 2020 40 2018 41 59 125 865 2021 40 601 660 2018 41 123 2022 46 2023 40 41 46 2024 61 2018 59 125 865 2025 40 601 660 2018 41 123 2026 46 2027 40 41 46 2028 61 2018 59 125 865 2029 40 601 660 2030 41 123 2031 46 2032 40 41 46 2033 61 2030 59 125 865 2034 40 601 660 2030 41 123 2035 46 2036 40 41 46 2037 61 2030 59 125 865 2038 40 601 2003 2004 61 2005 321 2006 41 59 865 2039 40 601 2040 38 2041 44 601 660 2030 44 601 2042 2043 61 45 1501 41 59 704 2044 40 41 123 792 2045 46 2044 40 41 59 125 59 773 58 2046 321 2047 60 2005 62 2048 123 2049 40 2050 41 125 59 125 59 ,"{'AvgLine': 3, 'CountLine': 72, 'CountStmt': 22, 'MaxNesting': 2, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 54, 'CountStmtDecl': 16, 'MaxCyclomatic': 3, 'SumCyclomatic': 15, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 13, 'AltCountLineCode': 54, 'CountLineCodeExe': 4, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117662,C++,"class UavcanParamManager
{
public:

	bool GetParamByName(const char *param_name, uavcan_register_Value_1_0 &value);
	bool GetParamByName(const uavcan_register_Name_1_0 &name, uavcan_register_Value_1_0 &value);
	bool GetParamName(uint32_t id, uavcan_register_Name_1_0 &name);
	bool SetParamByName(const uavcan_register_Name_1_0 &name, const uavcan_register_Value_1_0 &value);

private:


	const UavcanParamBinder _uavcan_params[13] {
		{""uavcan.pub.esc.0.id"",                ""UCAN1_ESC_PUB"",		    px4_param_to_uavcan_port_id, uavcan_port_id_to_px4_param},
		{""uavcan.pub.servo.0.id"",              ""UCAN1_SERVO_PUB"",		px4_param_to_uavcan_port_id, uavcan_port_id_to_px4_param},
		{""uavcan.pub.gps.0.id"",                ""UCAN1_GPS_PUB"",		    px4_param_to_uavcan_port_id, uavcan_port_id_to_px4_param},
		{""uavcan.pub.actuator_outputs.0.id"",   ""UCAN1_ACTR_PUB"",		px4_param_to_uavcan_port_id, uavcan_port_id_to_px4_param},
		{""uavcan.sub.esc.0.id"",                ""UCAN1_ESC0_SUB"",		px4_param_to_uavcan_port_id, uavcan_port_id_to_px4_param},
		{""uavcan.sub.gps.0.id"",                ""UCAN1_GPS0_SUB"",		px4_param_to_uavcan_port_id, uavcan_port_id_to_px4_param},
		{""uavcan.sub.gps.1.id"",                ""UCAN1_GPS1_SUB"",		px4_param_to_uavcan_port_id, uavcan_port_id_to_px4_param},
		{""uavcan.sub.energy_source.0.id"",      ""UCAN1_BMS_ES_SUB"",		px4_param_to_uavcan_port_id, uavcan_port_id_to_px4_param},
		{""uavcan.sub.battery_status.0.id"",     ""UCAN1_BMS_BS_SUB"",		px4_param_to_uavcan_port_id, uavcan_port_id_to_px4_param},
		{""uavcan.sub.battery_parameters.0.id"", ""UCAN1_BMS_BP_SUB"",		px4_param_to_uavcan_port_id, uavcan_port_id_to_px4_param},
		{""uavcan.sub.legacy_bms.0.id"",         ""UCAN1_LG_BMS_SUB"",		px4_param_to_uavcan_port_id, uavcan_port_id_to_px4_param},
		{""uavcan.sub.uorb.sensor_gps.0.id"",    ""UCAN1_UORB_GPS"",		px4_param_to_uavcan_port_id, uavcan_port_id_to_px4_param},
		{""uavcan.pub.uorb.sensor_gps.0.id"",    ""UCAN1_UORB_GPS_P"",		px4_param_to_uavcan_port_id, uavcan_port_id_to_px4_param},
		//{""uavcan.sub.bms.0.id"",   ""UCAN1_BMS0_SUB""}, //FIXME instancing
		//{""uavcan.sub.bms.1.id"",   ""UCAN1_BMS1_SUB""},
	};
};",0,587 2000 123 777 58 569 2001 40 601 582 42 2002 44 2003 38 2004 41 59 569 2001 40 601 2005 38 2006 44 2003 38 2004 41 59 569 2007 40 2008 2009 44 2005 38 2006 41 59 569 2010 40 601 2005 38 2006 44 601 2003 38 2004 41 59 773 58 601 2011 2012 91 1503 93 123 123 362 44 362 44 2013 44 2014 125 44 123 362 44 362 44 2015 44 2016 125 44 123 362 44 362 44 2017 44 2018 125 44 123 362 44 362 44 2019 44 2020 125 44 123 362 44 362 44 2021 44 2022 125 44 123 362 44 362 44 2023 44 2024 125 44 123 362 44 362 44 2025 44 2026 125 44 123 362 44 362 44 2027 44 2028 125 44 123 362 44 362 44 2029 44 2030 125 44 123 362 44 362 44 2031 44 2032 125 44 123 362 44 362 44 2033 44 2034 125 44 123 362 44 362 44 2035 44 2036 125 44 123 362 44 362 44 2037 44 2038 125 44 330 330 125 59 125 59 ,"{'AvgLine': 15, 'CountLine': 90, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 72, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 4, 'AltCountLineCode': 72, 'CountLineCodeExe': 5, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117681,C++,"template<typename Type>
class Dcm : public SquareMatrix<Type, 3>
{
public:
	using Vector3 = Matrix<Type, 3, 1>;

	/**
	 * Standard constructor
	 *
	 * Initializes to identity
	 */
	Dcm() : SquareMatrix<Type, 3>(eye<Type, 3>()) {}

	/**
	 * Constructor from array
	 *
	 * @param _data pointer to array
	 */
	explicit Dcm(const Type data_[3][3]) : SquareMatrix<Type, 3>(data_)
	{
	}

	/**
	 * Constructor from array
	 *
	 * @param _data pointer to array
	 */
	explicit Dcm(const Type data_[9]) : SquareMatrix<Type, 3>(data_)
	{
	}

	/**
	 * Copy constructor
	 *
	 * @param other Matrix33 to set dcm to
	 */
	Dcm(const Matrix<Type, 3, 3> &other) : SquareMatrix<Type, 3>(other)
	{
	}

	/**
	 * Constructor from quaternion
	 *
	 * Instance is initialized from quaternion representing
	 * coordinate transformation from frame 2 to frame 1.
	 *
	 * @param q quaternion to set dcm to
	 */
	Dcm(const Quaternion<Type> &q)
	{
		Dcm &dcm = *this;
		const Type a = q(0);
		const Type b = q(1);
		const Type c = q(2);
		const Type d = q(3);
		const Type aa = a * a;
		const Type ab = a * b;
		const Type ac = a * c;
		const Type ad = a * d;
		const Type bb = b * b;
		const Type bc = b * c;
		const Type bd = b * d;
		const Type cc = c * c;
		const Type cd = c * d;
		const Type dd = d * d;
		dcm(0, 0) = aa + bb - cc - dd;
		dcm(0, 1) = Type(2) * (bc - ad);
		dcm(0, 2) = Type(2) * (ac + bd);
		dcm(1, 0) = Type(2) * (bc + ad);
		dcm(1, 1) = aa - bb + cc - dd;
		dcm(1, 2) = Type(2) * (cd - ab);
		dcm(2, 0) = Type(2) * (bd - ac);
		dcm(2, 1) = Type(2) * (ab + cd);
		dcm(2, 2) = aa - bb - cc + dd;
	}

	/**
	 * Constructor from euler angles
	 *
	 * This sets the transformation matrix from frame 2 to frame 1 where the rotation
	 * from frame 1 to frame 2 is described by a 3-2-1 intrinsic Tait-Bryan rotation sequence.
	 *
	 *
	 * @param euler euler angle instance
	 */
	Dcm(const Euler<Type> &euler)
	{
		Dcm &dcm = *this;
		Type cosPhi = Type(cos(euler.phi()));
		Type sinPhi = Type(sin(euler.phi()));
		Type cosThe = Type(cos(euler.theta()));
		Type sinThe = Type(sin(euler.theta()));
		Type cosPsi = Type(cos(euler.psi()));
		Type sinPsi = Type(sin(euler.psi()));

		dcm(0, 0) = cosThe * cosPsi;
		dcm(0, 1) = -cosPhi * sinPsi + sinPhi * sinThe * cosPsi;
		dcm(0, 2) = sinPhi * sinPsi + cosPhi * sinThe * cosPsi;

		dcm(1, 0) = cosThe * sinPsi;
		dcm(1, 1) = cosPhi * cosPsi + sinPhi * sinThe * sinPsi;
		dcm(1, 2) = -sinPhi * cosPsi + cosPhi * sinThe * sinPsi;

		dcm(2, 0) = -sinThe;
		dcm(2, 1) = sinPhi * cosThe;
		dcm(2, 2) = cosPhi * cosThe;
	}


	/**
	 * Constructor from axis angle
	 *
	 * This sets the transformation matrix from frame 2 to frame 1 where the rotation
	 * from frame 1 to frame 2 is described by a 3-2-1 intrinsic Tait-Bryan rotation sequence.
	 *
	 *
	 * @param euler euler angle instance
	 */
	Dcm(const AxisAngle<Type> &aa)
	{
		Dcm &dcm = *this;
		dcm = Quaternion<Type>(aa);
	}

	Vector<Type, 3> vee() const      // inverse to Vector.hat() operation
	{
		const Dcm &A(*this);
		Vector<Type, 3> v;
		v(0) = -A(1, 2);
		v(1) =  A(0, 2);
		v(2) = -A(0, 1);
		return v;
	}

	void renormalize()
	{
		/* renormalize rows */
		for (size_t r = 0; r < 3; r++) {
			matrix::Vector3<Type> rvec(Matrix<Type, 1, 3>(this->Matrix<Type, 3, 3>::row(r)).transpose());
			this->Matrix<Type, 3, 3>::row(r) = rvec.normalized();
		}
	}
};",0,822 60 835 2000 62 587 2001 58 777 2002 60 2000 44 1502 62 123 777 58 860 2003 61 2004 60 2000 44 1502 44 1501 62 59 306 2001 40 41 58 2002 60 2000 44 1502 62 40 2005 60 2000 44 1502 62 40 41 41 123 125 306 648 2001 40 601 2000 2006 91 1502 93 91 1502 93 41 58 2002 60 2000 44 1502 62 40 2006 41 123 125 306 648 2001 40 601 2000 2006 91 1502 93 41 58 2002 60 2000 44 1502 62 40 2006 41 123 125 306 2001 40 601 2004 60 2000 44 1502 44 1502 62 38 2007 41 58 2002 60 2000 44 1502 62 40 2007 41 123 125 306 2001 40 601 2008 60 2000 62 38 2009 41 123 2001 38 2010 61 42 823 59 601 2000 2011 61 2009 40 1500 41 59 601 2000 2012 61 2009 40 1501 41 59 601 2000 2013 61 2009 40 1502 41 59 601 2000 2014 61 2009 40 1502 41 59 601 2000 2015 61 2011 42 2011 59 601 2000 2016 61 2011 42 2012 59 601 2000 2017 61 2011 42 2013 59 601 2000 2018 61 2011 42 2014 59 601 2000 2019 61 2012 42 2012 59 601 2000 2020 61 2012 42 2013 59 601 2000 2021 61 2012 42 2014 59 601 2000 2022 61 2013 42 2013 59 601 2000 2023 61 2013 42 2014 59 601 2000 2024 61 2014 42 2014 59 2010 40 1500 44 1500 41 61 2015 43 2019 45 2022 45 2024 59 2010 40 1500 44 1501 41 61 2000 40 1502 41 42 40 2020 45 2018 41 59 2010 40 1500 44 1502 41 61 2000 40 1502 41 42 40 2017 43 2021 41 59 2010 40 1501 44 1500 41 61 2000 40 1502 41 42 40 2020 43 2018 41 59 2010 40 1501 44 1501 41 61 2015 45 2019 43 2022 45 2024 59 2010 40 1501 44 1502 41 61 2000 40 1502 41 42 40 2023 45 2016 41 59 2010 40 1502 44 1500 41 61 2000 40 1502 41 42 40 2021 45 2017 41 59 2010 40 1502 44 1501 41 61 2000 40 1502 41 42 40 2016 43 2023 41 59 2010 40 1502 44 1502 41 61 2015 45 2019 45 2022 43 2024 59 125 306 2001 40 601 2025 60 2000 62 38 2026 41 123 2001 38 2027 61 42 823 59 2000 2028 61 2000 40 2029 40 2026 46 2030 40 41 41 41 59 2000 2031 61 2000 40 2032 40 2026 46 2030 40 41 41 41 59 2000 2033 61 2000 40 2029 40 2026 46 2034 40 41 41 41 59 2000 2035 61 2000 40 2032 40 2026 46 2034 40 41 41 41 59 2000 2036 61 2000 40 2029 40 2026 46 2037 40 41 41 41 59 2000 2038 61 2000 40 2032 40 2026 46 2037 40 41 41 41 59 2027 40 1500 44 1500 41 61 2033 42 2036 59 2027 40 1500 44 1501 41 61 45 2028 42 2038 43 2031 42 2035 42 2036 59 2027 40 1500 44 1502 41 61 2031 42 2038 43 2028 42 2035 42 2036 59 2027 40 1501 44 1500 41 61 2033 42 2038 59 2027 40 1501 44 1501 41 61 2028 42 2036 43 2031 42 2035 42 2038 59 2027 40 1501 44 1502 41 61 45 2031 42 2036 43 2028 42 2035 42 2038 59 2027 40 1502 44 1500 41 61 45 2035 59 2027 40 1502 44 1501 41 61 2031 42 2033 59 2027 40 1502 44 1502 41 61 2028 42 2033 59 125 306 2001 40 601 2039 60 2000 62 38 2040 41 123 2001 38 2041 61 42 823 59 2041 61 2008 60 2000 62 40 2040 41 59 125 2042 60 2000 44 1502 62 2043 40 41 601 330 123 601 2001 38 2044 40 42 823 41 59 2042 60 2000 44 1502 62 2045 59 2045 40 1500 41 61 45 2044 40 1501 44 1502 41 59 2045 40 1501 41 61 2044 40 1500 44 1502 41 59 2045 40 1502 41 61 45 2044 40 1500 44 1501 41 59 792 2045 59 125 865 2046 40 41 123 305 664 40 2047 2048 61 1500 59 2048 60 1502 59 2048 349 41 123 2049 321 2003 60 2000 62 2050 40 2004 60 2000 44 1501 44 1502 62 40 823 354 2004 60 2000 44 1502 44 1502 62 321 2051 40 2048 41 41 46 2052 40 41 41 59 823 354 2004 60 2000 44 1502 44 1502 62 321 2051 40 2048 41 61 2050 46 2053 40 41 59 125 125 125 59 ,"{'AvgLine': 9, 'CountLine': 142, 'CountStmt': 62, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 27, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 82, 'CountStmtDecl': 37, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 82, 'CountLineCodeExe': 56, 'CountLineComment': 48, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 37, 'CountLineInactive': 0, 'CountDeclMethodAll': 86, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.59', 'AltCountLineComment': 48, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117714,C++,"class testContainer : public ListNode<testContainer *>
{
public:
	int i{0};
};",0,587 2000 58 777 2001 60 2000 42 62 123 777 58 704 2002 123 1500 125 59 125 59 ,"{'AvgLine': 0, 'CountLine': 5, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 5, 'CountStmtDecl': 1, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 5, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117708,C++,"class MavlinkStreamGimbalManagerInformation : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamGimbalManagerInformation(mavlink); }

	static constexpr const char *get_name_static() { return ""GIMBAL_MANAGER_INFORMATION""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		if (_gimbal_manager_information_sub.advertised()) {
			return MAVLINK_MSG_ID_GIMBAL_MANAGER_INFORMATION_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		}

		return 0;
	}

private:
	explicit MavlinkStreamGimbalManagerInformation(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _gimbal_manager_information_sub{ORB_ID(gimbal_manager_information)};

	bool send() override
	{
		gimbal_manager_information_s gimbal_manager_information;

		if (_gimbal_manager_information_sub.advertised() && _gimbal_manager_information_sub.copy(&gimbal_manager_information)) {
			// send out gimbal_manager_info with info from gimbal_manager_information
			mavlink_gimbal_manager_information_t msg{};

			msg.time_boot_ms = gimbal_manager_information.timestamp / 1000;
			msg.cap_flags = gimbal_manager_information.cap_flags;
			msg.gimbal_device_id = 0;
			msg.roll_min = gimbal_manager_information.roll_min;
			msg.roll_max = gimbal_manager_information.roll_max;
			msg.pitch_min = gimbal_manager_information.pitch_min;
			msg.pitch_max = gimbal_manager_information.pitch_max;
			msg.yaw_min = gimbal_manager_information.yaw_min;
			msg.yaw_max = gimbal_manager_information.yaw_max;

			mavlink_msg_gimbal_manager_information_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 688 40 2013 46 2014 40 41 41 123 792 2015 43 2016 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 41 307 2019 46 2026 40 38 2024 41 41 123 330 2027 2028 123 125 59 2028 46 2029 61 2024 46 2030 47 1504 59 2028 46 2031 61 2024 46 2031 59 2028 46 2032 61 1500 59 2028 46 2033 61 2024 46 2033 59 2028 46 2034 61 2024 46 2034 59 2028 46 2035 61 2024 46 2035 59 2028 46 2036 61 2024 46 2036 59 2028 46 2037 61 2024 46 2037 59 2028 46 2038 61 2024 46 2038 59 2039 40 2040 354 2041 40 41 44 38 2028 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 51, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 38, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 38, 'CountLineCodeExe': 6, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117711,C++,"template<class T>
class List
{
public:

	void add(T newNode)
	{
		if (_head == nullptr) {
			// list is empty, add as head
			_head = newNode;
			return;

		} else {
			// find last node and add to end
			T node = _head;

			while (node != nullptr) {
				if (node->getSibling() == nullptr) {
					// found last node, now add newNode
					node->setSibling(newNode);
					return;
				}

				node = node->getSibling();
			}
		}
	}

	bool remove(T removeNode)
	{
		if (removeNode == nullptr) {
			return false;
		}

		// base case
		if (removeNode == _head) {
			if (_head != nullptr) {
				_head = _head->getSibling();
			}

			removeNode->setSibling(nullptr);

			return true;
		}

		for (T node = getHead(); node != nullptr; node = node->getSibling()) {
			// is sibling the node to remove?
			if (node->getSibling() == removeNode) {
				// replace sibling
				if (node->getSibling() != nullptr) {
					node->setSibling(node->getSibling()->getSibling());

				} else {
					node->setSibling(nullptr);
				}

				removeNode->setSibling(nullptr);

				return true;
			}
		}

		return false;
	}

	struct Iterator {
		T node;
		explicit Iterator(T v) : node(v) {}

		operator T() const { return node; }
		operator T &() { return node; }
		const T &operator* () const { return node; }
		Iterator &operator++ ()
		{
			if (node) {
				node = node->getSibling();
			}

			return *this;
		}
	};

	Iterator begin() { return Iterator(getHead()); }
	Iterator end() { return Iterator(nullptr); }

	const T getHead() const { return _head; }

	bool empty() const { return getHead() == nullptr; }

	size_t size() const
	{
		size_t sz = 0;

		for (auto node = getHead(); node != nullptr; node = node->getSibling()) {
			sz++;
		}

		return sz;
	}

	void deleteNode(T node)
	{
		if (remove(node)) {
			// only delete if node was successfully removed
			delete node;
		}
	}

	void clear()
	{
		auto node = getHead();

		while (node != nullptr) {
			auto next = node->getSibling();
			delete node;
			node = next;
		}

		_head = nullptr;
	}

protected:

	T _head{nullptr};
};",0,822 60 587 2000 62 587 2001 123 777 58 865 2002 40 2000 2003 41 123 688 40 2004 323 753 41 123 330 2004 61 2003 59 792 59 125 630 123 330 2000 2005 61 2004 59 870 40 2005 340 753 41 123 688 40 2005 354 2006 40 41 323 753 41 123 330 2005 354 2007 40 2003 41 59 792 59 125 2005 61 2005 354 2006 40 41 59 125 125 125 569 2008 40 2000 2009 41 123 688 40 2009 323 753 41 123 792 655 59 125 330 688 40 2009 323 2010 41 123 688 40 2010 340 753 41 123 2010 61 2010 354 2011 40 41 59 125 2009 354 2012 40 753 41 59 792 829 59 125 664 40 2000 2013 61 2014 40 41 59 2013 340 753 59 2013 61 2013 354 2015 40 41 41 123 330 688 40 2013 354 2015 40 41 323 2009 41 123 330 688 40 2013 354 2015 40 41 340 753 41 123 2013 354 2016 40 2013 354 2015 40 41 354 2015 40 41 41 59 125 630 123 2013 354 2017 40 753 41 59 125 2009 354 2018 40 753 41 59 792 829 59 125 125 792 655 59 125 816 2019 123 2000 2020 59 648 2019 40 2000 2021 41 58 2020 40 2021 41 123 125 758 2000 40 41 601 123 792 2020 59 125 758 2000 38 40 41 123 792 2020 59 125 601 2000 38 758 42 40 41 601 123 792 2020 59 125 2019 38 758 349 40 41 123 688 40 2020 41 123 2020 61 2020 354 2022 40 41 59 125 792 42 823 59 125 125 59 2019 2023 40 41 123 792 2019 40 2024 40 41 41 59 125 2019 2025 40 41 123 792 2019 40 753 41 59 125 601 2000 2026 40 41 601 123 792 2027 59 125 569 2028 40 41 601 123 792 2026 40 41 323 753 59 125 2029 2030 40 41 601 123 2029 2031 61 1500 59 664 40 561 2032 61 2026 40 41 59 2032 340 753 59 2032 61 2032 354 2033 40 41 41 123 2031 349 59 125 792 2031 59 125 865 2034 40 2000 2035 41 123 688 40 2008 40 2035 41 41 123 330 619 2035 59 125 125 865 2036 40 41 123 561 2035 61 2026 40 41 59 870 40 2035 340 753 41 123 561 2037 61 2035 354 2038 40 41 59 619 2035 59 2035 61 2037 59 125 2039 61 753 59 125 775 58 2000 2040 123 753 125 59 125 59 ,"{'AvgLine': 10, 'CountLine': 124, 'CountStmt': 66, 'MaxNesting': 3, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 49, 'MaxEssential': 5, 'SumEssential': 16, 'AvgCyclomatic': 2, 'CountLineCode': 89, 'CountStmtDecl': 24, 'MaxCyclomatic': 7, 'SumCyclomatic': 21, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 28, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 89, 'CountLineCodeExe': 49, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 28, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 55, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
117720,C++,"class ActuatorEffectiveness
{
public:
	ActuatorEffectiveness() = default;
	virtual ~ActuatorEffectiveness() = default;

	static constexpr uint8_t NUM_ACTUATORS = ControlAllocation::NUM_ACTUATORS;
	static constexpr uint8_t NUM_AXES = ControlAllocation::NUM_AXES;

	enum class FlightPhase {
		HOVER_FLIGHT = 0,
		FORWARD_FLIGHT = 1,
		TRANSITION_HF_TO_FF = 2,
		TRANSITION_FF_TO_HF = 3
	};

	/**
	 * Set the current flight phase
	 *
	 * @param Flight phase
	 */
	virtual void setFlightPhase(const FlightPhase &flight_phase)
	{
		_flight_phase = flight_phase;
	}

	/**
	 * Get the control effectiveness matrix if updated
	 *
	 * @return true if updated and matrix is set
	 */
	virtual bool getEffectivenessMatrix(matrix::Matrix<float, NUM_AXES, NUM_ACTUATORS> &matrix, bool force) = 0;

	/**
	 * Get the actuator trims
	 *
	 * @return Actuator trims
	 */
	const matrix::Vector<float, NUM_ACTUATORS> &getActuatorTrim() const
	{
		return _trim;
	}

	/**
	 * Get the current flight phase
	 *
	 * @return Flight phase
	 */
	const FlightPhase &getFlightPhase() const
	{
		return _flight_phase;
	}

	/**
	 * Get the number of actuators
	 */
	virtual int numActuators() const = 0;

protected:
	matrix::Vector<float, NUM_ACTUATORS> _trim;			///< Actuator trim
	FlightPhase _flight_phase{FlightPhase::HOVER_FLIGHT};		///< Current flight phase
};",0,587 2000 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 61 613 59 809 603 2001 2002 61 2003 321 2002 59 809 603 2001 2004 61 2003 321 2004 59 640 587 2005 123 2006 61 1500 44 2007 61 1501 44 2008 61 1502 44 2009 61 1502 125 59 306 864 865 2010 40 601 2005 38 2011 41 123 2012 61 2011 59 125 306 864 569 2013 40 2014 321 2015 60 660 44 2004 44 2002 62 38 2014 44 569 2016 41 61 1500 59 306 601 2014 321 2017 60 660 44 2002 62 38 2018 40 41 601 123 792 2019 59 125 306 601 2005 38 2020 40 41 601 123 792 2021 59 125 306 864 704 2022 40 41 601 61 1500 59 775 58 2014 321 2017 60 660 44 2002 62 2023 59 331 2005 2024 123 2005 321 2025 125 59 331 125 59 ,"{'AvgLine': 4, 'CountLine': 54, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 23, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 23, 'CountLineCodeExe': 4, 'CountLineComment': 25, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 2, 'CountClassDerived': 3, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '1.09', 'AltCountLineComment': 25, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 86, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
117730,C++,"class UavcanAirspeedBridge : public UavcanSensorBridgeBase
{
public:
	static const char *const NAME;

	UavcanAirspeedBridge(uavcan::INode &node);

	const char *get_name() const override { return NAME; }

	int init() override;

private:

	void ias_sub_cb(const uavcan::ReceivedDataStructure<uavcan::equipment::air_data::IndicatedAirspeed> &msg);
	void tas_sub_cb(const uavcan::ReceivedDataStructure<uavcan::equipment::air_data::TrueAirspeed> &msg);
	void oat_sub_cb(const uavcan::ReceivedDataStructure<uavcan::equipment::air_data::StaticTemperature> &msg);

	typedef uavcan::MethodBinder < UavcanAirspeedBridge *,
		void (UavcanAirspeedBridge::*)
		(const uavcan::ReceivedDataStructure<uavcan::equipment::air_data::IndicatedAirspeed> &) >
		IASCbBinder;

	typedef uavcan::MethodBinder < UavcanAirspeedBridge *,
		void (UavcanAirspeedBridge::*)
		(const uavcan::ReceivedDataStructure<uavcan::equipment::air_data::TrueAirspeed> &) >
		TASCbBinder;

	typedef uavcan::MethodBinder < UavcanAirspeedBridge *,
		void (UavcanAirspeedBridge::*)
		(const uavcan::ReceivedDataStructure<uavcan::equipment::air_data::StaticTemperature> &) >
		OATCbBinder;

	uavcan::Subscriber<uavcan::equipment::air_data::IndicatedAirspeed, IASCbBinder> _sub_ias_data;
	uavcan::Subscriber<uavcan::equipment::air_data::TrueAirspeed, TASCbBinder> _sub_tas_data;
	uavcan::Subscriber<uavcan::equipment::air_data::StaticTemperature, OATCbBinder> _sub_oat_data;

	float _last_tas_m_s{0.0f};
	float _last_outside_air_temp_k{0.0f};

};",0,587 2000 58 777 2001 123 777 58 809 601 582 42 601 2002 59 2000 40 2003 321 2004 38 2005 41 59 601 582 42 2006 40 41 601 2007 123 792 2002 59 125 704 2008 40 41 2007 59 773 58 865 2009 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2013 62 38 2014 41 59 865 2015 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2016 62 38 2014 41 59 865 2017 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2018 62 38 2014 41 59 833 2003 321 2019 60 2000 42 44 865 40 2000 321 42 41 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2013 62 38 41 62 2020 59 833 2003 321 2019 60 2000 42 44 865 40 2000 321 42 41 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2016 62 38 41 62 2021 59 833 2003 321 2019 60 2000 42 44 865 40 2000 321 42 41 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2018 62 38 41 62 2022 59 2003 321 2023 60 2003 321 2011 321 2012 321 2013 44 2020 62 2024 59 2003 321 2023 60 2003 321 2011 321 2012 321 2016 44 2021 62 2025 59 2003 321 2023 60 2003 321 2011 321 2012 321 2018 44 2022 62 2026 59 660 2027 123 1500 125 59 660 2028 123 1500 125 59 125 59 ,"{'AvgLine': 10, 'CountLine': 103, 'CountStmt': 27, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 8, 'MaxEssential': 4, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 77, 'CountStmtDecl': 19, 'MaxCyclomatic': 4, 'SumCyclomatic': 9, 'AltAvgLineCode': 8, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 19, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 77, 'CountLineCodeExe': 8, 'CountLineComment': 7, 'AltAvgLineComment': 1, 'AltCountLineBlank': 19, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 98, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
117742,C++,"class UavcanFlowBridge : public UavcanSensorBridgeBase
{
public:
	static const char *const NAME;

	UavcanFlowBridge(uavcan::INode &node);

	const char *get_name() const override { return NAME; }

	int init() override;

private:

	void flow_sub_cb(const uavcan::ReceivedDataStructure<com::hex::equipment::flow::Measurement> &msg);

	typedef uavcan::MethodBinder < UavcanFlowBridge *,
		void (UavcanFlowBridge::*)
		(const uavcan::ReceivedDataStructure<com::hex::equipment::flow::Measurement> &) >
		FlowCbBinder;

	uavcan::Subscriber<com::hex::equipment::flow::Measurement, FlowCbBinder> _sub_flow;

};",0,587 2000 58 777 2001 123 777 58 809 601 582 42 601 2002 59 2000 40 2003 321 2004 38 2005 41 59 601 582 42 2006 40 41 601 2007 123 792 2002 59 125 704 2008 40 41 2007 59 773 58 865 2009 40 601 2003 321 2010 60 2011 321 2012 321 2013 321 2014 321 2015 62 38 2016 41 59 833 2003 321 2017 60 2000 42 44 865 40 2000 321 42 41 40 601 2003 321 2010 60 2011 321 2012 321 2013 321 2014 321 2015 62 38 41 62 2018 59 2003 321 2019 60 2011 321 2012 321 2013 321 2014 321 2015 44 2018 62 2020 59 125 59 ,"{'AvgLine': 10, 'CountLine': 62, 'CountStmt': 13, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 8, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 46, 'CountLineCodeExe': 4, 'CountLineComment': 5, 'AltAvgLineComment': 1, 'AltCountLineBlank': 15, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 19, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117747,C++,"template<typename Type>
class AxisAngle : public Vector<Type, 3>
{
public:
	using Matrix31 = Matrix<Type, 3, 1>;

	/**
	 * Constructor from array
	 *
	 * @param data_ array
	 */
	explicit AxisAngle(const Type data_[3]) :
		Vector<Type, 3>(data_)
	{
	}

	/**
	 * Standard constructor
	 */
	AxisAngle() = default;

	/**
	 * Constructor from Matrix31
	 *
	 * @param other Matrix31 to copy
	 */
	AxisAngle(const Matrix31 &other) :
		Vector<Type, 3>(other)
	{
	}

	/**
	 * Constructor from quaternion
	 *
	 * This sets the instance from a quaternion representing coordinate transformation from
	 * frame 2 to frame 1 where the rotation from frame 1 to frame 2 is described
	 * by a 3-2-1 intrinsic Tait-Bryan rotation sequence.
	 *
	 * @param q quaternion
	 */
	AxisAngle(const Quaternion<Type> &q)
	{
		AxisAngle &v = *this;
		Type mag = q.imag().norm();

		if (fabs(mag) >= Type(1e-10)) {
			v = q.imag() * Type(Type(2) * atan2(mag, q(0)) / mag);

		} else {
			v = q.imag() * Type(Type(2) * Type(sign(q(0))));
		}
	}

	/**
	 * Constructor from dcm
	 *
	 * Instance is initialized from a dcm representing coordinate transformation
	 * from frame 2 to frame 1.
	 *
	 * @param dcm dcm to set quaternion to
	 */
	AxisAngle(const Dcm<Type> &dcm)
	{
		AxisAngle &v = *this;
		v = AxisAngle<Type>(Quaternion<Type>(dcm));
	}

	/**
	 * Constructor from euler angles
	 *
	 * This sets the instance to a quaternion representing coordinate transformation from
	 * frame 2 to frame 1 where the rotation from frame 1 to frame 2 is described
	 * by a 3-2-1 intrinsic Tait-Bryan rotation sequence.
	 *
	 * @param euler euler angle instance
	 */
	AxisAngle(const Euler<Type> &euler)
	{
		AxisAngle &v = *this;
		v = AxisAngle<Type>(Quaternion<Type>(euler));
	}

	/**
	 * Constructor from 3 axis angle values (unit vector * angle)
	 *
	 * @param x r_x*angle
	 * @param y r_y*angle
	 * @param z r_z*angle
	 */
	AxisAngle(Type x, Type y, Type z)
	{
		AxisAngle &v = *this;
		v(0) = x;
		v(1) = y;
		v(2) = z;
	}

	/**
	 * Constructor from axis and angle
	 *
	 * @param axis An axis of rotation, normalized if not unit length
	 * @param angle The amount to rotate
	 */
	AxisAngle(const Matrix31 &axis_, Type angle_)
	{
		AxisAngle &v = *this;
		// make sure axis is a unit vector
		Vector<Type, 3> a = axis_;
		a = a.unit();
		v(0) = a(0) * angle_;
		v(1) = a(1) * angle_;
		v(2) = a(2) * angle_;
	}


	Vector<Type, 3> axis()
	{
		if (Vector<Type, 3>::norm() > 0) {
			return Vector<Type, 3>::unit();

		} else {
			return Vector3<Type>(1, 0, 0);
		}
	}

	Type angle()
	{
		return Vector<Type, 3>::norm();
	}
};",0,822 60 835 2000 62 587 2001 58 777 2002 60 2000 44 1502 62 123 777 58 860 2003 61 2004 60 2000 44 1502 44 1501 62 59 306 648 2001 40 601 2000 2005 91 1502 93 41 58 2002 60 2000 44 1502 62 40 2005 41 123 125 306 2001 40 41 61 613 59 306 2001 40 601 2003 38 2006 41 58 2002 60 2000 44 1502 62 40 2006 41 123 125 306 2001 40 601 2007 60 2000 62 38 2008 41 123 2001 38 2009 61 42 823 59 2000 2010 61 2008 46 2011 40 41 46 2012 40 41 59 688 40 2013 40 2010 41 325 2000 40 1500 41 41 123 2009 61 2008 46 2011 40 41 42 2000 40 2000 40 1502 41 42 2014 40 2010 44 2008 40 1500 41 41 47 2010 41 59 125 630 123 2009 61 2008 46 2011 40 41 42 2000 40 2000 40 1502 41 42 2000 40 2015 40 2008 40 1500 41 41 41 41 59 125 125 306 2001 40 601 2016 60 2000 62 38 2017 41 123 2001 38 2018 61 42 823 59 2018 61 2001 60 2000 62 40 2007 60 2000 62 40 2017 41 41 59 125 306 2001 40 601 2019 60 2000 62 38 2020 41 123 2001 38 2021 61 42 823 59 2021 61 2001 60 2000 62 40 2007 60 2000 62 40 2020 41 41 59 125 306 2001 40 2000 2022 44 2000 2023 44 2000 2024 41 123 2001 38 2025 61 42 823 59 2025 40 1500 41 61 2022 59 2025 40 1501 41 61 2023 59 2025 40 1502 41 61 2024 59 125 306 2001 40 601 2003 38 2026 44 2000 2027 41 123 2001 38 2028 61 42 823 59 330 2002 60 2000 44 1502 62 2029 61 2026 59 2029 61 2029 46 2030 40 41 59 2028 40 1500 41 61 2029 40 1500 41 42 2027 59 2028 40 1501 41 61 2029 40 1501 41 42 2027 59 2028 40 1502 41 61 2029 40 1502 41 42 2027 59 125 2002 60 2000 44 1502 62 2031 40 41 123 688 40 2002 60 2000 44 1502 62 321 2032 40 41 62 1500 41 123 792 2002 60 2000 44 1502 62 321 2033 40 41 59 125 630 123 792 2034 60 2000 62 40 1501 44 1500 44 1500 41 59 125 125 2000 2035 40 41 123 792 2002 60 2000 44 1502 62 321 2036 40 41 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 129, 'CountStmt': 33, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 16, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 62, 'CountStmtDecl': 17, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 62, 'CountLineCodeExe': 28, 'CountLineComment': 53, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 85, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.85', 'AltCountLineComment': 53, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117753,C++,"class MavlinkStreamLandingTarget : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamLandingTarget(mavlink); }

	static constexpr const char *get_name_static() { return ""LANDING_TARGET""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_LANDING_TARGET; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _landing_target_sub.advertised() ? MAVLINK_MSG_ID_LANDING_TARGET_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamLandingTarget(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _landing_target_sub{ORB_ID(landing_target_pose)};

	bool send() override
	{
		landing_target_pose_s target;

		if (_landing_target_sub.update(&target)) {

			mavlink_landing_target_t msg{};

			msg.time_usec = target.timestamp;
			msg.frame = MAV_FRAME_LOCAL_NED;
			msg.x = target.x_rel;
			msg.y = target.y_rel;
			msg.z = target.z_rel;
			msg.position_valid = target.rel_pos_valid;

			mavlink_msg_landing_target_send_struct(_mavlink->get_channel(), &msg);
			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 59 2027 46 2030 61 2031 59 2027 46 2032 61 2024 46 2033 59 2027 46 2034 61 2024 46 2035 59 2027 46 2036 61 2024 46 2037 59 2027 46 2038 61 2024 46 2039 59 2040 40 2041 354 2042 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 43, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 32, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 32, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117760,C++,"class GpsBlendingTest : public ::testing::Test
{
public:
	sensor_gps_s getDefaultGpsData();
	void runSeconds(float duration_s, GpsBlending &gps_blending, sensor_gps_s &gps_data, int instance);
	void runSeconds(float duration_s, GpsBlending &gps_blending, sensor_gps_s &gps_data0, sensor_gps_s &gps_data1);

	uint64_t _time_now_us{1000000};
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2003 2004 40 41 59 865 2005 40 660 2006 44 2007 38 2008 44 2003 38 2009 44 704 2010 41 59 865 2005 40 660 2006 44 2007 38 2008 44 2003 38 2011 44 2003 38 2012 41 59 2013 2014 123 1507 125 59 125 59 ,"{'AvgLine': 20, 'CountLine': 70, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 63, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 18, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 3, 'AltCountLineCode': 63, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117883,C++,"class MavlinkStreamAutopilotStateForGimbalDevice : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamAutopilotStateForGimbalDevice(mavlink); }

	static constexpr const char *get_name_static() { return ""AUTOPILOT_STATE_FOR_GIMBAL_DEVICE""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_AUTOPILOT_STATE_FOR_GIMBAL_DEVICE; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		if (_att_sub.advertised()) {
			return MAVLINK_MSG_ID_AUTOPILOT_STATE_FOR_GIMBAL_DEVICE_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		}

		return 0;
	}

private:
	explicit MavlinkStreamAutopilotStateForGimbalDevice(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _estimator_selector_status_sub{ORB_ID(estimator_selector_status)};
	uORB::Subscription _estimator_status_sub{ORB_ID(estimator_status)};
	uORB::Subscription _att_sub{ORB_ID(vehicle_attitude)};
	uORB::Subscription _lpos_sub{ORB_ID(vehicle_local_position)};
	uORB::Subscription _att_sp_sub{ORB_ID(vehicle_attitude_setpoint)};
	uORB::Subscription _landed_sub{ORB_ID(vehicle_land_detected)};

	bool send() override
	{
		vehicle_attitude_s att;

		if (_att_sub.update(&att)) {
			mavlink_autopilot_state_for_gimbal_device_t msg{};

			//msg.target_system = 0; // TODO
			//msg.target_component = 0; // TODO

			msg.time_boot_us = att.timestamp;
			msg.q[0] = att.q[0];
			msg.q[1] = att.q[1];
			msg.q[2] = att.q[2];
			msg.q[3] = att.q[3];
			msg.q_estimated_delay_us = 0; // I don't know.

			{
				vehicle_local_position_s lpos;

				if (_lpos_sub.copy(&lpos)) {
					msg.vx = lpos.vx;
					msg.vy = lpos.vy;
					msg.vz = lpos.vz;
					msg.v_estimated_delay_us = 0; // I don't know.
				}
			}

			{
				vehicle_attitude_setpoint_s att_sp;

				if (_att_sp_sub.copy(&att_sp)) {
					msg.feed_forward_angular_velocity_z = att_sp.yaw_sp_move_rate;
				}
			}

			{
				estimator_selector_status_s estimator_selector_status;

				if (_estimator_selector_status_sub.update(&estimator_selector_status)) {
					_estimator_status_sub.ChangeInstance(estimator_selector_status.primary_instance);

				}

				estimator_status_s est;

				if (_estimator_status_sub.copy(&est)) {
					msg.estimator_status = est.solution_status_flags;
				}
			}

			{
				vehicle_land_detected_s land_detected;

				if (_landed_sub.copy(&land_detected)) {
					// Ignore take-off and landing states for now.
					msg.landed_state = land_detected.landed ? MAV_LANDED_STATE_ON_GROUND : MAV_LANDED_STATE_IN_AIR;
				}
			}

			mavlink_msg_autopilot_state_for_gimbal_device_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 688 40 2013 46 2014 40 41 41 123 792 2015 43 2016 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 2017 321 2018 2022 123 2023 40 2024 41 125 59 2017 321 2018 2025 123 2026 40 2027 41 125 59 2017 321 2018 2028 123 2029 40 2030 41 125 59 2017 321 2018 2031 123 2032 40 2033 41 125 59 2017 321 2018 2034 123 2035 40 2036 41 125 59 569 2037 40 41 2010 123 2038 2039 59 688 40 2025 46 2040 40 38 2039 41 41 123 2041 2042 123 125 59 330 330 2042 46 2043 61 2039 46 2044 59 2042 46 2045 91 1500 93 61 2039 46 2045 91 1500 93 59 2042 46 2045 91 1501 93 61 2039 46 2045 91 1501 93 59 2042 46 2045 91 1502 93 61 2039 46 2045 91 1502 93 59 2042 46 2045 91 1502 93 61 2039 46 2045 91 1502 93 59 2042 46 2046 61 1500 59 330 123 2047 2048 59 688 40 2028 46 2049 40 38 2048 41 41 123 2042 46 2050 61 2048 46 2050 59 2042 46 2051 61 2048 46 2051 59 2042 46 2052 61 2048 46 2052 59 2042 46 2053 61 1500 59 330 125 125 123 2054 2055 59 688 40 2031 46 2056 40 38 2055 41 41 123 2042 46 2057 61 2055 46 2058 59 125 125 123 2059 2060 59 688 40 2019 46 2040 40 38 2060 41 41 123 2022 46 2061 40 2060 46 2062 41 59 125 2063 2064 59 688 40 2022 46 2065 40 38 2064 41 41 123 2042 46 2066 61 2064 46 2067 59 125 125 123 2068 2069 59 688 40 2034 46 2070 40 38 2069 41 41 123 330 2042 46 2071 61 2069 46 2072 63 2073 58 2074 59 125 125 2075 40 2076 354 2077 40 41 44 38 2042 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 10, 'CountLine': 98, 'CountStmt': 33, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 71, 'CountStmtDecl': 21, 'MaxCyclomatic': 7, 'SumCyclomatic': 15, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 24, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 8, 'AltCountLineCode': 71, 'CountLineCodeExe': 6, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 24, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117886,C++,"class EkfInitializationTest : public ::testing::Test
{
public:
	EkfInitializationTest(): ::testing::Test(),
		_ekf{std::make_shared<Ekf>()},
		_sensor_simulator(_ekf),
		_ekf_wrapper(_ekf) {};

	std::shared_ptr<Ekf> _ekf;
	SensorSimulator _sensor_simulator;
	EkfWrapper _ekf_wrapper;

	const float _init_tilt_period = 1.0; // seconds

	// GTests is calling this
	void SetUp() override
	{
		_ekf->init(0);
	}

	// Use this method to clean up any memory, network etc. after each test
	void TearDown() override
	{
	}

	void initializedOrienationIsMatchingGroundTruth(Quatf true_quaternion)
	{
		const Quatf quat_est = _ekf->getQuaternion();
		const float precision = 0.0002f; // TODO: this is only required for the pitch90 test to pass
		EXPECT_TRUE(matrix::isEqual(quat_est, true_quaternion, precision))
				<< ""quat est = "" << quat_est(0) << "", "" << quat_est(1) << "", ""
				<< quat_est(2) << "", "" << quat_est(3)
				<< ""\nquat true = "" << true_quaternion(0) << "", "" << true_quaternion(1) << "", ""
				<< true_quaternion(2) << "", "" << true_quaternion(3);
	}

	void validStateAfterOrientationInitialization()
	{
		quaternionVarianceBigEnoughAfterOrientationInitialization();
		velocityAndPositionCloseToZero();
		velocityAndPositionVarianceBigEnoughAfterOrientationInitialization();
	}

	void quaternionVarianceBigEnoughAfterOrientationInitialization()
	{
		const matrix::Vector<float, 4> quat_variance = _ekf_wrapper.getQuaternionVariance();
		const float quat_variance_limit = 0.0001f;
		EXPECT_TRUE(quat_variance(1) > quat_variance_limit) << ""quat_variance(1)"" << quat_variance(1);
		EXPECT_TRUE(quat_variance(2) > quat_variance_limit) << ""quat_variance(2)"" << quat_variance(2);
		EXPECT_TRUE(quat_variance(3) > quat_variance_limit) << ""quat_variance(3)"" << quat_variance(3);
	}

	void velocityAndPositionCloseToZero()
	{
		const Vector3f pos = _ekf->getPosition();
		const Vector3f vel = _ekf->getVelocity();

		EXPECT_TRUE(matrix::isEqual(pos, Vector3f{}, 0.002f))
				<< ""pos = "" << pos(0) << "", "" << pos(1) << "", "" << pos(2);
		EXPECT_TRUE(matrix::isEqual(vel, Vector3f{}, 0.003f))
				<< ""vel = "" << vel(0) << "", "" << vel(1) << "", "" << vel(2);
	}

	void velocityAndPositionVarianceBigEnoughAfterOrientationInitialization()
	{
		const Vector3f pos_var = _ekf->getPositionVariance();
		const Vector3f vel_var = _ekf->getVelocityVariance();

		const float pos_variance_limit = 0.1f;
		EXPECT_TRUE(pos_var(0) > pos_variance_limit) << ""pos_var(0)"" << pos_var(0);
		EXPECT_TRUE(pos_var(1) > pos_variance_limit) << ""pos_var(1)"" << pos_var(1);
		EXPECT_TRUE(pos_var(2) > pos_variance_limit) << ""pos_var(2)"" << pos_var(2);

		const float vel_variance_limit = 0.3f;
		EXPECT_TRUE(vel_var(0) > vel_variance_limit) << ""vel_var(0)"" << vel_var(0);
		EXPECT_TRUE(vel_var(1) > vel_variance_limit) << ""vel_var(1)"" << vel_var(1);
		EXPECT_TRUE(vel_var(2) > vel_variance_limit) << ""vel_var(2)"" << vel_var(2);
	}

	void learningCorrectAccelBias()
	{
		const Dcmf R_to_earth = Dcmf(_ekf->getQuaternion());
		const Vector3f dvel_bias_var = _ekf_wrapper.getDeltaVelBiasVariance();
		const Vector3f accel_bias = _ekf->getAccelBias();

		for (int i = 0; i < 3; i++) {
			if (fabsf(R_to_earth(2, i)) > 0.8f) {
				// Highly observable, the variance decreases
				EXPECT_LT(dvel_bias_var(i), 4.0e-6f) << ""axis "" << i;
			}

			EXPECT_LT(accel_bias(i), 4.0e-6f) << ""axis "" << i;
		}
	}
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 58 321 2001 321 2002 40 41 44 2003 123 2004 321 2005 60 2006 62 40 41 125 44 2007 40 2003 41 44 2008 40 2003 41 123 125 59 2009 321 2010 60 2011 62 2003 59 2012 2007 59 2013 2008 59 601 660 2014 61 1501 59 330 330 865 2015 40 41 2016 123 2003 354 2017 40 1500 41 59 125 330 865 2018 40 41 2016 123 125 865 2019 40 2020 2021 41 123 601 2020 2022 61 2003 354 2023 40 41 59 601 660 2024 61 1500 59 330 2025 40 2026 321 2027 40 2022 44 2021 44 2024 41 41 332 362 332 2022 40 1500 41 332 362 332 2022 40 1501 41 332 362 332 2022 40 1502 41 332 362 332 2022 40 1502 41 332 362 332 2021 40 1500 41 332 362 332 2021 40 1501 41 332 362 332 2021 40 1502 41 332 362 332 2021 40 1502 41 59 125 865 2028 40 41 123 2029 40 41 59 2030 40 41 59 2031 40 41 59 125 865 2032 40 41 123 601 2033 321 2034 60 660 44 1502 62 2035 61 2008 46 2036 40 41 59 601 660 2037 61 1500 59 2038 40 2035 40 1501 41 62 2037 41 332 362 332 2035 40 1501 41 59 2038 40 2035 40 1502 41 62 2037 41 332 362 332 2035 40 1502 41 59 2038 40 2035 40 1502 41 62 2037 41 332 362 332 2035 40 1502 41 59 125 865 2039 40 41 123 601 2040 2041 61 2003 354 2042 40 41 59 601 2040 2043 61 2003 354 2044 40 41 59 2045 40 2046 321 2047 40 2041 44 2040 123 125 44 1500 41 41 332 362 332 2041 40 1500 41 332 362 332 2041 40 1501 41 332 362 332 2041 40 1502 41 59 2045 40 2046 321 2047 40 2043 44 2040 123 125 44 1500 41 41 332 362 332 2043 40 1500 41 332 362 332 2043 40 1501 41 332 362 332 2043 40 1502 41 59 125 865 2048 40 41 123 601 2049 2050 61 2003 354 2051 40 41 59 601 2049 2052 61 2003 354 2053 40 41 59 601 660 2054 61 1500 59 2055 40 2050 40 1500 41 62 2054 41 332 362 332 2050 40 1500 41 59 2055 40 2050 40 1501 41 62 2054 41 332 362 332 2050 40 1501 41 59 2055 40 2050 40 1502 41 62 2054 41 332 362 332 2050 40 1502 41 59 601 660 2056 61 1500 59 2055 40 2052 40 1500 41 62 2056 41 332 362 332 2052 40 1500 41 59 2055 40 2052 40 1501 41 62 2056 41 332 362 332 2052 40 1501 41 59 2055 40 2052 40 1502 41 62 2056 41 332 362 332 2052 40 1502 41 59 125 865 2057 40 41 123 601 2058 2059 61 2058 40 2003 354 2060 40 41 41 59 601 2061 2062 61 2008 46 2063 40 41 59 601 2061 2064 61 2003 354 2065 40 41 59 664 40 704 2066 61 1500 59 2066 60 1502 59 2066 349 41 123 688 40 2067 40 2059 40 1502 44 2066 41 41 62 1500 41 123 330 2068 40 2062 40 2066 41 44 1500 41 332 362 332 2066 59 125 2069 40 2064 40 2066 41 44 1500 41 332 362 332 2066 59 125 125 125 59 ,"{'AvgLine': 8, 'CountLine': 95, 'CountStmt': 32, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 77, 'CountStmtDecl': 27, 'MaxCyclomatic': 3, 'SumCyclomatic': 11, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 77, 'CountLineCodeExe': 9, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 24, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117889,C++,"class UavcanMagnetometerBridge : public UavcanSensorBridgeBase
{
public:
	static const char *const NAME;

	UavcanMagnetometerBridge(uavcan::INode &node);

	const char *get_name() const override { return NAME; }

	int init() override;

private:

	int init_driver(uavcan_bridge::Channel *channel) override;

	void mag_sub_cb(const uavcan::ReceivedDataStructure<uavcan::equipment::ahrs::MagneticFieldStrength> &msg);
	void mag2_sub_cb(const uavcan::ReceivedDataStructure<uavcan::equipment::ahrs::MagneticFieldStrength2> &msg);

	typedef uavcan::MethodBinder < UavcanMagnetometerBridge *,
		void (UavcanMagnetometerBridge::*)
		(const uavcan::ReceivedDataStructure<uavcan::equipment::ahrs::MagneticFieldStrength> &) >
		MagCbBinder;

	typedef uavcan::MethodBinder < UavcanMagnetometerBridge *,
		void (UavcanMagnetometerBridge::*)
		(const uavcan::ReceivedDataStructure<uavcan::equipment::ahrs::MagneticFieldStrength2> &) >
		Mag2CbBinder;

	uavcan::Subscriber<uavcan::equipment::ahrs::MagneticFieldStrength, MagCbBinder> _sub_mag;
	uavcan::Subscriber<uavcan::equipment::ahrs::MagneticFieldStrength2, Mag2CbBinder> _sub_mag2;
};",0,587 2000 58 777 2001 123 777 58 809 601 582 42 601 2002 59 2000 40 2003 321 2004 38 2005 41 59 601 582 42 2006 40 41 601 2007 123 792 2002 59 125 704 2008 40 41 2007 59 773 58 704 2009 40 2010 321 2011 42 2012 41 2007 59 865 2013 40 601 2003 321 2014 60 2003 321 2015 321 2016 321 2017 62 38 2018 41 59 865 2019 40 601 2003 321 2014 60 2003 321 2015 321 2016 321 2020 62 38 2018 41 59 833 2003 321 2021 60 2000 42 44 865 40 2000 321 42 41 40 601 2003 321 2014 60 2003 321 2015 321 2016 321 2017 62 38 41 62 2022 59 833 2003 321 2021 60 2000 42 44 865 40 2000 321 42 41 40 601 2003 321 2014 60 2003 321 2015 321 2016 321 2020 62 38 41 62 2023 59 2003 321 2024 60 2003 321 2015 321 2016 321 2017 44 2022 62 2025 59 2003 321 2024 60 2003 321 2015 321 2016 321 2020 44 2023 62 2026 59 125 59 ,"{'AvgLine': 16, 'CountLine': 131, 'CountStmt': 53, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 2, 'AvgLineBlank': 3, 'CountStmtExe': 28, 'MaxEssential': 3, 'SumEssential': 14, 'AvgCyclomatic': 2, 'CountLineCode': 95, 'CountStmtDecl': 25, 'MaxCyclomatic': 5, 'SumCyclomatic': 17, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 31, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 6, 'AltCountLineCode': 95, 'CountLineCodeExe': 25, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 31, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117898,C++,"template<typename T>
class WelfordMean
{
public:
	// For a new value, compute the new count, new mean, the new M2.
	void update(const T &new_value)
	{
		_count++;

		// mean accumulates the mean of the entire dataset
		const T delta{new_value - _mean};
		_mean += delta / _count;

		// M2 aggregates the squared distance from the mean
		// count aggregates the number of samples seen so far
		_M2 += delta.emult(new_value - _mean);
	}

	bool valid() const { return _count > 2; }
	unsigned count() const { return _count; }

	void reset()
	{
		_count = 0;
		_mean = {};
		_M2 = {};
	}

	// Retrieve the mean, variance and sample variance
	T mean() const { return _mean; }
	T variance() const { return _M2 / _count; }
	T sample_variance() const { return _M2 / (_count - 1); }
private:
	T _mean{};
	T _M2{};
	unsigned _count{0};
};",0,822 60 835 2000 62 587 2001 123 777 58 330 865 2002 40 601 2000 38 2003 41 123 2004 349 59 330 601 2000 2005 123 2003 45 2006 125 59 2007 348 2005 47 2004 59 330 330 2008 348 2005 46 2009 40 2003 45 2007 41 59 125 569 2010 40 41 601 123 792 2011 62 1502 59 125 856 2012 40 41 601 123 792 2013 59 125 865 2014 40 41 123 2015 61 1500 59 2016 61 123 125 59 2017 61 123 125 59 125 330 2000 2018 40 41 601 123 792 2019 59 125 2000 2020 40 41 601 123 792 2021 47 2022 59 125 2000 2023 40 41 601 123 792 2024 47 40 2025 45 1501 41 59 125 773 58 2000 2026 123 125 59 2000 2027 123 125 59 856 2028 123 1500 125 59 125 59 ,"{'AvgLine': 3, 'CountLine': 36, 'CountStmt': 22, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 26, 'CountLineCodeExe': 12, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.19', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 38, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
117904,C++,"class UavcanListResponse : public UavcanBaseSubscriber
{
public:
	UavcanListResponse(CanardInstance &ins, UavcanParamManager &pmgr) :
		UavcanBaseSubscriber(ins, """", ""List"", 0),  _param_manager(pmgr) { };

	void subscribe() override
	{
		// Subscribe to requests uavcan.pnp.NodeIDAllocationData
		canardRxSubscribe(&_canard_instance,
				  CanardTransferKindRequest,
				  uavcan_register_List_1_0_FIXED_PORT_ID_,
				  uavcan_register_List_Response_1_0_EXTENT_BYTES_,
				  CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
				  &_subj_sub._canard_sub);

	};

	void callback(const CanardTransfer &receive) override
	{
		PX4_INFO(""List request"");

		uavcan_register_List_Request_1_0 msg;
		uavcan_register_List_Response_1_0 response;

		uavcan_register_List_Request_1_0_initialize_(&msg);
		uavcan_register_List_Response_1_0_initialize_(&response);

		size_t register_in_size_bits = receive.payload_size;
		uavcan_register_List_Request_1_0_deserialize_(&msg, (const uint8_t *)receive.payload, &register_in_size_bits);

		int result {0};

		if (_param_manager.GetParamName(msg.index, response.name) == 0) {
			response.name.name.count = 0;
		}

		uint8_t response_payload_buffer[uavcan_register_List_Response_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_];

		CanardTransfer transfer = {
			.timestamp_usec = hrt_absolute_time() + PUBLISHER_DEFAULT_TIMEOUT_USEC,
			.priority       = CanardPriorityNominal,
			.transfer_kind  = CanardTransferKindResponse,
			.port_id        = uavcan_register_List_1_0_FIXED_PORT_ID_,                // This is the subject-ID.
			.remote_node_id = receive.remote_node_id,       // Messages cannot be unicast, so use UNSET.
			.transfer_id    = receive.transfer_id,
			.payload_size   = uavcan_register_List_Response_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_,
			.payload        = &response_payload_buffer,
		};

		result = uavcan_register_List_Response_1_0_serialize_(&response, response_payload_buffer, &transfer.payload_size);

		if (result == 0) {
			// set the data ready in the buffer and chop if needed
			result = canardTxPush(&_canard_instance, &transfer);
		}

	};

private:
	UavcanParamManager &_param_manager;

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 44 2004 38 2005 41 58 2001 40 2003 44 362 44 362 44 1500 41 44 2006 40 2005 41 123 125 59 865 2007 40 41 2008 123 330 2009 40 38 2010 44 2011 44 2012 44 2013 44 2014 44 38 2015 46 2016 41 59 125 59 865 2017 40 601 2018 38 2019 41 2008 123 2020 40 362 41 59 2021 2022 59 2023 2024 59 2025 40 38 2022 41 59 2026 40 38 2024 41 59 2027 2028 61 2019 46 2029 59 2030 40 38 2022 44 40 601 2031 42 41 2019 46 2032 44 38 2028 41 59 704 2033 123 1500 125 59 688 40 2006 46 2034 40 2022 46 2035 44 2024 46 2036 41 323 1500 41 123 2024 46 2036 46 2036 46 2037 61 1500 59 125 2031 2038 91 2039 93 59 2018 2040 61 123 46 2041 61 2042 40 41 43 2043 44 46 2044 61 2045 44 46 2046 61 2047 44 46 2048 61 2049 44 330 46 2050 61 2019 46 2050 44 330 46 2051 61 2019 46 2051 44 46 2029 61 2039 44 46 2032 61 38 2038 44 125 59 2033 61 2052 40 38 2024 44 2038 44 38 2040 46 2029 41 59 688 40 2033 323 1500 41 123 330 2033 61 2053 40 38 2054 44 38 2040 41 59 125 125 59 773 58 2004 38 2006 59 125 59 ,"{'AvgLine': 17, 'CountLine': 63, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 46, 'CountStmtDecl': 11, 'MaxCyclomatic': 4, 'SumCyclomatic': 6, 'AltAvgLineCode': 13, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 3, 'AltCountLineCode': 46, 'CountLineCodeExe': 3, 'CountLineComment': 4, 'AltAvgLineComment': 1, 'AltCountLineBlank': 15, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117909,C++,"class GeofenceBreachAvoidanceTest : public ::testing::Test
{
public:
	void SetUp() override
	{
		param_control_autosave(false);
	}
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 865 2003 40 41 2004 123 2005 40 655 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 8, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 8, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117914,C++,"class LIS2MDL_SPI : public device::SPI
{
public:
	LIS2MDL_SPI(int bus, uint32_t devid, int bus_frequency, spi_mode_e spi_mode);
	virtual ~LIS2MDL_SPI() = default;

	virtual int     init();
	virtual int     read(unsigned address, void *data, unsigned count);
	virtual int     write(unsigned address, void *data, unsigned count);
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 2004 2005 44 704 2006 44 2007 2008 41 59 864 126 2000 40 41 61 613 59 864 704 2009 40 41 59 864 704 2010 40 856 2011 44 865 42 2012 44 856 2013 41 59 864 704 2014 40 856 2011 44 865 42 2012 44 856 2013 41 59 125 59 ,"{'AvgLine': 14, 'CountLine': 68, 'CountStmt': 24, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 15, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 54, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 9, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 5, 'AltCountLineCode': 54, 'CountLineCodeExe': 14, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117920,C++,"template <typename T>
class AlphaFilter
{
public:
	AlphaFilter() = default;
	explicit AlphaFilter(float alpha) : _alpha(alpha) {}

	~AlphaFilter() = default;

	/**
	 * Set filter parameters for time abstraction
	 *
	 * Both parameters have to be provided in the same units.
	 *
	 * @param sample_interval interval between two samples
	 * @param time_constant filter time constant determining convergence
	 */
	void setParameters(float sample_interval, float time_constant)
	{
		const float denominator = time_constant + sample_interval;

		if (denominator > FLT_EPSILON) {
			setAlpha(sample_interval / denominator);
		}
	}

	bool setCutoffFreq(float sample_freq, float cutoff_freq)
	{
		if ((sample_freq <= 0.f) || (cutoff_freq <= 0.f) || (cutoff_freq >= sample_freq / 2.f)
		    || !isFinite(sample_freq) || !isFinite(cutoff_freq)) {

			// Invalid parameters
			return false;
		}

		setParameters(1.f / sample_freq, 1.f / (2.f * M_PI_F * cutoff_freq));
		_cutoff_freq = cutoff_freq;
		return true;
	}

	/**
	 * Set filter parameter alpha directly without time abstraction
	 *
	 * @param alpha [0,1] filter weight for the previous state. High value - long time constant.
	 */
	void setAlpha(float alpha) { _alpha = alpha; }

	/**
	 * Set filter state to an initial value
	 *
	 * @param sample new initial value
	 */
	void reset(const T &sample) { _filter_state = sample; }

	/**
	 * Add a new raw value to the filter
	 *
	 * @return retrieve the filtered result
	 */
	const T &update(const T &sample)
	{
		_filter_state = updateCalculation(sample);
		return _filter_state;
	}

	const T &getState() const { return _filter_state; }
	float getCutoffFreq() const { return _cutoff_freq; }

protected:
	T updateCalculation(const T &sample) { return (1.f - _alpha) * _filter_state + _alpha * sample; }

	float _cutoff_freq{0.f};
	float _alpha{0.f};
	T _filter_state{};
};",0,822 60 835 2000 62 587 2001 123 777 58 2001 40 41 61 613 59 648 2001 40 660 2002 41 58 2003 40 2002 41 123 125 126 2001 40 41 61 613 59 306 865 2004 40 660 2005 44 660 2006 41 123 601 660 2007 61 2006 43 2005 59 688 40 2007 62 2008 41 123 2009 40 2005 47 2007 41 59 125 125 569 2010 40 660 2011 44 660 2012 41 123 688 40 40 2011 329 1500 41 309 40 2012 329 1500 41 309 40 2012 325 2011 47 1502 41 309 33 2013 40 2011 41 309 33 2013 40 2012 41 41 123 330 792 655 59 125 2004 40 1501 47 2011 44 1501 47 40 1502 42 2014 42 2012 41 41 59 2015 61 2012 59 792 829 59 125 306 865 2016 40 660 2002 41 123 2003 61 2002 59 125 306 865 2017 40 601 2000 38 2018 41 123 2019 61 2018 59 125 306 601 2000 38 2020 40 601 2000 38 2018 41 123 2021 61 2022 40 2018 41 59 792 2021 59 125 601 2000 38 2023 40 41 601 123 792 2024 59 125 660 2025 40 41 601 123 792 2026 59 125 775 58 2000 2027 40 601 2000 38 2018 41 123 792 40 1501 45 2003 41 42 2028 43 2003 42 2018 59 125 660 2029 123 1500 125 59 660 2003 123 1500 125 59 2000 2030 123 125 59 125 59 ,"{'AvgLine': 3, 'CountLine': 74, 'CountStmt': 28, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 38, 'CountStmtDecl': 14, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 38, 'CountLineCodeExe': 17, 'CountLineComment': 24, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.63', 'AltCountLineComment': 24, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 72, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 3}"
117924,C++,"class HMC5883_SPI : public device::SPI
{
public:
	HMC5883_SPI(int bus, uint32_t device, int bus_frequency, spi_mode_e spi_mode);
	virtual ~HMC5883_SPI() = default;

	virtual int	init();
	virtual int	read(unsigned address, void *data, unsigned count);
	virtual int	write(unsigned address, void *data, unsigned count);
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 2004 2001 44 704 2005 44 2006 2007 41 59 864 126 2000 40 41 61 613 59 864 704 2008 40 41 59 864 704 2009 40 856 2010 44 865 42 2011 44 856 2012 41 59 864 704 2013 40 856 2010 44 865 42 2011 44 856 2012 41 59 125 59 ,"{'AvgLine': 15, 'CountLine': 69, 'CountStmt': 24, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 15, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 55, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 9, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 5, 'AltCountLineCode': 55, 'CountLineCodeExe': 18, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117941,C++,"template <class T>
class uORB_over_UAVCAN_Publisher : public UavcanPublisher
{
public:
	uORB_over_UAVCAN_Publisher(CanardInstance &ins, UavcanParamManager &pmgr, const orb_metadata *meta,
				   uint8_t instance = 0) :
		UavcanPublisher(ins, pmgr, ""uorb."", meta->o_name, instance),
		_uorb_meta{meta},
		_uorb_sub(meta)
	{};

	~uORB_over_UAVCAN_Publisher() override = default;

	// Update the uORB Subscription and broadcast a UAVCAN message
	virtual void update() override
	{
		// Not sure if actuator_armed is a good indication of readiness but seems close to it
		if (_uorb_sub.updated() && _port_id != CANARD_PORT_ID_UNSET) {
			T data {};
			_uorb_sub.update(&data);

			CanardTransfer transfer = {
				.timestamp_usec = hrt_absolute_time() + PUBLISHER_DEFAULT_TIMEOUT_USEC,
				.priority       = CanardPriorityNominal,
				.transfer_kind  = CanardTransferKindMessage,
				.port_id        = _port_id, // This is the subject-ID.
				.remote_node_id = CANARD_NODE_ID_UNSET,
				.transfer_id    = _transfer_id,
				.payload_size   = get_payload_size(&data),
				.payload        = &data,
			};

			// set the data ready in the buffer and chop if needed
			++_transfer_id;  // The transfer-ID shall be incremented after every transmission on this subject.
			canardTxPush(&_canard_instance, &transfer);
		}
	};

protected:
	// Default payload-size function -- can specialize in derived class
	size_t get_payload_size(T *msg)
	{
		(void)msg;
		return sizeof(T);
	}

private:
	const orb_metadata *_uorb_meta;
	uORB::Subscription _uorb_sub;
};",0,822 60 587 2000 62 587 2001 58 777 2002 123 777 58 2001 40 2003 38 2004 44 2005 38 2006 44 601 2007 42 2008 44 2009 2010 61 1500 41 58 2002 40 2004 44 2006 44 362 44 2008 354 2011 44 2010 41 44 2012 123 2008 125 44 2013 40 2008 41 123 125 59 126 2001 40 41 2014 61 613 59 330 864 865 2015 40 41 2014 123 330 688 40 2013 46 2016 40 41 307 2017 340 2018 41 123 2000 2019 123 125 59 2013 46 2015 40 38 2019 41 59 2020 2021 61 123 46 2022 61 2023 40 41 43 2024 44 46 2025 61 2026 44 46 2027 61 2028 44 46 2029 61 2017 44 330 46 2030 61 2031 44 46 2032 61 2033 44 46 2034 61 2035 40 38 2019 41 44 46 2036 61 38 2019 44 125 59 330 349 2037 59 330 2038 40 38 2039 44 38 2021 41 59 125 125 59 775 58 330 2040 2041 40 2000 42 2042 41 123 40 865 41 2042 59 792 805 40 2000 41 59 125 773 58 601 2007 42 2012 59 2043 321 2044 2013 59 125 59 ,"{'AvgLine': 11, 'CountLine': 49, 'CountStmt': 11, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 39, 'CountStmtDecl': 8, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 10, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 39, 'CountLineCodeExe': 5, 'CountLineComment': 6, 'AltAvgLineComment': 1, 'AltCountLineBlank': 6, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.15', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117952,C++,"template<typename Type>
class Scalar
{
public:
	Scalar() = delete;

	Scalar(const Matrix<Type, 1, 1> &other) :
		_value{other(0, 0)}
	{
	}

	Scalar(Type other) : _value(other)
	{
	}

	operator const Type &()
	{
		return _value;
	}

	operator Matrix<Type, 1, 1>() const
	{
		Matrix<Type, 1, 1> m;
		m(0, 0) = _value;
		return m;
	}

	operator Vector<Type, 1>() const
	{
		Vector<Type, 1> m;
		m(0) = _value;
		return m;
	}

private:
	const Type _value;

};",0,822 60 835 2000 62 587 2001 123 777 58 2001 40 41 61 619 59 2001 40 601 2002 60 2000 44 1501 44 1501 62 38 2003 41 58 2004 123 2003 40 1500 44 1500 41 125 123 125 2001 40 2000 2003 41 58 2004 40 2003 41 123 125 758 601 2000 38 40 41 123 792 2004 59 125 758 2002 60 2000 44 1501 44 1501 62 40 41 601 123 2002 60 2000 44 1501 44 1501 62 2005 59 2005 40 1500 44 1500 41 61 2004 59 792 2005 59 125 758 2006 60 2000 44 1501 62 40 41 601 123 2006 60 2000 44 1501 62 2007 59 2007 40 1500 41 61 2004 59 792 2007 59 125 773 58 601 2000 2004 59 125 59 ,"{'AvgLine': 4, 'CountLine': 37, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 30, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 30, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 16, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117956,C++,"class MavlinkStreamDebugVect : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamDebugVect(mavlink); }

	static constexpr const char *get_name_static() { return ""DEBUG_VECT""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_DEBUG_VECT; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _debug_sub.advertised() ? MAVLINK_MSG_ID_DEBUG_VECT_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamDebugVect(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _debug_sub{ORB_ID(debug_vect)};

	bool send() override
	{
		debug_vect_s debug;

		if (_debug_sub.update(&debug)) {
			mavlink_debug_vect_t msg{};
			msg.time_usec = debug.timestamp;
			memcpy(msg.name, debug.name, sizeof(msg.name));
			msg.name[sizeof(msg.name) - 1] = '\0'; // enforce null termination
			msg.x = debug.x;
			msg.y = debug.y;
			msg.z = debug.z;

			mavlink_msg_debug_vect_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 59 2030 40 2027 46 2031 44 2024 46 2031 44 805 40 2027 46 2031 41 41 59 2027 46 2031 91 805 40 2027 46 2031 41 45 1501 93 61 314 59 330 2027 46 2032 61 2024 46 2032 59 2027 46 2033 61 2024 46 2033 59 2027 46 2034 61 2024 46 2034 59 2035 40 2036 354 2037 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 42, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 32, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 32, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117964,C++,"class BST : public device::I2C, public I2CSPIDriver<BST>
{
public:
	BST(const I2CSPIDriverConfig &config);
	~BST() override = default;

	static void print_usage();

	int		init() override;

	int		probe() override;

	void			RunImpl();
private:

	static constexpr unsigned		_interval{100_ms};

	uORB::Subscription	_gps_sub{ORB_ID(vehicle_gps_position)};
	uORB::Subscription	_attitude_sub{ORB_ID(vehicle_attitude)};
	uORB::Subscription	_battery_sub{ORB_ID(battery_status)};


	template <typename T>
	void			send_packet(BSTPacket<T> &packet)
	{
		packet.length = sizeof(packet) - 1;	// Length
		packet.crc = crc8(reinterpret_cast<uint8_t *>(&packet.type), sizeof(packet) - 2);

		transfer(reinterpret_cast<uint8_t *>(&packet), sizeof(packet), nullptr, 0);
	}

	template <typename T_SEND, typename T_RECV>
	void				send_packet(BSTPacket<T_SEND> &packet_send, BSTPacket<T_RECV> &packet_recv)
	{
		packet_send.length = sizeof(packet_send) - 1;	// Length
		packet_send.crc = crc8(reinterpret_cast<uint8_t *>(&packet_send.type), sizeof(packet_send) - 2);
		transfer(reinterpret_cast<uint8_t *>(&packet_send), sizeof(packet_send), reinterpret_cast<uint8_t *>(&packet_recv),
			 sizeof(packet_recv));
	}

	static uint8_t	crc8(uint8_t *data, size_t len);

	//! Byte swap unsigned short
	uint16_t swap_uint16(uint16_t val)
	{
		return (val << 8) | (val >> 8);
	}

	//! Byte swap short
	int16_t swap_int16(int16_t val)
	{
		return (val << 8) | ((val >> 8) & 0xFF);
	}

	//! Byte swap unsigned int
	uint32_t swap_uint32(uint32_t val)
	{
		val = ((val << 8) & 0xFF00FF00) | ((val >> 8) & 0xFF00FF);
		return (val << 16) | (val >> 16);
	}

	//! Byte swap int
	int32_t swap_int32(int32_t val)
	{
		val = ((val << 8) & 0xFF00FF00) | ((val >> 8) & 0xFF00FF);
		return (val << 16) | ((val >> 16) & 0xFFFF);
	}
};",0,587 2000 58 777 2001 321 2002 44 777 2003 60 2000 62 123 777 58 2000 40 601 2004 38 2005 41 59 126 2000 40 41 2006 61 613 59 809 865 2007 40 41 59 704 2008 40 41 2006 59 704 2009 40 41 2006 59 865 2010 40 41 59 773 58 809 603 856 2011 123 1503 125 59 2012 321 2013 2014 123 2015 40 2016 41 125 59 2012 321 2013 2017 123 2018 40 2019 41 125 59 2012 321 2013 2020 123 2021 40 2022 41 125 59 822 60 835 2023 62 865 2024 40 2025 60 2023 62 38 2026 41 123 2026 46 2027 61 805 40 2026 41 45 1501 59 330 2026 46 2028 61 2029 40 786 60 2030 42 62 40 38 2026 46 2031 41 44 805 40 2026 41 45 1502 41 59 2032 40 786 60 2030 42 62 40 38 2026 41 44 805 40 2026 41 44 753 44 1500 41 59 125 822 60 835 2033 44 835 2034 62 865 2024 40 2025 60 2033 62 38 2035 44 2025 60 2034 62 38 2036 41 123 2035 46 2037 61 805 40 2035 41 45 1501 59 330 2035 46 2038 61 2039 40 786 60 2040 42 62 40 38 2035 46 2041 41 44 805 40 2035 41 45 1502 41 59 2042 40 786 60 2040 42 62 40 38 2035 41 44 805 40 2035 41 44 786 60 2040 42 62 40 38 2036 41 44 805 40 2036 41 41 59 125 809 2043 2044 40 2043 42 2045 44 2046 2047 41 59 330 2048 2049 40 2048 2050 41 123 792 40 2050 332 1502 41 124 40 2050 355 1502 41 59 125 330 2051 2052 40 2051 2050 41 123 792 40 2050 332 1502 41 124 40 40 2050 355 1502 41 38 1504 41 59 125 330 2053 2054 40 2053 2050 41 123 2050 61 40 40 2050 332 1502 41 38 1511 41 124 40 40 2050 355 1502 41 38 1509 41 59 792 40 2050 332 1503 41 124 40 2050 355 1503 41 59 125 330 2055 2056 40 2055 2050 41 123 2050 61 40 40 2050 332 1502 41 38 1511 41 124 40 40 2050 355 1502 41 38 1509 41 59 792 40 2050 332 1503 41 124 40 40 2050 355 1503 41 38 1506 41 59 125 125 59 ,"{'AvgLine': 13, 'CountLine': 192, 'CountStmt': 75, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 40, 'MaxEssential': 3, 'SumEssential': 14, 'AvgCyclomatic': 2, 'CountLineCode': 152, 'CountStmtDecl': 35, 'MaxCyclomatic': 5, 'SumCyclomatic': 24, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 36, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 1, 'CountDeclMethod': 13, 'AltCountLineCode': 152, 'CountLineCodeExe': 26, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 36, 'CountClassCoupled': 10, 'CountClassDerived': 0, 'CountLineCodeDecl': 30, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 24, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 98, 'SumCyclomaticModified': 24, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 7, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117971,C++,"class UavcanAccessServiceRequest : public UavcanServiceRequest
{
public:
	UavcanAccessServiceRequest(CanardInstance &ins, UavcanParamManager &pmgr) :
		UavcanServiceRequest(ins, """", ""Access"", uavcan_register_Access_1_0_FIXED_PORT_ID_,
				     uavcan_register_Access_Response_1_0_EXTENT_BYTES_),  _param_manager(pmgr)  { };

	bool setPortId(CanardNodeID node_id, uavcan_register_Name_1_0 &name, UavcanServiceRequestInterface *handler)
	{
		int result {0};

		uavcan_register_Access_Request_1_0 request_msg;
		request_msg.value.natural16.value.count = 1;
		uavcan_register_Value_1_0_select_natural16_(&request_msg.value); // Set to natural16 so that ParamManager casts type

		//FIXME ParamManager only has notion of being either sub/pub have to find a portable way to address trhis
		name.name.elements[7] = 's'; //HACK Change pub into sub

		if (_param_manager.GetParamByName(name, request_msg.value)) {
			name.name.elements[7] = 'p'; //HACK Change sub into pub
			memcpy(&request_msg.name, &name, sizeof(request_msg.name));

			uint8_t request_payload_buffer[uavcan_register_Access_Request_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_];

			CanardTransfer transfer = {
				.timestamp_usec = hrt_absolute_time() + PUBLISHER_DEFAULT_TIMEOUT_USEC,
				.priority       = CanardPriorityNominal,
				.transfer_kind  = CanardTransferKindRequest,
				.port_id        = _portID,                // This is the subject-ID.
				.remote_node_id = node_id,       // Messages cannot be unicast, so use UNSET.
				.transfer_id    = request_transfer_id,
				.payload_size   = uavcan_register_Access_Request_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_,
				.payload        = &request_payload_buffer,
			};

			result = uavcan_register_Access_Request_1_0_serialize_(&request_msg, request_payload_buffer, &transfer.payload_size);

			if (result == 0) {
				return request(&transfer, handler);

			} else {
				return false;
			}

		} else {
			return false;
		}
	};

private:
	UavcanParamManager &_param_manager;

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 44 2004 38 2005 41 58 2001 40 2003 44 362 44 362 44 2006 44 2007 41 44 2008 40 2005 41 123 125 59 569 2009 40 2010 2011 44 2012 38 2013 44 2014 42 2015 41 123 704 2016 123 1500 125 59 2017 2018 59 2018 46 2019 46 2020 46 2019 46 2021 61 1501 59 2022 40 38 2018 46 2019 41 59 330 330 2013 46 2013 46 2023 91 1502 93 61 314 59 330 688 40 2008 46 2024 40 2013 44 2018 46 2019 41 41 123 2013 46 2013 46 2023 91 1502 93 61 314 59 330 2025 40 38 2018 46 2013 44 38 2013 44 805 40 2018 46 2013 41 41 59 2026 2027 91 2028 93 59 2029 2030 61 123 46 2031 61 2032 40 41 43 2033 44 46 2034 61 2035 44 46 2036 61 2037 44 46 2038 61 2039 44 330 46 2040 61 2011 44 330 46 2041 61 2042 44 46 2043 61 2028 44 46 2044 61 38 2027 44 125 59 2016 61 2045 40 38 2018 44 2027 44 38 2030 46 2046 41 59 688 40 2016 323 1500 41 123 792 2047 40 38 2030 44 2015 41 59 125 630 123 792 655 59 125 125 630 123 792 655 59 125 125 59 773 58 2004 38 2008 59 125 59 ,"{'AvgLine': 22, 'CountLine': 53, 'CountStmt': 12, 'MaxNesting': 2, 'AvgLineCode': 17, 'AvgEssential': 2, 'AvgLineBlank': 4, 'CountStmtExe': 4, 'MaxEssential': 3, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 40, 'CountStmtDecl': 8, 'MaxCyclomatic': 3, 'SumCyclomatic': 4, 'AltAvgLineCode': 17, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 2, 'AltCountLineCode': 40, 'CountLineCodeExe': 7, 'CountLineComment': 6, 'AltAvgLineComment': 3, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.15', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117976,C++,"template <size_t N>
class Bitset
{
public:

	size_t count() const
	{
		size_t total = 0;

		for (auto x : _data) {
			while (x) {
				total += x & 1;
				x >>= 1;
			}
		}

		return total;
	}

	size_t size() const { return N; }

	bool operator[](size_t position) const
	{
		return _data[array_index(position)] & element_mask(position);
	}

	void set(size_t pos, bool val = true)
	{
		const uint8_t bitmask = element_mask(pos);

		if (val) {
			_data[array_index(pos)] |= bitmask;

		} else {
			_data[array_index(pos)] &= ~bitmask;
		}
	}

private:
	static constexpr uint8_t BITS_PER_ELEMENT = 8;
	static constexpr size_t ARRAY_SIZE = (N % BITS_PER_ELEMENT == 0) ? N / BITS_PER_ELEMENT : N / BITS_PER_ELEMENT + 1;
	static constexpr size_t ALLOCATED_BITS = ARRAY_SIZE * BITS_PER_ELEMENT;

	size_t array_index(size_t position) const { return position / BITS_PER_ELEMENT; }
	uint8_t element_mask(size_t position) const { return (1 << position % BITS_PER_ELEMENT); }

	uint8_t _data[ARRAY_SIZE] {};
};",0,822 60 2000 2001 62 587 2002 123 777 58 2000 2003 40 41 601 123 2000 2004 61 1500 59 664 40 561 2005 58 2006 41 123 870 40 2005 41 123 2004 348 2005 38 1501 59 2005 358 1501 59 125 125 792 2004 59 125 2000 2007 40 41 601 123 792 2001 59 125 569 758 91 93 40 2000 2008 41 601 123 792 2009 91 2010 40 2008 41 93 38 2011 40 2008 41 59 125 865 2012 40 2000 2013 44 569 2014 61 829 41 123 601 2015 2016 61 2017 40 2013 41 59 688 40 2014 41 123 2018 91 2019 40 2013 41 93 347 2016 59 125 630 123 2020 91 2021 40 2013 41 93 301 126 2016 59 125 125 773 58 809 603 2022 2023 61 1502 59 809 603 2000 2024 61 40 2001 37 2023 323 1500 41 63 2001 47 2023 58 2001 47 2023 43 1501 59 809 603 2000 2025 61 2024 42 2023 59 2000 2026 40 2000 2008 41 601 123 792 2008 47 2023 59 125 2022 2027 40 2000 2008 41 601 123 792 40 1501 332 2008 37 2023 41 59 125 2022 2028 91 2024 93 123 125 59 125 59 ,"{'AvgLine': 5, 'CountLine': 47, 'CountStmt': 25, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 14, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 36, 'CountLineCodeExe': 16, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 79, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 3, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117983,C++,"class VFile : public cdev::CDev
{
public:
	VFile(const char *fname, mode_t mode) : cdev::CDev(fname) {}
	~VFile() override = default;

	ssize_t write(cdev::file_t *handlep, const char *buffer, size_t buflen) override
	{
		// ignore what was written, but let pollers know something was written
		poll_notify(POLLIN);
		return buflen;
	}
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 601 582 42 2003 44 2004 2005 41 58 2001 321 2002 40 2003 41 123 125 126 2000 40 41 2006 61 613 59 2007 2008 40 2001 321 2009 42 2010 44 601 582 42 2011 44 2012 2013 41 2006 123 330 2014 40 2015 41 59 792 2013 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 13, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 11, 'CountLineCodeExe': 2, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117984,C++,"class LockGuard
{
public:
	explicit LockGuard(pthread_mutex_t &mutex) :
		_mutex(mutex)
	{
		pthread_mutex_lock(&_mutex);
	}

	LockGuard(const LockGuard &other) = delete;
	LockGuard &operator=(const LockGuard &other) = delete;

	~LockGuard()
	{
		pthread_mutex_unlock(&_mutex);
	}

private:
	pthread_mutex_t &_mutex;
};",0,587 2000 123 777 58 648 2000 40 2001 38 2002 41 58 2003 40 2002 41 123 2004 40 38 2003 41 59 125 2000 40 601 2000 38 2005 41 61 619 59 2000 38 758 61 40 601 2000 38 2005 41 61 619 59 126 2000 40 41 123 2006 40 38 2003 41 59 125 773 58 2001 38 2003 59 125 59 ,"{'AvgLine': 4, 'CountLine': 20, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 17, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117992,C++,"class MavlinkStreamMountOrientation : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamMountOrientation(mavlink); }

	static constexpr const char *get_name_static() { return ""MOUNT_ORIENTATION""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_MOUNT_ORIENTATION; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _mount_orientation_sub.advertised() ? MAVLINK_MSG_ID_MOUNT_ORIENTATION_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamMountOrientation(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _mount_orientation_sub{ORB_ID(mount_orientation)};
	uORB::Subscription _lpos_sub{ORB_ID(vehicle_local_position)};

	bool send() override
	{
		mount_orientation_s mount_orientation;

		if (_mount_orientation_sub.update(&mount_orientation)) {
			mavlink_mount_orientation_t msg{};

			msg.roll = math::degrees(mount_orientation.attitude_euler_angle[0]);
			msg.pitch = math::degrees(mount_orientation.attitude_euler_angle[1]);
			msg.yaw = math::degrees(mount_orientation.attitude_euler_angle[2]);

			vehicle_local_position_s lpos{};
			_lpos_sub.copy(&lpos);
			msg.yaw_absolute = math::degrees(matrix::wrap_2pi(lpos.heading + mount_orientation.attitude_euler_angle[2]));

			mavlink_msg_mount_orientation_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 2017 321 2018 2022 123 2023 40 2024 41 125 59 569 2025 40 41 2010 123 2026 2027 59 688 40 2019 46 2028 40 38 2027 41 41 123 2029 2030 123 125 59 2030 46 2031 61 2032 321 2033 40 2027 46 2034 91 1500 93 41 59 2030 46 2035 61 2032 321 2033 40 2027 46 2034 91 1501 93 41 59 2030 46 2036 61 2032 321 2033 40 2027 46 2034 91 1502 93 41 59 2037 2038 123 125 59 2022 46 2039 40 38 2038 41 59 2030 46 2040 61 2032 321 2033 40 2041 321 2042 40 2038 46 2043 43 2027 46 2034 91 1502 93 41 41 59 2044 40 2045 354 2046 40 41 44 38 2030 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 45, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 33, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118005,C++,"class FlightTaskDescend : public FlightTask
{
public:
	FlightTaskDescend() = default;
	virtual ~FlightTaskDescend() = default;

	bool update() override;
	bool activate(const vehicle_local_position_setpoint_s &last_setpoint) override;

private:
	DEFINE_PARAMETERS_CUSTOM_PARENT(FlightTask,
					(ParamFloat<px4::params::MPC_THR_HOVER>) _param_mpc_thr_hover, ///< thrust at hover equilibrium
					(ParamFloat<px4::params::MPC_LAND_SPEED>) _param_mpc_land_speed ///< velocity for controlled descend
				       )
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 61 613 59 569 2002 40 41 2003 59 569 2004 40 601 2005 38 2006 41 2003 59 773 58 2007 40 2001 44 40 2008 60 2009 321 2010 321 2011 62 41 2012 44 331 40 2008 60 2009 321 2010 321 2013 62 41 2014 331 41 125 59 ,"{'AvgLine': 10, 'CountLine': 40, 'CountStmt': 12, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 7, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 8, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 31, 'CountLineCodeExe': 5, 'CountLineComment': 6, 'AltAvgLineComment': 2, 'AltCountLineBlank': 5, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 43, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.19', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118004,C++,"class UavcanLegacyBatteryInfoSubscriber : public UavcanDynamicPortSubscriber
{
public:
	UavcanLegacyBatteryInfoSubscriber(CanardInstance &ins, UavcanParamManager &pmgr, uint8_t instance = 0) :
		UavcanDynamicPortSubscriber(ins, pmgr, ""legacy."", ""legacy_bms"", instance) { };

	void subscribe() override
	{
		// Subscribe to messages reg.drone.service.battery.Status.0.1
		canardRxSubscribe(&_canard_instance,
				  CanardTransferKindMessage,
				  _subj_sub._canard_sub.port_id,
				  legacy_equipment_power_BatteryInfo_1_0_EXTENT_BYTES_,
				  CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC * 100, //FIXME timeout caused by scheduler
				  &_subj_sub._canard_sub);
	};

	void callback(const CanardTransfer &receive) override
	{
		PX4_INFO(""Legacy BmsCallback"");

		legacy_equipment_power_BatteryInfo_1_0 bat_info {};
		size_t bat_info_size_in_bytes = receive.payload_size;
		legacy_equipment_power_BatteryInfo_1_0_deserialize_(&bat_info, (const uint8_t *)receive.payload,
				&bat_info_size_in_bytes);

		battery_status_s bat_status {0};
		bat_status.timestamp = hrt_absolute_time();
		bat_status.voltage_filtered_v = bat_info.voltage;
		bat_status.current_filtered_a = bat_info.current;
		bat_status.current_average_a = bat_info.average_power_10sec;
		bat_status.remaining = bat_info.state_of_charge_pct / 100.0f;
		bat_status.scale = -1;

		if (bat_info.status_flags & legacy_equipment_power_BatteryInfo_1_0_STATUS_FLAG_TEMP_HOT) {
			bat_status.temperature = 100;

		} else if (bat_info.status_flags & legacy_equipment_power_BatteryInfo_1_0_STATUS_FLAG_TEMP_COLD) {
			bat_status.temperature = -30;

		} else {
			bat_status.temperature = 20; // Temp okay ?
		}

		bat_status.cell_count = 0; // Unknown
		bat_status.connected = bat_info.status_flags & legacy_equipment_power_BatteryInfo_1_0_STATUS_FLAG_IN_USE;
		bat_status.source = 1; // External
		bat_status.capacity = bat_info.full_charge_capacity_wh;
		bat_status.serial_number = bat_info.model_instance_id & 0xFFFF; // Take first 16 bits
		bat_status.state_of_health = bat_info.state_of_health_pct; // External
		bat_status.id = bat_info.battery_id;

		/* Missing fields in UAVCANv0 legacy message
		 * temperature (partly)
		 * cell_count
		 * connected (partly)
		 * priority
		 * cycle_count
		 * time_remaining_s
		 * average_time_to_empty
		 * manufacture_date
		 * max_error
		 * interface_error
		 * voltage_cell_v
		 * max_cell_voltage_delta
		 * is_powering_off
		 * warning
		 */


		_battery_status_pub.publish(bat_status);
		print_message(ORB_ID(battery_status), bat_status);
	};

private:
	uORB::PublicationMulti<battery_status_s> _battery_status_pub{ORB_ID(battery_status)};

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 44 2004 38 2005 44 2006 2007 61 1500 41 58 2001 40 2003 44 2005 44 362 44 362 44 2007 41 123 125 59 865 2008 40 41 2009 123 330 2010 40 38 2011 44 2012 44 2013 46 2014 46 2015 44 2016 44 2017 42 1503 44 330 38 2013 46 2014 41 59 125 59 865 2018 40 601 2019 38 2020 41 2009 123 2021 40 362 41 59 2022 2023 123 125 59 2024 2025 61 2020 46 2026 59 2027 40 38 2023 44 40 601 2006 42 41 2020 46 2028 44 38 2025 41 59 2029 2030 123 1500 125 59 2030 46 2031 61 2032 40 41 59 2030 46 2033 61 2023 46 2034 59 2030 46 2035 61 2023 46 2036 59 2030 46 2037 61 2023 46 2038 59 2030 46 2039 61 2023 46 2040 47 1503 59 2030 46 2041 61 45 1501 59 688 40 2023 46 2042 38 2043 41 123 2030 46 2044 61 1503 59 125 630 688 40 2023 46 2042 38 2045 41 123 2030 46 2046 61 45 1503 59 125 630 123 2030 46 2047 61 1503 59 330 125 2030 46 2048 61 1500 59 330 2030 46 2049 61 2023 46 2042 38 2050 59 2030 46 2051 61 1501 59 330 2030 46 2052 61 2023 46 2053 59 2030 46 2054 61 2023 46 2055 38 1506 59 330 2030 46 2056 61 2023 46 2057 59 330 2030 46 2058 61 2023 46 2059 59 305 2060 46 2061 40 2030 41 59 2062 40 2063 40 2064 41 44 2030 41 59 125 59 773 58 2065 321 2066 60 2067 62 2068 123 2069 40 2070 41 125 59 125 59 ,"{'AvgLine': 22, 'CountLine': 78, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 48, 'CountStmtDecl': 7, 'MaxCyclomatic': 4, 'SumCyclomatic': 6, 'AltAvgLineCode': 14, 'AvgLineComment': 7, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 3, 'AltCountLineCode': 48, 'CountLineCodeExe': 3, 'CountLineComment': 23, 'AltAvgLineComment': 7, 'AltCountLineBlank': 13, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.48', 'AltCountLineComment': 23, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118020,C++,"class ETSAirspeed : public Airspeed, public I2CSPIDriver<ETSAirspeed>
{
public:
	ETSAirspeed(const I2CSPIDriverConfig &config);

	virtual ~ETSAirspeed() = default;

	static void print_usage();

	void	RunImpl();

	int init() override;
protected:
	int	measure() override;
	int	collect() override;
};",0,587 2000 58 777 2001 44 777 2002 60 2000 62 123 777 58 2000 40 601 2003 38 2004 41 59 864 126 2000 40 41 61 613 59 809 865 2005 40 41 59 865 2006 40 41 59 704 2007 40 41 2008 59 775 58 704 2009 40 41 2008 59 704 2010 40 41 2008 59 125 59 ,"{'AvgLine': 23, 'CountLine': 158, 'CountStmt': 45, 'MaxNesting': 2, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 5, 'CountStmtExe': 28, 'MaxEssential': 4, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 101, 'CountStmtDecl': 14, 'MaxCyclomatic': 5, 'SumCyclomatic': 14, 'AltAvgLineCode': 15, 'AvgLineComment': 3, 'CountClassBase': 0, 'CountLineBlank': 35, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 5, 'CountDeclMethod': 7, 'AltCountLineCode': 101, 'CountLineCodeExe': 22, 'CountLineComment': 22, 'AltAvgLineComment': 3, 'AltCountLineBlank': 35, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.22', 'AltCountLineComment': 22, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118031,C++,"class MCP23009 : public device::I2C
{
public:
	MCP23009(int bus, int address, int first_minor = 0, int bus_frequency = 400000);
	virtual ~MCP23009();

	int init(uint8_t direction, uint8_t intital = 0, uint8_t pull_up = 0);

protected:
	int probe() override;

private:
	static constexpr int num_gpios = 8;
	static const gpio_operations_s	gpio_ops;

	struct mcp23009_gpio_dev_s {
		struct gpio_dev_s gpio;
		uint8_t id;
		MCP23009 *obj;
	};

	static int go_read(struct gpio_dev_s *dev, bool *value);
	static int go_write(struct gpio_dev_s *dev, bool value);
	static int go_setpintype(struct gpio_dev_s *dev, enum gpio_pintype_e pintype);

	int go_read(int id, bool *value);
	int go_write(int id, bool value);
	int go_setpintype(int id, enum gpio_pintype_e pintype);

	int read_reg(Microchip_MCP23009::Register address, uint8_t &data);
	int write_reg(Microchip_MCP23009::Register address, uint8_t data);

	const int _first_minor;
	mcp23009_gpio_dev_s _gpio[num_gpios] {};
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 704 2004 44 704 2005 61 1500 44 704 2006 61 1507 41 59 864 126 2000 40 41 59 704 2007 40 2008 2009 44 2008 2010 61 1500 44 2008 2011 61 1500 41 59 775 58 704 2012 40 41 2013 59 773 58 809 603 704 2014 61 1502 59 809 601 2015 2016 59 816 2017 123 816 2018 2019 59 2008 2020 59 2000 42 2021 59 125 59 809 704 2022 40 816 2023 42 2024 44 569 42 2025 41 59 809 704 2026 40 816 2023 42 2024 44 569 2025 41 59 809 704 2027 40 816 2023 42 2024 44 640 2028 2029 41 59 704 2022 40 704 2030 44 569 42 2025 41 59 704 2026 40 704 2030 44 569 2025 41 59 704 2027 40 704 2030 44 640 2028 2029 41 59 704 2031 40 2032 321 2033 2004 44 2008 38 2034 41 59 704 2035 40 2032 321 2033 2004 44 2008 2034 41 59 601 704 2036 59 2017 2037 91 2014 93 123 125 59 125 59 ,"{'AvgLine': 12, 'CountLine': 188, 'CountStmt': 70, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 43, 'MaxEssential': 5, 'SumEssential': 19, 'AvgCyclomatic': 1, 'CountLineCode': 150, 'CountStmtDecl': 34, 'MaxCyclomatic': 5, 'SumCyclomatic': 23, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 33, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 12, 'AltCountLineCode': 150, 'CountLineCodeExe': 45, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 33, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 28, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 23, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 94, 'SumCyclomaticModified': 23, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 8, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118037,C++,"class History
{
public:
	/**
	 * Try to append the current line to the history.
	 * Ignore the line if it is empty or duplicate of the
	 * last added one.
	 *
	 * Drop the first entry of the history if we reach the
	 * MAX_HISTORY_SIZE.
	 *
	 * @param line: command line to be added.
	 */
	void try_to_add(const std::string &line);

	/**
	 * After executing a command in the shell, we want to be at
	 * the end of the history again.
	 */
	void reset_to_end();

	/**
	 * If we start scrolling up in the history, we can try to save
	 * the current command line. When we scroll back down, we can
	 * get it out again.
	 *
	 * @param line: line to be saved
	 */
	void try_to_save_current_line(const std::string &line);


	/**
	 * Set the previous (earlier) command from the history.
	 *
	 * @param line: swap to previous line if available.
	 */
	void get_previous(std::string &line);

	/**
	 * Set the next (more recent) command from the history.
	 *
	 * @param line: swap to next line if available, otherwise saved current.
	 */
	void get_next(std::string &line);

	static const unsigned MAX_HISTORY_SIZE = 100;
private:
	std::vector<std::string> _history;
	std::vector<std::string>::iterator _current_history_entry;
	std::string _current_line;
};",0,587 2000 123 777 58 306 865 2001 40 601 2002 321 2003 38 2004 41 59 306 865 2005 40 41 59 306 865 2006 40 601 2002 321 2003 38 2004 41 59 306 865 2007 40 2002 321 2003 38 2004 41 59 306 865 2008 40 2002 321 2003 38 2004 41 59 809 601 856 2009 61 1503 59 773 58 2002 321 2010 60 2002 321 2003 62 2011 59 2002 321 2010 60 2002 321 2003 62 321 2012 2013 59 2002 321 2003 2014 59 125 59 ,"{'AvgLine': 14, 'CountLine': 125, 'CountStmt': 38, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 29, 'MaxEssential': 4, 'SumEssential': 14, 'AvgCyclomatic': 3, 'CountLineCode': 68, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 15, 'AltAvgLineCode': 10, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 68, 'CountLineCodeExe': 29, 'CountLineComment': 40, 'AltAvgLineComment': 1, 'AltCountLineBlank': 17, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.59', 'AltCountLineComment': 40, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
118046,C++,"class MavlinkStreamAttitudeTarget : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamAttitudeTarget(mavlink); }

	static constexpr const char *get_name_static() { return ""ATTITUDE_TARGET""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_ATTITUDE_TARGET; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _att_sp_sub.advertised() ? MAVLINK_MSG_ID_ATTITUDE_TARGET_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamAttitudeTarget(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _att_sp_sub{ORB_ID(vehicle_attitude_setpoint)};
	uORB::Subscription _att_rates_sp_sub{ORB_ID(vehicle_rates_setpoint)};
	hrt_abstime _last_att_sp_update{0};

	bool send() override
	{
		vehicle_attitude_setpoint_s att_sp;

		bool updated = false;

		if (_att_sp_sub.update(&att_sp)) {
			_last_att_sp_update = att_sp.timestamp;
			updated = true;

		} else if (hrt_elapsed_time(&_last_att_sp_update) > 500_ms) {
			if (!_att_sp_sub.copy(&att_sp)) {
				att_sp = {};
			}

			updated = _att_rates_sp_sub.updated();
		}

		if (updated) {
			mavlink_attitude_target_t msg{};

			msg.time_boot_ms = att_sp.timestamp / 1000;
			matrix::Quatf(att_sp.q_d).copyTo(msg.q);

			vehicle_rates_setpoint_s att_rates_sp{};
			_att_rates_sp_sub.copy(&att_rates_sp);

			msg.body_roll_rate = att_rates_sp.roll;
			msg.body_pitch_rate = att_rates_sp.pitch;
			msg.body_yaw_rate = att_rates_sp.yaw;

			msg.thrust = matrix::Vector3f(att_sp.thrust_body).norm();

			mavlink_msg_attitude_target_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 2017 321 2018 2022 123 2023 40 2024 41 125 59 2025 2026 123 1500 125 59 569 2027 40 41 2010 123 2028 2029 59 569 2030 61 655 59 688 40 2019 46 2031 40 38 2029 41 41 123 2026 61 2029 46 2032 59 2030 61 829 59 125 630 688 40 2033 40 38 2026 41 62 1504 41 123 688 40 33 2019 46 2034 40 38 2029 41 41 123 2029 61 123 125 59 125 2030 61 2022 46 2030 40 41 59 125 688 40 2030 41 123 2035 2036 123 125 59 2036 46 2037 61 2029 46 2038 47 1504 59 2039 321 2040 40 2029 46 2041 41 46 2042 40 2036 46 2043 41 59 2044 2045 123 125 59 2022 46 2046 40 38 2045 41 59 2036 46 2047 61 2045 46 2048 59 2036 46 2049 61 2045 46 2050 59 2036 46 2051 61 2045 46 2052 59 2036 46 2053 61 2039 321 2054 40 2029 46 2055 41 46 2056 40 41 59 2057 40 2058 354 2059 40 41 44 38 2036 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 64, 'CountStmt': 24, 'MaxNesting': 2, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 15, 'MaxCyclomatic': 5, 'SumCyclomatic': 12, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 18, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 46, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 18, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118049,C++,"class FunctionLandingGear : public FunctionProviderBase
{
public:
	FunctionLandingGear() = default;
	static FunctionProviderBase *allocate(const Context &context) { return new FunctionLandingGear(); }

	void update() override;
	float value(OutputFunction func) override { return _data; }

private:
	uORB::Subscription _topic{ORB_ID(landing_gear)};
	float _data{-1.f};
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 809 2001 42 2002 40 601 2003 38 2004 41 123 792 744 2000 40 41 59 125 865 2005 40 41 2006 59 660 2007 40 2008 2009 41 2006 123 792 2010 59 125 773 58 2011 321 2012 2013 123 2014 40 2015 41 125 59 660 2016 123 45 1501 125 59 125 59 ,"{'AvgLine': 5, 'CountLine': 25, 'CountStmt': 12, 'MaxNesting': 2, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 21, 'CountStmtDecl': 6, 'MaxCyclomatic': 4, 'SumCyclomatic': 6, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 21, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 88, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118058,C++,"template <int N>
class MavlinkStreamActuatorControlTarget : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamActuatorControlTarget<N>(mavlink); }

	static constexpr const char *get_name_static()
	{
		switch (N) {
		case 0:
			return ""ACTUATOR_CONTROL_TARGET0"";

		case 1:
			return ""ACTUATOR_CONTROL_TARGET1"";

		case 2:
			return ""ACTUATOR_CONTROL_TARGET2"";

		case 3:
			return ""ACTUATOR_CONTROL_TARGET3"";
		}

		return ""ACTUATOR_CONTROL_TARGET"";
	}

	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return (_act_ctrl_sub
			&& _act_ctrl_sub->advertised()) ? (MAVLINK_MSG_ID_ACTUATOR_CONTROL_TARGET_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES) : 0;
	}

private:
	explicit MavlinkStreamActuatorControlTarget(Mavlink *mavlink) : MavlinkStream(mavlink)
	{
		// XXX this can be removed once the multiplatform system remaps topics
		switch (N) {
		case 0:
			_act_ctrl_sub = new uORB::Subscription{ORB_ID(actuator_controls_0)};
			break;

		case 1:
			_act_ctrl_sub = new uORB::Subscription{ORB_ID(actuator_controls_1)};
			break;

		case 2:
			_act_ctrl_sub = new uORB::Subscription{ORB_ID(actuator_controls_2)};
			break;

		case 3:
			_act_ctrl_sub = new uORB::Subscription{ORB_ID(actuator_controls_3)};
			break;
		}
	}

	~MavlinkStreamActuatorControlTarget() override
	{
		delete _act_ctrl_sub;
	}

	uORB::Subscription *_act_ctrl_sub{nullptr};

	bool send() override
	{
		actuator_controls_s act_ctrl;

		if (_act_ctrl_sub && _act_ctrl_sub->update(&act_ctrl)) {
			mavlink_actuator_control_target_t msg{};

			msg.time_usec = act_ctrl.timestamp;
			msg.group_mlx = N;

			for (unsigned i = 0; i < sizeof(msg.controls) / sizeof(msg.controls[0]); i++) {
				msg.controls[i] = act_ctrl.control[i];
			}

			mavlink_msg_actuator_control_target_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,822 60 704 2000 62 587 2001 58 777 2002 123 777 58 809 2002 42 2003 40 2004 42 2005 41 123 792 744 2001 60 2000 62 40 2005 41 59 125 809 603 601 582 42 2006 40 41 123 819 40 2000 41 123 579 1500 58 792 362 59 579 1501 58 792 362 59 579 1502 58 792 362 59 579 1502 58 792 362 59 125 792 362 59 125 809 603 2007 2008 40 41 123 792 2009 59 125 601 582 42 2010 40 41 601 2011 123 792 2006 40 41 59 125 2007 2012 40 41 2011 123 792 2008 40 41 59 125 856 2013 40 41 2011 123 792 40 2014 307 2014 354 2015 40 41 41 63 40 2016 43 2017 41 58 1500 59 125 773 58 648 2001 40 2004 42 2005 41 58 2002 40 2005 41 123 330 819 40 2000 41 123 579 1500 58 2018 61 744 2019 321 2020 123 2021 40 2022 41 125 59 572 59 579 1501 58 2018 61 744 2019 321 2020 123 2023 40 2024 41 125 59 572 59 579 1502 58 2018 61 744 2019 321 2020 123 2025 40 2026 41 125 59 572 59 579 1502 58 2018 61 744 2019 321 2020 123 2027 40 2028 41 125 59 572 59 125 125 126 2001 40 41 2011 123 619 2029 59 125 2030 321 2031 42 2032 123 753 125 59 569 2033 40 41 2011 123 2034 2035 59 688 40 2032 307 2032 354 2036 40 38 2035 41 41 123 2037 2038 123 125 59 2038 46 2039 61 2035 46 2040 59 2038 46 2041 61 2000 59 664 40 856 2042 61 1500 59 2042 60 805 40 2038 46 2043 41 47 805 40 2038 46 2043 91 1500 93 41 59 2042 349 41 123 2038 46 2043 91 2042 93 61 2035 46 2044 91 2042 93 59 125 2045 40 2046 354 2047 40 41 44 38 2038 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 8, 'CountLine': 87, 'CountStmt': 42, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 25, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 65, 'CountStmtDecl': 13, 'MaxCyclomatic': 5, 'SumCyclomatic': 18, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountStmtEmpty': 4, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 65, 'CountLineCodeExe': 24, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 28, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 88, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118063,C++,"class EkfTerrainTest : public ::testing::Test
{
public:

	EkfTerrainTest(): ::testing::Test(),
		_ekf{std::make_shared<Ekf>()},
		_sensor_simulator(_ekf),
		_ekf_wrapper(_ekf) {};

	std::shared_ptr<Ekf> _ekf;
	SensorSimulator _sensor_simulator;
	EkfWrapper _ekf_wrapper;

	// Setup the Ekf with synthetic measurements
	void SetUp() override
	{
		_ekf->init(0);
		_sensor_simulator.runSeconds(2);
	}

	// Use this method to clean up any memory, network etc. after each test
	void TearDown() override
	{
	}

	void runFlowAndRngScenario(const float rng_height, const float flow_height)
	{
		_sensor_simulator.startGps();
		_ekf->set_min_required_gps_health_time(1e6);
		_ekf_wrapper.enableGpsFusion();
		_ekf_wrapper.setBaroHeight();
		_sensor_simulator.runSeconds(2); // Run to pass the GPS checks

		const Vector3f simulated_velocity(0.5f, -1.0f, 0.f);

		// Configure GPS simulator data
		_sensor_simulator._gps.setVelocity(simulated_velocity);
		_sensor_simulator._gps.setPositionRateNED(simulated_velocity);

		// Configure range finder simulator data
		_sensor_simulator._rng.setData(rng_height, 100);
		_sensor_simulator._rng.setLimits(0.1f, 20.f);
		_sensor_simulator.startRangeFinder();

		// Configure optical flow simulator data
		flowSample flow_sample = _sensor_simulator._flow.dataAtRest();
		flow_sample.flow_xy_rad =
			Vector2f(simulated_velocity(1) * flow_sample.dt / flow_height,
				 -simulated_velocity(0) * flow_sample.dt / flow_height);
		_sensor_simulator._flow.setData(flow_sample);
		const float max_flow_rate = 5.f;
		const float min_ground_distance = 0.f;
		const float max_ground_distance = 50.f;
		_ekf->set_optical_flow_limits(max_flow_rate, min_ground_distance, max_ground_distance);
		_sensor_simulator.startFlow();

		_ekf->set_in_air_status(true);
		_sensor_simulator.runSeconds(8);
	}
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 58 321 2001 321 2002 40 41 44 2003 123 2004 321 2005 60 2006 62 40 41 125 44 2007 40 2003 41 44 2008 40 2003 41 123 125 59 2009 321 2010 60 2011 62 2003 59 2012 2007 59 2013 2008 59 330 865 2014 40 41 2015 123 2003 354 2016 40 1500 41 59 2007 46 2017 40 1502 41 59 125 330 865 2018 40 41 2015 123 125 865 2019 40 601 660 2020 44 601 660 2021 41 123 2007 46 2022 40 41 59 2003 354 2023 40 1507 41 59 2008 46 2024 40 41 59 2008 46 2025 40 41 59 2007 46 2026 40 1502 41 59 330 601 2027 2028 40 1500 44 45 1501 44 1500 41 59 330 2007 46 2029 46 2030 40 2028 41 59 2007 46 2029 46 2031 40 2028 41 59 330 2007 46 2032 46 2033 40 2020 44 1503 41 59 2007 46 2032 46 2034 40 1500 44 1503 41 59 2007 46 2035 40 41 59 330 2036 2037 61 2007 46 2038 46 2039 40 41 59 2037 46 2040 61 2041 40 2028 40 1501 41 42 2037 46 2042 47 2021 44 45 2028 40 1500 41 42 2037 46 2042 47 2021 41 59 2007 46 2038 46 2033 40 2037 41 59 601 660 2043 61 1502 59 601 660 2044 61 1500 59 601 660 2045 61 1503 59 2003 354 2046 40 2043 44 2044 44 2045 41 59 2007 46 2047 40 41 59 2003 354 2048 40 829 41 59 2007 46 2026 40 1502 41 59 125 125 59 ,"{'AvgLine': 11, 'CountLine': 60, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 9, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 45, 'CountLineCodeExe': 3, 'CountLineComment': 6, 'AltAvgLineComment': 1, 'AltCountLineBlank': 10, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118065,C++,"class MavlinkStreamScaledIMU2 : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamScaledIMU2(mavlink); }

	static constexpr const char *get_name_static() { return ""SCALED_IMU2""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_SCALED_IMU2; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		if (_vehicle_imu_sub.advertised() || _sensor_mag_sub.advertised()) {
			return MAVLINK_MSG_ID_SCALED_IMU2_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		}

		return 0;
	}

private:
	explicit MavlinkStreamScaledIMU2(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _vehicle_imu_sub{ORB_ID(vehicle_imu), 1};
	uORB::Subscription _sensor_mag_sub{ORB_ID(sensor_mag), 1};

	bool send() override
	{
		if (_vehicle_imu_sub.updated() || _sensor_mag_sub.updated()) {
			mavlink_scaled_imu2_t msg{};

			vehicle_imu_s imu;

			if (_vehicle_imu_sub.copy(&imu)) {
				msg.time_boot_ms = imu.timestamp / 1000;

				// Accelerometer in mG
				const float accel_dt_inv = 1.e6f / (float)imu.delta_velocity_dt;
				const Vector3f accel = Vector3f{imu.delta_velocity} * accel_dt_inv * 1000.0f / CONSTANTS_ONE_G;
				msg.xacc = (int16_t)accel(0);
				msg.yacc = (int16_t)accel(1);
				msg.zacc = (int16_t)accel(2);

				// Gyroscope in mrad/s
				const float gyro_dt_inv = 1.e6f / (float)imu.delta_velocity_dt;
				const Vector3f gyro = Vector3f{imu.delta_angle} * gyro_dt_inv * 1000.0f;
				msg.xgyro = gyro(0);
				msg.ygyro = gyro(1);
				msg.zgyro = gyro(2);
			}

			sensor_mag_s sensor_mag;

			if (_sensor_mag_sub.copy(&sensor_mag)) {
				if (msg.time_boot_ms == 0) {
					msg.time_boot_ms = sensor_mag.timestamp / 1000;
				}

				msg.xmag = sensor_mag.x * 1000.0f; // Gauss -> MilliGauss
				msg.ymag = sensor_mag.y * 1000.0f; // Gauss -> MilliGauss
				msg.zmag = sensor_mag.z * 1000.0f; // Gauss -> MilliGauss
				msg.temperature = sensor_mag.temperature;
			}

			mavlink_msg_scaled_imu2_send_struct(_mavlink->get_channel(), &msg);
			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 688 40 2013 46 2014 40 41 309 2015 46 2014 40 41 41 123 792 2016 43 2017 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2018 321 2019 2020 123 2021 40 2022 41 44 1501 125 59 2018 321 2019 2023 123 2024 40 2025 41 44 1501 125 59 569 2026 40 41 2010 123 688 40 2020 46 2027 40 41 309 2023 46 2027 40 41 41 123 2028 2029 123 125 59 2030 2031 59 688 40 2020 46 2032 40 38 2031 41 41 123 2029 46 2033 61 2031 46 2034 47 1504 59 330 601 660 2035 61 1507 47 40 660 41 2031 46 2036 59 601 2037 2038 61 2037 123 2031 46 2039 125 42 2035 42 1504 47 2040 59 2029 46 2041 61 40 2042 41 2038 40 1500 41 59 2029 46 2043 61 40 2042 41 2038 40 1501 41 59 2029 46 2044 61 40 2042 41 2038 40 1502 41 59 330 601 660 2045 61 1507 47 40 660 41 2031 46 2036 59 601 2037 2046 61 2037 123 2031 46 2047 125 42 2045 42 1504 59 2029 46 2048 61 2046 40 1500 41 59 2029 46 2049 61 2046 40 1501 41 59 2029 46 2050 61 2046 40 1502 41 59 125 2051 2052 59 688 40 2023 46 2032 40 38 2052 41 41 123 688 40 2029 46 2053 323 1500 41 123 2029 46 2053 61 2052 46 2054 47 1504 59 125 2029 46 2055 61 2052 46 2056 42 1504 59 330 2029 46 2057 61 2052 46 2058 42 1504 59 330 2029 46 2059 61 2052 46 2060 42 1504 59 330 2029 46 2061 61 2052 46 2061 59 125 2062 40 2063 354 2064 40 41 44 38 2029 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 71, 'CountStmt': 27, 'MaxNesting': 3, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 53, 'CountStmtDecl': 17, 'MaxCyclomatic': 5, 'SumCyclomatic': 13, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 53, 'CountLineCodeExe': 6, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118071,C++,"class MavlinkStreamCameraImageCaptured : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamCameraImageCaptured(mavlink); }

	static constexpr const char *get_name_static() { return ""CAMERA_IMAGE_CAPTURED""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_CAMERA_IMAGE_CAPTURED; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	bool const_rate() override { return true; }

	unsigned get_size() override
	{
		return _capture_sub.advertised() ? MAVLINK_MSG_ID_CAMERA_IMAGE_CAPTURED_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamCameraImageCaptured(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _capture_sub{ORB_ID(camera_capture)};

	bool send() override
	{
		camera_capture_s capture;

		if ((_mavlink->get_free_tx_buf() >= get_size()) && _capture_sub.update(&capture)) {
			mavlink_camera_image_captured_t msg{};

			msg.time_boot_ms = capture.timestamp / 1000;
			msg.time_utc = capture.timestamp_utc;
			msg.camera_id = 1;	// FIXME : get this from uORB
			msg.lat = capture.lat * 1e7;
			msg.lon = capture.lon * 1e7;
			msg.alt = capture.alt * 1e3f;
			msg.relative_alt = capture.ground_distance * 1e3f;
			msg.q[0] = capture.q[0];
			msg.q[1] = capture.q[1];
			msg.q[2] = capture.q[2];
			msg.q[3] = capture.q[3];
			msg.image_index = capture.seq;
			msg.capture_result = capture.result;
			msg.file_url[0] = '\0';

			mavlink_msg_camera_image_captured_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 569 2012 40 41 2010 123 792 829 59 125 856 2013 40 41 2010 123 792 2014 46 2015 40 41 63 2016 43 2017 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2018 321 2019 2020 123 2021 40 2022 41 125 59 569 2023 40 41 2010 123 2024 2025 59 688 40 40 2026 354 2027 40 41 325 2013 40 41 41 307 2020 46 2028 40 38 2025 41 41 123 2029 2030 123 125 59 2030 46 2031 61 2025 46 2032 47 1504 59 2030 46 2033 61 2025 46 2034 59 2030 46 2035 61 1501 59 330 2030 46 2036 61 2025 46 2036 42 1508 59 2030 46 2037 61 2025 46 2037 42 1508 59 2030 46 2038 61 2025 46 2038 42 1504 59 2030 46 2039 61 2025 46 2040 42 1504 59 2030 46 2041 91 1500 93 61 2025 46 2041 91 1500 93 59 2030 46 2041 91 1501 93 61 2025 46 2041 91 1501 93 59 2030 46 2041 91 1502 93 61 2025 46 2041 91 1502 93 59 2030 46 2041 91 1502 93 61 2025 46 2041 91 1502 93 59 2030 46 2042 61 2025 46 2043 59 2030 46 2044 61 2025 46 2045 59 2030 46 2046 91 1500 93 61 314 59 2047 40 2026 354 2048 40 41 44 38 2030 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 53, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 41, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 41, 'CountLineCodeExe': 6, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 28, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118075,C++,"class SendEvent : public ModuleBase<SendEvent>, public ModuleParams, public px4::ScheduledWorkItem
{
public:

	SendEvent();

	~SendEvent();

	/**
	 * @see ModuleBase
	 * @brief Recognizes custom startup commands, called from the main() function entry.
	 * @param argc The task argument count.
	 * @param argc Pointer to the task argument variable array.
	 * @return Returns 0 iff successful, otherwise < 0 on error.
	 */
	static int custom_command(int argc, char *argv[]);

	/**
	 * @see ModuleBase
	 * @brief Prints usage options to the console.
	 * @param reason The requested usage reason for printing to console.
	 * @return Returns 0 iff successful, -1 otherwise.
	 */
	static int print_usage(const char *reason = nullptr);

	/**
	 * @brief Spawns and initializes the class in the same context as the
	 *        work queue and starts the background listener.
	 * @param argc The input argument count.
	 * @param argv Pointer to the input argument array.
	 * @return Returns 0 iff successful, -1 otherwise.
	 */
	static int task_spawn(int argc, char *argv[]);

private:

	/**
	 * @brief Returns an ACK to a vehicle_command.
	 * @param cmd The vehicle command struct being referenced.
	 * @param result The command acknowledgement result.
	 */
	void answer_command(const vehicle_command_s &cmd, unsigned result);

	/**
	 * @brief Calls process_commands() and schedules the next cycle.
	 */
	void Run() override;

	/**
	 * @brief Checks for new commands and processes them.
	 */
	void process_commands();

	/**
	 * @brief Starts background task listening for commands.
	 * @return Returns 0 iff successful, otherwise < 0 on error.
	 */
	int start();

	uORB::Subscription _vehicle_command_sub{ORB_ID(vehicle_command)};

	/** @var _status_display Pointer to the status display object. */
	status::StatusDisplay *_status_display = nullptr;

	/** @var _rc_loss_alarm Pointer to the RC loss alarm object. */
	rc_loss::RC_Loss_Alarm *_rc_loss_alarm = nullptr;

	/** @note Declare local parameters using defined parameters. */
	DEFINE_PARAMETERS(
		/** @var _param_status_display Parameter to enable/disable the LED status display. */
		(ParamBool<px4::params::EV_TSK_STAT_DIS>) _param_ev_tsk_stat_dis,

		/** @var _param_rc_loss The RC comms loss status flag. */
		(ParamBool<px4::params::EV_TSK_RC_LOSS>) _param_ev_tsk_rc_loss
	)
};",0,587 2000 58 777 2001 60 2000 62 44 777 2002 44 777 2003 321 2004 123 777 58 2000 40 41 59 126 2000 40 41 59 306 809 704 2005 40 704 2006 44 582 42 2007 91 93 41 59 306 809 704 2008 40 601 582 42 2009 61 753 41 59 306 809 704 2010 40 704 2006 44 582 42 2007 91 93 41 59 773 58 306 865 2011 40 601 2012 38 2013 44 856 2014 41 59 306 865 2015 40 41 2016 59 306 865 2017 40 41 59 306 704 2018 40 41 59 2019 321 2020 2021 123 2022 40 2023 41 125 59 306 2024 321 2025 42 2026 61 753 59 306 2027 321 2028 42 2029 61 753 59 306 2030 40 306 40 2031 60 2003 321 2032 321 2033 62 41 2034 44 306 40 2031 60 2003 321 2032 321 2035 62 41 2036 41 125 59 ,"{'AvgLine': 10, 'CountLine': 174, 'CountStmt': 52, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 33, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 100, 'CountStmtDecl': 18, 'MaxCyclomatic': 4, 'SumCyclomatic': 18, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 30, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 1, 'CountDeclMethod': 10, 'AltCountLineCode': 100, 'CountLineCodeExe': 34, 'CountLineComment': 44, 'AltAvgLineComment': 0, 'AltCountLineBlank': 30, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 54, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.44', 'AltCountLineComment': 44, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118082,C++,"class FlightTaskTransition : public FlightTask
{
public:
	FlightTaskTransition();

	virtual ~FlightTaskTransition() = default;
	bool activate(const vehicle_local_position_setpoint_s &last_setpoint) override;
	bool updateInitialize() override;
	bool update() override;

private:

	static constexpr float _vel_z_filter_time_const = 2.0f;

	uORB::SubscriptionInterval _parameter_update_sub{ORB_ID(parameter_update), 1_s};
	param_t _param_handle_pitch_cruise_degrees{PARAM_INVALID};
	float _param_pitch_cruise_degrees{0.f};

	AlphaFilter<float> _vel_z_filter;

	void updateParameters();

};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 864 126 2000 40 41 61 613 59 569 2002 40 601 2003 38 2004 41 2005 59 569 2006 40 41 2005 59 569 2007 40 41 2005 59 773 58 809 603 660 2008 61 1502 59 2009 321 2010 2011 123 2012 40 2013 41 44 1501 125 59 2014 2015 123 2016 125 59 660 2017 123 1500 125 59 2018 60 660 62 2019 59 865 2020 40 41 59 125 59 ,"{'AvgLine': 13, 'CountLine': 91, 'CountStmt': 23, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 61, 'CountStmtDecl': 14, 'MaxCyclomatic': 3, 'SumCyclomatic': 9, 'AltAvgLineCode': 9, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 22, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 6, 'AltCountLineCode': 61, 'CountLineCodeExe': 7, 'CountLineComment': 8, 'AltAvgLineComment': 1, 'AltCountLineBlank': 22, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 44, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118092,C++,"class UavcanGnssPublisher : public UavcanPublisher
{
public:
	UavcanGnssPublisher(CanardInstance &ins, UavcanParamManager &pmgr, uint8_t instance = 0) :
		UavcanPublisher(ins, pmgr, ""ds_015"", ""gps"", instance)
	{

	};

	~UavcanGnssPublisher() override = default;

	// Update the uORB Subscription and broadcast a UAVCAN message
	virtual void update() override
	{
		if (_gps_sub.updated() && _port_id != CANARD_PORT_ID_UNSET) {
			sensor_gps_s gps {};
			_gps_sub.update(&gps);

			reg_drone_physics_kinematics_geodetic_Point_0_1 geo {};
			geo.latitude = gps.lat;
			geo.longitude = gps.lon;
			geo.altitude = uavcan_si_unit_length_WideScalar_1_0 { .meter = static_cast<double>(gps.alt) };

			uint8_t geo_payload_buffer[reg_drone_physics_kinematics_geodetic_Point_0_1_SERIALIZATION_BUFFER_SIZE_BYTES_];

			CanardTransfer transfer = {
				.timestamp_usec = hrt_absolute_time() + PUBLISHER_DEFAULT_TIMEOUT_USEC,
				.priority       = CanardPriorityNominal,
				.transfer_kind  = CanardTransferKindMessage,
				.port_id        = _port_id, // This is the subject-ID.
				.remote_node_id = CANARD_NODE_ID_UNSET,
				.transfer_id    = _transfer_id,
				.payload_size   = reg_drone_physics_kinematics_geodetic_Point_0_1_SERIALIZATION_BUFFER_SIZE_BYTES_,
				.payload        = &geo_payload_buffer,
			};

			int32_t result = reg_drone_physics_kinematics_geodetic_Point_0_1_serialize_(&geo, geo_payload_buffer,
					 &transfer.payload_size);

			if (result == 0) {
				// set the data ready in the buffer and chop if needed
				++_transfer_id;  // The transfer-ID shall be incremented after every transmission on this subject.
				result = canardTxPush(&_canard_instance, &transfer);
			}

			/// TODO: Also publish DilutionOfPrecision, ...?
			reg_drone_service_gnss_DilutionOfPrecision_0_1 dop {
				.geometric = NAN,
				.position = NAN,
				.horizontal = gps.hdop,
				.vertical = gps.vdop,
				.time = NAN,
				.northing = NAN,
				.easting = NAN,
			};

			uint8_t dop_payload_buffer[reg_drone_service_gnss_DilutionOfPrecision_0_1_SERIALIZATION_BUFFER_SIZE_BYTES_];

			CanardPortID _port_id_2 = static_cast<CanardPortID>((uint16_t)_port_id + 1U);

			CanardTransfer transfer2 = {
				.timestamp_usec = hrt_absolute_time() + PUBLISHER_DEFAULT_TIMEOUT_USEC,
				.priority       = CanardPriorityNominal,
				.transfer_kind  = CanardTransferKindMessage,
				.port_id        = _port_id_2, // This is the subject-ID.
				.remote_node_id = CANARD_NODE_ID_UNSET,
				.transfer_id    = _transfer_id_2,
				.payload_size   = reg_drone_service_gnss_DilutionOfPrecision_0_1_SERIALIZATION_BUFFER_SIZE_BYTES_,
				.payload        = &dop_payload_buffer,
			};

			result = reg_drone_service_gnss_DilutionOfPrecision_0_1_serialize_(&dop, dop_payload_buffer, &transfer2.payload_size);

			if (result == 0) {
				// set the data ready in the buffer and chop if needed
				++_transfer_id_2;  // The transfer-ID shall be incremented after every transmission on this subject.
				result = canardTxPush(&_canard_instance, &transfer2);
			}
		}
	};

private:

	/// TODO: Allow >1 instance
	uORB::Subscription _gps_sub{ORB_ID(sensor_gps)};
	CanardTransferID _transfer_id_2 {0};
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 44 2004 38 2005 44 2006 2007 61 1500 41 58 2001 40 2003 44 2005 44 362 44 362 44 2007 41 123 125 59 126 2000 40 41 2008 61 613 59 330 864 865 2009 40 41 2008 123 688 40 2010 46 2011 40 41 307 2012 340 2013 41 123 2014 2015 123 125 59 2010 46 2009 40 38 2015 41 59 2016 2017 123 125 59 2017 46 2018 61 2015 46 2019 59 2017 46 2020 61 2015 46 2021 59 2017 46 2022 61 2023 123 46 2024 61 811 60 625 62 40 2015 46 2025 41 125 59 2006 2026 91 2027 93 59 2028 2029 61 123 46 2030 61 2031 40 41 43 2032 44 46 2033 61 2034 44 46 2035 61 2036 44 46 2037 61 2012 44 330 46 2038 61 2039 44 46 2040 61 2041 44 46 2042 61 2027 44 46 2043 61 38 2026 44 125 59 2044 2045 61 2046 40 38 2017 44 2026 44 38 2029 46 2047 41 59 688 40 2045 323 1500 41 123 330 349 2048 59 330 2045 61 2049 40 38 2050 44 38 2029 41 59 125 331 2051 2052 123 46 2053 61 2054 44 46 2055 61 2054 44 46 2056 61 2015 46 2057 44 46 2058 61 2015 46 2059 44 46 2060 61 2054 44 46 2061 61 2054 44 46 2062 61 2054 44 125 59 2006 2063 91 2064 93 59 2065 2066 61 811 60 2065 62 40 40 2067 41 2012 43 1501 41 59 2028 2068 61 123 46 2069 61 2070 40 41 43 2071 44 46 2072 61 2073 44 46 2074 61 2075 44 46 2076 61 2066 44 330 46 2077 61 2078 44 46 2079 61 2080 44 46 2047 61 2064 44 46 2081 61 38 2063 44 125 59 2045 61 2082 40 38 2052 44 2063 44 38 2068 46 2047 41 59 688 40 2045 323 1500 41 123 330 349 2083 59 330 2045 61 2084 40 38 2085 44 38 2068 41 59 125 125 125 59 773 58 331 2086 321 2087 2088 123 2089 40 2090 41 125 59 2091 2092 123 1500 125 59 125 59 ,"{'AvgLine': 36, 'CountLine': 87, 'CountStmt': 16, 'MaxNesting': 2, 'AvgLineCode': 29, 'AvgEssential': 1, 'AvgLineBlank': 6, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 66, 'CountStmtDecl': 13, 'MaxCyclomatic': 4, 'SumCyclomatic': 5, 'AltAvgLineCode': 29, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 6, 'CountDeclMethod': 3, 'AltCountLineCode': 66, 'CountLineCodeExe': 3, 'CountLineComment': 9, 'AltAvgLineComment': 3, 'AltCountLineBlank': 16, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118109,C++,"class MutexLocker
{
	Mutex &mutex_;

public:
	MutexLocker(Mutex &mutex)
		: mutex_(mutex)
	{
		mutex_.lock();
	}
	~MutexLocker()
	{
		mutex_.unlock();
	}
};",0,587 2000 123 2001 38 2002 59 777 58 2000 40 2001 38 2003 41 58 2002 40 2003 41 123 2002 46 2004 40 41 59 125 126 2000 40 41 123 2002 46 2005 40 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 15, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 14, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118108,C++,"class Mutex
{
	pthread_mutex_t mutex_;

public:
	Mutex()
	{
		init();
	}

	int init()
	{
		return pthread_mutex_init(&mutex_, UAVCAN_NULLPTR);
	}

	int deinit()
	{
		return pthread_mutex_destroy(&mutex_);
	}

	void lock()
	{
		(void)pthread_mutex_lock(&mutex_);
	}

	void unlock()
	{
		(void)pthread_mutex_unlock(&mutex_);
	}
};",0,587 2000 123 2001 2002 59 777 58 2000 40 41 123 2003 40 41 59 125 704 2004 40 41 123 792 2005 40 38 2002 44 2006 41 59 125 704 2007 40 41 123 792 2008 40 38 2002 41 59 125 865 2009 40 41 123 40 865 41 2010 40 38 2002 41 59 125 865 2011 40 41 123 40 865 41 2012 40 38 2002 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 30, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 25, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 25, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118113,C++,"class LPS33HW_I2C : public device::I2C
{
public:
	LPS33HW_I2C(uint8_t bus, uint32_t address, int bus_frequency);
	virtual ~LPS33HW_I2C() = default;

	virtual int	read(unsigned address, void *data, unsigned count);
	virtual int	write(unsigned address, void *data, unsigned count);

};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 2003 2004 44 2005 2006 44 704 2007 41 59 864 126 2000 40 41 61 613 59 864 704 2008 40 856 2006 44 865 42 2009 44 856 2010 41 59 864 704 2011 40 856 2006 44 865 42 2009 44 856 2010 41 59 125 59 ,"{'AvgLine': 8, 'CountLine': 33, 'CountStmt': 11, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 28, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118120,C++,"class Imu: public Sensor
{
public:
	Imu(std::shared_ptr<Ekf> ekf);
	~Imu();

	void setData(const Vector3f &accel, const Vector3f &gyro);
	void setAccelData(const Vector3f &accel);
	void setGyroData(const Vector3f &gyro);

private:
	Vector3f _accel_data;
	Vector3f _gyro_data;

	void send(uint64_t time) override;

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 321 2003 60 2004 62 2005 41 59 126 2000 40 41 59 865 2006 40 601 2007 38 2008 44 601 2007 38 2009 41 59 865 2010 40 601 2007 38 2008 41 59 865 2011 40 601 2007 38 2009 41 59 773 58 2007 2012 59 2007 2013 59 865 2014 40 2015 2016 41 2017 59 125 59 ,"{'AvgLine': 5, 'CountLine': 48, 'CountStmt': 22, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 43, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 43, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 62, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118130,C++,"class Flow: public Sensor
{
public:
	Flow(std::shared_ptr<Ekf> ekf);
	~Flow();

	void setData(const flowSample &flow);
	flowSample dataAtRest();

private:
	flowSample _flow_data;

	void send(uint64_t time) override;

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 321 2003 60 2004 62 2005 41 59 126 2000 40 41 59 865 2006 40 601 2007 38 2008 41 59 2007 2009 40 41 59 773 58 2007 2010 59 865 2011 40 2012 2013 41 2014 59 125 59 ,"{'AvgLine': 5, 'CountLine': 40, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 35, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 57, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118156,C++,"class net_params
{
private:

	class ipl
	{
		const char *_keyword;
	public:

		union {
			int32_t  l;
			uint32_t u;
			struct in_addr a;
			uint8_t b[sizeof(int32_t) + 1];
			enum ipv4cfg_bootproto_e e;
		};

		const char *keyword() { return _keyword;}
		ipl() = delete;
		ipl(const char *w)	{ _keyword = w;}

		const char *to_str()
		{
			return inet_ntoa(a);
		}

		const char *name()
		{
			b[arraySize(b) - 1] = '\0';
			return (const char *)b;
		}

		void set_name(const char *name)
		{
			unsigned int i;

			for (i = 0; i < arraySize(b) - 1; i++) {
				b[i] = name[i];
			}

			b[i] = '\0';
		}

		const char *protocol()
		{
			return e == IPv4PROTO_STATIC ? ""static"" : (e  == IPv4PROTO_DHCP) ? ""dhcp"" : ""fallback"";
		}

		const char *parseProtocol(const char *ps)
		{
			char *p = strstr(ps, ""dhcp"");

			if (p) {
				e = IPv4PROTO_DHCP;

			} else {

				p = strstr(ps, ""static"");

				if (p) {
					e = IPv4PROTO_STATIC;

				} else {

					p = strstr(ps, ""fallback"");

					if (p) {
						e = IPv4PROTO_FALLBACK;
					}
				}
			}

			return ps;
		}


		const char *parse(const char *cp)
		{
			u = inet_addr(cp);
			return cp;
		}

		const char *parse(const char *buffer, const char *end)
		{
			char *ps = strstr(buffer, keyword());

			if (ps) {
				int len = strlen(keyword());

				if (ps + len < end) {
					ps += len;
					isalpha(*ps) ? parseProtocol(ps) : parse(ps);

				} else {
					ps = nullptr;
				}
			}

			return ps;
		}
	};


public:

	ipl device{""DEVICE=""};
	ipl proto{""BOOTPROTO=""};
	ipl netmask{""NETMASK=""};
	ipl ipaddr{""IPADDR=""};
	ipl router{""ROUTER=""};
	ipl dnsaddr{""DNS=""};


	net_params() = default;

	~net_params() {}

	net_params &operator = (const ipv4cfg_s &ipcfg)
	{
		proto.e  =    ipcfg.proto;
		ipaddr.u  =   ipcfg.ipaddr;
		netmask.u =   ipcfg.netmask;
		router.u  =   ipcfg.router;
		dnsaddr.u =   ipcfg.dnsaddr;
		return *this;
	}


	int read(const char *netdev)
	{
		struct ipv4cfg_s ipcfg;
		int rv = ipcfg_read(netdev, (FAR struct ipcfg_s *) &ipcfg, AF_INET);

		if (rv == -EINVAL ||
		    (rv == OK  && (ipcfg.proto > IPv4PROTO_FALLBACK || ipcfg.ipaddr == 0xffffffff))) {
			// Build a default
			ipcfg.ipaddr  = HTONL(DEFAULT_IP);
			ipcfg.netmask = HTONL(DEFAULT_NETMASK);
			ipcfg.router  = HTONL(DEFAULT_ROUTER);
			ipcfg.dnsaddr = HTONL(DEFAULT_DNS);
			ipcfg.proto   = DEFAULT_PROTO;
			rv = -ENOENT;
		}

		device.set_name(netdev);
		*this = ipcfg;
		return rv;
	}

	int write()
	{
		struct ipv4cfg_s ipcfg;
		ipcfg.proto   = proto.e;
		ipcfg.ipaddr  = ipaddr.u;
		ipcfg.netmask = netmask.u;
		ipcfg.router  = router.u;
		ipcfg.dnsaddr = dnsaddr.u;
		return ipcfg_write(device.name(), (FAR struct ipcfg_s *) &ipcfg, AF_INET);
	}
};",0,587 2000 123 773 58 587 2001 123 601 582 42 2002 59 777 58 851 123 2003 2004 59 2005 2006 59 816 2007 2008 59 2009 2010 91 805 40 2003 41 43 1501 93 59 640 2011 2012 59 125 59 601 582 42 2013 40 41 123 792 2002 59 125 2001 40 41 61 619 59 2001 40 601 582 42 2014 41 123 2002 61 2014 59 125 601 582 42 2015 40 41 123 792 2016 40 2017 41 59 125 601 582 42 2018 40 41 123 2019 91 2020 40 2019 41 45 1501 93 61 314 59 792 40 601 582 42 41 2019 59 125 865 2021 40 601 582 42 2018 41 123 856 704 2022 59 664 40 2022 61 1500 59 2022 60 2023 40 2024 41 45 1501 59 2022 349 41 123 2024 91 2022 93 61 2018 91 2022 93 59 125 2024 91 2022 93 61 314 59 125 601 582 42 2025 40 41 123 792 2026 323 2027 63 362 58 40 2026 323 2028 41 63 362 58 362 59 125 601 582 42 2029 40 601 582 42 2030 41 123 582 42 2031 61 2032 40 2030 44 362 41 59 688 40 2031 41 123 2033 61 2034 59 125 630 123 2031 61 2032 40 2030 44 362 41 59 688 40 2031 41 123 2035 61 2036 59 125 630 123 2031 61 2032 40 2030 44 362 41 59 688 40 2031 41 123 2037 61 2038 59 125 125 125 792 2030 59 125 601 582 42 2039 40 601 582 42 2040 41 123 2041 61 2042 40 2040 41 59 792 2040 59 125 601 582 42 2039 40 601 582 42 2043 44 601 582 42 2044 41 123 582 42 2030 61 2045 40 2043 44 2013 40 41 41 59 688 40 2030 41 123 704 2046 61 2047 40 2013 40 41 41 59 688 40 2030 43 2046 60 2044 41 123 2030 348 2046 59 2048 40 42 2030 41 63 2029 40 2030 41 58 2039 40 2030 41 59 125 630 123 2030 61 753 59 125 125 792 2030 59 125 125 59 777 58 2001 2049 123 362 125 59 2001 2050 123 362 125 59 2001 2051 123 362 125 59 2001 2052 123 362 125 59 2001 2053 123 362 125 59 2001 2054 123 362 125 59 2000 40 41 61 613 59 126 2000 40 41 123 125 2000 38 758 61 40 601 2055 38 2056 41 123 2050 46 2057 61 2056 46 2050 59 2052 46 2058 61 2056 46 2052 59 2051 46 2058 61 2056 46 2051 59 2053 46 2058 61 2056 46 2053 59 2054 46 2058 61 2056 46 2054 59 792 42 823 59 125 704 2059 40 601 582 42 2060 41 123 816 2055 2056 59 704 2061 61 2062 40 2060 44 40 2063 816 2064 42 41 38 2056 44 2065 41 59 688 40 2061 323 45 2066 309 40 2061 323 2067 307 40 2056 46 2050 62 2068 309 2056 46 2052 323 1511 41 41 41 123 330 2056 46 2052 61 2069 40 2070 41 59 2056 46 2051 61 2069 40 2071 41 59 2056 46 2053 61 2069 40 2072 41 59 2056 46 2054 61 2069 40 2073 41 59 2056 46 2050 61 2074 59 2061 61 45 2075 59 125 2049 46 2076 40 2060 41 59 42 823 61 2056 59 792 2061 59 125 704 2077 40 41 123 816 2055 2056 59 2056 46 2050 61 2050 46 2078 59 2056 46 2052 61 2052 46 2079 59 2056 46 2051 61 2051 46 2079 59 2056 46 2053 61 2053 46 2079 59 2056 46 2054 61 2054 46 2079 59 792 2080 40 2049 46 2081 40 41 44 40 2082 816 2083 42 41 38 2056 44 2084 41 59 125 125 59 ,"{'AvgLine': 10, 'CountLine': 159, 'CountStmt': 52, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 28, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 121, 'CountStmtDecl': 33, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 37, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 121, 'CountLineCodeExe': 24, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 37, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118148,C++,"class MavlinkStreamGPSRawInt : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamGPSRawInt(mavlink); }

	static constexpr const char *get_name_static() { return ""GPS_RAW_INT""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_GPS_RAW_INT; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _sensor_gps_sub.advertised() ? (MAVLINK_MSG_ID_GPS_RAW_INT_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES) : 0;
	}

private:
	explicit MavlinkStreamGPSRawInt(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _sensor_gps_sub{ORB_ID(sensor_gps), 0};

	bool send() override
	{
		sensor_gps_s gps;

		if (_sensor_gps_sub.update(&gps)) {
			mavlink_gps_raw_int_t msg{};

			msg.time_usec = gps.timestamp;
			msg.fix_type = gps.fix_type;
			msg.lat = gps.lat;
			msg.lon = gps.lon;
			msg.alt = gps.alt;
			msg.eph = gps.hdop * 100; // GPS HDOP horizontal dilution of position (unitless)
			msg.epv = gps.vdop * 100; // GPS VDOP vertical dilution of position (unitless)

			if (PX4_ISFINITE(gps.vel_m_s) && (fabsf(gps.vel_m_s) >= 0.f)) {
				msg.vel = gps.vel_m_s * 100.f; // cm/s

			} else {
				msg.vel = UINT16_MAX; // If unknown, set to: UINT16_MAX
			}

			msg.cog = math::degrees(matrix::wrap_2pi(gps.cog_rad)) * 1e2f;
			msg.satellites_visible = gps.satellites_used;
			msg.alt_ellipsoid = gps.alt_ellipsoid;
			msg.h_acc = gps.eph * 1e3f;              // position uncertainty in mm
			msg.v_acc = gps.epv * 1e3f;              // altitude uncertainty in mm
			msg.vel_acc = gps.s_variance_m_s * 1e3f; // speed uncertainty in mm

			if (PX4_ISFINITE(gps.heading)) {
				if (fabsf(gps.heading) < FLT_EPSILON) {
					msg.yaw = 36000; // Use 36000 for north.

				} else {
					msg.yaw = math::degrees(matrix::wrap_2pi(gps.heading)) * 100.0f; // centidegrees
				}

				if (PX4_ISFINITE(gps.heading_accuracy)) {
					msg.hdg_acc = math::degrees(gps.heading_accuracy) * 1e5f; // Heading / track uncertainty in degE5
				}
			}

			mavlink_msg_gps_raw_int_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 40 2015 43 2016 41 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 44 1500 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 59 2027 46 2030 61 2024 46 2030 59 2027 46 2031 61 2024 46 2031 59 2027 46 2032 61 2024 46 2032 59 2027 46 2033 61 2024 46 2033 59 2027 46 2034 61 2024 46 2035 42 1503 59 330 2027 46 2036 61 2024 46 2037 42 1503 59 330 688 40 2038 40 2024 46 2039 41 307 40 2040 40 2024 46 2039 41 325 1500 41 41 123 2027 46 2041 61 2024 46 2039 42 1503 59 330 125 630 123 2027 46 2042 61 2043 59 330 125 2027 46 2044 61 2045 321 2046 40 2047 321 2048 40 2024 46 2049 41 41 42 1503 59 2027 46 2050 61 2024 46 2051 59 2027 46 2052 61 2024 46 2052 59 2027 46 2053 61 2024 46 2034 42 1504 59 330 2027 46 2054 61 2024 46 2036 42 1504 59 330 2027 46 2055 61 2024 46 2056 42 1504 59 330 688 40 2038 40 2024 46 2057 41 41 123 688 40 2040 40 2024 46 2057 41 60 2058 41 123 2027 46 2059 61 1506 59 330 125 630 123 2027 46 2060 61 2045 321 2046 40 2047 321 2048 40 2024 46 2057 41 41 42 1503 59 330 125 688 40 2038 40 2024 46 2061 41 41 123 2027 46 2062 61 2045 321 2046 40 2024 46 2061 41 42 1506 59 330 125 125 2063 40 2064 354 2065 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 71, 'CountStmt': 20, 'MaxNesting': 3, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 54, 'CountStmtDecl': 11, 'MaxCyclomatic': 6, 'SumCyclomatic': 13, 'AltAvgLineCode': 6, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 54, 'CountLineCodeExe': 7, 'CountLineComment': 10, 'AltAvgLineComment': 1, 'AltCountLineBlank': 17, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.19', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118147,C++,"class MavlinkStreamTrajectoryRepresentationWaypoints: public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamTrajectoryRepresentationWaypoints(mavlink); }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	static constexpr const char *get_name_static() { return ""TRAJECTORY_REPRESENTATION_WAYPOINTS""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_TRAJECTORY_REPRESENTATION_WAYPOINTS; }

	unsigned get_size() override
	{
		if (_traj_wp_avoidance_sub.advertised()) {
			return MAVLINK_MSG_ID_TRAJECTORY_REPRESENTATION_WAYPOINTS_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		}

		return 0;
	}

private:
	explicit MavlinkStreamTrajectoryRepresentationWaypoints(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _traj_wp_avoidance_sub{ORB_ID(vehicle_trajectory_waypoint_desired)};

	bool send() override
	{
		vehicle_trajectory_waypoint_s traj_wp_avoidance_desired;

		if (_traj_wp_avoidance_sub.update(&traj_wp_avoidance_desired)) {
			mavlink_trajectory_representation_waypoints_t msg{};

			msg.time_usec = traj_wp_avoidance_desired.timestamp;
			int number_valid_points = 0;

			for (int i = 0; i < vehicle_trajectory_waypoint_s::NUMBER_POINTS; ++i) {
				msg.pos_x[i] = traj_wp_avoidance_desired.waypoints[i].position[0];
				msg.pos_y[i] = traj_wp_avoidance_desired.waypoints[i].position[1];
				msg.pos_z[i] = traj_wp_avoidance_desired.waypoints[i].position[2];

				msg.vel_x[i] = traj_wp_avoidance_desired.waypoints[i].velocity[0];
				msg.vel_y[i] = traj_wp_avoidance_desired.waypoints[i].velocity[1];
				msg.vel_z[i] = traj_wp_avoidance_desired.waypoints[i].velocity[2];

				msg.acc_x[i] = traj_wp_avoidance_desired.waypoints[i].acceleration[0];
				msg.acc_y[i] = traj_wp_avoidance_desired.waypoints[i].acceleration[1];
				msg.acc_z[i] = traj_wp_avoidance_desired.waypoints[i].acceleration[2];

				msg.pos_yaw[i] = traj_wp_avoidance_desired.waypoints[i].yaw;
				msg.vel_yaw[i] = traj_wp_avoidance_desired.waypoints[i].yaw_speed;

				switch (traj_wp_avoidance_desired.waypoints[i].type) {
				case position_setpoint_s::SETPOINT_TYPE_TAKEOFF:
					msg.command[i] = vehicle_command_s::VEHICLE_CMD_NAV_TAKEOFF;
					break;

				case position_setpoint_s::SETPOINT_TYPE_LOITER:
					msg.command[i] = vehicle_command_s::VEHICLE_CMD_NAV_LOITER_UNLIM;
					break;

				case position_setpoint_s::SETPOINT_TYPE_LAND:
					msg.command[i] = vehicle_command_s::VEHICLE_CMD_NAV_LAND;
					break;

				default:
					msg.command[i] = UINT16_MAX;
				}

				if (traj_wp_avoidance_desired.waypoints[i].point_valid) {
					number_valid_points++;
				}

			}

			msg.valid_points = number_valid_points;

			mavlink_msg_trajectory_representation_waypoints_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 601 582 42 2005 40 41 601 2006 123 792 2007 40 41 59 125 2008 2009 40 41 2006 123 792 2010 40 41 59 125 809 603 601 582 42 2011 40 41 123 792 362 59 125 809 603 2008 2012 40 41 123 792 2013 59 125 856 2014 40 41 2006 123 688 40 2015 46 2016 40 41 41 123 792 2017 43 2018 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2019 321 2020 2021 123 2022 40 2023 41 125 59 569 2024 40 41 2006 123 2025 2026 59 688 40 2021 46 2027 40 38 2026 41 41 123 2028 2029 123 125 59 2029 46 2030 61 2026 46 2031 59 704 2032 61 1500 59 664 40 704 2033 61 1500 59 2033 60 2025 321 2034 59 349 2033 41 123 2029 46 2035 91 2033 93 61 2026 46 2036 91 2033 93 46 2037 91 1500 93 59 2029 46 2038 91 2033 93 61 2026 46 2036 91 2033 93 46 2037 91 1501 93 59 2029 46 2039 91 2033 93 61 2026 46 2036 91 2033 93 46 2037 91 1502 93 59 2029 46 2040 91 2033 93 61 2026 46 2036 91 2033 93 46 2041 91 1500 93 59 2029 46 2042 91 2033 93 61 2026 46 2036 91 2033 93 46 2041 91 1501 93 59 2029 46 2043 91 2033 93 61 2026 46 2036 91 2033 93 46 2041 91 1502 93 59 2029 46 2044 91 2033 93 61 2026 46 2036 91 2033 93 46 2045 91 1500 93 59 2029 46 2046 91 2033 93 61 2026 46 2036 91 2033 93 46 2045 91 1501 93 59 2029 46 2047 91 2033 93 61 2026 46 2036 91 2033 93 46 2045 91 1502 93 59 2029 46 2048 91 2033 93 61 2026 46 2036 91 2033 93 46 2049 59 2029 46 2050 91 2033 93 61 2026 46 2036 91 2033 93 46 2051 59 819 40 2026 46 2036 91 2033 93 46 2052 41 123 579 2053 321 2054 58 2029 46 2055 91 2033 93 61 2056 321 2057 59 572 59 579 2053 321 2058 58 2029 46 2055 91 2033 93 61 2056 321 2059 59 572 59 579 2053 321 2060 58 2029 46 2055 91 2033 93 61 2056 321 2061 59 572 59 613 58 2029 46 2055 91 2033 93 61 2062 59 125 688 40 2026 46 2036 91 2033 93 46 2063 41 123 2032 349 59 125 125 2029 46 2064 61 2032 59 2065 40 2066 354 2067 40 41 44 38 2029 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 9, 'CountLine': 84, 'CountStmt': 21, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 61, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 23, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 8, 'AltCountLineCode': 61, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 23, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118155,C++,"	class ipl
	{
		const char *_keyword;
	public:

		union {
			int32_t  l;
			uint32_t u;
			struct in_addr a;
			uint8_t b[sizeof(int32_t) + 1];
			enum ipv4cfg_bootproto_e e;
		};

		const char *keyword() { return _keyword;}
		ipl() = delete;
		ipl(const char *w)	{ _keyword = w;}

		const char *to_str()
		{
			return inet_ntoa(a);
		}

		const char *name()
		{
			b[arraySize(b) - 1] = '\0';
			return (const char *)b;
		}

		void set_name(const char *name)
		{
			unsigned int i;

			for (i = 0; i < arraySize(b) - 1; i++) {
				b[i] = name[i];
			}

			b[i] = '\0';
		}

		const char *protocol()
		{
			return e == IPv4PROTO_STATIC ? ""static"" : (e  == IPv4PROTO_DHCP) ? ""dhcp"" : ""fallback"";
		}

		const char *parseProtocol(const char *ps)
		{
			char *p = strstr(ps, ""dhcp"");

			if (p) {
				e = IPv4PROTO_DHCP;

			} else {

				p = strstr(ps, ""static"");

				if (p) {
					e = IPv4PROTO_STATIC;

				} else {

					p = strstr(ps, ""fallback"");

					if (p) {
						e = IPv4PROTO_FALLBACK;
					}
				}
			}

			return ps;
		}


		const char *parse(const char *cp)
		{
			u = inet_addr(cp);
			return cp;
		}

		const char *parse(const char *buffer, const char *end)
		{
			char *ps = strstr(buffer, keyword());

			if (ps) {
				int len = strlen(keyword());

				if (ps + len < end) {
					ps += len;
					isalpha(*ps) ? parseProtocol(ps) : parse(ps);

				} else {
					ps = nullptr;
				}
			}

			return ps;
		}
	};",0,587 2000 123 601 582 42 2001 59 777 58 851 123 2002 2003 59 2004 2005 59 816 2006 2007 59 2008 2009 91 805 40 2002 41 43 1501 93 59 640 2010 2011 59 125 59 601 582 42 2012 40 41 123 792 2001 59 125 2000 40 41 61 619 59 2000 40 601 582 42 2013 41 123 2001 61 2013 59 125 601 582 42 2014 40 41 123 792 2015 40 2016 41 59 125 601 582 42 2017 40 41 123 2018 91 2019 40 2018 41 45 1501 93 61 314 59 792 40 601 582 42 41 2018 59 125 865 2020 40 601 582 42 2017 41 123 856 704 2021 59 664 40 2021 61 1500 59 2021 60 2022 40 2023 41 45 1501 59 2021 349 41 123 2023 91 2021 93 61 2017 91 2021 93 59 125 2023 91 2021 93 61 314 59 125 601 582 42 2024 40 41 123 792 2025 323 2026 63 362 58 40 2025 323 2027 41 63 362 58 362 59 125 601 582 42 2028 40 601 582 42 2029 41 123 582 42 2030 61 2031 40 2029 44 362 41 59 688 40 2030 41 123 2032 61 2033 59 125 630 123 2030 61 2031 40 2029 44 362 41 59 688 40 2030 41 123 2034 61 2035 59 125 630 123 2030 61 2031 40 2029 44 362 41 59 688 40 2030 41 123 2036 61 2037 59 125 125 125 792 2029 59 125 601 582 42 2038 40 601 582 42 2039 41 123 2040 61 2041 40 2039 41 59 792 2039 59 125 601 582 42 2038 40 601 582 42 2042 44 601 582 42 2043 41 123 582 42 2029 61 2044 40 2042 44 2012 40 41 41 59 688 40 2029 41 123 704 2045 61 2046 40 2012 40 41 41 59 688 40 2029 43 2045 60 2043 41 123 2029 348 2045 59 2047 40 42 2029 41 63 2028 40 2029 41 58 2038 40 2029 41 59 125 630 123 2029 61 753 59 125 125 792 2029 59 125 125 59 ,"{'AvgLine': 8, 'CountLine': 97, 'CountStmt': 30, 'MaxNesting': 3, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 73, 'CountStmtDecl': 15, 'MaxCyclomatic': 4, 'SumCyclomatic': 15, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 24, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 10, 'AltCountLineCode': 73, 'CountLineCodeExe': 21, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 24, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 84, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118158,C++,"template<px4::params p>
class Param<float, p>
{
public:
	// static type-check
	static_assert(px4::parameters_type[(int)p] == PARAM_TYPE_FLOAT, ""parameter type must be float"");

	Param()
	{
		param_set_used(handle());
		update();
	}

	float get() const { return _val; }

	const float &reference() const { return _val; }

	/// Store the parameter value to the parameter storage (@see param_set())
	bool commit() const { return param_set(handle(), &_val) == 0; }

	/// Store the parameter value to the parameter storage, w/o notifying the system (@see param_set_no_notification())
	bool commit_no_notification() const { return param_set_no_notification(handle(), &_val) == 0; }

	/// Set and commit a new value. Returns true if the value changed.
	bool commit_no_notification(float val)
	{
		if (fabsf(val - _val) > FLT_EPSILON) {
			set(val);
			commit_no_notification();
			return true;
		}

		return false;
	}

	void set(float val) { _val = val; }

	void reset()
	{
		param_reset_no_notification(handle());
		update();
	}

	bool update() { return param_get(handle(), &_val) == 0; }

	param_t handle() const { return param_handle(p); }
private:
	float _val;
};",0,822 60 2000 321 2001 2002 62 587 2003 60 660 44 2002 62 123 777 58 330 810 40 2000 321 2004 91 40 704 41 2002 93 323 2005 44 362 41 59 2003 40 41 123 2006 40 2007 40 41 41 59 2008 40 41 59 125 660 2009 40 41 601 123 792 2010 59 125 601 660 38 2011 40 41 601 123 792 2012 59 125 331 569 2013 40 41 601 123 792 2014 40 2015 40 41 44 38 2016 41 323 1500 59 125 331 569 2017 40 41 601 123 792 2018 40 2019 40 41 44 38 2020 41 323 1500 59 125 331 569 2017 40 660 2021 41 123 688 40 2022 40 2021 45 2023 41 62 2024 41 123 2025 40 2021 41 59 2017 40 41 59 792 829 59 125 792 655 59 125 865 2026 40 660 2021 41 123 2027 61 2021 59 125 865 2028 40 41 123 2029 40 2030 40 41 41 59 2031 40 41 59 125 569 2032 40 41 123 792 2033 40 2034 40 41 44 38 2035 41 323 1500 59 125 2036 2037 40 41 601 123 792 2038 40 2002 41 59 125 773 58 660 2039 59 125 59 ,"{'AvgLine': 2, 'CountLine': 49, 'CountStmt': 21, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 34, 'CountLineCodeExe': 11, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118159,C++,"template<px4::params p>
class Param<float &, p>
{
public:
	// static type-check
	static_assert(px4::parameters_type[(int)p] == PARAM_TYPE_FLOAT, ""parameter type must be float"");

	Param(float &external_val)
		: _val(external_val)
	{
		param_set_used(handle());
		update();
	}

	float get() const { return _val; }

	const float &reference() const { return _val; }

	/// Store the parameter value to the parameter storage (@see param_set())
	bool commit() const { return param_set(handle(), &_val) == 0; }

	/// Store the parameter value to the parameter storage, w/o notifying the system (@see param_set_no_notification())
	bool commit_no_notification() const { return param_set_no_notification(handle(), &_val) == 0; }

	/// Set and commit a new value. Returns true if the value changed.
	bool commit_no_notification(float val)
	{
		if (fabsf(val - _val) > FLT_EPSILON) {
			set(val);
			commit_no_notification();
			return true;
		}

		return false;
	}

	void set(float val) { _val = val; }

	void reset()
	{
		param_reset_no_notification(handle());
		update();
	}

	bool update() { return param_get(handle(), &_val) == 0; }

	param_t handle() const { return param_handle(p); }
private:
	float &_val;
};",0,822 60 2000 321 2001 2002 62 587 2003 60 660 38 44 2002 62 123 777 58 330 810 40 2000 321 2004 91 40 704 41 2002 93 323 2005 44 362 41 59 2003 40 660 38 2006 41 58 2007 40 2006 41 123 2008 40 2009 40 41 41 59 2010 40 41 59 125 660 2011 40 41 601 123 792 2007 59 125 601 660 38 2012 40 41 601 123 792 2007 59 125 331 569 2013 40 41 601 123 792 2014 40 2015 40 41 44 38 2007 41 323 1500 59 125 331 569 2016 40 41 601 123 792 2017 40 2018 40 41 44 38 2007 41 323 1500 59 125 331 569 2016 40 660 2019 41 123 688 40 2020 40 2019 45 2007 41 62 2021 41 123 2022 40 2019 41 59 2016 40 41 59 792 829 59 125 792 655 59 125 865 2023 40 660 2019 41 123 2007 61 2019 59 125 865 2024 40 41 123 2025 40 2026 40 41 41 59 2027 40 41 59 125 569 2028 40 41 123 792 2029 40 2030 40 41 44 38 2007 41 323 1500 59 125 2031 2032 40 41 601 123 792 2033 40 2002 41 59 125 773 58 660 38 2007 59 125 59 ,"{'AvgLine': 2, 'CountLine': 50, 'CountStmt': 22, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 35, 'CountLineCodeExe': 12, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118162,C++,"template<px4::params p>
class Param<bool, p>
{
public:
	// static type-check
	static_assert(px4::parameters_type[(int)p] == PARAM_TYPE_INT32, ""parameter type must be int32_t"");

	Param()
	{
		param_set_used(handle());
		update();
	}

	bool get() const { return _val; }

	const bool &reference() const { return _val; }

	/// Store the parameter value to the parameter storage (@see param_set())
	bool commit() const
	{
		int32_t value_int = (int32_t)_val;
		return param_set(handle(), &value_int) == 0;
	}

	/// Store the parameter value to the parameter storage, w/o notifying the system (@see param_set_no_notification())
	bool commit_no_notification() const
	{
		int32_t value_int = (int32_t)_val;
		return param_set_no_notification(handle(), &value_int) == 0;
	}

	/// Set and commit a new value. Returns true if the value changed.
	bool commit_no_notification(bool val)
	{
		if (val != _val) {
			set(val);
			commit_no_notification();
			return true;
		}

		return false;
	}

	void set(bool val) { _val = val; }

	void reset()
	{
		param_reset_no_notification(handle());
		update();
	}

	bool update()
	{
		int32_t value_int;
		int ret = param_get(handle(), &value_int);

		if (ret == 0) {
			_val = value_int != 0;
			return true;
		}

		return false;
	}

	param_t handle() const { return param_handle(p); }
private:
	bool _val;
};",0,822 60 2000 321 2001 2002 62 587 2003 60 569 44 2002 62 123 777 58 330 810 40 2000 321 2004 91 40 704 41 2002 93 323 2005 44 362 41 59 2003 40 41 123 2006 40 2007 40 41 41 59 2008 40 41 59 125 569 2009 40 41 601 123 792 2010 59 125 601 569 38 2011 40 41 601 123 792 2012 59 125 331 569 2013 40 41 601 123 2014 2015 61 40 2014 41 2016 59 792 2017 40 2018 40 41 44 38 2015 41 323 1500 59 125 331 569 2019 40 41 601 123 2020 2021 61 40 2020 41 2022 59 792 2023 40 2024 40 41 44 38 2021 41 323 1500 59 125 331 569 2019 40 569 2025 41 123 688 40 2025 340 2026 41 123 2027 40 2025 41 59 2019 40 41 59 792 829 59 125 792 655 59 125 865 2028 40 569 2025 41 123 2029 61 2025 59 125 865 2030 40 41 123 2031 40 2032 40 41 41 59 2033 40 41 59 125 569 2034 40 41 123 2035 2036 59 704 2037 61 2038 40 2039 40 41 44 38 2036 41 59 688 40 2037 323 1500 41 123 2040 61 2036 340 1500 59 792 829 59 125 792 655 59 125 2041 2042 40 41 601 123 792 2043 40 2002 41 59 125 773 58 569 2044 59 125 59 ,"{'AvgLine': 4, 'CountLine': 68, 'CountStmt': 29, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 51, 'CountStmtDecl': 15, 'MaxCyclomatic': 2, 'SumCyclomatic': 12, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 51, 'CountLineCodeExe': 17, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 30, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118164,C++,"template<typename T>
class LowPassFilter2p
{
public:
	LowPassFilter2p() = default;

	LowPassFilter2p(float sample_freq, float cutoff_freq)
	{
		// set initial parameters
		set_cutoff_frequency(sample_freq, cutoff_freq);
	}

	// Change filter parameters
	void set_cutoff_frequency(float sample_freq, float cutoff_freq)
	{
		if ((sample_freq <= 0.f) || (cutoff_freq <= 0.f) || (cutoff_freq >= sample_freq / 2)
		    || !isFinite(sample_freq) || !isFinite(cutoff_freq)) {

			disable();
			return;
		}

		// reset delay elements on filter change
		_delay_element_1 = {};
		_delay_element_2 = {};

		_cutoff_freq = math::max(cutoff_freq, sample_freq * 0.001f);
		_sample_freq = sample_freq;

		const float fr = _sample_freq / _cutoff_freq;
		const float ohm = tanf(M_PI_F / fr);
		const float c = 1.f + 2.f * cosf(M_PI_F / 4.f) * ohm + ohm * ohm;

		_b0 = ohm * ohm / c;
		_b1 = 2.f * _b0;
		_b2 = _b0;

		_a1 = 2.f * (ohm * ohm - 1.f) / c;
		_a2 = (1.f - 2.f * cosf(M_PI_F / 4.f) * ohm + ohm * ohm) / c;

		if (!isFinite(_b0) || !isFinite(_b1) || !isFinite(_b2) || !isFinite(_a1) || !isFinite(_a2)) {
			disable();
		}
	}

	/**
	 * Add a new raw value to the filter
	 *
	 * @return retrieve the filtered result
	 */
	inline T apply(const T &sample)
	{
		// Direct Form II implementation
		T delay_element_0{sample - _delay_element_1 *_a1 - _delay_element_2 * _a2};

		const T output{delay_element_0 *_b0 + _delay_element_1 *_b1 + _delay_element_2 * _b2};

		_delay_element_2 = _delay_element_1;
		_delay_element_1 = delay_element_0;

		return output;
	}

	// Filter array of samples in place using the Direct form II.
	inline void applyArray(T samples[], int num_samples)
	{
		for (int n = 0; n < num_samples; n++) {
			samples[n] = apply(samples[n]);
		}
	}

	// Return the cutoff frequency
	float get_cutoff_freq() const { return _cutoff_freq; }

	// Return the sample frequency
	float get_sample_freq() const { return _sample_freq; }

	float getMagnitudeResponse(float frequency) const;

	// Reset the filter state to this value
	T reset(const T &sample)
	{
		const T input = isFinite(sample) ? sample : T{};

		if (fabsf(1 + _a1 + _a2) > FLT_EPSILON) {
			_delay_element_1 = _delay_element_2 = input / (1 + _a1 + _a2);

			if (!isFinite(_delay_element_1) || !isFinite(_delay_element_2)) {
				_delay_element_1 = _delay_element_2 = input;
			}

		} else {
			_delay_element_1 = _delay_element_2 = input;
		}

		return apply(input);
	}

	void disable()
	{
		// no filtering
		_sample_freq = 0.f;
		_cutoff_freq = 0.f;

		_delay_element_1 = {};
		_delay_element_2 = {};

		_b0 = 1.f;
		_b1 = 0.f;
		_b2 = 0.f;

		_a1 = 0.f;
		_a2 = 0.f;
	}

protected:
	T _delay_element_1{}; // buffered sample -1
	T _delay_element_2{}; // buffered sample -2

	// All the coefficients are normalized by a0, so a0 becomes 1 here
	float _a1{0.f};
	float _a2{0.f};

	float _b0{1.f};
	float _b1{0.f};
	float _b2{0.f};

	float _cutoff_freq{0.f};
	float _sample_freq{0.f};
};",0,822 60 835 2000 62 587 2001 123 777 58 2001 40 41 61 613 59 2001 40 660 2002 44 660 2003 41 123 330 2004 40 2002 44 2003 41 59 125 330 865 2005 40 660 2002 44 660 2003 41 123 688 40 40 2002 329 1500 41 309 40 2003 329 1500 41 309 40 2003 325 2002 47 1502 41 309 33 2006 40 2002 41 309 33 2006 40 2003 41 41 123 2007 40 41 59 792 59 125 330 2008 61 123 125 59 2009 61 123 125 59 2010 61 2011 321 2012 40 2003 44 2002 42 1500 41 59 2013 61 2002 59 601 660 2014 61 2013 47 2010 59 601 660 2015 61 2016 40 2017 47 2014 41 59 601 660 2018 61 1501 43 1502 42 2019 40 2017 47 1502 41 42 2015 43 2015 42 2015 59 2020 61 2015 42 2015 47 2018 59 2021 61 1502 42 2020 59 2022 61 2020 59 2023 61 1502 42 40 2015 42 2015 45 1501 41 47 2018 59 2024 61 40 1501 45 1502 42 2019 40 2017 47 1502 41 42 2015 43 2015 42 2015 41 47 2018 59 688 40 33 2006 40 2020 41 309 33 2006 40 2021 41 309 33 2006 40 2022 41 309 33 2006 40 2023 41 309 33 2006 40 2024 41 41 123 2025 40 41 59 125 125 306 700 2000 2026 40 601 2000 38 2027 41 123 330 2000 2028 123 2027 45 2029 42 2030 45 2031 42 2032 125 59 601 2000 2033 123 2028 42 2034 43 2035 42 2036 43 2037 42 2038 125 59 2039 61 2040 59 2040 61 2028 59 792 2033 59 125 330 700 865 2041 40 2000 2042 91 93 44 704 2043 41 123 664 40 704 2044 61 1500 59 2044 60 2043 59 2044 349 41 123 2042 91 2044 93 61 2026 40 2042 91 2044 93 41 59 125 125 330 660 2045 40 41 601 123 792 2046 59 125 330 660 2047 40 41 601 123 792 2048 59 125 660 2049 40 660 2050 41 601 59 330 2000 2051 40 601 2000 38 2027 41 123 601 2000 2052 61 2053 40 2027 41 63 2027 58 2000 123 125 59 688 40 2054 40 1501 43 2055 43 2056 41 62 2057 41 123 2058 61 2059 61 2052 47 40 1501 43 2055 43 2056 41 59 688 40 33 2053 40 2058 41 309 33 2053 40 2059 41 41 123 2058 61 2059 61 2052 59 125 125 630 123 2060 61 2061 61 2052 59 125 792 2026 40 2052 41 59 125 865 2062 40 41 123 330 2063 61 1500 59 2064 61 1500 59 2065 61 123 125 59 2066 61 123 125 59 2067 61 1501 59 2068 61 1500 59 2069 61 1500 59 2070 61 1500 59 2071 61 1500 59 125 775 58 2000 2072 123 125 59 330 2000 2073 123 125 59 330 330 660 2074 123 1500 125 59 660 2075 123 1500 125 59 660 2076 123 1501 125 59 660 2077 123 1500 125 59 660 2078 123 1500 125 59 660 2079 123 1500 125 59 660 2080 123 1500 125 59 125 59 ,"{'AvgLine': 11, 'CountLine': 129, 'CountStmt': 62, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 41, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 84, 'CountStmtDecl': 25, 'MaxCyclomatic': 4, 'SumCyclomatic': 14, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 30, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 10, 'AltCountLineCode': 84, 'CountLineCodeExe': 55, 'CountLineComment': 17, 'AltAvgLineComment': 0, 'AltCountLineBlank': 30, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 17, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 11, 'SumCyclomaticStrict': 23, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 65, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 9, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 9}"
118178,C++,"class MavlinkStreamCameraTrigger : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamCameraTrigger(mavlink); }

	static constexpr const char *get_name_static() { return ""CAMERA_TRIGGER""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_CAMERA_TRIGGER; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	bool const_rate() override { return true; }

	unsigned get_size() override
	{
		if (_camera_trigger_sub.advertised()) {
			return MAVLINK_MSG_ID_CAMERA_TRIGGER_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES
			       + MAVLINK_MSG_ID_COMMAND_LONG_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES; // TODO: MAV_CMD_DO_DIGICAM_CONTROL
		}

		return 0;
	}

private:
	explicit MavlinkStreamCameraTrigger(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _camera_trigger_sub{ORB_ID(camera_trigger)};
	uORB::Subscription _camera_status_sub{ORB_ID(camera_status)};
	camera_status_s _camera_status = {
		0,	//timestamp
		0,	//target_sys_id
		MAV_COMP_ID_CAMERA // active_comp_id
	};
	int _sequence {1};

	bool send() override
	{
		camera_trigger_s camera_trigger;

		if ((_mavlink->get_free_tx_buf() >= get_size()) && _camera_trigger_sub.update(&camera_trigger)) {
			/* ensure that only active trigger events are sent and ignore camera capture feedback messages*/
			if (camera_trigger.timestamp > 0 && !camera_trigger.feedback) {
				mavlink_camera_trigger_t msg{};
				msg.time_usec = camera_trigger.timestamp;
				msg.seq = camera_trigger.seq;
				mavlink_msg_camera_trigger_send_struct(_mavlink->get_channel(), &msg);

				_camera_status_sub.update(&_camera_status);

				vehicle_command_s vcmd{};
				vcmd.timestamp = hrt_absolute_time();
				vcmd.param1 = 0.0f; // all cameras
				vcmd.param2 = 0.0f; // duration 0 because only taking one picture
				vcmd.param3 = 1.0f; // only take one
				vcmd.param4 = (float)_sequence++;
				vcmd.param5 = (double)NAN;
				vcmd.param6 = (double)NAN;
				vcmd.param7 = NAN;
				vcmd.command = MAV_CMD_IMAGE_START_CAPTURE;
				vcmd.target_system = mavlink_system.sysid;
				vcmd.target_component = _camera_status.active_comp_id;

				MavlinkCommandSender::instance().handle_vehicle_command(vcmd, _mavlink->get_channel());


				// TODO: move this camera_trigger and publish as a vehicle_command
				/* send MAV_CMD_DO_DIGICAM_CONTROL*/
				mavlink_command_long_t command_long_msg{};

				command_long_msg.target_system = _camera_status.active_sys_id;
				command_long_msg.target_component = _camera_status.active_comp_id;
				command_long_msg.command = MAV_CMD_DO_DIGICAM_CONTROL;
				command_long_msg.confirmation = 0;
				command_long_msg.param1 = NAN;
				command_long_msg.param2 = NAN;
				command_long_msg.param3 = NAN;
				command_long_msg.param4 = NAN;
				command_long_msg.param5 = 1;   // take 1 picture
				command_long_msg.param6 = NAN;
				command_long_msg.param7 = NAN;

				mavlink_msg_command_long_send_struct(_mavlink->get_channel(), &command_long_msg);

				return true;
			}
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 569 2012 40 41 2010 123 792 829 59 125 856 2013 40 41 2010 123 688 40 2014 46 2015 40 41 41 123 792 2016 43 2017 43 2018 43 2017 59 330 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2019 321 2020 2021 123 2022 40 2023 41 125 59 2019 321 2020 2024 123 2025 40 2026 41 125 59 2027 2028 61 123 1500 44 330 1500 44 330 2029 330 125 59 704 2030 123 1501 125 59 569 2031 40 41 2010 123 2032 2033 59 688 40 40 2034 354 2035 40 41 325 2013 40 41 41 307 2021 46 2036 40 38 2033 41 41 123 305 688 40 2033 46 2037 62 1500 307 33 2033 46 2038 41 123 2039 2040 123 125 59 2040 46 2041 61 2033 46 2037 59 2040 46 2042 61 2033 46 2042 59 2043 40 2034 354 2044 40 41 44 38 2040 41 59 2024 46 2036 40 38 2028 41 59 2045 2046 123 125 59 2046 46 2037 61 2047 40 41 59 2046 46 2048 61 1500 59 330 2046 46 2049 61 1500 59 330 2046 46 2050 61 1501 59 330 2046 46 2051 61 40 660 41 2030 349 59 2046 46 2052 61 40 625 41 2053 59 2046 46 2054 61 40 625 41 2053 59 2046 46 2055 61 2053 59 2046 46 2056 61 2057 59 2046 46 2058 61 2059 46 2060 59 2046 46 2061 61 2028 46 2062 59 2063 321 2064 40 41 46 2065 40 2046 44 2034 354 2044 40 41 41 59 330 305 2066 2067 123 125 59 2067 46 2058 61 2028 46 2068 59 2067 46 2061 61 2028 46 2062 59 2067 46 2056 61 2069 59 2067 46 2070 61 1500 59 2067 46 2048 61 2053 59 2067 46 2049 61 2053 59 2067 46 2050 61 2053 59 2067 46 2051 61 2053 59 2067 46 2052 61 1501 59 330 2067 46 2054 61 2053 59 2067 46 2055 61 2053 59 2071 40 2034 354 2044 40 41 44 38 2067 41 59 792 829 59 125 125 792 655 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 90, 'CountStmt': 26, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 9, 'MaxEssential': 3, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 69, 'CountStmtDecl': 17, 'MaxCyclomatic': 3, 'SumCyclomatic': 12, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 18, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 69, 'CountLineCodeExe': 7, 'CountLineComment': 11, 'AltAvgLineComment': 0, 'AltCountLineBlank': 18, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 28, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.16', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118193,C++,"class MicroBenchHRT : public UnitTest
{
public:
	virtual bool run_tests();

private:

	bool time_px4_hrt();

	void reset();

	void lock()
	{
#ifdef __PX4_NUTTX
		flags = px4_enter_critical_section();
#endif
	}

	void unlock()
	{
#ifdef __PX4_NUTTX
		px4_leave_critical_section(flags);
#endif
	}

	uint64_t u_64;
	uint64_t u_64_out;
};",0,587 2000 58 777 2001 123 777 58 864 569 2002 40 41 59 773 58 569 2003 40 41 59 865 2004 40 41 59 865 2005 40 41 123 35 689 2006 2007 61 2008 40 41 59 35 636 125 865 2009 40 41 123 35 689 2010 2011 40 2012 41 59 35 636 125 2013 2014 59 2013 2015 59 125 59 ,"{'AvgLine': 6, 'CountLine': 49, 'CountStmt': 49, 'MaxNesting': 3, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 42, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 2, 'CountLineCode': 33, 'CountStmtDecl': 11, 'MaxCyclomatic': 6, 'SumCyclomatic': 14, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 39, 'CountLineCodeExe': 4, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 2, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118195,C++,"class Baro: public Sensor
{
public:
	Baro(std::shared_ptr<Ekf> ekf);
	~Baro();

	void setData(float baro);

private:
	float _baro_data{0.0f};

	void send(uint64_t time) override;

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 321 2003 60 2004 62 2005 41 59 126 2000 40 41 59 865 2006 40 660 2007 41 59 773 58 660 2008 123 1500 125 59 865 2009 40 2010 2011 41 2012 59 125 59 ,"{'AvgLine': 3, 'CountLine': 28, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 24, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118203,C++,"class TestTimingCollisionPrevention : public TestCollisionPrevention
{
public:
	TestTimingCollisionPrevention() : TestCollisionPrevention() {}
protected:
	hrt_abstime getTime() override
	{
		return mocked_time;
	}

	hrt_abstime getElapsedTime(const hrt_abstime *ptr) override
	{
		return mocked_time - *ptr;
	}
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 58 2001 40 41 123 125 775 58 2002 2003 40 41 2004 123 792 2005 59 125 2002 2006 40 601 2002 42 2007 41 2004 123 792 2008 45 42 2007 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 15, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 14, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 36, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118218,C++,"class testContainer : public IntrusiveSortedListNode<testContainer *>
{
public:
	int i{0};

	// sorted numerically
	bool operator<=(const testContainer &rhs) const { return i <= rhs.i; }
};",0,587 2000 58 777 2001 60 2000 42 62 123 777 58 704 2002 123 1500 125 59 330 569 758 329 40 601 2000 38 2003 41 601 123 792 2002 329 2003 46 2002 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 6, 'CountLineCodeExe': 1, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.17', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118207,C++,"class ActuatorTest
{
public:
	static constexpr int MAX_ACTUATORS = PWM_OUTPUT_MAX_CHANNELS;

	ActuatorTest(const OutputFunction function_assignments[MAX_ACTUATORS]);

	void reset();

	void update(int num_outputs, bool reversible_motors, float thrust_curve);

	void overrideValues(float outputs[MAX_ACTUATORS], int num_outputs);

	bool inTestMode() const { return _in_test_mode; }

private:

	uORB::Subscription _actuator_test_sub{ORB_ID(actuator_test)};
	bool _in_test_mode{false};
	hrt_abstime _next_timeout{0};

	float _current_outputs[MAX_ACTUATORS];
	bool _output_overridden[MAX_ACTUATORS];
	const OutputFunction *_function_assignments;
};",0,587 2000 123 777 58 809 603 704 2001 61 2002 59 2000 40 601 2003 2004 91 2001 93 41 59 865 2005 40 41 59 865 2006 40 704 2007 44 569 2008 44 660 2009 41 59 865 2010 40 660 2011 91 2001 93 44 704 2007 41 59 569 2012 40 41 601 123 792 2013 59 125 773 58 2014 321 2015 2016 123 2017 40 2018 41 125 59 569 2019 123 655 125 59 2020 2021 123 1500 125 59 660 2022 91 2001 93 59 569 2023 91 2001 93 59 601 2003 42 2024 59 125 59 ,"{'AvgLine': 17, 'CountLine': 111, 'CountStmt': 38, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 2, 'CountLineCode': 84, 'CountStmtDecl': 21, 'MaxCyclomatic': 5, 'SumCyclomatic': 12, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 23, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 5, 'AltCountLineCode': 84, 'CountLineCodeExe': 20, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 23, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 68, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
118208,C++,"class ArxRlsTest : public ::testing::Test
{
public:
	ArxRlsTest() {};
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 123 125 59 125 59 ,"{'AvgLine': 1, 'CountLine': 5, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 5, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 5, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118219,C++,"class LPS22HB_I2C : public device::I2C
{
public:
	LPS22HB_I2C(int bus, int bus_frequency);
	~LPS22HB_I2C() override = default;

	int	read(unsigned address, void *data, unsigned count) override;
	int	write(unsigned address, void *data, unsigned count) override;

protected:
	int	probe() override;

};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 704 2004 41 59 126 2000 40 41 2005 61 613 59 704 2006 40 856 2007 44 865 42 2008 44 856 2009 41 2005 59 704 2010 40 856 2007 44 865 42 2008 44 856 2009 41 2005 59 775 58 704 2011 40 41 2005 59 125 59 ,"{'AvgLine': 10, 'CountLine': 54, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 11, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 44, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118220,C++,"class UavcanBarometerBridge : public UavcanSensorBridgeBase
{
public:
	static const char *const NAME;

	UavcanBarometerBridge(uavcan::INode &node);

	const char *get_name() const override { return NAME; }

	int init() override;

private:

	void air_pressure_sub_cb(const uavcan::ReceivedDataStructure<uavcan::equipment::air_data::StaticPressure> &msg);
	void air_temperature_sub_cb(const uavcan::ReceivedDataStructure<uavcan::equipment::air_data::StaticTemperature> &msg);

	int init_driver(uavcan_bridge::Channel *channel) override;

	typedef uavcan::MethodBinder < UavcanBarometerBridge *,
		void (UavcanBarometerBridge::*)
		(const uavcan::ReceivedDataStructure<uavcan::equipment::air_data::StaticPressure> &) >
		AirPressureCbBinder;

	typedef uavcan::MethodBinder < UavcanBarometerBridge *,
		void (UavcanBarometerBridge::*)
		(const uavcan::ReceivedDataStructure<uavcan::equipment::air_data::StaticTemperature> &) >
		AirTemperatureCbBinder;

	uavcan::Subscriber<uavcan::equipment::air_data::StaticPressure, AirPressureCbBinder> _sub_air_pressure_data;
	uavcan::Subscriber<uavcan::equipment::air_data::StaticTemperature, AirTemperatureCbBinder> _sub_air_temperature_data;

	float last_temperature_kelvin{0.0f};

};",0,587 2000 58 777 2001 123 777 58 809 601 582 42 601 2002 59 2000 40 2003 321 2004 38 2005 41 59 601 582 42 2006 40 41 601 2007 123 792 2002 59 125 704 2008 40 41 2007 59 773 58 865 2009 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2013 62 38 2014 41 59 865 2015 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2016 62 38 2014 41 59 704 2017 40 2018 321 2019 42 2020 41 2007 59 833 2003 321 2021 60 2000 42 44 865 40 2000 321 42 41 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2013 62 38 41 62 2022 59 833 2003 321 2021 60 2000 42 44 865 40 2000 321 42 41 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2016 62 38 41 62 2023 59 2003 321 2024 60 2003 321 2011 321 2012 321 2013 44 2022 62 2025 59 2003 321 2024 60 2003 321 2011 321 2012 321 2016 44 2023 62 2026 59 660 2027 123 1500 125 59 125 59 ,"{'AvgLine': 12, 'CountLine': 109, 'CountStmt': 37, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 20, 'MaxEssential': 3, 'SumEssential': 12, 'AvgCyclomatic': 2, 'CountLineCode': 80, 'CountStmtDecl': 17, 'MaxCyclomatic': 4, 'SumCyclomatic': 13, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 26, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 6, 'AltCountLineCode': 80, 'CountLineCodeExe': 18, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 26, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118228,C++,"class MavlinkStreamDistanceSensor : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamDistanceSensor(mavlink); }

	static constexpr const char *get_name_static() { return ""DISTANCE_SENSOR""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_DISTANCE_SENSOR; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _distance_sensor_subs.advertised_count() * (MAVLINK_MSG_ID_DISTANCE_SENSOR_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES);
	}

private:
	explicit MavlinkStreamDistanceSensor(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::SubscriptionMultiArray<distance_sensor_s> _distance_sensor_subs{ORB_ID::distance_sensor};

	bool send() override
	{
		bool updated = false;

		for (int i = 0; i < _distance_sensor_subs.size(); i++) {
			distance_sensor_s dist_sensor;

			if (_distance_sensor_subs[i].update(&dist_sensor)) {
				mavlink_distance_sensor_t msg{};

				msg.time_boot_ms = dist_sensor.timestamp / 1000; /* us to ms */

				switch (dist_sensor.type) {
				case MAV_DISTANCE_SENSOR_ULTRASOUND:
					msg.type = MAV_DISTANCE_SENSOR_ULTRASOUND;
					break;

				case MAV_DISTANCE_SENSOR_LASER:
					msg.type = MAV_DISTANCE_SENSOR_LASER;
					break;

				case MAV_DISTANCE_SENSOR_INFRARED:
					msg.type = MAV_DISTANCE_SENSOR_INFRARED;
					break;

				default:
					msg.type = MAV_DISTANCE_SENSOR_LASER;
					break;
				}

				msg.current_distance = dist_sensor.current_distance * 1e2f; // m to cm
				msg.id               = i;
				msg.max_distance     = dist_sensor.max_distance * 1e2f;     // m to cm
				msg.min_distance     = dist_sensor.min_distance * 1e2f;     // m to cm
				msg.orientation      = dist_sensor.orientation;
				msg.covariance       = dist_sensor.variance * 1e4f;         // m^2 to cm^2

				mavlink_msg_distance_sensor_send_struct(_mavlink->get_channel(), &msg);

				updated = true;
			}
		}

		return updated;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 42 40 2015 43 2016 41 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 60 2019 62 2020 123 2021 321 2022 125 59 569 2023 40 41 2010 123 569 2024 61 655 59 664 40 704 2025 61 1500 59 2025 60 2020 46 2026 40 41 59 2025 349 41 123 2019 2027 59 688 40 2020 91 2025 93 46 2028 40 38 2027 41 41 123 2029 2030 123 125 59 2030 46 2031 61 2027 46 2032 47 1504 59 305 819 40 2027 46 2033 41 123 579 2034 58 2030 46 2033 61 2034 59 572 59 579 2035 58 2030 46 2033 61 2035 59 572 59 579 2036 58 2030 46 2033 61 2036 59 572 59 613 58 2030 46 2033 61 2035 59 572 59 125 2030 46 2037 61 2027 46 2037 42 1503 59 330 2030 46 2038 61 2025 59 2030 46 2039 61 2027 46 2039 42 1503 59 330 2030 46 2040 61 2027 46 2040 42 1503 59 330 2030 46 2041 61 2027 46 2041 59 2030 46 2042 61 2027 46 2043 42 1505 59 330 2044 40 2045 354 2046 40 41 44 38 2030 41 59 2024 61 829 59 125 125 792 2024 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 67, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 50, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 50, 'CountLineCodeExe': 5, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 17, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118226,C++,"template <unsigned RxQueueCapacity = 128>
class CanInitHelper
{
	CanRxItem queue_storage_[UAVCAN_KINETIS_NUM_IFACES][RxQueueCapacity];

public:
	enum { BitRateAutoDetect = 0 };

	CanDriver driver;

	CanInitHelper(uint32_t unused = 0x7) :
		driver(queue_storage_)
	{
	}

	/**
	 * This overload simply configures the provided bitrate.
	 * Auto bit rate detection will not be performed.
	 * Bitrate value must be positive.
	 * @return  Negative value on error; non-negative on success. Refer to constants Err*.
	 */
	int init(uavcan::uint32_t bitrate)
	{
		return driver.init(bitrate, CanIface::NormalMode);
	}

	/**
	 * This function can either initialize the driver at a fixed bit rate, or it can perform
	 * automatic bit rate detection. For theory please refer to the CiA application note #801.
	 *
	 * @param delay_callable    A callable entity that suspends execution for strictly more than one second.
	 *                          The callable entity will be invoked without arguments.
	 *                          @ref getRecommendedListeningDelay().
	 *
	 * @param inout_bitrate     Fixed bit rate or zero. Zero invokes the bit rate detection process.
	 *                          If auto detection was used, the function will update the argument
	 *                          with established bit rate. In case of an error the value will be undefined.
	 *
	 * @return                  Negative value on error; non-negative on success. Refer to constants Err*.
	 */
	template <typename DelayCallable>
	int init(DelayCallable delay_callable, uavcan::uint32_t &inout_bitrate = BitRateAutoDetect)
	{
		if (inout_bitrate > 0) {
			return driver.init(inout_bitrate, CanIface::NormalMode);

		} else {
			static const uavcan::uint32_t StandardBitRates[] = {
				1000000,
				500000,
				250000,
				125000
			};

			for (uavcan::uint8_t br = 0; br < sizeof(StandardBitRates) / sizeof(StandardBitRates[0]); br++) {
				inout_bitrate = StandardBitRates[br];

				const int res = driver.init(inout_bitrate, CanIface::SilentMode);

				delay_callable();

				if (res >= 0) {
					for (uavcan::uint8_t iface = 0; iface < driver.getNumIfaces(); iface++) {
						if (!driver.getIface(iface)->isRxBufferEmpty()) {
							// Re-initializing in normal mode
							return driver.init(inout_bitrate, CanIface::NormalMode);
						}
					}
				}
			}

			return -ErrBitRateNotDetected;
		}
	}

	/**
	 * Use this value for listening delay during automatic bit rate detection.
	 */
	static uavcan::MonotonicDuration getRecommendedListeningDelay()
	{
		return uavcan::MonotonicDuration::fromMSec(1050);
	}
};",0,822 60 856 2000 61 1504 62 587 2001 123 2002 2003 91 2004 93 91 2000 93 59 777 58 640 123 2005 61 1500 125 59 2006 2007 59 2001 40 2008 2009 61 1502 41 58 2007 40 2003 41 123 125 306 704 2010 40 2011 321 2008 2012 41 123 792 2007 46 2010 40 2012 44 2013 321 2014 41 59 125 306 822 60 835 2015 62 704 2010 40 2015 2016 44 2011 321 2008 38 2017 61 2018 41 123 688 40 2017 62 1500 41 123 792 2007 46 2010 40 2017 44 2019 321 2020 41 59 125 630 123 809 601 2011 321 2008 2021 91 93 61 123 1507 44 1507 44 1507 44 1507 125 59 664 40 2011 321 2022 2023 61 1500 59 2023 60 805 40 2021 41 47 805 40 2021 91 1500 93 41 59 2023 349 41 123 2017 61 2021 91 2023 93 59 601 704 2024 61 2007 46 2010 40 2017 44 2025 321 2026 41 59 2016 40 41 59 688 40 2024 325 1500 41 123 664 40 2011 321 2022 2027 61 1500 59 2027 60 2007 46 2028 40 41 59 2027 349 41 123 688 40 33 2007 46 2029 40 2027 41 354 2030 40 41 41 123 330 792 2007 46 2010 40 2017 44 2025 321 2031 41 59 125 125 125 125 792 45 2032 59 125 125 306 809 2011 321 2033 2034 40 41 123 792 2011 321 2033 321 2035 40 1505 41 59 125 125 59 ,"{'AvgLine': 11, 'CountLine': 81, 'CountStmt': 13, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 45, 'CountLineCodeExe': 3, 'CountLineComment': 24, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.53', 'AltCountLineComment': 24, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118235,C++,"class LaunchMethod
{
public:
	virtual ~LaunchMethod() = default;

	virtual void update(const float dt, float accel_x) = 0;
	virtual LaunchDetectionResult getLaunchDetected() const = 0;
	virtual void reset() = 0;

	/* Returns a upper pitch limit if required, otherwise returns pitchMaxDefault */
	virtual float getPitchMax(float pitchMaxDefault) = 0;

};",0,587 2000 123 777 58 864 126 2000 40 41 61 613 59 864 865 2001 40 601 660 2002 44 660 2003 41 61 1500 59 864 2004 2005 40 41 601 61 1500 59 864 865 2006 40 41 61 1500 59 305 864 660 2007 40 660 2008 41 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 13, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 9, 'CountStmtDecl': 4, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 9, 'CountLineCodeExe': 0, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118240,C++,"class FXAS21002C_I2C : public device::I2C
{
public:
	FXAS21002C_I2C(int bus, int bus_frequency, int i2c_address);
	~FXAS21002C_I2C() override = default;

	/**
	 * Read directly from the device.
	 *
	 * The actual size of each unit quantity is device-specific.
	 *
	 * @param reg	The register address at which to start reading
	 * @param data	The buffer into which the read values should be placed.
	 * @param count	The number of items to read.
	 * @return		The number of items read on success, negative errno otherwise.
	 */
	int	read(unsigned reg, void *data, unsigned count) override;

	/**
	 * Write directly to the device.
	 *
	 * The actual size of each unit quantity is device-specific.
	 *
	 * @param reg	The register address at which to start writing.
	 * @param data	The buffer from which values should be read.
	 * @param count	The number of items to write.
	 * @return		The number of items written on success, negative errno otherwise.
	 */
	int	write(unsigned reg, void *data, unsigned count) override;

	/**
	 * Read a register from the device.
	 *
	 * @param		The register to read.
	 * @return		The value that was read.
	 */
	uint8_t read_reg(unsigned reg) override;

	/**
	 * Write a register in the device.
	 *
	 * @param reg		The register to write.
	 * @param value		The new value to write.
	 * @return		OK on success, negative errno otherwise.
	 */
	int write_reg(unsigned reg, uint8_t value) override;

protected:
	int probe() override;
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 704 2004 44 704 2005 41 59 126 2000 40 41 2006 61 613 59 306 704 2007 40 856 2008 44 865 42 2009 44 856 2010 41 2006 59 306 704 2011 40 856 2008 44 865 42 2009 44 856 2010 41 2006 59 306 2012 2013 40 856 2008 41 2006 59 306 704 2014 40 856 2008 44 2012 2015 41 2006 59 775 58 704 2016 40 41 2006 59 125 59 ,"{'AvgLine': 10, 'CountLine': 112, 'CountStmt': 26, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 54, 'CountStmtDecl': 14, 'MaxCyclomatic': 2, 'SumCyclomatic': 8, 'AltAvgLineCode': 7, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 54, 'CountLineCodeExe': 18, 'CountLineComment': 43, 'AltAvgLineComment': 1, 'AltCountLineBlank': 15, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.80', 'AltCountLineComment': 43, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118246,C++,"class UavcanEscSubscriber : public UavcanDynamicPortSubscriber
{
public:
	UavcanEscSubscriber(CanardInstance &ins, UavcanParamManager &pmgr, uint8_t instance = 0) :
		UavcanDynamicPortSubscriber(ins, pmgr, ""ds_015."", ""esc"", instance) { };

	void subscribe() override
	{
		// Subscribe to messages reg.drone.service.actuator.common.sp.Vector8.0.1
		canardRxSubscribe(&_canard_instance,
				  CanardTransferKindMessage,
				  _subj_sub._canard_sub.port_id,
				  reg_drone_service_actuator_common_sp_Vector8_0_1_EXTENT_BYTES_,
				  CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
				  &_subj_sub._canard_sub);

		// Subscribe to messages reg.drone.service.common.Readiness.0.1
		canardRxSubscribe(&_canard_instance,
				  CanardTransferKindMessage,
				  static_cast<CanardPortID>(static_cast<uint32_t>(_subj_sub._canard_sub.port_id) + 1),
				  reg_drone_service_common_Readiness_0_1_EXTENT_BYTES_,
				  CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
				  &_canard_sub_readiness);
	};

	void callback(const CanardTransfer &receive) override
	{
		// Test with Yakut:
		// export YAKUT_TRANSPORT=""pyuavcan.transport.can.CANTransport(pyuavcan.transport.can.media.slcan.SLCANMedia('/dev/serial/by-id/usb-Zubax_Robotics_Zubax_Babel_23002B000E514E413431302000000000-if00', 8, 115200), 42)""
		// yakut pub 22.reg.drone.service.actuator.common.sp.Vector8.0.1 '{value: [1000, 2000, 3000, 4000, 0, 0, 0, 0]}'
		PX4_INFO(""EscCallback"");

		reg_drone_service_actuator_common_sp_Vector8_0_1 esc {};
		size_t esc_size_in_bits = receive.payload_size;
		reg_drone_service_actuator_common_sp_Vector8_0_1_deserialize_(&esc, (const uint8_t *)receive.payload,
				&esc_size_in_bits);

		double val1 = static_cast<double>(esc.value[0]);
		double val2 = static_cast<double>(esc.value[1]);
		double val3 = static_cast<double>(esc.value[2]);
		double val4 = static_cast<double>(esc.value[3]);
		PX4_INFO(""values[0-3] = {%f, %f, %f, %f}"", val1, val2, val3, val4);
		/// do something with the data

		/// For use with PR-16808 once merged
		// output_control_s outputs;

		// for (uint8_t i = 0; i < 8; i++) {
		// 	outputs.value[i] = 2.f * (esc.value[i] / 8191.f) - 1.f;
		// }

		// _output_pub.publish(outputs);
	};

private:
	/// For use with PR-16808 once merged
	// uORB::Publication<output_control_s> _output_pub{ORB_ID(output_control_mc)};

	CanardRxSubscription _canard_sub_readiness;
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 44 2004 38 2005 44 2006 2007 61 1500 41 58 2001 40 2003 44 2005 44 362 44 362 44 2007 41 123 125 59 865 2008 40 41 2009 123 330 2010 40 38 2011 44 2012 44 2013 46 2014 46 2015 44 2016 44 2017 44 38 2013 46 2014 41 59 330 2010 40 38 2011 44 2012 44 811 60 2018 62 40 811 60 2019 62 40 2013 46 2014 46 2015 41 43 1501 41 44 2020 44 2017 44 38 2021 41 59 125 59 865 2022 40 601 2023 38 2024 41 2009 123 330 330 330 2025 40 362 41 59 2026 2027 123 125 59 2028 2029 61 2024 46 2030 59 2031 40 38 2027 44 40 601 2006 42 41 2024 46 2032 44 38 2029 41 59 625 2033 61 811 60 625 62 40 2027 46 2034 91 1500 93 41 59 625 2035 61 811 60 625 62 40 2027 46 2034 91 1501 93 41 59 625 2036 61 811 60 625 62 40 2027 46 2034 91 1502 93 41 59 625 2037 61 811 60 625 62 40 2027 46 2034 91 1502 93 41 59 2025 40 362 44 2033 44 2035 44 2036 44 2037 41 59 331 331 330 330 330 330 330 125 59 773 58 331 330 2038 2039 59 125 59 ,"{'AvgLine': 16, 'CountLine': 60, 'CountStmt': 12, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 10, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 10, 'AvgLineComment': 4, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 3, 'AltCountLineCode': 36, 'CountLineCodeExe': 1, 'CountLineComment': 14, 'AltAvgLineComment': 4, 'AltCountLineBlank': 10, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.39', 'AltCountLineComment': 14, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118244,C++,"class MavlinkStreamMagCalReport : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamMagCalReport(mavlink); }

	static constexpr const char *get_name_static() { return ""MAG_CAL_REPORT""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_MAG_CAL_REPORT; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _parameter_update_sub.advertised() ? MAVLINK_MSG_ID_MAG_CAL_REPORT_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamMagCalReport(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	static constexpr int MAX_SENSOR_COUNT = 4;

	uORB::SubscriptionMultiArray<sensor_mag_s, MAX_SENSOR_COUNT> _sensor_mag_subs{ORB_ID::sensor_mag};
	uORB::Subscription _parameter_update_sub{ORB_ID(parameter_update)};

	bool send() override
	{
		bool sent = false;
		parameter_update_s parameter_update;

		if (_parameter_update_sub.update(&parameter_update)) {
			for (int mag = 0; mag < MAX_SENSOR_COUNT; mag++) {
				sensor_mag_s sensor_mag;

				if (_sensor_mag_subs[mag].update(&sensor_mag) && (sensor_mag.device_id != 0)) {
					calibration::Magnetometer calibration{sensor_mag.device_id, sensor_mag.is_external};

					if (calibration.calibrated()) {
						mavlink_mag_cal_report_t msg{};

						msg.compass_id = mag;
						msg.cal_mask = 0;                 // TODO: Bitmask of compasses being calibrated.
						msg.cal_status = MAG_CAL_SUCCESS; // TODO: Calibration Status.
						msg.fitness = 0;                  // TODO: RMS milligauss residuals.

						msg.ofs_x = calibration.offset()(0);
						msg.ofs_y = calibration.offset()(1);
						msg.ofs_z = calibration.offset()(2);

						msg.diag_x = calibration.scale()(0, 0);
						msg.diag_y = calibration.scale()(1, 1);
						msg.diag_z = calibration.scale()(2, 2);

						msg.offdiag_x = calibration.scale()(0, 1);
						msg.offdiag_y = calibration.scale()(0, 2);
						msg.offdiag_z = calibration.scale()(1, 2);

						msg.orientation_confidence = 1.f;                  // TODO: orientation_confidence
						msg.old_orientation = calibration.rotation_enum(); // TODO: old orientation
						msg.new_orientation = calibration.rotation_enum();
						msg.scale_factor = 1.f;

						mavlink_msg_mag_cal_report_send_struct(_mavlink->get_channel(), &msg);
						sent = true;
					}
				}
			}
		}

		return sent;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 809 603 704 2017 61 1502 59 2018 321 2019 60 2020 44 2017 62 2021 123 2022 321 2023 125 59 2018 321 2024 2025 123 2026 40 2027 41 125 59 569 2028 40 41 2010 123 569 2029 61 655 59 2030 2031 59 688 40 2025 46 2032 40 38 2031 41 41 123 664 40 704 2033 61 1500 59 2033 60 2017 59 2033 349 41 123 2020 2034 59 688 40 2021 91 2033 93 46 2032 40 38 2034 41 307 40 2034 46 2035 340 1500 41 41 123 2036 321 2037 2036 123 2034 46 2035 44 2034 46 2038 125 59 688 40 2036 46 2039 40 41 41 123 2040 2041 123 125 59 2041 46 2042 61 2033 59 2041 46 2043 61 1500 59 330 2041 46 2044 61 2045 59 330 2041 46 2046 61 1500 59 330 2041 46 2047 61 2036 46 2048 40 41 40 1500 41 59 2041 46 2049 61 2036 46 2048 40 41 40 1501 41 59 2041 46 2050 61 2036 46 2048 40 41 40 1502 41 59 2041 46 2051 61 2036 46 2052 40 41 40 1500 44 1500 41 59 2041 46 2053 61 2036 46 2052 40 41 40 1501 44 1501 41 59 2041 46 2054 61 2036 46 2052 40 41 40 1502 44 1502 41 59 2041 46 2055 61 2036 46 2052 40 41 40 1500 44 1501 41 59 2041 46 2056 61 2036 46 2052 40 41 40 1500 44 1502 41 59 2041 46 2057 61 2036 46 2052 40 41 40 1501 44 1502 41 59 2041 46 2058 61 1501 59 330 2041 46 2059 61 2036 46 2060 40 41 59 330 2041 46 2061 61 2036 46 2060 40 41 59 2041 46 2062 61 1501 59 2063 40 2064 354 2065 40 41 44 38 2041 41 59 2029 61 829 59 125 125 125 125 792 2029 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 71, 'CountStmt': 25, 'MaxNesting': 4, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 54, 'CountStmtDecl': 17, 'MaxCyclomatic': 5, 'SumCyclomatic': 12, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 54, 'CountLineCodeExe': 8, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 17, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118243,C++,"class InnovationLpf final
{
public:
	InnovationLpf() = default;
	~InnovationLpf() = default;

	void reset(float val = 0.f) { _x = val; }

	/**
	 * Update the filter with a new value and returns the filtered state
	 * The new value is constained by the limit set in setSpikeLimit
	 * @param val new input
	 * @param alpha normalized weight of the new input
	 * @param spike_limit the amplitude of the saturation at the input of the filter
	 * @return filtered output
	 */
	float update(float val, float alpha, float spike_limit)
	{
		float val_constrained = math::constrain(val, -spike_limit, spike_limit);
		float beta = 1.f - alpha;

		_x = beta * _x + alpha * val_constrained;

		return _x;
	}

	/**
	 * Helper function to compute alpha from dt and the inverse of tau
	 * @param dt sampling time in seconds
	 * @param tau_inv inverse of the time constant of the filter
	 * @return alpha, the normalized weight of a new measurement
	 */
	static float computeAlphaFromDtAndTauInv(float dt, float tau_inv)
	{
		return math::constrain(dt * tau_inv, 0.f, 1.f);
	}

private:
	float _x{}; ///< current state of the filter
};",0,587 2000 2001 123 777 58 2000 40 41 61 613 59 126 2000 40 41 61 613 59 865 2002 40 660 2003 61 1500 41 123 2004 61 2003 59 125 306 660 2005 40 660 2003 44 660 2006 44 660 2007 41 123 660 2008 61 2009 321 2010 40 2003 44 45 2007 44 2007 41 59 660 2011 61 1501 45 2006 59 2012 61 2011 42 2012 43 2006 42 2008 59 792 2012 59 125 306 809 660 2013 40 660 2014 44 660 2015 41 123 792 2016 321 2017 40 2014 42 2015 44 1500 44 1501 41 59 125 773 58 660 2018 123 125 59 331 125 59 ,"{'AvgLine': 4, 'CountLine': 40, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 20, 'CountLineCodeExe': 6, 'CountLineComment': 15, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.75', 'AltCountLineComment': 15, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118257,C++,"class StaticPressure :
	public UavcanPublisherBase,
	public uORB::SubscriptionCallbackWorkItem,
	private uavcan::Publisher<uavcan::equipment::air_data::StaticPressure>
{
public:
	StaticPressure(px4::WorkItem *work_item, uavcan::INode &node) :
		UavcanPublisherBase(uavcan::equipment::air_data::StaticPressure::DefaultDataTypeID),
		uORB::SubscriptionCallbackWorkItem(work_item, ORB_ID(sensor_baro)),
		uavcan::Publisher<uavcan::equipment::air_data::StaticPressure>(node)
	{
		this->setPriority(uavcan::TransferPriority::Default);
	}

	void PrintInfo() override
	{
		if (uORB::SubscriptionCallbackWorkItem::advertised()) {
			printf(""\t%s -> %s:%d\n"",
			       uORB::SubscriptionCallbackWorkItem::get_topic()->o_name,
			       uavcan::equipment::air_data::StaticPressure::getDataTypeFullName(),
			       uavcan::equipment::air_data::StaticPressure::DefaultDataTypeID);
		}
	}

	void BroadcastAnyUpdates() override
	{
		// sensor_baro -> uavcan::equipment::air_data::StaticPressure
		sensor_baro_s baro;

		if (uORB::SubscriptionCallbackWorkItem::update(&baro)) {
			uavcan::equipment::air_data::StaticPressure static_pressure{};
			static_pressure.static_pressure = baro.pressure * 100; // millibar -> pascals
			uavcan::Publisher<uavcan::equipment::air_data::StaticPressure>::broadcast(static_pressure);

			// ensure callback is registered
			uORB::SubscriptionCallbackWorkItem::registerCallback();
		}
	}
};",0,587 2000 58 777 2001 44 777 2002 321 2003 44 773 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 123 777 58 2000 40 2008 321 2009 42 2010 44 2004 321 2011 38 2012 41 58 2001 40 2004 321 2006 321 2007 321 2000 321 2013 41 44 2002 321 2003 40 2010 44 2014 40 2015 41 41 44 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 40 2012 41 123 823 354 2016 40 2004 321 2017 321 2018 41 59 125 865 2019 40 41 2020 123 688 40 2002 321 2003 321 2021 40 41 41 123 2022 40 362 44 2002 321 2003 321 2023 40 41 354 2024 44 2004 321 2006 321 2007 321 2000 321 2025 40 41 44 2004 321 2006 321 2007 321 2000 321 2013 41 59 125 125 865 2026 40 41 2020 123 330 2027 2028 59 688 40 2002 321 2003 321 2029 40 38 2028 41 41 123 2004 321 2006 321 2007 321 2000 2030 123 125 59 2030 46 2030 61 2028 46 2031 42 1503 59 330 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 321 2032 40 2030 41 59 330 2002 321 2003 321 2033 40 41 59 125 125 125 59 ,"{'AvgLine': 10, 'CountLine': 39, 'CountStmt': 8, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 8, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 33, 'CountLineCodeExe': 2, 'CountLineComment': 3, 'AltAvgLineComment': 1, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118261,C++,"class LockstepScheduler
{
public:
	~LockstepScheduler();

	void set_absolute_time(uint64_t time_us);
	inline uint64_t get_absolute_time() const { return _time_us; }
	int cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *lock, uint64_t time_us);
	int usleep_until(uint64_t timed_us);

	LockstepComponents &components() { return _components; }

private:
	struct TimedWait {
		~TimedWait()
		{
			if (!done) {
				// This can only happen when a thread gets canceled (e.g. via pthread_cancel), and since
				// pthread_cond_wait is a cancellation point, the rest of LockstepScheduler::cond_timedwait afterwards
				// might not be executed. Which means the mutex will not be unlocked either, so we unlock to avoid
				// a dead-lock in LockstepScheduler::set_absolute_time().
				// This destructor gets called as part of thread-local storage cleanup.
				// This is really only a work-around for non-proper thread stopping. Note that we also assume,
				// that we can still access the mutex.
				if (passed_lock) {
					pthread_mutex_unlock(passed_lock);
				}

				done = true;
			}

			// If a thread quickly exits after a cond_timedwait(), the
			// thread_local object can still be in the linked list. In that case
			// we need to wait until it's removed.
			while (!removed) {
				system_usleep(5000);
			}
		}

		pthread_cond_t *passed_cond{nullptr};
		pthread_mutex_t *passed_lock{nullptr};
		uint64_t time_us{0};
		bool timeout{false};
		std::atomic<bool> done{false};
		std::atomic<bool> removed{true};

		TimedWait *next{nullptr}; ///< linked list
	};

	LockstepComponents _components;

	std::atomic<uint64_t> _time_us{0};

	TimedWait *_timed_waits{nullptr}; ///< head of linked list
	std::mutex _timed_waits_mutex;
	std::atomic<bool> _setting_time{false}; ///< true if set_absolute_time() is currently being executed
};",0,587 2000 123 777 58 126 2000 40 41 59 865 2001 40 2002 2003 41 59 700 2002 2004 40 41 601 123 792 2005 59 125 704 2006 40 2007 42 2008 44 2009 42 2010 44 2002 2003 41 59 704 2011 40 2002 2012 41 59 2013 38 2014 40 41 123 792 2015 59 125 773 58 816 2016 123 126 2016 40 41 123 688 40 33 2017 41 123 330 330 330 330 330 330 330 688 40 2018 41 123 2019 40 2018 41 59 125 2017 61 829 59 125 330 330 330 870 40 33 2020 41 123 2021 40 1505 41 59 125 125 2007 42 2022 123 753 125 59 2009 42 2023 123 753 125 59 2002 2003 123 1500 125 59 569 2024 123 655 125 59 2025 321 2026 60 569 62 2027 123 655 125 59 2025 321 2026 60 569 62 2028 123 829 125 59 2016 42 2029 123 753 125 59 331 125 59 2013 2030 59 2031 321 2032 60 2002 62 2033 123 1500 125 59 2016 42 2034 123 753 125 59 331 2031 321 2035 2036 59 2031 321 2032 60 569 62 2037 123 655 125 59 331 125 59 ,"{'AvgLine': 21, 'CountLine': 186, 'CountStmt': 87, 'MaxNesting': 3, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 63, 'MaxEssential': 3, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 124, 'CountStmtDecl': 33, 'MaxCyclomatic': 5, 'SumCyclomatic': 16, 'AltAvgLineCode': 14, 'AvgLineComment': 3, 'CountClassBase': 0, 'CountLineBlank': 33, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 6, 'AltCountLineCode': 124, 'CountLineCodeExe': 66, 'CountLineComment': 32, 'AltAvgLineComment': 3, 'AltCountLineBlank': 33, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 20, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.26', 'AltCountLineComment': 32, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
118268,C++,"class RM3100_SPI : public device::SPI
{
public:
	RM3100_SPI(int bus, uint32_t devid, int bus_frequency, spi_mode_e spi_mode);
	virtual ~RM3100_SPI() = default;

	virtual int     init();
	virtual int     read(unsigned address, void *data, unsigned count);
	virtual int     write(unsigned address, void *data, unsigned count);
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 2004 2005 44 704 2006 44 2007 2008 41 59 864 126 2000 40 41 61 613 59 864 704 2009 40 41 59 864 704 2010 40 856 2011 44 865 42 2012 44 856 2013 41 59 864 704 2014 40 856 2011 44 865 42 2012 44 856 2013 41 59 125 59 ,"{'AvgLine': 14, 'CountLine': 65, 'CountStmt': 24, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 15, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 51, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 9, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 5, 'AltCountLineCode': 51, 'CountLineCodeExe': 14, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118281,C++,"template class Matrix<float, 3, 3>;",0,822 587 2000 60 660 44 1502 44 1502 62 59 ,"{'AvgLine': 0, 'CountLine': 1, 'CountStmt': 0, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 1, 'CountStmtDecl': 0, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 1, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118286,C++,"class BMP388_SPI: public device::SPI, public IBMP388
{
public:
	BMP388_SPI(uint8_t bus, uint32_t device, int bus_frequency, spi_mode_e spi_mode);
	virtual ~BMP388_SPI() = default;

	int init();

	uint8_t get_reg(uint8_t addr);
	int get_reg_buf(uint8_t addr, uint8_t *buf, uint8_t len);
	int set_reg(uint8_t value, uint8_t addr);
	calibration_s *get_calibration(uint8_t addr);

	uint32_t get_device_id() const override { return device::SPI::get_device_id(); }

	uint8_t get_device_address() const override { return device::SPI::get_device_address(); }
private:
	spi_calibration_s _cal;
};",0,587 2000 58 777 2001 321 2002 44 777 2003 123 777 58 2000 40 2004 2005 44 2006 2001 44 704 2007 44 2008 2009 41 59 864 126 2000 40 41 61 613 59 704 2010 40 41 59 2004 2011 40 2004 2012 41 59 704 2013 40 2004 2012 44 2004 42 2014 44 2004 2015 41 59 704 2016 40 2004 2017 44 2004 2012 41 59 2018 42 2019 40 2004 2012 41 59 2006 2020 40 41 601 2021 123 792 2001 321 2002 321 2020 40 41 59 125 2004 2022 40 41 601 2021 123 792 2001 321 2002 321 2022 40 41 59 125 773 58 2023 2024 59 125 59 ,"{'AvgLine': 4, 'CountLine': 54, 'CountStmt': 20, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 47, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 47, 'CountLineCodeExe': 11, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 91, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118289,C++,"class UavcanReadinessPublisher : public UavcanPublisher
{
public:
	UavcanReadinessPublisher(CanardInstance &ins, UavcanParamManager &pmgr, uint8_t instance = 0) :
		UavcanPublisher(ins, pmgr, ""ds_015"", ""readiness"", instance)
	{

	};

	~UavcanReadinessPublisher() override = default;

	// Update the uORB Subscription and broadcast a UAVCAN message
	virtual void update() override
	{
		// Not sure if actuator_armed is a good indication of readiness but seems close to it
		if (_actuator_armed_sub.updated() && _port_id != CANARD_PORT_ID_UNSET) {
			actuator_armed_s armed {};
			_actuator_armed_sub.update(&armed);

			reg_drone_service_common_Readiness_0_1 readiness {};

			if (armed.armed) {
				readiness.value = reg_drone_service_common_Readiness_0_1_ENGAGED;

			} else {
				readiness.value = reg_drone_service_common_Readiness_0_1_STANDBY;
			}

			uint8_t readiness_payload_buffer[reg_drone_service_common_Readiness_0_1_SERIALIZATION_BUFFER_SIZE_BYTES_];

			CanardTransfer transfer = {
				.timestamp_usec = hrt_absolute_time() + PUBLISHER_DEFAULT_TIMEOUT_USEC,
				.priority       = CanardPriorityNominal,
				.transfer_kind  = CanardTransferKindMessage,
				.port_id        = _port_id, // This is the subject-ID.
				.remote_node_id = CANARD_NODE_ID_UNSET,
				.transfer_id    = _transfer_id,
				.payload_size   = reg_drone_service_common_Readiness_0_1_SERIALIZATION_BUFFER_SIZE_BYTES_,
				.payload        = &readiness_payload_buffer,
			};

			int32_t result = reg_drone_service_common_Readiness_0_1_serialize_(&readiness, readiness_payload_buffer,
					 &transfer.payload_size);

			if (result == 0) {
				// set the data ready in the buffer and chop if needed
				++_transfer_id;  // The transfer-ID shall be incremented after every transmission on this subject.
				result = canardTxPush(&_canard_instance, &transfer);
			}
		}
	};

private:
	uORB::Subscription _actuator_armed_sub{ORB_ID(actuator_armed)};
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 44 2004 38 2005 44 2006 2007 61 1500 41 58 2001 40 2003 44 2005 44 362 44 362 44 2007 41 123 125 59 126 2000 40 41 2008 61 613 59 330 864 865 2009 40 41 2008 123 330 688 40 2010 46 2011 40 41 307 2012 340 2013 41 123 2014 2015 123 125 59 2010 46 2009 40 38 2015 41 59 2016 2017 123 125 59 688 40 2015 46 2015 41 123 2017 46 2018 61 2019 59 125 630 123 2017 46 2020 61 2021 59 125 2006 2022 91 2023 93 59 2024 2025 61 123 46 2026 61 2027 40 41 43 2028 44 46 2029 61 2030 44 46 2031 61 2032 44 46 2033 61 2012 44 330 46 2034 61 2035 44 46 2036 61 2037 44 46 2038 61 2023 44 46 2039 61 38 2022 44 125 59 2040 2041 61 2042 40 38 2017 44 2022 44 38 2025 46 2043 41 59 688 40 2041 323 1500 41 123 330 349 2044 59 330 2041 61 2045 40 38 2046 44 38 2025 41 59 125 125 125 59 773 58 2047 321 2048 2049 123 2050 40 2051 41 125 59 125 59 ,"{'AvgLine': 22, 'CountLine': 55, 'CountStmt': 11, 'MaxNesting': 2, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 41, 'CountStmtDecl': 8, 'MaxCyclomatic': 4, 'SumCyclomatic': 5, 'AltAvgLineCode': 17, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 41, 'CountLineCodeExe': 3, 'CountLineComment': 5, 'AltAvgLineComment': 2, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118294,C++,"class TestCase
{
public:
	TestCase(unsigned timeout, unsigned unlocked_after, LockstepScheduler &ls) :
		_timeout(timeout + some_time_us),
		_unlocked_after(unlocked_after + some_time_us),
		_ls(ls)
	{
		pthread_mutex_init(&_lock, NULL);
		pthread_cond_init(&_cond, NULL);
	}

	~TestCase()
	{
		EXPECT_TRUE(_is_done);
		pthread_mutex_destroy(&_lock);
		pthread_cond_destroy(&_cond);
	}

	void run()
	{
		pthread_mutex_lock(&_lock);
		_thread = std::make_shared<TestThread>([this]() {
			_result = _ls.cond_timedwait(&_cond, &_lock, _timeout);
			pthread_mutex_unlock(&_lock);
		});
	}

	void check()
	{
		if (_is_done) {
			return;
		}

		uint64_t time_us = _ls.get_absolute_time();

		const bool unlock_reached = (time_us >= _unlocked_after);
		const bool unlock_is_before_timeout = (_unlocked_after <= _timeout);
		const bool timeout_reached = (time_us >= _timeout);

		if (unlock_reached && unlock_is_before_timeout && !(timeout_reached)) {
			pthread_mutex_lock(&_lock);
			pthread_cond_broadcast(&_cond);
			pthread_mutex_unlock(&_lock);
			_is_done = true;
			// We can be sure that this triggers.
			_thread->join(_ls);
			EXPECT_EQ(_result, 0);
		}

		else if (timeout_reached) {
			_is_done = true;
			_thread->join(_ls);
			EXPECT_EQ(_result, ETIMEDOUT);
		}
	}
private:
	static constexpr int INITIAL_RESULT = 42;

	unsigned _timeout;
	unsigned _unlocked_after;
	pthread_cond_t _cond;
	pthread_mutex_t _lock;
	LockstepScheduler &_ls;
	std::atomic<bool> _is_done{false};
	std::atomic<int> _result {INITIAL_RESULT};
	std::shared_ptr<TestThread> _thread{};
};",0,587 2000 123 777 58 2000 40 856 2001 44 856 2002 44 2003 38 2004 41 58 2005 40 2001 43 2006 41 44 2007 40 2002 43 2006 41 44 2008 40 2004 41 123 2009 40 38 2010 44 2011 41 59 2012 40 38 2013 44 2011 41 59 125 126 2000 40 41 123 2014 40 2015 41 59 2016 40 38 2017 41 59 2018 40 38 2019 41 59 125 865 2020 40 41 123 2021 40 38 2022 41 59 2023 61 2024 321 2025 60 2026 62 40 91 823 93 40 41 123 2027 61 2008 46 2028 40 38 2029 44 38 2022 44 2005 41 59 2030 40 38 2022 41 59 125 41 59 125 865 2031 40 41 123 688 40 2032 41 123 792 59 125 2033 2034 61 2008 46 2035 40 41 59 601 569 2036 61 40 2034 325 2007 41 59 601 569 2037 61 40 2007 329 2005 41 59 601 569 2038 61 40 2034 325 2005 41 59 688 40 2036 307 2037 307 33 40 2038 41 41 123 2039 40 38 2040 41 59 2041 40 38 2042 41 59 2043 40 38 2040 41 59 2032 61 829 59 330 2044 354 2045 40 2008 41 59 2046 40 2047 44 1500 41 59 125 630 688 40 2038 41 123 2032 61 829 59 2048 354 2049 40 2008 41 59 2050 40 2051 44 2052 41 59 125 125 773 58 809 603 704 2053 61 1503 59 856 2005 59 856 2007 59 2054 2055 59 2056 2057 59 2003 38 2008 59 2058 321 2059 60 569 62 2060 123 655 125 59 2058 321 2059 60 704 62 2061 123 2053 125 59 2058 321 2062 60 2063 62 2064 123 125 59 125 59 ,"{'AvgLine': 12, 'CountLine': 68, 'CountStmt': 39, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 59, 'CountStmtDecl': 22, 'MaxCyclomatic': 4, 'SumCyclomatic': 7, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 59, 'CountLineCodeExe': 25, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 7, 'CountDeclInstanceVariableProtected': 0}"
118296,C++,"class LowPassFilter2pVector3fTest : public ::testing::Test
{
public:
	void runSimulatedFilter(const Vector3f &signal_freq_hz, const Vector3f &phase_delay_deg, const Vector3f &gain_db);

	math::LowPassFilter2p<Vector3f> _lpf{800.f, 30.f};

	const float _epsilon_near = 0.08f;
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 865 2003 40 601 2004 38 2005 44 601 2004 38 2006 44 601 2004 38 2007 41 59 2008 321 2009 60 2004 62 2010 123 1504 44 1503 125 59 601 660 2011 61 1500 59 125 59 ,"{'AvgLine': 32, 'CountLine': 41, 'CountStmt': 18, 'MaxNesting': 2, 'AvgLineCode': 26, 'AvgEssential': 1, 'AvgLineBlank': 5, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 4, 'CountLineCode': 33, 'CountStmtDecl': 14, 'MaxCyclomatic': 4, 'SumCyclomatic': 4, 'AltAvgLineCode': 26, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 5, 'CountDeclMethod': 1, 'AltCountLineCode': 33, 'CountLineCodeExe': 6, 'CountLineComment': 2, 'AltAvgLineComment': 2, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 4, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118301,C++,"class ActuatorEffectivenessTiltrotorVTOL: public ActuatorEffectiveness
{
public:
	ActuatorEffectivenessTiltrotorVTOL();
	virtual ~ActuatorEffectivenessTiltrotorVTOL() = default;

	bool getEffectivenessMatrix(matrix::Matrix<float, NUM_AXES, NUM_ACTUATORS> &matrix, bool force) override;

	/**
	 * Set the current flight phase
	 *
	 * @param Flight phase
	 */
	void setFlightPhase(const FlightPhase &flight_phase) override;

	int numActuators() const override { return 10; }
protected:
	bool _updated{true};
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 864 126 2000 40 41 61 613 59 569 2002 40 2003 321 2004 60 660 44 2005 44 2006 62 38 2003 44 569 2007 41 2008 59 306 865 2009 40 601 2010 38 2011 41 2008 59 704 2012 40 41 601 2008 123 792 1502 59 125 775 58 569 2013 123 829 125 59 125 59 ,"{'AvgLine': 18, 'CountLine': 90, 'CountStmt': 40, 'MaxNesting': 1, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 35, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 68, 'CountStmtDecl': 8, 'MaxCyclomatic': 7, 'SumCyclomatic': 10, 'AltAvgLineCode': 14, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 68, 'CountLineCodeExe': 42, 'CountLineComment': 9, 'AltAvgLineComment': 1, 'AltCountLineBlank': 13, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
118304,C++,"class SystemIdentificationTest : public ::testing::Test
{
public:
	SystemIdentificationTest() {};
	float apply(float sample);
	void setCoefficients(float a1, float a2, float b0, float b1, float b2)
	{
		_a1 = a1;
		_a2 = a2;
		_b0 = b0;
		_b1 = b1;
		_b2 = b2;
	}

private:
	float _a1{};
	float _a2{};
	float _b0{};
	float _b1{};
	float _b2{};
	float _delay_element_1{};
	float _delay_element_2{};
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 123 125 59 660 2003 40 660 2004 41 59 865 2005 40 660 2006 44 660 2007 44 660 2008 44 660 2009 44 660 2010 41 123 2011 61 2006 59 2012 61 2007 59 2013 61 2008 59 2014 61 2009 59 2015 61 2010 59 125 773 58 660 2016 123 125 59 660 2017 123 125 59 660 2018 123 125 59 660 2019 123 125 59 660 2020 123 125 59 660 2021 123 125 59 660 2022 123 125 59 125 59 ,"{'AvgLine': 6, 'CountLine': 34, 'CountStmt': 20, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 30, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 30, 'CountLineCodeExe': 10, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 42, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 7, 'CountDeclInstanceVariableProtected': 0}"
118308,C++,"class RangeSensorMeasurement :
	public UavcanPublisherBase,
	public uORB::SubscriptionCallbackWorkItem,
	private uavcan::Publisher<uavcan::equipment::range_sensor::Measurement>
{
public:
	RangeSensorMeasurement(px4::WorkItem *work_item, uavcan::INode &node, uint8_t instance = 0) :
		UavcanPublisherBase(uavcan::equipment::range_sensor::Measurement::DefaultDataTypeID),
		uORB::SubscriptionCallbackWorkItem(work_item, ORB_ID(distance_sensor), instance),
		uavcan::Publisher<uavcan::equipment::range_sensor::Measurement>(node)
	{
		this->setPriority(uavcan::TransferPriority::Default);
	}

	void PrintInfo() override
	{
		if (uORB::SubscriptionCallbackWorkItem::advertised()) {
			printf(""\t%s -> %s:%d\n"",
			       uORB::SubscriptionCallbackWorkItem::get_topic()->o_name,
			       uavcan::equipment::range_sensor::Measurement::getDataTypeFullName(),
			       uavcan::equipment::range_sensor::Measurement::DefaultDataTypeID);
		}
	}

	void BroadcastAnyUpdates() override
	{
		// distance_sensor[] -> uavcan::equipment::range_sensor::Measurement
		distance_sensor_s dist;

		if (uORB::SubscriptionCallbackWorkItem::update(&dist)) {
			uavcan::equipment::range_sensor::Measurement range_sensor{};

			range_sensor.sensor_id = get_instance();
			range_sensor.range = dist.current_distance;
			range_sensor.field_of_view = dist.h_fov;

			// sensor type
			switch (dist.type) {
			case distance_sensor_s::MAV_DISTANCE_SENSOR_LASER:
				range_sensor.sensor_type = uavcan::equipment::range_sensor::Measurement::SENSOR_TYPE_LIDAR;
				break;

			case distance_sensor_s::MAV_DISTANCE_SENSOR_ULTRASOUND:
				range_sensor.sensor_type = uavcan::equipment::range_sensor::Measurement::SENSOR_TYPE_SONAR;
				break;

			case distance_sensor_s::MAV_DISTANCE_SENSOR_RADAR:
				range_sensor.sensor_type = uavcan::equipment::range_sensor::Measurement::SENSOR_TYPE_RADAR;
				break;

			case distance_sensor_s::MAV_DISTANCE_SENSOR_INFRARED:
			default:
				range_sensor.sensor_type = uavcan::equipment::range_sensor::Measurement::SENSOR_TYPE_UNDEFINED;
				break;
			}

			// reading_type
			if (dist.current_distance >= dist.max_distance) {
				range_sensor.reading_type = uavcan::equipment::range_sensor::Measurement::READING_TYPE_TOO_FAR;

			} else if (dist.current_distance <= dist.min_distance) {
				range_sensor.reading_type = uavcan::equipment::range_sensor::Measurement::READING_TYPE_TOO_CLOSE;

			} else if (dist.signal_quality != 0) {
				range_sensor.reading_type = uavcan::equipment::range_sensor::Measurement::READING_TYPE_VALID_RANGE;

			} else {
				range_sensor.reading_type = uavcan::equipment::range_sensor::Measurement::READING_TYPE_UNDEFINED;
			}

			uavcan::Publisher<uavcan::equipment::range_sensor::Measurement>::broadcast(range_sensor);

			// ensure callback is registered
			uORB::SubscriptionCallbackWorkItem::registerCallback();
		}
	}
};",0,587 2000 58 777 2001 44 777 2002 321 2003 44 773 2004 321 2005 60 2004 321 2006 321 2007 321 2008 62 123 777 58 2000 40 2009 321 2010 42 2011 44 2004 321 2012 38 2013 44 2014 2015 61 1500 41 58 2001 40 2004 321 2006 321 2007 321 2008 321 2016 41 44 2002 321 2003 40 2011 44 2017 40 2018 41 44 2015 41 44 2004 321 2005 60 2004 321 2006 321 2007 321 2008 62 40 2013 41 123 823 354 2019 40 2004 321 2020 321 2021 41 59 125 865 2022 40 41 2023 123 688 40 2002 321 2003 321 2024 40 41 41 123 2025 40 362 44 2002 321 2003 321 2026 40 41 354 2027 44 2004 321 2006 321 2007 321 2008 321 2028 40 41 44 2004 321 2006 321 2007 321 2008 321 2016 41 59 125 125 865 2029 40 41 2023 123 330 2030 2031 59 688 40 2002 321 2003 321 2032 40 38 2031 41 41 123 2004 321 2006 321 2007 321 2008 2007 123 125 59 2007 46 2033 61 2034 40 41 59 2007 46 2035 61 2031 46 2036 59 2007 46 2037 61 2031 46 2038 59 330 819 40 2031 46 2039 41 123 579 2030 321 2040 58 2007 46 2041 61 2004 321 2006 321 2007 321 2008 321 2042 59 572 59 579 2030 321 2043 58 2007 46 2041 61 2004 321 2006 321 2007 321 2008 321 2044 59 572 59 579 2030 321 2045 58 2007 46 2041 61 2004 321 2006 321 2007 321 2008 321 2046 59 572 59 579 2030 321 2047 58 613 58 2007 46 2041 61 2004 321 2006 321 2007 321 2008 321 2048 59 572 59 125 330 688 40 2031 46 2036 325 2031 46 2049 41 123 2007 46 2050 61 2004 321 2006 321 2007 321 2008 321 2051 59 125 630 688 40 2031 46 2036 329 2031 46 2052 41 123 2007 46 2053 61 2004 321 2006 321 2007 321 2008 321 2054 59 125 630 688 40 2031 46 2055 340 1500 41 123 2007 46 2056 61 2004 321 2006 321 2007 321 2008 321 2057 59 125 630 123 2007 46 2058 61 2004 321 2006 321 2007 321 2008 321 2059 59 125 2004 321 2005 60 2004 321 2006 321 2007 321 2008 62 321 2060 40 2007 41 59 330 2002 321 2003 321 2061 40 41 59 125 125 125 59 ,"{'AvgLine': 22, 'CountLine': 77, 'CountStmt': 11, 'MaxNesting': 2, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 59, 'CountStmtDecl': 5, 'MaxCyclomatic': 5, 'SumCyclomatic': 8, 'AltAvgLineCode': 17, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 59, 'CountLineCodeExe': 6, 'CountLineComment': 4, 'AltAvgLineComment': 1, 'AltCountLineBlank': 14, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118318,C++,"class SystemClock : public uavcan::ISystemClock, uavcan::Noncopyable
{
	SystemClock() { }

	virtual void adjustUtc(uavcan::UtcDuration adjustment) { clock::adjustUtc(adjustment); }

public:
	virtual uavcan::MonotonicTime getMonotonic() const { return clock::getMonotonic(); }
	virtual uavcan::UtcTime getUtc()             const { return clock::getUtc(); }

	/**
	 * Calls clock::init() as needed.
	 * This function is thread safe.
	 */
	static SystemClock &instance();
};",0,587 2000 58 777 2001 321 2002 44 2001 321 2003 123 2000 40 41 123 125 864 865 2004 40 2001 321 2005 2006 41 123 2007 321 2004 40 2006 41 59 125 777 58 864 2001 321 2008 2009 40 41 601 123 792 2010 321 2009 40 41 59 125 864 2001 321 2011 2012 40 41 601 123 792 2013 321 2012 40 41 59 125 306 809 2000 38 2014 40 41 59 125 59 ,"{'AvgLine': 1, 'CountLine': 16, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 9, 'CountLineCodeExe': 0, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.44', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118324,C++,"class VelocitySmoothingTest : public ::testing::Test
{
public:
	void setConstraints(float j_max, float a_max, float v_max);
	void setInitialConditions(Vector3f acc, Vector3f vel, Vector3f pos);
	void updateTrajectories(float dt, Vector3f velocity_setpoints);

	VelocitySmoothing _trajectories[3];
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 865 2003 40 660 2004 44 660 2005 44 660 2006 41 59 865 2007 40 2008 2009 44 2008 2010 44 2008 2011 41 59 865 2012 40 660 2013 44 2008 2014 41 59 2015 2016 91 1502 93 59 125 59 ,"{'AvgLine': 10, 'CountLine': 40, 'CountStmt': 20, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 37, 'CountStmtDecl': 8, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 37, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118329,C++,"class GnssFix2 :
	public UavcanPublisherBase,
	public uORB::SubscriptionCallbackWorkItem,
	private uavcan::Publisher<uavcan::equipment::gnss::Fix2>
{
public:
	GnssFix2(px4::WorkItem *work_item, uavcan::INode &node) :
		UavcanPublisherBase(uavcan::equipment::gnss::Fix2::DefaultDataTypeID),
		uORB::SubscriptionCallbackWorkItem(work_item, ORB_ID(sensor_gps)),
		uavcan::Publisher<uavcan::equipment::gnss::Fix2>(node)
	{
		this->setPriority(uavcan::TransferPriority::OneLowerThanHighest);
	}

	void PrintInfo() override
	{
		if (uORB::SubscriptionCallbackWorkItem::advertised()) {
			printf(""\t%s -> %s:%d\n"",
			       uORB::SubscriptionCallbackWorkItem::get_topic()->o_name,
			       uavcan::equipment::gnss::Fix2::getDataTypeFullName(),
			       id());
		}
	}

	void BroadcastAnyUpdates() override
	{
		using uavcan::equipment::gnss::Fix2;

		// sensor_gps -> uavcan::equipment::gnss::Fix2
		sensor_gps_s gps;

		if (uORB::SubscriptionCallbackWorkItem::update(&gps)) {
			uavcan::equipment::gnss::Fix2 fix2{};

			fix2.gnss_time_standard = fix2.GNSS_TIME_STANDARD_UTC;
			fix2.gnss_timestamp.usec = gps.time_utc_usec;
			fix2.latitude_deg_1e8 = (int64_t)gps.lat * 10;
			fix2.longitude_deg_1e8 = (int64_t)gps.lon * 10;
			fix2.height_msl_mm = gps.alt;
			fix2.height_ellipsoid_mm = gps.alt_ellipsoid;
			fix2.status = gps.fix_type;
			fix2.ned_velocity[0] = gps.vel_n_m_s;
			fix2.ned_velocity[1] = gps.vel_e_m_s;
			fix2.ned_velocity[2] = gps.vel_d_m_s;
			fix2.pdop = gps.hdop > gps.vdop ? gps.hdop :
				    gps.vdop; // Use pdop for both hdop and vdop since uavcan v0 spec does not support them
			fix2.sats_used = gps.satellites_used;

			fix2.mode = Fix2::MODE_SINGLE;
			fix2.sub_mode = 0;

			switch (fix2.status) {
			case 4:
				fix2.mode = Fix2::MODE_DGPS;
				break;

			case 5:
				fix2.mode = Fix2::MODE_RTK;
				fix2.sub_mode = Fix2::SUB_MODE_RTK_FLOAT;
				break;

			case 6:
				fix2.mode = Fix2::MODE_RTK;
				fix2.sub_mode = Fix2::SUB_MODE_RTK_FIXED;
				break;
			}

			// Diagonal matrix
			// position variances -- Xx, Yy, Zz
			fix2.covariance.push_back(gps.eph);
			fix2.covariance.push_back(gps.eph);
			fix2.covariance.push_back(gps.epv);
			// velocity variance -- Vxx, Vyy, Vzz
			fix2.covariance.push_back(gps.s_variance_m_s);
			fix2.covariance.push_back(gps.s_variance_m_s);
			fix2.covariance.push_back(gps.s_variance_m_s);

			uavcan::equipment::gnss::ECEFPositionVelocity ecefpositionvelocity{};
			ecefpositionvelocity.velocity_xyz[0] = NAN;
			ecefpositionvelocity.velocity_xyz[1] = NAN;
			ecefpositionvelocity.velocity_xyz[2] = NAN;

			// Use ecef_position_velocity for now... There is no heading field
			if (!isnan(gps.heading)) {
				ecefpositionvelocity.velocity_xyz[0] = gps.heading;

				if (!isnan(gps.heading_offset)) {
					ecefpositionvelocity.velocity_xyz[1] = gps.heading_offset;
				}

				if (!isnan(gps.heading_accuracy)) {
					ecefpositionvelocity.velocity_xyz[2] = gps.heading_accuracy;
				}

				fix2.ecef_position_velocity.push_back(ecefpositionvelocity);
			}

			uavcan::Publisher<uavcan::equipment::gnss::Fix2>::broadcast(fix2);

			// ensure callback is registered
			uORB::SubscriptionCallbackWorkItem::registerCallback();
		}
	}
};",0,587 2000 58 777 2001 44 777 2002 321 2003 44 773 2004 321 2005 60 2004 321 2006 321 2007 321 2008 62 123 777 58 2000 40 2009 321 2010 42 2011 44 2004 321 2012 38 2013 41 58 2001 40 2004 321 2006 321 2007 321 2008 321 2014 41 44 2002 321 2003 40 2011 44 2015 40 2016 41 41 44 2004 321 2005 60 2004 321 2006 321 2007 321 2008 62 40 2013 41 123 823 354 2017 40 2004 321 2018 321 2019 41 59 125 865 2020 40 41 2021 123 688 40 2002 321 2003 321 2022 40 41 41 123 2023 40 362 44 2002 321 2003 321 2024 40 41 354 2025 44 2004 321 2006 321 2007 321 2008 321 2026 40 41 44 2027 40 41 41 59 125 125 865 2028 40 41 2021 123 860 2004 321 2006 321 2007 321 2008 59 330 2029 2030 59 688 40 2002 321 2003 321 2031 40 38 2030 41 41 123 2004 321 2006 321 2007 321 2008 2032 123 125 59 2032 46 2033 61 2032 46 2034 59 2032 46 2035 46 2036 61 2030 46 2037 59 2032 46 2038 61 40 2039 41 2030 46 2040 42 1502 59 2032 46 2041 61 40 2039 41 2030 46 2042 42 1502 59 2032 46 2043 61 2030 46 2044 59 2032 46 2045 61 2030 46 2046 59 2032 46 2047 61 2030 46 2048 59 2032 46 2049 91 1500 93 61 2030 46 2050 59 2032 46 2049 91 1501 93 61 2030 46 2051 59 2032 46 2049 91 1502 93 61 2030 46 2052 59 2032 46 2053 61 2030 46 2054 62 2030 46 2055 63 2030 46 2054 58 2030 46 2055 59 330 2032 46 2056 61 2030 46 2057 59 2032 46 2058 61 2008 321 2059 59 2032 46 2060 61 1500 59 819 40 2032 46 2047 41 123 579 1502 58 2032 46 2058 61 2008 321 2061 59 572 59 579 1502 58 2032 46 2058 61 2008 321 2062 59 2032 46 2060 61 2008 321 2063 59 572 59 579 1502 58 2032 46 2058 61 2008 321 2062 59 2032 46 2060 61 2008 321 2064 59 572 59 125 330 330 2032 46 2065 46 2066 40 2030 46 2067 41 59 2032 46 2065 46 2066 40 2030 46 2067 41 59 2032 46 2065 46 2066 40 2030 46 2068 41 59 330 2032 46 2065 46 2066 40 2030 46 2069 41 59 2032 46 2065 46 2066 40 2030 46 2069 41 59 2032 46 2065 46 2066 40 2030 46 2069 41 59 2004 321 2006 321 2007 321 2070 2071 123 125 59 2071 46 2072 91 1500 93 61 2073 59 2071 46 2072 91 1501 93 61 2073 59 2071 46 2072 91 1502 93 61 2073 59 330 688 40 33 2074 40 2030 46 2075 41 41 123 2071 46 2072 91 1500 93 61 2030 46 2075 59 688 40 33 2074 40 2030 46 2076 41 41 123 2071 46 2072 91 1501 93 61 2030 46 2076 59 125 688 40 33 2074 40 2030 46 2077 41 41 123 2071 46 2072 91 1502 93 61 2030 46 2077 59 125 2032 46 2078 46 2066 40 2071 41 59 125 2004 321 2005 60 2004 321 2006 321 2007 321 2008 62 321 2079 40 2032 41 59 330 2002 321 2003 321 2080 40 41 59 125 125 125 59 ,"{'AvgLine': 31, 'CountLine': 104, 'CountStmt': 12, 'MaxNesting': 3, 'AvgLineCode': 24, 'AvgEssential': 1, 'AvgLineBlank': 5, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 81, 'CountStmtDecl': 6, 'MaxCyclomatic': 5, 'SumCyclomatic': 8, 'AltAvgLineCode': 24, 'AvgLineComment': 2, 'CountClassBase': 2, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 5, 'CountDeclMethod': 3, 'AltCountLineCode': 81, 'CountLineCodeExe': 2, 'CountLineComment': 7, 'AltAvgLineComment': 2, 'AltCountLineBlank': 17, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118334,C++,"class ZeroOrderHoverThrustEkfTest : public ::testing::Test
{
public:
	struct Status {
		float hover_thrust;
		float hover_thrust_var;
		float innov;
		float innov_var;
		float innov_test_ratio;
		float accel_noise_var;
	};

	ZeroOrderHoverThrustEkfTest()
	{
		_random_generator.seed(42);
	}
	float computeAccelFromThrustAndHoverThrust(float thrust, float hover_thrust);
	Status runEkf(float hover_thrust_true, float thrust, float time, float accel_noise = 0.f,
		      float thr_noise = 0.f);

private:
	ZeroOrderHoverThrustEkf _ekf{};
	static constexpr float _dt = 0.02f;

	std::normal_distribution<float> _standard_normal_distribution;
	std::default_random_engine _random_generator; // Pseudo-random generator with constant seed

protected:
	static constexpr float _accel_noise_var_min = 1.f; // Constrained in the implementation
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 816 2003 123 660 2004 59 660 2005 59 660 2006 59 660 2007 59 660 2008 59 660 2009 59 125 59 2000 40 41 123 2010 46 2011 40 1503 41 59 125 660 2012 40 660 2013 44 660 2014 41 59 2003 2015 40 660 2016 44 660 2013 44 660 2017 44 660 2018 61 1500 44 660 2019 61 1500 41 59 773 58 2020 2021 123 125 59 809 603 660 2022 61 1500 59 2023 321 2024 60 660 62 2025 59 2023 321 2026 2027 59 330 775 58 809 603 660 2028 61 1501 59 330 125 59 ,"{'AvgLine': 10, 'CountLine': 58, 'CountStmt': 32, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 50, 'CountStmtDecl': 20, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 50, 'CountLineCodeExe': 14, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 91, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118343,C++,"class LPS25H_I2C : public device::I2C
{
public:
	LPS25H_I2C(int bus, int bus_frequency);
	virtual ~LPS25H_I2C() override = default;

	int	read(unsigned address, void *data, unsigned count) override;
	int	write(unsigned address, void *data, unsigned count) override;

protected:
	int	probe();

};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 704 2004 41 59 864 126 2000 40 41 2005 61 613 59 704 2006 40 856 2007 44 865 42 2008 44 856 2009 41 2005 59 704 2010 40 856 2007 44 865 42 2008 44 856 2009 41 2005 59 775 58 704 2011 40 41 59 125 59 ,"{'AvgLine': 10, 'CountLine': 53, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 43, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 43, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118350,C++,"class Mavlink2Dev : public DevCommon
{
public:
	Mavlink2Dev(ReadBuffer *read_buffer);
	virtual ~Mavlink2Dev() {}

	virtual ssize_t	read(struct file *filp, char *buffer, size_t buflen);
	virtual ssize_t	write(struct file *filp, const char *buffer, size_t buflen);
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 42 2003 41 59 864 126 2000 40 41 123 125 864 2004 2005 40 816 2006 42 2007 44 582 42 2008 44 2009 2010 41 59 864 2004 2011 40 816 2006 42 2007 44 601 582 42 2008 44 2009 2010 41 59 125 59 ,"{'AvgLine': 17, 'CountLine': 78, 'CountStmt': 38, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 31, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 57, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 8, 'AltAvgLineCode': 12, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 4, 'AltCountLineCode': 57, 'CountLineCodeExe': 35, 'CountLineComment': 7, 'AltAvgLineComment': 1, 'AltCountLineBlank': 14, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118355,C++,"class UavcanGnssSubscriber : public UavcanDynamicPortSubscriber
{
public:
	UavcanGnssSubscriber(CanardInstance &ins, UavcanParamManager &pmgr, uint8_t instance = 0) :
		UavcanDynamicPortSubscriber(ins, pmgr, ""ds_015."", ""gps"", instance) { };

	void subscribe() override
	{
		// Subscribe to messages reg.drone.physics.kinematics.geodetic.Point.0.1
		canardRxSubscribe(&_canard_instance,
				  CanardTransferKindMessage,
				  _subj_sub._canard_sub.port_id,
				  reg_drone_physics_kinematics_geodetic_Point_0_1_EXTENT_BYTES_,
				  CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
				  &_subj_sub._canard_sub);

		/** TODO: Add additional GPS-data messages: (reg.drone.service.gnss._.0.1.uavcan):
		 * # A compliant implementation of this service should publish the following subjects:
		 * #
		 * #   PUBLISHED SUBJECT NAME      SUBJECT TYPE                                            TYP. RATE [Hz]
		 * #   point_kinematics            reg.drone.physics.kinematics.geodetic.PointStateVarTs   1...100
		 * #   time                        reg.drone.service.gnss.Time                             1...10
		 * #   heartbeat                   reg.drone.service.gnss.Heartbeat                        ~1
		 * #   sensor_status               reg.drone.service.sensor.Status                         ~1
		 *
		 * Not mentioned, but should also be included: Dilution of Precision
		 *   (reg.drone.service.gnss.DilutionOfPrecision.0.1.uavcan)
		 * For PX4, only the PointStateVarTs, DilutionOfPrecision, and perhaps Time would be needed
		 * to publish 'sensor_gps'
		 */
	};

	void callback(const CanardTransfer &receive) override
	{
		// Test with Yakut:
		// export YAKUT_TRANSPORT=""pyuavcan.transport.can.CANTransport(pyuavcan.transport.can.media.slcan.SLCANMedia('/dev/serial/by-id/usb-Zubax_Robotics_Zubax_Babel_23002B000E514E413431302000000000-if00', 8, 115200), 42)""
		// yakut pub 1500.reg.drone.physics.kinematics.geodetic.Point.0.1 '{latitude: 1.234, longitude: 2.34, altitude: {meter: 0.5}}'
		PX4_INFO(""GpsCallback"");

		reg_drone_physics_kinematics_geodetic_Point_0_1 geo {};
		size_t geo_size_in_bits = receive.payload_size;
		reg_drone_physics_kinematics_geodetic_Point_0_1_deserialize_(&geo, (const uint8_t *)receive.payload, &geo_size_in_bits);

		double lat = geo.latitude;
		double lon = geo.longitude;
		double alt = geo.altitude.meter;
		PX4_INFO(""Latitude: %f, Longitude: %f, Altitude: %f"", lat, lon, alt);
		/// do something with the data
	};

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 44 2004 38 2005 44 2006 2007 61 1500 41 58 2001 40 2003 44 2005 44 362 44 362 44 2007 41 123 125 59 865 2008 40 41 2009 123 330 2010 40 38 2011 44 2012 44 2013 46 2014 46 2015 44 2016 44 2017 44 38 2013 46 2014 41 59 306 125 59 865 2018 40 601 2019 38 2020 41 2009 123 330 330 330 2021 40 362 41 59 2022 2023 123 125 59 2024 2025 61 2020 46 2026 59 2027 40 38 2023 44 40 601 2006 42 41 2020 46 2028 44 38 2025 41 59 625 2029 61 2023 46 2030 59 625 2031 61 2023 46 2032 59 625 2033 61 2023 46 2034 46 2035 59 2021 40 362 44 2029 44 2031 44 2033 41 59 331 125 59 125 59 ,"{'AvgLine': 14, 'CountLine': 51, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 8, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 7, 'AvgLineComment': 6, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 26, 'CountLineCodeExe': 1, 'CountLineComment': 19, 'AltAvgLineComment': 6, 'AltCountLineBlank': 6, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.73', 'AltCountLineComment': 19, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118363,C++,"class SensorGpsSim : public ModuleBase<SensorGpsSim>, public ModuleParams, public px4::ScheduledWorkItem
{
public:
	SensorGpsSim();
	~SensorGpsSim() override;

	/** @see ModuleBase */
	static int task_spawn(int argc, char *argv[]);

	/** @see ModuleBase */
	static int custom_command(int argc, char *argv[]);

	/** @see ModuleBase */
	static int print_usage(const char *reason = nullptr);

	bool init();

private:
	void Run() override;

	// generate white Gaussian noise sample with std=1
	static float generate_wgn();

	// generate white Gaussian noise sample as a 3D vector with specified std
	matrix::Vector3f noiseGauss3f(float stdx, float stdy, float stdz) { return matrix::Vector3f(generate_wgn() * stdx, generate_wgn() * stdy, generate_wgn() * stdz); }

	uORB::SubscriptionInterval _parameter_update_sub{ORB_ID(parameter_update), 1_s};
	uORB::Subscription _vehicle_global_position_sub{ORB_ID(vehicle_global_position_groundtruth)};
	uORB::Subscription _vehicle_local_position_sub{ORB_ID(vehicle_local_position_groundtruth)};

	uORB::PublicationMulti<sensor_gps_s> _sensor_gps_pub{ORB_ID(sensor_gps)};

	perf_counter_t _loop_perf{perf_alloc(PC_ELAPSED, MODULE_NAME"": cycle"")};

	DEFINE_PARAMETERS(
		(ParamInt<px4::params::SIM_GPS_USED>) _sim_gps_used
	)
};",0,587 2000 58 777 2001 60 2000 62 44 777 2002 44 777 2003 321 2004 123 777 58 2000 40 41 59 126 2000 40 41 2005 59 306 809 704 2006 40 704 2007 44 582 42 2008 91 93 41 59 306 809 704 2009 40 704 2007 44 582 42 2008 91 93 41 59 306 809 704 2010 40 601 582 42 2011 61 753 41 59 569 2012 40 41 59 773 58 865 2013 40 41 2005 59 330 809 660 2014 40 41 59 330 2015 321 2016 2017 40 660 2018 44 660 2019 44 660 2020 41 123 792 2015 321 2016 40 2014 40 41 42 2018 44 2014 40 41 42 2019 44 2014 40 41 42 2020 41 59 125 2021 321 2022 2023 123 2024 40 2025 41 44 1501 125 59 2021 321 2026 2027 123 2028 40 2029 41 125 59 2021 321 2026 2030 123 2031 40 2032 41 125 59 2021 321 2033 60 2034 62 2035 123 2036 40 2037 41 125 59 2038 2039 123 2040 40 2041 44 2042 362 41 125 59 2043 40 40 2044 60 2003 321 2045 321 2046 62 41 2047 41 125 59 ,"{'AvgLine': 18, 'CountLine': 216, 'CountStmt': 70, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 37, 'MaxEssential': 3, 'SumEssential': 12, 'AvgCyclomatic': 2, 'CountLineCode': 161, 'CountStmtDecl': 33, 'MaxCyclomatic': 5, 'SumCyclomatic': 21, 'AltAvgLineCode': 14, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 39, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 2, 'CountDeclMethod': 10, 'AltCountLineCode': 161, 'CountLineCodeExe': 38, 'CountLineComment': 24, 'AltAvgLineComment': 1, 'AltCountLineBlank': 39, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 54, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.15', 'AltCountLineComment': 24, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 4, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118359,C++,"class TestObstacleAvoidance : public ::ObstacleAvoidance
{
public:
	TestObstacleAvoidance() : ObstacleAvoidance(nullptr) {}
	void paramsChanged() {ObstacleAvoidance::updateParamsImpl();}
	void test_setPosition(Vector3f &pos) {_position = pos;}
};",0,587 2000 58 777 321 2001 123 777 58 2000 40 41 58 2001 40 753 41 123 125 865 2002 40 41 123 2001 321 2003 40 41 59 125 865 2004 40 2005 38 2006 41 123 2007 61 2006 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 7, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 7, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118364,C++,"class EkfRingBufferTest : public ::testing::Test
{
public:

	sample _x, _y, _z;
	RingBuffer<sample> *_buffer;

	void SetUp() override
	{
		_buffer = new RingBuffer<sample>();
		_x.time_us = 1000000;
		_x.data[0] = _x.data[1] = _x.data[2] = 1.5f;

		_y.time_us = 2000000;
		_y.data[0] = _y.data[1] = _y.data[2] = 3.0f;

		_z.time_us = 3000000;
		_z.data[0] = _z.data[1] = _z.data[2] = 4.0f;
	}

	void TearDown() override
	{
		delete _buffer;
	}
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2003 2004 44 2005 44 2006 59 2007 60 2003 62 42 2008 59 865 2009 40 41 2010 123 2008 61 744 2007 60 2003 62 40 41 59 2004 46 2011 61 1507 59 2004 46 2012 91 1500 93 61 2004 46 2012 91 1501 93 61 2004 46 2012 91 1502 93 61 1502 59 2005 46 2011 61 1508 59 2005 46 2012 91 1500 93 61 2005 46 2012 91 1501 93 61 2005 46 2012 91 1502 93 61 1502 59 2006 46 2011 61 1508 59 2006 46 2012 91 1500 93 61 2006 46 2012 91 1501 93 61 2006 46 2012 91 1502 93 61 1502 59 125 865 2013 40 41 2010 123 619 2008 59 125 125 59 ,"{'AvgLine': 8, 'CountLine': 25, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 2, 'AltCountLineCode': 20, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118368,C++,"template<typename T>
class NotchFilter
{
public:
	NotchFilter() = default;
	~NotchFilter() = default;

	void setParameters(float sample_freq, float notch_freq, float bandwidth);

	/**
	 * Add a new raw value to the filter using the Direct Form I
	 *
	 * @return retrieve the filtered result
	 */
	inline T apply(const T &sample)
	{
		// Direct Form I implementation
		T output = _b0 * sample + _b1 * _delay_element_1 + _b2 * _delay_element_2 - _a1 * _delay_element_output_1 - _a2 *
			   _delay_element_output_2;

		// shift inputs
		_delay_element_2 = _delay_element_1;
		_delay_element_1 = sample;

		// shift outputs
		_delay_element_output_2 = _delay_element_output_1;
		_delay_element_output_1 = output;

		return output;
	}

	// Filter array of samples in place using the direct form I
	inline void applyArray(T samples[], int num_samples)
	{
		for (int n = 0; n < num_samples; n++) {
			samples[n] = apply(samples[n]);
		}
	}

	float getNotchFreq() const { return _notch_freq; }
	float getBandwidth() const { return _bandwidth; }

	// Used in unit test only
	void getCoefficients(float a[3], float b[3]) const
	{
		a[0] = 1.f;
		a[1] = _a1;
		a[2] = _a2;
		b[0] = _b0;
		b[1] = _b1;
		b[2] = _b2;
	}

	float getMagnitudeResponse(float frequency) const
	{
		float w = 2.f * M_PI_F * frequency / _sample_freq;

		float numerator = _b0 * _b0 + _b1 * _b1 + _b2 * _b2
				  + 2.f * (_b0 * _b1 + _b1 * _b2) * cosf(w) + 2.f * _b0 * _b2 * cosf(2.f * w);

		float denominator = 1.f + _a1 * _a1 + _a2 * _a2 + 2.f * (_a1 + _a1 * _a2) * cosf(w) + 2.f * _a2 * cosf(2.f * w);

		return sqrtf(numerator / denominator);
	}

	/**
	 * Bypasses the filter update to directly set different filter coefficients.
	 * Note: the filtered frequency and quality factor saved on the filter lose their
	 * physical meaning if you use this method to change the filter's coefficients.
	 * Used for creating clones of a specific filter.
	 */
	void setCoefficients(float a[2], float b[3])
	{
		_a1 = a[0];
		_a2 = a[1];
		_b0 = b[0];
		_b1 = b[1];
		_b2 = b[2];
	}

	void reset(const T &sample)
	{
		const T input = isFinite(sample) ? sample : T{};

		_delay_element_1 = _delay_element_2 = input;
		_delay_element_output_1 = _delay_element_output_2 = input * (_b0 + _b1 + _b2) / (1 + _a1 + _a2);

		if (!isFinite(_delay_element_1) || !isFinite(_delay_element_2)) {
			_delay_element_output_1 = _delay_element_output_2 = {};
		}
	}

	void disable()
	{
		// no filtering
		_notch_freq = 0.f;
		_bandwidth = 0.f;
		_sample_freq = 0.f;

		_delay_element_1 = {};
		_delay_element_2 = {};
		_delay_element_output_1 = {};
		_delay_element_output_2 = {};

		_b0 = 1.f;
		_b1 = 0.f;
		_b2 = 0.f;

		_a1 = 0.f;
		_a2 = 0.f;
	}

protected:
	T _delay_element_1{};
	T _delay_element_2{};
	T _delay_element_output_1{};
	T _delay_element_output_2{};

	// All the coefficients are normalized by a0, so a0 becomes 1 here
	float _a1{0.f};
	float _a2{0.f};

	float _b0{1.f};
	float _b1{0.f};
	float _b2{0.f};

	float _notch_freq{};
	float _bandwidth{};
	float _sample_freq{};
};",0,822 60 835 2000 62 587 2001 123 777 58 2001 40 41 61 613 59 126 2001 40 41 61 613 59 865 2002 40 660 2003 44 660 2004 44 660 2005 41 59 306 700 2000 2006 40 601 2000 38 2007 41 123 330 2000 2008 61 2009 42 2007 43 2010 42 2011 43 2012 42 2013 45 2014 42 2015 45 2016 42 2017 59 330 2013 61 2011 59 2011 61 2007 59 330 2017 61 2015 59 2015 61 2008 59 792 2008 59 125 330 700 865 2018 40 2000 2019 91 93 44 704 2020 41 123 664 40 704 2021 61 1500 59 2021 60 2020 59 2021 349 41 123 2019 91 2021 93 61 2006 40 2019 91 2021 93 41 59 125 125 660 2022 40 41 601 123 792 2023 59 125 660 2024 40 41 601 123 792 2025 59 125 330 865 2026 40 660 2027 91 1502 93 44 660 2028 91 1502 93 41 601 123 2027 91 1500 93 61 1501 59 2027 91 1501 93 61 2029 59 2027 91 1502 93 61 2030 59 2028 91 1500 93 61 2031 59 2028 91 1501 93 61 2032 59 2028 91 1502 93 61 2033 59 125 660 2034 40 660 2035 41 601 123 660 2036 61 1502 42 2037 42 2035 47 2038 59 660 2039 61 2040 42 2040 43 2041 42 2041 43 2042 42 2042 43 1502 42 40 2040 42 2041 43 2041 42 2042 41 42 2043 40 2036 41 43 1502 42 2040 42 2042 42 2043 40 1502 42 2036 41 59 660 2044 61 1501 43 2045 42 2045 43 2046 42 2046 43 1502 42 40 2045 43 2045 42 2046 41 42 2043 40 2036 41 43 1502 42 2046 42 2043 40 1502 42 2036 41 59 792 2047 40 2039 47 2044 41 59 125 306 865 2048 40 660 2027 91 1502 93 44 660 2028 91 1502 93 41 123 2049 61 2027 91 1500 93 59 2050 61 2027 91 1501 93 59 2051 61 2028 91 1500 93 59 2052 61 2028 91 1501 93 59 2053 61 2028 91 1502 93 59 125 865 2054 40 601 2000 38 2007 41 123 601 2000 2055 61 2056 40 2007 41 63 2007 58 2000 123 125 59 2057 61 2058 61 2055 59 2059 61 2060 61 2055 42 40 2061 43 2062 43 2063 41 47 40 1501 43 2064 43 2065 41 59 688 40 33 2056 40 2057 41 309 33 2056 40 2058 41 41 123 2059 61 2060 61 123 125 59 125 125 865 2066 40 41 123 330 2067 61 1500 59 2068 61 1500 59 2069 61 1500 59 2070 61 123 125 59 2071 61 123 125 59 2072 61 123 125 59 2073 61 123 125 59 2074 61 1501 59 2075 61 1500 59 2076 61 1500 59 2077 61 1500 59 2078 61 1500 59 125 775 58 2000 2079 123 125 59 2000 2080 123 125 59 2000 2081 123 125 59 2000 2082 123 125 59 330 660 2083 123 1500 125 59 660 2084 123 1500 125 59 660 2085 123 1501 125 59 660 2086 123 1500 125 59 660 2087 123 1500 125 59 660 2088 123 125 59 660 2089 123 125 59 660 2090 123 125 59 125 59 ,"{'AvgLine': 14, 'CountLine': 188, 'CountStmt': 96, 'MaxNesting': 3, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 68, 'MaxEssential': 4, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 129, 'CountStmtDecl': 37, 'MaxCyclomatic': 6, 'SumCyclomatic': 18, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 39, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 12, 'AltCountLineCode': 129, 'CountLineCodeExe': 100, 'CountLineComment': 20, 'AltAvgLineComment': 0, 'AltCountLineBlank': 39, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 29, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.16', 'AltCountLineComment': 20, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 17, 'SumCyclomaticStrict': 30, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 61, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 12, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 12}"
118376,C++,"class UavcanGetInfoResponse : public UavcanBaseSubscriber
{
public:
	UavcanGetInfoResponse(CanardInstance &ins) :
		UavcanBaseSubscriber(ins, """", ""GetInfo"", 0) { };

	void subscribe() override
	{
		// Subscribe to requests uavcan.pnp.NodeIDAllocationData
		canardRxSubscribe(&_canard_instance,
				  CanardTransferKindRequest,
				  uavcan_node_GetInfo_1_0_FIXED_PORT_ID_,
				  uavcan_node_GetInfo_Request_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_,
				  CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
				  &_subj_sub._canard_sub);

	};

	void callback(const CanardTransfer &receive) override
	{
		PX4_INFO(""GetInfo request"");

		// Setup node.GetInfo response

		uavcan_node_GetInfo_Response_1_0 node_info;

		uavcan_node_GetInfo_Response_1_0_initialize_(&node_info);

		node_info.protocol_version.major = 1;
		node_info.protocol_version.minor = 0;

#if defined(BOARD_HAS_VERSIONING)
		node_info.hardware_version.major = (uint8_t)px4_board_hw_version();
		node_info.hardware_version.minor = (uint8_t)px4_board_hw_revision();
#endif

		unsigned fwver = px4_firmware_version();
		node_info.software_version.major = (fwver >> (8 * 3)) & 0xFF;
		node_info.software_version.minor = (fwver >> (8 * 2)) & 0xFF;

		node_info.software_vcs_revision_id = px4_firmware_version_binary();

		px4_guid_t px4_guid;
		board_get_px4_guid(px4_guid);
		memcpy(node_info.unique_id, px4_guid, sizeof(node_info.unique_id));

		//TODO proper name
		strncpy((char *)node_info.name.elements,
			px4_board_name(),
			uavcan_node_GetInfo_Response_1_0_name_ARRAY_CAPACITY_);

		node_info.name.count = strlen(px4_board_name());

		uint8_t response_payload_buffer[uavcan_node_GetInfo_Response_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_];

		CanardTransfer response = {
			.timestamp_usec = hrt_absolute_time() + PUBLISHER_DEFAULT_TIMEOUT_USEC,
			.priority       = CanardPriorityNominal,
			.transfer_kind  = CanardTransferKindResponse,
			.port_id        = uavcan_node_GetInfo_1_0_FIXED_PORT_ID_, // This is the subject-ID.
			.remote_node_id = receive.remote_node_id,       // Send back to request Node
			.transfer_id    = receive.transfer_id,
			.payload_size   = uavcan_node_GetInfo_Response_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_,
			.payload        = &response_payload_buffer,
		};

		int32_t result = uavcan_node_GetInfo_Response_1_0_serialize_(&node_info, (uint8_t *)&response_payload_buffer,
				 &response.payload_size);

		if (result == 0) {
			// set the data ready in the buffer and chop if needed
			result = canardTxPush(&_canard_instance, &response);
		}

		//TODO proper error handling
		if (result < 0) {
			// An error has occurred: either an argument is invalid or we've ran out of memory.
			// It is possible to statically prove that an out-of-memory will never occur for a given application if the
			// heap is sized correctly; for background, refer to the Robson's Proof and the documentation for O1Heap.
			// return -UAVCAN_REGISTER_ERROR_SERIALIZATION;
		}

	};

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 41 58 2001 40 2003 44 362 44 362 44 1500 41 123 125 59 865 2004 40 41 2005 123 330 2006 40 38 2007 44 2008 44 2009 44 2010 44 2011 44 38 2012 46 2013 41 59 125 59 865 2014 40 601 2015 38 2016 41 2005 123 2017 40 362 41 59 330 2018 2019 59 2020 40 38 2019 41 59 2019 46 2021 46 2022 61 1501 59 2019 46 2021 46 2023 61 1500 59 35 688 2024 40 2025 41 2019 46 2026 46 2022 61 40 2027 41 2028 40 41 59 2019 46 2026 46 2023 61 40 2027 41 2029 40 41 59 35 636 856 2030 61 2031 40 41 59 2019 46 2032 46 2022 61 40 2030 355 40 1502 42 1502 41 41 38 1504 59 2019 46 2032 46 2023 61 40 2030 355 40 1502 42 1502 41 41 38 1504 59 2019 46 2033 61 2034 40 41 59 2035 2036 59 2037 40 2036 41 59 2038 40 2019 46 2039 44 2036 44 805 40 2019 46 2039 41 41 59 330 2040 40 40 582 42 41 2019 46 2041 46 2042 44 2043 40 41 44 2044 41 59 2019 46 2041 46 2045 61 2046 40 2043 40 41 41 59 2027 2047 91 2048 93 59 2015 2049 61 123 46 2050 61 2051 40 41 43 2052 44 46 2053 61 2054 44 46 2055 61 2056 44 46 2057 61 2058 44 330 46 2059 61 2016 46 2059 44 330 46 2060 61 2016 46 2060 44 46 2061 61 2048 44 46 2062 61 38 2047 44 125 59 2063 2064 61 2065 40 38 2019 44 40 2027 42 41 38 2047 44 38 2049 46 2066 41 59 688 40 2064 323 1500 41 123 330 2064 61 2067 40 38 2068 44 38 2049 41 59 125 330 688 40 2064 60 1500 41 123 330 330 330 330 125 125 59 125 59 ,"{'AvgLine': 26, 'CountLine': 85, 'CountStmt': 12, 'MaxNesting': 1, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 5, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 52, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 6, 'AltAvgLineCode': 17, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 20, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 5, 'CountDeclMethod': 3, 'AltCountLineCode': 56, 'CountLineCodeExe': 3, 'CountLineComment': 11, 'AltAvgLineComment': 3, 'AltCountLineBlank': 20, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 2, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.21', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118374,C++,"class MavlinkStreamNamedValueFloat : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamNamedValueFloat(mavlink); }

	static constexpr const char *get_name_static() { return ""NAMED_VALUE_FLOAT""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_NAMED_VALUE_FLOAT; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _debug_key_value_sub.advertised() ? MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamNamedValueFloat(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _debug_key_value_sub{ORB_ID(debug_key_value)};

	bool send() override
	{
		debug_key_value_s debug;

		if (_debug_key_value_sub.update(&debug)) {
			mavlink_named_value_float_t msg{};

			msg.time_boot_ms = debug.timestamp / 1000ULL;
			memcpy(msg.name, debug.key, sizeof(msg.name));
			msg.name[sizeof(msg.name) - 1] = '\0'; // enforce null termination
			msg.value = debug.value;

			mavlink_msg_named_value_float_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 47 1504 59 2030 40 2027 46 2031 44 2024 46 2032 44 805 40 2027 46 2031 41 41 59 2027 46 2031 91 805 40 2027 46 2031 41 45 1501 93 61 314 59 330 2027 46 2033 61 2024 46 2033 59 2034 40 2035 354 2036 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 41, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 30, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 30, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118379,C++,"class PrivData
{
public:
	PrivData() : _read_offset(0) {}
	~PrivData() = default;

	size_t _read_offset;
};",0,587 2000 123 777 58 2000 40 41 58 2001 40 1500 41 123 125 126 2000 40 41 61 613 59 2002 2001 59 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118383,C++,"class TCBP001TA_SPI: public device::SPI, public tcbp001ta::ITCBP001TA
{
public:
	TCBP001TA_SPI(uint8_t bus, uint32_t device);
	virtual ~TCBP001TA_SPI() override = default;

	int init() override { return SPI::init(); }

	uint8_t	get_reg(uint8_t addr) override;
	int	set_reg(uint8_t value, uint8_t addr) override;

	tcbp001ta::data_s		*get_data(uint8_t addr) override;
	tcbp001ta::calibration_s	*get_calibration(uint8_t addr) override;

	uint32_t get_device_id() const override { return device::SPI::get_device_id(); }

private:
	spi_calibration_s	_cal{};
	spi_data_s		_data{};
};",0,587 2000 58 777 2001 321 2002 44 777 2003 321 2004 123 777 58 2000 40 2005 2006 44 2007 2001 41 59 864 126 2000 40 41 2008 61 613 59 704 2009 40 41 2008 123 792 2002 321 2009 40 41 59 125 2005 2010 40 2005 2011 41 2008 59 704 2012 40 2005 2013 44 2005 2011 41 2008 59 2003 321 2014 42 2015 40 2005 2011 41 2008 59 2003 321 2016 42 2017 40 2005 2011 41 2008 59 2007 2018 40 41 601 2008 123 792 2001 321 2002 321 2018 40 41 59 125 773 58 2019 2020 123 125 59 2021 2022 123 125 59 125 59 ,"{'AvgLine': 7, 'CountLine': 69, 'CountStmt': 22, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 51, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 5, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 51, 'CountLineCodeExe': 13, 'CountLineComment': 11, 'AltAvgLineComment': 1, 'AltCountLineBlank': 10, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.22', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118392,C++,"class MavlinkStreamSmartBatteryInfo : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamSmartBatteryInfo(mavlink); }

	static constexpr const char *get_name_static() { return ""SMART_BATTERY_INFO""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_SMART_BATTERY_INFO; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		static constexpr unsigned size_per_battery = MAVLINK_MSG_ID_SMART_BATTERY_INFO_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		return size_per_battery * _battery_status_subs.advertised_count();
	}

private:
	explicit MavlinkStreamSmartBatteryInfo(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::SubscriptionMultiArray<battery_status_s, battery_status_s::MAX_INSTANCES> _battery_status_subs{ORB_ID::battery_status};

	bool send() override
	{
		bool updated = false;

		for (auto &battery_sub : _battery_status_subs) {
			battery_status_s battery_status;

			if (battery_sub.update(&battery_status)) {
				if (battery_status.serial_number == 0) {
					// This is not smart battery
					continue;
				}

				mavlink_smart_battery_info_t msg{};

				msg.id = battery_status.id - 1;
				msg.capacity_full_specification = battery_status.capacity;
				msg.capacity_full = (int32_t)((float)(battery_status.state_of_health * battery_status.capacity) / 100.f);
				msg.cycle_count = battery_status.cycle_count;

				if (battery_status.manufacture_date) {
					uint16_t day = battery_status.manufacture_date % 32;
					uint16_t month = (battery_status.manufacture_date >> 5) % 16;
					uint16_t year = (80 + (battery_status.manufacture_date >> 9)) % 100;

					//Formatted as 'dd/mm/yy-123456' (maxed 15 + 1 chars)
					snprintf(msg.serial_number, sizeof(msg.serial_number), ""%d/%d/%d-%d"", day, month, year, battery_status.serial_number);

				} else {
					snprintf(msg.serial_number, sizeof(msg.serial_number), ""%d"", battery_status.serial_number);
				}

				//msg.device_name = ??
				msg.weight = -1;
				msg.discharge_minimum_voltage = -1;
				msg.charging_minimum_voltage = -1;
				msg.resting_minimum_voltage = -1;

				mavlink_msg_smart_battery_info_send_struct(_mavlink->get_channel(), &msg);
				updated = true;
			}
		}

		return updated;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 809 603 856 2013 61 2014 43 2015 59 792 2013 42 2016 46 2017 40 41 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2018 321 2019 60 2020 44 2020 321 2021 62 2022 123 2023 321 2024 125 59 569 2025 40 41 2010 123 569 2026 61 655 59 664 40 561 38 2027 58 2022 41 123 2020 2028 59 688 40 2027 46 2029 40 38 2028 41 41 123 688 40 2028 46 2030 323 1500 41 123 330 605 59 125 2031 2032 123 125 59 2032 46 2033 61 2028 46 2033 45 1501 59 2032 46 2034 61 2028 46 2035 59 2032 46 2036 61 40 2037 41 40 40 660 41 40 2028 46 2038 42 2028 46 2035 41 47 1503 41 59 2032 46 2039 61 2028 46 2039 59 688 40 2028 46 2040 41 123 2006 2041 61 2028 46 2040 37 1503 59 2006 2042 61 40 2028 46 2040 355 1502 41 37 1503 59 2006 2043 61 40 1503 43 40 2028 46 2040 355 1502 41 41 37 1503 59 330 2044 40 2032 46 2030 44 805 40 2032 46 2030 41 44 362 44 2041 44 2042 44 2043 44 2028 46 2030 41 59 125 630 123 2045 40 2032 46 2030 44 805 40 2032 46 2030 41 44 362 44 2028 46 2030 41 59 125 330 2032 46 2046 61 45 1501 59 2032 46 2047 61 45 1501 59 2032 46 2048 61 45 1501 59 2032 46 2049 61 45 1501 59 2050 40 2051 354 2052 40 41 44 38 2032 41 59 2026 61 829 59 125 125 792 2026 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 68, 'CountStmt': 20, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 49, 'CountStmtDecl': 17, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 49, 'CountLineCodeExe': 5, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118395,C++,"class LPS25H_SPI : public device::SPI
{
public:
	LPS25H_SPI(int bus, uint32_t device, int bus_frequency, spi_mode_e spi_mode);
	~LPS25H_SPI() override = default;

	int	init() override;
	int	read(unsigned address, void *data, unsigned count) override;
	int	write(unsigned address, void *data, unsigned count) override;

};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 2004 2001 44 704 2005 44 2006 2007 41 59 126 2000 40 41 2008 61 613 59 704 2009 40 41 2008 59 704 2010 40 856 2011 44 865 42 2012 44 856 2013 41 2008 59 704 2014 40 856 2011 44 865 42 2012 44 856 2013 41 2008 59 125 59 ,"{'AvgLine': 13, 'CountLine': 66, 'CountStmt': 25, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 16, 'MaxEssential': 4, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 52, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 9, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 52, 'CountLineCodeExe': 13, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118403,C++,"class UpdateCheck : public QObject
{
    Q_OBJECT

public:
    UpdateCheck(const Settings& settings);
    void checkForUpdate();

signals:
    void updateAvailable(QString latestVersion, QUrl link);
    void upToDate();
    void updateCheckFailed();
    void versionIsUnstable();

private slots:
    void handleResponse(QNetworkReply* reply);

private:
    QNetworkAccessManager manager;
    QTimer updateTimer;
    const Settings& settings;
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 601 2003 38 2004 41 59 865 2005 40 41 59 2006 58 865 2007 40 2008 2009 44 2010 2011 41 59 865 2012 40 41 59 865 2013 40 41 59 865 2014 40 41 59 773 2015 58 865 2016 40 2017 42 2018 41 59 773 58 2019 2020 59 2021 2022 59 601 2003 38 2004 59 125 59 ,"{'AvgLine': 21, 'CountLine': 86, 'CountStmt': 39, 'MaxNesting': 1, 'AvgLineCode': 19, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 15, 'MaxEssential': 4, 'SumEssential': 6, 'AvgCyclomatic': 3, 'CountLineCode': 75, 'CountStmtDecl': 24, 'MaxCyclomatic': 7, 'SumCyclomatic': 10, 'AltAvgLineCode': 19, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 6, 'AltCountLineCode': 75, 'CountLineCodeExe': 13, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118412,C++,"class ImagePreviewButton : public QPushButton
{
public:
    ImagePreviewButton(QWidget* parent = nullptr)
        : QPushButton(parent)
    {}
    ~ImagePreviewButton();
    ImagePreviewButton(const ImagePreviewButton&) = delete;
    ImagePreviewButton& operator=(const ImagePreviewButton&) = delete;
    ImagePreviewButton(ImagePreviewButton&&) = delete;
    ImagePreviewButton& operator=(ImagePreviewButton&&) = delete;

    void setIconFromFile(const QString& filename);
    void setIconFromPixmap(const QPixmap& image);
private:
    void initialize(const QPixmap& image);
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 42 2003 61 753 41 58 2001 40 2003 41 123 125 126 2000 40 41 59 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 2000 40 2000 307 41 61 619 59 2000 38 758 61 40 2000 307 41 61 619 59 865 2004 40 601 2005 38 2006 41 59 865 2007 40 601 2008 38 2009 41 59 773 58 865 2010 40 601 2008 38 2009 41 59 125 59 ,"{'AvgLine': 5, 'CountLine': 35, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 12, 'AltCountLineCode': 33, 'CountLineCodeExe': 2, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118426,C++,"class AlSource : public IAudioSource
{
    Q_OBJECT
public:
    AlSource(OpenAL& al);
    AlSource(AlSource& src) = delete;
    AlSource& operator=(const AlSource&) = delete;
    AlSource(AlSource&& other) = delete;
    AlSource& operator=(AlSource&& other) = delete;
    ~AlSource();

    operator bool() const;

    void kill();

private:
    OpenAL& audio;
    bool killed = false;
    mutable CompatibleRecursiveMutex killLock;
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 2003 38 2004 41 59 2000 40 2000 38 2005 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 2000 40 2000 307 2006 41 61 619 59 2000 38 758 61 40 2000 307 2006 41 61 619 59 126 2000 40 41 59 758 569 40 41 601 59 865 2007 40 41 59 773 58 2003 38 2008 59 569 2009 61 655 59 740 2010 2011 59 125 59 ,"{'AvgLine': 6, 'CountLine': 46, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 40, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 40, 'CountLineCodeExe': 9, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 7, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
118434,C++,"class AvatarBroadcaster : public QObject
{
    Q_OBJECT
public:
    AvatarBroadcaster(Core& _core);

    void setAvatar(QByteArray data);
    void sendAvatarTo(uint32_t friendId);
    void enableAutoBroadcast(bool state = true);

private:
    Core& core;
    QByteArray avatarData;
    QMap<uint32_t, bool> friendsSentTo;
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 2003 38 2004 41 59 865 2005 40 2006 2007 41 59 865 2008 40 2009 2010 41 59 865 2011 40 569 2012 61 829 41 59 773 58 2003 38 2013 59 2006 2014 59 2015 60 2009 44 569 62 2016 59 125 59 ,"{'AvgLine': 9, 'CountLine': 54, 'CountStmt': 19, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 48, 'CountStmtDecl': 10, 'MaxCyclomatic': 3, 'SumCyclomatic': 8, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 48, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118431,C++,"class RecursiveSignalBlocker
{
public:
    explicit RecursiveSignalBlocker(QObject* object);
    ~RecursiveSignalBlocker();

    void recursiveBlock(QObject* object);

private:
    QVector<const QSignalBlocker*> mBlockers;
};",0,587 2000 123 777 58 648 2000 40 2001 42 2002 41 59 126 2000 40 41 59 865 2003 40 2001 42 2002 41 59 773 58 2004 60 601 2005 42 62 2006 59 125 59 ,"{'AvgLine': 5, 'CountLine': 27, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 24, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118447,C++,"class Paths
{
public:
    enum class Portable {
        Auto,           /** Auto detect if portable or non-portable */
        Portable,       /** Force portable mode */
        NonPortable     /** Force non-portable mode */
    };

    static Paths* makePaths(Portable mode = Portable::Auto);

    bool isPortable() const;
#if PATHS_VERSION_TCS_COMPLIANT
    QString getGlobalSettingsPath() const;
    QString getProfilesDir() const;
    QString getToxSaveDir() const;
    QString getAvatarsDir() const;
    QString getTransfersDir() const;
    QStringList getThemeDirs() const;
    QString getScreenshotsDir() const;
#else
    // to be removed when paths migration is complete.
    QString getSettingsDirPath() const;
    QString getAppDataDirPath() const;
    QString getAppCacheDirPath() const;
    QString getUserNodesFilePath() const;
#endif


private:
    Paths(const QString &basePath, bool portable);

private:
    QString basePath{};
    const bool portable = false;
};",0,587 2000 123 777 58 640 587 2001 123 2002 44 306 2001 44 306 2003 306 125 59 809 2000 42 2004 40 2001 2005 61 2001 321 2006 41 59 569 2007 40 41 601 59 35 688 2008 2009 2010 40 41 601 59 2009 2011 40 41 601 59 2009 2012 40 41 601 59 2009 2013 40 41 601 59 2009 2014 40 41 601 59 2015 2016 40 41 601 59 2009 2017 40 41 601 59 35 630 330 2009 2018 40 41 601 59 2009 2019 40 41 601 59 2009 2020 40 41 601 59 2009 2021 40 41 601 59 35 636 773 58 2000 40 601 2009 38 2022 44 569 2023 41 59 773 58 2009 2022 123 125 59 601 569 2023 61 655 59 125 59 ,"{'AvgLine': 17, 'CountLine': 151, 'CountStmt': 38, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 83, 'CountStmtDecl': 18, 'MaxCyclomatic': 6, 'SumCyclomatic': 12, 'AltAvgLineCode': 14, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 129, 'CountLineCodeExe': 22, 'CountLineComment': 10, 'AltAvgLineComment': 1, 'AltCountLineBlank': 12, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 34, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 15, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118472,C++,"class CompatibleRecursiveMutex : public QMutex
{
public:
    CompatibleRecursiveMutex()
        : QMutex(QMutex::Recursive)
    {}
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 58 2001 40 2001 321 2002 41 123 125 125 59 ,"{'AvgLine': 3, 'CountLine': 7, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118484,C++,"class TestPaths : public QObject
{
    Q_OBJECT
private slots:
    void constructAuto();
    void constructPortable();
    void constructNonPortable();
#if PATHS_VERSION_TCS_COMPLIANT
    void checkPathsNonPortable();
    void checkPathsPortable();
#endif
private:
    static void verifyqToxPath(const QString& testPath, const QString& basePath, const QString& subPath);
};",0,587 2000 58 777 2001 123 2002 773 2003 58 865 2004 40 41 59 865 2005 40 41 59 865 2006 40 41 59 35 688 2007 865 2008 40 41 59 865 2009 40 41 59 35 636 773 58 809 865 2010 40 601 2011 38 2012 44 601 2011 38 2013 44 601 2011 38 2014 41 59 125 59 ,"{'AvgLine': 7, 'CountLine': 42, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 5, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 37, 'CountLineCodeExe': 9, 'CountLineComment': 5, 'AltAvgLineComment': 1, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 2, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.15', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118488,C++,"class GroupList
{
public:
    static Group* addGroup(Core& core, int groupId, const GroupId& persistentGroupId, const QString& name, bool isAvGroupchat, const QString& selfName);
    static Group* findGroup(const GroupId& groupId);
    static const GroupId& id2Key(uint32_t groupNum);
    static void removeGroup(const GroupId& groupId, bool fake = false);
    static QList<Group*> getAllGroups();
    static void clear();

private:
    static QHash<const GroupId, Group*> groupList;
    static QHash<uint32_t, GroupId> id2key;
};",0,587 2000 123 777 58 809 2001 42 2002 40 2003 38 2004 44 704 2005 44 601 2006 38 2007 44 601 2008 38 2009 44 569 2010 44 601 2008 38 2011 41 59 809 2001 42 2012 40 601 2006 38 2005 41 59 809 601 2006 38 2013 40 2014 2015 41 59 809 865 2016 40 601 2006 38 2005 44 569 2017 61 655 41 59 809 2018 60 2001 42 62 2019 40 41 59 809 865 2020 40 41 59 773 58 809 2021 60 601 2006 44 2001 42 62 2022 59 809 2021 60 2014 44 2006 62 2023 59 125 59 ,"{'AvgLine': 7, 'CountLine': 61, 'CountStmt': 20, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 56, 'CountStmtDecl': 15, 'MaxCyclomatic': 2, 'SumCyclomatic': 8, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 56, 'CountLineCodeExe': 3, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 6, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118489,C++,"class RemoveFriendDialog : public QDialog
{
    Q_OBJECT
public:
    explicit RemoveFriendDialog(QWidget* parent, const Friend* f);

    inline bool removeHistory()
    {
        return ui.removeHistory->isChecked();
    }

    inline bool accepted()
    {
        return _accepted;
    }

public slots:
    void onAccepted();

protected:
    Ui_RemoveFriendDialog ui;
    bool _accepted = false;
};",0,587 2000 58 777 2001 123 2002 777 58 648 2000 40 2003 42 2004 44 601 2005 42 2006 41 59 700 569 2007 40 41 123 792 2008 46 2007 354 2009 40 41 59 125 700 569 2010 40 41 123 792 2011 59 125 777 2012 58 865 2013 40 41 59 775 58 2014 2015 59 569 2016 61 655 59 125 59 ,"{'AvgLine': 8, 'CountLine': 48, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 43, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 43, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
118491,C++,"class NotificationGenerator : public QObject
{
public:
    NotificationGenerator(
        INotificationSettings const& notificationSettings,
        // Optional profile input to lookup avatars. Avatar lookup is not
        // currently mockable so we allow profile to be nullptr for unit
        // testing
        Profile* profile);
    virtual ~NotificationGenerator();
    NotificationGenerator(const NotificationGenerator&) = delete;
    NotificationGenerator& operator=(const NotificationGenerator&) = delete;
    NotificationGenerator(NotificationGenerator&&) = delete;
    NotificationGenerator& operator=(NotificationGenerator&&) = delete;

    NotificationData friendMessageNotification(const Friend* f, const QString& message);
    NotificationData groupMessageNotification(const Group* g, const ToxPk& sender, const QString& message);
    NotificationData fileTransferNotification(const Friend* f, const QString& filename, size_t fileSize);
    NotificationData groupInvitationNotification(const Friend* from);
    NotificationData friendRequestNotification(const ToxPk& sender, const QString& message);

public slots:
    void onNotificationActivated();

private:
    INotificationSettings const& notificationSettings;
    Profile* profile;
    QHash<const Friend*, size_t> friendNotifications;
    QHash<const Group*, size_t> groupNotifications;
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 601 38 2003 44 330 330 330 2004 42 2005 41 59 864 126 2000 40 41 59 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 2000 40 2000 307 41 61 619 59 2000 38 758 61 40 2000 307 41 61 619 59 2006 2007 40 601 2008 42 2009 44 601 2010 38 2011 41 59 2006 2012 40 601 2013 42 2014 44 601 2015 38 2016 44 601 2010 38 2011 41 59 2006 2017 40 601 2008 42 2009 44 601 2010 38 2018 44 2019 2020 41 59 2006 2021 40 601 2008 42 2022 41 59 2006 2023 40 601 2015 38 2016 44 601 2010 38 2011 41 59 777 2024 58 865 2025 40 41 59 773 58 2002 601 38 2003 59 2004 42 2005 59 2026 60 601 2008 42 44 2019 62 2027 59 2026 60 601 2013 42 44 2019 62 2028 59 125 59 ,"{'AvgLine': 14, 'CountLine': 134, 'CountStmt': 46, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 25, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 107, 'CountStmtDecl': 21, 'MaxCyclomatic': 3, 'SumCyclomatic': 13, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 23, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 12, 'AltCountLineCode': 107, 'CountLineCodeExe': 32, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 23, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 88, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118498,C++,"class TestOfflineMsgEngine : public QObject
{
    Q_OBJECT

private slots:
    void testReceiptBeforeMessage();
    void testReceiptAfterMessage();
    void testResendWorkflow();
    void testTypeCoordination();
    void testCallback();
    void testExtendedMessageCoordination();
};",0,587 2000 58 777 2001 123 2002 773 2003 58 865 2004 40 41 59 865 2005 40 41 59 865 2006 40 41 59 865 2007 40 41 59 865 2008 40 41 59 865 2009 40 41 59 125 59 ,"{'AvgLine': 22, 'CountLine': 149, 'CountStmt': 49, 'MaxNesting': 0, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 5, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 117, 'CountStmtDecl': 35, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 17, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 32, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 5, 'CountDeclMethod': 6, 'AltCountLineCode': 117, 'CountLineCodeExe': 41, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 32, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 37, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118507,C++,"class PosixSignalNotifier : public QObject
{
    Q_OBJECT

public:
    ~PosixSignalNotifier();

    static void watchSignal(int signum);
    static void watchSignals(std::initializer_list<int> signalSet);
    static void watchCommonTerminatingSignals();

    static PosixSignalNotifier& globalInstance();

signals:
    void activated(int signal);

private slots:
    void onSignalReceived();

private:
    PosixSignalNotifier();

private:
    QSocketNotifier* notifier{nullptr};
};",0,587 2000 58 777 2001 123 2002 777 58 126 2000 40 41 59 809 865 2003 40 704 2004 41 59 809 865 2005 40 2006 321 2007 60 704 62 2008 41 59 809 865 2009 40 41 59 809 2000 38 2010 40 41 59 2011 58 865 2012 40 704 2013 41 59 773 2014 58 865 2015 40 41 59 773 58 2000 40 41 59 773 58 2016 42 2017 123 753 125 59 125 59 ,"{'AvgLine': 8, 'CountLine': 85, 'CountStmt': 27, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 69, 'CountStmtDecl': 14, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 7, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 69, 'CountLineCodeExe': 15, 'CountLineComment': 7, 'AltAvgLineComment': 1, 'AltCountLineBlank': 13, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 4, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118508,C++,"class TestExifTransform : public QObject
{
    Q_OBJECT

private slots:
    void init();
    void testTopLeft();
    void testTopRight();
    void testBottomRight();
    void testBottomLeft();
    void testLeftTop();
    void testRightTop();
    void testRightBottom();
    void testLeftBottom();

private:
    QImage inputImage;
};",0,587 2000 58 777 2001 123 2002 773 2003 58 865 2004 40 41 59 865 2005 40 41 59 865 2006 40 41 59 865 2007 40 41 59 865 2008 40 41 59 865 2009 40 41 59 865 2010 40 41 59 865 2011 40 41 59 865 2012 40 41 59 773 58 2013 2014 59 125 59 ,"{'AvgLine': 6, 'CountLine': 78, 'CountStmt': 18, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 74, 'CountStmtDecl': 18, 'MaxCyclomatic': 1, 'SumCyclomatic': 9, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 74, 'CountLineCodeExe': 0, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 8, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118510,C++,"class FriendList
{
public:
    static Friend* addFriend(uint32_t friendId, const ToxPk& friendPk);
    static Friend* findFriend(const ToxPk& friendPk);
    static const ToxPk& id2Key(uint32_t friendId);
    static QList<Friend*> getAllFriends();
    static void removeFriend(const ToxPk& friendPk, bool fake = false);
    static void clear();
    static QString decideNickname(const ToxPk& friendPk, const QString& origName);

private:
    static QHash<ToxPk, Friend*> friendList;
    static QHash<uint32_t, ToxPk> id2key;
};",0,587 2000 123 777 58 809 2001 42 2002 40 2003 2004 44 601 2005 38 2006 41 59 809 2001 42 2007 40 601 2005 38 2006 41 59 809 601 2005 38 2008 40 2003 2004 41 59 809 2009 60 2001 42 62 2010 40 41 59 809 865 2011 40 601 2005 38 2006 44 569 2012 61 655 41 59 809 865 2013 40 41 59 809 2014 2015 40 601 2005 38 2006 44 601 2014 38 2016 41 59 773 58 809 2017 60 2005 44 2001 42 62 2018 59 809 2017 60 2003 44 2005 62 2019 59 125 59 ,"{'AvgLine': 8, 'CountLine': 72, 'CountStmt': 26, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 3, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 68, 'CountStmtDecl': 16, 'MaxCyclomatic': 3, 'SumCyclomatic': 12, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 68, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 7, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118524,C++,"class ChatTextEdit final : public QTextEdit
{
    Q_OBJECT
public:
    explicit ChatTextEdit(QWidget* parent = nullptr);
    ~ChatTextEdit();
    void setLastMessage(QString lm);
    void sendKeyEvent(QKeyEvent* event);

signals:
    void enterPressed();
    void escapePressed();
    void tabPressed();
    void keyPressed();
    void pasteImage(const QPixmap& pixmap);

protected:
    void keyPressEvent(QKeyEvent* event) final;

private:
    void retranslateUi();
    bool pasteIfImage(QKeyEvent* event);

private:
    QString lastMessage;
};",0,587 2000 2001 58 777 2002 123 2003 777 58 648 2000 40 2004 42 2005 61 753 41 59 126 2000 40 41 59 865 2006 40 2007 2008 41 59 865 2009 40 2010 42 2011 41 59 2012 58 865 2013 40 41 59 865 2014 40 41 59 865 2015 40 41 59 865 2016 40 41 59 865 2017 40 601 2018 38 2019 41 59 775 58 865 2020 40 2010 42 2011 41 2001 59 773 58 865 2021 40 41 59 569 2022 40 2010 42 2011 41 59 773 58 2007 2023 59 125 59 ,"{'AvgLine': 11, 'CountLine': 103, 'CountStmt': 49, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 25, 'MaxEssential': 6, 'SumEssential': 15, 'AvgCyclomatic': 2, 'CountLineCode': 95, 'CountStmtDecl': 23, 'MaxCyclomatic': 7, 'SumCyclomatic': 16, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 15, 'AltCountLineCode': 95, 'CountLineCodeExe': 17, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 9, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118529,C++,"class MockCoreExtPacketAllocator : public ICoreExtPacketAllocator
{
public:
    std::unique_ptr<ICoreExtPacket> getPacket(uint32_t friendId) override;

    uint64_t numSentMessages;
    uint64_t currentReceiptId;
};",0,587 2000 58 777 2001 123 777 58 2002 321 2003 60 2004 62 2005 40 2006 2007 41 2008 59 2009 2010 59 2009 2011 59 125 59 ,"{'AvgLine': 4, 'CountLine': 12, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 11, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118526,C++,"    class IdxChatLine : public ChatLine
    {
    public:
        explicit IdxChatLine(ChatLogIdx idx)
            : ChatLine()
            , idx(idx)
        {}

        ChatLogIdx get() { return idx; }
    private:
        ChatLogIdx idx;

    };",0,587 2000 58 777 2001 123 777 58 648 2000 40 2002 2003 41 58 2001 40 41 44 2003 40 2003 41 123 125 2002 2004 40 41 123 792 2003 59 125 773 58 2002 2003 59 125 59 ,"{'AvgLine': 2, 'CountLine': 13, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 11, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118536,C++,"class OfflineMsgEngine : public QObject
{
    Q_OBJECT
public:
    using CompletionFn = std::function<void(bool)>;
    OfflineMsgEngine() = default;
    void addUnsentMessage(Message const& message, CompletionFn completionCallback);
    void addSentCoreMessage(ReceiptNum receipt, Message const& message, CompletionFn completionCallback);
    void addSentExtendedMessage(ExtendedReceiptNum receipt, Message const& message, CompletionFn completionCallback);

    struct RemovedMessage
    {
        Message message;
        CompletionFn callback;
    };
    std::vector<RemovedMessage> removeAllMessages();

public slots:
    void onReceiptReceived(ReceiptNum receipt);
    void onExtendedReceiptReceived(ExtendedReceiptNum receipt);

private:
    struct OfflineMessage
    {
        Message message;
        std::chrono::time_point<std::chrono::steady_clock> authorshipTime;
        CompletionFn completionFn;
    };

    CompatibleRecursiveMutex mutex;

    template <class ReceiptT>
    class ReceiptResolver
    {
    public:
        void notifyMessageSent(ReceiptT receipt, OfflineMessage const& message)
        {
            auto receivedReceiptIt = std::find(
                    receivedReceipts.begin(), receivedReceipts.end(), receipt);

            if (receivedReceiptIt != receivedReceipts.end()) {
                receivedReceipts.erase(receivedReceiptIt);
                message.completionFn(true);
                return;
            }

            unAckedMessages[receipt] = message;
        }

        void notifyReceiptReceived(ReceiptT receipt)
        {
            auto unackedMessageIt = unAckedMessages.find(receipt);
            if (unackedMessageIt != unAckedMessages.end()) {
                unackedMessageIt->second.completionFn(true);
                unAckedMessages.erase(unackedMessageIt);
                return;
            }

            receivedReceipts.push_back(receipt);
        }

        std::vector<OfflineMessage> clear()
        {
            auto ret = std::vector<OfflineMessage>();
            std::transform(
                std::make_move_iterator(unAckedMessages.begin()), std::make_move_iterator(unAckedMessages.end()),
                std::back_inserter(ret),
                [] (const std::pair<ReceiptT, OfflineMessage>& pair) {
                    return std::move(pair.second);
                });

            receivedReceipts.clear();
            unAckedMessages.clear();
            return ret;
        }

        std::vector<ReceiptT> receivedReceipts;
        std::map<ReceiptT, OfflineMessage> unAckedMessages;
    };

    ReceiptResolver<ReceiptNum> receiptResolver;
    ReceiptResolver<ExtendedReceiptNum> extendedReceiptResolver;
    std::vector<OfflineMessage> unsentMessages;
};",0,587 2000 58 777 2001 123 2002 777 58 860 2003 61 2004 321 2005 60 865 40 569 41 62 59 2000 40 41 61 613 59 865 2006 40 2007 601 38 2008 44 2003 2009 41 59 865 2010 40 2011 2012 44 2007 601 38 2008 44 2003 2009 41 59 865 2013 40 2014 2012 44 2007 601 38 2008 44 2003 2009 41 59 816 2015 123 2007 2008 59 2003 2016 59 125 59 2004 321 2017 60 2015 62 2018 40 41 59 777 2019 58 865 2020 40 2011 2012 41 59 865 2021 40 2014 2012 41 59 773 58 816 2022 123 2007 2008 59 2004 321 2023 321 2024 60 2004 321 2023 321 2025 62 2026 59 2003 2027 59 125 59 2028 2029 59 822 60 587 2030 62 587 2031 123 777 58 865 2032 40 2030 2012 44 2022 601 38 2008 41 123 561 2033 61 2004 321 2034 40 2035 46 2036 40 41 44 2035 46 2037 40 41 44 2012 41 59 688 40 2033 340 2035 46 2037 40 41 41 123 2035 46 2038 40 2033 41 59 2008 46 2039 40 829 41 59 792 59 125 2040 91 2012 93 61 2008 59 125 865 2041 40 2030 2012 41 123 561 2042 61 2043 46 2044 40 2012 41 59 688 40 2042 340 2043 46 2045 40 41 41 123 2042 354 2046 46 2047 40 829 41 59 2043 46 2048 40 2042 41 59 792 59 125 2049 46 2050 40 2012 41 59 125 2004 321 2017 60 2022 62 2051 40 41 123 561 2052 61 2004 321 2017 60 2022 62 40 41 59 2004 321 2053 40 2004 321 2054 40 2055 46 2056 40 41 41 44 2004 321 2054 40 2055 46 2057 40 41 41 44 2004 321 2058 40 2052 41 44 91 93 40 601 2004 321 2059 60 2030 44 2022 62 38 2059 41 123 792 2004 321 2060 40 2059 46 2061 41 59 125 41 59 2062 46 2051 40 41 59 2055 46 2051 40 41 59 792 2052 59 125 2004 321 2017 60 2030 62 2063 59 2004 321 2064 60 2030 44 2022 62 2065 59 125 59 2031 60 2011 62 2066 59 2031 60 2014 62 2067 59 2004 321 2017 60 2022 62 2068 59 125 59 ,"{'AvgLine': 9, 'CountLine': 142, 'CountStmt': 23, 'MaxNesting': 0, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 122, 'CountStmtDecl': 23, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 20, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 122, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 20, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118542,C++,"class Chatroom
{
public:
    Chatroom() = default;
    virtual ~Chatroom();
    Chatroom(const Chatroom&) = default;
    Chatroom& operator=(const Chatroom&) = default;
    Chatroom(Chatroom&&) = default;
    Chatroom& operator=(Chatroom&&) = default;

    virtual Contact* getContact() = 0;
};",0,587 2000 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 59 2000 40 601 2000 38 41 61 613 59 2000 38 758 61 40 601 2000 38 41 61 613 59 2000 40 2000 307 41 61 613 59 2000 38 758 61 40 2000 307 41 61 613 59 864 2001 42 2002 40 41 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 12, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 11, 'CountStmtDecl': 2, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 11, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118546,C++,"    class Delegate : public QStyledItemDelegate
    {
    public:
        Delegate(QWidget* parent = nullptr);
        void paint(QPainter* painter, const QStyleOptionViewItem& option, const QModelIndex& index) const override;

        bool editorEvent(QEvent* event, QAbstractItemModel* model, const QStyleOptionViewItem& option, const QModelIndex& index) override;
    };",0,587 2000 58 777 2001 123 777 58 2000 40 2002 42 2003 61 753 41 59 865 2004 40 2005 42 2006 44 601 2007 38 2008 44 601 2009 38 2010 41 601 2011 59 569 2012 40 2013 42 2014 44 2015 42 2016 44 601 2007 38 2008 44 601 2009 38 2010 41 2011 59 125 59 ,"{'AvgLine': 24, 'CountLine': 81, 'CountStmt': 20, 'MaxNesting': 3, 'AvgLineCode': 22, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 75, 'CountStmtDecl': 14, 'MaxCyclomatic': 5, 'SumCyclomatic': 7, 'AltAvgLineCode': 22, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 75, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118547,C++,"    class View : public QTableView
    {
    public:
        View(QAbstractItemModel* model, QWidget* parent = nullptr);
        ~View();

    };",0,587 2000 58 777 2001 123 777 58 2000 40 2002 42 2003 44 2004 42 2005 61 753 41 59 126 2000 40 41 59 125 59 ,"{'AvgLine': 17, 'CountLine': 24, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 14, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 20, 'CountLineCodeExe': 4, 'CountLineComment': 2, 'AltAvgLineComment': 2, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118552,C++,"class IBootstrapListGenerator
{
public:
    IBootstrapListGenerator() = default;
    virtual ~IBootstrapListGenerator();
    IBootstrapListGenerator(const IBootstrapListGenerator&) = default;
    IBootstrapListGenerator& operator=(const IBootstrapListGenerator&) = default;
    IBootstrapListGenerator(IBootstrapListGenerator&&) = default;
    IBootstrapListGenerator& operator=(IBootstrapListGenerator&&) = default;

    virtual QList<DhtServer> getBootstrapnodes() = 0;
};",0,587 2000 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 59 2000 40 601 2000 38 41 61 613 59 2000 38 758 61 40 601 2000 38 41 61 613 59 2000 40 2000 307 41 61 613 59 2000 38 758 61 40 2000 307 41 61 613 59 864 2001 60 2002 62 2003 40 41 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 12, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 11, 'CountStmtDecl': 2, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 11, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118563,C++,"class TestNotificationGenerator : public QObject
{
    Q_OBJECT

private slots:
    void init();
    void testSingleFriendMessage();
    void testMultipleFriendMessages();
    void testNotificationClear();
    void testGroupMessage();
    void testMultipleGroupMessages();
    void testMultipleFriendSourceMessages();
    void testMultipleGroupSourceMessages();
    void testMixedSourceMessages();
    void testFileTransfer();
    void testFileTransferAfterMessage();
    void testGroupInvitation();
    void testGroupInviteUncounted();
    void testFriendRequest();
    void testFriendRequestUncounted();
    void testSimpleFriendMessage();
    void testSimpleFileTransfer();
    void testSimpleGroupMessage();
    void testSimpleFriendRequest();
    void testSimpleGroupInvite();
    void testSimpleMessageToggle();

private:
    std::unique_ptr<INotificationSettings> notificationSettings;
    std::unique_ptr<NotificationGenerator> notificationGenerator;
    std::unique_ptr<MockGroupQuery> groupQuery;
    std::unique_ptr<MockCoreIdHandler> coreIdHandler;
};",0,587 2000 58 777 2001 123 2002 773 2003 58 865 2004 40 41 59 865 2005 40 41 59 865 2006 40 41 59 865 2007 40 41 59 865 2008 40 41 59 865 2009 40 41 59 865 2010 40 41 59 865 2011 40 41 59 865 2012 40 41 59 865 2013 40 41 59 865 2014 40 41 59 865 2015 40 41 59 865 2016 40 41 59 865 2017 40 41 59 865 2018 40 41 59 865 2019 40 41 59 865 2020 40 41 59 865 2021 40 41 59 865 2022 40 41 59 865 2023 40 41 59 865 2024 40 41 59 773 58 2025 321 2026 60 2027 62 2028 59 2025 321 2026 60 2029 62 2030 59 2025 321 2026 60 2031 62 2032 59 2025 321 2026 60 2033 62 2034 59 125 59 ,"{'AvgLine': 12, 'CountLine': 288, 'CountStmt': 89, 'MaxNesting': 0, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 30, 'MaxEssential': 1, 'SumEssential': 21, 'AvgCyclomatic': 1, 'CountLineCode': 235, 'CountStmtDecl': 74, 'MaxCyclomatic': 1, 'SumCyclomatic': 21, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 52, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 21, 'AltCountLineCode': 235, 'CountLineCodeExe': 33, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 52, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 72, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 20, 'CountDeclInstanceMethod': 21, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118564,C++,"    class MockNotificationSettings : public INotificationSettings
    {
        virtual bool getNotify() const override { return true; }

        virtual void setNotify(bool newValue) override {}

        virtual bool getShowWindow() const override { return true; }
        virtual void setShowWindow(bool newValue) override {}

        virtual bool getDesktopNotify() const override { return true; }
        virtual void setDesktopNotify(bool enabled) override {}

        virtual bool getNotifySound() const override { return true; }
        virtual void setNotifySound(bool newValue) override {}

        virtual bool getNotifyHide() const override { return notifyHide; }
        virtual void setNotifyHide(bool newValue) override { notifyHide = newValue; };

        virtual bool getBusySound() const override { return true; }
        virtual void setBusySound(bool newValue) override {}

        virtual bool getGroupAlwaysNotify() const override { return true; }
        virtual void setGroupAlwaysNotify(bool newValue) override {}
    private:
        bool notifyHide = false;
    };",0,587 2000 58 777 2001 123 864 569 2002 40 41 601 2003 123 792 829 59 125 864 865 2004 40 569 2005 41 2003 123 125 864 569 2006 40 41 601 2003 123 792 829 59 125 864 865 2007 40 569 2005 41 2003 123 125 864 569 2008 40 41 601 2003 123 792 829 59 125 864 865 2009 40 569 2010 41 2003 123 125 864 569 2011 40 41 601 2003 123 792 829 59 125 864 865 2012 40 569 2005 41 2003 123 125 864 569 2013 40 41 601 2003 123 792 2014 59 125 864 865 2015 40 569 2005 41 2003 123 2016 61 2005 59 125 59 864 569 2017 40 41 601 2003 123 792 829 59 125 864 865 2018 40 569 2005 41 2003 123 125 864 569 2019 40 41 601 2003 123 792 829 59 125 864 865 2020 40 569 2005 41 2003 123 125 773 58 569 2021 61 655 59 125 59 ,"{'AvgLine': 1, 'CountLine': 26, 'CountStmt': 23, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 14, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 14, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 14, 'AltCountLineCode': 19, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 34, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 14, 'CountDeclInstanceMethod': 20, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118578,C++,"class BootstrapNodeUpdater : public QObject, public IBootstrapListGenerator
{
    Q_OBJECT
public:
    explicit BootstrapNodeUpdater(const QNetworkProxy& proxy, Paths& _paths, QObject* parent = nullptr);
    QList<DhtServer> getBootstrapnodes() override;
    void requestBootstrapNodes();
    static QList<DhtServer> loadDefaultBootstrapNodes();

signals:
    void availableBootstrapNodes(QList<DhtServer> nodes);

private slots:
    void onRequestComplete(QNetworkReply* reply);

private:
    QList<DhtServer> loadUserBootrapNodes();

private:
    QNetworkProxy proxy;
    QNetworkAccessManager nam;
    Paths& paths;
};",0,587 2000 58 777 2001 44 777 2002 123 2003 777 58 648 2000 40 601 2004 38 2005 44 2006 38 2007 44 2001 42 2008 61 753 41 59 2009 60 2010 62 2011 40 41 2012 59 865 2013 40 41 59 809 2009 60 2010 62 2014 40 41 59 2015 58 865 2016 40 2009 60 2010 62 2017 41 59 773 2018 58 865 2019 40 2020 42 2021 41 59 773 58 2009 60 2010 62 2022 40 41 59 773 58 2004 2005 59 2023 2024 59 2006 38 2025 59 125 59 ,"{'AvgLine': 11, 'CountLine': 79, 'CountStmt': 26, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 6, 'MaxEssential': 3, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 65, 'CountStmtDecl': 20, 'MaxCyclomatic': 3, 'SumCyclomatic': 8, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 65, 'CountLineCodeExe': 5, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118579,C++,"class TestBootstrapNodesUpdater : public QObject
{
    Q_OBJECT
public:
    TestBootstrapNodesUpdater();
private slots:
    void testOnline();
    void testLocal();
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 41 59 773 2003 58 865 2004 40 41 59 865 2005 40 41 59 125 59 ,"{'AvgLine': 8, 'CountLine': 35, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 7, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 31, 'CountLineCodeExe': 2, 'CountLineComment': 4, 'AltAvgLineComment': 1, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118580,C++,"class TestPosixSignalNotifier : public QObject
{
    Q_OBJECT
private slots:
    void checkUsrSignalHandling();
    void checkIgnoreExtraSignals();
    void checkTermSignalsHandling();
};",0,587 2000 58 777 2001 123 2002 773 2003 58 865 2004 40 41 59 865 2005 40 41 59 865 2006 40 41 59 125 59 ,"{'AvgLine': 19, 'CountLine': 67, 'CountStmt': 25, 'MaxNesting': 1, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 57, 'CountStmtDecl': 17, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 16, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 3, 'AltCountLineCode': 57, 'CountLineCodeExe': 11, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118581,C++,"class LineEdit : public QLineEdit
{
    Q_OBJECT

public:
    LineEdit(QWidget* parent = nullptr);

protected:
    void keyPressEvent(QKeyEvent* event) final;

signals:
    void clickEnter();
    void clickShiftEnter();
    void clickEsc();
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 2003 42 2004 61 753 41 59 775 58 865 2005 40 2006 42 2007 41 2008 59 2009 58 865 2010 40 41 59 865 2011 40 41 59 865 2012 40 41 59 125 59 ,"{'AvgLine': 9, 'CountLine': 34, 'CountStmt': 12, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 29, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 5, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 29, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118586,C++,"class TestCore : public QObject
{
Q_OBJECT
private slots:
    void startup_without_proxy();
    void startup_with_invalid_proxy();

private:
    /* Test Variables */
    Core::ToxCoreErrors* err = nullptr;
    MockSettings* settings;
    QByteArray savedata{};
    ToxCorePtr test_core;
};",0,587 2000 58 777 2001 123 2002 773 2003 58 865 2004 40 41 59 865 2005 40 41 59 773 58 305 2006 321 2007 42 2008 61 753 59 2009 42 2010 59 2011 2012 123 125 59 2013 2014 59 125 59 ,"{'AvgLine': 28, 'CountLine': 70, 'CountStmt': 25, 'MaxNesting': 1, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 9, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 47, 'CountStmtDecl': 8, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 17, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 19, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 9, 'CountDeclMethod': 2, 'AltCountLineCode': 47, 'CountLineCodeExe': 16, 'CountLineComment': 6, 'AltAvgLineComment': 2, 'AltCountLineBlank': 19, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118597,C++,"class IDialogsManager
{
public:
    IDialogsManager() = default;
    virtual ~IDialogsManager();
    IDialogsManager(const IDialogsManager&) = default;
    IDialogsManager& operator=(const IDialogsManager&) = default;
    IDialogsManager(IDialogsManager&&) = default;
    IDialogsManager& operator=(IDialogsManager&&) = default;

    virtual IDialogs* getFriendDialogs(const ToxPk& friendPk) const = 0;
    virtual IDialogs* getGroupDialogs(const GroupId& groupId) const = 0;
};",0,587 2000 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 59 2000 40 601 2000 38 41 61 613 59 2000 38 758 61 40 601 2000 38 41 61 613 59 2000 40 2000 307 41 61 613 59 2000 38 758 61 40 2000 307 41 61 613 59 864 2001 42 2002 40 601 2003 38 2004 41 601 61 1500 59 864 2001 42 2005 40 601 2006 38 2007 41 601 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 13, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 12, 'CountStmtDecl': 3, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 12, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 3, 'CountClassDerived': 1, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118600,C++,"class MockGroupSettings : public IGroupSettings
{
public:
    QStringList getBlackList() const override;

    void setBlackList(const QStringList& blist) override;

private:
    QStringList blacklist;
};",0,587 2000 58 777 2001 123 777 58 2002 2003 40 41 601 2004 59 865 2005 40 601 2002 38 2006 41 2004 59 773 58 2002 2007 59 125 59 ,"{'AvgLine': 4, 'CountLine': 18, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 16, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 16, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118603,C++,"class IDialogs
{
public:
    IDialogs() = default;
    virtual ~IDialogs();
    IDialogs(const IDialogs&) = default;
    IDialogs& operator=(const IDialogs&) = default;
    IDialogs(IDialogs&&) = default;
    IDialogs& operator=(IDialogs&&) = default;

    virtual bool hasContact(const ContactId& contactId) const = 0;
    virtual bool isContactActive(const ContactId& contactId) const = 0;

    virtual void removeFriend(const ToxPk& friendPk) = 0;
    virtual void removeGroup(const GroupId& groupId) = 0;

    virtual int chatroomCount() const = 0;
};",0,587 2000 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 59 2000 40 601 2000 38 41 61 613 59 2000 38 758 61 40 601 2000 38 41 61 613 59 2000 40 2000 307 41 61 613 59 2000 38 758 61 40 2000 307 41 61 613 59 864 569 2001 40 601 2002 38 2003 41 601 61 1500 59 864 569 2004 40 601 2002 38 2003 41 601 61 1500 59 864 865 2005 40 601 2006 38 2007 41 61 1500 59 864 865 2008 40 601 2009 38 2010 41 61 1500 59 864 704 2011 40 41 601 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 18, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 15, 'CountStmtDecl': 6, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 15, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 1, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118610,C++,"class NotificationEdgeWidget final : public QWidget
{
    Q_OBJECT
public:
    enum Position : uint8_t
    {
        Top,
        Bottom
    };

    explicit NotificationEdgeWidget(Position position, QWidget* parent = nullptr);
    void updateNotificationCount(int count);

signals:
    void clicked();

protected:
    void mouseReleaseEvent(QMouseEvent* event) final;

private:
    QLabel* textLabel;
};",0,587 2000 2001 58 777 2002 123 2003 777 58 640 2004 58 2005 123 2006 44 2007 125 59 648 2000 40 2004 2008 44 2002 42 2009 61 753 41 59 865 2010 40 704 2011 41 59 2012 58 865 2013 40 41 59 775 58 865 2014 40 2015 42 2016 41 2001 59 773 58 2017 42 2018 59 125 59 ,"{'AvgLine': 11, 'CountLine': 55, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 46, 'CountLineCodeExe': 0, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118607,C++,"class TestDbSchema : public QObject
{
    Q_OBJECT
private slots:
    void initTestCase();
    void testCreation();
    void testIsNewDb();
    void test0to1();
    void test1to2();
    void test2to3();
    void test3to4();
    void test4to5();
    void test5to6();
    void test6to7();
    // test7to8 omitted, version only upgrade, versions are not verified in this
    // test suite
    void cleanupTestCase() const;

private:
    bool initSucess{false};
    void createSchemaAtVersion(std::shared_ptr<RawDatabase>, const std::vector<SqliteMasterEntry>& schema);
    void verifyDb(std::shared_ptr<RawDatabase> db, const std::vector<SqliteMasterEntry>& expectedSql);
};",0,587 2000 58 777 2001 123 2002 773 2003 58 865 2004 40 41 59 865 2005 40 41 59 865 2006 40 41 59 865 2007 40 41 59 865 2008 40 41 59 865 2009 40 41 59 865 2010 40 41 59 865 2011 40 41 59 865 2012 40 41 59 865 2013 40 41 59 330 330 865 2014 40 41 601 59 773 58 569 2015 123 655 125 59 865 2016 40 2017 321 2018 60 2019 62 44 601 2017 321 2020 60 2021 62 38 2022 41 59 865 2023 40 2017 321 2018 60 2019 62 2024 44 601 2017 321 2020 60 2021 62 38 2025 41 59 125 59 ,"{'AvgLine': 19, 'CountLine': 281, 'CountStmt': 61, 'MaxNesting': 1, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 222, 'CountStmtDecl': 47, 'MaxCyclomatic': 2, 'SumCyclomatic': 14, 'AltAvgLineCode': 15, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 22, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 13, 'AltCountLineCode': 222, 'CountLineCodeExe': 21, 'CountLineComment': 39, 'AltAvgLineComment': 2, 'AltCountLineBlank': 22, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 48, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.18', 'AltCountLineComment': 39, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 84, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 10, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118611,C++,"class GroupInviteWidget : public QWidget
{
    Q_OBJECT
public:
    GroupInviteWidget(QWidget* parent, const GroupInvite& invite);
    void retranslateUi();
    const GroupInvite getInviteInfo() const;

signals:
    void accepted(const GroupInvite& invite);
    void rejected(const GroupInvite& invite);

private:
    QPushButton* acceptButton;
    QPushButton* rejectButton;
    CroppingLabel* inviteMessageLabel;
    QHBoxLayout* widgetLayout;
    GroupInvite inviteInfo;
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 2001 42 2003 44 601 2004 38 2005 41 59 865 2006 40 41 59 601 2004 2007 40 41 601 59 2008 58 865 2009 40 601 2004 38 2005 41 59 865 2010 40 601 2004 38 2005 41 59 773 58 2011 42 2012 59 2011 42 2013 59 2014 42 2015 59 2016 42 2017 59 2004 2018 59 125 59 ,"{'AvgLine': 10, 'CountLine': 51, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 48, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 48, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
117903,C++,"class UavcanBaseSubscriber
{
public:
	UavcanBaseSubscriber(CanardInstance &ins, const char *prefix_name, const char *subject_name, uint8_t instance = 0) :
		_canard_instance(ins), _prefix_name(prefix_name), _instance(instance)
	{
		_subj_sub._subject_name = subject_name;
		_subj_sub._canard_sub.user_reference = this;
		_subj_sub._canard_sub.port_id = CANARD_PORT_ID_UNSET;
	}

	virtual ~UavcanBaseSubscriber()
	{
		unsubscribe();
	}

	bool isValidPortId(int32_t id) const { return id >= 0 && id <= CANARD_PORT_ID_MAX; }

	virtual void subscribe() = 0;
	virtual void unsubscribe()
	{
		SubjectSubscription *curSubj = &_subj_sub;

		while (curSubj != nullptr) {
			canardRxUnsubscribe(&_canard_instance, CanardTransferKindMessage, curSubj->_canard_sub.port_id);
			curSubj = curSubj->next;
		}
	};

	virtual void callback(const CanardTransfer &msg) = 0;

	CanardPortID id(uint32_t instance = 0)
	{
		uint32_t i = 0;
		SubjectSubscription *curSubj = &_subj_sub;

		while (curSubj != nullptr) {
			if (instance == i) {
				return curSubj->_canard_sub.port_id;
			}

			curSubj = curSubj->next;
			i++;
		}

		return CANARD_PORT_ID_UNSET; // Wrong id return unset
	}

	bool hasPortID(CanardPortID port_id)
	{
		if (!isValidPortId((int32_t)port_id)) {
			return false;
		}

		SubjectSubscription *curSubj = &_subj_sub;

		while (curSubj != nullptr) {
			if (port_id == curSubj->_canard_sub.port_id) {
				return true;
			}

			curSubj = curSubj->next;
		}

		return false;
	}

	const char *getSubjectName()
	{
		return _subj_sub._subject_name;
	}

	uint8_t getInstance()
	{
		return _instance;
	}

	void printInfo()
	{
		SubjectSubscription *curSubj = &_subj_sub;

		while (curSubj != nullptr) {
			if (curSubj->_canard_sub.port_id != CANARD_PORT_ID_UNSET) {
				PX4_INFO(""Subscribed %s.%d on port %d"", curSubj->_subject_name, _instance, curSubj->_canard_sub.port_id);
			}

			curSubj = curSubj->next;
		}
	}

protected:
	struct SubjectSubscription {
		CanardRxSubscription _canard_sub;
		const char *_subject_name;
		struct SubjectSubscription *next {nullptr};
	};

	CanardInstance &_canard_instance;
	const char *_prefix_name;
	SubjectSubscription _subj_sub;
	uint8_t _instance {0};
	/// TODO: 'type' parameter? uavcan.pub.PORT_NAME.type (see 384.Access.1.0.uavcan)
};",0,587 2000 123 777 58 2000 40 2001 38 2002 44 601 582 42 2003 44 601 582 42 2004 44 2005 2006 61 1500 41 58 2007 40 2002 41 44 2008 40 2003 41 44 2009 40 2006 41 123 2010 46 2011 61 2004 59 2010 46 2012 46 2013 61 823 59 2010 46 2012 46 2014 61 2015 59 125 864 126 2000 40 41 123 2016 40 41 59 125 569 2017 40 2018 2019 41 601 123 792 2019 325 1500 307 2019 329 2020 59 125 864 865 2021 40 41 61 1500 59 864 865 2022 40 41 123 2023 42 2024 61 38 2025 59 870 40 2024 340 753 41 123 2026 40 38 2007 44 2027 44 2024 354 2028 46 2029 41 59 2024 61 2024 354 2030 59 125 125 59 864 865 2031 40 601 2032 38 2033 41 61 1500 59 2034 2019 40 2035 2006 61 1500 41 123 2035 2036 61 1500 59 2037 42 2038 61 38 2039 59 870 40 2038 340 753 41 123 688 40 2006 323 2036 41 123 792 2038 354 2040 46 2041 59 125 2038 61 2038 354 2042 59 2036 349 59 125 792 2043 59 330 125 569 2044 40 2034 2045 41 123 688 40 33 2017 40 40 2018 41 2045 41 41 123 792 655 59 125 2046 42 2047 61 38 2048 59 870 40 2047 340 753 41 123 688 40 2045 323 2047 354 2049 46 2045 41 123 792 829 59 125 2047 61 2047 354 2050 59 125 792 655 59 125 601 582 42 2051 40 41 123 792 2052 46 2053 59 125 2005 2054 40 41 123 792 2009 59 125 865 2055 40 41 123 2056 42 2057 61 38 2058 59 870 40 2057 340 753 41 123 688 40 2057 354 2059 46 2045 340 2060 41 123 2061 40 362 44 2057 354 2062 44 2009 44 2057 354 2059 46 2045 41 59 125 2057 61 2057 354 2063 59 125 125 775 58 816 2064 123 2065 2066 59 601 582 42 2067 59 816 2064 42 2068 123 753 125 59 125 59 2001 38 2007 59 601 582 42 2008 59 2064 2069 59 2005 2009 123 1500 125 59 331 125 59 ,"{'AvgLine': 8, 'CountLine': 103, 'CountStmt': 45, 'MaxNesting': 3, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 22, 'MaxEssential': 4, 'SumEssential': 14, 'AvgCyclomatic': 2, 'CountLineCode': 81, 'CountStmtDecl': 23, 'MaxCyclomatic': 4, 'SumCyclomatic': 18, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 11, 'AltCountLineCode': 81, 'CountLineCodeExe': 23, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 1, 'CountClassDerived': 8, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 94, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
118227,C++,"class Mag: public Sensor
{
public:
	Mag(std::shared_ptr<Ekf> ekf);
	~Mag();

	void setData(const Vector3f &mag);

private:
	Vector3f _mag_data;

	void send(uint64_t time) override;

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 321 2003 60 2004 62 2005 41 59 126 2000 40 41 59 865 2006 40 601 2007 38 2008 41 59 773 58 2007 2009 59 865 2010 40 2011 2012 41 2013 59 125 59 ,"{'AvgLine': 3, 'CountLine': 28, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 24, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118288,C++,"class ActuatorEffectivenessMultirotor: public ModuleParams, public ActuatorEffectiveness
{
public:
	ActuatorEffectivenessMultirotor(ModuleParams *parent);
	virtual ~ActuatorEffectivenessMultirotor() = default;

	static constexpr int NUM_ROTORS_MAX = 8;

	struct RotorGeometry {
		float position_x;
		float position_y;
		float position_z;
		float axis_x;
		float axis_y;
		float axis_z;
		float thrust_coef;
		float moment_ratio;
	};

	struct MultirotorGeometry {
		RotorGeometry rotors[NUM_ROTORS_MAX];
		int num_rotors{0};
	};

	static int computeEffectivenessMatrix(const MultirotorGeometry &geometry,
					      matrix::Matrix<float, NUM_AXES, NUM_ACTUATORS> &effectiveness);

	bool getEffectivenessMatrix(matrix::Matrix<float, NUM_AXES, NUM_ACTUATORS> &matrix, bool force) override;

	int numActuators() const override { return _num_actuators; }
private:
	bool _updated{true};
	int _num_actuators{0};

	DEFINE_PARAMETERS(
		(ParamFloat<px4::params::CA_MC_R0_PX>) _param_ca_mc_r0_px,
		(ParamFloat<px4::params::CA_MC_R0_PY>) _param_ca_mc_r0_py,
		(ParamFloat<px4::params::CA_MC_R0_PZ>) _param_ca_mc_r0_pz,
		(ParamFloat<px4::params::CA_MC_R0_AX>) _param_ca_mc_r0_ax,
		(ParamFloat<px4::params::CA_MC_R0_AY>) _param_ca_mc_r0_ay,
		(ParamFloat<px4::params::CA_MC_R0_AZ>) _param_ca_mc_r0_az,
		(ParamFloat<px4::params::CA_MC_R0_CT>) _param_ca_mc_r0_ct,
		(ParamFloat<px4::params::CA_MC_R0_KM>) _param_ca_mc_r0_km,

		(ParamFloat<px4::params::CA_MC_R1_PX>) _param_ca_mc_r1_px,
		(ParamFloat<px4::params::CA_MC_R1_PY>) _param_ca_mc_r1_py,
		(ParamFloat<px4::params::CA_MC_R1_PZ>) _param_ca_mc_r1_pz,
		(ParamFloat<px4::params::CA_MC_R1_AX>) _param_ca_mc_r1_ax,
		(ParamFloat<px4::params::CA_MC_R1_AY>) _param_ca_mc_r1_ay,
		(ParamFloat<px4::params::CA_MC_R1_AZ>) _param_ca_mc_r1_az,
		(ParamFloat<px4::params::CA_MC_R1_CT>) _param_ca_mc_r1_ct,
		(ParamFloat<px4::params::CA_MC_R1_KM>) _param_ca_mc_r1_km,

		(ParamFloat<px4::params::CA_MC_R2_PX>) _param_ca_mc_r2_px,
		(ParamFloat<px4::params::CA_MC_R2_PY>) _param_ca_mc_r2_py,
		(ParamFloat<px4::params::CA_MC_R2_PZ>) _param_ca_mc_r2_pz,
		(ParamFloat<px4::params::CA_MC_R2_AX>) _param_ca_mc_r2_ax,
		(ParamFloat<px4::params::CA_MC_R2_AY>) _param_ca_mc_r2_ay,
		(ParamFloat<px4::params::CA_MC_R2_AZ>) _param_ca_mc_r2_az,
		(ParamFloat<px4::params::CA_MC_R2_CT>) _param_ca_mc_r2_ct,
		(ParamFloat<px4::params::CA_MC_R2_KM>) _param_ca_mc_r2_km,

		(ParamFloat<px4::params::CA_MC_R3_PX>) _param_ca_mc_r3_px,
		(ParamFloat<px4::params::CA_MC_R3_PY>) _param_ca_mc_r3_py,
		(ParamFloat<px4::params::CA_MC_R3_PZ>) _param_ca_mc_r3_pz,
		(ParamFloat<px4::params::CA_MC_R3_AX>) _param_ca_mc_r3_ax,
		(ParamFloat<px4::params::CA_MC_R3_AY>) _param_ca_mc_r3_ay,
		(ParamFloat<px4::params::CA_MC_R3_AZ>) _param_ca_mc_r3_az,
		(ParamFloat<px4::params::CA_MC_R3_CT>) _param_ca_mc_r3_ct,
		(ParamFloat<px4::params::CA_MC_R3_KM>) _param_ca_mc_r3_km,

		(ParamFloat<px4::params::CA_MC_R4_PX>) _param_ca_mc_r4_px,
		(ParamFloat<px4::params::CA_MC_R4_PY>) _param_ca_mc_r4_py,
		(ParamFloat<px4::params::CA_MC_R4_PZ>) _param_ca_mc_r4_pz,
		(ParamFloat<px4::params::CA_MC_R4_AX>) _param_ca_mc_r4_ax,
		(ParamFloat<px4::params::CA_MC_R4_AY>) _param_ca_mc_r4_ay,
		(ParamFloat<px4::params::CA_MC_R4_AZ>) _param_ca_mc_r4_az,
		(ParamFloat<px4::params::CA_MC_R4_CT>) _param_ca_mc_r4_ct,
		(ParamFloat<px4::params::CA_MC_R4_KM>) _param_ca_mc_r4_km,

		(ParamFloat<px4::params::CA_MC_R5_PX>) _param_ca_mc_r5_px,
		(ParamFloat<px4::params::CA_MC_R5_PY>) _param_ca_mc_r5_py,
		(ParamFloat<px4::params::CA_MC_R5_PZ>) _param_ca_mc_r5_pz,
		(ParamFloat<px4::params::CA_MC_R5_AX>) _param_ca_mc_r5_ax,
		(ParamFloat<px4::params::CA_MC_R5_AY>) _param_ca_mc_r5_ay,
		(ParamFloat<px4::params::CA_MC_R5_AZ>) _param_ca_mc_r5_az,
		(ParamFloat<px4::params::CA_MC_R5_CT>) _param_ca_mc_r5_ct,
		(ParamFloat<px4::params::CA_MC_R5_KM>) _param_ca_mc_r5_km,

		(ParamFloat<px4::params::CA_MC_R6_PX>) _param_ca_mc_r6_px,
		(ParamFloat<px4::params::CA_MC_R6_PY>) _param_ca_mc_r6_py,
		(ParamFloat<px4::params::CA_MC_R6_PZ>) _param_ca_mc_r6_pz,
		(ParamFloat<px4::params::CA_MC_R6_AX>) _param_ca_mc_r6_ax,
		(ParamFloat<px4::params::CA_MC_R6_AY>) _param_ca_mc_r6_ay,
		(ParamFloat<px4::params::CA_MC_R6_AZ>) _param_ca_mc_r6_az,
		(ParamFloat<px4::params::CA_MC_R6_CT>) _param_ca_mc_r6_ct,
		(ParamFloat<px4::params::CA_MC_R6_KM>) _param_ca_mc_r6_km,

		(ParamFloat<px4::params::CA_MC_R7_PX>) _param_ca_mc_r7_px,
		(ParamFloat<px4::params::CA_MC_R7_PY>) _param_ca_mc_r7_py,
		(ParamFloat<px4::params::CA_MC_R7_PZ>) _param_ca_mc_r7_pz,
		(ParamFloat<px4::params::CA_MC_R7_AX>) _param_ca_mc_r7_ax,
		(ParamFloat<px4::params::CA_MC_R7_AY>) _param_ca_mc_r7_ay,
		(ParamFloat<px4::params::CA_MC_R7_AZ>) _param_ca_mc_r7_az,
		(ParamFloat<px4::params::CA_MC_R7_CT>) _param_ca_mc_r7_ct,
		(ParamFloat<px4::params::CA_MC_R7_KM>) _param_ca_mc_r7_km,

		(ParamInt<px4::params::CA_MC_R_COUNT>) _param_ca_mc_r_count
	)
};",0,587 2000 58 777 2001 44 777 2002 123 777 58 2000 40 2001 42 2003 41 59 864 126 2000 40 41 61 613 59 809 603 704 2004 61 1502 59 816 2005 123 660 2006 59 660 2007 59 660 2008 59 660 2009 59 660 2010 59 660 2011 59 660 2012 59 660 2013 59 125 59 816 2014 123 2005 2015 91 2004 93 59 704 2016 123 1500 125 59 125 59 809 704 2017 40 601 2014 38 2018 44 2019 321 2020 60 660 44 2021 44 2022 62 38 2023 41 59 569 2024 40 2019 321 2020 60 660 44 2021 44 2022 62 38 2019 44 569 2025 41 2026 59 704 2027 40 41 601 2026 123 792 2028 59 125 773 58 569 2029 123 829 125 59 704 2030 123 1500 125 59 2031 40 40 2032 60 2033 321 2034 321 2035 62 41 2036 44 40 2032 60 2033 321 2034 321 2037 62 41 2038 44 40 2032 60 2033 321 2034 321 2039 62 41 2040 44 40 2032 60 2033 321 2034 321 2041 62 41 2042 44 40 2032 60 2033 321 2034 321 2043 62 41 2044 44 40 2032 60 2033 321 2034 321 2045 62 41 2046 44 40 2032 60 2033 321 2034 321 2047 62 41 2048 44 40 2032 60 2033 321 2034 321 2049 62 41 2050 44 40 2032 60 2033 321 2034 321 2051 62 41 2052 44 40 2032 60 2033 321 2034 321 2053 62 41 2054 44 40 2032 60 2033 321 2034 321 2055 62 41 2056 44 40 2032 60 2033 321 2034 321 2057 62 41 2058 44 40 2032 60 2033 321 2034 321 2059 62 41 2060 44 40 2032 60 2033 321 2034 321 2061 62 41 2062 44 40 2032 60 2033 321 2034 321 2063 62 41 2064 44 40 2032 60 2033 321 2034 321 2065 62 41 2066 44 40 2032 60 2033 321 2034 321 2067 62 41 2068 44 40 2032 60 2033 321 2034 321 2069 62 41 2070 44 40 2032 60 2033 321 2034 321 2071 62 41 2072 44 40 2032 60 2033 321 2034 321 2073 62 41 2074 44 40 2032 60 2033 321 2034 321 2075 62 41 2076 44 40 2032 60 2033 321 2034 321 2077 62 41 2078 44 40 2032 60 2033 321 2034 321 2079 62 41 2080 44 40 2032 60 2033 321 2034 321 2081 62 41 2082 44 40 2032 60 2033 321 2034 321 2083 62 41 2084 44 40 2032 60 2033 321 2034 321 2085 62 41 2086 44 40 2032 60 2033 321 2034 321 2087 62 41 2088 44 40 2032 60 2033 321 2034 321 2089 62 41 2090 44 40 2032 60 2033 321 2034 321 2091 62 41 2092 44 40 2032 60 2033 321 2034 321 2093 62 41 2094 44 40 2032 60 2033 321 2034 321 2095 62 41 2096 44 40 2032 60 2033 321 2034 321 2097 62 41 2098 44 40 2032 60 2033 321 2034 321 2099 62 41 2100 44 40 2032 60 2033 321 2034 321 2101 62 41 2102 44 40 2032 60 2033 321 2034 321 2103 62 41 2104 44 40 2032 60 2033 321 2034 321 2105 62 41 2106 44 40 2032 60 2033 321 2034 321 2107 62 41 2108 44 40 2032 60 2033 321 2034 321 2109 62 41 2110 44 40 2032 60 2033 321 2034 321 2111 62 41 2112 44 40 2032 60 2033 321 2034 321 2113 62 41 2114 44 40 2032 60 2033 321 2034 321 2115 62 41 2116 44 40 2032 60 2033 321 2034 321 2117 62 41 2118 44 40 2032 60 2033 321 2034 321 2119 62 41 2120 44 40 2032 60 2033 321 2034 321 2121 62 41 2122 44 40 2032 60 2033 321 2034 321 2123 62 41 2124 44 40 2032 60 2033 321 2034 321 2125 62 41 2126 44 40 2032 60 2033 321 2034 321 2127 62 41 2128 44 40 2032 60 2033 321 2034 321 2129 62 41 2130 44 40 2032 60 2033 321 2034 321 2131 62 41 2132 44 40 2032 60 2033 321 2034 321 2133 62 41 2134 44 40 2032 60 2033 321 2034 321 2135 62 41 2136 44 40 2032 60 2033 321 2034 321 2137 62 41 2138 44 40 2032 60 2033 321 2034 321 2139 62 41 2140 44 40 2032 60 2033 321 2034 321 2141 62 41 2142 44 40 2032 60 2033 321 2034 321 2143 62 41 2144 44 40 2032 60 2033 321 2034 321 2145 62 41 2146 44 40 2032 60 2033 321 2034 321 2147 62 41 2148 44 40 2032 60 2033 321 2034 321 2149 62 41 2150 44 40 2032 60 2033 321 2034 321 2151 62 41 2152 44 40 2032 60 2033 321 2034 321 2153 62 41 2154 44 40 2032 60 2033 321 2034 321 2155 62 41 2156 44 40 2032 60 2033 321 2034 321 2157 62 41 2158 44 40 2032 60 2033 321 2034 321 2159 62 41 2160 44 40 2032 60 2033 321 2034 321 2161 62 41 2162 44 40 2163 60 2033 321 2034 321 2164 62 41 2165 41 125 59 ,"{'AvgLine': 46, 'CountLine': 262, 'CountStmt': 111, 'MaxNesting': 2, 'AvgLineCode': 37, 'AvgEssential': 1, 'AvgLineBlank': 6, 'CountStmtExe': 19, 'MaxEssential': 4, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 213, 'CountStmtDecl': 96, 'MaxCyclomatic': 5, 'SumCyclomatic': 10, 'AltAvgLineCode': 37, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 40, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 6, 'CountDeclMethod': 6, 'AltCountLineCode': 213, 'CountLineCodeExe': 23, 'CountLineComment': 9, 'AltAvgLineComment': 1, 'AltCountLineBlank': 40, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 20, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 99, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 67, 'CountDeclInstanceVariablePublic': 65, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
98940,C++,"class OCAD_EXTERN CADObject
{
public:
    enum ObjectType
    {
        UNUSED               = 0x0,  // 0
        TEXT                 = 0x1,  // 1
        ATTRIB               = 0x2,  // 2
        ATTDEF               = 0x3,  // 3
        BLOCK                = 0x4,  // 4
        ENDBLK               = 0x5,  // 5
        SEQEND               = 0x6,  // 6
        INSERT               = 0x7,  // 7
        MINSERT1             = 0x8,  // 8
        MINSERT2             = 0x9,  // 9
        VERTEX2D             = 0x0A, // 10
        VERTEX3D             = 0x0B, // 11
        VERTEX_MESH          = 0x0C, // 12
        VERTEX_PFACE         = 0x0D, // 13
        VERTEX_PFACE_FACE    = 0x0E, // 14
        POLYLINE2D           = 0x0F, // 15
        POLYLINE3D           = 0x10, // 16
        ARC                  = 0x11, // 17
        CIRCLE               = 0x12, // 18
        LINE                 = 0x13, // 19
        DIMENSION_ORDINATE   = 0x14, // 20
        DIMENSION_LINEAR     = 0x15, // 21
        DIMENSION_ALIGNED    = 0x16, // 22
        DIMENSION_ANG_3PT    = 0x17, // 23
        DIMENSION_ANG_2LN    = 0x18, // 24
        DIMENSION_RADIUS     = 0x19, // 25
        DIMENSION_DIAMETER   = 0x1A, // 26
        POINT                = 0x1B, // 27
        FACE3D               = 0x1C, // 28
        POLYLINE_PFACE       = 0x1D, // 29
        POLYLINE_MESH        = 0x1E, // 30
        SOLID                = 0x1F, // 31
        TRACE                = 0x20, // 32
        SHAPE                = 0x21, // 33
        VIEWPORT             = 0x22, // 34
        ELLIPSE              = 0x23, // 35
        SPLINE               = 0x24, // 36
        REGION               = 0x25, // 37
        SOLID3D              = 0x26, // 38
        BODY                 = 0x27, // 39
        RAY                  = 0x28, // 40
        XLINE                = 0x29, // 41
        DICTIONARY           = 0x2A, // 42
        OLEFRAME             = 0x2B, // 43
        MTEXT                = 0x2C, // 44
        LEADER               = 0x2D, // 45
        TOLERANCE            = 0x2E, // 46
        MLINE                = 0x2F, // 47
        BLOCK_CONTROL_OBJ    = 0x30, // 48
        BLOCK_HEADER         = 0x31, // 49
        LAYER_CONTROL_OBJ    = 0x32, // 50
        LAYER                = 0x33, // 51
        STYLE_CONTROL_OBJ    = 0x34, // 52
        STYLE1               = 0x35, // 53
        STYLE2               = 0x36, // 54
        STYLE3               = 0x37, // 55
        LTYPE_CONTROL_OBJ    = 0x38, // 56
        LTYPE1               = 0x39, // 57
        LTYPE2               = 0x3A, // 58
        LTYPE3               = 0x3B, // 59
        VIEW_CONTROL_OBJ     = 0x3C, // 60
        VIEW                 = 0x3D, // 61
        UCS_CONTROL_OBJ      = 0x3E, // 62
        UCS                  = 0x3F, // 63
        VPORT_CONTROL_OBJ    = 0x40, // 64
        VPORT                = 0x41, // 65
        APPID_CONTROL_OBJ    = 0x42, // 66
        APPID                = 0x43, // 67
        DIMSTYLE_CONTROL_OBJ = 0x44, // 68
        DIMSTYLE             = 0x45, // 69
        VP_ENT_HDR_CTRL_OBJ  = 0x46, // 70
        VP_ENT_HDR           = 0x47, // 71
        GROUP                = 0x48, // 72
        MLINESTYLE           = 0x49, // 73
        OLE2FRAME            = 0x4A, // 74
        DUMMY                = 0x4B, // 75
        LONG_TRANSACTION     = 0x4C, // 76
        LWPOLYLINE           = 0x4D, // 77
        HATCH                = 0x4E, // 78
        XRECORD              = 0x4F, // 79
        ACDBPLACEHOLDER      = 0x50, // 80
        VBA_PROJECT          = 0x51, // 81
        LAYOUT               = 0x52, // 82
        // Codes below aren't fixed, libopencad uses it for reading, in writing it will be different!
        CELLSTYLEMAP         = 0x53, // 83
        DBCOLOR              = 0x54, // 84
        DICTIONARYVAR        = 0x55, // 85
        DICTIONARYWDFLT      = 0x56, // 86
        FIELD                = 0x57, // 87
        GROUP_UNFIXED        = 0x58, // 88
        HATCH_UNFIXED        = 0x59, // 89
        IDBUFFER             = 0x5A, // 90
        IMAGE                = 0x5B, // 91
        IMAGEDEF             = 0x5C, // 92
        IMAGEDEFREACTOR      = 0x5D, // 93
        LAYER_INDEX          = 0x5E, // 94
        LAYOUT_UNFIXED       = 0x5F, // 95
        LWPOLYLINE_UNFIXED   = 0x60, // 96
        MATERIAL             = 0x61, // 97
        MLEADER              = 0x62, // 98
        MLEADERSTYLE         = 0x63, // 99
        OLE2FRAME_UNFIXED    = 0x64, // 100
        PLACEHOLDER          = 0x65, // 101
        PLOTSETTINGS         = 0x66, // 102
        RASTERVARIABLES      = 0x67, // 103
        SCALE                = 0x68, // 104
        SORTENTSTABLE        = 0x69, // 105
        SPATIAL_FILTER       = 0x6A, // 106
        SPATIAL_INDEX        = 0x6B, // 107
        TABLEGEOMETRY        = 0x6C, // 108
        TABLESTYLES          = 0x6D, // 109
        VBA_PROJECT_UNFIXED  = 0x6E, // 110
        VISUALSTYLE          = 0x6F, // 111
        WIPEOUTVARIABLE      = 0x70, // 112
        XRECORD_UNFIXED      = 0x71, // 113
        WIPEOUT              = 0x72  // 114
    };

    virtual ~CADObject(){}

    ObjectType getType() const;
    long       getSize() const;

    void setSize( long value );

    short getCRC() const;
    void  setCRC(unsigned short value );

protected:
    long       size;
    ObjectType type;
    unsigned short CRC;

    explicit CADObject(ObjectType typeIn) : size(0), type(typeIn), CRC(0) {}
};",0,587 2000 2001 123 777 58 640 2002 123 2003 61 1500 44 330 2004 61 1501 44 330 2005 61 1502 44 330 2006 61 1502 44 330 2007 61 1502 44 330 2008 61 1502 44 330 2009 61 1502 44 330 2010 61 1502 44 330 2011 61 1502 44 330 2012 61 1502 44 330 2013 61 1502 44 330 2014 61 1503 44 330 2015 61 1503 44 330 2016 61 1503 44 330 2017 61 1503 44 330 2018 61 1503 44 330 2019 61 1503 44 330 2020 61 1503 44 330 2021 61 1503 44 330 2022 61 1503 44 330 2023 61 1503 44 330 2024 61 1503 44 330 2025 61 1503 44 330 2026 61 1503 44 330 2027 61 1503 44 330 2028 61 1503 44 330 2029 61 1503 44 330 2030 61 1503 44 330 2031 61 1503 44 330 2032 61 1503 44 330 2033 61 1503 44 330 2034 61 1503 44 330 2035 61 1503 44 330 2036 61 1503 44 330 2037 61 1503 44 330 2038 61 1503 44 330 2039 61 1503 44 330 2040 61 1503 44 330 2041 61 1503 44 330 2042 61 1503 44 330 2043 61 1503 44 330 2044 61 1503 44 330 2045 61 1503 44 330 2046 61 1503 44 330 2047 61 1503 44 330 2048 61 1503 44 330 2049 61 1503 44 330 2050 61 1503 44 330 2051 61 1503 44 330 2052 61 1503 44 330 2053 61 1503 44 330 2054 61 1503 44 330 2055 61 1503 44 330 2056 61 1503 44 330 2057 61 1503 44 330 2058 61 1503 44 330 2059 61 1503 44 330 2060 61 1503 44 330 2061 61 1503 44 330 2062 61 1503 44 330 2063 61 1503 44 330 2064 61 1503 44 330 2065 61 1503 44 330 2066 61 1503 44 330 2067 61 1503 44 330 2068 61 1503 44 330 2069 61 1503 44 330 2070 61 1503 44 330 2071 61 1503 44 330 2072 61 1503 44 330 2073 61 1503 44 330 2074 61 1503 44 330 2075 61 1503 44 330 2076 61 1503 44 330 2077 61 1503 44 330 2078 61 1503 44 330 2079 61 1503 44 330 2080 61 1503 44 330 2081 61 1503 44 330 2082 61 1503 44 330 2083 61 1503 44 330 2084 61 1503 44 330 2085 61 1503 44 330 330 2086 61 1503 44 330 2087 61 1503 44 330 2088 61 1503 44 330 2089 61 1503 44 330 2090 61 1503 44 330 2091 61 1503 44 330 2092 61 1503 44 330 2093 61 1503 44 330 2094 61 1503 44 330 2095 61 1503 44 330 2096 61 1503 44 330 2097 61 1503 44 330 2098 61 1503 44 330 2099 61 1503 44 330 2100 61 1503 44 330 2101 61 1503 44 330 2102 61 1503 44 330 2103 61 1503 44 330 2104 61 1504 44 330 2105 61 1504 44 330 2106 61 1504 44 330 2107 61 1504 44 330 2108 61 1504 44 330 2109 61 1504 44 330 2110 61 1504 44 330 2111 61 1504 44 330 2112 61 1504 44 330 2113 61 1504 44 330 2114 61 1504 44 330 2115 61 1504 44 330 2116 61 1504 44 330 2117 61 1504 330 125 59 864 126 2001 40 41 123 125 2002 2118 40 41 601 59 726 2119 40 41 601 59 865 2120 40 726 2121 41 59 803 2122 40 41 601 59 865 2123 40 856 803 2121 41 59 775 58 726 2124 59 2002 2125 59 856 803 2126 59 648 2001 40 2002 2127 41 58 2124 40 1500 41 44 2125 40 2127 41 44 2126 40 1500 41 123 125 125 59 ,"{'AvgLine': 3, 'CountLine': 41, 'CountStmt': 19, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 14, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 35, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 3}"
99243,C++,"class CPL_DLL GNMNetwork : public GDALDataset
{
public:
    GNMNetwork();
    virtual ~GNMNetwork();

    // GDALDataset Interface
    const OGRSpatialReference* GetSpatialRef() const override {
        return GetSpatialRefFromOldGetProjectionRef();
    }
    virtual char      **GetFileList(void) override;

    // GNMNetwork Interface

    /**
     * @brief Create network system layers
     *
     * Creates the connectivity (the ""network path"" of data) over the dataset
     * and returns the resulting network.
     * NOTE: This method does not create any connections among features
     * but creates the necessary set of fields, layers, etc.
     * NOTE: After the successful creation the passed dataset must not be
     * modified outside (but can be read as usual).
     * NOTE: For the common network format the creation is forbidden if the
     * passed dataset already has network system layers and OVERWRITE creation
     * option is FALSE.
     *
     * @param pszFilename - A path there the network folder (schema, etc.) will
     *                      be created. The folder (schema, etc.) name get
     *                      options.
     * @param papszOptions - create network options. The create options
     *                       specific for gnm driver.
     * @return CE_None on success
     */
    virtual CPLErr Create( const char* pszFilename, char** papszOptions ) = 0;

    /**
     * @brief Open a network
     * @param poOpenInfo GDALOpenInfo pointer
     * @return CE_None on success
     */
    virtual CPLErr Open( GDALOpenInfo* poOpenInfo ) = 0;

    /**
     * @brief Delete network. Delete all dependent layers
     * @return CE_None on success
     */
    virtual CPLErr Delete() = 0;

    /**
     * @brief GetName - a network name. The value provided to create function
     *        in GNM_MD_NAME key. While creation this value used to create the
     *        folder or db schema name. But can be changed after creation.
     * @return Network name string
     */
    virtual const char* GetName() const;

    /**
     * @brief GetVersion return the network version if applicable
     * @return version value
     */
    virtual int GetVersion() const { return 0;}

    /**
     * @brief DisconnectAll method clears the network graph
     * @return CE_None on success
     */
    virtual CPLErr DisconnectAll () = 0;

    /**
     * @brief GetFeatureByGlobalFID search all network layers for given feature
     *        identificator.
     * @param nGFID feature identificator.
     * @return OGRFeature pointer or NULL. The pointer should be freed via
     *         OGRFeature::DestroyFeature().
     */
    virtual OGRFeature *GetFeatureByGlobalFID (GNMGFID nGFID) = 0;

    /**
     * @brief Create path between start and end GFIDs.
     * @param nStartFID - start identificator
     * @param nEndFID - end identificator
     * @param eAlgorithm - The algorithm to get path
     * @param papszOptions - algorithm specific options
     * @return In memory OGRLayer pointer with features constituting
     *         the shortest path (or paths). The caller have to free
     *         the pointer via @see ReleaseResultSet().
     */
    virtual OGRLayer *GetPath (GNMGFID nStartFID, GNMGFID nEndFID,
                     GNMGraphAlgorithmType eAlgorithm, char** papszOptions) = 0;
protected:
    /**
     * @brief Check if network already exist
     * @param pszFilename - path to network (folder or database
     * @param papszOptions - create options
     * @return TRUE if exist and not overwrite or FALSE
     */
    virtual int CheckNetworkExist( const char* pszFilename,
                                   char** papszOptions ) = 0;

//! @cond Doxygen_Suppress
    const char *_GetProjectionRef(void) override;
//! @endcond

protected:
//! @cond Doxygen_Suppress
    CPLString m_soName;
    CPLString m_soSRS;
//! @endcond
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 59 330 601 2003 42 2004 40 41 601 2005 123 792 2006 40 41 59 125 864 582 42 42 2007 40 865 41 2005 59 330 306 864 2008 2009 40 601 582 42 2010 44 582 42 42 2011 41 61 1500 59 306 864 2008 2012 40 2013 42 2014 41 61 1500 59 306 864 2008 2015 40 41 61 1500 59 306 864 601 582 42 2016 40 41 601 59 306 864 704 2017 40 41 601 123 792 1500 59 125 306 864 2008 2018 40 41 61 1500 59 306 864 2019 42 2020 40 2021 2022 41 61 1500 59 306 864 2023 42 2024 40 2021 2025 44 2021 2026 44 2027 2028 44 582 42 42 2011 41 61 1500 59 775 58 306 864 704 2029 40 601 582 42 2010 44 582 42 42 2011 41 61 1500 59 330 601 582 42 2030 40 865 41 2005 59 330 775 58 330 2031 2032 59 2031 2033 59 330 125 59 ,"{'AvgLine': 2, 'CountLine': 124, 'CountStmt': 23, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 40, 'CountStmtDecl': 16, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 14, 'AltCountLineCode': 40, 'CountLineCodeExe': 6, 'CountLineComment': 72, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 5, 'CountClassDerived': 1, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 156, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '1.80', 'AltCountLineComment': 72, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 16, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
100247,C++,"class CADXLineObject final: public CADEntityObject
{
public:
    CADXLineObject();
    virtual ~CADXLineObject(){}

    CADVector vertPosition;
    CADVector vectVector;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 59 2003 2005 59 125 59 ,"{'AvgLine': 2, 'CountLine': 13, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 12, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99091,C++,"class IGMLASInputSourceClosing
{
    public:
        virtual ~IGMLASInputSourceClosing() {}

        virtual void notifyClosing(const CPLString& osFilename) = 0;
};",0,587 2000 123 777 58 864 126 2000 40 41 123 125 864 865 2001 40 601 2002 38 2003 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 7, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99119,C++,"class OGRESSortDesc
{
    public:
        CPLString osColumn;
        bool      bAsc;

        OGRESSortDesc( const CPLString& osColumnIn, bool bAscIn ) :
            osColumn(osColumnIn),
            bAsc(bAscIn) {}
};",0,587 2000 123 777 58 2001 2002 59 569 2003 59 2000 40 601 2001 38 2004 44 569 2005 41 58 2002 40 2004 41 44 2003 40 2005 41 123 125 125 59 ,"{'AvgLine': 3, 'CountLine': 10, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 9, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118482,C++,"class QRWidget : public QWidget
{
    Q_OBJECT

public:
    explicit QRWidget(QWidget* parent = nullptr);
    ~QRWidget();
    void setQRData(const QString& data);
    QImage* getImage();
    bool saveImage(QString path);

private:
    QString data;
    void paintImage();
    QImage* image;
    QSize size;
};",0,587 2000 58 777 2001 123 2002 777 58 648 2000 40 2001 42 2003 61 753 41 59 126 2000 40 41 59 865 2004 40 601 2005 38 2006 41 59 2007 42 2008 40 41 59 569 2009 40 2005 2010 41 59 773 58 2005 2006 59 865 2011 40 41 59 2007 42 2012 59 2013 2014 59 125 59 ,"{'AvgLine': 12, 'CountLine': 94, 'CountStmt': 33, 'MaxNesting': 4, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 80, 'CountStmtDecl': 27, 'MaxCyclomatic': 6, 'SumCyclomatic': 11, 'AltAvgLineCode': 10, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 80, 'CountLineCodeExe': 13, 'CountLineComment': 9, 'AltAvgLineComment': 1, 'AltCountLineBlank': 5, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 24, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118172,C++,"class MavlinkStreamGlobalPositionInt : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamGlobalPositionInt(mavlink); }

	static constexpr const char *get_name_static() { return ""GLOBAL_POSITION_INT""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_GLOBAL_POSITION_INT; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _gpos_sub.advertised() ? MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamGlobalPositionInt(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _gpos_sub{ORB_ID(vehicle_global_position)};
	uORB::Subscription _lpos_sub{ORB_ID(vehicle_local_position)};
	uORB::Subscription _home_sub{ORB_ID(home_position)};
	uORB::Subscription _air_data_sub{ORB_ID(vehicle_air_data)};

	bool send() override
	{
		vehicle_global_position_s gpos;
		vehicle_local_position_s lpos;

		if (_gpos_sub.update(&gpos) && _lpos_sub.update(&lpos)) {

			mavlink_global_position_int_t msg{};

			if (lpos.z_valid && lpos.z_global) {
				msg.alt = (-lpos.z + lpos.ref_alt) * 1000.0f;

			} else {
				// fall back to baro altitude
				vehicle_air_data_s air_data{};
				_air_data_sub.copy(&air_data);

				if (air_data.timestamp > 0) {
					msg.alt = air_data.baro_alt_meter * 1000.0f;
				}
			}

			home_position_s home{};
			_home_sub.copy(&home);

			if ((home.timestamp > 0) && home.valid_alt) {
				if (lpos.z_valid) {
					msg.relative_alt = -(lpos.z - home.z) * 1000.0f;

				} else {
					msg.relative_alt = msg.alt - (home.alt * 1000.0f);
				}

			} else {
				if (lpos.z_valid) {
					msg.relative_alt = -lpos.z * 1000.0f;
				}
			}

			msg.time_boot_ms = gpos.timestamp / 1000;
			msg.lat = gpos.lat * 1e7;
			msg.lon = gpos.lon * 1e7;

			msg.vx = lpos.vx * 100.0f;
			msg.vy = lpos.vy * 100.0f;
			msg.vz = lpos.vz * 100.0f;

			msg.hdg = math::degrees(matrix::wrap_2pi(lpos.heading)) * 100.0f;

			mavlink_msg_global_position_int_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 2017 321 2018 2022 123 2023 40 2024 41 125 59 2017 321 2018 2025 123 2026 40 2027 41 125 59 2017 321 2018 2028 123 2029 40 2030 41 125 59 569 2031 40 41 2010 123 2032 2033 59 2034 2035 59 688 40 2019 46 2036 40 38 2033 41 307 2022 46 2036 40 38 2035 41 41 123 2037 2038 123 125 59 688 40 2035 46 2039 307 2035 46 2040 41 123 2038 46 2041 61 40 45 2035 46 2042 43 2035 46 2043 41 42 1504 59 125 630 123 330 2044 2045 123 125 59 2028 46 2046 40 38 2045 41 59 688 40 2045 46 2047 62 1500 41 123 2038 46 2048 61 2045 46 2049 42 1504 59 125 125 2050 2051 123 125 59 2025 46 2052 40 38 2051 41 59 688 40 40 2051 46 2053 62 1500 41 307 2051 46 2054 41 123 688 40 2035 46 2039 41 123 2038 46 2055 61 45 40 2035 46 2056 45 2051 46 2056 41 42 1504 59 125 630 123 2038 46 2057 61 2038 46 2058 45 40 2051 46 2058 42 1504 41 59 125 125 630 123 688 40 2035 46 2039 41 123 2038 46 2059 61 45 2035 46 2060 42 1504 59 125 125 2038 46 2061 61 2033 46 2053 47 1504 59 2038 46 2062 61 2033 46 2062 42 1508 59 2038 46 2063 61 2033 46 2063 42 1508 59 2038 46 2064 61 2035 46 2064 42 1503 59 2038 46 2065 61 2035 46 2065 42 1503 59 2038 46 2066 61 2035 46 2066 42 1503 59 2038 46 2067 61 2068 321 2069 40 2070 321 2071 40 2035 46 2072 41 41 42 1503 59 2073 40 2074 354 2075 40 41 44 38 2038 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 8, 'CountLine': 81, 'CountStmt': 27, 'MaxNesting': 3, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 59, 'CountStmtDecl': 17, 'MaxCyclomatic': 7, 'SumCyclomatic': 14, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 59, 'CountLineCodeExe': 8, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118276,C++,"class LPS33HW_SPI : public device::SPI
{
public:
	LPS33HW_SPI(uint8_t bus, uint32_t device, int bus_frequency, spi_mode_e spi_mode);
	virtual ~LPS33HW_SPI() = default;

	virtual int	read(unsigned address, void *data, unsigned count);
	virtual int	write(unsigned address, void *data, unsigned count);

};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 2003 2004 44 2005 2001 44 704 2006 44 2007 2008 41 59 864 126 2000 40 41 61 613 59 864 704 2009 40 856 2010 44 865 42 2011 44 856 2012 41 59 864 704 2013 40 856 2010 44 865 42 2011 44 856 2012 41 59 125 59 ,"{'AvgLine': 11, 'CountLine': 42, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 34, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118280,C++,template class AxisAngle<float>;,0,822 587 2000 60 660 62 59 ,"{'AvgLine': 0, 'CountLine': 1, 'CountStmt': 0, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 1, 'CountStmtDecl': 0, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 1, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 75, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118285,C++,"class SDP3X : public Airspeed, public I2CSPIDriver<SDP3X>
{
public:
	SDP3X(const I2CSPIDriverConfig &config) :
		Airspeed(config.bus, config.bus_frequency, config.i2c_address, CONVERSION_INTERVAL),
		I2CSPIDriver(config),
		_keep_retrying{config.keep_running}
	{
	}

	virtual ~SDP3X() = default;

	static void print_usage();

	void	RunImpl();

	int init() override;

private:
	enum class State {
		RequireConfig,
		Configuring,
		Running
	};

	int	measure() override { return 0; }
	int	collect() override;
	int	probe() override;
	int	configure();
	int	read_scale();

	math::LowPassFilter2p<float> _filter{SPD3X_MEAS_RATE, SDP3X_MEAS_DRIVER_FILTER_FREQ};

	bool init_sdp3x();

	/**
	 * Calculate the CRC8 for the sensor payload data
	 */
	bool crc(const uint8_t data[], unsigned size, uint8_t checksum);

	/**
	 * Write a command in Sensirion specific logic
	 */
	int write_command(uint16_t command);

	uint16_t _scale{0};
	const bool _keep_retrying;
	State _state{State::RequireConfig};
};",0,587 2000 58 777 2001 44 777 2002 60 2000 62 123 777 58 2000 40 601 2003 38 2004 41 58 2001 40 2004 46 2005 44 2004 46 2006 44 2004 46 2007 44 2008 41 44 2002 40 2004 41 44 2009 123 2004 46 2010 125 123 125 864 126 2000 40 41 61 613 59 809 865 2011 40 41 59 865 2012 40 41 59 704 2013 40 41 2014 59 773 58 640 587 2015 123 2016 44 2017 44 2018 125 59 704 2019 40 41 2014 123 792 1500 59 125 704 2020 40 41 2014 59 704 2021 40 41 2014 59 704 2022 40 41 59 704 2023 40 41 59 2024 321 2025 60 660 62 2026 123 2027 44 2028 125 59 569 2029 40 41 59 306 569 2030 40 601 2031 2032 91 93 44 856 2033 44 2031 2034 41 59 306 704 2035 40 2036 2037 41 59 2036 2038 123 1500 125 59 601 569 2009 59 2015 2039 123 2015 321 2040 125 59 125 59 ,"{'AvgLine': 17, 'CountLine': 250, 'CountStmt': 113, 'MaxNesting': 3, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 79, 'MaxEssential': 3, 'SumEssential': 16, 'AvgCyclomatic': 3, 'CountLineCode': 188, 'CountStmtDecl': 35, 'MaxCyclomatic': 7, 'SumCyclomatic': 36, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 48, 'CountStmtEmpty': 6, 'AltAvgLineBlank': 3, 'CountDeclMethod': 13, 'AltCountLineCode': 188, 'CountLineCodeExe': 81, 'CountLineComment': 15, 'AltAvgLineComment': 0, 'AltCountLineBlank': 48, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 30, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 15, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 41, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 89, 'SumCyclomaticModified': 32, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 8, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
118287,C++,"class MavlinkStreamPositionTargetGlobalInt : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamPositionTargetGlobalInt(mavlink); }

	static constexpr const char *get_name_static() { return ""POSITION_TARGET_GLOBAL_INT""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _pos_sp_triplet_sub.advertised() ? MAVLINK_MSG_ID_POSITION_TARGET_GLOBAL_INT_LEN +
		       MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamPositionTargetGlobalInt(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _control_mode_sub{ORB_ID(vehicle_control_mode)};
	uORB::Subscription _lpos_sp_sub{ORB_ID(vehicle_local_position_setpoint)};
	uORB::Subscription _pos_sp_triplet_sub{ORB_ID(position_setpoint_triplet)};

	bool send() override
	{
		vehicle_control_mode_s control_mode{};
		_control_mode_sub.copy(&control_mode);

		if (control_mode.flag_control_position_enabled) {

			position_setpoint_triplet_s pos_sp_triplet{};
			_pos_sp_triplet_sub.copy(&pos_sp_triplet);

			if (pos_sp_triplet.timestamp > 0 && pos_sp_triplet.current.valid
			    && PX4_ISFINITE(pos_sp_triplet.current.lat) && PX4_ISFINITE(pos_sp_triplet.current.lon)) {

				mavlink_position_target_global_int_t msg{};

				msg.time_boot_ms = hrt_absolute_time() / 1000;
				msg.coordinate_frame = MAV_FRAME_GLOBAL_INT;
				msg.lat_int = pos_sp_triplet.current.lat * 1e7;
				msg.lon_int = pos_sp_triplet.current.lon * 1e7;
				msg.alt = pos_sp_triplet.current.alt;

				vehicle_local_position_setpoint_s lpos_sp;

				if (_lpos_sp_sub.copy(&lpos_sp) && (lpos_sp.timestamp > 0)) {
					// velocity
					msg.vx = lpos_sp.vx;
					msg.vy = lpos_sp.vy;
					msg.vz = lpos_sp.vz;

					// acceleration
					msg.afx = lpos_sp.acceleration[0];
					msg.afy = lpos_sp.acceleration[1];
					msg.afz = lpos_sp.acceleration[2];

					// yaw
					msg.yaw = lpos_sp.yaw;
					msg.yaw_rate = lpos_sp.yawspeed;
				}

				mavlink_msg_position_target_global_int_send_struct(_mavlink->get_channel(), &msg);

				return true;
			}
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 2017 321 2018 2022 123 2023 40 2024 41 125 59 2017 321 2018 2025 123 2026 40 2027 41 125 59 569 2028 40 41 2010 123 2029 2030 123 125 59 2019 46 2031 40 38 2030 41 59 688 40 2030 46 2032 41 123 2033 2034 123 125 59 2025 46 2031 40 38 2034 41 59 688 40 2034 46 2035 62 1500 307 2034 46 2036 46 2037 307 2038 40 2034 46 2036 46 2039 41 307 2038 40 2034 46 2036 46 2040 41 41 123 2041 2042 123 125 59 2042 46 2043 61 2044 40 41 47 1504 59 2042 46 2045 61 2046 59 2042 46 2047 61 2034 46 2036 46 2039 42 1508 59 2042 46 2048 61 2034 46 2036 46 2040 42 1508 59 2042 46 2049 61 2034 46 2036 46 2049 59 2050 2051 59 688 40 2022 46 2031 40 38 2051 41 307 40 2051 46 2035 62 1500 41 41 123 330 2042 46 2052 61 2051 46 2052 59 2042 46 2053 61 2051 46 2053 59 2042 46 2054 61 2051 46 2054 59 330 2042 46 2055 61 2051 46 2056 91 1500 93 59 2042 46 2057 61 2051 46 2056 91 1501 93 59 2042 46 2058 61 2051 46 2056 91 1502 93 59 330 2042 46 2059 61 2051 46 2059 59 2042 46 2060 61 2051 46 2061 59 125 2062 40 2063 354 2064 40 41 44 38 2042 41 59 792 829 59 125 125 792 655 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 72, 'CountStmt': 22, 'MaxNesting': 3, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 7, 'MaxEssential': 3, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 51, 'CountStmtDecl': 15, 'MaxCyclomatic': 4, 'SumCyclomatic': 11, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 18, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 51, 'CountLineCodeExe': 5, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 18, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118291,C++,"class RM3100_I2C : public device::I2C
{
public:
	RM3100_I2C(int bus, int bus_frequency);
	~RM3100_I2C() override = default;

	int     read(unsigned address, void *data, unsigned count) override;
	int     write(unsigned address, void *data, unsigned count) override;

protected:
	int     probe() override;
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 704 2004 41 59 126 2000 40 41 2005 61 613 59 704 2006 40 856 2007 44 865 42 2008 44 856 2009 41 2005 59 704 2010 40 856 2007 44 865 42 2008 44 856 2009 41 2005 59 775 58 704 2011 40 41 2005 59 125 59 ,"{'AvgLine': 13, 'CountLine': 64, 'CountStmt': 22, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 14, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 49, 'CountStmtDecl': 8, 'MaxCyclomatic': 3, 'SumCyclomatic': 8, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 49, 'CountLineCodeExe': 13, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118310,C++,"class SystemClock : public uavcan::ISystemClock
	, uavcan::Noncopyable
{
	SystemClock()
	{
	}

	virtual void adjustUtc(uavcan::UtcDuration adjustment)
	{
		clock::adjustUtc(adjustment);
	}

public:
	virtual uavcan::MonotonicTime getMonotonic() const
	{
		return clock::getMonotonic();
	}
	virtual uavcan::UtcTime getUtc()             const
	{
		return clock::getUtc();
	}

	/**
	 * Calls clock::init() as needed.
	 * This function is thread safe.
	 */
	static SystemClock &instance();
};",0,587 2000 58 777 2001 321 2002 44 2001 321 2003 123 2000 40 41 123 125 864 865 2004 40 2001 321 2005 2006 41 123 2007 321 2004 40 2006 41 59 125 777 58 864 2001 321 2008 2009 40 41 601 123 792 2010 321 2009 40 41 59 125 864 2001 321 2011 2012 40 41 601 123 792 2013 321 2012 40 41 59 125 306 809 2000 38 2014 40 41 59 125 59 ,"{'AvgLine': 3, 'CountLine': 28, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 21, 'CountLineCodeExe': 0, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.19', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118242,C++,"class Airspeed: public Sensor
{
public:
	Airspeed(std::shared_ptr<Ekf> ekf);
	~Airspeed();

	void setData(float true_airspeed, float eas2tas);

private:
	float _true_airspeed_data{0.0f};
	float _indicated_airspeed_data{0.0f};

	void send(uint64_t time) override;

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 321 2003 60 2004 62 2005 41 59 126 2000 40 41 59 865 2006 40 660 2007 44 660 2008 41 59 773 58 660 2009 123 1500 125 59 660 2010 123 1500 125 59 865 2011 40 2012 2013 41 2014 59 125 59 ,"{'AvgLine': 5, 'CountLine': 36, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 32, 'CountStmtDecl': 7, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 32, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118252,C++,"class EkfFusionLogicTest : public ::testing::Test
{
public:

	EkfFusionLogicTest(): ::testing::Test(),
		_ekf{std::make_shared<Ekf>()},
		_sensor_simulator(_ekf),
		_ekf_wrapper(_ekf) {};

	std::shared_ptr<Ekf> _ekf;
	SensorSimulator _sensor_simulator;
	EkfWrapper _ekf_wrapper;

	// Setup the Ekf with synthetic measurements
	void SetUp() override
	{
		_ekf->init(0);
		_sensor_simulator.runSeconds(7);
	}

	// Use this method to clean up any memory, network etc. after each test
	void TearDown() override
	{
	}
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 58 321 2001 321 2002 40 41 44 2003 123 2004 321 2005 60 2006 62 40 41 125 44 2007 40 2003 41 44 2008 40 2003 41 123 125 59 2009 321 2010 60 2011 62 2003 59 2012 2007 59 2013 2008 59 330 865 2014 40 41 2015 123 2003 354 2016 40 1500 41 59 2007 46 2017 40 1502 41 59 125 330 865 2018 40 41 2015 123 125 125 59 ,"{'AvgLine': 4, 'CountLine': 25, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 19, 'CountLineCodeExe': 0, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118331,C++,"template <class T>
class uORB_over_UAVCAN_Subscriber : public UavcanDynamicPortSubscriber
{
public:
	uORB_over_UAVCAN_Subscriber(CanardInstance &ins, UavcanParamManager &pmgr, const orb_metadata *meta,
				    uint8_t instance = 0) :
		UavcanDynamicPortSubscriber(ins, pmgr, ""uorb."", meta->o_name, instance),
		_uorb_meta{meta},
		_uorb_pub(meta)
	{};

	~uORB_over_UAVCAN_Subscriber() override = default;

	void subscribe() override
	{
		T *data = NULL;

		// Subscribe to messages uORB sensor_gps payload over UAVCAN
		canardRxSubscribe(&_canard_instance,
				  CanardTransferKindMessage,
				  _subj_sub._canard_sub.port_id,
				  get_payload_size(data),
				  CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC * 10000,
				  &_subj_sub._canard_sub);
	};

	void callback(const CanardTransfer &receive) override
	{
		T *data = (T *)receive.payload;

		if (receive.payload_size == get_payload_size(data)) {

			/* Data type specific conversion if necceary  */
			convert(data);

			_uorb_pub.publish(*data);

		} else {
			PX4_ERR(""uORB over UAVCAN %s payload size mismatch got %d expected %d"",
				_subj_sub._subject_name, receive.payload_size, get_payload_size(data));
		}
	};

protected:
	// Default payload-size function -- can specialize in derived class
	size_t get_payload_size(const T *msg)
	{
		(void)msg;
		return sizeof(T);
	};

	void convert(T *data) {};

private:
	const orb_metadata *_uorb_meta;
	uORB::PublicationMulti<T> _uorb_pub;
};",0,822 60 587 2000 62 587 2001 58 777 2002 123 777 58 2001 40 2003 38 2004 44 2005 38 2006 44 601 2007 42 2008 44 2009 2010 61 1500 41 58 2002 40 2004 44 2006 44 362 44 2008 354 2011 44 2010 41 44 2012 123 2008 125 44 2013 40 2008 41 123 125 59 126 2001 40 41 2014 61 613 59 865 2015 40 41 2014 123 2000 42 2016 61 2017 59 330 2018 40 38 2019 44 2020 44 2021 46 2022 46 2023 44 2024 40 2016 41 44 2025 42 1505 44 38 2021 46 2022 41 59 125 59 865 2026 40 601 2027 38 2028 41 2014 123 2000 42 2029 61 40 2000 42 41 2028 46 2030 59 688 40 2028 46 2031 323 2032 40 2029 41 41 123 305 2033 40 2029 41 59 2013 46 2034 40 42 2029 41 59 125 630 123 2035 40 362 44 2036 46 2037 44 2028 46 2031 44 2032 40 2029 41 41 59 125 125 59 775 58 330 2038 2039 40 601 2000 42 2040 41 123 40 865 41 2040 59 792 805 40 2000 41 59 125 59 865 2041 40 2000 42 2042 41 123 125 59 773 58 601 2007 42 2012 59 2043 321 2044 60 2000 62 2013 59 125 59 ,"{'AvgLine': 8, 'CountLine': 56, 'CountStmt': 15, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 42, 'CountStmtDecl': 10, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 42, 'CountLineCodeExe': 6, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 91, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99006,C++,"    class SG_Exception_BadPoint : public SG_Exception
    {
        std::string err_msg;

        public:
            const char* get_err_msg() override { return err_msg.c_str(); }
        
        SG_Exception_BadPoint() : err_msg(""An attempt was made to read an invalid point (likely index out of bounds)."") {}
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 2004 46 2007 40 41 59 125 2000 40 41 58 2004 40 362 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 9, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 7, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99010,C++,"    class SG_Exception_EmptyDim : public SG_Exception
    {
        std::string err_msg;

        public:
            const char* get_err_msg() override { return err_msg.c_str(); }
        
        SG_Exception_EmptyDim() : err_msg(""A dimension has length <= 0, but it must have length > 0"") {}
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 2004 46 2007 40 41 59 125 2000 40 41 58 2004 40 362 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 9, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 7, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99014,C++,"    class SG_Exception_Value_Required : public SG_Exception
    {
        std::string err_msg;

        public:
            const char* get_err_msg() override { return err_msg.c_str(); }
            SG_Exception_Value_Required(const char* containername, const char* type, const char* expvalue) :
                err_msg( std::string(""["") + std::string(containername) + std::string(""] "") + std::string(type) +
                         std::string("" values must be "") + std::string(expvalue)
                       ) {}
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 2004 46 2007 40 41 59 125 2000 40 601 582 42 2008 44 601 582 42 2009 44 601 582 42 2010 41 58 2004 40 2002 321 2003 40 362 41 43 2002 321 2003 40 2008 41 43 2002 321 2003 40 362 41 43 2002 321 2003 40 2009 41 43 2002 321 2003 40 362 41 43 2002 321 2003 40 2010 41 41 123 125 125 59 ,"{'AvgLine': 2, 'CountLine': 11, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 10, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99051,C++,    RegisterMinidriver(TMS);,0,2000 40 2001 41 59 ,"{'AvgLine': 25, 'CountLine': 25, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 21, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 21, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 21, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99145,C++,"class DefaultAllocator : public Allocator {
 public:
  uint8_t *allocate(size_t size) FLATBUFFERS_OVERRIDE {
    return new uint8_t[size];
  }

  void deallocate(uint8_t *p, size_t) FLATBUFFERS_OVERRIDE { delete[] p; }

  static void dealloc(void *p, size_t) { delete[] static_cast<uint8_t *>(p); }
};",0,587 2000 58 777 2001 123 777 58 2002 42 2003 40 2004 2005 41 2006 123 792 744 2002 91 2005 93 59 125 865 2007 40 2002 42 2008 44 2004 41 2006 123 619 91 93 2008 59 125 809 865 2009 40 865 42 2008 44 2004 41 123 619 91 93 811 60 2002 42 62 40 2008 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 10, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 8, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99291,C++,"class OGRXLSDriver final: public OGRSFDriver
{
  public:
                virtual ~OGRXLSDriver();

    virtual const char*         GetName() override;
    virtual OGRDataSource*      Open( const char *, int ) override;
    virtual int                 TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 864 126 2000 40 41 59 864 601 582 42 2003 40 41 2004 59 864 2005 42 2006 40 601 582 42 44 704 41 2004 59 864 704 2007 40 601 582 42 41 2004 59 125 59 ,"{'AvgLine': 9, 'CountLine': 46, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 10, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 37, 'CountStmtDecl': 5, 'MaxCyclomatic': 4, 'SumCyclomatic': 7, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 37, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 44, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99730,C++,"class OCAD_EXTERN CADPolylinePFace : public CADGeometry
{
public:
    CADPolylinePFace();
    virtual ~CADPolylinePFace(){}

    void addVertex( const CADVector& vertex );

    virtual void print() const override;
    virtual void transform( const Matrix& matrix ) override;
protected:
    std::vector<CADVector> vertices;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 865 2003 40 601 2004 38 2005 41 59 864 865 2006 40 41 601 2007 59 864 865 2008 40 601 2009 38 2010 41 2007 59 775 58 2011 321 2012 60 2004 62 2013 59 125 59 ,"{'AvgLine': 5, 'CountLine': 37, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 35, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 42, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
118342,C++,"class BBBlueRcPWMOut : public PWMOutBase
{
public:
	BBBlueRcPWMOut(int max_num_outputs);
	virtual ~BBBlueRcPWMOut();

	int init() override;

	int send_output_pwm(const uint16_t *pwm, int num_outputs) override;

private:
	static const int MAX_NUM_PWM = 8;
	static const int MIN_FREQUENCY_PWM = 40;

	int _num_outputs;
};",0,587 2000 58 777 2001 123 777 58 2000 40 704 2002 41 59 864 126 2000 40 41 59 704 2003 40 41 2004 59 704 2005 40 601 2006 42 2007 44 704 2008 41 2004 59 773 58 809 601 704 2009 61 1502 59 809 601 704 2010 61 1503 59 704 2011 59 125 59 ,"{'AvgLine': 8, 'CountLine': 48, 'CountStmt': 22, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 39, 'CountStmtDecl': 10, 'MaxCyclomatic': 3, 'SumCyclomatic': 8, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 39, 'CountLineCodeExe': 12, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118361,C++,"class UavcanServiceRequestInterface
{
public:
	virtual void response_callback(const CanardTransfer &receive) = 0;
};",0,587 2000 123 777 58 864 865 2001 40 601 2002 38 2003 41 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 5, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 5, 'CountStmtDecl': 1, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 5, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118365,C++,"class MavlinkStreamGPS2Raw : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamGPS2Raw(mavlink); }

	static constexpr const char *get_name_static() { return ""GPS2_RAW""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_GPS2_RAW; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _sensor_gps_sub.advertised() ? (MAVLINK_MSG_ID_GPS2_RAW_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES) : 0;
	}

private:
	explicit MavlinkStreamGPS2Raw(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _sensor_gps_sub{ORB_ID(sensor_gps), 1};

	bool send() override
	{
		sensor_gps_s gps;

		if (_sensor_gps_sub.update(&gps)) {
			mavlink_gps2_raw_t msg{};

			msg.time_usec = gps.timestamp;
			msg.fix_type = gps.fix_type;
			msg.lat = gps.lat;
			msg.lon = gps.lon;
			msg.alt = gps.alt;
			msg.eph = gps.hdop * 100; // GPS HDOP horizontal dilution of position (unitless)
			msg.epv = gps.vdop * 100; // GPS VDOP vertical dilution of position (unitless)

			if (PX4_ISFINITE(gps.vel_m_s) && (fabsf(gps.vel_m_s) >= 0.f)) {
				msg.vel = gps.vel_m_s * 100.f; // cm/s

			} else {
				msg.vel = UINT16_MAX; // If unknown, set to: UINT16_MAX
			}

			msg.cog = math::degrees(matrix::wrap_2pi(gps.cog_rad)) * 1e2f;
			msg.satellites_visible = gps.satellites_used;

			//msg.dgps_numch = // Number of DGPS satellites
			//msg.dgps_age = // Age of DGPS info

			if (PX4_ISFINITE(gps.heading)) {
				if (fabsf(gps.heading) < FLT_EPSILON) {
					msg.yaw = 36000; // Use 36000 for north.

				} else {
					msg.yaw = math::degrees(matrix::wrap_2pi(gps.heading)) * 100.0f; // centidegrees
				}

				if (PX4_ISFINITE(gps.heading_accuracy)) {
					msg.hdg_acc = math::degrees(gps.heading_accuracy) * 1e5f; // Heading / track uncertainty in degE5
				}
			}

			mavlink_msg_gps2_raw_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 40 2015 43 2016 41 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 44 1501 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 59 2027 46 2030 61 2024 46 2030 59 2027 46 2031 61 2024 46 2031 59 2027 46 2032 61 2024 46 2032 59 2027 46 2033 61 2024 46 2033 59 2027 46 2034 61 2024 46 2035 42 1503 59 330 2027 46 2036 61 2024 46 2037 42 1503 59 330 688 40 2038 40 2024 46 2039 41 307 40 2040 40 2024 46 2039 41 325 1500 41 41 123 2027 46 2041 61 2024 46 2039 42 1503 59 330 125 630 123 2027 46 2042 61 2043 59 330 125 2027 46 2044 61 2045 321 2046 40 2047 321 2048 40 2024 46 2049 41 41 42 1503 59 2027 46 2050 61 2024 46 2051 59 330 330 688 40 2038 40 2024 46 2052 41 41 123 688 40 2040 40 2024 46 2052 41 60 2053 41 123 2027 46 2054 61 1506 59 330 125 630 123 2027 46 2055 61 2045 321 2046 40 2047 321 2048 40 2024 46 2052 41 41 42 1503 59 330 125 688 40 2038 40 2024 46 2056 41 41 123 2027 46 2057 61 2045 321 2046 40 2024 46 2056 41 42 1506 59 330 125 125 2058 40 2059 354 2060 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 70, 'CountStmt': 20, 'MaxNesting': 3, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 50, 'CountStmtDecl': 11, 'MaxCyclomatic': 6, 'SumCyclomatic': 13, 'AltAvgLineCode': 5, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 18, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 50, 'CountLineCodeExe': 7, 'CountLineComment': 9, 'AltAvgLineComment': 1, 'AltCountLineBlank': 18, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.18', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99754,C++,"class TigerOverUnder final: public TigerPoint
{
public:
                      TigerOverUnder( OGRTigerDataSource *, const char * );

  virtual OGRFeature *GetFeature( int ) override;

  virtual OGRErr      CreateFeature( OGRFeature *poFeature ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 864 2004 42 2005 40 704 41 2006 59 864 2007 2008 40 2004 42 2009 41 2006 59 125 59 ,"{'AvgLine': 7, 'CountLine': 31, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 28, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 32, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117948,C++,"template<typename Tp>
class BezierQuad
{
public:

	using Vector3_t = matrix::Vector<Tp, 3>;

	/**
	 * Empty constructor
	 */
	BezierQuad() :
		_pt0(Vector3_t()), _ctrl(Vector3_t()), _pt1(Vector3_t()), _duration(1.0f) {}

	/**
	 * Constructor from array
	 */
	BezierQuad(const Tp pt0[3], const Tp ctrl[3], const Tp pt1[3], Tp duration = 1.0f) :
		_pt0(Vector3_t(pt0)), _ctrl(Vector3_t(ctrl)), _pt1(Vector3_t(pt1)), _duration(duration) {}

	/**
	 * Constructor from vector
	 */
	BezierQuad(const Vector3_t &pt0, const Vector3_t &ctrl, const Vector3_t &pt1,
		   Tp duration = 1.0f):
		_pt0(pt0), _ctrl(ctrl), _pt1(pt1), _duration(duration) {}


	/*
	 * Get bezier points
	 */
	void getBezier(Vector3_t &pt0, Vector3_t &ctrl, Vector3_t &pt1);

	/*
	 * Return pt0
	 */
	Vector3_t getPt0() {return _pt0;}

	/*
	 * Return ctrl
	 */
	Vector3_t getCtrl() {return _ctrl;}

	/*
	 * Return pt1
	 */
	Vector3_t getPt1() {return _pt1;}

	/**
	 * Set new bezier points and duration
	 */
	void setBezier(const Vector3_t &pt0, const Vector3_t &ctrl, const Vector3_t &pt1,
		       Tp duration = (Tp)1);

	/*
	 * Set duration
	 *
	 * @param time is the total time it takes to travel along the bezier spline.
	 */
	void setDuration(const Tp time) {_duration = time;}

	/**
	 * Return point on bezier point corresponding to time t
	 *
	 * @param t is a time in seconds in between [0, duration]
	 * @return a point on bezier
	 */
	Vector3_t getPoint(const Tp t);

	/*
	 * Distance to closest point given a position
	 *
	 * @param pose is a position in 3D space from which distance to bezier is computed.
	 * @return distance to closest point on bezier
	 */
	Tp getDistToClosestPoint(const Vector3_t &pose);

	/*
	 * Return velocity on bezier corresponding to time t
	 *
	 * @param t is a time in seconds in between [0, duration]
	 * @return velocity vector at time t
	 */
	Vector3_t getVelocity(const Tp t);

	/*
	 * Return acceleration on bezier corresponding to time t
	 *
	 * @return constant acceleration of bezier
	 */
	Vector3_t getAcceleration();

	/*
	 * Get all states on bezier corresponding to time t
	 */
	void getStates(Vector3_t &point, Vector3_t &vel, Vector3_t &acc, const Tp t);

	/*
	 * Get states on bezier which are closest to pose in space
	 *
	 * @param point is a posiiton on the spline that is closest to a given pose
	 * @param vel is the velocity at that given point
	 * @param acc is the acceleration for that spline
	 * @param pose represent a position in space from which closest point is computed
	 */
	void getStatesClosest(Vector3_t &point, Vector3_t &vel, Vector3_t &acc,
			      const Vector3_t pose);

	/*
	 * Compute bezier from velocity at bezier end points and ctrl point
	 *
	 * The bezier end points are fully defined by a given control point ctrl, the duration and
	 * the desired velocity vectors at the end points.
	 */
	void setBezFromVel(const Vector3_t &ctrl, const Vector3_t &vel0, const Vector3_t &vel1,
			   const Tp duration = (Tp)1);

	/*
	 * Return the arc length of a bezier spline
	 *
	 * The arc length is computed with simpsons integration.
	 * @param resolution in meters.
	 */
	Tp getArcLength(const Tp resolution);

private:

	Vector3_t _pt0; /**< Bezier starting point */
	Vector3_t _ctrl; /**< Bezier control point */
	Vector3_t _pt1; /**< bezier end point */
	Tp _duration = (Tp)1; /**< Total time to travle along spline */

	Tp _cached_arc_length = (Tp)0; /**< The saved arc length of the spline */
	Tp _cached_resolution = (Tp)(-1); /**< The resolution used to compute the arc length.
									Negative number means that cache is not up to date. */

	/*
	 * Golden section search
	 */
	Tp _goldenSectionSearch(const Vector3_t &pose);

	/*
	 * Get squared distance from 3D pose in space and a point on bezier.
	 *
	 * @param t is the time in between [0, duration] that defines a point on the bezier.
	 * @param pose is a 3D pose in space.
	 */
	Tp _getDistanceSquared(const Tp t, const Vector3_t &pose);


};",0,822 60 835 2000 62 587 2001 123 777 58 860 2002 61 2003 321 2004 60 2000 44 1502 62 59 306 2001 40 41 58 2005 40 2002 40 41 41 44 2006 40 2002 40 41 41 44 2007 40 2002 40 41 41 44 2008 40 1501 41 123 125 306 2001 40 601 2000 2009 91 1502 93 44 601 2000 2010 91 1502 93 44 601 2000 2011 91 1502 93 44 2000 2012 61 1501 41 58 2005 40 2002 40 2009 41 41 44 2006 40 2002 40 2010 41 41 44 2007 40 2002 40 2011 41 41 44 2008 40 2012 41 123 125 306 2001 40 601 2002 38 2009 44 601 2002 38 2010 44 601 2002 38 2011 44 2000 2012 61 1501 41 58 2005 40 2009 41 44 2006 40 2010 41 44 2007 40 2011 41 44 2008 40 2012 41 123 125 305 865 2013 40 2002 38 2009 44 2002 38 2010 44 2002 38 2011 41 59 305 2002 2014 40 41 123 792 2005 59 125 305 2002 2015 40 41 123 792 2006 59 125 305 2002 2016 40 41 123 792 2007 59 125 306 865 2017 40 601 2002 38 2009 44 601 2002 38 2010 44 601 2002 38 2011 44 2000 2012 61 40 2000 41 1501 41 59 305 865 2018 40 601 2000 2019 41 123 2008 61 2019 59 125 306 2002 2020 40 601 2000 2021 41 59 305 2000 2022 40 601 2002 38 2023 41 59 305 2002 2024 40 601 2000 2021 41 59 305 2002 2025 40 41 59 305 865 2026 40 2002 38 2027 44 2002 38 2028 44 2002 38 2029 44 601 2000 2021 41 59 305 865 2030 40 2002 38 2027 44 2002 38 2028 44 2002 38 2029 44 601 2002 2023 41 59 305 865 2031 40 601 2002 38 2010 44 601 2002 38 2032 44 601 2002 38 2033 44 601 2000 2012 61 40 2000 41 1501 41 59 305 2000 2034 40 601 2000 2035 41 59 773 58 2002 2005 59 306 2002 2006 59 306 2002 2007 59 306 2000 2008 61 40 2000 41 1501 59 306 2000 2036 61 40 2000 41 1500 59 306 2000 2037 61 40 2000 41 40 45 1501 41 59 306 305 2000 2038 40 601 2002 38 2023 41 59 305 2000 2039 40 601 2000 2021 44 601 2002 38 2023 41 59 125 59 ,"{'AvgLine': 8, 'CountLine': 306, 'CountStmt': 103, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 59, 'MaxEssential': 1, 'SumEssential': 19, 'AvgCyclomatic': 1, 'CountLineCode': 157, 'CountStmtDecl': 52, 'MaxCyclomatic': 5, 'SumCyclomatic': 25, 'AltAvgLineCode': 6, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 48, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 19, 'AltCountLineCode': 157, 'CountLineCodeExe': 71, 'CountLineComment': 110, 'AltAvgLineComment': 1, 'AltCountLineBlank': 48, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 47, 'CountLineInactive': 0, 'CountDeclMethodAll': 19, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.70', 'AltCountLineComment': 110, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 26, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 17, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 25, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 19, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 6, 'CountDeclInstanceVariableProtected': 0}"
118282,C++,template class Quaternion<float>;,0,822 587 2000 60 660 62 59 ,"{'AvgLine': 0, 'CountLine': 1, 'CountStmt': 0, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 1, 'CountStmtDecl': 0, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 1, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 75, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118442,C++,"class TestFileProgress : public QObject
{
    Q_OBJECT
private slots:
    void testSpeed();
    void testSpeedReset();
    void testDiscardedSample();
    void testProgress();
    void testRemainingTime();
    void testBytesSentPersistence();
    void testFileSizePersistence();
    void testNoSamples();
    void testSpeedUnevenIntervals();
    void testDefaultTimeLessThanNow();
    void testTimeChange();
    void testFinishedSpeed();
    void testSamplePeriod();
    void testInvalidSamplePeriod();
};",0,587 2000 58 777 2001 123 2002 773 2003 58 865 2004 40 41 59 865 2005 40 41 59 865 2006 40 41 59 865 2007 40 41 59 865 2008 40 41 59 865 2009 40 41 59 865 2010 40 41 59 865 2011 40 41 59 865 2012 40 41 59 865 2013 40 41 59 865 2014 40 41 59 865 2015 40 41 59 865 2016 40 41 59 865 2017 40 41 59 125 59 ,"{'AvgLine': 17, 'CountLine': 258, 'CountStmt': 38, 'MaxNesting': 0, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 14, 'AvgCyclomatic': 1, 'CountLineCode': 188, 'CountStmtDecl': 38, 'MaxCyclomatic': 1, 'SumCyclomatic': 14, 'AltAvgLineCode': 12, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 43, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 14, 'AltCountLineCode': 188, 'CountLineCodeExe': 25, 'CountLineComment': 27, 'AltAvgLineComment': 1, 'AltCountLineBlank': 43, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 40, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 27, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 13, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118550,C++,"class ClickableTE : public QLabel
{
    Q_OBJECT
public:
signals:
    void clicked();

protected:
    void mouseReleaseEvent(QMouseEvent*) final
    {
        emit clicked();
    }
};",0,587 2000 58 777 2001 123 2002 777 58 2003 58 865 2004 40 41 59 775 58 865 2005 40 2006 42 41 2007 123 2008 2004 40 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 13, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 12, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118509,C++,"class ProfileLocker
{
private:
    ProfileLocker() = delete;

public:
    static bool isLockable(QString profile);
    static bool lock(QString profile);
    static void unlock();
    static bool hasLock();
    static QString getCurLockName();
    static void assertLock();

private:
    static QString lockPathFromName(const QString& name);
    static void deathByBrokenLock();

private:
    static std::unique_ptr<QLockFile> lockfile;
    static QString curLockName;
};",0,587 2000 123 773 58 2000 40 41 61 619 59 777 58 809 569 2001 40 2002 2003 41 59 809 569 2004 40 2002 2003 41 59 809 865 2005 40 41 59 809 569 2006 40 41 59 809 2002 2007 40 41 59 809 865 2008 40 41 59 773 58 809 2002 2009 40 601 2002 38 2010 41 59 809 865 2011 40 41 59 773 58 809 2012 321 2013 60 2014 62 2015 59 809 2002 2016 59 125 59 ,"{'AvgLine': 9, 'CountLine': 94, 'CountStmt': 37, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 23, 'MaxEssential': 3, 'SumEssential': 10, 'AvgCyclomatic': 2, 'CountLineCode': 85, 'CountStmtDecl': 13, 'MaxCyclomatic': 4, 'SumCyclomatic': 16, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 85, 'CountLineCodeExe': 17, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 4, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118584,C++,"class MockNodeListGenerator : public IBootstrapListGenerator
{
    QList<DhtServer> getBootstrapnodes();
};",0,587 2000 58 777 2001 123 2002 60 2003 62 2004 40 41 59 125 59 ,"{'AvgLine': 3, 'CountLine': 7, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118520,C++,"class ToxFileProgress
{
public:
    ToxFileProgress(uint64_t filesize, int samplePeriodMs = 4000);

    QTime lastSampleTime() const;
    bool addSample(uint64_t bytesSent, QTime now = QTime::currentTime());
    void resetSpeed();

    uint64_t getBytesSent() const;
    uint64_t getFileSize() const { return filesize; }
    double getProgress() const;
    double getSpeed() const;
    double getTimeLeftSeconds() const;

private:
    // Should never be modified, but do not want to lose assignment operators
    uint64_t filesize;
    size_t speedSampleCount;
    int samplePeriodMs;

    struct Sample
    {
        uint64_t bytesSent = 0;
        QTime timestamp;
    };

    std::array<Sample, 2> samples;
    uint8_t activeSample = 0;
};",0,587 2000 123 777 58 2000 40 2001 2002 44 704 2003 61 1505 41 59 2004 2005 40 41 601 59 569 2006 40 2001 2007 44 2004 2008 61 2004 321 2009 40 41 41 59 865 2010 40 41 59 2001 2011 40 41 601 59 2001 2012 40 41 601 123 792 2002 59 125 625 2013 40 41 601 59 625 2014 40 41 601 59 625 2015 40 41 601 59 773 58 330 2001 2002 59 2016 2017 59 704 2003 59 816 2018 123 2001 2007 61 1500 59 2004 2019 59 125 59 2020 321 2021 60 2018 44 1502 62 2022 59 2023 2024 61 1500 59 125 59 ,"{'AvgLine': 12, 'CountLine': 137, 'CountStmt': 49, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 27, 'MaxEssential': 4, 'SumEssential': 16, 'AvgCyclomatic': 2, 'CountLineCode': 114, 'CountStmtDecl': 23, 'MaxCyclomatic': 7, 'SumCyclomatic': 21, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 20, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 114, 'CountLineCodeExe': 20, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 20, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118496,C++,"class ICoreFriendMessageSender
{
public:
    ICoreFriendMessageSender() = default;
    virtual ~ICoreFriendMessageSender();
    ICoreFriendMessageSender(const ICoreFriendMessageSender&) = default;
    ICoreFriendMessageSender& operator=(const ICoreFriendMessageSender&) = default;
    ICoreFriendMessageSender(ICoreFriendMessageSender&&) = default;
    ICoreFriendMessageSender& operator=(ICoreFriendMessageSender&&) = default;
    virtual bool sendAction(uint32_t friendId, const QString& action, ReceiptNum& receipt) = 0;
    virtual bool sendMessage(uint32_t friendId, const QString& message, ReceiptNum& receipt) = 0;
};",0,587 2000 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 59 2000 40 601 2000 38 41 61 613 59 2000 38 758 61 40 601 2000 38 41 61 613 59 2000 40 2000 307 41 61 613 59 2000 38 758 61 40 2000 307 41 61 613 59 864 569 2001 40 2002 2003 44 601 2004 38 2005 44 2006 38 2007 41 61 1500 59 864 569 2008 40 2002 2003 44 601 2004 38 2009 44 2006 38 2007 41 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 12, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 12, 'CountStmtDecl': 3, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 12, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118562,C++,"class TestToxId : public QObject
{
    Q_OBJECT
private slots:
    void toStringTest();
    void equalTest();
    void notEqualTest();
    void clearTest();
    void copyTest();
    void validationTest();
};",0,587 2000 58 777 2001 123 2002 773 2003 58 865 2004 40 41 59 865 2005 40 41 59 865 2006 40 41 59 865 2007 40 41 59 865 2008 40 41 59 865 2009 40 41 59 125 59 ,"{'AvgLine': 6, 'CountLine': 51, 'CountStmt': 22, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 51, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 51, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118588,C++,"class ICoreGroupMessageSender
{
public:
    ICoreGroupMessageSender() = default;
    virtual ~ICoreGroupMessageSender();
    ICoreGroupMessageSender(const ICoreGroupMessageSender&) = default;
    ICoreGroupMessageSender& operator=(const ICoreGroupMessageSender&) = default;
    ICoreGroupMessageSender(ICoreGroupMessageSender&&) = default;
    ICoreGroupMessageSender& operator=(ICoreGroupMessageSender&&) = default;

    virtual void sendGroupAction(int groupId, const QString& message) = 0;
    virtual void sendGroupMessage(int groupId, const QString& message) = 0;
};",0,587 2000 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 59 2000 40 601 2000 38 41 61 613 59 2000 38 758 61 40 601 2000 38 41 61 613 59 2000 40 2000 307 41 61 613 59 2000 38 758 61 40 2000 307 41 61 613 59 864 865 2001 40 704 2002 44 601 2003 38 2004 41 61 1500 59 864 865 2005 40 704 2002 44 601 2003 38 2004 41 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 13, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 12, 'CountStmtDecl': 3, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 12, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118609,C++,"class TestToxString : public QObject
{
Q_OBJECT
private slots:
    void QStringTest();
    void QByteArrayTest();
    void uint8_tTest();
    void emptyQStrTest();
    void emptyQByteTest();
    void emptyUINT8Test();
    void nullptrUINT8Test();

private:
    /* Test Strings */
    //""My Test String"" - test text
    static const QString testStr;
    static const QByteArray testByte;
    static const uint8_t* testUINT8;
    static const int lengthUINT8;

    //"""" - empty test text
    static const QString emptyStr;
    static const QByteArray emptyByte;
    static const uint8_t* emptyUINT8;
    static const int emptyLength;
};",0,587 2000 58 777 2001 123 2002 773 2003 58 865 2004 40 41 59 865 2005 40 41 59 865 2006 40 41 59 865 2007 40 41 59 865 2008 40 41 59 865 2009 40 41 59 865 2010 40 41 59 773 58 305 330 809 601 2011 2012 59 809 601 2013 2014 59 809 601 2015 42 2016 59 809 601 704 2017 59 330 809 601 2011 2018 59 809 601 2013 2019 59 809 601 2015 42 2020 59 809 601 704 2021 59 125 59 ,"{'AvgLine': 22, 'CountLine': 180, 'CountStmt': 70, 'MaxNesting': 1, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 35, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 126, 'CountStmtDecl': 56, 'MaxCyclomatic': 2, 'SumCyclomatic': 14, 'AltAvgLineCode': 15, 'AvgLineComment': 4, 'CountClassBase': 0, 'CountLineBlank': 23, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 7, 'AltCountLineCode': 126, 'CountLineCodeExe': 24, 'CountLineComment': 32, 'AltAvgLineComment': 4, 'AltCountLineBlank': 23, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 50, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.25', 'AltCountLineComment': 32, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 8, 'CountDeclMethodPrivate': 6, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118467,C++,"class ICoreIdHandler
{

public:
    ICoreIdHandler() = default;
    virtual ~ICoreIdHandler();
    ICoreIdHandler(const ICoreIdHandler&) = default;
    ICoreIdHandler& operator=(const ICoreIdHandler&) = default;
    ICoreIdHandler(ICoreIdHandler&&) = default;
    ICoreIdHandler& operator=(ICoreIdHandler&&) = default;

    virtual ToxId getSelfId() const = 0;
    virtual ToxPk getSelfPublicKey() const = 0;
    virtual QString getUsername() const = 0;
};",0,587 2000 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 59 2000 40 601 2000 38 41 61 613 59 2000 38 758 61 40 601 2000 38 41 61 613 59 2000 40 2000 307 41 61 613 59 2000 38 758 61 40 2000 307 41 61 613 59 864 2001 2002 40 41 601 61 1500 59 864 2003 2004 40 41 601 61 1500 59 864 2005 2006 40 41 601 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 15, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 13, 'CountStmtDecl': 4, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 13, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 3, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118576,C++,"    class Packet : public ICoreExtPacket
    {
    public:
        /**
         * @brief Internal constructor for a packet.
         */
        Packet(
            ToxExtPacketList* packetList,
            ToxExtensionMessages* toxExtMessages,
            uint32_t friendId,
            std::mutex* toxext_mutex,
            PacketPassKey);

        // Delete copy constructor, we shouldn't be able to copy
        Packet(Packet const& other) = delete;

        Packet(Packet&& other)
        {
            toxExtMessages = other.toxExtMessages;
            packetList = other.packetList;
            friendId = other.friendId;
            hasBeenSent = other.hasBeenSent;
            toxext_mutex = other.toxext_mutex;
            other.toxExtMessages = nullptr;
            other.packetList = nullptr;
            other.friendId = 0;
            other.hasBeenSent = false;
            other.toxext_mutex = nullptr;
        }

        uint64_t addExtendedMessage(QString message) override;

        bool send() override;
    private:
        std::mutex* toxext_mutex;
        bool hasBeenSent = false;
        // Note: non-owning pointer
        ToxExtensionMessages* toxExtMessages;
        // Note: packetList is freed on send() call
        ToxExtPacketList* packetList;
        uint32_t friendId;
    };",0,587 2000 58 777 2001 123 777 58 306 2000 40 2002 42 2003 44 2004 42 2005 44 2006 2007 44 2008 321 2009 42 2010 44 2011 41 59 330 2000 40 2000 601 38 2012 41 61 619 59 2000 40 2000 307 2012 41 123 2005 61 2012 46 2005 59 2003 61 2012 46 2003 59 2007 61 2012 46 2007 59 2013 61 2012 46 2013 59 2010 61 2012 46 2010 59 2012 46 2005 61 753 59 2012 46 2003 61 753 59 2012 46 2007 61 1500 59 2012 46 2013 61 655 59 2012 46 2010 61 753 59 125 2014 2015 40 2016 2017 41 2018 59 569 2019 40 41 2018 59 773 58 2008 321 2009 42 2010 59 569 2020 61 655 59 330 2004 42 2005 59 330 2002 42 2003 59 2006 2007 59 125 59 ,"{'AvgLine': 19, 'CountLine': 107, 'CountStmt': 44, 'MaxNesting': 1, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 23, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 87, 'CountStmtDecl': 21, 'MaxCyclomatic': 6, 'SumCyclomatic': 11, 'AltAvgLineCode': 17, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 87, 'CountLineCodeExe': 21, 'CountLineComment': 10, 'AltAvgLineComment': 1, 'AltCountLineBlank': 10, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
118605,C++,"    class EventHandler : QObject
    {
    public:
        QVector<QAction*> actions;

        EventHandler();
        ~EventHandler();
        void updateActions();
        bool eventFilter(QObject* obj, QEvent* event);
    };",0,587 2000 58 2001 123 777 58 2002 60 2003 42 62 2004 59 2000 40 41 59 126 2000 40 41 59 865 2005 40 41 59 569 2006 40 2001 42 2007 44 2008 42 2009 41 59 125 59 ,"{'AvgLine': 0, 'CountLine': 10, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 9, 'CountStmtDecl': 5, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 9, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118590,C++,"class ScreenGrabberOverlayItem final : public QObject, public QGraphicsRectItem
{
    Q_OBJECT
public:
    explicit ScreenGrabberOverlayItem(ScreenshotGrabber* grabber);
    ~ScreenGrabberOverlayItem();

    void setChosenRect(QRect rect);

protected:
    void mousePressEvent(QGraphicsSceneMouseEvent* event) final;
    void paint(QPainter* painter, const QStyleOptionGraphicsItem* option,
                       QWidget* widget) final;

private:
    ScreenshotGrabber* screnshootGrabber;

    QRect chosenRect;
};",0,587 2000 2001 58 777 2002 44 777 2003 123 2004 777 58 648 2000 40 2005 42 2006 41 59 126 2000 40 41 59 865 2007 40 2008 2009 41 59 775 58 865 2010 40 2011 42 2012 41 2001 59 865 2013 40 2014 42 2015 44 601 2016 42 2017 44 2018 42 2019 41 2001 59 773 58 2005 42 2020 59 2008 2021 59 125 59 ,"{'AvgLine': 8, 'CountLine': 60, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 52, 'CountStmtDecl': 14, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 7, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 52, 'CountLineCodeExe': 2, 'CountLineComment': 5, 'AltAvgLineComment': 1, 'AltCountLineBlank': 8, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118513,C++,"class ContentDialogManager : public QObject, public IDialogsManager
{
    Q_OBJECT
public:
    ContentDialog* current();
    bool contactWidgetExists(const ContactId& groupId);
    void focusContact(const ContactId& contactId);
    void updateFriendStatus(const ToxPk& friendPk);
    void updateGroupStatus(const GroupId& friendPk);
    bool isContactActive(const ContactId& contactId);
    ContentDialog* getFriendDialog(const ToxPk& friendPk) const;
    ContentDialog* getGroupDialog(const GroupId& friendPk) const;

    IDialogs* getFriendDialogs(const ToxPk& friendPk) const;
    IDialogs* getGroupDialogs(const GroupId& groupId) const;

    FriendWidget* addFriendToDialog(ContentDialog* dialog, std::shared_ptr<FriendChatroom> chatroom,
                                    GenericChatForm* form);
    GroupWidget* addGroupToDialog(ContentDialog* dialog, std::shared_ptr<GroupChatroom> chatroom,
                                  GenericChatForm* form);

    void addContentDialog(ContentDialog& dialog);

    static ContentDialogManager* getInstance();

private slots:
    void onDialogClose();
    void onDialogActivate();

private:
    ContentDialog* focusDialog(const ContactId& id,
                               const QHash<const ContactId&, ContentDialog*>& list);

    ContentDialog* currentDialog = nullptr;

    QHash<const ContactId&, ContentDialog*> contactDialogs;

    static ContentDialogManager* instance;
};",0,587 2000 58 777 2001 44 777 2002 123 2003 777 58 2004 42 2005 40 41 59 569 2006 40 601 2007 38 2008 41 59 865 2009 40 601 2007 38 2010 41 59 865 2011 40 601 2012 38 2013 41 59 865 2014 40 601 2015 38 2013 41 59 569 2016 40 601 2007 38 2010 41 59 2004 42 2017 40 601 2012 38 2013 41 601 59 2004 42 2018 40 601 2015 38 2013 41 601 59 2019 42 2020 40 601 2012 38 2013 41 601 59 2019 42 2021 40 601 2015 38 2008 41 601 59 2022 42 2023 40 2004 42 2024 44 2025 321 2026 60 2027 62 2028 44 2029 42 2030 41 59 2031 42 2032 40 2004 42 2024 44 2025 321 2026 60 2033 62 2028 44 2029 42 2030 41 59 865 2034 40 2004 38 2024 41 59 809 2000 42 2035 40 41 59 773 2036 58 865 2037 40 41 59 865 2038 40 41 59 773 58 2004 42 2039 40 601 2007 38 2040 44 601 2041 60 601 2007 38 44 2004 42 62 38 2042 41 59 2004 42 2043 61 753 59 2041 60 601 2007 38 44 2004 42 62 2044 59 809 2000 42 2045 59 125 59 ,"{'AvgLine': 8, 'CountLine': 186, 'CountStmt': 64, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 30, 'MaxEssential': 1, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 164, 'CountStmtDecl': 35, 'MaxCyclomatic': 3, 'SumCyclomatic': 30, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 22, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 17, 'AltCountLineCode': 164, 'CountLineCodeExe': 23, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 22, 'CountClassCoupled': 14, 'CountClassDerived': 0, 'CountLineCodeDecl': 39, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 30, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 94, 'SumCyclomaticModified': 30, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 15, 'CountDeclInstanceMethod': 22, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118537,C++,"class SearchExtraFunctions {
public:
    /**
     * @brief generateFilterWordsOnly generate string for filter ""Whole words only"" for correct search phrase
     * containing symbols ""\[]/^$.|?*+(){}""
     * @param phrase for search
     * @return new phrase for search
     */
    static QString generateFilterWordsOnly(const QString &phrase) {
        QString filter = QRegularExpression::escape(phrase);

        const QString symbols = QStringLiteral(""\\[]/^$.|?*+(){}"");

        if (filter != phrase) {
            if (filter.left(1) != QLatin1String(""\\"")) {
                filter = QLatin1String(""\\b"") + filter;
            } else {
                filter = QLatin1String(""(^|\\s)"") + filter;
            }
            if (!symbols.contains(filter.right(1))) {
                filter += QLatin1String(""\\b"");
            } else {
                filter += QLatin1String(""($|\\s)"");
            }
        } else {
            filter = QStringLiteral(""\\b%1\\b"").arg(filter);
        }

        return filter;
    }
};",0,587 2000 123 777 58 306 809 2001 2002 40 601 2001 38 2003 41 123 2001 2004 61 2005 321 2006 40 2003 41 59 601 2001 2007 61 2008 40 362 41 59 688 40 2004 340 2003 41 123 688 40 2004 46 2009 40 1501 41 340 2010 40 362 41 41 123 2004 61 2010 40 362 41 43 2004 59 125 630 123 2004 61 2010 40 362 41 43 2004 59 125 688 40 33 2007 46 2011 40 2004 46 2012 40 1501 41 41 41 123 2004 348 2010 40 362 41 59 125 630 123 2004 348 2010 40 362 41 59 125 125 630 123 2004 61 2008 40 362 41 46 2013 40 2004 41 59 125 792 2004 59 125 125 59 ,"{'AvgLine': 22, 'CountLine': 31, 'CountStmt': 6, 'MaxNesting': 2, 'AvgLineCode': 19, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 4, 'CountLineCode': 22, 'CountStmtDecl': 3, 'MaxCyclomatic': 4, 'SumCyclomatic': 4, 'AltAvgLineCode': 19, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 1, 'AltCountLineCode': 22, 'CountLineCodeExe': 3, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.27', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 4, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118519,C++,"    class Dialog : public ActivateDialog
    {
    public:
        explicit Dialog(DialogType type, Settings& settings, Core* core)
            : ActivateDialog(nullptr, Qt::Window)
            , type(type)
            , settings(settings)
            , core{core}
        {
            restoreGeometry(settings.getDialogSettingsGeometry());
            Translator::registerHandler(std::bind(&Dialog::retranslateUi, this), this);
            retranslateUi();
            setWindowIcon(QIcon("":/img/icons/qtox.svg""));
            reloadTheme();

            connect(core, &Core::usernameSet, this, &Dialog::retranslateUi);
        }

        ~Dialog()
        {
            Translator::unregister(this);
        }

    public slots:

        void retranslateUi()
        {
            setWindowTitle(core->getUsername() + QStringLiteral("" - "") + Widget::fromDialogType(type));
        }

        void reloadTheme() final
        {
            setStyleSheet(Style::getStylesheet(""window/general.css""));
        }

    protected:
        void resizeEvent(QResizeEvent* event) override
        {
            settings.setDialogSettingsGeometry(saveGeometry());
            QDialog::resizeEvent(event);
        }

        void moveEvent(QMoveEvent* event) override
        {
            settings.setDialogSettingsGeometry(saveGeometry());
            QDialog::moveEvent(event);
        }

    private:
        DialogType type;
        Settings& settings;
        Core* core;
    };",0,587 2000 58 777 2001 123 777 58 648 2000 40 2002 2003 44 2004 38 2005 44 2006 42 2007 41 58 2001 40 753 44 2008 321 2009 41 44 2003 40 2003 41 44 2005 40 2005 41 44 2007 123 2007 125 123 2010 40 2005 46 2011 40 41 41 59 2012 321 2013 40 2014 321 2015 40 38 2000 321 2016 44 823 41 44 823 41 59 2016 40 41 59 2017 40 2018 40 362 41 41 59 2019 40 41 59 2020 40 2007 44 38 2006 321 2021 44 823 44 38 2000 321 2016 41 59 125 126 2000 40 41 123 2022 321 2023 40 823 41 59 125 777 2024 58 865 2025 40 41 123 2026 40 2007 354 2027 40 41 43 2028 40 362 41 43 2029 321 2030 40 2003 41 41 59 125 865 2031 40 41 2032 123 2033 40 2034 321 2035 40 362 41 41 59 125 775 58 865 2036 40 2037 42 2038 41 2039 123 2005 46 2040 40 2041 40 41 41 59 2042 321 2036 40 2038 41 59 125 865 2043 40 2044 42 2038 41 2039 123 2005 46 2045 40 2046 40 41 41 59 2047 321 2043 40 2038 41 59 125 773 58 2002 2003 59 2004 38 2005 59 2006 42 2007 59 125 59 ,"{'AvgLine': 9, 'CountLine': 53, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 45, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118540,C++,"    class Model : public QAbstractTableModel
    {
        Q_OBJECT
    public:
        Model(QObject* parent = nullptr);
        ~Model() = default;

        void onFileUpdated(const ToxFile& file);

        QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const override;
        int rowCount(const QModelIndex& parent = QModelIndex()) const override;
        int columnCount(const QModelIndex& parent = QModelIndex()) const override;
        QVariant data(const QModelIndex& index, int role = Qt::DisplayRole) const override;
        bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole) override;

    signals:
        void togglePause(ToxFile file);
        void cancel(ToxFile file);

    private:
        QHash<QByteArray /*file id*/, int /*row index*/> idToRow;
        std::vector<ToxFile> files;
    };",0,587 2000 58 777 2001 123 2002 777 58 2000 40 2003 42 2004 61 753 41 59 126 2000 40 41 61 613 59 865 2005 40 601 2006 38 2007 41 59 2008 2009 40 704 2010 44 2011 321 2012 2013 44 704 2014 61 2011 321 2015 41 601 2016 59 704 2017 40 601 2018 38 2004 61 2018 40 41 41 601 2016 59 704 2019 40 601 2018 38 2004 61 2018 40 41 41 601 2016 59 2008 2020 40 601 2018 38 2021 44 704 2014 61 2011 321 2015 41 601 2016 59 569 2022 40 601 2018 38 2021 44 601 2008 38 2023 44 704 2014 61 2011 321 2024 41 2016 59 2025 58 865 2026 40 2006 2007 41 59 865 2027 40 2006 2007 41 59 773 58 2028 60 2029 305 44 704 305 62 2030 59 2031 321 2032 60 2006 62 2033 59 125 59 ,"{'AvgLine': 21, 'CountLine': 171, 'CountStmt': 51, 'MaxNesting': 2, 'AvgLineCode': 17, 'AvgEssential': 2, 'AvgLineBlank': 3, 'CountStmtExe': 25, 'MaxEssential': 4, 'SumEssential': 16, 'AvgCyclomatic': 2, 'CountLineCode': 143, 'CountStmtDecl': 27, 'MaxCyclomatic': 5, 'SumCyclomatic': 18, 'AltAvgLineCode': 17, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 26, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 9, 'AltCountLineCode': 143, 'CountLineCodeExe': 19, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 26, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118429,C++,"class GeneralForm : public GenericForm
{
    Q_OBJECT
public:
    explicit GeneralForm(SettingsWidget* parent);
    ~GeneralForm();
    QString getFormName() final
    {
        return tr(""General"");
    }
signals:
    void updateIcons();

private slots:
    void on_transComboBox_currentIndexChanged(int index);
    void on_cbAutorun_stateChanged();
    void on_cbSpellChecking_stateChanged();
    void on_showSystemTray_stateChanged();
    void on_startInTray_stateChanged();
    void on_closeToTray_stateChanged();
    void on_lightTrayIcon_stateChanged();
    void on_autoAwaySpinBox_editingFinished();
    void on_minimizeToTray_stateChanged();
    void on_statusChanges_stateChanged();
    void on_autoacceptFiles_stateChanged();
    void on_maxAutoAcceptSizeMB_editingFinished();
    void on_autoSaveFilesDir_clicked();
    void on_checkUpdates_stateChanged();

private:
    void retranslateUi();

private:
    Ui::GeneralSettings* bodyUI;
    SettingsWidget* parent;
};",0,587 2000 58 777 2001 123 2002 777 58 648 2000 40 2003 42 2004 41 59 126 2000 40 41 59 2005 2006 40 41 2007 123 792 2008 40 362 41 59 125 2009 58 865 2010 40 41 59 773 2011 58 865 2012 40 704 2013 41 59 865 2014 40 41 59 865 2015 40 41 59 865 2016 40 41 59 865 2017 40 41 59 865 2018 40 41 59 865 2019 40 41 59 865 2020 40 41 59 865 2021 40 41 59 865 2022 40 41 59 865 2023 40 41 59 865 2024 40 41 59 865 2025 40 41 59 865 2026 40 41 59 773 58 865 2027 40 41 59 773 58 2028 321 2029 42 2030 59 2003 42 2004 59 125 59 ,"{'AvgLine': 8, 'CountLine': 190, 'CountStmt': 42, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 18, 'AvgCyclomatic': 1, 'CountLineCode': 160, 'CountStmtDecl': 32, 'MaxCyclomatic': 1, 'SumCyclomatic': 18, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 23, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 18, 'AltCountLineCode': 166, 'CountLineCodeExe': 13, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 23, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 29, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 6, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 16, 'CountDeclInstanceMethod': 21, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118432,C++,"class Translator
{
public:
    static void translate(const QString& localeName);
    static void registerHandler(const std::function<void()>&, void* owner);
    static void unregister(void* owner);

private:
    using Callback = QPair<void*, std::function<void()>>;
    static QVector<Callback> callbacks;
    static QMutex lock;
    static QTranslator* core_translator;
    static QTranslator* app_translator;
};",0,587 2000 123 777 58 809 865 2001 40 601 2002 38 2003 41 59 809 865 2004 40 601 2005 321 2006 60 865 40 41 62 38 44 865 42 2007 41 59 809 865 2008 40 865 42 2007 41 59 773 58 860 2009 61 2010 60 865 42 44 2005 321 2006 60 865 40 41 355 59 809 2011 60 2009 62 2012 59 809 2013 2014 59 809 2015 42 2016 59 809 2015 42 2017 59 125 59 ,"{'AvgLine': 20, 'CountLine': 76, 'CountStmt': 22, 'MaxNesting': 3, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 59, 'CountStmtDecl': 19, 'MaxCyclomatic': 4, 'SumCyclomatic': 6, 'AltAvgLineCode': 15, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 4, 'AltCountLineCode': 59, 'CountLineCodeExe': 2, 'CountLineComment': 6, 'AltAvgLineComment': 2, 'AltCountLineBlank': 11, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 4, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118430,C++,"class GenericForm : public QWidget
{
    Q_OBJECT
public:
    explicit GenericForm(const QPixmap& icon);
    virtual ~GenericForm()
    {
    }

    virtual QString getFormName() = 0;
    QPixmap getFormIcon();

public slots:
    virtual void reloadTheme() {}

protected:
    bool eventFilter(QObject* o, QEvent* e) final;
    void eventsInit();

protected:
    QPixmap formIcon;
};",0,587 2000 58 777 2001 123 2002 777 58 648 2000 40 601 2003 38 2004 41 59 864 126 2000 40 41 123 125 864 2005 2006 40 41 61 1500 59 2003 2007 40 41 59 777 2008 58 864 865 2009 40 41 123 125 775 58 569 2010 40 2011 42 2012 44 2013 42 2014 41 2015 59 865 2016 40 41 59 775 58 2003 2017 59 125 59 ,"{'AvgLine': 7, 'CountLine': 57, 'CountStmt': 11, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 50, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 50, 'CountLineCodeExe': 1, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 0, 'CountClassDerived': 6, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118444,C++,"    class LineEdit : public QLineEdit
    {
    public:
        explicit LineEdit(QWidget* parent = nullptr)
            : QLineEdit(parent)
        {}

    protected:
        void keyPressEvent(QKeyEvent* event) override
        {
            if (event->key() == Qt::Key_Escape) {
                undo();
                clearFocus();
            }

            QLineEdit::keyPressEvent(event);
        }
    };",0,587 2000 58 777 2001 123 777 58 648 2000 40 2002 42 2003 61 753 41 58 2001 40 2003 41 123 125 775 58 865 2004 40 2005 42 2006 41 2007 123 688 40 2006 354 2008 40 41 323 2009 321 2010 41 123 2011 40 41 59 2012 40 41 59 125 2001 321 2004 40 2006 41 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 37, 'CountStmt': 14, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 33, 'CountStmtDecl': 8, 'MaxCyclomatic': 4, 'SumCyclomatic': 8, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 33, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118449,C++,"class LoadHistoryDialog : public QDialog
{
    Q_OBJECT

public:
    explicit LoadHistoryDialog(const IChatLog* chatLog, QWidget* parent = nullptr);
    explicit LoadHistoryDialog(QWidget* parent = nullptr);
    ~LoadHistoryDialog();

    QDateTime getFromDate();
    void setTitle(const QString& title);
    void setInfoLabel(const QString& info);

public slots:
    void highlightDates(int year, int month);

private:
    Ui::LoadHistoryDialog* ui;
    const IChatLog* chatLog;
};",0,587 2000 58 777 2001 123 2002 777 58 648 2000 40 601 2003 42 2004 44 2005 42 2006 61 753 41 59 648 2000 40 2005 42 2006 61 753 41 59 126 2000 40 41 59 2007 2008 40 41 59 865 2009 40 601 2010 38 2011 41 59 865 2012 40 601 2010 38 2013 41 59 777 2014 58 865 2015 40 704 2016 44 704 2017 41 59 773 58 2018 321 2000 42 2019 59 601 2003 42 2004 59 125 59 ,"{'AvgLine': 8, 'CountLine': 81, 'CountStmt': 20, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 68, 'CountStmtDecl': 17, 'MaxCyclomatic': 2, 'SumCyclomatic': 8, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 72, 'CountLineCodeExe': 3, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 1, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118457,C++,"class GenericChatItemWidget : public QFrame
{
    Q_OBJECT
public:
    enum ItemType
    {
        GroupItem,
        FriendOfflineItem,
        FriendOnlineItem
    };

    explicit GenericChatItemWidget(bool compact, QWidget* parent = nullptr);

    bool isCompact() const;
    void setCompact(bool compact);

    QString getName() const;

    void searchName(const QString& searchString, bool hideAll);

    Q_PROPERTY(bool compact READ isCompact WRITE setCompact)

public slots:
    virtual void reloadTheme() {}

protected:
    CroppingLabel* nameLabel;
    QLabel statusPic;

private:
    bool compact;
};",0,587 2000 58 777 2001 123 2002 777 58 640 2003 123 2004 44 2005 44 2006 125 59 648 2000 40 569 2007 44 2008 42 2009 61 753 41 59 569 2010 40 41 601 59 865 2011 40 569 2007 41 59 2012 2013 40 41 601 59 865 2014 40 601 2012 38 2015 44 569 2016 41 59 2017 40 569 2007 2018 2010 2019 2011 41 777 2020 58 864 865 2021 40 41 123 125 775 58 2022 42 2023 59 2024 2025 59 773 58 569 2007 59 125 59 ,"{'AvgLine': 5, 'CountLine': 60, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 50, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 50, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 2, 'CountClassDerived': 2, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 78, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118458,C++,"class Style
{
public:
    enum ColorPalette
    {
        TransferGood,
        TransferWait,
        TransferBad,
        TransferMiddle,
        MainText,
        NameActive,
        StatusActive,
        GroundExtra,
        GroundBase,
        Orange,
        Yellow,
        ThemeDark,
        ThemeMediumDark,
        ThemeMedium,
        ThemeLight,
        Action,
        Link,
        SearchHighlighted,
        SelectText
    };

    enum Font
    {
        ExtraBig,
        Big,
        BigBold,
        Medium,
        MediumBold,
        Small,
        SmallLight
    };

    enum MainTheme
    {
        Light,
        Dark
    };

    struct ThemeNameColor {
        MainTheme type;
        QString name;
        QColor color;
    };

    static QStringList getThemeColorNames();
    static const QString getStylesheet(const QString& filename, const QFont& baseFont = QFont());
    static const QString getImagePath(const QString& filename);
    static QString getThemeFolder();
    static QString getThemeName();
    static QColor getColor(ColorPalette entry);
    static QFont getFont(Font font);
    static const QString resolve(const QString& filename, const QFont& baseFont = QFont());
    static void repolish(QWidget* w);
    static void setThemeColor(int color);
    static void setThemeColor(const QColor& color);
    static void applyTheme();
    static QPixmap scaleSvgImage(const QString& path, uint32_t width, uint32_t height);
    static void initPalette();
    static void initDictColor();
    static QString getThemePath();

signals:
    void themeChanged();

private:
    Style();
};",0,587 2000 123 777 58 640 2001 123 2002 44 2003 44 2004 44 2005 44 2006 44 2007 44 2008 44 2009 44 2010 44 2011 44 2012 44 2013 44 2014 44 2015 44 2016 44 2017 44 2018 44 2019 44 2020 125 59 640 2021 123 2022 44 2023 44 2024 44 2025 44 2026 44 2027 44 2028 125 59 640 2029 123 2030 44 2031 125 59 816 2032 123 2029 2033 59 2034 2035 59 2036 2037 59 125 59 809 2038 2039 40 41 59 809 601 2040 2041 40 601 2040 38 2042 44 601 2043 38 2044 61 2043 40 41 41 59 809 601 2040 2045 40 601 2040 38 2042 41 59 809 2040 2046 40 41 59 809 2040 2047 40 41 59 809 2048 2049 40 2001 2050 41 59 809 2043 2051 40 2021 2052 41 59 809 601 2040 2053 40 601 2040 38 2042 44 601 2043 38 2044 61 2043 40 41 41 59 809 865 2054 40 2055 42 2056 41 59 809 865 2057 40 704 2058 41 59 809 865 2057 40 601 2048 38 2058 41 59 809 865 2059 40 41 59 809 2060 2061 40 601 2040 38 2062 44 2063 2064 44 2063 2065 41 59 809 865 2066 40 41 59 809 865 2067 40 41 59 809 2040 2068 40 41 59 2069 58 865 2070 40 41 59 773 58 2000 40 41 59 125 59 ,"{'AvgLine': 17, 'CountLine': 315, 'CountStmt': 82, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 16, 'AvgCyclomatic': 1, 'CountLineCode': 266, 'CountStmtDecl': 60, 'MaxCyclomatic': 6, 'SumCyclomatic': 29, 'AltAvgLineCode': 14, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 38, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 2, 'CountDeclMethod': 18, 'AltCountLineCode': 266, 'CountLineCodeExe': 16, 'CountLineComment': 19, 'AltAvgLineComment': 1, 'AltCountLineBlank': 38, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 50, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 19, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 29, 'CountDeclClassMethod': 10, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 17, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 29, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118560,C++,"class TestSmileyPack : public QObject
{
    Q_OBJECT
public:
    TestSmileyPack();

private slots:
    void testSmilifySingleCharEmoji();
    void testSmilifyMultiCharEmoji();
    void testSmilifyAsciiEmoticon();
private:
    std::unique_ptr<QGuiApplication> app;
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 41 59 773 2003 58 865 2004 40 41 59 865 2005 40 41 59 865 2006 40 41 59 773 58 2007 321 2008 60 2009 62 2010 59 125 59 ,"{'AvgLine': 13, 'CountLine': 65, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 50, 'CountStmtDecl': 16, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 9, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 50, 'CountLineCodeExe': 6, 'CountLineComment': 4, 'AltAvgLineComment': 1, 'AltCountLineBlank': 11, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118528,C++,"class MockCoreExtPacket : public ICoreExtPacket
{
public:

    MockCoreExtPacket(uint64_t& numSentMessages, uint64_t& currentReceiptId)
        : numSentMessages(numSentMessages)
        , currentReceiptId(currentReceiptId)
    {}

    uint64_t addExtendedMessage(QString message) override;

    bool send() override;

    uint64_t& numSentMessages;
    uint64_t& currentReceiptId;
    QDateTime senderTimestamp;
    QString message;
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 44 2002 38 2004 41 58 2003 40 2003 41 44 2004 40 2004 41 123 125 2002 2005 40 2006 2007 41 2008 59 569 2009 40 41 2008 59 2002 38 2003 59 2002 38 2004 59 2010 2011 59 2006 2007 59 125 59 ,"{'AvgLine': 4, 'CountLine': 28, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 24, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117653,C++,"	class CompatSensorCombinedDtType : public CompatBase
	{
	public:
		CompatSensorCombinedDtType(int gyro_integral_dt_offset_log, int gyro_integral_dt_offset_intern,
					   int accelerometer_integral_dt_offset_log, int accelerometer_integral_dt_offset_intern);

		void *apply(void *data) override;
	private:
		int _gyro_integral_dt_offset_log;
		int _gyro_integral_dt_offset_intern;
		int _accelerometer_integral_dt_offset_log;
		int _accelerometer_integral_dt_offset_intern;
	};",0,587 2000 58 777 2001 123 777 58 2000 40 704 2002 44 704 2003 44 704 2004 44 704 2005 41 59 865 42 2006 40 865 42 2007 41 2008 59 773 58 704 2009 59 704 2010 59 704 2011 59 704 2012 59 125 59 ,"{'AvgLine': 14, 'CountLine': 42, 'CountStmt': 20, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 2, 'AltCountLineCode': 35, 'CountLineCodeExe': 12, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
118502,C++,"class ProfileInfo : public QObject, public IProfileInfo
{
    Q_OBJECT
public:
    ProfileInfo(Core* core, Profile* profile);

    bool setPassword(const QString& password) override;
    bool deletePassword() override;
    bool isEncrypted() const override;

    void copyId() const override;

    void setUsername(const QString& name) override;
    void setStatusMessage(const QString& status) override;

    QString getProfileName() const override;
    RenameResult renameProfile(const QString& name) override;
    SaveResult exportProfile(const QString& path) const override;
    QStringList removeProfile() override;
    void logout() override;

    void copyQr(const QImage& image) const override;
    SaveResult saveQr(const QImage& image, const QString& path) const override;

    SetAvatarResult setAvatar(const QString& path) override;
    void removeAvatar() override;

    SIGNAL_IMPL(ProfileInfo, idChanged, const ToxId& id)
    SIGNAL_IMPL(ProfileInfo, usernameChanged, const QString& name)
    SIGNAL_IMPL(ProfileInfo, statusMessageChanged, const QString& message)

private:
    IProfileInfo::SetAvatarResult createAvatarFromFile(QFile& file, QByteArray& avatar);
    IProfileInfo::SetAvatarResult byteArrayToPng(QByteArray inData, QByteArray& outPng);
    IProfileInfo::SetAvatarResult scalePngToAvatar(QByteArray& avatar);
    Profile* const profile;
    Core* const core;
};",0,587 2000 58 777 2001 44 777 2002 123 2003 777 58 2000 40 2004 42 2005 44 2006 42 2007 41 59 569 2008 40 601 2009 38 2010 41 2011 59 569 2012 40 41 2011 59 569 2013 40 41 601 2011 59 865 2014 40 41 601 2011 59 865 2015 40 601 2009 38 2016 41 2011 59 865 2017 40 601 2009 38 2018 41 2011 59 2009 2019 40 41 601 2011 59 2020 2021 40 601 2009 38 2016 41 2011 59 2022 2023 40 601 2009 38 2024 41 601 2011 59 2025 2026 40 41 2011 59 865 2027 40 41 2011 59 865 2028 40 601 2029 38 2030 41 601 2011 59 2022 2031 40 601 2029 38 2030 44 601 2009 38 2024 41 601 2011 59 2032 2033 40 601 2009 38 2024 41 2011 59 865 2034 40 41 2011 59 2035 40 2000 44 2036 44 601 2037 38 2038 41 2035 40 2000 44 2039 44 601 2009 38 2016 41 2035 40 2000 44 2040 44 601 2009 38 2041 41 773 58 2002 321 2032 2042 40 2043 38 2044 44 2045 38 2046 41 59 2002 321 2032 2047 40 2045 2048 44 2045 38 2049 41 59 2002 321 2032 2050 40 2045 38 2046 41 59 2006 42 601 2007 59 2004 42 601 2005 59 125 59 ,"{'AvgLine': 9, 'CountLine': 227, 'CountStmt': 97, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 42, 'MaxEssential': 4, 'SumEssential': 33, 'AvgCyclomatic': 1, 'CountLineCode': 196, 'CountStmtDecl': 56, 'MaxCyclomatic': 4, 'SumCyclomatic': 41, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 23, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 25, 'AltCountLineCode': 196, 'CountLineCodeExe': 29, 'CountLineComment': 8, 'AltAvgLineComment': 0, 'AltCountLineBlank': 23, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 40, 'CountLineInactive': 0, 'CountDeclMethodAll': 49, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 41, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 9, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 14, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 89, 'SumCyclomaticModified': 41, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 11, 'CountDeclInstanceMethod': 28, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118570,C++,"class FlowLayout : public QLayout
{
public:
    explicit FlowLayout(QWidget* parent, int margin = -1, int hSpacing = -1, int vSpacing = -1);
    explicit FlowLayout(int margin = -1, int hSpacing = -1, int vSpacing = -1);
    ~FlowLayout();

    void addItem(QLayoutItem* item);
    int horizontalSpacing() const;
    int verticalSpacing() const;
    Qt::Orientations expandingDirections() const;
    bool hasHeightForWidth() const;
    int heightForWidth(int) const;
    int count() const;
    QLayoutItem* itemAt(int index) const;
    QSize minimumSize() const;
    void setGeometry(const QRect& rect);
    QSize sizeHint() const;
    QLayoutItem* takeAt(int index);

private:
    int doLayout(const QRect& rect, bool testOnly) const;
    int smartSpacing(QStyle::PixelMetric pm) const;

    QList<QLayoutItem*> itemList;
    int m_hSpace;
    int m_vSpace;
};",0,587 2000 58 777 2001 123 777 58 648 2000 40 2002 42 2003 44 704 2004 61 45 1501 44 704 2005 61 45 1501 44 704 2006 61 45 1501 41 59 648 2000 40 704 2004 61 45 1501 44 704 2005 61 45 1501 44 704 2006 61 45 1501 41 59 126 2000 40 41 59 865 2007 40 2008 42 2009 41 59 704 2010 40 41 601 59 704 2011 40 41 601 59 2012 321 2013 2014 40 41 601 59 569 2015 40 41 601 59 704 2016 40 704 41 601 59 704 2017 40 41 601 59 2008 42 2018 40 704 2019 41 601 59 2020 2021 40 41 601 59 865 2022 40 601 2023 38 2024 41 59 2020 2025 40 41 601 59 2008 42 2026 40 704 2019 41 59 773 58 704 2027 40 601 2023 38 2024 44 569 2028 41 601 59 704 2029 40 2030 321 2031 2032 41 601 59 2033 60 2008 42 62 2034 59 704 2035 59 704 2036 59 125 59 ,"{'AvgLine': 7, 'CountLine': 161, 'CountStmt': 57, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 152, 'CountStmtDecl': 39, 'MaxCyclomatic': 3, 'SumCyclomatic': 22, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 0, 'CountDeclMethod': 17, 'AltCountLineCode': 152, 'CountLineCodeExe': 22, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 24, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 11, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 17, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 88, 'SumCyclomaticModified': 22, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 18, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118495,C++,"class GenericChatItemLayout
{
public:
    GenericChatItemLayout();
    GenericChatItemLayout(const GenericChatItemLayout& layout) = delete;
    ~GenericChatItemLayout();

#if (QT_VERSION >= QT_VERSION_CHECK(5, 15, 0))
    void addSortedWidget(GenericChatItemWidget* widget, int stretch = 0, Qt::Alignment alignment = Qt::Alignment());
#else
    void addSortedWidget(GenericChatItemWidget* widget, int stretch = 0, Qt::Alignment alignment = nullptr);
#endif
    int indexOfSortedWidget(GenericChatItemWidget* widget) const;
    bool existsSortedWidget(GenericChatItemWidget* widget) const;
    void removeSortedWidget(GenericChatItemWidget* widget);
    void search(const QString& searchString, bool hideAll = false);

    QLayout* getLayout() const;

private:
    int indexOfClosestSortedWidget(GenericChatItemWidget* widget) const;
    QVBoxLayout* layout;
};",0,587 2000 123 777 58 2000 40 41 59 2000 40 601 2000 38 2001 41 61 619 59 126 2000 40 41 59 35 688 40 2002 325 2003 40 1502 44 1503 44 1500 41 41 865 2004 40 2005 42 2006 44 704 2007 61 1500 44 2008 321 2009 2010 61 2008 321 2009 40 41 41 59 35 630 865 2004 40 2005 42 2006 44 704 2007 61 1500 44 2008 321 2009 2010 61 753 41 59 35 636 704 2011 40 2005 42 2006 41 601 59 569 2012 40 2005 42 2006 41 601 59 865 2013 40 2005 42 2006 41 59 865 2014 40 601 2015 38 2016 44 569 2017 61 655 41 59 2018 42 2019 40 41 601 59 773 58 704 2020 40 2005 42 2006 41 601 59 2021 42 2001 59 125 59 ,"{'AvgLine': 10, 'CountLine': 120, 'CountStmt': 49, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 28, 'MaxEssential': 4, 'SumEssential': 14, 'AvgCyclomatic': 2, 'CountLineCode': 97, 'CountStmtDecl': 24, 'MaxCyclomatic': 6, 'SumCyclomatic': 21, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 18, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 11, 'AltCountLineCode': 101, 'CountLineCodeExe': 25, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 18, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 24, 'CountLineInactive': 1, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117660,C++,"class GY_US42 : public device::I2C, public I2CSPIDriver<GY_US42>
{
public:
	GY_US42(const I2CSPIDriverConfig &config);
	~GY_US42() override;

	static void print_usage();

	int init() override;
	void print_status() override;

	void RunImpl();

private:

	enum class STATE : uint8_t {
		INIT,
		POWERON_WAIT,
		MEASURE_WAIT,
		MODIFYADDR_WAIT
	};
	STATE _state{STATE::INIT};

	int collect();
	int measure();

	/**
	 * Test whether the device supported by the driver is present at a
	 * specific address.
	 * @param address The I2C bus address to probe.
	 * @return True if the device is present.
	 */

	PX4Rangefinder _px4_rangefinder;

	perf_counter_t _comms_errors{perf_alloc(PC_COUNT, MODULE_NAME"": com_err"")};
	perf_counter_t _sample_perf{perf_alloc(PC_ELAPSED,  MODULE_NAME"": read"")};
};",0,587 2000 58 777 2001 321 2002 44 777 2003 60 2000 62 123 777 58 2000 40 601 2004 38 2005 41 59 126 2000 40 41 2006 59 809 865 2007 40 41 59 704 2008 40 41 2006 59 865 2009 40 41 2006 59 865 2010 40 41 59 773 58 640 587 2011 58 2012 123 2013 44 2014 44 2015 44 2016 125 59 2011 2017 123 2011 321 2018 125 59 704 2019 40 41 59 704 2020 40 41 59 306 2021 2022 59 2023 2024 123 2025 40 2026 44 2027 362 41 125 59 2023 2028 123 2029 40 2030 44 2031 362 41 125 59 125 59 ,"{'AvgLine': 12, 'CountLine': 134, 'CountStmt': 56, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 33, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 102, 'CountStmtDecl': 20, 'MaxCyclomatic': 5, 'SumCyclomatic': 15, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 21, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 102, 'CountLineCodeExe': 31, 'CountLineComment': 11, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 94, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117656,C++,"class FlightTaskAutoFollowMe : public FlightTaskAuto
{
public:
	FlightTaskAutoFollowMe() = default;
	virtual ~FlightTaskAutoFollowMe() = default;
	bool update() override;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 61 613 59 569 2002 40 41 2003 59 125 59 ,"{'AvgLine': 7, 'CountLine': 13, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 13, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 71, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117658,C++,"class LED : cdev::CDev
{
public:
	LED();
	~LED() override = default;

	int	init() override;
	int	ioctl(cdev::file_t *filp, int cmd, unsigned long arg) override;
};",0,587 2000 58 2001 321 2002 123 777 58 2000 40 41 59 126 2000 40 41 2003 61 613 59 704 2004 40 41 2003 59 704 2005 40 2001 321 2006 42 2007 44 704 2008 44 856 726 2009 41 2003 59 125 59 ,"{'AvgLine': 13, 'CountLine': 49, 'CountStmt': 21, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 16, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 39, 'CountStmtDecl': 4, 'MaxCyclomatic': 4, 'SumCyclomatic': 6, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 39, 'CountLineCodeExe': 16, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118558,C++,"class ICoreGroupQuery
{
public:
    ICoreGroupQuery() = default;
    virtual ~ICoreGroupQuery();
    ICoreGroupQuery(const ICoreGroupQuery&) = default;
    ICoreGroupQuery& operator=(const ICoreGroupQuery&) = default;
    ICoreGroupQuery(ICoreGroupQuery&&) = default;
    ICoreGroupQuery& operator=(ICoreGroupQuery&&) = default;

    virtual GroupId getGroupPersistentId(uint32_t groupNumber) const = 0;
    virtual uint32_t getGroupNumberPeers(int groupId) const = 0;
    virtual QString getGroupPeerName(int groupId, int peerId) const = 0;
    virtual ToxPk getGroupPeerPk(int groupId, int peerId) const = 0;
    virtual QStringList getGroupPeerNames(int groupId) const = 0;
    virtual bool getGroupAvEnabled(int groupId) const = 0;
};",0,587 2000 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 59 2000 40 601 2000 38 41 61 613 59 2000 38 758 61 40 601 2000 38 41 61 613 59 2000 40 2000 307 41 61 613 59 2000 38 758 61 40 2000 307 41 61 613 59 864 2001 2002 40 2003 2004 41 601 61 1500 59 864 2003 2005 40 704 2006 41 601 61 1500 59 864 2007 2008 40 704 2006 44 704 2009 41 601 61 1500 59 864 2010 2011 40 704 2006 44 704 2009 41 601 61 1500 59 864 2012 2013 40 704 2006 41 601 61 1500 59 864 569 2014 40 704 2006 41 601 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 17, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 16, 'CountStmtDecl': 7, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 12, 'AltCountLineCode': 16, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 2, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118440,C++,"class GroupId : public ContactId
{
public:
    GroupId();
    GroupId(const GroupId& other);
    explicit GroupId(const QByteArray& rawId);
    explicit GroupId(const uint8_t* rawId);
    int getSize() const override;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 2000 40 601 2000 38 2002 41 59 648 2000 40 601 2003 38 2004 41 59 648 2000 40 601 2005 42 2004 41 59 704 2006 40 41 601 2007 59 125 59 ,"{'AvgLine': 4, 'CountLine': 31, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 31, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118480,C++,"class GroupInvite
{
public:
    GroupInvite() = default;
    GroupInvite(uint32_t friendId, uint8_t inviteType, const QByteArray& data);
    bool operator==(const GroupInvite& other) const;

    uint32_t getFriendId() const;
    uint8_t getType() const;
    QByteArray getInvite() const;
    QDateTime getInviteDate() const;

private:
    uint32_t friendId{0};
    uint8_t type{0};
    QByteArray invite;
    QDateTime date;
};",0,587 2000 123 777 58 2000 40 41 61 613 59 2000 40 2001 2002 44 2003 2004 44 601 2005 38 2006 41 59 569 758 323 40 601 2000 38 2007 41 601 59 2001 2008 40 41 601 59 2003 2009 40 41 601 59 2005 2010 40 41 601 59 2011 2012 40 41 601 59 773 58 2001 2002 123 1500 125 59 2003 2013 123 1500 125 59 2005 2014 59 2011 2015 59 125 59 ,"{'AvgLine': 4, 'CountLine': 46, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 44, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118441,C++,"class MockGroupQuery : public ICoreGroupQuery
{
public:
    MockGroupQuery() = default;
    virtual ~MockGroupQuery();
    MockGroupQuery(const MockGroupQuery&) = default;
    MockGroupQuery& operator=(const MockGroupQuery&) = default;
    MockGroupQuery(MockGroupQuery&&) = default;
    MockGroupQuery& operator=(MockGroupQuery&&) = default;

    GroupId getGroupPersistentId(uint32_t groupNumber) const override
    {
        return GroupId(0);
    }

    uint32_t getGroupNumberPeers(int groupId) const override
    {
        if (emptyGroup) {
            return 1;
        }

        return 2;
    }

    QString getGroupPeerName(int groupId, int peerId) const override
    {
        return QString(""peer"") + peerId;
    }

    ToxPk getGroupPeerPk(int groupId, int peerId) const override
    {
        uint8_t id[TOX_PUBLIC_KEY_SIZE] = {static_cast<uint8_t>(peerId)};
        return ToxPk(id);
    }

    QStringList getGroupPeerNames(int groupId) const override
    {
        if (emptyGroup) {
            return QStringList({QString(""me"")});
        }
        return QStringList({QString(""me""), QString(""other"")});
    }

    bool getGroupAvEnabled(int groupId) const override
    {
        return false;
    }

    void setAsEmptyGroup()
    {
        emptyGroup = true;
    }

    void setAsFunctionalGroup()
    {
        emptyGroup = false;
    }

private:
    bool emptyGroup = false;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 59 2000 40 601 2000 38 41 61 613 59 2000 38 758 61 40 601 2000 38 41 61 613 59 2000 40 2000 307 41 61 613 59 2000 38 758 61 40 2000 307 41 61 613 59 2002 2003 40 2004 2005 41 601 2006 123 792 2002 40 1500 41 59 125 2004 2007 40 704 2008 41 601 2006 123 688 40 2009 41 123 792 1501 59 125 792 1502 59 125 2010 2011 40 704 2008 44 704 2012 41 601 2006 123 792 2010 40 362 41 43 2012 59 125 2013 2014 40 704 2008 44 704 2012 41 601 2006 123 2015 2016 91 2017 93 61 123 811 60 2015 62 40 2012 41 125 59 792 2013 40 2016 41 59 125 2018 2019 40 704 2008 41 601 2006 123 688 40 2020 41 123 792 2018 40 123 2010 40 362 41 125 41 59 125 792 2018 40 123 2010 40 362 41 44 2010 40 362 41 125 41 59 125 569 2021 40 704 2008 41 601 2006 123 792 655 59 125 865 2022 40 41 123 2023 61 829 59 125 865 2024 40 41 123 2025 61 655 59 125 773 58 569 2026 61 655 59 125 59 ,"{'AvgLine': 5, 'CountLine': 61, 'CountStmt': 22, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 51, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 14, 'AltCountLineCode': 51, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 26, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 14, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118465,C++,"class IGroupSettings
{
public:
    IGroupSettings() = default;
    virtual ~IGroupSettings();
    IGroupSettings(const IGroupSettings&) = default;
    IGroupSettings& operator=(const IGroupSettings&) = default;
    IGroupSettings(IGroupSettings&&) = default;
    IGroupSettings& operator=(IGroupSettings&&) = default;

    virtual QStringList getBlackList() const = 0;
    virtual void setBlackList(const QStringList& blist) = 0;
};",0,587 2000 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 59 2000 40 601 2000 38 41 61 613 59 2000 38 758 61 40 601 2000 38 41 61 613 59 2000 40 2000 307 41 61 613 59 2000 38 758 61 40 2000 307 41 61 613 59 864 2001 2002 40 41 601 61 1500 59 864 865 2003 40 601 2001 38 2004 41 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 13, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 12, 'CountStmtDecl': 3, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 12, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117940,C++,"class Vio: public Sensor
{
public:
	Vio(std::shared_ptr<Ekf> ekf);
	~Vio();

	void setData(const extVisionSample &vio_data);
	void setVelocityVariance(const Vector3f &velVar);
	void setVelocityCovariance(const Matrix3f &velCov);
	void setPositionVariance(const Vector3f &posVar);
	void setAngularVariance(float angVar);
	void setVelocity(const Vector3f &vel);
	void setPosition(const Vector3f &pos);
	void setOrientation(const Quatf &quat);
	void setVelocityFrameToLocal();
	void setVelocityFrameToBody();

	extVisionSample dataAtRest();

private:
	extVisionSample _vio_data;

	void send(uint64_t time) override;

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 321 2003 60 2004 62 2005 41 59 126 2000 40 41 59 865 2006 40 601 2007 38 2008 41 59 865 2009 40 601 2010 38 2011 41 59 865 2012 40 601 2013 38 2014 41 59 865 2015 40 601 2010 38 2016 41 59 865 2017 40 660 2018 41 59 865 2019 40 601 2010 38 2020 41 59 865 2021 40 601 2010 38 2022 41 59 865 2023 40 601 2024 38 2025 41 59 865 2026 40 41 59 865 2027 40 41 59 2007 2028 40 41 59 773 58 2007 2029 59 865 2030 40 2031 2032 41 2033 59 125 59 ,"{'AvgLine': 4, 'CountLine': 88, 'CountStmt': 39, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 14, 'AvgCyclomatic': 1, 'CountLineCode': 83, 'CountStmtDecl': 17, 'MaxCyclomatic': 1, 'SumCyclomatic': 14, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 0, 'CountDeclMethod': 14, 'AltCountLineCode': 83, 'CountLineCodeExe': 22, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 31, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 16, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117942,C++,"class MavlinkStreamStorageInformation : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamStorageInformation(mavlink); }

	static constexpr const char *get_name_static() { return ""STORAGE_INFORMATION""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_STORAGE_INFORMATION; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return MAVLINK_MSG_ID_STORAGE_INFORMATION_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
	}

	bool request_message(float param2, float param3, float param4,
			     float param5, float param6, float param7) override
	{
		_storage_id = (int)roundf(param2);
		return send();
	}
private:
	explicit MavlinkStreamStorageInformation(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	int _storage_id{0};

	bool send() override
	{
		mavlink_storage_information_t storage_info{};
		const char *microsd_dir = PX4_STORAGEDIR;

		if (_storage_id == 0 || _storage_id == 1) { // request is for all or the first storage
			storage_info.storage_id = 1;

			struct statfs statfs_buf;
			uint64_t total_bytes = 0;
			uint64_t avail_bytes = 0;

			if (statfs(microsd_dir, &statfs_buf) == 0) {
				total_bytes = (uint64_t)statfs_buf.f_blocks * statfs_buf.f_bsize;
				avail_bytes = (uint64_t)statfs_buf.f_bavail * statfs_buf.f_bsize;
			}

			if (total_bytes == 0) { // on NuttX we get 0 total bytes if no SD card is inserted
				storage_info.storage_count = 0;
				storage_info.status = 0; // not available

			} else {
				storage_info.storage_count = 1;
				storage_info.status = 2; // available & formatted
				storage_info.total_capacity = total_bytes / 1024. / 1024.;
				storage_info.available_capacity = avail_bytes / 1024. / 1024.;
				storage_info.used_capacity = (total_bytes - avail_bytes) / 1024. / 1024.;
			}

		} else {
			return false; // results in MAV_RESULT_DENIED
		}

		storage_info.time_boot_ms = hrt_absolute_time() / 1000;
		mavlink_msg_storage_information_send_struct(_mavlink->get_channel(), &storage_info);
		return true;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 43 2014 59 125 569 2015 40 660 2016 44 660 2017 44 660 2018 44 660 2019 44 660 2020 44 660 2021 41 2010 123 2022 61 40 704 41 2023 40 2016 41 59 792 2024 40 41 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 704 2025 123 1500 125 59 569 2026 40 41 2010 123 2027 2028 123 125 59 601 582 42 2029 61 2030 59 688 40 2025 323 1500 309 2025 323 1501 41 123 330 2028 46 2031 61 1501 59 816 2032 2033 59 2034 2035 61 1500 59 2034 2036 61 1500 59 688 40 2032 40 2029 44 38 2033 41 323 1500 41 123 2035 61 40 2034 41 2033 46 2037 42 2033 46 2038 59 2036 61 40 2034 41 2033 46 2039 42 2033 46 2038 59 125 688 40 2035 323 1500 41 123 330 2028 46 2040 61 1500 59 2028 46 2041 61 1500 59 330 125 630 123 2028 46 2042 61 1501 59 2028 46 2043 61 1502 59 330 2028 46 2044 61 2035 47 1505 47 1505 59 2028 46 2045 61 2036 47 1505 47 1505 59 2028 46 2046 61 40 2035 45 2036 41 47 1505 47 1505 59 125 125 630 123 792 655 59 330 125 2028 46 2047 61 2048 40 41 47 1504 59 2049 40 2050 354 2051 40 41 44 38 2028 41 59 792 829 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 65, 'CountStmt': 26, 'MaxNesting': 2, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 52, 'CountStmtDecl': 15, 'MaxCyclomatic': 4, 'SumCyclomatic': 12, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 52, 'CountLineCodeExe': 17, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 28, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118476,C++,"class SearchSettingsForm : public QWidget
{
    Q_OBJECT

public:
    explicit SearchSettingsForm(QWidget *parent = nullptr);
    ~SearchSettingsForm();

    ParameterSearch getParameterSearch();
    void reloadTheme();

private:
    Ui::SearchSettingsForm *ui;
    QDate startDate;
    bool isUpdate{false};

    void updateStartDateLabel();
    void setUpdate(const bool isUpdate);

private slots:
    void onStartSearchSelected(const int index);
    void onRegisterClicked(const bool checked);
    void onWordsOnlyClicked(const bool checked);
    void onRegularClicked(const bool checked);
    void onChoiceDate();

signals:
    void updateSettings(const bool isUpdate);
};",0,587 2000 58 777 2001 123 2002 777 58 648 2000 40 2001 42 2003 61 753 41 59 126 2000 40 41 59 2004 2005 40 41 59 865 2006 40 41 59 773 58 2007 321 2000 42 2008 59 2009 2010 59 569 2011 123 655 125 59 865 2012 40 41 59 865 2013 40 601 569 2011 41 59 773 2014 58 865 2015 40 601 704 2016 41 59 865 2017 40 601 569 2018 41 59 865 2019 40 601 569 2018 41 59 865 2020 40 601 569 2018 41 59 865 2021 40 41 59 2022 58 865 2023 40 601 569 2011 41 59 125 59 ,"{'AvgLine': 12, 'CountLine': 171, 'CountStmt': 49, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 33, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 145, 'CountStmtDecl': 17, 'MaxCyclomatic': 6, 'SumCyclomatic': 21, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 22, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 11, 'AltCountLineCode': 149, 'CountLineCodeExe': 34, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 22, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 1, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 9, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118400,C++,"class TabCompleter : public QObject
{
    Q_OBJECT
public:
    TabCompleter(ChatTextEdit* msgEdit, Group* group);

public slots:
    void complete();
    void reset();

private:
    struct SortableString
    {
        explicit SortableString(const QString& n)
            : contents{n}
        {
        }
        bool operator<(const SortableString& other) const;
        QString contents;
    };

    ChatTextEdit* msgEdit;
    Group* group;
    bool enabled;
    const static QString nickSuffix;

    QMap<SortableString, QString> completionMap;
    QMap<SortableString, QString>::Iterator nextCompletion;
    int lastCompletionLength;

    void buildCompletionList();
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 2003 42 2004 44 2005 42 2006 41 59 777 2007 58 865 2008 40 41 59 865 2009 40 41 59 773 58 816 2010 123 648 2010 40 601 2011 38 2012 41 58 2013 123 2012 125 123 125 569 758 60 40 601 2010 38 2014 41 601 59 2011 2013 59 125 59 2003 42 2004 59 2005 42 2006 59 569 2015 59 601 809 2016 2017 59 2018 60 2010 44 2016 62 2019 59 2018 60 2010 44 2016 62 321 2020 2021 59 704 2022 59 865 2023 40 41 59 125 59 ,"{'AvgLine': 19, 'CountLine': 108, 'CountStmt': 31, 'MaxNesting': 2, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 88, 'CountStmtDecl': 22, 'MaxCyclomatic': 6, 'SumCyclomatic': 9, 'AltAvgLineCode': 15, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 88, 'CountLineCodeExe': 13, 'CountLineComment': 10, 'AltAvgLineComment': 2, 'AltCountLineBlank': 12, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
118598,C++,"class EmoticonsWidget : public QMenu
{
    Q_OBJECT
public:
    explicit EmoticonsWidget(QWidget* parent = nullptr);

signals:
    void insertEmoticon(QString str);

private slots:
    void onSmileyClicked();
    void onPageButtonClicked();
    void PageButtonsUpdate();

protected:
    void mouseReleaseEvent(QMouseEvent* ev) final;
    void mousePressEvent(QMouseEvent* ev) final;
    void wheelEvent(QWheelEvent* event) final;
    void keyPressEvent(QKeyEvent* e) final;

private:
    QStackedWidget stack;
    QVBoxLayout layout;
    QList<std::shared_ptr<QIcon>> emoticonsIcons;

public:
    QSize sizeHint() const override;
};",0,587 2000 58 777 2001 123 2002 777 58 648 2000 40 2003 42 2004 61 753 41 59 2005 58 865 2006 40 2007 2008 41 59 773 2009 58 865 2010 40 41 59 865 2011 40 41 59 865 2012 40 41 59 775 58 865 2013 40 2014 42 2015 41 2016 59 865 2017 40 2014 42 2015 41 2016 59 865 2018 40 2019 42 2020 41 2016 59 865 2021 40 2022 42 2023 41 2016 59 773 58 2024 2025 59 2026 2027 59 2028 60 2029 321 2030 60 2031 355 2032 59 777 58 2033 2034 40 41 601 2035 59 125 59 ,"{'AvgLine': 17, 'CountLine': 184, 'CountStmt': 49, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 148, 'CountStmtDecl': 41, 'MaxCyclomatic': 3, 'SumCyclomatic': 16, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 155, 'CountLineCodeExe': 15, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 22, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 37, 'CountLineInactive': 5, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118409,C++,"class CircleWidget final : public CategoryWidget
{
    Q_OBJECT
public:
    explicit CircleWidget(const Core& _core, FriendListWidget* parent, int id);
    ~CircleWidget();

    void editName();
    static CircleWidget* getFromID(int id);

signals:
    void renameRequested(CircleWidget* circleWidget, const QString& newName);
    void newContentDialog(ContentDialog& contentDialog);

protected:
    void contextMenuEvent(QContextMenuEvent* event) final;
    void dragEnterEvent(QDragEnterEvent* event) final;
    void dragLeaveEvent(QDragLeaveEvent* event) final;
    void dropEvent(QDropEvent* event) final;

private:
    void onSetName() final;
    void onExpand() final;
    void onAddFriendWidget(FriendWidget* w) final;
    void updateID(int index);

    static QHash<int, CircleWidget*> circleList;
    int id;

    const Core& core;
};",0,587 2000 2001 58 777 2002 123 2003 777 58 648 2000 40 601 2004 38 2005 44 2006 42 2007 44 704 2008 41 59 126 2000 40 41 59 865 2009 40 41 59 809 2000 42 2010 40 704 2008 41 59 2011 58 865 2012 40 2000 42 2013 44 601 2014 38 2015 41 59 865 2016 40 2017 38 2018 41 59 775 58 865 2019 40 2020 42 2021 41 2001 59 865 2022 40 2023 42 2021 41 2001 59 865 2024 40 2025 42 2021 41 2001 59 865 2026 40 2027 42 2021 41 2001 59 773 58 865 2028 40 41 2001 59 865 2029 40 41 2001 59 865 2030 40 2031 42 2032 41 2001 59 865 2033 40 704 2034 41 59 809 2035 60 704 44 2000 42 62 2036 59 704 2008 59 601 2004 38 2037 59 125 59 ,"{'AvgLine': 15, 'CountLine': 222, 'CountStmt': 88, 'MaxNesting': 3, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 43, 'MaxEssential': 4, 'SumEssential': 15, 'AvgCyclomatic': 2, 'CountLineCode': 182, 'CountStmtDecl': 53, 'MaxCyclomatic': 7, 'SumCyclomatic': 24, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 35, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 2, 'CountDeclMethod': 13, 'AltCountLineCode': 182, 'CountLineCodeExe': 39, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 35, 'CountClassCoupled': 11, 'CountClassDerived': 0, 'CountLineCodeDecl': 50, 'CountLineInactive': 0, 'CountDeclMethodAll': 46, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 24, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 24, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 8, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118473,C++,"class SplitterRestorer
{
public:
    explicit SplitterRestorer(QSplitter* splitter);
    void restore(const QByteArray& state, const QSize& windowSize);

private:
    QSplitter* splitter;
};",0,587 2000 123 777 58 648 2000 40 2001 42 2002 41 59 865 2003 40 601 2004 38 2005 44 601 2006 38 2007 41 59 773 58 2001 42 2002 59 125 59 ,"{'AvgLine': 11, 'CountLine': 31, 'CountStmt': 8, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 29, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 29, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118420,C++,"class GUI : public QObject
{
    Q_OBJECT
public:
    static GUI& getInstance();
    static QWidget* getMainWidget();
    static void setEnabled(bool state);
    static void setWindowTitle(const QString& title);
    static void reloadTheme();
    static void showInfo(const QString& title, const QString& msg);
    static void showWarning(const QString& title, const QString& msg);
    static void showError(const QString& title, const QString& msg);
    static bool askQuestion(const QString& title, const QString& msg, bool defaultAns = false,
                            bool warning = true, bool yesno = true);

    static bool askQuestion(const QString& title, const QString& msg, const QString& button1,
                            const QString& button2, bool defaultAns = false, bool warning = true);


private:
    explicit GUI(QObject* parent = nullptr);

private slots:
    // Private implementation, those must be called from the GUI thread
    void _setEnabled(bool state);
    void _setWindowTitle(const QString& title);
    void _showInfo(const QString& title, const QString& msg);
    void _showWarning(const QString& title, const QString& msg);
    void _showError(const QString& title, const QString& msg);
    bool _askQuestion(const QString& title, const QString& msg, bool defaultAns = false,
                      bool warning = true, bool yesno = true);
    bool _askQuestion(const QString& title, const QString& msg, const QString& button1,
                      const QString& button2, bool defaultAns = false, bool warning = true);

signals:
    void themeReload();
};",0,587 2000 58 777 2001 123 2002 777 58 809 2000 38 2003 40 41 59 809 2004 42 2005 40 41 59 809 865 2006 40 569 2007 41 59 809 865 2008 40 601 2009 38 2010 41 59 809 865 2011 40 41 59 809 865 2012 40 601 2009 38 2010 44 601 2009 38 2013 41 59 809 865 2014 40 601 2009 38 2010 44 601 2009 38 2013 41 59 809 865 2015 40 601 2009 38 2010 44 601 2009 38 2013 41 59 809 569 2016 40 601 2009 38 2010 44 601 2009 38 2013 44 569 2017 61 655 44 569 2018 61 829 44 569 2019 61 829 41 59 809 569 2016 40 601 2009 38 2010 44 601 2009 38 2013 44 601 2009 38 2020 44 601 2009 38 2021 44 569 2017 61 655 44 569 2018 61 829 41 59 773 58 648 2000 40 2001 42 2022 61 753 41 59 773 2023 58 330 865 2024 40 569 2007 41 59 865 2025 40 601 2009 38 2010 41 59 865 2026 40 601 2009 38 2010 44 601 2009 38 2013 41 59 865 2027 40 601 2009 38 2010 44 601 2009 38 2013 41 59 865 2028 40 601 2009 38 2010 44 601 2009 38 2013 41 59 569 2029 40 601 2009 38 2010 44 601 2009 38 2013 44 569 2017 61 655 44 569 2018 61 829 44 569 2019 61 829 41 59 569 2029 40 601 2009 38 2010 44 601 2009 38 2013 44 601 2009 38 2020 44 601 2009 38 2021 44 569 2017 61 655 44 569 2018 61 829 41 59 2030 58 865 2031 40 41 59 125 59 ,"{'AvgLine': 8, 'CountLine': 194, 'CountStmt': 51, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 18, 'AvgCyclomatic': 1, 'CountLineCode': 184, 'CountStmtDecl': 33, 'MaxCyclomatic': 2, 'SumCyclomatic': 29, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 18, 'AltCountLineCode': 184, 'CountLineCodeExe': 21, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 37, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 29, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 15, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 29, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118452,C++,"class SetPasswordDialog : public QDialog
{
    Q_OBJECT

public:
    enum ReturnCode
    {
        Rejected = QDialog::Rejected,
        Accepted = QDialog::Accepted,
        Tertiary
    };
    explicit SetPasswordDialog(QString body, QString extraButton, QWidget* parent = nullptr);
    ~SetPasswordDialog();
    QString getPassword();
    static int getPasswordStrength(QString pass);

private slots:
    void onPasswordEdit();

private:
    Ui::SetPasswordDialog* ui;
    QString body;
    static const double reasonablePasswordLength;
};",0,587 2000 58 777 2001 123 2002 777 58 640 2003 123 2004 61 2001 321 2004 44 2005 61 2001 321 2005 44 2006 125 59 648 2000 40 2007 2008 44 2007 2009 44 2010 42 2011 61 753 41 59 126 2000 40 41 59 2007 2012 40 41 59 809 704 2013 40 2007 2014 41 59 773 2015 58 865 2016 40 41 59 773 58 2017 321 2000 42 2018 59 2007 2008 59 809 601 625 2019 59 125 59 ,"{'AvgLine': 15, 'CountLine': 101, 'CountStmt': 27, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 2, 'CountLineCode': 89, 'CountStmtDecl': 17, 'MaxCyclomatic': 4, 'SumCyclomatic': 10, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 89, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118593,C++,"class AboutForm : public GenericForm
{
    Q_OBJECT
public:
    AboutForm(UpdateCheck* updateCheck);
    ~AboutForm();
    QString getFormName() final
    {
        return tr(""About"");
    }

public slots:
    void onUpdateAvailable(QString latestVersion, QUrl link);
    void onUpToDate();
    void onUpdateCheckFailed();
    void reloadTheme() override;
    void onUnstableVersion();

private:
    void retranslateUi();
    void replaceVersions();
    inline QString createLink(QString path, QString text) const;

private:
    Ui::AboutSettings* bodyUI;
    QTimer* progressTimer;
    UpdateCheck* updateCheck;
    QMetaObject::Connection linkConnection;
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 2003 42 2004 41 59 126 2000 40 41 59 2005 2006 40 41 2007 123 792 2008 40 362 41 59 125 777 2009 58 865 2010 40 2005 2011 44 2012 2013 41 59 865 2014 40 41 59 865 2015 40 41 59 865 2016 40 41 2017 59 865 2018 40 41 59 773 58 865 2019 40 41 59 865 2020 40 41 59 700 2005 2021 40 2005 2022 44 2005 2023 41 601 59 773 58 2024 321 2025 42 2026 59 2027 42 2028 59 2003 42 2004 59 2029 321 2030 2031 59 125 59 ,"{'AvgLine': 13, 'CountLine': 178, 'CountStmt': 30, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 139, 'CountStmtDecl': 21, 'MaxCyclomatic': 1, 'SumCyclomatic': 11, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 11, 'AltCountLineCode': 154, 'CountLineCodeExe': 11, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 18, 'CountLineInactive': 8, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 7, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
118367,C++,"class AirshipLandDetector : public LandDetector
{
public:
	AirshipLandDetector() = default;
	~AirshipLandDetector() override = default;

protected:
	bool _get_ground_contact_state() override;
	bool _get_landed_state() override;
	void _set_hysteresis_factor(const int factor) override {};
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 126 2000 40 41 2002 61 613 59 775 58 569 2003 40 41 2002 59 569 2004 40 41 2002 59 865 2005 40 601 704 2006 41 2002 123 125 59 125 59 ,"{'AvgLine': 5, 'CountLine': 24, 'CountStmt': 7, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 3, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 21, 'CountLineCodeExe': 4, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 72, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118487,C++,"class ProfileImporter : public QWidget
{
    Q_OBJECT

public:
    explicit ProfileImporter(QWidget* parent = nullptr);
    bool importProfile(const QString& path);
    bool importProfile();

private:
    bool askQuestion(QString title, QString message);
};",0,587 2000 58 777 2001 123 2002 777 58 648 2000 40 2001 42 2003 61 753 41 59 569 2004 40 601 2005 38 2006 41 59 569 2004 40 41 59 773 58 569 2007 40 2005 2008 44 2005 2009 41 59 125 59 ,"{'AvgLine': 19, 'CountLine': 89, 'CountStmt': 28, 'MaxNesting': 2, 'AvgLineCode': 15, 'AvgEssential': 2, 'AvgLineBlank': 3, 'CountStmtExe': 10, 'MaxEssential': 6, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 70, 'CountStmtDecl': 18, 'MaxCyclomatic': 6, 'SumCyclomatic': 9, 'AltAvgLineCode': 15, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 6, 'AltCountLineCode': 70, 'CountLineCodeExe': 6, 'CountLineComment': 8, 'AltAvgLineComment': 2, 'AltCountLineBlank': 14, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 20, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118541,C++,"class TestFileTransferList : public QObject
{
    Q_OBJECT
private slots:

    void testFileTransferListConversion();
    void testEditorActionConversion();

    void testFileName();
    // NOTE: Testing contact return requires a lookup in FriendList which goes
    // down a large dependency chain that is not linked to this test
    // void testContact();
    void testProgress();
    void testSize();
    void testSpeed();
    void testStatus();
    void testControl();
    void testAvatarIgnored();
    void testMultipleFiles();
    void testFileRemoval();
};",0,587 2000 58 777 2001 123 2002 773 2003 58 865 2004 40 41 59 865 2005 40 41 59 865 2006 40 41 59 330 330 330 865 2007 40 41 59 865 2008 40 41 59 865 2009 40 41 59 865 2010 40 41 59 865 2011 40 41 59 865 2012 40 41 59 865 2013 40 41 59 865 2014 40 41 59 125 59 ,"{'AvgLine': 19, 'CountLine': 240, 'CountStmt': 112, 'MaxNesting': 1, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 74, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 180, 'CountStmtDecl': 44, 'MaxCyclomatic': 2, 'SumCyclomatic': 12, 'AltAvgLineCode': 14, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 46, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 11, 'AltCountLineCode': 180, 'CountLineCodeExe': 96, 'CountLineComment': 14, 'AltAvgLineComment': 1, 'AltCountLineBlank': 46, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 48, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 14, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 10, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99946,C++,"class TigerPIP final: public TigerPoint
{
public:
                      TigerPIP( OGRTigerDataSource *, const char * );

  virtual OGRFeature *GetFeature( int ) override;

  virtual OGRErr      CreateFeature( OGRFeature *poFeature ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 864 2004 42 2005 40 704 41 2006 59 864 2007 2008 40 2004 42 2009 41 2006 59 125 59 ,"{'AvgLine': 9, 'CountLine': 36, 'CountStmt': 13, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 3, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 33, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 32, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118481,C++,"class ToxEncrypt
{
public:
    ~ToxEncrypt();
    ToxEncrypt() = delete;
    ToxEncrypt(const ToxEncrypt& other) = delete;
    ToxEncrypt& operator=(const ToxEncrypt& other) = delete;

    static int getMinBytes();
    static bool isEncrypted(const QByteArray& ciphertext);
    static QByteArray encryptPass(const QString& password, const QByteArray& plaintext);
    static QByteArray decryptPass(const QString& password, const QByteArray& ciphertext);
    static std::unique_ptr<ToxEncrypt> makeToxEncrypt(const QString& password);
    static std::unique_ptr<ToxEncrypt> makeToxEncrypt(const QString& password,
                                                      const QByteArray& toxSave);
    QByteArray encrypt(const QByteArray& plaintext) const;
    QByteArray decrypt(const QByteArray& ciphertext) const;

private:
    explicit ToxEncrypt(Tox_Pass_Key* key);

private:
    Tox_Pass_Key* passKey = nullptr;
};",0,587 2000 123 777 58 126 2000 40 41 59 2000 40 41 61 619 59 2000 40 601 2000 38 2001 41 61 619 59 2000 38 758 61 40 601 2000 38 2001 41 61 619 59 809 704 2002 40 41 59 809 569 2003 40 601 2004 38 2005 41 59 809 2004 2006 40 601 2007 38 2008 44 601 2004 38 2009 41 59 809 2004 2010 40 601 2007 38 2008 44 601 2004 38 2005 41 59 809 2011 321 2012 60 2000 62 2013 40 601 2007 38 2008 41 59 809 2011 321 2012 60 2000 62 2013 40 601 2007 38 2008 44 601 2004 38 2014 41 59 2004 2015 40 601 2004 38 2009 41 601 59 2004 2016 40 601 2004 38 2005 41 601 59 773 58 648 2000 40 2017 42 2018 41 59 773 58 2017 42 2019 61 753 59 125 59 ,"{'AvgLine': 15, 'CountLine': 179, 'CountStmt': 54, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 24, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 2, 'CountLineCode': 155, 'CountStmtDecl': 30, 'MaxCyclomatic': 4, 'SumCyclomatic': 24, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 24, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 17, 'AltCountLineCode': 155, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 24, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 24, 'CountDeclClassMethod': 5, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 16, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 82, 'SumCyclomaticModified': 24, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118471,C++,"class VerticalOnlyScroller : public QScrollArea
{
    Q_OBJECT
public:
    explicit VerticalOnlyScroller(QWidget* parent = nullptr);

protected:
    void resizeEvent(QResizeEvent* event) final;
    void showEvent(QShowEvent* event) final;
};",0,587 2000 58 777 2001 123 2002 777 58 648 2000 40 2003 42 2004 61 753 41 59 775 58 865 2005 40 2006 42 2007 41 2008 59 865 2009 40 2010 42 2007 41 2008 59 125 59 ,"{'AvgLine': 5, 'CountLine': 26, 'CountStmt': 6, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 25, 'CountStmtDecl': 4, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 25, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118399,C++,"class Audio
{
public:
    static std::unique_ptr<IAudioControl> makeAudio(IAudioSettings& settings);
};",0,587 2000 123 777 58 809 2001 321 2002 60 2003 62 2004 40 2005 38 2006 41 59 125 59 ,"{'AvgLine': 5, 'CountLine': 10, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 10, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100180,C++,"class FileGDBOGRLineString: public OGRLineString
{
    public:
        FileGDBOGRLineString() {}

        OGRRawPoint * GetPoints() const { return paoPoints; }
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 123 125 2002 42 2003 40 41 601 123 792 2004 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 7, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 6, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 289, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100190,C++,"class ZOrMBufferSetter
{
        GByte* pabyBuffer;
    public:
        explicit ZOrMBufferSetter(GByte* pabyBufferIn) :
                                                    pabyBuffer(pabyBufferIn) {}

        void set(int i, double dfValue)
        {
            CPL_LSBPTR64(&dfValue);
            memcpy( pabyBuffer + 8 * i, &dfValue, 8 );
        }
};",0,587 2000 123 2001 42 2002 59 777 58 648 2000 40 2001 42 2003 41 58 2002 40 2003 41 123 125 865 2004 40 704 2005 44 625 2006 41 123 2007 40 38 2006 41 59 2008 40 2002 43 1502 42 2005 44 38 2006 44 1502 41 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 13, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 12, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99731,C++,"class OCAD_EXTERN CADRay : public CADPoint3D
{
public:
    CADRay();
    virtual ~CADRay(){}

    CADVector getVectVector() const;
    void      setVectVector( const CADVector& value );

    virtual void print() const override;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 2003 2004 40 41 601 59 865 2005 40 601 2003 38 2006 41 59 864 865 2007 40 41 601 2008 59 125 59 ,"{'AvgLine': 4, 'CountLine': 31, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 29, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 29, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 29, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100323,C++,"template<typename T, typename U> class pointer_inside_vector {
 public:
  pointer_inside_vector(T *ptr, std::vector<U> &vec)
      : offset_(reinterpret_cast<uint8_t *>(ptr) -
                reinterpret_cast<uint8_t *>(flatbuffers::vector_data(vec))),
        vec_(vec) {}

  T *operator*() const {
    return reinterpret_cast<T *>(
        reinterpret_cast<uint8_t *>(flatbuffers::vector_data(vec_)) + offset_);
  }
  T *operator->() const { return operator*(); }

 private:
  size_t offset_;
  std::vector<U> &vec_;
};",0,822 60 835 2000 44 835 2001 62 587 2002 123 777 58 2002 40 2000 42 2003 44 2004 321 2005 60 2001 62 38 2006 41 58 2007 40 786 60 2008 42 62 40 2003 41 45 786 60 2008 42 62 40 2009 321 2010 40 2006 41 41 41 44 2011 40 2006 41 123 125 2000 42 758 42 40 41 601 123 792 786 60 2000 42 62 40 786 60 2008 42 62 40 2009 321 2010 40 2011 41 41 43 2007 41 59 125 2000 42 758 354 40 41 601 123 792 758 42 40 41 59 125 773 58 2012 2007 59 2004 321 2005 60 2001 62 38 2011 59 125 59 ,"{'AvgLine': 3, 'CountLine': 17, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 15, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118448,C++,"class AdjustingScrollArea : public QScrollArea
{
    Q_OBJECT
public:
    explicit AdjustingScrollArea(QWidget* parent = nullptr);
    virtual ~AdjustingScrollArea() = default;

protected:
    void resizeEvent(QResizeEvent* ev) override;
    QSize sizeHint() const final;
};",0,587 2000 58 777 2001 123 2002 777 58 648 2000 40 2003 42 2004 61 753 41 59 864 126 2000 40 41 61 613 59 775 58 865 2005 40 2006 42 2007 41 2008 59 2009 2010 40 41 601 2011 59 125 59 ,"{'AvgLine': 8, 'CountLine': 35, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 31, 'CountStmtDecl': 5, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 31, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118474,C++,"class ExtensionStatus : public QLabel
{
    Q_OBJECT
public:
    ExtensionStatus(QWidget* parent = nullptr);

public slots:
    void onExtensionSetUpdate(ExtensionSet extensionSet);
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 2003 42 2004 61 753 41 59 777 2005 58 865 2006 40 2007 2008 41 59 125 59 ,"{'AvgLine': 15, 'CountLine': 39, 'CountStmt': 7, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 34, 'CountStmtDecl': 4, 'MaxCyclomatic': 3, 'SumCyclomatic': 4, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 2, 'AltCountLineCode': 34, 'CountLineCodeExe': 3, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117533,C++,"class MavlinkRateLimiter
{
private:
	hrt_abstime _last_sent{0};
	hrt_abstime _interval{1000000};

public:
	MavlinkRateLimiter() = default;
	MavlinkRateLimiter(unsigned int interval) : _interval(interval) {};

	~MavlinkRateLimiter() = default;

	void set_interval(unsigned int interval) { _interval = interval; }

	bool check(const hrt_abstime &t);
};",0,587 2000 123 773 58 2001 2002 123 1500 125 59 2001 2003 123 1507 125 59 777 58 2000 40 41 61 613 59 2000 40 856 704 2004 41 58 2003 40 2004 41 123 125 59 126 2000 40 41 61 613 59 865 2005 40 856 704 2004 41 123 2003 61 2004 59 125 569 2006 40 601 2001 38 2007 41 59 125 59 ,"{'AvgLine': 4, 'CountLine': 28, 'CountStmt': 12, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 22, 'CountStmtDecl': 7, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 22, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118353,C++,"class MovingBaselineData :
	public UavcanSubscriberBase,
	private uavcan::Subscriber<ardupilot::gnss::MovingBaselineData, MovingBaselineDataBinder>
{
public:
	MovingBaselineData(uavcan::INode &node) :
		UavcanSubscriberBase(ardupilot::gnss::MovingBaselineData::DefaultDataTypeID),
		uavcan::Subscriber<ardupilot::gnss::MovingBaselineData, MovingBaselineDataBinder>(node)
	{}

	bool init()
	{
		if (start(MovingBaselineDataBinder(this, &MovingBaselineData::callback)) < 0) {
			PX4_ERR(""ardupilot::gnss::MovingBaselineData subscription failed"");
			return false;
		}

		return true;
	}

	void PrintInfo() const override
	{
		printf(""\t%s:%d -> %s\n"",
		       ardupilot::gnss::MovingBaselineData::getDataTypeFullName(),
		       ardupilot::gnss::MovingBaselineData::DefaultDataTypeID,
		       _gps_inject_data_pub.get_topic()->o_name);
	}

private:
	void callback(const uavcan::ReceivedDataStructure<ardupilot::gnss::MovingBaselineData> &msg)
	{
		// Don't republish a message from ourselves
		if (msg.getSrcNodeID().get() != getNode().getNodeID().get()) {
			gps_inject_data_s gps_inject_data{};

			gps_inject_data.len = msg.data.size();

			memcpy(gps_inject_data.data, &msg.data[0], gps_inject_data.len);

			gps_inject_data.timestamp = hrt_absolute_time();

			union device::Device::DeviceId device_id;

			device_id.devid_s.bus_type = device::Device::DeviceBusType::DeviceBusType_UAVCAN;
			device_id.devid_s.address = msg.getSrcNodeID().get();
			device_id.devid_s.devtype = DRV_GPS_DEVTYPE_UAVCAN;

			gps_inject_data.device_id = device_id.devid;

			_gps_inject_data_pub.publish(gps_inject_data);
		}
	}

	uORB::Publication<gps_inject_data_s> _gps_inject_data_pub{ORB_ID(gps_inject_data)};
};",0,587 2000 58 777 2001 44 773 2002 321 2003 60 2004 321 2005 321 2000 44 2006 62 123 777 58 2000 40 2002 321 2007 38 2008 41 58 2001 40 2004 321 2005 321 2000 321 2009 41 44 2002 321 2003 60 2004 321 2005 321 2000 44 2006 62 40 2008 41 123 125 569 2010 40 41 123 688 40 2011 40 2006 40 823 44 38 2000 321 2012 41 41 60 1500 41 123 2013 40 362 41 59 792 655 59 125 792 829 59 125 865 2014 40 41 601 2015 123 2016 40 362 44 2004 321 2005 321 2000 321 2017 40 41 44 2004 321 2005 321 2000 321 2009 44 2018 46 2019 40 41 354 2020 41 59 125 773 58 865 2021 40 601 2002 321 2022 60 2004 321 2005 321 2000 62 38 2023 41 123 330 688 40 2023 46 2024 40 41 46 2025 40 41 340 2026 40 41 46 2027 40 41 46 2025 40 41 41 123 2028 2029 123 125 59 2029 46 2030 61 2023 46 2031 46 2032 40 41 59 2033 40 2029 46 2031 44 38 2023 46 2031 91 1500 93 44 2029 46 2030 41 59 2029 46 2034 61 2035 40 41 59 851 2036 321 2037 321 2038 2039 59 2039 46 2040 46 2041 61 2036 321 2037 321 2042 321 2043 59 2039 46 2040 46 2044 61 2023 46 2024 40 41 46 2025 40 41 59 2039 46 2040 46 2045 61 2046 59 2029 46 2039 61 2039 46 2047 59 2048 46 2049 40 2029 41 59 125 125 2050 321 2051 60 2052 62 2053 123 2054 40 2055 41 125 59 125 59 ,"{'AvgLine': 10, 'CountLine': 55, 'CountStmt': 12, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 42, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 42, 'CountLineCodeExe': 2, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118377,C++,"class MutexLocker
{
	Mutex &mutex_;

public:
	MutexLocker(Mutex &mutex)
		: mutex_(mutex)
	{
		mutex_.lock();
	}
	~MutexLocker()
	{
		mutex_.unlock();
	}
};",0,587 2000 123 2001 38 2002 59 777 58 2000 40 2001 38 2003 41 58 2002 40 2003 41 123 2002 46 2004 40 41 59 125 126 2000 40 41 123 2002 46 2005 40 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 15, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 14, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117703,C++,"class FlightTaskFailsafe : public FlightTask
{
public:
	FlightTaskFailsafe() = default;

	virtual ~FlightTaskFailsafe() = default;
	bool update() override;
	bool activate(const vehicle_local_position_setpoint_s &last_setpoint) override;

private:
	DEFINE_PARAMETERS_CUSTOM_PARENT(FlightTask,
					(ParamFloat<px4::params::MPC_LAND_SPEED>) _param_mpc_land_speed
				       )
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 61 613 59 569 2002 40 41 2003 59 569 2004 40 601 2005 38 2006 41 2003 59 773 58 2007 40 2001 44 40 2008 60 2009 321 2010 321 2011 62 41 2012 41 125 59 ,"{'AvgLine': 14, 'CountLine': 52, 'CountStmt': 15, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 41, 'CountStmtDecl': 6, 'MaxCyclomatic': 5, 'SumCyclomatic': 7, 'AltAvgLineCode': 11, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 41, 'CountLineCodeExe': 7, 'CountLineComment': 4, 'AltAvgLineComment': 1, 'AltCountLineBlank': 7, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 43, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118551,C++,"class FriendListLayout : public QVBoxLayout
{
    Q_OBJECT
public:
    explicit FriendListLayout();
    explicit FriendListLayout(QWidget* parent);

    void addFriendWidget(FriendWidget* widget, Status::Status s);
    void removeFriendWidget(FriendWidget* widget, Status::Status s);
    int indexOfFriendWidget(GenericChatItemWidget* widget, bool online) const;
    void moveFriendWidgets(FriendListWidget* listWidget);
    int friendOnlineCount() const;
    int friendTotalCount() const;

    bool hasChatrooms() const;
    void searchChatrooms(const QString& searchString, bool hideOnline = false,
                         bool hideOffline = false);

    QLayout* getLayoutOnline() const;
    QLayout* getLayoutOffline() const;

private:
    void init();
    QLayout* getFriendLayout(Status::Status s) const;

    GenericChatItemLayout friendOnlineLayout;
    GenericChatItemLayout friendOfflineLayout;
};",0,587 2000 58 777 2001 123 2002 777 58 648 2000 40 41 59 648 2000 40 2003 42 2004 41 59 865 2005 40 2006 42 2007 44 2008 321 2008 2009 41 59 865 2010 40 2006 42 2007 44 2008 321 2008 2009 41 59 704 2011 40 2012 42 2007 44 569 2013 41 601 59 865 2014 40 2015 42 2016 41 59 704 2017 40 41 601 59 704 2018 40 41 601 59 569 2019 40 41 601 59 865 2020 40 601 2021 38 2022 44 569 2023 61 655 44 569 2024 61 655 41 59 2025 42 2026 40 41 601 59 2025 42 2027 40 41 601 59 773 58 865 2028 40 41 59 2025 42 2029 40 2008 321 2008 2009 41 601 59 2030 2031 59 2030 2032 59 125 59 ,"{'AvgLine': 6, 'CountLine': 123, 'CountStmt': 44, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 25, 'MaxEssential': 1, 'SumEssential': 14, 'AvgCyclomatic': 1, 'CountLineCode': 111, 'CountStmtDecl': 21, 'MaxCyclomatic': 2, 'SumCyclomatic': 18, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 16, 'AltCountLineCode': 111, 'CountLineCodeExe': 24, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 65, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 13, 'CountDeclInstanceMethod': 20, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118095,C++,"class MavlinkStreamSysStatus : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamSysStatus(mavlink); }

	static constexpr const char *get_name_static() { return ""SYS_STATUS""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_SYS_STATUS; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return MAVLINK_MSG_ID_SYS_STATUS_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
	}

private:
	explicit MavlinkStreamSysStatus(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _status_sub{ORB_ID(vehicle_status)};
	uORB::Subscription _cpuload_sub{ORB_ID(cpuload)};
	uORB::SubscriptionMultiArray<battery_status_s, battery_status_s::MAX_INSTANCES> _battery_status_subs{ORB_ID::battery_status};

	bool send() override
	{
		if (_status_sub.updated() || _cpuload_sub.updated() || _battery_status_subs.updated()) {
			vehicle_status_s status{};
			_status_sub.copy(&status);

			cpuload_s cpuload{};
			_cpuload_sub.copy(&cpuload);

			battery_status_s battery_status[battery_status_s::MAX_INSTANCES] {};

			for (int i = 0; i < _battery_status_subs.size(); i++) {
				_battery_status_subs[i].copy(&battery_status[i]);
			}

			int lowest_battery_index = 0;

			// No battery is connected, select the first group
			// Low battery judgment is performed only when the current battery is connected
			// When the last cached battery is not connected or the current battery level is lower than the cached battery level,
			// the current battery status is replaced with the cached value
			for (int i = 0; i < _battery_status_subs.size(); i++) {
				if (battery_status[i].connected && ((!battery_status[lowest_battery_index].connected)
								    || (battery_status[i].remaining < battery_status[lowest_battery_index].remaining))) {
					lowest_battery_index = i;
				}
			}

			mavlink_sys_status_t msg{};

			msg.onboard_control_sensors_present = static_cast<uint32_t>(status.onboard_control_sensors_present & 0xFFFFFFFF) |
							      MAV_SYS_STATUS_EXTENSION_USED;
			msg.onboard_control_sensors_enabled = static_cast<uint32_t>(status.onboard_control_sensors_enabled & 0xFFFFFFFF) |
							      MAV_SYS_STATUS_EXTENSION_USED;
			msg.onboard_control_sensors_health = static_cast<uint32_t>(status.onboard_control_sensors_health & 0xFFFFFFFF) |
							     MAV_SYS_STATUS_EXTENSION_USED;

			msg.onboard_control_sensors_present_extended = static_cast<uint32_t>((status.onboard_control_sensors_present >> 32u) &
					0xFFFFFFFF);
			msg.onboard_control_sensors_enabled_extended = static_cast<uint32_t>((status.onboard_control_sensors_enabled >> 32u) &
					0xFFFFFFFF);
			msg.onboard_control_sensors_health_extended = static_cast<uint32_t>((status.onboard_control_sensors_health >> 32u) &
					0xFFFFFFFF);

			msg.load = cpuload.load * 1000.0f;

			// TODO: Determine what data should be put here when there are multiple batteries.
			//  Right now, it uses the lowest battery. This is a safety decision, because if a client is only checking
			//  one battery using this message, it should be the lowest.
			//  In the future, this should somehow determine the ""main"" battery, or use the ""type"" field of BATTERY_STATUS
			//  to determine which battery is more important at a given time.
			const battery_status_s &lowest_battery = battery_status[lowest_battery_index];

			if (lowest_battery.connected) {
				msg.voltage_battery = lowest_battery.voltage_filtered_v * 1000.0f;
				msg.current_battery = lowest_battery.current_filtered_a * 100.0f;
				msg.battery_remaining = ceilf(lowest_battery.remaining * 100.0f);

			} else {
				msg.voltage_battery = UINT16_MAX;
				msg.current_battery = -1;
				msg.battery_remaining = -1;
			}

			mavlink_msg_sys_status_send_struct(_mavlink->get_channel(), &msg);
			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 43 2014 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2015 321 2016 2017 123 2018 40 2019 41 125 59 2015 321 2016 2020 123 2021 40 2022 41 125 59 2015 321 2023 60 2024 44 2024 321 2025 62 2026 123 2027 321 2028 125 59 569 2029 40 41 2010 123 688 40 2017 46 2030 40 41 309 2020 46 2030 40 41 309 2026 46 2030 40 41 41 123 2031 2032 123 125 59 2017 46 2033 40 38 2032 41 59 2034 2035 123 125 59 2020 46 2033 40 38 2035 41 59 2024 2036 91 2024 321 2025 93 123 125 59 664 40 704 2037 61 1500 59 2037 60 2026 46 2038 40 41 59 2037 349 41 123 2026 91 2037 93 46 2033 40 38 2036 91 2037 93 41 59 125 704 2039 61 1500 59 330 330 330 330 664 40 704 2037 61 1500 59 2037 60 2026 46 2038 40 41 59 2037 349 41 123 688 40 2036 91 2037 93 46 2040 307 40 40 33 2036 91 2039 93 46 2040 41 309 40 2036 91 2037 93 46 2041 60 2036 91 2039 93 46 2041 41 41 41 123 2039 61 2037 59 125 125 2042 2043 123 125 59 2043 46 2044 61 811 60 2045 62 40 2032 46 2044 38 1511 41 124 2046 59 2043 46 2047 61 811 60 2045 62 40 2032 46 2047 38 1511 41 124 2046 59 2043 46 2048 61 811 60 2045 62 40 2032 46 2048 38 1511 41 124 2046 59 2043 46 2049 61 811 60 2045 62 40 40 2032 46 2044 355 1503 41 38 1511 41 59 2043 46 2050 61 811 60 2045 62 40 40 2032 46 2047 355 1503 41 38 1511 41 59 2043 46 2051 61 811 60 2045 62 40 40 2032 46 2048 355 1503 41 38 1511 41 59 2043 46 2052 61 2035 46 2052 42 1504 59 330 330 330 330 330 601 2024 38 2053 61 2036 91 2039 93 59 688 40 2053 46 2054 41 123 2043 46 2055 61 2053 46 2056 42 1504 59 2043 46 2057 61 2053 46 2058 42 1503 59 2043 46 2059 61 2060 40 2053 46 2061 42 1503 41 59 125 630 123 2043 46 2062 61 2063 59 2043 46 2064 61 45 1501 59 2043 46 2065 61 45 1501 59 125 2066 40 2067 354 2068 40 41 44 38 2043 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 10, 'CountLine': 94, 'CountStmt': 25, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 65, 'CountStmtDecl': 19, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 7, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 20, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 65, 'CountLineCodeExe': 7, 'CountLineComment': 9, 'AltAvgLineComment': 1, 'AltCountLineBlank': 20, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117631,C++,"class Integrator
{
public:
	Integrator() = default;
	~Integrator() = default;

	static constexpr float DT_MIN{FLT_MIN};
	static constexpr float DT_MAX{static_cast<float>(UINT16_MAX) * 1e-6f};

	/**
	 * Put an item into the integral.
	 *
	 * @param timestamp	Timestamp of the current value.
	 * @param val		Item to put.
	 * @return		true if data was accepted and integrated.
	 */
	inline void put(const matrix::Vector3f &val, const float dt)
	{
		if ((dt > DT_MIN) && (_integral_dt + dt < DT_MAX)) {
			_alpha += integrate(val, dt);

		} else {
			reset();
			_last_val = val;
		}
	}

	/**
	 * Set reset interval during runtime. This won't reset the integrator.
	 *
	 * @param reset_interval	New reset time interval for the integrator in microseconds.
	 */
	void set_reset_interval(uint32_t reset_interval_us) { _reset_interval_min = reset_interval_us * 1e-6f; }

	/**
	 * Set required samples for reset. This won't reset the integrator.
	 *
	 * @param reset_samples	    	New reset time interval for the integrator.
	 */
	void set_reset_samples(uint8_t reset_samples) { _reset_samples_min = reset_samples; }
	uint8_t get_reset_samples() const { return _reset_samples_min; }

	/**
	 * Is the Integrator ready to reset?
	 *
	 * @return		true if integrator has sufficient data (minimum interval & samples satisfied) to reset.
	 */
	inline bool integral_ready() const { return (_integrated_samples >= _reset_samples_min) || (_integral_dt >= _reset_interval_min); }

	void reset()
	{
		_alpha.zero();
		_integral_dt = 0;
		_integrated_samples = 0;
	}

	/* Reset integrator and return current integral & integration time
	 *
	 * @param integral_dt	Get the dt in us of the current integration.
	 * @return		true if integral valid
	 */
	bool reset(matrix::Vector3f &integral, uint16_t &integral_dt)
	{
		if (integral_ready()) {
			integral = _alpha;
			integral_dt = roundf(_integral_dt * 1e6f); // seconds to microseconds

			reset();

			return true;
		}

		return false;
	}

protected:

	inline matrix::Vector3f integrate(const matrix::Vector3f &val, const float dt)
	{
		// Use trapezoidal integration to calculate the delta integral
		_integrated_samples++;
		_integral_dt += dt;
		const matrix::Vector3f delta_alpha{(val + _last_val) *dt * 0.5f};
		_last_val = val;

		return delta_alpha;
	}

	matrix::Vector3f _alpha{0.f, 0.f, 0.f};    /**< integrated value before coning corrections are applied */
	matrix::Vector3f _last_val{0.f, 0.f, 0.f}; /**< previous input */
	float _integral_dt{0};

	float _reset_interval_min{0.005f}; /**< the interval after which the content will be published and the integrator reset */
	uint8_t _reset_samples_min{1};

	uint8_t _integrated_samples{0};
};",0,587 2000 123 777 58 2000 40 41 61 613 59 126 2000 40 41 61 613 59 809 603 660 2001 123 2002 125 59 809 603 660 2003 123 811 60 660 62 40 2004 41 42 1500 125 59 306 700 865 2005 40 601 2006 321 2007 38 2008 44 601 660 2009 41 123 688 40 40 2009 62 2001 41 307 40 2010 43 2009 60 2003 41 41 123 2011 348 2012 40 2008 44 2009 41 59 125 630 123 2013 40 41 59 2014 61 2008 59 125 125 306 865 2015 40 2016 2017 41 123 2018 61 2017 42 1500 59 125 306 865 2019 40 2020 2021 41 123 2022 61 2021 59 125 2020 2023 40 41 601 123 792 2024 59 125 306 700 569 2025 40 41 601 123 792 40 2026 325 2027 41 309 40 2028 325 2029 41 59 125 865 2030 40 41 123 2031 46 2032 40 41 59 2033 61 1500 59 2034 61 1500 59 125 305 569 2030 40 2006 321 2007 38 2035 44 2036 38 2037 41 123 688 40 2025 40 41 41 123 2035 61 2038 59 2037 61 2039 40 2040 42 1507 41 59 330 2030 40 41 59 792 829 59 125 792 655 59 125 775 58 700 2006 321 2007 2041 40 601 2006 321 2007 38 2008 44 601 660 2009 41 123 330 2042 349 59 2043 348 2009 59 601 2006 321 2007 2044 123 40 2008 43 2045 41 42 2009 42 1500 125 59 2046 61 2008 59 792 2044 59 125 2006 321 2007 2047 123 1500 44 1500 44 1500 125 59 306 2006 321 2007 2048 123 1500 44 1500 44 1500 125 59 306 660 2049 123 1500 125 59 660 2050 123 1500 125 59 306 2020 2051 123 1501 125 59 2020 2052 123 1500 125 59 125 59 ,"{'AvgLine': 5, 'CountLine': 96, 'CountStmt': 38, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 24, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 51, 'CountStmtDecl': 17, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 51, 'CountLineCodeExe': 23, 'CountLineComment': 32, 'AltAvgLineComment': 0, 'AltCountLineBlank': 17, 'CountClassCoupled': 2, 'CountClassDerived': 1, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.63', 'AltCountLineComment': 32, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 6}"
117874,C++,"class UavcanAccelBridge : public UavcanSensorBridgeBase
{
public:
	static const char *const NAME;

	UavcanAccelBridge(uavcan::INode &node);

	const char *get_name() const override { return NAME; }

	int init() override;

private:

	void imu_sub_cb(const uavcan::ReceivedDataStructure<uavcan::equipment::ahrs::RawIMU> &msg);

	int init_driver(uavcan_bridge::Channel *channel) override;

	typedef uavcan::MethodBinder < UavcanAccelBridge *,
		void (UavcanAccelBridge::*)
		(const uavcan::ReceivedDataStructure<uavcan::equipment::ahrs::RawIMU> &) >
		ImuCbBinder;

	uavcan::Subscriber<uavcan::equipment::ahrs::RawIMU, ImuCbBinder> _sub_imu_data;

};",0,587 2000 58 777 2001 123 777 58 809 601 582 42 601 2002 59 2000 40 2003 321 2004 38 2005 41 59 601 582 42 2006 40 41 601 2007 123 792 2002 59 125 704 2008 40 41 2007 59 773 58 865 2009 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2013 62 38 2014 41 59 704 2015 40 2016 321 2017 42 2018 41 2007 59 833 2003 321 2019 60 2000 42 44 865 40 2000 321 42 41 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2013 62 38 41 62 2020 59 2003 321 2021 60 2003 321 2011 321 2012 321 2013 44 2020 62 2022 59 125 59 ,"{'AvgLine': 12, 'CountLine': 88, 'CountStmt': 32, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 18, 'MaxEssential': 3, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 62, 'CountStmtDecl': 14, 'MaxCyclomatic': 4, 'SumCyclomatic': 11, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 23, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 62, 'CountLineCodeExe': 17, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 23, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118535,C++,"    template <class ReceiptT>
    class ReceiptResolver
    {
    public:
        void notifyMessageSent(ReceiptT receipt, OfflineMessage const& message)
        {
            auto receivedReceiptIt = std::find(
                    receivedReceipts.begin(), receivedReceipts.end(), receipt);

            if (receivedReceiptIt != receivedReceipts.end()) {
                receivedReceipts.erase(receivedReceiptIt);
                message.completionFn(true);
                return;
            }

            unAckedMessages[receipt] = message;
        }

        void notifyReceiptReceived(ReceiptT receipt)
        {
            auto unackedMessageIt = unAckedMessages.find(receipt);
            if (unackedMessageIt != unAckedMessages.end()) {
                unackedMessageIt->second.completionFn(true);
                unAckedMessages.erase(unackedMessageIt);
                return;
            }

            receivedReceipts.push_back(receipt);
        }

        std::vector<OfflineMessage> clear()
        {
            auto ret = std::vector<OfflineMessage>();
            std::transform(
                std::make_move_iterator(unAckedMessages.begin()), std::make_move_iterator(unAckedMessages.end()),
                std::back_inserter(ret),
                [] (const std::pair<ReceiptT, OfflineMessage>& pair) {
                    return std::move(pair.second);
                });

            receivedReceipts.clear();
            unAckedMessages.clear();
            return ret;
        }

        std::vector<ReceiptT> receivedReceipts;
        std::map<ReceiptT, OfflineMessage> unAckedMessages;
    };",0,822 60 587 2000 62 587 2001 123 777 58 865 2002 40 2000 2003 44 2004 601 38 2005 41 123 561 2006 61 2007 321 2008 40 2009 46 2010 40 41 44 2009 46 2011 40 41 44 2003 41 59 688 40 2006 340 2009 46 2011 40 41 41 123 2009 46 2012 40 2006 41 59 2005 46 2013 40 829 41 59 792 59 125 2014 91 2003 93 61 2005 59 125 865 2015 40 2000 2003 41 123 561 2016 61 2017 46 2018 40 2003 41 59 688 40 2016 340 2017 46 2019 40 41 41 123 2016 354 2020 46 2021 40 829 41 59 2017 46 2022 40 2016 41 59 792 59 125 2023 46 2024 40 2003 41 59 125 2025 321 2026 60 2004 62 2027 40 41 123 561 2028 61 2025 321 2026 60 2004 62 40 41 59 2025 321 2029 40 2025 321 2030 40 2031 46 2032 40 41 41 44 2025 321 2030 40 2031 46 2033 40 41 41 44 2025 321 2034 40 2028 41 44 91 93 40 601 2025 321 2035 60 2000 44 2004 62 38 2035 41 123 792 2025 321 2036 40 2035 46 2037 41 59 125 41 59 2038 46 2027 40 41 59 2031 46 2027 40 41 59 792 2028 59 125 2025 321 2026 60 2000 62 2039 59 2025 321 2040 60 2000 44 2004 62 2041 59 125 59 ,"{'AvgLine': 12, 'CountLine': 47, 'CountStmt': 13, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 40, 'CountStmtDecl': 8, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 40, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118604,C++,"class HistMessageContent
{
public:
    HistMessageContent(QString message)
        : data(std::make_shared<QString>(std::move(message)))
        , type(HistMessageContentType::message)
    {}

    HistMessageContent(ToxFile file)
        : data(std::make_shared<ToxFile>(std::move(file)))
        , type(HistMessageContentType::file)
    {}

    HistMessageContent(SystemMessage systemMessage)
        : data(std::make_shared<SystemMessage>(std::move(systemMessage)))
        , type(HistMessageContentType::system)
    {}

    HistMessageContentType getType() const
    {
        return type;
    }

    QString& asMessage()
    {
        assert(type == HistMessageContentType::message);
        return *static_cast<QString*>(data.get());
    }

    ToxFile& asFile()
    {
        assert(type == HistMessageContentType::file);
        return *static_cast<ToxFile*>(data.get());
    }

    SystemMessage& asSystemMessage()
    {
        assert(type == HistMessageContentType::system);
        return *static_cast<SystemMessage*>(data.get());
    }

    const QString& asMessage() const
    {
        assert(type == HistMessageContentType::message);
        return *static_cast<QString*>(data.get());
    }

    const ToxFile& asFile() const
    {
        assert(type == HistMessageContentType::file);
        return *static_cast<ToxFile*>(data.get());
    }

    const SystemMessage& asSystemMessage() const
    {
        assert(type == HistMessageContentType::system);
        return *static_cast<SystemMessage*>(data.get());
    }

private:
    // Not really shared but shared_ptr has support for shared_ptr<void>
    std::shared_ptr<void> data;
    HistMessageContentType type;
};",0,587 2000 123 777 58 2000 40 2001 2002 41 58 2003 40 2004 321 2005 60 2001 62 40 2004 321 2006 40 2002 41 41 41 44 2007 40 2008 321 2002 41 123 125 2000 40 2009 2010 41 58 2003 40 2004 321 2005 60 2009 62 40 2004 321 2006 40 2010 41 41 41 44 2007 40 2008 321 2010 41 123 125 2000 40 2011 2012 41 58 2003 40 2004 321 2005 60 2011 62 40 2004 321 2006 40 2012 41 41 41 44 2007 40 2008 321 2013 41 123 125 2008 2014 40 41 601 123 792 2007 59 125 2001 38 2015 40 41 123 2016 40 2007 323 2008 321 2002 41 59 792 42 811 60 2001 42 62 40 2003 46 2017 40 41 41 59 125 2009 38 2018 40 41 123 2019 40 2007 323 2008 321 2010 41 59 792 42 811 60 2009 42 62 40 2003 46 2020 40 41 41 59 125 2011 38 2021 40 41 123 2022 40 2007 323 2008 321 2013 41 59 792 42 811 60 2011 42 62 40 2003 46 2023 40 41 41 59 125 601 2001 38 2015 40 41 601 123 2024 40 2007 323 2008 321 2002 41 59 792 42 811 60 2001 42 62 40 2003 46 2025 40 41 41 59 125 601 2009 38 2018 40 41 601 123 2026 40 2007 323 2008 321 2010 41 59 792 42 811 60 2009 42 62 40 2003 46 2027 40 41 41 59 125 601 2011 38 2021 40 41 601 123 2028 40 2007 323 2008 321 2013 41 59 792 42 811 60 2011 42 62 40 2003 46 2029 40 41 41 59 125 773 58 330 2004 321 2030 60 865 62 2003 59 2008 2007 59 125 59 ,"{'AvgLine': 4, 'CountLine': 64, 'CountStmt': 22, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 53, 'CountStmtDecl': 15, 'MaxCyclomatic': 2, 'SumCyclomatic': 16, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 53, 'CountLineCodeExe': 4, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118566,C++,"class LoginScreen : public QDialog
{
    Q_OBJECT

public:
    LoginScreen(const QString& initialProfileName = QString(), QWidget* parent = nullptr);
    ~LoginScreen();
    bool event(QEvent* event) final;

signals:

    void windowStateChanged(Qt::WindowStates states);
    void autoLoginChanged(bool state);
    void createNewProfile(QString name, const QString& pass);
    void loadProfile(QString name, const QString& pass);

public slots:
    void onProfileLoaded();
    void onProfileLoadFailed();
    void onAutoLoginChanged(bool state);

private slots:
    void onAutoLoginCheckboxChanged(int state);
    void onLoginUsernameSelected(const QString& name);
    void onPasswordEdited();
    // Buttons to change page
    void onNewProfilePageClicked();
    void onLoginPageClicked();
    // Buttons to submit form
    void onCreateNewProfile();
    void onLogin();
    void onImportProfile();

private:
    void reset(const QString& initialProfileName = QString());
    void retranslateUi();
    void showCapsIndicator();
    void hideCapsIndicator();
    void checkCapsLock();

private:
    Ui::LoginScreen* ui;
    QShortcut quitShortcut;
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 601 2003 38 2004 61 2003 40 41 44 2005 42 2006 61 753 41 59 126 2000 40 41 59 569 2007 40 2008 42 2007 41 2009 59 2010 58 865 2011 40 2012 321 2013 2014 41 59 865 2015 40 569 2016 41 59 865 2017 40 2003 2018 44 601 2003 38 2019 41 59 865 2020 40 2003 2018 44 601 2003 38 2019 41 59 777 2021 58 865 2022 40 41 59 865 2023 40 41 59 865 2024 40 569 2016 41 59 773 2021 58 865 2025 40 704 2016 41 59 865 2026 40 601 2003 38 2018 41 59 865 2027 40 41 59 330 865 2028 40 41 59 865 2029 40 41 59 330 865 2030 40 41 59 865 2031 40 41 59 865 2032 40 41 59 773 58 865 2033 40 601 2003 38 2004 61 2003 40 41 41 59 865 2034 40 41 59 865 2035 40 41 59 865 2036 40 41 59 865 2037 40 41 59 773 58 2038 321 2000 42 2039 59 2040 2041 59 125 59 ,"{'AvgLine': 12, 'CountLine': 236, 'CountStmt': 57, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 22, 'MaxEssential': 5, 'SumEssential': 22, 'AvgCyclomatic': 1, 'CountLineCode': 199, 'CountStmtDecl': 35, 'MaxCyclomatic': 5, 'SumCyclomatic': 26, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 24, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 22, 'AltCountLineCode': 205, 'CountLineCodeExe': 17, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 24, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 28, 'CountLineInactive': 4, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 26, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 99, 'SumCyclomaticModified': 26, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 14, 'CountDeclInstanceMethod': 22, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118500,C++,"class Identicon
{
public:
    Identicon(const QByteArray& data);
    QImage toImage(int scaleFactor = 1);
    static float bytesToColor(QByteArray bytes);

public:
    static constexpr int IDENTICON_ROWS = 5;
    static constexpr int IDENTICON_COLOR_BYTES = 6;

private:
    static constexpr int COLORS = 2;
    static constexpr int ACTIVE_COLS = (IDENTICON_ROWS + 1) / 2;
    static constexpr int HASH_MIN_LEN = ACTIVE_COLS * IDENTICON_ROWS
                                      + COLORS * IDENTICON_COLOR_BYTES;

    uint8_t identiconColors[IDENTICON_ROWS][ACTIVE_COLS];
    QColor colors[COLORS];
};",0,587 2000 123 777 58 2000 40 601 2001 38 2002 41 59 2003 2004 40 704 2005 61 1501 41 59 809 660 2006 40 2001 2007 41 59 777 58 809 603 704 2008 61 1502 59 809 603 704 2009 61 1502 59 773 58 809 603 704 2010 61 1502 59 809 603 704 2011 61 40 2008 43 1501 41 47 1502 59 809 603 704 2012 61 2011 42 2008 43 2010 42 2009 59 2013 2014 91 2008 93 91 2011 93 59 2015 2016 91 2010 93 59 125 59 ,"{'AvgLine': 22, 'CountLine': 88, 'CountStmt': 44, 'MaxNesting': 2, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 25, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 3, 'CountLineCode': 68, 'CountStmtDecl': 31, 'MaxCyclomatic': 4, 'SumCyclomatic': 10, 'AltAvgLineCode': 17, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 3, 'AltCountLineCode': 68, 'CountLineCodeExe': 18, 'CountLineComment': 8, 'AltAvgLineComment': 2, 'AltCountLineBlank': 12, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 76, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 5, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118501,C++,"class ContentLayout : public QVBoxLayout
{
public:
    ContentLayout();
    explicit ContentLayout(QWidget* parent);
    ~ContentLayout();

    void clear();

    QFrame mainHLine;
    QHBoxLayout mainHLineLayout;
    QWidget* mainContent;
    QWidget* mainHead;

public slots:
    void reloadTheme();

private:
    void init();
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 648 2000 40 2002 42 2003 41 59 126 2000 40 41 59 865 2004 40 41 59 2005 2006 59 2007 2008 59 2002 42 2009 59 2002 42 2010 59 777 2011 58 865 2012 40 41 59 773 58 865 2013 40 41 59 125 59 ,"{'AvgLine': 17, 'CountLine': 122, 'CountStmt': 17, 'MaxNesting': 0, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 103, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 7, 'AltCountLineCode': 105, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 17, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118539,C++,"template <typename T, typename Tag, template <typename, typename> class... Properties>
class NamedType : public Properties<NamedType<T, Tag, Properties...>, T>...
{
public:
    using UnderlyingType = T;

    NamedType() {}
    explicit NamedType(T const& value) : value_(value) {}
    T& get() { return value_; }
    T const& get() const {return value_; }
private:
    T value_;
};",0,822 60 835 2000 44 835 2001 44 822 60 835 44 835 62 587 322 2002 62 587 2003 58 777 2002 60 2003 60 2000 44 2001 44 2002 322 62 44 2000 62 322 123 777 58 860 2004 61 2000 59 2003 40 41 123 125 648 2003 40 2000 601 38 2005 41 58 2006 40 2005 41 123 125 2000 38 2007 40 41 123 792 2006 59 125 2000 601 38 2007 40 41 601 123 792 2006 59 125 773 58 2000 2006 59 125 59 ,"{'AvgLine': 1, 'CountLine': 12, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 11, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 25, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118553,C++,"class VideoSource : public QObject
{
    Q_OBJECT

public:
    // Declare type aliases
    using IDType = std::uint_fast64_t;
    using AtomicIDType = std::atomic_uint_fast64_t;

public:
    VideoSource()
        : id(sourceIDs++)
    {
    }

    virtual ~VideoSource() = default;
    /**
     * @brief If subscribe sucessfully opens the source, it will start emitting frameAvailable
     * signals.
     */
    virtual void subscribe() = 0;
    /**
     * @brief Stop emitting frameAvailable signals, and free associated resources if necessary.
     */
    virtual void unsubscribe() = 0;

    /// ID of this VideoSource
    const IDType id;
signals:
    /**
     * @brief Emitted when new frame available to use.
     * @param frame New frame.
     */
    void frameAvailable(std::shared_ptr<VideoFrame> frame);
    /**
     * @brief Emitted when the source is stopped for an indefinite amount of time, but might restart
     * sending frames again later
     */
    void sourceStopped();

private:
    // Used to manage a global ID for all VideoSources
    static AtomicIDType sourceIDs;
};",0,587 2000 58 777 2001 123 2002 777 58 330 860 2003 61 2004 321 2005 59 860 2006 61 2004 321 2007 59 777 58 2000 40 41 58 2008 40 2009 349 41 123 125 864 126 2000 40 41 61 613 59 306 864 865 2010 40 41 61 1500 59 306 864 865 2011 40 41 61 1500 59 331 601 2003 2008 59 2012 58 306 865 2013 40 2004 321 2014 60 2015 62 2016 41 59 306 865 2017 40 41 59 773 58 330 809 2006 2009 59 125 59 ,"{'AvgLine': 4, 'CountLine': 43, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 20, 'CountLineCodeExe': 0, 'CountLineComment': 18, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.90', 'AltCountLineComment': 18, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117967,C++,"class PWMOutBase
{
public:

	virtual ~PWMOutBase() {}

	virtual int init() = 0;

	virtual int send_output_pwm(const uint16_t *pwm, int num_outputs) = 0;
};",0,587 2000 123 777 58 864 126 2000 40 41 123 125 864 704 2001 40 41 61 1500 59 864 704 2002 40 601 2003 42 2004 44 704 2005 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 10, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117973,C++,"class UavcanGyroBridge : public UavcanSensorBridgeBase
{
public:
	static const char *const NAME;

	UavcanGyroBridge(uavcan::INode &node);

	const char *get_name() const override { return NAME; }

	int init() override;

private:

	void imu_sub_cb(const uavcan::ReceivedDataStructure<uavcan::equipment::ahrs::RawIMU> &msg);

	int init_driver(uavcan_bridge::Channel *channel) override;

	typedef uavcan::MethodBinder < UavcanGyroBridge *,
		void (UavcanGyroBridge::*)
		(const uavcan::ReceivedDataStructure<uavcan::equipment::ahrs::RawIMU> &) >
		ImuCbBinder;

	uavcan::Subscriber<uavcan::equipment::ahrs::RawIMU, ImuCbBinder> _sub_imu_data;

};",0,587 2000 58 777 2001 123 777 58 809 601 582 42 601 2002 59 2000 40 2003 321 2004 38 2005 41 59 601 582 42 2006 40 41 601 2007 123 792 2002 59 125 704 2008 40 41 2007 59 773 58 865 2009 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2013 62 38 2014 41 59 704 2015 40 2016 321 2017 42 2018 41 2007 59 833 2003 321 2019 60 2000 42 44 865 40 2000 321 42 41 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2013 62 38 41 62 2020 59 2003 321 2021 60 2003 321 2011 321 2012 321 2013 44 2020 62 2022 59 125 59 ,"{'AvgLine': 12, 'CountLine': 88, 'CountStmt': 30, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 17, 'MaxEssential': 3, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 63, 'CountStmtDecl': 13, 'MaxCyclomatic': 4, 'SumCyclomatic': 11, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 22, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 63, 'CountLineCodeExe': 15, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 22, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117982,C++,"class ECL_WheelController :
	public ECL_Controller
{
public:
	ECL_WheelController() = default;
	~ECL_WheelController() = default;

	float control_attitude(const float dt, const ECL_ControlData &ctl_data) override;

	float control_bodyrate(const float dt, const ECL_ControlData &ctl_data) override;

	float control_euler_rate(const float dt, const ECL_ControlData &ctl_data, float bodyrate_ff) override { (void)ctl_data; return 0; }
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 126 2000 40 41 61 613 59 660 2002 40 601 660 2003 44 601 2004 38 2005 41 2006 59 660 2007 40 601 660 2003 44 601 2004 38 2005 41 2006 59 660 2008 40 601 660 2003 44 601 2004 38 2005 44 660 2009 41 2006 123 40 865 41 2005 59 792 1500 59 125 125 59 ,"{'AvgLine': 23, 'CountLine': 82, 'CountStmt': 27, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 5, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 4, 'CountLineCode': 48, 'CountStmtDecl': 6, 'MaxCyclomatic': 6, 'SumCyclomatic': 12, 'AltAvgLineCode': 13, 'AvgLineComment': 5, 'CountClassBase': 1, 'CountLineBlank': 20, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 5, 'CountDeclMethod': 5, 'AltCountLineCode': 48, 'CountLineCodeExe': 28, 'CountLineComment': 15, 'AltAvgLineComment': 5, 'AltCountLineBlank': 20, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 23, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.31', 'AltCountLineComment': 15, 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 4, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117999,C++,"class LIS2MDL_I2C : public device::I2C
{
public:
	LIS2MDL_I2C(int bus, int bus_frequency);
	virtual ~LIS2MDL_I2C() = default;

	virtual int     read(unsigned address, void *data, unsigned count);
	virtual int     write(unsigned address, void *data, unsigned count);

protected:
	virtual int     probe();

};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 704 2004 41 59 864 126 2000 40 41 61 613 59 864 704 2005 40 856 2006 44 865 42 2007 44 856 2008 41 59 864 704 2009 40 856 2006 44 865 42 2007 44 856 2008 41 59 775 58 864 704 2010 40 41 59 125 59 ,"{'AvgLine': 10, 'CountLine': 55, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 45, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118587,C++,"class AdvancedForm : public GenericForm
{
    Q_OBJECT
public:
    AdvancedForm();
    ~AdvancedForm();
    QString getFormName() final
    {
        return tr(""Advanced"");
    }

private slots:
    // Portable
    void on_cbMakeToxPortable_stateChanged();
    void on_resetButton_clicked();
    // Debug
    void on_btnCopyDebug_clicked();
    void on_btnExportLog_clicked();
    // Connection
    void on_cbEnableIPv6_stateChanged();
    void on_cbEnableUDP_stateChanged();
    void on_cbEnableLanDiscovery_stateChanged();
    void on_proxyAddr_editingFinished();
    void on_proxyPort_valueChanged(int port);
    void on_proxyType_currentIndexChanged(int index);

private:
    void retranslateUi();

private:
    Ui::AdvancedSettings* bodyUI;
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 41 59 126 2000 40 41 59 2003 2004 40 41 2005 123 792 2006 40 362 41 59 125 773 2007 58 330 865 2008 40 41 59 865 2009 40 41 59 330 865 2010 40 41 59 865 2011 40 41 59 330 865 2012 40 41 59 865 2013 40 41 59 865 2014 40 41 59 865 2015 40 41 59 865 2016 40 704 2017 41 59 865 2018 40 704 2019 41 59 773 58 865 2020 40 41 59 773 58 2021 321 2022 42 2023 59 125 59 ,"{'AvgLine': 12, 'CountLine': 200, 'CountStmt': 72, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 37, 'MaxEssential': 4, 'SumEssential': 19, 'AvgCyclomatic': 1, 'CountLineCode': 173, 'CountStmtDecl': 38, 'MaxCyclomatic': 4, 'SumCyclomatic': 23, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 22, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 1, 'CountDeclMethod': 14, 'AltCountLineCode': 173, 'CountLineCodeExe': 37, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 22, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 38, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 24, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 23, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 12, 'CountDeclInstanceMethod': 16, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118406,C++,"class IFriendListItem
{
public:
    IFriendListItem() = default;
    virtual ~IFriendListItem();
    IFriendListItem(const IFriendListItem&) = default;
    IFriendListItem& operator=(const IFriendListItem&) = default;
    IFriendListItem(IFriendListItem&&) = default;
    IFriendListItem& operator=(IFriendListItem&&) = default;

    virtual bool isFriend() const = 0;
    virtual bool isGroup() const = 0;
    virtual bool isOnline() const = 0;
    virtual QString getNameItem() const = 0;
    virtual QDateTime getLastActivity() const = 0;
    virtual QWidget* getWidget() = 0;

    virtual int getCircleId() const
    {
        return -1;
    }

    int getNameSortedPos() const
    {
        return nameSortedPos;
    }

    void setNameSortedPos(int pos)
    {
        nameSortedPos = pos;
    }

private:
    int nameSortedPos = -1;
};",0,587 2000 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 59 2000 40 601 2000 38 41 61 613 59 2000 38 758 61 40 601 2000 38 41 61 613 59 2000 40 2000 307 41 61 613 59 2000 38 758 61 40 2000 307 41 61 613 59 864 569 2001 40 41 601 61 1500 59 864 569 2002 40 41 601 61 1500 59 864 569 2003 40 41 601 61 1500 59 864 2004 2005 40 41 601 61 1500 59 864 2006 2007 40 41 601 61 1500 59 864 2008 42 2009 40 41 61 1500 59 864 704 2010 40 41 601 123 792 45 1501 59 125 704 2011 40 41 601 123 792 2012 59 125 865 2013 40 704 2014 41 123 2015 61 2014 59 125 773 58 704 2016 61 45 1501 59 125 59 ,"{'AvgLine': 4, 'CountLine': 35, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 30, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 15, 'AltCountLineCode': 30, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 15, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 86, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118573,C++,"class GroupMessageDispatcher : public IMessageDispatcher
{
    Q_OBJECT
public:
    GroupMessageDispatcher(Group& group, MessageProcessor processor, ICoreIdHandler& idHandler,
                           ICoreGroupMessageSender& messageSender,
                           const IGroupSettings& groupSettings);

    std::pair<DispatchedMessageId, DispatchedMessageId> sendMessage(bool isAction,
                                                                    QString const& content) override;

    std::pair<DispatchedMessageId, DispatchedMessageId> sendExtendedMessage(const QString& content,
                            ExtensionSet extensions) override;
    void onMessageReceived(ToxPk const& sender, bool isAction, QString const& content);

private:
    Group& group;
    MessageProcessor processor;
    ICoreIdHandler& idHandler;
    ICoreGroupMessageSender& messageSender;
    const IGroupSettings& groupSettings;
    DispatchedMessageId nextMessageId{0};
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 2003 38 2004 44 2005 2006 44 2007 38 2008 44 2009 38 2010 44 601 2011 38 2012 41 59 2013 321 2014 60 2015 44 2015 62 2016 40 569 2017 44 2018 601 38 2019 41 2020 59 2013 321 2014 60 2015 44 2015 62 2021 40 601 2018 38 2019 44 2022 2023 41 2020 59 865 2024 40 2025 601 38 2026 44 569 2017 44 2018 601 38 2019 41 59 773 58 2003 38 2004 59 2005 2006 59 2007 38 2008 59 2009 38 2010 59 601 2011 38 2012 59 2015 2027 123 1500 125 59 125 59 ,"{'AvgLine': 16, 'CountLine': 89, 'CountStmt': 28, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 7, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 73, 'CountStmtDecl': 22, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 13, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 73, 'CountLineCodeExe': 12, 'CountLineComment': 7, 'AltAvgLineComment': 1, 'AltCountLineBlank': 9, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
118497,C++,"class AboutFriendForm : public QDialog
{
    Q_OBJECT

public:
    AboutFriendForm(std::unique_ptr<IAboutFriend> about, QWidget* parent = nullptr);
    ~AboutFriendForm();

private:
    Ui::AboutFriendForm* ui;
    const std::unique_ptr<IAboutFriend> about;

signals:
    void histroyRemoved();

public slots:
    void reloadTheme();

private slots:
    void onAutoAcceptDirChanged(const QString& path);
    void onAcceptedClicked();
    void onAutoAcceptDirClicked();
    void onAutoAcceptCallClicked();
    void onAutoGroupInvite();
    void onSelectDirClicked();
    void onRemoveHistoryClicked();
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 2003 321 2004 60 2005 62 2006 44 2007 42 2008 61 753 41 59 126 2000 40 41 59 773 58 2009 321 2000 42 2010 59 601 2003 321 2004 60 2005 62 2006 59 2011 58 865 2012 40 41 59 777 2013 58 865 2014 40 41 59 773 2013 58 865 2015 40 601 2016 38 2017 41 59 865 2018 40 41 59 865 2019 40 41 59 865 2020 40 41 59 865 2021 40 41 59 865 2022 40 41 59 865 2023 40 41 59 125 59 ,"{'AvgLine': 11, 'CountLine': 139, 'CountStmt': 30, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 7, 'MaxEssential': 3, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 119, 'CountStmtDecl': 23, 'MaxCyclomatic': 3, 'SumCyclomatic': 13, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 20, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 10, 'AltCountLineCode': 119, 'CountLineCodeExe': 6, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 20, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 98, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 7, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118533,C++,"    class FrameBufferKey
    {
    public:
        FrameBufferKey(const int width, const int height, const int pixFmt, const bool lineAligned);

        // Explictly state default constructor/destructor

        FrameBufferKey(const FrameBufferKey&) = default;
        FrameBufferKey(FrameBufferKey&&) = default;
        ~FrameBufferKey() = default;

        // Assignment operators are disabled for the FrameBufferKey

        const FrameBufferKey& operator=(const FrameBufferKey&) = delete;
        const FrameBufferKey& operator=(FrameBufferKey&&) = delete;

        bool operator==(const FrameBufferKey& other) const;
        bool operator!=(const FrameBufferKey& other) const;

        static size_t hash(const FrameBufferKey& key);

    public:
        const int frameWidth;
        const int frameHeight;
        const int pixelFormat;
        const bool linesizeAligned;
    };",0,587 2000 123 777 58 2000 40 601 704 2001 44 601 704 2002 44 601 704 2003 44 601 569 2004 41 59 330 2000 40 601 2000 38 41 61 613 59 2000 40 2000 307 41 61 613 59 126 2000 40 41 61 613 59 330 601 2000 38 758 61 40 601 2000 38 41 61 619 59 601 2000 38 758 61 40 2000 307 41 61 619 59 569 758 323 40 601 2000 38 2005 41 601 59 569 758 340 40 601 2000 38 2005 41 601 59 809 2006 2007 40 601 2000 38 2008 41 59 777 58 601 704 2009 59 601 704 2010 59 601 704 2011 59 601 569 2012 59 125 59 ,"{'AvgLine': 8, 'CountLine': 61, 'CountStmt': 22, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 46, 'CountLineCodeExe': 15, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118483,C++,"class IAudioSource : public QObject
{
    Q_OBJECT
public:
    virtual ~IAudioSource() = default;

    virtual operator bool() const = 0;

signals:
    void frameAvailable(const int16_t* pcm, size_t sample_count, uint8_t channels,
                        uint32_t sampling_rate);
    void volumeAvailable(float value);
    void invalidated();
};",0,587 2000 58 777 2001 123 2002 777 58 864 126 2000 40 41 61 613 59 864 758 569 40 41 601 61 1500 59 2003 58 865 2004 40 601 2005 42 2006 44 2007 2008 44 2009 2010 44 2011 2012 41 59 865 2013 40 660 2014 41 59 865 2015 40 41 59 125 59 ,"{'AvgLine': 0, 'CountLine': 14, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 12, 'CountStmtDecl': 4, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 12, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118427,C++,"class ActivateDialog : public QDialog
{
    Q_OBJECT
public:
#if (QT_VERSION >= QT_VERSION_CHECK(5, 15, 0))
    ActivateDialog(QWidget* parent = nullptr, Qt::WindowFlags f = Qt::WindowFlags());
#else
    ActivateDialog(QWidget* parent = nullptr, Qt::WindowFlags f = nullptr);
#endif
    bool event(QEvent* event) override;

public slots:
    virtual void reloadTheme() {}

signals:
    void windowStateChanged(Qt::WindowStates state);
};",0,587 2000 58 777 2001 123 2002 777 58 35 688 40 2003 325 2004 40 1502 44 1503 44 1500 41 41 2000 40 2005 42 2006 61 753 44 2007 321 2008 2009 61 2007 321 2008 40 41 41 59 35 630 2000 40 2005 42 2006 61 753 44 2007 321 2008 2009 61 753 41 59 35 636 569 2010 40 2011 42 2010 41 2012 59 777 2013 58 864 865 2014 40 41 123 125 2015 58 865 2016 40 2007 321 2017 2018 41 59 125 59 ,"{'AvgLine': 6, 'CountLine': 29, 'CountStmt': 4, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 22, 'CountStmtDecl': 3, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 26, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 4, 'CountLineInactive': 1, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117652,C++,"	class CompatBase
	{
	public:
		virtual ~CompatBase() = default;

		/**
		 * apply compatibility to a topic
		 * @param data input topic (can be modified in place)
		 * @return new topic data
		 */
		virtual void *apply(void *data) = 0;
	};",0,587 2000 123 777 58 864 126 2000 40 41 61 613 59 306 864 865 42 2001 40 865 42 2002 41 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 12, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 6, 'CountStmtDecl': 1, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.83', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117694,C++,"template<class T>
class IntrusiveSortedListNode
{
public:
	void setSortedSibling(T sibling) { _sorted_list_node_sibling = sibling; }
	const T getSortedSibling() const { return _sorted_list_node_sibling; }
protected:
	T _sorted_list_node_sibling{nullptr};
};",0,822 60 587 2000 62 587 2001 123 777 58 865 2002 40 2000 2003 41 123 2004 61 2003 59 125 601 2000 2005 40 41 601 123 792 2006 59 125 775 58 2000 2007 123 753 125 59 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 8, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 3, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
117698,C++,"class MavlinkStreamScaledPressure2 : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamScaledPressure2(mavlink); }

	static constexpr const char *get_name_static() { return ""SCALED_PRESSURE2""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_SCALED_PRESSURE2; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		if (_sensor_baro_sub.advertised() || _differential_pressure_sub.advertised()) {
			return MAVLINK_MSG_ID_SCALED_PRESSURE2_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		}

		return 0;
	}

private:
	explicit MavlinkStreamScaledPressure2(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _differential_pressure_sub{ORB_ID(differential_pressure), 1};
	uORB::Subscription _sensor_baro_sub{ORB_ID(sensor_baro), 1};

	bool send() override
	{
		if (_sensor_baro_sub.updated() || _differential_pressure_sub.updated()) {
			mavlink_scaled_pressure2_t msg{};

			sensor_baro_s sensor_baro;

			if (_sensor_baro_sub.copy(&sensor_baro)) {
				msg.time_boot_ms = sensor_baro.timestamp / 1000;
				msg.press_abs = sensor_baro.pressure; // millibar to hPa
				msg.temperature = roundf(sensor_baro.temperature * 100.f); // centidegrees
			}

			differential_pressure_s differential_pressure;

			if (_differential_pressure_sub.copy(&differential_pressure)) {
				if (msg.time_boot_ms == 0) {
					msg.time_boot_ms = differential_pressure.timestamp / 1000;
				}

				msg.press_diff = differential_pressure.differential_pressure_raw_pa * 100.f; // Pa to hPa
				msg.temperature_press_diff = roundf(differential_pressure.temperature * 100.f); // centidegrees
			}

			mavlink_msg_scaled_pressure2_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 688 40 2013 46 2014 40 41 309 2015 46 2014 40 41 41 123 792 2016 43 2017 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2018 321 2019 2020 123 2021 40 2022 41 44 1501 125 59 2018 321 2019 2023 123 2024 40 2025 41 44 1501 125 59 569 2026 40 41 2010 123 688 40 2023 46 2027 40 41 309 2020 46 2027 40 41 41 123 2028 2029 123 125 59 2030 2031 59 688 40 2023 46 2032 40 38 2031 41 41 123 2029 46 2033 61 2031 46 2034 47 1504 59 2029 46 2035 61 2031 46 2036 59 330 2029 46 2037 61 2038 40 2031 46 2037 42 1503 41 59 330 125 2039 2040 59 688 40 2020 46 2032 40 38 2040 41 41 123 688 40 2029 46 2041 323 1500 41 123 2029 46 2041 61 2040 46 2042 47 1504 59 125 2029 46 2043 61 2040 46 2044 42 1503 59 330 2029 46 2045 61 2046 40 2040 46 2047 42 1503 41 59 330 125 2048 40 2049 354 2050 40 41 44 38 2029 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 58, 'CountStmt': 23, 'MaxNesting': 3, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 43, 'CountStmtDecl': 13, 'MaxCyclomatic': 5, 'SumCyclomatic': 13, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 43, 'CountLineCodeExe': 6, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117757,C++,"template<typename Type, size_t M, size_t... Idxs>
class SparseVector
{
private:
	static constexpr size_t N = sizeof...(Idxs);
	static constexpr size_t _indices[N] {Idxs...};

	static constexpr bool duplicateIndices()
	{
		for (size_t i = 0; i < N; i++) {
			for (size_t j = 0; j < i; j++) {
				if (_indices[i] == _indices[j]) {
					return true;
				}
			}
		}

		return false;
	}
	static constexpr size_t findMaxIndex()
	{
		size_t maxIndex = 0;

		for (size_t i = 0; i < N; i++) {
			if (maxIndex < _indices[i]) {
				maxIndex = _indices[i];
			}
		}

		return maxIndex;
	}

	static_assert(!duplicateIndices(), ""Duplicate indices"");
	static_assert(N < M, ""More entries than elements, use a dense vector"");
	static_assert(N > 0, ""A sparse vector needs at least one element"");
	static_assert(findMaxIndex() < M, ""Largest entry doesn't fit in sparse vector"");

	Type _data[N] {};

	static constexpr int findCompressedIndex(size_t index)
	{
		int compressedIndex = -1;

		for (size_t i = 0; i < N; i++) {
			if (index == _indices[i]) {
				compressedIndex = static_cast<int>(i);
			}
		}

		return compressedIndex;
	}

public:
	constexpr size_t non_zeros() const
	{
		return N;
	}

	constexpr size_t index(size_t i) const
	{
		return SparseVector::_indices[i];
	}

	SparseVector() = default;

	SparseVector(const matrix::Vector<Type, M> &data)
	{
		for (size_t i = 0; i < N; i++) {
			_data[i] = data(_indices[i]);
		}
	}

	explicit SparseVector(const Type data[N])
	{
		memcpy(_data, data, sizeof(_data));
	}

	template <size_t i>
	inline Type at() const
	{
		static constexpr int compressed_index = force_constexpr_eval<findCompressedIndex(i)>::value;
		static_assert(compressed_index >= 0, ""cannot access unpopulated indices"");
		return _data[compressed_index];
	}

	template <size_t i>
	inline Type &at()
	{
		static constexpr int compressed_index = force_constexpr_eval<findCompressedIndex(i)>::value;
		static_assert(compressed_index >= 0, ""cannot access unpopulated indices"");
		return _data[compressed_index];
	}

	inline Type atCompressedIndex(size_t i) const
	{
		assert(i < N);
		return _data[i];
	}

	inline Type &atCompressedIndex(size_t i)
	{
		assert(i < N);
		return _data[i];
	}

	void setZero()
	{
		for (size_t i = 0; i < N; i++) {
			_data[i] = Type(0);
		}
	}

	Type dot(const matrix::Vector<Type, M> &other) const
	{
		Type accum(0);

		for (size_t i = 0; i < N; i++) {
			accum += _data[i] * other(_indices[i]);
		}

		return accum;
	}

	matrix::Vector<Type, M> operator+(const matrix::Vector<Type, M> &other) const
	{
		matrix::Vector<Type, M> vec = other;

		for (size_t i = 0; i < N; i++) {
			vec(_indices[i]) +=  _data[i];
		}

		return vec;
	}

	SparseVector &operator+=(Type t)
	{
		for (size_t i = 0; i < N; i++) {
			_data[i] += t;
		}

		return *this;
	}

	Type norm_squared() const
	{
		Type accum(0);

		for (size_t i = 0; i < N; i++) {
			accum += _data[i] * _data[i];
		}

		return accum;
	}

	Type norm() const
	{
		return matrix::sqrt(norm_squared());
	}

	bool longerThan(Type testVal) const
	{
		return norm_squared() > testVal * testVal;
	}
};",0,822 60 835 2000 44 2001 2002 44 2001 322 2003 62 587 2004 123 773 58 809 603 2001 2005 61 805 322 40 2003 41 59 809 603 2001 2006 91 2005 93 123 2003 322 125 59 809 603 569 2007 40 41 123 664 40 2001 2008 61 1500 59 2008 60 2005 59 2008 349 41 123 664 40 2001 2009 61 1500 59 2009 60 2008 59 2009 349 41 123 688 40 2006 91 2008 93 323 2006 91 2009 93 41 123 792 829 59 125 125 125 792 655 59 125 809 603 2001 2010 40 41 123 2001 2011 61 1500 59 664 40 2001 2012 61 1500 59 2012 60 2005 59 2012 349 41 123 688 40 2011 60 2006 91 2012 93 41 123 2011 61 2006 91 2012 93 59 125 125 792 2011 59 125 810 40 33 2007 40 41 44 362 41 59 810 40 2005 60 2002 44 362 41 59 810 40 2005 62 1500 44 362 41 59 810 40 2010 40 41 60 2002 44 362 41 59 2000 2013 91 2005 93 123 125 59 809 603 704 2014 40 2001 2015 41 123 704 2016 61 45 1501 59 664 40 2001 2017 61 1500 59 2017 60 2005 59 2017 349 41 123 688 40 2015 323 2006 91 2017 93 41 123 2016 61 811 60 704 62 40 2017 41 59 125 125 792 2016 59 125 777 58 603 2001 2018 40 41 601 123 792 2005 59 125 603 2001 2015 40 2001 2019 41 601 123 792 2004 321 2006 91 2019 93 59 125 2004 40 41 61 613 59 2004 40 601 2020 321 2021 60 2000 44 2002 62 38 2022 41 123 664 40 2001 2019 61 1500 59 2019 60 2005 59 2019 349 41 123 2013 91 2019 93 61 2022 40 2006 91 2019 93 41 59 125 125 648 2004 40 601 2000 2022 91 2005 93 41 123 2023 40 2013 44 2022 44 805 40 2013 41 41 59 125 822 60 2001 2019 62 700 2000 2024 40 41 601 123 809 603 704 2025 61 2026 60 2014 40 2019 41 62 321 2027 59 810 40 2025 325 1500 44 362 41 59 792 2013 91 2025 93 59 125 822 60 2001 2019 62 700 2000 38 2024 40 41 123 809 603 704 2028 61 2029 60 2014 40 2019 41 62 321 2030 59 810 40 2028 325 1500 44 362 41 59 792 2013 91 2028 93 59 125 700 2000 2031 40 2001 2019 41 601 123 2032 40 2019 60 2005 41 59 792 2013 91 2019 93 59 125 700 2000 38 2031 40 2001 2019 41 123 2033 40 2019 60 2005 41 59 792 2013 91 2019 93 59 125 865 2034 40 41 123 664 40 2001 2019 61 1500 59 2019 60 2005 59 2019 349 41 123 2013 91 2019 93 61 2000 40 1500 41 59 125 125 2000 2035 40 601 2020 321 2021 60 2000 44 2002 62 38 2036 41 601 123 2000 2037 40 1500 41 59 664 40 2001 2019 61 1500 59 2019 60 2005 59 2019 349 41 123 2037 348 2013 91 2019 93 42 2036 40 2006 91 2019 93 41 59 125 792 2037 59 125 2020 321 2021 60 2000 44 2002 62 758 43 40 601 2020 321 2021 60 2000 44 2002 62 38 2036 41 601 123 2020 321 2021 60 2000 44 2002 62 2038 61 2036 59 664 40 2001 2019 61 1500 59 2019 60 2005 59 2019 349 41 123 2038 40 2006 91 2019 93 41 348 2013 91 2019 93 59 125 792 2038 59 125 2004 38 758 348 40 2000 2039 41 123 664 40 2001 2019 61 1500 59 2019 60 2005 59 2019 349 41 123 2013 91 2019 93 348 2039 59 125 792 42 823 59 125 2000 2040 40 41 601 123 2000 2041 40 1500 41 59 664 40 2001 2019 61 1500 59 2019 60 2005 59 2019 349 41 123 2041 348 2013 91 2019 93 42 2013 91 2019 93 59 125 792 2041 59 125 2000 2042 40 41 601 123 792 2020 321 2043 40 2040 40 41 41 59 125 569 2044 40 2000 2045 41 601 123 792 2040 40 41 62 2045 42 2045 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 163, 'CountStmt': 86, 'MaxNesting': 3, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 60, 'MaxEssential': 4, 'SumEssential': 21, 'AvgCyclomatic': 1, 'CountLineCode': 131, 'CountStmtDecl': 46, 'MaxCyclomatic': 4, 'SumCyclomatic': 33, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 32, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 19, 'AltCountLineCode': 131, 'CountLineCodeExe': 49, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 32, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 36, 'CountLineInactive': 0, 'CountDeclMethodAll': 19, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 33, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 9, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 16, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 47, 'SumCyclomaticModified': 33, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 16, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99524,C++,"class SAFERasterBand final: public GDALPamRasterBand
{
    std::unique_ptr<GDALDataset> poBandFile{};

  public:
             SAFERasterBand(SAFEDataset *poDSIn,
                            GDALDataType eDataTypeIn,
                            const CPLString &osSwath,
                            const CPLString &osPol,
                            std::unique_ptr<GDALDataset>&& poBandFileIn);

    virtual CPLErr IReadBlock( int, int, void * ) override;

    static GDALDataset *Open( GDALOpenInfo * );
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 123 125 59 777 58 2000 40 2007 42 2008 44 2009 2010 44 601 2011 38 2012 44 601 2011 38 2013 44 2003 321 2004 60 2005 62 307 2014 41 59 864 2015 2016 40 704 44 704 44 865 42 41 2017 59 809 2005 42 2018 40 2019 42 41 59 125 59 ,"{'AvgLine': 54, 'CountLine': 123, 'CountStmt': 30, 'MaxNesting': 1, 'AvgLineCode': 41, 'AvgEssential': 2, 'AvgLineBlank': 4, 'CountStmtExe': 19, 'MaxEssential': 3, 'SumEssential': 4, 'AvgCyclomatic': 4, 'CountLineCode': 95, 'CountStmtDecl': 8, 'MaxCyclomatic': 5, 'SumCyclomatic': 8, 'AltAvgLineCode': 41, 'AvgLineComment': 8, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 95, 'CountLineCodeExe': 23, 'CountLineComment': 16, 'AltAvgLineComment': 8, 'AltCountLineBlank': 12, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 131, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.17', 'AltCountLineComment': 16, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 4, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118523,C++,"class GroupChatroom : public QObject, public Chatroom
{
    Q_OBJECT
public:
    GroupChatroom(Group* group, IDialogsManager* dialogsManager, Core& _core);

    Contact* getContact() override;

    Group* getGroup();

    bool hasNewMessage() const;
    void resetEventFlags();

    bool friendExists(const ToxPk& pk);
    void inviteFriend(const ToxPk& pk);

    bool possibleToOpenInNewWindow() const;
    bool canBeRemovedFromWindow() const;
    void removeGroupFromDialogs();

private:
    Group* group{nullptr};
    IDialogsManager* dialogsManager{nullptr};
    Core& core;
};",0,587 2000 58 777 2001 44 777 2002 123 2003 777 58 2000 40 2004 42 2005 44 2006 42 2007 44 2008 38 2009 41 59 2010 42 2011 40 41 2012 59 2004 42 2013 40 41 59 569 2014 40 41 601 59 865 2015 40 41 59 569 2016 40 601 2017 38 2018 41 59 865 2019 40 601 2017 38 2018 41 59 569 2020 40 41 601 59 569 2021 40 41 601 59 865 2022 40 41 59 773 58 2004 42 2005 123 753 125 59 2006 42 2007 123 753 125 59 2008 38 2023 59 125 59 ,"{'AvgLine': 5, 'CountLine': 81, 'CountStmt': 35, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 74, 'CountStmtDecl': 25, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 74, 'CountLineCodeExe': 23, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 64, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 9, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
118599,C++,"class MockGroupMessageSender : public ICoreGroupMessageSender
{
public:
    void sendGroupAction(int groupId, const QString& action) override;

    void sendGroupMessage(int groupId, const QString& message) override;

    size_t numSentActions = 0;
    size_t numSentMessages = 0;
};",0,587 2000 58 777 2001 123 777 58 865 2002 40 704 2003 44 601 2004 38 2005 41 2006 59 865 2007 40 704 2003 44 601 2004 38 2008 41 2006 59 2009 2010 61 1500 59 2009 2011 61 1500 59 125 59 ,"{'AvgLine': 4, 'CountLine': 18, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 16, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 16, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118451,C++,"class ToolBoxGraphicsItem final : public QObject, public QGraphicsItemGroup
{
    Q_OBJECT
    Q_PROPERTY(qreal opacity READ opacity WRITE setOpacity)
public:
    ToolBoxGraphicsItem();
    ~ToolBoxGraphicsItem();

    void paint(QPainter* painter, const QStyleOptionGraphicsItem* option,
                       QWidget* widget) final;

protected:
    void hoverEnterEvent(QGraphicsSceneHoverEvent* event) final;
    void hoverLeaveEvent(QGraphicsSceneHoverEvent* event) final;

private:
    void startAnimation(QAbstractAnimation::Direction direction);

    QPropertyAnimation* opacityAnimation;
    qreal idleOpacity = 0.0f;
    qreal activeOpacity = 1.0f;
    int fadeTimeMs = 300;
};",0,587 2000 2001 58 777 2002 44 777 2003 123 2004 2005 40 2006 2007 2008 2007 2009 2010 41 777 58 2000 40 41 59 126 2000 40 41 59 865 2011 40 2012 42 2013 44 601 2014 42 2015 44 2016 42 2017 41 2001 59 775 58 865 2018 40 2019 42 2020 41 2001 59 865 2021 40 2019 42 2020 41 2001 59 773 58 865 2022 40 2023 321 2024 2025 41 59 2026 42 2027 59 2006 2028 61 1500 59 2006 2029 61 1501 59 704 2030 61 1504 59 125 59 ,"{'AvgLine': 6, 'CountLine': 62, 'CountStmt': 17, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 55, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 55, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118530,C++,"class MockFriendMessageSender : public ICoreFriendMessageSender
{
public:
    bool sendAction(uint32_t friendId, const QString& action, ReceiptNum& receipt) override;

    bool sendMessage(uint32_t friendId, const QString& message, ReceiptNum& receipt) override;

    bool canSend = true;
    ReceiptNum receiptNum{0};
    size_t numSentActions = 0;
    size_t numSentMessages = 0;
};",0,587 2000 58 777 2001 123 777 58 569 2002 40 2003 2004 44 601 2005 38 2006 44 2007 38 2008 41 2009 59 569 2010 40 2003 2004 44 601 2005 38 2011 44 2007 38 2008 41 2009 59 569 2012 61 829 59 2007 2013 123 1500 125 59 2014 2015 61 1500 59 2014 2016 61 1500 59 125 59 ,"{'AvgLine': 9, 'CountLine': 30, 'CountStmt': 12, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 28, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 28, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118445,C++,"class FriendChatroom : public QObject, public Chatroom
{
    Q_OBJECT
public:
    FriendChatroom(Friend* frnd, IDialogsManager* dialogsManager, Core& _core);

    Contact* getContact() override;

public slots:

    Friend* getFriend();

    void setActive(bool active);

    bool canBeInvited() const;

    int getCircleId() const;
    QString getCircleName() const;

    void inviteToNewGroup();
    void inviteFriend(const Group* group);

    bool autoAcceptEnabled() const;
    QString getAutoAcceptDir() const;
    void disableAutoAccept();
    void setAutoAcceptDir(const QString& dir);

    QVector<GroupToDisplay> getGroups() const;
    QVector<CircleToDisplay> getOtherCircles() const;

    void resetEventFlags();

    bool possibleToOpenInNewWindow() const;
    bool canBeRemovedFromWindow() const;
    bool friendCanBeRemoved() const;
    void removeFriendFromDialogs();

signals:
    void activeChanged(bool activated);

private:
    bool active{false};
    Friend* frnd{nullptr};
    IDialogsManager* dialogsManager{nullptr};
    Core& core;
};",0,587 2000 58 777 2001 44 777 2002 123 2003 777 58 2000 40 2004 42 2005 44 2006 42 2007 44 2008 38 2009 41 59 2010 42 2011 40 41 2012 59 777 2013 58 2004 42 2014 40 41 59 865 2015 40 569 2016 41 59 569 2017 40 41 601 59 704 2018 40 41 601 59 2019 2020 40 41 601 59 865 2021 40 41 59 865 2022 40 601 2023 42 2024 41 59 569 2025 40 41 601 59 2019 2026 40 41 601 59 865 2027 40 41 59 865 2028 40 601 2019 38 2029 41 59 2030 60 2031 62 2032 40 41 601 59 2030 60 2033 62 2034 40 41 601 59 865 2035 40 41 59 569 2036 40 41 601 59 569 2037 40 41 601 59 569 2038 40 41 601 59 865 2039 40 41 59 2040 58 865 2041 40 569 2042 41 59 773 58 569 2016 123 655 125 59 2004 42 2005 123 753 125 59 2006 42 2007 123 753 125 59 2008 38 2043 59 125 59 ,"{'AvgLine': 6, 'CountLine': 173, 'CountStmt': 72, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 38, 'MaxEssential': 3, 'SumEssential': 22, 'AvgCyclomatic': 1, 'CountLineCode': 156, 'CountStmtDecl': 53, 'MaxCyclomatic': 3, 'SumCyclomatic': 23, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 20, 'AltCountLineCode': 156, 'CountLineCodeExe': 39, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 17, 'CountClassCoupled': 11, 'CountClassDerived': 0, 'CountLineCodeDecl': 46, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 26, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 10, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 19, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 23, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 26, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
118494,C++,"class FlyoutOverlayWidget : public QWidget
{
    Q_OBJECT
    Q_PROPERTY(qreal flyoutPercent READ flyoutPercent WRITE setFlyoutPercent)
public:
    explicit FlyoutOverlayWidget(QWidget* parent = nullptr);
    ~FlyoutOverlayWidget();

    int animationDuration() const;
    void setAnimationDuration(int timeMs);

    qreal flyoutPercent() const;
    void setFlyoutPercent(qreal progress);

    bool isShown() const;
    bool isBeingAnimated() const;
    bool isBeingShown() const;

    void animateShow();
    void animateHide();

signals:

    void hidden();

private:
    void finishedAnimation();
    void startAnimation(bool forward);

    QWidget* container;
    QPropertyAnimation* animation;
    qreal percent = 1.0f;
    QPoint startPos;
};",0,587 2000 58 777 2001 123 2002 2003 40 2004 2005 2006 2005 2007 2008 41 777 58 648 2000 40 2001 42 2009 61 753 41 59 126 2000 40 41 59 704 2010 40 41 601 59 865 2011 40 704 2012 41 59 2004 2005 40 41 601 59 865 2008 40 2004 2013 41 59 569 2014 40 41 601 59 569 2015 40 41 601 59 569 2016 40 41 601 59 865 2017 40 41 59 865 2018 40 41 59 2019 58 865 2020 40 41 59 773 58 865 2021 40 41 59 865 2022 40 569 2023 41 59 2001 42 2024 59 2025 42 2026 59 2004 2027 61 1501 59 2028 2029 59 125 59 ,"{'AvgLine': 6, 'CountLine': 116, 'CountStmt': 30, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 100, 'CountStmtDecl': 20, 'MaxCyclomatic': 3, 'SumCyclomatic': 16, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 14, 'AltCountLineCode': 100, 'CountLineCodeExe': 7, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 11, 'CountDeclInstanceMethod': 16, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118548,C++,"class MockCoreIdHandler : public ICoreIdHandler
{
public:
    MockCoreIdHandler() = default;
    virtual ~MockCoreIdHandler();
    MockCoreIdHandler(const MockCoreIdHandler&) = default;
    MockCoreIdHandler& operator=(const MockCoreIdHandler&) = default;
    MockCoreIdHandler(MockCoreIdHandler&&) = default;
    MockCoreIdHandler& operator=(MockCoreIdHandler&&) = default;

    ToxId getSelfId() const override
    {
        std::terminate();
        return ToxId();
    }

    ToxPk getSelfPublicKey() const override
    {
        static uint8_t id[TOX_PUBLIC_KEY_SIZE] = {0};
        return ToxPk(id);
    }

    QString getUsername() const override
    {
        return ""me"";
    }
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 59 2000 40 601 2000 38 41 61 613 59 2000 38 758 61 40 601 2000 38 41 61 613 59 2000 40 2000 307 41 61 613 59 2000 38 758 61 40 2000 307 41 61 613 59 2002 2003 40 41 601 2004 123 2005 321 2006 40 41 59 792 2002 40 41 59 125 2007 2008 40 41 601 2004 123 809 2009 2010 91 2011 93 61 123 1500 125 59 792 2007 40 2010 41 59 125 2012 2013 40 41 601 2004 123 792 362 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 27, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 24, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118105,C++,"class GeoTest : public ::testing::Test
{
public:
	void SetUp() override
	{
		proj.initReference(math::radians(473566094 / 1e7), math::radians(85190237 / 1e7), 0);
	}

protected:
	MapProjection proj;

};",0,587 2000 58 777 321 2001 321 2002 123 777 58 865 2003 40 41 2004 123 2005 46 2006 40 2007 321 2008 40 1510 47 1508 41 44 2007 321 2008 40 1509 47 1508 41 44 1500 41 59 125 775 58 2009 2010 59 125 59 ,"{'AvgLine': 4, 'CountLine': 12, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 10, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
118606,C++,"class PasswordEdit : public QLineEdit
{
    Q_OBJECT
public:
    explicit PasswordEdit(QWidget* parent);
    ~PasswordEdit();

protected:
    virtual void showEvent(QShowEvent* event);
    virtual void hideEvent(QHideEvent* event);

private:
    class EventHandler : QObject
    {
    public:
        QVector<QAction*> actions;

        EventHandler();
        ~EventHandler();
        void updateActions();
        bool eventFilter(QObject* obj, QEvent* event);
    };

    void registerHandler();
    void unregisterHandler();

private:
    QAction* action;

    static EventHandler* eventHandler;
};",0,587 2000 58 777 2001 123 2002 777 58 648 2000 40 2003 42 2004 41 59 126 2000 40 41 59 775 58 864 865 2005 40 2006 42 2007 41 59 864 865 2008 40 2009 42 2007 41 59 773 58 587 2010 58 2011 123 777 58 2012 60 2013 42 62 2014 59 2010 40 41 59 126 2010 40 41 59 865 2015 40 41 59 569 2016 40 2011 42 2017 44 2018 42 2007 41 59 125 59 865 2019 40 41 59 865 2020 40 41 59 773 58 2021 42 2022 59 809 2010 42 2023 59 125 59 ,"{'AvgLine': 8, 'CountLine': 81, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 49, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 73, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 17, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 8, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118425,C++,"class SettingsWidget : public QWidget
{
    Q_OBJECT
public:
    SettingsWidget(UpdateCheck* updateCheck, IAudioControl& audio, Core *core, Widget* parent = nullptr);
    ~SettingsWidget();

    bool isShown() const;
    void show(ContentLayout* contentLayout);
    void setBodyHeadStyle(QString style);

    void showAbout();

public slots:
    void onUpdateAvailable(void);

private slots:
    void onTabChanged(int);

private:
    void retranslateUi();

private:
    std::unique_ptr<QVBoxLayout> bodyLayout;
    std::unique_ptr<QTabWidget> settingsWidgets;
    std::array<std::unique_ptr<GenericForm>, 6> cfgForms;
    int currentIndex;
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 2003 42 2004 44 2005 38 2006 44 2007 42 2008 44 2009 42 2010 61 753 41 59 126 2000 40 41 59 569 2011 40 41 601 59 865 2012 40 2013 42 2014 41 59 865 2015 40 2016 2017 41 59 865 2018 40 41 59 777 2019 58 865 2020 40 865 41 59 773 2019 58 865 2021 40 704 41 59 773 58 865 2022 40 41 59 773 58 2023 321 2024 60 2025 62 2026 59 2023 321 2024 60 2027 62 2028 59 2023 321 2029 60 2023 321 2024 60 2030 62 44 1502 62 2031 59 704 2032 59 125 59 ,"{'AvgLine': 9, 'CountLine': 115, 'CountStmt': 30, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 91, 'CountStmtDecl': 25, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 10, 'AltCountLineCode': 98, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 17, 'CountClassCoupled': 13, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 5, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 6, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118555,C++,"class PrivacyForm : public GenericForm
{
    Q_OBJECT
public:
    PrivacyForm(Core* _core);
    ~PrivacyForm();
    QString getFormName() final
    {
        return tr(""Privacy"");
    }

signals:
    void clearAllReceipts();

private slots:
    void on_cbKeepHistory_stateChanged();
    void on_cbTypingNotification_stateChanged();
    void on_nospamLineEdit_editingFinished();
    void on_randomNosapamButton_clicked();
    void on_nospamLineEdit_textChanged();
    void on_blackListTextEdit_textChanged();
    void showEvent(QShowEvent*) final;

private:
    void retranslateUi();

private:
    Ui::PrivacySettings* bodyUI;
    Core* core;
};",0,587 2000 58 777 2001 123 2002 777 58 2000 40 2003 42 2004 41 59 126 2000 40 41 59 2005 2006 40 41 2007 123 792 2008 40 362 41 59 125 2009 58 865 2010 40 41 59 773 2011 58 865 2012 40 41 59 865 2013 40 41 59 865 2014 40 41 59 865 2015 40 41 59 865 2016 40 41 59 865 2017 40 41 59 865 2018 40 2019 42 41 2007 59 773 58 865 2020 40 41 59 773 58 2021 321 2022 42 2023 59 2003 42 2024 59 125 59 ,"{'AvgLine': 8, 'CountLine': 114, 'CountStmt': 39, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 104, 'CountStmtDecl': 26, 'MaxCyclomatic': 3, 'SumCyclomatic': 15, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 104, 'CountLineCodeExe': 15, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 8, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
123833,C++,"class CpuBackend : public IBackend
{
public:
    XMRIG_DISABLE_COPY_MOVE_DEFAULT(CpuBackend)

    CpuBackend(Controller *controller);
    ~CpuBackend() override;

protected:
    inline void execCommand(char) override {}

    bool isEnabled() const override;
    bool isEnabled(const Algorithm &algorithm) const override;
    bool tick(uint64_t ticks) override;
    const Hashrate *hashrate() const override;
    const String &profileName() const override;
    const String &type() const override;
    void prepare(const Job &nextJob) override;
    void printHashrate(bool details) override;
    void printHealth() override;
    void setJob(const Job &job) override;
    void start(IWorker *worker, bool ready) override;
    void stop() override;

#   ifdef XMRIG_FEATURE_API
    rapidjson::Value toJSON(rapidjson::Document &doc) const override;
    void handleRequest(IApiRequest &request) override;
#   endif

#   ifdef XMRIG_FEATURE_BENCHMARK
    Benchmark *benchmark() const override;
    void printBenchProgress() const override;
#   endif

private:
    CpuBackendPrivate *d_ptr;
};",0,587 2000 58 777 2001 123 777 58 2002 40 2000 41 2000 40 2003 42 2004 41 59 126 2000 40 41 2005 59 775 58 700 865 2006 40 582 41 2005 123 125 569 2007 40 41 601 2005 59 569 2007 40 601 2008 38 2009 41 601 2005 59 569 2010 40 2011 2012 41 2005 59 601 2013 42 2014 40 41 601 2005 59 601 2015 38 2016 40 41 601 2005 59 601 2015 38 2017 40 41 601 2005 59 865 2018 40 601 2019 38 2020 41 2005 59 865 2021 40 569 2022 41 2005 59 865 2023 40 41 2005 59 865 2024 40 601 2019 38 2025 41 2005 59 865 2026 40 2027 42 2028 44 569 2029 41 2005 59 865 2030 40 41 2005 59 35 689 2031 2032 321 2033 2034 40 2032 321 2035 38 2036 41 601 2005 59 865 2037 40 2038 38 2039 41 2005 59 35 636 35 689 2040 2041 42 2042 40 41 601 2005 59 865 2043 40 41 601 2005 59 35 636 773 58 2044 42 2045 59 125 59 ,"{'AvgLine': 9, 'CountLine': 177, 'CountStmt': 63, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 44, 'MaxEssential': 4, 'SumEssential': 18, 'AvgCyclomatic': 1, 'CountLineCode': 127, 'CountStmtDecl': 25, 'MaxCyclomatic': 4, 'SumCyclomatic': 23, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 25, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 20, 'AltCountLineCode': 152, 'CountLineCodeExe': 61, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 25, 'CountClassCoupled': 18, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 17, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 27, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 8, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 44, 'SumCyclomaticModified': 23, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 20, 'CountDeclMethodProtected': 13, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
123879,C++,"class CpuBackendPrivate
{
public:
    inline explicit CpuBackendPrivate(Controller *controller) : controller(controller)   {}


    inline void start()
    {
        LOG_INFO(""%s use profile "" BLUE_BG(WHITE_BOLD_S "" %s "") WHITE_BOLD_S "" ("" CYAN_BOLD(""%zu"") WHITE_BOLD("" thread%s)"") "" scratchpad "" CYAN_BOLD(""%zu KB""),
                 Tags::cpu(),
                 profileName.data(),
                 threads.size(),
                 threads.size() > 1 ? ""s"" : """",
                 algo.l3() / 1024
                 );

        status.start(threads, algo.l3());

#       ifdef XMRIG_FEATURE_BENCHMARK
        workers.start(threads, benchmark);
#       else
        workers.start(threads);
#       endif
    }


    size_t ways() const
    {
        std::lock_guard<std::mutex> lock(mutex);

        return status.ways();
    }


    rapidjson::Value hugePages(int version, rapidjson::Document &doc) const
    {
        HugePagesInfo pages;

    #   ifdef XMRIG_ALGO_RANDOMX
        if (algo.family() == Algorithm::RANDOM_X) {
            pages += Rx::hugePages();
        }
    #   endif

        mutex.lock();

        pages += status.hugePages();

        mutex.unlock();

        rapidjson::Value hugepages;

        if (version > 1) {
            hugepages.SetArray();
            hugepages.PushBack(static_cast<uint64_t>(pages.allocated), doc.GetAllocator());
            hugepages.PushBack(static_cast<uint64_t>(pages.total), doc.GetAllocator());
        }
        else {
            hugepages = pages.isFullyAllocated();
        }

        return hugepages;
    }


    Algorithm algo;
    Controller *controller;
    CpuLaunchStatus status;
    std::vector<CpuLaunchData> threads;
    String profileName;
    Workers<CpuLaunchData> workers;

#   ifdef XMRIG_FEATURE_BENCHMARK
    std::shared_ptr<Benchmark> benchmark;
#   endif
};",0,587 2000 123 777 58 700 648 2000 40 2001 42 2002 41 58 2002 40 2002 41 123 125 700 865 2003 40 41 123 2004 40 362 2005 40 2006 362 41 2006 362 2007 40 362 41 2008 40 362 41 362 2007 40 362 41 44 2009 321 2010 40 41 44 2011 46 2012 40 41 44 2013 46 2014 40 41 44 2013 46 2014 40 41 62 1501 63 362 58 362 44 2015 46 2016 40 41 47 1505 41 59 2017 46 2003 40 2013 44 2015 46 2016 40 41 41 59 35 689 2018 2019 46 2003 40 2013 44 2020 41 59 35 630 2019 46 2003 40 2013 41 59 35 636 125 2021 2022 40 41 601 123 2023 321 2024 60 2023 321 2025 62 2026 40 2025 41 59 792 2027 46 2022 40 41 59 125 2028 321 2029 2030 40 704 2031 44 2028 321 2032 38 2033 41 601 123 2034 2035 59 35 689 2036 688 40 2037 46 2038 40 41 323 2039 321 2040 41 123 2035 348 2041 321 2030 40 41 59 125 35 636 2042 46 2043 40 41 59 2035 348 2044 46 2030 40 41 59 2042 46 2045 40 41 59 2028 321 2029 2046 59 688 40 2031 62 1501 41 123 2046 46 2047 40 41 59 2046 46 2048 40 811 60 2049 62 40 2035 46 2050 41 44 2033 46 2051 40 41 41 59 2046 46 2048 40 811 60 2049 62 40 2035 46 2052 41 44 2033 46 2051 40 41 41 59 125 630 123 2046 61 2035 46 2053 40 41 59 125 792 2046 59 125 2054 2055 59 2001 42 2002 59 2056 2057 59 2058 321 2059 60 2060 62 2061 59 2062 2063 59 2064 60 2060 62 2065 59 35 689 2066 2058 321 2067 60 2068 62 2069 59 35 636 125 59 ,"{'AvgLine': 13, 'CountLine': 76, 'CountStmt': 32, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 16, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 18, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 19, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 57, 'CountLineCodeExe': 17, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 19, 'CountClassCoupled': 14, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 5, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 7, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 56, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117695,C++,"class RoverLandDetector : public LandDetector
{
public:
	RoverLandDetector() = default;
	~RoverLandDetector() override = default;

protected:
	bool _get_ground_contact_state() override;
	bool _get_landed_state() override;
	void _set_hysteresis_factor(const int factor) override {};
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 126 2000 40 41 2002 61 613 59 775 58 569 2003 40 41 2002 59 569 2004 40 41 2002 59 865 2005 40 601 704 2006 41 2002 123 125 59 125 59 ,"{'AvgLine': 4, 'CountLine': 23, 'CountStmt': 7, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 3, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 21, 'CountLineCodeExe': 4, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 72, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118190,C++,"class VtolLandDetector : public MulticopterLandDetector
{
public:
	VtolLandDetector() = default;
	~VtolLandDetector() override = default;

protected:
	void _update_topics() override;
	bool _get_landed_state() override;
	bool _get_maybe_landed_state() override;
	bool _get_freefall_state() override;

private:
	uORB::Subscription _airspeed_validated_sub{ORB_ID(airspeed_validated)};

	bool _was_in_air{false}; /**< indicates whether the vehicle was in the air in the previous iteration */
	float _airspeed_filtered{0.0f}; /**< low pass filtered airspeed */

	DEFINE_PARAMETERS_CUSTOM_PARENT(
		MulticopterLandDetector,
		(ParamFloat<px4::params::LNDFW_AIRSPD_MAX>) _param_lndfw_airspd_max
	);
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 126 2000 40 41 2002 61 613 59 775 58 865 2003 40 41 2002 59 569 2004 40 41 2002 59 569 2005 40 41 2002 59 569 2006 40 41 2002 59 773 58 2007 321 2008 2009 123 2010 40 2011 41 125 59 569 2012 123 655 125 59 306 660 2013 123 1500 125 59 306 2014 40 2001 44 40 2015 60 2016 321 2017 321 2018 62 41 2019 41 59 125 59 ,"{'AvgLine': 12, 'CountLine': 76, 'CountStmt': 25, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 53, 'CountStmtDecl': 12, 'MaxCyclomatic': 4, 'SumCyclomatic': 9, 'AltAvgLineCode': 8, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 7, 'AltCountLineCode': 53, 'CountLineCodeExe': 11, 'CountLineComment': 11, 'AltAvgLineComment': 2, 'AltCountLineBlank': 14, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 93, 'MaxInheritanceTree': 5, 'RatioCommentToCode': '0.21', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 94, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 5, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
117545,C++,"class FactoryCalibrationStorage
{
public:
	FactoryCalibrationStorage();
	~FactoryCalibrationStorage() { cleanup(); }

	/**
	 * open the storage & disable param autosaving
	 * @return 0 on success, <0 error otherwise
	 */
	int open();

	/**
	 * store the calibration parameters
	 * Note: this method requires a lot of stack
	 * @return 0 on success, <0 error otherwise
	 */
	int store();

private:
	void cleanup();

	bool _enabled{false};
	int _fd{-1};
};",0,587 2000 123 777 58 2000 40 41 59 126 2000 40 41 123 2001 40 41 59 125 306 704 2002 40 41 59 306 704 2003 40 41 59 773 58 865 2004 40 41 59 569 2005 123 655 125 59 704 2006 123 45 1501 125 59 125 59 ,"{'AvgLine': 10, 'CountLine': 76, 'CountStmt': 32, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 23, 'MaxEssential': 3, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 55, 'CountStmtDecl': 9, 'MaxCyclomatic': 5, 'SumCyclomatic': 14, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 55, 'CountLineCodeExe': 20, 'CountLineComment': 9, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.16', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99910,C++,"    class vector_safe_bool {
        bool value;
    public:
        vector_safe_bool() = default;
        // cppcheck-suppress noExplicitConstructor
        vector_safe_bool(bool b) : value{b} {}

        bool *operator&() noexcept { return &value; }
        const bool *operator&() const noexcept { return &value; }

        operator const bool &() const noexcept { return value; }
        operator bool &() noexcept { return value; }
    };",0,587 2000 123 569 2001 59 777 58 2000 40 41 61 613 59 330 2000 40 569 2002 41 58 2001 123 2002 125 123 125 569 42 758 38 40 41 748 123 792 38 2001 59 125 601 569 42 758 38 40 41 601 748 123 792 38 2001 59 125 758 601 569 38 40 41 601 748 123 792 2001 59 125 758 569 38 40 41 748 123 792 2001 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 13, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 10, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 16, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117627,C++,"class PX4Barometer
{
public:
	PX4Barometer(uint32_t device_id);
	~PX4Barometer();

	const sensor_baro_s &get() { return _sensor_baro_pub.get(); }

	void set_device_type(uint8_t devtype);
	void set_error_count(uint64_t error_count) { _sensor_baro_pub.get().error_count = error_count; }

	void set_temperature(float temperature) { _sensor_baro_pub.get().temperature = temperature; }

	void update(const hrt_abstime &timestamp_sample, float pressure);

	int get_instance() { return _sensor_baro_pub.get_instance(); };

private:

	uORB::PublicationMultiData<sensor_baro_s> _sensor_baro_pub{ORB_ID(sensor_baro)};
};",0,587 2000 123 777 58 2000 40 2001 2002 41 59 126 2000 40 41 59 601 2003 38 2004 40 41 123 792 2005 46 2004 40 41 59 125 865 2006 40 2007 2008 41 59 865 2009 40 2010 2011 41 123 2012 46 2004 40 41 46 2011 61 2011 59 125 865 2013 40 660 2014 41 123 2015 46 2004 40 41 46 2014 61 2014 59 125 865 2016 40 601 2017 38 2018 44 660 2019 41 59 704 2020 40 41 123 792 2021 46 2020 40 41 59 125 59 773 58 2022 321 2023 60 2003 62 2024 123 2025 40 2026 41 125 59 125 59 ,"{'AvgLine': 4, 'CountLine': 50, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 37, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 37, 'CountLineCodeExe': 0, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117638,C++,"class MagneticFieldStrength2 :
	public UavcanPublisherBase,
	public uORB::SubscriptionCallbackWorkItem,
	private uavcan::Publisher<uavcan::equipment::ahrs::MagneticFieldStrength2>
{
public:
	MagneticFieldStrength2(px4::WorkItem *work_item, uavcan::INode &node) :
		UavcanPublisherBase(uavcan::equipment::ahrs::MagneticFieldStrength2::DefaultDataTypeID),
		uORB::SubscriptionCallbackWorkItem(work_item, ORB_ID(sensor_mag)),
		uavcan::Publisher<uavcan::equipment::ahrs::MagneticFieldStrength2>(node)
	{
		this->setPriority(uavcan::TransferPriority::Default);
	}

	void PrintInfo() override
	{
		if (uORB::SubscriptionCallbackWorkItem::advertised()) {
			printf(""\t%s -> %s:%d\n"",
			       uORB::SubscriptionCallbackWorkItem::get_topic()->o_name,
			       uavcan::equipment::ahrs::MagneticFieldStrength2::getDataTypeFullName(),
			       uavcan::equipment::ahrs::MagneticFieldStrength2::DefaultDataTypeID);
		}
	}

	void BroadcastAnyUpdates() override
	{
		// sensor_mag -> uavcan::equipment::ahrs::MagneticFieldStrength2
		sensor_mag_s mag;

		if (uORB::SubscriptionCallbackWorkItem::update(&mag)) {
			uavcan::equipment::ahrs::MagneticFieldStrength2 magnetic_field{};
			magnetic_field.sensor_id = mag.device_id;
			magnetic_field.magnetic_field_ga[0] = mag.x;
			magnetic_field.magnetic_field_ga[1] = mag.y;
			magnetic_field.magnetic_field_ga[2] = mag.z;
			uavcan::Publisher<uavcan::equipment::ahrs::MagneticFieldStrength2>::broadcast(magnetic_field);

			// ensure callback is registered
			uORB::SubscriptionCallbackWorkItem::registerCallback();
		}
	}
};",0,587 2000 58 777 2001 44 777 2002 321 2003 44 773 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 123 777 58 2000 40 2008 321 2009 42 2010 44 2004 321 2011 38 2012 41 58 2001 40 2004 321 2006 321 2007 321 2000 321 2013 41 44 2002 321 2003 40 2010 44 2014 40 2015 41 41 44 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 40 2012 41 123 823 354 2016 40 2004 321 2017 321 2018 41 59 125 865 2019 40 41 2020 123 688 40 2002 321 2003 321 2021 40 41 41 123 2022 40 362 44 2002 321 2003 321 2023 40 41 354 2024 44 2004 321 2006 321 2007 321 2000 321 2025 40 41 44 2004 321 2006 321 2007 321 2000 321 2013 41 59 125 125 865 2026 40 41 2020 123 330 2027 2028 59 688 40 2002 321 2003 321 2029 40 38 2028 41 41 123 2004 321 2006 321 2007 321 2000 2030 123 125 59 2030 46 2031 61 2028 46 2032 59 2030 46 2033 91 1500 93 61 2028 46 2034 59 2030 46 2033 91 1501 93 61 2028 46 2035 59 2030 46 2033 91 1502 93 61 2028 46 2036 59 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 321 2037 40 2030 41 59 330 2002 321 2003 321 2038 40 41 59 125 125 125 59 ,"{'AvgLine': 11, 'CountLine': 42, 'CountStmt': 8, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 36, 'CountLineCodeExe': 2, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117642,C++,"template<typename Type>
class Euler : public Vector<Type, 3>
{
public:
	/**
	 * Standard constructor
	 */
	Euler() = default;

	/**
	 * Copy constructor
	 *
	 * @param other vector to copy
	 */
	Euler(const Vector<Type, 3> &other) :
		Vector<Type, 3>(other)
	{
	}

	/**
	 * Constructor from Matrix31
	 *
	 * @param other Matrix31 to copy
	 */
	Euler(const Matrix<Type, 3, 1> &other) :
		Vector<Type, 3>(other)
	{
	}

	/**
	 * Constructor from euler angles
	 *
	 * Instance is initialized from an 3-2-1 intrinsic Tait-Bryan
	 * rotation sequence representing transformation from frame 1
	 * to frame 2.
	 *
	 * @param phi_ rotation angle about X axis
	 * @param theta_ rotation angle about Y axis
	 * @param psi_ rotation angle about Z axis
	 */
	Euler(Type phi_, Type theta_, Type psi_) : Vector<Type, 3>()
	{
		phi() = phi_;
		theta() = theta_;
		psi() = psi_;
	}

	/**
	 * Constructor from DCM matrix
	 *
	 * Instance is set from Dcm representing transformation from
	 * frame 2 to frame 1.
	 * This instance will hold the angles defining the 3-2-1 intrinsic
	 * Tait-Bryan rotation sequence from frame 1 to frame 2.
	 *
	 * @param dcm Direction cosine matrix
	*/
	Euler(const Dcm<Type> &dcm)
	{
		theta() = asin(-dcm(2, 0));

		if ((fabs(theta() - Type(M_PI / 2))) < Type(1.0e-3)) {
			phi() = 0;
			psi() = atan2(dcm(1, 2), dcm(0, 2));

		} else if ((fabs(theta() + Type(M_PI / 2))) < Type(1.0e-3)) {
			phi() = 0;
			psi() = atan2(-dcm(1, 2), -dcm(0, 2));

		} else {
			phi() = atan2(dcm(2, 1), dcm(2, 2));
			psi() = atan2(dcm(1, 0), dcm(0, 0));
		}
	}

	/**
	 * Constructor from quaternion instance.
	 *
	 * Instance is set from a quaternion representing transformation
	 * from frame 2 to frame 1.
	 * This instance will hold the angles defining the 3-2-1 intrinsic
	 * Tait-Bryan rotation sequence from frame 1 to frame 2.
	 *
	 * @param q quaternion
	*/
	Euler(const Quaternion<Type> &q) : Vector<Type, 3>(Euler(Dcm<Type>(q)))
	{
	}

	inline Type phi() const
	{
		return (*this)(0);
	}
	inline Type theta() const
	{
		return (*this)(1);
	}
	inline Type psi() const
	{
		return (*this)(2);
	}

	inline Type &phi()
	{
		return (*this)(0);
	}
	inline Type &theta()
	{
		return (*this)(1);
	}
	inline Type &psi()
	{
		return (*this)(2);
	}

};",0,822 60 835 2000 62 587 2001 58 777 2002 60 2000 44 1502 62 123 777 58 306 2001 40 41 61 613 59 306 2001 40 601 2002 60 2000 44 1502 62 38 2003 41 58 2002 60 2000 44 1502 62 40 2003 41 123 125 306 2001 40 601 2004 60 2000 44 1502 44 1501 62 38 2003 41 58 2002 60 2000 44 1502 62 40 2003 41 123 125 306 2001 40 2000 2005 44 2000 2006 44 2000 2007 41 58 2002 60 2000 44 1502 62 40 41 123 2008 40 41 61 2005 59 2009 40 41 61 2006 59 2010 40 41 61 2007 59 125 306 2001 40 601 2011 60 2000 62 38 2012 41 123 2013 40 41 61 2014 40 45 2012 40 1502 44 1500 41 41 59 688 40 40 2015 40 2013 40 41 45 2000 40 2016 47 1502 41 41 41 60 2000 40 1500 41 41 123 2017 40 41 61 1500 59 2018 40 41 61 2019 40 2012 40 1501 44 1502 41 44 2012 40 1500 44 1502 41 41 59 125 630 688 40 40 2015 40 2013 40 41 43 2000 40 2016 47 1502 41 41 41 60 2000 40 1500 41 41 123 2020 40 41 61 1500 59 2021 40 41 61 2022 40 45 2012 40 1501 44 1502 41 44 45 2012 40 1500 44 1502 41 41 59 125 630 123 2023 40 41 61 2024 40 2012 40 1502 44 1501 41 44 2012 40 1502 44 1502 41 41 59 2025 40 41 61 2024 40 2012 40 1501 44 1500 41 44 2012 40 1500 44 1500 41 41 59 125 125 306 2001 40 601 2026 60 2000 62 38 2027 41 58 2002 60 2000 44 1502 62 40 2001 40 2011 60 2000 62 40 2027 41 41 41 123 125 700 2000 2028 40 41 601 123 792 40 42 823 41 40 1500 41 59 125 700 2000 2029 40 41 601 123 792 40 42 823 41 40 1501 41 59 125 700 2000 2030 40 41 601 123 792 40 42 823 41 40 1502 41 59 125 700 2000 38 2028 40 41 123 792 40 42 823 41 40 1500 41 59 125 700 2000 38 2029 40 41 123 792 40 42 823 41 40 1501 41 59 125 700 2000 38 2030 40 41 123 792 40 42 823 41 40 1502 41 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 115, 'CountStmt': 29, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 60, 'CountStmtDecl': 11, 'MaxCyclomatic': 3, 'SumCyclomatic': 13, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 12, 'AltCountLineCode': 60, 'CountLineCodeExe': 26, 'CountLineComment': 44, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 87, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.73', 'AltCountLineComment': 44, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117650,C++,"class NavigatorMode
{
public:
	NavigatorMode(Navigator *navigator);
	virtual ~NavigatorMode() = default;
	NavigatorMode(const NavigatorMode &) = delete;
	NavigatorMode operator=(const NavigatorMode &) = delete;

	void run(bool active);

	/**
	 * This function is called while the mode is inactive
	 */
	virtual void on_inactive();

	/**
	 * This function is called one time when mode becomes active, pos_sp_triplet must be initialized here
	 */
	virtual void on_activation();

	/**
	 * This function is called one time when mode becomes inactive
	 */
	virtual void on_inactivation();

	/**
	 * This function is called while the mode is active
	 */
	virtual void on_active();

protected:
	Navigator *_navigator{nullptr};

private:
	bool _active{false};
};",0,587 2000 123 777 58 2000 40 2001 42 2002 41 59 864 126 2000 40 41 61 613 59 2000 40 601 2000 38 41 61 619 59 2000 758 61 40 601 2000 38 41 61 619 59 865 2003 40 569 2004 41 59 306 864 865 2005 40 41 59 306 864 865 2006 40 41 59 306 864 865 2007 40 41 59 306 864 865 2008 40 41 59 775 58 2001 42 2009 123 753 125 59 773 58 569 2010 123 655 125 59 125 59 ,"{'AvgLine': 8, 'CountLine': 88, 'CountStmt': 20, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 60, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 9, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 60, 'CountLineCodeExe': 15, 'CountLineComment': 17, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.28', 'AltCountLineComment': 17, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 1}"
99918,C++,"class SRSDesc
{
public:
    std::string          osSRSName;
    bool                 bAxisInvert;
    OGRSpatialReference* poSRS;

    SRSDesc() : bAxisInvert(false), poSRS(nullptr) {}
};",0,587 2000 123 777 58 2001 321 2002 2003 59 569 2004 59 2005 42 2006 59 2000 40 41 58 2004 40 655 41 44 2006 40 753 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 9, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 8, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117675,C++,"class Mixer : public ListNode<Mixer *>
{
public:
	enum class Airmode : int32_t {
		disabled = 0,
		roll_pitch = 1,
		roll_pitch_yaw = 2
	};

	/**
	 * Fetch a control value.
	 *
	 * @param handle		Token passed when the callback is registered.
	 * @param control_group		The group to fetch the control from.
	 * @param control_index		The group-relative index to fetch the control from.
	 * @param control		The returned control
	 * @return			Zero if the value was fetched, nonzero otherwise.
	 */
	typedef int	(* ControlCallback)(uintptr_t handle, uint8_t control_group, uint8_t control_index, float &control);

	/**
	 * Constructor.
	 *
	 * @param control_cb		Callback invoked when reading controls.
	 */
	Mixer(ControlCallback control_cb, uintptr_t cb_handle) : _control_cb(control_cb), _cb_handle(cb_handle) {}
	virtual ~Mixer() = default;

	// no copy, assignment, move, move assignment
	Mixer(const Mixer &) = delete;
	Mixer &operator=(const Mixer &) = delete;
	Mixer(Mixer &&) = delete;
	Mixer &operator=(Mixer &&) = delete;

	/**
	 * Perform the mixing function.
	 *
	 * @param outputs		Array into which mixed output(s) should be placed.
	 * @param space			The number of available entries in the output array;
	 * @return			The number of entries in the output array that were populated.
	 */
	virtual unsigned		mix(float *outputs, unsigned space) = 0;

	/**
	 * Get the saturation status.
	 *
	 * @return			Integer bitmask containing saturation_status from control_allocator_status.msg.
	 */
	virtual uint16_t		get_saturation_status() { return 0; }

	/**
	 * Analyses the mix configuration and updates a bitmask of groups
	 * that are required.
	 *
	 * @param groups		A bitmask of groups (0-31) that the mixer requires.
	 */
	virtual void			groups_required(uint32_t &groups) {};

	/**
	 * @brief      Empty method, only implemented for MultirotorMixer and MixerGroup class.
	 *
	 * @param[in]  delta_out_max  Maximum delta output.
	 *
	 */
	virtual void 			set_max_delta_out_once(float delta_out_max) {}

	/**
	 * @brief Set trim offset for this mixer
	 *
	 * @return the number of outputs this mixer feeds to
	 */
	virtual unsigned		set_trim(float trim) { return 0; }

	/**
	 * @brief Get trim offset for this mixer
	 *
	 * @return the number of outputs this mixer feeds to
	 */
	virtual unsigned		get_trim(float *trim) { return 0; }

	/*
	 * @brief      Sets the thrust factor used to calculate mapping from desired thrust to motor control signal output.
	 *
	 * @param[in]  val   The value
	 */
	virtual void 			set_thrust_factor(float val) {}

	/**
	 * @brief Set airmode. Airmode allows the mixer to increase the total thrust in order to unsaturate the motors.
	 *
	 * @param[in]  airmode   Select airmode type (0 = disabled, 1 = roll/pitch, 2 = roll/pitch/yaw)
	 */
	virtual void			set_airmode(Airmode airmode) {};

	virtual unsigned		get_multirotor_count()  { return 0; }

	virtual void 			set_dt_once(float dt) {}

protected:

	/** client-supplied callback used when fetching control values */
	ControlCallback			_control_cb;
	uintptr_t			_cb_handle;

	/**
	 * Invoke the client callback to fetch a control value.
	 *
	 * @param group			Control group to fetch from.
	 * @param index			Control index to fetch.
	 * @return			The control value.
	 */
	float				get_control(uint8_t group, uint8_t index);

	/**
	 * Find a tag
	 *
	 * @param buf			The buffer to operate on.
	 * @param buflen		length of the buffer.
	 * @param tag			character to search for.
	 */
	static const char 		*findtag(const char *buf, unsigned &buflen, char tag);

	/**
	 * Find next tag and return it (0 is returned if no tag is found)
	 *
	 * @param buf			The buffer to operate on.
	 * @param buflen		length of the buffer.
	 */
	static char 			findnexttag(const char *buf, unsigned buflen);

	/**
	 * Skip a line
	 *
	 * @param buf			The buffer to operate on.
	 * @param buflen		length of the buffer.
	 * @return			0 / OK if a line could be skipped, 1 else
	 */
	static const char 		*skipline(const char *buf, unsigned &buflen);

	/**
	 * Check wether the string is well formed and suitable for parsing
	 */
	static bool			string_well_formed(const char *buf, unsigned &buflen);
};",0,587 2000 58 777 2001 60 2000 42 62 123 777 58 640 587 2002 58 2003 123 2004 61 1500 44 2005 61 1501 44 2006 61 1502 125 59 306 833 704 40 42 2007 41 40 2008 2009 44 2010 2011 44 2010 2012 44 660 38 2013 41 59 306 2000 40 2007 2014 44 2008 2015 41 58 2016 40 2014 41 44 2017 40 2015 41 123 125 864 126 2000 40 41 61 613 59 330 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 2000 40 2000 307 41 61 619 59 2000 38 758 61 40 2000 307 41 61 619 59 306 864 856 2018 40 660 42 2019 44 856 2020 41 61 1500 59 306 864 2021 2022 40 41 123 792 1500 59 125 306 864 865 2023 40 2024 38 2025 41 123 125 59 306 864 865 2026 40 660 2027 41 123 125 306 864 856 2028 40 660 2029 41 123 792 1500 59 125 306 864 856 2030 40 660 42 2029 41 123 792 1500 59 125 305 864 865 2031 40 660 2032 41 123 125 306 864 865 2033 40 2002 2034 41 123 125 59 864 856 2035 40 41 123 792 1500 59 125 864 865 2036 40 660 2037 41 123 125 775 58 306 2007 2016 59 2008 2017 59 306 660 2038 40 2010 2039 44 2010 2040 41 59 306 809 601 582 42 2041 40 601 582 42 2042 44 856 38 2043 44 582 2044 41 59 306 809 582 2045 40 601 582 42 2042 44 856 2043 41 59 306 809 601 582 42 2046 40 601 582 42 2042 44 856 38 2043 41 59 306 809 569 2047 40 601 582 42 2042 44 856 38 2043 41 59 125 59 ,"{'AvgLine': 5, 'CountLine': 210, 'CountStmt': 54, 'MaxNesting': 2, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 31, 'MaxEssential': 4, 'SumEssential': 22, 'AvgCyclomatic': 1, 'CountLineCode': 83, 'CountStmtDecl': 25, 'MaxCyclomatic': 5, 'SumCyclomatic': 24, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 32, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 21, 'AltCountLineCode': 83, 'CountLineCodeExe': 29, 'CountLineComment': 95, 'AltAvgLineComment': 0, 'AltCountLineBlank': 32, 'CountClassCoupled': 1, 'CountClassDerived': 4, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '1.14', 'AltCountLineComment': 95, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 28, 'CountDeclClassMethod': 4, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 16, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 24, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 17, 'CountDeclMethodProtected': 5, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
118122,C++,"class IBMP388
{
public:
	virtual ~IBMP388() = default;

	virtual int init() = 0;

	// read reg value
	virtual uint8_t get_reg(uint8_t addr) = 0;

	// bulk read reg value
	virtual int get_reg_buf(uint8_t addr, uint8_t *buf, uint8_t len) = 0;

	// write reg value
	virtual int set_reg(uint8_t value, uint8_t addr) = 0;

	// bulk read of calibration data into buffer, return same pointer
	virtual calibration_s *get_calibration(uint8_t addr) = 0;

	virtual uint32_t get_device_id() const = 0;

	virtual uint8_t get_device_address() const = 0;
};",0,587 2000 123 777 58 864 126 2000 40 41 61 613 59 864 704 2001 40 41 61 1500 59 330 864 2002 2003 40 2002 2004 41 61 1500 59 330 864 704 2005 40 2002 2004 44 2002 42 2006 44 2002 2007 41 61 1500 59 330 864 704 2008 40 2002 2009 44 2002 2004 41 61 1500 59 330 864 2010 42 2011 40 2002 2004 41 61 1500 59 864 2012 2013 40 41 601 61 1500 59 864 2002 2014 40 41 601 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 22, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 11, 'CountStmtDecl': 7, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 11, 'CountLineCodeExe': 0, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.36', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117696,C++,"class SystemClock : public uavcan::ISystemClock, uavcan::Noncopyable
{
	SystemClock() { }

	virtual void adjustUtc(uavcan::UtcDuration adjustment) { clock::adjustUtc(adjustment); }

public:
	virtual uavcan::MonotonicTime getMonotonic() const { return clock::getMonotonic(); }
	virtual uavcan::UtcTime getUtc()             const { return clock::getUtc(); }

	/**
	 * Calls clock::init() as needed.
	 * This function is thread safe.
	 */
	static SystemClock &instance();
};",0,587 2000 58 777 2001 321 2002 44 2001 321 2003 123 2000 40 41 123 125 864 865 2004 40 2001 321 2005 2006 41 123 2007 321 2004 40 2006 41 59 125 777 58 864 2001 321 2008 2009 40 41 601 123 792 2010 321 2009 40 41 59 125 864 2001 321 2011 2012 40 41 601 123 792 2013 321 2012 40 41 59 125 306 809 2000 38 2014 40 41 59 125 59 ,"{'AvgLine': 1, 'CountLine': 16, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 9, 'CountLineCodeExe': 0, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.44', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117705,C++,"template <class T>
class TimestampedList
{
public:
	TimestampedList(int num_items)
	{
		_list = new item_s[num_items];
		_list_len = num_items;
	}

	~TimestampedList()
	{
		delete[] _list;
	}

	/**
	 * Insert a value into the list, overwrite the oldest entry if full.
	 */
	void put(const T &new_value)
	{
		hrt_abstime now = hrt_absolute_time();

		// Insert it wherever there is a free space.
		for (int i = 0; i < _list_len; ++i) {
			if (_list[i].timestamp_us == 0) {
				_list[i].timestamp_us = now;
				_list[i].value = new_value;
				return;
			}
		}

		// Find oldest entry.
		int oldest_i = 0;

		for (int i = 1; i < _list_len; ++i) {
			if (_list[i].timestamp_us < _list[oldest_i].timestamp_us) {
				oldest_i = i;
			}
		}

		// And overwrite oldest.
		_list[oldest_i].timestamp_us = now;
		_list[oldest_i].value = new_value;
	}

	/**
	 * Before iterating using get_next(), reset to start.
	 */
	void reset_to_start()
	{
		_current_i = -1;
	}

	/**
	 * Iterate through all active values (not sorted).
	 * Return nullptr if at end of list.
	 *
	 * This is basically a poor man's iterator.
	 */
	T *get_next()
	{
		// Increment first, then leave it until called again.
		++_current_i;

		for (int i = _current_i; i < _list_len; ++i) {
			if (_list[i].timestamp_us != 0) {
				_current_i = i;
				return &_list[i].value;
			}
		}

		return nullptr;
	}

	/**
	 * Disable the last item that we have gotten.
	 */
	void drop_current()
	{
		if (_current_i < _list_len) {
			_list[_current_i].timestamp_us = 0;
		}
	}

	/**
	 * Update the timestamp of the item we have gotten.
	 */
	void update_current()
	{
		if (_current_i < _list_len) {
			_list[_current_i].timestamp = hrt_absolute_time();
		}
	}

	/* do not allow copying or assigning this class */
	TimestampedList(const TimestampedList &) = delete;
	TimestampedList operator=(const TimestampedList &) = delete;

private:
	struct item_s {
		hrt_abstime timestamp_us = 0; // 0 signals inactive.
		T value;
	};

	item_s *_list = nullptr;
	int _list_len = 0;
	int _current_i = -1;
};",0,822 60 587 2000 62 587 2001 123 777 58 2001 40 704 2002 41 123 2003 61 744 2004 91 2002 93 59 2005 61 2002 59 125 126 2001 40 41 123 619 91 93 2006 59 125 306 865 2007 40 601 2000 38 2008 41 123 2009 2010 61 2011 40 41 59 330 664 40 704 2012 61 1500 59 2012 60 2013 59 349 2012 41 123 688 40 2014 91 2012 93 46 2015 323 1500 41 123 2014 91 2012 93 46 2015 61 2010 59 2014 91 2012 93 46 2016 61 2008 59 792 59 125 125 330 704 2017 61 1500 59 664 40 704 2012 61 1501 59 2012 60 2013 59 349 2012 41 123 688 40 2018 91 2012 93 46 2019 60 2018 91 2017 93 46 2019 41 123 2017 61 2012 59 125 125 330 2020 91 2017 93 46 2021 61 2010 59 2020 91 2017 93 46 2022 61 2008 59 125 306 865 2023 40 41 123 2024 61 45 1501 59 125 306 2000 42 2025 40 41 123 330 349 2026 59 664 40 704 2027 61 2026 59 2027 60 2028 59 349 2027 41 123 688 40 2029 91 2027 93 46 2030 340 1500 41 123 2026 61 2027 59 792 38 2029 91 2027 93 46 2031 59 125 125 792 753 59 125 306 865 2032 40 41 123 688 40 2033 60 2034 41 123 2035 91 2033 93 46 2036 61 1500 59 125 125 306 865 2037 40 41 123 688 40 2038 60 2039 41 123 2040 91 2038 93 46 2041 61 2042 40 41 59 125 125 305 2001 40 601 2001 38 41 61 619 59 2001 758 61 40 601 2001 38 41 61 619 59 773 58 816 2043 123 2044 2045 61 1500 59 330 2000 2046 59 125 59 2043 42 2047 61 753 59 704 2048 61 1500 59 704 2049 61 45 1501 59 125 59 ,"{'AvgLine': 9, 'CountLine': 107, 'CountStmt': 42, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 30, 'MaxEssential': 3, 'SumEssential': 11, 'AvgCyclomatic': 2, 'CountLineCode': 69, 'CountStmtDecl': 18, 'MaxCyclomatic': 5, 'SumCyclomatic': 15, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 69, 'CountLineCodeExe': 26, 'CountLineComment': 24, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.35', 'AltCountLineComment': 24, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 44, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
117712,C++,"template<class T>
class ListNode
{
public:

	void setSibling(T sibling) { _list_node_sibling = sibling; }
	const T getSibling() const { return _list_node_sibling; }

protected:

	T _list_node_sibling{nullptr};

};",0,822 60 587 2000 62 587 2001 123 777 58 865 2002 40 2000 2003 41 123 2004 61 2003 59 125 601 2000 2005 40 41 601 123 792 2006 59 125 775 58 2000 2007 123 753 125 59 125 59 ,"{'AvgLine': 1, 'CountLine': 12, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 8, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
117709,C++,"class FlowMeasurement :
	public UavcanPublisherBase,
	public uORB::SubscriptionCallbackWorkItem,
	private uavcan::Publisher<com::hex::equipment::flow::Measurement>
{
public:
	FlowMeasurement(px4::WorkItem *work_item, uavcan::INode &node) :
		UavcanPublisherBase(com::hex::equipment::flow::Measurement::DefaultDataTypeID),
		uORB::SubscriptionCallbackWorkItem(work_item, ORB_ID(optical_flow)),
		uavcan::Publisher<com::hex::equipment::flow::Measurement>(node)
	{
		_rotation = matrix::Dcmf{matrix::Eulerf{0.f, 0.f, 0.f}};

		param_t rot = param_find(""CANNODE_FLOW_ROT"");
		int32_t val = 0;

		if (param_get(rot, &val) == PX4_OK) {
			_rotation = get_rot_matrix((enum Rotation)val);
		}

		this->setPriority(uavcan::TransferPriority::Default);
	}

	void PrintInfo() override
	{
		if (uORB::SubscriptionCallbackWorkItem::advertised()) {
			printf(""\t%s -> %s:%d\n"",
			       uORB::SubscriptionCallbackWorkItem::get_topic()->o_name,
			       com::hex::equipment::flow::Measurement::getDataTypeFullName(),
			       com::hex::equipment::flow::Measurement::DefaultDataTypeID);
		}
	}

	void BroadcastAnyUpdates() override
	{
		// optical_flow -> com::hex::equipment::flow::Measurement
		optical_flow_s optical_flow;

		if (uORB::SubscriptionCallbackWorkItem::update(&optical_flow)) {
			com::hex::equipment::flow::Measurement measurement{};
			measurement.integration_interval  = optical_flow.integration_timespan * 1e-6f; // us -> s

			// rotate measurements in yaw from sensor frame to body frame
			const matrix::Vector3f gyro_flow_rotated = _rotation * matrix::Vector3f{optical_flow.gyro_x_rate_integral, optical_flow.gyro_y_rate_integral, 0.f};
			const matrix::Vector3f pixel_flow_rotated = _rotation * matrix::Vector3f{optical_flow.pixel_flow_x_integral, optical_flow.pixel_flow_y_integral, 0.f};

			measurement.rate_gyro_integral[0] = gyro_flow_rotated(0);
			measurement.rate_gyro_integral[1] = gyro_flow_rotated(1);
			measurement.flow_integral[0] = pixel_flow_rotated(0);
			measurement.flow_integral[1] = pixel_flow_rotated(1);

			measurement.quality = optical_flow.quality;

			uavcan::Publisher<com::hex::equipment::flow::Measurement>::broadcast(measurement);

			// ensure callback is registered
			uORB::SubscriptionCallbackWorkItem::registerCallback();
		}
	}
private:
	matrix::Dcmf _rotation;
};",0,587 2000 58 777 2001 44 777 2002 321 2003 44 773 2004 321 2005 60 2006 321 2007 321 2008 321 2009 321 2010 62 123 777 58 2000 40 2011 321 2012 42 2013 44 2004 321 2014 38 2015 41 58 2001 40 2006 321 2007 321 2008 321 2009 321 2010 321 2016 41 44 2002 321 2003 40 2013 44 2017 40 2018 41 41 44 2004 321 2005 60 2006 321 2007 321 2008 321 2009 321 2010 62 40 2015 41 123 2019 61 2020 321 2021 123 2020 321 2022 123 1500 44 1500 44 1500 125 125 59 2023 2024 61 2025 40 362 41 59 2026 2027 61 1500 59 688 40 2028 40 2024 44 38 2027 41 323 2029 41 123 2019 61 2030 40 40 640 2031 41 2027 41 59 125 823 354 2032 40 2004 321 2033 321 2034 41 59 125 865 2035 40 41 2036 123 688 40 2002 321 2003 321 2037 40 41 41 123 2038 40 362 44 2002 321 2003 321 2039 40 41 354 2040 44 2006 321 2007 321 2008 321 2009 321 2010 321 2041 40 41 44 2006 321 2007 321 2008 321 2009 321 2010 321 2016 41 59 125 125 865 2042 40 41 2036 123 330 2043 2018 59 688 40 2002 321 2003 321 2044 40 38 2018 41 41 123 2006 321 2007 321 2008 321 2009 321 2010 2045 123 125 59 2045 46 2046 61 2018 46 2047 42 1500 59 330 330 601 2048 321 2049 2050 61 2051 42 2048 321 2049 123 2018 46 2052 44 2018 46 2053 44 1500 125 59 601 2048 321 2049 2054 61 2051 42 2048 321 2049 123 2018 46 2055 44 2018 46 2056 44 1500 125 59 2045 46 2057 91 1500 93 61 2050 40 1500 41 59 2045 46 2057 91 1501 93 61 2050 40 1501 41 59 2045 46 2058 91 1500 93 61 2054 40 1500 41 59 2045 46 2058 91 1501 93 61 2054 40 1501 41 59 2045 46 2059 61 2018 46 2059 59 2004 321 2005 60 2006 321 2007 321 2008 321 2009 321 2010 62 321 2060 40 2045 41 59 330 2002 321 2003 321 2061 40 41 59 125 125 773 58 2062 321 2063 2064 59 125 59 ,"{'AvgLine': 17, 'CountLine': 62, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 48, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 13, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 3, 'AltCountLineCode': 48, 'CountLineCodeExe': 4, 'CountLineComment': 4, 'AltAvgLineComment': 1, 'AltCountLineBlank': 11, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117719,C++,"template <int N>
class MavlinkStreamServoOutputRaw : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamServoOutputRaw<N>(mavlink); }

	static constexpr const char *get_name_static()
	{
		switch (N) {
		case 0:
			return ""SERVO_OUTPUT_RAW_0"";

		case 1:
			return ""SERVO_OUTPUT_RAW_1"";
		}

		return ""SERVO_OUTPUT_RAW"";
	}

	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_SERVO_OUTPUT_RAW; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _act_sub.advertised() ? MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamServoOutputRaw(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _act_sub{ORB_ID(actuator_outputs), N};

	bool send() override
	{
		actuator_outputs_s act;

		if (_act_sub.update(&act)) {
			mavlink_servo_output_raw_t msg{};

			static_assert(sizeof(act.output) / sizeof(act.output[0]) >= 16, ""mavlink message requires at least 16 outputs"");

			msg.time_usec = act.timestamp;
			msg.port = N;
			msg.servo1_raw = act.output[0];
			msg.servo2_raw = act.output[1];
			msg.servo3_raw = act.output[2];
			msg.servo4_raw = act.output[3];
			msg.servo5_raw = act.output[4];
			msg.servo6_raw = act.output[5];
			msg.servo7_raw = act.output[6];
			msg.servo8_raw = act.output[7];
			msg.servo9_raw = act.output[8];
			msg.servo10_raw = act.output[9];
			msg.servo11_raw = act.output[10];
			msg.servo12_raw = act.output[11];
			msg.servo13_raw = act.output[12];
			msg.servo14_raw = act.output[13];
			msg.servo15_raw = act.output[14];
			msg.servo16_raw = act.output[15];

			mavlink_msg_servo_output_raw_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,822 60 704 2000 62 587 2001 58 777 2002 123 777 58 809 2002 42 2003 40 2004 42 2005 41 123 792 744 2001 60 2000 62 40 2005 41 59 125 809 603 601 582 42 2006 40 41 123 819 40 2000 41 123 579 1500 58 792 362 59 579 1501 58 792 362 59 125 792 362 59 125 809 603 2007 2008 40 41 123 792 2009 59 125 601 582 42 2010 40 41 601 2011 123 792 2006 40 41 59 125 2007 2012 40 41 2011 123 792 2008 40 41 59 125 856 2013 40 41 2011 123 792 2014 46 2015 40 41 63 2016 43 2017 58 1500 59 125 773 58 648 2001 40 2004 42 2005 41 58 2002 40 2005 41 123 125 2018 321 2019 2020 123 2021 40 2022 41 44 2000 125 59 569 2023 40 41 2011 123 2024 2025 59 688 40 2020 46 2026 40 38 2025 41 41 123 2027 2028 123 125 59 810 40 805 40 2025 46 2029 41 47 805 40 2025 46 2029 91 1500 93 41 325 1503 44 362 41 59 2028 46 2030 61 2025 46 2031 59 2028 46 2032 61 2000 59 2028 46 2033 61 2025 46 2029 91 1500 93 59 2028 46 2034 61 2025 46 2029 91 1501 93 59 2028 46 2035 61 2025 46 2029 91 1502 93 59 2028 46 2036 61 2025 46 2029 91 1502 93 59 2028 46 2037 61 2025 46 2029 91 1502 93 59 2028 46 2038 61 2025 46 2029 91 1502 93 59 2028 46 2039 61 2025 46 2029 91 1502 93 59 2028 46 2040 61 2025 46 2029 91 1502 93 59 2028 46 2041 61 2025 46 2029 91 1502 93 59 2028 46 2042 61 2025 46 2029 91 1502 93 59 2028 46 2043 61 2025 46 2029 91 1502 93 59 2028 46 2044 61 2025 46 2029 91 1503 93 59 2028 46 2045 61 2025 46 2029 91 1503 93 59 2028 46 2046 61 2025 46 2029 91 1503 93 59 2028 46 2047 61 2025 46 2029 91 1503 93 59 2028 46 2048 61 2025 46 2029 91 1503 93 59 2049 40 2050 354 2051 40 41 44 38 2028 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 69, 'CountStmt': 22, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 54, 'CountStmtDecl': 11, 'MaxCyclomatic': 3, 'SumCyclomatic': 11, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 54, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117724,C++,"class UavcanCBATBridge : public UavcanSensorBridgeBase, public ModuleParams
{
public:
	static const char *const NAME;

	UavcanCBATBridge(uavcan::INode &node);

	const char *get_name() const override { return NAME; }

	int init() override;

private:

	void battery_sub_cb(const uavcan::ReceivedDataStructure<cuav::equipment::power::CBAT> &msg);
	void determineWarning(float remaining);

	typedef uavcan::MethodBinder < UavcanCBATBridge *,
		void (UavcanCBATBridge::*)
		(const uavcan::ReceivedDataStructure<cuav::equipment::power::CBAT> &) >
		CBATCbBinder;

	uavcan::Subscriber<cuav::equipment::power::CBAT, CBATCbBinder> _sub_battery;

	DEFINE_PARAMETERS(
		(ParamFloat<px4::params::BAT_LOW_THR>) _param_bat_low_thr,
		(ParamFloat<px4::params::BAT_CRIT_THR>) _param_bat_crit_thr,
		(ParamFloat<px4::params::BAT_EMERGEN_THR>) _param_bat_emergen_thr
	)

	uint8_t _warning;
	float _max_cell_voltage_delta = 0.f;
};",0,587 2000 58 777 2001 44 777 2002 123 777 58 809 601 582 42 601 2003 59 2000 40 2004 321 2005 38 2006 41 59 601 582 42 2007 40 41 601 2008 123 792 2003 59 125 704 2009 40 41 2008 59 773 58 865 2010 40 601 2004 321 2011 60 2012 321 2013 321 2014 321 2015 62 38 2016 41 59 865 2017 40 660 2018 41 59 833 2004 321 2019 60 2000 42 44 865 40 2000 321 42 41 40 601 2004 321 2011 60 2012 321 2013 321 2014 321 2015 62 38 41 62 2020 59 2004 321 2021 60 2012 321 2013 321 2014 321 2015 44 2020 62 2022 59 2023 40 40 2024 60 2025 321 2026 321 2027 62 41 2028 44 40 2024 60 2025 321 2026 321 2029 62 41 2030 44 40 2024 60 2025 321 2026 321 2031 62 41 2032 41 2033 2034 59 660 2035 61 1500 59 125 59 ,"{'AvgLine': 17, 'CountLine': 128, 'CountStmt': 28, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 100, 'CountStmtDecl': 20, 'MaxCyclomatic': 4, 'SumCyclomatic': 11, 'AltAvgLineCode': 14, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 22, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 6, 'AltCountLineCode': 100, 'CountLineCodeExe': 7, 'CountLineComment': 7, 'AltAvgLineComment': 1, 'AltCountLineBlank': 22, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 30, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 98, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
117726,C++,"class ADIS16477 : public device::SPI, public I2CSPIDriver<ADIS16477>
{
public:
	ADIS16477(const I2CSPIDriverConfig &config);
	virtual ~ADIS16477();

	static void print_usage();

	int		init();

	void			print_status() override;

	void			RunImpl();
protected:
	int		probe() override;
	void exit_and_cleanup() override;

private:

	PX4Accelerometer	_px4_accel;
	PX4Gyroscope		_px4_gyro;

	perf_counter_t		_sample_perf;
	perf_counter_t		_bad_transfers;

	const spi_drdy_gpio_t _drdy_gpio;

#pragma pack(push, 1)
	// Report conversation with in the ADIS16477, including command byte and interrupt status.
	struct ADISReport {
		uint16_t	cmd;
		uint16_t	diag_stat;
		int16_t		gyro_x;
		int16_t		gyro_y;
		int16_t		gyro_z;
		int16_t		accel_x;
		int16_t		accel_y;
		int16_t		accel_z;
		uint16_t	temp;
		uint16_t	DATA_CNTR;
		uint8_t		checksum;
		uint8_t		_padding; // 16 bit SPI mode
	};
#pragma pack(pop)

	/**
	 * Start automatic measurement.
	 */
	void			start();

	/**
	 * Reset chip.
	 *
	 * Resets the chip and measurements ranges, but not scale and offset.
	 */
	int			reset();

	static int		data_ready_interrupt(int irq, void *context, void *arg);

	/**
	 * Fetch measurements from the sensor and update the report buffers.
	 */
	int			measure();

	uint16_t		read_reg16(uint8_t reg);

	int			write_reg(uint8_t reg, uint8_t value);
	void			write_reg16(uint8_t reg, uint16_t value);

	// ADIS16477 onboard self test
	bool 			self_test_memory();
	bool 			self_test_sensor();

};",0,587 2000 58 777 2001 321 2002 44 777 2003 60 2000 62 123 777 58 2000 40 601 2004 38 2005 41 59 864 126 2000 40 41 59 809 865 2006 40 41 59 704 2007 40 41 59 865 2008 40 41 2009 59 865 2010 40 41 59 775 58 704 2011 40 41 2009 59 865 2012 40 41 2009 59 773 58 2013 2014 59 2015 2016 59 2017 2018 59 2017 2019 59 601 2020 2021 59 35 769 2022 40 2023 44 1501 41 330 816 2024 123 2025 2026 59 2025 2027 59 2028 2029 59 2028 2030 59 2028 2031 59 2028 2032 59 2028 2033 59 2028 2034 59 2025 2035 59 2025 2036 59 2037 2038 59 2037 2039 59 330 125 59 35 769 2022 40 2040 41 306 865 2041 40 41 59 306 704 2042 40 41 59 809 704 2043 40 704 2044 44 865 42 2045 44 865 42 2046 41 59 306 704 2047 40 41 59 2048 2049 40 2050 2051 41 59 704 2052 40 2050 2051 44 2050 2053 41 59 865 2054 40 2050 2051 44 2048 2053 41 59 330 569 2055 40 41 59 569 2056 40 41 59 125 59 ,"{'AvgLine': 19, 'CountLine': 401, 'CountStmt': 157, 'MaxNesting': 3, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 104, 'MaxEssential': 4, 'SumEssential': 26, 'AvgCyclomatic': 2, 'CountLineCode': 265, 'CountStmtDecl': 60, 'MaxCyclomatic': 7, 'SumCyclomatic': 37, 'AltAvgLineCode': 13, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 72, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 3, 'CountDeclMethod': 17, 'AltCountLineCode': 276, 'CountLineCodeExe': 94, 'CountLineComment': 56, 'AltAvgLineComment': 2, 'AltCountLineBlank': 74, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 43, 'CountLineInactive': 9, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.21', 'AltCountLineComment': 59, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 38, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 7, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 37, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 9, 'CountDeclInstanceMethod': 17, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
117728,C++,"class MavlinkStreamComponentInformation : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamComponentInformation(mavlink); }

	static constexpr const char *get_name_static() { return ""COMPONENT_INFORMATION""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_COMPONENT_INFORMATION; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return 0; // never streamed
	}

	bool request_message(float param2, float param3, float param4,
			     float param5, float param6, float param7) override
	{
		mavlink_component_information_t component_info{};
		PX4_DEBUG(""COMPONENT_INFORMATION request"");

		strncpy(component_info.general_metadata_uri, ""mftp://etc/extras/component_general.json.xz"",
			sizeof(component_info.general_metadata_uri) - 1);
		component_info.general_metadata_file_crc = component_information::component_general_crc;

		component_info.time_boot_ms = hrt_absolute_time() / 1000;
		mavlink_msg_component_information_send_struct(_mavlink->get_channel(), &component_info);

		return true;
	}
private:
	explicit MavlinkStreamComponentInformation(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	bool send() override
	{
		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 1500 59 330 125 569 2013 40 660 2014 44 660 2015 44 660 2016 44 660 2017 44 660 2018 44 660 2019 41 2010 123 2020 2021 123 125 59 2022 40 362 41 59 2023 40 2021 46 2024 44 362 44 805 40 2021 46 2024 41 45 1501 41 59 2021 46 2025 61 2026 321 2027 59 2021 46 2028 61 2029 40 41 47 1504 59 2030 40 2031 354 2032 40 41 44 38 2021 41 59 792 829 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 569 2033 40 41 2010 123 792 655 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 39, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 9, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 31, 'CountLineCodeExe': 6, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 28, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118263,C++,"class LIS3MDL_I2C : public device::I2C
{
public:
	LIS3MDL_I2C(int bus, int bus_frequency);
	virtual ~LIS3MDL_I2C() = default;

	virtual int     read(unsigned address, void *data, unsigned count);
	virtual int     write(unsigned address, void *data, unsigned count);

protected:
	virtual int     probe();

};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 704 2004 41 59 864 126 2000 40 41 61 613 59 864 704 2005 40 856 2006 44 865 42 2007 44 856 2008 41 59 864 704 2009 40 856 2006 44 865 42 2007 44 856 2008 41 59 775 58 864 704 2010 40 41 59 125 59 ,"{'AvgLine': 10, 'CountLine': 52, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 42, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 42, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118265,C++,"class EkfGpsTest : public ::testing::Test
{
public:

	EkfGpsTest(): ::testing::Test(),
		_ekf{std::make_shared<Ekf>()},
		_sensor_simulator(_ekf),
		_ekf_wrapper(_ekf) {};

	std::shared_ptr<Ekf> _ekf;
	SensorSimulator _sensor_simulator;
	EkfWrapper _ekf_wrapper;

	// Setup the Ekf with synthetic measurements
	void SetUp() override
	{
		_ekf->init(0);
		_sensor_simulator.runSeconds(2);
		_ekf_wrapper.enableGpsFusion();
		_sensor_simulator.startGps();
		_sensor_simulator.runSeconds(11);
	}

	// Use this method to clean up any memory, network etc. after each test
	void TearDown() override
	{
	}
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 58 321 2001 321 2002 40 41 44 2003 123 2004 321 2005 60 2006 62 40 41 125 44 2007 40 2003 41 44 2008 40 2003 41 123 125 59 2009 321 2010 60 2011 62 2003 59 2012 2007 59 2013 2008 59 330 865 2014 40 41 2015 123 2003 354 2016 40 1500 41 59 2007 46 2017 40 1502 41 59 2008 46 2018 40 41 59 2007 46 2019 40 41 59 2007 46 2017 40 1503 41 59 125 330 865 2020 40 41 2015 123 125 125 59 ,"{'AvgLine': 5, 'CountLine': 28, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 22, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 22, 'CountLineCodeExe': 0, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117737,C++,"class ActuatorEffectivenessStandardVTOL: public ActuatorEffectiveness
{
public:
	ActuatorEffectivenessStandardVTOL();
	virtual ~ActuatorEffectivenessStandardVTOL() = default;

	bool getEffectivenessMatrix(matrix::Matrix<float, NUM_AXES, NUM_ACTUATORS> &matrix, bool force) override;

	/**
	 * Set the current flight phase
	 *
	 * @param Flight phase
	 */
	void setFlightPhase(const FlightPhase &flight_phase) override;

	int numActuators() const override { return 7; }
protected:
	bool _updated{true};
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 864 126 2000 40 41 61 613 59 569 2002 40 2003 321 2004 60 660 44 2005 44 2006 62 38 2003 44 569 2007 41 2008 59 306 865 2009 40 601 2010 38 2011 41 2008 59 704 2012 40 41 601 2008 123 792 1502 59 125 775 58 569 2013 123 829 125 59 125 59 ,"{'AvgLine': 16, 'CountLine': 82, 'CountStmt': 27, 'MaxNesting': 1, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 19, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 69, 'CountStmtDecl': 8, 'MaxCyclomatic': 6, 'SumCyclomatic': 9, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 69, 'CountLineCodeExe': 44, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 30, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
117746,C++,"class MavlinkStreamCommandLong : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamCommandLong(mavlink); }

	static constexpr const char *get_name_static() { return ""COMMAND_LONG""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_COMMAND_LONG; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return 0; // commands stream is not regular and not predictable
	}

private:
	explicit MavlinkStreamCommandLong(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _vehicle_command_sub{ORB_ID(vehicle_command)};

	bool send() override
	{
		bool sent = false;

		static constexpr size_t COMMAND_LONG_SIZE = MAVLINK_MSG_ID_COMMAND_LONG_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;

		while ((_mavlink->get_free_tx_buf() >= COMMAND_LONG_SIZE) && _vehicle_command_sub.updated()) {

			const unsigned last_generation = _vehicle_command_sub.get_last_generation();
			vehicle_command_s cmd;

			if (_vehicle_command_sub.update(&cmd)) {
				if (_vehicle_command_sub.get_last_generation() != last_generation + 1) {
					PX4_ERR(""COMMAND_LONG vehicle_command lost, generation %d -> %d"", last_generation,
						_vehicle_command_sub.get_last_generation());
				}

				if (!cmd.from_external && cmd.command < vehicle_command_s::VEHICLE_CMD_PX4_INTERNAL_START) {
					PX4_DEBUG(""sending command %d to %d/%d"", cmd.command, cmd.target_system, cmd.target_component);

					MavlinkCommandSender::instance().handle_vehicle_command(cmd, _mavlink->get_channel());
					sent = true;

				} else {
					PX4_DEBUG(""not forwarding command %d to %d/%d"", cmd.command, cmd.target_system, cmd.target_component);
				}
			}
		}

		MavlinkCommandSender::instance().check_timeout(_mavlink->get_channel());

		return sent;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 1500 59 330 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2013 321 2014 2015 123 2016 40 2017 41 125 59 569 2018 40 41 2010 123 569 2019 61 655 59 809 603 2020 2021 61 2022 43 2023 59 870 40 40 2024 354 2025 40 41 325 2021 41 307 2015 46 2026 40 41 41 123 601 856 2027 61 2015 46 2028 40 41 59 2029 2030 59 688 40 2015 46 2031 40 38 2030 41 41 123 688 40 2015 46 2028 40 41 340 2027 43 1501 41 123 2032 40 362 44 2027 44 2015 46 2028 40 41 41 59 125 688 40 33 2030 46 2033 307 2030 46 2034 60 2029 321 2035 41 123 2036 40 362 44 2030 46 2034 44 2030 46 2037 44 2030 46 2038 41 59 2039 321 2040 40 41 46 2041 40 2030 44 2024 354 2042 40 41 41 59 2019 61 829 59 125 630 123 2043 40 362 44 2030 46 2034 44 2030 46 2044 44 2030 46 2045 41 59 125 125 125 2046 321 2047 40 41 46 2048 40 2024 354 2049 40 41 41 59 792 2019 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 55, 'CountStmt': 18, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 40, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 40, 'CountLineCodeExe': 7, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118312,C++,"template<class T, size_t N>
class BlockingQueue
{
public:

	BlockingQueue()
	{
		px4_sem_init(&_sem_head, 0, N);
		px4_sem_init(&_sem_tail, 0, 0);
	}

	~BlockingQueue()
	{
		px4_sem_destroy(&_sem_head);
		px4_sem_destroy(&_sem_tail);
	}

	void push(T newItem)
	{
		px4_sem_wait(&_sem_head);

		_data[_tail] = newItem;
		_tail = (_tail + 1) % N;

		px4_sem_post(&_sem_tail);
	}

	T pop()
	{
		px4_sem_wait(&_sem_tail);

		T ret = _data[_head];
		_head = (_head + 1) % N;

		px4_sem_post(&_sem_head);

		return ret;
	}

private:

	px4_sem_t	_sem_head;
	px4_sem_t	_sem_tail;

	T _data[N] {};

	size_t _head{0};
	size_t _tail{0};

};",0,822 60 587 2000 44 2001 2002 62 587 2003 123 777 58 2003 40 41 123 2004 40 38 2005 44 1500 44 2002 41 59 2004 40 38 2006 44 1500 44 1500 41 59 125 126 2003 40 41 123 2007 40 38 2008 41 59 2007 40 38 2009 41 59 125 865 2010 40 2000 2011 41 123 2012 40 38 2013 41 59 2014 91 2015 93 61 2011 59 2015 61 40 2015 43 1501 41 37 2002 59 2016 40 38 2017 41 59 125 2000 2018 40 41 123 2019 40 38 2020 41 59 2000 2021 61 2022 91 2023 93 59 2023 61 40 2023 43 1501 41 37 2002 59 2024 40 38 2025 41 59 792 2021 59 125 773 58 2026 2027 59 2026 2028 59 2000 2029 91 2002 93 123 125 59 2001 2030 123 1500 125 59 2001 2031 123 1500 125 59 125 59 ,"{'AvgLine': 7, 'CountLine': 49, 'CountStmt': 22, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 35, 'CountLineCodeExe': 25, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 40, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
117750,C++,"class MavlinkStreamLocalPositionNED : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamLocalPositionNED(mavlink); }

	static constexpr const char *get_name_static() { return ""LOCAL_POSITION_NED""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_LOCAL_POSITION_NED; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _lpos_sub.advertised() ? MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamLocalPositionNED(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _lpos_sub{ORB_ID(vehicle_local_position)};

	bool send() override
	{
		vehicle_local_position_s lpos;

		if (_lpos_sub.update(&lpos)) {
			if (lpos.xy_valid && lpos.v_xy_valid) {
				mavlink_local_position_ned_t msg{};

				msg.time_boot_ms = lpos.timestamp / 1000;
				msg.x = lpos.x;
				msg.y = lpos.y;
				msg.z = lpos.z;
				msg.vx = lpos.vx;
				msg.vy = lpos.vy;
				msg.vz = lpos.vz;

				mavlink_msg_local_position_ned_send_struct(_mavlink->get_channel(), &msg);

				return true;
			}
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 688 40 2024 46 2026 307 2024 46 2027 41 123 2028 2029 123 125 59 2029 46 2030 61 2024 46 2031 47 1504 59 2029 46 2032 61 2024 46 2032 59 2029 46 2033 61 2024 46 2033 59 2029 46 2034 61 2024 46 2034 59 2029 46 2035 61 2024 46 2035 59 2029 46 2036 61 2024 46 2036 59 2029 46 2037 61 2024 46 2037 59 2038 40 2039 354 2040 40 41 44 38 2029 41 59 792 829 59 125 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 46, 'CountStmt': 17, 'MaxNesting': 2, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 3, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 11, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 35, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117755,C++,"class MavlinkStreamFlightInformation : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamFlightInformation(mavlink); }

	static constexpr const char *get_name_static() { return ""FLIGHT_INFORMATION""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_FLIGHT_INFORMATION; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return MAVLINK_MSG_ID_FLIGHT_INFORMATION_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
	}

private:
	explicit MavlinkStreamFlightInformation(Mavlink *mavlink) : MavlinkStream(mavlink)
	{
		_param_com_flight_uuid = param_find(""COM_FLIGHT_UUID"");
	}

	uORB::Subscription _vehicle_status_sub{ORB_ID(vehicle_status)};
	param_t _param_com_flight_uuid{PARAM_INVALID};

	bool send() override
	{
		vehicle_status_s vehicle_status{};

		if (_vehicle_status_sub.copy(&vehicle_status) && vehicle_status.timestamp != 0) {
			mavlink_flight_information_t flight_info{};
			flight_info.time_boot_ms = hrt_absolute_time() / 1000;
			flight_info.arming_time_utc = vehicle_status.armed_time;
			flight_info.takeoff_time_utc = vehicle_status.takeoff_time;

			int32_t flight_uuid;

			if (param_get(_param_com_flight_uuid, &flight_uuid) == PX4_OK) {
				flight_info.flight_uuid = static_cast<uint64_t>(flight_uuid);
			}

			mavlink_msg_flight_information_send_struct(_mavlink->get_channel(), &flight_info);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 43 2014 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 2015 61 2016 40 362 41 59 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 2022 2023 123 2024 125 59 569 2025 40 41 2010 123 2026 2027 123 125 59 688 40 2019 46 2028 40 38 2027 41 307 2027 46 2029 340 1500 41 123 2030 2031 123 125 59 2031 46 2032 61 2033 40 41 47 1504 59 2031 46 2034 61 2027 46 2035 59 2031 46 2036 61 2027 46 2037 59 2038 2039 59 688 40 2040 40 2023 44 38 2039 41 323 2041 41 123 2031 46 2039 61 811 60 2042 62 40 2039 41 59 125 2043 40 2044 354 2045 40 41 44 38 2031 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 49, 'CountStmt': 20, 'MaxNesting': 2, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 37, 'CountStmtDecl': 13, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 37, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117768,C++,"class SRF02 : public device::I2C, public I2CSPIDriver<SRF02>
{
public:
	SRF02(const I2CSPIDriverConfig &config);
	~SRF02() override;

	static void print_usage();

	int init() override;
	void print_status() override;

	void RunImpl();

private:

	void start();
	int collect();
	int measure();

	/**
	 * Test whether the device supported by the driver is present at a
	 * specific address.
	 * @param address The I2C bus address to probe.
	 * @return True if the device is present.
	 */
	int probe_address(uint8_t address);

	PX4Rangefinder _px4_rangefinder;

	int _interval{SRF02_CONVERSION_INTERVAL};

	bool _collect_phase{false};

	perf_counter_t _comms_errors{perf_alloc(PC_COUNT, MODULE_NAME"": com_err"")};
	perf_counter_t _sample_perf{perf_alloc(PC_ELAPSED,  MODULE_NAME"": read"")};
};",0,587 2000 58 777 2001 321 2002 44 777 2003 60 2000 62 123 777 58 2000 40 601 2004 38 2005 41 59 126 2000 40 41 2006 59 809 865 2007 40 41 59 704 2008 40 41 2006 59 865 2009 40 41 2006 59 865 2010 40 41 59 773 58 865 2011 40 41 59 704 2012 40 41 59 704 2013 40 41 59 306 704 2014 40 2015 2016 41 59 2017 2018 59 704 2019 123 2020 125 59 569 2021 123 655 125 59 2022 2023 123 2024 40 2025 44 2026 362 41 125 59 2022 2027 123 2028 40 2029 44 2030 362 41 125 59 125 59 ,"{'AvgLine': 14, 'CountLine': 163, 'CountStmt': 64, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 38, 'MaxEssential': 3, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 118, 'CountStmtDecl': 24, 'MaxCyclomatic': 4, 'SumCyclomatic': 16, 'AltAvgLineCode': 10, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 27, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 1, 'CountDeclMethod': 10, 'AltCountLineCode': 118, 'CountLineCodeExe': 41, 'CountLineComment': 18, 'AltAvgLineComment': 1, 'AltCountLineBlank': 27, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.15', 'AltCountLineComment': 18, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 94, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
117878,C++,"class UavcanSafetyState
{
public:
	UavcanSafetyState(uavcan::INode &node);

	/*
	 * setup periodic updater
	 */
	int init();

private:
	/*
	 * Max update rate to avoid exessive bus traffic
	 */
	static constexpr unsigned MAX_RATE_HZ = 10;

	/*
	 * Setup timer and call back function for periodic updates
	 */
	void periodic_update(const uavcan::TimerEvent &);

	typedef uavcan::MethodBinder<UavcanSafetyState *, void (UavcanSafetyState::*)(const uavcan::TimerEvent &)>
	TimerCbBinder;

	/*
	 * Publish CAN Safety state led
	 */
	uavcan::Publisher<ardupilot::indication::SafetyState> _safety_state_pub;

	uavcan::TimerEventForwarder<TimerCbBinder> _timer;

	uORB::Subscription _actuator_armed_sub{ORB_ID(actuator_armed)};

};",0,587 2000 123 777 58 2000 40 2001 321 2002 38 2003 41 59 305 704 2004 40 41 59 773 58 305 809 603 856 2005 61 1502 59 305 865 2006 40 601 2001 321 2007 38 41 59 833 2001 321 2008 60 2000 42 44 865 40 2000 321 42 41 40 601 2001 321 2007 38 41 62 2009 59 305 2001 321 2010 60 2011 321 2012 321 2013 62 2014 59 2001 321 2015 60 2009 62 2016 59 2017 321 2018 2019 123 2020 40 2021 41 125 59 125 59 ,"{'AvgLine': 11, 'CountLine': 69, 'CountStmt': 14, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 41, 'CountStmtDecl': 10, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 9, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 41, 'CountLineCodeExe': 2, 'CountLineComment': 15, 'AltAvgLineComment': 1, 'AltCountLineBlank': 13, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.37', 'AltCountLineComment': 15, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117895,C++,"class MavlinkStreamADSBVehicle : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamADSBVehicle(mavlink); }

	static constexpr const char *get_name_static() { return ""ADSB_VEHICLE""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_ADSB_VEHICLE; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	bool const_rate() override { return true; }

	unsigned get_size() override
	{
		return _transponder_report_sub.advertised() ? MAVLINK_MSG_ID_ADSB_VEHICLE_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamADSBVehicle(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _transponder_report_sub{ORB_ID(transponder_report)};

	bool send() override
	{
		bool sent = false;

		transponder_report_s pos;

		while ((_mavlink->get_free_tx_buf() >= get_size()) && _transponder_report_sub.update(&pos)) {

			if (!(pos.flags & transponder_report_s::PX4_ADSB_FLAGS_RETRANSLATE)) {
				continue;
			}

			mavlink_adsb_vehicle_t msg{};
			msg.ICAO_address = pos.icao_address;
			msg.lat = pos.lat * 1e7;
			msg.lon = pos.lon * 1e7;
			msg.altitude_type = pos.altitude_type;
			msg.altitude = pos.altitude * 1e3f;
			msg.heading = (pos.heading + M_PI_F) / M_PI_F * 180.0f * 100.0f;
			msg.hor_velocity = pos.hor_velocity * 100.0f;
			msg.ver_velocity = pos.ver_velocity * 100.0f;
			memcpy(&msg.callsign[0], &pos.callsign[0], sizeof(msg.callsign));
			msg.emitter_type = pos.emitter_type;
			msg.tslc = pos.tslc;
			msg.squawk = pos.squawk;

			msg.flags = 0;

			if (pos.flags & transponder_report_s::PX4_ADSB_FLAGS_VALID_COORDS) { msg.flags |= ADSB_FLAGS_VALID_COORDS; }

			if (pos.flags & transponder_report_s::PX4_ADSB_FLAGS_VALID_ALTITUDE) { msg.flags |= ADSB_FLAGS_VALID_ALTITUDE; }

			if (pos.flags & transponder_report_s::PX4_ADSB_FLAGS_VALID_HEADING) { msg.flags |= ADSB_FLAGS_VALID_HEADING; }

			if (pos.flags & transponder_report_s::PX4_ADSB_FLAGS_VALID_VELOCITY) { msg.flags |= ADSB_FLAGS_VALID_VELOCITY; }

			if (pos.flags & transponder_report_s::PX4_ADSB_FLAGS_VALID_CALLSIGN) { msg.flags |= ADSB_FLAGS_VALID_CALLSIGN; }

			if (pos.flags & transponder_report_s::PX4_ADSB_FLAGS_VALID_SQUAWK) { msg.flags |= ADSB_FLAGS_VALID_SQUAWK; }

			mavlink_msg_adsb_vehicle_send_struct(_mavlink->get_channel(), &msg);
			sent = true;
		}

		return sent;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 569 2012 40 41 2010 123 792 829 59 125 856 2013 40 41 2010 123 792 2014 46 2015 40 41 63 2016 43 2017 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2018 321 2019 2020 123 2021 40 2022 41 125 59 569 2023 40 41 2010 123 569 2024 61 655 59 2025 2026 59 870 40 40 2027 354 2028 40 41 325 2013 40 41 41 307 2020 46 2029 40 38 2026 41 41 123 688 40 33 40 2026 46 2030 38 2025 321 2031 41 41 123 605 59 125 2032 2033 123 125 59 2033 46 2034 61 2026 46 2035 59 2033 46 2036 61 2026 46 2036 42 1508 59 2033 46 2037 61 2026 46 2037 42 1508 59 2033 46 2038 61 2026 46 2038 59 2033 46 2039 61 2026 46 2039 42 1504 59 2033 46 2040 61 40 2026 46 2040 43 2041 41 47 2041 42 1504 42 1503 59 2033 46 2042 61 2026 46 2042 42 1503 59 2033 46 2043 61 2026 46 2043 42 1503 59 2044 40 38 2033 46 2045 91 1500 93 44 38 2026 46 2045 91 1500 93 44 805 40 2033 46 2045 41 41 59 2033 46 2046 61 2026 46 2046 59 2033 46 2047 61 2026 46 2047 59 2033 46 2048 61 2026 46 2048 59 2033 46 2030 61 1500 59 688 40 2026 46 2030 38 2025 321 2049 41 123 2033 46 2030 347 2050 59 125 688 40 2026 46 2030 38 2025 321 2051 41 123 2033 46 2030 347 2052 59 125 688 40 2026 46 2030 38 2025 321 2053 41 123 2033 46 2030 347 2054 59 125 688 40 2026 46 2030 38 2025 321 2055 41 123 2033 46 2030 347 2056 59 125 688 40 2026 46 2030 38 2025 321 2057 41 123 2033 46 2030 347 2058 59 125 688 40 2026 46 2030 38 2025 321 2059 41 123 2033 46 2030 347 2060 59 125 2061 40 2027 354 2062 40 41 44 38 2033 41 59 2024 61 829 59 125 792 2024 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 70, 'CountStmt': 17, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 50, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 9, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 20, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 50, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 20, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 28, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117906,C++,"class ObstacleAvoidance
{
public:
	ObstacleAvoidance(void *) {} // takes void* argument to be compatible with ModuleParams constructor


	void injectAvoidanceSetpoints(matrix::Vector3f &pos_sp, matrix::Vector3f &vel_sp, float &yaw_sp,
				      float &yaw_speed_sp)
	{
		notify_dummy();
	};

	void updateAvoidanceDesiredWaypoints(const matrix::Vector3f &curr_wp, const float curr_yaw,
					     const float curr_yawspeed,
					     const matrix::Vector3f &next_wp, const float next_yaw, const float next_yawspeed, const bool ext_yaw_active,
					     const int wp_type)
	{
		notify_dummy();
	};

	void updateAvoidanceDesiredSetpoints(const matrix::Vector3f &pos_sp, const matrix::Vector3f &vel_sp,
					     const int type)
	{
		notify_dummy();
	}


	void checkAvoidanceProgress(const matrix::Vector3f &pos, const matrix::Vector3f &prev_wp,
				    float target_acceptance_radius, const matrix::Vector2f &closest_pt)
	{
		notify_dummy();
	};

protected:

	bool _logged_error = false;
	void notify_dummy()
	{
		if (!_logged_error) {
			PX4_ERR(""Dummy avoidance library called!"");
			_logged_error = true;
		}
	}
};",0,587 2000 123 777 58 2000 40 865 42 41 123 125 330 865 2001 40 2002 321 2003 38 2004 44 2002 321 2003 38 2005 44 660 38 2006 44 660 38 2007 41 123 2008 40 41 59 125 59 865 2009 40 601 2002 321 2003 38 2010 44 601 660 2011 44 601 660 2012 44 601 2002 321 2003 38 2013 44 601 660 2014 44 601 660 2015 44 601 569 2016 44 601 704 2017 41 123 2018 40 41 59 125 59 865 2019 40 601 2002 321 2003 38 2004 44 601 2002 321 2003 38 2005 44 601 704 2020 41 123 2021 40 41 59 125 865 2022 40 601 2002 321 2003 38 2023 44 601 2002 321 2003 38 2024 44 660 2025 44 601 2002 321 2026 38 2027 41 123 2028 40 41 59 125 59 775 58 569 2029 61 655 59 865 2030 40 41 123 688 40 33 2029 41 123 2031 40 362 41 59 2029 61 829 59 125 125 125 59 ,"{'AvgLine': 18, 'CountLine': 252, 'CountStmt': 70, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 42, 'MaxEssential': 3, 'SumEssential': 15, 'AvgCyclomatic': 2, 'CountLineCode': 194, 'CountStmtDecl': 34, 'MaxCyclomatic': 9, 'SumCyclomatic': 28, 'AltAvgLineCode': 14, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 45, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 13, 'AltCountLineCode': 194, 'CountLineCodeExe': 39, 'CountLineComment': 16, 'AltAvgLineComment': 1, 'AltCountLineBlank': 45, 'CountClassCoupled': 5, 'CountClassDerived': 1, 'CountLineCodeDecl': 49, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 16, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 11, 'SumCyclomaticStrict': 30, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 28, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
117917,C++,"template<typename T, int WINDOW = 3>
class MedianFilter
{
public:
	static_assert(WINDOW >= 3, ""MedianFilter window size must be >= 3"");
	static_assert(WINDOW % 2, ""MedianFilter window size must be odd""); // odd

	MedianFilter() = default;

	void insert(const T &sample)
	{
		_head = (_head + 1) % WINDOW;
		_buffer[_head] = sample;
	}

	T median()
	{
		T sorted[WINDOW];
		memcpy(sorted, _buffer, sizeof(_buffer));
		qsort(&sorted, WINDOW, sizeof(T), cmp);

		return sorted[WINDOW / 2];
	}

	T apply(const T &sample)
	{
		insert(sample);
		return median();
	}

private:

	static int cmp(const void *a, const void *b)
	{
		return (*(T *)a >= *(T *)b) ? 1 : -1;
	}

	T _buffer[WINDOW] {};
	uint8_t _head{0};
};",0,822 60 835 2000 44 704 2001 61 1502 62 587 2002 123 777 58 810 40 2001 325 1502 44 362 41 59 810 40 2001 37 1502 44 362 41 59 330 2002 40 41 61 613 59 865 2003 40 601 2000 38 2004 41 123 2005 61 40 2005 43 1501 41 37 2001 59 2006 91 2005 93 61 2004 59 125 2000 2007 40 41 123 2000 2008 91 2001 93 59 2009 40 2008 44 2010 44 805 40 2010 41 41 59 2011 40 38 2008 44 2001 44 805 40 2000 41 44 2012 41 59 792 2008 91 2001 47 1502 93 59 125 2000 2013 40 601 2000 38 2004 41 123 2003 40 2004 41 59 792 2007 40 41 59 125 773 58 809 704 2014 40 601 865 42 2015 44 601 865 42 2016 41 123 792 40 42 40 2000 42 41 2015 325 42 40 2000 42 41 2016 41 63 1501 58 45 1501 59 125 2000 2017 91 2001 93 123 125 59 2018 2019 123 1500 125 59 125 59 ,"{'AvgLine': 5, 'CountLine': 39, 'CountStmt': 17, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 31, 'CountLineCodeExe': 9, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
117927,C++,"class PCF8583 : public device::I2C, public ModuleParams, public I2CSPIDriver<PCF8583>
{
public:
	PCF8583(const I2CSPIDriverConfig &config);
	~PCF8583() override = default;

	static void print_usage();

	void		RunImpl();

	int    init() override;
	void   print_status() override;

private:

	int  probe() override;

	int            getCounter();
	void           resetCounter();

	uint8_t        readRegister(uint8_t reg);
	void           setRegister(uint8_t reg, uint8_t value);

	int            _count{0};
	hrt_abstime    _last_measurement_time{0};

	uORB::Publication<rpm_s> _rpm_pub{ORB_ID(rpm)};

	DEFINE_PARAMETERS(
		(ParamInt<px4::params::PCF8583_POOL>) _param_pcf8583_pool,
		(ParamInt<px4::params::PCF8583_RESET>) _param_pcf8583_reset,
		(ParamInt<px4::params::PCF8583_MAGNET>) _param_pcf8583_magnet
	)
};",0,587 2000 58 777 2001 321 2002 44 777 2003 44 777 2004 60 2000 62 123 777 58 2000 40 601 2005 38 2006 41 59 126 2000 40 41 2007 61 613 59 809 865 2008 40 41 59 865 2009 40 41 59 704 2010 40 41 2007 59 865 2011 40 41 2007 59 773 58 704 2012 40 41 2007 59 704 2013 40 41 59 865 2014 40 41 59 2015 2016 40 2015 2017 41 59 865 2018 40 2015 2017 44 2015 2019 41 59 704 2020 123 1500 125 59 2021 2022 123 1500 125 59 2023 321 2024 60 2025 62 2026 123 2027 40 2028 41 125 59 2029 40 40 2030 60 2031 321 2032 321 2033 62 41 2034 44 40 2030 60 2031 321 2032 321 2035 62 41 2036 44 40 2030 60 2031 321 2032 321 2037 62 41 2038 41 125 59 ,"{'AvgLine': 10, 'CountLine': 145, 'CountStmt': 64, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 33, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 116, 'CountStmtDecl': 31, 'MaxCyclomatic': 2, 'SumCyclomatic': 16, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 25, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 1, 'CountDeclMethod': 12, 'AltCountLineCode': 116, 'CountLineCodeExe': 38, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 25, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 25, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
117926,C++,"class UavcanDifferentialPressureBridge : public UavcanSensorBridgeBase
{
public:
	static const char *const NAME;

	UavcanDifferentialPressureBridge(uavcan::INode &node);

	const char *get_name() const override { return NAME; }

	int init() override;

private:
	float _diff_pres_offset{0.f};

	math::LowPassFilter2p<float> _filter{10.f, 1.1f}; /// Adapted from MS5525 driver

	void air_sub_cb(const uavcan::ReceivedDataStructure<uavcan::equipment::air_data::RawAirData> &msg);

	typedef uavcan::MethodBinder < UavcanDifferentialPressureBridge *,
		void (UavcanDifferentialPressureBridge::*)
		(const uavcan::ReceivedDataStructure<uavcan::equipment::air_data::RawAirData> &) >
		AirCbBinder;

	uavcan::Subscriber<uavcan::equipment::air_data::RawAirData, AirCbBinder> _sub_air;
};",0,587 2000 58 777 2001 123 777 58 809 601 582 42 601 2002 59 2000 40 2003 321 2004 38 2005 41 59 601 582 42 2006 40 41 601 2007 123 792 2002 59 125 704 2008 40 41 2007 59 773 58 660 2009 123 1500 125 59 2010 321 2011 60 660 62 2012 123 1502 44 1502 125 59 331 865 2013 40 601 2003 321 2014 60 2003 321 2015 321 2016 321 2017 62 38 2018 41 59 833 2003 321 2019 60 2000 42 44 865 40 2000 321 42 41 40 601 2003 321 2014 60 2003 321 2015 321 2016 321 2017 62 38 41 62 2020 59 2003 321 2021 60 2003 321 2015 321 2016 321 2017 44 2020 62 2022 59 125 59 ,"{'AvgLine': 10, 'CountLine': 65, 'CountStmt': 19, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 49, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 49, 'CountLineCodeExe': 5, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 19, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117953,C++,"class MavlinkStreamProtocolVersion : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamProtocolVersion(mavlink); }

	static constexpr const char *get_name_static() { return ""PROTOCOL_VERSION""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_PROTOCOL_VERSION; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return MAVLINK_MSG_ID_PROTOCOL_VERSION_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
	}

private:
	explicit MavlinkStreamProtocolVersion(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	bool send() override
	{
		_mavlink->send_protocol_version();
		return true;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 43 2014 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 569 2015 40 41 2010 123 2016 354 2017 40 41 59 792 829 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 25, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 20, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117970,C++,"class UavcanSubscriberBase : public IntrusiveSortedListNode<UavcanSubscriberBase *>
{
public:
	UavcanSubscriberBase() = delete;
	explicit UavcanSubscriberBase(uint16_t id) : _id(id) {}

	virtual ~UavcanSubscriberBase() = default;

	virtual bool init() = 0;

	/**
	 * Prints current status in a human readable format to stdout.
	 */
	virtual void PrintInfo() const {};

	// sorted numerically by ID
	bool operator<=(UavcanSubscriberBase &rhs) { return id() <= rhs.id(); }

	uint16_t id() const { return _id; }

private:
	uint16_t _id{0};
};",0,587 2000 58 777 2001 60 2000 42 62 123 777 58 2000 40 41 61 619 59 648 2000 40 2002 2003 41 58 2004 40 2003 41 123 125 864 126 2000 40 41 61 613 59 864 569 2005 40 41 61 1500 59 306 864 865 2006 40 41 601 123 125 59 330 569 758 329 40 2000 38 2007 41 123 792 2003 40 41 329 2007 46 2003 40 41 59 125 2002 2003 40 41 601 123 792 2004 59 125 773 58 2002 2004 123 1500 125 59 125 59 ,"{'AvgLine': 1, 'CountLine': 22, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 12, 'CountLineCodeExe': 3, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 0, 'CountClassDerived': 3, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.33', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117997,C++,"class PositionSmoothingTest : public ::testing::Test
{

public:
	PositionSmoothing _position_smoothing;

	PositionSmoothingTest()
	{
		_position_smoothing.setMaxJerk({MAX_JERK, MAX_JERK, MAX_JERK});
		_position_smoothing.setMaxAcceleration({MAX_ACCELERATION, MAX_ACCELERATION, MAX_ACCELERATION});
		_position_smoothing.setMaxVelocity({MAX_VELOCITY, MAX_VELOCITY, MAX_VELOCITY});
		_position_smoothing.setMaxAllowedHorizontalError(MAX_ALLOWED_HOR_ERR);
		_position_smoothing.setVerticalAcceptanceRadius(VERTICAL_ACCEPTANCE_RADIUS);
		_position_smoothing.setCruiseSpeed(CRUISE_SPEED);
		_position_smoothing.setHorizontalTrajectoryGain(HORIZONTAL_TRAJECTORY_GAIN);
		_position_smoothing.setTargetAcceptanceRadius(TARGET_ACCEPTANCE_RADIUS);

		_position_smoothing.reset({0.f, 0.f, 0.f}, {0.f, 0.f, 0.f}, {0.f, 0.f, 0.f});
	}

	static bool _vectorNear(const Vector3f &a, const Vector3f &b, float EPS = 1e-4f)
	{
		return (fabsf(a(0) - b(0)) < EPS) && (fabsf(a(1) - b(1)) < EPS) && (fabsf(a(2) - b(2)) < EPS);
	}

	static void expectVectorEqual(const Vector3f &expected, const Vector3f &value, const char *name, float EPS)
	{
		EXPECT_TRUE(_vectorNear(expected, value, EPS)) <<
				""Vector \"""" << name << ""\"" expected ["" <<
				expected(0) << "", "" <<
				expected(1) << "", "" <<
				expected(2) << ""] has value ["" <<
				value(0) << "", "" <<
				value(1) << "", "" <<
				value(2) << ""]\n"";
	}

	static void expectDynamicsLimitsRespected(const PositionSmoothing::PositionSmoothingSetpoints &setpoints)
	{
		EXPECT_LE(fabsf(setpoints.velocity(0)), MAX_VELOCITY) << ""Velocity in x too high\n"";
		EXPECT_LE(fabsf(setpoints.velocity(1)), MAX_VELOCITY) << ""Velocity in y too high\n"";
		EXPECT_LE(fabsf(setpoints.velocity(2)), MAX_VELOCITY) << ""Velocity in z too high\n"";
		EXPECT_LE(fabsf(setpoints.acceleration(0)), MAX_ACCELERATION) << ""Acceleration in x too high\n"";
		EXPECT_LE(fabsf(setpoints.acceleration(1)), MAX_ACCELERATION) << ""Acceleration in y too high\n"";
		EXPECT_LE(fabsf(setpoints.acceleration(2)), MAX_ACCELERATION) << ""Acceleration in z too high\n"";
		EXPECT_LE(fabsf(setpoints.jerk(0)), MAX_JERK) << ""Jerk in x too high\n"";
		EXPECT_LE(fabsf(setpoints.jerk(1)), MAX_JERK) << ""Jerk in y too high\n"";
		EXPECT_LE(fabsf(setpoints.jerk(2)), MAX_JERK) << ""Jerk in z too high\n"";
	}
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2003 2004 59 2000 40 41 123 2004 46 2005 40 123 2006 44 2006 44 2006 125 41 59 2004 46 2007 40 123 2008 44 2008 44 2008 125 41 59 2004 46 2009 40 123 2010 44 2010 44 2010 125 41 59 2004 46 2011 40 2012 41 59 2004 46 2013 40 2014 41 59 2004 46 2015 40 2016 41 59 2004 46 2017 40 2018 41 59 2004 46 2019 40 2020 41 59 2004 46 2021 40 123 1500 44 1500 44 1500 125 44 123 1500 44 1500 44 1500 125 44 123 1500 44 1500 44 1500 125 41 59 125 809 569 2022 40 601 2023 38 2024 44 601 2023 38 2025 44 660 2026 61 1500 41 123 792 40 2027 40 2024 40 1500 41 45 2025 40 1500 41 41 60 2026 41 307 40 2027 40 2024 40 1501 41 45 2025 40 1501 41 41 60 2026 41 307 40 2027 40 2024 40 1502 41 45 2025 40 1502 41 41 60 2026 41 59 125 809 865 2028 40 601 2023 38 2029 44 601 2023 38 2030 44 601 582 42 2031 44 660 2026 41 123 2032 40 2022 40 2029 44 2030 44 2026 41 41 332 362 332 2031 332 362 332 2029 40 1500 41 332 362 332 2029 40 1501 41 332 362 332 2029 40 1502 41 332 362 332 2030 40 1500 41 332 362 332 2030 40 1501 41 332 362 332 2030 40 1502 41 332 362 59 125 809 865 2033 40 601 2003 321 2034 38 2035 41 123 2036 40 2037 40 2035 46 2038 40 1500 41 41 44 2039 41 332 362 59 2036 40 2037 40 2035 46 2038 40 1501 41 41 44 2039 41 332 362 59 2036 40 2037 40 2035 46 2038 40 1502 41 41 44 2039 41 332 362 59 2036 40 2037 40 2035 46 2040 40 1500 41 41 44 2041 41 332 362 59 2036 40 2037 40 2035 46 2040 40 1501 41 41 44 2041 41 332 362 59 2036 40 2037 40 2035 46 2040 40 1502 41 41 44 2041 41 332 362 59 2036 40 2037 40 2035 46 2042 40 1500 41 41 44 2043 41 332 362 59 2036 40 2037 40 2035 46 2042 40 1501 41 41 44 2043 41 332 362 59 2036 40 2037 40 2035 46 2042 40 1502 41 41 44 2043 41 332 362 59 125 125 59 ,"{'AvgLine': 10, 'CountLine': 50, 'CountStmt': 26, 'MaxNesting': 0, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 44, 'CountLineCodeExe': 29, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118006,C++,"class MavlinkStreamGPSRTCMData : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamGPSRTCMData(mavlink); }

	static constexpr const char *get_name_static() { return ""GPS_RTCM_DATA""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_GPS_RTCM_DATA; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _gps_inject_data_sub.advertised() ? (MAVLINK_MSG_ID_GPS_RTCM_DATA_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES) : 0;
	}

private:
	explicit MavlinkStreamGPSRTCMData(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _gps_inject_data_sub{ORB_ID(gps_inject_data), 0};

	bool send() override
	{
		gps_inject_data_s gps_inject_data;
		bool sent = false;

		while ((_mavlink->get_free_tx_buf() >= get_size()) && _gps_inject_data_sub.update(&gps_inject_data)) {
			mavlink_gps_rtcm_data_t msg{};

			msg.len = gps_inject_data.len;
			msg.flags = gps_inject_data.flags;
			memcpy(msg.data, gps_inject_data.data, sizeof(msg.data));

			mavlink_msg_gps_rtcm_data_send_struct(_mavlink->get_channel(), &msg);

			sent = true;
		}

		return sent;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 40 2015 43 2016 41 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 44 1500 125 59 569 2022 40 41 2010 123 2023 2024 59 569 2025 61 655 59 870 40 40 2026 354 2027 40 41 325 2012 40 41 41 307 2019 46 2028 40 38 2024 41 41 123 2029 2030 123 125 59 2030 46 2031 61 2024 46 2031 59 2030 46 2032 61 2024 46 2032 59 2033 40 2030 46 2034 44 2024 46 2034 44 805 40 2030 46 2034 41 41 59 2035 40 2026 354 2036 40 41 44 38 2030 41 59 2025 61 829 59 125 792 2025 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 41, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 30, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 30, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118370,C++,"class CLIArgsHelper
{
public:
	CLIArgsHelper(const char *args[], int num_argc)
	{
		// get args into the right format: the first string is the module name, the last nullptr
		int len = 0;
		strcpy(_buf + len, ""module"");
		len += strlen(""module"") + 1;

		for (int i = 0; i < num_argc; ++i) {
			strcpy(_buf + len, args[i]);
			argv[i + 1] = _buf + len;
			len += strlen(args[i]) + 1;
		}

		argc = num_argc + 1;
		argv[argc] = nullptr;
	}

	int argc;
	char *argv[32];
private:
	char _buf[1024];
};",0,587 2000 123 777 58 2000 40 601 582 42 2001 91 93 44 704 2002 41 123 330 704 2003 61 1500 59 2004 40 2005 43 2003 44 362 41 59 2003 348 2006 40 362 41 43 1501 59 664 40 704 2007 61 1500 59 2007 60 2002 59 349 2007 41 123 2004 40 2005 43 2003 44 2001 91 2007 93 41 59 2008 91 2007 43 1501 93 61 2005 43 2003 59 2003 348 2006 40 2001 91 2007 93 41 43 1501 59 125 2009 61 2002 43 1501 59 2010 91 2009 93 61 753 59 125 704 2011 59 582 42 2012 91 1503 93 59 773 58 582 2013 91 1505 93 59 125 59 ,"{'AvgLine': 16, 'CountLine': 25, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 2, 'CountLineCode': 21, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 2, 'AltAvgLineCode': 13, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 1, 'AltCountLineCode': 21, 'CountLineCodeExe': 9, 'CountLineComment': 1, 'AltAvgLineComment': 1, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118366,C++,"template<typename Type>
class SlewRateYaw : public SlewRate<Type>
{
public:
	SlewRateYaw() = default;
	~SlewRateYaw() = default;

	/**
	 * Update slewrate with yaw wrapping [-pi,pi]
	 * @param new_value desired new value
	 * @param deltatime time in seconds since last update
	 * @return actual value that complies with the slew rate
	 */
	Type update(const Type new_value, const float deltatime)
	{
		const Type d_wrapped = matrix::wrap_pi(new_value - this->_value);
		return matrix::wrap_pi(SlewRate<Type>::update(this->_value + d_wrapped, deltatime));
	}
};",0,822 60 835 2000 62 587 2001 58 777 2002 60 2000 62 123 777 58 2001 40 41 61 613 59 126 2001 40 41 61 613 59 306 2000 2003 40 601 2000 2004 44 601 660 2005 41 123 601 2000 2006 61 2007 321 2008 40 2004 45 823 354 2009 41 59 792 2007 321 2008 40 2002 60 2000 62 321 2003 40 823 354 2009 43 2006 44 2005 41 41 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 18, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 11, 'CountLineCodeExe': 2, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.55', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118034,C++,"class MavlinkStreamObstacleDistance : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamObstacleDistance(mavlink); }

	static constexpr const char *get_name_static() { return ""OBSTACLE_DISTANCE""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_OBSTACLE_DISTANCE; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _obstacle_distance_fused_sub.advertised() ? (MAVLINK_MSG_ID_OBSTACLE_DISTANCE_LEN +
				MAVLINK_NUM_NON_PAYLOAD_BYTES) : 0;
	}

private:
	explicit MavlinkStreamObstacleDistance(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _obstacle_distance_fused_sub{ORB_ID(obstacle_distance_fused)};

	bool send() override
	{
		obstacle_distance_s obstacle_distance;

		if (_obstacle_distance_fused_sub.update(&obstacle_distance)) {
			mavlink_obstacle_distance_t msg{};

			msg.time_usec = obstacle_distance.timestamp;
			msg.sensor_type = obstacle_distance.sensor_type;
			memcpy(msg.distances, obstacle_distance.distances, sizeof(msg.distances));
			msg.increment = 0;
			msg.min_distance = obstacle_distance.min_distance;
			msg.max_distance = obstacle_distance.max_distance;
			msg.angle_offset = obstacle_distance.angle_offset;
			msg.increment_f = obstacle_distance.increment;
			msg.frame = obstacle_distance.frame;

			mavlink_msg_obstacle_distance_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 40 2015 43 2016 41 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 59 2027 46 2030 61 2024 46 2030 59 2031 40 2027 46 2032 44 2024 46 2032 44 805 40 2027 46 2032 41 41 59 2027 46 2033 61 1500 59 2027 46 2034 61 2024 46 2034 59 2027 46 2035 61 2024 46 2035 59 2027 46 2036 61 2024 46 2036 59 2027 46 2037 61 2024 46 2033 59 2027 46 2038 61 2024 46 2038 59 2039 40 2040 354 2041 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 47, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 36, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118040,C++,"class UavcanMixingInterfaceESC : public OutputModuleInterface
{
public:
	UavcanMixingInterfaceESC(pthread_mutex_t &node_mutex, UavcanEscController &esc_controller)
		: OutputModuleInterface(MODULE_NAME ""-actuators-esc"", px4::wq_configurations::uavcan),
		  _node_mutex(node_mutex),
		  _esc_controller(esc_controller) {}

	bool updateOutputs(bool stop_motors, uint16_t outputs[MAX_ACTUATORS],
			   unsigned num_outputs, unsigned num_control_groups_updated) override;

	void mixerChanged() override;

	MixingOutput &mixingOutput() { return _mixing_output; }

protected:
	void Run() override;
private:
	friend class UavcanNode;
	pthread_mutex_t &_node_mutex;
	UavcanEscController &_esc_controller;
	MixingOutput _mixing_output{""UAVCAN_EC"", UavcanEscController::MAX_ACTUATORS, *this, MixingOutput::SchedulingPolicy::Auto, false, false};
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 44 2004 38 2005 41 58 2001 40 2006 362 44 2007 321 2008 321 2009 41 44 2010 40 2003 41 44 2011 40 2005 41 123 125 569 2012 40 569 2013 44 2014 2015 91 2016 93 44 856 2017 44 856 2018 41 2019 59 865 2020 40 41 2019 59 2021 38 2022 40 41 123 792 2023 59 125 775 58 865 2024 40 41 2019 59 773 58 667 587 2025 59 2002 38 2010 59 2004 38 2011 59 2021 2026 123 362 44 2004 321 2016 44 42 823 44 2021 321 2027 321 2028 44 655 44 655 125 59 125 59 ,"{'AvgLine': 7, 'CountLine': 53, 'CountStmt': 21, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 13, 'MaxCyclomatic': 4, 'SumCyclomatic': 8, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 46, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 52, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 44, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 79, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118039,C++,"class UavcanHardpointController
{
public:
	UavcanHardpointController(uavcan::INode &node);
	~UavcanHardpointController();

	/*
	* setup periodic updater
	*/
	int init();


	/*
	 * set command
	 */
	void set_command(uint8_t hardpoint_id, uint16_t command);

private:
	/*
	 * Max update rate to avoid exessive bus traffic
	 */
	static constexpr unsigned			MAX_RATE_HZ = 1;	///< XXX make this configurable

	uavcan::equipment::hardpoint::Command		_cmd;

	void periodic_update(const uavcan::TimerEvent &);

	typedef uavcan::MethodBinder<UavcanHardpointController *, void (UavcanHardpointController::*)(const uavcan::TimerEvent &)>
	TimerCbBinder;

	pthread_mutex_t					_node_mutex;
	/*
	 * libuavcan related things
	 */
	uavcan::INode							&_node;
	uavcan::Publisher<uavcan::equipment::hardpoint::Command>	_uavcan_pub_raw_cmd;
	uavcan::TimerEventForwarder<TimerCbBinder>			_timer;

};",0,587 2000 123 777 58 2000 40 2001 321 2002 38 2003 41 59 126 2000 40 41 59 305 704 2004 40 41 59 305 865 2005 40 2006 2007 44 2008 2009 41 59 773 58 305 809 603 856 2010 61 1501 59 331 2001 321 2011 321 2012 321 2013 2014 59 865 2015 40 601 2001 321 2016 38 41 59 833 2001 321 2017 60 2000 42 44 865 40 2000 321 42 41 40 601 2001 321 2016 38 41 62 2018 59 2019 2020 59 305 2001 321 2002 38 2021 59 2001 321 2022 60 2001 321 2011 321 2012 321 2013 62 2023 59 2001 321 2024 60 2018 62 2025 59 125 59 ,"{'AvgLine': 9, 'CountLine': 84, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 49, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 6, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 49, 'CountLineCodeExe': 1, 'CountLineComment': 23, 'AltAvgLineComment': 2, 'AltCountLineBlank': 13, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.47', 'AltCountLineComment': 23, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118044,C++,"class MavlinkStreamDebug : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamDebug(mavlink); }

	static constexpr const char *get_name_static() { return ""DEBUG""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_DEBUG; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _debug_value_sub.advertised() ? MAVLINK_MSG_ID_DEBUG_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamDebug(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _debug_value_sub{ORB_ID(debug_value)};

	bool send() override
	{
		debug_value_s debug;

		if (_debug_value_sub.update(&debug)) {
			mavlink_debug_t msg{};
			msg.time_boot_ms = debug.timestamp / 1000ULL;
			msg.ind = debug.ind;
			msg.value = debug.value;

			mavlink_msg_debug_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 47 1504 59 2027 46 2030 61 2024 46 2030 59 2027 46 2031 61 2024 46 2031 59 2032 40 2033 354 2034 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 39, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 29, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 29, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118048,C++,"class FunctionGimbal : public FunctionProviderBase
{
public:
	FunctionGimbal() = default;
	static FunctionProviderBase *allocate(const Context &context) { return new FunctionGimbal(); }

	void update() override;
	float value(OutputFunction func) override { return _data[(int)func - (int)OutputFunction::Gimbal_Roll]; }

private:
	uORB::Subscription _topic{ORB_ID(actuator_controls_2)};
	float _data[3] { NAN, NAN, NAN };
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 809 2001 42 2002 40 601 2003 38 2004 41 123 792 744 2000 40 41 59 125 865 2005 40 41 2006 59 660 2007 40 2008 2009 41 2006 123 792 2010 91 40 704 41 2009 45 40 704 41 2008 321 2011 93 59 125 773 58 2012 321 2013 2014 123 2015 40 2016 41 125 59 660 2017 91 1502 93 123 2018 44 2018 44 2018 125 59 125 59 ,"{'AvgLine': 4, 'CountLine': 22, 'CountStmt': 7, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 19, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118041,C++,"class UavcanMixingInterfaceServo : public OutputModuleInterface
{
public:
	UavcanMixingInterfaceServo(pthread_mutex_t &node_mutex, UavcanServoController &servo_controller)
		: OutputModuleInterface(MODULE_NAME ""-actuators-servo"", px4::wq_configurations::uavcan),
		  _node_mutex(node_mutex),
		  _servo_controller(servo_controller) {}

	bool updateOutputs(bool stop_motors, uint16_t outputs[MAX_ACTUATORS],
			   unsigned num_outputs, unsigned num_control_groups_updated) override;

	MixingOutput &mixingOutput() { return _mixing_output; }

protected:
	void Run() override;
private:
	friend class UavcanNode;
	pthread_mutex_t &_node_mutex;
	UavcanServoController &_servo_controller;
	MixingOutput _mixing_output{""UAVCAN_SV"", UavcanServoController::MAX_ACTUATORS, *this, MixingOutput::SchedulingPolicy::Auto, false, false};
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 44 2004 38 2005 41 58 2001 40 2006 362 44 2007 321 2008 321 2009 41 44 2010 40 2003 41 44 2011 40 2005 41 123 125 569 2012 40 569 2013 44 2014 2015 91 2016 93 44 856 2017 44 856 2018 41 2019 59 2020 38 2021 40 41 123 792 2022 59 125 775 58 865 2023 40 41 2019 59 773 58 667 587 2024 59 2002 38 2010 59 2004 38 2011 59 2020 2025 123 362 44 2004 321 2016 44 42 823 44 2020 321 2026 321 2027 44 655 44 655 125 59 125 59 ,"{'AvgLine': 4, 'CountLine': 34, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 31, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 51, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 44, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118051,C++,"class FunctionMotors : public FunctionProviderBase
{
public:
	static_assert(actuator_motors_s::NUM_CONTROLS == (int)OutputFunction::MotorMax - (int)OutputFunction::Motor1 + 1,
		      ""Unexpected num motors"");

	FunctionMotors(const Context &context);
	static FunctionProviderBase *allocate(const Context &context) { return new FunctionMotors(context); }

	void update() override;
	float value(OutputFunction func) override { return _data.control[(int)func - (int)OutputFunction::Motor1]; }

	bool allowPrearmControl() const override { return false; }

	uORB::SubscriptionCallbackWorkItem *subscriptionCallback() override { return &_topic; }

	bool getLatestSampleTimestamp(hrt_abstime &t) const override { t = _data.timestamp_sample; return t != 0; }

	static inline void updateValues(bool reversible, float thrust_factor, float *values, int num_values);
private:
	uORB::SubscriptionCallbackWorkItem _topic;
	actuator_motors_s _data{};
	const bool _reversible_motors;
	const float &_thrust_factor;
};",0,587 2000 58 777 2001 123 777 58 810 40 2002 321 2003 323 40 704 41 2004 321 2005 45 40 704 41 2004 321 2006 43 1501 44 362 41 59 2000 40 601 2007 38 2008 41 59 809 2001 42 2009 40 601 2007 38 2008 41 123 792 744 2000 40 2008 41 59 125 865 2010 40 41 2011 59 660 2012 40 2004 2013 41 2011 123 792 2014 46 2015 91 40 704 41 2013 45 40 704 41 2004 321 2006 93 59 125 569 2016 40 41 601 2011 123 792 655 59 125 2017 321 2018 42 2019 40 41 2011 123 792 38 2020 59 125 569 2021 40 2022 38 2023 41 601 2011 123 2023 61 2024 46 2025 59 792 2023 340 1500 59 125 809 700 865 2026 40 569 2027 44 660 2028 44 660 42 2029 44 704 2030 41 59 773 58 2017 321 2018 2031 59 2002 2032 123 125 59 601 569 2033 59 601 660 38 2034 59 125 59 ,"{'AvgLine': 5, 'CountLine': 63, 'CountStmt': 30, 'MaxNesting': 3, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 16, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 54, 'CountStmtDecl': 18, 'MaxCyclomatic': 6, 'SumCyclomatic': 14, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 54, 'CountLineCodeExe': 16, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118064,C++,"template<class T>
class BlockingList : public IntrusiveSortedList<T>
{
public:

	~BlockingList()
	{
		pthread_mutex_destroy(&_mutex);
		pthread_cond_destroy(&_cv);
	}

	void add(T newNode)
	{
		LockGuard lg{_mutex};
		IntrusiveSortedList<T>::add(newNode);
	}

	bool remove(T removeNode)
	{
		LockGuard lg{_mutex};
		return IntrusiveSortedList<T>::remove(removeNode);
	}

	size_t size()
	{
		LockGuard lg{_mutex};
		return IntrusiveSortedList<T>::size();
	}

	void clear()
	{
		LockGuard lg{_mutex};
		IntrusiveSortedList<T>::clear();
	}

	pthread_mutex_t &mutex() { return _mutex; }

private:

	pthread_mutex_t	_mutex = PTHREAD_MUTEX_INITIALIZER;
	pthread_cond_t	_cv = PTHREAD_COND_INITIALIZER;

};",0,822 60 587 2000 62 587 2001 58 777 2002 60 2000 62 123 777 58 126 2001 40 41 123 2003 40 38 2004 41 59 2005 40 38 2006 41 59 125 865 2007 40 2000 2008 41 123 2009 2010 123 2011 125 59 2002 60 2000 62 321 2007 40 2008 41 59 125 569 2012 40 2000 2013 41 123 2014 2015 123 2016 125 59 792 2002 60 2000 62 321 2012 40 2013 41 59 125 2017 2018 40 41 123 2019 2020 123 2021 125 59 792 2002 60 2000 62 321 2018 40 41 59 125 865 2022 40 41 123 2023 2024 123 2025 125 59 2002 60 2000 62 321 2022 40 41 59 125 2026 38 2027 40 41 123 792 2028 59 125 773 58 2026 2029 61 2030 59 2031 2032 61 2033 59 125 59 ,"{'AvgLine': 4, 'CountLine': 42, 'CountStmt': 19, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 33, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 41, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118062,C++,"class MavlinkStreamScaledIMU3 : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamScaledIMU3(mavlink); }

	static constexpr const char *get_name_static() { return ""SCALED_IMU3""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_SCALED_IMU3; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		if (_vehicle_imu_sub.advertised() || _sensor_mag_sub.advertised()) {
			return MAVLINK_MSG_ID_SCALED_IMU3_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		}

		return 0;
	}

private:
	explicit MavlinkStreamScaledIMU3(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _vehicle_imu_sub{ORB_ID(vehicle_imu), 2};
	uORB::Subscription _sensor_mag_sub{ORB_ID(sensor_mag), 2};

	bool send() override
	{
		if (_vehicle_imu_sub.updated() || _sensor_mag_sub.updated()) {
			mavlink_scaled_imu3_t msg{};

			vehicle_imu_s imu;

			if (_vehicle_imu_sub.copy(&imu)) {
				msg.time_boot_ms = imu.timestamp / 1000;

				// Accelerometer in mG
				const float accel_dt_inv = 1.e6f / (float)imu.delta_velocity_dt;
				const Vector3f accel = Vector3f{imu.delta_velocity} * accel_dt_inv * 1000.0f / CONSTANTS_ONE_G;
				msg.xacc = (int16_t)accel(0);
				msg.yacc = (int16_t)accel(1);
				msg.zacc = (int16_t)accel(2);

				// Gyroscope in mrad/s
				const float gyro_dt_inv = 1.e6f / (float)imu.delta_velocity_dt;
				const Vector3f gyro = Vector3f{imu.delta_angle} * gyro_dt_inv * 1000.0f;
				msg.xgyro = gyro(0);
				msg.ygyro = gyro(1);
				msg.zgyro = gyro(2);
			}

			sensor_mag_s sensor_mag;

			if (_sensor_mag_sub.copy(&sensor_mag)) {
				if (msg.time_boot_ms == 0) {
					msg.time_boot_ms = sensor_mag.timestamp / 1000;
				}

				msg.xmag = sensor_mag.x * 1000.0f; // Gauss -> MilliGauss
				msg.ymag = sensor_mag.y * 1000.0f; // Gauss -> MilliGauss
				msg.zmag = sensor_mag.z * 1000.0f; // Gauss -> MilliGauss
				msg.temperature = sensor_mag.temperature;
			}

			mavlink_msg_scaled_imu3_send_struct(_mavlink->get_channel(), &msg);
			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 688 40 2013 46 2014 40 41 309 2015 46 2014 40 41 41 123 792 2016 43 2017 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2018 321 2019 2020 123 2021 40 2022 41 44 1502 125 59 2018 321 2019 2023 123 2024 40 2025 41 44 1502 125 59 569 2026 40 41 2010 123 688 40 2020 46 2027 40 41 309 2023 46 2027 40 41 41 123 2028 2029 123 125 59 2030 2031 59 688 40 2020 46 2032 40 38 2031 41 41 123 2029 46 2033 61 2031 46 2034 47 1504 59 330 601 660 2035 61 1507 47 40 660 41 2031 46 2036 59 601 2037 2038 61 2037 123 2031 46 2039 125 42 2035 42 1504 47 2040 59 2029 46 2041 61 40 2042 41 2038 40 1500 41 59 2029 46 2043 61 40 2042 41 2038 40 1501 41 59 2029 46 2044 61 40 2042 41 2038 40 1502 41 59 330 601 660 2045 61 1507 47 40 660 41 2031 46 2036 59 601 2037 2046 61 2037 123 2031 46 2047 125 42 2045 42 1504 59 2029 46 2048 61 2046 40 1500 41 59 2029 46 2049 61 2046 40 1501 41 59 2029 46 2050 61 2046 40 1502 41 59 125 2051 2052 59 688 40 2023 46 2032 40 38 2052 41 41 123 688 40 2029 46 2053 323 1500 41 123 2029 46 2053 61 2052 46 2054 47 1504 59 125 2029 46 2055 61 2052 46 2056 42 1504 59 330 2029 46 2057 61 2052 46 2058 42 1504 59 330 2029 46 2059 61 2052 46 2060 42 1504 59 330 2029 46 2061 61 2052 46 2061 59 125 2062 40 2063 354 2064 40 41 44 38 2029 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 71, 'CountStmt': 27, 'MaxNesting': 3, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 53, 'CountStmtDecl': 17, 'MaxCyclomatic': 5, 'SumCyclomatic': 13, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 53, 'CountLineCodeExe': 6, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118068,C++,"class FlightTaskManualAcceleration : public FlightTaskManualAltitudeSmoothVel
{
public:
	FlightTaskManualAcceleration();
	virtual ~FlightTaskManualAcceleration() = default;
	bool activate(const vehicle_local_position_setpoint_s &last_setpoint) override;
	bool update() override;

	/**
	 * Sets an external yaw handler which can be used to implement a different yaw control strategy.
	 */
	void setYawHandler(WeatherVane *yaw_handler) override { _weathervane_yaw_handler = yaw_handler; }

private:
	void _ekfResetHandlerPositionXY(const matrix::Vector2f &delta_xy) override;
	void _ekfResetHandlerVelocityXY(const matrix::Vector2f &delta_vxy) override;

	StickAccelerationXY _stick_acceleration_xy;
	StickYaw _stick_yaw;

	WeatherVane *_weathervane_yaw_handler{nullptr}; /**< external weathervane library, used to implement a yaw control law that turns the vehicle nose into the wind */
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 864 126 2000 40 41 61 613 59 569 2002 40 601 2003 38 2004 41 2005 59 569 2006 40 41 2005 59 306 865 2007 40 2008 42 2009 41 2005 123 2010 61 2009 59 125 773 58 865 2011 40 601 2012 321 2013 38 2014 41 2005 59 865 2015 40 601 2012 321 2013 38 2016 41 2005 59 2017 2018 59 2019 2020 59 2008 42 2021 123 753 125 59 306 125 59 ,"{'AvgLine': 9, 'CountLine': 78, 'CountStmt': 20, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 57, 'CountStmtDecl': 11, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 57, 'CountLineCodeExe': 8, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 77, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118088,C++,"class EkfMeasurementSamplingTest : public ::testing::Test
{
public:
	EkfMeasurementSamplingTest(): ::testing::Test(),
		_ekf{std::make_shared<Ekf>()} {};

	std::shared_ptr<Ekf> _ekf;

	void SetUp() override
	{
		_ekf->init(0);
	}
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 58 321 2001 321 2002 40 41 44 2003 123 2004 321 2005 60 2006 62 40 41 125 123 125 59 2007 321 2008 60 2009 62 2003 59 865 2010 40 41 2011 123 2003 354 2012 40 1500 41 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 13, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 11, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118081,C++,"class MavlinkStreamOrbitStatus : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamOrbitStatus(mavlink); }

	static constexpr const char *get_name_static() { return ""ORBIT_EXECUTION_STATUS""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_ORBIT_EXECUTION_STATUS; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _orbit_status_subs.advertised() ? MAVLINK_MSG_ID_ORBIT_EXECUTION_STATUS_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamOrbitStatus(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::SubscriptionMultiArray<orbit_status_s, 2> _orbit_status_subs{ORB_ID::orbit_status};

	bool send() override
	{
		orbit_status_s orbit_status;
		bool updated = false;

		for (auto &orbit_sub : _orbit_status_subs) {
			if (orbit_sub.update(&orbit_status)) {
				mavlink_orbit_execution_status_t msg_orbit_execution_status{};

				msg_orbit_execution_status.time_usec = orbit_status.timestamp;
				msg_orbit_execution_status.radius = orbit_status.radius;
				msg_orbit_execution_status.frame = orbit_status.frame;
				msg_orbit_execution_status.x = orbit_status.x * 1e7;
				msg_orbit_execution_status.y = orbit_status.y * 1e7;
				msg_orbit_execution_status.z = orbit_status.z;

				mavlink_msg_orbit_execution_status_send_struct(_mavlink->get_channel(), &msg_orbit_execution_status);

				// only one subscription should ever be active at any time, so we can exit here
				updated = true;
				break;
			}
		}

		return updated;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 60 2019 44 1502 62 2020 123 2021 321 2022 125 59 569 2023 40 41 2010 123 2019 2024 59 569 2025 61 655 59 664 40 561 38 2026 58 2020 41 123 688 40 2026 46 2027 40 38 2024 41 41 123 2028 2029 123 125 59 2029 46 2030 61 2024 46 2031 59 2029 46 2032 61 2024 46 2032 59 2029 46 2033 61 2024 46 2033 59 2029 46 2034 61 2024 46 2034 42 1508 59 2029 46 2035 61 2024 46 2035 42 1508 59 2029 46 2036 61 2024 46 2036 59 2037 40 2038 354 2039 40 41 44 38 2029 41 59 330 2025 61 829 59 572 59 125 125 792 2025 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 48, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 36, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118090,C++,"class MavlinkStreamScaledPressure : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamScaledPressure(mavlink); }

	static constexpr const char *get_name_static() { return ""SCALED_PRESSURE""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_SCALED_PRESSURE; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		if (_sensor_baro_sub.advertised() || _differential_pressure_sub.advertised()) {
			return MAVLINK_MSG_ID_SCALED_PRESSURE_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		}

		return 0;
	}

private:
	explicit MavlinkStreamScaledPressure(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _differential_pressure_sub{ORB_ID(differential_pressure), 0};
	uORB::Subscription _sensor_baro_sub{ORB_ID(sensor_baro), 0};

	bool send() override
	{
		if (_sensor_baro_sub.updated() || _differential_pressure_sub.updated()) {
			mavlink_scaled_pressure_t msg{};

			sensor_baro_s sensor_baro;

			if (_sensor_baro_sub.copy(&sensor_baro)) {
				msg.time_boot_ms = sensor_baro.timestamp / 1000;
				msg.press_abs = sensor_baro.pressure; // millibar to hPa
				msg.temperature = roundf(sensor_baro.temperature * 100.f); // centidegrees
			}

			differential_pressure_s differential_pressure;

			if (_differential_pressure_sub.copy(&differential_pressure)) {
				if (msg.time_boot_ms == 0) {
					msg.time_boot_ms = differential_pressure.timestamp / 1000;
				}

				msg.press_diff = differential_pressure.differential_pressure_raw_pa * 100.f; // Pa to hPa
				msg.temperature_press_diff = roundf(differential_pressure.temperature * 100.f); // centidegrees
			}

			mavlink_msg_scaled_pressure_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 688 40 2013 46 2014 40 41 309 2015 46 2014 40 41 41 123 792 2016 43 2017 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2018 321 2019 2020 123 2021 40 2022 41 44 1500 125 59 2018 321 2019 2023 123 2024 40 2025 41 44 1500 125 59 569 2026 40 41 2010 123 688 40 2023 46 2027 40 41 309 2020 46 2027 40 41 41 123 2028 2029 123 125 59 2030 2031 59 688 40 2023 46 2032 40 38 2031 41 41 123 2029 46 2033 61 2031 46 2034 47 1504 59 2029 46 2035 61 2031 46 2036 59 330 2029 46 2037 61 2038 40 2031 46 2037 42 1503 41 59 330 125 2039 2040 59 688 40 2020 46 2032 40 38 2040 41 41 123 688 40 2029 46 2041 323 1500 41 123 2029 46 2041 61 2040 46 2042 47 1504 59 125 2029 46 2043 61 2040 46 2044 42 1503 59 330 2029 46 2045 61 2046 40 2040 46 2047 42 1503 41 59 330 125 2048 40 2049 354 2050 40 41 44 38 2029 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 58, 'CountStmt': 23, 'MaxNesting': 3, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 43, 'CountStmtDecl': 13, 'MaxCyclomatic': 5, 'SumCyclomatic': 13, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 43, 'CountLineCodeExe': 6, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118101,C++,"template <unsigned RxQueueCapacity = 128>
class CanInitHelper
{
	CanRxItem queue_storage_[UAVCAN_STM32_NUM_IFACES][RxQueueCapacity];

public:
	enum { BitRateAutoDetect = 0 };

	CanDriver driver;
	uint32_t enabledInterfaces_;

	CanInitHelper(const uavcan::uint32_t EnabledInterfaces = 0x7) :
		driver(queue_storage_),
		enabledInterfaces_(EnabledInterfaces)
	{ }

	/**
	 * This overload simply configures the provided bitrate.
	 * Auto bit rate detection will not be performed.
	 * Bitrate value must be positive.
	 * @return  Negative value on error; non-negative on success. Refer to constants Err*.
	 */
	int init(uavcan::uint32_t bitrate)
	{
		return driver.init(bitrate, CanIface::NormalMode, enabledInterfaces_);
	}

	/**
	 * This function can either initialize the driver at a fixed bit rate, or it can perform
	 * automatic bit rate detection. For theory please refer to the CiA application note #801.
	 *
	 * @param delay_callable    A callable entity that suspends execution for strictly more than one second.
	 *                          The callable entity will be invoked without arguments.
	 *                          @ref getRecommendedListeningDelay().
	 *
	 * @param inout_bitrate     Fixed bit rate or zero. Zero invokes the bit rate detection process.
	 *                          If auto detection was used, the function will update the argument
	 *                          with established bit rate. In case of an error the value will be undefined.
	 *
	 * @return                  Negative value on error; non-negative on success. Refer to constants Err*.
	 */
	template <typename DelayCallable>
	int init(DelayCallable delay_callable, uavcan::uint32_t &inout_bitrate = BitRateAutoDetect)
	{
		if (inout_bitrate > 0) {
			return driver.init(inout_bitrate, CanIface::NormalMode, enabledInterfaces_);

		} else {
			static const uavcan::uint32_t StandardBitRates[] = {
				1000000,
				500000,
				250000,
				125000
			};

			for (uavcan::uint8_t br = 0; br < sizeof(StandardBitRates) / sizeof(StandardBitRates[0]); br++) {
				inout_bitrate = StandardBitRates[br];

				const int res = driver.init(inout_bitrate, CanIface::SilentMode, enabledInterfaces_);

				delay_callable();

				if (res >= 0) {
					for (uavcan::uint8_t iface = 0; iface < driver.getNumIfaces(); iface++) {
						if (!driver.getIface(iface)->isRxBufferEmpty()) {
							// Re-initializing in normal mode
							return driver.init(inout_bitrate, CanIface::NormalMode, enabledInterfaces_);
						}
					}
				}
			}

			return -ErrBitRateNotDetected;
		}
	}

	/**
	 * Use this value for listening delay during automatic bit rate detection.
	 */
	static uavcan::MonotonicDuration getRecommendedListeningDelay()
	{
		return uavcan::MonotonicDuration::fromMSec(1050);
	}
};",0,822 60 856 2000 61 1504 62 587 2001 123 2002 2003 91 2004 93 91 2000 93 59 777 58 640 123 2005 61 1500 125 59 2006 2007 59 2008 2009 59 2001 40 601 2010 321 2008 2011 61 1502 41 58 2007 40 2003 41 44 2009 40 2011 41 123 125 306 704 2012 40 2010 321 2008 2013 41 123 792 2007 46 2012 40 2013 44 2014 321 2015 44 2009 41 59 125 306 822 60 835 2016 62 704 2012 40 2016 2017 44 2010 321 2008 38 2018 61 2019 41 123 688 40 2018 62 1500 41 123 792 2007 46 2012 40 2018 44 2020 321 2021 44 2009 41 59 125 630 123 809 601 2010 321 2008 2022 91 93 61 123 1507 44 1507 44 1507 44 1507 125 59 664 40 2010 321 2023 2024 61 1500 59 2024 60 805 40 2022 41 47 805 40 2022 91 1500 93 41 59 2024 349 41 123 2018 61 2022 91 2024 93 59 601 704 2025 61 2007 46 2012 40 2018 44 2026 321 2027 44 2009 41 59 2017 40 41 59 688 40 2025 325 1500 41 123 664 40 2010 321 2023 2028 61 1500 59 2028 60 2007 46 2029 40 41 59 2028 349 41 123 688 40 33 2007 46 2030 40 2028 41 354 2031 40 41 41 123 330 792 2007 46 2012 40 2018 44 2026 321 2032 44 2009 41 59 125 125 125 125 792 45 2033 59 125 125 306 809 2010 321 2034 2035 40 41 123 792 2010 321 2034 321 2036 40 1505 41 59 125 125 59 ,"{'AvgLine': 11, 'CountLine': 82, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 46, 'CountLineCodeExe': 3, 'CountLineComment': 24, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.52', 'AltCountLineComment': 24, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118091,C++,"class MavlinkStreamHomePosition : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamHomePosition(mavlink); }

	static constexpr const char *get_name_static() { return ""HOME_POSITION""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_HOME_POSITION; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _home_sub.advertised() ? (MAVLINK_MSG_ID_HOME_POSITION_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES) : 0;
	}

private:
	explicit MavlinkStreamHomePosition(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _home_sub{ORB_ID(home_position)};

	bool send() override
	{
		// we're sending the GPS home periodically to ensure the
		// the GCS does pick it up at one point
		home_position_s home;

		if (_home_sub.advertised() && _home_sub.copy(&home)) {
			if (home.valid_hpos) {
				mavlink_home_position_t msg{};

				msg.latitude  = home.lat * 1e7;
				msg.longitude = home.lon * 1e7;
				msg.altitude  = home.alt * 1e3f;

				msg.x = home.x;
				msg.y = home.y;
				msg.z = home.z;

				matrix::Quatf q(matrix::Eulerf(0.f, 0.f, home.yaw));
				q.copyTo(msg.q);

				msg.approach_x = 0.f;
				msg.approach_y = 0.f;
				msg.approach_z = 0.f;

				msg.time_usec = home.timestamp;

				mavlink_msg_home_position_send_struct(_mavlink->get_channel(), &msg);

				return true;
			}
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 40 2015 43 2016 41 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 330 330 2023 2024 59 688 40 2019 46 2025 40 41 307 2019 46 2026 40 38 2024 41 41 123 688 40 2024 46 2027 41 123 2028 2029 123 125 59 2029 46 2030 61 2024 46 2031 42 1508 59 2029 46 2032 61 2024 46 2033 42 1508 59 2029 46 2034 61 2024 46 2035 42 1504 59 2029 46 2036 61 2024 46 2036 59 2029 46 2037 61 2024 46 2037 59 2029 46 2038 61 2024 46 2038 59 2039 321 2040 2041 40 2039 321 2042 40 1500 44 1500 44 2024 46 2043 41 41 59 2041 46 2044 40 2029 46 2041 41 59 2029 46 2045 61 1500 59 2029 46 2046 61 1500 59 2029 46 2047 61 1500 59 2029 46 2048 61 2024 46 2049 59 2050 40 2051 354 2052 40 41 44 38 2029 41 59 792 829 59 125 125 792 655 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 57, 'CountStmt': 18, 'MaxNesting': 2, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 6, 'MaxEssential': 3, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 40, 'CountStmtDecl': 12, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 40, 'CountLineCodeExe': 5, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118116,C++,"class ECL_RollController :
	public ECL_Controller
{
public:
	ECL_RollController() = default;
	~ECL_RollController() = default;

	float control_attitude(const float dt, const ECL_ControlData &ctl_data) override;
	float control_euler_rate(const float dt, const ECL_ControlData &ctl_data, float bodyrate_ff) override;
	float control_bodyrate(const float dt, const ECL_ControlData &ctl_data) override;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 126 2000 40 41 61 613 59 660 2002 40 601 660 2003 44 601 2004 38 2005 41 2006 59 660 2007 40 601 660 2003 44 601 2004 38 2005 44 660 2008 41 2006 59 660 2009 40 601 660 2003 44 601 2004 38 2005 41 2006 59 125 59 ,"{'AvgLine': 24, 'CountLine': 82, 'CountStmt': 23, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 5, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 51, 'CountStmtDecl': 5, 'MaxCyclomatic': 5, 'SumCyclomatic': 8, 'AltAvgLineCode': 14, 'AvgLineComment': 5, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 5, 'CountDeclMethod': 5, 'AltCountLineCode': 51, 'CountLineCodeExe': 29, 'CountLineComment': 15, 'AltAvgLineComment': 5, 'AltCountLineBlank': 16, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 23, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.29', 'AltCountLineComment': 15, 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 12, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118111,C++,"class EKFYawEstimatorTest : public ::testing::Test
{
public:

	EKFYawEstimatorTest(): ::testing::Test(),
		_ekf{std::make_shared<Ekf>()},
		_sensor_simulator(_ekf),
		_ekf_wrapper(_ekf) {};

	std::shared_ptr<Ekf> _ekf;
	SensorSimulator _sensor_simulator;
	EkfWrapper _ekf_wrapper;

	// Setup the Ekf with mag aiding disabled
	void SetUp() override
	{
		_ekf->init(0);
		_ekf_wrapper.setMagFuseTypeNone();
		_sensor_simulator.runSeconds(2);
		_ekf_wrapper.enableGpsFusion();
		_sensor_simulator.startGps();
		_sensor_simulator.runSeconds(11);
	}

	// Use this method to clean up any memory, network etc. after each test
	void TearDown() override
	{
	}
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 58 321 2001 321 2002 40 41 44 2003 123 2004 321 2005 60 2006 62 40 41 125 44 2007 40 2003 41 44 2008 40 2003 41 123 125 59 2009 321 2010 60 2011 62 2003 59 2012 2007 59 2013 2008 59 330 865 2014 40 41 2015 123 2003 354 2016 40 1500 41 59 2008 46 2017 40 41 59 2007 46 2018 40 1502 41 59 2008 46 2019 40 41 59 2007 46 2020 40 41 59 2007 46 2018 40 1503 41 59 125 330 865 2021 40 41 2015 123 125 125 59 ,"{'AvgLine': 5, 'CountLine': 29, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 23, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 23, 'CountLineCodeExe': 0, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118135,C++,"class UavcanRangefinderBridge : public UavcanSensorBridgeBase
{
public:
	static const char *const NAME;

	UavcanRangefinderBridge(uavcan::INode &node);

	const char *get_name() const override { return NAME; }

	int init() override;

private:

	int init_driver(uavcan_bridge::Channel *channel) override;

	void range_sub_cb(const uavcan::ReceivedDataStructure<uavcan::equipment::range_sensor::Measurement> &msg);

	typedef uavcan::MethodBinder < UavcanRangefinderBridge *,
		void (UavcanRangefinderBridge::*)
		(const uavcan::ReceivedDataStructure<uavcan::equipment::range_sensor::Measurement> &) >
		RangeCbBinder;

	uavcan::Subscriber<uavcan::equipment::range_sensor::Measurement, RangeCbBinder> _sub_range_data;

	float _range_min_m{0.0f};
	float _range_max_m{0.0f};

	bool _inited{false};

};",0,587 2000 58 777 2001 123 777 58 809 601 582 42 601 2002 59 2000 40 2003 321 2004 38 2005 41 59 601 582 42 2006 40 41 601 2007 123 792 2002 59 125 704 2008 40 41 2007 59 773 58 704 2009 40 2010 321 2011 42 2012 41 2007 59 865 2013 40 601 2003 321 2014 60 2003 321 2015 321 2016 321 2017 62 38 2018 41 59 833 2003 321 2019 60 2000 42 44 865 40 2000 321 42 41 40 601 2003 321 2014 60 2003 321 2015 321 2016 321 2017 62 38 41 62 2020 59 2003 321 2021 60 2003 321 2015 321 2016 321 2017 44 2020 62 2022 59 660 2023 123 1500 125 59 660 2024 123 1500 125 59 569 2025 123 655 125 59 125 59 ,"{'AvgLine': 20, 'CountLine': 130, 'CountStmt': 41, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 24, 'MaxEssential': 3, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 87, 'CountStmtDecl': 17, 'MaxCyclomatic': 4, 'SumCyclomatic': 12, 'AltAvgLineCode': 13, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 32, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 5, 'AltCountLineCode': 87, 'CountLineCodeExe': 21, 'CountLineComment': 11, 'AltAvgLineComment': 2, 'AltCountLineBlank': 32, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 89, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
118139,C++,"class RestartRequestHandler: public uavcan::IRestartRequestHandler
{
	bool handleRestartRequest(uavcan::NodeID request_source) override
	{
		PX4_INFO(""UAVCAN: Restarting by request from %i\n"", int(request_source.get()));
		usleep(20 * 1000 * 1000);
		board_reset(0);
		return true; // Will never be executed BTW
	}
} restart_request_handler;",0,587 2000 58 777 2001 321 2002 123 569 2003 40 2001 321 2004 2005 41 2006 123 2007 40 362 44 704 40 2005 46 2008 40 41 41 41 59 2009 40 1503 42 1504 42 1504 41 59 2010 40 1500 41 59 792 829 59 330 125 125 2011 59 ,"{'AvgLine': 7, 'CountLine': 10, 'CountStmt': 5, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 2, 'CountLineCode': 10, 'CountStmtDecl': 1, 'MaxCyclomatic': 2, 'SumCyclomatic': 2, 'AltAvgLineCode': 7, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 10, 'CountLineCodeExe': 3, 'CountLineComment': 1, 'AltAvgLineComment': 1, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118157,C++,"class HelloExample
{
public:
	HelloExample() {}

	~HelloExample() {}

	int main();

	static px4::AppState appState; /* track requests to terminate app */
};",0,587 2000 123 777 58 2000 40 41 123 125 126 2000 40 41 123 125 704 2001 40 41 59 809 2002 321 2003 2004 59 305 125 59 ,"{'AvgLine': 5, 'CountLine': 26, 'CountStmt': 11, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 19, 'CountLineCodeExe': 11, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118168,C++,"class OutputMavlinkV1 : public OutputBase
{
public:
	OutputMavlinkV1(const OutputConfig &output_config);
	virtual ~OutputMavlinkV1() = default;

	virtual int update(const ControlData *control_data);

	virtual void print_status();

private:
	void _stream_device_attitude_status();
	uORB::Publication<vehicle_command_s> _vehicle_command_pub{ORB_ID(vehicle_command)};
	uORB::Publication <gimbal_device_attitude_status_s>	_attitude_status_pub{ORB_ID(gimbal_device_attitude_status)};
};",0,587 2000 58 777 2001 123 777 58 2000 40 601 2002 38 2003 41 59 864 126 2000 40 41 61 613 59 864 704 2004 40 601 2005 42 2006 41 59 864 865 2007 40 41 59 773 58 865 2008 40 41 59 2009 321 2010 60 2011 62 2012 123 2013 40 2014 41 125 59 2009 321 2010 60 2015 62 2016 123 2017 40 2018 41 125 59 125 59 ,"{'AvgLine': 21, 'CountLine': 101, 'CountStmt': 20, 'MaxNesting': 2, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 74, 'CountStmtDecl': 11, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 15, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 5, 'AltCountLineCode': 74, 'CountLineCodeExe': 11, 'CountLineComment': 7, 'AltAvgLineComment': 1, 'AltCountLineBlank': 21, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118183,C++,"	class RxQueue
	{
		CanRxItem *const buf_;
		const uavcan::uint8_t capacity_;
		uavcan::uint8_t in_;
		uavcan::uint8_t out_;
		uavcan::uint8_t len_;
		uavcan::uint32_t overflow_cnt_;

		void registerOverflow();

	public:
		RxQueue(CanRxItem *buf, uavcan::uint8_t capacity)
			: buf_(buf)
			, capacity_(capacity)
			, in_(0)
			, out_(0)
			, len_(0)
			, overflow_cnt_(0)
		{ }

		void push(const uavcan::CanFrame &frame, const uint64_t &utc_usec, uavcan::CanIOFlags flags);
		void pop(uavcan::CanFrame &out_frame, uavcan::uint64_t &out_utc_usec, uavcan::CanIOFlags &out_flags);

		void reset();

		unsigned getLength() const { return len_; }

		uavcan::uint32_t getOverflowCount() const { return overflow_cnt_; }
	};",0,587 2000 123 2001 42 601 2002 59 601 2003 321 2004 2005 59 2003 321 2004 2006 59 2003 321 2004 2007 59 2003 321 2004 2008 59 2003 321 2009 2010 59 865 2011 40 41 59 777 58 2000 40 2001 42 2012 44 2003 321 2004 2013 41 58 2002 40 2012 41 44 2005 40 2013 41 44 2006 40 1500 41 44 2007 40 1500 41 44 2008 40 1500 41 44 2010 40 1500 41 123 125 865 2014 40 601 2003 321 2015 38 2016 44 601 2017 38 2018 44 2003 321 2019 2020 41 59 865 2021 40 2003 321 2015 38 2022 44 2003 321 2017 38 2023 44 2003 321 2019 38 2024 41 59 865 2025 40 41 59 856 2026 40 41 601 123 792 2008 59 125 2003 321 2009 2027 40 41 601 123 792 2010 59 125 125 59 ,"{'AvgLine': 8, 'CountLine': 82, 'CountStmt': 22, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 69, 'CountStmtDecl': 14, 'MaxCyclomatic': 4, 'SumCyclomatic': 13, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 69, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118182,C++,"class CanDriver : public uavcan::ICanDriver, uavcan::Noncopyable
{
	BusEvent update_event_;
	CanIface if0_;
#if UAVCAN_STM32H7_NUM_IFACES > 1
	CanIface if1_;
#endif
	uint8_t num_ifaces_;
	uint32_t enabledInterfaces_;

	virtual uavcan::int16_t select(uavcan::CanSelectMasks &inout_masks,
				       const uavcan::CanFrame * (& pending_tx)[uavcan::MaxCanIfaces],
				       uavcan::MonotonicTime blocking_deadline);

	static void initOnce();

public:
	template <unsigned RxQueueCapacity>
	CanDriver(CanRxItem(&rx_queue_storage)[UAVCAN_STM32H7_NUM_IFACES][RxQueueCapacity])
		: update_event_(*this)
		, if0_(fdcan::Can[0], update_event_, 0, rx_queue_storage[0], RxQueueCapacity)
#if UAVCAN_STM32H7_NUM_IFACES > 1
		, if1_(fdcan::Can[1], update_event_, 1, rx_queue_storage[1], RxQueueCapacity)
		, num_ifaces_(2)
#else
		, num_ifaces_(1)
#endif
		, enabledInterfaces_(0x7)
	{
		uavcan::StaticAssert < (RxQueueCapacity <= CanIface::MaxRxQueueCapacity) >::check();
	}

	/**
	 * This function returns select masks indicating which interfaces are available for read/write.
	 */
	uavcan::CanSelectMasks makeSelectMasks(const uavcan::CanFrame * (& pending_tx)[uavcan::MaxCanIfaces]) const;

	/**
	 * Whether there's at least one interface where receive() would return a frame.
	 */
	bool hasReadableInterfaces() const;

	/**
	 * Returns zero if OK.
	 * Returns negative value if failed (e.g. invalid bitrate).
	 */
	int init(const uavcan::uint32_t bitrate, const CanIface::OperatingMode mode, const uavcan::uint32_t EnabledInterfaces);

	virtual CanIface *getIface(uavcan::uint8_t iface_index);

	virtual uavcan::uint8_t getNumIfaces() const { return UAVCAN_STM32H7_NUM_IFACES; }

	/**
	 * Whether at least one iface had at least one successful IO since previous call of this method.
	 * This is designed for use with iface activity LEDs.
	 */
	bool hadActivity();

	BusEvent &updateEvent() { return update_event_; }
};",0,587 2000 58 777 2001 321 2002 44 2001 321 2003 123 2004 2005 59 2006 2007 59 35 688 2008 62 1501 2006 2009 59 35 636 2010 2011 59 2012 2013 59 864 2001 321 2014 2015 40 2001 321 2016 38 2017 44 601 2001 321 2018 42 40 38 2019 41 91 2001 321 2020 93 44 2001 321 2021 2022 41 59 809 865 2023 40 41 59 777 58 822 60 856 2024 62 2000 40 2025 40 38 2026 41 91 2008 93 91 2024 93 41 58 2005 40 42 823 41 44 2007 40 2027 321 2028 91 1500 93 44 2005 44 1500 44 2026 91 1500 93 44 2024 41 35 688 2008 62 1501 44 2009 40 2027 321 2028 91 1501 93 44 2005 44 1501 44 2026 91 1501 93 44 2024 41 44 2011 40 1502 41 35 630 44 2011 40 1501 41 35 636 44 2013 40 1502 41 123 2001 321 2029 60 40 2024 329 2006 321 2030 41 62 321 2031 40 41 59 125 306 2001 321 2016 2032 40 601 2001 321 2018 42 40 38 2019 41 91 2001 321 2020 93 41 601 59 306 569 2033 40 41 601 59 306 704 2034 40 601 2001 321 2012 2035 44 601 2006 321 2036 2037 44 601 2001 321 2012 2038 41 59 864 2006 42 2039 40 2001 321 2010 2040 41 59 864 2001 321 2010 2041 40 41 601 123 792 2008 59 125 306 569 2042 40 41 59 2004 38 2043 40 41 123 792 2005 59 125 125 59 ,"{'AvgLine': 18, 'CountLine': 228, 'CountStmt': 55, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 31, 'MaxEssential': 3, 'SumEssential': 14, 'AvgCyclomatic': 1, 'CountLineCode': 118, 'CountStmtDecl': 28, 'MaxCyclomatic': 4, 'SumCyclomatic': 19, 'AltAvgLineCode': 14, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 29, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 10, 'AltCountLineCode': 170, 'CountLineCodeExe': 21, 'CountLineComment': 34, 'AltAvgLineComment': 2, 'AltCountLineBlank': 32, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 18, 'CountLineInactive': 39, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.29', 'AltCountLineComment': 35, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 20, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118176,C++,"class IBMP280
{
public:
	virtual ~IBMP280() = default;

	virtual int init() = 0;

	// read reg value
	virtual uint8_t get_reg(uint8_t addr) = 0;

	// write reg value
	virtual int set_reg(uint8_t value, uint8_t addr) = 0;

	// bulk read of data into buffer, return same pointer
	virtual bmp280::data_s *get_data(uint8_t addr) = 0;

	// bulk read of calibration data into buffer, return same pointer
	virtual bmp280::calibration_s *get_calibration(uint8_t addr) = 0;

	virtual uint32_t get_device_id() const = 0;

	virtual uint8_t get_device_address() const = 0;
};",0,587 2000 123 777 58 864 126 2000 40 41 61 613 59 864 704 2001 40 41 61 1500 59 330 864 2002 2003 40 2002 2004 41 61 1500 59 330 864 704 2005 40 2002 2006 44 2002 2004 41 61 1500 59 330 864 2007 321 2008 42 2009 40 2002 2004 41 61 1500 59 330 864 2007 321 2010 42 2011 40 2002 2004 41 61 1500 59 864 2012 2013 40 41 601 61 1500 59 864 2002 2014 40 41 601 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 23, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 12, 'CountStmtDecl': 7, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 12, 'CountLineCodeExe': 0, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.33', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118177,C++,"class Takeoff
{
public:
	Takeoff() = default;
	~Takeoff() = default;

	// initialize parameters
	void setSpoolupTime(const float seconds) { _spoolup_time_hysteresis.set_hysteresis_time_from(false, seconds * 1_s); }
	void setTakeoffRampTime(const float seconds) { _takeoff_ramp_time = seconds; }

	/**
	 * Calculate a vertical velocity to initialize the takeoff ramp
	 * that when passed to the velocity controller results in a zero throttle setpoint.
	 * @param hover_thrust normalized thrsut value with which the vehicle hovers
	 * @param velocity_p_gain proportional gain of the velocity controller to calculate the thrust
	 */
	void generateInitialRampValue(const float velocity_p_gain);

	/**
	 * Update the state for the takeoff.
	 * @param setpoint a vehicle_local_position_setpoint_s structure
	 * @return true if setpoint has updated correctly
	 */
	void updateTakeoffState(const bool armed, const bool landed, const bool want_takeoff,
				const float takeoff_desired_vz, const bool skip_takeoff, const hrt_abstime &now_us);

	/**
	 * Update and return the velocity constraint ramp value during takeoff.
	 * By ramping up _takeoff_ramp_vz during the takeoff and using it to constain the maximum climb rate a smooth takeoff behavior is achieved.
	 * Returns zero on the ground and takeoff_desired_vz in flight.
	 * @param dt time in seconds since the last call/loop iteration
	 * @param takeoff_desired_vz end value for the velocity ramp
	 * @return true if setpoint has updated correctly
	 */
	float updateRamp(const float dt, const float takeoff_desired_vz);

	TakeoffState getTakeoffState() { return _takeoff_state; }

private:
	TakeoffState _takeoff_state = TakeoffState::disarmed;

	systemlib::Hysteresis _spoolup_time_hysteresis{false}; ///< becomes true MPC_SPOOLUP_TIME seconds after the vehicle was armed

	float _takeoff_ramp_time{0.f};
	float _takeoff_ramp_vz_init{0.f}; ///< verticval velocity resulting in zero thrust
	float _takeoff_ramp_progress{0.f}; ///< asecnding from 0 to 1
};",0,587 2000 123 777 58 2000 40 41 61 613 59 126 2000 40 41 61 613 59 330 865 2001 40 601 660 2002 41 123 2003 46 2004 40 655 44 2002 42 1501 41 59 125 865 2005 40 601 660 2002 41 123 2006 61 2002 59 125 306 865 2007 40 601 660 2008 41 59 306 865 2009 40 601 569 2010 44 601 569 2011 44 601 569 2012 44 601 660 2013 44 601 569 2014 44 601 2015 38 2016 41 59 306 660 2017 40 601 660 2018 44 601 660 2013 41 59 2019 2020 40 41 123 792 2021 59 125 773 58 2019 2022 61 2019 321 2023 59 2024 321 2025 2026 123 655 125 59 331 660 2027 123 1500 125 59 660 2028 123 1500 125 59 331 660 2029 123 1500 125 59 331 125 59 ,"{'AvgLine': 23, 'CountLine': 277, 'CountStmt': 105, 'MaxNesting': 5, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 88, 'MaxEssential': 10, 'SumEssential': 19, 'AvgCyclomatic': 4, 'CountLineCode': 184, 'CountStmtDecl': 19, 'MaxCyclomatic': 16, 'SumCyclomatic': 45, 'AltAvgLineCode': 16, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 56, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 4, 'CountDeclMethod': 12, 'AltCountLineCode': 184, 'CountLineCodeExe': 82, 'CountLineComment': 43, 'AltAvgLineComment': 2, 'AltCountLineBlank': 56, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 20, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.23', 'AltCountLineComment': 43, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 16, 'SumCyclomaticStrict': 46, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 4, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 16, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 41, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
118186,C++,"class MavlinkStreamPing : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamPing(mavlink); }

	static constexpr const char *get_name_static() { return ""PING""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_PING; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return MAVLINK_MSG_ID_PING_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
	}

	bool const_rate() override { return true; }

private:
	explicit MavlinkStreamPing(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uint32_t _sequence{0};

	bool send() override
	{
		mavlink_ping_t msg{};

		msg.time_usec = hrt_absolute_time();
		msg.seq = _sequence++;
		msg.target_system = 0; // All systems
		msg.target_component = 0; // All components

		mavlink_msg_ping_send_struct(_mavlink->get_channel(), &msg);

		return true;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 43 2014 59 125 569 2015 40 41 2010 123 792 829 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2016 2017 123 1500 125 59 569 2018 40 41 2010 123 2019 2020 123 125 59 2020 46 2021 61 2022 40 41 59 2020 46 2023 61 2017 349 59 2020 46 2024 61 1500 59 330 2020 46 2025 61 1500 59 330 2026 40 2027 354 2028 40 41 44 38 2020 41 59 792 829 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 37, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 27, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 9, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 27, 'CountLineCodeExe': 5, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 28, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118185,C++,"class MavlinkStreamNavControllerOutput : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamNavControllerOutput(mavlink); }

	static constexpr const char *get_name_static() { return ""NAV_CONTROLLER_OUTPUT""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _position_controller_status_sub.advertised() ? MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT_LEN +
		       MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamNavControllerOutput(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _position_controller_status_sub{ORB_ID(position_controller_status)};
	uORB::Subscription _tecs_status_sub{ORB_ID(tecs_status)};

	bool send() override
	{
		position_controller_status_s pos_ctrl_status;

		if (_position_controller_status_sub.update(&pos_ctrl_status)) {

			tecs_status_s tecs_status{};
			_tecs_status_sub.copy(&tecs_status);

			mavlink_nav_controller_output_t msg{};

			msg.nav_roll = math::degrees(pos_ctrl_status.nav_roll);
			msg.nav_pitch = math::degrees(pos_ctrl_status.nav_pitch);
			msg.nav_bearing = roundf(math::degrees(pos_ctrl_status.nav_bearing));
			msg.target_bearing = roundf(math::degrees(pos_ctrl_status.target_bearing));
			msg.wp_dist = math::constrain(roundf(pos_ctrl_status.wp_dist), 0.f, (float)UINT16_MAX);
			msg.xtrack_error = pos_ctrl_status.xtrack_error;
			msg.alt_error = tecs_status.altitude_filtered - tecs_status.altitude_sp;
			msg.aspd_error = tecs_status.true_airspeed_filtered - tecs_status.true_airspeed_sp;

			mavlink_msg_nav_controller_output_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 2017 321 2018 2022 123 2023 40 2024 41 125 59 569 2025 40 41 2010 123 2026 2027 59 688 40 2019 46 2028 40 38 2027 41 41 123 2029 2030 123 125 59 2022 46 2031 40 38 2030 41 59 2032 2033 123 125 59 2033 46 2034 61 2035 321 2036 40 2027 46 2034 41 59 2033 46 2037 61 2035 321 2036 40 2027 46 2037 41 59 2033 46 2038 61 2039 40 2035 321 2036 40 2027 46 2038 41 41 59 2033 46 2040 61 2039 40 2035 321 2036 40 2027 46 2040 41 41 59 2033 46 2041 61 2035 321 2042 40 2039 40 2027 46 2041 41 44 1500 44 40 660 41 2043 41 59 2033 46 2044 61 2027 46 2044 59 2033 46 2045 61 2030 46 2046 45 2030 46 2047 59 2033 46 2048 61 2030 46 2049 45 2030 46 2050 59 2051 40 2052 354 2053 40 41 44 38 2033 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 51, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 38, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 38, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118196,C++,"class RC_Loss_Alarm
{
public:

	RC_Loss_Alarm() = default;

	/** regularily called to handle state updates */
	void process();

private:
	/** Publish tune control to sound alarm */
	void play_tune();

	/** Publish tune control to interrupt any sound */
	void stop_tune();

	uORB::Publication<tune_control_s> _tune_control_pub{ORB_ID(tune_control)};
	uORB::Subscription _vehicle_status_sub{ORB_ID(vehicle_status)};

	bool 		_was_armed = false;
	bool 		_had_rc = false;  // Don't trigger alarm for systems without RC
	bool		_alarm_playing = false;
};",0,587 2000 123 777 58 2000 40 41 61 613 59 306 865 2001 40 41 59 773 58 306 865 2002 40 41 59 306 865 2003 40 41 59 2004 321 2005 60 2006 62 2007 123 2008 40 2009 41 125 59 2004 321 2010 2011 123 2012 40 2013 41 125 59 569 2014 61 655 59 569 2015 61 655 59 330 569 2016 61 655 59 125 59 ,"{'AvgLine': 15, 'CountLine': 68, 'CountStmt': 23, 'MaxNesting': 1, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 52, 'CountStmtDecl': 11, 'MaxCyclomatic': 6, 'SumCyclomatic': 8, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 52, 'CountLineCodeExe': 8, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
118201,C++,"class CollisionPreventionTest : public ::testing::Test
{
public:
	void SetUp() override
	{
		param_control_autosave(false);
		param_reset_all();
	}
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 865 2003 40 41 2004 123 2005 40 655 41 59 2006 40 41 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 9, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 9, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118209,C++,"class MavlinkStreamAttPosMocap : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamAttPosMocap(mavlink); }

	static constexpr const char *get_name_static() { return ""ATT_POS_MOCAP""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_ATT_POS_MOCAP; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _mocap_sub.advertised() ? MAVLINK_MSG_ID_ATT_POS_MOCAP_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamAttPosMocap(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _mocap_sub{ORB_ID(vehicle_mocap_odometry)};

	bool send() override
	{
		vehicle_odometry_s mocap;

		if (_mocap_sub.update(&mocap)) {
			mavlink_att_pos_mocap_t msg{};

			msg.time_usec = mocap.timestamp_sample;
			msg.q[0] = mocap.q[0];
			msg.q[1] = mocap.q[1];
			msg.q[2] = mocap.q[2];
			msg.q[3] = mocap.q[3];
			msg.x = mocap.x;
			msg.y = mocap.y;
			msg.z = mocap.z;
			// msg.covariance =

			mavlink_msg_att_pos_mocap_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 59 2027 46 2030 91 1500 93 61 2024 46 2030 91 1500 93 59 2027 46 2030 91 1501 93 61 2024 46 2030 91 1501 93 59 2027 46 2030 91 1502 93 61 2024 46 2030 91 1502 93 59 2027 46 2030 91 1502 93 61 2024 46 2030 91 1502 93 59 2027 46 2031 61 2024 46 2031 59 2027 46 2032 61 2024 46 2032 59 2027 46 2033 61 2024 46 2033 59 330 2034 40 2035 354 2036 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 46, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 34, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118267,C++,"class MavlinkStatustextHandler
{
public:
	bool should_publish_previous(const mavlink_statustext_t &msg_statustext);
	bool should_publish_current(const mavlink_statustext_t &msg_statustext, const uint64_t &now);

	const log_message_s &log_message() const { return _log_msg; };

private:
	log_message_s _log_msg{}; // required global for multi chunk statustexts
	int _last_log_chunk_seq{-1};
	uint16_t _last_log_id{0}; // non-zero means message has not been published
};",0,587 2000 123 777 58 569 2001 40 601 2002 38 2003 41 59 569 2004 40 601 2002 38 2003 44 601 2005 38 2006 41 59 601 2007 38 2008 40 41 601 123 792 2009 59 125 59 773 58 2007 2010 123 125 59 330 704 2011 123 45 1501 125 59 2012 2013 123 1500 125 59 330 125 59 ,"{'AvgLine': 28, 'CountLine': 97, 'CountStmt': 26, 'MaxNesting': 3, 'AvgLineCode': 20, 'AvgEssential': 1, 'AvgLineBlank': 5, 'CountStmtExe': 14, 'MaxEssential': 3, 'SumEssential': 5, 'AvgCyclomatic': 3, 'CountLineCode': 70, 'CountStmtDecl': 12, 'MaxCyclomatic': 6, 'SumCyclomatic': 9, 'AltAvgLineCode': 20, 'AvgLineComment': 3, 'CountClassBase': 0, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 5, 'CountDeclMethod': 3, 'AltCountLineCode': 70, 'CountLineCodeExe': 12, 'CountLineComment': 12, 'AltAvgLineComment': 3, 'AltCountLineBlank': 17, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.17', 'AltCountLineComment': 12, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118248,C++,"template <class T, size_t N>
class Array
{

public:

	bool push_back(const T &x)
	{
		if (_size == N) {
			_overflow = true;
			return false;

		} else {
			_items[_size] = x;
			++_size;
			return true;
		}
	}

	void remove(unsigned idx)
	{
		if (idx < _size) {
			--_size;

			for (unsigned i = idx; i < _size; ++i) {
				_items[i] = _items[i + 1];
			}
		}
	}

	void erase(T *item)
	{
		if (item - _items < static_cast<int>(_size)) {
			--_size;

			for (T *it = item; it != &_items[_size]; ++it) {
				*it = *(it + 1);
			}
		}
	}

	T &operator[](size_t n) { return _items[n]; }
	const T &operator[](size_t n) const { return _items[n]; }

	T &at(size_t n) { return _items[n]; }
	const T &at(size_t n) const { return _items[n]; }

	size_t size() const { return _size; }
	size_t max_size() const { return N; }
	size_t capacity() const { return N; }

	bool empty() const { return _size == 0; }

	bool is_overflowed() { return _overflow; }

	T *begin() { return &_items[0]; }
	T *end() { return &_items[_size]; }

	const T *begin() const { return &_items[0]; }
	const T *end() const { return &_items[_size]; }

private:
	T        _items[N];
	size_t      _size{0};
	bool        _overflow{false};
};",0,822 60 587 2000 44 2001 2002 62 587 2003 123 777 58 569 2004 40 601 2000 38 2005 41 123 688 40 2006 323 2002 41 123 2007 61 829 59 792 655 59 125 630 123 2008 91 2006 93 61 2005 59 349 2006 59 792 829 59 125 125 865 2009 40 856 2010 41 123 688 40 2010 60 2011 41 123 338 2011 59 664 40 856 2012 61 2010 59 2012 60 2011 59 349 2012 41 123 2013 91 2012 93 61 2013 91 2012 43 1501 93 59 125 125 125 865 2014 40 2000 42 2015 41 123 688 40 2015 45 2016 60 811 60 704 62 40 2017 41 41 123 338 2017 59 664 40 2000 42 2018 61 2015 59 2018 340 38 2016 91 2017 93 59 349 2018 41 123 42 2018 61 42 40 2018 43 1501 41 59 125 125 125 2000 38 758 91 93 40 2001 2019 41 123 792 2020 91 2019 93 59 125 601 2000 38 758 91 93 40 2001 2019 41 601 123 792 2021 91 2019 93 59 125 2000 38 2022 40 2001 2019 41 123 792 2023 91 2019 93 59 125 601 2000 38 2022 40 2001 2019 41 601 123 792 2024 91 2019 93 59 125 2001 2025 40 41 601 123 792 2026 59 125 2001 2027 40 41 601 123 792 2002 59 125 2001 2028 40 41 601 123 792 2002 59 125 569 2029 40 41 601 123 792 2030 323 1500 59 125 569 2031 40 41 123 792 2032 59 125 2000 42 2033 40 41 123 792 38 2034 91 1500 93 59 125 2000 42 2035 40 41 123 792 38 2036 91 2037 93 59 125 601 2000 42 2033 40 41 601 123 792 38 2038 91 1500 93 59 125 601 2000 42 2035 40 41 601 123 792 38 2039 91 2040 93 59 125 773 58 2000 2041 91 2002 93 59 2001 2042 123 1500 125 59 569 2043 123 655 125 59 125 59 ,"{'AvgLine': 2, 'CountLine': 65, 'CountStmt': 48, 'MaxNesting': 2, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 31, 'MaxEssential': 1, 'SumEssential': 16, 'AvgCyclomatic': 1, 'CountLineCode': 50, 'CountStmtDecl': 21, 'MaxCyclomatic': 3, 'SumCyclomatic': 21, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 16, 'AltCountLineCode': 50, 'CountLineCodeExe': 28, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 8, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 16, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 58, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 16, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
118213,C++,"class HMC5883_I2C : public device::I2C
{
public:
	HMC5883_I2C(int bus, int bus_frequency);
	virtual ~HMC5883_I2C() = default;

	virtual int	read(unsigned address, void *data, unsigned count);
	virtual int	write(unsigned address, void *data, unsigned count);

protected:
	virtual int	probe();
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 704 2004 41 59 864 126 2000 40 41 61 613 59 864 704 2005 40 856 2006 44 865 42 2007 44 856 2008 41 59 864 704 2009 40 856 2006 44 865 42 2007 44 856 2008 41 59 775 58 864 704 2010 40 41 59 125 59 ,"{'AvgLine': 11, 'CountLine': 55, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 46, 'CountLineCodeExe': 14, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118221,C++,"template<size_t N, size_t M, size_t D>
class ArxRls final
{
public:
	ArxRls()
	{
		static_assert(N >= M, ""The transfer function needs to be proper"");

		reset();
	}

	~ArxRls() = default;

	void setForgettingFactor(float time_constant, float dt) { _lambda = 1.f - dt / time_constant; }
	void setForgettingFactor(float lambda) { _lambda = lambda; }

	/*
	 * return the vector of estimated parameters
	 * [a_1 .. a_n b_0 .. b_m]'
	 */
	const matrix::Vector < float, N + M + 1 > &getCoefficients() const { return _theta_hat; }
	const matrix::Vector < float, N + M + 1 > getVariances() const { return _P.diag(); }
	float getInnovation() const { return _innovation; }
	const matrix::Vector < float, N + M + 1 > &getDiffEstimate() const { return _diff_theta_hat; }

	void reset(const matrix::Vector < float, N + M + 1 > &theta_init = {})
	{
		/* _P.uncorrelateCovarianceSetVariance<N + M + 1>(0, 10e3f); // does not work */
		_P.setZero();

		for (size_t i = 0; i < (N + M + 1); i++) {
			_P(i, i) = 10e3f;
		}

		_diff_theta_hat.setZero();

		_theta_hat = theta_init;

		for (size_t i = 0; i < M + D + 1; i++) {
			_u[i] = 0.f;
		}

		for (size_t i = 0; i < N + 1; i++) {
			_y[i] = 0.f;
		}

		_nb_samples = 0;
		_innovation = 0.f;
	}

	void update(float u, float y)
	{
		const matrix::Vector < float, N + M + 1 > theta_prev = _theta_hat;

		addInputOutput(u, y);

		if (!isBufferFull()) {
			// Do not start to update the RLS algorithm when the
			// buffer still contains zeros
			return;
		}

		const matrix::Vector < float, N + M + 1 > phi = constructDesignVector();
		const matrix::Matrix < float, 1, N + M + 1 > phi_t = phi.transpose();

		_P = (_P - _P * phi * phi_t * _P / (_lambda + (phi_t * _P * phi)(0, 0))) / _lambda;
		_innovation = _y[N] - (phi_t * _theta_hat)(0, 0);
		_theta_hat = _theta_hat + _P * phi * _innovation;

		for (size_t i = 0; i < N + M + 1; i++) {
			_diff_theta_hat(i) = fabsf(_theta_hat(i) - theta_prev(i));
		}

		/* fixCovarianceErrors(); // TODO: this could help against ill-conditioned matrix but needs more testing*/
	}

private:
	void addInputOutput(float u, float y)
	{
		shiftRegisters();
		_u[M + D] = u;
		_y[N] = y;

		if (!isBufferFull()) {
			_nb_samples++;
		}
	}

	void shiftRegisters()
	{
		for (size_t i = 0; i < N; i++) {
			_y[i] = _y[i + 1];
		}

		for (size_t i = 0; i < (M + D); i++) {
			_u[i] = _u[i + 1];
		}
	}

	bool isBufferFull() const { return _nb_samples > (M + N + D); }

	matrix::Vector < float, N + M + 1 > constructDesignVector() const
	{
		matrix::Vector < float, N + M + 1 > phi;

		for (size_t i = 0; i < N; i++) {
			phi(i) = -_y[N - i - 1];
		}

		int j = 0;

		for (size_t i = N; i < (N + M + 1); i++) {
			phi(i) = _u[M - j];
			j++;
		}

		return phi;
	}

	void fixCovarianceErrors()
	{
		float max_var = 0.f;

		for (size_t i = 0; i < (N + M + 1); i++) {
			if (_P(i, i) > max_var) {
				max_var = _P(i, i);
			}
		}

		const float min_var_allowed = max_var * 0.1f;

		for (size_t i = 0; i < (N + M + 1); i++) {
			if (_P(i, i) < min_var_allowed) {
				_P(i, i) = min_var_allowed;
			}
		}
	}

	matrix::SquareMatrix < float, N + M + 1 > _P;
	matrix::Vector < float, N + M + 1 > _theta_hat;
	matrix::Vector < float, N + M + 1 > _diff_theta_hat;
	float _innovation{};
	float _u[M + D + 1] {};
	float _y[N + 1] {};
	unsigned _nb_samples{0};
	float _lambda{1.f};
};",0,822 60 2000 2001 44 2000 2002 44 2000 2003 62 587 2004 2005 123 777 58 2004 40 41 123 810 40 2001 325 2002 44 362 41 59 2006 40 41 59 125 126 2004 40 41 61 613 59 865 2007 40 660 2008 44 660 2009 41 123 2010 61 1501 45 2009 47 2008 59 125 865 2007 40 660 2011 41 123 2012 61 2011 59 125 305 601 2013 321 2014 60 660 44 2001 43 2002 43 1501 62 38 2015 40 41 601 123 792 2016 59 125 601 2013 321 2014 60 660 44 2001 43 2002 43 1501 62 2017 40 41 601 123 792 2018 46 2019 40 41 59 125 660 2020 40 41 601 123 792 2021 59 125 601 2013 321 2014 60 660 44 2001 43 2002 43 1501 62 38 2022 40 41 601 123 792 2023 59 125 865 2024 40 601 2013 321 2014 60 660 44 2001 43 2002 43 1501 62 38 2025 61 123 125 41 123 305 2026 46 2027 40 41 59 664 40 2000 2028 61 1500 59 2028 60 40 2001 43 2002 43 1501 41 59 2028 349 41 123 2026 40 2028 44 2028 41 61 1505 59 125 2029 46 2027 40 41 59 2030 61 2025 59 664 40 2000 2028 61 1500 59 2028 60 2002 43 2003 43 1501 59 2028 349 41 123 2031 91 2028 93 61 1500 59 125 664 40 2000 2028 61 1500 59 2028 60 2001 43 1501 59 2028 349 41 123 2032 91 2028 93 61 1500 59 125 2033 61 1500 59 2034 61 1500 59 125 865 2035 40 660 2036 44 660 2037 41 123 601 2013 321 2014 60 660 44 2001 43 2002 43 1501 62 2038 61 2039 59 2040 40 2036 44 2037 41 59 688 40 33 2041 40 41 41 123 330 330 792 59 125 601 2013 321 2014 60 660 44 2001 43 2002 43 1501 62 2042 61 2043 40 41 59 601 2013 321 2044 60 660 44 1501 44 2001 43 2002 43 1501 62 2045 61 2042 46 2046 40 41 59 2047 61 40 2047 45 2047 42 2042 42 2045 42 2047 47 40 2048 43 40 2045 42 2047 42 2042 41 40 1500 44 1500 41 41 41 47 2048 59 2049 61 2050 91 2001 93 45 40 2045 42 2039 41 40 1500 44 1500 41 59 2039 61 2039 43 2047 42 2042 42 2049 59 664 40 2000 2051 61 1500 59 2051 60 2001 43 2002 43 1501 59 2051 349 41 123 2052 40 2051 41 61 2053 40 2039 40 2051 41 45 2038 40 2051 41 41 59 125 305 125 773 58 865 2054 40 660 2036 44 660 2037 41 123 2055 40 41 59 2056 91 2002 43 2003 93 61 2036 59 2057 91 2001 93 61 2037 59 688 40 33 2058 40 41 41 123 2059 349 59 125 125 865 2060 40 41 123 664 40 2000 2061 61 1500 59 2061 60 2001 59 2061 349 41 123 2062 91 2061 93 61 2062 91 2061 43 1501 93 59 125 664 40 2000 2061 61 1500 59 2061 60 40 2002 43 2003 41 59 2061 349 41 123 2063 91 2061 93 61 2063 91 2061 43 1501 93 59 125 125 569 2064 40 41 601 123 792 2065 62 40 2002 43 2001 43 2003 41 59 125 2013 321 2014 60 660 44 2001 43 2002 43 1501 62 2066 40 41 601 123 2013 321 2014 60 660 44 2001 43 2002 43 1501 62 2067 59 664 40 2000 2068 61 1500 59 2068 60 2001 59 2068 349 41 123 2067 40 2068 41 61 45 2069 91 2001 45 2068 45 1501 93 59 125 704 2070 61 1500 59 664 40 2000 2068 61 2001 59 2068 60 40 2001 43 2002 43 1501 41 59 2068 349 41 123 2067 40 2068 41 61 2071 91 2002 45 2070 93 59 2070 349 59 125 792 2067 59 125 865 2072 40 41 123 660 2073 61 1500 59 664 40 2000 2074 61 1500 59 2074 60 40 2001 43 2002 43 1501 41 59 2074 349 41 123 688 40 2075 40 2074 44 2074 41 62 2073 41 123 2073 61 2075 40 2074 44 2074 41 59 125 125 601 660 2076 61 2073 42 1500 59 664 40 2000 2074 61 1500 59 2074 60 40 2001 43 2002 43 1501 41 59 2074 349 41 123 688 40 2077 40 2074 44 2074 41 60 2076 41 123 2077 40 2074 44 2074 41 61 2076 59 125 125 125 2013 321 2078 60 660 44 2001 43 2002 43 1501 62 2079 59 2013 321 2014 60 660 44 2001 43 2002 43 1501 62 2080 59 2013 321 2014 60 660 44 2001 43 2002 43 1501 62 2081 59 660 2082 123 125 59 660 2083 91 2002 43 2003 43 1501 93 123 125 59 660 2084 91 2001 43 1501 93 123 125 59 856 2085 123 1500 125 59 660 2086 123 1501 125 59 125 59 ,"{'AvgLine': 8, 'CountLine': 146, 'CountStmt': 88, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 69, 'MaxEssential': 1, 'SumEssential': 14, 'AvgCyclomatic': 2, 'CountLineCode': 105, 'CountStmtDecl': 40, 'MaxCyclomatic': 5, 'SumCyclomatic': 28, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 33, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 15, 'AltCountLineCode': 105, 'CountLineCodeExe': 57, 'CountLineComment': 8, 'AltAvgLineComment': 0, 'AltCountLineBlank': 33, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 32, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 28, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 76, 'SumCyclomaticModified': 28, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 8, 'CountDeclInstanceVariableProtected': 0}"
118216,C++,"class MavlinkStreamWindCov : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamWindCov(mavlink); }

	static constexpr const char *get_name_static() { return ""WIND_COV""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_WIND_COV; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _wind_sub.advertised() ? MAVLINK_MSG_ID_WIND_COV_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamWindCov(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _wind_sub{ORB_ID(wind)};
	uORB::Subscription _local_pos_sub{ORB_ID(vehicle_local_position)};

	bool send() override
	{
		wind_s wind;

		if (_wind_sub.update(&wind)) {
			mavlink_wind_cov_t msg{};

			msg.time_usec = wind.timestamp;

			msg.wind_x = wind.windspeed_north;
			msg.wind_y = wind.windspeed_east;
			msg.wind_z = 0.0f;

			msg.var_horiz = wind.variance_north + wind.variance_east;
			msg.var_vert = 0.0f;

			vehicle_local_position_s lpos{};
			_local_pos_sub.copy(&lpos);
			msg.wind_alt = (lpos.z_valid && lpos.z_global) ? (-lpos.z + lpos.ref_alt) : (float)NAN;

			msg.horiz_accuracy = 0.0f;
			msg.vert_accuracy = 0.0f;

			mavlink_msg_wind_cov_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 2017 321 2018 2022 123 2023 40 2024 41 125 59 569 2025 40 41 2010 123 2026 2027 59 688 40 2019 46 2028 40 38 2027 41 41 123 2029 2030 123 125 59 2030 46 2031 61 2027 46 2032 59 2030 46 2033 61 2027 46 2034 59 2030 46 2035 61 2027 46 2036 59 2030 46 2037 61 1500 59 2030 46 2038 61 2027 46 2039 43 2027 46 2040 59 2030 46 2041 61 1500 59 2042 2043 123 125 59 2022 46 2044 40 38 2043 41 59 2030 46 2045 61 40 2043 46 2046 307 2043 46 2047 41 63 40 45 2043 46 2048 43 2043 46 2049 41 58 40 660 41 2050 59 2030 46 2051 61 1500 59 2030 46 2052 61 1500 59 2053 40 2054 354 2055 40 41 44 38 2030 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 53, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 38, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 38, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118225,C++,"	class RxQueue
	{
		CanRxItem *const buf_;
		const uavcan::uint8_t capacity_;
		uavcan::uint8_t in_;
		uavcan::uint8_t out_;
		uavcan::uint8_t len_;
		uavcan::uint32_t overflow_cnt_;

		void registerOverflow();

	public:
		RxQueue(CanRxItem *buf, uavcan::uint8_t capacity)
			: buf_(buf),
			  capacity_(capacity),
			  in_(0),
			  out_(0),
			  len_(0),
			  overflow_cnt_(0)
		{
		}

		void push(const uavcan::CanFrame &frame, const uint64_t &utc_usec, uavcan::CanIOFlags flags);
		void pop(uavcan::CanFrame &out_frame, uavcan::uint64_t &out_utc_usec, uavcan::CanIOFlags &out_flags);

		void reset();
		unsigned getLength() const
		{
			return len_;
		}

		uavcan::uint32_t getOverflowCount() const
		{
			return overflow_cnt_;
		}
	};",0,587 2000 123 2001 42 601 2002 59 601 2003 321 2004 2005 59 2003 321 2004 2006 59 2003 321 2004 2007 59 2003 321 2004 2008 59 2003 321 2009 2010 59 865 2011 40 41 59 777 58 2000 40 2001 42 2012 44 2003 321 2004 2013 41 58 2002 40 2012 41 44 2005 40 2013 41 44 2006 40 1500 41 44 2007 40 1500 41 44 2008 40 1500 41 44 2010 40 1500 41 123 125 865 2014 40 601 2003 321 2015 38 2016 44 601 2017 38 2018 44 2003 321 2019 2020 41 59 865 2021 40 2003 321 2015 38 2022 44 2003 321 2017 38 2023 44 2003 321 2019 38 2024 41 59 865 2025 40 41 59 856 2026 40 41 601 123 792 2008 59 125 2003 321 2009 2027 40 41 601 123 792 2010 59 125 125 59 ,"{'AvgLine': 10, 'CountLine': 90, 'CountStmt': 22, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 78, 'CountStmtDecl': 14, 'MaxCyclomatic': 4, 'SumCyclomatic': 13, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 78, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118233,C++,"class UavcanBeep
{
public:
	UavcanBeep(uavcan::INode &node);

	/*
	* setup periodic updater
	*/
	int init();

private:
	/*
	 * Max update rate to avoid excessive bus traffic
	 */
	static constexpr unsigned MAX_RATE_HZ = 100;

	/*
	 * Setup timer and call back function for periodic updates
	 */
	void periodic_update(const uavcan::TimerEvent &);

	typedef uavcan::MethodBinder<UavcanBeep *, void (UavcanBeep::*)(const uavcan::TimerEvent &)> TimerCbBinder;

	/*
	 * Subscription tune_control
	 */
	uORB::Subscription _tune_control_sub{ORB_ID(tune_control)};

	/*
	 * Publish CAN Beep
	 */
	uavcan::Publisher<uavcan::equipment::indication::BeepCommand> _beep_pub;

	uavcan::TimerEventForwarder<TimerCbBinder> _timer;

	hrt_abstime _interval_timestamp{0};
	tune_control_s _tune{};
	Tunes _tunes{};
	bool _play_tone{false};
	unsigned int _silence_length{0};	///< If nonzero, silence before next note.
	unsigned int _frequency{0};
	unsigned int _duration{0};
};",0,587 2000 123 777 58 2000 40 2001 321 2002 38 2003 41 59 305 704 2004 40 41 59 773 58 305 809 603 856 2005 61 1503 59 305 865 2006 40 601 2001 321 2007 38 41 59 833 2001 321 2008 60 2000 42 44 865 40 2000 321 42 41 40 601 2001 321 2007 38 41 62 2009 59 305 2010 321 2011 2012 123 2013 40 2014 41 125 59 305 2001 321 2015 60 2001 321 2016 321 2017 321 2018 62 2019 59 2001 321 2020 60 2009 62 2021 59 2022 2023 123 1500 125 59 2024 2025 123 125 59 2026 2027 123 125 59 569 2028 123 655 125 59 856 704 2029 123 1500 125 59 331 856 704 2030 123 1500 125 59 856 704 2031 123 1500 125 59 125 59 ,"{'AvgLine': 19, 'CountLine': 102, 'CountStmt': 33, 'MaxNesting': 3, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 16, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 3, 'CountLineCode': 63, 'CountStmtDecl': 18, 'MaxCyclomatic': 7, 'SumCyclomatic': 11, 'AltAvgLineCode': 14, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 18, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 3, 'AltCountLineCode': 63, 'CountLineCodeExe': 13, 'CountLineComment': 22, 'AltAvgLineComment': 2, 'AltCountLineBlank': 18, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.35', 'AltCountLineComment': 22, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 10, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 6, 'CountDeclInstanceVariableProtected': 0}"
118241,C++,"class MavlinkStreamAttitudeQuaternion : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamAttitudeQuaternion(mavlink); }

	static constexpr const char *get_name_static() { return ""ATTITUDE_QUATERNION""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_ATTITUDE_QUATERNION; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _att_sub.advertised() ? MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamAttitudeQuaternion(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _att_sub{ORB_ID(vehicle_attitude)};
	uORB::Subscription _angular_velocity_sub{ORB_ID(vehicle_angular_velocity)};
	uORB::Subscription _status_sub{ORB_ID(vehicle_status)};

	bool send() override
	{
		vehicle_attitude_s att;

		if (_att_sub.update(&att)) {
			vehicle_angular_velocity_s angular_velocity{};
			_angular_velocity_sub.copy(&angular_velocity);

			vehicle_status_s status{};
			_status_sub.copy(&status);

			mavlink_attitude_quaternion_t msg{};

			msg.time_boot_ms = att.timestamp / 1000;
			msg.q1 = att.q[0];
			msg.q2 = att.q[1];
			msg.q3 = att.q[2];
			msg.q4 = att.q[3];
			msg.rollspeed = angular_velocity.xyz[0];
			msg.pitchspeed = angular_velocity.xyz[1];
			msg.yawspeed = angular_velocity.xyz[2];

			if (status.is_vtol && status.is_vtol_tailsitter && (status.vehicle_type == vehicle_status_s::VEHICLE_TYPE_FIXED_WING)) {
				// This is a tailsitter VTOL flying in fixed wing mode:
				// indicate that reported attitude should be rotated by
				// 90 degrees upward pitch for user display
				get_rot_quaternion(ROTATION_PITCH_90).copyTo(msg.repr_offset_q);

			} else {
				// Normal case
				// zero rotation should be [1 0 0 0]:
				// `get_rot_quaternion(ROTATION_NONE).copyTo(msg.repr_offset_q);`
				// but to save bandwidth, we instead send [0, 0, 0, 0].
				msg.repr_offset_q[0] = 0.0f;
				msg.repr_offset_q[1] = 0.0f;
				msg.repr_offset_q[2] = 0.0f;
				msg.repr_offset_q[3] = 0.0f;
			}

			mavlink_msg_attitude_quaternion_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 2017 321 2018 2022 123 2023 40 2024 41 125 59 2017 321 2018 2025 123 2026 40 2027 41 125 59 569 2028 40 41 2010 123 2029 2030 59 688 40 2019 46 2031 40 38 2030 41 41 123 2032 2033 123 125 59 2022 46 2034 40 38 2033 41 59 2035 2036 123 125 59 2025 46 2034 40 38 2036 41 59 2037 2038 123 125 59 2038 46 2039 61 2030 46 2040 47 1504 59 2038 46 2041 61 2030 46 2042 91 1500 93 59 2038 46 2043 61 2030 46 2042 91 1501 93 59 2038 46 2044 61 2030 46 2042 91 1502 93 59 2038 46 2045 61 2030 46 2042 91 1502 93 59 2038 46 2046 61 2033 46 2047 91 1500 93 59 2038 46 2048 61 2033 46 2047 91 1501 93 59 2038 46 2049 61 2033 46 2047 91 1502 93 59 688 40 2036 46 2050 307 2036 46 2051 307 40 2036 46 2052 323 2035 321 2053 41 41 123 330 330 330 2054 40 2055 41 46 2056 40 2038 46 2057 41 59 125 630 123 330 330 330 330 2038 46 2058 91 1500 93 61 1500 59 2038 46 2058 91 1501 93 61 1500 59 2038 46 2058 91 1502 93 61 1500 59 2038 46 2058 91 1502 93 61 1500 59 125 2059 40 2060 354 2061 40 41 44 38 2038 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 70, 'CountStmt': 21, 'MaxNesting': 2, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 48, 'CountStmtDecl': 15, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 48, 'CountLineCodeExe': 6, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.15', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118256,C++,"class MavlinkStreamManualControl : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamManualControl(mavlink); }

	static constexpr const char *get_name_static() { return ""MANUAL_CONTROL""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_MANUAL_CONTROL; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _manual_control_setpoint_sub.advertised() ? (MAVLINK_MSG_ID_MANUAL_CONTROL_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES) :
		       0;
	}

private:
	explicit MavlinkStreamManualControl(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _manual_control_setpoint_sub{ORB_ID(manual_control_setpoint)};
	uORB::Subscription _manual_control_switches_sub{ORB_ID(manual_control_switches)};

	bool send() override
	{
		manual_control_setpoint_s manual_control_setpoint;

		if (_manual_control_setpoint_sub.update(&manual_control_setpoint)) {
			mavlink_manual_control_t msg{};

			msg.target = mavlink_system.sysid;
			msg.x = manual_control_setpoint.x * 1000;
			msg.y = manual_control_setpoint.y * 1000;
			msg.z = manual_control_setpoint.z * 1000;
			msg.r = manual_control_setpoint.r * 1000;

			manual_control_switches_s manual_control_switches{};

			if (_manual_control_switches_sub.copy(&manual_control_switches)) {
				unsigned shift = 2;
				msg.buttons = 0;
				msg.buttons |= (manual_control_switches.return_switch << (shift * 1));
				msg.buttons |= (manual_control_switches.loiter_switch << (shift * 3));
				msg.buttons |= (manual_control_switches.offboard_switch << (shift * 5));
				msg.buttons |= (manual_control_switches.kill_switch << (shift * 6));
			}

			mavlink_msg_manual_control_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 40 2015 43 2016 41 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 2017 321 2018 2022 123 2023 40 2024 41 125 59 569 2025 40 41 2010 123 2026 2027 59 688 40 2019 46 2028 40 38 2027 41 41 123 2029 2030 123 125 59 2030 46 2031 61 2032 46 2033 59 2030 46 2034 61 2027 46 2034 42 1504 59 2030 46 2035 61 2027 46 2035 42 1504 59 2030 46 2036 61 2027 46 2036 42 1504 59 2030 46 2037 61 2027 46 2037 42 1504 59 2038 2039 123 125 59 688 40 2022 46 2040 40 38 2039 41 41 123 856 2041 61 1502 59 2030 46 2042 61 1500 59 2030 46 2042 347 40 2039 46 2043 332 40 2041 42 1501 41 41 59 2030 46 2042 347 40 2039 46 2044 332 40 2041 42 1502 41 41 59 2030 46 2042 347 40 2039 46 2045 332 40 2041 42 1502 41 41 59 2030 46 2042 347 40 2039 46 2046 332 40 2041 42 1502 41 41 59 125 2047 40 2048 354 2049 40 41 44 38 2030 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 55, 'CountStmt': 20, 'MaxNesting': 2, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 42, 'CountStmtDecl': 14, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 42, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118255,C++,"class MavlinkStreamAttitude : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamAttitude(mavlink); }

	static constexpr const char *get_name_static() { return ""ATTITUDE""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_ATTITUDE; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _att_sub.advertised() ? MAVLINK_MSG_ID_ATTITUDE_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamAttitude(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _att_sub{ORB_ID(vehicle_attitude)};
	uORB::Subscription _angular_velocity_sub{ORB_ID(vehicle_angular_velocity)};

	bool send() override
	{
		vehicle_attitude_s att;

		if (_att_sub.update(&att)) {
			vehicle_angular_velocity_s angular_velocity{};
			_angular_velocity_sub.copy(&angular_velocity);

			mavlink_attitude_t msg{};

			const matrix::Eulerf euler = matrix::Quatf(att.q);
			msg.time_boot_ms = att.timestamp / 1000;
			msg.roll = euler.phi();
			msg.pitch = euler.theta();
			msg.yaw = euler.psi();

			msg.rollspeed = angular_velocity.xyz[0];
			msg.pitchspeed = angular_velocity.xyz[1];
			msg.yawspeed = angular_velocity.xyz[2];

			mavlink_msg_attitude_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 2017 321 2018 2022 123 2023 40 2024 41 125 59 569 2025 40 41 2010 123 2026 2027 59 688 40 2019 46 2028 40 38 2027 41 41 123 2029 2030 123 125 59 2022 46 2031 40 38 2030 41 59 2032 2033 123 125 59 601 2034 321 2035 2036 61 2034 321 2037 40 2027 46 2038 41 59 2033 46 2039 61 2027 46 2040 47 1504 59 2033 46 2041 61 2036 46 2042 40 41 59 2033 46 2043 61 2036 46 2044 40 41 59 2033 46 2045 61 2036 46 2046 40 41 59 2033 46 2047 61 2030 46 2048 91 1500 93 59 2033 46 2049 61 2030 46 2048 91 1501 93 59 2033 46 2050 61 2030 46 2048 91 1502 93 59 2051 40 2052 354 2053 40 41 44 38 2033 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 50, 'CountStmt': 19, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 37, 'CountStmtDecl': 14, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 37, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118264,C++,"class UavcanListServiceRequest : public UavcanServiceRequest
{
public:
	UavcanListServiceRequest(CanardInstance &ins) :
		UavcanServiceRequest(ins, """", ""List"", uavcan_register_List_1_0_FIXED_PORT_ID_,
				     uavcan_register_List_Response_1_0_EXTENT_BYTES_) { };


	bool getIndex(CanardNodeID node_id, uint16_t index, UavcanServiceRequestInterface *handler)
	{
		uavcan_register_List_Request_1_0 msg;
		msg.index = index;

		uint8_t request_payload_buffer[uavcan_register_List_Request_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_];

		CanardTransfer transfer = {
			.timestamp_usec = hrt_absolute_time() + PUBLISHER_DEFAULT_TIMEOUT_USEC,
			.priority       = CanardPriorityNominal,
			.transfer_kind  = CanardTransferKindRequest,
			.port_id        = uavcan_register_List_1_0_FIXED_PORT_ID_, // This is the subject-ID.
			.remote_node_id = node_id,
			.transfer_id    = request_transfer_id,
			.payload_size   = uavcan_register_List_Request_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_,
			.payload        = &request_payload_buffer,
		};

		if (uavcan_register_List_Request_1_0_serialize_(&msg, request_payload_buffer, &transfer.payload_size) == 0) {
			return request(&transfer, handler);

		} else {
			return false;
		}
	};


};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 41 58 2001 40 2003 44 362 44 362 44 2004 44 2005 41 123 125 59 569 2006 40 2007 2008 44 2009 2010 44 2011 42 2012 41 123 2013 2014 59 2014 46 2010 61 2010 59 2015 2016 91 2017 93 59 2018 2019 61 123 46 2020 61 2021 40 41 43 2022 44 46 2023 61 2024 44 46 2025 61 2026 44 46 2027 61 2004 44 330 46 2028 61 2008 44 46 2029 61 2030 44 46 2031 61 2017 44 46 2032 61 38 2016 44 125 59 688 40 2033 40 38 2014 44 2016 44 38 2019 46 2034 41 323 1500 41 123 792 2035 40 38 2019 44 2012 41 59 125 630 123 792 655 59 125 125 59 125 59 ,"{'AvgLine': 14, 'CountLine': 36, 'CountStmt': 7, 'MaxNesting': 1, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 2, 'AltCountLineCode': 28, 'CountLineCodeExe': 2, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118270,C++,"template<class T>
class IntrusiveQueue
{
public:

	bool empty() const { return _head == nullptr; }

	T front() const { return _head; }
	T back() const { return _tail; }

	size_t size() const
	{
		size_t sz = 0;

		for (auto node = front(); node != nullptr; node = node->next_intrusive_queue_node()) {
			sz++;
		}

		return sz;
	}

	void push(T newNode)
	{
		// error, node already queued or already inserted
		if ((newNode->next_intrusive_queue_node() != nullptr) || (newNode == _tail)) {
			return;
		}

		if (_head == nullptr) {
			_head = newNode;
		}

		if (_tail != nullptr) {
			_tail->set_next_intrusive_queue_node(newNode);
		}

		_tail = newNode;
	}

	T pop()
	{
		T ret = _head;

		if (!empty()) {
			if (_head != _tail) {
				_head = _head->next_intrusive_queue_node();

			} else {
				// only one item left
				_head = nullptr;
				_tail = nullptr;
			}

			// clear next in popped (in might be re-inserted later)
			ret->set_next_intrusive_queue_node(nullptr);
		}

		return ret;
	}

	bool remove(T removeNode)
	{
		// base case
		if (removeNode == _head) {
			if (_head->next_intrusive_queue_node() != nullptr) {
				_head = _head->next_intrusive_queue_node();
				removeNode->set_next_intrusive_queue_node(nullptr);

			} else {
				_head = nullptr;
				_tail = nullptr;
			}

			return true;
		}

		for (T node = _head; node != nullptr; node = node->next_intrusive_queue_node()) {
			// is sibling the node to remove?
			if (node->next_intrusive_queue_node() == removeNode) {
				if (removeNode == _tail) {
					_tail = node;
				}

				// replace sibling
				node->set_next_intrusive_queue_node(removeNode->next_intrusive_queue_node());
				removeNode->set_next_intrusive_queue_node(nullptr);
				return true;
			}
		}

		return false;
	}

	struct Iterator {
		T node;
		Iterator(T v) : node(v) {}

		operator T() const { return node; }
		operator T &() { return node; }
		T operator* () const { return node; }
		Iterator &operator++ ()
		{
			if (node) {
				node = node->next_intrusive_queue_node();
			};

			return *this;
		}
	};

	Iterator begin() { return Iterator(_head); }
	Iterator end() { return Iterator(nullptr); }

private:

	T _head{nullptr};
	T _tail{nullptr};

};",0,822 60 587 2000 62 587 2001 123 777 58 569 2002 40 41 601 123 792 2003 323 753 59 125 2000 2004 40 41 601 123 792 2005 59 125 2000 2006 40 41 601 123 792 2007 59 125 2008 2009 40 41 601 123 2008 2010 61 1500 59 664 40 561 2011 61 2004 40 41 59 2011 340 753 59 2011 61 2011 354 2012 40 41 41 123 2010 349 59 125 792 2010 59 125 865 2013 40 2000 2014 41 123 330 688 40 40 2014 354 2015 40 41 340 753 41 309 40 2014 323 2016 41 41 123 792 59 125 688 40 2017 323 753 41 123 2017 61 2014 59 125 688 40 2016 340 753 41 123 2016 354 2018 40 2014 41 59 125 2016 61 2014 59 125 2000 2019 40 41 123 2000 2020 61 2021 59 688 40 33 2002 40 41 41 123 688 40 2021 340 2022 41 123 2021 61 2021 354 2023 40 41 59 125 630 123 330 2021 61 753 59 2022 61 753 59 125 330 2020 354 2024 40 753 41 59 125 792 2020 59 125 569 2025 40 2000 2026 41 123 330 688 40 2026 323 2027 41 123 688 40 2027 354 2028 40 41 340 753 41 123 2027 61 2027 354 2028 40 41 59 2026 354 2029 40 753 41 59 125 630 123 2027 61 753 59 2030 61 753 59 125 792 829 59 125 664 40 2000 2031 61 2027 59 2031 340 753 59 2031 61 2031 354 2032 40 41 41 123 330 688 40 2031 354 2032 40 41 323 2026 41 123 688 40 2026 323 2033 41 123 2033 61 2031 59 125 330 2031 354 2034 40 2026 354 2032 40 41 41 59 2026 354 2034 40 753 41 59 792 829 59 125 125 792 655 59 125 816 2035 123 2000 2036 59 2035 40 2000 2037 41 58 2036 40 2037 41 123 125 758 2000 40 41 601 123 792 2036 59 125 758 2000 38 40 41 123 792 2036 59 125 2000 758 42 40 41 601 123 792 2036 59 125 2035 38 758 349 40 41 123 688 40 2036 41 123 2036 61 2036 354 2038 40 41 59 125 59 792 42 823 59 125 125 59 2035 2039 40 41 123 792 2035 40 2040 41 59 125 2035 2041 40 41 123 792 2035 40 753 41 59 125 773 58 2000 2042 123 753 125 59 2000 2043 123 753 125 59 125 59 ,"{'AvgLine': 9, 'CountLine': 118, 'CountStmt': 67, 'MaxNesting': 3, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 48, 'MaxEssential': 4, 'SumEssential': 12, 'AvgCyclomatic': 2, 'CountLineCode': 85, 'CountStmtDecl': 23, 'MaxCyclomatic': 6, 'SumCyclomatic': 20, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 27, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 85, 'CountLineCodeExe': 48, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 27, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 20, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 44, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118275,C++,"class MavlinkStreamGimbalManagerStatus : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamGimbalManagerStatus(mavlink); }

	static constexpr const char *get_name_static() { return ""GIMBAL_MANAGER_STATUS""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_GIMBAL_MANAGER_STATUS; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		if (_gimbal_manager_status_sub.advertised()) {
			return MAVLINK_MSG_ID_GIMBAL_MANAGER_STATUS_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		}

		return 0;
	}

private:
	explicit MavlinkStreamGimbalManagerStatus(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _gimbal_manager_status_sub{ORB_ID(gimbal_manager_status)};

	bool send() override
	{
		gimbal_manager_status_s gimbal_manager_status;

		if (_gimbal_manager_status_sub.advertised() && _gimbal_manager_status_sub.copy(&gimbal_manager_status)) {
			mavlink_gimbal_manager_status_t msg{};

			msg.time_boot_ms = gimbal_manager_status.timestamp / 1000;
			msg.flags = gimbal_manager_status.flags;
			msg.gimbal_device_id = gimbal_manager_status.gimbal_device_id;
			msg.primary_control_sysid = gimbal_manager_status.primary_control_sysid;
			msg.primary_control_compid = gimbal_manager_status.primary_control_compid;
			msg.secondary_control_sysid = gimbal_manager_status.secondary_control_sysid;
			msg.secondary_control_compid = gimbal_manager_status.secondary_control_compid;

			mavlink_msg_gimbal_manager_status_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 688 40 2013 46 2014 40 41 41 123 792 2015 43 2016 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 41 307 2019 46 2026 40 38 2024 41 41 123 2027 2028 123 125 59 2028 46 2029 61 2024 46 2030 47 1504 59 2028 46 2031 61 2024 46 2031 59 2028 46 2032 61 2024 46 2032 59 2028 46 2033 61 2024 46 2033 59 2028 46 2034 61 2024 46 2034 59 2028 46 2035 61 2024 46 2035 59 2028 46 2036 61 2024 46 2036 59 2037 40 2038 354 2039 40 41 44 38 2028 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 48, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 36, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118269,C++,"class AttitudeControlConvergenceTest : public ::testing::Test
{
public:
	AttitudeControlConvergenceTest()
	{
		_attitude_control.setProportionalGain(Vector3f(.5f, .6f, .3f), .4f);
		_attitude_control.setRateLimit(Vector3f(100.f, 100.f, 100.f));
	}

	void checkConvergence()
	{
		int i; // need function scope to check how many steps
		Vector3f rate_setpoint(1000.f, 1000.f, 1000.f);

		_attitude_control.setAttitudeSetpoint(_quat_goal, 0.f);

		for (i = 100; i > 0; i--) {
			// run attitude control to get rate setpoints
			const Vector3f rate_setpoint_new = _attitude_control.update(_quat_state);
			// rotate the simulated state quaternion according to the rate setpoint
			_quat_state = _quat_state * Quatf(AxisAnglef(rate_setpoint_new));
			_quat_state = -_quat_state; // produce intermittent antipodal quaternion states to test against unwinding problem

			// expect the error and hence also the output to get smaller with each iteration
			if (rate_setpoint_new.norm() >= rate_setpoint.norm()) {
				break;
			}

			rate_setpoint = rate_setpoint_new;
		}

		EXPECT_EQ(_quat_state.canonical(), _quat_goal.canonical());
		// it shouldn't have taken longer than an iteration timeout to converge
		EXPECT_GT(i, 0);
	}

	AttitudeControl _attitude_control;
	Quatf _quat_state;
	Quatf _quat_goal;
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 123 2003 46 2004 40 2005 40 1500 44 1500 44 1500 41 44 1500 41 59 2003 46 2006 40 2005 40 1503 44 1503 44 1503 41 41 59 125 865 2007 40 41 123 704 2008 59 330 2009 2010 40 1504 44 1504 44 1504 41 59 2011 46 2012 40 2013 44 1500 41 59 664 40 2008 61 1503 59 2008 62 1500 59 2008 338 41 123 330 601 2009 2014 61 2011 46 2015 40 2016 41 59 330 2016 61 2016 42 2017 40 2018 40 2014 41 41 59 2016 61 45 2016 59 330 330 688 40 2014 46 2019 40 41 325 2010 46 2019 40 41 41 123 572 59 125 2010 61 2014 59 125 2020 40 2021 46 2022 40 41 44 2013 46 2022 40 41 41 59 330 2023 40 2008 44 1500 41 59 125 2024 2025 59 2026 2027 59 2026 2028 59 125 59 ,"{'AvgLine': 15, 'CountLine': 40, 'CountStmt': 12, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 6, 'MaxEssential': 3, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 29, 'CountStmtDecl': 8, 'MaxCyclomatic': 3, 'SumCyclomatic': 4, 'AltAvgLineCode': 11, 'AvgLineComment': 3, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 2, 'AltCountLineCode': 29, 'CountLineCodeExe': 3, 'CountLineComment': 6, 'AltAvgLineComment': 3, 'AltCountLineBlank': 7, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.21', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118297,C++,"class MavlinkStreamESCInfo : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamESCInfo(mavlink); }

	static constexpr const char *get_name_static() { return ""ESC_INFO""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_ESC_INFO; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		static constexpr unsigned size_per_batch = MAVLINK_MSG_ID_ESC_INFO_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		return _esc_status_sub.advertised() ? size_per_batch * _number_of_batches : 0;
	}

private:
	explicit MavlinkStreamESCInfo(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _esc_status_sub{ORB_ID(esc_status)};
	uint8_t _number_of_batches{0};

	bool send() override
	{
		static constexpr uint8_t batch_size = MAVLINK_MSG_ESC_INFO_FIELD_TEMPERATURE_LEN;
		esc_status_s esc_status;

		if (_esc_status_sub.update(&esc_status)) {
			mavlink_esc_info_t msg{};

			msg.time_usec = esc_status.timestamp;
			msg.counter = esc_status.counter;
			msg.count = esc_status.esc_count;
			msg.connection_type = esc_status.esc_connectiontype;
			msg.info = esc_status.esc_online_flags;

			// Ceil value of integer division. For 1-4 esc => 1 batch, 5-8 esc => 2 batches etc
			_number_of_batches = ceilf((float)esc_status.esc_count / batch_size);

			for (int batch_number = 0; batch_number < _number_of_batches; batch_number++) {
				msg.index = batch_number * batch_size;

				for (int esc_index = 0; esc_index < batch_size ; esc_index++) {
					msg.failure_flags[esc_index] = esc_status.esc[esc_index].failures;
					msg.error_count[esc_index] = esc_status.esc[esc_index].esc_errorcount;
					msg.temperature[esc_index] = static_cast<int16_t>(esc_status.esc[esc_index].esc_temperature *
								     100.f); // convert to centiDegrees
				}

				mavlink_msg_esc_info_send_struct(_mavlink->get_channel(), &msg);
			}

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 809 603 856 2013 61 2014 43 2015 59 792 2016 46 2017 40 41 63 2013 42 2018 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2019 321 2020 2021 123 2022 40 2023 41 125 59 2024 2025 123 1500 125 59 569 2026 40 41 2010 123 809 603 2024 2027 61 2028 59 2029 2030 59 688 40 2021 46 2031 40 38 2030 41 41 123 2032 2033 123 125 59 2033 46 2034 61 2030 46 2035 59 2033 46 2036 61 2030 46 2036 59 2033 46 2037 61 2030 46 2038 59 2033 46 2039 61 2030 46 2040 59 2033 46 2041 61 2030 46 2042 59 330 2025 61 2043 40 40 660 41 2030 46 2038 47 2027 41 59 664 40 704 2044 61 1500 59 2044 60 2025 59 2044 349 41 123 2033 46 2045 61 2044 42 2027 59 664 40 704 2046 61 1500 59 2046 60 2027 59 2046 349 41 123 2033 46 2047 91 2046 93 61 2030 46 2048 91 2046 93 46 2049 59 2033 46 2050 91 2046 93 61 2030 46 2048 91 2046 93 46 2051 59 2033 46 2052 91 2046 93 61 811 60 2053 62 40 2030 46 2048 91 2046 93 46 2054 42 1503 41 59 330 125 2055 40 2056 354 2057 40 41 44 38 2033 41 59 125 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 59, 'CountStmt': 23, 'MaxNesting': 3, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 16, 'MaxCyclomatic': 4, 'SumCyclomatic': 11, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 44, 'CountLineCodeExe': 7, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118295,C++,"class TestThread
{
public:
	TestThread(const std::function<void()> &f)
		: _f(f)
	{
		_thread = std::thread(std::bind(&TestThread::execute, this));
	}

	void join(LockstepScheduler &ls)
	{
		// The unit-tests do not reflect the real usage, where
		// set_absolute_time() is called regularly and can do some
		// cleanup tasks. We simulate that here by waiting until
		// the given task returns (which is expected to happen quickly)
		// and then call set_absolute_time(), which can do the cleanup,
		// and _thread can then exit as well.
		while (!_done) {
			std::this_thread::yield(); // usleep is too slow here
		}

		ls.set_absolute_time(ls.get_absolute_time());
		_thread.join();
	}
private:
	void execute()
	{
		_f();
		_done = true;
	}
	std::function<void()> _f;
	std::atomic<bool> _done{false};
	std::thread _thread;
};",0,587 2000 123 777 58 2000 40 601 2001 321 2002 60 865 40 41 62 38 2003 41 58 2004 40 2003 41 123 2005 61 2001 321 2006 40 2001 321 2007 40 38 2000 321 2008 44 823 41 41 59 125 865 2009 40 2010 38 2011 41 123 330 330 330 330 330 330 870 40 33 2012 41 123 2001 321 2013 321 2014 40 41 59 330 125 2011 46 2015 40 2011 46 2016 40 41 41 59 2017 46 2009 40 41 59 125 773 58 865 2018 40 41 123 2004 40 41 59 2019 61 829 59 125 2001 321 2002 60 865 40 41 62 2004 59 2001 321 2020 60 569 62 2021 123 655 125 59 2001 321 2022 2023 59 125 59 ,"{'AvgLine': 8, 'CountLine': 34, 'CountStmt': 12, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 6, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 26, 'CountLineCodeExe': 6, 'CountLineComment': 7, 'AltAvgLineComment': 2, 'AltCountLineBlank': 2, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.27', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118300,C++,"class SafetyButton :
	public UavcanPublisherBase,
	public uORB::SubscriptionCallbackWorkItem,
	private uavcan::Publisher<ardupilot::indication::Button>
{
public:
	SafetyButton(px4::WorkItem *work_item, uavcan::INode &node) :
		UavcanPublisherBase(ardupilot::indication::Button::DefaultDataTypeID),
		uORB::SubscriptionCallbackWorkItem(work_item, ORB_ID(safety)),
		uavcan::Publisher<ardupilot::indication::Button>(node)
	{
		this->setPriority(uavcan::TransferPriority::Default);
	}

	void PrintInfo() override
	{
		if (uORB::SubscriptionCallbackWorkItem::advertised()) {
			printf(""\t%s -> %s:%d\n"",
			       uORB::SubscriptionCallbackWorkItem::get_topic()->o_name,
			       ardupilot::indication::Button::getDataTypeFullName(),
			       ardupilot::indication::Button::DefaultDataTypeID);
		}
	}

	void BroadcastAnyUpdates() override
	{
		// safety -> standard::indication::button
		safety_s safety;

		if (uORB::SubscriptionCallbackWorkItem::update(&safety)) {
			if (safety.safety_switch_available) {
				ardupilot::indication::Button Button{};
				Button.button = ardupilot::indication::Button::BUTTON_SAFETY;
				Button.press_time = safety.safety_off ? UINT8_MAX : 0;
				uavcan::Publisher<ardupilot::indication::Button>::broadcast(Button);
			}
		}
	}
};",0,587 2000 58 777 2001 44 777 2002 321 2003 44 773 2004 321 2005 60 2006 321 2007 321 2008 62 123 777 58 2000 40 2009 321 2010 42 2011 44 2004 321 2012 38 2013 41 58 2001 40 2006 321 2007 321 2008 321 2014 41 44 2002 321 2003 40 2011 44 2015 40 2016 41 41 44 2004 321 2005 60 2006 321 2007 321 2008 62 40 2013 41 123 823 354 2017 40 2004 321 2018 321 2019 41 59 125 865 2020 40 41 2021 123 688 40 2002 321 2003 321 2022 40 41 41 123 2023 40 362 44 2002 321 2003 321 2024 40 41 354 2025 44 2006 321 2007 321 2008 321 2026 40 41 44 2006 321 2007 321 2008 321 2014 41 59 125 125 865 2027 40 41 2021 123 330 2028 2016 59 688 40 2002 321 2003 321 2029 40 38 2016 41 41 123 688 40 2016 46 2030 41 123 2006 321 2007 321 2008 2008 123 125 59 2008 46 2031 61 2006 321 2007 321 2008 321 2032 59 2008 46 2033 61 2016 46 2034 63 2035 58 1500 59 2004 321 2005 60 2006 321 2007 321 2008 62 321 2036 40 2008 41 59 125 125 125 125 59 ,"{'AvgLine': 10, 'CountLine': 39, 'CountStmt': 8, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 35, 'CountStmtDecl': 5, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 35, 'CountLineCodeExe': 1, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118302,C++,"class MavlinkStreamDebugFloatArray : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamDebugFloatArray(mavlink); }

	static constexpr const char *get_name_static() { return ""DEBUG_FLOAT_ARRAY""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_DEBUG_FLOAT_ARRAY; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _debug_array_sub.advertised() ? MAVLINK_MSG_ID_DEBUG_FLOAT_ARRAY_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamDebugFloatArray(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _debug_array_sub{ORB_ID(debug_array)};

	bool send() override
	{
		debug_array_s debug;

		if (_debug_array_sub.update(&debug)) {
			mavlink_debug_float_array_t msg{};

			msg.time_usec = debug.timestamp;
			msg.array_id = debug.id;
			memcpy(msg.name, debug.name, sizeof(msg.name));
			msg.name[sizeof(msg.name) - 1] = '\0'; // enforce null termination

			for (size_t i = 0; i < debug_array_s::ARRAY_SIZE; i++) {
				msg.data[i] = debug.data[i];
			}

			mavlink_msg_debug_float_array_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 59 2027 46 2030 61 2024 46 2031 59 2032 40 2027 46 2033 44 2024 46 2033 44 805 40 2027 46 2033 41 41 59 2027 46 2033 91 805 40 2027 46 2033 41 45 1501 93 61 314 59 330 664 40 2034 2035 61 1500 59 2035 60 2023 321 2036 59 2035 349 41 123 2027 46 2037 91 2035 93 61 2024 46 2037 91 2035 93 59 125 2038 40 2039 354 2040 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 45, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 33, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118320,C++,"class MavlinkStreamCollision : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamCollision(mavlink); }

	static constexpr const char *get_name_static() { return ""COLLISION""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_COLLISION; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _collision_sub.advertised() ? MAVLINK_MSG_ID_COLLISION_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamCollision(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _collision_sub{ORB_ID(collision_report)};

	bool send() override
	{
		collision_report_s report;
		bool sent = false;

		while ((_mavlink->get_free_tx_buf() >= get_size()) && _collision_sub.update(&report)) {
			mavlink_collision_t msg = {};

			msg.src = report.src;
			msg.id = report.id;
			msg.action = report.action;
			msg.threat_level = report.threat_level;
			msg.time_to_minimum_delta = report.time_to_minimum_delta;
			msg.altitude_minimum_delta = report.altitude_minimum_delta;
			msg.horizontal_minimum_delta = report.horizontal_minimum_delta;

			mavlink_msg_collision_send_struct(_mavlink->get_channel(), &msg);
			sent = true;
		}

		return sent;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 569 2025 61 655 59 870 40 40 2026 354 2027 40 41 325 2012 40 41 41 307 2019 46 2028 40 38 2024 41 41 123 2029 2030 61 123 125 59 2030 46 2031 61 2024 46 2031 59 2030 46 2032 61 2024 46 2032 59 2030 46 2033 61 2024 46 2033 59 2030 46 2034 61 2024 46 2034 59 2030 46 2035 61 2024 46 2035 59 2030 46 2036 61 2024 46 2036 59 2030 46 2037 61 2024 46 2037 59 2038 40 2026 354 2039 40 41 44 38 2030 41 59 2025 61 829 59 125 792 2025 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 44, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 34, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118323,C++,"class LPS22HB_SPI : public device::SPI
{
public:
	LPS22HB_SPI(int bus, uint32_t device, int bus_frequency, spi_mode_e spi_mode);
	~LPS22HB_SPI() override = default;

	int	read(unsigned address, void *data, unsigned count) override;
	int	write(unsigned address, void *data, unsigned count) override;

protected:
	int	probe() override;
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 2004 2001 44 704 2005 44 2006 2007 41 59 126 2000 40 41 2008 61 613 59 704 2009 40 856 2010 44 865 42 2011 44 856 2012 41 2008 59 704 2013 40 856 2010 44 865 42 2011 44 856 2012 41 2008 59 775 58 704 2014 40 41 2008 59 125 59 ,"{'AvgLine': 12, 'CountLine': 60, 'CountStmt': 23, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 15, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 48, 'CountStmtDecl': 8, 'MaxCyclomatic': 3, 'SumCyclomatic': 8, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 48, 'CountLineCodeExe': 14, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118372,C++,"class BMP388_I2C: public device::I2C, public IBMP388
{
public:
	BMP388_I2C(uint8_t bus, uint32_t device, int bus_frequency);
	virtual ~BMP388_I2C() = default;

	int init();

	uint8_t get_reg(uint8_t addr);
	int get_reg_buf(uint8_t addr, uint8_t *buf, uint8_t len);
	int set_reg(uint8_t value, uint8_t addr);
	calibration_s *get_calibration(uint8_t addr);

	uint32_t get_device_id() const override { return device::I2C::get_device_id(); }

	uint8_t get_device_address() const override { return device::I2C::get_device_address(); }

private:
	struct calibration_s _cal;
};",0,587 2000 58 777 2001 321 2002 44 777 2003 123 777 58 2000 40 2004 2005 44 2006 2001 44 704 2007 41 59 864 126 2000 40 41 61 613 59 704 2008 40 41 59 2004 2009 40 2004 2010 41 59 704 2011 40 2004 2010 44 2004 42 2012 44 2004 2013 41 59 704 2014 40 2004 2015 44 2004 2010 41 59 2016 42 2017 40 2004 2010 41 59 2006 2018 40 41 601 2019 123 792 2001 321 2002 321 2018 40 41 59 125 2004 2020 40 41 601 2019 123 792 2001 321 2002 321 2020 40 41 59 125 773 58 816 2016 2021 59 125 59 ,"{'AvgLine': 4, 'CountLine': 55, 'CountStmt': 20, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 47, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 47, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118328,C++,"class EkfExternalVisionTest : public ::testing::Test
{
public:

	EkfExternalVisionTest(): ::testing::Test(),
		_ekf{std::make_shared<Ekf>()},
		_sensor_simulator(_ekf),
		_ekf_wrapper(_ekf) {};

	std::shared_ptr<Ekf> _ekf;
	SensorSimulator _sensor_simulator;
	EkfWrapper _ekf_wrapper;

	static constexpr float _tilt_align_time = 7.f;

	// Setup the Ekf with synthetic measurements
	void SetUp() override
	{
		_ekf->init(0);
	}

	// Use this method to clean up any memory, network etc. after each test
	void TearDown() override
	{
	}
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 58 321 2001 321 2002 40 41 44 2003 123 2004 321 2005 60 2006 62 40 41 125 44 2007 40 2003 41 44 2008 40 2003 41 123 125 59 2009 321 2010 60 2011 62 2003 59 2012 2007 59 2013 2008 59 809 603 660 2014 61 1502 59 330 865 2015 40 41 2016 123 2003 354 2017 40 1500 41 59 125 330 865 2018 40 41 2016 123 125 125 59 ,"{'AvgLine': 3, 'CountLine': 26, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 19, 'CountLineCodeExe': 0, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118352,C++,"class RtpsDev : public DevCommon
{
public:
	RtpsDev(ReadBuffer *read_buffer);
	virtual ~RtpsDev() {}

	virtual ssize_t	read(struct file *filp, char *buffer, size_t buflen);
	virtual ssize_t	write(struct file *filp, const char *buffer, size_t buflen);

protected:
	static const uint8_t HEADER_SIZE = 10;
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 42 2003 41 59 864 126 2000 40 41 123 125 864 2004 2005 40 816 2006 42 2007 44 582 42 2008 44 2009 2010 41 59 864 2004 2011 40 816 2006 42 2007 44 601 582 42 2008 44 2009 2010 41 59 775 58 809 601 2012 2013 61 1502 59 125 59 ,"{'AvgLine': 16, 'CountLine': 77, 'CountStmt': 39, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 31, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 59, 'CountStmtDecl': 8, 'MaxCyclomatic': 3, 'SumCyclomatic': 8, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 4, 'AltCountLineCode': 59, 'CountLineCodeExe': 35, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118358,C++,"class ObstacleAvoidanceTest : public ::testing::Test
{
public:
	Vector3f pos_sp;
	Vector3f vel_sp;
	float yaw_sp = 0.123f;
	float yaw_speed_sp = NAN;
	void SetUp() override

	{
		param_control_autosave(false);
		param_reset_all();
		pos_sp = Vector3f(1.f, 1.2f, 0.1f);
		vel_sp = Vector3f(0.3f, 0.4f, 0.1f);
	}
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2003 2004 59 2003 2005 59 660 2006 61 1500 59 660 2007 61 2008 59 865 2009 40 41 2010 123 2011 40 655 41 59 2012 40 41 59 2004 61 2003 40 1501 44 1502 44 1500 41 59 2005 61 2003 40 1500 44 1500 44 1500 41 59 125 125 59 ,"{'AvgLine': 8, 'CountLine': 16, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 1, 'AltCountLineCode': 15, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118360,C++,"class UavcanServiceRequest : public UavcanBaseSubscriber
{
public:
	UavcanServiceRequest(CanardInstance &ins, const char *prefix_name, const char *subject_name, CanardPortID portID,
			     size_t extent) :
		UavcanBaseSubscriber(ins, prefix_name, subject_name, 0), _portID(portID), _extent(extent) { };


	void subscribe() override
	{
		// Subscribe to requests response
		canardRxSubscribe(&_canard_instance,
				  CanardTransferKindResponse,
				  _portID,
				  _extent,
				  CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
				  &_subj_sub._canard_sub);
	};

	bool request(CanardTransfer *transfer, UavcanServiceRequestInterface *handler)
	{
		_response_callback = handler;
		remote_node_id = transfer->remote_node_id;
		++request_transfer_id;  // The transfer-ID shall be incremented after every transmission on this subject.
		return canardTxPush(&_canard_instance, transfer) > 0;
	}

	void callback(const CanardTransfer &receive) override
	{
		PX4_INFO(""Response"");

		if (_response_callback != nullptr &&
		    receive.transfer_id == (request_transfer_id - 1) &&
		    receive.remote_node_id == remote_node_id) {
			_response_callback->response_callback(receive);
		}
	};



protected:
	CanardTransferID request_transfer_id = 0;
	CanardNodeID remote_node_id = CANARD_NODE_ID_UNSET;

	const CanardPortID _portID;
	const size_t _extent;
	UavcanServiceRequestInterface *_response_callback = nullptr;

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 44 601 582 42 2004 44 601 582 42 2005 44 2006 2007 44 2008 2009 41 58 2001 40 2003 44 2004 44 2005 44 1500 41 44 2010 40 2007 41 44 2011 40 2009 41 123 125 59 865 2012 40 41 2013 123 330 2014 40 38 2015 44 2016 44 2010 44 2011 44 2017 44 38 2018 46 2019 41 59 125 59 569 2020 40 2021 42 2022 44 2023 42 2024 41 123 2025 61 2024 59 2026 61 2022 354 2026 59 349 2027 59 330 792 2028 40 38 2029 44 2022 41 62 1500 59 125 865 2030 40 601 2021 38 2031 41 2013 123 2032 40 362 41 59 688 40 2033 340 753 307 2031 46 2034 323 40 2035 45 1501 41 307 2031 46 2036 323 2036 41 123 2033 354 2037 40 2031 41 59 125 125 59 775 58 2038 2039 61 1500 59 2040 2041 61 2042 59 601 2006 2010 59 601 2008 2011 59 2023 42 2043 61 753 59 125 59 ,"{'AvgLine': 7, 'CountLine': 49, 'CountStmt': 13, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 38, 'CountStmtDecl': 10, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 38, 'CountLineCodeExe': 2, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
118380,C++,"class EkfAirspeedTest : public ::testing::Test
{
public:

	EkfAirspeedTest(): ::testing::Test(),
		_ekf{std::make_shared<Ekf>()},
		_sensor_simulator(_ekf),
		_ekf_wrapper(_ekf),
		_quat_sim(Eulerf(0.0f, 0.0f, math::radians(45.0f))) {};

	std::shared_ptr<Ekf> _ekf;
	SensorSimulator _sensor_simulator;
	EkfWrapper _ekf_wrapper;
	const Quatf _quat_sim;

	// Setup the Ekf with synthetic measurements
	void SetUp() override
	{
		_ekf->init(0);
		_sensor_simulator.simulateOrientation(_quat_sim);
		_sensor_simulator.runSeconds(7);
	}

	// Use this method to clean up any memory, network etc. after each test
	void TearDown() override
	{
	}
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 58 321 2001 321 2002 40 41 44 2003 123 2004 321 2005 60 2006 62 40 41 125 44 2007 40 2003 41 44 2008 40 2003 41 44 2009 40 2010 40 1500 44 1500 44 2011 321 2012 40 1503 41 41 41 123 125 59 2013 321 2014 60 2015 62 2003 59 2016 2007 59 2017 2008 59 601 2018 2009 59 330 865 2019 40 41 2020 123 2003 354 2021 40 1500 41 59 2007 46 2022 40 2009 41 59 2007 46 2023 40 1502 41 59 125 330 865 2024 40 41 2020 123 125 125 59 ,"{'AvgLine': 4, 'CountLine': 28, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 22, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 22, 'CountLineCodeExe': 0, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118373,C++,"class FXOS8701CQ_SPI : public device::SPI
{
public:
	FXOS8701CQ_SPI(int bus, uint32_t chip_select, int bus_frequency, spi_mode_e spi_mode);
	~FXOS8701CQ_SPI() override = default;

	/**
	 * Read directly from the device.
	 *
	 * The actual size of each unit quantity is device-specific.
	 *
	 * @param reg	The register address at which to start reading
	 * @param data	The buffer into which the read values should be placed.
	 * @param count	The number of items to read.
	 * @return		The number of items read on success, negative errno otherwise.
	 */
	int	read(unsigned reg, void *data, unsigned count) override;

	/**
	 * Write directly to the device.
	 *
	 * The actual size of each unit quantity is device-specific.
	 *
	 * @param reg	The register address at which to start writing.
	 * @param data	The buffer from which values should be read.
	 * @param count	The number of items to write.
	 * @return		The number of items written on success, negative errno otherwise.
	 */
	int	write(unsigned reg, void *data, unsigned count) override;

	/**
	 * Read a register from FXOS8701CQ
	 *
	 * @param		The register to read.
	 * @return		The value that was read.
	 */
	uint8_t read_reg(unsigned reg) override;

	/**
	 * Write a register FXOS8701CQ.
	 *
	 * @param reg		The register to write.
	 * @param value		The new value to write.
	 * @return		OK on success, negative errno otherwise.
	 */
	int write_reg(unsigned reg, uint8_t value) override;

protected:
	int probe() override;
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 2004 2005 44 704 2006 44 2007 2008 41 59 126 2000 40 41 2009 61 613 59 306 704 2010 40 856 2011 44 865 42 2012 44 856 2013 41 2009 59 306 704 2014 40 856 2011 44 865 42 2012 44 856 2013 41 2009 59 306 2015 2016 40 856 2011 41 2009 59 306 704 2017 40 856 2011 44 2015 2018 41 2009 59 775 58 704 2019 40 41 2009 59 125 59 ,"{'AvgLine': 14, 'CountLine': 138, 'CountStmt': 37, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 24, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 70, 'CountStmtDecl': 14, 'MaxCyclomatic': 4, 'SumCyclomatic': 10, 'AltAvgLineCode': 9, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 7, 'AltCountLineCode': 70, 'CountLineCodeExe': 29, 'CountLineComment': 47, 'AltAvgLineComment': 2, 'AltCountLineBlank': 21, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.67', 'AltCountLineComment': 47, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118375,C++,"template class matrix::Matrix<float, 3, 2>;",0,822 587 2000 321 2001 60 660 44 1502 44 1502 62 59 ,"{'AvgLine': 0, 'CountLine': 1, 'CountStmt': 0, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 1, 'CountStmtDecl': 0, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 1, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118284,C++,template class Vector3<float>;,0,822 587 2000 60 660 62 59 ,"{'AvgLine': 0, 'CountLine': 1, 'CountStmt': 0, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 1, 'CountStmtDecl': 0, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 1, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 75, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117536,C++,"class MovingBaselineDataPub :
	public UavcanPublisherBase,
	public uORB::SubscriptionCallbackWorkItem,
	private uavcan::Publisher<ardupilot::gnss::MovingBaselineData>
{
public:
	MovingBaselineDataPub(px4::WorkItem *work_item, uavcan::INode &node) :
		UavcanPublisherBase(ardupilot::gnss::MovingBaselineData::DefaultDataTypeID),
		uORB::SubscriptionCallbackWorkItem(work_item, ORB_ID(gps_inject_data)),
		uavcan::Publisher<ardupilot::gnss::MovingBaselineData>(node)
	{
		this->setPriority(uavcan::TransferPriority::NumericallyMax);
	}

	void PrintInfo() override
	{
		if (uORB::SubscriptionCallbackWorkItem::advertised()) {
			printf(""\t%s -> %s:%d\n"",
			       uORB::SubscriptionCallbackWorkItem::get_topic()->o_name,
			       ardupilot::gnss::MovingBaselineData::getDataTypeFullName(),
			       id());
		}
	}

	void BroadcastAnyUpdates() override
	{
		using ardupilot::gnss::MovingBaselineData;

		// gps_inject_data -> ardupilot::gnss::MovingBaselineData
		gps_inject_data_s inject_data;

		if (uORB::SubscriptionCallbackWorkItem::update(&inject_data)) {
			// Prevent republishing rtcm data we received from uavcan
			union device::Device::DeviceId device_id;
			device_id.devid = inject_data.device_id;

			if (device_id.devid_s.bus_type != device::Device::DeviceBusType::DeviceBusType_UAVCAN) {
				ardupilot::gnss::MovingBaselineData movingbaselinedata{};

				const size_t capacity = movingbaselinedata.data.capacity();
				size_t written = 0;
				int result = 0;

				while ((result >= 0) && written < inject_data.len) {
					size_t chunk_size = inject_data.len - written;

					if (chunk_size > capacity) {
						chunk_size = capacity;
					}

					for (size_t i = 0; i < chunk_size; ++i) {
						movingbaselinedata.data.push_back(inject_data.data[written]);
						written += 1;
					}

					result = uavcan::Publisher<ardupilot::gnss::MovingBaselineData>::broadcast(movingbaselinedata);

					// ensure callback is registered
					uORB::SubscriptionCallbackWorkItem::registerCallback();

					movingbaselinedata.data.clear();
				}
			}
		}
	}
};",0,587 2000 58 777 2001 44 777 2002 321 2003 44 773 2004 321 2005 60 2006 321 2007 321 2008 62 123 777 58 2000 40 2009 321 2010 42 2011 44 2004 321 2012 38 2013 41 58 2001 40 2006 321 2007 321 2008 321 2014 41 44 2002 321 2003 40 2011 44 2015 40 2016 41 41 44 2004 321 2005 60 2006 321 2007 321 2008 62 40 2013 41 123 823 354 2017 40 2004 321 2018 321 2019 41 59 125 865 2020 40 41 2021 123 688 40 2002 321 2003 321 2022 40 41 41 123 2023 40 362 44 2002 321 2003 321 2024 40 41 354 2025 44 2006 321 2007 321 2008 321 2026 40 41 44 2027 40 41 41 59 125 125 865 2028 40 41 2021 123 860 2006 321 2007 321 2008 59 330 2029 2030 59 688 40 2002 321 2003 321 2031 40 38 2030 41 41 123 330 851 2032 321 2033 321 2034 2035 59 2035 46 2036 61 2030 46 2035 59 688 40 2035 46 2037 46 2038 340 2032 321 2033 321 2039 321 2040 41 123 2006 321 2007 321 2008 2041 123 125 59 601 2042 2043 61 2041 46 2044 46 2043 40 41 59 2042 2045 61 1500 59 704 2046 61 1500 59 870 40 40 2046 325 1500 41 307 2045 60 2030 46 2047 41 123 2042 2048 61 2030 46 2047 45 2045 59 688 40 2048 62 2043 41 123 2048 61 2043 59 125 664 40 2042 2049 61 1500 59 2049 60 2048 59 349 2049 41 123 2041 46 2044 46 2050 40 2030 46 2044 91 2045 93 41 59 2045 348 1501 59 125 2046 61 2004 321 2005 60 2006 321 2007 321 2008 62 321 2051 40 2041 41 59 330 2002 321 2003 321 2052 40 41 59 2041 46 2044 46 2053 40 41 59 125 125 125 125 125 59 ,"{'AvgLine': 19, 'CountLine': 66, 'CountStmt': 14, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 51, 'CountStmtDecl': 11, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 14, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 3, 'AltCountLineCode': 51, 'CountLineCodeExe': 3, 'CountLineComment': 3, 'AltAvgLineComment': 1, 'AltCountLineBlank': 12, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117539,C++,"class StickYaw
{
public:
	StickYaw();
	~StickYaw() = default;

	void generateYawSetpoint(float &yawspeed_setpoint, float &yaw_setpoint, float desired_yawspeed, float yaw,
				 bool is_yaw_good_for_control, float deltatime);

private:
	SlewRate<float> _yawspeed_slew_rate;

	/**
	 * Lock yaw when not currently turning
	 * When applying a yawspeed the vehicle is turning, when the speed is
	 * set to zero the vehicle needs to slow down and then lock at the yaw
	 * it stops at to not drift over time.
	 * @param yawspeed current yaw rotational rate state
	 * @param yaw current yaw rotational rate state
	 * @param yawspeed_setpoint rotation rate at which to turn around yaw axis
	 * @param yaw current yaw setpoint which then will be overwritten by the return value
	 * @return yaw setpoint to execute to have a yaw lock at the correct moment in time
	 */
	static float updateYawLock(float yaw, float yawspeed_setpoint, float yaw_setpoint, bool is_yaw_good_for_control);
};",0,587 2000 123 777 58 2000 40 41 59 126 2000 40 41 61 613 59 865 2001 40 660 38 2002 44 660 38 2003 44 660 2004 44 660 2005 44 569 2006 44 660 2007 41 59 773 58 2008 60 660 62 2009 59 306 809 660 2010 40 660 2005 44 660 2002 44 660 2003 44 569 2006 41 59 125 59 ,"{'AvgLine': 9, 'CountLine': 53, 'CountStmt': 13, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 3, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 5, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 7, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 34, 'CountLineCodeExe': 10, 'CountLineComment': 14, 'AltAvgLineComment': 1, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.41', 'AltCountLineComment': 14, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118098,C++,"class CanDriver : public uavcan::ICanDriver, uavcan::Noncopyable
{
	BusEvent update_event_;
	CanIface if0_;
#if UAVCAN_STM32_NUM_IFACES > 1
	CanIface if1_;
#endif
	uint32_t enabledInterfaces_;

	virtual uavcan::int16_t select(uavcan::CanSelectMasks &inout_masks,
				       const uavcan::CanFrame * (& pending_tx)[uavcan::MaxCanIfaces],
				       uavcan::MonotonicTime blocking_deadline);

	static void initOnce();

public:
	template <unsigned RxQueueCapacity>
	CanDriver(CanRxItem(&rx_queue_storage)[UAVCAN_STM32_NUM_IFACES][RxQueueCapacity])
		: update_event_(*this)
		, if0_(bxcan::Can[0], update_event_, 0, rx_queue_storage[0], RxQueueCapacity)
#if UAVCAN_STM32_NUM_IFACES > 1
		, if1_(bxcan::Can[1], update_event_, 1, rx_queue_storage[1], RxQueueCapacity)
#endif
		, enabledInterfaces_(0x7)
	{
		uavcan::StaticAssert < (RxQueueCapacity <= CanIface::MaxRxQueueCapacity) >::check();
	}

	/**
	 * This function returns select masks indicating which interfaces are available for read/write.
	 */
	uavcan::CanSelectMasks makeSelectMasks(const uavcan::CanFrame * (& pending_tx)[uavcan::MaxCanIfaces]) const;

	/**
	 * Whether there's at least one interface where receive() would return a frame.
	 */
	bool hasReadableInterfaces() const;

	/**
	 * Returns zero if OK.
	 * Returns negative value if failed (e.g. invalid bitrate).
	 */
	int init(const uavcan::uint32_t bitrate, const CanIface::OperatingMode mode, const uavcan::uint32_t EnabledInterfaces);

	virtual CanIface *getIface(uavcan::uint8_t iface_index);

	virtual uavcan::uint8_t getNumIfaces() const { return UAVCAN_STM32_NUM_IFACES; }

	/**
	 * Whether at least one iface had at least one successful IO since previous call of this method.
	 * This is designed for use with iface activity LEDs.
	 */
	bool hadActivity();

	BusEvent &updateEvent() { return update_event_; }
};",0,587 2000 58 777 2001 321 2002 44 2001 321 2003 123 2004 2005 59 2006 2007 59 35 688 2008 62 1501 2006 2009 59 35 636 2010 2011 59 864 2001 321 2012 2013 40 2001 321 2014 38 2015 44 601 2001 321 2016 42 40 38 2017 41 91 2001 321 2018 93 44 2001 321 2019 2020 41 59 809 865 2021 40 41 59 777 58 822 60 856 2022 62 2000 40 2023 40 38 2024 41 91 2008 93 91 2022 93 41 58 2005 40 42 823 41 44 2007 40 2025 321 2026 91 1500 93 44 2005 44 1500 44 2024 91 1500 93 44 2022 41 35 688 2008 62 1501 44 2009 40 2025 321 2026 91 1501 93 44 2005 44 1501 44 2024 91 1501 93 44 2022 41 35 636 44 2011 40 1502 41 123 2001 321 2027 60 40 2022 329 2006 321 2028 41 62 321 2029 40 41 59 125 306 2001 321 2014 2030 40 601 2001 321 2016 42 40 38 2017 41 91 2001 321 2018 93 41 601 59 306 569 2031 40 41 601 59 306 704 2032 40 601 2001 321 2010 2033 44 601 2006 321 2034 2035 44 601 2001 321 2010 2036 41 59 864 2006 42 2037 40 2001 321 2038 2039 41 59 864 2001 321 2038 2040 40 41 601 123 792 2008 59 125 306 569 2041 40 41 59 2004 38 2042 40 41 123 792 2005 59 125 125 59 ,"{'AvgLine': 20, 'CountLine': 249, 'CountStmt': 46, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 22, 'MaxEssential': 3, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 108, 'CountStmtDecl': 24, 'MaxCyclomatic': 4, 'SumCyclomatic': 16, 'AltAvgLineCode': 16, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 28, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 10, 'AltCountLineCode': 187, 'CountLineCodeExe': 16, 'CountLineComment': 36, 'AltAvgLineComment': 2, 'AltCountLineBlank': 34, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 62, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.33', 'AltCountLineComment': 37, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 30, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118100,C++,"	class RxQueue
	{
		CanRxItem *const buf_;
		const uavcan::uint8_t capacity_;
		uavcan::uint8_t in_;
		uavcan::uint8_t out_;
		uavcan::uint8_t len_;
		uavcan::uint32_t overflow_cnt_;

		void registerOverflow();

	public:
		RxQueue(CanRxItem *buf, uavcan::uint8_t capacity)
			: buf_(buf)
			, capacity_(capacity)
			, in_(0)
			, out_(0)
			, len_(0)
			, overflow_cnt_(0)
		{ }

		void push(const uavcan::CanFrame &frame, const uint64_t &utc_usec, uavcan::CanIOFlags flags);
		void pop(uavcan::CanFrame &out_frame, uavcan::uint64_t &out_utc_usec, uavcan::CanIOFlags &out_flags);

		void reset();

		unsigned getLength() const { return len_; }

		uavcan::uint32_t getOverflowCount() const { return overflow_cnt_; }
	};",0,587 2000 123 2001 42 601 2002 59 601 2003 321 2004 2005 59 2003 321 2004 2006 59 2003 321 2004 2007 59 2003 321 2004 2008 59 2003 321 2009 2010 59 865 2011 40 41 59 777 58 2000 40 2001 42 2012 44 2003 321 2004 2013 41 58 2002 40 2012 41 44 2005 40 2013 41 44 2006 40 1500 41 44 2007 40 1500 41 44 2008 40 1500 41 44 2010 40 1500 41 123 125 865 2014 40 601 2003 321 2015 38 2016 44 601 2017 38 2018 44 2003 321 2019 2020 41 59 865 2021 40 2003 321 2015 38 2022 44 2003 321 2017 38 2023 44 2003 321 2019 38 2024 41 59 865 2025 40 41 59 856 2026 40 41 601 123 792 2008 59 125 2003 321 2009 2027 40 41 601 123 792 2010 59 125 125 59 ,"{'AvgLine': 8, 'CountLine': 82, 'CountStmt': 22, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 69, 'CountStmtDecl': 14, 'MaxCyclomatic': 4, 'SumCyclomatic': 13, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 69, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117569,C++,"class UavcanEscController : public UavcanPublisher
{
public:
	static constexpr int MAX_ACTUATORS = MixingOutput::MAX_ACTUATORS;

	UavcanEscController(CanardInstance &ins, UavcanParamManager &pmgr) :
		UavcanPublisher(ins, pmgr, ""ds_015"", ""esc"") { };

	~UavcanEscController() {};

	void update() override
	{
		if (_armed_sub.updated()) {
			actuator_armed_s new_arming;
			_armed_sub.update(&new_arming);

			if (new_arming.armed != _armed.armed) {
				_armed = new_arming;

				// Only publish if we have a valid publication ID set
				if (_port_id == 0) {
					return;
				}

				reg_drone_service_common_Readiness_0_1 msg_arming {};

				if (_armed.armed) {
					msg_arming.value = reg_drone_service_common_Readiness_0_1_ENGAGED;

				} else if (_armed.prearmed) {
					msg_arming.value = reg_drone_service_common_Readiness_0_1_STANDBY;

				} else {
					msg_arming.value = reg_drone_service_common_Readiness_0_1_SLEEP;
				}

				uint8_t arming_payload_buffer[reg_drone_service_common_Readiness_0_1_SERIALIZATION_BUFFER_SIZE_BYTES_];

				CanardPortID arming_pid = static_cast<CanardPortID>(static_cast<uint32_t>(_port_id) + 1);
				CanardTransfer transfer = {
					.timestamp_usec = hrt_absolute_time() + PUBLISHER_DEFAULT_TIMEOUT_USEC,
					.priority       = CanardPriorityNominal,
					.transfer_kind  = CanardTransferKindMessage,
					.port_id        = arming_pid,                // This is the subject-ID.
					.remote_node_id = CANARD_NODE_ID_UNSET,      // Messages cannot be unicast, so use UNSET.
					.transfer_id    = _arming_transfer_id,
					.payload_size   = reg_drone_service_common_Readiness_0_1_SERIALIZATION_BUFFER_SIZE_BYTES_,
					.payload        = &arming_payload_buffer,
				};

				int result = reg_drone_service_common_Readiness_0_1_serialize_(&msg_arming, arming_payload_buffer,
						&transfer.payload_size);

				if (result == 0) {
					// set the data ready in the buffer and chop if needed
					++_arming_transfer_id;  // The transfer-ID shall be incremented after every transmission on this subject.
					result = canardTxPush(&_canard_instance, &transfer);
				}
			}
		}
	};

	void update_outputs(bool stop_motors, uint16_t outputs[MAX_ACTUATORS], unsigned num_outputs)
	{
		if (_port_id > 0) {
			reg_drone_service_actuator_common_sp_Vector31_0_1 msg_sp {0};

			for (uint8_t i = 0; i < MAX_ACTUATORS; i++) {
				if (i < num_outputs) {
					msg_sp.value[i] = static_cast<float>(outputs[i]);

				} else {
					// ""unset"" values published as NaN
					msg_sp.value[i] = NAN;
				}
			}

			PX4_INFO(""Publish %d values %f, %f, %f, %f"", num_outputs, (double)msg_sp.value[0], (double)msg_sp.value[1],
				 (double)msg_sp.value[2], (double)msg_sp.value[3]);

			uint8_t esc_sp_payload_buffer[reg_drone_service_actuator_common_sp_Vector31_0_1_SERIALIZATION_BUFFER_SIZE_BYTES_];

			CanardTransfer transfer = {
				.timestamp_usec = hrt_absolute_time() + PUBLISHER_DEFAULT_TIMEOUT_USEC,
				.priority       = CanardPriorityNominal,
				.transfer_kind  = CanardTransferKindMessage,
				.port_id        = _port_id,                // This is the subject-ID.
				.remote_node_id = CANARD_NODE_ID_UNSET,       // Messages cannot be unicast, so use UNSET.
				.transfer_id    = _transfer_id,
				.payload_size   = reg_drone_service_actuator_common_sp_Vector31_0_1_SERIALIZATION_BUFFER_SIZE_BYTES_,
				.payload        = &esc_sp_payload_buffer,
			};

			int result = reg_drone_service_actuator_common_sp_Vector31_0_1_serialize_(&msg_sp, esc_sp_payload_buffer,
					&transfer.payload_size);

			if (result == 0) {
				// set the data ready in the buffer and chop if needed
				++_transfer_id;  // The transfer-ID shall be incremented after every transmission on this subject.
				result = canardTxPush(&_canard_instance, &transfer);
			}
		}
	};

	/**
	 * Sets the number of rotors
	 */
	void set_rotor_count(uint8_t count) { _rotor_count = count; }

private:
	/**
	 * ESC status message reception will be reported via this callback.
	 */
	void esc_status_sub_cb(const CanardTransfer &msg);

	uint8_t _rotor_count {0};

	uORB::Subscription _armed_sub{ORB_ID(actuator_armed)};
	actuator_armed_s _armed {};

	CanardTransferID _arming_transfer_id;
};",0,587 2000 58 777 2001 123 777 58 809 603 704 2002 61 2003 321 2002 59 2000 40 2004 38 2005 44 2006 38 2007 41 58 2001 40 2005 44 2007 44 362 44 362 41 123 125 59 126 2000 40 41 123 125 59 865 2008 40 41 2009 123 688 40 2010 46 2011 40 41 41 123 2012 2013 59 2010 46 2008 40 38 2013 41 59 688 40 2013 46 2014 340 2015 46 2014 41 123 2015 61 2013 59 330 688 40 2016 323 1500 41 123 792 59 125 2017 2018 123 125 59 688 40 2015 46 2014 41 123 2018 46 2019 61 2020 59 125 630 688 40 2015 46 2021 41 123 2018 46 2022 61 2023 59 125 630 123 2018 46 2024 61 2025 59 125 2026 2027 91 2028 93 59 2029 2030 61 811 60 2029 62 40 811 60 2031 62 40 2016 41 43 1501 41 59 2032 2033 61 123 46 2034 61 2035 40 41 43 2036 44 46 2037 61 2038 44 46 2039 61 2040 44 46 2041 61 2030 44 330 46 2042 61 2043 44 330 46 2044 61 2045 44 46 2046 61 2028 44 46 2047 61 38 2027 44 125 59 704 2048 61 2049 40 38 2018 44 2027 44 38 2033 46 2050 41 59 688 40 2048 323 1500 41 123 330 349 2051 59 330 2048 61 2052 40 38 2053 44 38 2033 41 59 125 125 125 125 59 865 2054 40 569 2055 44 2056 2057 91 2002 93 44 856 2058 41 123 688 40 2059 62 1500 41 123 2060 2061 123 1500 125 59 664 40 2062 2063 61 1500 59 2063 60 2002 59 2063 349 41 123 688 40 2063 60 2058 41 123 2061 46 2064 91 2063 93 61 811 60 660 62 40 2057 91 2063 93 41 59 125 630 123 330 2061 46 2065 91 2063 93 61 2066 59 125 125 2067 40 362 44 2058 44 40 625 41 2061 46 2068 91 1500 93 44 40 625 41 2061 46 2068 91 1501 93 44 40 625 41 2061 46 2068 91 1502 93 44 40 625 41 2061 46 2068 91 1502 93 41 59 2062 2069 91 2070 93 59 2071 2072 61 123 46 2073 61 2074 40 41 43 2075 44 46 2076 61 2077 44 46 2078 61 2079 44 46 2080 61 2059 44 330 46 2081 61 2082 44 330 46 2083 61 2084 44 46 2085 61 2070 44 46 2086 61 38 2069 44 125 59 704 2087 61 2088 40 38 2061 44 2069 44 38 2072 46 2089 41 59 688 40 2087 323 1500 41 123 330 349 2090 59 330 2087 61 2091 40 38 2092 44 38 2072 41 59 125 125 125 59 306 865 2093 40 2094 2095 41 123 2096 61 2095 59 125 773 58 306 865 2097 40 601 2098 38 2099 41 59 2094 2100 123 1500 125 59 2101 321 2102 2103 123 2104 40 2105 41 125 59 2106 2107 123 125 59 2108 2109 59 125 59 ,"{'AvgLine': 17, 'CountLine': 257, 'CountStmt': 60, 'MaxNesting': 3, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 35, 'MaxEssential': 4, 'SumEssential': 19, 'AvgCyclomatic': 2, 'CountLineCode': 180, 'CountStmtDecl': 31, 'MaxCyclomatic': 7, 'SumCyclomatic': 33, 'AltAvgLineCode': 13, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 44, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 13, 'AltCountLineCode': 180, 'CountLineCodeExe': 26, 'CountLineComment': 39, 'AltAvgLineComment': 2, 'AltCountLineBlank': 44, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 34, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.22', 'AltCountLineComment': 39, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 34, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 33, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117555,C++,"class PX4IO_serial : public device::Device
{
public:
	PX4IO_serial();
	virtual ~PX4IO_serial();

	virtual int	init() = 0;
	virtual int	read(unsigned offset, void *data, unsigned count = 1);
	virtual int	write(unsigned address, void *data, unsigned count = 1);

protected:
	/**
	 * Does the PX4IO_serial instance initialization.
	 * @param io_buffer The IO buffer that should be used for transfers.
	 * @return 0 on success.
	 */
	int		init(IOPacket *io_buffer);

	/**
	 * Start the transaction with IO and wait for it to complete.
	 */
	virtual int	_bus_exchange(IOPacket *_packet) = 0;

	/**
	 * Performance counters.
	 */
	perf_counter_t		_pc_txns;
	perf_counter_t		_pc_retries;
	perf_counter_t		_pc_timeouts;
	perf_counter_t		_pc_crcerrs;
	perf_counter_t		_pc_protoerrs;
	perf_counter_t		_pc_uerrs;
	perf_counter_t		_pc_idle;
	perf_counter_t		_pc_badidle;
private:
	/*
	 * XXX tune this value
	 *
	 * At 1.5Mbps each register takes 13.3µs, and we always transfer a full packet.
	 * Packet overhead is 26µs for the four-byte header.
	 *
	 * 32 registers = 451µs
	 *
	 * Maybe we can just send smaller packets (e.g. 8 regs) and loop for larger (less common)
	 * transfers? Could cause issues with any regs expecting to be written atomically...
	 */
	IOPacket		*_io_buffer_ptr;

	/** bus-ownership lock */
	px4_sem_t			_bus_semaphore;

	/* do not allow top copying this class */
	PX4IO_serial(PX4IO_serial &);
	PX4IO_serial &operator = (const PX4IO_serial &);
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 59 864 704 2003 40 41 61 1500 59 864 704 2004 40 856 2005 44 865 42 2006 44 856 2007 61 1501 41 59 864 704 2008 40 856 2009 44 865 42 2006 44 856 2007 61 1501 41 59 775 58 306 704 2003 40 2010 42 2011 41 59 306 864 704 2012 40 2010 42 2013 41 61 1500 59 306 2014 2015 59 2014 2016 59 2014 2017 59 2014 2018 59 2014 2019 59 2014 2020 59 2014 2021 59 2014 2022 59 773 58 305 2010 42 2023 59 306 2024 2025 59 305 2000 40 2000 38 41 59 2000 38 758 61 40 601 2000 38 41 59 125 59 ,"{'AvgLine': 33, 'CountLine': 220, 'CountStmt': 93, 'MaxNesting': 3, 'AvgLineCode': 22, 'AvgEssential': 2, 'AvgLineBlank': 7, 'CountStmtExe': 68, 'MaxEssential': 4, 'SumEssential': 11, 'AvgCyclomatic': 3, 'CountLineCode': 136, 'CountStmtDecl': 31, 'MaxCyclomatic': 7, 'SumCyclomatic': 18, 'AltAvgLineCode': 22, 'AvgLineComment': 3, 'CountClassBase': 0, 'CountLineBlank': 45, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 7, 'CountDeclMethod': 9, 'AltCountLineCode': 136, 'CountLineCodeExe': 137, 'CountLineComment': 39, 'AltAvgLineComment': 3, 'AltCountLineBlank': 45, 'CountClassCoupled': 2, 'CountClassDerived': 1, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.29', 'AltCountLineComment': 39, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 10, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 8}"
117575,C++,"template<int _forder>
class polyfitter
{
public:
	polyfitter() {}

	void update(double x, double y)
	{
		update_VTV(x);
		update_VTY(x, y);
	}

	bool fit(double res[])
	{
		//Do inverse of VTV
		matrix::SquareMatrix<double, _forder> IVTV;

		IVTV = _VTV.I();

		for (int i = 0; i < _forder; i++) {
			for (int j = 0; j < _forder; j++) {
				PF_DEBUG(""%.10f "", (double)IVTV(i, j));
			}

			PF_DEBUG(""\n"");
		}

		for (int i = 0; i < _forder; i++) {
			res[i] = 0.0;

			for (int j = 0; j < _forder; j++) {
				res[i] += IVTV(i, j) * (double)_VTY(j);
			}

			PF_DEBUG(""%.10f "", res[i]);
		}

		return true;
	}

private:
	matrix::SquareMatrix<double, _forder> _VTV;
	matrix::Vector<double, _forder> _VTY;

	void update_VTY(double x, double y)
	{
		double temp = 1.0;
		PF_DEBUG(""O %.6f\n"", (double)x);

		for (int i = _forder - 1; i >= 0; i--) {
			_VTY(i) += y * temp;
			temp *= x;
			PF_DEBUG(""%.6f "", (double)_VTY(i));
		}

		PF_DEBUG(""\n"");
	}

	void update_VTV(double x)
	{
		double temp = 1.0;
		int8_t z;

		for (int i = 0; i < _forder; i++) {
			for (int j = 0; j < _forder; j++) {
				PF_DEBUG(""%.10f "", (double)_VTV(i, j));
			}

			PF_DEBUG(""\n"");
		}

		for (int i = 2 * _forder - 2; i >= 0; i--) {
			if (i < _forder) {
				z = 0.0f;

			} else {
				z = i - _forder + 1;
			}

			for (int j = i - z; j >= z; j--) {
				int row = j;
				int col = i - j;
				_VTV(row, col) += (double)temp;
			}

			temp *= x;
		}
	}
};",0,822 60 704 2000 62 587 2001 123 777 58 2001 40 41 123 125 865 2002 40 625 2003 44 625 2004 41 123 2005 40 2003 41 59 2006 40 2003 44 2004 41 59 125 569 2007 40 625 2008 91 93 41 123 330 2009 321 2010 60 625 44 2000 62 2011 59 2011 61 2012 46 2013 40 41 59 664 40 704 2014 61 1500 59 2014 60 2000 59 2014 349 41 123 664 40 704 2015 61 1500 59 2015 60 2000 59 2015 349 41 123 2016 40 362 44 40 625 41 2011 40 2014 44 2015 41 41 59 125 2017 40 362 41 59 125 664 40 704 2014 61 1500 59 2014 60 2000 59 2014 349 41 123 2008 91 2014 93 61 1500 59 664 40 704 2018 61 1500 59 2018 60 2000 59 2018 349 41 123 2008 91 2014 93 348 2011 40 2014 44 2018 41 42 40 625 41 2019 40 2018 41 59 125 2020 40 362 44 2008 91 2014 93 41 59 125 792 829 59 125 773 58 2021 321 2022 60 625 44 2000 62 2023 59 2021 321 2024 60 625 44 2000 62 2025 59 865 2026 40 625 2003 44 625 2004 41 123 625 2027 61 1501 59 2028 40 362 44 40 625 41 2003 41 59 664 40 704 2029 61 2000 45 1501 59 2029 325 1500 59 2029 338 41 123 2025 40 2029 41 348 2004 42 2027 59 2027 363 2003 59 2028 40 362 44 40 625 41 2025 40 2029 41 41 59 125 2028 40 362 41 59 125 865 2030 40 625 2003 41 123 625 2031 61 1501 59 2032 2033 59 664 40 704 2034 61 1500 59 2034 60 2000 59 2034 349 41 123 664 40 704 2035 61 1500 59 2035 60 2000 59 2035 349 41 123 2036 40 362 44 40 625 41 2023 40 2034 44 2035 41 41 59 125 2037 40 362 41 59 125 664 40 704 2034 61 1502 42 2000 45 1502 59 2034 325 1500 59 2034 338 41 123 688 40 2034 60 2000 41 123 2033 61 1500 59 125 630 123 2033 61 2034 45 2000 43 1501 59 125 664 40 704 2038 61 2034 45 2033 59 2038 325 2033 59 2038 338 41 123 704 2039 61 2038 59 704 2040 61 2034 45 2038 59 2023 40 2039 44 2040 41 348 40 625 41 2031 59 125 2031 363 2003 59 125 125 125 59 ,"{'AvgLine': 15, 'CountLine': 88, 'CountStmt': 52, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 40, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 3, 'CountLineCode': 67, 'CountStmtDecl': 22, 'MaxCyclomatic': 6, 'SumCyclomatic': 15, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 20, 'CountStmtEmpty': 8, 'AltAvgLineBlank': 3, 'CountDeclMethod': 5, 'AltCountLineCode': 67, 'CountLineCodeExe': 28, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 20, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
117578,C++,"template <typename T>
class Queue
{
	struct Item : public uavcan::LinkedListNode<Item> {
		T payload;

		template <typename... Args>
		Item(Args... args) : payload(args...) { }
	};

	uavcan::LimitedPoolAllocator allocator_;
	uavcan::LinkedListRoot<Item> list_;

public:
	Queue(uavcan::IPoolAllocator &arg_allocator, std::size_t block_allocation_quota) :
		allocator_(arg_allocator, block_allocation_quota)
	{
		uavcan::IsDynamicallyAllocatable<Item>::check();
	}

	~Queue()
	{
		while (!isEmpty()) {
			pop();
		}
	}

	bool isEmpty() const { return list_.isEmpty(); }

	/**
	 * Creates one item in-place at the end of the list.
	 * Returns true if the item was appended successfully, false if there's not enough memory.
	 * Complexity is O(N) where N is queue length.
	 */
	template <typename... Args>
	bool tryEmplace(Args... args)
	{
		// Allocating memory
		void *const ptr = allocator_.allocate(sizeof(Item));

		if (ptr == nullptr) {
			return false;
		}

		// Constructing the new item
		Item *const item = new (ptr) Item(args...);
		assert(item != nullptr);

		// Inserting the new item at the end of the list
		Item *p = list_.get();

		if (p == nullptr) {
			list_.insert(item);

		} else {
			while (p->getNextListNode() != nullptr) {
				p = p->getNextListNode();
			}

			assert(p->getNextListNode() == nullptr);
			p->setNextListNode(item);
			assert(p->getNextListNode()->getNextListNode() == nullptr);
		}

		return true;
	}

	/**
	 * Accesses the first element.
	 * Nullptr will be returned if the queue is empty.
	 * Complexity is O(1).
	 */
	T       *peek()       { return isEmpty() ? nullptr : &list_.get()->payload; }
	const T *peek() const { return isEmpty() ? nullptr : &list_.get()->payload; }

	/**
	 * Removes the first element.
	 * If the queue is empty, nothing will be done and assertion failure will be triggered.
	 * Complexity is O(1).
	 */
	void pop()
	{
		Item *const item = list_.get();
		assert(item != nullptr);

		if (item != nullptr) {
			list_.remove(item);
			item->~Item();
			allocator_.deallocate(item);
		}
	}
};",0,822 60 835 2000 62 587 2001 123 816 2002 58 777 2003 321 2004 60 2002 62 123 2000 2005 59 822 60 835 322 2006 62 2002 40 2006 322 2007 41 58 2005 40 2007 322 41 123 125 125 59 2003 321 2008 2009 59 2003 321 2010 60 2002 62 2011 59 777 58 2001 40 2003 321 2012 38 2013 44 2014 321 2015 2016 41 58 2009 40 2013 44 2016 41 123 2003 321 2017 60 2002 62 321 2018 40 41 59 125 126 2001 40 41 123 870 40 33 2019 40 41 41 123 2020 40 41 59 125 125 569 2021 40 41 601 123 792 2011 46 2021 40 41 59 125 306 822 60 835 322 2022 62 569 2023 40 2022 322 2024 41 123 330 865 42 601 2025 61 2009 46 2026 40 805 40 2002 41 41 59 688 40 2025 323 753 41 123 792 655 59 125 330 2002 42 601 2027 61 744 40 2025 41 2002 40 2024 322 41 59 2028 40 2027 340 753 41 59 330 2002 42 2029 61 2011 46 2030 40 41 59 688 40 2029 323 753 41 123 2011 46 2031 40 2027 41 59 125 630 123 870 40 2029 354 2032 40 41 340 753 41 123 2029 61 2029 354 2032 40 41 59 125 2028 40 2029 354 2032 40 41 323 753 41 59 2029 354 2033 40 2027 41 59 2028 40 2029 354 2032 40 41 354 2032 40 41 323 753 41 59 125 792 829 59 125 306 2000 42 2034 40 41 123 792 2021 40 41 63 753 58 38 2011 46 2035 40 41 354 2036 59 125 601 2000 42 2034 40 41 601 123 792 2021 40 41 63 753 58 38 2011 46 2037 40 41 354 2038 59 125 306 865 2039 40 41 123 2002 42 601 2040 61 2011 46 2041 40 41 59 2042 40 2040 340 753 41 59 688 40 2040 340 753 41 123 2011 46 2043 40 2040 41 59 2040 354 126 2002 40 41 59 2009 46 2044 40 2040 41 59 125 125 125 59 ,"{'AvgLine': 8, 'CountLine': 91, 'CountStmt': 34, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 57, 'CountStmtDecl': 19, 'MaxCyclomatic': 7, 'SumCyclomatic': 16, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 57, 'CountLineCodeExe': 14, 'CountLineComment': 18, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.32', 'AltCountLineComment': 18, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117592,C++,"class OutputRC : public OutputBase
{
public:
	OutputRC(const OutputConfig &output_config);
	virtual ~OutputRC() = default;

	virtual int update(const ControlData *control_data);

	virtual void print_status();

private:
	void _stream_device_attitude_status();

	uORB::Publication <actuator_controls_s>	_actuator_controls_pub{ORB_ID(actuator_controls_2)};
	uORB::Publication <gimbal_device_attitude_status_s>	_attitude_status_pub{ORB_ID(gimbal_device_attitude_status)};

	bool _retract_gimbal = true;
};",0,587 2000 58 777 2001 123 777 58 2000 40 601 2002 38 2003 41 59 864 126 2000 40 41 61 613 59 864 704 2004 40 601 2005 42 2006 41 59 864 865 2007 40 41 59 773 58 865 2008 40 41 59 2009 321 2010 60 2011 62 2012 123 2013 40 2014 41 125 59 2009 321 2010 60 2015 62 2016 123 2017 40 2018 41 125 59 569 2019 61 829 59 125 59 ,"{'AvgLine': 13, 'CountLine': 72, 'CountStmt': 21, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 57, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 57, 'CountLineCodeExe': 10, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117580,C++,"class VirtualCanDriver : public uavcan::ICanDriver,
	public uavcan::IRxFrameListener,
	public ITxQueueInjector,
	uavcan::Noncopyable
{
	class Event
	{
		FAR px4_sem_t sem;


	public:

		int init()
		{
			int rv = px4_sem_init(&sem, 0, 0);

			if (rv == 0) {
				px4_sem_setprotocol(&sem, SEM_PRIO_NONE);
			}

			return rv;
		}

		int deinit()
		{
			return px4_sem_destroy(&sem);
		}


		Event()
		{
		}

		~Event()
		{
		}


		/**
		 */

		void waitFor(uavcan::MonotonicDuration duration)
		{
			static const int NsPerSec = 1000000000;

			if (duration.isPositive()) {
				auto abstime = ::timespec();

				if (clock_gettime(CLOCK_REALTIME, &abstime) >= 0) {
					abstime.tv_nsec += duration.toUSec() * 1000;

					if (abstime.tv_nsec >= NsPerSec) {
						abstime.tv_sec++;
						abstime.tv_nsec -= NsPerSec;
					}

					(void)px4_sem_timedwait(&sem, &abstime);
				}
			}
		}

		void signal()
		{
			int count;
			int rv = px4_sem_getvalue(&sem, &count);

			if (rv == 0 && count <= 0) {
				px4_sem_post(&sem);
			}
		}
	};

	Event event_;                     ///< Used to unblock the select() call when IO happens.
	pthread_mutex_t driver_mutex_;    ///< Shared across all ifaces
	uavcan::LazyConstructor<VirtualCanIface> ifaces_[uavcan::MaxCanIfaces];
	const unsigned num_ifaces_;
	uavcan::ISystemClock &clock_;

	uavcan::ICanIface *getIface(uint8_t iface_index) override
	{
		return (iface_index < num_ifaces_) ? ifaces_[iface_index].operator VirtualCanIface * () : nullptr;
	}

	uint8_t getNumIfaces() const override { return num_ifaces_; }

	/**
	 * This and other methods of ICanDriver will be invoked by the sub-node thread.
	 */
	int16_t select(uavcan::CanSelectMasks &inout_masks,
		       const uavcan::CanFrame * (&)[uavcan::MaxCanIfaces],
		       uavcan::MonotonicTime blocking_deadline) override
	{
		bool need_block = (inout_masks.write == 0);    // Write queue is infinite

		for (unsigned i = 0; need_block && (i < num_ifaces_); i++) {
			const bool need_read = inout_masks.read & (1U << i);

			if (need_read && ifaces_[i]->hasDataInRxQueue()) {
				need_block = false;
			}
		}

		if (need_block) {
			event_.waitFor(blocking_deadline - clock_.getMonotonic());
		}

		inout_masks = uavcan::CanSelectMasks();

		for (unsigned i = 0; i < num_ifaces_; i++) {
			const std::uint8_t iface_mask = 1U << i;
			inout_masks.write |= iface_mask;           // Always ready to write

			if (ifaces_[i]->hasDataInRxQueue()) {
				inout_masks.read |= iface_mask;
			}
		}

		return num_ifaces_;       // We're always ready to write, hence > 0.
	}

	/**
	 * This handler will be invoked by the main node thread.
	 */
	void handleRxFrame(const uavcan::CanRxFrame &frame, uavcan::CanIOFlags flags) override
	{
		UAVCAN_TRACE(""VirtualCanDriver"", ""RX [flags=%u]: %s"", unsigned(flags), frame.toString().c_str());

		if (frame.iface_index < num_ifaces_) {
			ifaces_[frame.iface_index]->addRxFrame(frame, flags);
			event_.signal();

		}
	}

	/**
	 * This method will be invoked by the main node thread.
	 */
	void injectTxFramesInto(uavcan::INode &main_node) override
	{
		for (unsigned i = 0; i < num_ifaces_; i++) {
			ifaces_[i]->flushTxQueueTo(main_node, i);
		}

		event_.signal();
	}

public:
	VirtualCanDriver(unsigned arg_num_ifaces,
			 uavcan::ISystemClock &system_clock,
			 uavcan::IPoolAllocator &allocator,
			 unsigned virtual_iface_block_allocation_quota) :
		num_ifaces_(arg_num_ifaces),
		clock_(system_clock)
	{
		Lock::init(driver_mutex_);
		event_.init();

		assert(num_ifaces_ > 0 && num_ifaces_ <= uavcan::MaxCanIfaces);

		const unsigned quota_per_queue = virtual_iface_block_allocation_quota;             // 2x overcommit

		for (unsigned i = 0; i < num_ifaces_; i++) {
			ifaces_[i].construct<uavcan::IPoolAllocator &, uavcan::ISystemClock &, pthread_mutex_t &,
				unsigned>(allocator, clock_, driver_mutex_, quota_per_queue);
		}
	}

	~VirtualCanDriver()
	{
		Lock::deinit(driver_mutex_);
		event_.deinit();
	}

};",0,587 2000 58 777 2001 321 2002 44 777 2001 321 2003 44 777 2004 44 2001 321 2005 123 587 2006 123 2007 2008 2009 59 777 58 704 2010 40 41 123 704 2011 61 2012 40 38 2009 44 1500 44 1500 41 59 688 40 2011 323 1500 41 123 2013 40 38 2009 44 2014 41 59 125 792 2011 59 125 704 2015 40 41 123 792 2016 40 38 2009 41 59 125 2006 40 41 123 125 126 2006 40 41 123 125 306 865 2017 40 2001 321 2018 2019 41 123 809 601 704 2020 61 1510 59 688 40 2019 46 2021 40 41 41 123 561 2022 61 321 2023 40 41 59 688 40 2024 40 2025 44 38 2022 41 325 1500 41 123 2022 46 2026 348 2019 46 2027 40 41 42 1504 59 688 40 2022 46 2026 325 2020 41 123 2022 46 2028 349 59 2022 46 2026 337 2020 59 125 40 865 41 2029 40 38 2009 44 38 2022 41 59 125 125 125 865 2030 40 41 123 704 2031 59 704 2032 61 2033 40 38 2009 44 38 2031 41 59 688 40 2032 323 1500 307 2031 329 1500 41 123 2034 40 38 2009 41 59 125 125 125 59 2006 2035 59 331 2036 2037 59 331 2001 321 2038 60 2039 62 2040 91 2001 321 2041 93 59 601 856 2042 59 2001 321 2043 38 2044 59 2001 321 2045 42 2046 40 2047 2048 41 2049 123 792 40 2048 60 2042 41 63 2040 91 2048 93 46 758 2039 42 40 41 58 753 59 125 2047 2050 40 41 601 2049 123 792 2042 59 125 306 2051 2052 40 2001 321 2053 38 2054 44 601 2001 321 2055 42 40 38 41 91 2001 321 2041 93 44 2001 321 2056 2057 41 2049 123 569 2058 61 40 2054 46 2059 323 1500 41 59 330 664 40 856 2060 61 1500 59 2058 307 40 2060 60 2042 41 59 2060 349 41 123 601 569 2061 61 2054 46 2062 38 40 1501 332 2060 41 59 688 40 2061 307 2040 91 2060 93 354 2063 40 41 41 123 2058 61 655 59 125 125 688 40 2058 41 123 2035 46 2064 40 2057 45 2044 46 2065 40 41 41 59 125 2054 61 2001 321 2053 40 41 59 664 40 856 2060 61 1500 59 2060 60 2042 59 2060 349 41 123 601 2066 321 2047 2067 61 1501 332 2060 59 2054 46 2059 347 2067 59 330 688 40 2040 91 2060 93 354 2068 40 41 41 123 2054 46 2069 347 2067 59 125 125 792 2042 59 330 125 306 865 2070 40 601 2001 321 2071 38 2072 44 2001 321 2073 2074 41 2049 123 2075 40 362 44 362 44 856 40 2074 41 44 2072 46 2076 40 41 46 2077 40 41 41 59 688 40 2072 46 2048 60 2042 41 123 2040 91 2072 46 2048 93 354 2078 40 2072 44 2074 41 59 2035 46 2079 40 41 59 125 125 306 865 2080 40 2001 321 2081 38 2082 41 2049 123 664 40 856 2083 61 1500 59 2083 60 2042 59 2083 349 41 123 2040 91 2083 93 354 2084 40 2082 44 2083 41 59 125 2035 46 2085 40 41 59 125 777 58 2000 40 856 2086 44 2001 321 2043 38 2087 44 2001 321 2088 38 2089 44 856 2090 41 58 2042 40 2086 41 44 2044 40 2087 41 123 2091 321 2092 40 2037 41 59 2035 46 2092 40 41 59 2093 40 2042 62 1500 307 2042 329 2001 321 2041 41 59 601 856 2094 61 2090 59 330 664 40 856 2095 61 1500 59 2095 60 2042 59 2095 349 41 123 2040 91 2095 93 46 2096 60 2001 321 2088 38 44 2001 321 2043 38 44 2036 38 44 856 62 40 2089 44 2044 44 2037 44 2094 41 59 125 125 126 2000 40 41 123 2097 321 2098 40 2037 41 59 2035 46 2098 40 41 59 125 125 59 ,"{'AvgLine': 11, 'CountLine': 174, 'CountStmt': 64, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 38, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 123, 'CountStmtDecl': 35, 'MaxCyclomatic': 6, 'SumCyclomatic': 15, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 40, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 123, 'CountLineCodeExe': 49, 'CountLineComment': 17, 'AltAvgLineComment': 0, 'AltCountLineBlank': 40, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 32, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 17, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
117615,C++,"class RangeFinder: public Sensor
{
public:
	RangeFinder(std::shared_ptr<Ekf> ekf);
	~RangeFinder();

	void setData(float range_data, int8_t range_quality);
	void setLimits(float min_distance_m, float max_distance_m);

private:
	rangeSample _range_sample{};
	float _min_distance{0.2f};
	float _max_distance{20.0f};

	void send(uint64_t time) override;
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 321 2003 60 2004 62 2005 41 59 126 2000 40 41 59 865 2006 40 660 2007 44 2008 2009 41 59 865 2010 40 660 2011 44 660 2012 41 59 773 58 2013 2014 123 125 59 660 2015 123 1500 125 59 660 2016 123 1503 125 59 865 2017 40 2018 2019 41 2020 59 125 59 ,"{'AvgLine': 4, 'CountLine': 38, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 35, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
118388,C++,"class NEOPIXEL : public px4::ScheduledWorkItem,  public ModuleBase<NEOPIXEL>
{
public:
	NEOPIXEL(unsigned int number_of_packages);
	virtual ~NEOPIXEL();

	/** @see ModuleBase */
	static int task_spawn(int argc, char *argv[]);

	/** @see ModuleBase */
	static int custom_command(int argc, char *argv[]);

	/** @see ModuleBase */
	static int print_usage(const char *reason = nullptr);

	void Run() override;

	/** @see ModuleBase::print_status() */
	int print_status() override;


	int			init();
	int			status();

private:
	unsigned int _number_of_packages{BOARD_HAS_N_S_RGB_LED};

	LedController		_led_controller;

	NEOPIXEL(const NEOPIXEL &) = delete;
	NEOPIXEL operator=(const NEOPIXEL &) = delete;

	neopixel::NeoLEDData *_leds;
};",0,587 2000 58 777 2001 321 2002 44 777 2003 60 2000 62 123 777 58 2000 40 856 704 2004 41 59 864 126 2000 40 41 59 306 809 704 2005 40 704 2006 44 582 42 2007 91 93 41 59 306 809 704 2008 40 704 2006 44 582 42 2007 91 93 41 59 306 809 704 2009 40 601 582 42 2010 61 753 41 59 865 2011 40 41 2012 59 306 704 2013 40 41 2012 59 704 2014 40 41 59 704 2015 40 41 59 773 58 856 704 2016 123 2017 125 59 2018 2019 59 2000 40 601 2000 38 41 61 619 59 2000 758 61 40 601 2000 38 41 61 619 59 2020 321 2021 42 2022 59 125 59 ,"{'AvgLine': 17, 'CountLine': 175, 'CountStmt': 56, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 35, 'MaxEssential': 5, 'SumEssential': 12, 'AvgCyclomatic': 2, 'CountLineCode': 133, 'CountStmtDecl': 20, 'MaxCyclomatic': 6, 'SumCyclomatic': 19, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 37, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 3, 'CountDeclMethod': 11, 'AltCountLineCode': 133, 'CountLineCodeExe': 39, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 37, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 46, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118394,C++,"class EkfGpsHeadingTest : public ::testing::Test
{
public:

	EkfGpsHeadingTest(): ::testing::Test(),
		_ekf{std::make_shared<Ekf>()},
		_sensor_simulator(_ekf),
		_ekf_wrapper(_ekf) {};

	std::shared_ptr<Ekf> _ekf;
	SensorSimulator _sensor_simulator;
	EkfWrapper _ekf_wrapper;

	void runConvergenceScenario(float yaw_offset_rad = 0.f, float antenna_offset_rad = 0.f);
	void checkConvergence(float truth, float tolerance = FLT_EPSILON);

	// Setup the Ekf with synthetic measurements
	void SetUp() override
	{
		_ekf->init(0);
		_sensor_simulator.runSeconds(_init_duration_s);
		_sensor_simulator._gps.setYaw(NAN);
		_sensor_simulator.runSeconds(2);
		_ekf_wrapper.enableGpsFusion();
		_ekf_wrapper.enableGpsHeadingFusion();
		_sensor_simulator.startGps();
		_sensor_simulator.runSeconds(11);
	}

	const uint32_t _init_duration_s{4};
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 58 321 2001 321 2002 40 41 44 2003 123 2004 321 2005 60 2006 62 40 41 125 44 2007 40 2003 41 44 2008 40 2003 41 123 125 59 2009 321 2010 60 2011 62 2003 59 2012 2007 59 2013 2008 59 865 2014 40 660 2015 61 1500 44 660 2016 61 1500 41 59 865 2017 40 660 2018 44 660 2019 61 2020 41 59 330 865 2021 40 41 2022 123 2003 354 2023 40 1500 41 59 2007 46 2024 40 2025 41 59 2007 46 2026 46 2027 40 2028 41 59 2007 46 2024 40 1502 41 59 2008 46 2029 40 41 59 2008 46 2030 40 41 59 2007 46 2031 40 41 59 2007 46 2024 40 1503 41 59 125 601 2032 2033 123 1502 125 59 125 59 ,"{'AvgLine': 9, 'CountLine': 52, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 40, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 40, 'CountLineCodeExe': 3, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117561,C++,"class FixedwingLandDetector final : public LandDetector
{
public:
	FixedwingLandDetector();
	~FixedwingLandDetector() override = default;

protected:

	bool _get_landed_state() override;
	void _set_hysteresis_factor(const int factor) override {};

private:

	/** Time in us that landing conditions have to hold before triggering a land. */
	static constexpr hrt_abstime LANDED_TRIGGER_TIME_US = 2_s;
	static constexpr hrt_abstime FLYING_TRIGGER_TIME_US = 0_us;

	uORB::Subscription _airspeed_validated_sub{ORB_ID(airspeed_validated)};

	float _airspeed_filtered{0.0f};
	float _velocity_xy_filtered{0.0f};
	float _velocity_z_filtered{0.0f};
	float _xy_accel_filtered{0.0f};

	DEFINE_PARAMETERS_CUSTOM_PARENT(
		LandDetector,
		(ParamFloat<px4::params::LNDFW_XYACC_MAX>)  _param_lndfw_xyaccel_max,
		(ParamFloat<px4::params::LNDFW_AIRSPD_MAX>) _param_lndfw_airspd,
		(ParamFloat<px4::params::LNDFW_VEL_XY_MAX>) _param_lndfw_vel_xy_max,
		(ParamFloat<px4::params::LNDFW_VEL_Z_MAX>)  _param_lndfw_vel_z_max
	);
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 126 2000 40 41 2003 61 613 59 775 58 569 2004 40 41 2003 59 865 2005 40 601 704 2006 41 2003 123 125 59 773 58 306 809 603 2007 2008 61 1502 59 809 603 2007 2009 61 1500 59 2010 321 2011 2012 123 2013 40 2014 41 125 59 660 2015 123 1500 125 59 660 2016 123 1500 125 59 660 2017 123 1500 125 59 660 2018 123 1500 125 59 2019 40 2002 44 40 2020 60 2021 321 2022 321 2023 62 41 2024 44 40 2020 60 2021 321 2022 321 2025 62 41 2026 44 40 2020 60 2021 321 2022 321 2027 62 41 2028 44 40 2020 60 2021 321 2022 321 2029 62 41 2030 41 59 125 59 ,"{'AvgLine': 20, 'CountLine': 101, 'CountStmt': 38, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 68, 'CountStmtDecl': 22, 'MaxCyclomatic': 6, 'SumCyclomatic': 9, 'AltAvgLineCode': 13, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 22, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 5, 'AltCountLineCode': 68, 'CountLineCodeExe': 17, 'CountLineComment': 11, 'AltAvgLineComment': 2, 'AltCountLineBlank': 22, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 72, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.16', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 9, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
117743,C++,"class StreamListItem
{

public:
	MavlinkStream *(*new_instance)(Mavlink *mavlink);
	const char *name;
	uint16_t id;

	StreamListItem(MavlinkStream * (*inst)(Mavlink *mavlink), const char *_name, uint16_t _id) :
		new_instance(inst),
		name(_name),
		id(_id) {}

	const char *get_name() const { return name; }
	uint16_t get_id() const { return id; }
};",0,587 2000 123 777 58 2001 42 40 42 2002 41 40 2003 42 2004 41 59 601 582 42 2005 59 2006 2007 59 2000 40 2001 42 40 42 2008 41 40 2003 42 2004 41 44 601 582 42 2009 44 2006 2010 41 58 2002 40 2008 41 44 2005 40 2009 41 44 2007 40 2010 41 123 125 601 582 42 2011 40 41 601 123 792 2005 59 125 2006 2012 40 41 601 123 792 2007 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 16, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 13, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117636,C++,"class FakeGps : public ModuleBase<FakeGps>, public ModuleParams, public px4::ScheduledWorkItem
{
public:
	FakeGps(double latitude_deg = 29.6603018, double longitude_deg = -82.3160500, float altitude_m = 30.1f);

	~FakeGps() override = default;

	/** @see ModuleBase */
	static int task_spawn(int argc, char *argv[]);

	/** @see ModuleBase */
	static int custom_command(int argc, char *argv[]);

	/** @see ModuleBase */
	static int print_usage(const char *reason = nullptr);

	bool init();

private:
	static constexpr uint32_t SENSOR_INTERVAL_US{1000000 / 5}; // 5 Hz

	void Run() override;

	uORB::PublicationMulti<sensor_gps_s> _sensor_gps_pub{ORB_ID(sensor_gps)};

	int32_t _latitude{296603018};   // Latitude in 1e-7 degrees
	int32_t _longitude{-823160500}; // Longitude in 1e-7 degrees
	int32_t _altitude{30100};       // Altitude in 1e-3 meters above MSL, (millimetres)
};",0,587 2000 58 777 2001 60 2000 62 44 777 2002 44 777 2003 321 2004 123 777 58 2000 40 625 2005 61 1503 44 625 2006 61 45 1503 44 660 2007 61 1503 41 59 126 2000 40 41 2008 61 613 59 306 809 704 2009 40 704 2010 44 582 42 2011 91 93 41 59 306 809 704 2012 40 704 2010 44 582 42 2011 91 93 41 59 306 809 704 2013 40 601 582 42 2014 61 753 41 59 569 2015 40 41 59 773 58 809 603 2016 2017 123 1507 47 1502 125 59 330 865 2018 40 41 2008 59 2019 321 2020 60 2021 62 2022 123 2023 40 2024 41 125 59 2025 2026 123 1510 125 59 330 2025 2027 123 45 1510 125 59 330 2025 2028 123 1506 125 59 330 125 59 ,"{'AvgLine': 15, 'CountLine': 118, 'CountStmt': 40, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 22, 'MaxEssential': 3, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 98, 'CountStmtDecl': 16, 'MaxCyclomatic': 4, 'SumCyclomatic': 12, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 17, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 98, 'CountLineCodeExe': 24, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 17, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 51, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 91, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
117677,C++,"class MutexLocker
{
	Mutex &mutex_;

public:
	MutexLocker(Mutex &mutex)
		: mutex_(mutex)
	{
		mutex_.lock();
	}
	~MutexLocker()
	{
		mutex_.unlock();
	}
};",0,587 2000 123 2001 38 2002 59 777 58 2000 40 2001 38 2003 41 58 2002 40 2003 41 123 2002 46 2004 40 41 59 125 126 2000 40 41 123 2002 46 2005 40 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 15, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 14, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117770,C++,"class TEST_PPM
{
public:
	TEST_PPM(unsigned channels);
	virtual ~TEST_PPM(void);
	virtual int		init();
	unsigned 		_values[20];
	unsigned 		_gaps[20];
	unsigned 		_channels;
	unsigned 		_plus_width;
protected:

private:
	struct hrt_call		_call;
	unsigned 		_call_times;
	void			start();

	void			stop();
	void 			do_out();
	static void		loops(void *arg);


};",0,587 2000 123 777 58 2000 40 856 2001 41 59 864 126 2000 40 865 41 59 864 704 2002 40 41 59 856 2003 91 1503 93 59 856 2004 91 1503 93 59 856 2005 59 856 2006 59 775 58 773 58 816 2007 2008 59 856 2009 59 865 2010 40 41 59 865 2011 40 41 59 865 2012 40 41 59 809 865 2013 40 865 42 2014 41 59 125 59 ,"{'AvgLine': 8, 'CountLine': 83, 'CountStmt': 36, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 19, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 73, 'CountStmtDecl': 19, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 73, 'CountLineCodeExe': 22, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
117693,C++,"template<class T>
class IntrusiveSortedList
{
public:

	void add(T newNode)
	{
		if (_head == nullptr) {
			// list is empty, add as head
			_head = newNode;
			return;

		} else {
			if (*newNode <= *_head) {
				newNode->setSortedSibling(_head);
				_head = newNode;
				return;
			}

			// find last node and add to end
			T node = _head;

			while (node != nullptr && node->getSortedSibling() != nullptr) {

				if (*newNode <= *node->getSortedSibling()) {
					// insert newNode
					newNode->setSortedSibling(node->getSortedSibling());
					node->setSortedSibling(newNode);
					return;
				}

				node = node->getSortedSibling();
			}

			// reached the end, add
			node->setSortedSibling(newNode);
		}
	}

	bool remove(T removeNode)
	{
		if (removeNode == nullptr) {
			return false;
		}

		// base case
		if (removeNode == _head) {
			if (_head != nullptr) {
				_head = _head->getSortedSibling();
			}

			removeNode->setSortedSibling(nullptr);

			return true;
		}

		for (T node = _head; node != nullptr; node = node->getSortedSibling()) {
			// is sibling the node to remove?
			if (node->getSortedSibling() == removeNode) {
				// replace sibling
				if (node->getSortedSibling() != nullptr) {
					node->setSortedSibling(node->getSortedSibling()->getSortedSibling());

				} else {
					node->setSortedSibling(nullptr);
				}

				removeNode->setSortedSibling(nullptr);

				return true;
			}
		}

		return false;
	}

	struct Iterator {
		T node;
		explicit Iterator(T v) : node(v) {}

		operator T() const { return node; }
		operator T &() { return node; }
		const T &operator* () const { return node; }
		Iterator &operator++ ()
		{
			if (node) {
				node = node->getSortedSibling();
			}

			return *this;
		}
	};

	Iterator begin() { return Iterator(_head); }
	Iterator end() { return Iterator(nullptr); }

	bool empty() const { return _head == nullptr; }

	size_t size() const
	{
		size_t sz = 0;

		for (T node = _head; node != nullptr; node = node->getSortedSibling()) {
			sz++;
		}

		return sz;
	}

	void deleteNode(T node)
	{
		if (remove(node)) {
			// only delete if node was successfully removed
			delete node;
		}
	}

	void clear()
	{
		T node = _head;

		while (node != nullptr) {
			T next = node->getSortedSibling();
			delete node;
			node = next;
		}

		_head = nullptr;
	}

protected:

	T _head{nullptr};
};",0,822 60 587 2000 62 587 2001 123 777 58 865 2002 40 2000 2003 41 123 688 40 2004 323 753 41 123 330 2004 61 2003 59 792 59 125 630 123 688 40 42 2003 329 42 2004 41 123 2003 354 2005 40 2004 41 59 2004 61 2003 59 792 59 125 330 2000 2006 61 2004 59 870 40 2006 340 753 307 2006 354 2007 40 41 340 753 41 123 688 40 42 2003 329 42 2006 354 2007 40 41 41 123 330 2003 354 2008 40 2006 354 2007 40 41 41 59 2006 354 2008 40 2003 41 59 792 59 125 2006 61 2006 354 2007 40 41 59 125 330 2006 354 2009 40 2003 41 59 125 125 569 2010 40 2000 2011 41 123 688 40 2011 323 753 41 123 792 655 59 125 330 688 40 2011 323 2012 41 123 688 40 2012 340 753 41 123 2012 61 2012 354 2013 40 41 59 125 2011 354 2014 40 753 41 59 792 829 59 125 664 40 2000 2015 61 2012 59 2015 340 753 59 2015 61 2015 354 2016 40 41 41 123 330 688 40 2015 354 2016 40 41 323 2011 41 123 330 688 40 2015 354 2016 40 41 340 753 41 123 2015 354 2017 40 2015 354 2016 40 41 354 2016 40 41 41 59 125 630 123 2015 354 2018 40 753 41 59 125 2011 354 2019 40 753 41 59 792 829 59 125 125 792 655 59 125 816 2020 123 2000 2021 59 648 2020 40 2000 2022 41 58 2021 40 2022 41 123 125 758 2000 40 41 601 123 792 2021 59 125 758 2000 38 40 41 123 792 2021 59 125 601 2000 38 758 42 40 41 601 123 792 2021 59 125 2020 38 758 349 40 41 123 688 40 2021 41 123 2021 61 2021 354 2023 40 41 59 125 792 42 823 59 125 125 59 2020 2024 40 41 123 792 2020 40 2025 41 59 125 2020 2026 40 41 123 792 2020 40 753 41 59 125 569 2027 40 41 601 123 792 2028 323 753 59 125 2029 2030 40 41 601 123 2029 2031 61 1500 59 664 40 2000 2032 61 2033 59 2032 340 753 59 2032 61 2032 354 2034 40 41 41 123 2031 349 59 125 792 2031 59 125 865 2035 40 2000 2036 41 123 688 40 2010 40 2036 41 41 123 330 619 2036 59 125 125 865 2037 40 41 123 2000 2036 61 2038 59 870 40 2036 340 753 41 123 2000 2039 61 2036 354 2040 40 41 59 619 2036 59 2036 61 2039 59 125 2038 61 753 59 125 775 58 2000 2041 123 753 125 59 125 59 ,"{'AvgLine': 12, 'CountLine': 133, 'CountStmt': 70, 'MaxNesting': 3, 'AvgLineCode': 9, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 51, 'MaxEssential': 5, 'SumEssential': 16, 'AvgCyclomatic': 2, 'CountLineCode': 95, 'CountStmtDecl': 23, 'MaxCyclomatic': 7, 'SumCyclomatic': 21, 'AltAvgLineCode': 9, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 30, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 8, 'AltCountLineCode': 95, 'CountLineCodeExe': 54, 'CountLineComment': 8, 'AltAvgLineComment': 1, 'AltCountLineBlank': 30, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 25, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
117700,C++,"class LockstepComponents
{
public:
	LockstepComponents();
	~LockstepComponents();

	/**
	 * Register a component
	 * @return a valid component ID > 0 or 0 on error (or unsupported)
	 */
	int register_component();
	void unregister_component(int component);

	/**
	 * signal an update from a component
	 * @param component component ID
	 */
	void lockstep_progress(int component);

	/**
	 * Wait for all registered components to call lockstep_progress()
	 * Note: only 1 thread can call this
	 */
	void wait_for_components();

private:

	px4_sem_t _components_sem;

	std::atomic_int _components_used_bitset{0};
	std::atomic_int _components_progress_bitset{0};
};",0,587 2000 123 777 58 2000 40 41 59 126 2000 40 41 59 306 704 2001 40 41 59 865 2002 40 704 2003 41 59 306 865 2004 40 704 2003 41 59 306 865 2005 40 41 59 773 58 2006 2007 59 2008 321 2009 2010 123 1500 125 59 2008 321 2009 2011 123 1500 125 59 125 59 ,"{'AvgLine': 13, 'CountLine': 110, 'CountStmt': 42, 'MaxNesting': 3, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 34, 'MaxEssential': 5, 'SumEssential': 10, 'AvgCyclomatic': 3, 'CountLineCode': 73, 'CountStmtDecl': 15, 'MaxCyclomatic': 6, 'SumCyclomatic': 18, 'AltAvgLineCode': 9, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 73, 'CountLineCodeExe': 58, 'CountLineComment': 21, 'AltAvgLineComment': 1, 'AltCountLineBlank': 17, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.29', 'AltCountLineComment': 21, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 38, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
118127,C++,"class DPS310_SPI : public device::SPI
{
public:
	DPS310_SPI(uint8_t bus, uint32_t device, int bus_frequency, spi_mode_e spi_mode);
	virtual ~DPS310_SPI() = default;

	virtual int	read(unsigned address, void *data, unsigned count);
	virtual int	write(unsigned address, void *data, unsigned count);

};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 2003 2004 44 2005 2001 44 704 2006 44 2007 2008 41 59 864 126 2000 40 41 61 613 59 864 704 2009 40 856 2010 44 865 42 2011 44 856 2012 41 59 864 704 2013 40 856 2010 44 865 42 2011 44 856 2012 41 59 125 59 ,"{'AvgLine': 11, 'CountLine': 42, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 34, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117727,C++,"class FXOS8701CQ_I2C : public device::I2C
{
public:
	FXOS8701CQ_I2C(int bus, int bus_frequency, int i2c_address);
	~FXOS8701CQ_I2C() override = default;

	/**
	 * Read directly from the device.
	 *
	 * The actual size of each unit quantity is device-specific.
	 *
	 * @param reg	The register address at which to start reading
	 * @param data	The buffer into which the read values should be placed.
	 * @param count	The number of items to read.
	 * @return		The number of items read on success, negative errno otherwise.
	 */
	int	read(unsigned reg, void *data, unsigned count) override;

	/**
	 * Write directly to the device.
	 *
	 * The actual size of each unit quantity is device-specific.
	 *
	 * @param reg	The register address at which to start writing.
	 * @param data	The buffer from which values should be read.
	 * @param count	The number of items to write.
	 * @return		The number of items written on success, negative errno otherwise.
	 */
	int	write(unsigned reg, void *data, unsigned count) override;

	/**
	 * Read a register from the device.
	 *
	 * @param		The register to read.
	 * @return		The value that was read.
	 */
	uint8_t read_reg(unsigned reg) override;

	/**
	 * Write a register in the device.
	 *
	 * @param reg		The register to write.
	 * @param value		The new value to write.
	 * @return		OK on success, negative errno otherwise.
	 */
	int write_reg(unsigned reg, uint8_t value) override;

protected:
	int probe() override;
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 704 2004 44 704 2005 41 59 126 2000 40 41 2006 61 613 59 306 704 2007 40 856 2008 44 865 42 2009 44 856 2010 41 2006 59 306 704 2011 40 856 2008 44 865 42 2009 44 856 2010 41 2006 59 306 2012 2013 40 856 2008 41 2006 59 306 704 2014 40 856 2008 44 2012 2015 41 2006 59 775 58 704 2016 40 41 2006 59 125 59 ,"{'AvgLine': 10, 'CountLine': 112, 'CountStmt': 26, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 54, 'CountStmtDecl': 14, 'MaxCyclomatic': 2, 'SumCyclomatic': 8, 'AltAvgLineCode': 7, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 54, 'CountLineCodeExe': 18, 'CountLineComment': 43, 'AltAvgLineComment': 1, 'AltCountLineBlank': 15, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.80', 'AltCountLineComment': 43, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117731,C++,"class MavlinkStreamHILStateQuaternion : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamHILStateQuaternion(mavlink); }

	static constexpr const char *get_name_static() { return ""HIL_STATE_QUATERNION""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_HIL_STATE_QUATERNION; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		if (_att_sub.advertised() || _gpos_sub.advertised()) {
			return MAVLINK_MSG_ID_HIL_STATE_QUATERNION_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		}

		return 0;
	}

private:
	explicit MavlinkStreamHILStateQuaternion(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _angular_velocity_sub{ORB_ID(vehicle_angular_velocity_groundtruth)};
	uORB::Subscription _att_sub{ORB_ID(vehicle_attitude_groundtruth)};
	uORB::Subscription _gpos_sub{ORB_ID(vehicle_global_position_groundtruth)};
	uORB::Subscription _lpos_sub{ORB_ID(vehicle_local_position_groundtruth)};

	bool send() override
	{
		if (_angular_velocity_sub.updated() || _att_sub.updated() || _gpos_sub.updated() || _lpos_sub.updated()) {
			vehicle_attitude_s att{};
			_att_sub.copy(&att);

			vehicle_global_position_s gpos{};
			_gpos_sub.copy(&gpos);

			vehicle_local_position_s lpos{};
			_lpos_sub.copy(&lpos);

			vehicle_angular_velocity_s angular_velocity{};
			_angular_velocity_sub.copy(&angular_velocity);

			mavlink_hil_state_quaternion_t msg{};

			// vehicle_attitude -> hil_state_quaternion
			msg.attitude_quaternion[0] = att.q[0];
			msg.attitude_quaternion[1] = att.q[1];
			msg.attitude_quaternion[2] = att.q[2];
			msg.attitude_quaternion[3] = att.q[3];
			msg.rollspeed = angular_velocity.xyz[0];
			msg.pitchspeed = angular_velocity.xyz[1];
			msg.yawspeed = angular_velocity.xyz[2];

			// vehicle_global_position -> hil_state_quaternion
			// same units as defined in mavlink/common.xml
			msg.lat = gpos.lat * 1e7;
			msg.lon = gpos.lon * 1e7;
			msg.alt = gpos.alt * 1e3f;
			msg.vx = lpos.vx * 1e2f;
			msg.vy = lpos.vy * 1e2f;
			msg.vz = lpos.vz * 1e2f;
			msg.ind_airspeed = 0;
			msg.true_airspeed = 0;
			msg.xacc = lpos.ax;
			msg.yacc = lpos.ay;
			msg.zacc = lpos.az;

			mavlink_msg_hil_state_quaternion_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 688 40 2013 46 2014 40 41 309 2015 46 2014 40 41 41 123 792 2016 43 2017 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2018 321 2019 2020 123 2021 40 2022 41 125 59 2018 321 2019 2023 123 2024 40 2025 41 125 59 2018 321 2019 2026 123 2027 40 2028 41 125 59 2018 321 2019 2029 123 2030 40 2031 41 125 59 569 2032 40 41 2010 123 688 40 2020 46 2033 40 41 309 2023 46 2033 40 41 309 2026 46 2033 40 41 309 2029 46 2033 40 41 41 123 2034 2035 123 125 59 2023 46 2036 40 38 2035 41 59 2037 2038 123 125 59 2026 46 2036 40 38 2038 41 59 2039 2040 123 125 59 2029 46 2036 40 38 2040 41 59 2041 2042 123 125 59 2020 46 2036 40 38 2042 41 59 2043 2044 123 125 59 330 2044 46 2045 91 1500 93 61 2035 46 2046 91 1500 93 59 2044 46 2045 91 1501 93 61 2035 46 2046 91 1501 93 59 2044 46 2045 91 1502 93 61 2035 46 2046 91 1502 93 59 2044 46 2045 91 1502 93 61 2035 46 2046 91 1502 93 59 2044 46 2047 61 2042 46 2048 91 1500 93 59 2044 46 2049 61 2042 46 2048 91 1501 93 59 2044 46 2050 61 2042 46 2048 91 1502 93 59 330 330 2044 46 2051 61 2038 46 2051 42 1508 59 2044 46 2052 61 2038 46 2052 42 1508 59 2044 46 2053 61 2038 46 2053 42 1504 59 2044 46 2054 61 2040 46 2054 42 1503 59 2044 46 2055 61 2040 46 2055 42 1503 59 2044 46 2056 61 2040 46 2056 42 1503 59 2044 46 2057 61 1500 59 2044 46 2058 61 1500 59 2044 46 2059 61 2040 46 2060 59 2044 46 2061 61 2040 46 2062 59 2044 46 2063 61 2040 46 2064 59 2065 40 2066 354 2067 40 41 44 38 2044 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 76, 'CountStmt': 24, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 57, 'CountStmtDecl': 17, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 57, 'CountLineCodeExe': 6, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118260,C++,"class UavcanHeartbeatSubscriber : public UavcanBaseSubscriber
{
public:
	UavcanHeartbeatSubscriber(CanardInstance &ins) :
		UavcanBaseSubscriber(ins, """", ""Heartbeat"", 0) { };

	void subscribe() override
	{
		// Subscribe to heartbeat messages
		canardRxSubscribe(&_canard_instance,
				  CanardTransferKindMessage,
				  uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,  // The fixed Subject-ID
				  uavcan_node_Heartbeat_1_0_EXTENT_BYTES_,
				  CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
				  &_subj_sub._canard_sub);

	};

	void callback(const CanardTransfer &receive) override
	{
		//TODO heartbeat management
	};

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 41 58 2001 40 2003 44 362 44 362 44 1500 41 123 125 59 865 2004 40 41 2005 123 330 2006 40 38 2007 44 2008 44 2009 44 330 2010 44 2011 44 38 2012 46 2013 41 59 125 59 865 2014 40 601 2015 38 2016 41 2005 123 330 125 59 125 59 ,"{'AvgLine': 5, 'CountLine': 24, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 4, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 18, 'CountLineCodeExe': 0, 'CountLineComment': 3, 'AltAvgLineComment': 1, 'AltCountLineBlank': 4, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.17', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117752,C++,"class MavlinkStreamSystemTime : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamSystemTime(mavlink); }

	static constexpr const char *get_name_static() { return ""SYSTEM_TIME""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_SYSTEM_TIME; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return MAVLINK_MSG_ID_SYSTEM_TIME_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
	}

private:
	explicit MavlinkStreamSystemTime(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	bool send() override
	{
		timespec tv;
		px4_clock_gettime(CLOCK_REALTIME, &tv);

		mavlink_system_time_t msg{};
		msg.time_boot_ms = hrt_absolute_time() / 1000;
		msg.time_unix_usec = (uint64_t)tv.tv_sec * 1000000 + tv.tv_nsec / 1000;

		// If the time is before 2001-01-01, it's probably the default 2000
		// and we don't need to bother sending it because it's definitely wrong.
		if (msg.time_unix_usec > 978307200000000) {
			mavlink_msg_system_time_send_struct(_mavlink->get_channel(), &msg);
			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 43 2014 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 569 2015 40 41 2010 123 2016 2017 59 2018 40 2019 44 38 2017 41 59 2020 2021 123 125 59 2021 46 2022 61 2023 40 41 47 1504 59 2021 46 2024 61 40 2025 41 2017 46 2026 42 1507 43 2017 46 2027 47 1504 59 330 330 688 40 2021 46 2024 62 1516 41 123 2028 40 2029 354 2030 40 41 44 38 2021 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 38, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 28, 'CountLineCodeExe': 9, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117762,C++,"class PCA9685 : public device::I2C
{
public:
	PCA9685(int bus, int addr);

	int Stop();

	/*
	 * outputs formatted to us.
	 */
	int updatePWM(const uint16_t *outputs, unsigned num_outputs);

	int setFreq(float freq);

	~PCA9685() override = default;

	int initReg();

	inline float getFrequency() {return _Freq;}

	/*
	 * disable all of the output
	 */
	void disableAllOutput();

	/*
	* turn off oscillator
	*/
	void stopOscillator();

	/*
	 * turn on oscillator
	 */
	void startOscillator();

	/*
	 * turn on output
	 */
	void triggerRestart();

protected:
	int probe() override;

#ifdef PCA9685_CLOCL_EXT
	static const uint8_t DEFAULT_MODE1_CFG = 0x70;  // Auto-Increment, Sleep, EXTCLK
#else
	static const uint8_t DEFAULT_MODE1_CFG = 0x30;  // Auto-Increment, Sleep
#endif
	static const uint8_t DEFAULT_MODE2_CFG = 0x04;  // totem pole

	float _Freq = PWM_DEFAULT_FREQUENCY;

	/**
	 * set PWM value for a channel[0,15].
	 * value should be range of 0-4095
	 */
	void setPWM(uint8_t channel, const uint16_t &value);

	/**
	 * set all PWMs in a single I2C transmission.
	 * value should be range of 0-4095
	 */
	void setPWM(uint8_t channel_count, const uint16_t *value);

	/*
	 * set clock divider
	 */
	void setDivider(uint8_t value);

private:

};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 704 2004 41 59 704 2005 40 41 59 305 704 2006 40 601 2007 42 2008 44 856 2009 41 59 704 2010 40 660 2011 41 59 126 2000 40 41 2012 61 613 59 704 2013 40 41 59 700 660 2014 40 41 123 792 2015 59 125 305 865 2016 40 41 59 305 865 2017 40 41 59 305 865 2018 40 41 59 305 865 2019 40 41 59 775 58 704 2020 40 41 2012 59 35 689 2021 809 601 2022 2023 61 1504 59 330 35 630 809 601 2022 2023 61 1503 59 330 35 636 809 601 2022 2024 61 1502 59 330 660 2025 61 2026 59 306 865 2027 40 2022 2028 44 601 2007 38 2029 41 59 306 865 2027 40 2022 2030 44 601 2007 42 2029 41 59 305 865 2031 40 2022 2029 41 59 773 58 125 59 ,"{'AvgLine': 14, 'CountLine': 279, 'CountStmt': 124, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 91, 'MaxEssential': 4, 'SumEssential': 21, 'AvgCyclomatic': 2, 'CountLineCode': 190, 'CountStmtDecl': 39, 'MaxCyclomatic': 7, 'SumCyclomatic': 38, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 55, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 15, 'AltCountLineCode': 194, 'CountLineCodeExe': 77, 'CountLineComment': 40, 'AltAvgLineComment': 0, 'AltCountLineBlank': 55, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 39, 'CountLineInactive': 1, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.21', 'AltCountLineComment': 41, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 38, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 38, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 16, 'CountDeclMethodProtected': 4, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
117900,C++,"template<typename Type>
class SlewRate
{
public:
	SlewRate() = default;
	~SlewRate() = default;

	/**
	 * Set maximum rate of change for the value
	 * @param slew_rate maximum rate of change
	 */
	void setSlewRate(const Type slew_rate) { _slew_rate = slew_rate; }

	/**
	 * Set value ignoring slew rate for initialization purpose
	 * @param value new applied value
	 */
	void setForcedValue(const Type value) { _value = value; }

	/**
	 * Get value from last update of the slew rate
	 * @return current value the slew rate is at
	 */
	Type getState() const { return _value; }

	/**
	 * Update slewrate
	 * @param new_value desired new value
	 * @param deltatime time in seconds since last update
	 * @return actual value that complies with the slew rate
	 */
	Type update(const Type new_value, const float deltatime)
	{
		// Limit the rate of change of the value
		const Type dvalue_desired = new_value - _value;
		const Type dvalue_max = _slew_rate * deltatime;
		const Type dvalue = math::constrain(dvalue_desired, -dvalue_max, dvalue_max);
		_value += dvalue;
		return _value;
	}

protected:
	Type _slew_rate{}; ///< maximum rate of change for the value
	Type _value{}; ///< state to keep last value of the slew rate
};",0,822 60 835 2000 62 587 2001 123 777 58 2001 40 41 61 613 59 126 2001 40 41 61 613 59 306 865 2002 40 601 2000 2003 41 123 2004 61 2003 59 125 306 865 2005 40 601 2000 2006 41 123 2007 61 2006 59 125 306 2000 2008 40 41 601 123 792 2009 59 125 306 2000 2010 40 601 2000 2011 44 601 660 2012 41 123 330 601 2000 2013 61 2011 45 2014 59 601 2000 2015 61 2016 42 2012 59 601 2000 2017 61 2018 321 2019 40 2013 44 45 2015 44 2015 41 59 2014 348 2017 59 792 2014 59 125 775 58 2000 2020 123 125 59 331 2000 2021 123 125 59 331 125 59 ,"{'AvgLine': 3, 'CountLine': 44, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 20, 'CountLineCodeExe': 8, 'CountLineComment': 21, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '1.05', 'AltCountLineComment': 21, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 58, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
117907,C++,"class FakeGeofence : public Geofence
{
public:
	FakeGeofence() :
		Geofence(nullptr)
	{};

	virtual ~FakeGeofence() {};

	bool isInsidePolygonOrCircle(double lat, double lon, float altitude) override
	{
		switch (_probe_function_behavior) {
		case ProbeFunction::ALL_POINTS_OUTSIDE: {
				return _allPointsOutside(lat, lon, altitude);
			}

		case ProbeFunction::LEFT_INSIDE_RIGHT_OUTSIDE: {
				return _left_inside_right_outside(lat, lon, altitude);
			}

		case ProbeFunction::RIGHT_INSIDE_LEFT_OUTSIDE: {
				return _right_inside_left_outside(lat, lon, altitude);
			}

		case ProbeFunction::GF_BOUNDARY_20M_AHEAD: {
				return _gf_boundary_is_20m_north(lat, lon, altitude);
			}

		default:
			return _allPointsOutside(lat, lon, altitude);
		}
	}

	enum class ProbeFunction {
		ALL_POINTS_OUTSIDE = 0,
		LEFT_INSIDE_RIGHT_OUTSIDE,
		RIGHT_INSIDE_LEFT_OUTSIDE,
		GF_BOUNDARY_20M_AHEAD
	};

	void setProbeFunctionBehavior(ProbeFunction func) {_probe_function_behavior = func;}


private:

	ProbeFunction _probe_function_behavior = ProbeFunction::ALL_POINTS_OUTSIDE;

	bool _flag_on_left = true;
	bool _flag_on_right = false;

	bool _allPointsOutside(double lat, double lon, float alt)
	{
		return false;
	}

	bool _left_inside_right_outside(double lat, double lon, float alt)
	{
		if (_flag_on_left) {
			_flag_on_left = false;
			return true;

		} else {
			return false;
		}
	}

	bool _right_inside_left_outside(double lat, double lon, float alt)
	{
		if (_flag_on_right) {
			_flag_on_right = false;
			return true;

		} else {
			_flag_on_right = true;
			return false;
		}
	}

	bool _gf_boundary_is_20m_north(double lat, double lon, float alt)
	{
		matrix::Vector2<double> home_global(42.1, 8.2);

		MapProjection projection{home_global(0), home_global(1)};
		matrix::Vector2f waypoint_local = projection.project(lat, lon);

		if (waypoint_local(0) >= 20.0f) {
			return false;
		}

		return true;
	}
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 58 2001 40 753 41 123 125 59 864 126 2000 40 41 123 125 59 569 2002 40 625 2003 44 625 2004 44 660 2005 41 2006 123 819 40 2007 41 123 579 2008 321 2009 58 123 792 2010 40 2003 44 2004 44 2005 41 59 125 579 2008 321 2011 58 123 792 2012 40 2003 44 2004 44 2005 41 59 125 579 2008 321 2013 58 123 792 2014 40 2003 44 2004 44 2005 41 59 125 579 2008 321 2015 58 123 792 2016 40 2003 44 2004 44 2005 41 59 125 613 58 792 2017 40 2003 44 2004 44 2005 41 59 125 125 640 587 2018 123 2019 61 1500 44 2020 44 2021 44 2022 125 59 865 2023 40 2018 2024 41 123 2025 61 2024 59 125 773 58 2018 2026 61 2018 321 2027 59 569 2028 61 829 59 569 2029 61 655 59 569 2030 40 625 2003 44 625 2004 44 660 2031 41 123 792 655 59 125 569 2032 40 625 2003 44 625 2004 44 660 2031 41 123 688 40 2028 41 123 2028 61 655 59 792 829 59 125 630 123 792 655 59 125 125 569 2033 40 625 2003 44 625 2004 44 660 2031 41 123 688 40 2029 41 123 2029 61 655 59 792 829 59 125 630 123 2029 61 829 59 792 655 59 125 125 569 2034 40 625 2003 44 625 2004 44 660 2031 41 123 2035 321 2036 60 625 62 2037 40 1503 44 1502 41 59 2038 2039 123 2037 40 1500 41 44 2037 40 1501 41 125 59 2035 321 2040 2041 61 2039 46 2042 40 2003 44 2004 41 59 688 40 2041 40 1500 41 325 1503 41 123 792 655 59 125 792 829 59 125 125 59 ,"{'AvgLine': 8, 'CountLine': 86, 'CountStmt': 40, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 25, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 65, 'CountStmtDecl': 15, 'MaxCyclomatic': 5, 'SumCyclomatic': 15, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 65, 'CountLineCodeExe': 27, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 49, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 86, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
117915,C++,"class BusEvent : uavcan::Noncopyable
{
	using SignalCallbackHandler = void(*)();

	SignalCallbackHandler signal_cb_{nullptr};
	sem_t sem_;
public:

	BusEvent(CanDriver &can_driver);
	~BusEvent();

	void registerSignalCallback(SignalCallbackHandler handler) { signal_cb_ = handler; }

	bool wait(uavcan::MonotonicDuration duration);

	void signalFromInterrupt();
};",0,587 2000 58 2001 321 2002 123 860 2003 61 865 40 42 41 40 41 59 2003 2004 123 753 125 59 2005 2006 59 777 58 2000 40 2007 38 2008 41 59 126 2000 40 41 59 865 2009 40 2003 2010 41 123 2004 61 2010 59 125 569 2011 40 2001 321 2012 2013 41 59 865 2014 40 41 59 125 59 ,"{'AvgLine': 9, 'CountLine': 62, 'CountStmt': 25, 'MaxNesting': 3, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 13, 'MaxEssential': 4, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 50, 'CountStmtDecl': 12, 'MaxCyclomatic': 4, 'SumCyclomatic': 10, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 50, 'CountLineCodeExe': 13, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118247,C++,"class ITCBP001TA
{
public:
	virtual ~ITCBP001TA() = default;

	virtual int init() = 0;

	// read reg value
	virtual uint8_t get_reg(uint8_t addr) = 0;

	// write reg value
	virtual int set_reg(uint8_t value, uint8_t addr) = 0;

	// bulk read of data into buffer, return same pointer
	virtual tcbp001ta::data_s *get_data(uint8_t addr) = 0;

	// bulk read of calibration data into buffer, return same pointer
	virtual tcbp001ta::calibration_s *get_calibration(uint8_t addr) = 0;

	virtual uint32_t get_device_id() const = 0;

};",0,587 2000 123 777 58 864 126 2000 40 41 61 613 59 864 704 2001 40 41 61 1500 59 330 864 2002 2003 40 2002 2004 41 61 1500 59 330 864 704 2005 40 2002 2006 44 2002 2004 41 61 1500 59 330 864 2007 321 2008 42 2009 40 2002 2004 41 61 1500 59 330 864 2007 321 2010 42 2011 40 2002 2004 41 61 1500 59 864 2012 2013 40 41 601 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 21, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 10, 'CountStmtDecl': 6, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 10, 'CountLineCodeExe': 0, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 1, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.40', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117925,C++,"class MavlinkStreamActuatorOutputStatus : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamActuatorOutputStatus(mavlink); }

	static constexpr const char *get_name_static() { return ""ACTUATOR_OUTPUT_STATUS""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_ACTUATOR_OUTPUT_STATUS; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _act_output_sub.advertised() ? (MAVLINK_MSG_ID_ACTUATOR_OUTPUT_STATUS_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES) : 0;
	}

private:
	explicit MavlinkStreamActuatorOutputStatus(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _act_output_sub{ORB_ID(actuator_outputs)};

	bool send() override
	{
		actuator_outputs_s act;

		if (_act_output_sub.update(&act)) {
			mavlink_actuator_output_status_t msg{};

			msg.time_usec = act.timestamp;
			msg.active = act.noutputs;

			static size_t actuator_outputs_size = act.noutputs;
			static constexpr size_t mavlink_actuator_output_status_size = sizeof(msg.actuator) / sizeof(msg.actuator[0]);

			for (unsigned i = 0; i < math::min(actuator_outputs_size, mavlink_actuator_output_status_size); i++) {
				msg.actuator[i] = act.output[i];
			}

			mavlink_msg_actuator_output_status_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 40 2015 43 2016 41 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 59 2027 46 2030 61 2024 46 2031 59 809 2032 2033 61 2024 46 2031 59 809 603 2032 2034 61 805 40 2027 46 2035 41 47 805 40 2027 46 2035 91 1500 93 41 59 664 40 856 2036 61 1500 59 2036 60 2037 321 2038 40 2033 44 2034 41 59 2036 349 41 123 2027 46 2035 91 2036 93 61 2024 46 2039 91 2036 93 59 125 2040 40 2041 354 2042 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 46, 'CountStmt': 20, 'MaxNesting': 2, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 14, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 33, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118362,C++,"template <unsigned RxQueueCapacity = 128>
class CanInitHelper
{
	CanRxItem queue_storage_[UAVCAN_STM32H7_NUM_IFACES][RxQueueCapacity];

public:
	enum { BitRateAutoDetect = 0 };

	CanDriver driver;
	uint32_t enabledInterfaces_;

	CanInitHelper(const uavcan::uint32_t EnabledInterfaces = 0x7) :
		driver(queue_storage_),
		enabledInterfaces_(EnabledInterfaces)
	{ }

	/**
	 * This overload simply configures the provided bitrate.
	 * Auto bit rate detection will not be performed.
	 * Bitrate value must be positive.
	 * @return  Negative value on error; non-negative on success. Refer to constants Err*.
	 */
	int init(uavcan::uint32_t bitrate)
	{
		return driver.init(bitrate, CanIface::NormalMode, enabledInterfaces_);
	}

	/**
	 * This function can either initialize the driver at a fixed bit rate, or it can perform
	 * automatic bit rate detection. For theory please refer to the CiA application note #801.
	 *
	 * @param delay_callable    A callable entity that suspends execution for strictly more than one second.
	 *                          The callable entity will be invoked without arguments.
	 *                          @ref getRecommendedListeningDelay().
	 *
	 * @param inout_bitrate     Fixed bit rate or zero. Zero invokes the bit rate detection process.
	 *                          If auto detection was used, the function will update the argument
	 *                          with established bit rate. In case of an error the value will be undefined.
	 *
	 * @return                  Negative value on error; non-negative on success. Refer to constants Err*.
	 */
	template <typename DelayCallable>
	int init(DelayCallable delay_callable, uavcan::uint32_t &inout_bitrate = BitRateAutoDetect)
	{
		if (inout_bitrate > 0) {
			return driver.init(inout_bitrate, CanIface::NormalMode, enabledInterfaces_);

		} else {
			static const uavcan::uint32_t StandardBitRates[] = {
				1000000,
				500000,
				250000,
				125000
			};

			for (uavcan::uint8_t br = 0; br < sizeof(StandardBitRates) / sizeof(StandardBitRates[0]); br++) {
				inout_bitrate = StandardBitRates[br];

				const int res = driver.init(inout_bitrate, CanIface::SilentMode, enabledInterfaces_);

				delay_callable();

				if (res >= 0) {
					for (uavcan::uint8_t iface = 0; iface < driver.getNumIfaces(); iface++) {
						if (!driver.getIface(iface)->isRxBufferEmpty()) {
							// Re-initializing in normal mode
							return driver.init(inout_bitrate, CanIface::NormalMode, enabledInterfaces_);
						}
					}
				}
			}

			return -ErrBitRateNotDetected;
		}
	}

	/**
	 * Use this value for listening delay during automatic bit rate detection.
	 */
	static uavcan::MonotonicDuration getRecommendedListeningDelay()
	{
		return uavcan::MonotonicDuration::fromMSec(1050);
	}
};",0,822 60 856 2000 61 1504 62 587 2001 123 2002 2003 91 2004 93 91 2000 93 59 777 58 640 123 2005 61 1500 125 59 2006 2007 59 2008 2009 59 2001 40 601 2010 321 2008 2011 61 1502 41 58 2007 40 2003 41 44 2009 40 2011 41 123 125 306 704 2012 40 2010 321 2008 2013 41 123 792 2007 46 2012 40 2013 44 2014 321 2015 44 2009 41 59 125 306 822 60 835 2016 62 704 2012 40 2016 2017 44 2010 321 2008 38 2018 61 2019 41 123 688 40 2018 62 1500 41 123 792 2007 46 2012 40 2018 44 2020 321 2021 44 2009 41 59 125 630 123 809 601 2010 321 2008 2022 91 93 61 123 1507 44 1507 44 1507 44 1507 125 59 664 40 2010 321 2023 2024 61 1500 59 2024 60 805 40 2022 41 47 805 40 2022 91 1500 93 41 59 2024 349 41 123 2018 61 2022 91 2024 93 59 601 704 2025 61 2007 46 2012 40 2018 44 2026 321 2027 44 2009 41 59 2017 40 41 59 688 40 2025 325 1500 41 123 664 40 2010 321 2023 2028 61 1500 59 2028 60 2007 46 2029 40 41 59 2028 349 41 123 688 40 33 2007 46 2030 40 2028 41 354 2031 40 41 41 123 330 792 2007 46 2012 40 2018 44 2026 321 2032 44 2009 41 59 125 125 125 125 792 45 2033 59 125 125 306 809 2010 321 2034 2035 40 41 123 792 2010 321 2034 321 2036 40 1505 41 59 125 125 59 ,"{'AvgLine': 11, 'CountLine': 82, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 46, 'CountLineCodeExe': 3, 'CountLineComment': 24, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.52', 'AltCountLineComment': 24, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117954,C++,"class MavlinkStreamEfiStatus : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamEfiStatus(mavlink); }

	static constexpr const char *get_name_static() { return ""EFI_STATUS""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_EFI_STATUS; }

	const char *get_name() const override { return MavlinkStreamEfiStatus::get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _internal_combustion_engine_status_sub.advertised() ? MAVLINK_MSG_ID_EFI_STATUS + MAVLINK_NUM_NON_PAYLOAD_BYTES :
		       0;
	}

private:
	explicit MavlinkStreamEfiStatus(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _internal_combustion_engine_status_sub{ORB_ID(internal_combustion_engine_status)};

	bool send() override
	{
		internal_combustion_engine_status_s internal_combustion_engine_status;

		if (_internal_combustion_engine_status_sub.update(&internal_combustion_engine_status)) {
			mavlink_efi_status_t msg{};

			msg.health = internal_combustion_engine_status.state;
			msg.ecu_index = internal_combustion_engine_status.ecu_index;
			msg.rpm = internal_combustion_engine_status.engine_speed_rpm;
			msg.fuel_consumed = internal_combustion_engine_status.estimated_consumed_fuel_volume_cm3;
			msg.fuel_flow = internal_combustion_engine_status.fuel_consumption_rate_cm3pm;
			msg.engine_load = internal_combustion_engine_status.engine_load_percent;
			msg.throttle_position = internal_combustion_engine_status.throttle_position_percent;
			msg.spark_dwell_time = internal_combustion_engine_status.spark_dwell_time_ms;
			msg.barometric_pressure = internal_combustion_engine_status.atmospheric_pressure_kpa;
			msg.intake_manifold_pressure = internal_combustion_engine_status.intake_manifold_pressure_kpa;
			msg.intake_manifold_temperature = internal_combustion_engine_status.intake_manifold_temperature;

			msg.cylinder_head_temperature = internal_combustion_engine_status.cylinder_head_temperature;
			msg.ignition_timing = internal_combustion_engine_status.ignition_timing_deg;
			msg.injection_time = internal_combustion_engine_status.injection_time_ms;
			msg.exhaust_gas_temperature = internal_combustion_engine_status.exhaust_gas_temperature;
			msg.throttle_out = internal_combustion_engine_status.throttle_position_percent;
			msg.pt_compensation = internal_combustion_engine_status.lambda_coefficient;

			mavlink_msg_efi_status_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2000 321 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 59 2027 46 2030 61 2024 46 2030 59 2027 46 2031 61 2024 46 2032 59 2027 46 2033 61 2024 46 2034 59 2027 46 2035 61 2024 46 2036 59 2027 46 2037 61 2024 46 2038 59 2027 46 2039 61 2024 46 2040 59 2027 46 2041 61 2024 46 2042 59 2027 46 2043 61 2024 46 2044 59 2027 46 2045 61 2024 46 2046 59 2027 46 2047 61 2024 46 2047 59 2027 46 2048 61 2024 46 2048 59 2027 46 2049 61 2024 46 2050 59 2027 46 2051 61 2024 46 2052 59 2027 46 2053 61 2024 46 2053 59 2027 46 2054 61 2024 46 2040 59 2027 46 2055 61 2024 46 2056 59 2057 40 2058 354 2059 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 56, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 44, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117960,C++,"class ECL_PitchController :
	public ECL_Controller
{
public:
	ECL_PitchController() = default;
	~ECL_PitchController() = default;

	float control_attitude(const float dt, const ECL_ControlData &ctl_data) override;
	float control_euler_rate(const float dt, const ECL_ControlData &ctl_data, float bodyrate_ff) override;
	float control_bodyrate(const float dt, const ECL_ControlData &ctl_data) override;

	/* Additional Setters */
	void set_max_rate_pos(float max_rate_pos)
	{
		_max_rate = max_rate_pos;
	}

	void set_max_rate_neg(float max_rate_neg)
	{
		_max_rate_neg = max_rate_neg;
	}

	void set_bodyrate_setpoint(float rate)
	{
		_bodyrate_setpoint = math::constrain(rate, -_max_rate_neg, _max_rate);
	}

protected:
	float _max_rate_neg{0.0f};
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 126 2000 40 41 61 613 59 660 2002 40 601 660 2003 44 601 2004 38 2005 41 2006 59 660 2007 40 601 660 2003 44 601 2004 38 2005 44 660 2008 41 2006 59 660 2009 40 601 660 2003 44 601 2004 38 2005 41 2006 59 305 865 2010 40 660 2011 41 123 2012 61 2011 59 125 865 2013 40 660 2014 41 123 2015 61 2014 59 125 865 2016 40 660 2017 41 123 2018 61 2019 321 2020 40 2017 44 45 2021 44 2022 41 59 125 775 58 660 2023 123 1500 125 59 125 59 ,"{'AvgLine': 14, 'CountLine': 105, 'CountStmt': 30, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 21, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 69, 'CountStmtDecl': 9, 'MaxCyclomatic': 5, 'SumCyclomatic': 11, 'AltAvgLineCode': 9, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 20, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 8, 'AltCountLineCode': 69, 'CountLineCodeExe': 36, 'CountLineComment': 16, 'AltAvgLineComment': 2, 'AltCountLineBlank': 20, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 26, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.23', 'AltCountLineComment': 16, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 13, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
118002,C++,"class ResetLoggingChecker
{
public:
	ResetLoggingChecker(std::shared_ptr<Ekf> ekf) : _ekf(ekf) {}

	// call immediately before state reset
	void capturePreResetState();

	// call immediately after state reset
	void capturePostResetState();

	bool isVelocityDeltaLoggedCorrectly(float accuracy);

	bool isHorizontalVelocityResetCounterIncreasedBy(int offset);

	bool isVerticalVelocityResetCounterIncreasedBy(int offset);

	bool isPositionDeltaLoggedCorrectly(float accuracy);

	bool isHorizontalPositionResetCounterIncreasedBy(int offset);

	bool isVerticalPositionResetCounterIncreasedBy(int offset);

private:
	std::shared_ptr<Ekf> _ekf;

	Vector3f velocity_before_reset;
	Vector3f position_before_reset;
	int horz_vel_reset_counter_before_reset;
	int vert_vel_reset_counter_before_reset;
	int horz_pos_reset_counter_before_reset;
	int vert_pos_reset_counter_before_reset;

	Vector3f velocity_after_reset;
	Vector3f position_after_reset;
	int horz_vel_reset_counter_after_reset;
	int vert_vel_reset_counter_after_reset;
	int horz_pos_reset_counter_after_reset;
	int vert_pos_reset_counter_after_reset;

	Vector3f logged_delta_velocity;
	Vector3f logged_delta_position;
};",0,587 2000 123 777 58 2000 40 2001 321 2002 60 2003 62 2004 41 58 2005 40 2004 41 123 125 330 865 2006 40 41 59 330 865 2007 40 41 59 569 2008 40 660 2009 41 59 569 2010 40 704 2011 41 59 569 2012 40 704 2011 41 59 569 2013 40 660 2009 41 59 569 2014 40 704 2011 41 59 569 2015 40 704 2011 41 59 773 58 2001 321 2002 60 2003 62 2005 59 2016 2017 59 2016 2018 59 704 2019 59 704 2020 59 704 2021 59 704 2022 59 2016 2023 59 2016 2024 59 704 2025 59 704 2026 59 704 2027 59 704 2028 59 2016 2029 59 2016 2030 59 125 59 ,"{'AvgLine': 8, 'CountLine': 121, 'CountStmt': 64, 'MaxNesting': 0, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 34, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 103, 'CountStmtDecl': 32, 'MaxCyclomatic': 1, 'SumCyclomatic': 9, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 103, 'CountLineCodeExe': 46, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 20, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 15, 'CountDeclInstanceVariablePublic': 7, 'CountDeclInstanceVariablePrivate': 8, 'CountDeclInstanceVariableProtected': 0}"
117943,C++,"	class LogFileBuffer
	{
	public:
		LogFileBuffer(size_t log_buffer_size, perf_counter_t perf_write, perf_counter_t perf_fsync);

		~LogFileBuffer();

		bool start_log(const char *filename);

		void close_file();

		size_t get_read_ptr(void **ptr, bool *is_part);

		/**
		 * Write to the buffer but assuming there is enough space
		 */
		inline void write_no_check(void *ptr, size_t size);

		size_t available() const { return _buffer_size - _count; }

		int fd() const { return _fd; }

		inline ssize_t write_to_file(const void *buffer, size_t size, bool call_fsync) const;

		inline void fsync() const;

		void mark_read(size_t n) { _count -= n; _total_written += n; }

		size_t total_written() const { return _total_written; }
		size_t buffer_size() const { return _buffer_size; }
		size_t count() const { return _count; }

		bool _should_run = false;
	private:
		const size_t _buffer_size;
		int	_fd = -1;
		uint8_t *_buffer = nullptr;
		size_t _head = 0; ///< next position to write to
		size_t _count = 0; ///< number of bytes in _buffer to be written
		size_t _total_written = 0;
		perf_counter_t _perf_write;
		perf_counter_t _perf_fsync;
	};",0,587 2000 123 777 58 2000 40 2001 2002 44 2003 2004 44 2003 2005 41 59 126 2000 40 41 59 569 2006 40 601 582 42 2007 41 59 865 2008 40 41 59 2001 2009 40 865 42 42 2010 44 569 42 2011 41 59 306 700 865 2012 40 865 42 2010 44 2001 2013 41 59 2001 2014 40 41 601 123 792 2015 45 2016 59 125 704 2017 40 41 601 123 792 2018 59 125 700 2019 2020 40 601 865 42 2021 44 2001 2013 44 569 2022 41 601 59 700 865 2023 40 41 601 59 865 2024 40 2001 2025 41 123 2026 337 2025 59 2027 348 2025 59 125 2001 2028 40 41 601 123 792 2029 59 125 2001 2030 40 41 601 123 792 2031 59 125 2001 2032 40 41 601 123 792 2033 59 125 569 2034 61 655 59 773 58 601 2001 2035 59 704 2036 61 45 1501 59 2037 42 2038 61 753 59 2001 2039 61 1500 59 331 2001 2040 61 1500 59 331 2001 2041 61 1500 59 2003 2042 59 2003 2043 59 125 59 ,"{'AvgLine': 8, 'CountLine': 162, 'CountStmt': 89, 'MaxNesting': 3, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 59, 'MaxEssential': 4, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 123, 'CountStmtDecl': 32, 'MaxCyclomatic': 6, 'SumCyclomatic': 27, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 32, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 14, 'AltCountLineCode': 123, 'CountLineCodeExe': 62, 'CountLineComment': 11, 'AltAvgLineComment': 0, 'AltCountLineBlank': 32, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 27, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 14, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 72, 'SumCyclomaticModified': 27, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 9, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 8, 'CountDeclInstanceVariableProtected': 0}"
117961,C++,"class AnalogBattery : public Battery
{
public:
	AnalogBattery(int index, ModuleParams *parent, const int sample_interval_us, const uint8_t source,
		      const uint8_t priority);

	/**
	 * Update current battery status message.
	 *
	 * @param voltage_raw Battery voltage read from ADC, volts
	 * @param current_raw Voltage of current sense resistor, volts
	 * @param timestamp Time at which the ADC was read (use hrt_absolute_time())
	 * @param source The source as defined by param BAT%d_SOURCE
	 * @param priority: The brick number -1. The term priority refers to the Vn connection on the LTC4417
	 */
	void updateBatteryStatusADC(hrt_abstime timestamp, float voltage_raw, float current_raw);

	/**
	 * Whether the ADC channel for the voltage of this battery is valid.
	 * Corresponds to BOARD_BRICK_VALID_LIST
	 */
	bool is_valid();

	/**
	 * Which ADC channel is used for voltage reading of this battery
	 */
	int get_voltage_channel();

	/**
	 * Which ADC channel is used for current reading of this battery
	 */
	int get_current_channel();

protected:

	struct {
		param_t v_offs_cur;
		param_t v_div;
		param_t a_per_v;
		param_t v_channel;
		param_t i_channel;
	} _analog_param_handles;

	struct {
		float v_offs_cur;
		float v_div;
		float a_per_v;
		int32_t v_channel;
		int32_t i_channel;
	} _analog_params;

	virtual void updateParams() override;
};",0,587 2000 58 777 2001 123 777 58 2000 40 704 2002 44 2003 42 2004 44 601 704 2005 44 601 2006 2007 44 601 2006 2008 41 59 306 865 2009 40 2010 2011 44 660 2012 44 660 2013 41 59 306 569 2014 40 41 59 306 704 2015 40 41 59 306 704 2016 40 41 59 775 58 816 123 2017 2018 59 2017 2019 59 2017 2020 59 2017 2021 59 2017 2022 59 125 2023 59 816 123 660 2024 59 660 2025 59 660 2026 59 2027 2028 59 2027 2029 59 125 2030 59 864 865 2031 40 41 2032 59 125 59 ,"{'AvgLine': 14, 'CountLine': 139, 'CountStmt': 60, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 34, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 93, 'CountStmtDecl': 27, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 20, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 6, 'AltCountLineCode': 97, 'CountLineCodeExe': 41, 'CountLineComment': 21, 'AltAvgLineComment': 0, 'AltCountLineBlank': 20, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 2, 'CountDeclMethodAll': 34, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.23', 'AltCountLineComment': 22, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 68, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
117974,C++,"class MavlinkStreamVibration : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamVibration(mavlink); }

	static constexpr const char *get_name_static() { return ""VIBRATION""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_VIBRATION; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		if (_sensor_selection_sub.advertised() && _vehicle_imu_status_subs.advertised()) {
			return MAVLINK_MSG_ID_VIBRATION_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		}

		return 0;
	}

private:
	explicit MavlinkStreamVibration(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _sensor_selection_sub{ORB_ID(sensor_selection)};
	uORB::SubscriptionMultiArray<vehicle_imu_status_s, 3> _vehicle_imu_status_subs{ORB_ID::vehicle_imu_status};

	bool send() override
	{
		if (_vehicle_imu_status_subs.updated()) {
			mavlink_vibration_t msg{};
			msg.time_usec = hrt_absolute_time();

			// VIBRATION usage not to mavlink spec, this is our current usage.
			//  vibration_x : Primary gyro delta angle coning metric = filtered length of (delta_angle x prev_delta_angle)
			//  vibration_y : Primary gyro high frequency vibe = filtered length of (delta_angle - prev_delta_angle)
			//  vibration_z : Primary accel high frequency vibe = filtered length of (delta_velocity - prev_delta_velocity)

			sensor_selection_s sensor_selection{};
			_sensor_selection_sub.copy(&sensor_selection);

			// primary accel high frequency vibration metric
			if (sensor_selection.accel_device_id != 0) {
				for (auto &x : _vehicle_imu_status_subs) {
					vehicle_imu_status_s status;

					if (x.copy(&status)) {
						if (status.accel_device_id == sensor_selection.accel_device_id) {
							msg.vibration_x = status.gyro_coning_vibration;
							msg.vibration_y = status.gyro_vibration_metric;
							msg.vibration_z = status.accel_vibration_metric;
							break;
						}
					}
				}
			}

			// accel 0, 1, 2 cumulative clipping
			for (int i = 0; i < math::min(static_cast<uint8_t>(3), _vehicle_imu_status_subs.size()); i++) {
				vehicle_imu_status_s status;

				if (_vehicle_imu_status_subs[i].copy(&status)) {

					const uint32_t clipping = status.accel_clipping[0] + status.accel_clipping[1] + status.accel_clipping[2];

					switch (i) {
					case 0:
						msg.clipping_0 = clipping;
						break;

					case 1:
						msg.clipping_1 = clipping;
						break;

					case 2:
						msg.clipping_2 = clipping;
						break;
					}
				}
			}

			mavlink_msg_vibration_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 688 40 2013 46 2014 40 41 307 2015 46 2014 40 41 41 123 792 2016 43 2017 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2018 321 2019 2020 123 2021 40 2022 41 125 59 2018 321 2023 60 2024 44 1502 62 2025 123 2026 321 2027 125 59 569 2028 40 41 2010 123 688 40 2025 46 2029 40 41 41 123 2030 2031 123 125 59 2031 46 2032 61 2033 40 41 59 330 330 330 330 2034 2035 123 125 59 2020 46 2036 40 38 2035 41 59 330 688 40 2035 46 2037 340 1500 41 123 664 40 561 38 2038 58 2025 41 123 2024 2039 59 688 40 2038 46 2036 40 38 2039 41 41 123 688 40 2039 46 2037 323 2035 46 2037 41 123 2031 46 2040 61 2039 46 2041 59 2031 46 2042 61 2039 46 2043 59 2031 46 2044 61 2039 46 2045 59 572 59 125 125 125 125 330 664 40 704 2046 61 1500 59 2046 60 2047 321 2048 40 811 60 2049 62 40 1502 41 44 2025 46 2050 40 41 41 59 2046 349 41 123 2024 2051 59 688 40 2025 91 2046 93 46 2036 40 38 2051 41 41 123 601 2052 2053 61 2051 46 2054 91 1500 93 43 2051 46 2054 91 1501 93 43 2051 46 2054 91 1502 93 59 819 40 2046 41 123 579 1500 58 2031 46 2055 61 2053 59 572 59 579 1501 58 2031 46 2056 61 2053 59 572 59 579 1502 58 2031 46 2057 61 2053 59 572 59 125 125 125 2058 40 2059 354 2060 40 41 44 38 2031 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 9, 'CountLine': 88, 'CountStmt': 25, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 62, 'CountStmtDecl': 17, 'MaxCyclomatic': 3, 'SumCyclomatic': 11, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 20, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 62, 'CountLineCodeExe': 6, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 20, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118133,C++,"class AttitudeControl
{
public:
	AttitudeControl() = default;
	~AttitudeControl() = default;

	/**
	 * Set proportional attitude control gain
	 * @param proportional_gain 3D vector containing gains for roll, pitch, yaw
	 * @param yaw_weight A fraction [0,1] deprioritizing yaw compared to roll and pitch
	 */
	void setProportionalGain(const matrix::Vector3f &proportional_gain, const float yaw_weight);

	/**
	 * Set hard limit for output rate setpoints
	 * @param rate_limit [rad/s] 3D vector containing limits for roll, pitch, yaw
	 */
	void setRateLimit(const matrix::Vector3f &rate_limit) { _rate_limit = rate_limit; }

	/**
	 * Set a new attitude setpoint replacing the one tracked before
	 * @param qd desired vehicle attitude setpoint
	 * @param yawspeed_setpoint [rad/s] yaw feed forward angular rate in world frame
	 */
	void setAttitudeSetpoint(const matrix::Quatf &qd, const float yawspeed_setpoint) { _attitude_setpoint_q = qd; _attitude_setpoint_q.normalize(); _yawspeed_setpoint = yawspeed_setpoint; }

	/**
	 * Adjust last known attitude setpoint by a delta rotation
	 * Optional use to avoid glitches when attitude estimate reference e.g. heading changes.
	 * @param q_delta delta rotation to apply
	 */
	void adaptAttitudeSetpoint(const matrix::Quatf &q_delta) { _attitude_setpoint_q = q_delta * _attitude_setpoint_q; }

	/**
	 * Run one control loop cycle calculation
	 * @param q estimation of the current vehicle attitude unit quaternion
	 * @return [rad/s] body frame 3D angular rate setpoint vector to be executed by the rate controller
	 */
	matrix::Vector3f update(const matrix::Quatf &q) const;

private:
	matrix::Vector3f _proportional_gain;
	matrix::Vector3f _rate_limit;
	float _yaw_w{0.f}; ///< yaw weight [0,1] to deprioritize caompared to roll and pitch

	matrix::Quatf _attitude_setpoint_q; ///< latest known attitude setpoint e.g. from position control
	float _yawspeed_setpoint{0.f}; ///< latest known yawspeed feed-forward setpoint
};",0,587 2000 123 777 58 2000 40 41 61 613 59 126 2000 40 41 61 613 59 306 865 2001 40 601 2002 321 2003 38 2004 44 601 660 2005 41 59 306 865 2006 40 601 2002 321 2003 38 2007 41 123 2008 61 2007 59 125 306 865 2009 40 601 2002 321 2010 38 2011 44 601 660 2012 41 123 2013 61 2011 59 2013 46 2014 40 41 59 2015 61 2012 59 125 306 865 2016 40 601 2002 321 2010 38 2017 41 123 2018 61 2017 42 2018 59 125 306 2002 321 2003 2019 40 601 2002 321 2010 38 2020 41 601 59 773 58 2002 321 2003 2021 59 2002 321 2003 2022 59 660 2023 123 1500 125 59 331 2002 321 2010 2024 59 331 660 2025 123 1500 125 59 331 125 59 ,"{'AvgLine': 13, 'CountLine': 114, 'CountStmt': 40, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 30, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 52, 'CountStmtDecl': 19, 'MaxCyclomatic': 4, 'SumCyclomatic': 9, 'AltAvgLineCode': 7, 'AvgLineComment': 4, 'CountClassBase': 0, 'CountLineBlank': 18, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 7, 'AltCountLineCode': 52, 'CountLineCodeExe': 28, 'CountLineComment': 47, 'AltAvgLineComment': 4, 'AltCountLineBlank': 18, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.90', 'AltCountLineComment': 47, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 68, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
117988,C++,"class MovingDiff
{
public:
	float update(float value, float dt_s)
	{
		if (!PX4_ISFINITE(value) || (dt_s < FLT_EPSILON)) {
			// Ignore NAN
			return NAN;
		}

		_difference_filter.setParameters(dt_s, .1f);

		// Leave _diff at 0.0f if we don't have a _last_value yet.
		if (PX4_ISFINITE(_last_value)) {
			const float new_diff = (value - _last_value) / dt_s;
			_difference_filter.update(new_diff);
		}

		_last_value = value;
		return _difference_filter.getState();
	}

	void reset()
	{
		_difference_filter.reset(0.f);
		_last_value = NAN;
	}

private:
	AlphaFilter<float> _difference_filter;
	float _last_value{NAN};
};",0,587 2000 123 777 58 660 2001 40 660 2002 44 660 2003 41 123 688 40 33 2004 40 2002 41 309 40 2003 60 2005 41 41 123 330 792 2006 59 125 2007 46 2008 40 2003 44 1500 41 59 330 688 40 2004 40 2009 41 41 123 601 660 2010 61 40 2002 45 2009 41 47 2003 59 2007 46 2001 40 2010 41 59 125 2009 61 2002 59 792 2007 46 2011 40 41 59 125 865 2012 40 41 123 2013 46 2012 40 1500 41 59 2014 61 2015 59 125 773 58 2016 60 660 62 2017 59 660 2018 123 2019 125 59 125 59 ,"{'AvgLine': 11, 'CountLine': 32, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 25, 'CountStmtDecl': 5, 'MaxCyclomatic': 3, 'SumCyclomatic': 4, 'AltAvgLineCode': 9, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 2, 'AltCountLineCode': 25, 'CountLineCodeExe': 9, 'CountLineComment': 2, 'AltAvgLineComment': 1, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
117989,C++,"class MavlinkStreamGimbalDeviceSetAttitude : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamGimbalDeviceSetAttitude(mavlink); }

	static constexpr const char *get_name_static() { return ""GIMBAL_DEVICE_SET_ATTITUDE""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_GIMBAL_DEVICE_SET_ATTITUDE; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		if (_gimbal_device_set_attitude_sub.advertised()) {
			return (MAVLINK_MSG_ID_GIMBAL_DEVICE_SET_ATTITUDE_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES);
		}

		return 0;
	}

private:
	explicit MavlinkStreamGimbalDeviceSetAttitude(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _gimbal_device_set_attitude_sub{ORB_ID(gimbal_device_set_attitude)};

	bool send() override
	{
		gimbal_device_set_attitude_s gimbal_device_set_attitude;

		if (_gimbal_device_set_attitude_sub.advertised() && _gimbal_device_set_attitude_sub.copy(&gimbal_device_set_attitude)) {
			mavlink_gimbal_device_set_attitude_t msg{};

			msg.target_system = gimbal_device_set_attitude.target_system;
			msg.target_component = gimbal_device_set_attitude.target_component;

			msg.flags = gimbal_device_set_attitude.flags;

			msg.q[0] = gimbal_device_set_attitude.q[0];
			msg.q[1] = gimbal_device_set_attitude.q[1];
			msg.q[2] = gimbal_device_set_attitude.q[2];
			msg.q[3] = gimbal_device_set_attitude.q[3];

			msg.angular_velocity_x = gimbal_device_set_attitude.angular_velocity_x;
			msg.angular_velocity_y = gimbal_device_set_attitude.angular_velocity_y;
			msg.angular_velocity_z = gimbal_device_set_attitude.angular_velocity_z;

			mavlink_msg_gimbal_device_set_attitude_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 688 40 2013 46 2014 40 41 41 123 792 40 2015 43 2016 41 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 41 307 2019 46 2026 40 38 2024 41 41 123 2027 2028 123 125 59 2028 46 2029 61 2024 46 2029 59 2028 46 2030 61 2024 46 2030 59 2028 46 2031 61 2024 46 2031 59 2028 46 2032 91 1500 93 61 2024 46 2032 91 1500 93 59 2028 46 2032 91 1501 93 61 2024 46 2032 91 1501 93 59 2028 46 2032 91 1502 93 61 2024 46 2032 91 1502 93 59 2028 46 2032 91 1502 93 61 2024 46 2032 91 1502 93 59 2028 46 2033 61 2024 46 2033 59 2028 46 2034 61 2024 46 2034 59 2028 46 2035 61 2024 46 2035 59 2036 40 2037 354 2038 40 41 44 38 2028 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 54, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 39, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 39, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118014,C++,"class Loiter : public MissionBlock, public ModuleParams
{
public:
	Loiter(Navigator *navigator);
	~Loiter() = default;

	void on_inactive() override;
	void on_activation() override;
	void on_active() override;

private:
	/**
	 * Use the stored reposition location of the navigator
	 * to move to a new location.
	 */
	void reposition();

	/**
	 * Set the position to hold based on the current local position
	 */
	void set_loiter_position();

	bool _loiter_pos_set{false};
};",0,587 2000 58 777 2001 44 777 2002 123 777 58 2000 40 2003 42 2004 41 59 126 2000 40 41 61 613 59 865 2005 40 41 2006 59 865 2007 40 41 2006 59 865 2008 40 41 2006 59 773 58 306 865 2009 40 41 59 306 865 2010 40 41 59 569 2011 123 655 125 59 125 59 ,"{'AvgLine': 18, 'CountLine': 132, 'CountStmt': 37, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 30, 'MaxEssential': 3, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 94, 'CountStmtDecl': 10, 'MaxCyclomatic': 5, 'SumCyclomatic': 15, 'AltAvgLineCode': 13, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 22, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 7, 'AltCountLineCode': 94, 'CountLineCodeExe': 26, 'CountLineComment': 16, 'AltAvgLineComment': 1, 'AltCountLineBlank': 22, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 47, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.17', 'AltCountLineComment': 16, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118019,C++,"class TrajectoryConstraintsTest : public ::testing::Test
{
public:
	VehicleDynamicLimits config;

	Vector3f vehicle_location;
	Vector3f target;
	Vector3f next_target;

	float final_speed = 0;

	void SetUp() override
	{
		config.z_accept_rad = 1.f;
		config.xy_accept_rad = 0.99f;

		config.max_acc_xy = 3.f;
		config.max_jerk = 10.f;

		config.max_speed_xy = 10.f;

		config.max_acc_xy_radius_scale = 0.8f;

		/*
		 *             (20,20)
		 *              Next target
		 *
		 *              ^
		 *              |
		 *
		 * (10,10)      (20,10)
		 * Vehicle  ->  Target
		 *
		 */
		vehicle_location = Vector3f(10, 10, 5);
		target = Vector3f(20, 10, 5);
		next_target = Vector3f(20, 20, 5);
	}
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2003 2004 59 2005 2006 59 2005 2007 59 2005 2008 59 660 2009 61 1500 59 865 2010 40 41 2011 123 2004 46 2012 61 1501 59 2004 46 2013 61 1500 59 2004 46 2014 61 1502 59 2004 46 2015 61 1502 59 2004 46 2016 61 1502 59 2004 46 2017 61 1500 59 305 2006 61 2005 40 1502 44 1502 44 1502 41 59 2007 61 2005 40 1503 44 1502 44 1502 41 59 2008 61 2005 40 1503 44 1503 44 1502 41 59 125 125 59 ,"{'AvgLine': 27, 'CountLine': 39, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 12, 'AvgLineComment': 11, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 1, 'AltCountLineCode': 21, 'CountLineCodeExe': 6, 'CountLineComment': 11, 'AltAvgLineComment': 11, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.52', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118021,C++,"class InputTest : public InputBase
{
public:

	/**
	 * set to a fixed angle
	 */
	InputTest(float roll_deg, float pitch_deg, float yaw_deg);
	virtual ~InputTest() {}

	/** check whether the test finished, and thus the main thread can quit */
	bool finished();

	virtual int update(unsigned int timeout_ms, ControlData **control_data, bool already_active);

protected:
	virtual int update_impl(unsigned int timeout_ms, ControlData **control_data, bool already_active) { return 0; } //not needed

	virtual int initialize();

	virtual void print_status();

private:
	float _angles[3]; /**< desired angles in [deg] */
};",0,587 2000 58 777 2001 123 777 58 306 2000 40 660 2002 44 660 2003 44 660 2004 41 59 864 126 2000 40 41 123 125 306 569 2005 40 41 59 864 704 2006 40 856 704 2007 44 2008 42 42 2009 44 569 2010 41 59 775 58 864 704 2011 40 856 704 2007 44 2008 42 42 2009 44 569 2010 41 123 792 1500 59 125 330 864 704 2012 40 41 59 864 865 2013 40 41 59 773 58 660 2014 91 1502 93 59 306 125 59 ,"{'AvgLine': 6, 'CountLine': 65, 'CountStmt': 25, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 48, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 8, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 48, 'CountLineCodeExe': 19, 'CountLineComment': 8, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.17', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118142,C++,"class UavcanAccessResponse : public UavcanBaseSubscriber
{
public:
	UavcanAccessResponse(CanardInstance &ins, UavcanParamManager &pmgr) :
		UavcanBaseSubscriber(ins, """", ""Access"", 0),  _param_manager(pmgr) { };

	void subscribe() override
	{
		// Subscribe to requests uavcan.pnp.NodeIDAllocationData
		canardRxSubscribe(&_canard_instance,
				  CanardTransferKindRequest,
				  uavcan_register_Access_1_0_FIXED_PORT_ID_,
				  uavcan_register_Access_Response_1_0_EXTENT_BYTES_,
				  CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
				  &_subj_sub._canard_sub);

	};

	void callback(const CanardTransfer &receive) override
	{
		PX4_INFO(""Access request"");

		uavcan_register_Access_Request_1_0 msg;
		uavcan_register_Access_Request_1_0_initialize_(&msg);

		size_t register_in_size_bits = receive.payload_size;
		uavcan_register_Access_Request_1_0_deserialize_(&msg, (const uint8_t *)receive.payload, &register_in_size_bits);

		int result {0};

		uavcan_register_Value_1_0 value = msg.value;
		uavcan_register_Name_1_0 name = msg.name;

		/// TODO: get/set parameter based on whether empty or not
		if (uavcan_register_Value_1_0_is_empty_(&value)) { // Tag Type: uavcan_primitive_Empty_1_0
			// Value is empty -- 'Get' only
			result = _param_manager.GetParamByName(name, value) ? 0 : -1;

		} else {
			// Set value
			result = _param_manager.SetParamByName(name, value) ? 0 : -1;

		}

		/// TODO: Access_Response
		uavcan_register_Access_Response_1_0 response {};
		response.value = value;

		uint8_t response_payload_buffer[uavcan_register_Access_Response_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_];

		CanardTransfer transfer = {
			.timestamp_usec = hrt_absolute_time() + PUBLISHER_DEFAULT_TIMEOUT_USEC,
			.priority       = CanardPriorityNominal,
			.transfer_kind  = CanardTransferKindResponse,
			.port_id        = uavcan_register_Access_1_0_FIXED_PORT_ID_,                // This is the subject-ID.
			.remote_node_id = receive.remote_node_id,       // Messages cannot be unicast, so use UNSET.
			.transfer_id    = receive.transfer_id,
			.payload_size   = uavcan_register_Access_Response_1_0_SERIALIZATION_BUFFER_SIZE_BYTES_,
			.payload        = &response_payload_buffer,
		};

		result = uavcan_register_Access_Response_1_0_serialize_(&response, response_payload_buffer, &transfer.payload_size);

		if (result == 0) {
			// set the data ready in the buffer and chop if needed
			result = canardTxPush(&_canard_instance, &transfer);
		}

		//return result;

	};

private:
	UavcanParamManager &_param_manager;

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 38 2003 44 2004 38 2005 41 58 2001 40 2003 44 362 44 362 44 1500 41 44 2006 40 2005 41 123 125 59 865 2007 40 41 2008 123 330 2009 40 38 2010 44 2011 44 2012 44 2013 44 2014 44 38 2015 46 2016 41 59 125 59 865 2017 40 601 2018 38 2019 41 2008 123 2020 40 362 41 59 2021 2022 59 2023 40 38 2022 41 59 2024 2025 61 2019 46 2026 59 2027 40 38 2022 44 40 601 2028 42 41 2019 46 2029 44 38 2025 41 59 704 2030 123 1500 125 59 2031 2032 61 2022 46 2032 59 2033 2034 61 2022 46 2034 59 331 688 40 2035 40 38 2032 41 41 123 330 330 2030 61 2006 46 2036 40 2034 44 2032 41 63 1500 58 45 1501 59 125 630 123 330 2030 61 2006 46 2037 40 2034 44 2032 41 63 1500 58 45 1501 59 125 331 2038 2039 123 125 59 2039 46 2032 61 2032 59 2028 2040 91 2041 93 59 2018 2042 61 123 46 2043 61 2044 40 41 43 2045 44 46 2046 61 2047 44 46 2048 61 2049 44 46 2050 61 2051 44 330 46 2052 61 2019 46 2052 44 330 46 2053 61 2019 46 2053 44 46 2026 61 2041 44 46 2029 61 38 2040 44 125 59 2030 61 2054 40 38 2039 44 2040 44 38 2042 46 2026 41 59 688 40 2030 323 1500 41 123 330 2030 61 2055 40 38 2056 44 38 2042 41 59 125 330 125 59 773 58 2004 38 2006 59 125 59 ,"{'AvgLine': 22, 'CountLine': 76, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 5, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 50, 'CountStmtDecl': 13, 'MaxCyclomatic': 4, 'SumCyclomatic': 6, 'AltAvgLineCode': 14, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 19, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 5, 'CountDeclMethod': 3, 'AltCountLineCode': 50, 'CountLineCodeExe': 4, 'CountLineComment': 10, 'AltAvgLineComment': 3, 'AltCountLineBlank': 19, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118053,C++,"class MavlinkStreamVFRHUD : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamVFRHUD(mavlink); }

	static constexpr const char *get_name_static() { return ""VFR_HUD""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_VFR_HUD; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		if (_lpos_sub.advertised() || _airspeed_validated_sub.advertised()) {
			return MAVLINK_MSG_ID_VFR_HUD_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		}

		return 0;
	}

private:
	explicit MavlinkStreamVFRHUD(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _lpos_sub{ORB_ID(vehicle_local_position)};
	uORB::Subscription _armed_sub{ORB_ID(actuator_armed)};
	uORB::Subscription _act0_sub{ORB_ID(actuator_controls_0)};
	uORB::Subscription _act1_sub{ORB_ID(actuator_controls_1)};
	uORB::Subscription _airspeed_validated_sub{ORB_ID(airspeed_validated)};
	uORB::Subscription _air_data_sub{ORB_ID(vehicle_air_data)};

	bool send() override
	{
		if (_lpos_sub.updated() || _airspeed_validated_sub.updated()) {

			vehicle_local_position_s lpos{};
			_lpos_sub.copy(&lpos);

			actuator_armed_s armed{};
			_armed_sub.copy(&armed);

			airspeed_validated_s airspeed_validated{};
			_airspeed_validated_sub.copy(&airspeed_validated);

			mavlink_vfr_hud_t msg{};
			msg.airspeed = airspeed_validated.calibrated_airspeed_m_s;
			msg.groundspeed = sqrtf(lpos.vx * lpos.vx + lpos.vy * lpos.vy);
			msg.heading = math::degrees(matrix::wrap_2pi(lpos.heading));

			if (armed.armed) {
				actuator_controls_s act0{};
				actuator_controls_s act1{};
				_act0_sub.copy(&act0);
				_act1_sub.copy(&act1);

				// VFR_HUD throttle should only be used for operator feedback.
				// VTOLs switch between actuator_controls_0 and actuator_controls_1. During transition there isn't a
				// a single throttle value, but this should still be a useful heuristic for operator awareness.
				//
				// Use ACTUATOR_CONTROL_TARGET if accurate states are needed.
				msg.throttle = 100 * math::max(
						       act0.control[actuator_controls_s::INDEX_THROTTLE],
						       act1.control[actuator_controls_s::INDEX_THROTTLE]);

			} else {
				msg.throttle = 0.0f;
			}

			if (lpos.z_valid && lpos.z_global) {
				/* use local position estimate */
				msg.alt = -lpos.z + lpos.ref_alt;

			} else {
				vehicle_air_data_s air_data{};
				_air_data_sub.copy(&air_data);

				/* fall back to baro altitude */
				if (air_data.timestamp > 0) {
					msg.alt = air_data.baro_alt_meter;
				}
			}

			if (lpos.v_z_valid) {
				msg.climb = -lpos.vz;
			}

			mavlink_msg_vfr_hud_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 688 40 2013 46 2014 40 41 309 2015 46 2014 40 41 41 123 792 2016 43 2017 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2018 321 2019 2020 123 2021 40 2022 41 125 59 2018 321 2019 2023 123 2024 40 2025 41 125 59 2018 321 2019 2026 123 2027 40 2028 41 125 59 2018 321 2019 2029 123 2030 40 2031 41 125 59 2018 321 2019 2032 123 2033 40 2034 41 125 59 2018 321 2019 2035 123 2036 40 2037 41 125 59 569 2038 40 41 2010 123 688 40 2020 46 2039 40 41 309 2032 46 2039 40 41 41 123 2040 2041 123 125 59 2020 46 2042 40 38 2041 41 59 2043 2044 123 125 59 2023 46 2042 40 38 2044 41 59 2045 2046 123 125 59 2032 46 2042 40 38 2046 41 59 2047 2048 123 125 59 2048 46 2049 61 2046 46 2050 59 2048 46 2051 61 2052 40 2041 46 2053 42 2041 46 2053 43 2041 46 2054 42 2041 46 2054 41 59 2048 46 2055 61 2056 321 2057 40 2058 321 2059 40 2041 46 2055 41 41 59 688 40 2044 46 2044 41 123 2060 2061 123 125 59 2060 2062 123 125 59 2026 46 2042 40 38 2061 41 59 2029 46 2042 40 38 2062 41 59 330 330 330 330 330 2048 46 2063 61 1503 42 2056 321 2064 40 2061 46 2065 91 2060 321 2066 93 44 2062 46 2065 91 2060 321 2066 93 41 59 125 630 123 2048 46 2067 61 1500 59 125 688 40 2041 46 2068 307 2041 46 2069 41 123 305 2048 46 2070 61 45 2041 46 2071 43 2041 46 2072 59 125 630 123 2073 2074 123 125 59 2035 46 2042 40 38 2074 41 59 305 688 40 2074 46 2075 62 1500 41 123 2048 46 2076 61 2074 46 2077 59 125 125 688 40 2041 46 2078 41 123 2048 46 2079 61 45 2041 46 2080 59 125 2081 40 2082 354 2083 40 41 44 38 2048 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 9, 'CountLine': 93, 'CountStmt': 32, 'MaxNesting': 3, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 65, 'CountStmtDecl': 21, 'MaxCyclomatic': 6, 'SumCyclomatic': 14, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 65, 'CountLineCodeExe': 8, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118050,C++,"class FunctionManualRC : public FunctionProviderBase
{
public:
	FunctionManualRC();
	static FunctionProviderBase *allocate(const Context &context) { return new FunctionManualRC(); }

	void update() override;
	float value(OutputFunction func) override { return _data[(int)func - (int)OutputFunction::RC_Roll]; }

private:
	static constexpr int num_data_points = 11;

	static_assert(num_data_points == (int)OutputFunction::RC_AUXMax - (int)OutputFunction::RC_Roll + 1,
		      ""number of functions mismatch"");

	uORB::Subscription _topic{ORB_ID(manual_control_setpoint)};
	float _data[num_data_points];
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 809 2001 42 2002 40 601 2003 38 2004 41 123 792 744 2000 40 41 59 125 865 2005 40 41 2006 59 660 2007 40 2008 2009 41 2006 123 792 2010 91 40 704 41 2009 45 40 704 41 2008 321 2011 93 59 125 773 58 809 603 704 2012 61 1503 59 810 40 2012 323 40 704 41 2008 321 2013 45 40 704 41 2008 321 2014 43 1501 44 362 41 59 2015 321 2016 2017 123 2018 40 2019 41 125 59 660 2020 91 2012 93 59 125 59 ,"{'AvgLine': 6, 'CountLine': 42, 'CountStmt': 12, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 37, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 6, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 37, 'CountLineCodeExe': 2, 'CountLineComment': 4, 'AltAvgLineComment': 1, 'AltCountLineBlank': 5, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118211,C++,"class IRLOCK : public device::I2C, public I2CSPIDriver<IRLOCK>
{
public:
	IRLOCK(const I2CSPIDriverConfig &config);
	~IRLOCK() override = default;

	static void print_usage();

	int init() override;
	int probe() override;
	void print_status() override;

	/** read from device and schedule next read **/
	void		RunImpl();
private:

	/** low level communication with sensor **/
	int 		read_device();
	bool 		sync_device();
	int 		read_device_word(uint16_t *word);
	int 		read_device_block(struct irlock_target_s *block);

	/** internal variables **/
	uint32_t _read_failures{0};

	uORB::Publication<irlock_report_s> _irlock_report_topic{ORB_ID(irlock_report)};
};",0,587 2000 58 777 2001 321 2002 44 777 2003 60 2000 62 123 777 58 2000 40 601 2004 38 2005 41 59 126 2000 40 41 2006 61 613 59 809 865 2007 40 41 59 704 2008 40 41 2006 59 704 2009 40 41 2006 59 865 2010 40 41 2006 59 306 865 2011 40 41 59 773 58 306 704 2012 40 41 59 569 2013 40 41 59 704 2014 40 2015 42 2016 41 59 704 2017 40 816 2018 42 2019 41 59 306 2020 2021 123 1500 125 59 2022 321 2023 60 2024 62 2025 123 2026 40 2027 41 125 59 125 59 ,"{'AvgLine': 14, 'CountLine': 170, 'CountStmt': 75, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 44, 'MaxEssential': 5, 'SumEssential': 17, 'AvgCyclomatic': 2, 'CountLineCode': 129, 'CountStmtDecl': 28, 'MaxCyclomatic': 5, 'SumCyclomatic': 22, 'AltAvgLineCode': 11, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 27, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 2, 'CountDeclMethod': 11, 'AltCountLineCode': 129, 'CountLineCodeExe': 44, 'CountLineComment': 14, 'AltAvgLineComment': 1, 'AltCountLineBlank': 27, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 27, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 14, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 22, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118151,C++,"class FunctionProviderBase
{
public:
	struct Context {
		px4::WorkItem &work_item;
		bool reversible_motors;
		const float &thrust_factor;
	};

	FunctionProviderBase() = default;
	virtual ~FunctionProviderBase() = default;

	virtual void update() = 0;

	/**
	 * Get the current output value for a given function
	 * @return NAN (=disarmed) or value in range [-1, 1]
	 */
	virtual float value(OutputFunction func) = 0;

	virtual float defaultFailsafeValue(OutputFunction func) const { return NAN; }
	virtual bool allowPrearmControl() const { return true; }

	virtual uORB::SubscriptionCallbackWorkItem *subscriptionCallback() { return nullptr; }

	virtual bool getLatestSampleTimestamp(hrt_abstime &t) const { return false; }
};",0,587 2000 123 777 58 816 2001 123 2002 321 2003 38 2004 59 569 2005 59 601 660 38 2006 59 125 59 2000 40 41 61 613 59 864 126 2000 40 41 61 613 59 864 865 2007 40 41 61 1500 59 306 864 660 2008 40 2009 2010 41 61 1500 59 864 660 2011 40 2009 2010 41 601 123 792 2012 59 125 864 569 2013 40 41 601 123 792 829 59 125 864 2014 321 2015 42 2016 40 41 123 792 753 59 125 864 569 2017 40 2018 38 2019 41 601 123 792 655 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 25, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 15, 'CountLineCodeExe': 3, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 2, 'CountClassDerived': 9, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.27', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118097,C++,"class GHSTTelemetry
{
public:
	/**
	 * @param uart_fd file descriptor for the UART to use. It is expected to be configured
	 * already.
	 */
	explicit GHSTTelemetry(int uart_fd);

	~GHSTTelemetry() = default;

	/**
	 * Send telemetry data. Call this regularly (i.e. at 100Hz), it will automatically
	 * limit the sending rate.
	 * @return true if new data sent
	 */
	bool update(const hrt_abstime &now);

private:
	bool send_battery_status();

	uORB::Subscription _battery_status_sub{ORB_ID(battery_status)};

	int _uart_fd;
	hrt_abstime _last_update {0U};
	uint32_t _next_type {0U};

	static constexpr uint32_t NUM_DATA_TYPES {1U};	// number of different telemetry data types
	static constexpr uint32_t UPDATE_RATE_HZ {10U};	// update rate [Hz]

	// Factors that should be applied to get correct values
	static constexpr float FACTOR_VOLTS_TO_10MV {100.0F};
	static constexpr float FACTOR_AMPS_TO_10MA {100.0F};
	static constexpr float FACTOR_MAH_TO_10MAH {0.1F};

};",0,587 2000 123 777 58 306 648 2000 40 704 2001 41 59 126 2000 40 41 61 613 59 306 569 2002 40 601 2003 38 2004 41 59 773 58 569 2005 40 41 59 2006 321 2007 2008 123 2009 40 2010 41 125 59 704 2011 59 2003 2012 123 1500 125 59 2013 2014 123 1500 125 59 809 603 2013 2015 123 1501 125 59 330 809 603 2013 2016 123 1502 125 59 330 330 809 603 660 2017 123 1503 125 59 809 603 660 2018 123 1503 125 59 809 603 660 2019 123 1500 125 59 125 59 ,"{'AvgLine': 15, 'CountLine': 82, 'CountStmt': 32, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 57, 'CountStmtDecl': 19, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 57, 'CountLineCodeExe': 15, 'CountLineComment': 12, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.21', 'AltCountLineComment': 12, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 88, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 5, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
118112,C++,"class CanardNuttXCDev : public CanardInterface
{
public:
	CanardNuttXCDev() = default;
	~CanardNuttXCDev() override = default;

	/// Creates a SocketCAN socket for corresponding iface can_iface_name
	/// Also sets up the message structures required for socketcanTransmit & socketcanReceive
	/// can_fd determines to use CAN FD frame when is 1, and classical CAN frame when is 0
	/// The return value is 0 on succes and -1 on error
	int init();

	/// Send a CanardFrame to the CanardSocketInstance socket
	/// This function is blocking
	/// The return value is number of bytes transferred, negative value on error.
	int16_t transmit(const CanardFrame &txframe, int timeout_ms = 0);

	/// Receive a CanardFrame from the CanardSocketInstance socket
	/// This function is blocking
	/// The return value is number of bytes received, negative value on error.
	int16_t receive(CanardFrame *rxf);

private:
	int _fd{-1};
	bool _can_fd{false};
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 126 2000 40 41 2002 61 613 59 331 331 331 331 704 2003 40 41 59 331 331 331 2004 2005 40 601 2006 38 2007 44 704 2008 61 1500 41 59 331 331 331 2004 2009 40 2006 42 2010 41 59 773 58 704 2011 123 45 1501 125 59 569 2012 123 655 125 59 125 59 ,"{'AvgLine': 34, 'CountLine': 129, 'CountStmt': 47, 'MaxNesting': 3, 'AvgLineCode': 22, 'AvgEssential': 3, 'AvgLineBlank': 9, 'CountStmtExe': 30, 'MaxEssential': 6, 'SumEssential': 11, 'AvgCyclomatic': 5, 'CountLineCode': 79, 'CountStmtDecl': 18, 'MaxCyclomatic': 6, 'SumCyclomatic': 15, 'AltAvgLineCode': 22, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 32, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 9, 'CountDeclMethod': 5, 'AltCountLineCode': 79, 'CountLineCodeExe': 33, 'CountLineComment': 18, 'AltAvgLineComment': 2, 'AltCountLineBlank': 32, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.23', 'AltCountLineComment': 18, 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 5, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 78, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118128,C++,"class MavlinkStreamLinkNodeStatus : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamLinkNodeStatus(mavlink); }

	static constexpr const char *get_name_static() { return ""LINK_NODE_STATUS""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_LINK_NODE_STATUS; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return MAVLINK_MSG_ID_LINK_NODE_STATUS_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
	}

private:
	explicit MavlinkStreamLinkNodeStatus(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	bool send() override
	{
		if (_mavlink->get_free_tx_buf() >= get_size()) {
			mavlink_link_node_status_t link_node_status{};

			const telemetry_status_s &tstatus = _mavlink->telemetry_status();
			link_node_status.tx_buf = 0; // % TODO
			link_node_status.rx_buf = 0; // % TODO
			link_node_status.tx_rate = tstatus.tx_rate_avg;
			link_node_status.rx_rate = tstatus.rx_rate_avg;
			link_node_status.rx_parse_err = tstatus.rx_parse_errors;
			link_node_status.tx_overflows = tstatus.tx_buffer_overruns;
			link_node_status.rx_overflows = tstatus.rx_buffer_overruns;
			link_node_status.messages_sent = tstatus.tx_message_count;
			link_node_status.messages_received = tstatus.rx_message_count;
			link_node_status.messages_lost = tstatus.rx_message_lost_count;

			link_node_status.timestamp = hrt_absolute_time();

			mavlink_msg_link_node_status_send_struct(_mavlink->get_channel(), &link_node_status);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 43 2014 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 569 2015 40 41 2010 123 688 40 2016 354 2017 40 41 325 2012 40 41 41 123 2018 2019 123 125 59 601 2020 38 2021 61 2016 354 2022 40 41 59 2019 46 2023 61 1500 59 330 2019 46 2024 61 1500 59 330 2019 46 2025 61 2021 46 2026 59 2019 46 2027 61 2021 46 2028 59 2019 46 2029 61 2021 46 2030 59 2019 46 2031 61 2021 46 2032 59 2019 46 2033 61 2021 46 2034 59 2019 46 2035 61 2021 46 2036 59 2019 46 2037 61 2021 46 2038 59 2019 46 2039 61 2021 46 2040 59 2019 46 2041 61 2042 40 41 59 2043 40 2016 354 2044 40 41 44 38 2019 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 46, 'CountStmt': 15, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 36, 'CountLineCodeExe': 6, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118167,C++,"class MavlinkStreamESCStatus : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamESCStatus(mavlink); }

	static constexpr const char *get_name_static() { return ""ESC_STATUS""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_ESC_STATUS; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		static constexpr unsigned size_per_batch = MAVLINK_MSG_ID_ESC_STATUS_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		return _esc_status_sub.advertised() ? size_per_batch * _number_of_batches : 0;
	}

private:
	explicit MavlinkStreamESCStatus(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _esc_status_sub{ORB_ID(esc_status)};
	uint8_t _number_of_batches{0};

	bool send() override
	{
		static constexpr uint8_t batch_size = MAVLINK_MSG_ESC_STATUS_FIELD_RPM_LEN;
		esc_status_s esc_status;

		if (_esc_status_sub.update(&esc_status)) {
			mavlink_esc_status_t msg{};

			msg.time_usec = esc_status.timestamp;

			// Ceil value of integer division. For 1-4 esc => 1 batch, 5-8 esc => 2 batches etc
			_number_of_batches = ceilf((float)esc_status.esc_count / batch_size);

			for (int batch_number = 0; batch_number < _number_of_batches; batch_number++) {
				msg.index = batch_number * batch_size;

				for (int esc_index = 0; esc_index < batch_size ; esc_index++) {
					msg.rpm[esc_index] = esc_status.esc[esc_index].esc_rpm;
					msg.voltage[esc_index] = esc_status.esc[esc_index].esc_voltage;
					msg.current[esc_index] = esc_status.esc[esc_index].esc_current;
				}

				mavlink_msg_esc_status_send_struct(_mavlink->get_channel(), &msg);
			}

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 809 603 856 2013 61 2014 43 2015 59 792 2016 46 2017 40 41 63 2013 42 2018 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2019 321 2020 2021 123 2022 40 2023 41 125 59 2024 2025 123 1500 125 59 569 2026 40 41 2010 123 809 603 2024 2027 61 2028 59 2029 2030 59 688 40 2021 46 2031 40 38 2030 41 41 123 2032 2033 123 125 59 2033 46 2034 61 2030 46 2035 59 330 2025 61 2036 40 40 660 41 2030 46 2037 47 2027 41 59 664 40 704 2038 61 1500 59 2038 60 2025 59 2038 349 41 123 2033 46 2039 61 2038 42 2027 59 664 40 704 2040 61 1500 59 2040 60 2027 59 2040 349 41 123 2033 46 2041 91 2040 93 61 2030 46 2042 91 2040 93 46 2043 59 2033 46 2044 91 2040 93 61 2030 46 2042 91 2040 93 46 2045 59 2033 46 2046 91 2040 93 61 2030 46 2042 91 2040 93 46 2047 59 125 2048 40 2049 354 2050 40 41 44 38 2033 41 59 125 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 54, 'CountStmt': 23, 'MaxNesting': 3, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 39, 'CountStmtDecl': 16, 'MaxCyclomatic': 4, 'SumCyclomatic': 11, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 39, 'CountLineCodeExe': 7, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118187,C++,"class SensorRangeFinderTest : public ::testing::Test
{
public:
	// Setup the Ekf with synthetic measurements
	void SetUp() override
	{
		_range_finder.setPitchOffset(0.f);
		_range_finder.setCosMaxTilt(0.707f);
		_range_finder.setLimits(_min_range, _max_range);
	}

	// Use this method to clean up any memory, network etc. after each test
	void TearDown() override
	{
	}

protected:
	SensorRangeFinder _range_finder{};
	const rangeSample _good_sample{(uint64_t)2e6, 1.f, 100}; // {time_us, range, quality}
	const float _min_range{0.5f};
	const float _max_range{10.f};

	void updateSensorAtRate(uint64_t duration_us, uint64_t dt_update_us, uint64_t dt_sensor_us);
	void testTilt(const Eulerf &euler, bool should_pass);
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 330 865 2003 40 41 2004 123 2005 46 2006 40 1500 41 59 2005 46 2007 40 1500 41 59 2005 46 2008 40 2009 44 2010 41 59 125 330 865 2011 40 41 2004 123 125 775 58 2012 2013 123 125 59 601 2014 2015 123 40 2016 41 1508 44 1501 44 1503 125 59 330 601 660 2017 123 1500 125 59 601 660 2018 123 1502 125 59 865 2019 40 2020 2021 44 2020 2022 44 2020 2023 41 59 865 2024 40 601 2025 38 2026 44 569 2027 41 59 125 59 ,"{'AvgLine': 12, 'CountLine': 64, 'CountStmt': 30, 'MaxNesting': 3, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 19, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 51, 'CountStmtDecl': 13, 'MaxCyclomatic': 4, 'SumCyclomatic': 8, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 51, 'CountLineCodeExe': 20, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 67, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 4}"
118202,C++,"class TestCollisionPrevention : public CollisionPrevention
{
public:
	TestCollisionPrevention() : CollisionPrevention(nullptr) {}
	void paramsChanged() {CollisionPrevention::updateParamsImpl();}
	obstacle_distance_s &getObstacleMap() {return _obstacle_map_body_frame;}
	void test_addDistanceSensorData(distance_sensor_s &distance_sensor, const matrix::Quatf &attitude)
	{
		_addDistanceSensorData(distance_sensor, attitude);
	}
	void test_addObstacleSensorData(const obstacle_distance_s &obstacle, const matrix::Quatf &attitude)
	{
		_addObstacleSensorData(obstacle, attitude);
	}
	void test_adaptSetpointDirection(matrix::Vector2f &setpoint_dir, int &setpoint_index,
					 float vehicle_yaw_angle_rad)
	{
		_adaptSetpointDirection(setpoint_dir, setpoint_index, vehicle_yaw_angle_rad);
	}
	bool test_enterData(int map_index, float sensor_range, float sensor_reading)
	{
		return _enterData(map_index, sensor_range, sensor_reading);
	}
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 58 2001 40 753 41 123 125 865 2002 40 41 123 2001 321 2003 40 41 59 125 2004 38 2005 40 41 123 792 2006 59 125 865 2007 40 2008 38 2009 44 601 2010 321 2011 38 2012 41 123 2013 40 2009 44 2012 41 59 125 865 2014 40 601 2004 38 2015 44 601 2010 321 2011 38 2012 41 123 2016 40 2015 44 2012 41 59 125 865 2017 40 2010 321 2018 38 2019 44 704 38 2020 44 660 2021 41 123 2022 40 2019 44 2020 44 2021 41 59 125 569 2023 40 704 2024 44 660 2025 44 660 2026 41 123 792 2027 40 2024 44 2025 44 2026 41 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 24, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 24, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 2, 'CountClassDerived': 1, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 33, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118222,C++,"class MavlinkStreamGimbalDeviceAttitudeStatus : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamGimbalDeviceAttitudeStatus(mavlink); }

	static constexpr const char *get_name_static() { return ""GIMBAL_DEVICE_ATTITUDE_STATUS""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_GIMBAL_DEVICE_ATTITUDE_STATUS; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		if (_gimbal_device_attitude_status_sub.advertised()) {
			return MAVLINK_MSG_ID_GIMBAL_DEVICE_ATTITUDE_STATUS_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		}

		return 0;
	}

private:
	explicit MavlinkStreamGimbalDeviceAttitudeStatus(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _gimbal_device_attitude_status_sub{ORB_ID(gimbal_device_attitude_status)};

	bool send() override
	{
		gimbal_device_attitude_status_s gimbal_device_attitude_status{};

		if (_gimbal_device_attitude_status_sub.update(&gimbal_device_attitude_status)) {
			mavlink_gimbal_device_attitude_status_t msg{};

			msg.target_system = gimbal_device_attitude_status.target_system;
			msg.target_component = gimbal_device_attitude_status.target_component;

			msg.time_boot_ms = gimbal_device_attitude_status.timestamp / 1000;

			msg.flags = gimbal_device_attitude_status.device_flags;

			msg.q[0] = gimbal_device_attitude_status.q[0];
			msg.q[1] = gimbal_device_attitude_status.q[1];
			msg.q[2] = gimbal_device_attitude_status.q[2];
			msg.q[3] = gimbal_device_attitude_status.q[3];

			msg.angular_velocity_x = gimbal_device_attitude_status.angular_velocity_x;
			msg.angular_velocity_y = gimbal_device_attitude_status.angular_velocity_y;
			msg.angular_velocity_z = gimbal_device_attitude_status.angular_velocity_z;

			msg.failure_flags = gimbal_device_attitude_status.failure_flags;

			mavlink_msg_gimbal_device_attitude_status_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 688 40 2013 46 2014 40 41 41 123 792 2015 43 2016 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 123 125 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2028 59 2027 46 2029 61 2024 46 2029 59 2027 46 2030 61 2024 46 2031 47 1504 59 2027 46 2032 61 2024 46 2033 59 2027 46 2034 91 1500 93 61 2024 46 2034 91 1500 93 59 2027 46 2034 91 1501 93 61 2024 46 2034 91 1501 93 59 2027 46 2034 91 1502 93 61 2024 46 2034 91 1502 93 59 2027 46 2034 91 1502 93 61 2024 46 2034 91 1502 93 59 2027 46 2035 61 2024 46 2035 59 2027 46 2036 61 2024 46 2036 59 2027 46 2037 61 2024 46 2037 59 2027 46 2038 61 2024 46 2038 59 2039 40 2040 354 2041 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 58, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 41, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 41, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 17, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118229,C++,"class StaticTemperature :
	public UavcanPublisherBase,
	public uORB::SubscriptionCallbackWorkItem,
	private uavcan::Publisher<uavcan::equipment::air_data::StaticTemperature>
{
public:
	StaticTemperature(px4::WorkItem *work_item, uavcan::INode &node) :
		UavcanPublisherBase(uavcan::equipment::air_data::StaticTemperature::DefaultDataTypeID),
		uORB::SubscriptionCallbackWorkItem(work_item, ORB_ID(sensor_baro)),
		uavcan::Publisher<uavcan::equipment::air_data::StaticTemperature>(node)
	{
		this->setPriority(uavcan::TransferPriority::MiddleLower);
	}

	void PrintInfo() override
	{
		if (uORB::SubscriptionCallbackWorkItem::advertised()) {
			printf(""\t%s -> %s:%d\n"",
			       uORB::SubscriptionCallbackWorkItem::get_topic()->o_name,
			       uavcan::equipment::air_data::StaticTemperature::getDataTypeFullName(),
			       uavcan::equipment::air_data::StaticTemperature::DefaultDataTypeID);
		}
	}

	void BroadcastAnyUpdates() override
	{
		// sensor_baro -> uavcan::equipment::air_data::StaticTemperature
		sensor_baro_s baro;

		if ((hrt_elapsed_time(&_last_static_temperature_publish) > 1_s) && uORB::SubscriptionCallbackWorkItem::update(&baro)) {
			uavcan::equipment::air_data::StaticTemperature static_temperature{};
			static_temperature.static_temperature = baro.temperature + CONSTANTS_ABSOLUTE_NULL_CELSIUS;
			uavcan::Publisher<uavcan::equipment::air_data::StaticTemperature>::broadcast(static_temperature);

			// ensure callback is registered
			uORB::SubscriptionCallbackWorkItem::registerCallback();

			_last_static_temperature_publish = hrt_absolute_time();
		}
	}
private:
	hrt_abstime _last_static_temperature_publish{0};
};",0,587 2000 58 777 2001 44 777 2002 321 2003 44 773 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 123 777 58 2000 40 2008 321 2009 42 2010 44 2004 321 2011 38 2012 41 58 2001 40 2004 321 2006 321 2007 321 2000 321 2013 41 44 2002 321 2003 40 2010 44 2014 40 2015 41 41 44 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 40 2012 41 123 823 354 2016 40 2004 321 2017 321 2018 41 59 125 865 2019 40 41 2020 123 688 40 2002 321 2003 321 2021 40 41 41 123 2022 40 362 44 2002 321 2003 321 2023 40 41 354 2024 44 2004 321 2006 321 2007 321 2000 321 2025 40 41 44 2004 321 2006 321 2007 321 2000 321 2013 41 59 125 125 865 2026 40 41 2020 123 330 2027 2028 59 688 40 40 2029 40 38 2030 41 62 1501 41 307 2002 321 2003 321 2031 40 38 2028 41 41 123 2004 321 2006 321 2007 321 2000 2032 123 125 59 2032 46 2032 61 2028 46 2033 43 2034 59 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 321 2035 40 2032 41 59 330 2002 321 2003 321 2036 40 41 59 2030 61 2037 40 41 59 125 125 773 58 2038 2039 123 1500 125 59 125 59 ,"{'AvgLine': 10, 'CountLine': 43, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 36, 'CountLineCodeExe': 3, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118234,C++,"class EventBuffer
{
public:

	/**
	 * Create an event buffer. Required memory: sizeof(Event) * capacity.
	 * @param capacity maximum number of buffered events
	 */
	EventBuffer(int capacity = 20);
	~EventBuffer();

	int init();

	uint16_t get_latest_sequence() const { return _latest_sequence.load(); }
	uint16_t get_oldest_sequence_after(uint16_t sequence) const;

	/**
	 * Insert a new event. It's expect to have a later sequence number than the
	 * already inserted events.
	 */
	void insert_event(const Event &event);

	bool get_event(uint16_t sequence, Event &event) const;

	int size() const;
private:
	::px4::atomic<uint16_t> _latest_sequence{events::initial_event_sequence};

	Event *_events{nullptr}; ///< stored events, ringbuffer
	int _capacity;
	int _next{0}; ///< next element to use
	int _size{0};

	mutable pthread_mutex_t _mutex;
};",0,587 2000 123 777 58 306 2000 40 704 2001 61 1503 41 59 126 2000 40 41 59 704 2002 40 41 59 2003 2004 40 41 601 123 792 2005 46 2006 40 41 59 125 2003 2007 40 2003 2008 41 601 59 306 865 2009 40 601 2010 38 2011 41 59 569 2012 40 2003 2008 44 2010 38 2011 41 601 59 704 2013 40 41 601 59 773 58 321 2014 321 2015 60 2003 62 2016 123 2017 321 2018 125 59 2010 42 2019 123 753 125 59 331 704 2020 59 704 2021 123 1500 125 59 331 704 2022 123 1500 125 59 740 2023 2024 59 125 59 ,"{'AvgLine': 10, 'CountLine': 114, 'CountStmt': 57, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 37, 'MaxEssential': 3, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 86, 'CountStmtDecl': 24, 'MaxCyclomatic': 3, 'SumCyclomatic': 15, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 19, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 86, 'CountLineCodeExe': 37, 'CountLineComment': 11, 'AltAvgLineComment': 0, 'AltCountLineBlank': 19, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
118292,C++,"class ManualVelocitySmoothingXY final
{
public:
	ManualVelocitySmoothingXY() = default;
	~ManualVelocitySmoothingXY() = default;

	void reset(const Vector2f &accel, const Vector2f &vel, const Vector2f &pos);
	void update(float dt, const Vector2f &velocity_target);

	void setVelSpFeedback(const Vector2f &fb) { _velocity_setpoint_feedback = fb; }

	void setMaxJerk(const float max_jerk)
	{
		_trajectory[0].setMaxJerk(max_jerk);
		_trajectory[1].setMaxJerk(max_jerk);
	}
	float getMaxJerk() const { return _trajectory[0].getMaxJerk(); }

	void setMaxAccel(const float max_accel)
	{
		_trajectory[0].setMaxAccel(max_accel);
		_trajectory[1].setMaxAccel(max_accel);
	}
	float getMaxAccel() const { return _trajectory[0].getMaxAccel(); }

	void setMaxVel(const float max_vel)
	{
		_trajectory[0].setMaxVel(max_vel);
		_trajectory[1].setMaxVel(max_vel);
	}
	float getMaxVel() const { return _trajectory[0].getMaxVel(); }

	Vector2f getCurrentJerk() const { return _state.j; }
	Vector2f getCurrentAcceleration() const { return _state.a; }

	void setCurrentVelocity(const Vector2f &vel)
	{
		_state.v = vel;
		_trajectory[0].setCurrentVelocity(vel(0));
		_trajectory[1].setCurrentVelocity(vel(1));
	}
	Vector2f getCurrentVelocity() const { return _state.v; }

	void setCurrentPosition(const Vector2f &pos)
	{
		_state.x = pos;
		_trajectory[0].setCurrentPosition(pos(0));
		_trajectory[1].setCurrentPosition(pos(1));
		_position_estimate = pos;

		if (_position_lock_active) {
			_position_setpoint_locked = pos;
		}
	}
	Vector2f getCurrentPosition() const { return _position_setpoint_locked; }

	void setCurrentPositionEstimate(const Vector2f &pos) { _position_estimate = pos; }

private:
	void resetPositionLock();
	void updateTrajectories(float dt);
	void checkPositionLock(const Vector2f &velocity_target);
	void updateTrajDurations(const Vector2f &velocity_target);

	VelocitySmoothing _trajectory[2]; ///< Trajectory in x and y directions

	bool _position_lock_active{false};

	Vector2f _position_setpoint_locked{};

	Vector2f _velocity_setpoint_feedback{};
	Vector2f _position_estimate{};

	struct {
		Vector2f j;
		Vector2f a;
		Vector2f v;
		Vector2f x;
	} _state{};
};",0,587 2000 2001 123 777 58 2000 40 41 61 613 59 126 2000 40 41 61 613 59 865 2002 40 601 2003 38 2004 44 601 2003 38 2005 44 601 2003 38 2006 41 59 865 2007 40 660 2008 44 601 2003 38 2009 41 59 865 2010 40 601 2003 38 2011 41 123 2012 61 2011 59 125 865 2013 40 601 660 2014 41 123 2015 91 1500 93 46 2013 40 2014 41 59 2015 91 1501 93 46 2013 40 2014 41 59 125 660 2016 40 41 601 123 792 2017 91 1500 93 46 2016 40 41 59 125 865 2018 40 601 660 2019 41 123 2020 91 1500 93 46 2018 40 2019 41 59 2020 91 1501 93 46 2018 40 2019 41 59 125 660 2021 40 41 601 123 792 2022 91 1500 93 46 2021 40 41 59 125 865 2023 40 601 660 2024 41 123 2025 91 1500 93 46 2023 40 2024 41 59 2025 91 1501 93 46 2023 40 2024 41 59 125 660 2026 40 41 601 123 792 2027 91 1500 93 46 2026 40 41 59 125 2003 2028 40 41 601 123 792 2029 46 2030 59 125 2003 2031 40 41 601 123 792 2032 46 2033 59 125 865 2034 40 601 2003 38 2005 41 123 2035 46 2036 61 2005 59 2037 91 1500 93 46 2034 40 2005 40 1500 41 41 59 2037 91 1501 93 46 2034 40 2005 40 1501 41 41 59 125 2003 2038 40 41 601 123 792 2039 46 2040 59 125 865 2041 40 601 2003 38 2006 41 123 2042 46 2043 61 2006 59 2044 91 1500 93 46 2041 40 2006 40 1500 41 41 59 2044 91 1501 93 46 2041 40 2006 40 1501 41 41 59 2045 61 2006 59 688 40 2046 41 123 2047 61 2006 59 125 125 2003 2048 40 41 601 123 792 2049 59 125 865 2050 40 601 2003 38 2006 41 123 2051 61 2006 59 125 773 58 865 2052 40 41 59 865 2053 40 660 2008 41 59 865 2054 40 601 2003 38 2009 41 59 865 2055 40 601 2003 38 2009 41 59 2056 2057 91 1502 93 59 331 569 2058 123 655 125 59 2003 2059 123 125 59 2003 2060 123 125 59 2003 2061 123 125 59 816 123 2003 2062 59 2003 2063 59 2003 2064 59 2003 2065 59 125 2066 123 125 59 125 59 ,"{'AvgLine': 5, 'CountLine': 156, 'CountStmt': 86, 'MaxNesting': 2, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 58, 'MaxEssential': 1, 'SumEssential': 20, 'AvgCyclomatic': 1, 'CountLineCode': 118, 'CountStmtDecl': 34, 'MaxCyclomatic': 3, 'SumCyclomatic': 26, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 23, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 22, 'AltCountLineCode': 118, 'CountLineCodeExe': 55, 'CountLineComment': 16, 'AltAvgLineComment': 0, 'AltCountLineBlank': 23, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 25, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 16, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 28, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 18, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 26, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 23, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 6, 'CountDeclInstanceVariableProtected': 0}"
118299,C++,"class MavlinkStreamScaledPressure3 : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamScaledPressure3(mavlink); }

	static constexpr const char *get_name_static() { return ""SCALED_PRESSURE3""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_SCALED_PRESSURE3; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		if (_sensor_baro_sub.advertised() || _differential_pressure_sub.advertised()) {
			return MAVLINK_MSG_ID_SCALED_PRESSURE3_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		}

		return 0;
	}

private:
	explicit MavlinkStreamScaledPressure3(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _differential_pressure_sub{ORB_ID(differential_pressure), 2};
	uORB::Subscription _sensor_baro_sub{ORB_ID(sensor_baro), 2};

	bool send() override
	{
		if (_sensor_baro_sub.updated() || _differential_pressure_sub.updated()) {
			mavlink_scaled_pressure3_t msg{};

			sensor_baro_s sensor_baro;

			if (_sensor_baro_sub.copy(&sensor_baro)) {
				msg.time_boot_ms = sensor_baro.timestamp / 1000;
				msg.press_abs = sensor_baro.pressure; // millibar to hPa
				msg.temperature = roundf(sensor_baro.temperature * 100.f); // centidegrees
			}

			differential_pressure_s differential_pressure;

			if (_differential_pressure_sub.copy(&differential_pressure)) {
				if (msg.time_boot_ms == 0) {
					msg.time_boot_ms = differential_pressure.timestamp / 1000;
				}

				msg.press_diff = differential_pressure.differential_pressure_raw_pa * 100.f; // Pa to hPa
				msg.temperature_press_diff = roundf(differential_pressure.temperature * 100.f); // centidegrees
			}

			mavlink_msg_scaled_pressure3_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 688 40 2013 46 2014 40 41 309 2015 46 2014 40 41 41 123 792 2016 43 2017 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2018 321 2019 2020 123 2021 40 2022 41 44 1502 125 59 2018 321 2019 2023 123 2024 40 2025 41 44 1502 125 59 569 2026 40 41 2010 123 688 40 2023 46 2027 40 41 309 2020 46 2027 40 41 41 123 2028 2029 123 125 59 2030 2031 59 688 40 2023 46 2032 40 38 2031 41 41 123 2029 46 2033 61 2031 46 2034 47 1504 59 2029 46 2035 61 2031 46 2036 59 330 2029 46 2037 61 2038 40 2031 46 2037 42 1503 41 59 330 125 2039 2040 59 688 40 2020 46 2032 40 38 2040 41 41 123 688 40 2029 46 2041 323 1500 41 123 2029 46 2041 61 2040 46 2042 47 1504 59 125 2029 46 2043 61 2040 46 2044 42 1503 59 330 2029 46 2045 61 2046 40 2040 46 2047 42 1503 41 59 330 125 2048 40 2049 354 2050 40 41 44 38 2029 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 58, 'CountStmt': 23, 'MaxNesting': 3, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 43, 'CountStmtDecl': 13, 'MaxCyclomatic': 5, 'SumCyclomatic': 13, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 43, 'CountLineCodeExe': 6, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118315,C++,"class RawAirData :
	public UavcanPublisherBase,
	public uORB::SubscriptionCallbackWorkItem,
	private uavcan::Publisher<uavcan::equipment::air_data::RawAirData>
{
public:
	RawAirData(px4::WorkItem *work_item, uavcan::INode &node) :
		UavcanPublisherBase(uavcan::equipment::air_data::RawAirData::DefaultDataTypeID),
		uORB::SubscriptionCallbackWorkItem(work_item, ORB_ID(differential_pressure)),
		uavcan::Publisher<uavcan::equipment::air_data::RawAirData>(node)
	{
		this->setPriority(uavcan::TransferPriority::Default);
	}

	void PrintInfo() override
	{
		if (uORB::SubscriptionCallbackWorkItem::advertised()) {
			printf(""\t%s -> %s:%d\n"",
			       uORB::SubscriptionCallbackWorkItem::get_topic()->o_name,
			       uavcan::equipment::air_data::RawAirData::getDataTypeFullName(),
			       uavcan::equipment::air_data::RawAirData::DefaultDataTypeID);
		}
	}

	void BroadcastAnyUpdates() override
	{
		// differential_pressure -> uavcan::equipment::air_data::RawAirData
		differential_pressure_s diff_press;

		if (uORB::SubscriptionCallbackWorkItem::update(&diff_press)) {
			uavcan::equipment::air_data::RawAirData raw_air_data{};

			// raw_air_data.static_pressure =
			raw_air_data.differential_pressure = diff_press.differential_pressure_raw_pa;
			// raw_air_data.static_pressure_sensor_temperature =
			raw_air_data.differential_pressure_sensor_temperature = diff_press.temperature - CONSTANTS_ABSOLUTE_NULL_CELSIUS;
			raw_air_data.static_air_temperature = diff_press.temperature - CONSTANTS_ABSOLUTE_NULL_CELSIUS;
			// raw_air_data.pitot_temperature
			// raw_air_data.covariance
			uavcan::Publisher<uavcan::equipment::air_data::RawAirData>::broadcast(raw_air_data);

			// ensure callback is registered
			uORB::SubscriptionCallbackWorkItem::registerCallback();
		}
	}
};",0,587 2000 58 777 2001 44 777 2002 321 2003 44 773 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 123 777 58 2000 40 2008 321 2009 42 2010 44 2004 321 2011 38 2012 41 58 2001 40 2004 321 2006 321 2007 321 2000 321 2013 41 44 2002 321 2003 40 2010 44 2014 40 2015 41 41 44 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 40 2012 41 123 823 354 2016 40 2004 321 2017 321 2018 41 59 125 865 2019 40 41 2020 123 688 40 2002 321 2003 321 2021 40 41 41 123 2022 40 362 44 2002 321 2003 321 2023 40 41 354 2024 44 2004 321 2006 321 2007 321 2000 321 2025 40 41 44 2004 321 2006 321 2007 321 2000 321 2013 41 59 125 125 865 2026 40 41 2020 123 330 2027 2028 59 688 40 2002 321 2003 321 2029 40 38 2028 41 41 123 2004 321 2006 321 2007 321 2000 2030 123 125 59 330 2030 46 2015 61 2028 46 2031 59 330 2030 46 2032 61 2028 46 2033 45 2034 59 2030 46 2035 61 2028 46 2033 45 2034 59 330 330 2004 321 2005 60 2004 321 2006 321 2007 321 2000 62 321 2036 40 2030 41 59 330 2002 321 2003 321 2037 40 41 59 125 125 125 59 ,"{'AvgLine': 12, 'CountLine': 46, 'CountStmt': 8, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 9, 'AvgLineComment': 2, 'CountClassBase': 2, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 35, 'CountLineCodeExe': 2, 'CountLineComment': 6, 'AltAvgLineComment': 2, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.17', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118321,C++,"class EkfBasicsTest : public ::testing::Test
{
public:
	EkfBasicsTest():
		::testing::Test(),
		_ekf{std::make_shared<Ekf>()},
		_ekf_wrapper(_ekf),
		_sensor_simulator(_ekf)
	{
	};

	// Setup the Ekf with synthetic measurements
	void SetUp() override
	{
		_ekf->init(0);
		_sensor_simulator.runSeconds(_init_duration_s);
	}

	// Use this method to clean up any memory, network etc. after each test
	void TearDown() override
	{
	}

	std::shared_ptr<Ekf> _ekf {nullptr};
	EkfWrapper _ekf_wrapper;
	SensorSimulator _sensor_simulator;

	// Duration of initalization with only providing baro,mag and IMU
	const uint32_t _init_duration_s{4};

protected:
	double _latitude  {0.0};
	double _longitude {0.0};
	float  _altitude  {0.f};

	double _latitude_new  {0.0};
	double _longitude_new {0.0};
	float  _altitude_new  {0.f};

	uint64_t _origin_time = 0;

private:

};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 58 321 2001 321 2002 40 41 44 2003 123 2004 321 2005 60 2006 62 40 41 125 44 2007 40 2003 41 44 2008 40 2003 41 123 125 59 330 865 2009 40 41 2010 123 2003 354 2011 40 1500 41 59 2008 46 2012 40 2013 41 59 125 330 865 2014 40 41 2010 123 125 2015 321 2016 60 2017 62 2003 123 753 125 59 2018 2007 59 2019 2008 59 330 601 2020 2021 123 1502 125 59 775 58 625 2022 123 1500 125 59 625 2023 123 1500 125 59 660 2024 123 1500 125 59 625 2025 123 1500 125 59 625 2026 123 1500 125 59 660 2027 123 1500 125 59 2028 2029 61 1500 59 773 58 125 59 ,"{'AvgLine': 5, 'CountLine': 44, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 32, 'CountStmtDecl': 14, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 32, 'CountLineCodeExe': 0, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 11, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 7}"
118326,C++,"class TemperatureCalibrationBase
{
public:
	TemperatureCalibrationBase(float min_temperature_rise, float min_start_temperature, float max_start_temperature)
		: _min_temperature_rise(min_temperature_rise), _min_start_temperature(min_start_temperature),
		  _max_start_temperature(max_start_temperature) {}

	virtual ~TemperatureCalibrationBase() = default;

	/**
	 * check & update new sensor data.
	 * @return progress in range [0, 100], 110 when finished, <0 on error,
	 *         -TC_ERROR_INITIAL_TEMP_TOO_HIGH if starting temperature is too hot
	 *         -TC_ERROR_COMMUNICATION if no sensors found
	 */
	virtual int update() = 0;

	/**
	 * do final fitting & write the parameters. Call this exactly once after update() returned 110
	 * @return 0 on success, <0 otherwise
	 */
	virtual int finish() = 0;

protected:

	/**
	 * set a system parameter (without system notification) and print an error if it fails
	 * @param format_str for example ""CAL_GYRO%u_XOFF""
	 * @param index which index (will replace %u in format_str)
	 * @param value
	 * @return 0 on success
	 */
	inline int set_parameter(const char *format_str, unsigned index, const void *value);

	float _min_temperature_rise; ///< minimum difference in temperature before the process finishes
	float _min_start_temperature; ///< minimum temperature before the process starts
	float _max_start_temperature; ///< maximum temperature above which the process does not start and an error is declared
};",0,587 2000 123 777 58 2000 40 660 2001 44 660 2002 44 660 2003 41 58 2004 40 2001 41 44 2005 40 2002 41 44 2006 40 2003 41 123 125 864 126 2000 40 41 61 613 59 306 864 704 2007 40 41 61 1500 59 306 864 704 2008 40 41 61 1500 59 775 58 306 700 704 2009 40 601 582 42 2010 44 856 2011 44 601 865 42 2012 41 59 660 2004 59 331 660 2005 59 331 660 2006 59 331 125 59 ,"{'AvgLine': 7, 'CountLine': 49, 'CountStmt': 16, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 24, 'CountStmtDecl': 12, 'MaxCyclomatic': 3, 'SumCyclomatic': 4, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 24, 'CountLineCodeExe': 6, 'CountLineComment': 20, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.83', 'AltCountLineComment': 20, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 3}"
118333,C++,"class PositionControlBasicTest : public ::testing::Test
{
public:
	PositionControlBasicTest()
	{
		_position_control.setPositionGains(Vector3f(1.f, 1.f, 1.f));
		_position_control.setVelocityGains(Vector3f(20.f, 20.f, 20.f), Vector3f(20.f, 20.f, 20.f), Vector3f(20.f, 20.f, 20.f));
		_position_control.setVelocityLimits(1.f, 1.f, 1.f);
		_position_control.setThrustLimits(0.1f, MAXIMUM_THRUST);
		_position_control.setHorizontalThrustMargin(HORIZONTAL_THRUST_MARGIN);
		_position_control.setTiltLimit(1.f);
		_position_control.setHoverThrust(.5f);

		resetInputSetpoint();
	}

	void resetInputSetpoint()
	{
		_input_setpoint.x = NAN;
		_input_setpoint.y = NAN;
		_input_setpoint.z = NAN;
		_input_setpoint.yaw = NAN;
		_input_setpoint.yawspeed = NAN;
		_input_setpoint.vx = NAN;
		_input_setpoint.vy = NAN;
		_input_setpoint.vz = NAN;
		Vector3f(NAN, NAN, NAN).copyTo(_input_setpoint.acceleration);
		Vector3f(NAN, NAN, NAN).copyTo(_input_setpoint.thrust);
	}

	bool runController()
	{
		_position_control.setInputSetpoint(_input_setpoint);
		const bool ret = _position_control.update(.1f);
		_position_control.getLocalPositionSetpoint(_output_setpoint);
		_position_control.getAttitudeSetpoint(_attitude);
		return ret;
	}

	PositionControl _position_control;
	vehicle_local_position_setpoint_s _input_setpoint{};
	vehicle_local_position_setpoint_s _output_setpoint{};
	vehicle_attitude_setpoint_s _attitude{};

	static constexpr float MAXIMUM_THRUST = 0.9f;
	static constexpr float HORIZONTAL_THRUST_MARGIN = 0.3f;
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 123 2003 46 2004 40 2005 40 1501 44 1501 44 1501 41 41 59 2003 46 2006 40 2005 40 1503 44 1503 44 1503 41 44 2005 40 1503 44 1503 44 1503 41 44 2005 40 1503 44 1503 44 1503 41 41 59 2003 46 2007 40 1501 44 1501 44 1501 41 59 2003 46 2008 40 1500 44 2009 41 59 2003 46 2010 40 2011 41 59 2003 46 2012 40 1501 41 59 2003 46 2013 40 1500 41 59 2014 40 41 59 125 865 2015 40 41 123 2016 46 2017 61 2018 59 2016 46 2019 61 2018 59 2016 46 2020 61 2018 59 2016 46 2021 61 2018 59 2016 46 2022 61 2018 59 2016 46 2023 61 2018 59 2016 46 2024 61 2018 59 2016 46 2025 61 2018 59 2026 40 2018 44 2018 44 2018 41 46 2027 40 2016 46 2028 41 59 2026 40 2018 44 2018 44 2018 41 46 2027 40 2016 46 2029 41 59 125 569 2030 40 41 123 2031 46 2032 40 2033 41 59 601 569 2034 61 2031 46 2035 40 1500 41 59 2031 46 2036 40 2037 41 59 2031 46 2038 40 2039 41 59 792 2034 59 125 2040 2041 59 2042 2043 123 125 59 2042 2044 123 125 59 2045 2046 123 125 59 809 603 660 2047 61 1500 59 809 603 660 2048 61 1500 59 125 59 ,"{'AvgLine': 11, 'CountLine': 47, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 42, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 42, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118344,C++,"class BeepCommand :
	public UavcanSubscriberBase,
	private uavcan::Subscriber<uavcan::equipment::indication::BeepCommand, BeepcommandBinder>
{
public:
	BeepCommand(uavcan::INode &node) :
		UavcanSubscriberBase(uavcan::equipment::indication::BeepCommand::DefaultDataTypeID),
		uavcan::Subscriber<uavcan::equipment::indication::BeepCommand, BeepcommandBinder>(node)
	{}

	bool init()
	{
		if (start(BeepcommandBinder(this, &BeepCommand::callback)) < 0) {
			PX4_ERR(""uavcan::equipment::indication::BeepCommand subscription failed"");
			return false;
		}

		return true;
	}

	void PrintInfo() const override
	{
		printf(""\t%s:%d -> %s\n"",
		       uavcan::equipment::indication::BeepCommand::getDataTypeFullName(),
		       uavcan::equipment::indication::BeepCommand::DefaultDataTypeID,
		       _tune_control_pub.get_topic()->o_name);
	}

private:
	void callback(const uavcan::ReceivedDataStructure<uavcan::equipment::indication::BeepCommand> &msg)
	{
		tune_control_s tune_control{};
		tune_control.tune_id = 0;
		tune_control.frequency = (uint16_t)msg.frequency;
		tune_control.duration = uavcan::uint32_t(1000000 * msg.duration);
		tune_control.volume = 0xff;
		tune_control.timestamp = hrt_absolute_time();
		_tune_control_pub.publish(tune_control);
	}

	uORB::Publication<tune_control_s> _tune_control_pub{ORB_ID(tune_control)};
};",0,587 2000 58 777 2001 44 773 2002 321 2003 60 2002 321 2004 321 2005 321 2000 44 2006 62 123 777 58 2000 40 2002 321 2007 38 2008 41 58 2001 40 2002 321 2004 321 2005 321 2000 321 2009 41 44 2002 321 2003 60 2002 321 2004 321 2005 321 2000 44 2006 62 40 2008 41 123 125 569 2010 40 41 123 688 40 2011 40 2006 40 823 44 38 2000 321 2012 41 41 60 1500 41 123 2013 40 362 41 59 792 655 59 125 792 829 59 125 865 2014 40 41 601 2015 123 2016 40 362 44 2002 321 2004 321 2005 321 2000 321 2017 40 41 44 2002 321 2004 321 2005 321 2000 321 2009 44 2018 46 2019 40 41 354 2020 41 59 125 773 58 865 2021 40 601 2002 321 2022 60 2002 321 2004 321 2005 321 2000 62 38 2023 41 123 2024 2025 123 125 59 2025 46 2026 61 1500 59 2025 46 2027 61 40 2028 41 2023 46 2027 59 2025 46 2029 61 2002 321 2030 40 1507 42 2023 46 2029 41 59 2025 46 2031 61 1504 59 2025 46 2032 61 2033 40 41 59 2034 46 2035 40 2025 41 59 125 2036 321 2037 60 2038 62 2039 123 2040 40 2041 41 125 59 125 59 ,"{'AvgLine': 7, 'CountLine': 42, 'CountStmt': 10, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 37, 'CountStmtDecl': 6, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 37, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118351,C++,"class ReadBuffer
{
public:
	int read(int fd);
	void copy(void *dest, size_t pos, size_t n);
	void remove(size_t pos, size_t n);

	void print_stats();
	void update_lost_stats();

	uint8_t buffer[1024] = {};
	size_t buf_size = 0;

	// We keep track of the first Mavlink and Rtps packet in the buffer.
	// If start and end are equal there is no packet.
	size_t start_mavlink = 0;
	size_t end_mavlink = 0;
	size_t start_rtps = 0;
	size_t end_rtps = 0;
	// Just for stats.
	size_t mavlink_parsed = 0;
	size_t rtps_parsed = 0;
	size_t bytes_received = 0;
	size_t bytes_lost = 0;
	size_t header_bytes_received = 0;

	// To keep track of readers.
	hrt_abstime last_mavlink_read = 0;
	hrt_abstime last_rtps_read = 0;
};",0,587 2000 123 777 58 704 2001 40 704 2002 41 59 865 2003 40 865 42 2004 44 2005 2006 44 2005 2007 41 59 865 2008 40 2005 2006 44 2005 2007 41 59 865 2009 40 41 59 865 2010 40 41 59 2011 2012 91 1505 93 61 123 125 59 2005 2013 61 1500 59 330 330 2005 2014 61 1500 59 2005 2015 61 1500 59 2005 2016 61 1500 59 2005 2017 61 1500 59 330 2005 2018 61 1500 59 2005 2019 61 1500 59 2005 2020 61 1500 59 2005 2021 61 1500 59 2005 2022 61 1500 59 330 2023 2024 61 1500 59 2023 2025 61 1500 59 125 59 ,"{'AvgLine': 17, 'CountLine': 117, 'CountStmt': 58, 'MaxNesting': 1, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 38, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 3, 'CountLineCode': 93, 'CountStmtDecl': 21, 'MaxCyclomatic': 7, 'SumCyclomatic': 17, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 93, 'CountLineCodeExe': 27, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 17, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 78, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 13, 'CountDeclInstanceVariablePublic': 13, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117550,C++,"template<typename Type>
class Vector2 : public Vector<Type, 2>
{
public:

	using Matrix21 = Matrix<Type, 2, 1>;
	using Vector3 = Vector<Type, 3>;

	Vector2() = default;

	Vector2(const Matrix21 &other) :
		Vector<Type, 2>(other)
	{
	}

	explicit Vector2(const Type data_[2]) :
		Vector<Type, 2>(data_)
	{
	}

	Vector2(Type x, Type y)
	{
		Vector2 &v(*this);
		v(0) = x;
		v(1) = y;
	}

	template<size_t P, size_t Q>
	Vector2(const Slice<Type, 2, 1, P, Q> &slice_in) : Vector<Type, 2>(slice_in)
	{
	}

	template<size_t P, size_t Q>
	Vector2(const Slice<Type, 1, 2, P, Q> &slice_in) : Vector<Type, 2>(slice_in)
	{
	}

	explicit Vector2(const Vector3 &other)
	{
		Vector2 &v(*this);
		v(0) = other(0);
		v(1) = other(1);
	}

	Type cross(const Matrix21 &b) const
	{
		const Vector2 &a(*this);
		return a(0) * b(1, 0) - a(1) * b(0, 0);
	}

	Type operator%(const Matrix21 &b) const
	{
		return (*this).cross(b);
	}

};",0,822 60 835 2000 62 587 2001 58 777 2002 60 2000 44 1502 62 123 777 58 860 2003 61 2004 60 2000 44 1502 44 1501 62 59 860 2005 61 2002 60 2000 44 1502 62 59 2001 40 41 61 613 59 2001 40 601 2003 38 2006 41 58 2002 60 2000 44 1502 62 40 2006 41 123 125 648 2001 40 601 2000 2007 91 1502 93 41 58 2002 60 2000 44 1502 62 40 2007 41 123 125 2001 40 2000 2008 44 2000 2009 41 123 2001 38 2010 40 42 823 41 59 2010 40 1500 41 61 2008 59 2010 40 1501 41 61 2009 59 125 822 60 2011 2012 44 2011 2013 62 2001 40 601 2014 60 2000 44 1502 44 1501 44 2012 44 2013 62 38 2015 41 58 2002 60 2000 44 1502 62 40 2015 41 123 125 822 60 2011 2012 44 2011 2013 62 2001 40 601 2014 60 2000 44 1501 44 1502 44 2012 44 2013 62 38 2015 41 58 2002 60 2000 44 1502 62 40 2015 41 123 125 648 2001 40 601 2005 38 2006 41 123 2001 38 2016 40 42 823 41 59 2016 40 1500 41 61 2006 40 1500 41 59 2016 40 1501 41 61 2006 40 1501 41 59 125 2000 2017 40 601 2003 38 2018 41 601 123 601 2001 38 2019 40 42 823 41 59 792 2019 40 1500 41 42 2018 40 1501 44 1500 41 45 2019 40 1501 41 42 2018 40 1500 44 1500 41 59 125 2000 758 37 40 601 2003 38 2018 41 601 123 792 40 42 823 41 46 2017 40 2018 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 55, 'CountStmt': 21, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 44, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 84, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117552,C++,"class Sensor
{
public:

	Sensor(std::shared_ptr<Ekf> ekf);
	virtual ~Sensor();

	void update(uint64_t time);

	void setRateHz(uint32_t rate) { _update_period = uint32_t(1000000) / rate; }

	bool isRunning() const { return _is_running; }

	void start() { _is_running = true; }

	void stop() { _is_running = false; }

	bool should_send(uint64_t time) const;

protected:

	std::shared_ptr<Ekf> _ekf;
	// time in microseconds
	uint32_t _update_period;
	uint64_t _time_last_data_sent{0};

	bool _is_running{false};

	// Checks that the right amount time passed since last send data to fulfill rate
	bool is_time_to_send(uint64_t time) const;

	// call set*Data function of Ekf
	virtual void send(uint64_t time) = 0;

};",0,587 2000 123 777 58 2000 40 2001 321 2002 60 2003 62 2004 41 59 864 126 2000 40 41 59 865 2005 40 2006 2007 41 59 865 2008 40 2009 2010 41 123 2011 61 2009 40 1507 41 47 2010 59 125 569 2012 40 41 601 123 792 2013 59 125 865 2014 40 41 123 2015 61 829 59 125 865 2016 40 41 123 2017 61 655 59 125 569 2018 40 2006 2007 41 601 59 775 58 2001 321 2002 60 2003 62 2019 59 330 2009 2020 59 2006 2021 123 1500 125 59 569 2022 123 655 125 59 330 569 2023 40 2006 2007 41 601 59 330 864 865 2024 40 2006 2007 41 61 1500 59 125 59 ,"{'AvgLine': 2, 'CountLine': 56, 'CountStmt': 24, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 40, 'CountStmtDecl': 15, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 40, 'CountLineCodeExe': 10, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 2, 'CountClassDerived': 8, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 4}"
117579,C++,"	class Event
	{
		FAR px4_sem_t sem;


	public:

		int init()
		{
			int rv = px4_sem_init(&sem, 0, 0);

			if (rv == 0) {
				px4_sem_setprotocol(&sem, SEM_PRIO_NONE);
			}

			return rv;
		}

		int deinit()
		{
			return px4_sem_destroy(&sem);
		}


		Event()
		{
		}

		~Event()
		{
		}


		/**
		 */

		void waitFor(uavcan::MonotonicDuration duration)
		{
			static const int NsPerSec = 1000000000;

			if (duration.isPositive()) {
				auto abstime = ::timespec();

				if (clock_gettime(CLOCK_REALTIME, &abstime) >= 0) {
					abstime.tv_nsec += duration.toUSec() * 1000;

					if (abstime.tv_nsec >= NsPerSec) {
						abstime.tv_sec++;
						abstime.tv_nsec -= NsPerSec;
					}

					(void)px4_sem_timedwait(&sem, &abstime);
				}
			}
		}

		void signal()
		{
			int count;
			int rv = px4_sem_getvalue(&sem, &count);

			if (rv == 0 && count <= 0) {
				px4_sem_post(&sem);
			}
		}
	};",0,587 2000 123 2001 2002 2003 59 777 58 704 2004 40 41 123 704 2005 61 2006 40 38 2003 44 1500 44 1500 41 59 688 40 2005 323 1500 41 123 2007 40 38 2003 44 2008 41 59 125 792 2005 59 125 704 2009 40 41 123 792 2010 40 38 2003 41 59 125 2000 40 41 123 125 126 2000 40 41 123 125 306 865 2011 40 2012 321 2013 2014 41 123 809 601 704 2015 61 1510 59 688 40 2014 46 2016 40 41 41 123 561 2017 61 321 2018 40 41 59 688 40 2019 40 2020 44 38 2017 41 325 1500 41 123 2017 46 2021 348 2014 46 2022 40 41 42 1504 59 688 40 2017 46 2021 325 2015 41 123 2017 46 2023 349 59 2017 46 2021 337 2015 59 125 40 865 41 2024 40 38 2003 44 38 2017 41 59 125 125 125 865 2025 40 41 123 704 2026 59 704 2027 61 2028 40 38 2003 44 38 2026 41 59 688 40 2027 323 1500 307 2026 329 1500 41 123 2029 40 38 2003 41 59 125 125 125 59 ,"{'AvgLine': 8, 'CountLine': 66, 'CountStmt': 25, 'MaxNesting': 3, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 13, 'MaxCyclomatic': 4, 'SumCyclomatic': 11, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 18, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 46, 'CountLineCodeExe': 32, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 18, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 28, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117581,C++,"class VirtualCanIface : public uavcan::ICanIface,
	uavcan::Noncopyable
{
	/**
	 * This class re-defines uavcan::RxCanFrame with flags.
	 * Simple inheritance or composition won't work here, because the 40 byte limit will be exceeded,
	 * rendering this class unusable with Queue<>.
	 */
	struct RxItem: public uavcan::CanFrame {
		const uavcan::MonotonicTime ts_mono;
		const uavcan::UtcTime ts_utc;
		const uavcan::CanIOFlags flags;
		const uint8_t iface_index;

		RxItem(const uavcan::CanRxFrame &arg_frame, uavcan::CanIOFlags arg_flags) :
			uavcan::CanFrame(arg_frame),
			ts_mono(arg_frame.ts_mono),
			ts_utc(arg_frame.ts_utc),
			flags(arg_flags),
			iface_index(arg_frame.iface_index)
		{
			// Making sure it will fit into a pool block with a pointer prefix
			static_assert(sizeof(RxItem) <= (uavcan::MemPoolBlockSize - 8), ""Bad coder, no coffee"");
		}
	};

	pthread_mutex_t &common_driver_mutex_;

	uavcan::CanTxQueue prioritized_tx_queue_;
	Queue<RxItem> rx_queue_;

	int16_t send(const uavcan::CanFrame &frame, uavcan::MonotonicTime tx_deadline, uavcan::CanIOFlags flags) override
	{
		Lock lock(common_driver_mutex_);
		prioritized_tx_queue_.push(frame, tx_deadline, uavcan::CanTxQueue::Volatile, flags);
		return 1;
	}

	int16_t receive(uavcan::CanFrame &out_frame, uavcan::MonotonicTime &out_ts_monotonic,
			uavcan::UtcTime &out_ts_utc, uavcan::CanIOFlags &out_flags) override
	{
		Lock lock(common_driver_mutex_);

		if (rx_queue_.isEmpty()) {
			return 0;
		}

		const auto item = *rx_queue_.peek();
		rx_queue_.pop();

		out_frame = item;
		out_ts_monotonic = item.ts_mono;
		out_ts_utc = item.ts_utc;
		out_flags = item.flags;

		return 1;
	}

	int16_t configureFilters(const uavcan::CanFilterConfig *, std::uint16_t) override { return -uavcan::ErrDriver; }
	uint16_t getNumFilters() const override { return 0; }
	uint64_t getErrorCount() const override { return 0; }

public:
	VirtualCanIface(uavcan::IPoolAllocator &allocator, uavcan::ISystemClock &clock,
			pthread_mutex_t &arg_mutex, unsigned quota_per_queue) :
		common_driver_mutex_(arg_mutex),
		prioritized_tx_queue_(allocator, clock, quota_per_queue),
		rx_queue_(allocator, quota_per_queue)
	{
	}

	~VirtualCanIface()
	{
	}

	/**
	 * Note that RX queue overwrites oldest items when overflowed.
	 * Call this from the main thread only.
	 * No additional locking is required.
	 */
	void addRxFrame(const uavcan::CanRxFrame &frame, uavcan::CanIOFlags flags)
	{
		Lock lock(common_driver_mutex_);

		if (!rx_queue_.tryEmplace(frame, flags) && !rx_queue_.isEmpty()) {
			rx_queue_.pop();
			(void)rx_queue_.tryEmplace(frame, flags);
		}
	}

	/**
	 * Call this from the main thread only.
	 * No additional locking is required.
	 */
	void flushTxQueueTo(uavcan::INode &main_node, std::uint8_t iface_index)
	{
		Lock lock(common_driver_mutex_);
		const std::uint8_t iface_mask = static_cast<std::uint8_t>(1U << iface_index);

		while (auto e = prioritized_tx_queue_.peek()) {
			UAVCAN_TRACE(""VirtualCanIface"", ""TX injection [iface=0x%02x]: %s"",
				     unsigned(iface_mask), e->toString().c_str());

			const int res = main_node.injectTxFrame(e->frame, e->deadline, iface_mask,
								uavcan::CanTxQueue::Qos(e->qos), e->flags);

			prioritized_tx_queue_.remove(e);

			if (res <= 0) {
				break;
			}

		}
	}

	/**
	 * Call this from the sub-node thread only.
	 * No additional locking is required.
	 */
	bool hasDataInRxQueue()
	{
		Lock lock(common_driver_mutex_);
		return !rx_queue_.isEmpty();
	}
};",0,587 2000 58 777 2001 321 2002 44 2001 321 2003 123 306 816 2004 58 777 2001 321 2005 123 601 2001 321 2006 2007 59 601 2001 321 2008 2009 59 601 2001 321 2010 2011 59 601 2012 2013 59 2004 40 601 2001 321 2014 38 2015 44 2001 321 2010 2016 41 58 2001 321 2005 40 2015 41 44 2007 40 2015 46 2007 41 44 2009 40 2015 46 2009 41 44 2011 40 2016 41 44 2013 40 2015 46 2013 41 123 330 810 40 805 40 2004 41 329 40 2001 321 2017 45 1502 41 44 362 41 59 125 125 59 2018 38 2019 59 2001 321 2020 2021 59 2022 60 2004 62 2023 59 2024 2025 40 601 2001 321 2005 38 2026 44 2001 321 2027 2028 44 2001 321 2029 2030 41 2031 123 2032 2033 40 2019 41 59 2021 46 2034 40 2026 44 2028 44 2001 321 2020 321 2035 44 2030 41 59 792 1501 59 125 2024 2036 40 2001 321 2005 38 2037 44 2001 321 2027 38 2038 44 2001 321 2039 38 2040 44 2001 321 2029 38 2041 41 2031 123 2042 2043 40 2019 41 59 688 40 2023 46 2044 40 41 41 123 792 1500 59 125 601 561 2045 61 42 2023 46 2046 40 41 59 2023 46 2047 40 41 59 2037 61 2045 59 2038 61 2045 46 2048 59 2040 61 2045 46 2049 59 2041 61 2045 46 2030 59 792 1501 59 125 2024 2050 40 601 2001 321 2051 42 44 2052 321 2053 41 2031 123 792 45 2001 321 2054 59 125 2053 2055 40 41 601 2031 123 792 1500 59 125 2056 2057 40 41 601 2031 123 792 1500 59 125 777 58 2000 40 2001 321 2058 38 2059 44 2001 321 2060 38 2061 44 2018 38 2062 44 856 2063 41 58 2019 40 2062 41 44 2021 40 2059 44 2061 44 2063 41 44 2023 40 2059 44 2063 41 123 125 126 2000 40 41 123 125 306 865 2064 40 601 2001 321 2065 38 2026 44 2001 321 2029 2030 41 123 2066 2067 40 2019 41 59 688 40 33 2023 46 2068 40 2026 44 2030 41 307 33 2023 46 2069 40 41 41 123 2023 46 2070 40 41 59 40 865 41 2023 46 2068 40 2026 44 2030 41 59 125 125 306 865 2071 40 2001 321 2072 38 2073 44 2052 321 2074 2075 41 123 2076 2077 40 2019 41 59 601 2052 321 2074 2078 61 811 60 2052 321 2074 62 40 1501 332 2075 41 59 870 40 561 2079 61 2021 46 2080 40 41 41 123 2081 40 362 44 362 44 856 40 2078 41 44 2079 354 2082 40 41 46 2083 40 41 41 59 601 704 2084 61 2073 46 2085 40 2079 354 2026 44 2079 354 2086 44 2078 44 2001 321 2020 321 2087 40 2079 354 2088 41 44 2079 354 2030 41 59 2021 46 2089 40 2079 41 59 688 40 2084 329 1500 41 123 572 59 125 125 125 306 569 2090 40 41 123 2091 2092 40 2019 41 59 792 33 2023 46 2093 40 41 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 125, 'CountStmt': 31, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 85, 'CountStmtDecl': 24, 'MaxCyclomatic': 2, 'SumCyclomatic': 12, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 10, 'AltCountLineCode': 85, 'CountLineCodeExe': 12, 'CountLineComment': 19, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.22', 'AltCountLineComment': 19, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117588,C++,"class DPS310 : public I2CSPIDriver<DPS310>
{
public:
	DPS310(const I2CSPIDriverConfig &config, device::Device *interface);
	virtual ~DPS310();

	static I2CSPIDriverBase *instantiate(const I2CSPIDriverConfig &config, int runtime_instance);
	static void print_usage();

	int			init();

	void			print_status();
	void			RunImpl();

private:

	void			start();
	int			reset();

	uint8_t			RegisterRead(Register reg);
	void			RegisterWrite(Register reg, uint8_t val);
	void			RegisterSetBits(Register reg, uint8_t setbits);
	void			RegisterClearBits(Register reg, uint8_t clearbits);

	static constexpr uint32_t SAMPLE_RATE{32};

	PX4Barometer		_px4_barometer;

	device::Device		*_interface;

	CalibrationCoefficients	_calibration{};

	perf_counter_t		_sample_perf;
	perf_counter_t		_comms_errors;
};",0,587 2000 58 777 2001 60 2000 62 123 777 58 2000 40 601 2002 38 2003 44 2004 321 2005 42 2006 41 59 864 126 2000 40 41 59 809 2007 42 2008 40 601 2002 38 2003 44 704 2009 41 59 809 865 2010 40 41 59 704 2011 40 41 59 865 2012 40 41 59 865 2013 40 41 59 773 58 865 2014 40 41 59 704 2015 40 41 59 2016 2017 40 2018 2019 41 59 865 2020 40 2018 2019 44 2016 2021 41 59 865 2022 40 2018 2019 44 2016 2023 41 59 865 2024 40 2018 2019 44 2016 2025 41 59 809 603 2026 2027 123 1503 125 59 2028 2029 59 2004 321 2005 42 2030 59 2031 2032 123 125 59 2033 2034 59 2033 2035 59 125 59 ,"{'AvgLine': 21, 'CountLine': 317, 'CountStmt': 133, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 87, 'MaxEssential': 5, 'SumEssential': 24, 'AvgCyclomatic': 2, 'CountLineCode': 215, 'CountStmtDecl': 48, 'MaxCyclomatic': 7, 'SumCyclomatic': 31, 'AltAvgLineCode': 15, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 66, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 4, 'CountDeclMethod': 13, 'AltCountLineCode': 225, 'CountLineCodeExe': 88, 'CountLineComment': 29, 'AltAvgLineComment': 2, 'AltCountLineBlank': 68, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 44, 'CountLineInactive': 7, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 29, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 31, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 5, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 31, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 6, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
117611,C++,"class StatusDisplay
{
public:

	StatusDisplay();

	/** regularily called to handle state updates */
	void process();

protected:
	/**
	 * check for topic updates
	 * @return true if one or more topics got updated
	 */
	bool check_for_updates();

	/**
	 * handle LED logic changes & call publish()
	 */
	void set_leds();

	/** publish LED control */
	void publish();

	uORB::SubscriptionData<battery_status_s>       _battery_status_sub{ORB_ID(battery_status)};
	uORB::SubscriptionData<cpuload_s>              _cpu_load_sub{ORB_ID(cpuload)};
	uORB::SubscriptionData<vehicle_status_s>       _vehicle_status_sub{ORB_ID(vehicle_status)};
	uORB::SubscriptionData<vehicle_status_flags_s> _vehicle_status_flags_sub{ORB_ID(vehicle_status_flags)};

	led_control_s _led_control{};

private:
	uORB::Publication<led_control_s> _led_control_pub{ORB_ID(led_control)};

	bool _old_gps_lock_valid{false};
	bool _old_home_position_valid{false};
	bool _low_battery{false};
	bool _critical_battery{false};
	int _old_nav_state{-1};
	int _old_battery_status_warning{-1};
};",0,587 2000 123 777 58 2000 40 41 59 306 865 2001 40 41 59 775 58 306 569 2002 40 41 59 306 865 2003 40 41 59 306 865 2004 40 41 59 2005 321 2006 60 2007 62 2008 123 2009 40 2010 41 125 59 2005 321 2006 60 2011 62 2012 123 2013 40 2014 41 125 59 2005 321 2006 60 2015 62 2016 123 2017 40 2018 41 125 59 2005 321 2006 60 2019 62 2020 123 2021 40 2022 41 125 59 2023 2024 123 125 59 773 58 2005 321 2025 60 2023 62 2026 123 2027 40 2028 41 125 59 569 2029 123 655 125 59 569 2030 123 655 125 59 569 2031 123 655 125 59 569 2032 123 655 125 59 704 2033 123 45 1501 125 59 704 2034 123 45 1501 125 59 125 59 ,"{'AvgLine': 24, 'CountLine': 164, 'CountStmt': 37, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 16, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 2, 'CountLineCode': 72, 'CountStmtDecl': 21, 'MaxCyclomatic': 5, 'SumCyclomatic': 10, 'AltAvgLineCode': 18, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 19, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 5, 'CountDeclMethod': 5, 'AltCountLineCode': 113, 'CountLineCodeExe': 13, 'CountLineComment': 14, 'AltAvgLineComment': 2, 'AltCountLineBlank': 34, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 58, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.19', 'AltCountLineComment': 21, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 12, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 6, 'CountDeclInstanceVariableProtected': 0}"
118391,C++,"class MavlinkStreamStatustext : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamStatustext(mavlink); }

	static constexpr const char *get_name_static() { return ""STATUSTEXT""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_STATUSTEXT; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _mavlink_log_sub.updated() ? (MAVLINK_MSG_ID_STATUSTEXT_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES) : 0;
	}

private:
	explicit MavlinkStreamStatustext(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	~MavlinkStreamStatustext()
	{
		perf_free(_missed_msg_count_perf);
	}

	uORB::Subscription _mavlink_log_sub{ORB_ID(mavlink_log)};
	perf_counter_t _missed_msg_count_perf{perf_alloc(PC_COUNT, MODULE_NAME"": STATUSTEXT missed messages"")};
	uint16_t _id{0};

	bool send() override
	{
		if (_mavlink->is_connected()) {
			while (_mavlink_log_sub.updated() && (_mavlink->get_free_tx_buf() >= get_size())) {

				const unsigned last_generation = _mavlink_log_sub.get_last_generation();

				mavlink_log_s mavlink_log;

				if (_mavlink_log_sub.update(&mavlink_log)) {
					// don't send stale messages
					if (hrt_elapsed_time(&mavlink_log.timestamp) < 2_s) {

						if (_mavlink_log_sub.get_last_generation() != (last_generation + 1)) {
							perf_count(_missed_msg_count_perf);
							PX4_DEBUG(""channel %d has missed %d mavlink log messages"", _mavlink->get_channel(),
								  perf_event_count(_missed_msg_count_perf));
						}

						mavlink_statustext_t msg{};
						const char *text = mavlink_log.text;
						constexpr unsigned max_chunk_size = sizeof(msg.text);
						msg.severity = mavlink_log.severity;
						msg.chunk_seq = 0;
						msg.id = _id++;
						unsigned text_size;

						while ((text_size = strlen(text)) > 0) {
							unsigned chunk_size = math::min(text_size, max_chunk_size);

							if (chunk_size < max_chunk_size) {
								memcpy(&msg.text[0], &text[0], chunk_size);
								// pad with zeros
								memset(&msg.text[0] + chunk_size, 0, max_chunk_size - chunk_size);

							} else {
								memcpy(&msg.text[0], &text[0], chunk_size);
							}

							mavlink_msg_statustext_send_struct(_mavlink->get_channel(), &msg);

							if (text_size <= max_chunk_size) {
								break;

							} else {
								text += max_chunk_size;
							}

							msg.chunk_seq += 1;
						}

						return true;
					}
				}
			}
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 40 2015 43 2016 41 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 126 2000 40 41 123 2017 40 2018 41 59 125 2019 321 2020 2021 123 2022 40 2023 41 125 59 2024 2025 123 2026 40 2027 44 2028 362 41 125 59 2006 2029 123 1500 125 59 569 2030 40 41 2010 123 688 40 2031 354 2032 40 41 41 123 870 40 2021 46 2033 40 41 307 40 2031 354 2034 40 41 325 2012 40 41 41 41 123 601 856 2035 61 2021 46 2036 40 41 59 2037 2038 59 688 40 2021 46 2039 40 38 2038 41 41 123 330 688 40 2040 40 38 2038 46 2041 41 60 1502 41 123 688 40 2021 46 2036 40 41 340 40 2035 43 1501 41 41 123 2042 40 2025 41 59 2043 40 362 44 2031 354 2044 40 41 44 2045 40 2025 41 41 59 125 2046 2047 123 125 59 601 582 42 2048 61 2038 46 2048 59 603 856 2049 61 805 40 2047 46 2048 41 59 2047 46 2050 61 2038 46 2050 59 2047 46 2051 61 1500 59 2047 46 2052 61 2029 349 59 856 2053 59 870 40 40 2053 61 2054 40 2048 41 41 62 1500 41 123 856 2055 61 2056 321 2057 40 2053 44 2049 41 59 688 40 2055 60 2049 41 123 2058 40 38 2047 46 2048 91 1500 93 44 38 2048 91 1500 93 44 2055 41 59 330 2059 40 38 2047 46 2048 91 1500 93 43 2055 44 1500 44 2049 45 2055 41 59 125 630 123 2060 40 38 2047 46 2048 91 1500 93 44 38 2048 91 1500 93 44 2055 41 59 125 2061 40 2031 354 2062 40 41 44 38 2047 41 59 688 40 2053 329 2049 41 123 572 59 125 630 123 2048 348 2049 59 125 2047 46 2051 348 1501 59 125 792 829 59 125 125 125 125 792 655 59 125 125 59 ,"{'AvgLine': 8, 'CountLine': 88, 'CountStmt': 23, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 65, 'CountStmtDecl': 19, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 65, 'CountLineCodeExe': 5, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 28, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118061,C++,"class TunePublisher
{
public:
	void set_tune_string(const char *tune, const hrt_abstime &now);
	void publish_next_tune(const hrt_abstime now);

private:
	static constexpr unsigned MAX_TUNE_LEN {248};

	Tunes _tunes {};
	char _tune_buffer[MAX_TUNE_LEN] {0};
	hrt_abstime _next_publish_time {0};

	uORB::Publication<tune_control_s> _tune_control_pub{ORB_ID(tune_control)};
};",0,587 2000 123 777 58 865 2001 40 601 582 42 2002 44 601 2003 38 2004 41 59 865 2005 40 601 2003 2004 41 59 773 58 809 603 856 2006 123 1504 125 59 2007 2008 123 125 59 582 2009 91 2006 93 123 1500 125 59 2003 2010 123 1500 125 59 2011 321 2012 60 2013 62 2014 123 2015 40 2016 41 125 59 125 59 ,"{'AvgLine': 25, 'CountLine': 65, 'CountStmt': 25, 'MaxNesting': 2, 'AvgLineCode': 18, 'AvgEssential': 2, 'AvgLineBlank': 4, 'CountStmtExe': 14, 'MaxEssential': 3, 'SumEssential': 4, 'AvgCyclomatic': 3, 'CountLineCode': 48, 'CountStmtDecl': 13, 'MaxCyclomatic': 4, 'SumCyclomatic': 7, 'AltAvgLineCode': 18, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 2, 'AltCountLineCode': 48, 'CountLineCodeExe': 13, 'CountLineComment': 5, 'AltAvgLineComment': 2, 'AltCountLineBlank': 12, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
118077,C++,"class RGBLED_PWM : public px4::ScheduledWorkItem
{
public:
	RGBLED_PWM();
	virtual ~RGBLED_PWM();

	int			init();
	int			status();

private:

	uint8_t			_r{0};
	uint8_t			_g{0};
	uint8_t			_b{0};

	volatile bool		_running{false};
	volatile bool		_should_run{true};

	LedController		_led_controller;

	void			Run() override;

	int			send_led_rgb();
	int			get(bool &on, bool &powersave, uint8_t &r, uint8_t &g, uint8_t &b);
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 59 704 2003 40 41 59 704 2004 40 41 59 773 58 2005 2006 123 1500 125 59 2005 2007 123 1500 125 59 2005 2008 123 1500 125 59 866 569 2009 123 655 125 59 866 569 2010 123 829 125 59 2011 2012 59 865 2013 40 41 2014 59 704 2015 40 41 59 704 2016 40 569 38 2017 44 569 38 2018 44 2005 38 2019 44 2005 38 2020 44 2005 38 2021 41 59 125 59 ,"{'AvgLine': 18, 'CountLine': 151, 'CountStmt': 77, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 56, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 109, 'CountStmtDecl': 22, 'MaxCyclomatic': 5, 'SumCyclomatic': 14, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 28, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 7, 'AltCountLineCode': 119, 'CountLineCodeExe': 42, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 28, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 6, 'CountDeclMethodAll': 42, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 79, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
118080,C++,"class ManualControlSelector
{
public:
	void setRcInMode(int32_t rc_in_mode) { _rc_in_mode = rc_in_mode; }
	void setTimeout(uint64_t timeout) { _timeout = timeout; }
	void updateValidityOfChosenInput(uint64_t now);
	void updateWithNewInputSample(uint64_t now, const manual_control_setpoint_s &input, int instance);
	manual_control_setpoint_s &setpoint();
	int instance() const { return _instance; };

private:
	bool isInputValid(const manual_control_setpoint_s &input, uint64_t now) const;

	manual_control_setpoint_s _setpoint{};
	uint64_t _timeout{0};
	int32_t _rc_in_mode{0};
	int _instance{-1};
	uint8_t _first_valid_source{manual_control_setpoint_s::SOURCE_UNKNOWN};
};",0,587 2000 123 777 58 865 2001 40 2002 2003 41 123 2004 61 2003 59 125 865 2005 40 2006 2007 41 123 2008 61 2007 59 125 865 2009 40 2006 2010 41 59 865 2011 40 2006 2010 44 601 2012 38 2013 44 704 2014 41 59 2012 38 2015 40 41 59 704 2014 40 41 601 123 792 2016 59 125 59 773 58 569 2017 40 601 2012 38 2013 44 2006 2010 41 601 59 2012 2018 123 125 59 2006 2019 123 1500 125 59 2002 2020 123 1500 125 59 704 2021 123 45 1501 125 59 2022 2023 123 2012 321 2024 125 59 125 59 ,"{'AvgLine': 8, 'CountLine': 73, 'CountStmt': 30, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 61, 'CountStmtDecl': 20, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 61, 'CountLineCodeExe': 9, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 82, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
118123,C++,"class KalmanFilter
{
public:
	/**
	 * Default constructor, state not initialized
	 */
	KalmanFilter() {};

	/**
	 * Constructor, initialize state
	 */
	KalmanFilter(matrix::Vector<float, 2> &initial, matrix::Matrix<float, 2, 2> &covInit);

	/**
	 * Default desctructor
	 */
	virtual ~KalmanFilter() {};

	/**
	 * Initialize filter state
	 * @param initial initial state
	 * @param covInit initial covariance
	 */
	void init(matrix::Vector<float, 2> &initial, matrix::Matrix<float, 2, 2> &covInit);

	/**
	 * Initialize filter state, only specifying diagonal covariance elements
	 * @param initial0  first initial state
	 * @param initial1  second initial state
	 * @param covInit00 initial variance of first state
	 * @param covinit11 initial variance of second state
	 */
	void init(float initial0, float initial1, float covInit00, float covInit11);

	/**
	 * Predict the state with an external acceleration estimate
	 * @param dt            Time delta in seconds since last state change
	 * @param acc           Acceleration estimate
	 * @param acc_unc       Variance of acceleration estimate
	 */
	void predict(float dt, float acc, float acc_unc);

	/**
	 * Update the state estimate with a measurement
	 * @param meas    state measeasurement
	 * @param measUnc measurement uncertainty
	 * @return update success (measurement not rejected)
	 */
	bool update(float meas, float measUnc);

	/**
	 * Get the current filter state
	 * @param x1 State
	 */
	void getState(matrix::Vector<float, 2> &state);

	/**
	 * Get the current filter state
	 * @param state0 First state
	 * @param state1 Second state
	 */
	void getState(float &state0, float &state1);

	/**
	 * Get state covariance
	 * @param covariance Covariance of the state
	 */
	void getCovariance(matrix::Matrix<float, 2, 2> &covariance);

	/**
	 * Get state variances (diagonal elements)
	 * @param cov00 Variance of first state
	 * @param cov11 Variance of second state
	 */
	void getCovariance(float &cov00, float &cov11);

	/**
	 * Get measurement innovation and covariance of last update call
	 * @param innov Measurement innovation
	 * @param innovCov Measurement innovation covariance
	 */
	void getInnovations(float &innov, float &innovCov);

private:
	matrix::Vector<float, 2> _x; // state

	matrix::Matrix<float, 2, 2> _covariance; // state covariance

	float _residual{0.0f}; // residual of last measurement update

	float _innovCov{0.0f}; // innovation covariance of last measurement update
};",0,587 2000 123 777 58 306 2000 40 41 123 125 59 306 2000 40 2001 321 2002 60 660 44 1502 62 38 2003 44 2001 321 2004 60 660 44 1502 44 1502 62 38 2005 41 59 306 864 126 2000 40 41 123 125 59 306 865 2006 40 2001 321 2002 60 660 44 1502 62 38 2003 44 2001 321 2004 60 660 44 1502 44 1502 62 38 2005 41 59 306 865 2006 40 660 2007 44 660 2008 44 660 2009 44 660 2010 41 59 306 865 2011 40 660 2012 44 660 2013 44 660 2014 41 59 306 569 2015 40 660 2016 44 660 2017 41 59 306 865 2018 40 2001 321 2002 60 660 44 1502 62 38 2019 41 59 306 865 2018 40 660 38 2020 44 660 38 2021 41 59 306 865 2022 40 2001 321 2004 60 660 44 1502 44 1502 62 38 2023 41 59 306 865 2022 40 660 38 2024 44 660 38 2025 41 59 306 865 2026 40 660 38 2027 44 660 38 2028 41 59 773 58 2001 321 2002 60 660 44 1502 62 2029 59 330 2001 321 2004 60 660 44 1502 44 1502 62 2030 59 330 660 2031 123 1500 125 59 330 660 2032 123 1500 125 59 330 125 59 ,"{'AvgLine': 8, 'CountLine': 189, 'CountStmt': 66, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 38, 'MaxEssential': 1, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 98, 'CountStmtDecl': 29, 'MaxCyclomatic': 2, 'SumCyclomatic': 13, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 31, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 12, 'AltCountLineCode': 98, 'CountLineCodeExe': 51, 'CountLineComment': 67, 'AltAvgLineComment': 0, 'AltCountLineBlank': 31, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.68', 'AltCountLineComment': 67, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 67, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
118136,C++,"class MavlinkStreamRCChannels : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamRCChannels(mavlink); }

	static constexpr const char *get_name_static() { return ""RC_CHANNELS""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_RC_CHANNELS; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _input_rc_sub.advertised() ? (MAVLINK_MSG_ID_RC_CHANNELS_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES) : 0;
	}

private:
	explicit MavlinkStreamRCChannels(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _input_rc_sub{ORB_ID(input_rc)};

	bool send() override
	{
		input_rc_s rc;

		if (_input_rc_sub.update(&rc)) {
			// send RC channel data and RSSI
			mavlink_rc_channels_t msg{};

			msg.time_boot_ms = rc.timestamp / 1000;
			msg.chancount = rc.channel_count;
			msg.chan1_raw  = (rc.channel_count > 0)  ? rc.values[0]  : UINT16_MAX;
			msg.chan2_raw  = (rc.channel_count > 1)  ? rc.values[1]  : UINT16_MAX;
			msg.chan3_raw  = (rc.channel_count > 2)  ? rc.values[2]  : UINT16_MAX;
			msg.chan4_raw  = (rc.channel_count > 3)  ? rc.values[3]  : UINT16_MAX;
			msg.chan5_raw  = (rc.channel_count > 4)  ? rc.values[4]  : UINT16_MAX;
			msg.chan6_raw  = (rc.channel_count > 5)  ? rc.values[5]  : UINT16_MAX;
			msg.chan7_raw  = (rc.channel_count > 6)  ? rc.values[6]  : UINT16_MAX;
			msg.chan8_raw  = (rc.channel_count > 7)  ? rc.values[7]  : UINT16_MAX;
			msg.chan9_raw  = (rc.channel_count > 8)  ? rc.values[8]  : UINT16_MAX;
			msg.chan10_raw = (rc.channel_count > 9)  ? rc.values[9]  : UINT16_MAX;
			msg.chan11_raw = (rc.channel_count > 10) ? rc.values[10] : UINT16_MAX;
			msg.chan12_raw = (rc.channel_count > 11) ? rc.values[11] : UINT16_MAX;
			msg.chan13_raw = (rc.channel_count > 12) ? rc.values[12] : UINT16_MAX;
			msg.chan14_raw = (rc.channel_count > 13) ? rc.values[13] : UINT16_MAX;
			msg.chan15_raw = (rc.channel_count > 14) ? rc.values[14] : UINT16_MAX;
			msg.chan16_raw = (rc.channel_count > 15) ? rc.values[15] : UINT16_MAX;
			msg.chan17_raw = (rc.channel_count > 16) ? rc.values[16] : UINT16_MAX;
			msg.chan18_raw = (rc.channel_count > 17) ? rc.values[17] : UINT16_MAX;
			msg.rssi = (rc.channel_count > 0) ? rc.rssi : 0;

			mavlink_msg_rc_channels_send_struct(_mavlink->get_channel(), &msg);
			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 40 2015 43 2016 41 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 330 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 47 1504 59 2027 46 2030 61 2024 46 2031 59 2027 46 2032 61 40 2024 46 2031 62 1500 41 63 2024 46 2033 91 1500 93 58 2034 59 2027 46 2035 61 40 2024 46 2031 62 1501 41 63 2024 46 2033 91 1501 93 58 2034 59 2027 46 2036 61 40 2024 46 2031 62 1502 41 63 2024 46 2033 91 1502 93 58 2034 59 2027 46 2037 61 40 2024 46 2031 62 1502 41 63 2024 46 2033 91 1502 93 58 2034 59 2027 46 2038 61 40 2024 46 2031 62 1502 41 63 2024 46 2033 91 1502 93 58 2034 59 2027 46 2039 61 40 2024 46 2031 62 1502 41 63 2024 46 2033 91 1502 93 58 2034 59 2027 46 2040 61 40 2024 46 2031 62 1502 41 63 2024 46 2033 91 1502 93 58 2034 59 2027 46 2041 61 40 2024 46 2031 62 1502 41 63 2024 46 2033 91 1502 93 58 2034 59 2027 46 2042 61 40 2024 46 2031 62 1502 41 63 2024 46 2033 91 1502 93 58 2034 59 2027 46 2043 61 40 2024 46 2031 62 1502 41 63 2024 46 2033 91 1502 93 58 2034 59 2027 46 2044 61 40 2024 46 2031 62 1502 41 63 2024 46 2033 91 1502 93 58 2034 59 2027 46 2045 61 40 2024 46 2031 62 1503 41 63 2024 46 2033 91 1503 93 58 2034 59 2027 46 2046 61 40 2024 46 2031 62 1503 41 63 2024 46 2033 91 1503 93 58 2034 59 2027 46 2047 61 40 2024 46 2031 62 1503 41 63 2024 46 2033 91 1503 93 58 2034 59 2027 46 2048 61 40 2024 46 2031 62 1503 41 63 2024 46 2033 91 1503 93 58 2034 59 2027 46 2049 61 40 2024 46 2031 62 1503 41 63 2024 46 2033 91 1503 93 58 2034 59 2027 46 2050 61 40 2024 46 2031 62 1503 41 63 2024 46 2033 91 1503 93 58 2034 59 2027 46 2051 61 40 2024 46 2031 62 1503 41 63 2024 46 2033 91 1503 93 58 2034 59 2027 46 2052 61 40 2024 46 2031 62 1500 41 63 2024 46 2052 58 1500 59 2053 40 2054 354 2055 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 58, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 47, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 47, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118192,C++,"class BMP280 : public I2CSPIDriver<BMP280>
{
public:
	BMP280(const I2CSPIDriverConfig &config, bmp280::IBMP280 *interface);
	virtual ~BMP280();

	static I2CSPIDriverBase *instantiate(const I2CSPIDriverConfig &config, int runtime_instance);
	static void print_usage();

	int			init();
	void			print_status();

	void			RunImpl();
private:
	void			Start();

	int			measure(); //start measure
	int			collect(); //get results and publish

	PX4Barometer		_px4_baro;

	bmp280::IBMP280		*_interface;

	// set config, recommended settings
	static constexpr uint8_t	_curr_ctrl{BMP280_CTRL_P16 | BMP280_CTRL_T2};
	static constexpr uint32_t	_measure_interval{BMP280_MT_INIT + BMP280_MT *(16 - 1 + 2 - 1)};

	bool			_collect_phase{false};

	perf_counter_t		_sample_perf;
	perf_counter_t		_measure_perf;
	perf_counter_t		_comms_errors;

	bmp280::calibration_s	*_cal{nullptr}; //stored calibration constants
	bmp280::fcalibration_s	_fcal{}; //pre processed calibration constants
};",0,587 2000 58 777 2001 60 2000 62 123 777 58 2000 40 601 2002 38 2003 44 2004 321 2005 42 2006 41 59 864 126 2000 40 41 59 809 2007 42 2008 40 601 2002 38 2003 44 704 2009 41 59 809 865 2010 40 41 59 704 2011 40 41 59 865 2012 40 41 59 865 2013 40 41 59 773 58 865 2014 40 41 59 704 2015 40 41 59 330 704 2016 40 41 59 330 2017 2018 59 2004 321 2005 42 2019 59 330 809 603 2020 2021 123 2022 124 2023 125 59 809 603 2024 2025 123 2026 43 2027 42 40 1503 45 1501 43 1502 45 1501 41 125 59 569 2028 123 655 125 59 2029 2030 59 2029 2031 59 2029 2032 59 2004 321 2033 42 2034 123 753 125 59 330 2004 321 2035 2036 123 125 59 330 125 59 ,"{'AvgLine': 21, 'CountLine': 246, 'CountStmt': 107, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 70, 'MaxEssential': 5, 'SumEssential': 14, 'AvgCyclomatic': 1, 'CountLineCode': 167, 'CountStmtDecl': 37, 'MaxCyclomatic': 6, 'SumCyclomatic': 19, 'AltAvgLineCode': 15, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 46, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 4, 'CountDeclMethod': 10, 'AltCountLineCode': 182, 'CountLineCodeExe': 73, 'CountLineComment': 20, 'AltAvgLineComment': 1, 'AltCountLineBlank': 51, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 27, 'CountLineInactive': 13, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 20, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 7, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 79, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 7, 'CountDeclInstanceVariableProtected': 0}"
118188,C++,"class MavlinkStreamRawRpm : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamRawRpm(mavlink); }

	static constexpr const char *get_name_static() { return ""RAW_RPM""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_RAW_RPM; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _rpm_sub.advertised() ? (MAVLINK_MSG_ID_RAW_RPM_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES) : 0;
	}

private:
	explicit MavlinkStreamRawRpm(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _rpm_sub{ORB_ID(rpm)};

	bool send() override
	{
		rpm_s rpm;

		if (_rpm_sub.update(&rpm)) {
			mavlink_raw_rpm_t msg{};

			msg.frequency = rpm.indicated_frequency_rpm;

			mavlink_msg_raw_rpm_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 40 2015 43 2016 41 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 59 2030 40 2031 354 2032 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 38, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 27, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 27, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118223,C++,"class CanDriver : public uavcan::ICanDriver
	, uavcan::Noncopyable
{
	BusEvent update_event_;
	CanIface if0_;
#if UAVCAN_KINETIS_NUM_IFACES > 1
	CanIface if1_;
#endif

	virtual uavcan::int16_t select(uavcan::CanSelectMasks &inout_masks,
				       const uavcan::CanFrame * (&pending_tx)[uavcan::MaxCanIfaces],
				       uavcan::MonotonicTime blocking_deadline);

	static void initOnce();

public:
	template <unsigned RxQueueCapacity>
	CanDriver(CanRxItem(&rx_queue_storage)[UAVCAN_KINETIS_NUM_IFACES][RxQueueCapacity])
		: update_event_(*this),
		  if0_(flexcan::Can[0], update_event_, 0, rx_queue_storage[0], RxQueueCapacity)
#if UAVCAN_KINETIS_NUM_IFACES > 1
		, if1_(flexcan::Can[1], update_event_, 1, rx_queue_storage[1], RxQueueCapacity)
#endif
	{
		uavcan::StaticAssert < (RxQueueCapacity <= CanIface::MaxRxQueueCapacity) >::check();
	}

	/**
	 * This function returns select masks indicating which interfaces are available for read/write.
	 */
	uavcan::CanSelectMasks makeSelectMasks(const uavcan::CanFrame * (&pending_tx)[uavcan::MaxCanIfaces]) const;

	/**
	 * Whether there's at least one interface where receive() would return a frame.
	 */
	bool hasReadableInterfaces() const;

	/**
	 * Returns zero if OK.
	 * Returns negative value if failed (e.g. invalid bitrate).
	 */
	int init(const uavcan::uint32_t bitrate, const CanIface::OperatingMode mode);

	virtual CanIface *getIface(uavcan::uint8_t iface_index);

	virtual uavcan::uint8_t getNumIfaces() const
	{
		return UAVCAN_KINETIS_NUM_IFACES;
	}

	/**
	 * Whether at least one iface had at least one successful IO since previous call of this method.
	 * This is designed for use with iface activity LEDs.
	 */
	bool hadActivity();

	BusEvent &updateEvent() { return update_event_; }
};",0,587 2000 58 777 2001 321 2002 44 2001 321 2003 123 2004 2005 59 2006 2007 59 35 688 2008 62 1501 2006 2009 59 35 636 864 2001 321 2010 2011 40 2001 321 2012 38 2013 44 601 2001 321 2014 42 40 38 2015 41 91 2001 321 2016 93 44 2001 321 2017 2018 41 59 809 865 2019 40 41 59 777 58 822 60 856 2020 62 2000 40 2021 40 38 2022 41 91 2008 93 91 2020 93 41 58 2005 40 42 823 41 44 2007 40 2023 321 2024 91 1500 93 44 2005 44 1500 44 2022 91 1500 93 44 2020 41 35 688 2008 62 1501 44 2009 40 2023 321 2024 91 1501 93 44 2005 44 1501 44 2022 91 1501 93 44 2020 41 35 636 123 2001 321 2025 60 40 2020 329 2006 321 2026 41 62 321 2027 40 41 59 125 306 2001 321 2012 2028 40 601 2001 321 2014 42 40 38 2015 41 91 2001 321 2016 93 41 601 59 306 569 2029 40 41 601 59 306 704 2030 40 601 2001 321 2031 2032 44 601 2006 321 2033 2034 41 59 864 2006 42 2035 40 2001 321 2036 2037 41 59 864 2001 321 2036 2038 40 41 601 123 792 2008 59 125 306 569 2039 40 41 59 2004 38 2040 40 41 123 792 2005 59 125 125 59 ,"{'AvgLine': 18, 'CountLine': 224, 'CountStmt': 42, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 112, 'CountStmtDecl': 23, 'MaxCyclomatic': 3, 'SumCyclomatic': 16, 'AltAvgLineCode': 14, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 28, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 2, 'CountDeclMethod': 10, 'AltCountLineCode': 163, 'CountLineCodeExe': 15, 'CountLineComment': 36, 'AltAvgLineComment': 2, 'AltCountLineBlank': 33, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 34, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.32', 'AltCountLineComment': 37, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 23, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118239,C++,"class RGBLED : public device::I2C, public I2CSPIDriver<RGBLED>
{
public:
	RGBLED(const I2CSPIDriverConfig &config);
	virtual ~RGBLED() = default;

	static void print_usage();

	int		init() override;
	int		probe() override;

	void			RunImpl();

private:
	void			print_status() override;
	int			send_led_enable(bool enable);
	int			send_led_rgb();
	int			get(bool &on, bool &powersave, uint8_t &r, uint8_t &g, uint8_t &b);

	float			_brightness{1.0f};

	uint8_t			_r{0};
	uint8_t			_g{0};
	uint8_t			_b{0};
	bool			_leds_enabled{true};

	LedController		_led_controller;
};",0,587 2000 58 777 2001 321 2002 44 777 2003 60 2000 62 123 777 58 2000 40 601 2004 38 2005 41 59 864 126 2000 40 41 61 613 59 809 865 2006 40 41 59 704 2007 40 41 2008 59 704 2009 40 41 2008 59 865 2010 40 41 59 773 58 865 2011 40 41 2008 59 704 2012 40 569 2013 41 59 704 2014 40 41 59 704 2015 40 569 38 2016 44 569 38 2017 44 2018 38 2019 44 2018 38 2020 44 2018 38 2021 41 59 660 2022 123 1501 125 59 2018 2023 123 1500 125 59 2018 2024 123 1500 125 59 2018 2025 123 1500 125 59 569 2026 123 829 125 59 2027 2028 59 125 59 ,"{'AvgLine': 19, 'CountLine': 201, 'CountStmt': 116, 'MaxNesting': 2, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 80, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 158, 'CountStmtDecl': 34, 'MaxCyclomatic': 5, 'SumCyclomatic': 19, 'AltAvgLineCode': 15, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 36, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 3, 'CountDeclMethod': 10, 'AltCountLineCode': 158, 'CountLineCodeExe': 63, 'CountLineComment': 9, 'AltAvgLineComment': 1, 'AltCountLineBlank': 36, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 27, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
118253,C++,"class FieldSensorBiasEstimator
{
public:
	FieldSensorBiasEstimator() = default;
	~FieldSensorBiasEstimator() = default;

	// Set initial states
	void setField(const matrix::Vector3f &field) { _field_prev = field; }
	void setBias(const matrix::Vector3f &bias) { _state_bias = bias; }
	void setLearningGain(float learning_gain) { _learning_gain = learning_gain; }

	/**
	 * Update the estimator and extract updated biases.
	 * @param gyro bias corrected gyroscope data in the same coordinate frame as the field sensor data
	 * @param field biased field sensor data
	 * @param dt time in seconds since the last update
	 */
	void updateEstimate(const matrix::Vector3f &gyro, const matrix::Vector3f &field, const float dt)
	{
		const matrix::Vector3f field_pred = _field_prev + (-gyro % (_field_prev - _state_bias)) * dt;
		const matrix::Vector3f field_innov = field - field_pred;
		_state_bias += _learning_gain * (-gyro % field_innov) * dt;
		_field_prev = field;
	}

	const matrix::Vector3f &getField() { return _field_prev; }
	const matrix::Vector3f &getBias() { return _state_bias; }

private:
	// states
	matrix::Vector3f _field_prev{};
	matrix::Vector3f _state_bias{};
	float _learning_gain{20.f};
};",0,587 2000 123 777 58 2000 40 41 61 613 59 126 2000 40 41 61 613 59 330 865 2001 40 601 2002 321 2003 38 2004 41 123 2005 61 2004 59 125 865 2006 40 601 2002 321 2003 38 2007 41 123 2008 61 2007 59 125 865 2009 40 660 2010 41 123 2011 61 2010 59 125 306 865 2012 40 601 2002 321 2003 38 2013 44 601 2002 321 2003 38 2004 44 601 660 2014 41 123 601 2002 321 2003 2015 61 2016 43 40 45 2013 37 40 2016 45 2017 41 41 42 2014 59 601 2002 321 2003 2018 61 2004 45 2015 59 2017 348 2019 42 40 45 2013 37 2018 41 42 2014 59 2016 61 2004 59 125 601 2002 321 2003 38 2020 40 41 123 792 2021 59 125 601 2002 321 2003 38 2022 40 41 123 792 2023 59 125 773 58 330 2002 321 2003 2024 123 125 59 2002 321 2003 2025 123 125 59 660 2026 123 1503 125 59 125 59 ,"{'AvgLine': 2, 'CountLine': 33, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 21, 'CountLineCodeExe': 1, 'CountLineComment': 8, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.38', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118266,C++,"class EkfReplayTest : public ::testing::Test
{
public:
	EkfReplayTest(): ::testing::Test(),
		_ekf{std::make_shared<Ekf>()},
		_sensor_simulator(_ekf),
		_ekf_wrapper(_ekf),
		_ekf_logger(_ekf) {};

	std::shared_ptr<Ekf> _ekf;
	SensorSimulator _sensor_simulator;
	EkfWrapper _ekf_wrapper;
	EkfLogger _ekf_logger;
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 2000 40 41 58 321 2001 321 2002 40 41 44 2003 123 2004 321 2005 60 2006 62 40 41 125 44 2007 40 2003 41 44 2008 40 2003 41 44 2009 40 2003 41 123 125 59 2010 321 2011 60 2012 62 2003 59 2013 2007 59 2014 2008 59 2015 2009 59 125 59 ,"{'AvgLine': 5, 'CountLine': 14, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 13, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118274,C++,"class MavlinkStreamGPSStatus : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamGPSStatus(mavlink); }

	static constexpr const char *get_name_static() { return ""GPS_STATUS""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_GPS_STATUS; }

	const char *get_name() const override { return MavlinkStreamGPSStatus::get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _satellite_info_sub.advertised() ? (MAVLINK_MSG_ID_GPS_STATUS_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES) : 0;
	}

private:
	explicit MavlinkStreamGPSStatus(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _satellite_info_sub{ORB_ID(satellite_info)};

	bool send() override
	{
		satellite_info_s sat;

		if (_satellite_info_sub.update(&sat)) {
			mavlink_gps_status_t msg{};

			msg.satellites_visible = sat.count;

			size_t sat_count = math::min(static_cast<size_t>(sat.count),
						     sizeof(msg.satellite_used) / sizeof(msg.satellite_used[0]));

			for (size_t i = 0; i < sat_count; i++) {
				msg.satellite_used[i]      = sat.used[i];
				msg.satellite_elevation[i] = sat.elevation[i];
				msg.satellite_azimuth[i]   = sat.azimuth[i];
				msg.satellite_snr[i]       = sat.snr[i];
				msg.satellite_prn[i]       = sat.prn[i];
			}

			mavlink_msg_gps_status_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2000 321 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 40 2015 43 2016 41 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 59 2030 2031 61 2032 321 2033 40 811 60 2030 62 40 2024 46 2029 41 44 805 40 2027 46 2034 41 47 805 40 2027 46 2034 91 1500 93 41 41 59 664 40 2030 2035 61 1500 59 2035 60 2031 59 2035 349 41 123 2027 46 2034 91 2035 93 61 2024 46 2036 91 2035 93 59 2027 46 2037 91 2035 93 61 2024 46 2038 91 2035 93 59 2027 46 2039 91 2035 93 61 2024 46 2040 91 2035 93 59 2027 46 2041 91 2035 93 61 2024 46 2042 91 2035 93 59 2027 46 2043 91 2035 93 61 2024 46 2044 91 2035 93 59 125 2045 40 2046 354 2047 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 49, 'CountStmt': 19, 'MaxNesting': 2, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 13, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 36, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118290,C++,"class MavlinkStreamAutopilotVersion : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamAutopilotVersion(mavlink); }

	static constexpr const char *get_name_static() { return ""AUTOPILOT_VERSION""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_AUTOPILOT_VERSION; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return MAVLINK_MSG_ID_AUTOPILOT_VERSION_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
	}

private:
	explicit MavlinkStreamAutopilotVersion(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	bool send() override
	{
		return _mavlink->send_autopilot_capabilities();
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 43 2014 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 569 2015 40 41 2010 123 792 2016 354 2017 40 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 24, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 19, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118293,C++,"class MavlinkStreamScaledIMU : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamScaledIMU(mavlink); }

	static constexpr const char *get_name_static() { return ""SCALED_IMU""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_SCALED_IMU; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		if (_vehicle_imu_sub.advertised() || _sensor_mag_sub.advertised()) {
			return MAVLINK_MSG_ID_SCALED_IMU_LEN  + MAVLINK_NUM_NON_PAYLOAD_BYTES;
		}

		return 0;
	}

private:
	explicit MavlinkStreamScaledIMU(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _vehicle_imu_sub{ORB_ID(vehicle_imu), 0};
	uORB::Subscription _sensor_mag_sub{ORB_ID(sensor_mag), 0};

	bool send() override
	{
		if (_vehicle_imu_sub.updated() || _sensor_mag_sub.updated()) {
			mavlink_scaled_imu_t msg{};

			vehicle_imu_s imu;

			if (_vehicle_imu_sub.copy(&imu)) {
				msg.time_boot_ms = imu.timestamp / 1000;

				// Accelerometer in mG
				const float accel_dt_inv = 1.e6f / (float)imu.delta_velocity_dt;
				const Vector3f accel = Vector3f{imu.delta_velocity} * accel_dt_inv * 1000.0f / CONSTANTS_ONE_G;
				msg.xacc = (int16_t)accel(0);
				msg.yacc = (int16_t)accel(1);
				msg.zacc = (int16_t)accel(2);

				// Gyroscope in mrad/s
				const float gyro_dt_inv = 1.e6f / (float)imu.delta_velocity_dt;
				const Vector3f gyro = Vector3f{imu.delta_angle} * gyro_dt_inv * 1000.0f;
				msg.xgyro = gyro(0);
				msg.ygyro = gyro(1);
				msg.zgyro = gyro(2);
			}

			sensor_mag_s sensor_mag;

			if (_sensor_mag_sub.copy(&sensor_mag)) {
				if (msg.time_boot_ms == 0) {
					msg.time_boot_ms = sensor_mag.timestamp / 1000;
				}

				msg.xmag = sensor_mag.x * 1000.0f; // Gauss -> MilliGauss
				msg.ymag = sensor_mag.y * 1000.0f; // Gauss -> MilliGauss
				msg.zmag = sensor_mag.z * 1000.0f; // Gauss -> MilliGauss
				msg.temperature = sensor_mag.temperature;
			}

			mavlink_msg_scaled_imu_send_struct(_mavlink->get_channel(), &msg);
			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 688 40 2013 46 2014 40 41 309 2015 46 2014 40 41 41 123 792 2016 43 2017 59 125 792 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2018 321 2019 2020 123 2021 40 2022 41 44 1500 125 59 2018 321 2019 2023 123 2024 40 2025 41 44 1500 125 59 569 2026 40 41 2010 123 688 40 2020 46 2027 40 41 309 2023 46 2027 40 41 41 123 2028 2029 123 125 59 2030 2031 59 688 40 2020 46 2032 40 38 2031 41 41 123 2029 46 2033 61 2031 46 2034 47 1504 59 330 601 660 2035 61 1507 47 40 660 41 2031 46 2036 59 601 2037 2038 61 2037 123 2031 46 2039 125 42 2035 42 1504 47 2040 59 2029 46 2041 61 40 2042 41 2038 40 1500 41 59 2029 46 2043 61 40 2042 41 2038 40 1501 41 59 2029 46 2044 61 40 2042 41 2038 40 1502 41 59 330 601 660 2045 61 1507 47 40 660 41 2031 46 2036 59 601 2037 2046 61 2037 123 2031 46 2047 125 42 2045 42 1504 59 2029 46 2048 61 2046 40 1500 41 59 2029 46 2049 61 2046 40 1501 41 59 2029 46 2050 61 2046 40 1502 41 59 125 2051 2052 59 688 40 2023 46 2032 40 38 2052 41 41 123 688 40 2029 46 2053 323 1500 41 123 2029 46 2053 61 2052 46 2054 47 1504 59 125 2029 46 2055 61 2052 46 2056 42 1504 59 330 2029 46 2057 61 2052 46 2058 42 1504 59 330 2029 46 2059 61 2052 46 2060 42 1504 59 330 2029 46 2061 61 2052 46 2061 59 125 2062 40 2063 354 2064 40 41 44 38 2029 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 71, 'CountStmt': 27, 'MaxNesting': 3, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 53, 'CountStmtDecl': 17, 'MaxCyclomatic': 5, 'SumCyclomatic': 13, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 53, 'CountLineCodeExe': 6, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118309,C++,"class RGBLED_NCP5623C : public device::I2C
{
public:
	RGBLED_NCP5623C(const int bus, int bus_frequency, const int address);
	virtual ~RGBLED_NCP5623C() = default;

	int   init() override;
	int   probe() override;

	int   send_led_rgb(uint8_t red, uint8_t green, uint8_t blue);


private:
	float     _brightness{1.0f};
	float     _max_brightness{1.0f};

	int     write(uint8_t reg, uint8_t data);
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 601 704 2003 44 704 2004 44 601 704 2005 41 59 864 126 2000 40 41 61 613 59 704 2006 40 41 2007 59 704 2008 40 41 2007 59 704 2009 40 2010 2011 44 2010 2012 44 2010 2013 41 59 773 58 660 2014 123 1501 125 59 660 2015 123 1501 125 59 704 2016 40 2010 2017 44 2010 2018 41 59 125 59 ,"{'AvgLine': 8, 'CountLine': 61, 'CountStmt': 22, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 49, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 49, 'CountLineCodeExe': 18, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118298,C++,"template<class T>
class IntrusiveQueueNode
{
private:
	friend IntrusiveQueue<T>;

	T next_intrusive_queue_node() const { return _next_intrusive_queue_node; }
	void set_next_intrusive_queue_node(T new_next) { _next_intrusive_queue_node = new_next; }

	T _next_intrusive_queue_node{nullptr};
};",0,822 60 587 2000 62 587 2001 123 773 58 667 2002 60 2000 62 59 2000 2003 40 41 601 123 792 2004 59 125 865 2005 40 2000 2006 41 123 2007 61 2006 59 125 2000 2008 123 753 125 59 125 59 ,"{'AvgLine': 1, 'CountLine': 10, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 8, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 9, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118314,C++,"class EscBattery : public ModuleBase<EscBattery>, public ModuleParams, public px4::WorkItem
{
public:
	EscBattery();
	~EscBattery() = default;

	/** @see ModuleBase */
	static int task_spawn(int argc, char *argv[]);

	/** @see ModuleBase */
	static int custom_command(int argc, char *argv[]);

	/** @see ModuleBase */
	static int print_usage(const char *reason = nullptr);

	bool init();

private:
	void Run() override;

	void parameters_updated();

	uORB::SubscriptionInterval _parameter_update_sub{ORB_ID(parameter_update), 1_s};
	uORB::SubscriptionCallbackWorkItem _esc_status_sub{this, ORB_ID(esc_status)};

	static constexpr uint32_t ESC_BATTERY_INTERVAL_US = 20_ms; // assume higher frequency esc feedback than 50Hz
	Battery _battery;
};",0,587 2000 58 777 2001 60 2000 62 44 777 2002 44 777 2003 321 2004 123 777 58 2000 40 41 59 126 2000 40 41 61 613 59 306 809 704 2005 40 704 2006 44 582 42 2007 91 93 41 59 306 809 704 2008 40 704 2006 44 582 42 2007 91 93 41 59 306 809 704 2009 40 601 582 42 2010 61 753 41 59 569 2011 40 41 59 773 58 865 2012 40 41 2013 59 865 2014 40 41 59 2015 321 2016 2017 123 2018 40 2019 41 44 1501 125 59 2015 321 2020 2021 123 823 44 2022 40 2023 41 125 59 809 603 2024 2025 61 1503 59 330 2026 2027 59 125 59 ,"{'AvgLine': 15, 'CountLine': 135, 'CountStmt': 49, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 30, 'MaxEssential': 4, 'SumEssential': 12, 'AvgCyclomatic': 2, 'CountLineCode': 103, 'CountStmtDecl': 18, 'MaxCyclomatic': 5, 'SumCyclomatic': 18, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 28, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 2, 'CountDeclMethod': 8, 'AltCountLineCode': 103, 'CountLineCodeExe': 26, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 28, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 42, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118319,C++,"class MavlinkStreamTimesync : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamTimesync(mavlink); }

	static constexpr const char *get_name_static() { return ""TIMESYNC""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_TIMESYNC; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return MAVLINK_MSG_ID_TIMESYNC_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES;
	}

private:
	explicit MavlinkStreamTimesync(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	bool send() override
	{
		mavlink_timesync_t msg{};

		msg.tc1 = 0;
		msg.ts1 = hrt_absolute_time() * 1000; // boot time in nanoseconds

		mavlink_msg_timesync_send_struct(_mavlink->get_channel(), &msg);

		return true;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 43 2014 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 569 2015 40 41 2010 123 2016 2017 123 125 59 2017 46 2018 61 1500 59 2017 46 2019 61 2020 40 41 42 1504 59 330 2021 40 2022 354 2023 40 41 44 38 2017 41 59 792 829 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 31, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 23, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 23, 'CountLineCodeExe': 4, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118332,C++,"class PositionControlBasicDirectionTest : public PositionControlBasicTest
{
public:
	void checkDirection()
	{
		Vector3f thrust(_output_setpoint.thrust);
		EXPECT_GT(thrust(0), 0.f);
		EXPECT_GT(thrust(1), 0.f);
		EXPECT_LT(thrust(2), 0.f);

		Vector3f body_z = Quatf(_attitude.q_d).dcm_z();
		EXPECT_LT(body_z(0), 0.f);
		EXPECT_LT(body_z(1), 0.f);
		EXPECT_GT(body_z(2), 0.f);
	}
};",0,587 2000 58 777 2001 123 777 58 865 2002 40 41 123 2003 2004 40 2005 46 2004 41 59 2006 40 2004 40 1500 41 44 1500 41 59 2006 40 2004 40 1501 41 44 1500 41 59 2007 40 2004 40 1502 41 44 1500 41 59 2003 2008 61 2009 40 2010 46 2011 41 46 2012 40 41 59 2007 40 2008 40 1500 41 44 1500 41 59 2007 40 2008 40 1501 41 44 1500 41 59 2006 40 2008 40 1502 41 44 1500 41 59 125 125 59 ,"{'AvgLine': 12, 'CountLine': 16, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 1, 'AltCountLineCode': 15, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117710,C++,"class CameraFeedback : public ModuleBase<CameraFeedback>, public ModuleParams, public px4::WorkItem
{
public:
	CameraFeedback();
	~CameraFeedback() override = default;

	/** @see ModuleBase */
	static int task_spawn(int argc, char *argv[]);

	/** @see ModuleBase */
	static int custom_command(int argc, char *argv[]);

	/** @see ModuleBase */
	static int print_usage(const char *reason = nullptr);

	bool init();

private:

	void Run() override;

	uORB::SubscriptionCallbackWorkItem _trigger_sub{this, ORB_ID(camera_trigger)};

	uORB::Subscription	_gpos_sub{ORB_ID(vehicle_global_position)};
	uORB::Subscription	_att_sub{ORB_ID(vehicle_attitude)};

	uORB::Publication<camera_capture_s>	_capture_pub{ORB_ID(camera_capture)};

	param_t _p_cam_cap_fback;
	int32_t _cam_cap_fback{0};
};",0,587 2000 58 777 2001 60 2000 62 44 777 2002 44 777 2003 321 2004 123 777 58 2000 40 41 59 126 2000 40 41 2005 61 613 59 306 809 704 2006 40 704 2007 44 582 42 2008 91 93 41 59 306 809 704 2009 40 704 2007 44 582 42 2008 91 93 41 59 306 809 704 2010 40 601 582 42 2011 61 753 41 59 569 2012 40 41 59 773 58 865 2013 40 41 2005 59 2014 321 2015 2016 123 823 44 2017 40 2018 41 125 59 2014 321 2019 2020 123 2021 40 2022 41 125 59 2014 321 2019 2023 123 2024 40 2025 41 125 59 2014 321 2026 60 2027 62 2028 123 2029 40 2030 41 125 59 2031 2032 59 2033 2034 123 1500 125 59 125 59 ,"{'AvgLine': 21, 'CountLine': 161, 'CountStmt': 45, 'MaxNesting': 2, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 26, 'MaxEssential': 3, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 114, 'CountStmtDecl': 17, 'MaxCyclomatic': 4, 'SumCyclomatic': 15, 'AltAvgLineCode': 16, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 36, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 4, 'CountDeclMethod': 7, 'AltCountLineCode': 114, 'CountLineCodeExe': 23, 'CountLineComment': 11, 'AltAvgLineComment': 1, 'AltCountLineBlank': 36, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 41, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
117735,C++,"class SMBus : public device::I2C
{
public:
	static constexpr uint8_t MAX_BLOCK_LEN = 34;

	SMBus(uint8_t device_id, int bus_num, uint16_t address);
	~SMBus() override;

	/**
	 * @brief Sends a block write command.
	 * @param cmd_code The command code.
	 * @param data The data to be written.
	 * @param length The number of bytes being written. Maximum is SMBus::MAX_BLOCK_LEN.
	 * @return Returns PX4_OK on success, -errno on failure.
	 */
	int block_write(const uint8_t cmd_code, const void *data, uint8_t byte_count, const bool use_pec);

	/**
	 * @brief Sends a block read command.
	 * @param cmd_code The command code.
	 * @param data The returned data.
	 * @param length The number of bytes being read. Maximum is SMBus::MAX_BLOCK_LEN.
	 * @return Returns PX4_OK on success, -errno on failure.
	 */
	int block_read(const uint8_t cmd_code, void *data, const uint8_t length, const bool use_pec);

	/**
	 * @brief Sends a read word command.
	 * @param cmd_code The command code.
	 * @param data The 2 bytes of returned data plus a 1 byte CRC if used.
	 * @return Returns PX4_OK on success, -errno on failure.
	 */
	int read_word(const uint8_t cmd_code, uint16_t &data);

	/**
	 * @brief Sends a write word command.
	 * @param cmd_code The command code.
	 * @param data The 2 bytes of data to be transfered.
	 * @return Returns PX4_OK on success, -errno on failure.
	 */
	int write_word(const uint8_t cmd_code, uint16_t data);

	/**
	 * @brief Calculates the PEC from the data.
	 * @param buffer The buffer that stores the data to perform the CRC over.
	 * @param length The number of bytes being written.
	 * @return Returns PX4_OK on success, -errno on failure.
	 */
	uint8_t get_pec(uint8_t *buffer, uint8_t length);

	perf_counter_t _interface_errors{perf_alloc(PC_COUNT, MODULE_NAME"": errors"")};

};",0,587 2000 58 777 2001 321 2002 123 777 58 809 603 2003 2004 61 1503 59 2000 40 2003 2005 44 704 2006 44 2007 2008 41 59 126 2000 40 41 2009 59 306 704 2010 40 601 2003 2011 44 601 865 42 2012 44 2003 2013 44 601 569 2014 41 59 306 704 2015 40 601 2003 2011 44 865 42 2012 44 601 2003 2016 44 601 569 2014 41 59 306 704 2017 40 601 2003 2011 44 2007 38 2012 41 59 306 704 2018 40 601 2003 2011 44 2007 2012 41 59 306 2003 2019 40 2003 42 2020 44 2003 2016 41 59 2021 2022 123 2023 40 2024 44 2025 362 41 125 59 125 59 ,"{'AvgLine': 21, 'CountLine': 206, 'CountStmt': 79, 'MaxNesting': 3, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 57, 'MaxEssential': 3, 'SumEssential': 9, 'AvgCyclomatic': 3, 'CountLineCode': 125, 'CountStmtDecl': 29, 'MaxCyclomatic': 5, 'SumCyclomatic': 21, 'AltAvgLineCode': 16, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 37, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 7, 'AltCountLineCode': 125, 'CountLineCodeExe': 66, 'CountLineComment': 44, 'AltAvgLineComment': 1, 'AltCountLineBlank': 37, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 28, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.35', 'AltCountLineComment': 44, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 23, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117738,C++,"class FXAS21002C_SPI : public device::SPI
{
public:
	FXAS21002C_SPI(int bus, uint32_t chip_select, int bus_frequency, spi_mode_e spi_mode);
	~FXAS21002C_SPI() override = default;

	/**
	 * Read directly from the device.
	 *
	 * The actual size of each unit quantity is device-specific.
	 *
	 * @param reg	The register address at which to start reading
	 * @param data	The buffer into which the read values should be placed.
	 * @param count	The number of items to read.
	 * @return		The number of items read on success, negative errno otherwise.
	 */
	int	read(unsigned reg, void *data, unsigned count) override;

	/**
	 * Write directly to the device.
	 *
	 * The actual size of each unit quantity is device-specific.
	 *
	 * @param reg	The register address at which to start writing.
	 * @param data	The buffer from which values should be read.
	 * @param count	The number of items to write.
	 * @return		The number of items written on success, negative errno otherwise.
	 */
	int	write(unsigned reg, void *data, unsigned count) override;

	/**
	 * Read a register from the device.
	 *
	 * @param		The register to read.
	 * @return		The value that was read.
	 */
	uint8_t read_reg(unsigned reg) override;

	/**
	 * Write a register to the device.
	 *
	 * @param reg		The register to write.
	 * @param value		The new value to write.
	 * @return		OK on success, negative errno otherwise.
	 */
	int write_reg(unsigned reg, uint8_t value) override;

protected:
	int probe() override;
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 2004 2005 44 704 2006 44 2007 2008 41 59 126 2000 40 41 2009 61 613 59 306 704 2010 40 856 2011 44 865 42 2012 44 856 2013 41 2009 59 306 704 2014 40 856 2011 44 865 42 2012 44 856 2013 41 2009 59 306 2015 2016 40 856 2011 41 2009 59 306 704 2017 40 856 2011 44 2015 2018 41 2009 59 775 58 704 2019 40 41 2009 59 125 59 ,"{'AvgLine': 13, 'CountLine': 132, 'CountStmt': 33, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 64, 'CountStmtDecl': 14, 'MaxCyclomatic': 4, 'SumCyclomatic': 10, 'AltAvgLineCode': 8, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 7, 'AltCountLineCode': 64, 'CountLineCodeExe': 25, 'CountLineComment': 47, 'AltAvgLineComment': 2, 'AltCountLineBlank': 21, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.73', 'AltCountLineComment': 47, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117754,C++,"class LIS3MDL_SPI : public device::SPI
{
public:
	LIS3MDL_SPI(int bus, uint32_t devid, int bus_frequency, spi_mode_e spi_mode);
	virtual ~LIS3MDL_SPI() = default;

	virtual int     init();
	virtual int     read(unsigned address, void *data, unsigned count);
	virtual int     write(unsigned address, void *data, unsigned count);
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 704 2003 44 2004 2005 44 704 2006 44 2007 2008 41 59 864 126 2000 40 41 61 613 59 864 704 2009 40 41 59 864 704 2010 40 856 2011 44 865 42 2012 44 856 2013 41 59 864 704 2014 40 856 2011 44 865 42 2012 44 856 2013 41 59 125 59 ,"{'AvgLine': 13, 'CountLine': 64, 'CountStmt': 24, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 15, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 51, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 9, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 51, 'CountLineCodeExe': 14, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117888,C++,"class MavlinkStreamOpticalFlowRad : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamOpticalFlowRad(mavlink); }

	static constexpr const char *get_name_static() { return ""OPTICAL_FLOW_RAD""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_OPTICAL_FLOW_RAD; }

	const char *get_name() const override { return MavlinkStreamOpticalFlowRad::get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _optical_flow_sub.advertised() ? (MAVLINK_MSG_ID_OPTICAL_FLOW_RAD_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES) : 0;
	}

private:
	explicit MavlinkStreamOpticalFlowRad(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _optical_flow_sub{ORB_ID(optical_flow)};

	bool send() override
	{
		optical_flow_s flow;

		if (_optical_flow_sub.update(&flow)) {
			mavlink_optical_flow_rad_t msg{};

			msg.time_usec = flow.timestamp;
			msg.sensor_id = flow.sensor_id;
			msg.integrated_x = flow.pixel_flow_x_integral;
			msg.integrated_y = flow.pixel_flow_y_integral;
			msg.integrated_xgyro = flow.gyro_x_rate_integral;
			msg.integrated_ygyro = flow.gyro_y_rate_integral;
			msg.integrated_zgyro = flow.gyro_z_rate_integral;
			msg.distance = flow.ground_distance_m;
			msg.quality = flow.quality;
			msg.integration_time_us = flow.integration_timespan;
			msg.sensor_id = flow.sensor_id;
			msg.time_delta_distance_us = flow.time_since_last_sonar_update;
			msg.temperature = flow.gyro_temperature;

			mavlink_msg_optical_flow_rad_send_struct(_mavlink->get_channel(), &msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2000 321 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 40 2015 43 2016 41 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 569 2022 40 41 2010 123 2023 2024 59 688 40 2019 46 2025 40 38 2024 41 41 123 2026 2027 123 125 59 2027 46 2028 61 2024 46 2029 59 2027 46 2030 61 2024 46 2030 59 2027 46 2031 61 2024 46 2032 59 2027 46 2033 61 2024 46 2034 59 2027 46 2035 61 2024 46 2036 59 2027 46 2037 61 2024 46 2038 59 2027 46 2039 61 2024 46 2040 59 2027 46 2041 61 2024 46 2042 59 2027 46 2043 61 2024 46 2043 59 2027 46 2044 61 2024 46 2045 59 2027 46 2030 61 2024 46 2030 59 2027 46 2046 61 2024 46 2047 59 2027 46 2048 61 2024 46 2049 59 2050 40 2051 354 2052 40 41 44 38 2027 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 50, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 39, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 39, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117930,C++,"class UavcanIceStatusBridge : public UavcanSensorBridgeBase
{
public:
	static const char *const NAME;

	UavcanIceStatusBridge(uavcan::INode &node);

	const char *get_name() const override { return NAME; }

	int init() override;

private:

	void ice_status_sub_cb(const uavcan::ReceivedDataStructure<uavcan::equipment::ice::reciprocating::Status> &msg);
	int init_driver(uavcan_bridge::Channel *channel) override;

	typedef uavcan::MethodBinder < UavcanIceStatusBridge *,
		void (UavcanIceStatusBridge::*)
		(const uavcan::ReceivedDataStructure<uavcan::equipment::ice::reciprocating::Status> &) >
		IceStatusCbBinder;

	uavcan::Subscriber<uavcan::equipment::ice::reciprocating::Status, IceStatusCbBinder> _sub_ice_status_data;

};",0,587 2000 58 777 2001 123 777 58 809 601 582 42 601 2002 59 2000 40 2003 321 2004 38 2005 41 59 601 582 42 2006 40 41 601 2007 123 792 2002 59 125 704 2008 40 41 2007 59 773 58 865 2009 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2013 321 2014 62 38 2015 41 59 704 2016 40 2017 321 2018 42 2019 41 2007 59 833 2003 321 2020 60 2000 42 44 865 40 2000 321 42 41 40 601 2003 321 2010 60 2003 321 2011 321 2012 321 2013 321 2014 62 38 41 62 2021 59 2003 321 2022 60 2003 321 2011 321 2012 321 2013 321 2014 44 2021 62 2023 59 125 59 ,"{'AvgLine': 10, 'CountLine': 76, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 64, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 64, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117955,C++,"class MPL3115A2 : public device::I2C, public I2CSPIDriver<MPL3115A2>
{
public:
	MPL3115A2(const I2CSPIDriverConfig &config);
	~MPL3115A2() override;

	static void print_usage();


	int init() override;
	int probe() override;

	void print_status();

	void RunImpl();
private:

	void start();
	int  reset();

	int measure();
	int collect();

	int RegisterRead(uint8_t reg, void *data, unsigned count = 1);
	int RegisterWrite(uint8_t reg, uint8_t data);

	PX4Barometer _px4_barometer;

	bool _collect_phase{false};

	perf_counter_t _sample_perf;
	perf_counter_t _measure_perf;
	perf_counter_t _comms_errors;
};",0,587 2000 58 777 2001 321 2002 44 777 2003 60 2000 62 123 777 58 2000 40 601 2004 38 2005 41 59 126 2000 40 41 2006 59 809 865 2007 40 41 59 704 2008 40 41 2006 59 704 2009 40 41 2006 59 865 2010 40 41 59 865 2011 40 41 59 773 58 865 2012 40 41 59 704 2013 40 41 59 704 2014 40 41 59 704 2015 40 41 59 704 2016 40 2017 2018 44 865 42 2019 44 856 2020 61 1501 41 59 704 2021 40 2017 2018 44 2017 2019 41 59 2022 2023 59 569 2024 123 655 125 59 2025 2026 59 2025 2027 59 2025 2028 59 125 59 ,"{'AvgLine': 17, 'CountLine': 256, 'CountStmt': 110, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 70, 'MaxEssential': 5, 'SumEssential': 20, 'AvgCyclomatic': 2, 'CountLineCode': 183, 'CountStmtDecl': 39, 'MaxCyclomatic': 5, 'SumCyclomatic': 28, 'AltAvgLineCode': 12, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 51, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 3, 'CountDeclMethod': 13, 'AltCountLineCode': 185, 'CountLineCodeExe': 81, 'CountLineComment': 20, 'AltAvgLineComment': 1, 'AltCountLineBlank': 51, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 41, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 20, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 31, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 84, 'SumCyclomaticModified': 28, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 6, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
117577,C++,"class Lock
{
	pthread_mutex_t &thier_mutex_;

public:

	Lock(pthread_mutex_t &m) :
		thier_mutex_(m)
	{
		(void)pthread_mutex_lock(&m);
	}

	~Lock()
	{
		(void)pthread_mutex_unlock(&thier_mutex_);
	}

	static int init(pthread_mutex_t &thier_mutex_)
	{
		return pthread_mutex_init(&thier_mutex_, NULL);
	}

	static int deinit(pthread_mutex_t &thier_mutex_)
	{
		return pthread_mutex_destroy(&thier_mutex_);
	}

};",0,587 2000 123 2001 38 2002 59 777 58 2000 40 2001 38 2003 41 58 2002 40 2003 41 123 40 865 41 2004 40 38 2003 41 59 125 126 2000 40 41 123 40 865 41 2005 40 38 2002 41 59 125 809 704 2006 40 2001 38 2002 41 123 792 2007 40 38 2002 44 2008 41 59 125 809 704 2009 40 2001 38 2002 41 123 792 2010 40 38 2002 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 28, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 22, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 22, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118347,C++,"class FunctionConstantMin : public FunctionProviderBase
{
public:
	static FunctionProviderBase *allocate(const Context &context) { return new FunctionConstantMin(); }

	float value(OutputFunction func) override { return -1.f; }
	void update() override { }

	float defaultFailsafeValue(OutputFunction func) const override { return -1.f; }
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 601 2003 38 2004 41 123 792 744 2000 40 41 59 125 660 2005 40 2006 2007 41 2008 123 792 45 1501 59 125 865 2009 40 41 2008 123 125 660 2010 40 2006 2007 41 601 2008 123 792 45 1501 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 10, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 8, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118378,C++,"class CDevNode : public cdev::CDev
{
public:
	CDevNode() :
		CDev(TESTDEV),
		_is_open_for_write(false),
		_write_offset(0) {}

	~CDevNode() override = default;

	int open(cdev::file_t *handlep) override;
	int close(cdev::file_t *handlep) override;
	ssize_t write(cdev::file_t *handlep, const char *buffer, size_t buflen) override;
	ssize_t read(cdev::file_t *handlep, char *buffer, size_t buflen) override;
private:
	bool _is_open_for_write;
	size_t _write_offset;
	char     _buf[1000];
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 41 58 2002 40 2003 41 44 2004 40 655 41 44 2005 40 1500 41 123 125 126 2000 40 41 2006 61 613 59 704 2007 40 2001 321 2008 42 2009 41 2006 59 704 2010 40 2001 321 2008 42 2009 41 2006 59 2011 2012 40 2001 321 2008 42 2009 44 601 582 42 2013 44 2014 2015 41 2006 59 2011 2016 40 2001 321 2008 42 2009 44 582 42 2013 44 2014 2015 41 2006 59 773 58 569 2004 59 2014 2005 59 582 2017 91 1504 93 59 125 59 ,"{'AvgLine': 13, 'CountLine': 80, 'CountStmt': 29, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 14, 'MaxEssential': 3, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 64, 'CountStmtDecl': 15, 'MaxCyclomatic': 4, 'SumCyclomatic': 10, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 6, 'AltCountLineCode': 64, 'CountLineCodeExe': 15, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118387,C++,"class NeoLEDData
{
public:
	enum eRGB {
		eB = 0,
		eR = 1,
		eG = 2
	};

	typedef union {
		uint8_t  grb[3];
		uint32_t l;
	} led_data_t;

	led_data_t  data{};
	NeoLEDData() {data.l = 0;}
	NeoLEDData(NeoLEDData &r) {data.l = r.data.l;}

	uint8_t &R() {return data.grb[eR];};
	uint8_t &G() {return data.grb[eG];};
	uint8_t &B() {return data.grb[eB];};
};",0,587 2000 123 777 58 640 2001 123 2002 61 1500 44 2003 61 1501 44 2004 61 1502 125 59 833 851 123 2005 2006 91 1502 93 59 2007 2008 59 125 2009 59 2009 2010 123 125 59 2000 40 41 123 2010 46 2011 61 1500 59 125 2000 40 2000 38 2012 41 123 2010 46 2013 61 2012 46 2010 46 2013 59 125 2014 38 2015 40 41 123 792 2010 46 2016 91 2017 93 59 125 59 2014 38 2018 40 41 123 792 2010 46 2019 91 2020 93 59 125 59 2014 38 2021 40 41 123 792 2010 46 2022 91 2023 93 59 125 59 125 59 ,"{'AvgLine': 1, 'CountLine': 17, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 14, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118384,C++,"class LightsCommand :
	public UavcanSubscriberBase,
	private uavcan::Subscriber<uavcan::equipment::indication::LightsCommand, LightscommandBinder>
{
public:
	LightsCommand(uavcan::INode &node) :
		UavcanSubscriberBase(uavcan::equipment::indication::LightsCommand::DefaultDataTypeID),
		uavcan::Subscriber<uavcan::equipment::indication::LightsCommand, LightscommandBinder>(node)
	{}

	bool init()
	{
		if (start(LightscommandBinder(this, &LightsCommand::callback)) < 0) {
			PX4_ERR(""uavcan::equipment::indication::LightsCommand subscription failed"");
			return false;
		}

		return true;
	}

	void PrintInfo() const override
	{
		printf(""\t%s:%d -> %s\n"",
		       uavcan::equipment::indication::LightsCommand::getDataTypeFullName(),
		       uavcan::equipment::indication::LightsCommand::DefaultDataTypeID,
		       _led_control_pub.get_topic()->o_name);
	}

private:
	void callback(const uavcan::ReceivedDataStructure<uavcan::equipment::indication::LightsCommand> &msg)
	{
		uavcan::uint32_t red = 0;
		uavcan::uint32_t green = 0;
		uavcan::uint32_t blue = 0;

		for (auto &cmd : msg.commands) {
			if (cmd.light_id == _self_light_index) {
				using uavcan::equipment::indication::RGB565;

				red = uavcan::uint32_t(float(cmd.color.red) *
						       (255.0F / float(RGB565::FieldTypes::red::max())) + 0.5F);

				green = uavcan::uint32_t(float(cmd.color.green) *
							 (255.0F / float(RGB565::FieldTypes::green::max())) + 0.5F);

				blue = uavcan::uint32_t(float(cmd.color.blue) *
							(255.0F / float(RGB565::FieldTypes::blue::max())) + 0.5F);

				red   = uavcan::min<uavcan::uint32_t>(red, 0xFFU);
				green = uavcan::min<uavcan::uint32_t>(green, 0xFFU);
				blue  = uavcan::min<uavcan::uint32_t>(blue, 0xFFU);

				led_control_s led_control{};
				led_control.num_blinks = 0;
				led_control.priority = led_control_s::MAX_PRIORITY;
				led_control.mode = led_control_s::MODE_OFF;
				led_control.led_mask = 0xff;
				led_control.color = led_control_s::COLOR_OFF;

				if (red != 0 && blue == 0 && green == 0) {
					led_control.color = led_control_s::COLOR_RED;

				} else if (red == 0 && blue != 0 && green == 0) {
					led_control.color = led_control_s::COLOR_BLUE;

				} else if (red == 0 && blue == 0 && green != 0) {
					led_control.color = led_control_s::COLOR_GREEN;

				} else if (red != 0 && blue == 0 && green != 0) {
					led_control.color = led_control_s::COLOR_YELLOW;

				} else if (red != 0 && blue != 0 && green == 0) {
					led_control.color = led_control_s::COLOR_PURPLE;

				} else if (red != 0 && blue == 0 && green != 0 && red > green) {
					led_control.color = led_control_s::COLOR_AMBER;

				} else if (red == 0 && blue != 0 && green != 0) {
					led_control.color = led_control_s::COLOR_CYAN;

				} else if (red != 0 && blue != 0 && green != 0) {
					led_control.color = led_control_s::COLOR_WHITE;
				}

				if (led_control.color !=  led_control_s::COLOR_OFF) {
					led_control.mode = led_control_s::MODE_ON;
				}

				led_control.timestamp = hrt_absolute_time();
				_led_control_pub.publish(led_control);
			}
		}
	}

	uORB::Publication<led_control_s> _led_control_pub{ORB_ID(led_control)};
	unsigned _self_light_index{0};
};",0,587 2000 58 777 2001 44 773 2002 321 2003 60 2002 321 2004 321 2005 321 2000 44 2006 62 123 777 58 2000 40 2002 321 2007 38 2008 41 58 2001 40 2002 321 2004 321 2005 321 2000 321 2009 41 44 2002 321 2003 60 2002 321 2004 321 2005 321 2000 44 2006 62 40 2008 41 123 125 569 2010 40 41 123 688 40 2011 40 2006 40 823 44 38 2000 321 2012 41 41 60 1500 41 123 2013 40 362 41 59 792 655 59 125 792 829 59 125 865 2014 40 41 601 2015 123 2016 40 362 44 2002 321 2004 321 2005 321 2000 321 2017 40 41 44 2002 321 2004 321 2005 321 2000 321 2009 44 2018 46 2019 40 41 354 2020 41 59 125 773 58 865 2021 40 601 2002 321 2022 60 2002 321 2004 321 2005 321 2000 62 38 2023 41 123 2002 321 2024 2025 61 1500 59 2002 321 2024 2026 61 1500 59 2002 321 2024 2027 61 1500 59 664 40 561 38 2028 58 2023 46 2029 41 123 688 40 2028 46 2030 323 2031 41 123 860 2002 321 2004 321 2005 321 2032 59 2025 61 2002 321 2024 40 660 40 2028 46 2033 46 2025 41 42 40 1504 47 660 40 2032 321 2034 321 2025 321 2035 40 41 41 41 43 1500 41 59 2026 61 2002 321 2024 40 660 40 2028 46 2033 46 2026 41 42 40 1504 47 660 40 2032 321 2034 321 2026 321 2035 40 41 41 41 43 1500 41 59 2027 61 2002 321 2024 40 660 40 2028 46 2033 46 2027 41 42 40 1504 47 660 40 2032 321 2034 321 2027 321 2035 40 41 41 41 43 1500 41 59 2025 61 2002 321 2036 60 2002 321 2024 62 40 2025 44 1504 41 59 2026 61 2002 321 2036 60 2002 321 2024 62 40 2026 44 1504 41 59 2027 61 2002 321 2036 60 2002 321 2024 62 40 2027 44 1504 41 59 2037 2038 123 125 59 2038 46 2039 61 1500 59 2038 46 2040 61 2037 321 2041 59 2038 46 2042 61 2037 321 2043 59 2038 46 2044 61 1504 59 2038 46 2033 61 2037 321 2045 59 688 40 2025 340 1500 307 2027 323 1500 307 2026 323 1500 41 123 2038 46 2033 61 2037 321 2046 59 125 630 688 40 2025 323 1500 307 2027 340 1500 307 2026 323 1500 41 123 2038 46 2033 61 2037 321 2047 59 125 630 688 40 2025 323 1500 307 2027 323 1500 307 2026 340 1500 41 123 2038 46 2033 61 2037 321 2048 59 125 630 688 40 2025 340 1500 307 2027 323 1500 307 2026 340 1500 41 123 2038 46 2033 61 2037 321 2049 59 125 630 688 40 2025 340 1500 307 2027 340 1500 307 2026 323 1500 41 123 2038 46 2033 61 2037 321 2050 59 125 630 688 40 2025 340 1500 307 2027 323 1500 307 2026 340 1500 307 2025 62 2026 41 123 2038 46 2033 61 2037 321 2051 59 125 630 688 40 2025 323 1500 307 2027 340 1500 307 2026 340 1500 41 123 2038 46 2033 61 2037 321 2052 59 125 630 688 40 2025 340 1500 307 2027 340 1500 307 2026 340 1500 41 123 2038 46 2033 61 2037 321 2053 59 125 688 40 2038 46 2033 340 2037 321 2045 41 123 2038 46 2042 61 2037 321 2054 59 125 2038 46 2055 61 2056 40 41 59 2057 46 2058 40 2038 41 59 125 125 125 2059 321 2060 60 2061 62 2062 123 2063 40 2064 41 125 59 856 2065 123 1500 125 59 125 59 ,"{'AvgLine': 21, 'CountLine': 97, 'CountStmt': 15, 'MaxNesting': 2, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 76, 'CountStmtDecl': 11, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 16, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 4, 'AltCountLineCode': 76, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118390,C++,"class MavlinkStreamEstimatorStatus : public MavlinkStream
{
public:
	static MavlinkStream *new_instance(Mavlink *mavlink) { return new MavlinkStreamEstimatorStatus(mavlink); }

	static constexpr const char *get_name_static() { return ""ESTIMATOR_STATUS""; }
	static constexpr uint16_t get_id_static() { return MAVLINK_MSG_ID_ESTIMATOR_STATUS; }

	const char *get_name() const override { return get_name_static(); }
	uint16_t get_id() override { return get_id_static(); }

	unsigned get_size() override
	{
		return _estimator_status_sub.advertised() ? MAVLINK_MSG_ID_ESTIMATOR_STATUS_LEN + MAVLINK_NUM_NON_PAYLOAD_BYTES : 0;
	}

private:
	explicit MavlinkStreamEstimatorStatus(Mavlink *mavlink) : MavlinkStream(mavlink) {}

	uORB::Subscription _estimator_selector_status_sub{ORB_ID(estimator_selector_status)};
	uORB::Subscription _estimator_status_sub{ORB_ID(estimator_status)};

	bool send() override
	{
		// use primary estimator_status
		if (_estimator_selector_status_sub.updated()) {
			estimator_selector_status_s estimator_selector_status;

			if (_estimator_selector_status_sub.copy(&estimator_selector_status)) {
				if (estimator_selector_status.primary_instance != _estimator_status_sub.get_instance()) {
					_estimator_status_sub.ChangeInstance(estimator_selector_status.primary_instance);
				}
			}
		}

		estimator_status_s est;

		if (_estimator_status_sub.update(&est)) {
			mavlink_estimator_status_t est_msg{};
			est_msg.time_usec = est.timestamp;
			est_msg.vel_ratio = est.vel_test_ratio;
			est_msg.pos_horiz_ratio = est.pos_test_ratio;
			est_msg.pos_vert_ratio = est.hgt_test_ratio;
			est_msg.mag_ratio = est.mag_test_ratio;
			est_msg.hagl_ratio = est.hagl_test_ratio;
			est_msg.tas_ratio = est.tas_test_ratio;
			est_msg.pos_horiz_accuracy = est.pos_horiz_accuracy;
			est_msg.pos_vert_accuracy = est.pos_vert_accuracy;
			est_msg.flags = est.solution_status_flags;
			mavlink_msg_estimator_status_send_struct(_mavlink->get_channel(), &est_msg);

			return true;
		}

		return false;
	}
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 2003 42 2004 41 123 792 744 2000 40 2004 41 59 125 809 603 601 582 42 2005 40 41 123 792 362 59 125 809 603 2006 2007 40 41 123 792 2008 59 125 601 582 42 2009 40 41 601 2010 123 792 2005 40 41 59 125 2006 2011 40 41 2010 123 792 2007 40 41 59 125 856 2012 40 41 2010 123 792 2013 46 2014 40 41 63 2015 43 2016 58 1500 59 125 773 58 648 2000 40 2003 42 2004 41 58 2001 40 2004 41 123 125 2017 321 2018 2019 123 2020 40 2021 41 125 59 2017 321 2018 2022 123 2023 40 2024 41 125 59 569 2025 40 41 2010 123 330 688 40 2019 46 2026 40 41 41 123 2027 2028 59 688 40 2019 46 2029 40 38 2028 41 41 123 688 40 2028 46 2030 340 2022 46 2031 40 41 41 123 2022 46 2032 40 2028 46 2030 41 59 125 125 125 2033 2034 59 688 40 2022 46 2035 40 38 2034 41 41 123 2036 2037 123 125 59 2037 46 2038 61 2034 46 2039 59 2037 46 2040 61 2034 46 2041 59 2037 46 2042 61 2034 46 2043 59 2037 46 2044 61 2034 46 2045 59 2037 46 2046 61 2034 46 2047 59 2037 46 2048 61 2034 46 2049 59 2037 46 2050 61 2034 46 2051 59 2037 46 2052 61 2034 46 2052 59 2037 46 2053 61 2034 46 2053 59 2037 46 2054 61 2034 46 2055 59 2056 40 2057 354 2058 40 41 44 38 2037 41 59 792 829 59 125 792 655 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 57, 'CountStmt': 21, 'MaxNesting': 3, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 13, 'MaxCyclomatic': 5, 'SumCyclomatic': 12, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 45, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117609,C++,"class ImuDownSampler
{
public:
	explicit ImuDownSampler(float target_dt_sec);
	~ImuDownSampler() = default;

	bool update(const imuSample &imu_sample_new);

	imuSample getDownSampledImuAndTriggerReset()
	{
		_do_reset = true;
		return _imu_down_sampled;
	}

private:
	void reset();

	imuSample _imu_down_sampled{};
	Quatf _delta_angle_accumulated{};
	const float _target_dt;  // [sec]
	float _imu_collection_time_adj{0.f};
	bool _do_reset{true};
};",0,587 2000 123 777 58 648 2000 40 660 2001 41 59 126 2000 40 41 61 613 59 569 2002 40 601 2003 38 2004 41 59 2003 2005 40 41 123 2006 61 829 59 792 2007 59 125 773 58 865 2008 40 41 59 2003 2009 123 125 59 2010 2011 123 125 59 601 660 2012 59 330 660 2013 123 1500 125 59 569 2014 123 829 125 59 125 59 ,"{'AvgLine': 15, 'CountLine': 81, 'CountStmt': 42, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 33, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 59, 'CountStmtDecl': 12, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 11, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 59, 'CountLineCodeExe': 34, 'CountLineComment': 10, 'AltAvgLineComment': 2, 'AltCountLineBlank': 13, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.17', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 63, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
118283,C++,"template class SquareMatrix<float, 4>;",0,822 587 2000 60 660 44 1502 62 59 ,"{'AvgLine': 0, 'CountLine': 1, 'CountStmt': 0, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 1, 'CountStmtDecl': 0, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 1, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 56, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117977,C++,"class MagCalTest : public ::testing::Test
{
public:
	void generate2SidesMagData(float *x, float *y, float *z, unsigned int n_samples, float mag_str);

	/* Generate regularly spaced data on a sphere
	 * Ref.: How to generate equidistributed points on the surface of a sphere, Markus Deserno, 2004
	 */
	void generateRegularData(float *x, float *y, float *z, unsigned int n_samples, float mag_str);

	void modifyOffsetScale(float *x, float *y, float *z, unsigned int n_samples, Vector3f offsets, Vector3f scale_factors);
};",0,587 2000 58 777 321 2001 321 2002 123 777 58 865 2003 40 660 42 2004 44 660 42 2005 44 660 42 2006 44 856 704 2007 44 660 2008 41 59 305 865 2009 40 660 42 2004 44 660 42 2005 44 660 42 2006 44 856 704 2007 44 660 2008 41 59 865 2010 40 660 42 2004 44 660 42 2005 44 660 42 2006 44 856 704 2007 44 2011 2012 44 2011 2013 41 59 125 59 ,"{'AvgLine': 21, 'CountLine': 77, 'CountStmt': 45, 'MaxNesting': 2, 'AvgLineCode': 19, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 37, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 3, 'CountLineCode': 64, 'CountStmtDecl': 20, 'MaxCyclomatic': 5, 'SumCyclomatic': 10, 'AltAvgLineCode': 19, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 3, 'AltCountLineCode': 64, 'CountLineCodeExe': 41, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117622,C++,"class InputBase
{
public:
	InputBase() = default;
	virtual ~InputBase() = default;

	/**
	 * Wait for an input update, with a timeout.
	 * @param timeout_ms timeout in ms
	 * @param control_data unchanged on error. On success it is nullptr if no new
	 *                     data is available, otherwise set to an object.
	 *                     If it is set, the returned object will not be changed for
	 *                     subsequent calls to update() that return no new data
	 *                     (in other words: if (some) control_data values change,
	 *                     non-null will be returned).
	 * @param already_active true if the mode was already active last time, false if it was not and ""major""
	 *                       change is necessary such as big stick movement for RC.
	 * @return 0 on success, <0 otherwise
	 */
	virtual int update(unsigned int timeout_ms, ControlData **control_data, bool already_active);

	/** report status to stdout */
	virtual void print_status() = 0;

	void set_stabilize(bool roll_stabilize, bool pitch_stabilize, bool yaw_stabilize);

protected:
	virtual int update_impl(unsigned int timeout_ms, ControlData **control_data, bool already_active) = 0;

	virtual int initialize() { return 0; }

	void control_data_set_lon_lat(double lon, double lat, float altitude, float roll_angle = 0.f,
				      float pitch_fixed_angle = -10.f);

	ControlData _control_data;

private:
	bool _initialized = false;
};",0,587 2000 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 61 613 59 306 864 704 2001 40 856 704 2002 44 2003 42 42 2004 44 569 2005 41 59 306 864 865 2006 40 41 61 1500 59 865 2007 40 569 2008 44 569 2009 44 569 2010 41 59 775 58 864 704 2011 40 856 704 2002 44 2003 42 42 2004 44 569 2005 41 61 1500 59 864 704 2012 40 41 123 792 1500 59 125 865 2013 40 625 2014 44 625 2015 44 660 2016 44 660 2017 61 1500 44 660 2018 61 45 1502 41 59 2003 2019 59 773 58 569 2020 61 655 59 125 59 ,"{'AvgLine': 9, 'CountLine': 75, 'CountStmt': 30, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 22, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 49, 'CountStmtDecl': 9, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 49, 'CountLineCodeExe': 22, 'CountLineComment': 15, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 3, 'CountClassDerived': 5, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.31', 'AltCountLineComment': 15, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 1}"
117938,C++,"class Sensor
{
public:
	virtual ~Sensor() {};

	/*
	 * run sanity checks on the current data
	 * this has to be called immediately after
	 * setting new data
	 */
	virtual void runChecks() {};

	/*
	 * return true if the sensor is healthy
	 */
	virtual bool isHealthy() const = 0;

	/*
	 * return true if the delayed sample is healthy
	 * and can be fused in the estimator
	 */
	virtual bool isDataHealthy() const = 0;

	/*
	 * return true if the sensor data rate is
	 * stable and high enough
	 */
	virtual bool isRegularlySendingData() const = 0;
};",0,587 2000 123 777 58 864 126 2000 40 41 123 125 59 305 864 865 2001 40 41 123 125 59 305 864 569 2002 40 41 601 61 1500 59 305 864 569 2003 40 41 601 61 1500 59 305 864 569 2004 40 41 601 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 29, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 9, 'CountLineCodeExe': 0, 'CountLineComment': 16, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '1.78', 'AltCountLineComment': 16, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118106,C++,"class MS5611_SPI : public device::SPI
{
public:
	MS5611_SPI(uint8_t bus, uint32_t device, ms5611::prom_u &prom_buf, int bus_frequency, spi_mode_e spi_mode);
	virtual ~MS5611_SPI() = default;

	virtual int	init();
	virtual int	read(unsigned offset, void *data, unsigned count);
	virtual int	ioctl(unsigned operation, unsigned &arg);

private:
	ms5611::prom_u	&_prom;

	/**
	 * Send a reset command to the MS5611.
	 *
	 * This is required after any bus reset.
	 */
	int		_reset();

	/**
	 * Send a measure command to the MS5611.
	 *
	 * @param addr		Which address to use for the measure operation.
	 */
	int		_measure(unsigned addr);

	/**
	 * Read the MS5611 PROM
	 *
	 * @return		OK if the PROM reads successfully.
	 */
	int		_read_prom();

	/**
	 * Read a 16-bit register value.
	 *
	 * @param reg		The register to read.
	 */
	uint16_t	_reg16(unsigned reg);

	/**
	 * Wrapper around transfer() that prevents interrupt-context transfers
	 * from pre-empting us. The sensor may (does) share a bus with sensors
	 * that are polled from interrupt context (or we may be pre-empted)
	 * so we need to guarantee that transfers complete without interruption.
	 */
	int		_transfer(uint8_t *send, uint8_t *recv, unsigned len);
};",0,587 2000 58 777 2001 321 2002 123 777 58 2000 40 2003 2004 44 2005 2001 44 2006 321 2007 38 2008 44 704 2009 44 2010 2011 41 59 864 126 2000 40 41 61 613 59 864 704 2012 40 41 59 864 704 2013 40 856 2014 44 865 42 2015 44 856 2016 41 59 864 704 2017 40 856 2018 44 856 38 2019 41 59 773 58 2006 321 2007 38 2020 59 306 704 2021 40 41 59 306 704 2022 40 856 2023 41 59 306 704 2024 40 41 59 306 2025 2026 40 856 2027 41 59 306 704 2028 40 2003 42 2029 44 2003 42 2030 44 856 2031 41 59 125 59 ,"{'AvgLine': 17, 'CountLine': 201, 'CountStmt': 75, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 55, 'MaxEssential': 5, 'SumEssential': 13, 'AvgCyclomatic': 2, 'CountLineCode': 128, 'CountStmtDecl': 25, 'MaxCyclomatic': 5, 'SumCyclomatic': 21, 'AltAvgLineCode': 12, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 35, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 10, 'AltCountLineCode': 128, 'CountLineCodeExe': 66, 'CountLineComment': 38, 'AltAvgLineComment': 1, 'AltCountLineBlank': 35, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 24, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.30', 'AltCountLineComment': 38, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117975,C++,"class EngineFailure : public MissionBlock
{
public:
	EngineFailure(Navigator *navigator);
	~EngineFailure() = default;

	void on_inactive() override;
	void on_activation() override;
	void on_active() override;

private:
	enum EFState {
		EF_STATE_NONE = 0,
		EF_STATE_LOITERDOWN = 1,
	} _ef_state{EF_STATE_NONE};

	/**
	 * Set the DLL item
	 */
	void		set_ef_item();

	/**
	 * Move to next EF item
	 */
	void		advance_ef();

};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 42 2003 41 59 126 2000 40 41 61 613 59 865 2004 40 41 2005 59 865 2006 40 41 2005 59 865 2007 40 41 2005 59 773 58 640 2008 123 2009 61 1500 44 2010 61 1501 44 125 2011 123 2012 125 59 306 865 2013 40 41 59 306 865 2014 40 41 59 125 59 ,"{'AvgLine': 13, 'CountLine': 102, 'CountStmt': 44, 'MaxNesting': 3, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 34, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 79, 'CountStmtDecl': 10, 'MaxCyclomatic': 4, 'SumCyclomatic': 11, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 79, 'CountLineCodeExe': 33, 'CountLineComment': 9, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 38, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 44, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118160,C++,"template<px4::params p>
class Param<int32_t, p>
{
public:
	// static type-check
	static_assert(px4::parameters_type[(int)p] == PARAM_TYPE_INT32, ""parameter type must be int32_t"");

	Param()
	{
		param_set_used(handle());
		update();
	}

	int32_t get() const { return _val; }

	const int32_t &reference() const { return _val; }

	/// Store the parameter value to the parameter storage (@see param_set())
	bool commit() const { return param_set(handle(), &_val) == 0; }

	/// Store the parameter value to the parameter storage, w/o notifying the system (@see param_set_no_notification())
	bool commit_no_notification() const { return param_set_no_notification(handle(), &_val) == 0; }

	/// Set and commit a new value. Returns true if the value changed.
	bool commit_no_notification(int32_t val)
	{
		if (val != _val) {
			set(val);
			commit_no_notification();
			return true;
		}

		return false;
	}

	void set(int32_t val) { _val = val; }

	void reset()
	{
		param_reset_no_notification(handle());
		update();
	}

	bool update() { return param_get(handle(), &_val) == 0; }

	param_t handle() const { return param_handle(p); }
private:
	int32_t _val;
};",0,822 60 2000 321 2001 2002 62 587 2003 60 2004 44 2002 62 123 777 58 330 810 40 2000 321 2005 91 40 704 41 2002 93 323 2006 44 362 41 59 2003 40 41 123 2007 40 2008 40 41 41 59 2009 40 41 59 125 2004 2010 40 41 601 123 792 2011 59 125 601 2004 38 2012 40 41 601 123 792 2013 59 125 331 569 2014 40 41 601 123 792 2015 40 2016 40 41 44 38 2017 41 323 1500 59 125 331 569 2018 40 41 601 123 792 2019 40 2020 40 41 44 38 2021 41 323 1500 59 125 331 569 2018 40 2004 2022 41 123 688 40 2022 340 2023 41 123 2024 40 2022 41 59 2018 40 41 59 792 829 59 125 792 655 59 125 865 2025 40 2004 2022 41 123 2026 61 2022 59 125 865 2027 40 41 123 2028 40 2029 40 41 41 59 2030 40 41 59 125 569 2031 40 41 123 792 2032 40 2033 40 41 44 38 2034 41 323 1500 59 125 2035 2036 40 41 601 123 792 2037 40 2002 41 59 125 773 58 2004 2038 59 125 59 ,"{'AvgLine': 2, 'CountLine': 49, 'CountStmt': 21, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 34, 'CountLineCodeExe': 11, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118161,C++,"template<px4::params p>
class Param<int32_t &, p>
{
public:
	// static type-check
	static_assert(px4::parameters_type[(int)p] == PARAM_TYPE_INT32, ""parameter type must be int32_t"");

	Param(int32_t &external_val)
		: _val(external_val)
	{
		param_set_used(handle());
		update();
	}

	int32_t get() const { return _val; }

	const int32_t &reference() const { return _val; }

	/// Store the parameter value to the parameter storage (@see param_set())
	bool commit() const { return param_set(handle(), &_val) == 0; }

	/// Store the parameter value to the parameter storage, w/o notifying the system (@see param_set_no_notification())
	bool commit_no_notification() const { return param_set_no_notification(handle(), &_val) == 0; }

	/// Set and commit a new value. Returns true if the value changed.
	bool commit_no_notification(int32_t val)
	{
		if (val != _val) {
			set(val);
			commit_no_notification();
			return true;
		}

		return false;
	}

	void set(int32_t val) { _val = val; }

	void reset()
	{
		param_reset_no_notification(handle());
		update();
	}

	bool update() { return param_get(handle(), &_val) == 0; }

	param_t handle() const { return param_handle(p); }
private:
	int32_t &_val;
};",0,822 60 2000 321 2001 2002 62 587 2003 60 2004 38 44 2002 62 123 777 58 330 810 40 2000 321 2005 91 40 704 41 2002 93 323 2006 44 362 41 59 2003 40 2004 38 2007 41 58 2008 40 2007 41 123 2009 40 2010 40 41 41 59 2011 40 41 59 125 2004 2012 40 41 601 123 792 2008 59 125 601 2004 38 2013 40 41 601 123 792 2008 59 125 331 569 2014 40 41 601 123 792 2015 40 2016 40 41 44 38 2008 41 323 1500 59 125 331 569 2017 40 41 601 123 792 2018 40 2019 40 41 44 38 2008 41 323 1500 59 125 331 569 2017 40 2004 2020 41 123 688 40 2020 340 2008 41 123 2021 40 2020 41 59 2017 40 41 59 792 829 59 125 792 655 59 125 865 2022 40 2004 2020 41 123 2008 61 2020 59 125 865 2023 40 41 123 2024 40 2025 40 41 41 59 2026 40 41 59 125 569 2027 40 41 123 792 2028 40 2029 40 41 44 38 2008 41 323 1500 59 125 2030 2031 40 41 601 123 792 2032 40 2002 41 59 125 773 58 2004 38 2008 59 125 59 ,"{'AvgLine': 2, 'CountLine': 50, 'CountStmt': 22, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 35, 'CountLineCodeExe': 12, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
117690,C++,"class EkfLogger
{
public:
	EkfLogger(std::shared_ptr<Ekf> ekf);
	~EkfLogger() = default;
	void setFilePath(std::string file_path);

	void enableStateLogging() { _state_logging_enabled = true; };
	void disableStateLogging() { _state_logging_enabled = false; };
	void enableVarianceLogging() { _variance_logging_enabled = true; };
	void disableVarianceLogging() { _variance_logging_enabled = false; };

	void writeStateToFile();

private:
	std::shared_ptr<Ekf> _ekf;
	EkfWrapper _ekf_wrapper;

	std::string _file_path;
	std::ofstream _file;

	bool _file_opened {false};

	bool _state_logging_enabled {true};
	bool _variance_logging_enabled {true};

	void writeState();

};",0,587 2000 123 777 58 2000 40 2001 321 2002 60 2003 62 2004 41 59 126 2000 40 41 61 613 59 865 2005 40 2001 321 2006 2007 41 59 865 2008 40 41 123 2009 61 829 59 125 59 865 2010 40 41 123 2011 61 655 59 125 59 865 2012 40 41 123 2013 61 829 59 125 59 865 2014 40 41 123 2015 61 655 59 125 59 865 2016 40 41 59 773 58 2001 321 2002 60 2003 62 2017 59 2018 2019 59 2001 321 2006 2020 59 2001 321 2021 2022 59 569 2023 123 655 125 59 569 2024 123 829 125 59 569 2025 123 829 125 59 865 2026 40 41 59 125 59 ,"{'AvgLine': 8, 'CountLine': 94, 'CountStmt': 55, 'MaxNesting': 3, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 43, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 75, 'CountStmtDecl': 23, 'MaxCyclomatic': 7, 'SumCyclomatic': 19, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 19, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 75, 'CountLineCodeExe': 36, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 19, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 7, 'CountDeclInstanceVariableProtected': 0}"
118348,C++,"class FunctionParachute : public FunctionProviderBase
{
public:
	FunctionParachute() = default;
	static FunctionProviderBase *allocate(const Context &context) { return new FunctionParachute(); }

	void update() override {}
	float value(OutputFunction func) override { return -1.f; }
	float defaultFailsafeValue(OutputFunction func) const override { return 1.f; }
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 809 2001 42 2002 40 601 2003 38 2004 41 123 792 744 2000 40 41 59 125 865 2005 40 41 2006 123 125 660 2007 40 2008 2009 41 2006 123 792 45 1501 59 125 660 2010 40 2008 2009 41 601 2006 123 792 1501 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 10, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 9, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118052,C++,"class FunctionServos : public FunctionProviderBase
{
public:
	static_assert(actuator_servos_s::NUM_CONTROLS == (int)OutputFunction::ServoMax - (int)OutputFunction::Servo1 + 1,
		      ""Unexpected num servos"");

	FunctionServos(const Context &context);
	static FunctionProviderBase *allocate(const Context &context) { return new FunctionServos(context); }

	void update() override { _topic.update(&_data); }
	float value(OutputFunction func) override { return _data.control[(int)func - (int)OutputFunction::Servo1]; }

	uORB::SubscriptionCallbackWorkItem *subscriptionCallback() override { return &_topic; }

	float defaultFailsafeValue(OutputFunction func) const override { return 0.f; }
private:
	uORB::SubscriptionCallbackWorkItem _topic;
	actuator_servos_s _data{};
};",0,587 2000 58 777 2001 123 777 58 810 40 2002 321 2003 323 40 704 41 2004 321 2005 45 40 704 41 2004 321 2006 43 1501 44 362 41 59 2000 40 601 2007 38 2008 41 59 809 2001 42 2009 40 601 2007 38 2008 41 123 792 744 2000 40 2008 41 59 125 865 2010 40 41 2011 123 2012 46 2010 40 38 2013 41 59 125 660 2014 40 2004 2015 41 2011 123 792 2016 46 2017 91 40 704 41 2015 45 40 704 41 2004 321 2006 93 59 125 2018 321 2019 42 2020 40 41 2011 123 792 38 2021 59 125 660 2022 40 2004 2015 41 601 2011 123 792 1500 59 125 773 58 2018 321 2019 2023 59 2002 2024 123 125 59 125 59 ,"{'AvgLine': 2, 'CountLine': 26, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 22, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 22, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118047,C++,"class FunctionActuatorSet : public FunctionProviderBase
{
public:
	FunctionActuatorSet();
	static FunctionProviderBase *allocate(const Context &context) { return new FunctionActuatorSet(); }

	void update() override;
	float value(OutputFunction func) override { return _data[(int)func - (int)OutputFunction::Offboard_Actuator_Set1]; }

private:
	static constexpr int max_num_actuators = 6;

	uORB::Subscription _topic{ORB_ID(vehicle_command)};
	float _data[max_num_actuators];
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 809 2001 42 2002 40 601 2003 38 2004 41 123 792 744 2000 40 41 59 125 865 2005 40 41 2006 59 660 2007 40 2008 2009 41 2006 123 792 2010 91 40 704 41 2009 45 40 704 41 2008 321 2011 93 59 125 773 58 809 603 704 2012 61 1502 59 2013 321 2014 2015 123 2016 40 2017 41 125 59 660 2018 91 2012 93 59 125 59 ,"{'AvgLine': 6, 'CountLine': 40, 'CountStmt': 12, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 35, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118346,C++,"class FunctionConstantMax : public FunctionProviderBase
{
public:
	static FunctionProviderBase *allocate(const Context &context) { return new FunctionConstantMax(); }

	float value(OutputFunction func) override { return 1.f; }
	void update() override { }

	float defaultFailsafeValue(OutputFunction func) const override { return 1.f; }
};",0,587 2000 58 777 2001 123 777 58 809 2001 42 2002 40 601 2003 38 2004 41 123 792 744 2000 40 41 59 125 660 2005 40 2006 2007 41 2008 123 792 1501 59 125 865 2009 40 41 2008 123 125 660 2010 40 2006 2007 41 601 2008 123 792 1501 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 10, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 8, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
117676,C++,"class NullMixer : public Mixer
{
public:
	NullMixer() : Mixer(nullptr, 0) {}
	virtual ~NullMixer() = default;

	// no copy, assignment, move, move assignment
	NullMixer(const NullMixer &) = delete;
	NullMixer &operator=(const NullMixer &) = delete;
	NullMixer(NullMixer &&) = delete;
	NullMixer &operator=(NullMixer &&) = delete;

	/**
	 * Factory method.
	 *
	 * Given a pointer to a buffer containing a text description of the mixer,
	 * returns a pointer to a new instance of the mixer.
	 *
	 * @param buf			Buffer containing a text description of
	 *				the mixer.
	 * @param buflen		Length of the buffer in bytes, adjusted
	 *				to reflect the bytes consumed.
	 * @return			A new NullMixer instance, or nullptr
	 *				if the text format is bad.
	 */
	static NullMixer		*from_text(const char *buf, unsigned &buflen);

	unsigned			mix(float *outputs, unsigned space) override;

	unsigned			set_trim(float trim) override { return 1; }
	unsigned			get_trim(float *trim) override { return 1; }

};",0,587 2000 58 777 2001 123 777 58 2000 40 41 58 2001 40 753 44 1500 41 123 125 864 126 2000 40 41 61 613 59 330 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 2000 40 2000 307 41 61 619 59 2000 38 758 61 40 2000 307 41 61 619 59 306 809 2000 42 2002 40 601 582 42 2003 44 856 38 2004 41 59 856 2005 40 660 42 2006 44 856 2007 41 2008 59 856 2009 40 660 2010 41 2008 123 792 1501 59 125 856 2011 40 660 42 2010 41 2008 123 792 1501 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 59, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 6, 'MaxCyclomatic': 3, 'SumCyclomatic': 8, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 35, 'CountLineCodeExe': 14, 'CountLineComment': 15, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 31, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.43', 'AltCountLineComment': 15, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
118214,C++,"class FlightTaskManualAltitudeSmoothVel : public FlightTaskManualAltitude
{
public:
	FlightTaskManualAltitudeSmoothVel() = default;
	virtual ~FlightTaskManualAltitudeSmoothVel() = default;

	bool activate(const vehicle_local_position_setpoint_s &last_setpoint) override;

protected:
	virtual void _updateSetpoints() override;

	/** Reset position or velocity setpoints in case of EKF reset event */
	void _ekfResetHandlerPositionZ(float delta_z) override;
	void _ekfResetHandlerVelocityZ(float delta_vz) override;

	DEFINE_PARAMETERS_CUSTOM_PARENT(FlightTaskManualAltitude,
					(ParamFloat<px4::params::MPC_JERK_MAX>) _param_mpc_jerk_max,
					(ParamFloat<px4::params::MPC_ACC_UP_MAX>) _param_mpc_acc_up_max,
					(ParamFloat<px4::params::MPC_ACC_DOWN_MAX>) _param_mpc_acc_down_max
				       )

private:
	void _updateTrajConstraints();
	void _setOutputState();

	ManualVelocitySmoothingZ _smoothing; ///< Smoothing in z direction
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 61 613 59 569 2002 40 601 2003 38 2004 41 2005 59 775 58 864 865 2006 40 41 2005 59 306 865 2007 40 660 2008 41 2005 59 865 2009 40 660 2010 41 2005 59 2011 40 2001 44 40 2012 60 2013 321 2014 321 2015 62 41 2016 44 40 2012 60 2013 321 2014 321 2017 62 41 2018 44 40 2012 60 2013 321 2014 321 2019 62 41 2020 41 773 58 865 2021 40 41 59 865 2022 40 41 59 2023 2024 59 331 125 59 ,"{'AvgLine': 10, 'CountLine': 88, 'CountStmt': 21, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 61, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AltAvgLineCode': 7, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 18, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 9, 'AltCountLineCode': 61, 'CountLineCodeExe': 5, 'CountLineComment': 10, 'AltAvgLineComment': 1, 'AltCountLineBlank': 18, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 70, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.16', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 4, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
118174,C++,"class FlightTaskManualPosition : public FlightTaskManualAltitude
{
public:
	FlightTaskManualPosition();

	virtual ~FlightTaskManualPosition() = default;
	bool activate(const vehicle_local_position_setpoint_s &last_setpoint) override;
	bool updateInitialize() override;

	/**
	 * Sets an external yaw handler which can be used to implement a different yaw control strategy.
	 */
	void setYawHandler(WeatherVane *yaw_handler) override { _weathervane_yaw_handler = yaw_handler; }


protected:
	void _updateXYlock(); /**< applies position lock based on stick and velocity */
	void _updateSetpoints() override;
	void _scaleSticks() override;

	DEFINE_PARAMETERS_CUSTOM_PARENT(FlightTaskManualAltitude,
					(ParamFloat<px4::params::MPC_VEL_MANUAL>) _param_mpc_vel_manual,
					(ParamFloat<px4::params::MPC_ACC_HOR_MAX>) _param_mpc_acc_hor_max,
					(ParamFloat<px4::params::MPC_HOLD_MAX_XY>) _param_mpc_hold_max_xy
				       )
private:
	uint8_t _reset_counter{0}; /**< counter for estimator resets in xy-direction */

	WeatherVane *_weathervane_yaw_handler =
		nullptr;	/**< external weathervane library, used to implement a yaw control law that turns the vehicle nose into the wind */

	CollisionPrevention _collision_prevention;	/**< collision avoidance setpoint amendment */
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 864 126 2000 40 41 61 613 59 569 2002 40 601 2003 38 2004 41 2005 59 569 2006 40 41 2005 59 306 865 2007 40 2008 42 2009 41 2005 123 2010 61 2009 59 125 775 58 865 2011 40 41 59 306 865 2012 40 41 2005 59 865 2013 40 41 2005 59 2014 40 2001 44 40 2015 60 2016 321 2017 321 2018 62 41 2019 44 40 2015 60 2016 321 2017 321 2020 62 41 2021 44 40 2015 60 2016 321 2017 321 2022 62 41 2023 41 773 58 2024 2025 123 1500 125 59 306 2008 42 2026 61 753 59 306 2027 2028 59 306 125 59 ,"{'AvgLine': 15, 'CountLine': 138, 'CountStmt': 52, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 28, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 92, 'CountStmtDecl': 24, 'MaxCyclomatic': 4, 'SumCyclomatic': 16, 'AltAvgLineCode': 10, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 26, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 9, 'AltCountLineCode': 92, 'CountLineCodeExe': 30, 'CountLineComment': 27, 'AltAvgLineComment': 2, 'AltCountLineBlank': 26, 'CountClassCoupled': 5, 'CountClassDerived': 1, 'CountLineCodeDecl': 18, 'CountLineInactive': 0, 'CountDeclMethodAll': 70, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.29', 'AltCountLineComment': 27, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 25, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 4, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
118306,C++,"class FlightTaskManualPositionSmoothVel : public FlightTaskManualPosition
{
public:
	FlightTaskManualPositionSmoothVel() = default;

	virtual ~FlightTaskManualPositionSmoothVel() = default;

	bool activate(const vehicle_local_position_setpoint_s &last_setpoint) override;
	void reActivate() override;

protected:

	virtual void _updateSetpoints() override;

	/** Reset position or velocity setpoints in case of EKF reset event */
	void _ekfResetHandlerPositionXY(const matrix::Vector2f &delta_xy) override;
	void _ekfResetHandlerVelocityXY(const matrix::Vector2f &delta_vxy) override;
	void _ekfResetHandlerPositionZ(float delta_z) override;
	void _ekfResetHandlerVelocityZ(float delta_vz) override;

	DEFINE_PARAMETERS_CUSTOM_PARENT(FlightTaskManualPosition,
					(ParamFloat<px4::params::MPC_JERK_MAX>) _param_mpc_jerk_max,
					(ParamFloat<px4::params::MPC_ACC_UP_MAX>) _param_mpc_acc_up_max,
					(ParamFloat<px4::params::MPC_ACC_DOWN_MAX>) _param_mpc_acc_down_max
				       )

private:
	void _updateTrajConstraints();
	void _updateTrajConstraintsXY();
	void _updateTrajConstraintsZ();

	void _updateTrajVelFeedback();
	void _updateTrajCurrentPositionEstimate();

	void _updateTrajectories(Vector3f vel_target);

	void _setOutputState();
	void _setOutputStateXY();
	void _setOutputStateZ();

	ManualVelocitySmoothingXY _smoothing_xy; ///< Smoothing in x and y directions
	ManualVelocitySmoothingZ _smoothing_z; ///< Smoothing in z direction
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 864 126 2000 40 41 61 613 59 569 2002 40 601 2003 38 2004 41 2005 59 865 2006 40 41 2005 59 775 58 864 865 2007 40 41 2005 59 306 865 2008 40 601 2009 321 2010 38 2011 41 2005 59 865 2012 40 601 2009 321 2010 38 2013 41 2005 59 865 2014 40 660 2015 41 2005 59 865 2016 40 660 2017 41 2005 59 2018 40 2001 44 40 2019 60 2020 321 2021 321 2022 62 41 2023 44 40 2019 60 2020 321 2021 321 2024 62 41 2025 44 40 2019 60 2020 321 2021 321 2026 62 41 2027 41 773 58 865 2028 40 41 59 865 2029 40 41 59 865 2030 40 41 59 865 2031 40 41 59 865 2032 40 41 59 865 2033 40 2034 2035 41 59 865 2036 40 41 59 865 2037 40 41 59 865 2038 40 41 59 2039 2040 59 331 2041 2042 59 331 125 59 ,"{'AvgLine': 8, 'CountLine': 162, 'CountStmt': 58, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 33, 'MaxEssential': 1, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 129, 'CountStmtDecl': 27, 'MaxCyclomatic': 5, 'SumCyclomatic': 21, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 22, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 19, 'AltCountLineCode': 129, 'CountLineCodeExe': 27, 'CountLineComment': 13, 'AltAvgLineComment': 0, 'AltCountLineBlank': 22, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 89, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 13, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 9, 'CountDeclInstanceMethod': 21, 'CountDeclMethodProtected': 6, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99945,C++,"class TigerKeyFeatures final: public TigerFileBase
{
public:
                      TigerKeyFeatures( OGRTigerDataSource *, const char * );
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 125 59 ,"{'AvgLine': 15, 'CountLine': 20, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 10, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 1, 'AltCountLineCode': 15, 'CountLineCodeExe': 6, 'CountLineComment': 3, 'AltAvgLineComment': 3, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99561,C++,"class TigerLandmarks final: public TigerPoint
{
 public:
                      TigerLandmarks( OGRTigerDataSource *, const char * );

  virtual OGRFeature *GetFeature( int ) override;

  virtual OGRErr      CreateFeature( OGRFeature *poFeature ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 864 2004 42 2005 40 704 41 2006 59 864 2007 2008 40 2004 42 2009 41 2006 59 125 59 ,"{'AvgLine': 9, 'CountLine': 37, 'CountStmt': 13, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 3, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 33, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 32, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98833,C++,"class CPL_DLL OGRCoordinateTransformation
{
public:
    virtual ~OGRCoordinateTransformation() {}

    static void DestroyCT(OGRCoordinateTransformation* poCT);

    // From CT_CoordinateTransformation

    /** Fetch internal source coordinate system. */
    virtual OGRSpatialReference *GetSourceCS() = 0;

    /** Fetch internal target coordinate system. */
    virtual OGRSpatialReference *GetTargetCS() = 0;

    /** Whether the transformer will emit CPLError */
    virtual bool GetEmitErrors() const { return false; }

    /** Set if the transformer must emit CPLError */
    virtual void SetEmitErrors(bool /*bEmitErrors*/) {}

    // From CT_MathTransform

    /**
     * Transform points from source to destination space.
     *
     * This method is the same as the C function OCTTransformEx().
     *
     * @param nCount number of points to transform.
     * @param x array of nCount X vertices, modified in place. Should not be NULL.
     * @param y array of nCount Y vertices, modified in place. Should not be NULL.
     * @param z array of nCount Z vertices, modified in place. Might be NULL.
     * @param pabSuccess array of per-point flags set to TRUE if that point
     * transforms, or FALSE if it does not. Might be NULL.
     *
     * @return TRUE if some or all points transform successfully, or FALSE if
     * if none transform.
     */
    int Transform( int nCount,
                   double *x, double *y, double *z = nullptr,
                   int *pabSuccess = nullptr );

    /**
     * Transform points from source to destination space.
     *
     * This method is the same as the C function OCTTransform4D().
     *
     * @param nCount number of points to transform.
     * @param x array of nCount X vertices, modified in place. Should not be NULL.
     * @param y array of nCount Y vertices, modified in place. Should not be NULL.
     * @param z array of nCount Z vertices, modified in place. Might be NULL.
     * @param t array of nCount time values, modified in place. Might be NULL.
     * @param pabSuccess array of per-point flags set to TRUE if that point
     * transforms, or FALSE if it does not. Might be NULL.
     *
     * @return TRUE if some or all points transform successfully, or FALSE if
     * if none transform.
     */
    virtual int Transform( int nCount,
                           double *x, double *y,
                           double *z, double *t,
                           int *pabSuccess ) = 0;

    /**
     * Transform points from source to destination space.
     *
     * This method is the same as the C function OCTTransform4DWithErrorCodes().
     *
     * @param nCount number of points to transform.
     * @param x array of nCount X vertices, modified in place. Should not be NULL.
     * @param y array of nCount Y vertices, modified in place. Should not be NULL.
     * @param z array of nCount Z vertices, modified in place. Might be NULL.
     * @param t array of nCount time values, modified in place. Might be NULL.
     * @param panErrorCodes Output array of nCount value that will be set to 0 for
     *                      success, or a non-zero value for failure. Refer to
     *                      PROJ 8 public error codes. Might be NULL
     * @return TRUE if some or all points transform successfully, or FALSE if
     * if none transform.
     * @since GDAL 3.3, and PROJ 8 to be able to use PROJ public error codes
     */
    virtual int TransformWithErrorCodes( int nCount,
                                         double *x, double *y,
                                         double *z, double *t,
                                         int *panErrorCodes );

    /** \brief Transform boundary.
     *
     * This method is the same as the C function OCTTransformBounds().
     *
     * Transform boundary densifying the edges to account for nonlinear
     * transformations along these edges and extracting the outermost bounds.
     *
     * If the destination CRS is geographic, the first axis is longitude,
     * and xmax < xmin then the bounds crossed the antimeridian.
     * In this scenario there are two polygons, one on each side of the antimeridian.
     * The first polygon should be constructed with (xmin, ymin, 180, ymax)
     * and the second with (-180, ymin, xmax, ymax).
     *
     * If the destination CRS is geographic, the first axis is latitude,
     * and ymax < ymin then the bounds crossed the antimeridian.
     * In this scenario there are two polygons, one on each side of the antimeridian.
     * The first polygon should be constructed with (ymin, xmin, ymax, 180)
     * and the second with (ymin, -180, ymax, xmax).
     *
     * @param xmin Minimum bounding coordinate of the first axis in source CRS.
     * @param ymin Minimum bounding coordinate of the second axis in source CRS.
     * @param xmax Maximum bounding coordinate of the first axis in source CRS.
     * @param ymax Maximum bounding coordinate of the second axis in source CRS.
     * @param out_xmin Minimum bounding coordinate of the first axis in target CRS
     * @param out_ymin Minimum bounding coordinate of the second axis in target CRS.
     * @param out_xmax Maximum bounding coordinate of the first axis in target CRS.
     * @param out_ymax Maximum bounding coordinate of the second axis in target CRS.
     * @param densify_pts Recommended to use 21. This is the number of points
     *     to use to densify the bounding polygon in the transformation.
     * @return TRUE if successful. FALSE if failures encountered.
     * @since 3.4
     */
    virtual int TransformBounds( const double xmin,
                                 const double ymin,
                                 const double xmax,
                                 const double ymax,
                                 double* out_xmin,
                                 double* out_ymin,
                                 double* out_xmax,
                                 double* out_ymax,
                                 const int densify_pts )
    {
        (void)xmin;
        (void)xmax;
        (void)ymin;
        (void)ymax;
        (void)densify_pts;
        *out_xmin = HUGE_VAL;
        *out_ymin = HUGE_VAL;
        *out_xmax = HUGE_VAL;
        *out_ymax = HUGE_VAL;
        CPLError(CE_Failure, CPLE_AppDefined, ""TransformBounds not implemented."");
        return false;
    }

    /** Convert a OGRCoordinateTransformation* to a OGRCoordinateTransformationH.
     * @since GDAL 2.3
     */
    static inline OGRCoordinateTransformationH ToHandle(OGRCoordinateTransformation* poCT)
        { return reinterpret_cast<OGRCoordinateTransformationH>(poCT); }

    /** Convert a OGRCoordinateTransformationH to a OGRCoordinateTransformation*.
     * @since GDAL 2.3
     */
    static inline OGRCoordinateTransformation* FromHandle(OGRCoordinateTransformationH hCT)
        { return reinterpret_cast<OGRCoordinateTransformation*>(hCT); }

    /** Clone
     * @since GDAL 3.1
     */
    virtual OGRCoordinateTransformation* Clone() const = 0;

    /** Return a coordinate transformation that performs the inverse transformation
     * of the current one.
     *
     * In some cases, this is not possible, and this method might return nullptr,
     * or fail to perform the transformations.
     *
     * @return the new coordinate transformation, or nullptr in case of error.
     * @since GDAL 3.3
     */
    virtual OGRCoordinateTransformation* GetInverse() const = 0;
};",0,587 2000 2001 123 777 58 864 126 2001 40 41 123 125 809 865 2002 40 2001 42 2003 41 59 330 306 864 2004 42 2005 40 41 61 1500 59 306 864 2004 42 2006 40 41 61 1500 59 306 864 569 2007 40 41 601 123 792 655 59 125 306 864 865 2008 40 569 305 41 123 125 330 306 704 2009 40 704 2010 44 625 42 2011 44 625 42 2012 44 625 42 2013 61 753 44 704 42 2014 61 753 41 59 306 864 704 2009 40 704 2010 44 625 42 2011 44 625 42 2012 44 625 42 2013 44 625 42 2015 44 704 42 2014 41 61 1500 59 306 864 704 2016 40 704 2010 44 625 42 2011 44 625 42 2012 44 625 42 2013 44 625 42 2015 44 704 42 2017 41 59 306 864 704 2018 40 601 625 2019 44 601 625 2020 44 601 625 2021 44 601 625 2022 44 625 42 2023 44 625 42 2024 44 625 42 2025 44 625 42 2026 44 601 704 2027 41 123 40 865 41 2019 59 40 865 41 2021 59 40 865 41 2020 59 40 865 41 2022 59 40 865 41 2027 59 42 2023 61 2028 59 42 2024 61 2028 59 42 2025 61 2028 59 42 2026 61 2028 59 2029 40 2030 44 2031 44 362 41 59 792 655 59 125 306 809 700 2032 2033 40 2001 42 2003 41 123 792 786 60 2032 62 40 2003 41 59 125 306 809 700 2001 42 2034 40 2032 2035 41 123 792 786 60 2001 42 62 40 2035 41 59 125 306 864 2001 42 2036 40 41 601 61 1500 59 306 864 2001 42 2037 40 41 601 61 1500 59 125 59 ,"{'AvgLine': 9, 'CountLine': 225, 'CountStmt': 48, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 33, 'MaxEssential': 3, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 97, 'CountStmtDecl': 21, 'MaxCyclomatic': 5, 'SumCyclomatic': 16, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 24, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 14, 'AltCountLineCode': 97, 'CountLineCodeExe': 45, 'CountLineComment': 105, 'AltAvgLineComment': 0, 'AltCountLineBlank': 24, 'CountClassCoupled': 2, 'CountClassDerived': 9, 'CountLineCodeDecl': 31, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '1.08', 'AltCountLineComment': 105, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 14, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100268,C++,"class VSITarEntryFileOffset final : public VSIArchiveEntryFileOffset
{
public:
        GUIntBig m_nOffset = 0;
#ifdef HAVE_FUZZER_FRIENDLY_ARCHIVE
        GUIntBig m_nFileSize = 0;
        CPLString m_osFileName{};
#endif

        explicit VSITarEntryFileOffset(GUIntBig nOffset): m_nOffset(nOffset)
        {
        }

#ifdef HAVE_FUZZER_FRIENDLY_ARCHIVE
        VSITarEntryFileOffset(GUIntBig nOffset, GUIntBig nFileSize, const CPLString& osFileName) :
            m_nOffset(nOffset),
            m_nFileSize(nFileSize),
            m_osFileName(osFileName)
        {
        }
#endif
};",0,587 2000 2001 58 777 2002 123 777 58 2003 2004 61 1500 59 35 689 2005 2003 2006 61 1500 59 2007 2008 123 125 59 35 636 648 2000 40 2003 2009 41 58 2004 40 2009 41 123 125 35 689 2005 2000 40 2003 2009 44 2003 2010 44 601 2007 38 2011 41 58 2004 40 2009 41 44 2006 40 2010 41 44 2008 40 2011 41 123 125 35 636 125 59 ,"{'AvgLine': 3, 'CountLine': 22, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 20, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 8, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100269,C++,"class VSITarFilesystemHandler final : public VSIArchiveFilesystemHandler
{
public:
    const char* GetPrefix() override { return ""/vsitar""; }
    std::vector<CPLString> GetExtensions() override;
    VSIArchiveReader* CreateReader(const char* pszTarFileName) override;

    VSIVirtualHandle *Open( const char *pszFilename,
                            const char *pszAccess,
                            bool bSetError,
                            CSLConstList /* papszOptions */ ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 601 582 42 2003 40 41 2004 123 792 362 59 125 2005 321 2006 60 2007 62 2008 40 41 2004 59 2009 42 2010 40 601 582 42 2011 41 2004 59 2012 42 2013 40 601 582 42 2014 44 601 582 42 2015 44 569 2016 44 2017 305 41 2004 59 125 59 ,"{'AvgLine': 22, 'CountLine': 99, 'CountStmt': 48, 'MaxNesting': 1, 'AvgLineCode': 18, 'AvgEssential': 2, 'AvgLineBlank': 3, 'CountStmtExe': 43, 'MaxEssential': 4, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 85, 'CountStmtDecl': 12, 'MaxCyclomatic': 5, 'SumCyclomatic': 11, 'AltAvgLineCode': 18, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 4, 'AltCountLineCode': 85, 'CountLineCodeExe': 68, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 18, 'CountLineInactive': 0, 'CountDeclMethodAll': 47, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98810,C++,"class PDSWrapperRasterBand final: public GDALProxyRasterBand
{
  GDALRasterBand* poBaseBand;

  protected:
    virtual GDALRasterBand* RefUnderlyingRasterBand() override { return poBaseBand; }

  public:
    explicit PDSWrapperRasterBand( GDALRasterBand* poBaseBandIn )
        {
            this->poBaseBand = poBaseBandIn;
            eDataType = poBaseBand->GetRasterDataType();
            poBaseBand->GetBlockSize(&nBlockXSize, &nBlockYSize);
        }
    ~PDSWrapperRasterBand() {}
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 775 58 864 2003 42 2005 40 41 2006 123 792 2004 59 125 777 58 648 2000 40 2003 42 2007 41 123 823 354 2004 61 2007 59 2008 61 2004 354 2009 40 41 59 2004 354 2010 40 38 2011 44 38 2012 41 59 125 126 2000 40 41 123 125 125 59 ,"{'AvgLine': 2, 'CountLine': 16, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 14, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 148, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99186,C++,"class VICARRawRasterBand final: public RawRasterBand
{
    protected:
        friend class VICARDataset;

    public:
                 VICARRawRasterBand(
                                VICARDataset *poDSIn, int nBandIn, VSILFILE* fpRawIn,
                                vsi_l_offset nImgOffsetIn, int nPixelOffsetIn,
                                int nLineOffsetIn,
                                GDALDataType eDataTypeIn,
                                ByteOrder eByteOrderIn);

        virtual CPLErr          IReadBlock( int, int, void * ) override;
        virtual CPLErr          IWriteBlock( int, int, void * ) override;

        virtual CPLErr  IRasterIO( GDALRWFlag, int, int, int, int,
                                void *, int, int, GDALDataType,
                                GSpacing nPixelSpace, GSpacing nLineSpace,
                                GDALRasterIOExtraArg* psExtraArg ) override;

};",0,587 2000 2001 58 777 2002 123 775 58 667 587 2003 59 777 58 2000 40 2003 42 2004 44 704 2005 44 2006 42 2007 44 2008 2009 44 704 2010 44 704 2011 44 2012 2013 44 2014 2015 41 59 864 2016 2017 40 704 44 704 44 865 42 41 2018 59 864 2016 2019 40 704 44 704 44 865 42 41 2018 59 864 2016 2020 40 2021 44 704 44 704 44 704 44 704 44 865 42 44 704 44 704 44 2012 44 2022 2023 44 2022 2024 44 2025 42 2026 41 2018 59 125 59 ,"{'AvgLine': 11, 'CountLine': 67, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 60, 'CountStmtDecl': 7, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 60, 'CountLineCodeExe': 17, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 172, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99764,C++,"class ISIS3RawRasterBand final: public RawRasterBand
{
        friend class ISIS3Dataset;

        bool      m_bHasOffset;
        bool      m_bHasScale;
        double    m_dfOffset;
        double    m_dfScale;
        double    m_dfNoData;

    public:
                 ISIS3RawRasterBand( GDALDataset *l_poDS, int l_nBand,
                                     VSILFILE * l_fpRaw,
                                     vsi_l_offset l_nImgOffset,
                                     int l_nPixelOffset,
                                     int l_nLineOffset,
                                     GDALDataType l_eDataType,
                                     int l_bNativeOrder );
        virtual ~ISIS3RawRasterBand() {}

        virtual CPLErr          IReadBlock( int, int, void * ) override;
        virtual CPLErr          IWriteBlock( int, int, void * ) override;

        virtual CPLErr  IRasterIO( GDALRWFlag, int, int, int, int,
                                void *, int, int, GDALDataType,
                                GSpacing nPixelSpace, GSpacing nLineSpace,
                                GDALRasterIOExtraArg* psExtraArg ) override;

        virtual double GetOffset( int *pbSuccess = nullptr ) override;
        virtual double GetScale( int *pbSuccess = nullptr ) override;
        virtual CPLErr SetOffset( double dfNewOffset ) override;
        virtual CPLErr SetScale( double dfNewScale ) override;
        virtual double GetNoDataValue( int *pbSuccess = nullptr ) override;
        virtual CPLErr SetNoDataValue( double dfNewNoData ) override;

        void    SetMaskBand(GDALRasterBand* poMaskBand);
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 569 2004 59 569 2005 59 625 2006 59 625 2007 59 625 2008 59 777 58 2000 40 2009 42 2010 44 704 2011 44 2012 42 2013 44 2014 2015 44 704 2016 44 704 2017 44 2018 2019 44 704 2020 41 59 864 126 2000 40 41 123 125 864 2021 2022 40 704 44 704 44 865 42 41 2023 59 864 2021 2024 40 704 44 704 44 865 42 41 2023 59 864 2021 2025 40 2026 44 704 44 704 44 704 44 704 44 865 42 44 704 44 704 44 2018 44 2027 2028 44 2027 2029 44 2030 42 2031 41 2023 59 864 625 2032 40 704 42 2033 61 753 41 2023 59 864 625 2034 40 704 42 2033 61 753 41 2023 59 864 2021 2035 40 625 2036 41 2023 59 864 2021 2037 40 625 2038 41 2023 59 864 625 2039 40 704 42 2033 61 753 41 2023 59 864 2021 2040 40 625 2041 41 2023 59 865 2042 40 2043 42 2044 41 59 125 59 ,"{'AvgLine': 12, 'CountLine': 181, 'CountStmt': 72, 'MaxNesting': 3, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 47, 'MaxEssential': 3, 'SumEssential': 14, 'AvgCyclomatic': 2, 'CountLineCode': 170, 'CountStmtDecl': 30, 'MaxCyclomatic': 6, 'SumCyclomatic': 25, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 12, 'AltCountLineCode': 170, 'CountLineCodeExe': 78, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 39, 'CountLineInactive': 0, 'CountDeclMethodAll': 180, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 30, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 25, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
98575,C++,"class PCIDSK_DLL BinaryTileLayer : public BlockTileLayer
{
protected:
    virtual void        WriteTileList(void) override;
    virtual void        ReadTileList(void) override;

    void                SwapBlockTile(BlockTileInfo * psTile, size_t nCount);

    // We need the tile block directory implementation class to be friend
    // since it is responsible to fill in the block list.
    friend class BinaryTileDir;

public:
    BinaryTileLayer(BlockDir * poBlockDir, uint32 nLayer,
                    BlockLayerInfo * psBlockLayer,
                    TileLayerInfo * psTileLayer);
};",0,587 2000 2001 58 777 2002 123 775 58 864 865 2003 40 865 41 2004 59 864 865 2005 40 865 41 2004 59 865 2006 40 2007 42 2008 44 2009 2010 41 59 330 330 667 587 2011 59 777 58 2001 40 2012 42 2013 44 2014 2015 44 2016 42 2017 44 2018 42 2019 41 59 125 59 ,"{'AvgLine': 13, 'CountLine': 72, 'CountStmt': 27, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 21, 'MaxEssential': 4, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 56, 'CountStmtDecl': 10, 'MaxCyclomatic': 5, 'SumCyclomatic': 10, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 58, 'CountLineCodeExe': 23, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 60, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 16, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98720,C++,"    class ExtendedLine
    {
    public:
        ExtendedLine( const double* line, size_t size, bool hasNoData, double noDataValue )
            : line_( line )
            , size_( size )
            , hasNoData_( hasNoData )
            , noDataValue_( noDataValue )
        {}

        double value( int idx ) const
        {
            if ( line_ == nullptr )
                return NaN;
            if ( idx < 0 || idx >= int(size_) )
                return NaN;
            double v = line_[idx];
            if ( hasNoData_ && v == noDataValue_ )
                return NaN;
            return v;
        }
    private:
        const double* line_;
        size_t size_;
        bool hasNoData_;
        double noDataValue_;
    };",0,587 2000 123 777 58 2000 40 601 625 42 2001 44 2002 2003 44 569 2004 44 625 2005 41 58 2006 40 2001 41 44 2007 40 2003 41 44 2008 40 2004 41 44 2009 40 2005 41 123 125 625 2010 40 704 2011 41 601 123 688 40 2006 323 753 41 792 2012 59 688 40 2011 60 1500 309 2011 325 704 40 2007 41 41 792 2012 59 625 2013 61 2006 91 2011 93 59 688 40 2008 307 2013 323 2009 41 792 2012 59 792 2013 59 125 773 58 601 625 42 2006 59 2002 2007 59 569 2008 59 625 2009 59 125 59 ,"{'AvgLine': 8, 'CountLine': 27, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 4, 'SumEssential': 5, 'AvgCyclomatic': 2, 'CountLineCode': 26, 'CountStmtDecl': 11, 'MaxCyclomatic': 4, 'SumCyclomatic': 5, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 26, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
98719,C++,"template <typename ContourWriter, typename LevelGenerator>
class ContourGenerator
{
public:
    ContourGenerator( size_t width, size_t height,
                      bool hasNoData, double noDataValue,
                      ContourWriter& writer, LevelGenerator& levelGenerator )
        : width_( width )
        , height_( height )
        , hasNoData_( hasNoData )
        , noDataValue_( noDataValue )
        , previousLine_()
        , writer_( writer )
        , levelGenerator_( levelGenerator )
    {
        previousLine_.resize( width_ );
        std::fill( previousLine_.begin(), previousLine_.end(), NaN );
    }
    CPLErr feedLine( const double* line )
    {
        if ( lineIdx_ <= height_ )
        {
            feedLine_( line );
            if ( lineIdx_ == height_ ) {
                // last line
                feedLine_( nullptr );
            }
        }
        return CE_None;
    }
private:
    size_t width_;
    size_t height_;
    bool hasNoData_;
    double noDataValue_;

    size_t lineIdx_ = 0;

    std::vector<double> previousLine_;

    ContourWriter& writer_;
    LevelGenerator& levelGenerator_;

    class ExtendedLine
    {
    public:
        ExtendedLine( const double* line, size_t size, bool hasNoData, double noDataValue )
            : line_( line )
            , size_( size )
            , hasNoData_( hasNoData )
            , noDataValue_( noDataValue )
        {}

        double value( int idx ) const
        {
            if ( line_ == nullptr )
                return NaN;
            if ( idx < 0 || idx >= int(size_) )
                return NaN;
            double v = line_[idx];
            if ( hasNoData_ && v == noDataValue_ )
                return NaN;
            return v;
        }
    private:
        const double* line_;
        size_t size_;
        bool hasNoData_;
        double noDataValue_;
    };
    void feedLine_( const double* line )
    {
        writer_.beginningOfLine();

        ExtendedLine previous( &previousLine_[0], width_, hasNoData_, noDataValue_ );
        ExtendedLine current( line, width_, hasNoData_, noDataValue_ );
        for ( int colIdx = -1; colIdx < int(width_); colIdx++ )
        {
            const ValuedPoint upperLeft(colIdx + 1 - .5, lineIdx_ - .5, previous.value( colIdx ));
            const ValuedPoint upperRight(colIdx + 1 + .5, lineIdx_ - .5, previous.value( colIdx+1 ));
            const ValuedPoint lowerLeft(colIdx + 1 - .5, lineIdx_ + .5, current.value( colIdx ));
            const ValuedPoint lowerRight(colIdx + 1 + .5, lineIdx_ + .5, current.value( colIdx+1 ));

            Square(upperLeft, upperRight, lowerLeft, lowerRight).process(levelGenerator_, writer_);
        }
        if ( line != nullptr )
            std::copy( line, line + width_, previousLine_.begin() );
        lineIdx_++;

        writer_.endOfLine();
    }
};",0,822 60 835 2000 44 835 2001 62 587 2002 123 777 58 2002 40 2003 2004 44 2003 2005 44 569 2006 44 625 2007 44 2000 38 2008 44 2001 38 2009 41 58 2010 40 2004 41 44 2011 40 2005 41 44 2012 40 2006 41 44 2013 40 2007 41 44 2014 40 41 44 2015 40 2008 41 44 2016 40 2009 41 123 2014 46 2017 40 2010 41 59 2018 321 2019 40 2014 46 2020 40 41 44 2014 46 2021 40 41 44 2022 41 59 125 2023 2024 40 601 625 42 2025 41 123 688 40 2026 329 2011 41 123 2027 40 2025 41 59 688 40 2026 323 2011 41 123 330 2027 40 753 41 59 125 125 792 2028 59 125 773 58 2003 2010 59 2003 2011 59 569 2012 59 625 2013 59 2003 2029 61 1500 59 2030 321 2031 60 625 62 2014 59 2000 38 2015 59 2001 38 2016 59 587 2032 123 777 58 2032 40 601 625 42 2025 44 2003 2033 44 569 2006 44 625 2007 41 58 2034 40 2025 41 44 2035 40 2033 41 44 2012 40 2006 41 44 2013 40 2007 41 123 125 625 2036 40 704 2037 41 601 123 688 40 2034 323 753 41 792 2038 59 688 40 2037 60 1500 309 2037 325 704 40 2035 41 41 792 2038 59 625 2039 61 2034 91 2037 93 59 688 40 2012 307 2039 323 2013 41 792 2038 59 792 2039 59 125 773 58 601 625 42 2034 59 2003 2035 59 569 2012 59 625 2013 59 125 59 865 2040 40 601 625 42 2025 41 123 2015 46 2041 40 41 59 2032 2042 40 38 2014 91 1500 93 44 2010 44 2012 44 2013 41 59 2032 2043 40 2025 44 2010 44 2012 44 2013 41 59 664 40 704 2044 61 45 1501 59 2044 60 704 40 2010 41 59 2044 349 41 123 601 2045 2046 40 2044 43 1501 45 1500 44 2029 45 1500 44 2042 46 2047 40 2044 41 41 59 601 2045 2048 40 2044 43 1501 43 1500 44 2029 45 1500 44 2042 46 2047 40 2044 43 1501 41 41 59 601 2045 2049 40 2044 43 1501 45 1500 44 2029 43 1500 44 2043 46 2047 40 2044 41 41 59 601 2045 2050 40 2044 43 1501 43 1500 44 2029 43 1500 44 2043 46 2047 40 2044 43 1501 41 41 59 2051 40 2046 44 2048 44 2049 44 2050 41 46 2052 40 2016 44 2015 41 59 125 688 40 2025 340 753 41 2030 321 2053 40 2025 44 2025 43 2010 44 2014 46 2054 40 41 41 59 2029 349 59 2015 46 2055 40 41 59 125 125 59 ,"{'AvgLine': 15, 'CountLine': 91, 'CountStmt': 53, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 19, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 82, 'CountStmtDecl': 36, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 82, 'CountLineCodeExe': 33, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 2, 'CountClassDerived': 1, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 41, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 7, 'CountDeclInstanceVariableProtected': 0}"
98721,C++,"template <typename ContourWriter, typename LevelGenerator>
class ContourGeneratorFromRaster : public ContourGenerator<ContourWriter, LevelGenerator>
{
public:
    ContourGeneratorFromRaster( const GDALRasterBandH band,
                                bool hasNoData, double noDataValue,
                                ContourWriter& writer, LevelGenerator& levelGenerator )
        : ContourGenerator<ContourWriter, LevelGenerator>( GDALGetRasterBandXSize( band ),
                                                           GDALGetRasterBandYSize( band ),
                                                           hasNoData, noDataValue,
                                                           writer, levelGenerator )
        , band_( band )
    {
    }

    bool process( GDALProgressFunc progressFunc = nullptr, void* progressData = nullptr )
    {
        size_t width = GDALGetRasterBandXSize( band_ );
        size_t height = GDALGetRasterBandYSize( band_ );
        std::vector<double> line;
        line.resize( width );

        for ( size_t lineIdx = 0; lineIdx < height; lineIdx++ )
        {
            if ( progressFunc && progressFunc( double(lineIdx) / height, ""Processing line"", progressData ) == FALSE )
                return false;
            
            CPLErr error = GDALRasterIO(band_, GF_Read, 0, int(lineIdx), int(width),
                                        1, &line[0], int(width), 1, GDT_Float64, 0, 0);
            if (error != CE_None)
            {
                CPLDebug(""CONTOUR"", ""failed fetch %d %d"", int(lineIdx), int(width));
                return false;
            }
            this->feedLine( &line[0] );
        }
        if ( progressFunc)
            progressFunc( 1.0, """", progressData );
        return true;
    }
private:
    const GDALRasterBandH band_;

    ContourGeneratorFromRaster( const ContourGeneratorFromRaster& ) = delete;
    ContourGeneratorFromRaster& operator=( const ContourGeneratorFromRaster& ) = delete;
};",0,822 60 835 2000 44 835 2001 62 587 2002 58 777 2003 60 2000 44 2001 62 123 777 58 2002 40 601 2004 2005 44 569 2006 44 625 2007 44 2000 38 2008 44 2001 38 2009 41 58 2003 60 2000 44 2001 62 40 2010 40 2005 41 44 2011 40 2005 41 44 2006 44 2007 44 2008 44 2009 41 44 2012 40 2005 41 123 125 569 2013 40 2014 2015 61 753 44 865 42 2016 61 753 41 123 2017 2018 61 2010 40 2012 41 59 2017 2019 61 2011 40 2012 41 59 2020 321 2021 60 625 62 2022 59 2022 46 2023 40 2018 41 59 664 40 2017 2024 61 1500 59 2024 60 2019 59 2024 349 41 123 688 40 2015 307 2015 40 625 40 2024 41 47 2019 44 362 44 2016 41 323 2025 41 792 655 59 2026 2027 61 2028 40 2012 44 2029 44 1500 44 704 40 2024 41 44 704 40 2018 41 44 1501 44 38 2022 91 1500 93 44 704 40 2018 41 44 1501 44 2030 44 1500 44 1500 41 59 688 40 2027 340 2031 41 123 2032 40 362 44 362 44 704 40 2024 41 44 704 40 2018 41 41 59 792 655 59 125 823 354 2033 40 38 2022 91 1500 93 41 59 125 688 40 2015 41 2015 40 1501 44 362 44 2016 41 59 792 829 59 125 773 58 601 2004 2012 59 2002 40 601 2002 38 41 61 619 59 2002 38 758 61 40 601 2002 38 41 61 619 59 125 59 ,"{'AvgLine': 17, 'CountLine': 45, 'CountStmt': 18, 'MaxNesting': 2, 'AvgLineCode': 16, 'AvgEssential': 2, 'AvgLineBlank': 1, 'CountStmtExe': 13, 'MaxEssential': 4, 'SumEssential': 5, 'AvgCyclomatic': 3, 'CountLineCode': 41, 'CountStmtDecl': 9, 'MaxCyclomatic': 5, 'SumCyclomatic': 6, 'AltAvgLineCode': 16, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 41, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98726,C++,"class OCAD_EXTERN CADArc : public CADCircle
{
public:
    CADArc();
    virtual ~CADArc(){}

    double getStartingAngle() const;
    void   setStartingAngle( double value );

    double getEndingAngle() const;
    void   setEndingAngle( double value );

    virtual void print() const override;
protected:
    double startingAngle;
    double endingAngle;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 625 2003 40 41 601 59 865 2004 40 625 2005 41 59 625 2006 40 41 601 59 865 2007 40 625 2005 41 59 864 865 2008 40 41 601 2009 59 775 58 625 2010 59 625 2011 59 125 59 ,"{'AvgLine': 4, 'CountLine': 49, 'CountStmt': 17, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 46, 'CountLineCodeExe': 14, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 36, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 55, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
98625,C++,"class CPL_DLL GMLGeometryPropertyDefn
{
    char       *m_pszName;
    char       *m_pszSrcElement;
    int         m_nGeometryType;
    int         m_nAttributeIndex;
    bool        m_bNullable;
    std::string m_osSRSName{};

public:
        GMLGeometryPropertyDefn( const char *pszName, const char *pszSrcElement,
                                 int nType, int nAttributeIndex,
                                 bool bNullable );
       ~GMLGeometryPropertyDefn();

        const char *GetName() const { return m_pszName; }

        int GetType() const { return m_nGeometryType; }
        void SetType(int nType) { m_nGeometryType = nType; }
        const char *GetSrcElement() const { return m_pszSrcElement; }

        int GetAttributeIndex() const { return m_nAttributeIndex; }

        bool IsNullable() const { return m_bNullable; }

        void SetSRSName(const std::string& srsName) { m_osSRSName = srsName; }
        const std::string& GetSRSName() const { return m_osSRSName; }
};",0,587 2000 2001 123 582 42 2002 59 582 42 2003 59 704 2004 59 704 2005 59 569 2006 59 2007 321 2008 2009 123 125 59 777 58 2001 40 601 582 42 2010 44 601 582 42 2011 44 704 2012 44 704 2013 44 569 2014 41 59 126 2001 40 41 59 601 582 42 2015 40 41 601 123 792 2002 59 125 704 2016 40 41 601 123 792 2004 59 125 865 2017 40 704 2012 41 123 2004 61 2012 59 125 601 582 42 2018 40 41 601 123 792 2003 59 125 704 2019 40 41 601 123 792 2005 59 125 569 2020 40 41 601 123 792 2006 59 125 865 2021 40 601 2007 321 2008 38 2022 41 123 2009 61 2022 59 125 601 2007 321 2008 38 2023 40 41 601 123 792 2009 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 45, 'CountStmt': 31, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 39, 'CountStmtDecl': 19, 'MaxCyclomatic': 1, 'SumCyclomatic': 10, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 39, 'CountLineCodeExe': 18, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 79, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 6, 'CountDeclInstanceVariableProtected': 0}"
98633,C++,"class GIFRasterBand final: public GIFAbstractRasterBand
{
  public:
    GIFRasterBand( GIFDataset *, int, SavedImage *, int );
    CPLErr IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 704 44 2004 42 44 704 41 59 2005 2006 40 704 44 704 44 865 42 41 2007 59 125 59 ,"{'AvgLine': 12, 'CountLine': 30, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 26, 'CountStmtDecl': 2, 'MaxCyclomatic': 3, 'SumCyclomatic': 4, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 2, 'CountDeclMethod': 2, 'AltCountLineCode': 26, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 135, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98638,C++,"class CPL_DLL GDALDimension
{
public:
//! @cond Doxygen_Suppress
    GDALDimension(const std::string& osParentName,
                  const std::string& osName,
                  const std::string& osType,
                  const std::string& osDirection,
                  GUInt64 nSize);
//! @endcond

    virtual ~GDALDimension();

    /** Return the name.
     *
     * This is the same as the C function GDALDimensionGetName()
     */
    const std::string& GetName() const { return m_osName; }

    /** Return the full name.
     *
     * This is the same as the C function GDALDimensionGetFullName()
     */
    const std::string& GetFullName() const { return m_osFullName; }

    /** Return the axis type.
     *
     * Predefined values are:
     * HORIZONTAL_X, HORIZONTAL_Y, VERTICAL, TEMPORAL, PARAMETRIC
     * Other values might be returned. Empty value means unknown.
     *
     * This is the same as the C function GDALDimensionGetType()
     */
    const std::string& GetType() const { return m_osType; }

    /** Return the axis direction.
     *
     * Predefined values are:
     * EAST, WEST, SOUTH, NORTH, UP, DOWN, FUTURE, PAST
     * Other values might be returned. Empty value means unknown.
     *
     * This is the same as the C function GDALDimensionGetDirection()
     */
    const std::string& GetDirection() const { return m_osDirection; }

    /** Return the size, that is the number of values along the dimension.
     *
     * This is the same as the C function GDALDimensionGetSize()
     */
    GUInt64 GetSize() const { return m_nSize; }

    virtual std::shared_ptr<GDALMDArray> GetIndexingVariable() const;

    virtual bool SetIndexingVariable(std::shared_ptr<GDALMDArray> poIndexingVariable);

protected:
//! @cond Doxygen_Suppress
    std::string m_osName;
    std::string m_osFullName;
    std::string m_osType;
    std::string m_osDirection;
    GUInt64 m_nSize;
//! @endcond
};",0,587 2000 2001 123 777 58 330 2001 40 601 2002 321 2003 38 2004 44 601 2002 321 2003 38 2005 44 601 2002 321 2003 38 2006 44 601 2002 321 2003 38 2007 44 2008 2009 41 59 330 864 126 2001 40 41 59 306 601 2002 321 2003 38 2010 40 41 601 123 792 2011 59 125 306 601 2002 321 2003 38 2012 40 41 601 123 792 2013 59 125 306 601 2002 321 2003 38 2014 40 41 601 123 792 2015 59 125 306 601 2002 321 2003 38 2016 40 41 601 123 792 2017 59 125 306 2008 2018 40 41 601 123 792 2019 59 125 864 2002 321 2020 60 2021 62 2022 40 41 601 59 864 569 2023 40 2002 321 2020 60 2021 62 2024 41 59 775 58 330 2002 321 2003 2025 59 2002 321 2003 2026 59 2002 321 2003 2027 59 2002 321 2003 2028 59 2008 2029 59 330 125 59 ,"{'AvgLine': 3, 'CountLine': 85, 'CountStmt': 24, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 18, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 44, 'CountLineCodeExe': 10, 'CountLineComment': 32, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 2, 'CountClassDerived': 4, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.73', 'AltCountLineComment': 32, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 4}"
98646,C++,"class VRTDimension final: public GDALDimension
{
    std::weak_ptr<VRTGroup::Ref> m_poGroupRef;
    std::string m_osIndexingVariableName;

public:
    VRTDimension(const std::shared_ptr<VRTGroup::Ref>& poGroupRef,
                  const std::string& osParentName,
                  const std::string& osName,
                  const std::string& osType,
                  const std::string& osDirection,
                  GUInt64 nSize,
                  const std::string& osIndexingVariableName):
        GDALDimension(osParentName, osName, osType, osDirection, nSize),
        m_poGroupRef(poGroupRef),
        m_osIndexingVariableName(osIndexingVariableName)
    {}

    VRTGroup* GetGroup() const;

    static std::shared_ptr<VRTDimension> Create(const std::shared_ptr<VRTGroup>& poThisGroup,
                                                const std::string& osParentName,
                                                const CPLXMLNode* psNode);

    std::shared_ptr<GDALMDArray> GetIndexingVariable() const override;

    bool SetIndexingVariable(std::shared_ptr<GDALMDArray> poIndexingVariable) override;

    void Serialize(CPLXMLNode* psParent) const;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 321 2006 62 2007 59 2003 321 2008 2009 59 777 58 2000 40 601 2003 321 2010 60 2005 321 2006 62 38 2011 44 601 2003 321 2008 38 2012 44 601 2003 321 2008 38 2013 44 601 2003 321 2008 38 2014 44 601 2003 321 2008 38 2015 44 2016 2017 44 601 2003 321 2008 38 2018 41 58 2002 40 2012 44 2013 44 2014 44 2015 44 2017 41 44 2007 40 2011 41 44 2009 40 2018 41 123 125 2005 42 2019 40 41 601 59 809 2003 321 2010 60 2000 62 2020 40 601 2003 321 2010 60 2005 62 38 2021 44 601 2003 321 2008 38 2012 44 601 2022 42 2023 41 59 2003 321 2010 60 2024 62 2025 40 41 601 2026 59 569 2027 40 2003 321 2010 60 2024 62 2028 41 2026 59 865 2029 40 2022 42 2030 41 601 59 125 59 ,"{'AvgLine': 22, 'CountLine': 156, 'CountStmt': 54, 'MaxNesting': 2, 'AvgLineCode': 22, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 42, 'MaxEssential': 5, 'SumEssential': 10, 'AvgCyclomatic': 3, 'CountLineCode': 149, 'CountStmtDecl': 20, 'MaxCyclomatic': 6, 'SumCyclomatic': 20, 'AltAvgLineCode': 22, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 149, 'CountLineCodeExe': 44, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 28, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98750,C++,"class DSToBeOpened
{
    public:
        GIntBig                 nPID;
        CPLString               osDSName;
        CPLString               osInterestLayers;
};",0,587 2000 123 777 58 2001 2002 59 2003 2004 59 2003 2005 59 125 59 ,"{'AvgLine': 0, 'CountLine': 7, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98752,C++,"class OGROSMSingleFeatureLayer final: public OGRLayer
{
  private:
    int                 nVal;
    char               *pszVal;
    OGRFeatureDefn     *poFeatureDefn;
    int                 iNextShapeId;

  public:
                        OGROSMSingleFeatureLayer( const char* pszLayerName,
                                                  int nVal );
                        OGROSMSingleFeatureLayer( const char* pszLayerName,
                                                  const char *pszVal );
                        virtual ~OGROSMSingleFeatureLayer();

    virtual void        ResetReading() override { iNextShapeId = 0; }
    virtual OGRFeature *GetNextFeature() override;
    virtual OGRFeatureDefn *GetLayerDefn() override { return poFeatureDefn; }
    virtual int         TestCapability( const char * ) override { return FALSE; }
};",0,587 2000 2001 58 777 2002 123 773 58 704 2003 59 582 42 2004 59 2005 42 2006 59 704 2007 59 777 58 2000 40 601 582 42 2008 44 704 2003 41 59 2000 40 601 582 42 2008 44 601 582 42 2004 41 59 864 126 2000 40 41 59 864 865 2009 40 41 2010 123 2007 61 1500 59 125 864 2011 42 2012 40 41 2010 59 864 2005 42 2013 40 41 2010 123 792 2006 59 125 864 704 2014 40 601 582 42 41 2010 123 792 2015 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 60, 'CountStmt': 38, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 57, 'CountStmtDecl': 19, 'MaxCyclomatic': 3, 'SumCyclomatic': 9, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 57, 'CountLineCodeExe': 29, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 89, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 55, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
98762,C++,"    class PCIDSK_DLL PCIDSK_PCT
    {
    public:
        virtual ~PCIDSK_PCT() {}

/**
\brief Read a PCT Segment (SEG_PCT).

@param pct  Pseudo-Color Table buffer (768 entries) into which the
pseudo-color table is read.  It consists of the red gun output
values (pct[0-255]), followed by the green gun output values (pct[256-511])
and ends with the blue gun output values (pct[512-767]).

*/
        virtual void ReadPCT( unsigned char pct[768] ) = 0;

/**
\brief Write a PCT Segment.

@param pct  Pseudo-Color Table buffer (768 entries) from which the
pseudo-color table is written.  It consists of the red gun output
values (pct[0-255]), followed by the green gun output values (pct[256-511])
and ends with the blue gun output values (pct[512-767]).

*/
        virtual void WritePCT( unsigned char pct[768] ) = 0;
    };",0,587 2000 2001 123 777 58 864 126 2001 40 41 123 125 306 864 865 2002 40 856 582 2003 91 1504 93 41 61 1500 59 306 864 865 2004 40 856 582 2003 91 1504 93 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 27, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 18, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '2.57', 'AltCountLineComment': 18, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98782,C++,"class STACTARawRasterBand final: public GDALRasterBand
{
        GDALColorInterp m_eColorInterp = GCI_Undefined;
        int             m_bHasNoDataValue = false;
        double          m_dfNoData = 0;

    public:
        STACTARawRasterBand(STACTARawDataset* poDSIn, int nBandIn,
                            GDALRasterBand* poProtoBand);
        CPLErr IReadBlock(int nBlockXOff, int nBlockYOff, void* pImage) override;
        CPLErr IRasterIO( GDALRWFlag eRWFlag,
                               int nXOff, int nYOff, int nXSize, int nYSize,
                               void * pData, int nBufXSize, int nBufYSize,
                               GDALDataType eBufType,
                               GSpacing nPixelSpace, GSpacing nLineSpace,
                               GDALRasterIOExtraArg* psExtraArg) override;
        GDALColorInterp GetColorInterpretation() override { return m_eColorInterp; }
        double GetNoDataValue(int* pbHasNoData = nullptr) override;
};",0,587 2000 2001 58 777 2002 123 2003 2004 61 2005 59 704 2006 61 655 59 625 2007 61 1500 59 777 58 2000 40 2008 42 2009 44 704 2010 44 2002 42 2011 41 59 2012 2013 40 704 2014 44 704 2015 44 865 42 2016 41 2017 59 2012 2018 40 2019 2020 44 704 2021 44 704 2022 44 704 2023 44 704 2024 44 865 42 2025 44 704 2026 44 704 2027 44 2028 2029 44 2030 2031 44 2030 2032 44 2033 42 2034 41 2017 59 2003 2035 40 41 2017 123 792 2004 59 125 625 2036 40 704 42 2037 61 753 41 2017 59 125 59 ,"{'AvgLine': 18, 'CountLine': 108, 'CountStmt': 53, 'MaxNesting': 2, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 28, 'MaxEssential': 3, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 99, 'CountStmtDecl': 25, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 16, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 99, 'CountLineCodeExe': 47, 'CountLineComment': 5, 'AltAvgLineComment': 1, 'AltCountLineBlank': 5, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 33, 'CountLineInactive': 0, 'CountDeclMethodAll': 99, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
98864,C++,"class SDTSFeature
{
public:

                        SDTSFeature();
    virtual            ~SDTSFeature();

    /** Unique identifier for this record/feature within transfer. */
    SDTSModId           oModId;

    /** Number of attribute links (aoATID[]) on this feature. */
    int         nAttributes;

    /** List of nAttributes attribute record identifiers related to this
        feature.  */
    SDTSModId   *paoATID;

    void        ApplyATID( DDFField * );

    /** Dump readable description of feature to indicated stream. */
    virtual void Dump( FILE * ) = 0;
};",0,587 2000 123 777 58 2000 40 41 59 864 126 2000 40 41 59 306 2001 2002 59 306 704 2003 59 306 2001 42 2004 59 865 2005 40 2006 42 41 59 306 864 865 2007 40 2008 42 41 61 1500 59 125 59 ,"{'AvgLine': 17, 'CountLine': 73, 'CountStmt': 32, 'MaxNesting': 3, 'AvgLineCode': 14, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 23, 'MaxEssential': 5, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 54, 'CountStmtDecl': 15, 'MaxCyclomatic': 5, 'SumCyclomatic': 7, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 54, 'CountLineCodeExe': 29, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 4, 'CountClassDerived': 4, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98887,C++,"class OCAD_EXTERN  CADClass
{
public:
    CADClass();

public:
    std::string          sCppClassName;       /**< TV, C++ class name */
    std::string          sApplicationName;    /**< TV, Application name */
    std::string          sDXFRecordName;      /**< TV, Class DXF record name */
    int             dProxyCapFlag;       /**< BITSHORT, Proxy capabilities flag, 90 */
    unsigned short  dInstanceCount;      /**< BITSHORT, Instance count for a custom class, 91 */
    bool            bWasZombie;          /**< BIT, Was-a-proxy flag, 280*/
    bool            bIsEntity;           /**< BITSHORT, Is-an-entity flag, 281 */
    short           dClassNum;           /**< BITSHORT, Class number */
    short           dClassVersion;       /**< BITSHORT, Class version */
};",0,587 2000 2001 123 777 58 2001 40 41 59 777 58 2002 321 2003 2004 59 306 2002 321 2003 2005 59 306 2002 321 2003 2006 59 306 704 2007 59 306 856 803 2008 59 306 569 2009 59 306 569 2010 59 306 803 2011 59 306 803 2012 59 306 125 59 ,"{'AvgLine': 11, 'CountLine': 27, 'CountStmt': 19, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 16, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 26, 'CountLineCodeExe': 9, 'CountLineComment': 9, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.35', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 9, 'CountDeclInstanceVariablePublic': 9, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98884,C++,"class VSIPluginHandle : public VSIVirtualHandle
{
    CPL_DISALLOW_COPY_ASSIGN(VSIPluginHandle)

  protected:
    VSIPluginFilesystemHandler* poFS;
    void *cbData;

  public:

    VSIPluginHandle( VSIPluginFilesystemHandler* poFS, void *cbData);
    ~VSIPluginHandle() override;

    vsi_l_offset    Tell() override;
    int             Seek( vsi_l_offset nOffset, int nWhence ) override;
    size_t          Read( void *pBuffer, size_t nSize, size_t nCount ) override;
    int             ReadMultiRange( int nRanges, void ** ppData, const vsi_l_offset* panOffsets, const size_t* panSizes ) override;
    VSIRangeStatus  GetRangeStatus( vsi_l_offset nOffset, vsi_l_offset nLength ) override;
    int             Eof() override;
    size_t          Write( const void *pBuffer, size_t nSize,size_t nCount) override;
    int             Flush() override;
    int             Truncate( vsi_l_offset nNewSize ) override;
    int             Close() override;
};",0,587 2000 58 777 2001 123 2002 40 2000 41 775 58 2003 42 2004 59 865 42 2005 59 777 58 2000 40 2003 42 2004 44 865 42 2005 41 59 126 2000 40 41 2006 59 2007 2008 40 41 2006 59 704 2009 40 2007 2010 44 704 2011 41 2006 59 2012 2013 40 865 42 2014 44 2012 2015 44 2012 2016 41 2006 59 704 2017 40 704 2018 44 865 42 42 2019 44 601 2007 42 2020 44 601 2012 42 2021 41 2006 59 2022 2023 40 2007 2010 44 2007 2024 41 2006 59 704 2025 40 41 2006 59 2012 2026 40 601 865 42 2014 44 2012 2015 44 2012 2016 41 2006 59 704 2027 40 41 2006 59 704 2028 40 2007 2029 41 2006 59 704 2030 40 41 2006 59 125 59 ,"{'AvgLine': 4, 'CountLine': 74, 'CountStmt': 30, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 70, 'CountStmtDecl': 17, 'MaxCyclomatic': 2, 'SumCyclomatic': 13, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 14, 'AltCountLineCode': 70, 'CountLineCodeExe': 16, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 26, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 17, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
98895,C++,"class IODSCellEvaluator
{
public:
    virtual int EvaluateRange(int nRow1, int nCol1, int nRow2, int nCol2,
                              std::vector<ods_formula_node>& aoOutValues) = 0;
    virtual ~IODSCellEvaluator() {}

    int m_nDepth = 0;
};",0,587 2000 123 777 58 864 704 2001 40 704 2002 44 704 2003 44 704 2004 44 704 2005 44 2006 321 2007 60 2008 62 38 2009 41 61 1500 59 864 126 2000 40 41 123 125 704 2010 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 9, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 8, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98897,C++,"class OGRMemLayerIteratorArray final: public IOGRMemLayerFeatureIterator
{
    GIntBig m_iCurIdx;
    GIntBig m_nMaxFeatureCount;
    OGRFeature **m_papoFeatures;

  public:
    OGRMemLayerIteratorArray( GIntBig nMaxFeatureCount,
                              OGRFeature **papoFeatures ):
        m_iCurIdx(0),
        m_nMaxFeatureCount(nMaxFeatureCount),
        m_papoFeatures(papoFeatures)
        {}

    virtual ~OGRMemLayerIteratorArray() {}

    virtual OGRFeature *Next() override
    {
        while( m_iCurIdx < m_nMaxFeatureCount )
        {
            OGRFeature *poFeature = m_papoFeatures[m_iCurIdx];
            ++m_iCurIdx;
            if( poFeature != nullptr )
                return poFeature;
        }
        return nullptr;
    }
};",0,587 2000 2001 58 777 2002 123 2003 2004 59 2003 2005 59 2006 42 42 2007 59 777 58 2000 40 2003 2008 44 2006 42 42 2009 41 58 2004 40 1500 41 44 2005 40 2008 41 44 2007 40 2009 41 123 125 864 126 2000 40 41 123 125 864 2006 42 2010 40 41 2011 123 870 40 2004 60 2005 41 123 2006 42 2012 61 2007 91 2004 93 59 349 2004 59 688 40 2012 340 753 41 792 2012 59 125 792 753 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 28, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 25, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 25, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98902,C++,"class ErrorStruct
{
  public:
    CPLErr type;
    CPLErrorNum no;
    char* msg;

    ErrorStruct() = delete;
    ErrorStruct(CPLErr eErrIn, CPLErrorNum noIn, const char* msgIn) :
        type(eErrIn), no(noIn), msg(msgIn ? CPLStrdup(msgIn) : nullptr) {}
    ErrorStruct(const ErrorStruct& other):
        type(other.type), no(other.no),
        msg(other.msg ? CPLStrdup(other.msg) : nullptr) {}
    ~ErrorStruct() { CPLFree(msg); }
};",0,587 2000 123 777 58 2001 2002 59 2003 2004 59 582 42 2005 59 2000 40 41 61 619 59 2000 40 2001 2006 44 2003 2007 44 601 582 42 2008 41 58 2002 40 2006 41 44 2004 40 2007 41 44 2005 40 2008 63 2009 40 2008 41 58 753 41 123 125 2000 40 601 2000 38 2010 41 58 2002 40 2010 46 2002 41 44 2004 40 2010 46 2004 41 44 2005 40 2010 46 2005 63 2009 40 2010 46 2005 41 58 753 41 123 125 126 2000 40 41 123 2011 40 2005 41 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 15, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 14, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 41, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98898,C++,"class OGRMemLayerIteratorMap final: public IOGRMemLayerFeatureIterator
{
    typedef std::map<GIntBig, OGRFeature *>           FeatureMap;
    typedef std::map<GIntBig, OGRFeature *>::iterator FeatureIterator;

    FeatureMap     &m_oMapFeatures;
    FeatureIterator m_oIter;

  public:
    explicit OGRMemLayerIteratorMap(FeatureMap &oMapFeatures) :
        m_oMapFeatures(oMapFeatures),
        m_oIter(oMapFeatures.begin())
        {}

    virtual ~OGRMemLayerIteratorMap() {}

    virtual OGRFeature *Next() override
    {
        if( m_oIter != m_oMapFeatures.end() )
        {
            OGRFeature *poFeature = m_oIter->second;
            ++m_oIter;
            return poFeature;
        }
        return nullptr;
    }

  private:
    CPL_DISALLOW_COPY_ASSIGN(OGRMemLayerIteratorMap)
};",0,587 2000 2001 58 777 2002 123 833 2003 321 2004 60 2005 44 2006 42 62 2007 59 833 2003 321 2004 60 2005 44 2006 42 62 321 2008 2009 59 2007 38 2010 59 2009 2011 59 777 58 648 2000 40 2007 38 2012 41 58 2010 40 2012 41 44 2011 40 2012 46 2013 40 41 41 123 125 864 126 2000 40 41 123 125 864 2006 42 2014 40 41 2015 123 688 40 2011 340 2010 46 2016 40 41 41 123 2006 42 2017 61 2011 354 2018 59 349 2011 59 792 2017 59 125 792 753 59 125 773 58 2019 40 2000 41 125 59 ,"{'AvgLine': 5, 'CountLine': 30, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 25, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 25, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99374,C++,"class PNG_Band final: public MRFRasterBand {
    friend class MRFDataset;
public:
    PNG_Band(MRFDataset *pDS, const ILImage &image, int b, int level);

protected:
    virtual CPLErr Decompress(buf_mgr &dst, buf_mgr &src) override;
    virtual CPLErr Compress(buf_mgr &dst, buf_mgr &src) override;

    PNG_Codec codec;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 2000 40 2003 42 2004 44 601 2005 38 2006 44 704 2007 44 704 2008 41 59 775 58 864 2009 2010 40 2011 38 2012 44 2011 38 2013 41 2014 59 864 2009 2015 40 2011 38 2012 44 2011 38 2013 41 2014 59 2016 2017 59 125 59 ,"{'AvgLine': 12, 'CountLine': 49, 'CountStmt': 16, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 3, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 45, 'CountStmtDecl': 5, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 12, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 45, 'CountLineCodeExe': 14, 'CountLineComment': 3, 'AltAvgLineComment': 1, 'AltCountLineBlank': 3, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 166, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98917,C++,"class OGROpenFileGDBSingleFeatureLayer final: public OGRLayer
{
  private:
    char               *pszVal;
    OGRFeatureDefn     *poFeatureDefn;
    int                 iNextShapeId;

  public:
                        OGROpenFileGDBSingleFeatureLayer( const char* pszLayerName,
                                                          const char *pszVal );
               virtual ~OGROpenFileGDBSingleFeatureLayer();

    virtual void        ResetReading() override { iNextShapeId = 0; }
    virtual OGRFeature *GetNextFeature() override;
    virtual OGRFeatureDefn *GetLayerDefn() override { return poFeatureDefn; }
    virtual int         TestCapability( const char * ) override { return FALSE; }
};",0,587 2000 2001 58 777 2002 123 773 58 582 42 2003 59 2004 42 2005 59 704 2006 59 777 58 2000 40 601 582 42 2007 44 601 582 42 2003 41 59 864 126 2000 40 41 59 864 865 2008 40 41 2009 123 2006 61 1500 59 125 864 2010 42 2011 40 41 2009 59 864 2004 42 2012 40 41 2009 123 792 2005 59 125 864 704 2013 40 601 582 42 41 2009 123 792 2014 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 46, 'CountStmt': 29, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 19, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 43, 'CountStmtDecl': 12, 'MaxCyclomatic': 3, 'SumCyclomatic': 9, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 43, 'CountLineCodeExe': 21, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 88, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 58, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
98929,C++,"class VSIArchiveReader
{
    public:
        virtual ~VSIArchiveReader();

        virtual int GotoFirstFile() = 0;
        virtual int GotoNextFile() = 0;
        virtual VSIArchiveEntryFileOffset* GetFileOffset() = 0;
        virtual GUIntBig GetFileSize() = 0;
        virtual CPLString GetFileName() = 0;
        virtual GIntBig GetModifiedTime() = 0;
        virtual int GotoFileOffset(VSIArchiveEntryFileOffset* pOffset) = 0;
};",0,587 2000 123 777 58 864 126 2000 40 41 59 864 704 2001 40 41 61 1500 59 864 704 2002 40 41 61 1500 59 864 2003 42 2004 40 41 61 1500 59 864 2005 2006 40 41 61 1500 59 864 2007 2008 40 41 61 1500 59 864 2009 2010 40 41 61 1500 59 864 704 2011 40 2003 42 2012 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 14, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 13, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 2, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98925,C++,"class CPL_DLL GDALAllValidMaskBand : public GDALRasterBand
{
  protected:
    CPLErr IReadBlock( int, int, void * ) override;

    CPL_DISALLOW_COPY_ASSIGN(GDALAllValidMaskBand)

  public:
    explicit     GDALAllValidMaskBand( GDALRasterBand * );
    ~GDALAllValidMaskBand() override;

    GDALRasterBand *GetMaskBand() override;
    int             GetMaskFlags() override;

    CPLErr ComputeStatistics( int bApproxOK,
                            double *pdfMin, double *pdfMax,
                            double *pdfMean, double *pdfStdDev,
                            GDALProgressFunc, void *pProgressData ) override;

};",0,587 2000 2001 58 777 2002 123 775 58 2003 2004 40 704 44 704 44 865 42 41 2005 59 2006 40 2001 41 777 58 648 2001 40 2002 42 41 59 126 2001 40 41 2005 59 2002 42 2007 40 41 2005 59 704 2008 40 41 2005 59 2003 2009 40 704 2010 44 625 42 2011 44 625 42 2012 44 625 42 2013 44 625 42 2014 44 2015 44 865 42 2016 41 2005 59 125 59 ,"{'AvgLine': 9, 'CountLine': 65, 'CountStmt': 24, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 55, 'CountStmtDecl': 6, 'MaxCyclomatic': 5, 'SumCyclomatic': 9, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 55, 'CountLineCodeExe': 17, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 102, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98954,C++,"class GMLRegistryNamespace
{
    public:
        GMLRegistryNamespace() : bUseGlobalSRSName(false) {}

        CPLString                           osPrefix;
        CPLString                           osURI;
        bool                                bUseGlobalSRSName;
        std::vector<GMLRegistryFeatureType> aoFeatureTypes;

        bool Parse(const char* pszRegistryFilename, CPLXMLNode* psNode);
};",0,587 2000 123 777 58 2000 40 41 58 2001 40 655 41 123 125 2002 2003 59 2002 2004 59 569 2001 59 2005 321 2006 60 2007 62 2008 59 569 2009 40 601 582 42 2010 44 2011 42 2012 41 59 125 59 ,"{'AvgLine': 16, 'CountLine': 43, 'CountStmt': 27, 'MaxNesting': 3, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 3, 'CountLineCode': 40, 'CountStmtDecl': 13, 'MaxCyclomatic': 6, 'SumCyclomatic': 7, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 40, 'CountLineCodeExe': 20, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98941,C++,"class FlatCompiler {
 public:
  // Output generator for the various programming languages and formats we
  // support.
  struct Generator {
    typedef bool (*GenerateFn)(const flatbuffers::Parser &parser,
                               const std::string &path,
                               const std::string &file_name);
    typedef std::string (*MakeRuleFn)(const flatbuffers::Parser &parser,
                                      const std::string &path,
                                      const std::string &file_name);

    GenerateFn generate;
    const char *generator_opt_short;
    const char *generator_opt_long;
    const char *lang_name;
    bool schema_only;
    GenerateFn generateGRPC;
    flatbuffers::IDLOptions::Language lang;
    const char *generator_help;
    MakeRuleFn make_rule;
  };

  typedef void (*WarnFn)(const FlatCompiler *flatc, const std::string &warn,
                         bool show_exe_name);

  typedef void (*ErrorFn)(const FlatCompiler *flatc, const std::string &err,
                          bool usage, bool show_exe_name);

  // Parameters required to initialize the FlatCompiler.
  struct InitParams {
    InitParams()
        : generators(nullptr),
          num_generators(0),
          warn_fn(nullptr),
          error_fn(nullptr) {}

    const Generator *generators;
    size_t num_generators;
    WarnFn warn_fn;
    ErrorFn error_fn;
  };

  explicit FlatCompiler(const InitParams &params) : params_(params) {}

  int Compile(int argc, const char **argv);

  std::string GetUsageString(const char *program_name) const;

 private:
  void ParseFile(flatbuffers::Parser &parser, const std::string &filename,
                 const std::string &contents,
                 std::vector<const char *> &include_directories) const;

  void LoadBinarySchema(Parser &parser, const std::string &filename,
                        const std::string &contents);

  void Warn(const std::string &warn, bool show_exe_name = true) const;

  void Error(const std::string &err, bool usage = true,
             bool show_exe_name = true) const;

  InitParams params_;
};",0,587 2000 123 777 58 330 330 816 2001 123 833 569 40 42 2002 41 40 601 2003 321 2004 38 2005 44 601 2006 321 2007 38 2008 44 601 2006 321 2007 38 2009 41 59 833 2006 321 2007 40 42 2010 41 40 601 2003 321 2004 38 2005 44 601 2006 321 2007 38 2008 44 601 2006 321 2007 38 2009 41 59 2002 2011 59 601 582 42 2012 59 601 582 42 2013 59 601 582 42 2014 59 569 2015 59 2002 2016 59 2003 321 2017 321 2018 2019 59 601 582 42 2020 59 2010 2021 59 125 59 833 865 40 42 2022 41 40 601 2000 42 2023 44 601 2024 321 2025 38 2026 44 569 2027 41 59 833 865 40 42 2028 41 40 601 2000 42 2023 44 601 2024 321 2025 38 2029 44 569 2030 44 569 2027 41 59 330 816 2031 123 2031 40 41 58 2032 40 753 41 44 2033 40 1500 41 44 2034 40 753 41 44 2035 40 753 41 123 125 601 2001 42 2032 59 2036 2033 59 2022 2034 59 2028 2035 59 125 59 648 2000 40 601 2031 38 2037 41 58 2038 40 2037 41 123 125 704 2039 40 704 2040 44 601 582 42 42 2041 41 59 2024 321 2025 2042 40 601 582 42 2043 41 601 59 773 58 865 2044 40 2045 321 2046 38 2047 44 601 2024 321 2025 38 2048 44 601 2024 321 2025 38 2049 44 2024 321 2050 60 601 582 42 62 38 2051 41 601 59 865 2052 40 2046 38 2047 44 601 2024 321 2025 38 2048 44 601 2024 321 2025 38 2049 41 59 865 2053 40 601 2024 321 2025 38 2026 44 569 2027 61 829 41 601 59 865 2054 40 601 2024 321 2025 38 2029 44 569 2030 61 829 44 569 2027 61 829 41 601 59 2031 2038 59 125 59 ,"{'AvgLine': 1, 'CountLine': 64, 'CountStmt': 33, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 48, 'CountStmtDecl': 33, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 48, 'CountLineCodeExe': 5, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98963,C++,"class OSRProjTLSCache
{
        struct EPSGCacheKey
        {
            int nCode_;
            bool bUseNonDeprecated_;
            bool bAddTOWGS84_;

            EPSGCacheKey(int nCode, bool bUseNonDeprecated, bool bAddTOWGS84):
                nCode_(nCode), bUseNonDeprecated_(bUseNonDeprecated), bAddTOWGS84_(bAddTOWGS84) {}

            bool operator==(const EPSGCacheKey& other) const
            {
                return nCode_ == other.nCode_ &&
                       bUseNonDeprecated_ == other.bUseNonDeprecated_ &&
                       bAddTOWGS84_ == other.bAddTOWGS84_;
            }
        };
        struct EPSGCacheKeyHasher
        {
            std::size_t operator()(const EPSGCacheKey& k) const
            {
                return k.nCode_ |
                       ((k.bUseNonDeprecated_ ? 1 : 0) << 16) |
                       ((k.bAddTOWGS84_ ? 1 : 0) << 17);
            }
        };

        lru11::Cache<EPSGCacheKey, std::shared_ptr<PJ>,
                     lru11::NullLock,
                      std::unordered_map<
                        EPSGCacheKey,
                        typename std::list<lru11::KeyValuePair<EPSGCacheKey,
                            std::shared_ptr<PJ>>>::iterator,
                            EPSGCacheKeyHasher>> m_oCacheEPSG{};
        lru11::Cache<std::string, std::shared_ptr<PJ>> m_oCacheWKT{};

    public:
        OSRProjTLSCache() = default;

        void clear();

        PJ* GetPJForEPSGCode(int nCode, bool bUseNonDeprecated, bool bAddTOWGS84);
        void CachePJForEPSGCode(int nCode, bool bUseNonDeprecated, bool bAddTOWGS84, PJ* pj);

        PJ* GetPJForWKT(const std::string& wkt);
        void CachePJForWKT(const std::string& wkt, PJ* pj);
};",0,587 2000 123 816 2001 123 704 2002 59 569 2003 59 569 2004 59 2001 40 704 2005 44 569 2006 44 569 2007 41 58 2002 40 2005 41 44 2003 40 2006 41 44 2004 40 2007 41 123 125 569 758 323 40 601 2001 38 2008 41 601 123 792 2002 323 2008 46 2002 307 2003 323 2008 46 2003 307 2004 323 2008 46 2004 59 125 125 59 816 2009 123 2010 321 2011 758 40 41 40 601 2001 38 2012 41 601 123 792 2012 46 2013 124 40 40 2012 46 2014 63 1501 58 1500 41 332 1503 41 124 40 40 2012 46 2015 63 1501 58 1500 41 332 1503 41 59 125 125 59 2016 321 2017 60 2001 44 2018 321 2019 60 2020 62 44 2016 321 2021 44 2018 321 2022 60 2001 44 835 2018 321 2023 60 2016 321 2024 60 2001 44 2018 321 2019 60 2020 355 62 321 2025 44 2009 355 2026 123 125 59 2016 321 2017 60 2018 321 2027 44 2018 321 2019 60 2020 355 2028 123 125 59 777 58 2000 40 41 61 613 59 865 2029 40 41 59 2020 42 2030 40 704 2031 44 569 2032 44 569 2033 41 59 865 2034 40 704 2031 44 569 2032 44 569 2033 44 2020 42 2035 41 59 2020 42 2036 40 601 2018 321 2027 38 2037 41 59 865 2038 40 601 2018 321 2027 38 2037 44 2020 42 2035 41 59 125 59 ,"{'AvgLine': 7, 'CountLine': 83, 'CountStmt': 27, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 76, 'CountStmtDecl': 21, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 76, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98992,C++,"class IOGRSQLiteGetSpatialWhere
{
  public:
    virtual              ~IOGRSQLiteGetSpatialWhere() {}

    virtual bool          HasFastSpatialFilter(int iGeomCol) = 0;
    virtual CPLString     GetSpatialWhere(int iGeomCol,
                                          OGRGeometry* poFilterGeom) = 0;
};",0,587 2000 123 777 58 864 126 2000 40 41 123 125 864 569 2001 40 704 2002 41 61 1500 59 864 2003 2004 40 704 2002 44 2005 42 2006 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 9, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 8, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 2, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99443,C++,"       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };",0,587 2000 123 569 2001 59 2002 2003 59 777 58 865 2004 40 41 123 688 40 2001 41 123 2005 40 2003 41 59 2001 61 655 59 125 125 2000 40 41 58 2001 40 829 41 44 2003 40 2006 40 41 41 123 125 126 2000 40 41 123 2004 40 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 8, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99003,C++,"    class Point
    {
        int size;
        std::unique_ptr<double, std::default_delete<double[]>> values;
        Point(Point&);
        Point operator=(const Point &);

        public:
        explicit Point(int dim) : size(dim), values(std::unique_ptr<double, std::default_delete<double[]>>(new double[dim])) {}
        double& operator[](size_t i) { return this->values.get()[i]; }
        int getOrder() { return this->size; }
    };",0,587 2000 123 704 2001 59 2002 321 2003 60 625 44 2002 321 2004 60 625 91 93 355 2005 59 2000 40 2000 38 41 59 2000 758 61 40 601 2000 38 41 59 777 58 648 2000 40 704 2006 41 58 2001 40 2006 41 44 2005 40 2002 321 2003 60 625 44 2002 321 2004 60 625 91 93 355 40 744 625 91 2006 93 41 41 123 125 625 38 758 91 93 40 2007 2008 41 123 792 823 354 2005 46 2009 40 41 91 2008 93 59 125 704 2010 40 41 123 792 823 354 2001 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 12, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 11, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99043,C++,"class WMSMiniDriver_WorldWind : public WMSMiniDriver {
public:
    WMSMiniDriver_WorldWind();
    virtual ~WMSMiniDriver_WorldWind();

public:
    virtual CPLErr Initialize(CPLXMLNode *config, char **papszOpenOptions) override;
    virtual CPLErr TiledImageRequest(WMSHTTPRequest &request,
                                     const GDALWMSImageRequestInfo &iri,
                                     const GDALWMSTiledImageRequestInfo &tiri) override;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 864 126 2000 40 41 59 777 58 864 2002 2003 40 2004 42 2005 44 582 42 42 2006 41 2007 59 864 2002 2008 40 2009 38 2010 44 601 2011 38 2012 44 601 2013 38 2014 41 2007 59 125 59 ,"{'AvgLine': 8, 'CountLine': 44, 'CountStmt': 19, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 38, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 38, 'CountLineCodeExe': 17, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99093,C++,"class GMLASBinInputStream : public BinInputStream
{
    VSILFILE*         m_fp;

public :

    explicit GMLASBinInputStream(VSILFILE* fp);
    virtual ~GMLASBinInputStream();

    virtual XMLFilePos curPos() const override;
    virtual XMLSize_t readBytes(XMLByte* const toFill, const XMLSize_t maxToRead) override;
    virtual const XMLCh* getContentType() const override ;
};",0,587 2000 58 777 2001 123 2002 42 2003 59 777 58 648 2000 40 2002 42 2004 41 59 864 126 2000 40 41 59 864 2005 2006 40 41 601 2007 59 864 2008 2009 40 2010 42 601 2011 44 601 2008 2012 41 2007 59 864 601 2013 42 2014 40 41 601 2007 59 125 59 ,"{'AvgLine': 4, 'CountLine': 34, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 31, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99040,C++,"class WMSMiniDriver_TMS : public WMSMiniDriver {
    int m_nTileXMultiplier = 1;

public:
    WMSMiniDriver_TMS();
    virtual ~WMSMiniDriver_TMS();

public:
    virtual CPLErr Initialize(CPLXMLNode *config, char **papszOpenOptions) override;
    virtual CPLErr TiledImageRequest(WMSHTTPRequest &request,
                                     const GDALWMSImageRequestInfo &iri,
                                     const GDALWMSTiledImageRequestInfo &tiri) override;
};",0,587 2000 58 777 2001 123 704 2002 61 1501 59 777 58 2000 40 41 59 864 126 2000 40 41 59 777 58 864 2003 2004 40 2005 42 2006 44 582 42 42 2007 41 2008 59 864 2003 2009 40 2010 38 2011 44 601 2012 38 2013 44 601 2014 38 2015 41 2008 59 125 59 ,"{'AvgLine': 16, 'CountLine': 80, 'CountStmt': 41, 'MaxNesting': 3, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 33, 'MaxEssential': 4, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 66, 'CountStmtDecl': 14, 'MaxCyclomatic': 4, 'SumCyclomatic': 10, 'AltAvgLineCode': 13, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 66, 'CountLineCodeExe': 39, 'CountLineComment': 4, 'AltAvgLineComment': 1, 'AltCountLineBlank': 10, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99041,C++,"class WMSMiniDriver_VirtualEarth : public WMSMiniDriver {
public:
    WMSMiniDriver_VirtualEarth();
    virtual ~WMSMiniDriver_VirtualEarth();

public:
    virtual CPLErr Initialize(CPLXMLNode *config, char **papszOpenOptions) override;
    virtual CPLErr TiledImageRequest(WMSHTTPRequest &request,
                                        const GDALWMSImageRequestInfo &iri,
                                        const GDALWMSTiledImageRequestInfo &tiri) override;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 864 126 2000 40 41 59 777 58 864 2002 2003 40 2004 42 2005 44 582 42 42 2006 41 2007 59 864 2002 2008 40 2009 38 2010 44 601 2011 38 2012 44 601 2013 38 2014 41 2007 59 125 59 ,"{'AvgLine': 13, 'CountLine': 65, 'CountStmt': 35, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 25, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 56, 'CountStmtDecl': 12, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 56, 'CountLineCodeExe': 32, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99063,C++,"class OGRDODSArrayRef
{
public:
    OGRDODSArrayRef() {
        pszName = nullptr;
        iFieldIndex = -1;
        poArray = nullptr;
        pRawData = nullptr;
            }
    ~OGRDODSArrayRef() {
        CPLFree( pszName );
        CPLFree( pRawData );
    }

    char *pszName;
    int   iFieldIndex;
    Array *poArray;
    void  *pRawData;
};",0,587 2000 123 777 58 2000 40 41 123 2001 61 753 59 2002 61 45 1501 59 2003 61 753 59 2004 61 753 59 125 126 2000 40 41 123 2005 40 2006 41 59 2005 40 2007 41 59 125 582 42 2008 59 704 2009 59 2010 42 2011 59 865 42 2012 59 125 59 ,"{'AvgLine': 5, 'CountLine': 19, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 18, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 37, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99064,C++,"class OGRDODSDim
{
public:
    OGRDODSDim() {
        pszDimName = nullptr;
        nDimStart = 0;
        nDimEnd = 0;
        nDimStride = 0;
        nDimEntries = 0;
        poMap = nullptr;
        pRawData = nullptr;
        iLastValue = 0;
    }
    ~OGRDODSDim() {
        CPLFree( pszDimName );
        CPLFree( pRawData );
    }

    char *pszDimName;
    int  nDimStart;
    int  nDimEnd;
    int  nDimStride;
    int  nDimEntries;
    Array *poMap;
    void *pRawData;
    int  iLastValue;
};",0,587 2000 123 777 58 2000 40 41 123 2001 61 753 59 2002 61 1500 59 2003 61 1500 59 2004 61 1500 59 2005 61 1500 59 2006 61 753 59 2007 61 753 59 2008 61 1500 59 125 126 2000 40 41 123 2009 40 2010 41 59 2009 40 2011 41 59 125 582 42 2012 59 704 2013 59 704 2014 59 704 2015 59 704 2016 59 2017 42 2018 59 865 42 2019 59 704 2020 59 125 59 ,"{'AvgLine': 7, 'CountLine': 27, 'CountStmt': 19, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 26, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 43, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 8, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99065,C++,"class OGRDODSFieldDefn {
public:
    OGRDODSFieldDefn();
    ~OGRDODSFieldDefn();

    bool Initialize( AttrTable *,
                     BaseType *poTarget = nullptr, BaseType *poSuperSeq = nullptr );
    bool Initialize( const char *, const char * = ""das"",
                     BaseType *poTarget = nullptr, BaseType *poSuperSeq = nullptr );

    bool bValid;
    char *pszFieldName;
    char *pszFieldScope;
    int  iFieldIndex;
    char *pszFieldValue;
    char *pszPathToSequence;

    bool bRelativeToSuperSequence;
    bool bRelativeToSequence;
};",0,587 2000 123 777 58 2000 40 41 59 126 2000 40 41 59 569 2001 40 2002 42 44 2003 42 2004 61 753 44 2003 42 2005 61 753 41 59 569 2001 40 601 582 42 44 601 582 42 61 362 44 2003 42 2004 61 753 44 2003 42 2005 61 753 41 59 569 2006 59 582 42 2007 59 582 42 2008 59 704 2009 59 582 42 2010 59 582 42 2011 59 569 2012 59 569 2013 59 125 59 ,"{'AvgLine': 19, 'CountLine': 97, 'CountStmt': 44, 'MaxNesting': 3, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 83, 'CountStmtDecl': 24, 'MaxCyclomatic': 5, 'SumCyclomatic': 9, 'AltAvgLineCode': 16, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 83, 'CountLineCodeExe': 53, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 46, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 8, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99096,C++,"class CPL_DLL IOGREditableLayerSynchronizer
{
    public:
        virtual ~IOGREditableLayerSynchronizer();

        virtual OGRErr EditableSyncToDisk(OGRLayer* poEditableLayer,
                                          OGRLayer** ppoDecoratedLayer) = 0;
};",0,587 2000 2001 123 777 58 864 126 2001 40 41 59 864 2002 2003 40 2004 42 2005 44 2004 42 42 2006 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 9, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 8, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 3, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99098,C++,"class OGRCSVEditableLayer final: public OGREditableLayer
{
    std::set<CPLString> m_oSetFields;

  public:
    OGRCSVEditableLayer(OGRCSVLayer *poCSVLayer, char **papszOpenOptions);

    virtual OGRErr      CreateField( OGRFieldDefn *poField,
                                     int bApproxOK = TRUE ) override;
    virtual OGRErr      DeleteField( int iField ) override;
    virtual OGRErr      AlterFieldDefn( int iField, OGRFieldDefn* poNewFieldDefn, int nFlagsIn ) override;
    virtual GIntBig     GetFeatureCount( int bForce = TRUE ) override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 777 58 2000 40 2007 42 2008 44 582 42 42 2009 41 59 864 2010 2011 40 2012 42 2013 44 704 2014 61 2015 41 2016 59 864 2010 2017 40 704 2018 41 2016 59 864 2010 2019 40 704 2018 44 2012 42 2020 44 704 2021 41 2016 59 864 2022 2023 40 704 2024 61 2015 41 2016 59 125 59 ,"{'AvgLine': 13, 'CountLine': 79, 'CountStmt': 27, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 18, 'MaxEssential': 4, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 74, 'CountStmtDecl': 11, 'MaxCyclomatic': 7, 'SumCyclomatic': 12, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 74, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 172, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99075,C++,"class LayerDescription
{
    public:
        CPLString osName;
        CPLString osXPath;
        CPLString osPKIDName;
        CPLString osParentPKIDName;
        bool      bIsSelected;
        bool      bIsTopLevel;
        bool      bIsJunction;
        // map a field sequential number to a field
        std::map< int, GMLASField > oMapIdxToField;
        // map a field xpath to its sequential number
        std::map< CPLString, int > oMapFieldXPathToIdx;
        std::map< CPLString, int > oMapFieldNameToOGRIdx;
        std::vector<PairLayerNameColName> aoReferencingLayers;

        // NOTE: this doesn't scale to arbitrarily large datasets
        std::set<GIntBig> aoSetReferencedFIDs;

        LayerDescription(): bIsSelected(false),
                            bIsTopLevel(false),
                            bIsJunction(false) {}

        int GetOGRIdxFromFieldName( const CPLString& osFieldName ) const
        {
            const auto oIter = oMapFieldNameToOGRIdx.find(osFieldName);
            if( oIter == oMapFieldNameToOGRIdx.end() )
                return -1;
            return oIter->second;
        }
};",0,587 2000 123 777 58 2001 2002 59 2001 2003 59 2001 2004 59 2001 2005 59 569 2006 59 569 2007 59 569 2008 59 330 2009 321 2010 60 704 44 2011 62 2012 59 330 2009 321 2010 60 2001 44 704 62 2013 59 2009 321 2010 60 2001 44 704 62 2014 59 2009 321 2015 60 2016 62 2017 59 330 2009 321 2018 60 2019 62 2020 59 2000 40 41 58 2006 40 655 41 44 2007 40 655 41 44 2008 40 655 41 123 125 704 2021 40 601 2001 38 2022 41 601 123 601 561 2023 61 2014 46 2024 40 2022 41 59 688 40 2023 323 2014 46 2025 40 41 41 792 45 1501 59 792 2023 354 2026 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 32, 'CountStmt': 20, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 18, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 26, 'CountLineCodeExe': 4, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 12, 'CountDeclInstanceVariablePublic': 12, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99084,C++,"class GMLASBaseEntityResolver: public EntityResolver,
                           public IGMLASInputSourceClosing
{
  protected:
        std::vector<CPLString> m_aosPathStack;
        GMLASXSDCache& m_oCache;
        CPLString m_osGMLVersionFound;
        std::set<CPLString> m_oSetSchemaURLs;

  public:
        GMLASBaseEntityResolver(const CPLString& osBasePath,
                                GMLASXSDCache& oCache);
        virtual ~GMLASBaseEntityResolver();

        void SetBasePath(const CPLString& osBasePath);
        const CPLString& GetGMLVersionFound() const
                                        { return m_osGMLVersionFound; }
        const std::set<CPLString>& GetSchemaURLS() const
                                        { return m_oSetSchemaURLs; }

        virtual void notifyClosing(const CPLString& osFilename ) override;
        virtual InputSource* resolveEntity( const XMLCh* const publicId,
                                            const XMLCh* const systemId) override;

        virtual void DoExtraSchemaProcessing(const CPLString& osFilename,
                                             VSILFILE* fp);
};",0,587 2000 58 777 2001 44 777 2002 123 775 58 2003 321 2004 60 2005 62 2006 59 2007 38 2008 59 2005 2009 59 2003 321 2010 60 2005 62 2011 59 777 58 2000 40 601 2005 38 2012 44 2007 38 2013 41 59 864 126 2000 40 41 59 865 2014 40 601 2005 38 2012 41 59 601 2005 38 2015 40 41 601 123 792 2009 59 125 601 2003 321 2010 60 2005 62 38 2016 40 41 601 123 792 2011 59 125 864 865 2017 40 601 2005 38 2018 41 2019 59 864 2020 42 2021 40 601 2022 42 601 2023 44 601 2022 42 601 2024 41 2019 59 864 865 2025 40 601 2005 38 2018 44 2026 42 2027 41 59 125 59 ,"{'AvgLine': 8, 'CountLine': 94, 'CountStmt': 27, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 82, 'CountStmtDecl': 17, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 82, 'CountLineCodeExe': 8, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 3, 'CountClassDerived': 1, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
99126,C++,"    class MatchedPointPairInfo
    {
    public:
        MatchedPointPairInfo(int nInd_1, int nInd_2, double dfDist):
            ind_1(nInd_1), ind_2(nInd_2), euclideanDist(dfDist) {}

        int ind_1;
        int ind_2;
        double euclideanDist;
    };",0,587 2000 123 777 58 2000 40 704 2001 44 704 2002 44 625 2003 41 58 2004 40 2001 41 44 2005 40 2002 41 44 2006 40 2003 41 123 125 704 2004 59 704 2005 59 625 2006 59 125 59 ,"{'AvgLine': 2, 'CountLine': 10, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 9, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99086,C++,"class GMLASInputSource final: public InputSource
{
    VSILFILE *m_fp;
    bool      m_bOwnFP;
    int       m_nCounter;
    int      *m_pnCounter;
    CPLString m_osFilename;
    IGMLASInputSourceClosing* m_cbk;

public:
             GMLASInputSource(const char* pszFilename,
                              VSILFILE* fp,
                              bool bOwnFP,
                              MemoryManager* const manager =
                                            XMLPlatformUtils::fgMemoryManager);
    virtual ~GMLASInputSource();

    virtual BinInputStream* makeStream() const override;

    void    SetClosingCallback( IGMLASInputSourceClosing* cbk );
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 569 2005 59 704 2006 59 704 42 2007 59 2008 2009 59 2010 42 2011 59 777 58 2000 40 601 582 42 2012 44 2003 42 2013 44 569 2014 44 2015 42 601 2016 61 2017 321 2018 41 59 864 126 2000 40 41 59 864 2019 42 2020 40 41 601 2021 59 865 2022 40 2010 42 2023 41 59 125 59 ,"{'AvgLine': 13, 'CountLine': 73, 'CountStmt': 29, 'MaxNesting': 1, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 16, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 67, 'CountStmtDecl': 13, 'MaxCyclomatic': 3, 'SumCyclomatic': 9, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 67, 'CountLineCodeExe': 17, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
99451,C++,"class HDF5Dimension final: public GDALDimension
{
    std::string m_osGroupFullname;
    std::shared_ptr<HDF5SharedResources> m_poShared;

public:
    HDF5Dimension(const std::string& osParentName,
                  const std::string& osName,
                  const std::string& osType,
                  const std::string& osDirection,
                  GUInt64 nSize,
                  const std::shared_ptr<HDF5SharedResources>& poShared):
        GDALDimension(osParentName, osName, osType, osDirection, nSize),
        m_osGroupFullname(osParentName),
        m_poShared(poShared)
    {
    }

    std::shared_ptr<GDALMDArray> GetIndexingVariable() const override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 2005 59 2003 321 2006 60 2007 62 2008 59 777 58 2000 40 601 2003 321 2004 38 2009 44 601 2003 321 2004 38 2010 44 601 2003 321 2004 38 2011 44 601 2003 321 2004 38 2012 44 2013 2014 44 601 2003 321 2006 60 2007 62 38 2015 41 58 2002 40 2009 44 2010 44 2011 44 2012 44 2014 41 44 2005 40 2009 41 44 2008 40 2015 41 123 125 2003 321 2006 60 2016 62 2017 40 41 601 2018 59 125 59 ,"{'AvgLine': 19, 'CountLine': 48, 'CountStmt': 14, 'MaxNesting': 4, 'AvgLineCode': 19, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 3, 'CountLineCode': 46, 'CountStmtDecl': 10, 'MaxCyclomatic': 5, 'SumCyclomatic': 6, 'AltAvgLineCode': 19, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 46, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99127,C++,"class PCIDSK_DLL AsciiTileLayer : public BlockTileLayer
{
protected:
    virtual void        WriteTileList(void) override;
    virtual void        ReadTileList(void) override;

    // We need the system block directory implementation class to be friend
    // since it is responsible to fill in the block list.
    friend class AsciiTileDir;

public:
    AsciiTileLayer(BlockDir * poBlockDir, uint32 nLayer,
                   BlockLayerInfo * psBlockLayer,
                   TileLayerInfo * psTileLayer);

    void                ReadHeader(void);
};",0,587 2000 2001 58 777 2002 123 775 58 864 865 2003 40 865 41 2004 59 864 865 2005 40 865 41 2004 59 330 330 667 587 2006 59 777 58 2001 40 2007 42 2008 44 2009 2010 44 2011 42 2012 44 2013 42 2014 41 59 865 2015 40 865 41 59 125 59 ,"{'AvgLine': 37, 'CountLine': 165, 'CountStmt': 83, 'MaxNesting': 1, 'AvgLineCode': 24, 'AvgEssential': 2, 'AvgLineBlank': 9, 'CountStmtExe': 72, 'MaxEssential': 5, 'SumEssential': 8, 'AvgCyclomatic': 3, 'CountLineCode': 111, 'CountStmtDecl': 26, 'MaxCyclomatic': 7, 'SumCyclomatic': 14, 'AltAvgLineCode': 25, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 42, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 9, 'CountDeclMethod': 4, 'AltCountLineCode': 113, 'CountLineCodeExe': 74, 'CountLineComment': 11, 'AltAvgLineComment': 2, 'AltCountLineBlank': 42, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 28, 'CountLineInactive': 0, 'CountDeclMethodAll': 60, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 20, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99134,C++,"class OGRILI2Layer final: public OGRLayer
{
  private:
    OGRFeatureDefn     *poFeatureDefn;
    GeomFieldInfos      oGeomFieldInfos;
    std::list<OGRFeature *>    listFeature;
    std::list<OGRFeature *>::const_iterator listFeatureIt;

    OGRILI2DataSource  *poDS;

  public:
                        OGRILI2Layer( OGRFeatureDefn* poFeatureDefn,
                                      const GeomFieldInfos& oGeomFieldInfos,
                                      OGRILI2DataSource *poDS );

                       ~OGRILI2Layer();

    void                AddFeature(OGRFeature *poFeature);

    void                ResetReading() override;
    OGRFeature *        GetNextFeature() override;

    GIntBig             GetFeatureCount( int bForce = TRUE ) override;

    OGRErr              ICreateFeature( OGRFeature *poFeature ) override;

    OGRFeatureDefn *    GetLayerDefn() override { return poFeatureDefn; }

    CPLString           GetIliGeomType( const char* cFieldName) { return oGeomFieldInfos[cFieldName].iliGeomType; }

    OGRErr              CreateField( OGRFieldDefn *poField, int bApproxOK = TRUE ) override;

    int                 TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 773 58 2003 42 2004 59 2005 2006 59 2007 321 2008 60 2009 42 62 2010 59 2007 321 2008 60 2009 42 62 321 2011 2012 59 2013 42 2014 59 777 58 2000 40 2003 42 2004 44 601 2005 38 2006 44 2013 42 2014 41 59 126 2000 40 41 59 865 2015 40 2009 42 2016 41 59 865 2017 40 41 2018 59 2009 42 2019 40 41 2018 59 2020 2021 40 704 2022 61 2023 41 2018 59 2024 2025 40 2009 42 2016 41 2018 59 2003 42 2026 40 41 2018 123 792 2004 59 125 2027 2028 40 601 582 42 2029 41 123 792 2006 91 2029 93 46 2030 59 125 2024 2031 40 2032 42 2033 44 704 2034 61 2023 41 2018 59 704 2035 40 601 582 42 41 2018 59 125 59 ,"{'AvgLine': 11, 'CountLine': 158, 'CountStmt': 61, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 38, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 133, 'CountStmtDecl': 31, 'MaxCyclomatic': 7, 'SumCyclomatic': 20, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 22, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 1, 'CountDeclMethod': 11, 'AltCountLineCode': 133, 'CountLineCodeExe': 41, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 22, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 26, 'CountLineInactive': 0, 'CountDeclMethodAll': 93, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 86, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99137,C++,"        class CPL_DLL ConstIterator
        {
                struct Private;
                std::unique_ptr<Private> m_poPrivate;
            public:
                ConstIterator(const OGRSimpleCurve* poSelf, int nPos);
                ConstIterator(ConstIterator&& oOther) noexcept; // declared but not defined. Needed for gcc 5.4 at least
                ~ConstIterator();
                const OGRPoint& operator*() const;
                ConstIterator& operator++();
                bool operator!=(const ConstIterator& it) const;
        };",0,587 2000 2001 123 816 2002 59 2003 321 2004 60 2002 62 2005 59 777 58 2001 40 601 2006 42 2007 44 704 2008 41 59 2001 40 2001 307 2009 41 748 59 330 126 2001 40 41 59 601 2010 38 758 42 40 41 601 59 2001 38 758 349 40 41 59 569 758 340 40 601 2001 38 2011 41 601 59 125 59 ,"{'AvgLine': 5, 'CountLine': 40, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 39, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 39, 'CountLineCodeExe': 1, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99138,C++,"class NWT_GRCDataset final : public GDALPamDataset
{
  friend class NWT_GRCRasterBand;

  private:
    VSILFILE * fp;
    GByte abyHeader[1024];
    NWT_GRID *pGrd;
    char **papszCategories;
    char *pszProjection;

    NWT_GRCDataset(const NWT_GRCDataset&) = delete;
    NWT_GRCDataset& operator= (const NWT_GRCDataset&) = delete;

  protected:
    GDALColorTable * poColorTable;

  public:
    NWT_GRCDataset();
    ~NWT_GRCDataset();

    static GDALDataset *Open( GDALOpenInfo * );
    static int Identify( GDALOpenInfo * poOpenInfo );

    CPLErr GetGeoTransform( double *padfTransform ) override;
    const char *_GetProjectionRef() override;
    const OGRSpatialReference* GetSpatialRef() const override {
        return GetSpatialRefFromOldGetProjectionRef();
    }
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 773 58 2004 42 2005 59 2006 2007 91 1505 93 59 2008 42 2009 59 582 42 42 2010 59 582 42 2011 59 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 775 58 2012 42 2013 59 777 58 2000 40 41 59 126 2000 40 41 59 809 2014 42 2015 40 2016 42 41 59 809 704 2017 40 2016 42 2018 41 59 2019 2020 40 625 42 2021 41 2022 59 601 582 42 2023 40 41 2022 59 601 2024 42 2025 40 41 601 2022 123 792 2026 40 41 59 125 125 59 ,"{'AvgLine': 18, 'CountLine': 157, 'CountStmt': 68, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 49, 'MaxEssential': 4, 'SumEssential': 12, 'AvgCyclomatic': 2, 'CountLineCode': 115, 'CountStmtDecl': 21, 'MaxCyclomatic': 4, 'SumCyclomatic': 15, 'AltAvgLineCode': 13, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 24, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 9, 'AltCountLineCode': 115, 'CountLineCodeExe': 66, 'CountLineComment': 20, 'AltAvgLineComment': 2, 'AltCountLineBlank': 24, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 195, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.17', 'AltCountLineComment': 20, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 24, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 7, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 68, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 1}"
99146,C++,"template<class T> class Message {
 public:
  Message() : slice_(grpc_empty_slice()) {}

  Message(grpc_slice slice, bool add_ref)
      : slice_(add_ref ? grpc_slice_ref(slice) : slice) {}

  Message &operator=(const Message &other) = delete;

  Message(Message &&other) : slice_(other.slice_) {
    other.slice_ = grpc_empty_slice();
  }

  Message(const Message &other) = delete;

  Message &operator=(Message &&other) {
    grpc_slice_unref(slice_);
    slice_ = other.slice_;
    other.slice_ = grpc_empty_slice();
    return *this;
  }

  ~Message() { grpc_slice_unref(slice_); }

  const uint8_t *mutable_data() const { return GRPC_SLICE_START_PTR(slice_); }

  const uint8_t *data() const { return GRPC_SLICE_START_PTR(slice_); }

  size_t size() const { return GRPC_SLICE_LENGTH(slice_); }

  bool Verify() const {
    Verifier verifier(data(), size());
    return verifier.VerifyBuffer<T>(nullptr);
  }

  T *GetMutableRoot() { return flatbuffers::GetMutableRoot<T>(mutable_data()); }

  const T *GetRoot() const { return flatbuffers::GetRoot<T>(data()); }

  // This is only intended for serializer use, or if you know what you're doing
  const grpc_slice &BorrowSlice() const { return slice_; }

 private:
  grpc_slice slice_;
};",0,822 60 587 2000 62 587 2001 123 777 58 2001 40 41 58 2002 40 2003 40 41 41 123 125 2001 40 2004 2005 44 569 2006 41 58 2002 40 2006 63 2007 40 2005 41 58 2005 41 123 125 2001 38 758 61 40 601 2001 38 2008 41 61 619 59 2001 40 2001 307 2008 41 58 2002 40 2008 46 2002 41 123 2008 46 2002 61 2003 40 41 59 125 2001 40 601 2001 38 2008 41 61 619 59 2001 38 758 61 40 2001 307 2008 41 123 2009 40 2002 41 59 2002 61 2008 46 2002 59 2008 46 2002 61 2003 40 41 59 792 42 823 59 125 126 2001 40 41 123 2010 40 2002 41 59 125 601 2011 42 2012 40 41 601 123 792 2013 40 2002 41 59 125 601 2011 42 2014 40 41 601 123 792 2015 40 2002 41 59 125 2016 2017 40 41 601 123 792 2018 40 2002 41 59 125 569 2019 40 41 601 123 2020 2021 40 2014 40 41 44 2017 40 41 41 59 792 2021 46 2022 60 2000 62 40 753 41 59 125 2000 42 2023 40 41 123 792 2024 321 2023 60 2000 62 40 2012 40 41 41 59 125 601 2000 42 2025 40 41 601 123 792 2026 321 2025 60 2000 62 40 2014 40 41 41 59 125 330 601 2004 38 2027 40 41 601 123 792 2002 59 125 773 58 2004 2002 59 125 59 ,"{'AvgLine': 1, 'CountLine': 45, 'CountStmt': 20, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 30, 'CountStmtDecl': 14, 'MaxCyclomatic': 1, 'SumCyclomatic': 12, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 14, 'AltCountLineCode': 30, 'CountLineCodeExe': 7, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 14, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99191,C++,"class NTFCodeList
{
public:
    explicit     NTFCodeList( NTFRecord * );
                ~NTFCodeList();

    const char  *Lookup( const char * );

    char        szValType[3];   /* attribute code for list, i.e. AC */
    char        szFInter[6];    /* format of code values */

    int         nNumCode;
    char        **papszCodeVal; /* Short code value */
    char        **papszCodeDes; /* Long description of code */
};",0,587 2000 123 777 58 648 2000 40 2001 42 41 59 126 2000 40 41 59 601 582 42 2002 40 601 582 42 41 59 582 2003 91 1502 93 59 305 582 2004 91 1502 93 59 305 704 2005 59 582 42 42 2006 59 305 582 42 42 2007 59 305 125 59 ,"{'AvgLine': 25, 'CountLine': 91, 'CountStmt': 49, 'MaxNesting': 2, 'AvgLineCode': 21, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 38, 'MaxEssential': 3, 'SumEssential': 5, 'AvgCyclomatic': 4, 'CountLineCode': 76, 'CountStmtDecl': 16, 'MaxCyclomatic': 7, 'SumCyclomatic': 12, 'AltAvgLineCode': 21, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 15, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 76, 'CountLineCodeExe': 47, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 6, 'MaxCyclomaticStrict': 13, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 4, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 26, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99183,C++,"class DataSet
{
  public:

    EnvisatFile & envfile ;
    int index ;
    int nrec ;

    DataSet( EnvisatFile & envfileIn , int indexIn ) :
        envfile(envfileIn), index(indexIn), nrec(0)
    {
        EnvisatFile_GetDatasetInfo( &envfileIn, indexIn, nullptr, nullptr, nullptr,
                nullptr , nullptr, &nrec, nullptr ) ;
    }

    TimeDelta getMJD( int ridx )
    {
        if ( ridx < 0 ) ridx += nrec ;

        GUInt32 mjd[3];
        EnvisatFile_ReadDatasetRecordChunk(&envfile,index,ridx,mjd,0,12) ;

        #define INT32(x)    ((GInt32)CPL_MSBWORD32(x))

        return TimeDelta( INT32(mjd[0]), INT32(mjd[1]), INT32(mjd[2]) ) ;

        #undef INT32
    }

  private:
    CPL_DISALLOW_COPY_ASSIGN(DataSet)
} ;",0,587 2000 123 777 58 2001 38 2002 59 704 2003 59 704 2004 59 2000 40 2001 38 2005 44 704 2006 41 58 2002 40 2005 41 44 2003 40 2006 41 44 2004 40 1500 41 123 2007 40 38 2005 44 2006 44 753 44 753 44 753 44 753 44 753 44 38 2004 44 753 41 59 125 2008 2009 40 704 2010 41 123 688 40 2010 60 1500 41 2010 348 2004 59 2011 2012 91 1502 93 59 2013 40 38 2002 44 2003 44 2010 44 2012 44 1500 44 1503 41 59 35 615 2014 40 2015 41 40 40 2016 41 2017 40 2015 41 41 792 2008 40 2014 40 2012 91 1500 93 41 44 2014 40 2012 91 1501 93 41 44 2014 40 2012 91 1502 93 41 41 59 35 850 2014 125 773 58 2018 40 2000 41 125 59 ,"{'AvgLine': 9, 'CountLine': 32, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 22, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 24, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99270,C++,"class OGRIDBDriver final: public OGRSFDriver
{
    public:
                       ~OGRIDBDriver();
        const char *    GetName() override;
        OGRDataSource * Open( const char *, int ) override;

        OGRDataSource * CreateDataSource( const char *pszName,
                                          char ** = NULL ) override;

        int             TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 126 2000 40 41 59 601 582 42 2003 40 41 2004 59 2005 42 2006 40 601 582 42 44 704 41 2004 59 2005 42 2007 40 601 582 42 2008 44 582 42 42 61 2009 41 2004 59 704 2010 40 601 582 42 41 2004 59 125 59 ,"{'AvgLine': 11, 'CountLine': 69, 'CountStmt': 25, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 17, 'MaxEssential': 3, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 55, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 55, 'CountLineCodeExe': 15, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 45, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99225,C++,"class OGRDXFOCSTransformer final: public OGRCoordinateTransformation
{
private:
    double adfN[3];
    double adfAX[3];
    double adfAY[3];

    double dfDeterminant;
    double aadfInverse[4][4];

public:
    explicit OGRDXFOCSTransformer( double adfNIn[3], bool bInverse = false );

    OGRSpatialReference *GetSourceCS() override { return nullptr; }
    OGRSpatialReference *GetTargetCS() override { return nullptr; }

    int Transform( int nCount,
        double *adfX, double *adfY, double *adfZ, double* adfT,
        int *pabSuccess ) override;

    int InverseTransform( int nCount,
        double *adfX, double *adfY, double *adfZ );

    void ComposeOnto( OGRDXFAffineTransform& poCT ) const;

    OGRCoordinateTransformation* Clone() const override {
        return new OGRDXFOCSTransformer(*this);
    }

    OGRCoordinateTransformation* GetInverse() const override { return nullptr; }
};",0,587 2000 2001 58 777 2002 123 773 58 625 2003 91 1502 93 59 625 2004 91 1502 93 59 625 2005 91 1502 93 59 625 2006 59 625 2007 91 1502 93 91 1502 93 59 777 58 648 2000 40 625 2008 91 1502 93 44 569 2009 61 655 41 59 2010 42 2011 40 41 2012 123 792 753 59 125 2010 42 2013 40 41 2012 123 792 753 59 125 704 2014 40 704 2015 44 625 42 2016 44 625 42 2017 44 625 42 2018 44 625 42 2019 44 704 42 2020 41 2012 59 704 2021 40 704 2015 44 625 42 2016 44 625 42 2017 44 625 42 2018 41 59 865 2022 40 2023 38 2024 41 601 59 2002 42 2025 40 41 601 2012 123 792 744 2000 40 42 823 41 59 125 2002 42 2026 40 41 601 2012 123 792 753 59 125 125 59 ,"{'AvgLine': 18, 'CountLine': 173, 'CountStmt': 91, 'MaxNesting': 2, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 56, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 147, 'CountStmtDecl': 39, 'MaxCyclomatic': 4, 'SumCyclomatic': 15, 'AltAvgLineCode': 16, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 26, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 8, 'AltCountLineCode': 147, 'CountLineCodeExe': 103, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 26, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 38, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
99227,C++,"class OGRDWGBlocksLayer final: public OGRLayer
{
    OGRDWGDataSource   *poDS;

    OGRFeatureDefn     *poFeatureDefn;

    int                 iNextFID;
    unsigned int        iNextSubFeature;

    std::map<CPLString,DWGBlockDefinition>::iterator oIt;

  public:
    explicit OGRDWGBlocksLayer( OGRDWGDataSource *poDS );
    ~OGRDWGBlocksLayer();

    void                ResetReading() override;
    OGRFeature *        GetNextFeature() override;

    OGRFeatureDefn *    GetLayerDefn() override { return poFeatureDefn; }

    int                 TestCapability( const char * ) override;

    OGRFeature *        GetNextUnfilteredFeature();
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2005 42 2006 59 704 2007 59 856 704 2008 59 2009 321 2010 60 2011 44 2012 62 321 2013 2014 59 777 58 648 2000 40 2003 42 2004 41 59 126 2000 40 41 59 865 2015 40 41 2016 59 2017 42 2018 40 41 2016 59 2005 42 2019 40 41 2016 123 792 2006 59 125 704 2020 40 601 582 42 41 2016 59 2017 42 2021 40 41 59 125 59 ,"{'AvgLine': 17, 'CountLine': 148, 'CountStmt': 53, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 37, 'MaxEssential': 4, 'SumEssential': 13, 'AvgCyclomatic': 2, 'CountLineCode': 101, 'CountStmtDecl': 17, 'MaxCyclomatic': 6, 'SumCyclomatic': 18, 'AltAvgLineCode': 12, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 32, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 7, 'AltCountLineCode': 101, 'CountLineCodeExe': 41, 'CountLineComment': 15, 'AltAvgLineComment': 2, 'AltCountLineBlank': 32, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 89, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.15', 'AltCountLineComment': 15, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
99234,C++,"class DetachedBuffer {
 public:
  DetachedBuffer()
      : allocator_(nullptr),
        own_allocator_(false),
        buf_(nullptr),
        reserved_(0),
        cur_(nullptr),
        size_(0) {}

  DetachedBuffer(Allocator *allocator, bool own_allocator, uint8_t *buf,
                 size_t reserved, uint8_t *cur, size_t sz)
      : allocator_(allocator),
        own_allocator_(own_allocator),
        buf_(buf),
        reserved_(reserved),
        cur_(cur),
        size_(sz) {}

  // clang-format off
  #if !defined(FLATBUFFERS_CPP98_STL)
  // clang-format on
  DetachedBuffer(DetachedBuffer &&other)
      : allocator_(other.allocator_),
        own_allocator_(other.own_allocator_),
        buf_(other.buf_),
        reserved_(other.reserved_),
        cur_(other.cur_),
        size_(other.size_) {
    other.reset();
  }
  // clang-format off
  #endif  // !defined(FLATBUFFERS_CPP98_STL)
  // clang-format on

  // clang-format off
  #if !defined(FLATBUFFERS_CPP98_STL)
  // clang-format on
  DetachedBuffer &operator=(DetachedBuffer &&other) {
    if (this == &other) return *this;

    destroy();

    allocator_ = other.allocator_;
    own_allocator_ = other.own_allocator_;
    buf_ = other.buf_;
    reserved_ = other.reserved_;
    cur_ = other.cur_;
    size_ = other.size_;

    other.reset();

    return *this;
  }
  // clang-format off
  #endif  // !defined(FLATBUFFERS_CPP98_STL)
  // clang-format on

  ~DetachedBuffer() { destroy(); }

  const uint8_t *data() const { return cur_; }

  uint8_t *data() { return cur_; }

  size_t size() const { return size_; }

  // clang-format off
  #if 0  // disabled for now due to the ordering of classes in this header
  template <class T>
  bool Verify() const {
    Verifier verifier(data(), size());
    return verifier.Verify<T>(nullptr);
  }

  template <class T>
  const T* GetRoot() const {
    return flatbuffers::GetRoot<T>(data());
  }

  template <class T>
  T* GetRoot() {
    return flatbuffers::GetRoot<T>(data());
  }
  #endif
  // clang-format on

  // clang-format off
  #if !defined(FLATBUFFERS_CPP98_STL)
  // clang-format on
  // These may change access mode, leave these at end of public section
  FLATBUFFERS_DELETE_FUNC(DetachedBuffer(const DetachedBuffer &other));
  FLATBUFFERS_DELETE_FUNC(
      DetachedBuffer &operator=(const DetachedBuffer &other));
  // clang-format off
  #endif  // !defined(FLATBUFFERS_CPP98_STL)
  // clang-format on

 protected:
  Allocator *allocator_;
  bool own_allocator_;
  uint8_t *buf_;
  size_t reserved_;
  uint8_t *cur_;
  size_t size_;

  inline void destroy() {
    if (buf_) Deallocate(allocator_, buf_, reserved_);
    if (own_allocator_ && allocator_) { delete allocator_; }
    reset();
  }

  inline void reset() {
    allocator_ = nullptr;
    own_allocator_ = false;
    buf_ = nullptr;
    reserved_ = 0;
    cur_ = nullptr;
    size_ = 0;
  }
};",0,587 2000 123 777 58 2000 40 41 58 2001 40 753 41 44 2002 40 655 41 44 2003 40 753 41 44 2004 40 1500 41 44 2005 40 753 41 44 2006 40 1500 41 123 125 2000 40 2007 42 2008 44 569 2009 44 2010 42 2011 44 2012 2013 44 2010 42 2014 44 2012 2015 41 58 2001 40 2008 41 44 2002 40 2009 41 44 2003 40 2011 41 44 2004 40 2013 41 44 2005 40 2014 41 44 2006 40 2015 41 123 125 330 35 688 33 2016 40 2017 41 330 2000 40 2000 307 2018 41 58 2001 40 2018 46 2001 41 44 2002 40 2018 46 2002 41 44 2003 40 2018 46 2003 41 44 2004 40 2018 46 2004 41 44 2005 40 2018 46 2005 41 44 2006 40 2018 46 2006 41 123 2018 46 2019 40 41 59 125 330 35 636 330 330 330 35 688 33 2016 40 2017 41 330 2000 38 758 61 40 2000 307 2018 41 123 688 40 823 323 38 2018 41 792 42 823 59 2020 40 41 59 2001 61 2018 46 2001 59 2002 61 2018 46 2002 59 2003 61 2018 46 2003 59 2004 61 2018 46 2004 59 2005 61 2018 46 2005 59 2006 61 2018 46 2006 59 2018 46 2021 40 41 59 792 42 823 59 125 330 35 636 330 330 126 2000 40 41 123 2022 40 41 59 125 601 2010 42 2023 40 41 601 123 792 2005 59 125 2010 42 2023 40 41 123 792 2005 59 125 2012 2024 40 41 601 123 792 2006 59 125 330 35 688 1500 330 822 60 587 2025 62 569 2026 40 41 601 123 2027 2028 40 2023 40 41 44 2024 40 41 41 59 792 2028 46 2026 60 2025 62 40 753 41 59 125 822 60 587 2025 62 601 2025 42 2029 40 41 601 123 792 2030 321 2029 60 2025 62 40 2023 40 41 41 59 125 822 60 587 2025 62 2025 42 2029 40 41 123 792 2031 321 2029 60 2025 62 40 2023 40 41 41 59 125 35 636 330 330 35 688 33 2016 40 2017 41 330 330 2032 40 2000 40 601 2000 38 2018 41 41 59 2032 40 2000 38 758 61 40 601 2000 38 2018 41 41 59 330 35 636 330 330 775 58 2007 42 2001 59 569 2002 59 2010 42 2003 59 2012 2004 59 2010 42 2005 59 2012 2006 59 700 865 2033 40 41 123 688 40 2003 41 2034 40 2001 44 2003 44 2004 41 59 688 40 2002 307 2001 41 123 619 2001 59 125 2035 40 41 59 125 700 865 2036 40 41 123 2001 61 753 59 2002 61 655 59 2003 61 753 59 2004 61 1500 59 2005 61 753 59 2006 61 1500 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 120, 'CountStmt': 61, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 27, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 66, 'CountStmtDecl': 34, 'MaxCyclomatic': 3, 'SumCyclomatic': 13, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 12, 'AltCountLineCode': 87, 'CountLineCodeExe': 42, 'CountLineComment': 19, 'AltAvgLineComment': 0, 'AltCountLineBlank': 18, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 15, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.29', 'AltCountLineComment': 19, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 8, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 48, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 6}"
99246,C++,"class OGRPGeoSelectLayer final: public OGRPGeoLayer
{
    char                *pszBaseStatement;

    void                ClearStatement();
    OGRErr              ResetStatement();

    virtual CPLODBCStatement *  GetStatement() override;

  public:
                        OGRPGeoSelectLayer( OGRPGeoDataSource *,
                                           CPLODBCStatement * );
                        virtual ~OGRPGeoSelectLayer();

    virtual void        ResetReading() override;
    virtual GIntBig     GetFeatureCount( int ) override;

    virtual OGRFeature *GetFeature( GIntBig nFeatureId ) override;

    virtual int         TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 582 42 2003 59 865 2004 40 41 59 2005 2006 40 41 59 864 2007 42 2008 40 41 2009 59 777 58 2000 40 2010 42 44 2007 42 41 59 864 126 2000 40 41 59 864 865 2011 40 41 2009 59 864 2012 2013 40 704 41 2009 59 864 2014 42 2015 40 2012 2016 41 2009 59 864 704 2017 40 601 582 42 41 2009 59 125 59 ,"{'AvgLine': 10, 'CountLine': 116, 'CountStmt': 43, 'MaxNesting': 3, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 33, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 90, 'CountStmtDecl': 11, 'MaxCyclomatic': 4, 'SumCyclomatic': 16, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 24, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 9, 'AltCountLineCode': 90, 'CountLineCodeExe': 33, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 24, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 104, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 72, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99253,C++,"class GDALProxyPoolMaskBand : public GDALProxyPoolRasterBand
{
  private:
    GDALProxyPoolRasterBand *poMainBand = nullptr;

    GDALRasterBand          *poUnderlyingMainRasterBand = nullptr;
    int                      nRefCountUnderlyingMainRasterBand = 0;

    CPL_DISALLOW_COPY_ASSIGN(GDALProxyPoolMaskBand)

  protected:
    GDALRasterBand* RefUnderlyingRasterBand() override;
    void UnrefUnderlyingRasterBand( GDALRasterBand* poUnderlyingRasterBand )
        override;

  public:
    GDALProxyPoolMaskBand( GDALProxyPoolDataset* poDS,
                           GDALRasterBand* poUnderlyingMaskBand,
                           GDALProxyPoolRasterBand* poMainBand );
    GDALProxyPoolMaskBand( GDALProxyPoolDataset* poDS,
                           GDALProxyPoolRasterBand* poMainBand,
                           GDALDataType eDataType,
                           int nBlockXSize, int nBlockYSize );
    ~GDALProxyPoolMaskBand() override;
};",0,587 2000 58 777 2001 123 773 58 2001 42 2002 61 753 59 2003 42 2004 61 753 59 704 2005 61 1500 59 2006 40 2000 41 775 58 2003 42 2007 40 41 2008 59 865 2009 40 2003 42 2010 41 2008 59 777 58 2000 40 2011 42 2012 44 2003 42 2013 44 2001 42 2002 41 59 2000 40 2011 42 2012 44 2001 42 2002 44 2014 2015 44 704 2016 44 704 2017 41 59 126 2000 40 41 2008 59 125 59 ,"{'AvgLine': 7, 'CountLine': 62, 'CountStmt': 20, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 56, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 56, 'CountLineCodeExe': 13, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 171, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 52, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99266,C++,"class OGRODBCSelectLayer final: public OGRODBCLayer
{
    char                *pszBaseStatement;

    void                ClearStatement();
    OGRErr              ResetStatement();

    virtual CPLODBCStatement *  GetStatement() override;

  public:
                        OGRODBCSelectLayer( OGRODBCDataSource *,
                                           CPLODBCStatement * );
                        virtual ~OGRODBCSelectLayer();

    virtual void        ResetReading() override;
    virtual GIntBig     GetFeatureCount( int ) override;

    virtual OGRFeature *GetFeature( GIntBig nFeatureId ) override;

    virtual OGRErr      GetExtent(OGREnvelope *psExtent, int bForce = TRUE) override;
    virtual OGRErr      GetExtent(int iGeomField, OGREnvelope *psExtent, int bForce) override
                { return OGRLayer::GetExtent(iGeomField, psExtent, bForce); }

    virtual int         TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 582 42 2003 59 865 2004 40 41 59 2005 2006 40 41 59 864 2007 42 2008 40 41 2009 59 777 58 2000 40 2010 42 44 2007 42 41 59 864 126 2000 40 41 59 864 865 2011 40 41 2009 59 864 2012 2013 40 704 41 2009 59 864 2014 42 2015 40 2012 2016 41 2009 59 864 2005 2017 40 2018 42 2019 44 704 2020 61 2021 41 2009 59 864 2005 2017 40 704 2022 44 2018 42 2019 44 704 2020 41 2009 123 792 2023 321 2017 40 2022 44 2019 44 2020 41 59 125 864 704 2024 40 601 582 42 41 2009 59 125 59 ,"{'AvgLine': 7, 'CountLine': 109, 'CountStmt': 40, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 28, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 85, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 15, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 24, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 11, 'AltCountLineCode': 85, 'CountLineCodeExe': 25, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 24, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 104, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 84, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99260,C++,"class TABBinBlockManager
{
    CPL_DISALLOW_COPY_ASSIGN(TABBinBlockManager)

  protected:
    int         m_nBlockSize;
    GInt32      m_nLastAllocatedBlock;
    TABBlockRef *m_psGarbageBlocksFirst;
    TABBlockRef *m_psGarbageBlocksLast;
    char        m_szName[32]; /* for debug purposes */

  public:
    TABBinBlockManager();
    ~TABBinBlockManager();

    void        SetBlockSize(int nBlockSize);
    int         GetBlockSize() const { return m_nBlockSize; }

    GInt32      AllocNewBlock(const char* pszReason = """");
    void        Reset();
    void        SetLastPtr(int nBlockPtr) {m_nLastAllocatedBlock=nBlockPtr; }

    void        PushGarbageBlockAsFirst(GInt32 nBlockPtr);
    void        PushGarbageBlockAsLast(GInt32 nBlockPtr);
    GInt32      GetFirstGarbageBlock();
    GInt32      PopGarbageBlock();

    void        SetName(const char* pszName);
};",0,587 2000 123 2001 40 2000 41 775 58 704 2002 59 2003 2004 59 2005 42 2006 59 2005 42 2007 59 582 2008 91 1503 93 59 305 777 58 2000 40 41 59 126 2000 40 41 59 865 2009 40 704 2010 41 59 704 2011 40 41 601 123 792 2002 59 125 2003 2012 40 601 582 42 2013 61 362 41 59 865 2014 40 41 59 865 2015 40 704 2016 41 123 2004 61 2016 59 125 865 2017 40 2003 2016 41 59 865 2018 40 2003 2016 41 59 2003 2019 40 41 59 2003 2020 40 41 59 865 2021 40 601 582 42 2022 41 59 125 59 ,"{'AvgLine': 9, 'CountLine': 142, 'CountStmt': 73, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 48, 'MaxEssential': 1, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 117, 'CountStmtDecl': 27, 'MaxCyclomatic': 3, 'SumCyclomatic': 22, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 16, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 14, 'AltCountLineCode': 123, 'CountLineCodeExe': 66, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 2, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 22, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 5}"
99500,C++,"class OGRFMEDriver final: public OGRSFDriver
{
  public:
                ~OGRFMEDriver();

    int                 TestCapability( const char * ) override;

    const char *GetName() override;
    OGRDataSource *Open( const char *, int ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 126 2000 40 41 59 704 2003 40 601 582 42 41 2004 59 601 582 42 2005 40 41 2004 59 2006 42 2007 40 601 582 42 44 704 41 2004 59 125 59 ,"{'AvgLine': 10, 'CountLine': 52, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 13, 'MaxEssential': 4, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 41, 'CountStmtDecl': 5, 'MaxCyclomatic': 4, 'SumCyclomatic': 7, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 41, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 44, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99294,C++,"class GeomFieldInfo
{
    OGRFeatureDefn* geomTable; /* separate geometry table for Ili 1 */
public:
    CPLString       iliGeomType;

    GeomFieldInfo() : geomTable(nullptr) {}
    ~GeomFieldInfo() {
       if( geomTable )
           geomTable->Release();
    }
    GeomFieldInfo(const GeomFieldInfo& other)
    {
        geomTable = other.geomTable;
        if( geomTable )
            geomTable->Reference();
        iliGeomType = other.iliGeomType;
    }

    GeomFieldInfo& operator= (const GeomFieldInfo& other)
    {
        if( this != &other )
        {
            if( geomTable )
                geomTable->Release();
            geomTable = other.geomTable;
            if( geomTable )
                geomTable->Reference();
            iliGeomType = other.iliGeomType;
        }
        return *this;
    }

    OGRFeatureDefn* GetGeomTableDefnRef() const { return geomTable; }
    void            SetGeomTableDefn(OGRFeatureDefn* geomTableIn)
    {
        CPLAssert(geomTable == nullptr);
        geomTable = geomTableIn;
        if( geomTable )
            geomTable->Reference();
    }
};",0,587 2000 123 2001 42 2002 59 305 777 58 2003 2004 59 2000 40 41 58 2002 40 753 41 123 125 126 2000 40 41 123 688 40 2002 41 2002 354 2005 40 41 59 125 2000 40 601 2000 38 2006 41 123 2002 61 2006 46 2002 59 688 40 2002 41 2002 354 2007 40 41 59 2004 61 2006 46 2004 59 125 2000 38 758 61 40 601 2000 38 2006 41 123 688 40 823 340 38 2006 41 123 688 40 2002 41 2002 354 2008 40 41 59 2002 61 2006 46 2002 59 688 40 2002 41 2002 354 2009 40 41 59 2004 61 2006 46 2004 59 125 792 42 823 59 125 2001 42 2010 40 41 601 123 792 2002 59 125 865 2011 40 2001 42 2012 41 123 2013 40 2002 323 753 41 59 2002 61 2012 59 688 40 2002 41 2002 354 2014 40 41 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 42, 'CountStmt': 30, 'MaxNesting': 2, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 39, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 12, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 39, 'CountLineCodeExe': 20, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 25, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99295,C++,"class IILI2Reader
{
public:
    virtual     ~IILI2Reader();

    virtual void SetSourceFile( const char *pszFilename ) = 0;

    virtual int  ReadModel( ImdReader *poImdReader, const char *modelFilename ) = 0;
    virtual int  SaveClasses( const char *pszFilename ) = 0;

    virtual std::list<OGRLayer *> GetLayers() = 0;
    virtual int GetLayerCount() = 0;
};",0,587 2000 123 777 58 864 126 2000 40 41 59 864 865 2001 40 601 582 42 2002 41 61 1500 59 864 704 2003 40 2004 42 2005 44 601 582 42 2006 41 61 1500 59 864 704 2007 40 601 582 42 2002 41 61 1500 59 864 2008 321 2009 60 2010 42 62 2011 40 41 61 1500 59 864 704 2012 40 41 61 1500 59 125 59 ,"{'AvgLine': 2, 'CountLine': 15, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 12, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99296,C++,"class ILI2Handler : public DefaultHandler
{
    ILI2Reader  *m_poReader;

    int level;

    DOMDocument *dom_doc;
    DOMElement *dom_elem;

    int m_nEntityCounter;

public:
    explicit ILI2Handler( ILI2Reader *poReader );
    ~ILI2Handler();

    void startDocument() override;
    void endDocument() override;

    void startElement(
        const   XMLCh* const    uri,
        const   XMLCh* const    localname,
        const   XMLCh* const    qname,
        const   Attributes& attrs
    ) override;
    void endElement(
        const   XMLCh* const    uri,
        const   XMLCh* const    localname,
        const   XMLCh* const    qname
    ) override;
    void characters( const XMLCh *const chars,
                     const XMLSize_t length ) override; // xerces 3

    void startEntity (const XMLCh *const name) override;

    void fatalError(const SAXParseException&) override;
};",0,587 2000 58 777 2001 123 2002 42 2003 59 704 2004 59 2005 42 2006 59 2007 42 2008 59 704 2009 59 777 58 648 2000 40 2002 42 2010 41 59 126 2000 40 41 59 865 2011 40 41 2012 59 865 2013 40 41 2012 59 865 2014 40 601 2015 42 601 2016 44 601 2015 42 601 2017 44 601 2015 42 601 2018 44 601 2019 38 2020 41 2012 59 865 2021 40 601 2015 42 601 2016 44 601 2015 42 601 2017 44 601 2015 42 601 2018 41 2012 59 865 2022 40 601 2015 42 601 2023 44 601 2024 2025 41 2012 59 330 865 2026 40 601 2015 42 601 2027 41 2012 59 865 2028 40 601 2029 38 41 2012 59 125 59 ,"{'AvgLine': 13, 'CountLine': 153, 'CountStmt': 45, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 118, 'CountStmtDecl': 30, 'MaxCyclomatic': 4, 'SumCyclomatic': 16, 'AltAvgLineCode': 10, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 20, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 118, 'CountLineCodeExe': 19, 'CountLineComment': 20, 'AltAvgLineComment': 2, 'AltCountLineBlank': 20, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 29, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.17', 'AltCountLineComment': 20, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 78, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99306,C++,"class SAR_CEOSRasterBand final: public GDALPamRasterBand
{
    friend class SAR_CEOSDataset;

  public:
    SAR_CEOSRasterBand( SAR_CEOSDataset *, int, GDALDataType );

    CPLErr IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 2000 40 2003 42 44 704 44 2004 41 59 2005 2006 40 704 44 704 44 865 42 41 2007 59 125 59 ,"{'AvgLine': 43, 'CountLine': 95, 'CountStmt': 34, 'MaxNesting': 2, 'AvgLineCode': 29, 'AvgEssential': 1, 'AvgLineBlank': 8, 'CountStmtExe': 28, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 3, 'CountLineCode': 66, 'CountStmtDecl': 10, 'MaxCyclomatic': 6, 'SumCyclomatic': 7, 'AltAvgLineCode': 30, 'AvgLineComment': 4, 'CountClassBase': 1, 'CountLineBlank': 19, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 8, 'CountDeclMethod': 2, 'AltCountLineCode': 68, 'CountLineCodeExe': 77, 'CountLineComment': 9, 'AltAvgLineComment': 4, 'AltCountLineBlank': 19, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 130, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99299,C++,"class NGSGEOIDRasterBand final: public GDALPamRasterBand
{
    friend class NGSGEOIDDataset;

  public:
                explicit NGSGEOIDRasterBand( NGSGEOIDDataset * );

    virtual CPLErr IReadBlock( int, int, void * ) override;
    virtual const char* GetUnitType() override { return ""m""; }
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 648 2000 40 2003 42 41 59 864 2004 2005 40 704 44 704 44 865 42 41 2006 59 864 601 582 42 2007 40 41 2006 123 792 362 59 125 125 59 ,"{'AvgLine': 14, 'CountLine': 53, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 4, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 3, 'AltCountLineCode': 41, 'CountLineCodeExe': 23, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 4, 'CountDeclMethodAll': 131, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99310,C++,"    class CPCIDSK_TEX : virtual public CPCIDSKSegment,
                        public PCIDSK_TEX
    {
    public:
        CPCIDSK_TEX( PCIDSKFile *file, int segment,const char *segment_pointer);

        virtual     ~CPCIDSK_TEX();

        // PCIDSK_TEX

        std::string ReadText() override;
        void WriteText( const std::string &text ) override;
    };",0,587 2000 58 864 777 2001 44 777 2002 123 777 58 2000 40 2003 42 2004 44 704 2005 44 601 582 42 2006 41 59 864 126 2000 40 41 59 330 2007 321 2008 2009 40 41 2010 59 865 2011 40 601 2007 321 2008 38 2012 41 2010 59 125 59 ,"{'AvgLine': 20, 'CountLine': 93, 'CountStmt': 35, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 2, 'AvgLineBlank': 4, 'CountStmtExe': 31, 'MaxEssential': 3, 'SumEssential': 8, 'AvgCyclomatic': 3, 'CountLineCode': 64, 'CountStmtDecl': 10, 'MaxCyclomatic': 7, 'SumCyclomatic': 13, 'AltAvgLineCode': 13, 'AvgLineComment': 2, 'CountClassBase': 2, 'CountLineBlank': 20, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 4, 'AltCountLineCode': 64, 'CountLineCodeExe': 31, 'CountLineComment': 9, 'AltAvgLineComment': 2, 'AltCountLineBlank': 20, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 57, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99363,C++,"    class CPCIDSK_PCT : virtual public CPCIDSKSegment,
                        public PCIDSK_PCT
    {
    public:
        CPCIDSK_PCT( PCIDSKFile *file, int segment,const char *segment_pointer);

        virtual     ~CPCIDSK_PCT();

        virtual void ReadPCT( unsigned char pct[768] ) override;
        virtual void WritePCT( unsigned char pct[768] ) override;
    };",0,587 2000 58 864 777 2001 44 777 2002 123 777 58 2000 40 2003 42 2004 44 704 2005 44 601 582 42 2006 41 59 864 126 2000 40 41 59 864 865 2007 40 856 582 2008 91 1504 93 41 2009 59 864 865 2010 40 856 582 2008 91 1504 93 41 2009 59 125 59 ,"{'AvgLine': 11, 'CountLine': 57, 'CountStmt': 21, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 19, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 8, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 44, 'CountLineCodeExe': 18, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 57, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99315,C++,"    class CLinkSegment : public CPCIDSKSegment
    {
    public:
        CLinkSegment(PCIDSKFile *file, int segment,const char *segment_pointer);
        ~CLinkSegment();

        // Get path
        std::string GetPath(void) const;
        // Set path
        void SetPath(const std::string& oPath);

        //synchronize the segment on disk.
        void Synchronize() override;
    private:
        // Helper housekeeping functions
        void Load();
        void Write();

        bool loaded_;
        bool modified_;
        PCIDSKBuffer seg_data;
        std::string path;
    };",0,587 2000 58 777 2001 123 777 58 2000 40 2002 42 2003 44 704 2004 44 601 582 42 2005 41 59 126 2000 40 41 59 330 2006 321 2007 2008 40 865 41 601 59 330 865 2009 40 601 2006 321 2007 38 2010 41 59 330 865 2011 40 41 2012 59 773 58 330 865 2013 40 41 59 865 2014 40 41 59 569 2015 59 569 2016 59 2017 2018 59 2006 321 2007 2019 59 125 59 ,"{'AvgLine': 12, 'CountLine': 113, 'CountStmt': 48, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 32, 'MaxEssential': 4, 'SumEssential': 10, 'AvgCyclomatic': 2, 'CountLineCode': 88, 'CountStmtDecl': 16, 'MaxCyclomatic': 7, 'SumCyclomatic': 16, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 88, 'CountLineCodeExe': 37, 'CountLineComment': 10, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 57, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 61, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
99316,C++,"class GDALApplyVSGDataset final: public GDALDataset
{
        friend class GDALApplyVSGRasterBand;

        GDALDataset* m_poSrcDataset = nullptr;
        GDALDataset* m_poReprojectedGrid = nullptr;
        bool         m_bInverse = false;
        double       m_dfSrcUnitToMeter = 0.0;
        double       m_dfDstUnitToMeter = 0.0;

        CPL_DISALLOW_COPY_ASSIGN(GDALApplyVSGDataset)

    public:
        GDALApplyVSGDataset( GDALDataset* poSrcDataset,
                             GDALDataset* poReprojectedGrid,
                             GDALDataType eDT,
                             bool bInverse,
                             double dfSrcUnitToMeter,
                             double dfDstUnitToMeter,
                             int nBlockSize );
        virtual ~GDALApplyVSGDataset();

        virtual int        CloseDependentDatasets() override;

        virtual CPLErr GetGeoTransform(double* padfGeoTransform) override;
        virtual const OGRSpatialReference* GetSpatialRef() const override;

        bool    IsInitOK();
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2002 42 2004 61 753 59 2002 42 2005 61 753 59 569 2006 61 655 59 625 2007 61 1500 59 625 2008 61 1500 59 2009 40 2000 41 777 58 2000 40 2002 42 2010 44 2002 42 2011 44 2012 2013 44 569 2014 44 625 2015 44 625 2016 44 704 2017 41 59 864 126 2000 40 41 59 864 704 2018 40 41 2019 59 864 2020 2021 40 625 42 2022 41 2019 59 864 601 2023 42 2024 40 41 601 2019 59 569 2025 40 41 59 125 59 ,"{'AvgLine': 9, 'CountLine': 88, 'CountStmt': 37, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 81, 'CountStmtDecl': 19, 'MaxCyclomatic': 5, 'SumCyclomatic': 10, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 81, 'CountLineCodeExe': 25, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 150, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 6, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
99318,C++,"class Conversions {
public:
    static void convert_pixel_to_geo(double line, double column, double& longitude, double& latitude);
    static void convert_geo_to_pixel(double longitude, double latitude, unsigned int& line, unsigned int& column);

    static void compute_pixel_xyz(double line, double column, double& x, double& y, double& z);
    static double compute_pixel_area_sqkm(double line, double column);

    static const double altitude;   // from origin
    static const double req;        // earth equatorial radius
    static const double rpol;       // earth polar radius
    static const double oblate;     // oblateness of earth
    static const double deg_to_rad;
    static const double rad_to_deg;
    static const double step;       // pixel / line step in degrees
    static const double nlines;     // number of lines in an image

    static const int CFAC;     // Column scale factor
    static const int LFAC;     // Line scale factor
    static const int COFF;     // Column offset
    static const int LOFF;     // Line offset
};",0,587 2000 123 777 58 809 865 2001 40 625 2002 44 625 2003 44 625 38 2004 44 625 38 2005 41 59 809 865 2006 40 625 2004 44 625 2005 44 856 704 38 2002 44 856 704 38 2003 41 59 809 865 2007 40 625 2002 44 625 2003 44 625 38 2008 44 625 38 2009 44 625 38 2010 41 59 809 625 2011 40 625 2002 44 625 2003 41 59 809 601 625 2012 59 330 809 601 625 2013 59 330 809 601 625 2014 59 330 809 601 625 2015 59 330 809 601 625 2016 59 809 601 625 2017 59 809 601 625 2018 59 330 809 601 625 2019 59 330 809 601 704 2020 59 330 809 601 704 2021 59 330 809 601 704 2022 59 330 809 601 704 2023 59 330 125 59 ,"{'AvgLine': 20, 'CountLine': 103, 'CountStmt': 72, 'MaxNesting': 1, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 40, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 82, 'CountStmtDecl': 52, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 4, 'AltCountLineCode': 82, 'CountLineCodeExe': 53, 'CountLineComment': 10, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 38, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 4, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 64, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 12, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99319,C++,"class VSIUploadOnCloseHandle final: public VSIVirtualHandle {
    VSIVirtualHandle* m_poBaseHandle;
    CPLString m_osTmpFilename;
    VSILFILE* m_fpTemp;

    VSIUploadOnCloseHandle(const VSIUploadOnCloseHandle&) = delete;
    VSIUploadOnCloseHandle& operator= (const VSIUploadOnCloseHandle&) = delete;

  public:
    VSIUploadOnCloseHandle( VSIVirtualHandle* poBaseHandle,
                            const CPLString& osTmpFilename,
                            VSILFILE* fpTemp ):
        m_poBaseHandle(poBaseHandle),
        m_osTmpFilename(osTmpFilename),
        m_fpTemp(fpTemp)
    {}

    ~VSIUploadOnCloseHandle() override;

    int       Seek( vsi_l_offset nOffset, int nWhence ) override {
        return VSIFSeekL(m_fpTemp, nOffset, nWhence);
    }

    vsi_l_offset Tell() override {
        return VSIFTellL(m_fpTemp);
    }

    size_t    Read( void *pBuffer, size_t nSize, size_t nCount ) override {
        return VSIFReadL(pBuffer, nSize, nCount, m_fpTemp);
    }

    size_t    Write( const void *pBuffer, size_t nSize,size_t nCount) override {
        return VSIFWriteL(pBuffer, nSize, nCount, m_fpTemp);
    }

    int       Eof() override { return VSIFEofL(m_fpTemp); }

    int       Flush() override { return VSIFFlushL(m_fpTemp); }

    int       Close() override;

    int       Truncate( vsi_l_offset nNewSize ) override { return VSIFTruncateL(m_fpTemp, nNewSize); }

    VSIRangeStatus GetRangeStatus( vsi_l_offset nOffset, vsi_l_offset nLength ) override {
        return VSIFGetRangeStatusL(m_fpTemp, nOffset, nLength);
    }
};",0,587 2000 2001 58 777 2002 123 2002 42 2003 59 2004 2005 59 2006 42 2007 59 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 777 58 2000 40 2002 42 2008 44 601 2004 38 2009 44 2006 42 2010 41 58 2003 40 2008 41 44 2005 40 2009 41 44 2007 40 2010 41 123 125 126 2000 40 41 2011 59 704 2012 40 2013 2014 44 704 2015 41 2011 123 792 2016 40 2007 44 2014 44 2015 41 59 125 2013 2017 40 41 2011 123 792 2018 40 2007 41 59 125 2019 2020 40 865 42 2021 44 2019 2022 44 2019 2023 41 2011 123 792 2024 40 2021 44 2022 44 2023 44 2007 41 59 125 2019 2025 40 601 865 42 2021 44 2019 2022 44 2019 2023 41 2011 123 792 2026 40 2021 44 2022 44 2023 44 2007 41 59 125 704 2027 40 41 2011 123 792 2028 40 2007 41 59 125 704 2029 40 41 2011 123 792 2030 40 2007 41 59 125 704 2031 40 41 2011 59 704 2032 40 2013 2033 41 2011 123 792 2034 40 2007 44 2033 41 59 125 2035 2036 40 2013 2014 44 2013 2037 41 2011 123 792 2038 40 2007 44 2014 44 2037 41 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 90, 'CountStmt': 52, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 33, 'MaxEssential': 5, 'SumEssential': 15, 'AvgCyclomatic': 1, 'CountLineCode': 76, 'CountStmtDecl': 22, 'MaxCyclomatic': 5, 'SumCyclomatic': 17, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 13, 'AltCountLineCode': 76, 'CountLineCodeExe': 40, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 20, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 58, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99384,C++,"    class netCDFVTextAttribute : public netCDFVAttribute
    {
        std::string name;
        std::string value;

        public:
            netCDFVTextAttribute(const char* a_name, const char* a_value) :
                name(a_name),
                value(a_value)
            {}

            void vsync(int realncid, int realvarid) override;
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 2002 321 2003 2005 59 777 58 2000 40 601 582 42 2006 44 601 582 42 2007 41 58 2004 40 2006 41 44 2005 40 2007 41 123 125 865 2008 40 704 2009 44 704 2010 41 2011 59 125 59 ,"{'AvgLine': 5, 'CountLine': 20, 'CountStmt': 8, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 4, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 18, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99330,C++,"class PCIDSK_DLL BlockFile
{
public:
    virtual             ~BlockFile(void);

    virtual std::string GetFilename(void) const = 0;

    virtual bool        GetUpdatable(void) const = 0;

    virtual uint32      GetWidth(void) const = 0;
    virtual uint32      GetHeight(void) const = 0;

    virtual uint32      GetChannels(void) const = 0;

    virtual std::string GetFileOptions(void) const = 0;

    virtual uint64      GetImageFileSize(void) const = 0;

    virtual bool        IsValidFileOffset(uint64 nOffset) const = 0;

    virtual bool        IsCorruptedSegment(uint16 nSegment, uint64 nOffset, uint64 nSize) const = 0;

    virtual uint16      ExtendSegment(const std::string & oName,
                                      const std::string & oDesc,
                                      uint64 nExtendSize) = 0;

    virtual uint64      GetSegmentSize(uint16 nSegment) = 0;

    virtual void        WriteToSegment(uint16 nSegment, const void * pData,
                                       uint64 nOffset, uint64 nSize) = 0;

    virtual void        ReadFromSegment(uint16 nSegment, void * pData,
                                        uint64 nOffset, uint64 nSize) = 0;
};",0,587 2000 2001 123 777 58 864 126 2001 40 865 41 59 864 2002 321 2003 2004 40 865 41 601 61 1500 59 864 569 2005 40 865 41 601 61 1500 59 864 2006 2007 40 865 41 601 61 1500 59 864 2006 2008 40 865 41 601 61 1500 59 864 2006 2009 40 865 41 601 61 1500 59 864 2002 321 2003 2010 40 865 41 601 61 1500 59 864 2011 2012 40 865 41 601 61 1500 59 864 569 2013 40 2011 2014 41 601 61 1500 59 864 569 2015 40 2016 2017 44 2011 2014 44 2011 2018 41 601 61 1500 59 864 2016 2019 40 601 2002 321 2003 38 2020 44 601 2002 321 2003 38 2021 44 2011 2022 41 61 1500 59 864 2011 2023 40 2016 2017 41 61 1500 59 864 865 2024 40 2016 2017 44 601 865 42 2025 44 2011 2014 44 2011 2018 41 61 1500 59 864 865 2026 40 2016 2017 44 865 42 2025 44 2011 2014 44 2011 2018 41 61 1500 59 125 59 ,"{'AvgLine': 3, 'CountLine': 37, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 25, 'CountStmtDecl': 14, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 14, 'AltCountLineCode': 25, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 9, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 14, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99335,C++,"        class CPL_DLL Iterator
        {
                struct Private;
                std::unique_ptr<Private> m_poPrivate;
                void update();
            public:
                Iterator(OGRSimpleCurve* poSelf, int nPos);
                Iterator(Iterator&& oOther) noexcept; // declared but not defined. Needed for gcc 5.4 at least
                ~Iterator();
                OGRPoint& operator*();
                Iterator& operator++();
                bool operator!=(const Iterator& it) const;
        };",0,587 2000 2001 123 816 2002 59 2003 321 2004 60 2002 62 2005 59 865 2006 40 41 59 777 58 2001 40 2007 42 2008 44 704 2009 41 59 2001 40 2001 307 2010 41 748 59 330 126 2001 40 41 59 2011 38 758 42 40 41 59 2001 38 758 349 40 41 59 569 758 340 40 601 2001 38 2012 41 601 59 125 59 ,"{'AvgLine': 6, 'CountLine': 63, 'CountStmt': 20, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 62, 'CountStmtDecl': 14, 'MaxCyclomatic': 3, 'SumCyclomatic': 8, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 62, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99325,C++,"class FileGDBIterator
{
    public:
        virtual                     ~FileGDBIterator() {}

        virtual FileGDBTable        *GetTable() = 0;
        virtual void                 Reset() = 0;
        virtual int                  GetNextRowSortedByFID() = 0;
        virtual int                  GetRowCount();

        /* Only available on a BuildIsNotNull() iterator */
        virtual const OGRField*      GetMinValue(int& eOutOGRFieldType);
        virtual const OGRField*      GetMaxValue(int& eOutOGRFieldType);
        /* will reset the iterator */
        virtual int                  GetMinMaxSumCount(double& dfMin, double& dfMax,
                                                       double& dfSum, int& nCount);

        /* Only available on a BuildIsNotNull() or Build() iterator */
        virtual int                  GetNextRowSortedByValue();

        static FileGDBIterator*      Build(FileGDBTable* poParent,
                                           int nFieldIdx,
                                           int bAscending,
                                           FileGDBSQLOp op,
                                           OGRFieldType eOGRFieldType,
                                           const OGRField* psValue);
        static FileGDBIterator*      BuildIsNotNull(FileGDBTable* poParent,
                                                    int nFieldIdx,
                                                    int bAscending);
        static FileGDBIterator*      BuildNot(FileGDBIterator* poIterBase);
        static FileGDBIterator*      BuildAnd(FileGDBIterator* poIter1,
                                              FileGDBIterator* poIter2,
                                              bool bTakeOwnershipOfIterators);
        static FileGDBIterator*      BuildOr(FileGDBIterator* poIter1,
                                             FileGDBIterator* poIter2,
                                             int bIteratorAreExclusive = FALSE);
};",0,587 2000 123 777 58 864 126 2000 40 41 123 125 864 2001 42 2002 40 41 61 1500 59 864 865 2003 40 41 61 1500 59 864 704 2004 40 41 61 1500 59 864 704 2005 40 41 59 305 864 601 2006 42 2007 40 704 38 2008 41 59 864 601 2006 42 2009 40 704 38 2008 41 59 305 864 704 2010 40 625 38 2011 44 625 38 2012 44 625 38 2013 44 704 38 2014 41 59 305 864 704 2015 40 41 59 809 2000 42 2016 40 2001 42 2017 44 704 2018 44 704 2019 44 2020 2021 44 2022 2023 44 601 2006 42 2024 41 59 809 2000 42 2025 40 2001 42 2017 44 704 2018 44 704 2019 41 59 809 2000 42 2026 40 2000 42 2027 41 59 809 2000 42 2028 40 2000 42 2029 44 2000 42 2030 44 569 2031 41 59 809 2000 42 2032 40 2000 42 2029 44 2000 42 2030 44 704 2033 61 2034 41 59 125 59 ,"{'AvgLine': 7, 'CountLine': 116, 'CountStmt': 44, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 28, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 108, 'CountStmtDecl': 16, 'MaxCyclomatic': 3, 'SumCyclomatic': 14, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 14, 'AltCountLineCode': 108, 'CountLineCodeExe': 26, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 7, 'CountClassDerived': 6, 'CountLineCodeDecl': 27, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 5, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 14, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99327,C++,"class FileGDBRasterField: public FileGDBGeomField
{
    public:
        enum class Type
        {
            EXTERNAL,
            MANAGED,
            INLINE,
        };

    private:
        friend class FileGDBTable;

        std::string       osRasterColumnName;

        Type              m_eType = Type::EXTERNAL;

    public:
        explicit          FileGDBRasterField(FileGDBTable* poParentIn) : FileGDBGeomField(poParentIn) {}
        virtual          ~FileGDBRasterField() {}

        const std::string& GetRasterColumnName() const { return osRasterColumnName; }
        Type GetType() const { return m_eType; }
};",0,587 2000 58 777 2001 123 777 58 640 587 2002 123 2003 44 2004 44 2005 44 125 59 773 58 667 587 2006 59 2007 321 2008 2009 59 2002 2010 61 2002 321 2011 59 777 58 648 2000 40 2006 42 2012 41 58 2001 40 2012 41 123 125 864 126 2000 40 41 123 125 601 2007 321 2008 38 2013 40 41 601 123 792 2009 59 125 2002 2014 40 41 601 123 792 2010 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 18, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 13, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 37, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 35, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99337,C++,"class GeometryInsertTransformer : public OGRCoordinateTransformation
{
public:
    GeometryInsertTransformer() :
            dfXOffset(0),dfYOffset(0),dfZOffset(0),
            dfXScale(1.0),dfYScale(1.0),dfZScale(1.0),
            dfAngle(0.0) {}

    double dfXOffset;
    double dfYOffset;
    double dfZOffset;
    double dfXScale;
    double dfYScale;
    double dfZScale;
    double dfAngle;

    OGRSpatialReference *GetSourceCS() override { return nullptr; }
    OGRSpatialReference *GetTargetCS() override { return nullptr; }

    OGRCoordinateTransformation* Clone() const override { return new GeometryInsertTransformer(*this); }

    virtual OGRCoordinateTransformation* GetInverse() const override { return nullptr; }

    int Transform( int nCount,
                     double *x, double *y, double *z = nullptr,
                     double * /*t*/ = nullptr,
                     int *pabSuccess = nullptr ) override
        {
            int i;
            for( i = 0; i < nCount; i++ )
            {
                double dfXNew, dfYNew;

                x[i] *= dfXScale;
                y[i] *= dfYScale;
                if( z )
                    z[i] *= dfZScale;

                dfXNew = x[i] * cos(dfAngle) - y[i] * sin(dfAngle);
                dfYNew = x[i] * sin(dfAngle) + y[i] * cos(dfAngle);

                x[i] = dfXNew;
                y[i] = dfYNew;

                x[i] += dfXOffset;
                y[i] += dfYOffset;
                if( z )
                    z[i] += dfZOffset;

                if( pabSuccess )
                    pabSuccess[i] = TRUE;
            }
            return TRUE;
        }
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 58 2002 40 1500 41 44 2003 40 1500 41 44 2004 40 1500 41 44 2005 40 1501 41 44 2006 40 1501 41 44 2007 40 1501 41 44 2008 40 1500 41 123 125 625 2002 59 625 2003 59 625 2004 59 625 2005 59 625 2006 59 625 2007 59 625 2008 59 2009 42 2010 40 41 2011 123 792 753 59 125 2009 42 2012 40 41 2011 123 792 753 59 125 2001 42 2013 40 41 601 2011 123 792 744 2000 40 42 823 41 59 125 864 2001 42 2014 40 41 601 2011 123 792 753 59 125 704 2015 40 704 2016 44 625 42 2017 44 625 42 2018 44 625 42 2019 61 753 44 625 42 305 61 753 44 704 42 2020 61 753 41 2011 123 704 2021 59 664 40 2021 61 1500 59 2021 60 2016 59 2021 349 41 123 625 2022 44 2023 59 2017 91 2021 93 363 2005 59 2018 91 2021 93 363 2006 59 688 40 2019 41 2019 91 2021 93 363 2007 59 2022 61 2017 91 2021 93 42 2024 40 2008 41 45 2018 91 2021 93 42 2025 40 2008 41 59 2023 61 2017 91 2021 93 42 2025 40 2008 41 43 2018 91 2021 93 42 2024 40 2008 41 59 2017 91 2021 93 61 2022 59 2018 91 2021 93 61 2023 59 2017 91 2021 93 348 2002 59 2018 91 2021 93 348 2003 59 688 40 2019 41 2019 91 2021 93 348 2004 59 688 40 2020 41 2020 91 2021 93 61 2026 59 125 792 2027 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 55, 'CountStmt': 43, 'MaxNesting': 2, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 23, 'MaxCyclomatic': 5, 'SumCyclomatic': 10, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 45, 'CountLineCodeExe': 25, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 7, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99354,C++,"class GTXRasterBand final: public RawRasterBand
{
    CPL_DISALLOW_COPY_ASSIGN(GTXRasterBand)

  public:
    GTXRasterBand( GDALDataset *poDS, int nBand, VSILFILE * fpRaw,
                   vsi_l_offset nImgOffset, int nPixelOffset,
                   int nLineOffset,
                   GDALDataType eDataType, int bNativeOrder );

    ~GTXRasterBand() override;

    double GetNoDataValue( int *pbSuccess = nullptr ) override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 777 58 2000 40 2004 42 2005 44 704 2006 44 2007 42 2008 44 2009 2010 44 704 2011 44 704 2012 44 2013 2014 44 704 2015 41 59 126 2000 40 41 2016 59 625 2017 40 704 42 2018 61 753 41 2016 59 125 59 ,"{'AvgLine': 8, 'CountLine': 38, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 5, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 35, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 173, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99370,C++,"class PLMosaicRasterBand final: public GDALRasterBand
{
    friend class PLMosaicDataset;

  public:

                PLMosaicRasterBand( PLMosaicDataset * poDS, int nBand,
                                    GDALDataType eDataType );

    virtual CPLErr          IReadBlock( int, int, void * ) override;
    virtual CPLErr          IRasterIO( GDALRWFlag eRWFlag,
                                  int nXOff, int nYOff, int nXSize, int nYSize,
                                  void * pData, int nBufXSize, int nBufYSize,
                                  GDALDataType eBufType,
                                  GSpacing nPixelSpace, GSpacing nLineSpace,
                                  GDALRasterIOExtraArg* psExtraArg) override;

    virtual const char     *GetMetadataItem( const char* pszName,
                                             const char * pszDomain = """" ) override;

    virtual GDALColorInterp GetColorInterpretation() override;

    virtual int             GetOverviewCount() override;
    virtual GDALRasterBand* GetOverview(int iOvrLevel) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 2000 40 2003 42 2004 44 704 2005 44 2006 2007 41 59 864 2008 2009 40 704 44 704 44 865 42 41 2010 59 864 2008 2011 40 2012 2013 44 704 2014 44 704 2015 44 704 2016 44 704 2017 44 865 42 2018 44 704 2019 44 704 2020 44 2006 2021 44 2022 2023 44 2022 2024 44 2025 42 2026 41 2010 59 864 601 582 42 2027 40 601 582 42 2028 44 601 582 42 2029 61 362 41 2010 59 864 2030 2031 40 41 2010 59 864 704 2032 40 41 2010 59 864 2002 42 2033 40 704 2034 41 2010 59 125 59 ,"{'AvgLine': 17, 'CountLine': 148, 'CountStmt': 57, 'MaxNesting': 2, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 37, 'MaxEssential': 3, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 125, 'CountStmtDecl': 20, 'MaxCyclomatic': 5, 'SumCyclomatic': 18, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 19, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 129, 'CountLineCodeExe': 67, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 19, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 30, 'CountLineInactive': 2, 'CountDeclMethodAll': 101, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 25, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99521,C++,"class OGRNTFFeatureClassLayer final: public OGRLayer
{
    OGRFeatureDefn     *poFeatureDefn;
    OGRGeometry        *poFilterGeom;

    OGRNTFDataSource   *poDS;

    GIntBig            iCurrentFC;

  public:
    explicit             OGRNTFFeatureClassLayer( OGRNTFDataSource * poDS );
                        ~OGRNTFFeatureClassLayer();

    OGRGeometry *       GetSpatialFilter() override { return poFilterGeom; }
    void                SetSpatialFilter( OGRGeometry * ) override;
    virtual void        SetSpatialFilter( int iGeomField, OGRGeometry *poGeom ) override
                { OGRLayer::SetSpatialFilter(iGeomField, poGeom); }

    void                ResetReading() override;
    OGRFeature *        GetNextFeature() override;

    OGRFeature         *GetFeature( GIntBig nFeatureId ) override;

    OGRFeatureDefn *    GetLayerDefn() override { return poFeatureDefn; }

    GIntBig             GetFeatureCount( int = TRUE ) override;

    int                 TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2005 42 2006 59 2007 42 2008 59 2009 2010 59 777 58 648 2000 40 2007 42 2008 41 59 126 2000 40 41 59 2005 42 2011 40 41 2012 123 792 2006 59 125 865 2013 40 2005 42 41 2012 59 864 865 2013 40 704 2014 44 2005 42 2015 41 2012 123 2002 321 2013 40 2014 44 2015 41 59 125 865 2016 40 41 2012 59 2017 42 2018 40 41 2012 59 2017 42 2019 40 2009 2020 41 2012 59 2003 42 2021 40 41 2012 123 792 2004 59 125 2009 2022 40 704 61 2023 41 2012 59 704 2024 40 601 582 42 41 2012 59 125 59 ,"{'AvgLine': 9, 'CountLine': 130, 'CountStmt': 59, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 40, 'MaxEssential': 5, 'SumEssential': 15, 'AvgCyclomatic': 1, 'CountLineCode': 93, 'CountStmtDecl': 22, 'MaxCyclomatic': 5, 'SumCyclomatic': 21, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 31, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 11, 'AltCountLineCode': 93, 'CountLineCodeExe': 35, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 31, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 93, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99373,C++,"class JPNG_Band final: public MRFRasterBand {
    friend class MRFDataset;
public:
    JPNG_Band(MRFDataset *pDS, const ILImage &image, int b, int level);
    virtual ~JPNG_Band();
protected:
    virtual CPLErr Decompress(buf_mgr &dst, buf_mgr &src) override;
    virtual CPLErr Compress(buf_mgr &dst, buf_mgr &src) override;

    CPLErr CompressJPNG(buf_mgr &dst, buf_mgr &src);
    CPLErr DecompressJPNG(buf_mgr &dst, buf_mgr &src);
    bool rgb, sameres, optimize, JFIF;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 2000 40 2003 42 2004 44 601 2005 38 2006 44 704 2007 44 704 2008 41 59 864 126 2000 40 41 59 775 58 864 2009 2010 40 2011 38 2012 44 2011 38 2013 41 2014 59 864 2009 2015 40 2011 38 2012 44 2011 38 2013 41 2014 59 2009 2016 40 2011 38 2012 44 2011 38 2013 41 59 2009 2017 40 2011 38 2012 44 2011 38 2013 41 59 569 2018 44 2019 44 2020 44 2021 59 125 59 ,"{'AvgLine': 25, 'CountLine': 115, 'CountStmt': 74, 'MaxNesting': 3, 'AvgLineCode': 21, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 53, 'MaxEssential': 3, 'SumEssential': 8, 'AvgCyclomatic': 4, 'CountLineCode': 99, 'CountStmtDecl': 27, 'MaxCyclomatic': 6, 'SumCyclomatic': 18, 'AltAvgLineCode': 21, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 6, 'AltCountLineCode': 99, 'CountLineCodeExe': 69, 'CountLineComment': 14, 'AltAvgLineComment': 3, 'AltCountLineBlank': 12, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 169, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 14, 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 4, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 4, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 4}"
99381,C++,"    class SG_Exception_VWrite_Failure : public SG_Exception
    {
        std::string err_msg;

        public:
            SG_Exception_VWrite_Failure(const char* where, const char* type) :
                err_msg(std::string(""Failed to write "") + std::string(type) + std::string("" to "") + std::string(where))
            {}

            const char* get_err_msg() override { return this->err_msg.c_str(); }
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 2000 40 601 582 42 2005 44 601 582 42 2006 41 58 2004 40 2002 321 2003 40 362 41 43 2002 321 2003 40 2006 41 43 2002 321 2003 40 362 41 43 2002 321 2003 40 2005 41 41 123 125 601 582 42 2007 40 41 2008 123 792 823 354 2004 46 2009 40 41 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 11, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 9, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99393,C++,"template<class T, class V = std::string> class DirectedAcyclicGraph
{
    std::set<T> nodes;
    std::map<T, std::set<T>> incomingNodes; // incomingNodes[j][i] means an edge from i to j
    std::map<T, std::set<T>> outgoingNodes; // outgoingNodes[i][j] means an edge from i to j
    std::map<T, V> names;

public:
    DirectedAcyclicGraph() = default;

    void clear() { nodes.clear(); incomingNodes.clear(); outgoingNodes.clear(); names.clear(); }
    void addNode(const T& i, const V& s) { nodes.insert(i); names[i] = s; }
    void removeNode(const T& i);
    const char* addEdge(const T& i, const T& j);
    const char* removeEdge(const T& i, const T& j);
    bool isTherePathFromTo(const T& i, const T& j) const;
    std::vector<T> findStartingNodes() const;
    std::vector<T> getTopologicalOrdering();
};",0,822 60 587 2000 44 587 2001 61 2002 321 2003 62 587 2004 123 2002 321 2005 60 2000 62 2006 59 2002 321 2007 60 2000 44 2002 321 2005 60 2000 355 2008 59 330 2002 321 2007 60 2000 44 2002 321 2005 60 2000 355 2009 59 330 2002 321 2007 60 2000 44 2001 62 2010 59 777 58 2004 40 41 61 613 59 865 2011 40 41 123 2006 46 2011 40 41 59 2008 46 2011 40 41 59 2009 46 2011 40 41 59 2010 46 2011 40 41 59 125 865 2012 40 601 2000 38 2013 44 601 2001 38 2014 41 123 2006 46 2015 40 2013 41 59 2010 91 2013 93 61 2014 59 125 865 2016 40 601 2000 38 2013 41 59 601 582 42 2017 40 601 2000 38 2013 44 601 2000 38 2018 41 59 601 582 42 2019 40 601 2000 38 2013 44 601 2000 38 2018 41 59 569 2020 40 601 2000 38 2013 44 601 2000 38 2018 41 601 59 2002 321 2021 60 2000 62 2022 40 41 601 59 2002 321 2021 60 2000 62 2023 40 41 59 125 59 ,"{'AvgLine': 23, 'CountLine': 203, 'CountStmt': 66, 'MaxNesting': 2, 'AvgLineCode': 21, 'AvgEssential': 2, 'AvgLineBlank': 1, 'CountStmtExe': 23, 'MaxEssential': 6, 'SumEssential': 17, 'AvgCyclomatic': 2, 'CountLineCode': 186, 'CountStmtDecl': 43, 'MaxCyclomatic': 6, 'SumCyclomatic': 20, 'AltAvgLineCode': 21, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 186, 'CountLineCodeExe': 16, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 46, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99416,C++,"class TABMAPObjLine final : public TABMAPObjHdr
{
  public:
    GInt32      m_nX1;
    GInt32      m_nY1;
    GInt32      m_nX2;
    GInt32      m_nY2;
    GByte       m_nPenId;

    TABMAPObjLine():
        m_nX1(0),
        m_nY1(0),
        m_nX2(0),
        m_nY2(0),
        m_nPenId(0)
        {}
    virtual ~TABMAPObjLine() {}

    virtual int WriteObj(TABMAPObjectBlock *) override;

//  protected:
    virtual int ReadObj(TABMAPObjectBlock *) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2003 2004 59 2003 2005 59 2003 2006 59 2003 2007 59 2008 2009 59 2000 40 41 58 2004 40 1500 41 44 2005 40 1500 41 44 2006 40 1500 41 44 2007 40 1500 41 44 2009 40 1500 41 123 125 864 126 2000 40 41 123 125 864 704 2010 40 2011 42 41 2012 59 330 864 704 2013 40 2011 42 41 2012 59 125 59 ,"{'AvgLine': 9, 'CountLine': 52, 'CountStmt': 28, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 39, 'CountStmtDecl': 14, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 39, 'CountLineCodeExe': 19, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99410,C++,"class IILI1Reader
{
public:
    virtual     ~IILI1Reader();

    virtual int  OpenFile( const char *pszFilename ) = 0;

    virtual int  ReadModel( ImdReader *poImdReader, const char *pszModelFilename, OGRILI1DataSource *poDS ) = 0;
    virtual int  ReadFeatures() = 0;

    virtual OGRLayer *GetLayer( int ) = 0;
    virtual OGRLayer *GetLayerByName( const char* ) = 0;
    virtual int  GetLayerCount() = 0;
};",0,587 2000 123 777 58 864 126 2000 40 41 59 864 704 2001 40 601 582 42 2002 41 61 1500 59 864 704 2003 40 2004 42 2005 44 601 582 42 2006 44 2007 42 2008 41 61 1500 59 864 704 2009 40 41 61 1500 59 864 2010 42 2011 40 704 41 61 1500 59 864 2010 42 2012 40 601 582 42 41 61 1500 59 864 704 2013 40 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 15, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 12, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99408,C++,"class CutlineTransformer : public OGRCoordinateTransformation
{
public:
    void         *hSrcImageTransformer = nullptr;

    explicit CutlineTransformer(void* hTransformArg): hSrcImageTransformer(hTransformArg) {}

    virtual OGRSpatialReference *GetSourceCS() override { return nullptr; }
    virtual OGRSpatialReference *GetTargetCS() override { return nullptr; }

    virtual ~CutlineTransformer()
    {
        GDALDestroyTransformer(hSrcImageTransformer);
    }

    virtual int Transform( int nCount,
                           double *x, double *y, double *z, double* /* t */,
                           int *pabSuccess ) override {
        return GDALGenImgProjTransform( hSrcImageTransformer, TRUE,
                                        nCount, x, y, z, pabSuccess );
    }

    virtual OGRCoordinateTransformation *Clone() const override
    {
        return new CutlineTransformer(
            GDALCloneTransformer(hSrcImageTransformer));
    }

    virtual OGRCoordinateTransformation* GetInverse() const override { return nullptr; }
};",0,587 2000 58 777 2001 123 777 58 865 42 2002 61 753 59 648 2000 40 865 42 2003 41 58 2002 40 2003 41 123 125 864 2004 42 2005 40 41 2006 123 792 753 59 125 864 2004 42 2007 40 41 2006 123 792 753 59 125 864 126 2000 40 41 123 2008 40 2002 41 59 125 864 704 2009 40 704 2010 44 625 42 2011 44 625 42 2012 44 625 42 2013 44 625 42 305 44 704 42 2014 41 2006 123 792 2015 40 2002 44 2016 44 2010 44 2011 44 2012 44 2013 44 2014 41 59 125 864 2001 42 2017 40 41 601 2006 123 792 744 2000 40 2018 40 2002 41 41 59 125 864 2001 42 2019 40 41 601 2006 123 792 753 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 30, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 24, 'CountLineCodeExe': 9, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 55, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99420,C++,"class TABMAPObjPoint: public TABMAPObjHdr
{
  public:
    GInt32      m_nX;
    GInt32      m_nY;
    GByte       m_nSymbolId;

    TABMAPObjPoint():
        m_nX(0), m_nY(0), m_nSymbolId(0) {}
    virtual ~TABMAPObjPoint() {}

    virtual int WriteObj(TABMAPObjectBlock *) override;

//  protected:
    virtual int ReadObj(TABMAPObjectBlock *) override;
};",0,587 2000 58 777 2001 123 777 58 2002 2003 59 2002 2004 59 2005 2006 59 2000 40 41 58 2003 40 1500 41 44 2004 40 1500 41 44 2006 40 1500 41 123 125 864 126 2000 40 41 123 125 864 704 2007 40 2008 42 41 2009 59 330 864 704 2010 40 2008 42 41 2009 59 125 59 ,"{'AvgLine': 7, 'CountLine': 43, 'CountStmt': 22, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 30, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 30, 'CountLineCodeExe': 13, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 2, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99425,C++,"class CPL_DLL OGRGlobFieldDomain final: public OGRFieldDomain
{
private:
    std::string     m_osGlob;

    OGRGlobFieldDomain(const OGRGlobFieldDomain&) = delete;
    OGRGlobFieldDomain& operator= (const OGRGlobFieldDomain&) = delete;

public:
    /** Constructor.
     *
     * This is the same as the C function OGR_GlobFldDomain_Create().
     *
     * @param osName          Domain name.
     * @param osDescription   Domain description.
     * @param eFieldType      Field type.
     * @param eFieldSubType   Field subtype.
     * @param osBlob          Blob expression
     */
    OGRGlobFieldDomain(const std::string& osName,
                       const std::string& osDescription,
                       OGRFieldType eFieldType,
                       OGRFieldSubType eFieldSubType,
                       const std::string& osBlob);

    OGRGlobFieldDomain* Clone() const override {
        return new OGRGlobFieldDomain(m_osName, m_osDescription,
                                      m_eFieldType, m_eFieldSubType,
                                      m_osGlob);
    }

    /** Get the glob expression.
     *
     * This is the same as the C function OGR_GlobFldDomain_GetGlob().
     */
    const std::string& GetGlob() const { return m_osGlob; }
};",0,587 2000 2001 2002 58 777 2003 123 773 58 2004 321 2005 2006 59 2001 40 601 2001 38 41 61 619 59 2001 38 758 61 40 601 2001 38 41 61 619 59 777 58 306 2001 40 601 2004 321 2005 38 2007 44 601 2004 321 2005 38 2008 44 2009 2010 44 2011 2012 44 601 2004 321 2005 38 2013 41 59 2001 42 2014 40 41 601 2015 123 792 744 2001 40 2016 44 2017 44 2018 44 2019 44 2006 41 59 125 306 601 2004 321 2005 38 2020 40 41 601 123 792 2006 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 46, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 28, 'CountLineCodeExe': 6, 'CountLineComment': 14, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.50', 'AltCountLineComment': 14, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 57, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99421,C++,"class TABMAPObjRectEllipse final : public TABMAPObjHdr
{
  public:
    GInt32      m_nCornerWidth;   /* For rounded rect only */
    GInt32      m_nCornerHeight;
    GByte       m_nPenId;
    GByte       m_nBrushId;

    TABMAPObjRectEllipse():
        m_nCornerWidth(0),
        m_nCornerHeight(0),
        m_nPenId(0),
        m_nBrushId(0)
        {}
    virtual ~TABMAPObjRectEllipse() {}

    virtual int WriteObj(TABMAPObjectBlock *) override;

//  protected:
    virtual int ReadObj(TABMAPObjectBlock *) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2003 2004 59 305 2003 2005 59 2006 2007 59 2006 2008 59 2000 40 41 58 2004 40 1500 41 44 2005 40 1500 41 44 2007 40 1500 41 44 2008 40 1500 41 123 125 864 126 2000 40 41 123 125 864 704 2009 40 2010 42 41 2011 59 330 864 704 2012 40 2010 42 41 2011 59 125 59 ,"{'AvgLine': 16, 'CountLine': 80, 'CountStmt': 38, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 26, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 66, 'CountStmtDecl': 12, 'MaxCyclomatic': 4, 'SumCyclomatic': 10, 'AltAvgLineCode': 14, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 66, 'CountLineCodeExe': 35, 'CountLineComment': 7, 'AltAvgLineComment': 1, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99426,C++,"class CPL_DLL OGRRangeFieldDomain final: public OGRFieldDomain
{
private:
    OGRField            m_sMin;
    OGRField            m_sMax;
    bool                m_bMinIsInclusive;
    bool                m_bMaxIsInclusive;

    OGRRangeFieldDomain(const OGRRangeFieldDomain&) = delete;
    OGRRangeFieldDomain& operator= (const OGRRangeFieldDomain&) = delete;

public:
    /** Constructor.
     *
     * This is the same as the C function OGR_RangeFldDomain_Create().
     *
     * @param osName          Domain name.
     * @param osDescription   Domain description.
     * @param eFieldType      Field type.
     *                        One among OFTInteger, OFTInteger64, OFTReal or OFTDateTime
     * @param eFieldSubType   Field subtype.
     * @param sMin            Minimum value.
     *                        Which member in the OGRField enum must be read
     *                        depends on the field type.
     *                        If no minimum is set (might not be supported by
     *                        all backends), then initialize the value with
     *                        OGR_RawField_SetUnset().
     * @param bMinIsInclusive Whether the minimum value is included in the range.
     * @param sMax            Minimum value.
     *                        Which member in the OGRField enum must be read
     *                        depends on the field type.
     *                        If no maximum is set (might not be supported by
     *                        all backends), then initialize the value with
     *                        OGR_RawField_SetUnset().
     * @param bMaxIsInclusive Whether the minimum value is included in the range.
     */
    OGRRangeFieldDomain(const std::string& osName,
                        const std::string& osDescription,
                        OGRFieldType eFieldType,
                        OGRFieldSubType eFieldSubType,
                        const OGRField& sMin,
                        bool        bMinIsInclusive,
                        const OGRField& sMax,
                        bool        bMaxIsInclusive);

    OGRRangeFieldDomain* Clone() const override {
        return new OGRRangeFieldDomain(m_osName, m_osDescription,
                                       m_eFieldType, m_eFieldSubType,
                                       m_sMin, m_bMinIsInclusive,
                                       m_sMax, m_bMaxIsInclusive);
    }

    /** Get the minimum value.
     *
     * Which member in the returned OGRField enum must be read depends on the field type.
     *
     * If no minimum value is set, the OGR_RawField_IsUnset() will return true
     * when called on the result.
     *
     * This is the same as the C function OGR_RangeFldDomain_GetMin().
     *
     * @param bIsInclusiveOut set to true if the minimum is included in the range.
     */
    const OGRField& GetMin(bool& bIsInclusiveOut) const {
        bIsInclusiveOut = m_bMinIsInclusive;
        return m_sMin;
    }

    /** Get the maximum value.
     *
     * Which member in the returned OGRField enum must be read depends on the field type.
     *
     * If no maximum value is set, the OGR_RawField_IsUnset() will return true
     * when called on the result.
     *
     * This is the same as the C function OGR_RangeFldDomain_GetMax().
     *
     * @param bIsInclusiveOut set to true if the maximum is included in the range.
     */
    const OGRField& GetMax(bool& bIsInclusiveOut) const {
        bIsInclusiveOut = m_bMaxIsInclusive;
        return m_sMax;
    }
};",0,587 2000 2001 2002 58 777 2003 123 773 58 2004 2005 59 2004 2006 59 569 2007 59 569 2008 59 2001 40 601 2001 38 41 61 619 59 2001 38 758 61 40 601 2001 38 41 61 619 59 777 58 306 2001 40 601 2009 321 2010 38 2011 44 601 2009 321 2010 38 2012 44 2013 2014 44 2015 2016 44 601 2004 38 2017 44 569 2018 44 601 2004 38 2019 44 569 2020 41 59 2001 42 2021 40 41 601 2022 123 792 744 2001 40 2023 44 2024 44 2025 44 2026 44 2005 44 2007 44 2006 44 2008 41 59 125 306 601 2004 38 2027 40 569 38 2028 41 601 123 2028 61 2007 59 792 2005 59 125 306 601 2004 38 2029 40 569 38 2028 41 601 123 2028 61 2008 59 792 2006 59 125 125 59 ,"{'AvgLine': 8, 'CountLine': 103, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 52, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 52, 'CountLineCodeExe': 5, 'CountLineComment': 46, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.88', 'AltCountLineComment': 46, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99428,C++,"    template <class T>
    class safe_holder
    {
        T* p_;
        bool permit_throw_in_dtor;

        safe_holder(const safe_holder&);
        safe_holder& operator=(const safe_holder&);

    public:
        safe_holder()
            : p_(nullptr),
              permit_throw_in_dtor(false)
        {
        }

        ~safe_holder()
        {
            release();
        }

        T* operator->() const
        {
            return p_;
        }

        T* get() const
        {
            return p_;
        }

        /**
         * Tell ptr it can throw from destructor. Right way is to
         * use std::uncaught_exception(), but some compilers lack
         * correct implementation of the function.
         */
        void permit_throw()
        {
            permit_throw_in_dtor = true;
        }

        /**
         * Specially treats exceptions in test object destructor;
         * if test itself failed, exceptions in destructor
         * are ignored; if test was successful and destructor failed,
         * warning exception thrown.
         */
        void release()
        {
            try
            {
                if (delete_obj() == false)
                {
                    throw warning(""destructor of test object raised""
                        "" an SEH exception"");
                }
            }
            catch (const std::exception& ex)
            {
                if (permit_throw_in_dtor)
                {
                    std::string msg = ""destructor of test object raised""
                        "" exception: "";
                    msg += ex.what();
                    throw warning(msg);
                }
            }
            catch( ... )
            {
                if (permit_throw_in_dtor)
                {
                    throw warning(""destructor of test object raised an""
                        "" exception"");
                }
            }
        }

        /**
         * Re-init holder to get brand new object.
         */
        void reset()
        {
            release();
            permit_throw_in_dtor = false;
            p_ = new T();
        }

        bool delete_obj()
        {
#if defined(TUT_USE_SEH)
            __try
            {
#endif
                T* p = p_;
                p_ = nullptr;
                delete p;
#if defined(TUT_USE_SEH)
            }
            __except(handle_seh_(::GetExceptionCode()))
            {
                if (permit_throw_in_dtor)
                {
                    return false;
                }
            }
#endif
            return true;
        }
    };",0,822 60 587 2000 62 587 2001 123 2000 42 2002 59 569 2003 59 2001 40 601 2001 38 41 59 2001 38 758 61 40 601 2001 38 41 59 777 58 2001 40 41 58 2002 40 753 41 44 2003 40 655 41 123 125 126 2001 40 41 123 2004 40 41 59 125 2000 42 758 354 40 41 601 123 792 2002 59 125 2000 42 2005 40 41 601 123 792 2002 59 125 306 865 2006 40 41 123 2003 61 829 59 125 306 865 2007 40 41 123 830 123 688 40 2008 40 41 323 655 41 123 825 2009 40 362 362 41 59 125 125 580 40 601 2010 321 2011 38 2012 41 123 688 40 2003 41 123 2010 321 2013 2014 61 362 362 59 2014 348 2012 46 2015 40 41 59 825 2016 40 2014 41 59 125 125 580 40 322 41 123 688 40 2003 41 123 825 2017 40 362 362 41 59 125 125 125 306 865 2018 40 41 123 2007 40 41 59 2003 61 655 59 2002 61 744 2000 40 41 59 125 569 2019 40 41 123 35 688 2020 40 2021 41 2022 123 35 636 2000 42 2023 61 2002 59 2002 61 753 59 619 2023 59 35 688 2020 40 2021 41 125 2024 40 2025 40 321 2026 40 41 41 41 123 688 40 2003 41 123 792 655 59 125 125 35 636 792 829 59 125 125 59 ,"{'AvgLine': 9, 'CountLine': 108, 'CountStmt': 35, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 71, 'CountStmtDecl': 17, 'MaxCyclomatic': 7, 'SumCyclomatic': 14, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 85, 'CountLineCodeExe': 23, 'CountLineComment': 14, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 10, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 14, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 55, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99430,C++,"template <class Data>
class test_object : public Data, public test_object_posix
{
public:

    /**
     * Default constructor
     */
    test_object()
    {
    }

    void set_test_name(const std::string& current_test_name)
    {
        current_test_name_ = current_test_name;
    }

    const std::string& get_test_name() const
    {
        return current_test_name_;
    }

    void set_test_id(int current_test_id)
    {
        current_test_id_ = current_test_id;
    }

    int get_test_id() const
    {
        return current_test_id_;
    }

    /**
     * Default do-nothing test.
     */
    template <int n>
    void test()
    {
        called_method_was_a_dummy_test_ = true;
    }

    /**
     * The flag is set to true by default (dummy) test.
     * Used to detect usused test numbers and avoid unnecessary
     * test object creation which may be time-consuming depending
     * on operations described in Data::Data() and Data::~Data().
     * TODO: replace with throwing special exception from default test.
     */
    bool called_method_was_a_dummy_test_;

private:
    int             current_test_id_;
    std::string     current_test_name_;

    test_object(test_object const&); // = delete
    test_object& operator=(test_object const&); // = delete
};",0,822 60 587 2000 62 587 2001 58 777 2000 44 777 2002 123 777 58 306 2001 40 41 123 125 865 2003 40 601 2004 321 2005 38 2006 41 123 2007 61 2006 59 125 601 2004 321 2005 38 2008 40 41 601 123 792 2009 59 125 865 2010 40 704 2011 41 123 2012 61 2011 59 125 704 2013 40 41 601 123 792 2014 59 125 306 822 60 704 2015 62 865 2016 40 41 123 2017 61 829 59 125 306 569 2018 59 773 58 704 2019 59 2004 321 2005 2020 59 2001 40 2001 601 38 41 59 330 2001 38 758 61 40 2001 601 38 41 59 330 125 59 ,"{'AvgLine': 3, 'CountLine': 56, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 34, 'CountLineCodeExe': 3, 'CountLineComment': 15, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.44', 'AltCountLineComment': 15, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99431,C++,"class GMLASTopElementParser : public DefaultHandler
{
            std::vector<PairURIFilename>  m_aoFilenames;
            int         m_nStartElementCounter;
            bool        m_bFinish;
            bool        m_bFoundSWE;
            std::map<CPLString,CPLString> m_oMapDocNSURIToPrefix;

    public:
                        GMLASTopElementParser();

                        virtual ~GMLASTopElementParser() {}

        void Parse(const CPLString& osFilename, VSILFILE* fp);

        const std::vector<PairURIFilename>& GetXSDs() const
                                            { return m_aoFilenames; }
        bool GetSWE() const { return m_bFoundSWE; }
        const std::map<CPLString,CPLString>& GetMapDocNSURIToPrefix() const
                                            { return m_oMapDocNSURIToPrefix; }

        virtual void startElement(
            const   XMLCh* const    uri,
            const   XMLCh* const    localname,
            const   XMLCh* const    qname,
            const   Attributes& attrs
        ) override;
};",0,587 2000 58 777 2001 123 2002 321 2003 60 2004 62 2005 59 704 2006 59 569 2007 59 569 2008 59 2002 321 2009 60 2010 44 2010 62 2011 59 777 58 2000 40 41 59 864 126 2000 40 41 123 125 865 2012 40 601 2010 38 2013 44 2014 42 2015 41 59 601 2002 321 2003 60 2004 62 38 2016 40 41 601 123 792 2005 59 125 569 2017 40 41 601 123 792 2008 59 125 601 2002 321 2009 60 2010 44 2010 62 38 2018 40 41 601 123 792 2011 59 125 864 865 2019 40 601 2020 42 601 2021 44 601 2020 42 601 2022 44 601 2020 42 601 2023 44 601 2024 38 2025 41 2026 59 125 59 ,"{'AvgLine': 17, 'CountLine': 143, 'CountStmt': 37, 'MaxNesting': 1, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 122, 'CountStmtDecl': 28, 'MaxCyclomatic': 6, 'SumCyclomatic': 13, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 126, 'CountLineCodeExe': 11, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 2, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 86, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99438,C++,"class ReferenceGridRecord
{
public:
  explicit ReferenceGridRecord(std::ifstream & ifile);

  int NumberOfLines;
  int NumberOfColumns;
  double LineDirGridStep;
  double ColumnDirGridStep;
  unsigned char GridOrigin; // 0 == north-west corner; 1 == sw; 2 == se; 3 == ne;
};",0,587 2000 123 777 58 648 2000 40 2001 321 2002 38 2003 41 59 704 2004 59 704 2005 59 625 2006 59 625 2007 59 856 582 2008 59 330 125 59 ,"{'AvgLine': 8, 'CountLine': 19, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 18, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99448,C++,"class CPL_DLL GDALIHasAttribute
{
protected:
    std::shared_ptr<GDALAttribute> GetAttributeFromAttributes(const std::string& osName) const;

public:
    virtual ~GDALIHasAttribute();

    virtual std::shared_ptr<GDALAttribute> GetAttribute(const std::string& osName) const;

    virtual std::vector<std::shared_ptr<GDALAttribute>> GetAttributes(CSLConstList papszOptions = nullptr) const;

    virtual std::shared_ptr<GDALAttribute> CreateAttribute(
        const std::string& osName,
        const std::vector<GUInt64>& anDimensions,
        const GDALExtendedDataType& oDataType,
        CSLConstList papszOptions = nullptr);
};",0,587 2000 2001 123 775 58 2002 321 2003 60 2004 62 2005 40 601 2002 321 2006 38 2007 41 601 59 777 58 864 126 2001 40 41 59 864 2002 321 2003 60 2004 62 2008 40 601 2002 321 2006 38 2007 41 601 59 864 2002 321 2009 60 2002 321 2003 60 2004 355 2010 40 2011 2012 61 753 41 601 59 864 2002 321 2003 60 2004 62 2013 40 601 2002 321 2006 38 2007 44 601 2002 321 2009 60 2014 62 38 2015 44 601 2016 38 2017 44 2011 2012 61 753 41 59 125 59 ,"{'AvgLine': 7, 'CountLine': 48, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 44, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 2, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99457,C++,"  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };",0,587 2000 123 775 58 2001 42 2002 59 777 58 2000 40 41 58 2002 40 1500 41 123 125 2000 40 601 2000 38 2003 41 58 2002 40 2003 46 2002 41 123 2004 59 2005 40 2002 41 59 2006 59 125 2000 40 2001 42 2007 44 569 2008 61 829 41 58 2002 40 2007 41 123 688 40 2008 41 123 2009 59 2010 40 2002 41 59 2011 59 125 125 2000 38 758 61 40 601 2000 38 2003 41 123 2012 59 2013 40 2003 46 2002 41 59 2014 40 2002 41 59 2002 61 2003 46 2002 59 2015 59 792 42 823 59 125 126 2000 40 41 123 2016 59 2017 40 2002 41 59 2018 59 125 758 2001 42 40 41 601 123 792 2002 59 125 2001 42 758 354 40 41 601 123 792 2002 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 52, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 45, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99455,C++,"       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };",0,587 2000 123 569 2001 59 2002 2003 59 777 58 865 2004 40 41 123 688 40 2001 41 123 2005 40 2003 41 59 2001 61 655 59 125 125 2000 40 41 58 2001 40 829 41 44 2003 40 2006 40 41 41 123 125 126 2000 40 41 123 2004 40 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 8, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99460,C++,"class CPL_DLL OGRLayerPool
{
        CPL_DISALLOW_COPY_ASSIGN(OGRLayerPool)

    protected:
        OGRAbstractProxiedLayer *poMRULayer; /* the most recently used layer */
        OGRAbstractProxiedLayer *poLRULayer; /* the least recently used layer (still opened) */
        int                     nMRUListSize; /* the size of the list */
        int                     nMaxSimultaneouslyOpened;

    public:
        explicit                OGRLayerPool(int nMaxSimultaneouslyOpened = 100);
                               ~OGRLayerPool();

        void                    SetLastUsedLayer(OGRAbstractProxiedLayer* poProxiedLayer);
        void                    UnchainLayer(OGRAbstractProxiedLayer* poProxiedLayer);

        int                     GetMaxSimultaneouslyOpened() const { return nMaxSimultaneouslyOpened; }
        int                     GetSize() const { return nMRUListSize; }
};",0,587 2000 2001 123 2002 40 2001 41 775 58 2003 42 2004 59 305 2003 42 2005 59 305 704 2006 59 305 704 2007 59 777 58 648 2001 40 704 2007 61 1503 41 59 126 2001 40 41 59 865 2008 40 2003 42 2009 41 59 865 2010 40 2003 42 2009 41 59 704 2011 40 41 601 123 792 2007 59 125 704 2012 40 41 601 123 792 2006 59 125 125 59 ,"{'AvgLine': 12, 'CountLine': 92, 'CountStmt': 53, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 28, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 74, 'CountStmtDecl': 16, 'MaxCyclomatic': 6, 'SumCyclomatic': 16, 'AltAvgLineCode': 10, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 9, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 74, 'CountLineCodeExe': 34, 'CountLineComment': 10, 'AltAvgLineComment': 1, 'AltCountLineBlank': 11, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 59, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 4}"
99565,C++,"class WMSMiniDriverCapabilities {
public:
    // Default capabilities, suitable in most cases
    WMSMiniDriverCapabilities() :
        m_has_getinfo(0),
        m_has_geotransform(1),
        m_overview_dim_computation_method(OVERVIEW_ROUNDED)
    {}

    int m_has_getinfo; // Does it have meaningful implementation
    int m_has_geotransform;
    GDALWMSOverviewDimComputationMethod m_overview_dim_computation_method;
};",0,587 2000 123 777 58 330 2000 40 41 58 2001 40 1500 41 44 2002 40 1501 41 44 2003 40 2004 41 123 125 704 2001 59 330 704 2002 59 2005 2003 59 125 59 ,"{'AvgLine': 5, 'CountLine': 13, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 11, 'CountLineCodeExe': 3, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.18', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99498,C++,"class CALSWrapperSrcDataset final: public GDALPamDataset
{
    public:
        CALSWrapperSrcDataset( GDALDataset* poSrcDS, const char* pszPadding )
        {
            nRasterXSize = poSrcDS->GetRasterXSize();
            nRasterYSize = poSrcDS->GetRasterYSize();
            SetBand(1, new CALSWrapperSrcBand(poSrcDS));
            SetMetadataItem(""TIFFTAG_DOCUMENTNAME"", pszPadding);
        }
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 2004 44 601 582 42 2005 41 123 2006 61 2004 354 2007 40 41 59 2008 61 2004 354 2009 40 41 59 2010 40 1501 44 744 2011 40 2004 41 41 59 2012 40 362 44 2005 41 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 11, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 11, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 187, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99507,C++,"class LAN4BitRasterBand final: public GDALPamRasterBand
{
    GDALColorTable *poCT;
    GDALColorInterp eInterp;

    CPL_DISALLOW_COPY_ASSIGN(LAN4BitRasterBand)

  public:
                   LAN4BitRasterBand( LANDataset *, int );
    ~LAN4BitRasterBand() override;

    GDALColorTable *GetColorTable() override;
    GDALColorInterp GetColorInterpretation() override;
    CPLErr SetColorTable( GDALColorTable * ) override;
    CPLErr SetColorInterpretation( GDALColorInterp ) override;

    CPLErr IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2005 2006 59 2007 40 2000 41 777 58 2000 40 2008 42 44 704 41 59 126 2000 40 41 2009 59 2003 42 2010 40 41 2009 59 2005 2011 40 41 2009 59 2012 2013 40 2003 42 41 2009 59 2012 2014 40 2005 41 2009 59 2012 2015 40 704 44 704 44 865 42 41 2009 59 125 59 ,"{'AvgLine': 14, 'CountLine': 117, 'CountStmt': 45, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 32, 'MaxEssential': 3, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 89, 'CountStmtDecl': 14, 'MaxCyclomatic': 5, 'SumCyclomatic': 15, 'AltAvgLineCode': 10, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 19, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 2, 'CountDeclMethod': 9, 'AltCountLineCode': 89, 'CountLineCodeExe': 44, 'CountLineComment': 9, 'AltAvgLineComment': 1, 'AltCountLineBlank': 19, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 137, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 61, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99531,C++,"class WMTSTileMatrixSet
{
    public:
        OGRSpatialReference         oSRS;
        CPLString                   osSRS;
        bool                        bBoundingBoxValid;
        OGREnvelope                 sBoundingBox; /* expressed in TMS SRS */
        std::vector<WMTSTileMatrix> aoTM;

        WMTSTileMatrixSet() :
            oSRS( OGRSpatialReference() ),
            bBoundingBoxValid(false)
        {
            oSRS.SetAxisMappingStrategy(OAMS_TRADITIONAL_GIS_ORDER);
        }
};",0,587 2000 123 777 58 2001 2002 59 2003 2004 59 569 2005 59 2006 2007 59 305 2008 321 2009 60 2010 62 2011 59 2000 40 41 58 2002 40 2001 40 41 41 44 2005 40 655 41 123 2002 46 2012 40 2013 41 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 16, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 15, 'CountLineCodeExe': 1, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99554,C++,"  class ClassicLocale {
    #ifdef _MSC_VER
      typedef _locale_t locale_type;
    #else
      typedef locale_t locale_type;  // POSIX.1-2008 locale_t type
    #endif
    ClassicLocale();
    ~ClassicLocale();
    locale_type locale_;
    static ClassicLocale instance_;
  public:
    static locale_type Get() { return instance_.locale_; }
  };",0,587 2000 123 35 689 2001 833 2002 2003 59 35 630 833 2004 2003 59 330 35 636 2000 40 41 59 126 2000 40 41 59 2003 2005 59 809 2000 2006 59 777 58 809 2003 2007 40 41 123 792 2006 46 2005 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 13, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 13, 'CountLineCodeExe': 1, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 1, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99560,C++,"class OGRCompoundCurvePointIterator final: public OGRPointIterator
{
        CPL_DISALLOW_COPY_ASSIGN(OGRCompoundCurvePointIterator)

        const OGRCompoundCurve *poCC = nullptr;
        int                     iCurCurve = 0;
        OGRPointIterator       *poCurveIter = nullptr;

    public:
        explicit OGRCompoundCurvePointIterator( const OGRCompoundCurve* poCCIn ) :
            poCC(poCCIn) {}
        ~OGRCompoundCurvePointIterator() override { delete poCurveIter; }

        OGRBoolean getNextPoint( OGRPoint* p ) override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 601 2004 42 2005 61 753 59 704 2006 61 1500 59 2002 42 2007 61 753 59 777 58 648 2000 40 601 2004 42 2008 41 58 2005 40 2008 41 123 125 126 2000 40 41 2009 123 619 2007 59 125 2010 2011 40 2012 42 2013 41 2009 59 125 59 ,"{'AvgLine': 7, 'CountLine': 34, 'CountStmt': 20, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 4, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 30, 'CountStmtDecl': 7, 'MaxCyclomatic': 5, 'SumCyclomatic': 7, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 30, 'CountLineCodeExe': 12, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99578,C++,"class GXFRasterBand final: public GDALPamRasterBand
{
    friend class GXFDataset;

  public:

                GXFRasterBand( GXFDataset *, int );
    double      GetNoDataValue( int* bGotNoDataValue ) override;

    virtual CPLErr IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 2000 40 2003 42 44 704 41 59 625 2004 40 704 42 2005 41 2006 59 864 2007 2008 40 704 44 704 44 865 42 41 2006 59 125 59 ,"{'AvgLine': 17, 'CountLine': 63, 'CountStmt': 28, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 23, 'MaxEssential': 3, 'SumEssential': 5, 'AvgCyclomatic': 3, 'CountLineCode': 49, 'CountStmtDecl': 10, 'MaxCyclomatic': 5, 'SumCyclomatic': 9, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 3, 'AltCountLineCode': 49, 'CountLineCodeExe': 35, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 131, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99601,C++,"class ERSProxyRasterBand final : public GDALProxyRasterBand
{
public:
    explicit ERSProxyRasterBand(GDALRasterBand* poUnderlyingBand):
        m_poUnderlyingBand(poUnderlyingBand)
    {
        poUnderlyingBand->GetBlockSize(&nBlockXSize, &nBlockYSize);
        eDataType = poUnderlyingBand->GetRasterDataType();
    }

    int GetOverviewCount() override;

protected:
    GDALRasterBand* RefUnderlyingRasterBand() override { return m_poUnderlyingBand; }

private:
    GDALRasterBand* m_poUnderlyingBand;
};",0,587 2000 2001 58 777 2002 123 777 58 648 2000 40 2003 42 2004 41 58 2005 40 2004 41 123 2004 354 2006 40 38 2007 44 38 2008 41 59 2009 61 2004 354 2010 40 41 59 125 704 2011 40 41 2012 59 775 58 2003 42 2013 40 41 2012 123 792 2005 59 125 773 58 2003 42 2005 59 125 59 ,"{'AvgLine': 5, 'CountLine': 26, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 23, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 23, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 148, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99600,C++,"class ERSRasterBand final: public RawRasterBand
{
  public:
    ERSRasterBand( GDALDataset *poDS, int nBand, VSILFILE * fpRaw,
                   vsi_l_offset nImgOffset, int nPixelOffset,
                   int nLineOffset,
                   GDALDataType eDataType, int bNativeOrder );

    double GetNoDataValue( int *pbSuccess = nullptr ) override;
    CPLErr SetNoDataValue( double ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 2004 44 704 2005 44 2006 42 2007 44 2008 2009 44 704 2010 44 704 2011 44 2012 2013 44 704 2014 41 59 625 2015 40 704 42 2016 61 753 41 2017 59 2018 2019 40 625 41 2017 59 125 59 ,"{'AvgLine': 11, 'CountLine': 45, 'CountStmt': 16, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 42, 'CountStmtDecl': 5, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 42, 'CountLineCodeExe': 17, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 171, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99612,C++,"class SpheroidItem
{
    CPL_DISALLOW_COPY_ASSIGN(SpheroidItem)

 public:
   SpheroidItem();
   ~SpheroidItem();

   char *spheroid_name;
   double equitorial_radius;  // TODO(schwehr): Spelling.
   double polar_radius;
   double inverse_flattening;

   void SetValuesByRadii( const char *spheroidname, double eq_radius,
                          double p_radius);
   void SetValuesByEqRadiusAndInvFlattening( const char *spheroidname,
                                             double eq_radius,
                                             double inverseflattening);
};",0,587 2000 123 2001 40 2000 41 777 58 2000 40 41 59 126 2000 40 41 59 582 42 2002 59 625 2003 59 330 625 2004 59 625 2005 59 865 2006 40 601 582 42 2007 44 625 2008 44 625 2009 41 59 865 2010 40 601 582 42 2007 44 625 2008 44 625 2011 41 59 125 59 ,"{'AvgLine': 7, 'CountLine': 48, 'CountStmt': 21, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 45, 'CountLineCodeExe': 18, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 45, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99614,C++,"class WMSMiniDriver_MRF : public WMSMiniDriver {
public:
    WMSMiniDriver_MRF();
    virtual ~WMSMiniDriver_MRF();

    virtual CPLErr Initialize(CPLXMLNode *config, char **papszOpenOptions) override;
    virtual CPLErr EndInit() override;

    virtual CPLErr TiledImageRequest(WMSHTTPRequest &url,
                                    const GDALWMSImageRequestInfo &iri,
                                    const GDALWMSTiledImageRequestInfo &tiri) override;

    enum { tMRF, tBundle, tEND };

private:
    size_t GetIndexAddress(const GDALWMSTiledImageRequestInfo &tiri) const;

    // The path or URL for index
    CPLString m_idxname;

    // Which type of remote file this is, one of the types above
    int m_type;

    VSILFILE *fp; // If index is a file
    WMSHTTPRequest *m_request; // If index is an URL
    WMSMiniDriver_MRF_ns::SectorCache *index_cache;

    // Per level index offsets, level 0 being the full resolution
    std::vector<GUIntBig> offsets;
    // Matching pagecounts
    std::vector<WMSMiniDriver_MRF_ns::ILSize> pages;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 864 126 2000 40 41 59 864 2002 2003 40 2004 42 2005 44 582 42 42 2006 41 2007 59 864 2002 2008 40 41 2007 59 864 2002 2009 40 2010 38 2011 44 601 2012 38 2013 44 601 2014 38 2015 41 2007 59 640 123 2016 44 2017 44 2018 125 59 773 58 2019 2020 40 601 2014 38 2015 41 601 59 330 2021 2022 59 330 704 2023 59 2024 42 2025 59 330 2010 42 2026 59 330 2027 321 2028 42 2029 59 330 2030 321 2031 60 2032 62 2033 59 330 2030 321 2031 60 2027 321 2034 62 2035 59 125 59 ,"{'AvgLine': 25, 'CountLine': 183, 'CountStmt': 91, 'MaxNesting': 3, 'AvgLineCode': 19, 'AvgEssential': 2, 'AvgLineBlank': 3, 'CountStmtExe': 63, 'MaxEssential': 4, 'SumEssential': 13, 'AvgCyclomatic': 3, 'CountLineCode': 135, 'CountStmtDecl': 32, 'MaxCyclomatic': 6, 'SumCyclomatic': 22, 'AltAvgLineCode': 20, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 31, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 3, 'CountDeclMethod': 6, 'AltCountLineCode': 140, 'CountLineCodeExe': 72, 'CountLineComment': 27, 'AltAvgLineComment': 3, 'AltCountLineBlank': 31, 'CountClassCoupled': 10, 'CountClassDerived': 0, 'CountLineCodeDecl': 26, 'CountLineInactive': 1, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 27, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 69, 'SumCyclomaticModified': 22, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
99626,C++,"class ReflectanceCalculator
{
public:
    ReflectanceCalculator(std::string sTimeStamp, double rRTOA);
    virtual ~ReflectanceCalculator();
    double rGetReflectance(double rRadiance, double rLat, double rLon) const;
private:
  static double rZenithAngle(double phi, double rDeclin, double rHourAngle);
  double rDeclination() const;
  double rHourAngle(double lam) const;
  double rSunDistance() const;
  static int iDaysInYear(int iYear);
  static int iDaysInMonth(int iMonth, int iYear);

    const double m_rRTOA; // solar irradiance on Top of Atmosphere
    int m_iYear; // e.g. 2005
    int m_iDay; // 1-365/366
    double m_rHours; // 0-24
};",0,587 2000 123 777 58 2000 40 2001 321 2002 2003 44 625 2004 41 59 864 126 2000 40 41 59 625 2005 40 625 2006 44 625 2007 44 625 2008 41 601 59 773 58 809 625 2009 40 625 2010 44 625 2011 44 625 2012 41 59 625 2013 40 41 601 59 625 2012 40 625 2014 41 601 59 625 2015 40 41 601 59 809 704 2016 40 704 2017 41 59 809 704 2018 40 704 2019 44 704 2017 41 59 601 625 2020 59 330 704 2021 59 330 704 2022 59 330 625 2023 59 330 125 59 ,"{'AvgLine': 12, 'CountLine': 130, 'CountStmt': 74, 'MaxNesting': 3, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 46, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 115, 'CountStmtDecl': 50, 'MaxCyclomatic': 6, 'SumCyclomatic': 16, 'AltAvgLineCode': 10, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 115, 'CountLineCodeExe': 65, 'CountLineComment': 14, 'AltAvgLineComment': 1, 'AltCountLineBlank': 8, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 48, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 14, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 6, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
99642,C++,"class InventoryWrapperGrib : public gdal::grib::InventoryWrapper
{
  public:
    explicit InventoryWrapperGrib(VSILFILE *fp) : gdal::grib::InventoryWrapper()
    {
        result_ = GRIB2Inventory(fp, &inv_, &inv_len_, 0 /* all messages */, &num_messages_);
    }

    ~InventoryWrapperGrib() override
    {
        if (inv_ == nullptr)
            return;
        for (uInt4 i = 0; i < inv_len_; i++)
        {
            GRIB2InventoryFree(inv_ + i);
        }
        free(inv_);
    }
};",0,587 2000 58 777 2001 321 2002 321 2003 123 777 58 648 2000 40 2004 42 2005 41 58 2001 321 2002 321 2003 40 41 123 2006 61 2007 40 2005 44 38 2008 44 38 2009 44 1500 305 44 38 2010 41 59 125 126 2000 40 41 2011 123 688 40 2012 323 753 41 792 59 664 40 2013 2014 61 1500 59 2014 60 2015 59 2014 349 41 123 2016 40 2012 43 2014 41 59 125 2017 40 2012 41 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 19, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 18, 'CountStmtDecl': 3, 'MaxCyclomatic': 3, 'SumCyclomatic': 4, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 18, 'CountLineCodeExe': 6, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99690,C++,"class OGRGMLSingleFeatureLayer final: public OGRLayer
{
  private:
    int                 nVal;
    OGRFeatureDefn     *poFeatureDefn;
    int                 iNextShapeId;

  public:
    explicit            OGRGMLSingleFeatureLayer(int nVal );
    virtual ~OGRGMLSingleFeatureLayer() { poFeatureDefn->Release(); }

    virtual void        ResetReading() override { iNextShapeId = 0; }
    virtual OGRFeature *GetNextFeature() override;
    virtual OGRFeatureDefn *GetLayerDefn() override { return poFeatureDefn; }
    virtual int         TestCapability( const char * ) override { return FALSE; }
};",0,587 2000 2001 58 777 2002 123 773 58 704 2003 59 2004 42 2005 59 704 2006 59 777 58 648 2000 40 704 2003 41 59 864 126 2000 40 41 123 2005 354 2007 40 41 59 125 864 865 2008 40 41 2009 123 2006 61 1500 59 125 864 2010 42 2011 40 41 2009 59 864 2004 42 2012 40 41 2009 123 792 2005 59 125 864 704 2013 40 601 582 42 41 2009 123 792 2014 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 35, 'CountStmt': 25, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 32, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 32, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 88, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 62, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99644,C++,"class OGRWAsPDriver final: public OGRSFDriver
{

  public:
                                ~OGRWAsPDriver() {}

    virtual const char*         GetName() override { return ""WAsP""; }
    virtual OGRDataSource*      Open( const char *, int ) override;

    virtual OGRDataSource       *CreateDataSource( const char *pszName,
                                                   char ** = nullptr ) override;

    virtual OGRErr              DeleteDataSource (const char *pszName) override;

    virtual int                 TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 126 2000 40 41 123 125 864 601 582 42 2003 40 41 2004 123 792 362 59 125 864 2005 42 2006 40 601 582 42 44 704 41 2004 59 864 2005 42 2007 40 601 582 42 2008 44 582 42 42 61 753 41 2004 59 864 2009 2010 40 601 582 42 2008 41 2004 59 864 704 2011 40 601 582 42 41 2004 59 125 59 ,"{'AvgLine': 8, 'CountLine': 65, 'CountStmt': 23, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 16, 'MaxEssential': 5, 'SumEssential': 10, 'AvgCyclomatic': 2, 'CountLineCode': 52, 'CountStmtDecl': 9, 'MaxCyclomatic': 5, 'SumCyclomatic': 12, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 52, 'CountLineCodeExe': 13, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 46, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99647,C++,"class OGRWFSWrappedResultLayer final: public OGRLayer
{
    GDALDataset *poDS;
    OGRLayer    *poLayer;

    public:
        OGRWFSWrappedResultLayer( GDALDataset* poDSIn, OGRLayer* poLayerIn ) :
            poDS(poDSIn),
            poLayer(poLayerIn)
        {}
        ~OGRWFSWrappedResultLayer()
        {
            delete poDS;
        }

        virtual void        ResetReading() override { poLayer->ResetReading(); }
        virtual OGRFeature *GetNextFeature() override { return poLayer->GetNextFeature(); }
        virtual OGRErr      SetNextByIndex( GIntBig nIndex ) override { return poLayer->SetNextByIndex(nIndex); }
        virtual OGRFeature *GetFeature( GIntBig nFID ) override { return poLayer->GetFeature(nFID); }
        virtual OGRFeatureDefn *GetLayerDefn() override { return poLayer->GetLayerDefn(); }
        virtual GIntBig     GetFeatureCount( int bForce = TRUE ) override { return poLayer->GetFeatureCount(bForce); }
        virtual int         TestCapability( const char * pszCap ) override  { return poLayer->TestCapability(pszCap); }
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2002 42 2005 59 777 58 2000 40 2003 42 2006 44 2002 42 2007 41 58 2004 40 2006 41 44 2005 40 2007 41 123 125 126 2000 40 41 123 619 2004 59 125 864 865 2008 40 41 2009 123 2005 354 2008 40 41 59 125 864 2010 42 2011 40 41 2009 123 792 2005 354 2011 40 41 59 125 864 2012 2013 40 2014 2015 41 2009 123 792 2005 354 2013 40 2015 41 59 125 864 2010 42 2016 40 2014 2017 41 2009 123 792 2005 354 2016 40 2017 41 59 125 864 2018 42 2019 40 41 2009 123 792 2005 354 2019 40 41 59 125 864 2014 2020 40 704 2021 61 2022 41 2009 123 792 2005 354 2020 40 2021 41 59 125 864 704 2023 40 601 582 42 2024 41 2009 123 792 2005 354 2023 40 2024 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 23, 'CountStmt': 19, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 9, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 21, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 91, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 63, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99663,C++,"class TABPoint: public TABFeature,
                public ITABFeatureSymbol
{
    CPL_DISALLOW_COPY_ASSIGN(TABPoint)

  public:
    explicit TABPoint(OGRFeatureDefn *poDefnIn);
    virtual ~TABPoint();

    virtual TABFeatureClass GetFeatureClass() override { return TABFCPoint; }
    virtual TABGeomType     ValidateMapInfoType(TABMAPFile *poMapFile = nullptr) override;

    virtual TABFeature *CloneTABFeature(OGRFeatureDefn *poNewDefn = nullptr ) override;

    double      GetX();
    double      GetY();

    virtual int ReadGeometryFromMAPFile(TABMAPFile *poMapFile, TABMAPObjHdr *,
                                        GBool bCoordDataOnly=FALSE,
                                        TABMAPCoordBlock **ppoCoordBlock=nullptr) override;
    virtual int WriteGeometryToMAPFile(TABMAPFile *poMapFile, TABMAPObjHdr *,
                                       GBool bCoordDataOnly=FALSE,
                                       TABMAPCoordBlock **ppoCoordBlock=nullptr) override;

    virtual int ReadGeometryFromMIFFile(MIDDATAFile *fp) override;
    virtual int WriteGeometryToMIFFile(MIDDATAFile *fp) override;

    virtual const char *GetStyleString() const override;

    virtual void DumpMIF(FILE *fpOut = nullptr) override;
};",0,587 2000 58 777 2001 44 777 2002 123 2003 40 2000 41 777 58 648 2000 40 2004 42 2005 41 59 864 126 2000 40 41 59 864 2006 2007 40 41 2008 123 792 2009 59 125 864 2010 2011 40 2012 42 2013 61 753 41 2008 59 864 2001 42 2014 40 2004 42 2015 61 753 41 2008 59 625 2016 40 41 59 625 2017 40 41 59 864 704 2018 40 2012 42 2013 44 2019 42 44 2020 2021 61 2022 44 2023 42 42 2024 61 753 41 2008 59 864 704 2025 40 2012 42 2013 44 2019 42 44 2020 2021 61 2022 44 2023 42 42 2024 61 753 41 2008 59 864 704 2026 40 2027 42 2028 41 2008 59 864 704 2029 40 2027 42 2028 41 2008 59 864 601 582 42 2030 40 41 601 2008 59 864 865 2031 40 2032 42 2033 61 753 41 2008 59 125 59 ,"{'AvgLine': 25, 'CountLine': 359, 'CountStmt': 141, 'MaxNesting': 2, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 107, 'MaxEssential': 5, 'SumEssential': 22, 'AvgCyclomatic': 2, 'CountLineCode': 244, 'CountStmtDecl': 39, 'MaxCyclomatic': 5, 'SumCyclomatic': 35, 'AltAvgLineCode': 17, 'AvgLineComment': 5, 'CountClassBase': 2, 'CountLineBlank': 55, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 3, 'CountDeclMethod': 15, 'AltCountLineCode': 244, 'CountLineCodeExe': 200, 'CountLineComment': 69, 'AltAvgLineComment': 5, 'AltCountLineBlank': 55, 'CountClassCoupled': 11, 'CountClassDerived': 2, 'CountLineCodeDecl': 47, 'CountLineInactive': 0, 'CountDeclMethodAll': 169, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.28', 'AltCountLineComment': 69, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 45, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 33, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99659,C++,"class TABDebugFeature final : public TABFeature
{
  private:
    GByte       m_abyBuf[512];
    int         m_nSize;
    int         m_nCoordDataPtr;  // -1 if none
    int         m_nCoordDataSize;

  public:
    explicit TABDebugFeature(OGRFeatureDefn *poDefnIn);
    virtual ~TABDebugFeature();

    virtual TABFeatureClass GetFeatureClass() override { return TABFCDebugFeature; }

    virtual int ReadGeometryFromMAPFile(TABMAPFile *poMapFile, TABMAPObjHdr *,
                                        GBool bCoordDataOnly=FALSE,
                                        TABMAPCoordBlock **ppoCoordBlock=nullptr) override;
    virtual int WriteGeometryToMAPFile(TABMAPFile *poMapFile, TABMAPObjHdr *,
                                       GBool bCoordDataOnly=FALSE,
                                       TABMAPCoordBlock **ppoCoordBlock=nullptr) override;

    virtual int ReadGeometryFromMIFFile(MIDDATAFile *fp) override;
    virtual int WriteGeometryToMIFFile(MIDDATAFile *fp) override;

    virtual void DumpMIF(FILE *fpOut = nullptr) override;
};",0,587 2000 2001 58 777 2002 123 773 58 2003 2004 91 1504 93 59 704 2005 59 704 2006 59 330 704 2007 59 777 58 648 2000 40 2008 42 2009 41 59 864 126 2000 40 41 59 864 2010 2011 40 41 2012 123 792 2013 59 125 864 704 2014 40 2015 42 2016 44 2017 42 44 2018 2019 61 2020 44 2021 42 42 2022 61 753 41 2012 59 864 704 2023 40 2015 42 2016 44 2017 42 44 2018 2019 61 2020 44 2021 42 42 2022 61 753 41 2012 59 864 704 2024 40 2025 42 2026 41 2012 59 864 704 2027 40 2025 42 2026 41 2012 59 864 865 2028 40 2029 42 2030 61 753 41 2012 59 125 59 ,"{'AvgLine': 12, 'CountLine': 122, 'CountStmt': 49, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 34, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 96, 'CountStmtDecl': 19, 'MaxCyclomatic': 3, 'SumCyclomatic': 13, 'AltAvgLineCode': 9, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 96, 'CountLineCodeExe': 44, 'CountLineComment': 20, 'AltAvgLineComment': 2, 'AltCountLineBlank': 17, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 146, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.21', 'AltCountLineComment': 20, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
99779,C++,"    class SGWriter_Exception_EmptyGeometry : public SGWriter_Exception
    {
        std::string msg;

        public:
            const char * get_err_msg() override { return this->msg.c_str(); }
            SGWriter_Exception_EmptyGeometry() : msg(""An empty geometry was detected when writing a netCDF file. Empty geometries are not allowed."") {}
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 823 354 2004 46 2007 40 41 59 125 2000 40 41 58 2004 40 362 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 7, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99783,C++,"    class SGWriter_Exception_RingOOB: public SGWriter_Exception
    {
        std::string msg;

        public:
            const char * get_err_msg() override { return this->msg.c_str(); }
            SGWriter_Exception_RingOOB() : msg(""An attempt was made to read a polygon ring that does not exist."") {}
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 823 354 2004 46 2007 40 41 59 125 2000 40 41 58 2004 40 362 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 7, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99700,C++,"class CPL_DLL GDALEDTComponent
{
public:
    ~GDALEDTComponent();
    GDALEDTComponent(const std::string& name, size_t offset, const GDALExtendedDataType& type);
    GDALEDTComponent(const GDALEDTComponent&);

    bool operator== (const GDALEDTComponent& ) const;

    /** Return the name.
     *
     * This is the same as the C function GDALEDTComponentGetName().
     */
    const std::string&   GetName() const { return m_osName; }

    /** Return the offset (in bytes) of the component in the compound data type.
     *
     * This is the same as the C function GDALEDTComponentGetOffset().
     */
    size_t               GetOffset() const { return m_nOffset; }

    /** Return the data type of the component.
     *
     * This is the same as the C function GDALEDTComponentGetType().
     */
    const GDALExtendedDataType& GetType() const { return m_oType; }

private:
    std::string          m_osName;
    size_t               m_nOffset;
    GDALExtendedDataType m_oType;
};",0,587 2000 2001 123 777 58 126 2001 40 41 59 2001 40 601 2002 321 2003 38 2004 44 2005 2006 44 601 2007 38 2008 41 59 2001 40 601 2001 38 41 59 569 758 323 40 601 2001 38 41 601 59 306 601 2002 321 2003 38 2009 40 41 601 123 792 2010 59 125 306 2005 2011 40 41 601 123 792 2012 59 125 306 601 2007 38 2013 40 41 601 123 792 2014 59 125 773 58 2002 321 2003 2015 59 2005 2016 59 2007 2017 59 125 59 ,"{'AvgLine': 3, 'CountLine': 45, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 28, 'CountLineCodeExe': 4, 'CountLineComment': 12, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.43', 'AltCountLineComment': 12, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99702,C++,"class CPL_DLL GDALRawResult
{
private:
    GDALExtendedDataType m_dt;
    size_t m_nEltCount;
    size_t m_nSize;
    GByte* m_raw;

    void FreeMe();

    GDALRawResult(const GDALRawResult&) = delete;
    GDALRawResult& operator=(const GDALRawResult&) = delete;

protected:
    friend class GDALAttribute;
//! @cond Doxygen_Suppress
    GDALRawResult(GByte* raw,
                  const GDALExtendedDataType& dt,
                  size_t nEltCount);
//! @endcond

public:
    ~GDALRawResult();
    GDALRawResult(GDALRawResult&&);
    GDALRawResult& operator=(GDALRawResult&&);

    /** Return byte at specified index. */
    const GByte& operator[](size_t idx) const { return m_raw[idx]; }
    /** Return pointer to the start of data. */
    const GByte* data() const { return m_raw; }
    /** Return the size in bytes of the raw result. */
    size_t size() const { return m_nSize; }

//! @cond Doxygen_Suppress
    GByte* StealData();
//! @endcond
};",0,587 2000 2001 123 773 58 2002 2003 59 2004 2005 59 2004 2006 59 2007 42 2008 59 865 2009 40 41 59 2001 40 601 2001 38 41 61 619 59 2001 38 758 61 40 601 2001 38 41 61 619 59 775 58 667 587 2010 59 330 2001 40 2007 42 2011 44 601 2002 38 2012 44 2004 2013 41 59 330 777 58 126 2001 40 41 59 2001 40 2001 307 41 59 2001 38 758 61 40 2001 307 41 59 306 601 2007 38 758 91 93 40 2004 2014 41 601 123 792 2008 91 2014 93 59 125 306 601 2007 42 2015 40 41 601 123 792 2008 59 125 306 2004 2016 40 41 601 123 792 2006 59 125 330 2007 42 2017 40 41 59 330 125 59 ,"{'AvgLine': 6, 'CountLine': 94, 'CountStmt': 46, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 25, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 81, 'CountStmtDecl': 23, 'MaxCyclomatic': 3, 'SumCyclomatic': 11, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 81, 'CountLineCodeExe': 29, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 16, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 61, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99724,C++,"class RDBRasterBand CPL_NON_FINAL: public GDALPamRasterBand
{
  protected:
    CPLString osAttributeName;
    CPLString osDescription;
    riegl::rdb::pointcloud::PointAttribute oPointAttribute;
    int nLevel;

  public:
    RDBRasterBand(
        RDBDataset *poDSIn, const std::string &osAttributeName,
        const riegl::rdb::pointcloud::PointAttribute &oPointAttributeIn,
        int nBandIn, GDALDataType eDataTypeIn, int nLevelIn);

    virtual double GetNoDataValue(int *pbSuccess = nullptr) override;
    virtual const char *GetDescription() const override;
};",0,587 2000 2001 58 777 2002 123 775 58 2003 2004 59 2003 2005 59 2006 321 2007 321 2008 321 2009 2010 59 704 2011 59 777 58 2000 40 2012 42 2013 44 601 2014 321 2015 38 2004 44 601 2006 321 2007 321 2008 321 2009 38 2016 44 704 2017 44 2018 2019 44 704 2020 41 59 864 625 2021 40 704 42 2022 61 753 41 2023 59 864 601 582 42 2024 40 41 601 2023 59 125 59 ,"{'AvgLine': 14, 'CountLine': 61, 'CountStmt': 24, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 16, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 56, 'CountStmtDecl': 8, 'MaxCyclomatic': 4, 'SumCyclomatic': 6, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 56, 'CountLineCodeExe': 17, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 3, 'CountClassDerived': 1, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 131, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 91, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 3}"
99789,C++,"class OCAD_EXTERN CADDictionary : public CADDictionaryRecord
{
public:
    CADDictionary();
    virtual ~CADDictionary();

    size_t getRecordsCount();
    void   addRecord( CADDictionaryItem );
    CADDictionaryItem getRecord( size_t index );
    std::string getRecordByName(const std::string& name) const;
private:
    std::vector< CADDictionaryItem > astXRecords;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 59 2003 2004 40 41 59 865 2005 40 2006 41 59 2006 2007 40 2003 2008 41 59 2009 321 2010 2011 40 601 2009 321 2010 38 2012 41 601 59 773 58 2009 321 2013 60 2006 62 2014 59 125 59 ,"{'AvgLine': 5, 'CountLine': 48, 'CountStmt': 21, 'MaxNesting': 3, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 4, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 47, 'CountStmtDecl': 11, 'MaxCyclomatic': 4, 'SumCyclomatic': 9, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 47, 'CountLineCodeExe': 14, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 37, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99736,C++,"class OGRVFKDataSource:public OGRDataSource
{
private:
    /* list of available layers */
    OGRVFKLayer  **papoLayers;
    int            nLayers;

    char *         pszName;

    /* input related parameters */
    IVFKReader    *poReader;

    /* private methods */
    OGRVFKLayer   *CreateLayerFromBlock(const IVFKDataBlock *);

public:
    OGRVFKDataSource();
    ~OGRVFKDataSource();

    int            Open(GDALOpenInfo* poOpenInfo);

    const char    *GetName() override { return pszName; }

    int            GetLayerCount() override { return nLayers; }
    OGRLayer      *GetLayer(int) override;

    int            TestCapability(const char *) override;

    IVFKReader    *GetReader() const { return poReader; }
};",0,587 2000 58 777 2001 123 773 58 305 2002 42 42 2003 59 704 2004 59 582 42 2005 59 305 2006 42 2007 59 305 2002 42 2008 40 601 2009 42 41 59 777 58 2000 40 41 59 126 2000 40 41 59 704 2010 40 2011 42 2012 41 59 601 582 42 2013 40 41 2014 123 792 2005 59 125 704 2015 40 41 2014 123 792 2004 59 125 2016 42 2017 40 704 41 2014 59 704 2018 40 601 582 42 41 2014 59 2006 42 2019 40 41 601 123 792 2007 59 125 125 59 ,"{'AvgLine': 12, 'CountLine': 137, 'CountStmt': 66, 'MaxNesting': 3, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 53, 'MaxEssential': 3, 'SumEssential': 11, 'AvgCyclomatic': 2, 'CountLineCode': 92, 'CountStmtDecl': 26, 'MaxCyclomatic': 6, 'SumCyclomatic': 23, 'AltAvgLineCode': 8, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 26, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 92, 'CountLineCodeExe': 53, 'CountLineComment': 19, 'AltAvgLineComment': 1, 'AltCountLineBlank': 26, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 154, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.21', 'AltCountLineComment': 19, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 26, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 61, 'SumCyclomaticModified': 23, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
99769,C++,"template<typename T, uint16_t length> class Array<Offset<T>, length> {
  static_assert(flatbuffers::is_same<T, void>::value, ""unexpected type T"");

 public:
  typedef const void *return_type;

  const uint8_t *Data() const { return data_; }

  // Make idl_gen_text.cpp::PrintContainer happy.
  return_type operator[](uoffset_t) const {
    FLATBUFFERS_ASSERT(false);
    return nullptr;
  }

 private:
  // This class is only used to access pre-existing data.
  Array();
  Array(const Array &);
  Array &operator=(const Array &);

  uint8_t data_[1];
};",0,822 60 835 2000 44 2001 2002 62 587 2003 60 2004 60 2000 62 44 2002 62 123 810 40 2005 321 2006 60 2000 44 865 62 321 2007 44 362 41 59 777 58 833 601 865 42 2008 59 601 2009 42 2010 40 41 601 123 792 2011 59 125 330 2008 758 91 93 40 2012 41 601 123 2013 40 655 41 59 792 753 59 125 773 58 330 2003 40 41 59 2003 40 601 2003 38 41 59 2003 38 758 61 40 601 2003 38 41 59 2009 2014 91 1501 93 59 125 59 ,"{'AvgLine': 2, 'CountLine': 22, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 8, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 15, 'CountLineCodeExe': 3, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99753,C++,"class CPL_DLL OGRUnionLayerGeomFieldDefn final: public OGRGeomFieldDefn
{
    public:

    int             bGeomTypeSet = false;
    int             bSRSSet = false;
    OGREnvelope     sStaticEnvelope{};

            OGRUnionLayerGeomFieldDefn(const char* pszName, OGRwkbGeometryType eType);
   explicit OGRUnionLayerGeomFieldDefn(const OGRGeomFieldDefn* poSrc);
   explicit OGRUnionLayerGeomFieldDefn(const OGRUnionLayerGeomFieldDefn* poSrc);
           ~OGRUnionLayerGeomFieldDefn();
};",0,587 2000 2001 2002 58 777 2003 123 777 58 704 2004 61 655 59 704 2005 61 655 59 2006 2007 123 125 59 2001 40 601 582 42 2008 44 2009 2010 41 59 648 2001 40 601 2003 42 2011 41 59 648 2001 40 601 2001 42 2011 41 59 126 2001 40 41 59 125 59 ,"{'AvgLine': 5, 'CountLine': 34, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 32, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 32, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 23, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99761,C++,"class CPL_UNSTABLE_API swq_parse_context {
public:
    swq_parse_context() : nStartToken(0), pszInput(nullptr), pszNext(nullptr),
                          pszLastValid(nullptr), bAcceptCustomFuncs(FALSE),
                          poRoot(nullptr), poCurSelect(nullptr) {}

    int        nStartToken;
    const char *pszInput;
    const char *pszNext;
    const char *pszLastValid;
    int        bAcceptCustomFuncs;

    swq_expr_node *poRoot;

    swq_select    *poCurSelect;
};",0,587 2000 2001 123 777 58 2001 40 41 58 2002 40 1500 41 44 2003 40 753 41 44 2004 40 753 41 44 2005 40 753 41 44 2006 40 2007 41 44 2008 40 753 41 44 2009 40 753 41 123 125 704 2002 59 601 582 42 2003 59 601 582 42 2004 59 601 582 42 2005 59 704 2006 59 2010 42 2008 59 2011 42 2009 59 125 59 ,"{'AvgLine': 3, 'CountLine': 16, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 13, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 7, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99771,C++,"class Struct FLATBUFFERS_FINAL_CLASS {
 public:
  template<typename T> T GetField(uoffset_t o) const {
    return ReadScalar<T>(&data_[o]);
  }

  template<typename T> T GetStruct(uoffset_t o) const {
    return reinterpret_cast<T>(&data_[o]);
  }

  const uint8_t *GetAddressOf(uoffset_t o) const { return &data_[o]; }
  uint8_t *GetAddressOf(uoffset_t o) { return &data_[o]; }

 private:
  // private constructor & copy constructor: you obtain instances of this
  // class by pointing to existing data only
  Struct();
  Struct(const Struct &);
  Struct &operator=(const Struct &);

  uint8_t data_[1];
};",0,587 2000 2001 123 777 58 822 60 835 2002 62 2002 2003 40 2004 2005 41 601 123 792 2006 60 2002 62 40 38 2007 91 2005 93 41 59 125 822 60 835 2002 62 2002 2008 40 2004 2005 41 601 123 792 786 60 2002 62 40 38 2009 91 2005 93 41 59 125 601 2010 42 2011 40 2004 2005 41 601 123 792 38 2012 91 2005 93 59 125 2010 42 2011 40 2004 2005 41 123 792 38 2013 91 2005 93 59 125 773 58 330 330 2000 40 41 59 2000 40 601 2000 38 41 59 2000 38 758 61 40 601 2000 38 41 59 2010 2014 91 1501 93 59 125 59 ,"{'AvgLine': 2, 'CountLine': 22, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 16, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 16, 'CountLineCodeExe': 4, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 42, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99773,C++,"class VectorOfAny {
 public:
  uoffset_t size() const { return EndianScalar(length_); }

  const uint8_t *Data() const {
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
  }
  uint8_t *Data() { return reinterpret_cast<uint8_t *>(&length_ + 1); }

 protected:
  VectorOfAny();

  uoffset_t length_;

 private:
  VectorOfAny(const VectorOfAny &);
  VectorOfAny &operator=(const VectorOfAny &);
};",0,587 2000 123 777 58 2001 2002 40 41 601 123 792 2003 40 2004 41 59 125 601 2005 42 2006 40 41 601 123 792 786 60 601 2005 42 62 40 38 2007 43 1501 41 59 125 2005 42 2006 40 41 123 792 786 60 2005 42 62 40 38 2008 43 1501 41 59 125 775 58 2000 40 41 59 2001 2009 59 773 58 2000 40 601 2000 38 41 59 2000 38 758 61 40 601 2000 38 41 59 125 59 ,"{'AvgLine': 1, 'CountLine': 18, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 14, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
99808,C++,"class OGRNASRelationLayer final: public OGRLayer
{
    OGRFeatureDefn     *poFeatureDefn;
    OGRNASDataSource    *poDS;

    bool                 bPopulated;
    int                  iNextFeature;
    std::vector<CPLString> aoRelationCollection;

  public:
    explicit             OGRNASRelationLayer( OGRNASDataSource *poDS );
                        ~OGRNASRelationLayer();

    void                ResetReading() override;
    OGRFeature *        GetNextFeature() override;

    GIntBig             GetFeatureCount( int bForce = TRUE ) override;
    OGRFeatureDefn *    GetLayerDefn() override { return poFeatureDefn; }
    int                 TestCapability( const char * ) override;

    // For use populating.
    void                AddRelation( const char *pszFromID,
                                     const char *pszType,
                                     const char *pszToID );
    void                MarkRelationsPopulated() { bPopulated = true; }
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2005 42 2006 59 569 2007 59 704 2008 59 2009 321 2010 60 2011 62 2012 59 777 58 648 2000 40 2005 42 2006 41 59 126 2000 40 41 59 865 2013 40 41 2014 59 2015 42 2016 40 41 2014 59 2017 2018 40 704 2019 61 2020 41 2014 59 2003 42 2021 40 41 2014 123 792 2004 59 125 704 2022 40 601 582 42 41 2014 59 330 865 2023 40 601 582 42 2024 44 601 582 42 2025 44 601 582 42 2026 41 59 865 2027 40 41 123 2007 61 829 59 125 125 59 ,"{'AvgLine': 14, 'CountLine': 155, 'CountStmt': 67, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 49, 'MaxEssential': 4, 'SumEssential': 15, 'AvgCyclomatic': 2, 'CountLineCode': 104, 'CountStmtDecl': 25, 'MaxCyclomatic': 5, 'SumCyclomatic': 18, 'AltAvgLineCode': 9, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 32, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 9, 'AltCountLineCode': 104, 'CountLineCodeExe': 56, 'CountLineComment': 19, 'AltAvgLineComment': 2, 'AltCountLineBlank': 32, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 20, 'CountLineInactive': 0, 'CountDeclMethodAll': 91, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.18', 'AltCountLineComment': 19, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 72, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
99810,C++,"class MyDataset: public GDALDataset
{
    public:
        MyDataset()
        {
            eAccess = GA_Update;
            nRasterXSize = 2;
            nRasterYSize = 1;
            SetBand(1, new MyRasterBand());
        }

        ~MyDataset()
        {
            FlushCache(true);
        }
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 123 2002 61 2003 59 2004 61 1502 59 2005 61 1501 59 2006 40 1501 44 744 2007 40 41 41 59 125 126 2000 40 41 123 2008 40 829 41 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 16, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 15, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 144, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99819,C++,"class GTiffBitmapBand : public GTiffOddBitsBand
{
    friend class GTiffDataset;

    GDALColorTable *m_poColorTable = nullptr;

    CPL_DISALLOW_COPY_ASSIGN(GTiffBitmapBand)

  public:

                   GTiffBitmapBand( GTiffDataset *, int );
    virtual       ~GTiffBitmapBand();

    virtual GDALColorInterp GetColorInterpretation() override;
    virtual GDALColorTable *GetColorTable() override;
};",0,587 2000 58 777 2001 123 667 587 2002 59 2003 42 2004 61 753 59 2005 40 2000 41 777 58 2000 40 2002 42 44 704 41 59 864 126 2000 40 41 59 864 2006 2007 40 41 2008 59 864 2003 42 2009 40 41 2008 59 125 59 ,"{'AvgLine': 13, 'CountLine': 70, 'CountStmt': 23, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 16, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 52, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 8, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 6, 'AltCountLineCode': 56, 'CountLineCodeExe': 21, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 3, 'CountClassDerived': 1, 'CountLineCodeDecl': 7, 'CountLineInactive': 1, 'CountDeclMethodAll': 183, 'MaxInheritanceTree': 5, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99837,C++,"class SetZVisitor: public OGRDefaultGeometryVisitor
{
        double m_dfZ;

    public:
        explicit SetZVisitor(double dfZ): m_dfZ(dfZ) {}

        using OGRDefaultGeometryVisitor::visit;

        void visit(OGRPoint* poPoint) override
        {
            poPoint->setZ(m_dfZ);
        }
};",0,587 2000 58 777 2001 123 625 2002 59 777 58 648 2000 40 625 2003 41 58 2002 40 2003 41 123 125 860 2001 321 2004 59 865 2004 40 2005 42 2006 41 2007 123 2006 354 2008 40 2002 41 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 14, 'CountStmt': 22, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 20, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 17, 'AltCountLineCode': 11, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 16, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 36, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 17, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 22, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99872,C++,"class OGRSOSISimpleDataType {
    CPLString           osName;
    OGRFieldType        nType;

public:
    OGRSOSISimpleDataType ();
    OGRSOSISimpleDataType (const char *pszName, OGRFieldType nType);
    ~OGRSOSISimpleDataType();

    void setType (const char *pszName, OGRFieldType nType);
    const char          *GetName() const {
        return osName.c_str();
    }
    OGRFieldType        GetType() const {
        return nType;
    }
};",0,587 2000 123 2001 2002 59 2003 2004 59 777 58 2000 40 41 59 2000 40 601 582 42 2005 44 2003 2004 41 59 126 2000 40 41 59 865 2006 40 601 582 42 2005 44 2003 2004 41 59 601 582 42 2007 40 41 601 123 792 2002 46 2008 40 41 59 125 2003 2009 40 41 601 123 792 2004 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 29, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 27, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 27, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 56, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99871,C++,"class OGRSOSIDataType {
    OGRSOSISimpleDataType* poElements;
    int                    nElementCount;

    OGRSOSIDataType& operator= (const OGRSOSIDataType& ) = delete;

public:
    explicit OGRSOSIDataType (int nSize);

    OGRSOSIDataType( const OGRSOSIDataType& oSrc ) :
            poElements( nullptr ),
            nElementCount( oSrc.nElementCount )
    {
        poElements = new OGRSOSISimpleDataType[nElementCount];
        for( int i = 0; i < nElementCount; i++ )
            poElements[i] = oSrc.poElements[i];
    }


    OGRSOSIDataType( OGRSOSIDataType&& oSrc ) noexcept:
            poElements( oSrc.poElements ),
            nElementCount( oSrc.nElementCount )
    {
        oSrc.poElements = nullptr;
        oSrc.nElementCount = 0;
    }

    ~OGRSOSIDataType();

    void setElement(int nIndex, const char *name, OGRFieldType type);
    OGRSOSISimpleDataType* getElements() {
        return poElements;
    }
    int getElementCount() {
        return nElementCount;
    }
};",0,587 2000 123 2001 42 2002 59 704 2003 59 2000 38 758 61 40 601 2000 38 41 61 619 59 777 58 648 2000 40 704 2004 41 59 2000 40 601 2000 38 2005 41 58 2002 40 753 41 44 2003 40 2005 46 2003 41 123 2002 61 744 2001 91 2003 93 59 664 40 704 2006 61 1500 59 2006 60 2003 59 2006 349 41 2002 91 2006 93 61 2005 46 2002 91 2006 93 59 125 2000 40 2000 307 2005 41 748 58 2002 40 2005 46 2002 41 44 2003 40 2005 46 2003 41 123 2005 46 2002 61 753 59 2005 46 2003 61 1500 59 125 126 2000 40 41 59 865 2007 40 704 2008 44 601 582 42 2009 44 2010 2011 41 59 2001 42 2012 40 41 123 792 2002 59 125 704 2013 40 41 123 792 2003 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 47, 'CountStmt': 25, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 40, 'CountStmtDecl': 14, 'MaxCyclomatic': 2, 'SumCyclomatic': 8, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 40, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 37, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99887,C++,"class GDALNullLayer final: public OGRLayer
{
    OGRFeatureDefn      *poFeatureDefn;
    OGRSpatialReference *poSRS;

  public:
                        GDALNullLayer( const char *pszLayerName,
                                      OGRSpatialReference *poSRS,
                                      OGRwkbGeometryType eType );
    virtual             ~GDALNullLayer();

    virtual OGRFeatureDefn *GetLayerDefn() override {return poFeatureDefn;}
    virtual OGRSpatialReference * GetSpatialRef() override { return poSRS; }

    virtual void        ResetReading() override {}
    virtual int         TestCapability( const char * ) override;

    virtual OGRFeature *GetNextFeature() override { return nullptr; }

    virtual OGRErr      ICreateFeature( OGRFeature * ) override { return OGRERR_NONE; }

    virtual OGRErr      CreateField( OGRFieldDefn *poField,
                                     int bApproxOK = TRUE ) override;
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2005 42 2006 59 777 58 2000 40 601 582 42 2007 44 2005 42 2006 44 2008 2009 41 59 864 126 2000 40 41 59 864 2003 42 2010 40 41 2011 123 792 2004 59 125 864 2005 42 2012 40 41 2011 123 792 2006 59 125 864 865 2013 40 41 2011 123 125 864 704 2014 40 601 582 42 41 2011 59 864 2015 42 2016 40 41 2011 123 792 753 59 125 864 2017 2018 40 2015 42 41 2011 123 792 2019 59 125 864 2017 2020 40 2021 42 2022 44 704 2023 61 2024 41 2011 59 125 59 ,"{'AvgLine': 4, 'CountLine': 58, 'CountStmt': 32, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 20, 'MaxEssential': 3, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 49, 'CountStmtDecl': 12, 'MaxCyclomatic': 3, 'SumCyclomatic': 13, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 49, 'CountLineCodeExe': 14, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 91, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 68, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99888,C++,"class GDALNullRasterBand final: public GDALRasterBand
{
    public:
            explicit GDALNullRasterBand(GDALDataType eDT);

            virtual CPLErr IReadBlock(int, int, void*) override;
            virtual CPLErr IWriteBlock(int, int, void*) override;
            virtual CPLErr IRasterIO( GDALRWFlag eRWFlag,
                                  int nXOff, int nYOff, int nXSize, int nYSize,
                                  void * pData, int nBufXSize, int nBufYSize,
                                  GDALDataType eBufType,
                                  GSpacing nPixelSpace, GSpacing nLineSpace,
                                  GDALRasterIOExtraArg* psExtraArg ) override;

};",0,587 2000 2001 58 777 2002 123 777 58 648 2000 40 2003 2004 41 59 864 2005 2006 40 704 44 704 44 865 42 41 2007 59 864 2005 2008 40 704 44 704 44 865 42 41 2007 59 864 2005 2009 40 2010 2011 44 704 2012 44 704 2013 44 704 2014 44 704 2015 44 865 42 2016 44 704 2017 44 704 2018 44 2003 2019 44 2020 2021 44 2020 2022 44 2023 42 2024 41 2007 59 125 59 ,"{'AvgLine': 13, 'CountLine': 67, 'CountStmt': 21, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 17, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 65, 'CountStmtDecl': 6, 'MaxCyclomatic': 5, 'SumCyclomatic': 8, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 65, 'CountLineCodeExe': 27, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 98, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99903,C++,"    class EDBFile
    {
    public:
        virtual ~EDBFile() {}
        virtual int Close() const = 0;

        virtual int GetWidth() const = 0;
        virtual int GetHeight() const = 0;
        virtual int GetChannels() const = 0;
        virtual int GetBlockWidth(int channel ) const = 0;
        virtual int GetBlockHeight(int channel ) const = 0;
        virtual eChanType GetType(int channel ) const = 0;
        virtual int ReadBlock(int channel,
            int block_index, void *buffer,
            int win_xoff=-1, int win_yoff=-1,
            int win_xsize=-1, int win_ysize=-1 ) = 0;
        virtual int WriteBlock( int channel, int block_index, void *buffer) = 0;
    };",0,587 2000 123 777 58 864 126 2000 40 41 123 125 864 704 2001 40 41 601 61 1500 59 864 704 2002 40 41 601 61 1500 59 864 704 2003 40 41 601 61 1500 59 864 704 2004 40 41 601 61 1500 59 864 704 2005 40 704 2006 41 601 61 1500 59 864 704 2007 40 704 2006 41 601 61 1500 59 864 2008 2009 40 704 2006 41 601 61 1500 59 864 704 2010 40 704 2006 44 704 2011 44 865 42 2012 44 704 2013 61 45 1501 44 704 2014 61 45 1501 44 704 2015 61 45 1501 44 704 2016 61 45 1501 41 61 1500 59 864 704 2017 40 704 2006 44 704 2011 44 865 42 2012 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 18, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 17, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99922,C++,"class VSIStdinFilesystemHandler final : public VSIFilesystemHandler
{
    CPL_DISALLOW_COPY_ASSIGN(VSIStdinFilesystemHandler)

  public:
    VSIStdinFilesystemHandler();
    ~VSIStdinFilesystemHandler() override;

    VSIVirtualHandle *Open( const char *pszFilename,
                            const char *pszAccess,
                            bool bSetError,
                            CSLConstList /* papszOptions */ ) override;
    int Stat( const char *pszFilename, VSIStatBufL *pStatBuf,
              int nFlags ) override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 777 58 2000 40 41 59 126 2000 40 41 2004 59 2005 42 2006 40 601 582 42 2007 44 601 582 42 2008 44 569 2009 44 2010 305 41 2004 59 704 2011 40 601 582 42 2007 44 2012 42 2013 44 704 2014 41 2004 59 125 59 ,"{'AvgLine': 17, 'CountLine': 85, 'CountStmt': 27, 'MaxNesting': 1, 'AvgLineCode': 15, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 23, 'MaxEssential': 4, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 73, 'CountStmtDecl': 4, 'MaxCyclomatic': 4, 'SumCyclomatic': 10, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 6, 'AltCountLineCode': 73, 'CountLineCodeExe': 31, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 32, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99914,C++,"class vsil_target : public kdu_compressed_target {

public:
    vsil_target() { file = nullptr; }
    ~vsil_target() { vsil_target::close(); }

    void open(const char *fname, const char *access )
        {
            close();
            file = VSIFOpenL( fname, access );
            if( file == nullptr )
            {
                kdu_error e;
                e << ""Unable to open compressed data file, \"""" <<
                    fname << ""\""!"";
                return;
            }
        }

    bool write(const kdu_byte *buf, int num_bytes) override
        {
            if( file == nullptr )
                return false;

            if( (int) VSIFWriteL( buf, 1, num_bytes, file ) != num_bytes )
                return false;
            else
                return true;
        }

    bool start_rewrite(kdu_long backtrack) override
        {
            if( file == nullptr )
                return false;

            if( VSIFSeekL( file, VSIFTellL(file)-backtrack, SEEK_SET ) != 0 )
                return false;
            else
                return true;
        }

    bool end_rewrite() override
        {
            if( file == nullptr )
                return false;

            if( VSIFSeekL( file, 0, SEEK_END ) != 0 )
                return false;
            else
                return true;
        }

    bool close() override
        {
            if (file != nullptr)
                VSIFCloseL( file );
            file = nullptr;
            return true;
        }

private: // Data
    VSILFILE *file;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 123 2002 61 753 59 125 126 2000 40 41 123 2000 321 2003 40 41 59 125 865 2004 40 601 582 42 2005 44 601 582 42 2006 41 123 2007 40 41 59 2008 61 2009 40 2005 44 2006 41 59 688 40 2008 323 753 41 123 2010 2011 59 2011 332 362 332 2005 332 362 59 792 59 125 125 569 2012 40 601 2013 42 2014 44 704 2015 41 2016 123 688 40 2017 323 753 41 792 655 59 688 40 40 704 41 2018 40 2014 44 1501 44 2015 44 2017 41 340 2015 41 792 655 59 630 792 829 59 125 569 2019 40 2020 2021 41 2016 123 688 40 2022 323 753 41 792 655 59 688 40 2023 40 2022 44 2024 40 2022 41 45 2021 44 2025 41 340 1500 41 792 655 59 630 792 829 59 125 569 2026 40 41 2016 123 688 40 2027 323 753 41 792 655 59 688 40 2028 40 2027 44 1500 44 2029 41 340 1500 41 792 655 59 630 792 829 59 125 569 2030 40 41 2016 123 688 40 2031 340 753 41 2032 40 2031 41 59 2031 61 753 59 792 829 59 125 773 58 330 2033 42 2034 59 125 59 ,"{'AvgLine': 7, 'CountLine': 63, 'CountStmt': 34, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 25, 'MaxEssential': 3, 'SumEssential': 13, 'AvgCyclomatic': 2, 'CountLineCode': 53, 'CountStmtDecl': 9, 'MaxCyclomatic': 3, 'SumCyclomatic': 15, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 53, 'CountLineCodeExe': 26, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 25, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99934,C++,"class WMSMiniDriver_OGCAPIMaps : public WMSMiniDriver {
public:
    WMSMiniDriver_OGCAPIMaps() = default;

public:
    virtual CPLErr Initialize(CPLXMLNode *config, char **papszOpenOptions) override;
    virtual CPLErr TiledImageRequest(WMSHTTPRequest &request,
                                     const GDALWMSImageRequestInfo &iri,
                                     const GDALWMSTiledImageRequestInfo &tiri) override;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 61 613 59 777 58 864 2002 2003 40 2004 42 2005 44 582 42 42 2006 41 2007 59 864 2002 2008 40 2009 38 2010 44 601 2011 38 2012 44 601 2013 38 2014 41 2007 59 125 59 ,"{'AvgLine': 17, 'CountLine': 44, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 38, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 3, 'AltCountLineCode': 38, 'CountLineCodeExe': 19, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99940,C++,"class OGCAPITilesWrapperBand final: public GDALRasterBand
{
  public:
                  OGCAPITilesWrapperBand(OGCAPIDataset* poDS, int nBand);

    virtual GDALRasterBand* GetOverview(int nLevel) override;
    virtual int GetOverviewCount() override;
    virtual GDALColorInterp GetColorInterpretation() override;

  protected:
    virtual CPLErr IReadBlock( int nBlockXOff, int nBlockYOff, void * pImage) override;
    virtual CPLErr IRasterIO( GDALRWFlag, int, int, int, int,
                              void *, int, int, GDALDataType,
                              GSpacing, GSpacing,
                              GDALRasterIOExtraArg* psExtraArg ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 2004 44 704 2005 41 59 864 2002 42 2006 40 704 2007 41 2008 59 864 704 2009 40 41 2008 59 864 2010 2011 40 41 2008 59 775 58 864 2012 2013 40 704 2014 44 704 2015 44 865 42 2016 41 2008 59 864 2012 2017 40 2018 44 704 44 704 44 704 44 704 44 865 42 44 704 44 704 44 2019 44 2020 44 2020 44 2021 42 2022 41 2008 59 125 59 ,"{'AvgLine': 9, 'CountLine': 75, 'CountStmt': 27, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 15, 'MaxEssential': 3, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 71, 'CountStmtDecl': 13, 'MaxCyclomatic': 3, 'SumCyclomatic': 9, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 71, 'CountLineCodeExe': 31, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 25, 'CountLineInactive': 0, 'CountDeclMethodAll': 100, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99939,C++,"class OGCAPITiledLayerFeatureDefn final: public OGRFeatureDefn
{
        OGCAPITiledLayer* m_poLayer = nullptr;
    public:
        OGCAPITiledLayerFeatureDefn(OGCAPITiledLayer* poLayer, const char* pszName):
            OGRFeatureDefn(pszName), m_poLayer(poLayer) {}
        int GetFieldCount() const override;
        void InvalidateLayer() { m_poLayer = nullptr; }
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 61 753 59 777 58 2000 40 2003 42 2005 44 601 582 42 2006 41 58 2002 40 2006 41 44 2004 40 2005 41 123 125 704 2007 40 41 601 2008 59 865 2009 40 41 123 2004 61 753 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 17, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 17, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 42, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 62, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99955,C++,"class RasdamanRasterBand final: public GDALPamRasterBand
{
  friend class RasdamanDataset;

  int          nRecordSize;
  int          typeOffset;
  int          typeSize;

public:

  RasdamanRasterBand( RasdamanDataset *, int, GDALDataType type, int offset, int size, int nBlockXSize, int nBlockYSize );
  ~RasdamanRasterBand();

  virtual CPLErr IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 704 2004 59 704 2005 59 704 2006 59 777 58 2000 40 2003 42 44 704 44 2007 2008 44 704 2009 44 704 2010 44 704 2011 44 704 2012 41 59 126 2000 40 41 59 864 2013 2014 40 704 44 704 44 865 42 41 2015 59 125 59 ,"{'AvgLine': 22, 'CountLine': 83, 'CountStmt': 44, 'MaxNesting': 2, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 21, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 3, 'CountLineCode': 65, 'CountStmtDecl': 27, 'MaxCyclomatic': 7, 'SumCyclomatic': 9, 'AltAvgLineCode': 18, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 65, 'CountLineCodeExe': 25, 'CountLineComment': 3, 'AltAvgLineComment': 1, 'AltCountLineBlank': 17, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 25, 'CountLineInactive': 0, 'CountDeclMethodAll': 131, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99959,C++,"class digital_axis
{
 public:
    digital_axis() : m_eStyle(LEV_DA_PIXEL_SIZED), m_fixedEnd(0)
    {
        m_d[0] = 0.0;
        m_d[1] = 0.0;
    }

    bool get(LevellerDataset& ds, VSILFILE* fp, int n)
    {
        char szTag[32];
        snprintf(szTag, sizeof(szTag), ""coordsys_da%d_style"", n);
        if(!ds.get(m_eStyle, fp, szTag))
            return false;
        snprintf(szTag, sizeof(szTag), ""coordsys_da%d_fixedend"", n);
        if(!ds.get(m_fixedEnd, fp, szTag))
            return false;
        snprintf(szTag, sizeof(szTag), ""coordsys_da%d_v0"", n);
        if(!ds.get(m_d[0], fp, szTag))
            return false;
        snprintf(szTag, sizeof(szTag), ""coordsys_da%d_v1"", n);
        if(!ds.get(m_d[1], fp, szTag))
            return false;
        return true;
    }

    double origin(size_t pixels) const
    {
        if(m_fixedEnd == 1)
        {
            switch(m_eStyle)
            {
            case LEV_DA_SIZED:
                return m_d[1] + m_d[0];

            case LEV_DA_PIXEL_SIZED:
                return m_d[1] + (m_d[0] * (pixels-1));
            }
        }
        return m_d[0];
    }

    double scaling(size_t pixels) const
    {
        CPLAssert(pixels > 1);
        if(m_eStyle == LEV_DA_PIXEL_SIZED)
            return m_d[1 - m_fixedEnd];

        return this->length(static_cast<int>(pixels)) / (pixels - 1);
    }

    double length(int pixels) const
    {
        // Return the signed length of the axis.

        switch(m_eStyle)
        {
        case LEV_DA_POSITIONED:
            return m_d[1] - m_d[0];

        case LEV_DA_SIZED:
            return m_d[1 - m_fixedEnd];

        case LEV_DA_PIXEL_SIZED:
            return m_d[1 - m_fixedEnd] * (pixels-1);
        }
        CPLAssert(false);
        return 0.0;
    }

 protected:
    int m_eStyle;
    size_t m_fixedEnd;
    double m_d[2];
};",0,587 2000 123 777 58 2000 40 41 58 2001 40 2002 41 44 2003 40 1500 41 123 2004 91 1500 93 61 1500 59 2004 91 1501 93 61 1500 59 125 569 2005 40 2006 38 2007 44 2008 42 2009 44 704 2010 41 123 582 2011 91 1503 93 59 2012 40 2011 44 805 40 2011 41 44 362 44 2010 41 59 688 40 33 2007 46 2005 40 2001 44 2009 44 2011 41 41 792 655 59 2012 40 2011 44 805 40 2011 41 44 362 44 2010 41 59 688 40 33 2007 46 2005 40 2003 44 2009 44 2011 41 41 792 655 59 2012 40 2011 44 805 40 2011 41 44 362 44 2010 41 59 688 40 33 2007 46 2005 40 2013 91 1500 93 44 2009 44 2011 41 41 792 655 59 2012 40 2011 44 805 40 2011 41 44 362 44 2010 41 59 688 40 33 2007 46 2005 40 2013 91 1501 93 44 2009 44 2011 41 41 792 655 59 792 829 59 125 625 2014 40 2015 2016 41 601 123 688 40 2003 323 1501 41 123 819 40 2001 41 123 579 2017 58 792 2018 91 1501 93 43 2018 91 1500 93 59 579 2002 58 792 2018 91 1501 93 43 40 2018 91 1500 93 42 40 2016 45 1501 41 41 59 125 125 792 2019 91 1500 93 59 125 625 2020 40 2015 2016 41 601 123 2021 40 2016 62 1501 41 59 688 40 2001 323 2002 41 792 2022 91 1501 45 2003 93 59 792 823 354 2023 40 811 60 704 62 40 2016 41 41 47 40 2016 45 1501 41 59 125 625 2024 40 704 2016 41 601 123 330 819 40 2001 41 123 579 2025 58 792 2026 91 1501 93 45 2026 91 1500 93 59 579 2027 58 792 2026 91 1501 45 2003 93 59 579 2002 58 792 2026 91 1501 45 2003 93 42 40 2016 45 1501 41 59 125 2028 40 655 41 59 792 1500 59 125 775 58 704 2001 59 2015 2003 59 625 2029 91 1502 93 59 125 59 ,"{'AvgLine': 12, 'CountLine': 76, 'CountStmt': 46, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 2, 'AvgLineBlank': 1, 'CountStmtExe': 33, 'MaxEssential': 5, 'SumEssential': 12, 'AvgCyclomatic': 3, 'CountLineCode': 65, 'CountStmtDecl': 11, 'MaxCyclomatic': 5, 'SumCyclomatic': 16, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 10, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 65, 'CountLineCodeExe': 35, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 28, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 3}"
99964,C++,"class KmlSuperOverlayRasterBand final: public GDALRasterBand
{
    public:
                    KmlSuperOverlayRasterBand( KmlSuperOverlayReadDataset* poDS,
                                               int nBand );
  protected:

    virtual CPLErr IReadBlock( int, int, void * ) override;
    virtual CPLErr IRasterIO( GDALRWFlag, int, int, int, int,
                              void *, int, int, GDALDataType,
                              GSpacing nPixelSpace, GSpacing nLineSpace,
                              GDALRasterIOExtraArg* psExtraArg) override;
    virtual GDALColorInterp GetColorInterpretation() override;

    virtual int GetOverviewCount() override;
    virtual GDALRasterBand *GetOverview(int) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 2004 44 704 2005 41 59 775 58 864 2006 2007 40 704 44 704 44 865 42 41 2008 59 864 2006 2009 40 2010 44 704 44 704 44 704 44 704 44 865 42 44 704 44 704 44 2011 44 2012 2013 44 2012 2014 44 2015 42 2016 41 2008 59 864 2017 2018 40 41 2008 59 864 704 2019 40 41 2008 59 864 2002 42 2020 40 704 41 2008 59 125 59 ,"{'AvgLine': 11, 'CountLine': 86, 'CountStmt': 36, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 78, 'CountStmtDecl': 14, 'MaxCyclomatic': 4, 'SumCyclomatic': 10, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 78, 'CountLineCodeExe': 37, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 100, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 5, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99995,C++,"class GDALEXRRasterBand final: public GDALPamRasterBand
{
        friend class GDALEXRDataset;

        GDALColorInterp m_eInterp = GCI_Undefined;
        std::string m_osChannelName;

    protected:
        CPLErr IReadBlock(int, int, void*) override;

    public:
        GDALEXRRasterBand(GDALEXRDataset* poDSIn, int nBandIn,
                          const std::string& channelName,
                          PixelType pixelType,
                          int nBlockXSizeIn, int nBlockYSizeIn);

        GDALColorInterp GetColorInterpretation() override { return m_eInterp; }
        int GetOverviewCount() override;
        GDALRasterBand* GetOverview(int) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 2005 61 2006 59 2007 321 2008 2009 59 775 58 2010 2011 40 704 44 704 44 865 42 41 2012 59 777 58 2000 40 2003 42 2013 44 704 2014 44 601 2007 321 2008 38 2015 44 2016 2017 44 704 2018 44 704 2019 41 59 2004 2020 40 41 2012 123 792 2005 59 125 704 2021 40 41 2012 59 2022 42 2023 40 704 41 2012 59 125 59 ,"{'AvgLine': 15, 'CountLine': 94, 'CountStmt': 35, 'MaxNesting': 1, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 19, 'MaxEssential': 3, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 88, 'CountStmtDecl': 15, 'MaxCyclomatic': 5, 'SumCyclomatic': 10, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 88, 'CountLineCodeExe': 25, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 18, 'CountLineInactive': 0, 'CountDeclMethodAll': 133, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100031,C++,"class FileGDBOrIterator final : public FileGDBIterator
{
        FileGDBIterator             *poIter1;
        FileGDBIterator             *poIter2;
        int                          bIteratorAreExclusive;
        int                          iNextRow1;
        int                          iNextRow2;
        bool                         bHasJustReset;

    public:
                                     FileGDBOrIterator(FileGDBIterator* poIter1,
                                                       FileGDBIterator* poIter2,
                                                       int bIteratorAreExclusive = FALSE);
        virtual                     ~FileGDBOrIterator();

        virtual FileGDBTable        *GetTable() override { return poIter1->GetTable(); }
        virtual void                 Reset() override;
        virtual int                  GetNextRowSortedByFID() override;
        virtual int                  GetRowCount() override;
};",0,587 2000 2001 58 777 2002 123 2002 42 2003 59 2002 42 2004 59 704 2005 59 704 2006 59 704 2007 59 569 2008 59 777 58 2000 40 2002 42 2003 44 2002 42 2004 44 704 2005 61 2009 41 59 864 126 2000 40 41 59 864 2010 42 2011 40 41 2012 123 792 2003 354 2011 40 41 59 125 864 865 2013 40 41 2012 59 864 704 2014 40 41 2012 59 864 704 2015 40 41 2012 59 125 59 ,"{'AvgLine': 11, 'CountLine': 88, 'CountStmt': 52, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 29, 'MaxEssential': 4, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 83, 'CountStmtDecl': 22, 'MaxCyclomatic': 6, 'SumCyclomatic': 12, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 83, 'CountLineCodeExe': 39, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 52, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 6, 'CountDeclInstanceVariableProtected': 0}"
100034,C++,"class CPL_DLL CPLJobQueue
{
        CPL_DISALLOW_COPY_ASSIGN(CPLJobQueue)
        CPLWorkerThreadPool* m_poPool = nullptr;
        std::mutex m_mutex{};
        std::condition_variable m_cv{};
        int m_nPendingJobs = 0;

        static void JobQueueFunction(void*);
        void DeclareJobFinished();

//! @cond Doxygen_Suppress
protected:
        friend class CPLWorkerThreadPool;
        explicit CPLJobQueue(CPLWorkerThreadPool* poPool);
//! @endcond

public:
        ~CPLJobQueue();

        /** Return the owning worker thread pool */
        CPLWorkerThreadPool* GetPool() { return m_poPool; }

        bool SubmitJob(CPLThreadFunc pfnFunc, void* pData);
        void WaitCompletion(int nMaxRemainingJobs = 0);
};",0,587 2000 2001 123 2002 40 2001 41 2003 42 2004 61 753 59 2005 321 2006 2007 123 125 59 2005 321 2008 2009 123 125 59 704 2010 61 1500 59 809 865 2011 40 865 42 41 59 865 2012 40 41 59 330 775 58 667 587 2003 59 648 2001 40 2003 42 2013 41 59 330 777 58 126 2001 40 41 59 306 2003 42 2014 40 41 123 792 2004 59 125 569 2015 40 2016 2017 44 865 42 2018 41 59 865 2019 40 704 2020 61 1500 41 59 125 59 ,"{'AvgLine': 6, 'CountLine': 69, 'CountStmt': 34, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 21, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 61, 'CountStmtDecl': 18, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 61, 'CountLineCodeExe': 23, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 69, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
100043,C++,"    template <class VClass, nc_type ntype> class OGR_SGFS_NC_Transaction_Generic : public OGR_SGFS_Transaction
    {
        VClass rep;

        public:
            void commit(netCDFVID& n, size_t write_loc) override
            {
                n.nc_put_vvar_generic<VClass>(OGR_SGFS_Transaction::getVarId(), &write_loc, &rep);
            }

            unsigned long long count() override { return sizeof(*this); }
            void appendToLog(VSILFILE* f) override
            {
                genericLogAppend<VClass, ntype>(rep, OGR_SGFS_Transaction::getVarId(), f);
            }

            OGR_SGFS_NC_Transaction_Generic(int i_varId, VClass in) :
               rep(in)
            {
                OGR_SGFS_Transaction::setVarId(i_varId);
            }

            VClass getData()
            {
                return rep;
            }

            nc_type getType() override { return ntype; }
    };",0,822 60 587 2000 44 2001 2002 62 587 2003 58 777 2004 123 2000 2005 59 777 58 865 2006 40 2007 38 2008 44 2009 2010 41 2011 123 2008 46 2012 60 2000 62 40 2004 321 2013 40 41 44 38 2010 44 38 2005 41 59 125 856 726 726 2014 40 41 2011 123 792 805 40 42 823 41 59 125 865 2015 40 2016 42 2017 41 2011 123 2018 60 2000 44 2002 62 40 2005 44 2004 321 2019 40 41 44 2017 41 59 125 2003 40 704 2020 44 2000 2021 41 58 2005 40 2021 41 123 2004 321 2022 40 2020 41 59 125 2000 2023 40 41 123 792 2005 59 125 2001 2024 40 41 2011 123 792 2002 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 29, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 24, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100042,C++,"class PThreadMutex : public PCIDSK::Mutex

{
private:
    pthread_mutex_t *hMutex;

    PThreadMutex(const PThreadMutex&) = delete;
    PThreadMutex& operator=(const PThreadMutex&) = delete;

public:
    PThreadMutex();
    ~PThreadMutex();

    int Acquire(void) override;
    int Release(void) override;
};",0,587 2000 58 777 2001 321 2002 123 773 58 2003 42 2004 59 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 777 58 2000 40 41 59 126 2000 40 41 59 704 2005 40 865 41 2006 59 704 2007 40 865 41 2006 59 125 59 ,"{'AvgLine': 9, 'CountLine': 52, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 32, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 43, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 7, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 5, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100050,C++,"class GDALWarpCoordRescaler: public OGRCoordinateTransformation
{
    double m_dfRatioX;
    double m_dfRatioY;

public:
    GDALWarpCoordRescaler(double dfRatioX, double dfRatioY) :
        m_dfRatioX(dfRatioX), m_dfRatioY(dfRatioY) {}

    virtual ~GDALWarpCoordRescaler() {}

    virtual OGRSpatialReference *GetSourceCS() override { return nullptr; }

    virtual OGRSpatialReference *GetTargetCS() override { return nullptr; }


    virtual int Transform( int nCount, double *x, double *y,
                           double * /*z*/, double * /*t*/,
                           int *pabSuccess ) override
    {
        for( int i = 0; i < nCount; i++ )
        {
            x[i] *= m_dfRatioX;
            y[i] *= m_dfRatioY;
            if( pabSuccess )
                pabSuccess[i] = TRUE;
        }
        return TRUE;
    }

    virtual OGRCoordinateTransformation* Clone() const override {
        return new GDALWarpCoordRescaler(*this); }

    virtual OGRCoordinateTransformation* GetInverse() const override { return nullptr; }
};",0,587 2000 58 777 2001 123 625 2002 59 625 2003 59 777 58 2000 40 625 2004 44 625 2005 41 58 2002 40 2004 41 44 2003 40 2005 41 123 125 864 126 2000 40 41 123 125 864 2006 42 2007 40 41 2008 123 792 753 59 125 864 2006 42 2009 40 41 2008 123 792 753 59 125 864 704 2010 40 704 2011 44 625 42 2012 44 625 42 2013 44 625 42 305 44 625 42 305 44 704 42 2014 41 2008 123 664 40 704 2015 61 1500 59 2015 60 2011 59 2015 349 41 123 2012 91 2015 93 363 2002 59 2013 91 2015 93 363 2003 59 688 40 2014 41 2014 91 2015 93 61 2016 59 125 792 2017 59 125 864 2001 42 2018 40 41 601 2008 123 792 744 2000 40 42 823 41 59 125 864 2001 42 2019 40 41 601 2008 123 792 753 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 35, 'CountStmt': 22, 'MaxNesting': 2, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 27, 'CountStmtDecl': 12, 'MaxCyclomatic': 3, 'SumCyclomatic': 9, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 27, 'CountLineCodeExe': 10, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100054,C++,"class HDF4AbstractAttribute: public GDALAttribute
{
    std::shared_ptr<HDF4SharedResources> m_poShared;
    std::vector<std::shared_ptr<GDALDimension>> m_dims{};
    GDALExtendedDataType m_dt = GDALExtendedDataType::Create(GDT_Unknown);
    int32 m_nValues = 0;

protected:

    bool IRead(const GUInt64* arrayStartIdx,
                      const size_t* count,
                      const GInt64* arrayStep,
                      const GPtrDiff_t* bufferStride,
                      const GDALExtendedDataType& bufferDataType,
                      void* pDstBuffer) const override;

public:
    HDF4AbstractAttribute(const std::string& osParentName,
                  const std::string& osName,
                  const std::shared_ptr<HDF4SharedResources>& poShared,
                  int32 iNumType,
                  int32 nValues);

    const std::vector<std::shared_ptr<GDALDimension>>& GetDimensions() const override { return m_dims; }

    const GDALExtendedDataType &GetDataType() const override { return m_dt; }

    virtual void ReadData(void* pDstBuffer) const = 0;
};",0,587 2000 58 777 2001 123 2002 321 2003 60 2004 62 2005 59 2002 321 2006 60 2002 321 2003 60 2007 355 2008 123 125 59 2009 2010 61 2009 321 2011 40 2012 41 59 2013 2014 61 1500 59 775 58 569 2015 40 601 2016 42 2017 44 601 2018 42 2019 44 601 2020 42 2021 44 601 2022 42 2023 44 601 2009 38 2024 44 865 42 2025 41 601 2026 59 777 58 2000 40 601 2002 321 2027 38 2028 44 601 2002 321 2027 38 2029 44 601 2002 321 2003 60 2004 62 38 2030 44 2013 2031 44 2013 2032 41 59 601 2002 321 2006 60 2002 321 2003 60 2007 355 38 2033 40 41 601 2026 123 792 2008 59 125 601 2009 38 2034 40 41 601 2026 123 792 2010 59 125 864 865 2035 40 865 42 2025 41 601 61 1500 59 125 59 ,"{'AvgLine': 14, 'CountLine': 85, 'CountStmt': 25, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 4, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 77, 'CountStmtDecl': 15, 'MaxCyclomatic': 4, 'SumCyclomatic': 8, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 77, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 4, 'CountClassDerived': 4, 'CountLineCodeDecl': 18, 'CountLineInactive': 0, 'CountDeclMethodAll': 37, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100055,C++,"class HDF4EOSGridArray final: public GDALPamMDArray
{
    std::shared_ptr<HDF4SharedResources> m_poShared;
    std::shared_ptr<HDF4GDHandle> m_poGDHandle;
    std::vector<std::shared_ptr<GDALDimension>> m_dims{};
    GDALExtendedDataType m_dt = GDALExtendedDataType::Create(GDT_Unknown);
    mutable std::vector<GByte> m_abyNoData{};
    mutable std::string m_osUnit{};

protected:
    HDF4EOSGridArray(const std::string& osParentName,
                   const std::string& osName,
                   const std::shared_ptr<HDF4SharedResources>& poShared,
                   const std::shared_ptr<HDF4GDHandle>& poGDHandle,
                   const std::vector<int32>& aiDimSizes,
                   const std::string& dimNames,
                   int32 iNumType,
                   const std::vector<std::shared_ptr<GDALDimension>>& groupDims);
    bool IRead(const GUInt64* arrayStartIdx,
                      const size_t* count,
                      const GInt64* arrayStep,
                      const GPtrDiff_t* bufferStride,
                      const GDALExtendedDataType& bufferDataType,
                      void* pDstBuffer) const override;

public:
    static std::shared_ptr<HDF4EOSGridArray> Create(const std::string& osParentName,
                   const std::string& osName,
                   const std::shared_ptr<HDF4SharedResources>& poShared,
                   const std::shared_ptr<HDF4GDHandle>& poGDHandle,
                   const std::vector<int32>& aiDimSizes,
                   const std::string& dimNames,
                   int32 iNumType,
                   const std::vector<std::shared_ptr<GDALDimension>>& groupDims)
    {
        auto ar(std::shared_ptr<HDF4EOSGridArray>(new HDF4EOSGridArray(
            osParentName, osName, poShared,
            poGDHandle, aiDimSizes, dimNames,
            iNumType, groupDims)));
        ar->SetSelf(ar);
        return ar;
    }

    bool IsWritable() const override { return false; }

    const std::string& GetFilename() const override { return m_poShared->GetFilename(); }

    const std::vector<std::shared_ptr<GDALDimension>>& GetDimensions() const override { return m_dims; }

    const GDALExtendedDataType &GetDataType() const override { return m_dt; }

    std::vector<std::shared_ptr<GDALAttribute>> GetAttributes(CSLConstList papszOptions = nullptr) const override;

    const void* GetRawNoDataValue() const override;

    double GetOffset(bool* pbHasOffset = nullptr, GDALDataType* peStorageType = nullptr) const override;

    double GetScale(bool* pbHasScale = nullptr, GDALDataType* peStorageType = nullptr) const override;

    const std::string& GetUnit() const override;

    std::shared_ptr<OGRSpatialReference> GetSpatialRef() const override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 2003 321 2004 60 2007 62 2008 59 2003 321 2009 60 2003 321 2004 60 2010 355 2011 123 125 59 2012 2013 61 2012 321 2014 40 2015 41 59 740 2003 321 2009 60 2016 62 2017 123 125 59 740 2003 321 2018 2019 123 125 59 775 58 2000 40 601 2003 321 2018 38 2020 44 601 2003 321 2018 38 2021 44 601 2003 321 2004 60 2005 62 38 2022 44 601 2003 321 2004 60 2007 62 38 2023 44 601 2003 321 2009 60 2024 62 38 2025 44 601 2003 321 2018 38 2026 44 2024 2027 44 601 2003 321 2009 60 2003 321 2004 60 2010 355 38 2028 41 59 569 2029 40 601 2030 42 2031 44 601 2032 42 2033 44 601 2034 42 2035 44 601 2036 42 2037 44 601 2012 38 2038 44 865 42 2039 41 601 2040 59 777 58 809 2003 321 2004 60 2000 62 2014 40 601 2003 321 2018 38 2020 44 601 2003 321 2018 38 2021 44 601 2003 321 2004 60 2005 62 38 2022 44 601 2003 321 2004 60 2007 62 38 2023 44 601 2003 321 2009 60 2024 62 38 2025 44 601 2003 321 2018 38 2026 44 2024 2027 44 601 2003 321 2009 60 2003 321 2004 60 2010 355 38 2028 41 123 561 2041 40 2003 321 2004 60 2000 62 40 744 2000 40 2020 44 2021 44 2022 44 2023 44 2025 44 2026 44 2027 44 2028 41 41 41 59 2041 354 2042 40 2041 41 59 792 2041 59 125 569 2043 40 41 601 2040 123 792 655 59 125 601 2003 321 2018 38 2044 40 41 601 2040 123 792 2006 354 2044 40 41 59 125 601 2003 321 2009 60 2003 321 2004 60 2010 355 38 2045 40 41 601 2040 123 792 2011 59 125 601 2012 38 2046 40 41 601 2040 123 792 2013 59 125 2003 321 2009 60 2003 321 2004 60 2047 355 2048 40 2049 2050 61 753 41 601 2040 59 601 865 42 2051 40 41 601 2040 59 625 2052 40 569 42 2053 61 753 44 2054 42 2055 61 753 41 601 2040 59 625 2056 40 569 42 2057 61 753 44 2054 42 2055 61 753 41 601 2040 59 601 2003 321 2018 38 2058 40 41 601 2040 59 2003 321 2004 60 2059 62 2060 40 41 601 2040 59 125 59 ,"{'AvgLine': 15, 'CountLine': 242, 'CountStmt': 66, 'MaxNesting': 3, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 226, 'CountStmtDecl': 48, 'MaxCyclomatic': 4, 'SumCyclomatic': 25, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 13, 'AltCountLineCode': 226, 'CountLineCodeExe': 21, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 57, 'CountLineInactive': 0, 'CountDeclMethodAll': 88, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 26, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 11, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 99, 'SumCyclomaticModified': 25, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 18, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100058,C++,"class HDF4EOSGridSubGroup final: public GDALGroup
{
    std::shared_ptr<HDF4SharedResources> m_poShared;
    std::shared_ptr<HDF4GDHandle> m_poGDHandle;
    int32 m_entryType;
    std::vector<std::shared_ptr<GDALDimension>> m_groupDims{};

public:
    HDF4EOSGridSubGroup(const std::string& osParentName,
              const std::string& osName,
              const std::shared_ptr<HDF4SharedResources>& poShared,
              const std::shared_ptr<HDF4GDHandle>& poGDHandle,
              int32 entryType,
              const std::vector<std::shared_ptr<GDALDimension>>& groupDims):
        GDALGroup(osParentName, osName),
        m_poShared(poShared),
        m_poGDHandle(poGDHandle),
        m_entryType(entryType),
        m_groupDims(groupDims)
    {
    }

    std::vector<std::string> GetMDArrayNames(CSLConstList papszOptions) const override;
    std::shared_ptr<GDALMDArray> OpenMDArray(const std::string& osName,
                                             CSLConstList papszOptions) const override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 2003 321 2004 60 2007 62 2008 59 2009 2010 59 2003 321 2011 60 2003 321 2004 60 2012 355 2013 123 125 59 777 58 2000 40 601 2003 321 2014 38 2015 44 601 2003 321 2014 38 2016 44 601 2003 321 2004 60 2005 62 38 2017 44 601 2003 321 2004 60 2007 62 38 2018 44 2009 2019 44 601 2003 321 2011 60 2003 321 2004 60 2012 355 38 2020 41 58 2002 40 2015 44 2016 41 44 2006 40 2017 41 44 2008 40 2018 41 44 2010 40 2019 41 44 2013 40 2020 41 123 125 2003 321 2011 60 2003 321 2014 62 2021 40 2022 2023 41 601 2024 59 2003 321 2004 60 2025 62 2026 40 601 2003 321 2014 38 2016 44 2022 2023 41 601 2024 59 125 59 ,"{'AvgLine': 21, 'CountLine': 76, 'CountStmt': 27, 'MaxNesting': 1, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 67, 'CountStmtDecl': 21, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 18, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 2, 'CountDeclMethod': 3, 'AltCountLineCode': 67, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 31, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100061,C++,"class HDF4GRAttribute final: public HDF4AbstractAttribute
{
    std::shared_ptr<HDF4GRsHandle> m_poGRsHandle;
    std::shared_ptr<HDF4GRHandle> m_poGRHandle;
    int32 m_grHandle = 0;
    int32 m_iAttribute = 0;

public:
    HDF4GRAttribute(const std::string& osParentName,
                  const std::string& osName,
                  const std::shared_ptr<HDF4SharedResources>& poShared,
                  const std::shared_ptr<HDF4GRsHandle>& poGRsHandle,
                  const std::shared_ptr<HDF4GRHandle>& poGRHandle,
                  int32 iGRHandle,
                  int32 iAttribute,
                  int32 iNumType,
                  int32 nValues):
        GDALAbstractMDArray(osParentName, osName),
        HDF4AbstractAttribute(osParentName, osName, poShared, iNumType, nValues),
        m_poGRsHandle(poGRsHandle),
        m_poGRHandle(poGRHandle),
        m_grHandle(iGRHandle),
        m_iAttribute(iAttribute)
    {}

    void ReadData(void* pDstBuffer) const override {
        GRgetattr( m_grHandle, m_iAttribute, pDstBuffer);
    }
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 2003 321 2004 60 2007 62 2008 59 2009 2010 61 1500 59 2009 2011 61 1500 59 777 58 2000 40 601 2003 321 2012 38 2013 44 601 2003 321 2012 38 2014 44 601 2003 321 2004 60 2015 62 38 2016 44 601 2003 321 2004 60 2005 62 38 2017 44 601 2003 321 2004 60 2007 62 38 2018 44 2009 2019 44 2009 2020 44 2009 2021 44 2009 2022 41 58 2023 40 2013 44 2014 41 44 2002 40 2013 44 2014 44 2016 44 2021 44 2022 41 44 2006 40 2017 41 44 2008 40 2018 41 44 2010 40 2019 41 44 2011 40 2020 41 123 125 865 2024 40 865 42 2025 41 601 2026 123 2027 40 2010 44 2011 44 2025 41 59 125 125 59 ,"{'AvgLine': 9, 'CountLine': 29, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 27, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 27, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100070,C++,"class HDF4SwathAttribute final: public HDF4AbstractAttribute
{
    std::shared_ptr<HDF4SwathHandle> m_poSwathHandle;

public:
    HDF4SwathAttribute(const std::string& osParentName,
                  const std::string& osName,
                  const std::shared_ptr<HDF4SharedResources>& poShared,
                  const std::shared_ptr<HDF4SwathHandle>& poSwathHandle,
                  int32 iNumType,
                  int32 nValues):
        GDALAbstractMDArray(osParentName, osName),
        HDF4AbstractAttribute(osParentName, osName, poShared, iNumType, nValues),
        m_poSwathHandle(poSwathHandle)
    {}

    void ReadData(void* pDstBuffer) const override {
        SWreadattr( m_poSwathHandle->m_handle, GetName().c_str(), pDstBuffer);
    }
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 777 58 2000 40 601 2003 321 2007 38 2008 44 601 2003 321 2007 38 2009 44 601 2003 321 2004 60 2010 62 38 2011 44 601 2003 321 2004 60 2005 62 38 2012 44 2013 2014 44 2013 2015 41 58 2016 40 2008 44 2009 41 44 2002 40 2008 44 2009 44 2011 44 2014 44 2015 41 44 2006 40 2012 41 123 125 865 2017 40 865 42 2018 41 601 2019 123 2020 40 2006 354 2021 44 2022 40 41 46 2023 40 41 44 2018 41 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 20, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 18, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100089,C++,"class BAGGeorefMDSuperGridBand final: public BAGGeorefMDBandBase
{
public:
    BAGGeorefMDSuperGridBand( const std::shared_ptr<GDALMDArray>& poValues,
                              const std::shared_ptr<GDALMDArray>& poKeys,
                              GDALRasterBand* poElevBand );

    CPLErr          IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 601 2003 321 2004 60 2005 62 38 2006 44 601 2003 321 2004 60 2005 62 38 2007 44 2008 42 2009 41 59 2010 2011 40 704 44 704 44 865 42 41 2012 59 125 59 ,"{'AvgLine': 23, 'CountLine': 56, 'CountStmt': 18, 'MaxNesting': 2, 'AvgLineCode': 23, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 3, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 54, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 23, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 54, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 134, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100080,C++,"class OGRPGMemLayerWrapper final: public OGRLayer
{
  private:
      OGRPGMemLayerWrapper(const OGRPGMemLayerWrapper&) = delete;
      OGRPGMemLayerWrapper& operator= (const OGRPGMemLayerWrapper&) = delete;

      GDALDataset    *poMemDS = nullptr;
      OGRLayer       *poMemLayer = nullptr;

  public:
                        explicit OGRPGMemLayerWrapper( GDALDataset  *poMemDSIn )
                        {
                            poMemDS = poMemDSIn;
                            poMemLayer = poMemDS->GetLayer(0);
                        }

                        virtual ~OGRPGMemLayerWrapper() { delete poMemDS; }

    virtual void        ResetReading() override { poMemLayer->ResetReading(); }
    virtual OGRFeature *GetNextFeature() override { return poMemLayer->GetNextFeature(); }
    virtual OGRFeatureDefn *GetLayerDefn() override { return poMemLayer->GetLayerDefn(); }
    virtual int         TestCapability( const char * ) override { return FALSE; }
};",0,587 2000 2001 58 777 2002 123 773 58 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 2003 42 2004 61 753 59 2002 42 2005 61 753 59 777 58 648 2000 40 2003 42 2006 41 123 2004 61 2006 59 2005 61 2004 354 2007 40 1500 41 59 125 864 126 2000 40 41 123 619 2004 59 125 864 865 2008 40 41 2009 123 2005 354 2008 40 41 59 125 864 2010 42 2011 40 41 2009 123 792 2005 354 2011 40 41 59 125 864 2012 42 2013 40 41 2009 123 792 2005 354 2013 40 41 59 125 864 704 2014 40 601 582 42 41 2009 123 792 2015 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 23, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 19, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 90, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 62, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100087,C++,"class BAGGeorefMDBand final: public BAGGeorefMDBandBase
{
public:
    BAGGeorefMDBand( const std::shared_ptr<GDALMDArray>& poValues,
                     const std::shared_ptr<GDALMDArray>& poKeys,
                     GDALRasterBand* poElevBand );

    CPLErr          IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 601 2003 321 2004 60 2005 62 38 2006 44 601 2003 321 2004 60 2005 62 38 2007 44 2008 42 2009 41 59 2010 2011 40 704 44 704 44 865 42 41 2012 59 125 59 ,"{'AvgLine': 46, 'CountLine': 101, 'CountStmt': 39, 'MaxNesting': 3, 'AvgLineCode': 42, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 30, 'MaxEssential': 3, 'SumEssential': 4, 'AvgCyclomatic': 5, 'CountLineCode': 93, 'CountStmtDecl': 14, 'MaxCyclomatic': 6, 'SumCyclomatic': 11, 'AltAvgLineCode': 42, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 2, 'CountDeclMethod': 2, 'AltCountLineCode': 93, 'CountLineCodeExe': 66, 'CountLineComment': 2, 'AltAvgLineComment': 1, 'AltCountLineBlank': 6, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 134, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 6, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 5, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100105,C++,"class L1CSafeCompatGranuleDescription
{
public:
    CPLString osMTDTLPath; // GRANULE/L1C_T30TXT_A007999_20170102T111441/MTD_TL.xml
    CPLString osBandPrefixPath; // GRANULE/L1C_T30TXT_A007999_20170102T111441/IMG_DATA/T30TXT_20170102T111442_
};",0,587 2000 123 777 58 2001 2002 59 330 2001 2003 59 330 125 59 ,"{'AvgLine': 0, 'CountLine': 6, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.33', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100092,C++,"class BAGSuperGridBand final: public BAGBaseBand
{
    friend class BAGDataset;

public:
    BAGSuperGridBand( BAGDataset *, int, bool bHasNoData, float fNoDataValue);
    virtual ~BAGSuperGridBand();

    CPLErr          IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 2000 40 2003 42 44 704 44 569 2004 44 660 2005 41 59 864 126 2000 40 41 59 2006 2007 40 704 44 704 44 865 42 41 2008 59 125 59 ,"{'AvgLine': 36, 'CountLine': 82, 'CountStmt': 32, 'MaxNesting': 1, 'AvgLineCode': 33, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 20, 'MaxEssential': 4, 'SumEssential': 5, 'AvgCyclomatic': 3, 'CountLineCode': 75, 'CountStmtDecl': 12, 'MaxCyclomatic': 4, 'SumCyclomatic': 6, 'AltAvgLineCode': 33, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 3, 'AltCountLineCode': 75, 'CountLineCodeExe': 21, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 102, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100101,C++,"class DDSRasterBandAllDecoded final: public GDALPamRasterBand
{
protected:
        CPLErr          IReadBlock(int, int, void*) override;
        GDALColorInterp GetColorInterpretation() override {
            return static_cast<GDALColorInterp>(GCI_RedBand + nBand - 1); }

public:
                        DDSRasterBandAllDecoded(DDSDatasetAllDecoded* poDS, int nBand);
};",0,587 2000 2001 58 777 2002 123 775 58 2003 2004 40 704 44 704 44 865 42 41 2005 59 2006 2007 40 41 2005 123 792 811 60 2006 62 40 2008 43 2009 45 1501 41 59 125 777 58 2000 40 2010 42 2011 44 704 2012 41 59 125 59 ,"{'AvgLine': 7, 'CountLine': 31, 'CountStmt': 15, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 30, 'CountStmtDecl': 7, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 30, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 131, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100108,C++,"class SENTINEL2DatasetContainer final: public GDALPamDataset
{
    public:
        SENTINEL2DatasetContainer() {}
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 5, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 5, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 5, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 187, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100115,C++,"class GDALDefaultAsyncReader : public GDALAsyncReader
{
  private:
    char **papszOptions = nullptr;

    CPL_DISALLOW_COPY_ASSIGN(GDALDefaultAsyncReader)

  public:
    GDALDefaultAsyncReader(GDALDataset* poDS,
                             int nXOff, int nYOff,
                             int nXSize, int nYSize,
                             void *pBuf,
                             int nBufXSize, int nBufYSize,
                             GDALDataType eBufType,
                             int nBandCount, int* panBandMap,
                             int nPixelSpace, int nLineSpace,
                             int nBandSpace, char **papszOptions);
    ~GDALDefaultAsyncReader() override;

    GDALAsyncStatusType GetNextUpdatedRegion(double dfTimeout,
                                             int* pnBufXOff,
                                             int* pnBufYOff,
                                             int* pnBufXSize,
                                             int* pnBufYSize) override;
};",0,587 2000 58 777 2001 123 773 58 582 42 42 2002 61 753 59 2003 40 2000 41 777 58 2000 40 2004 42 2005 44 704 2006 44 704 2007 44 704 2008 44 704 2009 44 865 42 2010 44 704 2011 44 704 2012 44 2013 2014 44 704 2015 44 704 42 2016 44 704 2017 44 704 2018 44 704 2019 44 582 42 42 2002 41 59 126 2000 40 41 2020 59 2021 2022 40 625 2023 44 704 42 2024 44 704 42 2025 44 704 42 2026 44 704 42 2027 41 2020 59 125 59 ,"{'AvgLine': 23, 'CountLine': 94, 'CountStmt': 35, 'MaxNesting': 2, 'AvgLineCode': 20, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 31, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 83, 'CountStmtDecl': 6, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 20, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 83, 'CountLineCodeExe': 38, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 18, 'CountLineInactive': 0, 'CountDeclMethodAll': 26, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100127,C++,"class OGRFlatGeobufEditableLayer final: public OGREditableLayer, public OGRFlatGeobufBaseLayerInterface
{
    public:
        OGRFlatGeobufEditableLayer(OGRFlatGeobufLayer *poFlatGeobufLayer, char **papszOpenOptions);

        virtual GIntBig     GetFeatureCount( int bForce = TRUE ) override;

        const std::string&  GetFilename() const override {
            return static_cast<OGRFlatGeobufLayer *>(m_poDecoratedLayer)->GetFilename();
        }
        OGRLayer* GetLayer() override { return this; }
};",0,587 2000 2001 58 777 2002 44 777 2003 123 777 58 2000 40 2004 42 2005 44 582 42 42 2006 41 59 864 2007 2008 40 704 2009 61 2010 41 2011 59 601 2012 321 2013 38 2014 40 41 601 2011 123 792 811 60 2004 42 62 40 2015 41 354 2014 40 41 59 125 2016 42 2017 40 41 2011 123 792 823 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 33, 'CountStmt': 8, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 31, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 174, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100153,C++,"class OGROSMComputedAttribute
{
    public:
        CPLString    osName;
        int          nIndex;
        OGRFieldType eType;
        CPLString    osSQL;
        sqlite3_stmt  *hStmt;
        std::vector<CPLString> aosAttrToBind;
        std::vector<int> anIndexToBind;
        bool         bHardcodedZOrder;

        OGROSMComputedAttribute() : nIndex(-1), eType(OFTString), hStmt(nullptr), bHardcodedZOrder(false) {}
        explicit OGROSMComputedAttribute(const char* pszName) :
                osName(pszName), nIndex(-1), eType(OFTString), hStmt(nullptr), bHardcodedZOrder(false) {}
};",0,587 2000 123 777 58 2001 2002 59 704 2003 59 2004 2005 59 2001 2006 59 2007 42 2008 59 2009 321 2010 60 2001 62 2011 59 2009 321 2010 60 704 62 2012 59 569 2013 59 2000 40 41 58 2003 40 45 1501 41 44 2005 40 2014 41 44 2008 40 753 41 44 2013 40 655 41 123 125 648 2000 40 601 582 42 2015 41 58 2002 40 2015 41 44 2003 40 45 1501 41 44 2005 40 2014 41 44 2008 40 753 41 44 2013 40 655 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 16, 'CountStmt': 22, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 18, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 15, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 25, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 8, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100118,C++,"class VSIGZipWriteHandle final : public VSIVirtualHandle
{
    CPL_DISALLOW_COPY_ASSIGN(VSIGZipWriteHandle)

    VSIVirtualHandle*  m_poBaseHandle = nullptr;
    z_stream           sStream;
    Byte              *pabyInBuf = nullptr;
    Byte              *pabyOutBuf = nullptr;
    bool               bCompressActive = false;
    vsi_l_offset       nCurOffset = 0;
    uLong              nCRC = 0;
    int                nDeflateType = CPL_DEFLATE_TYPE_GZIP;
    bool               bAutoCloseBaseHandle = false;

  public:
    VSIGZipWriteHandle( VSIVirtualHandle* poBaseHandle, int nDeflateType,
                        bool bAutoCloseBaseHandleIn );

    ~VSIGZipWriteHandle() override;

    int Seek( vsi_l_offset nOffset, int nWhence ) override;
    vsi_l_offset Tell() override;
    size_t Read( void *pBuffer, size_t nSize, size_t nMemb ) override;
    size_t Write( const void *pBuffer, size_t nSize, size_t nMemb ) override;
    int Eof() override;
    int Flush() override;
    int Close() override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 2002 42 2004 61 753 59 2005 2006 59 2007 42 2008 61 753 59 2007 42 2009 61 753 59 569 2010 61 655 59 2011 2012 61 1500 59 2013 2014 61 1500 59 704 2015 61 2016 59 569 2017 61 655 59 777 58 2000 40 2002 42 2018 44 704 2015 44 569 2019 41 59 126 2000 40 41 2020 59 704 2021 40 2011 2022 44 704 2023 41 2020 59 2011 2024 40 41 2020 59 2025 2026 40 865 42 2027 44 2025 2028 44 2025 2029 41 2020 59 2025 2030 40 601 865 42 2027 44 2025 2028 44 2025 2029 41 2020 59 704 2031 40 41 2020 59 704 2032 40 41 2020 59 704 2033 40 41 2020 59 125 59 ,"{'AvgLine': 22, 'CountLine': 230, 'CountStmt': 101, 'MaxNesting': 3, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 71, 'MaxEssential': 5, 'SumEssential': 15, 'AvgCyclomatic': 3, 'CountLineCode': 189, 'CountStmtDecl': 34, 'MaxCyclomatic': 7, 'SumCyclomatic': 27, 'AltAvgLineCode': 18, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 39, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 11, 'AltCountLineCode': 189, 'CountLineCodeExe': 102, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 39, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 36, 'CountLineInactive': 0, 'CountDeclMethodAll': 23, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 31, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 27, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 9, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 9, 'CountDeclInstanceVariableProtected': 0}"
100125,C++,"    template <class VClass, nc_type ntype> class netCDFVGeneralAttribute : public netCDFVAttribute
    {
        std::string name;
        VClass value;

        public:
            netCDFVGeneralAttribute<VClass, ntype>(const char* a_name, const VClass* a_value) :
                name(a_name),
                value(*a_value)
            {}

            void vsync(int realncid, int realvarid) override
            {
                if(nc_put_att(realncid, realvarid, name.c_str(), ntype, 1, &value) != NC_NOERR)
                {
                    throw SG_Exception_VWrite_Failure(""variable"", ""attribute"");
                }
            }
    };",0,822 60 587 2000 44 2001 2002 62 587 2003 58 777 2004 123 2005 321 2006 2007 59 2000 2008 59 777 58 2003 60 2000 44 2002 62 40 601 582 42 2009 44 601 2000 42 2010 41 58 2007 40 2009 41 44 2008 40 42 2010 41 123 125 865 2011 40 704 2012 44 704 2013 41 2014 123 688 40 2015 40 2012 44 2013 44 2007 46 2016 40 41 44 2002 44 1501 44 38 2008 41 340 2017 41 123 825 2018 40 362 44 362 41 59 125 125 125 59 ,"{'AvgLine': 5, 'CountLine': 19, 'CountStmt': 8, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 17, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100143,C++,"class PointerAutoFree
{
        void * m_p;
    public:
        explicit PointerAutoFree(void* p) { m_p = p; }
        ~PointerAutoFree() { CPLFree(m_p); }
};",0,587 2000 123 865 42 2001 59 777 58 648 2000 40 865 42 2002 41 123 2001 61 2002 59 125 126 2000 40 41 123 2003 40 2001 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 7, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 7, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100216,C++,"class CADDimensionRadiusObject CPL_NON_FINAL: public CADDimensionObject
{
public:
    explicit CADDimensionRadiusObject(ObjectType typeIn = DIMENSION_RADIUS);
    virtual ~CADDimensionRadiusObject(){}

    CADVector vert15pt;
    double    dfLeaderLen;
};",0,587 2000 2001 58 777 2002 123 777 58 648 2000 40 2003 2004 61 2005 41 59 864 126 2000 40 41 123 125 2006 2007 59 625 2008 59 125 59 ,"{'AvgLine': 3, 'CountLine': 14, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 13, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100149,C++,"class GDALOctaveLayer
{
    CPL_DISALLOW_COPY_ASSIGN(GDALOctaveLayer)

public:
    GDALOctaveLayer();

    /**
     * Create instance with provided parameters.
     *
     * @param nOctave Number of octave which contains this layer
     * @param nInterval Number of position in octave
     *
     * @note Normally constructor is invoked only by SURF-based algorithm.
     */
    GDALOctaveLayer(int nOctave, int nInterval);
    virtual ~GDALOctaveLayer();

    /**
     * Perform calculation of Hessian determinants and their signs
     * for specified integral image. Result is stored internally.
     *
     * @param poImg Integral image object, which provides all necessary
     * data for computation
     *
     * @note Normally method is invoked only by SURF-based algorithm.
     */
    void ComputeLayer(GDALIntegralImage *poImg);

    /**
     * Octave which contains this layer (1,2,3...)
     */
    int octaveNum;
    /**
     * Length of the side of filter
     */
    int filterSize;
    /**
     * Length of the border
     */
    int radius;
    /**
     * Scale for this layer
     */
    int scale;
    /**
     * Image width in pixels
     */
    int width;
    /**
     * Image height in pixels
     */
    int height;
    /**
     * Hessian values for image pixels
     */
    double **detHessians;
    /**
     * Hessian signs for speeded matching
     */
    int **signs;
};",0,587 2000 123 2001 40 2000 41 777 58 2000 40 41 59 306 2000 40 704 2002 44 704 2003 41 59 864 126 2000 40 41 59 306 865 2004 40 2005 42 2006 41 59 306 704 2007 59 306 704 2008 59 306 704 2009 59 306 704 2010 59 306 704 2011 59 306 704 2012 59 306 625 42 42 2013 59 306 704 42 42 2014 59 125 59 ,"{'AvgLine': 24, 'CountLine': 134, 'CountStmt': 49, 'MaxNesting': 2, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 32, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 73, 'CountStmtDecl': 28, 'MaxCyclomatic': 5, 'SumCyclomatic': 8, 'AltAvgLineCode': 18, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 6, 'AltCountLineCode': 73, 'CountLineCodeExe': 42, 'CountLineComment': 48, 'AltAvgLineComment': 2, 'AltCountLineBlank': 13, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.66', 'AltCountLineComment': 48, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 64, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 8, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100217,C++,"class CADEllipseObject final: public CADEntityObject
{
public:
    CADEllipseObject();
    virtual ~CADEllipseObject(){}

    CADVector vertPosition;
    CADVector vectSMAxis;
    CADVector vectExtrusion;
    double    dfAxisRatio;
    double    dfBegAngle;
    double    dfEndAngle;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 59 2003 2005 59 2003 2006 59 625 2007 59 625 2008 59 625 2009 59 125 59 ,"{'AvgLine': 4, 'CountLine': 20, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 19, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100152,C++,"class ConstCharComp
{
    public:
        bool operator()(const char* a, const char* b) const
        {
            return strcmp(a, b) < 0;
        }
};",0,587 2000 123 777 58 569 758 40 41 40 601 582 42 2001 44 601 582 42 2002 41 601 123 792 2003 40 2001 44 2002 41 60 1500 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 8, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 8, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100150,C++,"class GDALOverviewBand final: public GDALProxyRasterBand
{
  protected:
    friend class GDALOverviewDataset;

    GDALRasterBand*         poUnderlyingBand = nullptr;
    GDALRasterBand* RefUnderlyingRasterBand() override;

    CPLErr IRasterIO( GDALRWFlag, int, int, int, int,
                      void *, int, int, GDALDataType,
                      GSpacing, GSpacing,
                      GDALRasterIOExtraArg* psExtraArg ) override;

  public:
    GDALOverviewBand( GDALOverviewDataset* poDS, int nBand );
    ~GDALOverviewBand() override;

    CPLErr FlushCache(bool bAtClosing) override;

    int GetOverviewCount() override;
    GDALRasterBand *GetOverview( int ) override;

    int GetMaskFlags() override;
    GDALRasterBand* GetMaskBand() override;

  private:
    CPL_DISALLOW_COPY_ASSIGN(GDALOverviewBand)
};",0,587 2000 2001 58 777 2002 123 775 58 667 587 2003 59 2004 42 2005 61 753 59 2004 42 2006 40 41 2007 59 2008 2009 40 2010 44 704 44 704 44 704 44 704 44 865 42 44 704 44 704 44 2011 44 2012 44 2012 44 2013 42 2014 41 2007 59 777 58 2000 40 2003 42 2015 44 704 2016 41 59 126 2000 40 41 2007 59 2008 2017 40 569 2018 41 2007 59 704 2019 40 41 2007 59 2004 42 2020 40 704 41 2007 59 704 2021 40 41 2007 59 2004 42 2022 40 41 2007 59 773 58 2023 40 2000 41 125 59 ,"{'AvgLine': 12, 'CountLine': 144, 'CountStmt': 61, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 43, 'MaxEssential': 3, 'SumEssential': 11, 'AvgCyclomatic': 2, 'CountLineCode': 134, 'CountStmtDecl': 24, 'MaxCyclomatic': 6, 'SumCyclomatic': 25, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 134, 'CountLineCodeExe': 65, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 41, 'CountLineInactive': 0, 'CountDeclMethodAll': 156, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 28, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 54, 'SumCyclomaticModified': 25, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
100164,C++,"    class CPL_DLL Bands
    {
      private:

        friend class GDALDataset;
        GDALDataset* m_poSelf;
        CPL_INTERNAL explicit Bands(GDALDataset* poSelf): m_poSelf(poSelf) {}

        class CPL_DLL Iterator
        {
                struct Private;
                std::unique_ptr<Private> m_poPrivate;
            public:
                Iterator(GDALDataset* poDS, bool bStart);
                Iterator(const Iterator& oOther); // declared but not defined. Needed for gcc 5.4 at least
                Iterator(Iterator&& oOther) noexcept; // declared but not defined. Needed for gcc 5.4 at least
                ~Iterator();
                GDALRasterBand* operator*();
                Iterator& operator++();
                bool operator!=(const Iterator& it) const;
        };

      public:

        const Iterator begin() const;

        const Iterator end() const;

        size_t size() const;

        GDALRasterBand* operator[](int iBand);
        GDALRasterBand* operator[](size_t iBand);
    };",0,587 2000 2001 123 773 58 667 587 2002 59 2002 42 2003 59 2004 648 2001 40 2002 42 2005 41 58 2003 40 2005 41 123 125 587 2000 2006 123 816 2007 59 2008 321 2009 60 2007 62 2010 59 777 58 2006 40 2002 42 2011 44 569 2012 41 59 2006 40 601 2006 38 2013 41 59 330 2006 40 2006 307 2013 41 748 59 330 126 2006 40 41 59 2014 42 758 42 40 41 59 2006 38 758 349 40 41 59 569 758 340 40 601 2006 38 2015 41 601 59 125 59 777 58 601 2006 2016 40 41 601 59 601 2006 2017 40 41 601 59 2018 2019 40 41 601 59 2020 42 758 91 93 40 704 2021 41 59 2020 42 758 91 93 40 2018 2021 41 59 125 59 ,"{'AvgLine': 3, 'CountLine': 53, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 46, 'CountLineCodeExe': 6, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 128, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100165,C++,"        class CPL_DLL Iterator
        {
                struct Private;
                std::unique_ptr<Private> m_poPrivate;
            public:
                Iterator(GDALDataset* poDS, bool bStart);
                Iterator(const Iterator& oOther); // declared but not defined. Needed for gcc 5.4 at least
                Iterator(Iterator&& oOther) noexcept; // declared but not defined. Needed for gcc 5.4 at least
                ~Iterator();
                GDALRasterBand* operator*();
                Iterator& operator++();
                bool operator!=(const Iterator& it) const;
        };",0,587 2000 2001 123 816 2002 59 2003 321 2004 60 2002 62 2005 59 777 58 2001 40 2006 42 2007 44 569 2008 41 59 2001 40 601 2001 38 2009 41 59 330 2001 40 2001 307 2009 41 748 59 330 126 2001 40 41 59 2010 42 758 42 40 41 59 2001 38 758 349 40 41 59 569 758 340 40 601 2001 38 2011 41 601 59 125 59 ,"{'AvgLine': 9, 'CountLine': 57, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 57, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 57, 'CountLineCodeExe': 4, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100169,C++,"    class CPL_DLL Layers
    {
      private:

        friend class GDALDataset;
        GDALDataset* m_poSelf;
        CPL_INTERNAL explicit Layers(GDALDataset* poSelf): m_poSelf(poSelf) {}

      public:

        /** Layer iterator.
         * @since GDAL 2.3
         */
        class CPL_DLL Iterator
        {
                struct Private;
                std::unique_ptr<Private> m_poPrivate;
            public:

                using value_type = OGRLayer*; /**< value_type */
                using reference = OGRLayer*; /**< reference */
                using difference_type = void; /**< difference_type */
                using pointer = void; /**< pointer */
                using iterator_category = std::input_iterator_tag; /**< iterator_category */

                Iterator(); /**< Default constructor */
                Iterator(GDALDataset* poDS, bool bStart);  /**< Constructor */
                Iterator(const Iterator& oOther);  /**< Copy constructor */
                Iterator(Iterator&& oOther) noexcept;  /**< Move constructor */
                ~Iterator(); /**< Destructor */

                Iterator& operator=(const Iterator& oOther);  /**< Assignment operator */
                Iterator& operator=(Iterator&& oOther) noexcept; /**< Move assignment operator */

                OGRLayer* operator*() const; /**< Dereference operator */
                Iterator& operator++(); /**< Pre-increment operator */
                Iterator operator++(int); /**< Post-increment operator */
                bool operator!=(const Iterator& it) const; /**< Difference comparison operator */
        };

        Iterator begin() const;
        Iterator end() const;

        size_t size() const;

        OGRLayer* operator[](int iLayer);
        OGRLayer* operator[](size_t iLayer);
        OGRLayer* operator[](const char* pszLayername);
    };",0,587 2000 2001 123 773 58 667 587 2002 59 2002 42 2003 59 2004 648 2001 40 2002 42 2005 41 58 2003 40 2005 41 123 125 777 58 306 587 2000 2006 123 816 2007 59 2008 321 2009 60 2007 62 2010 59 777 58 860 2011 61 2012 42 59 306 860 2013 61 2012 42 59 306 860 2014 61 865 59 306 860 2015 61 865 59 306 860 2016 61 2008 321 2017 59 306 2006 40 41 59 306 2006 40 2002 42 2018 44 569 2019 41 59 306 2006 40 601 2006 38 2020 41 59 306 2006 40 2006 307 2020 41 748 59 306 126 2006 40 41 59 306 2006 38 758 61 40 601 2006 38 2020 41 59 306 2006 38 758 61 40 2006 307 2020 41 748 59 306 2012 42 758 42 40 41 601 59 306 2006 38 758 349 40 41 59 306 2006 758 349 40 704 41 59 306 569 758 340 40 601 2006 38 2021 41 601 59 306 125 59 2006 2022 40 41 601 59 2006 2023 40 41 601 59 2024 2025 40 41 601 59 2026 42 758 91 93 40 704 2027 41 59 2026 42 758 91 93 40 2024 2027 41 59 2026 42 758 91 93 40 601 582 42 2028 41 59 125 59 ,"{'AvgLine': 3, 'CountLine': 73, 'CountStmt': 17, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 60, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 60, 'CountLineCodeExe': 7, 'CountLineComment': 19, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.32', 'AltCountLineComment': 19, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 128, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100173,C++,"class GFSTemplateItem
{
  private:
    char            *m_pszName;
    int             n_nItemCount;
    int             n_nGeomCount;
    GFSTemplateItem *pNext;

  public:
    explicit        GFSTemplateItem( const char *pszName );
                    ~GFSTemplateItem();
    const char      *GetName() { return m_pszName; }
    void            Update( int b_has_geom );
    int             GetCount() { return n_nItemCount; }
    int             GetGeomCount() { return n_nGeomCount; }
    void            SetNext( GFSTemplateItem *pN ) { pNext = pN; }
    GFSTemplateItem *GetNext() { return pNext; }
};",0,587 2000 123 773 58 582 42 2001 59 704 2002 59 704 2003 59 2000 42 2004 59 777 58 648 2000 40 601 582 42 2005 41 59 126 2000 40 41 59 601 582 42 2006 40 41 123 792 2001 59 125 865 2007 40 704 2008 41 59 704 2009 40 41 123 792 2002 59 125 704 2010 40 41 123 792 2003 59 125 865 2011 40 2000 42 2012 41 123 2004 61 2012 59 125 2000 42 2013 40 41 123 792 2004 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 34, 'CountStmt': 25, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 15, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 33, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
100171,C++,"class GFFRasterBand final: public GDALPamRasterBand {
    long nRasterBandMemory;
    int nSampleSize;
  public:
    GFFRasterBand( GFFDataset *, int, GDALDataType );
    CPLErr IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 726 2003 59 704 2004 59 777 58 2000 40 2005 42 44 704 44 2006 41 59 2007 2008 40 704 44 704 44 865 42 41 2009 59 125 59 ,"{'AvgLine': 19, 'CountLine': 45, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 29, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 15, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 2, 'AltCountLineCode': 38, 'CountLineCodeExe': 13, 'CountLineComment': 2, 'AltAvgLineComment': 1, 'AltCountLineBlank': 6, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 7, 'CountDeclMethodAll': 130, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100175,C++,"class CEOSRasterBand final: public GDALPamRasterBand
{
    friend class CEOSDataset;

  public:
    CEOSRasterBand( CEOSDataset *, int );

    CPLErr IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 2000 40 2003 42 44 704 41 59 2004 2005 40 704 44 704 44 865 42 41 2006 59 125 59 ,"{'AvgLine': 10, 'CountLine': 30, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 23, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 2, 'CountDeclMethod': 2, 'AltCountLineCode': 23, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 130, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100183,C++,"class MMultiPointSetter
{
        OGRMultiPoint* poMPoint;
    public:
        explicit MMultiPointSetter(OGRMultiPoint* poMPointIn) :
                                                    poMPoint(poMPointIn) {}

        void set(int i, double dfM)
        {
            poMPoint->getGeometryRef(i)->setM(dfM);
        }
};",0,587 2000 123 2001 42 2002 59 777 58 648 2000 40 2001 42 2003 41 58 2002 40 2003 41 123 125 865 2004 40 704 2005 44 625 2006 41 123 2002 354 2007 40 2005 41 354 2008 40 2006 41 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 12, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 11, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100182,C++,"class MLineStringSetter
{
        OGRLineString* poLS;
    public:
        explicit MLineStringSetter(OGRLineString* poLSIn) : poLS(poLSIn) {}

        void set(int i, double dfM)
        {
            poLS->setM(i, dfM);
        }
};",0,587 2000 123 2001 42 2002 59 777 58 648 2000 40 2001 42 2003 41 58 2002 40 2003 41 123 125 865 2004 40 704 2005 44 625 2006 41 123 2002 354 2007 40 2005 44 2006 41 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 11, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 10, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100211,C++,"class CADDimensionAngular3PtObject CPL_NON_FINAL: public CADDimensionObject
{
public:
    explicit CADDimensionAngular3PtObject(ObjectType typeIn = DIMENSION_ANG_3PT);
    virtual ~CADDimensionAngular3PtObject(){}
    CADVector vert13pt, vert14pt;
    CADVector vert15pt;
};",0,587 2000 2001 58 777 2002 123 777 58 648 2000 40 2003 2004 61 2005 41 59 864 126 2000 40 41 123 125 2006 2007 44 2008 59 2006 2009 59 125 59 ,"{'AvgLine': 2, 'CountLine': 12, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 12, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100223,C++,"class CADInsertObject final: public CADEntityObject
{
public:
    explicit CADInsertObject( ObjectType typeIn = INSERT );
    virtual ~CADInsertObject(){}
    CADVector vertInsertionPoint;
    CADVector vertScales;
    double    dfRotation;
    CADVector vectExtrusion;
    bool      bHasAttribs;
    long      nObjectsOwned;

    CADHandle      hBlockHeader;
    CADHandleArray hAttribs;
    CADHandle      hSeqend; // if bHasAttribs == true
};",0,587 2000 2001 58 777 2002 123 777 58 648 2000 40 2003 2004 61 2005 41 59 864 126 2000 40 41 123 125 2006 2007 59 2006 2008 59 625 2009 59 2006 2010 59 569 2011 59 726 2012 59 2013 2014 59 2015 2016 59 2013 2017 59 330 125 59 ,"{'AvgLine': 4, 'CountLine': 23, 'CountStmt': 20, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 22, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 22, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 9, 'CountDeclInstanceVariablePublic': 9, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100227,C++,"class CADLineObject final: public CADEntityObject
{
public:
    CADLineObject();
    virtual ~CADLineObject(){}
    CADVector vertStart;
    CADVector vertEnd;
    double    dfThickness;
    CADVector vectExtrusion;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 59 2003 2005 59 625 2006 59 2003 2007 59 125 59 ,"{'AvgLine': 3, 'CountLine': 15, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 15, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100233,C++,"class CADPointObject final: public CADEntityObject
{
public:
    CADPointObject();
    virtual ~CADPointObject(){}

    CADVector vertPosition;
    double    dfThickness;
    CADVector vectExtrusion;
    double    dfXAxisAng;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 59 625 2005 59 2003 2006 59 625 2007 59 125 59 ,"{'AvgLine': 3, 'CountLine': 17, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 16, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 16, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100252,C++,"template<class T> class GMLASUniquePtr
{
        T* m_p;

        GMLASUniquePtr(const GMLASUniquePtr&);
        GMLASUniquePtr& operator=(const GMLASUniquePtr&);

    public:
        explicit GMLASUniquePtr(T* p): m_p(p) {}
       ~GMLASUniquePtr() { delete m_p; }

       T* operator->() const { CPLAssert(m_p); return m_p; }

       T* get () const { return m_p; }
       T* release() { T* ret = m_p; m_p = NULL; return ret; }
};",0,822 60 587 2000 62 587 2001 123 2000 42 2002 59 2001 40 601 2001 38 41 59 2001 38 758 61 40 601 2001 38 41 59 777 58 648 2001 40 2000 42 2003 41 58 2002 40 2003 41 123 125 126 2001 40 41 123 619 2002 59 125 2000 42 758 354 40 41 601 123 2004 40 2002 41 59 792 2002 59 125 2000 42 2005 40 41 601 123 792 2002 59 125 2000 42 2006 40 41 123 2000 42 2007 61 2002 59 2002 61 2008 59 792 2007 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 16, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 12, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 28, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100249,C++,"    class PCIDSK_DLL PCIDSK_LUT
    {
    public:
        virtual ~PCIDSK_LUT() {}

/**
\brief Read a LUT Segment (SEG_LUT).

@param lut      Lookup Table buffer (256 entries) into which the
lookup table is read. It consists of grey output values (lut[0-255].

*/
        virtual void ReadLUT(std::vector<unsigned char>& lut) = 0;

/**
\brief Write a LUT Segment.

@param lut      Lookup Table buffer (256 entries) from which the
lookup table is written. It consists of grey output values (lut[0-255].

*/
        virtual void WriteLUT(const std::vector<unsigned char>& lut) = 0;
    };",0,587 2000 2001 123 777 58 864 126 2001 40 41 123 125 306 864 865 2002 40 2003 321 2004 60 856 582 62 38 2005 41 61 1500 59 306 864 865 2006 40 601 2003 321 2004 60 856 582 62 38 2005 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 23, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 14, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '2.00', 'AltCountLineComment': 14, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100263,C++,"class VSIStdoutRedirectFilesystemHandler final : public VSIFilesystemHandler
{
  public:
    VSIVirtualHandle *Open( const char *pszFilename,
                            const char *pszAccess,
                            bool bSetError,
                            CSLConstList /* papszOptions */ ) override;
    int Stat( const char *pszFilename, VSIStatBufL *pStatBuf,
              int nFlags ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2003 42 2004 40 601 582 42 2005 44 601 582 42 2006 44 569 2007 44 2008 305 41 2009 59 704 2010 40 601 582 42 2005 44 2011 42 2012 44 704 2013 41 2009 59 125 59 ,"{'AvgLine': 15, 'CountLine': 40, 'CountStmt': 11, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 9, 'MaxEssential': 3, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 36, 'CountStmtDecl': 3, 'MaxCyclomatic': 3, 'SumCyclomatic': 4, 'AltAvgLineCode': 13, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 2, 'AltCountLineCode': 36, 'CountLineCodeExe': 12, 'CountLineComment': 5, 'AltAvgLineComment': 2, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 28, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100261,C++,"class VSIStdoutFilesystemHandler final : public VSIFilesystemHandler
{
    CPL_DISALLOW_COPY_ASSIGN(VSIStdoutFilesystemHandler)

  public:
    VSIStdoutFilesystemHandler() = default;

    VSIVirtualHandle *Open( const char *pszFilename,
                            const char *pszAccess,
                            bool bSetError,
                            CSLConstList /* papszOptions */ ) override;
    int Stat( const char *pszFilename, VSIStatBufL *pStatBuf,
              int nFlags ) override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 777 58 2000 40 41 61 613 59 2004 42 2005 40 601 582 42 2006 44 601 582 42 2007 44 569 2008 44 2009 305 41 2010 59 704 2011 40 601 582 42 2006 44 2012 42 2013 44 704 2014 41 2010 59 125 59 ,"{'AvgLine': 15, 'CountLine': 43, 'CountStmt': 8, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 2, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 13, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 37, 'CountLineCodeExe': 8, 'CountLineComment': 6, 'AltAvgLineComment': 2, 'AltCountLineBlank': 6, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 2, 'CountDeclMethodAll': 31, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.18', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100257,C++,"class ELASRasterBand final: public GDALPamRasterBand
{
    friend class ELASDataset;

  public:
    ELASRasterBand( ELASDataset *, int );

    // should override RasterIO eventually.

    CPLErr IReadBlock( int, int, void * ) override;
    CPLErr IWriteBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 2000 40 2003 42 44 704 41 59 330 2004 2005 40 704 44 704 44 865 42 41 2006 59 2004 2007 40 704 44 704 44 865 42 41 2006 59 125 59 ,"{'AvgLine': 21, 'CountLine': 75, 'CountStmt': 26, 'MaxNesting': 1, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 16, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 54, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 15, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 54, 'CountLineCodeExe': 26, 'CountLineComment': 6, 'AltAvgLineComment': 1, 'AltCountLineBlank': 15, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 131, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100272,C++,"class OGRVDV452Table
{
    public:
        CPLString osEnglishName;
        CPLString osGermanName;
        std::vector<OGRVDV452Field> aosFields;
};",0,587 2000 123 777 58 2001 2002 59 2001 2003 59 2004 321 2005 60 2006 62 2007 59 125 59 ,"{'AvgLine': 0, 'CountLine': 7, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100267,C++,"template <typename LevelIterator>
class RangeIterator
{
public:
    RangeIterator( const LevelIterator& parent, int idx ) : parent_( parent ), idx_( idx ) {}
    // Warning: this is a ""pseudo"" iterator, since operator* returns a value, not
    // a reference. This means we cannot have operator->
    std::pair<int, double> operator*() const
    {
        return std::make_pair( idx_, parent_.level( idx_ ) );
    }
    bool operator!=( const RangeIterator& other ) const
    {
        return idx_ != other.idx_;
    }
    const RangeIterator& operator++()
    {
        idx_++;
        return *this;
    }
private:
    const LevelIterator& parent_;
    int idx_;
};",0,822 60 835 2000 62 587 2001 123 777 58 2001 40 601 2000 38 2002 44 704 2003 41 58 2004 40 2002 41 44 2005 40 2003 41 123 125 330 330 2006 321 2007 60 704 44 625 62 758 42 40 41 601 123 792 2006 321 2008 40 2005 44 2004 46 2009 40 2005 41 41 59 125 569 758 340 40 601 2001 38 2010 41 601 123 792 2005 340 2010 46 2005 59 125 601 2001 38 758 349 40 41 123 2005 349 59 792 42 823 59 125 773 58 601 2000 38 2004 59 704 2005 59 125 59 ,"{'AvgLine': 3, 'CountLine': 23, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 21, 'CountLineCodeExe': 5, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 25, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100286,C++,"class L1BNOAA15AnglesDataset final: public GDALDataset
{
    friend class L1BNOAA15AnglesRasterBand;

    L1BDataset* poL1BDS;

    public:
       explicit L1BNOAA15AnglesDataset(L1BDataset* poMainDS);
       virtual ~L1BNOAA15AnglesDataset();

       static GDALDataset* CreateAnglesDS(L1BDataset* poL1BDS);
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 42 2005 59 777 58 648 2000 40 2004 42 2006 41 59 864 126 2000 40 41 59 809 2002 42 2007 40 2004 42 2005 41 59 125 59 ,"{'AvgLine': 6, 'CountLine': 31, 'CountStmt': 13, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 8, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 28, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 145, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 2, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100287,C++,"class L1BNOAA15AnglesRasterBand final: public GDALRasterBand
{
    public:
            L1BNOAA15AnglesRasterBand(L1BNOAA15AnglesDataset* poDS, int nBand);

            virtual CPLErr IReadBlock(int, int, void*) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 2004 44 704 2005 41 59 864 2006 2007 40 704 44 704 44 865 42 41 2008 59 125 59 ,"{'AvgLine': 28, 'CountLine': 63, 'CountStmt': 31, 'MaxNesting': 2, 'AvgLineCode': 22, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 28, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 3, 'CountLineCode': 51, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 7, 'AltAvgLineCode': 22, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 2, 'AltCountLineCode': 51, 'CountLineCodeExe': 50, 'CountLineComment': 3, 'AltAvgLineComment': 1, 'AltCountLineBlank': 9, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 96, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100279,C++,"class MerisL2FlagBand final: public GDALPamRasterBand
{
  public:
    MerisL2FlagBand( GDALDataset *, int, VSILFILE*, vsi_l_offset, int );
    ~MerisL2FlagBand() override;
    virtual CPLErr IReadBlock( int, int, void * ) override;

  private:
    vsi_l_offset nImgOffset;
    int nPrefixBytes;
    size_t nBytePerPixel;
    size_t nRecordSize;
    size_t nDataSize;
    GByte *pReadBuf;
    VSILFILE *fpImage;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 704 44 2004 42 44 2005 44 704 41 59 126 2000 40 41 2006 59 864 2007 2008 40 704 44 704 44 865 42 41 2006 59 773 58 2005 2009 59 704 2010 59 2011 2012 59 2011 2013 59 2011 2014 59 2015 42 2016 59 2004 42 2017 59 125 59 ,"{'AvgLine': 24, 'CountLine': 90, 'CountStmt': 44, 'MaxNesting': 1, 'AvgLineCode': 19, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 24, 'MaxEssential': 3, 'SumEssential': 5, 'AvgCyclomatic': 2, 'CountLineCode': 74, 'CountStmtDecl': 20, 'MaxCyclomatic': 4, 'SumCyclomatic': 6, 'AltAvgLineCode': 22, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 2, 'CountDeclMethod': 3, 'AltCountLineCode': 81, 'CountLineCodeExe': 39, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 4, 'CountDeclMethodAll': 131, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 3, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 28, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 7, 'CountDeclInstanceVariableProtected': 0}"
100328,C++,"class JDEMDataset final: public GDALPamDataset
{
    friend class JDEMRasterBand;

    VSILFILE    *fp;
    GByte       abyHeader[1012];

  public:
                     JDEMDataset();
                    ~JDEMDataset();

    static GDALDataset *Open( GDALOpenInfo * );
    static int Identify( GDALOpenInfo * );

    CPLErr GetGeoTransform( double * padfTransform ) override;
    const char *_GetProjectionRef() override;
    const OGRSpatialReference* GetSpatialRef() const override {
        return GetSpatialRefFromOldGetProjectionRef();
    }
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 42 2005 59 2006 2007 91 1505 93 59 777 58 2000 40 41 59 126 2000 40 41 59 809 2008 42 2009 40 2010 42 41 59 809 704 2011 40 2010 42 41 59 2012 2013 40 625 42 2014 41 2015 59 601 582 42 2016 40 41 2015 59 601 2017 42 2018 40 41 601 2015 123 792 2019 40 41 59 125 125 59 ,"{'AvgLine': 17, 'CountLine': 141, 'CountStmt': 57, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 43, 'MaxEssential': 5, 'SumEssential': 13, 'AvgCyclomatic': 2, 'CountLineCode': 104, 'CountStmtDecl': 19, 'MaxCyclomatic': 5, 'SumCyclomatic': 14, 'AltAvgLineCode': 13, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 25, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 7, 'AltCountLineCode': 104, 'CountLineCodeExe': 59, 'CountLineComment': 12, 'AltAvgLineComment': 1, 'AltCountLineBlank': 25, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 193, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 12, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 3, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100296,C++,"       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };",0,587 2000 123 569 2001 59 2002 42 2003 59 777 58 865 2004 40 41 123 688 40 2001 41 123 2005 40 2003 41 59 2001 61 655 59 125 125 2000 40 41 58 2001 40 829 41 44 2003 40 2006 40 41 41 123 125 126 2000 40 41 123 2004 40 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 8, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100301,C++,"class jpipkak_kdu_cpl_error_message : public kdu_message
{
public: // Member classes
    using kdu_message::put_text;

    explicit jpipkak_kdu_cpl_error_message( CPLErr eErrClass ) :
        m_eErrClass ( eErrClass ),
        m_pszError ( nullptr )
    {}

    void put_text(const char *string) override
    {
        if( m_pszError == nullptr )
            m_pszError = CPLStrdup( string );
        else
        {
            m_pszError = (char *)
                CPLRealloc(m_pszError, strlen(m_pszError) + strlen(string)+1 );
            strcat( m_pszError, string );
        }
    }

    class JP2KAKException
    {
    };

    void flush(bool end_of_message=false) override
    {
        if( m_pszError == nullptr )
            return;
        if( m_pszError[strlen(m_pszError)-1] == '\n' )
            m_pszError[strlen(m_pszError)-1] = '\0';

        CPLError( m_eErrClass, CPLE_AppDefined, ""%s"", m_pszError );
        CPLFree( m_pszError );
        m_pszError = nullptr;

        if( end_of_message && m_eErrClass == CE_Failure )
        {
            throw new JP2KAKException();
        }
    }

private:
    CPLErr m_eErrClass;
    char *m_pszError;
};",0,587 2000 58 777 2001 123 777 58 330 860 2001 321 2002 59 648 2000 40 2003 2004 41 58 2005 40 2004 41 44 2006 40 753 41 123 125 865 2002 40 601 582 42 2007 41 2008 123 688 40 2006 323 753 41 2006 61 2009 40 2007 41 59 630 123 2006 61 40 582 42 41 2010 40 2006 44 2011 40 2006 41 43 2011 40 2007 41 43 1501 41 59 2012 40 2006 44 2007 41 59 125 125 587 2013 123 125 59 865 2014 40 569 2015 61 655 41 2008 123 688 40 2006 323 753 41 792 59 688 40 2006 91 2016 40 2006 41 45 1501 93 323 314 41 2006 91 2016 40 2006 41 45 1501 93 61 314 59 2017 40 2005 44 2018 44 362 44 2006 41 59 2019 40 2006 41 59 2006 61 753 59 688 40 2015 307 2005 323 2020 41 123 825 744 2013 40 41 59 125 125 773 58 2003 2005 59 582 42 2006 59 125 59 ,"{'AvgLine': 10, 'CountLine': 47, 'CountStmt': 21, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 40, 'CountStmtDecl': 8, 'MaxCyclomatic': 4, 'SumCyclomatic': 7, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 40, 'CountLineCodeExe': 20, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100298,C++,"template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};",0,822 60 835 2000 62 587 2001 123 816 2002 123 2000 42 2003 59 2002 40 2000 42 2004 41 58 2003 40 2004 41 123 125 126 2002 40 41 123 619 2003 59 125 2002 38 758 61 40 2002 38 2005 41 123 2000 42 2006 61 2003 59 2003 61 1500 59 619 2006 59 2003 61 2005 46 2003 59 2005 46 2003 61 1500 59 792 42 823 59 125 125 2007 59 2001 38 758 61 40 601 2001 60 2000 62 38 2008 41 59 2001 40 601 2001 60 2000 62 38 2008 41 59 777 58 2001 40 41 58 2007 40 1500 41 123 125 2001 38 758 61 40 601 2000 38 2009 41 123 2002 2010 40 744 2000 40 2009 41 41 59 2007 61 2010 59 792 42 823 59 125 758 2000 38 40 41 601 123 792 42 2007 46 2011 59 125 2000 42 758 38 40 41 123 792 2007 46 2012 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 15, 'CountStmt': 26, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 16, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 15, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100299,C++,"  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };",0,587 2000 123 775 58 2001 42 2002 59 777 58 2000 40 41 58 2002 40 1500 41 123 125 2000 40 601 2000 38 2003 41 58 2002 40 2003 46 2002 41 123 2004 59 2005 40 2002 41 59 2006 59 125 2000 40 2001 42 2007 44 569 2008 61 829 41 58 2002 40 2007 41 123 688 40 2008 41 123 2009 59 2010 40 2002 41 59 2011 59 125 125 2000 38 758 61 40 601 2000 38 2003 41 123 2012 59 2013 40 2003 46 2002 41 59 2014 40 2002 41 59 2002 61 2003 46 2002 59 2015 59 792 42 823 59 125 126 2000 40 41 123 2016 59 2017 40 2002 41 59 2018 59 125 758 2001 42 40 41 601 123 792 2002 59 125 2001 42 758 354 40 41 601 123 792 2002 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 52, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 45, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100302,C++,"       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };",0,587 2000 123 569 2001 59 2002 42 2003 59 777 58 865 2004 40 41 123 688 40 2001 41 123 2005 40 2003 41 59 2001 61 655 59 125 125 2000 40 41 58 2001 40 829 41 44 2003 40 2006 40 41 41 123 125 126 2000 40 41 123 2004 40 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 8, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100310,C++,"class OGRDXFAffineTransform
{
public:
    OGRDXFAffineTransform() :
        adfData{1.0,0.0,0.0, 0.0,1.0,0.0, 0.0,0.0,1.0, 0.0,0.0,0.0} {}

    double adfData[12]; // Column-major: adfMatrix[5] is column 2, row 3
                        // Last 3 elements are translation

    // Left composition (composes oOther o this), modifying this
    void ComposeWith( const OGRDXFInsertTransformer& oCT )
    {
        double adfNew[12];

        adfNew[0] = oCT.dfXScale * cos(oCT.dfAngle) * adfData[0] -
            oCT.dfYScale * sin(oCT.dfAngle) * adfData[1];
        adfNew[1] = oCT.dfXScale * sin(oCT.dfAngle) * adfData[0] +
            oCT.dfYScale * cos(oCT.dfAngle) * adfData[1];
        adfNew[2] = oCT.dfZScale * adfData[2];

        adfNew[3] = oCT.dfXScale * cos(oCT.dfAngle) * adfData[3] -
            oCT.dfYScale * sin(oCT.dfAngle) * adfData[4];
        adfNew[4] = oCT.dfXScale * sin(oCT.dfAngle) * adfData[3] +
            oCT.dfYScale * cos(oCT.dfAngle) * adfData[4];
        adfNew[5] = oCT.dfZScale * adfData[5];

        adfNew[6] = oCT.dfXScale * cos(oCT.dfAngle) * adfData[6] -
            oCT.dfYScale * sin(oCT.dfAngle) * adfData[7];
        adfNew[7] = oCT.dfXScale * sin(oCT.dfAngle) * adfData[6] +
            oCT.dfYScale * cos(oCT.dfAngle) * adfData[7];
        adfNew[8] = oCT.dfZScale * adfData[8];

        adfNew[9] = oCT.dfXScale * cos(oCT.dfAngle) * adfData[9] -
            oCT.dfYScale * sin(oCT.dfAngle) * adfData[10] +
            oCT.dfXOffset;
        adfNew[10] = oCT.dfXScale * sin(oCT.dfAngle) * adfData[9] +
            oCT.dfYScale * cos(oCT.dfAngle) * adfData[10] +
            oCT.dfYOffset;
        adfNew[11] = oCT.dfZScale * adfData[11] + oCT.dfZOffset;

        memcpy( adfData, adfNew, sizeof(adfNew) );
    }

    void SetField(OGRFeature* poFeature, const char* pszFieldName) const
    {
        poFeature->SetField(pszFieldName, 12, adfData);
    }
};",0,587 2000 123 777 58 2000 40 41 58 2001 123 1501 44 1500 44 1500 44 1500 44 1501 44 1500 44 1500 44 1500 44 1501 44 1500 44 1500 44 1500 125 123 125 625 2001 91 1503 93 59 330 330 330 865 2002 40 601 2003 38 2004 41 123 625 2005 91 1503 93 59 2005 91 1500 93 61 2004 46 2006 42 2007 40 2004 46 2008 41 42 2001 91 1500 93 45 2004 46 2009 42 2010 40 2004 46 2008 41 42 2001 91 1501 93 59 2005 91 1501 93 61 2004 46 2006 42 2010 40 2004 46 2008 41 42 2001 91 1500 93 43 2004 46 2009 42 2007 40 2004 46 2008 41 42 2001 91 1501 93 59 2005 91 1502 93 61 2004 46 2011 42 2001 91 1502 93 59 2005 91 1502 93 61 2004 46 2006 42 2007 40 2004 46 2008 41 42 2001 91 1502 93 45 2004 46 2009 42 2010 40 2004 46 2008 41 42 2001 91 1502 93 59 2005 91 1502 93 61 2004 46 2006 42 2010 40 2004 46 2008 41 42 2001 91 1502 93 43 2004 46 2009 42 2007 40 2004 46 2008 41 42 2001 91 1502 93 59 2005 91 1502 93 61 2004 46 2011 42 2001 91 1502 93 59 2005 91 1502 93 61 2004 46 2006 42 2007 40 2004 46 2008 41 42 2001 91 1502 93 45 2004 46 2009 42 2010 40 2004 46 2008 41 42 2001 91 1502 93 59 2005 91 1502 93 61 2004 46 2006 42 2010 40 2004 46 2008 41 42 2001 91 1502 93 43 2004 46 2009 42 2007 40 2004 46 2008 41 42 2001 91 1502 93 59 2005 91 1502 93 61 2004 46 2011 42 2001 91 1502 93 59 2005 91 1502 93 61 2004 46 2006 42 2007 40 2004 46 2008 41 42 2001 91 1502 93 45 2004 46 2009 42 2010 40 2004 46 2008 41 42 2001 91 1502 93 43 2004 46 2012 59 2005 91 1502 93 61 2004 46 2006 42 2010 40 2004 46 2008 41 42 2001 91 1502 93 43 2004 46 2009 42 2007 40 2004 46 2008 41 42 2001 91 1502 93 43 2004 46 2013 59 2005 91 1503 93 61 2004 46 2011 42 2001 91 1503 93 43 2004 46 2014 59 2015 40 2001 44 2005 44 805 40 2005 41 41 59 125 865 2016 40 2017 42 2018 44 601 582 42 2019 41 601 123 2018 354 2016 40 2019 44 1503 44 2001 41 59 125 125 59 ,"{'AvgLine': 12, 'CountLine': 48, 'CountStmt': 20, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 38, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 38, 'CountLineCodeExe': 26, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100316,C++,"class TestPolygonWriter
{
public:
    void startPolygon( double level )
    {
        currentPolygon_ = &polygons_[level];
    }
    void endPolygon()
    {
    }
    void addPart( const std::list<marching_squares::Point>& ring )
    {
        PolygonPart part;
        part.push_back( ring );
        currentPolygon_->emplace_back( part );
        currentPart_ = &currentPolygon_->back();
    }
    void addInteriorRing( const std::list<marching_squares::Point>& ring )
    {
        currentPart_->push_back( ring );
    }

    void out( std::ostream& ostr, double level ) const
    {
        auto pIt = polygons_.find( level );
        if ( pIt == polygons_.end() )
            return;

        for ( const auto& part: pIt->second ) {
            ostr << ""{ "";
            for ( const auto& ring: part ) {
                ostr << ""{ "";
                for ( const auto& pt: ring ) {
                    ostr << ""("" << pt.x << "","" << pt.y << "") "";
                }
                ostr << ""} "";
            }
            ostr << ""} "";
        }
    }

#ifdef DEBUG
    void toSvg( const std::string& filename )
    {
        std::ofstream ofs( filename );
        ofs << ""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""no\""?><svg xmlns=\""http://www.w3.org/2000/svg\"" version=\""1.1\"">\n"";
        ofs << ""<defs><marker id=\""arrow\"" refX=\""0\"" refY=\""0\"" orient=\""auto\"">\n"";
        ofs << ""<path d=\""M 0,0 L-1.5,-1 L-1.5,1 L0,0\"" style=\""fill:#000000;\"" />\n"";
        ofs << ""</marker></defs>\n"";

        const std::string colors[] = {""white"", ""#bbb"", ""#888"", ""#666"", ""#333"", ""black""};

        int level = 0;
        for ( auto& p : polygons_ ) {
            for ( const auto& part : p.second ) {
                ofs << ""<path style=\""fill:"" << colors[level] << "";\"" d=\"""";
                for ( const auto& ring : part ) {
                    ofs << ""M "";
                    for ( const auto& point : ring ) {
                        ofs << point.x*10 << "","" << point.y*10 << "" "";
                    }
                }
                ofs << ""\""/>"";
            }
            level++;
        }
        ofs << ""</svg>"";
    }
#endif

private:
    typedef std::vector<LineString> PolygonPart;
    typedef std::vector<PolygonPart> Polygon;
    Polygon* currentPolygon_ = nullptr;
    PolygonPart* currentPart_ = nullptr;
public:
    std::map<double, Polygon> polygons_;
};",0,587 2000 123 777 58 865 2001 40 625 2002 41 123 2003 61 38 2004 91 2002 93 59 125 865 2005 40 41 123 125 865 2006 40 601 2007 321 2008 60 2009 321 2010 62 38 2011 41 123 2012 2013 59 2013 46 2014 40 2011 41 59 2015 354 2016 40 2013 41 59 2017 61 38 2015 354 2018 40 41 59 125 865 2019 40 601 2007 321 2008 60 2009 321 2010 62 38 2011 41 123 2020 354 2021 40 2011 41 59 125 865 2022 40 2007 321 2023 38 2024 44 625 2002 41 601 123 561 2025 61 2026 46 2027 40 2002 41 59 688 40 2025 323 2026 46 2028 40 41 41 792 59 664 40 601 561 38 2029 58 2025 354 2030 41 123 2024 332 362 59 664 40 601 561 38 2011 58 2029 41 123 2024 332 362 59 664 40 601 561 38 2031 58 2011 41 123 2024 332 362 332 2031 46 2032 332 362 332 2031 46 2033 332 362 59 125 2024 332 362 59 125 2024 332 362 59 125 125 35 689 2034 865 2035 40 601 2007 321 2036 38 2037 41 123 2007 321 2038 2039 40 2037 41 59 2039 332 362 59 2039 332 362 59 2039 332 362 59 2039 332 362 59 601 2007 321 2036 2040 91 93 61 123 362 44 362 44 362 44 362 44 362 44 362 125 59 704 2002 61 1500 59 664 40 561 38 2041 58 2042 41 123 664 40 601 561 38 2043 58 2041 46 2044 41 123 2039 332 362 332 2040 91 2002 93 332 362 59 664 40 601 561 38 2011 58 2043 41 123 2039 332 362 59 664 40 601 561 38 2045 58 2011 41 123 2039 332 2045 46 2046 42 1502 332 362 332 2045 46 2047 42 1502 332 362 59 125 125 2039 332 362 59 125 2002 349 59 125 2039 332 362 59 125 35 636 773 58 833 2007 321 2048 60 2049 62 2050 59 833 2007 321 2048 60 2050 62 2051 59 2051 42 2052 61 753 59 2050 42 2053 61 753 59 777 58 2007 321 2054 60 625 44 2051 62 2055 59 125 59 ,"{'AvgLine': 7, 'CountLine': 78, 'CountStmt': 19, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 15, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 72, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 26, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 86, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99782,C++,"    class SGWriter_Exception_NCWriteFailure : public SGWriter_Exception
    {
        std::string msg;

        public:
            const char * get_err_msg() override { return this->msg.c_str(); }
            SGWriter_Exception_NCWriteFailure(const char * layer_name, const char * failure_name,
                const char * failure_type);
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 823 354 2004 46 2007 40 41 59 125 2000 40 601 582 42 2008 44 601 582 42 2009 44 601 582 42 2010 41 59 125 59 ,"{'AvgLine': 2, 'CountLine': 13, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 12, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99378,C++,"    class SG_Exception_BadMapping : public SG_Exception
    {
        std::string err_msg;

        public:
            SG_Exception_BadMapping(const char* key, const char* where) :
                err_msg(std::string(key) + std::string("" not found in "") + std::string(where))
            {}

            const char* get_err_msg() override { return this->err_msg.c_str(); }
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 2000 40 601 582 42 2005 44 601 582 42 2006 41 58 2004 40 2002 321 2003 40 2005 41 43 2002 321 2003 40 362 41 43 2002 321 2003 40 2006 41 41 123 125 601 582 42 2007 40 41 2008 123 792 823 354 2004 46 2009 40 41 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 11, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 9, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100324,C++,"class OGROpenFileGDBFeatureDefn: public OGRFeatureDefn
{
        OGROpenFileGDBLayer* m_poLayer;
        mutable int m_bHasBuildFieldDefn;

        void LazyGeomInit() const
        {
            /* FileGDB v9 case */
            if( !m_bHasBuildFieldDefn &&
                m_poLayer != nullptr && m_poLayer->m_eGeomType != wkbNone &&
                m_poLayer->m_osDefinition.empty() )
            {
                m_bHasBuildFieldDefn = TRUE;
                (void) m_poLayer->BuildLayerDefinition();
            }
        }

    public:
        OGROpenFileGDBFeatureDefn( OGROpenFileGDBLayer* poLayer,
                                   const char * pszName ) :
                        OGRFeatureDefn(pszName), m_poLayer(poLayer)
        {
            m_bHasBuildFieldDefn = FALSE;
        }

        ~OGROpenFileGDBFeatureDefn() {}

        void UnsetLayer()
        {
            if( !apoGeomFieldDefn.empty() )
                cpl::down_cast<OGROpenFileGDBGeomFieldDefn *>(
                    apoGeomFieldDefn[0].get())->UnsetLayer();
            m_poLayer = nullptr;
        }

        virtual int GetFieldCount() const override
        {
            if( !m_bHasBuildFieldDefn && m_poLayer != nullptr )
            {
                m_bHasBuildFieldDefn = TRUE;
                (void) m_poLayer->BuildLayerDefinition();
            }
            return OGRFeatureDefn::GetFieldCount();
        }

        virtual int GetGeomFieldCount() const override
        {
            LazyGeomInit();
            return OGRFeatureDefn::GetGeomFieldCount();
        }

        virtual OGRGeomFieldDefn* GetGeomFieldDefn( int i ) override
        {
            LazyGeomInit();
            return OGRFeatureDefn::GetGeomFieldDefn(i);
        }

        virtual const OGRGeomFieldDefn* GetGeomFieldDefn( int i ) const override
        {
            LazyGeomInit();
            return OGRFeatureDefn::GetGeomFieldDefn(i);
        }
};",0,587 2000 58 777 2001 123 2002 42 2003 59 740 704 2004 59 865 2005 40 41 601 123 305 688 40 33 2004 307 2003 340 753 307 2003 354 2006 340 2007 307 2003 354 2008 46 2009 40 41 41 123 2004 61 2010 59 40 865 41 2003 354 2011 40 41 59 125 125 777 58 2000 40 2002 42 2012 44 601 582 42 2013 41 58 2001 40 2013 41 44 2003 40 2012 41 123 2004 61 2014 59 125 126 2000 40 41 123 125 865 2015 40 41 123 688 40 33 2016 46 2017 40 41 41 2018 321 2019 60 2020 42 62 40 2016 91 1500 93 46 2021 40 41 41 354 2015 40 41 59 2003 61 753 59 125 864 704 2022 40 41 601 2023 123 688 40 33 2004 307 2003 340 753 41 123 2004 61 2024 59 40 865 41 2003 354 2025 40 41 59 125 792 2001 321 2022 40 41 59 125 864 704 2026 40 41 601 2023 123 2005 40 41 59 792 2001 321 2026 40 41 59 125 864 2027 42 2028 40 704 2029 41 2023 123 2005 40 41 59 792 2001 321 2028 40 2029 41 59 125 864 601 2027 42 2028 40 704 2029 41 601 2023 123 2005 40 41 59 792 2001 321 2028 40 2029 41 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 63, 'CountStmt': 26, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 54, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 54, 'CountLineCodeExe': 18, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 47, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 65, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100335,C++,"class BaseGenerator {
 public:
  virtual bool generate() = 0;

  static std::string NamespaceDir(const Parser &parser, const std::string &path,
                                  const Namespace &ns,
                                  const bool dasherize = false);

  static std::string ToDasherizedCase(const std::string pascal_case);

  std::string GeneratedFileName(const std::string &path,
                                const std::string &file_name,
                                const IDLOptions &options) const;

 protected:
  BaseGenerator(const Parser &parser, const std::string &path,
                const std::string &file_name, std::string qualifying_start,
                std::string qualifying_separator, std::string default_extension)
      : parser_(parser),
        path_(path),
        file_name_(file_name),
        qualifying_start_(qualifying_start),
        qualifying_separator_(qualifying_separator),
        default_extension_(default_extension) {}
  virtual ~BaseGenerator() {}

  // No copy/assign.
  BaseGenerator &operator=(const BaseGenerator &);
  BaseGenerator(const BaseGenerator &);

  std::string NamespaceDir(const Namespace &ns,
                           const bool dasherize = false) const;

  static const char *FlatBuffersGeneratedWarning();

  static std::string FullNamespace(const char *separator, const Namespace &ns);

  static std::string LastNamespacePart(const Namespace &ns);

  // tracks the current namespace for early exit in WrapInNameSpace
  // c++, java and csharp returns a different namespace from
  // the following default (no early exit, always fully qualify),
  // which works for js and php
  virtual const Namespace *CurrentNameSpace() const { return nullptr; }

  // Ensure that a type is prefixed with its namespace even within
  // its own namespace to avoid conflict between generated method
  // names and similarly named classes or structs
  std::string WrapInNameSpace(const Namespace *ns,
                              const std::string &name) const;

  std::string WrapInNameSpace(const Definition &def) const;

  std::string GetNameSpace(const Definition &def) const;

  const Parser &parser_;
  const std::string &path_;
  const std::string &file_name_;
  const std::string qualifying_start_;
  const std::string qualifying_separator_;
  const std::string default_extension_;
};",0,587 2000 123 777 58 864 569 2001 40 41 61 1500 59 809 2002 321 2003 2004 40 601 2005 38 2006 44 601 2002 321 2003 38 2007 44 601 2008 38 2009 44 601 569 2010 61 655 41 59 809 2002 321 2003 2011 40 601 2002 321 2003 2012 41 59 2002 321 2003 2013 40 601 2002 321 2003 38 2007 44 601 2002 321 2003 38 2014 44 601 2015 38 2016 41 601 59 775 58 2000 40 601 2005 38 2006 44 601 2002 321 2003 38 2007 44 601 2002 321 2003 38 2014 44 2002 321 2003 2017 44 2002 321 2003 2018 44 2002 321 2003 2019 41 58 2020 40 2006 41 44 2021 40 2007 41 44 2022 40 2014 41 44 2023 40 2017 41 44 2024 40 2018 41 44 2025 40 2019 41 123 125 864 126 2000 40 41 123 125 330 2000 38 758 61 40 601 2000 38 41 59 2000 40 601 2000 38 41 59 2002 321 2003 2004 40 601 2008 38 2009 44 601 569 2010 61 655 41 601 59 809 601 582 42 2026 40 41 59 809 2002 321 2003 2027 40 601 582 42 2028 44 601 2008 38 2009 41 59 809 2002 321 2003 2029 40 601 2008 38 2009 41 59 330 330 330 330 864 601 2008 42 2030 40 41 601 123 792 753 59 125 330 330 330 2002 321 2003 2031 40 601 2008 42 2009 44 601 2002 321 2003 38 2032 41 601 59 2002 321 2003 2031 40 601 2033 38 2034 41 601 59 2002 321 2003 2035 40 601 2033 38 2034 41 601 59 601 2005 38 2020 59 601 2002 321 2003 38 2021 59 601 2002 321 2003 38 2022 59 601 2002 321 2003 2023 59 601 2002 321 2003 2024 59 601 2002 321 2003 2025 59 125 59 ,"{'AvgLine': 3, 'CountLine': 62, 'CountStmt': 29, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 40, 'CountStmtDecl': 25, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 16, 'AltCountLineCode': 40, 'CountLineCodeExe': 7, 'CountLineComment': 8, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 5, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 12, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 6}"
100332,C++,"class WMSMiniDriverManager {
public:
    WMSMiniDriverManager() {}
    ~WMSMiniDriverManager() { erase(); }

public:
    void Register(WMSMiniDriverFactory *mdf);
    // Clean up the minidriver factories
    void erase();
    WMSMiniDriverFactory *Find(const CPLString &name);

protected:
    std::vector<WMSMiniDriverFactory *> m_mdfs;
};",0,587 2000 123 777 58 2000 40 41 123 125 126 2000 40 41 123 2001 40 41 59 125 777 58 865 2002 40 2003 42 2004 41 59 330 865 2005 40 41 59 2003 42 2006 40 601 2007 38 2008 41 59 775 58 2009 321 2010 60 2003 42 62 2011 59 125 59 ,"{'AvgLine': 4, 'CountLine': 32, 'CountStmt': 13, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 8, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 28, 'CountLineCodeExe': 5, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100339,C++,"class TypedFloatConstantGenerator : public FloatConstantGenerator {
 public:
  TypedFloatConstantGenerator(const char *double_prefix,
                              const char *single_prefix, const char *nan_number,
                              const char *pos_inf_number,
                              const char *neg_inf_number = """");

 private:
  std::string Value(double v,
                    const std::string &src) const FLATBUFFERS_OVERRIDE;
  std::string Inf(double v) const FLATBUFFERS_OVERRIDE;

  std::string NaN(double v) const FLATBUFFERS_OVERRIDE;

  std::string Value(float v, const std::string &src) const FLATBUFFERS_OVERRIDE;
  std::string Inf(float v) const FLATBUFFERS_OVERRIDE;
  std::string NaN(float v) const FLATBUFFERS_OVERRIDE;

  std::string MakeNaN(const std::string &prefix) const;
  std::string MakeInf(bool neg, const std::string &prefix) const;

  const std::string double_prefix_;
  const std::string single_prefix_;
  const std::string nan_number_;
  const std::string pos_inf_number_;
  const std::string neg_inf_number_;
};",0,587 2000 58 777 2001 123 777 58 2000 40 601 582 42 2002 44 601 582 42 2003 44 601 582 42 2004 44 601 582 42 2005 44 601 582 42 2006 61 362 41 59 773 58 2007 321 2008 2009 40 625 2010 44 601 2007 321 2008 38 2011 41 601 2012 59 2007 321 2008 2013 40 625 2010 41 601 2012 59 2007 321 2008 2014 40 625 2010 41 601 2012 59 2007 321 2008 2009 40 660 2010 44 601 2007 321 2008 38 2011 41 601 2012 59 2007 321 2008 2013 40 660 2010 41 601 2012 59 2007 321 2008 2014 40 660 2010 41 601 2012 59 2007 321 2008 2015 40 601 2007 321 2008 38 2016 41 601 59 2007 321 2008 2017 40 569 2018 44 601 2007 321 2008 38 2016 41 601 59 601 2007 321 2008 2019 59 601 2007 321 2008 2020 59 601 2007 321 2008 2021 59 601 2007 321 2008 2022 59 601 2007 321 2008 2023 59 125 59 ,"{'AvgLine': 0, 'CountLine': 27, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 22, 'CountStmtDecl': 14, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 22, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 8, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 8, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
100356,C++,"class OGRGeoJSONSeqWriteLayer final: public OGRLayer
{
  public:
    OGRGeoJSONSeqWriteLayer( OGRGeoJSONSeqDataSource* poDS,
                             const char* pszName,
                             CSLConstList papszOptions,
                             OGRCoordinateTransformation* poCT);
    ~OGRGeoJSONSeqWriteLayer();

    OGRFeatureDefn* GetLayerDefn() override { return m_poFeatureDefn; }

    void ResetReading() override { }
    OGRFeature* GetNextFeature() override { return nullptr; }
    OGRErr ICreateFeature( OGRFeature* poFeature ) override;
    OGRErr CreateField( OGRFieldDefn* poField, int bApproxOK ) override;
    int TestCapability( const char* pszCap ) override;

  private:
    OGRGeoJSONSeqDataSource* m_poDS = nullptr;
    OGRFeatureDefn* m_poFeatureDefn = nullptr;

    OGRCoordinateTransformation* m_poCT = nullptr;
    OGRGeometryFactory::TransformWithOptionsCache m_oTransformCache;
    OGRGeoJSONWriteOptions m_oWriteOptions;
    bool m_bRS = false;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 2004 44 601 582 42 2005 44 2006 2007 44 2008 42 2009 41 59 126 2000 40 41 59 2010 42 2011 40 41 2012 123 792 2013 59 125 865 2014 40 41 2012 123 125 2015 42 2016 40 41 2012 123 792 753 59 125 2017 2018 40 2015 42 2019 41 2012 59 2017 2020 40 2021 42 2022 44 704 2023 41 2012 59 704 2024 40 601 582 42 2025 41 2012 59 773 58 2003 42 2026 61 753 59 2010 42 2027 61 753 59 2008 42 2028 61 753 59 2029 321 2030 2031 59 2032 2033 59 569 2034 61 655 59 125 59 ,"{'AvgLine': 12, 'CountLine': 126, 'CountStmt': 61, 'MaxNesting': 3, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 39, 'MaxEssential': 5, 'SumEssential': 14, 'AvgCyclomatic': 2, 'CountLineCode': 112, 'CountStmtDecl': 24, 'MaxCyclomatic': 6, 'SumCyclomatic': 16, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 112, 'CountLineCodeExe': 73, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 13, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 90, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
98817,C++,"class KEAOverview final: public KEARasterBand
{
    int         m_nOverviewIndex; // the index of this overview
public:
    KEAOverview(KEADataset *pDataset, int nSrcBand, GDALAccess eAccess,
                kealib::KEAImageIO *pImageIO, LockedRefCount *pRefCount,
                int nOverviewIndex, uint64_t nXSize, uint64_t nYSize );
    ~KEAOverview();

    // virtual methods for RATs - not implemented for overviews
    GDALRasterAttributeTable *GetDefaultRAT() override;

    CPLErr SetDefaultRAT(const GDALRasterAttributeTable *poRAT) override;

    // note that Color Table stuff implemented in base class
    // so could be some duplication if overview asked for color table

protected:
    // we just override these functions from KEARasterBand
    virtual CPLErr IReadBlock( int, int, void * ) override;
    virtual CPLErr IWriteBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 704 2003 59 330 777 58 2000 40 2004 42 2005 44 704 2006 44 2007 2008 44 2009 321 2010 42 2011 44 2012 42 2013 44 704 2014 44 2015 2016 44 2015 2017 41 59 126 2000 40 41 59 330 2018 42 2019 40 41 2020 59 2021 2022 40 601 2018 42 2023 41 2020 59 330 330 775 58 330 864 2021 2024 40 704 44 704 44 865 42 41 2020 59 864 2021 2025 40 704 44 704 44 865 42 41 2020 59 125 59 ,"{'AvgLine': 14, 'CountLine': 110, 'CountStmt': 40, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 94, 'CountStmtDecl': 17, 'MaxCyclomatic': 5, 'SumCyclomatic': 14, 'AltAvgLineCode': 13, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 94, 'CountLineCodeExe': 39, 'CountLineComment': 12, 'AltAvgLineComment': 1, 'AltCountLineBlank': 5, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 168, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 12, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 62, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98822,C++,"class CPL_DLL VSIFileManager
{
private:
    VSIFilesystemHandler *poDefaultHandler = nullptr;
    std::map<std::string, VSIFilesystemHandler *> oHandlers{};

    VSIFileManager();

    static VSIFileManager *Get();

    CPL_DISALLOW_COPY_ASSIGN(VSIFileManager)

public:
    ~VSIFileManager();

    static VSIFilesystemHandler *GetHandler( const char * );
    static void InstallHandler( const std::string& osPrefix,
                                VSIFilesystemHandler * );
    /* RemoveHandler is never defined. */
    /* static void RemoveHandler( const std::string& osPrefix ); */

    static char** GetPrefixes();
};",0,587 2000 2001 123 773 58 2002 42 2003 61 753 59 2004 321 2005 60 2004 321 2006 44 2002 42 62 2007 123 125 59 2001 40 41 59 809 2001 42 2008 40 41 59 2009 40 2001 41 777 58 126 2001 40 41 59 809 2002 42 2010 40 601 582 42 41 59 809 865 2011 40 601 2004 321 2006 38 2012 44 2002 42 41 59 305 305 809 582 42 42 2013 40 41 59 125 59 ,"{'AvgLine': 19, 'CountLine': 137, 'CountStmt': 55, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 49, 'MaxEssential': 5, 'SumEssential': 10, 'AvgCyclomatic': 2, 'CountLineCode': 97, 'CountStmtDecl': 23, 'MaxCyclomatic': 5, 'SumCyclomatic': 16, 'AltAvgLineCode': 17, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 117, 'CountLineCodeExe': 53, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 21, 'CountLineInactive': 16, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 4, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100111,C++,"class OGRPGDumpGeomFieldDefn final: public OGRGeomFieldDefn
{
        OGRPGDumpGeomFieldDefn(const OGRPGDumpGeomFieldDefn&) = delete;
        OGRPGDumpGeomFieldDefn& operator= (const OGRPGDumpGeomFieldDefn&) = delete;

    public:
        explicit OGRPGDumpGeomFieldDefn( OGRGeomFieldDefn *poGeomField ) :
            OGRGeomFieldDefn(poGeomField),
            nSRSId(-1),
            GeometryTypeFlags(0)
            {}

        int nSRSId;
        int GeometryTypeFlags;
};",0,587 2000 2001 58 777 2002 123 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 777 58 648 2000 40 2002 42 2003 41 58 2002 40 2003 41 44 2004 40 45 1501 41 44 2005 40 1500 41 123 125 704 2004 59 704 2005 59 125 59 ,"{'AvgLine': 5, 'CountLine': 15, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 13, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98835,C++,"class MAPWrapperRasterBand final: public GDALProxyRasterBand
{
  GDALRasterBand* poBaseBand;

  protected:
    virtual GDALRasterBand* RefUnderlyingRasterBand() override { return poBaseBand; }

  public:
    explicit MAPWrapperRasterBand( GDALRasterBand* poBaseBandIn )
        {
            this->poBaseBand = poBaseBandIn;
            eDataType = poBaseBand->GetRasterDataType();
            poBaseBand->GetBlockSize(&nBlockXSize, &nBlockYSize);
        }
    ~MAPWrapperRasterBand() {}
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 775 58 864 2003 42 2005 40 41 2006 123 792 2004 59 125 777 58 648 2000 40 2003 42 2007 41 123 823 354 2004 61 2007 59 2008 61 2004 354 2009 40 41 59 2004 354 2010 40 38 2011 44 38 2012 41 59 125 126 2000 40 41 123 125 125 59 ,"{'AvgLine': 2, 'CountLine': 16, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 14, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 148, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98649,C++,"class VRTFuncSource final: public VRTSource
{
    CPL_DISALLOW_COPY_ASSIGN(VRTFuncSource)

public:
            VRTFuncSource();
    virtual ~VRTFuncSource();

    virtual CPLErr  XMLInit( CPLXMLNode *, const char *,
                             std::map<CPLString, GDALDataset*>& ) override { return CE_Failure; }
    virtual CPLXMLNode *SerializeToXML( const char *pszVRTPath ) override;

    virtual CPLErr  RasterIO( GDALDataType eBandDataType,
                              int nXOff, int nYOff, int nXSize, int nYSize,
                              void *pData, int nBufXSize, int nBufYSize,
                              GDALDataType eBufType,
                              GSpacing nPixelSpace, GSpacing nLineSpace,
                              GDALRasterIOExtraArg* psExtraArg ) override;

    virtual double GetMinimum( int nXSize, int nYSize, int *pbSuccess ) override;
    virtual double GetMaximum( int nXSize, int nYSize, int *pbSuccess ) override;
    virtual CPLErr ComputeRasterMinMax( int nXSize, int nYSize, int bApproxOK,
                                        double* adfMinMax ) override;
    virtual CPLErr ComputeStatistics( int nXSize, int nYSize,
                                      int bApproxOK,
                                      double *pdfMin, double *pdfMax,
                                      double *pdfMean, double *pdfStdDev,
                                      GDALProgressFunc pfnProgress,
                                      void *pProgressData ) override;
    virtual CPLErr  GetHistogram( int nXSize, int nYSize,
                                  double dfMin, double dfMax,
                                  int nBuckets, GUIntBig * panHistogram,
                                  int bIncludeOutOfRange, int bApproxOK,
                                  GDALProgressFunc pfnProgress,
                                  void *pProgressData ) override;

    VRTImageReadFunc    pfnReadFunc;
    void               *pCBData;
    GDALDataType        eType;

    float               fNoDataValue;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 777 58 2000 40 41 59 864 126 2000 40 41 59 864 2004 2005 40 2006 42 44 601 582 42 44 2007 321 2008 60 2009 44 2010 42 62 38 41 2011 123 792 2012 59 125 864 2006 42 2013 40 601 582 42 2014 41 2011 59 864 2004 2015 40 2016 2017 44 704 2018 44 704 2019 44 704 2020 44 704 2021 44 865 42 2022 44 704 2023 44 704 2024 44 2016 2025 44 2026 2027 44 2026 2028 44 2029 42 2030 41 2011 59 864 625 2031 40 704 2020 44 704 2021 44 704 42 2032 41 2011 59 864 625 2033 40 704 2020 44 704 2021 44 704 42 2032 41 2011 59 864 2004 2034 40 704 2020 44 704 2021 44 704 2035 44 625 42 2036 41 2011 59 864 2004 2037 40 704 2020 44 704 2021 44 704 2035 44 625 42 2038 44 625 42 2039 44 625 42 2040 44 625 42 2041 44 2042 2043 44 865 42 2044 41 2011 59 864 2004 2045 40 704 2020 44 704 2021 44 625 2046 44 625 2047 44 704 2048 44 2049 42 2050 44 704 2051 44 704 2035 44 2042 2043 44 865 42 2044 41 2011 59 2052 2053 59 865 42 2054 59 2016 2055 59 660 2056 59 125 59 ,"{'AvgLine': 9, 'CountLine': 134, 'CountStmt': 32, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 127, 'CountStmtDecl': 18, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 9, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 12, 'AltCountLineCode': 127, 'CountLineCodeExe': 33, 'CountLineComment': 29, 'AltAvgLineComment': 2, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 42, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.23', 'AltCountLineComment': 29, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99047,C++,    RegisterMinidriver(IIP);,0,2000 40 2001 41 59 ,"{'AvgLine': 21, 'CountLine': 21, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 17, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 17, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100362,C++,"class LinkedDataset
{
    public:
        KmlSuperOverlayReadDataset* poDS;
        LinkedDataset* psPrev;
        LinkedDataset* psNext;
        CPLString      osSubFilename;
};",0,587 2000 123 777 58 2001 42 2002 59 2000 42 2003 59 2000 42 2004 59 2005 2006 59 125 59 ,"{'AvgLine': 0, 'CountLine': 8, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 8, 'CountStmtDecl': 4, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 8, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99166,C++,"class PDS4EditableLayer final: public OGREditableLayer
{
        PDS4TableBaseLayer* GetBaseLayer() const;

    public:
        explicit PDS4EditableLayer(PDS4FixedWidthTable* poBaseLayer);
        explicit PDS4EditableLayer(PDS4DelimitedTable* poBaseLayer);

        void RefreshFileAreaObservational(CPLXMLNode* psFAO) { GetBaseLayer()->RefreshFileAreaObservational(psFAO); }
        const char* GetFileName() const { return GetBaseLayer()->GetFileName(); }
        bool IsDirtyHeader() const { return GetBaseLayer()->IsDirtyHeader(); }
        int GetRawFieldCount() const { return GetBaseLayer()->GetRawFieldCount(); }
        void SetSpatialRef(OGRSpatialReference* poSRS);
        char** GetFileList() const { return GetBaseLayer()->GetFileList(); }
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 40 41 601 59 777 58 648 2000 40 2005 42 2006 41 59 648 2000 40 2007 42 2006 41 59 865 2008 40 2009 42 2010 41 123 2004 40 41 354 2008 40 2010 41 59 125 601 582 42 2011 40 41 601 123 792 2004 40 41 354 2011 40 41 59 125 569 2012 40 41 601 123 792 2004 40 41 354 2012 40 41 59 125 704 2013 40 41 601 123 792 2004 40 41 354 2013 40 41 59 125 865 2014 40 2015 42 2016 41 59 582 42 42 2017 40 41 601 123 792 2004 40 41 354 2017 40 41 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 37, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 35, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 176, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99589,C++,"class OGRPGFeatureDefn CPL_NON_FINAL: public OGRFeatureDefn
{
    public:
        explicit OGRPGFeatureDefn( const char * pszName = nullptr ) :
            OGRFeatureDefn(pszName)
        {
            SetGeomType(wkbNone);
        }

        virtual void UnsetLayer()
        {
            const int nGeomFieldCount = GetGeomFieldCount();
            for(int i=0;i<nGeomFieldCount;i++)
                cpl::down_cast<OGRPGGeomFieldDefn*>(apoGeomFieldDefn[i].get())->UnsetLayer();
        }

        OGRPGGeomFieldDefn *GetGeomFieldDefn( int i ) override
        {
            return cpl::down_cast<OGRPGGeomFieldDefn*>(OGRFeatureDefn::GetGeomFieldDefn(i));
        }

        const OGRPGGeomFieldDefn *GetGeomFieldDefn( int i ) const override
        {
            return cpl::down_cast<const OGRPGGeomFieldDefn*>(OGRFeatureDefn::GetGeomFieldDefn(i));
        }
};",0,587 2000 2001 58 777 2002 123 777 58 648 2000 40 601 582 42 2003 61 753 41 58 2002 40 2003 41 123 2004 40 2005 41 59 125 864 865 2006 40 41 123 601 704 2007 61 2008 40 41 59 664 40 704 2009 61 1500 59 2009 60 2007 59 2009 349 41 2010 321 2011 60 2012 42 62 40 2013 91 2009 93 46 2014 40 41 41 354 2006 40 41 59 125 2015 42 2016 40 704 2017 41 2018 123 792 2019 321 2020 60 2015 42 62 40 2002 321 2016 40 2017 41 41 59 125 601 2015 42 2016 40 704 2017 41 601 2018 123 792 2021 321 2022 60 601 2015 42 62 40 2002 321 2016 40 2017 41 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 26, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 23, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 23, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 43, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99592,C++,"class OGRPGTableFeatureDefn final: public OGRPGFeatureDefn
{
    private:
        OGRPGTableFeatureDefn (const OGRPGTableFeatureDefn& ) = delete;
        OGRPGTableFeatureDefn& operator= (const OGRPGTableFeatureDefn& ) = delete;

        OGRPGTableLayer *poLayer = nullptr;

        void SolveFields() const;

    public:
        explicit OGRPGTableFeatureDefn( OGRPGTableLayer* poLayerIn,
                               const char * pszName = nullptr ) :
            OGRPGFeatureDefn(pszName), poLayer(poLayerIn)
        {
        }

        virtual void UnsetLayer() override
        {
            poLayer = nullptr;
            OGRPGFeatureDefn::UnsetLayer();
        }

        virtual int         GetFieldCount() const override
            { SolveFields(); return OGRPGFeatureDefn::GetFieldCount(); }
        virtual OGRFieldDefn *GetFieldDefn( int i ) override
            { SolveFields(); return OGRPGFeatureDefn::GetFieldDefn(i); }
        virtual const OGRFieldDefn *GetFieldDefn( int i ) const override
            { SolveFields(); return OGRPGFeatureDefn::GetFieldDefn(i); }
        virtual int         GetFieldIndex( const char * pszName ) const override
            { SolveFields(); return OGRPGFeatureDefn::GetFieldIndex(pszName); }

        virtual int         GetGeomFieldCount() const override
            { if (poLayer != nullptr && !poLayer->HasGeometryInformation())
                  SolveFields();
              return OGRPGFeatureDefn::GetGeomFieldCount(); }
        virtual OGRPGGeomFieldDefn *GetGeomFieldDefn( int i ) override
            { if (poLayer != nullptr && !poLayer->HasGeometryInformation())
                  SolveFields();
              return OGRPGFeatureDefn::GetGeomFieldDefn(i); }
        virtual const OGRPGGeomFieldDefn *GetGeomFieldDefn( int i ) const override
            { if (poLayer != nullptr && !poLayer->HasGeometryInformation())
                  SolveFields();
              return OGRPGFeatureDefn::GetGeomFieldDefn(i); }
        virtual int         GetGeomFieldIndex( const char * pszName) const override
            { if (poLayer != nullptr && !poLayer->HasGeometryInformation())
                  SolveFields();
              return OGRPGFeatureDefn::GetGeomFieldIndex(pszName); }
};",0,587 2000 2001 58 777 2002 123 773 58 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 2003 42 2004 61 753 59 865 2005 40 41 601 59 777 58 648 2000 40 2003 42 2006 44 601 582 42 2007 61 753 41 58 2002 40 2007 41 44 2004 40 2006 41 123 125 864 865 2008 40 41 2009 123 2004 61 753 59 2002 321 2008 40 41 59 125 864 704 2010 40 41 601 2009 123 2005 40 41 59 792 2002 321 2010 40 41 59 125 864 2011 42 2012 40 704 2013 41 2009 123 2005 40 41 59 792 2002 321 2012 40 2013 41 59 125 864 601 2011 42 2012 40 704 2013 41 601 2009 123 2005 40 41 59 792 2002 321 2012 40 2013 41 59 125 864 704 2014 40 601 582 42 2007 41 601 2009 123 2005 40 41 59 792 2002 321 2014 40 2007 41 59 125 864 704 2015 40 41 601 2009 123 688 40 2004 340 753 307 33 2004 354 2016 40 41 41 2005 40 41 59 792 2002 321 2015 40 41 59 125 864 2017 42 2018 40 704 2013 41 2009 123 688 40 2004 340 753 307 33 2004 354 2019 40 41 41 2005 40 41 59 792 2002 321 2018 40 2013 41 59 125 864 601 2017 42 2018 40 704 2013 41 601 2009 123 688 40 2004 340 753 307 33 2004 354 2020 40 41 41 2005 40 41 59 792 2002 321 2018 40 2013 41 59 125 864 704 2021 40 601 582 42 2007 41 601 2009 123 688 40 2004 340 753 307 33 2004 354 2022 40 41 41 2005 40 41 59 792 2002 321 2021 40 2007 41 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 56, 'CountStmt': 38, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 25, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 49, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 16, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 13, 'AltCountLineCode': 49, 'CountLineCodeExe': 23, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 56, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99015,C++,"    class SG_Exception_Value_Violation : public SG_Exception
    {
        std::string err_msg;

        public:
            const char* get_err_msg() override { return err_msg.c_str(); }
            SG_Exception_Value_Violation(const char* containername, const char* type, const char* badvalue) :
                err_msg( std::string(""["") + std::string(containername) + std::string(""] "") + std::string(type) +
                         std::string("" values may not be "") + std::string(badvalue)
                       ) {}
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 2004 46 2007 40 41 59 125 2000 40 601 582 42 2008 44 601 582 42 2009 44 601 582 42 2010 41 58 2004 40 2002 321 2003 40 362 41 43 2002 321 2003 40 2008 41 43 2002 321 2003 40 362 41 43 2002 321 2003 40 2009 41 43 2002 321 2003 40 362 41 43 2002 321 2003 40 2010 41 41 123 125 125 59 ,"{'AvgLine': 2, 'CountLine': 11, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 10, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99359,C++,"class GMLJP2V2ExtensionDesc
{
    public:
        CPLString osFile{};
        int       bParentCoverageCollection = true;
};",0,587 2000 123 777 58 2001 2002 123 125 59 704 2003 61 829 59 125 59 ,"{'AvgLine': 0, 'CountLine': 6, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99357,C++,"class GMLJP2V2AnnotationDesc
{
    public:
        CPLString osFile{};
};",0,587 2000 123 777 58 2001 2002 123 125 59 125 59 ,"{'AvgLine': 0, 'CountLine': 5, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 5, 'CountStmtDecl': 1, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 5, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99362,C++,"class GMLJP2V2StyleDesc
{
    public:
        CPLString osFile{};
        int       bParentCoverageCollection = true;
};",0,587 2000 123 777 58 2001 2002 123 125 59 704 2003 61 829 59 125 59 ,"{'AvgLine': 0, 'CountLine': 6, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98657,C++,"class VRTOverviewInfo
{
    CPL_DISALLOW_COPY_ASSIGN(VRTOverviewInfo)

public:
    CPLString       osFilename{};
    int             nBand = 0;
    GDALRasterBand *poBand = nullptr;
    int             bTriedToOpen = FALSE;

    VRTOverviewInfo() = default;
    VRTOverviewInfo(VRTOverviewInfo&& oOther) noexcept:
        osFilename(std::move(oOther.osFilename)),
        nBand(oOther.nBand),
        poBand(oOther.poBand),
        bTriedToOpen(oOther.bTriedToOpen)
    {
        oOther.poBand = nullptr;
    }

    ~VRTOverviewInfo() {
        CloseDataset();
    }

    bool CloseDataset()
    {
        if( poBand == nullptr )
            return false;

        GDALDataset* poDS = poBand->GetDataset();
        // Nullify now, to prevent recursion in some cases !
        poBand = nullptr;
        if( poDS->GetShared() )
            GDALClose( /* (GDALDatasetH) */ poDS );
        else
            poDS->Dereference();

        return true;
    }
};",0,587 2000 123 2001 40 2000 41 777 58 2002 2003 123 125 59 704 2004 61 1500 59 2005 42 2006 61 753 59 704 2007 61 2008 59 2000 40 41 61 613 59 2000 40 2000 307 2009 41 748 58 2003 40 2010 321 2011 40 2009 46 2003 41 41 44 2004 40 2009 46 2004 41 44 2006 40 2009 46 2006 41 44 2007 40 2009 46 2007 41 123 2009 46 2006 61 753 59 125 126 2000 40 41 123 2012 40 41 59 125 569 2013 40 41 123 688 40 2006 323 753 41 792 655 59 2014 42 2015 61 2006 354 2016 40 41 59 330 2006 61 753 59 688 40 2015 354 2017 40 41 41 2018 40 305 2015 41 59 630 2015 354 2019 40 41 59 792 829 59 125 125 59 ,"{'AvgLine': 8, 'CountLine': 40, 'CountStmt': 21, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 12, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 33, 'CountLineCodeExe': 15, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 79, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99181,C++,"    class DatasetWithErrorInFlushCache: public GDALDataset
    {
            bool bHasFlushCache;
        public:
            DatasetWithErrorInFlushCache() : bHasFlushCache(false) { }
           ~DatasetWithErrorInFlushCache() { FlushCache(true); }
            virtual void FlushCache(bool bAtClosing) override
            {
                if( !bHasFlushCache)
                    CPLError(CE_Failure, CPLE_AppDefined, ""some error"");
                GDALDataset::FlushCache(bAtClosing);
                bHasFlushCache = true;
            }
            virtual CPLErr _SetProjection(const char*) override { return CE_None; }
            CPLErr SetSpatialRef(const OGRSpatialReference* poSRS) override {
                return OldSetProjectionFromSetSpatialRef(poSRS);
            }
            virtual CPLErr SetGeoTransform(double*) override { return CE_None; }

            static GDALDataset* CreateCopy(const char*, GDALDataset*,
                                    int, char **,
                                    GDALProgressFunc,
                                    void *)
            {
                return new DatasetWithErrorInFlushCache();
            }

            static GDALDataset* Create(const char*, int nXSize, int nYSize, int, GDALDataType, char ** )
            {
                DatasetWithErrorInFlushCache* poDS = new DatasetWithErrorInFlushCache();
                poDS->eAccess = GA_Update;
                poDS->nRasterXSize = nXSize;
                poDS->nRasterYSize = nYSize;
                poDS->SetBand(1, new FakeBand(nXSize, nYSize));
                return poDS;
            }
    };",0,587 2000 58 777 2001 123 569 2002 59 777 58 2000 40 41 58 2002 40 655 41 123 125 126 2000 40 41 123 2003 40 829 41 59 125 864 865 2004 40 569 2005 41 2006 123 688 40 33 2002 41 2007 40 2008 44 2009 44 362 41 59 2001 321 2004 40 2005 41 59 2002 61 829 59 125 864 2010 2011 40 601 582 42 41 2006 123 792 2012 59 125 2010 2013 40 601 2014 42 2015 41 2006 123 792 2016 40 2015 41 59 125 864 2010 2017 40 625 42 41 2006 123 792 2018 59 125 809 2001 42 2019 40 601 582 42 44 2001 42 44 704 44 582 42 42 44 2020 44 865 42 41 123 792 744 2000 40 41 59 125 809 2001 42 2021 40 601 582 42 44 704 2022 44 704 2023 44 704 44 2024 44 582 42 42 41 123 2000 42 2025 61 744 2000 40 41 59 2025 354 2026 61 2027 59 2025 354 2028 61 2022 59 2025 354 2029 61 2023 59 2025 354 2030 40 1501 44 744 2031 40 2022 44 2023 41 41 59 792 2025 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 37, 'CountStmt': 22, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 35, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 150, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99046,C++,    RegisterMinidriver(AGS);,0,2000 40 2001 41 59 ,"{'AvgLine': 22, 'CountLine': 22, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 18, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 18, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99563,C++,"class GDALWMSDataWindow {
public:
    double m_x0, m_y0;
    double m_x1, m_y1;
    int m_sx, m_sy;
    int m_tx, m_ty, m_tlevel;
    enum { BOTTOM = -1, DEFAULT = 0, TOP = 1 } m_y_origin;

    GDALWMSDataWindow() : m_x0(-180), m_y0(90), m_x1(180), m_y1(-90),
                          m_sx(-1), m_sy(-1), m_tx(0), m_ty(0),
                          m_tlevel(-1), m_y_origin(DEFAULT) {}
};",0,587 2000 123 777 58 625 2001 44 2002 59 625 2003 44 2004 59 704 2005 44 2006 59 704 2007 44 2008 44 2009 59 640 123 2010 61 45 1501 44 2011 61 1500 44 2012 61 1501 125 2013 59 2000 40 41 58 2001 40 45 1504 41 44 2002 40 1503 41 44 2003 40 1504 41 44 2004 40 45 1503 41 44 2005 40 45 1501 41 44 2006 40 45 1501 41 44 2007 40 1500 41 44 2008 40 1500 41 44 2009 40 45 1501 41 44 2013 40 2014 41 123 125 125 59 ,"{'AvgLine': 3, 'CountLine': 11, 'CountStmt': 22, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 22, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 10, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 10, 'CountDeclInstanceVariablePublic': 10, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99054,C++,    RegisterMinidriver(VirtualEarth);,0,2000 40 2001 41 59 ,"{'AvgLine': 23, 'CountLine': 23, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 19, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 19, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 19, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99055,C++,    RegisterMinidriver(WMS);,0,2000 40 2001 41 59 ,"{'AvgLine': 28, 'CountLine': 28, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 24, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 24, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 24, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99333,C++,"        class CPL_DLL ConstIterator
        {
                struct Private;
                std::unique_ptr<Private> m_poPrivate;
            public:
                ConstIterator(const OGRCurve* poSelf, bool bStart);
                ConstIterator(ConstIterator&& oOther) noexcept; // declared but not defined. Needed for gcc 5.4 at least
                ~ConstIterator();
                const OGRPoint& operator*() const;
                ConstIterator& operator++();
                bool operator!=(const ConstIterator& it) const;
        };",0,587 2000 2001 123 816 2002 59 2003 321 2004 60 2002 62 2005 59 777 58 2001 40 601 2006 42 2007 44 569 2008 41 59 2001 40 2001 307 2009 41 748 59 330 126 2001 40 41 59 601 2010 38 758 42 40 41 601 59 2001 38 758 349 40 41 59 569 758 340 40 601 2001 38 2011 41 601 59 125 59 ,"{'AvgLine': 6, 'CountLine': 36, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 8, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 36, 'CountLineCodeExe': 2, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100008,C++,"class GDALXRefEntry
{
    public:
        vsi_l_offset    nOffset = 0;
        int             nGen = 0;
        int             bFree = FALSE;

        GDALXRefEntry() = default;
        explicit GDALXRefEntry(vsi_l_offset nOffsetIn, int nGenIn = 0) : nOffset(nOffsetIn), nGen(nGenIn) {}
        GDALXRefEntry(const GDALXRefEntry& oOther) : nOffset(oOther.nOffset), nGen(oOther.nGen), bFree(oOther.bFree) {}
        GDALXRefEntry& operator= (const GDALXRefEntry& oOther) { nOffset = oOther.nOffset; nGen = oOther.nGen; bFree = oOther.bFree; return *this; }
};",0,587 2000 123 777 58 2001 2002 61 1500 59 704 2003 61 1500 59 704 2004 61 2005 59 2000 40 41 61 613 59 648 2000 40 2001 2006 44 704 2007 61 1500 41 58 2002 40 2006 41 44 2003 40 2007 41 123 125 2000 40 601 2000 38 2008 41 58 2002 40 2008 46 2002 41 44 2003 40 2008 46 2003 41 44 2004 40 2008 46 2004 41 123 125 2000 38 758 61 40 601 2000 38 2008 41 123 2002 61 2008 46 2002 59 2003 61 2008 46 2003 59 2004 61 2008 46 2004 59 792 42 823 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 11, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 10, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 46, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99104,C++,"class GDALPDFArray
{
    public:
        virtual ~GDALPDFArray();

        virtual int GetLength() = 0;
        virtual GDALPDFObject* Get(int nIndex) = 0;

        void                        Serialize(CPLString& osStr);
        CPLString                   Serialize() { CPLString osStr; Serialize(osStr); return osStr; }
        GDALPDFArrayRW*             Clone();
};",0,587 2000 123 777 58 864 126 2000 40 41 59 864 704 2001 40 41 61 1500 59 864 2002 42 2003 40 704 2004 41 61 1500 59 865 2005 40 2006 38 2007 41 59 2006 2005 40 41 123 2006 2007 59 2005 40 2007 41 59 792 2007 59 125 2008 42 2009 40 41 59 125 59 ,"{'AvgLine': 7, 'CountLine': 39, 'CountStmt': 22, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 36, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 1, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99412,C++,"class TABMAPObjArc final : public TABMAPObjHdr
{
  public:
    GInt32      m_nStartAngle;
    GInt32      m_nEndAngle;
    GInt32      m_nArcEllipseMinX;  /* MBR of the arc defining ellipse */
    GInt32      m_nArcEllipseMinY;  /* Only present in arcs            */
    GInt32      m_nArcEllipseMaxX;
    GInt32      m_nArcEllipseMaxY;
    GByte       m_nPenId;

    TABMAPObjArc():
        m_nStartAngle(0),
        m_nEndAngle(0),
        m_nArcEllipseMinX(0),
        m_nArcEllipseMinY(0),
        m_nArcEllipseMaxX(0),
        m_nArcEllipseMaxY(0),
        m_nPenId(0)
        {}
    virtual ~TABMAPObjArc() {}

    virtual int WriteObj(TABMAPObjectBlock *) override;

//  protected:
    virtual int ReadObj(TABMAPObjectBlock *) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2003 2004 59 2003 2005 59 2003 2006 59 305 2003 2007 59 305 2003 2008 59 2003 2009 59 2010 2011 59 2000 40 41 58 2004 40 1500 41 44 2005 40 1500 41 44 2006 40 1500 41 44 2007 40 1500 41 44 2008 40 1500 41 44 2009 40 1500 41 44 2011 40 1500 41 123 125 864 126 2000 40 41 123 125 864 704 2012 40 2013 42 41 2014 59 330 864 704 2015 40 2013 42 41 2014 59 125 59 ,"{'AvgLine': 14, 'CountLine': 73, 'CountStmt': 37, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 19, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 53, 'CountStmtDecl': 18, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 10, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 53, 'CountLineCodeExe': 31, 'CountLineComment': 10, 'AltAvgLineComment': 1, 'AltCountLineBlank': 14, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.19', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 7, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99859,C++,"class netCDFWriterConfigAttribute
{
  public:
    CPLString m_osName;
    CPLString m_osType;
    CPLString m_osValue;

    bool Parse(CPLXMLNode *psNode);
};",0,587 2000 123 777 58 2001 2002 59 2001 2003 59 2001 2004 59 569 2005 40 2006 42 2007 41 59 125 59 ,"{'AvgLine': 22, 'CountLine': 31, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 22, 'AvgEssential': 3, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 3, 'SumEssential': 3, 'AvgCyclomatic': 3, 'CountLineCode': 30, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 3, 'AltAvgLineCode': 22, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 30, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 6, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99777,C++,"    class OGR_SGFS_NC_Char_Transaction : public OGR_SGFS_Transaction
    {
        std::string char_rep;

        public:
            void commit(netCDFVID& n, size_t write_loc) override { n.nc_put_vvar1_text(OGR_SGFS_Transaction::getVarId(), &write_loc, char_rep.c_str()); }
            unsigned long long count() override { return char_rep.size() + sizeof(*this); } // account for actual character representation, this class
            void appendToLog(VSILFILE* f) override;
            nc_type getType() override { return NC_CHAR; }
            OGR_SGFS_NC_Char_Transaction(int i_varId, const char* pszVal) :
               char_rep(pszVal)
            {
                OGR_SGFS_Transaction::setVarId(i_varId);
            }
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 865 2005 40 2006 38 2007 44 2008 2009 41 2010 123 2007 46 2011 40 2001 321 2012 40 41 44 38 2009 44 2004 46 2013 40 41 41 59 125 856 726 726 2014 40 41 2010 123 792 2004 46 2015 40 41 43 805 40 42 823 41 59 125 330 865 2016 40 2017 42 2018 41 2010 59 2019 2020 40 41 2010 123 792 2021 59 125 2000 40 704 2022 44 601 582 42 2023 41 58 2004 40 2023 41 123 2001 321 2024 40 2022 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 29, 'CountStmt': 18, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 4, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 26, 'CountLineCodeExe': 11, 'CountLineComment': 6, 'AltAvgLineComment': 1, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.23', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99822,C++,"class GTiffJPEGOverviewDS final : public GDALDataset
{
    CPL_DISALLOW_COPY_ASSIGN(GTiffJPEGOverviewDS)

    friend class GTiffJPEGOverviewBand;
    GTiffDataset* m_poParentDS = nullptr;
    int           m_nOverviewLevel = 0;

    int        m_nJPEGTableSize = 0;
    GByte     *m_pabyJPEGTable = nullptr;
    CPLString  m_osTmpFilenameJPEGTable{};

    CPLString    m_osTmpFilename{};
    std::unique_ptr<GDALDataset> m_poJPEGDS{};
    // Valid block id of the parent DS that match poJPEGDS.
    int          m_nBlockId = -1;

  public:
    GTiffJPEGOverviewDS( GTiffDataset* poParentDS, int nOverviewLevel,
                         const void* pJPEGTable, int nJPEGTableSize );
    virtual ~GTiffJPEGOverviewDS();

    virtual CPLErr IRasterIO( GDALRWFlag eRWFlag,
                              int nXOff, int nYOff, int nXSize, int nYSize,
                              void * pData, int nBufXSize, int nBufYSize,
                              GDALDataType eBufType,
                              int nBandCount, int *panBandMap,
                              GSpacing nPixelSpace, GSpacing nLineSpace,
                              GSpacing nBandSpace,
                              GDALRasterIOExtraArg* psExtraArg ) override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 667 587 2004 59 2005 42 2006 61 753 59 704 2007 61 1500 59 704 2008 61 1500 59 2009 42 2010 61 753 59 2011 2012 123 125 59 2011 2013 123 125 59 2014 321 2015 60 2002 62 2016 123 125 59 330 704 2017 61 45 1501 59 777 58 2000 40 2005 42 2018 44 704 2019 44 601 865 42 2020 44 704 2021 41 59 864 126 2000 40 41 59 864 2022 2023 40 2024 2025 44 704 2026 44 704 2027 44 704 2028 44 704 2029 44 865 42 2030 44 704 2031 44 704 2032 44 2033 2034 44 704 2035 44 704 42 2036 44 2037 2038 44 2037 2039 44 2037 2040 44 2041 42 2042 41 2043 59 125 59 ,"{'AvgLine': 28, 'CountLine': 116, 'CountStmt': 41, 'MaxNesting': 1, 'AvgLineCode': 25, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 26, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 3, 'CountLineCode': 100, 'CountStmtDecl': 19, 'MaxCyclomatic': 5, 'SumCyclomatic': 9, 'AltAvgLineCode': 25, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 100, 'CountLineCodeExe': 49, 'CountLineComment': 4, 'AltAvgLineComment': 1, 'AltCountLineBlank': 12, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 24, 'CountLineInactive': 0, 'CountDeclMethodAll': 147, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 3, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 7, 'CountDeclInstanceVariableProtected': 0}"
99053,C++,    RegisterMinidriver(TiledWMS);,0,2000 40 2001 41 59 ,"{'AvgLine': 24, 'CountLine': 24, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 20, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 20, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 20, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98904,C++,"       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };",0,587 2000 123 569 2001 59 2002 2003 59 777 58 865 2004 40 41 123 688 40 2001 41 123 2005 40 2003 41 59 2001 61 655 59 125 125 2000 40 41 58 2001 40 829 41 44 2003 40 2006 40 41 41 123 125 126 2000 40 41 123 2004 40 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 8, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99056,C++,    RegisterMinidriver(WorldWind);,0,2000 40 2001 41 59 ,"{'AvgLine': 26, 'CountLine': 26, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 22, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 22, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 22, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 3, 'AltCountLineCode': 22, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99627,C++,"class GDALWMSCacheImpl
{
public:
    GDALWMSCacheImpl(const CPLString& soPath, CPLXMLNode * /*pConfig*/) :
        m_soPath(soPath) {}
    virtual ~GDALWMSCacheImpl() {}
    virtual CPLErr Insert(const char *pszKey, const CPLString &osFileName) = 0;
    virtual enum GDALWMSCacheItemStatus GetItemStatus(const char *pszKey) const = 0;
    virtual GDALDataset* GetDataset(const char *pszKey,
                                    char **papszOpenOptions) const = 0;
    virtual void Clean() = 0;
    virtual int GetCleanThreadRunTimeout() = 0;
protected:
    CPLString m_soPath;
};",0,587 2000 123 777 58 2000 40 601 2001 38 2002 44 2003 42 305 41 58 2004 40 2002 41 123 125 864 126 2000 40 41 123 125 864 2005 2006 40 601 582 42 2007 44 601 2001 38 2008 41 61 1500 59 864 640 2009 2010 40 601 582 42 2007 41 601 61 1500 59 864 2011 42 2012 40 601 582 42 2007 44 582 42 42 2013 41 601 61 1500 59 864 865 2014 40 41 61 1500 59 864 704 2015 40 41 61 1500 59 775 58 2001 2004 59 125 59 ,"{'AvgLine': 1, 'CountLine': 15, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 15, 'CountLineCodeExe': 1, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 3, 'CountClassDerived': 1, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
98885,C++,"class OGRIdrisiDriver final: public OGRSFDriver
{
  public:
    virtual ~OGRIdrisiDriver();

    virtual const char*         GetName() override;
    virtual OGRDataSource*      Open( const char *, int ) override;
    virtual int                 TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 864 126 2000 40 41 59 864 601 582 42 2003 40 41 2004 59 864 2005 42 2006 40 601 582 42 44 704 41 2004 59 864 704 2007 40 601 582 42 41 2004 59 125 59 ,"{'AvgLine': 8, 'CountLine': 43, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 5, 'MaxCyclomatic': 4, 'SumCyclomatic': 7, 'AltAvgLineCode': 6, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 33, 'CountLineCodeExe': 8, 'CountLineComment': 4, 'AltAvgLineComment': 1, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 44, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98953,C++,"class GMLRegistryFeatureType
{
    public:
        CPLString                           osElementName;
        CPLString                           osElementValue;
        CPLString                           osSchemaLocation;
        CPLString                           osGFSSchemaLocation;

        bool Parse(const char* pszRegistryFilename, CPLXMLNode* psNode);
};",0,587 2000 123 777 58 2001 2002 59 2001 2003 59 2001 2004 59 2001 2005 59 569 2006 40 601 582 42 2007 44 2008 42 2009 41 59 125 59 ,"{'AvgLine': 45, 'CountLine': 55, 'CountStmt': 23, 'MaxNesting': 2, 'AvgLineCode': 41, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 7, 'CountLineCode': 50, 'CountStmtDecl': 9, 'MaxCyclomatic': 7, 'SumCyclomatic': 7, 'AltAvgLineCode': 41, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 1, 'AltCountLineCode': 50, 'CountLineCodeExe': 25, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 13, 'MaxCyclomaticStrict': 13, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 7, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98973,C++,"class OGROCIStringBuf
{
  char *pszString;
  int  nLen;
  int  nBufSize;

  void UpdateEnd();

public:

    OGROCIStringBuf();
    ~OGROCIStringBuf();

    void MakeRoomFor( int );
    void Append( const char * );
    void Appendf( int nMax, const char *pszFormat, ... ) CPL_PRINT_FUNC_FORMAT (3, 4);
    char *StealString();

    char GetLast();
    char *GetEnd() { UpdateEnd(); return pszString + nLen; }
    char *GetString() { return pszString; }

    void Clear();
};",0,587 2000 123 582 42 2001 59 704 2002 59 704 2003 59 865 2004 40 41 59 777 58 2000 40 41 59 126 2000 40 41 59 865 2005 40 704 41 59 865 2006 40 601 582 42 41 59 865 2007 40 704 2008 44 601 582 42 2009 44 322 41 2010 40 1502 44 1502 41 59 582 42 2011 40 41 59 582 2012 40 41 59 582 42 2013 40 41 123 2004 40 41 59 792 2001 43 2002 59 125 582 42 2014 40 41 123 792 2001 59 125 865 2015 40 41 59 125 59 ,"{'AvgLine': 7, 'CountLine': 106, 'CountStmt': 53, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 35, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 85, 'CountStmtDecl': 19, 'MaxCyclomatic': 3, 'SumCyclomatic': 15, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 11, 'AltCountLineCode': 85, 'CountLineCodeExe': 49, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 36, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99030,C++,"class Sized : public Object {
 public:
  // Size prefix.
  Sized(const uint8_t *data, uint8_t byte_width)
      : Object(data, byte_width), size_(read_size()) {}
  // Manual size.
  Sized(const uint8_t *data, uint8_t byte_width, size_t sz)
      : Object(data, byte_width), size_(sz) {}
  size_t size() const { return size_; }
  // Access size stored in `byte_width_` bytes before data_ pointer.
  size_t read_size() const {
    return static_cast<size_t>(ReadUInt64(data_ - byte_width_, byte_width_));
  }

 protected:
  size_t size_;
};",0,587 2000 58 777 2001 123 777 58 330 2000 40 601 2002 42 2003 44 2002 2004 41 58 2001 40 2003 44 2004 41 44 2005 40 2006 40 41 41 123 125 330 2000 40 601 2002 42 2003 44 2002 2004 44 2007 2008 41 58 2001 40 2003 44 2004 41 44 2005 40 2008 41 123 125 2007 2009 40 41 601 123 792 2005 59 125 330 2007 2006 40 41 601 123 792 811 60 2007 62 40 2010 40 2011 45 2012 44 2012 41 41 59 125 775 58 2007 2005 59 125 59 ,"{'AvgLine': 2, 'CountLine': 17, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 13, 'CountLineCodeExe': 4, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 4, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.23', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 57, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
99079,C++,"class VFKProperty
{
private:
    bool                    m_bIsNull;

    GIntBig                 m_iValue;
    double                  m_dValue;
    CPLString               m_strValue;

public:
    VFKProperty();
    explicit VFKProperty(int);
    explicit VFKProperty(GIntBig);
    explicit VFKProperty(double);
    explicit VFKProperty(const char*);
    explicit VFKProperty(CPLString const&);
    virtual ~VFKProperty();

    VFKProperty(VFKProperty const& other) = default;
    VFKProperty& operator=(VFKProperty const&) = default;
    VFKProperty& operator=(VFKProperty&&) = default;

    bool                    IsNull()      const { return m_bIsNull; }
    int                     GetValueI()   const { return static_cast<int> (m_iValue); }
    GIntBig                 GetValueI64() const { return m_iValue; }
    double                  GetValueD()   const { return m_dValue; }
    const char             *GetValueS( bool = false ) const;
};",0,587 2000 123 773 58 569 2001 59 2002 2003 59 625 2004 59 2005 2006 59 777 58 2000 40 41 59 648 2000 40 704 41 59 648 2000 40 2002 41 59 648 2000 40 625 41 59 648 2000 40 601 582 42 41 59 648 2000 40 2005 601 38 41 59 864 126 2000 40 41 59 2000 40 2000 601 38 2007 41 61 613 59 2000 38 758 61 40 2000 601 38 41 61 613 59 2000 38 758 61 40 2000 307 41 61 613 59 569 2008 40 41 601 123 792 2001 59 125 704 2009 40 41 601 123 792 811 60 704 62 40 2003 41 59 125 2002 2010 40 41 601 123 792 2003 59 125 625 2011 40 41 601 123 792 2004 59 125 601 582 42 2012 40 569 61 655 41 601 59 125 59 ,"{'AvgLine': 4, 'CountLine': 75, 'CountStmt': 40, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 69, 'CountStmtDecl': 31, 'MaxCyclomatic': 3, 'SumCyclomatic': 14, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 15, 'AltCountLineCode': 69, 'CountLineCodeExe': 24, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 15, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99202,C++,"class DXFSmoothPolylineVertex
{
public:
    double x;
    double y;
    double z;
    double bulge;

    DXFSmoothPolylineVertex()
        {
            x = y = z = bulge = 0.0;
        }

    DXFSmoothPolylineVertex( double dfX, double dfY, double dfZ,
                             double dfBulge )
        {
            set(dfX, dfY, dfZ, dfBulge);
        }

    void set( double dfX, double dfY, double dfZ, double dfBulge )
        {
            x = dfX;
            y = dfY;
            z = dfZ;
            bulge = dfBulge;
        }

    void scale(double s)
        {
            x *= s;
            y *= s;
        }

    double length() const
        {
            return (sqrt(x*x + y*y));
        }

    void normalize()
        {
            const double len = length();
            assert(len != 0.0);

            x /= len;
            y /= len;
        }

    bool shares_2D_pos(const DXFSmoothPolylineVertex& v) const
        {
            return (x == v.x && y == v.y);
        }
};",0,587 2000 123 777 58 625 2001 59 625 2002 59 625 2003 59 625 2004 59 2000 40 41 123 2001 61 2002 61 2003 61 2004 61 1500 59 125 2000 40 625 2005 44 625 2006 44 625 2007 44 625 2008 41 123 2009 40 2005 44 2006 44 2007 44 2008 41 59 125 865 2010 40 625 2005 44 625 2006 44 625 2007 44 625 2008 41 123 2001 61 2005 59 2002 61 2006 59 2003 61 2007 59 2004 61 2008 59 125 865 2011 40 625 2012 41 123 2001 363 2012 59 2002 363 2012 59 125 625 2013 40 41 601 123 792 40 2014 40 2001 42 2001 43 2002 42 2002 41 41 59 125 865 2015 40 41 123 601 625 2016 61 2013 40 41 59 2017 40 2016 340 1500 41 59 2001 316 2016 59 2002 316 2016 59 125 569 2018 40 601 2000 38 2019 41 601 123 792 40 2001 323 2019 46 2001 307 2002 323 2019 46 2002 41 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 52, 'CountStmt': 25, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 8, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 44, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99441,C++,"class OGRRawPoint
{
  public:
          /** Constructor */
          OGRRawPoint() : x(0.0), y(0.0) {}

          /** Constructor */
          OGRRawPoint(double xIn, double yIn) : x(xIn), y(yIn) {}

    /** x */
    double      x;
    /** y */
    double      y;
};",0,587 2000 123 777 58 306 2000 40 41 58 2001 40 1500 41 44 2002 40 1500 41 123 125 306 2000 40 625 2003 44 625 2004 41 58 2001 40 2003 41 44 2002 40 2004 41 123 125 306 625 2001 59 306 625 2002 59 125 59 ,"{'AvgLine': 1, 'CountLine': 14, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 8, 'CountLineCodeExe': 2, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.50', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99479,C++,"class FGdbDatabaseConnection
{
public:
    FGdbDatabaseConnection(CPLString osName, Geodatabase* pGeodatabase) :
        m_osName(osName), m_pGeodatabase(pGeodatabase), m_nRefCount(1), m_bLocked(FALSE),
        m_bFIDHackInProgress(FALSE) {}

    CPLString    m_osName;
    Geodatabase* m_pGeodatabase;
    int          m_nRefCount;
    int          m_bLocked;
    int          m_bFIDHackInProgress;

    Geodatabase* GetGDB() { return m_pGeodatabase; }
    void         SetLocked(int bLockedIn) { m_bLocked = bLockedIn; }
    int          GetRefCount() const { return m_nRefCount; }
    int          IsLocked() const { return m_bLocked; }

    int          IsFIDHackInProgress() const { return m_bFIDHackInProgress; }
    void         SetFIDHackInProgress(int bFlag) { m_bFIDHackInProgress = bFlag; }
    int          OpenGeodatabase(const char* pszOverriddenName);
    void         CloseGeodatabase();
};",0,587 2000 123 777 58 2000 40 2001 2002 44 2003 42 2004 41 58 2005 40 2002 41 44 2006 40 2004 41 44 2007 40 1501 41 44 2008 40 2009 41 44 2010 40 2009 41 123 125 2001 2005 59 2003 42 2006 59 704 2007 59 704 2008 59 704 2010 59 2003 42 2011 40 41 123 792 2006 59 125 865 2012 40 704 2013 41 123 2008 61 2013 59 125 704 2014 40 41 601 123 792 2007 59 125 704 2015 40 41 601 123 792 2008 59 125 704 2016 40 41 601 123 792 2010 59 125 865 2017 40 704 2018 41 123 2010 61 2018 59 125 704 2019 40 601 582 42 2020 41 59 865 2021 40 41 59 125 59 ,"{'AvgLine': 3, 'CountLine': 45, 'CountStmt': 30, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 42, 'CountStmtDecl': 20, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 42, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99503,C++,"class MVTTile
{
        std::vector<std::shared_ptr<MVTTileLayer>> m_apoLayers;
        mutable size_t m_nCachedSize = 0;
        mutable bool m_bCachedSize = false;

    public:
        MVTTile();

        const std::vector<std::shared_ptr<MVTTileLayer>>& getLayers() const
            { return m_apoLayers; }

        void clear() { m_apoLayers.clear(); invalidateCachedSize(); }
        void addLayer(std::shared_ptr<MVTTileLayer> poLayer);
        size_t getSize() const;
        void write(GByte** ppabyData) const;
        void write(GByte* pabyData) const;
        std::string write() const;
#ifdef ADD_MVT_TILE_READ
        bool read(const GByte** ppabyData, const GByte* pabyEnd);
        bool read(const GByte* pabyData, const GByte* pabyEnd);
#endif
        void invalidateCachedSize() { m_bCachedSize = false; m_nCachedSize = 0; }
};",0,587 2000 123 2001 321 2002 60 2001 321 2003 60 2004 355 2005 59 740 2006 2007 61 1500 59 740 569 2008 61 655 59 777 58 2000 40 41 59 601 2001 321 2002 60 2001 321 2003 60 2004 355 38 2009 40 41 601 123 792 2005 59 125 865 2010 40 41 123 2005 46 2010 40 41 59 2011 40 41 59 125 865 2012 40 2001 321 2003 60 2004 62 2013 41 59 2006 2014 40 41 601 59 865 2015 40 2016 42 42 2017 41 601 59 865 2015 40 2016 42 2018 41 601 59 2001 321 2019 2015 40 41 601 59 35 689 2020 569 2021 40 601 2016 42 42 2017 44 601 2016 42 2022 41 59 569 2021 40 601 2016 42 2018 44 601 2016 42 2022 41 59 35 636 865 2023 40 41 123 2008 61 655 59 2007 61 1500 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 75, 'CountStmt': 50, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 31, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 68, 'CountStmtDecl': 27, 'MaxCyclomatic': 3, 'SumCyclomatic': 13, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 70, 'CountLineCodeExe': 27, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 79, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 16, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99489,C++,"template<typename T> class SymbolTable {
 public:
  ~SymbolTable() {
    for (auto it = vec.begin(); it != vec.end(); ++it) { delete *it; }
  }

  bool Add(const std::string &name, T *e) {
    vector_emplace_back(&vec, e);
    auto it = dict.find(name);
    if (it != dict.end()) return true;
    dict[name] = e;
    return false;
  }

  void Move(const std::string &oldname, const std::string &newname) {
    auto it = dict.find(oldname);
    if (it != dict.end()) {
      auto obj = it->second;
      dict.erase(it);
      dict[newname] = obj;
    } else {
      FLATBUFFERS_ASSERT(false);
    }
  }

  T *Lookup(const std::string &name) const {
    auto it = dict.find(name);
    return it == dict.end() ? nullptr : it->second;
  }

 public:
  std::map<std::string, T *> dict;  // quick lookup
  std::vector<T *> vec;             // Used to iterate in order of insertion
};",0,822 60 835 2000 62 587 2001 123 777 58 126 2001 40 41 123 664 40 561 2002 61 2003 46 2004 40 41 59 2002 340 2003 46 2005 40 41 59 349 2002 41 123 619 42 2002 59 125 125 569 2006 40 601 2007 321 2008 38 2009 44 2000 42 2010 41 123 2011 40 38 2012 44 2010 41 59 561 2013 61 2014 46 2015 40 2009 41 59 688 40 2013 340 2014 46 2016 40 41 41 792 829 59 2014 91 2009 93 61 2010 59 792 655 59 125 865 2017 40 601 2007 321 2008 38 2018 44 601 2007 321 2008 38 2019 41 123 561 2020 61 2021 46 2022 40 2018 41 59 688 40 2020 340 2021 46 2023 40 41 41 123 561 2024 61 2020 354 2025 59 2021 46 2026 40 2020 41 59 2021 91 2019 93 61 2024 59 125 630 123 2027 40 655 41 59 125 125 2000 42 2028 40 601 2007 321 2008 38 2009 41 601 123 561 2029 61 2030 46 2031 40 2009 41 59 792 2029 323 2030 46 2032 40 41 63 753 58 2029 354 2033 59 125 777 58 2007 321 2034 60 2007 321 2008 44 2000 42 62 2035 59 330 2007 321 2036 60 2000 42 62 2037 59 330 125 59 ,"{'AvgLine': 6, 'CountLine': 34, 'CountStmt': 23, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 30, 'CountStmtDecl': 11, 'MaxCyclomatic': 3, 'SumCyclomatic': 9, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 30, 'CountLineCodeExe': 14, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 37, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100185,C++,"class XYBufferSetter
{
        GByte* pabyBuffer;
    public:
        explicit XYBufferSetter(GByte* pabyBufferIn) :
                                                    pabyBuffer(pabyBufferIn) {}

        void set(int i, double dfX, double dfY)
        {
            CPL_LSBPTR64(&dfX);
            memcpy( pabyBuffer + 16 * i, &dfX, 8 );
            CPL_LSBPTR64(&dfY);
            memcpy( pabyBuffer + 16 * i + 8, &dfY, 8 );
        }
};",0,587 2000 123 2001 42 2002 59 777 58 648 2000 40 2001 42 2003 41 58 2002 40 2003 41 123 125 865 2004 40 704 2005 44 625 2006 44 625 2007 41 123 2008 40 38 2006 41 59 2009 40 2002 43 1503 42 2005 44 38 2006 44 1502 41 59 2008 40 38 2007 41 59 2009 40 2002 43 1503 42 2005 43 1502 44 38 2007 44 1502 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 15, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 14, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99542,C++,"class GMLASResourceCache
{
    protected:
                bool            m_bHasCheckedCacheDirectory;
                CPLString       m_osCacheDirectory;
                bool            m_bRefresh;
                bool            m_bAllowDownload;
                std::set<CPLString> m_aoSetRefreshedFiles;

                static bool RecursivelyCreateDirectoryIfNeeded(
                                                const CPLString& osDirname);
                bool RecursivelyCreateDirectoryIfNeeded();

                CPLString GetCachedFilename(const CPLString& osResource);

    public:
                             GMLASResourceCache();
                    virtual ~GMLASResourceCache();

                    void    SetCacheDirectory(const CPLString& osCacheDirectory);
                    void    SetRefreshMode(bool bRefresh)
                                            { m_bRefresh = bRefresh; }
                    void    SetAllowDownload(bool bVal)
                                    { m_bAllowDownload = bVal; }
};",0,587 2000 123 775 58 569 2001 59 2002 2003 59 569 2004 59 569 2005 59 2006 321 2007 60 2002 62 2008 59 809 569 2009 40 601 2002 38 2010 41 59 569 2009 40 41 59 2002 2011 40 601 2002 38 2012 41 59 777 58 2000 40 41 59 864 126 2000 40 41 59 865 2013 40 601 2002 38 2014 41 59 865 2015 40 569 2016 41 123 2004 61 2016 59 125 865 2017 40 569 2018 41 123 2005 61 2018 59 125 125 59 ,"{'AvgLine': 12, 'CountLine': 118, 'CountStmt': 56, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 32, 'MaxEssential': 4, 'SumEssential': 13, 'AvgCyclomatic': 2, 'CountLineCode': 103, 'CountStmtDecl': 26, 'MaxCyclomatic': 7, 'SumCyclomatic': 19, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 103, 'CountLineCodeExe': 61, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 2, 'CountClassDerived': 2, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 88, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 3}"
99579,C++,"class OGRSQLiteExtensionData
{
#ifdef DEBUG
    void* pDummy; /* to track memory leaks */
#endif
    std::map< std::pair<int,int>, OGRCoordinateTransformation*> oCachedTransformsMap;

    void* hRegExpCache;

    OGRGeocodingSessionH hGeocodingSession;

  public:
    explicit                     OGRSQLiteExtensionData(sqlite3* hDB);
                                ~OGRSQLiteExtensionData();

    OGRCoordinateTransformation* GetTransform(int nSrcSRSId, int nDstSRSId);

    OGRGeocodingSessionH         GetGeocodingSession() { return hGeocodingSession; }
    void                         SetGeocodingSession(OGRGeocodingSessionH hGeocodingSessionIn) { hGeocodingSession = hGeocodingSessionIn; }

    void                         SetRegExpCache(void* hRegExpCacheIn) { hRegExpCache = hRegExpCacheIn; }
};",0,587 2000 123 35 689 2001 865 42 2002 59 305 35 636 2003 321 2004 60 2003 321 2005 60 704 44 704 62 44 2006 42 62 2007 59 865 42 2008 59 2009 2010 59 777 58 648 2000 40 2011 42 2012 41 59 126 2000 40 41 59 2006 42 2013 40 704 2014 44 704 2015 41 59 2009 2016 40 41 123 792 2010 59 125 865 2017 40 2009 2018 41 123 2010 61 2018 59 125 865 2019 40 865 42 2020 41 123 2008 61 2020 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 66, 'CountStmt': 28, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 48, 'CountStmtDecl': 16, 'MaxCyclomatic': 3, 'SumCyclomatic': 8, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 57, 'CountLineCodeExe': 16, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 3, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 6, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99556,C++,"class OGRSVGLayer final: public OGRLayer
{
    OGRFeatureDefn*    poFeatureDefn;
    OGRSpatialReference *poSRS;
#ifdef HAVE_EXPAT
    OGRSVGDataSource*  poDS;
#endif
    CPLString          osLayerName;

    SVGGeometryType    svgGeomType;

    int                nTotalFeatures;
    int                nNextFID;
    VSILFILE*          fpSVG;  // Large file API.

#ifdef HAVE_EXPAT
    XML_Parser         oParser;
    XML_Parser         oSchemaParser;
#endif
    char*              pszSubElementValue;
    int                nSubElementValueLen;
    int                iCurrentField;

    OGRFeature*        poFeature;
    OGRFeature **      ppoFeatureTab;
    int                nFeatureTabLength;
    int                nFeatureTabIndex;

    int                depthLevel;
    int                interestingDepthLevel;
    bool               inInterestingElement;

    bool               bStopParsing;
#ifdef HAVE_EXPAT
    int                nWithoutEventCounter;
    int                nDataHandlerCounter;

    OGRSVGLayer       *poCurLayer;
#endif

  private:
    void               LoadSchema();

  public:
                        OGRSVGLayer(const char *pszFilename,
                                    const char* layerName,
                                    SVGGeometryType svgGeomType,
                                    OGRSVGDataSource* poDS);
                        virtual ~OGRSVGLayer();

    virtual void                ResetReading() override;
    virtual OGRFeature *        GetNextFeature() override;

    virtual const char*         GetName() override { return osLayerName.c_str(); }
    virtual OGRwkbGeometryType  GetGeomType() override;

    virtual GIntBig             GetFeatureCount( int bForce = TRUE ) override;

    virtual OGRFeatureDefn *    GetLayerDefn() override;

    virtual int                 TestCapability( const char * ) override;

#ifdef HAVE_EXPAT
    void                startElementCbk(const char *pszName, const char **ppszAttr);
    void                endElementCbk(const char *pszName);
    void                dataHandlerCbk(const char *data, int nLen);

    void                startElementLoadSchemaCbk(const char *pszName, const char **ppszAttr);
    void                endElementLoadSchemaCbk(const char *pszName);
    void                dataHandlerLoadSchemaCbk(const char *data, int nLen);
#endif
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2005 42 2006 59 35 689 2007 2008 42 2009 59 35 636 2010 2011 59 2012 2013 59 704 2014 59 704 2015 59 2016 42 2017 59 330 35 689 2007 2018 2019 59 2018 2020 59 35 636 582 42 2021 59 704 2022 59 704 2023 59 2024 42 2025 59 2024 42 42 2026 59 704 2027 59 704 2028 59 704 2029 59 704 2030 59 569 2031 59 569 2032 59 35 689 2007 704 2033 59 704 2034 59 2000 42 2035 59 35 636 773 58 865 2036 40 41 59 777 58 2000 40 601 582 42 2037 44 601 582 42 2038 44 2012 2013 44 2008 42 2009 41 59 864 126 2000 40 41 59 864 865 2039 40 41 2040 59 864 2024 42 2041 40 41 2040 59 864 601 582 42 2042 40 41 2040 123 792 2011 46 2043 40 41 59 125 864 2044 2045 40 41 2040 59 864 2046 2047 40 704 2048 61 2049 41 2040 59 864 2003 42 2050 40 41 2040 59 864 704 2051 40 601 582 42 41 2040 59 35 689 2007 865 2052 40 601 582 42 2053 44 601 582 42 42 2054 41 59 865 2055 40 601 582 42 2053 41 59 865 2056 40 601 582 42 2057 44 704 2058 41 59 865 2059 40 601 582 42 2053 44 601 582 42 42 2054 41 59 865 2060 40 601 582 42 2053 41 59 865 2061 40 601 582 42 2057 44 704 2058 41 59 35 636 125 59 ,"{'AvgLine': 24, 'CountLine': 313, 'CountStmt': 109, 'MaxNesting': 1, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 66, 'MaxEssential': 3, 'SumEssential': 16, 'AvgCyclomatic': 2, 'CountLineCode': 177, 'CountStmtDecl': 47, 'MaxCyclomatic': 6, 'SumCyclomatic': 26, 'AltAvgLineCode': 21, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 37, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 10, 'AltCountLineCode': 267, 'CountLineCodeExe': 126, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 46, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 18, 'CountLineInactive': 76, 'CountDeclMethodAll': 92, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 28, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 23, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 79, 'SumCyclomaticModified': 26, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 18, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 18, 'CountDeclInstanceVariableProtected': 0}"
99629,C++,"class OGRAmigoCloudFID
{
    public:
        GIntBig iIndex;
        GIntBig iFID;
        std::string osAmigoId;

        OGRAmigoCloudFID(const std::string &amigo_id, GIntBig index) :
            iIndex( index ),
            iFID( std::abs((long)CPLHashSetHashStr(amigo_id.c_str())) ),
            osAmigoId( amigo_id )
        {
        }

        OGRAmigoCloudFID()
        {
            iIndex=0;
            iFID=0;
        }

        OGRAmigoCloudFID(const OGRAmigoCloudFID& fid) = default;
        OGRAmigoCloudFID& operator=(const OGRAmigoCloudFID& fid) = default;
};",0,587 2000 123 777 58 2001 2002 59 2001 2003 59 2004 321 2005 2006 59 2000 40 601 2004 321 2005 38 2007 44 2001 2008 41 58 2002 40 2008 41 44 2003 40 2004 321 2009 40 40 726 41 2010 40 2007 46 2011 40 41 41 41 41 44 2006 40 2007 41 123 125 2000 40 41 123 2002 61 1500 59 2003 61 1500 59 125 2000 40 601 2000 38 2012 41 61 613 59 2000 38 758 61 40 601 2000 38 2012 41 61 613 59 125 59 ,"{'AvgLine': 5, 'CountLine': 23, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 20, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 86, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99595,C++,"class OGRDXFBlocksLayer final: public OGRLayer
{
    OGRDXFDataSource   *poDS;

    OGRFeatureDefn     *poFeatureDefn;

    GIntBig             iNextFID;

    std::map<CPLString,DXFBlockDefinition>::iterator oIt;
    CPLString           osBlockName;

    OGRDXFFeatureQueue apoPendingFeatures;

  public:
    explicit OGRDXFBlocksLayer( OGRDXFDataSource *poDS );
    ~OGRDXFBlocksLayer();

    void                ResetReading() override;
    OGRFeature *        GetNextFeature() override;

    OGRFeatureDefn *    GetLayerDefn() override { return poFeatureDefn; }

    int                 TestCapability( const char * ) override;

    OGRDXFFeature *     GetNextUnfilteredFeature();
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2005 42 2006 59 2007 2008 59 2009 321 2010 60 2011 44 2012 62 321 2013 2014 59 2011 2015 59 2016 2017 59 777 58 648 2000 40 2003 42 2004 41 59 126 2000 40 41 59 865 2018 40 41 2019 59 2020 42 2021 40 41 2019 59 2005 42 2022 40 41 2019 123 792 2006 59 125 704 2023 40 601 582 42 41 2019 59 2024 42 2025 40 41 59 125 59 ,"{'AvgLine': 21, 'CountLine': 172, 'CountStmt': 46, 'MaxNesting': 2, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 29, 'MaxEssential': 4, 'SumEssential': 10, 'AvgCyclomatic': 2, 'CountLineCode': 132, 'CountStmtDecl': 19, 'MaxCyclomatic': 4, 'SumCyclomatic': 17, 'AltAvgLineCode': 16, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 31, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 7, 'AltCountLineCode': 132, 'CountLineCodeExe': 32, 'CountLineComment': 9, 'AltAvgLineComment': 1, 'AltCountLineBlank': 31, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 89, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 9, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99645,C++,"class CPL_UNSTABLE_API swq_select_parse_options
{
public:
    swq_custom_func_registrar* poCustomFuncRegistrar;
    int                        bAllowFieldsInSecondaryTablesInWhere;
    int                        bAddSecondaryTablesGeometryFields;
    int                        bAlwaysPrefixWithTableName;
    int                        bAllowDistinctOnGeometryField;
    int                        bAllowDistinctOnMultipleFields;

                    swq_select_parse_options(): poCustomFuncRegistrar(nullptr),
                                                bAllowFieldsInSecondaryTablesInWhere(FALSE),
                                                bAddSecondaryTablesGeometryFields(FALSE),
                                                bAlwaysPrefixWithTableName(FALSE),
                                                bAllowDistinctOnGeometryField(FALSE),
                                                bAllowDistinctOnMultipleFields(FALSE) {}
};",0,587 2000 2001 123 777 58 2002 42 2003 59 704 2004 59 704 2005 59 704 2006 59 704 2007 59 704 2008 59 2001 40 41 58 2003 40 753 41 44 2004 40 2009 41 44 2005 40 2009 41 44 2006 40 2009 41 44 2007 40 2009 41 44 2008 40 2009 41 123 125 125 59 ,"{'AvgLine': 6, 'CountLine': 17, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 16, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 16, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100213,C++,"class CADDimensionLinearObject final: public CADDimensionObject
{
public:
    CADDimensionLinearObject();
    virtual ~CADDimensionLinearObject(){}
    CADVector vert13pt, vert14pt;

    double dfExtLnRot;
    double dfDimRot;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 44 2005 59 625 2006 59 625 2007 59 125 59 ,"{'AvgLine': 3, 'CountLine': 16, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 15, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99830,C++,"class GCPCoordTransformation : public OGRCoordinateTransformation
{
    GCPCoordTransformation(const GCPCoordTransformation& other):
        hTransformArg(GDALCloneTransformer(other.hTransformArg)),
        bUseTPS(other.bUseTPS),
        poSRS(other.poSRS)
    {
        if( poSRS)
            poSRS->Reference();
    }

    GCPCoordTransformation& operator= (const GCPCoordTransformation&) = delete;

public:

    void               *hTransformArg;
    bool                 bUseTPS;
    OGRSpatialReference* poSRS;

    GCPCoordTransformation( int nGCPCount,
                            const GDAL_GCP *pasGCPList,
                            int  nReqOrder,
                            OGRSpatialReference* poSRSIn) :
        hTransformArg(nullptr),
        bUseTPS(nReqOrder < 0),
        poSRS(poSRSIn)
    {
        if( nReqOrder < 0 )
        {
            hTransformArg =
                GDALCreateTPSTransformer( nGCPCount, pasGCPList, FALSE );
        }
        else
        {
            hTransformArg =
                GDALCreateGCPTransformer( nGCPCount, pasGCPList, nReqOrder, FALSE );
        }
        if( poSRS)
            poSRS->Reference();
    }

    OGRCoordinateTransformation* Clone() const override {
        return new GCPCoordTransformation(*this);
    }

    bool IsValid() const { return hTransformArg != nullptr; }

    virtual ~GCPCoordTransformation()
    {
        if( hTransformArg != nullptr )
        {
            GDALDestroyTransformer(hTransformArg);
        }
        if( poSRS)
            poSRS->Dereference();
    }

    virtual OGRSpatialReference *GetSourceCS() override { return poSRS; }
    virtual OGRSpatialReference *GetTargetCS() override { return poSRS; }

    virtual int Transform( int nCount,
                           double *x, double *y, double *z,
                           double * /* t */,
                           int *pabSuccess ) override
    {
        if( bUseTPS )
            return GDALTPSTransform( hTransformArg, FALSE,
                                 nCount, x, y, z, pabSuccess );
        else
            return GDALGCPTransform( hTransformArg, FALSE,
                                 nCount, x, y, z, pabSuccess );
    }

    virtual OGRCoordinateTransformation* GetInverse() const override { return nullptr; }
};",0,587 2000 58 777 2001 123 2000 40 601 2000 38 2002 41 58 2003 40 2004 40 2002 46 2003 41 41 44 2005 40 2002 46 2005 41 44 2006 40 2002 46 2006 41 123 688 40 2006 41 2006 354 2007 40 41 59 125 2000 38 758 61 40 601 2000 38 41 61 619 59 777 58 865 42 2003 59 569 2005 59 2008 42 2006 59 2000 40 704 2009 44 601 2010 42 2011 44 704 2012 44 2008 42 2013 41 58 2003 40 753 41 44 2005 40 2012 60 1500 41 44 2006 40 2013 41 123 688 40 2012 60 1500 41 123 2003 61 2014 40 2009 44 2011 44 2015 41 59 125 630 123 2003 61 2016 40 2009 44 2011 44 2012 44 2017 41 59 125 688 40 2006 41 2006 354 2018 40 41 59 125 2001 42 2019 40 41 601 2020 123 792 744 2000 40 42 823 41 59 125 569 2021 40 41 601 123 792 2003 340 753 59 125 864 126 2000 40 41 123 688 40 2003 340 753 41 123 2022 40 2003 41 59 125 688 40 2006 41 2006 354 2023 40 41 59 125 864 2008 42 2024 40 41 2020 123 792 2006 59 125 864 2008 42 2025 40 41 2020 123 792 2006 59 125 864 704 2026 40 704 2027 44 625 42 2028 44 625 42 2029 44 625 42 2030 44 625 42 305 44 704 42 2031 41 2020 123 688 40 2005 41 792 2032 40 2003 44 2033 44 2027 44 2028 44 2029 44 2030 44 2031 41 59 630 792 2034 40 2003 44 2033 44 2027 44 2028 44 2029 44 2030 44 2031 41 59 125 864 2001 42 2035 40 41 601 2020 123 792 753 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 75, 'CountStmt': 37, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 65, 'CountStmtDecl': 17, 'MaxCyclomatic': 3, 'SumCyclomatic': 15, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 65, 'CountLineCodeExe': 31, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 56, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99803,C++,"class AODataSource final: public OGRDataSource
{

public:
  AODataSource();
  virtual ~AODataSource();

  int         Open(IWorkspace* pWorkspace, const char *, int );

  const char* GetName() override { return m_pszName; }
  int         GetLayerCount() override { return static_cast<int>(m_layers.size()); }

  OGRLayer*   GetLayer( int ) override;

  /*
  virtual OGRLayer* ICreateLayer( const char *,
                                 OGRSpatialReference* = NULL,
                                 OGRwkbGeometryType = wkbUnknown,
                                 char** = NULL );

 */
  virtual OGRErr DeleteLayer( int ) override;

  int TestCapability( const char * ) override;

  /*
protected:

  void EnumerateSpatialTables();
  void OpenSpatialTable( const char* pszTableName );
*/
protected:
  bool LoadLayers(IEnumDataset* pEnumDataset);

  char* m_pszName;
  std::vector <AOLayer*> m_layers;
  IWorkspacePtr m_ipWorkspace;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 59 704 2003 40 2004 42 2005 44 601 582 42 44 704 41 59 601 582 42 2006 40 41 2007 123 792 2008 59 125 704 2009 40 41 2007 123 792 811 60 704 62 40 2010 46 2011 40 41 41 59 125 2012 42 2013 40 704 41 2007 59 305 864 2014 2015 40 704 41 2007 59 704 2016 40 601 582 42 41 2007 59 305 775 58 569 2017 40 2018 42 2019 41 59 582 42 2020 59 2021 321 2022 60 2023 42 62 2024 59 2025 2026 59 125 59 ,"{'AvgLine': 16, 'CountLine': 185, 'CountStmt': 51, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 20, 'MaxEssential': 3, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 119, 'CountStmtDecl': 30, 'MaxCyclomatic': 3, 'SumCyclomatic': 16, 'AltAvgLineCode': 11, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 40, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 3, 'CountDeclMethod': 9, 'AltCountLineCode': 119, 'CountLineCodeExe': 16, 'CountLineComment': 30, 'AltAvgLineComment': 1, 'AltCountLineBlank': 40, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 27, 'CountLineInactive': 0, 'CountDeclMethodAll': 154, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.25', 'AltCountLineComment': 30, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
99832,C++,"class GDALVectorTranslateWrappedLayer: public OGRLayerDecorator
{
    std::vector<OGRCoordinateTransformation*> m_apoCT;
    OGRFeatureDefn* m_poFDefn;

            GDALVectorTranslateWrappedLayer(OGRLayer* poBaseLayer,
                                            bool bOwnBaseLayer);
            OGRFeature* TranslateFeature(OGRFeature* poSrcFeat);
public:

        virtual ~GDALVectorTranslateWrappedLayer();
        virtual OGRFeatureDefn* GetLayerDefn() override { return m_poFDefn; }
        virtual OGRFeature* GetNextFeature() override;
        virtual OGRFeature* GetFeature(GIntBig nFID) override;

        static GDALVectorTranslateWrappedLayer* New(
                                        OGRLayer* poBaseLayer,
                                        bool bOwnBaseLayer,
                                        OGRSpatialReference* poOutputSRS,
                                        bool bTransform);
};",0,587 2000 58 777 2001 123 2002 321 2003 60 2004 42 62 2005 59 2006 42 2007 59 2000 40 2008 42 2009 44 569 2010 41 59 2011 42 2012 40 2011 42 2013 41 59 777 58 864 126 2000 40 41 59 864 2006 42 2014 40 41 2015 123 792 2007 59 125 864 2011 42 2016 40 41 2015 59 864 2011 42 2017 40 2018 2019 41 2015 59 809 2000 42 2020 40 2008 42 2009 44 569 2010 44 2021 42 2022 44 569 2023 41 59 125 59 ,"{'AvgLine': 15, 'CountLine': 129, 'CountStmt': 54, 'MaxNesting': 4, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 44, 'MaxEssential': 6, 'SumEssential': 12, 'AvgCyclomatic': 2, 'CountLineCode': 121, 'CountStmtDecl': 18, 'MaxCyclomatic': 6, 'SumCyclomatic': 16, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 121, 'CountLineCodeExe': 74, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 25, 'CountLineInactive': 0, 'CountDeclMethodAll': 134, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 72, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99857,C++,"class OGRIngresResultLayer final: public OGRIngresLayer
{
    void                BuildFullQueryStatement();

    char                *pszRawStatement;

    int                 nFeatureCount;

  public:
                        OGRIngresResultLayer( OGRIngresDataSource *,
                                              const char * pszRawStatement,
                                              OGRIngresStatement *hStmt );
    virtual             ~OGRIngresResultLayer();

    OGRFeatureDefn     *ReadResultDefinition();

    virtual void        ResetReading() override;
    virtual GIntBig     GetFeatureCount( int ) override;
};",0,587 2000 2001 58 777 2002 123 865 2003 40 41 59 582 42 2004 59 704 2005 59 777 58 2000 40 2006 42 44 601 582 42 2004 44 2007 42 2008 41 59 864 126 2000 40 41 59 2009 42 2010 40 41 59 864 865 2011 40 41 2012 59 864 2013 2014 40 704 41 2012 59 125 59 ,"{'AvgLine': 17, 'CountLine': 126, 'CountStmt': 26, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 93, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 13, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 25, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 6, 'AltCountLineCode': 93, 'CountLineCodeExe': 20, 'CountLineComment': 8, 'AltAvgLineComment': 1, 'AltCountLineBlank': 25, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 102, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99868,C++,"class OGRSQLiteSingleFeatureLayer final : public OGRLayer
{
  private:
    int                 nVal;
    char               *pszVal;
    OGRFeatureDefn     *poFeatureDefn;
    int                 iNextShapeId;

  public:
                        OGRSQLiteSingleFeatureLayer( const char* pszLayerName,
                                                     int nVal );
                        OGRSQLiteSingleFeatureLayer( const char* pszLayerName,
                                                     const char *pszVal );
                        virtual ~OGRSQLiteSingleFeatureLayer();

    virtual void        ResetReading() override;
    virtual OGRFeature *GetNextFeature() override;
    virtual OGRFeatureDefn *GetLayerDefn() override;
    virtual int         TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 773 58 704 2003 59 582 42 2004 59 2005 42 2006 59 704 2007 59 777 58 2000 40 601 582 42 2008 44 704 2003 41 59 2000 40 601 582 42 2008 44 601 582 42 2004 41 59 864 126 2000 40 41 59 864 865 2009 40 41 2010 59 864 2011 42 2012 40 41 2010 59 864 2005 42 2013 40 41 2010 59 864 704 2014 40 601 582 42 41 2010 59 125 59 ,"{'AvgLine': 8, 'CountLine': 79, 'CountStmt': 41, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 25, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 76, 'CountStmtDecl': 19, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 76, 'CountLineCodeExe': 34, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 89, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 55, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
99867,C++,"class OGRSQLiteGeomFieldDefn final : public OGRGeomFieldDefn
{
    public:
        OGRSQLiteGeomFieldDefn( const char* pszNameIn, int iGeomColIn ) :
            OGRGeomFieldDefn(pszNameIn, wkbUnknown),
            m_iCol(iGeomColIn)
            {
            }

        int m_nSRSId = -1;
        int m_iCol; /* ordinal of geometry field in SQL statement */
        bool m_bTriedAsSpatiaLite = false;
        OGRSQLiteGeomFormat m_eGeomFormat = OSGF_None;
        OGREnvelope         m_oCachedExtent{};
        bool                m_bCachedExtentIsValid = false;
        bool                m_bHasSpatialIndex = false;
        bool                m_bHasCheckedSpatialIndexTable = false;
        std::vector< std::pair<CPLString,CPLString> > m_aosDisabledTriggers{};
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 601 582 42 2003 44 704 2004 41 58 2002 40 2003 44 2005 41 44 2006 40 2004 41 123 125 704 2007 61 45 1501 59 704 2006 59 305 569 2008 61 655 59 2009 2010 61 2011 59 2012 2013 123 125 59 569 2014 61 655 59 569 2015 61 655 59 569 2016 61 655 59 2017 321 2018 60 2017 321 2019 60 2020 44 2020 62 62 2021 123 125 59 125 59 ,"{'AvgLine': 5, 'CountLine': 19, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 18, 'CountLineCodeExe': 2, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 98, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 9, 'CountDeclInstanceVariablePublic': 9, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99974,C++,"class OGROpenFileGDBGroup final: public GDALGroup
{
protected:
    friend class OGROpenFileGDBDataSource;
    std::vector<std::shared_ptr<GDALGroup>> m_apoSubGroups{};
    std::vector<OGRLayer*> m_apoLayers{};

public:
    OGROpenFileGDBGroup(const std::string& osParentName, const char* pszName):
        GDALGroup(osParentName, pszName) {}

    std::vector<std::string> GetGroupNames(CSLConstList papszOptions) const override;
    std::shared_ptr<GDALGroup> OpenGroup(const std::string& osName,
                                         CSLConstList papszOptions) const override;

    std::vector<std::string> GetVectorLayerNames(CSLConstList papszOptions) const override;
    OGRLayer* OpenVectorLayer(const std::string& osName,
                              CSLConstList papszOptions) const override;
};",0,587 2000 2001 58 777 2002 123 775 58 667 587 2003 59 2004 321 2005 60 2004 321 2006 60 2002 355 2007 123 125 59 2004 321 2005 60 2008 42 62 2009 123 125 59 777 58 2000 40 601 2004 321 2010 38 2011 44 601 582 42 2012 41 58 2002 40 2011 44 2012 41 123 125 2004 321 2005 60 2004 321 2010 62 2013 40 2014 2015 41 601 2016 59 2004 321 2006 60 2002 62 2017 40 601 2004 321 2010 38 2018 44 2014 2015 41 601 2016 59 2004 321 2005 60 2004 321 2010 62 2019 40 2014 2015 41 601 2016 59 2008 42 2020 40 601 2004 321 2010 38 2018 44 2014 2015 41 601 2016 59 125 59 ,"{'AvgLine': 7, 'CountLine': 53, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 50, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 50, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 33, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99978,C++,"class OGRESRIFeatureServiceDataset final: public GDALDataset
{
    CPLString              osURL;
    GIntBig                nFirstOffset;
    GIntBig                nLastOffset;
    OGRGeoJSONDataSource  *poCurrent;
    OGRESRIFeatureServiceLayer *poLayer;

    int                     LoadPage();

  public:
    OGRESRIFeatureServiceDataset( const CPLString &osURL,
                                  OGRGeoJSONDataSource* poFirst );
    ~OGRESRIFeatureServiceDataset();

    int GetLayerCount() override { return 1; }
    OGRLayer* GetLayer( int nLayer ) override
        { return (nLayer == 0) ? poLayer : nullptr; }

    OGRLayer* GetUnderlyingLayer() { return poCurrent->GetLayer(0); }

    int MyResetReading();
    int LoadNextPage();

    const CPLString& GetURL() { return osURL; }
};",0,587 2000 2001 58 777 2002 123 2003 2004 59 2005 2006 59 2005 2007 59 2008 42 2009 59 2010 42 2011 59 704 2012 40 41 59 777 58 2000 40 601 2003 38 2004 44 2008 42 2013 41 59 126 2000 40 41 59 704 2014 40 41 2015 123 792 1501 59 125 2016 42 2017 40 704 2018 41 2015 123 792 40 2018 323 1500 41 63 2011 58 753 59 125 2016 42 2019 40 41 123 792 2009 354 2017 40 1500 41 59 125 704 2020 40 41 59 704 2021 40 41 59 601 2003 38 2022 40 41 123 792 2004 59 125 125 59 ,"{'AvgLine': 9, 'CountLine': 108, 'CountStmt': 49, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 32, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 97, 'CountStmtDecl': 20, 'MaxCyclomatic': 3, 'SumCyclomatic': 15, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 97, 'CountLineCodeExe': 40, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 18, 'CountLineInactive': 0, 'CountDeclMethodAll': 151, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
100142,C++,"class OGRCouchDBOneLineLayer final: public OGRLayer
{
    public:
        OGRFeature* poFeature;
        OGRFeatureDefn* poFeatureDefn;
        bool bEnd;

        OGRCouchDBOneLineLayer() :
            poFeature(nullptr),
            poFeatureDefn(nullptr),
            bEnd(false)
        {}
        ~OGRCouchDBOneLineLayer()
        {
            delete poFeature;
            if( poFeatureDefn != nullptr )
                poFeatureDefn->Release();
        }

        virtual void        ResetReading() override { bEnd = false;}
        virtual OGRFeature *GetNextFeature() override
        {
            if( bEnd ) return nullptr;
            bEnd = true;
            return poFeature->Clone();
        }
        virtual OGRFeatureDefn *GetLayerDefn() override { return poFeatureDefn; }
        virtual int         TestCapability( const char * ) override { return FALSE; }
};",0,587 2000 2001 58 777 2002 123 777 58 2003 42 2004 59 2005 42 2006 59 569 2007 59 2000 40 41 58 2004 40 753 41 44 2006 40 753 41 44 2007 40 655 41 123 125 126 2000 40 41 123 619 2004 59 688 40 2006 340 753 41 2006 354 2008 40 41 59 125 864 865 2009 40 41 2010 123 2007 61 655 59 125 864 2003 42 2011 40 41 2010 123 688 40 2007 41 792 753 59 2007 61 829 59 792 2004 354 2012 40 41 59 125 864 2005 42 2013 40 41 2010 123 792 2006 59 125 864 704 2014 40 601 582 42 41 2010 123 792 2015 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 29, 'CountStmt': 22, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 27, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 8, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 27, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 88, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 62, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100245,C++,"class CADVertexPFaceFaceObject final: public CADEntityObject
{
public:
    CADVertexPFaceFaceObject();
    virtual ~CADVertexPFaceFaceObject(){}
    // TODO: check DXF ref to get info what does it mean.
    short iVertexIndex1;
    short iVertexIndex2;
    short iVertexIndex3;
    short iVertexIndex4;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 330 803 2003 59 803 2004 59 803 2005 59 803 2006 59 125 59 ,"{'AvgLine': 4, 'CountLine': 19, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 18, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99470,C++,"class TABMAPObjHdrWithCoord : public TABMAPObjHdr
{
  public:
    GInt32      m_nCoordBlockPtr = 0;
    GInt32      m_nCoordDataSize = 0;

    /* Eventually this class may have methods to help maintaining refs to
     * coord. blocks when splitting object blocks.
     */
};",0,587 2000 58 777 2001 123 777 58 2002 2003 61 1500 59 2002 2004 61 1500 59 305 125 59 ,"{'AvgLine': 0, 'CountLine': 10, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 4, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.50', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100311,C++,"class OGRVRTGeomFieldProps
{
    public:
        CPLString           osName;  // Name of the VRT geometry field */
        OGRwkbGeometryType  eGeomType;
        OGRSpatialReference *poSRS;

        bool                bSrcClip;
        OGRGeometry         *poSrcRegion;

        // Geometry interpretation related.
        OGRVRTGeometryStyle eGeometryStyle;

        // Points to a OGRField for VGS_WKT, VGS_WKB, VGS_Shape and OGRGeomField
        // for VGS_Direct.
        int                 iGeomField;

        // VGS_PointFromColumn
        int                 iGeomXField;
        int                 iGeomYField;
        int                 iGeomZField;
        int                 iGeomMField;
        bool                bReportSrcColumn;
        bool                bUseSpatialSubquery;
        bool                bNullable;

        OGREnvelope         sStaticEnvelope;

                        OGRVRTGeomFieldProps();
                       ~OGRVRTGeomFieldProps();
};",0,587 2000 123 777 58 2001 2002 59 330 2003 2004 59 2005 42 2006 59 569 2007 59 2008 42 2009 59 330 2010 2011 59 330 330 704 2012 59 330 704 2013 59 704 2014 59 704 2015 59 704 2016 59 569 2017 59 569 2018 59 569 2019 59 2020 2021 59 2000 40 41 59 126 2000 40 41 59 125 59 ,"{'AvgLine': 11, 'CountLine': 53, 'CountStmt': 36, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 43, 'CountStmtDecl': 30, 'MaxCyclomatic': 3, 'SumCyclomatic': 4, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 43, 'CountLineCodeExe': 18, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 15, 'CountDeclInstanceVariablePublic': 15, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100325,C++,"class OGROpenFileGDBGeomFieldDefn: public OGRGeomFieldDefn
{
        OGROpenFileGDBLayer* m_poLayer;

    public:
        OGROpenFileGDBGeomFieldDefn(OGROpenFileGDBLayer* poLayer,
                                    const char *pszNameIn,
                                    OGRwkbGeometryType eGeomTypeIn) :
            OGRGeomFieldDefn(pszNameIn, eGeomTypeIn),
            m_poLayer(poLayer)
        {}

        ~OGROpenFileGDBGeomFieldDefn() {}

        void UnsetLayer() { m_poLayer = nullptr; }

        virtual OGRSpatialReference* GetSpatialRef() const override
        {
            if( poSRS )
                return poSRS;
            if( m_poLayer != nullptr )
                (void) m_poLayer->BuildLayerDefinition();
            return poSRS;
        }
};",0,587 2000 58 777 2001 123 2002 42 2003 59 777 58 2000 40 2002 42 2004 44 601 582 42 2005 44 2006 2007 41 58 2001 40 2005 44 2007 41 44 2003 40 2004 41 123 125 126 2000 40 41 123 125 865 2008 40 41 123 2003 61 753 59 125 864 2009 42 2010 40 41 601 2011 123 688 40 2012 41 792 2012 59 688 40 2003 340 753 41 40 865 41 2003 354 2013 40 41 59 792 2012 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 25, 'CountStmt': 12, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 6, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 21, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 23, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 25, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100338,C++,"class SimpleFloatConstantGenerator : public FloatConstantGenerator {
 public:
  SimpleFloatConstantGenerator(const char *nan_number,
                               const char *pos_inf_number,
                               const char *neg_inf_number);

 private:
  std::string Value(double v,
                    const std::string &src) const FLATBUFFERS_OVERRIDE;
  std::string Inf(double v) const FLATBUFFERS_OVERRIDE;
  std::string NaN(double v) const FLATBUFFERS_OVERRIDE;

  std::string Value(float v, const std::string &src) const FLATBUFFERS_OVERRIDE;
  std::string Inf(float v) const FLATBUFFERS_OVERRIDE;
  std::string NaN(float v) const FLATBUFFERS_OVERRIDE;

  const std::string nan_number_;
  const std::string pos_inf_number_;
  const std::string neg_inf_number_;
};",0,587 2000 58 777 2001 123 777 58 2000 40 601 582 42 2002 44 601 582 42 2003 44 601 582 42 2004 41 59 773 58 2005 321 2006 2007 40 625 2008 44 601 2005 321 2006 38 2009 41 601 2010 59 2005 321 2006 2011 40 625 2008 41 601 2010 59 2005 321 2006 2012 40 625 2008 41 601 2010 59 2005 321 2006 2007 40 660 2008 44 601 2005 321 2006 38 2009 41 601 2010 59 2005 321 2006 2011 40 660 2008 41 601 2010 59 2005 321 2006 2012 40 660 2008 41 601 2010 59 601 2005 321 2006 2013 59 601 2005 321 2006 2014 59 601 2005 321 2006 2015 59 125 59 ,"{'AvgLine': 0, 'CountLine': 20, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 17, 'CountStmtDecl': 10, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 17, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 6, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99625,C++,"class OGRPGGeomFieldDefn final: public OGRGeomFieldDefn
{
        OGRPGGeomFieldDefn( const OGRPGGeomFieldDefn& ) = delete;
        OGRPGGeomFieldDefn& operator= ( const OGRPGGeomFieldDefn& ) = delete;

    protected:
        OGRPGLayer* poLayer;

    public:
        OGRPGGeomFieldDefn( OGRPGLayer* poLayerIn,
                                const char* pszFieldName ) :
            OGRGeomFieldDefn(pszFieldName, wkbUnknown), poLayer(poLayerIn),
            nSRSId(UNDETERMINED_SRID), GeometryTypeFlags(0), ePostgisType(GEOM_TYPE_UNKNOWN)
            {
            }

        virtual OGRSpatialReference* GetSpatialRef() const override;

        void UnsetLayer() { poLayer = nullptr; }

        mutable int nSRSId;
        mutable int GeometryTypeFlags;
        mutable PostgisType   ePostgisType;
};",0,587 2000 2001 58 777 2002 123 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 775 58 2003 42 2004 59 777 58 2000 40 2003 42 2005 44 601 582 42 2006 41 58 2002 40 2006 44 2007 41 44 2004 40 2005 41 44 2008 40 2009 41 44 2010 40 1500 41 44 2011 40 2012 41 123 125 864 2013 42 2014 40 41 601 2015 59 865 2016 40 41 123 2004 61 753 59 125 740 704 2008 59 740 704 2010 59 740 2017 2011 59 125 59 ,"{'AvgLine': 7, 'CountLine': 39, 'CountStmt': 21, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 33, 'CountStmtDecl': 11, 'MaxCyclomatic': 5, 'SumCyclomatic': 7, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 33, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
98628,C++,"class FGdbResultLayer final: public FGdbBaseLayer
{
public:

  FGdbResultLayer(FGdbDataSource* pParentDataSource, const char* pszStatement, EnumRows* pEnumRows);
  virtual ~FGdbResultLayer();

  virtual void        ResetReading() override;

  OGRFeatureDefn *    GetLayerDefn() override { return m_pFeatureDefn; }

  virtual int         TestCapability( const char * ) override;

protected:

  FGdbDataSource* m_pDS;
  CPLString       osSQL;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 2004 44 601 582 42 2005 44 2006 42 2007 41 59 864 126 2000 40 41 59 864 865 2008 40 41 2009 59 2010 42 2011 40 41 2009 123 792 2012 59 125 864 704 2013 40 601 582 42 41 2009 59 775 58 2003 42 2014 59 2015 2016 59 125 59 ,"{'AvgLine': 22, 'CountLine': 128, 'CountStmt': 31, 'MaxNesting': 2, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 19, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 103, 'CountStmtDecl': 17, 'MaxCyclomatic': 3, 'SumCyclomatic': 8, 'AltAvgLineCode': 18, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 25, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 5, 'AltCountLineCode': 103, 'CountLineCodeExe': 16, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 25, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 92, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 78, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
98744,C++,"class OGRDB2Session
{
protected:
// From CPLODBCSession
    char      m_szLastError[SQL_MAX_MESSAGE_LENGTH + 1];
    HENV      m_hEnv = nullptr;
    HDBC      m_hDBC = nullptr;
    int       m_bInTransaction = FALSE;
    int       m_bAutoCommit = TRUE;

public:
    OGRDB2Session( );
    virtual ~OGRDB2Session();
// From CPLODBCSession
    int         EstablishSession( const char *pszDSN,
                                  const char *pszUserid,
                                  const char *pszPassword );
    const char  *GetLastError();

    // Transaction handling

    int         ClearTransaction();
    int         BeginTransaction();
    int         CommitTransaction();
    virtual int RollbackTransaction();
    int         IsInTransaction() { return m_bInTransaction; }

    // Essentially internal.

    int         CloseSession();

    int         Failed( int, HSTMT = nullptr );
    HDBC        GetConnection() { return m_hDBC; }
    HENV        GetEnvironment()  { return m_hEnv; }
};",0,587 2000 123 775 58 330 582 2001 91 2002 43 1501 93 59 2003 2004 61 753 59 2005 2006 61 753 59 704 2007 61 2008 59 704 2009 61 2010 59 777 58 2000 40 41 59 864 126 2000 40 41 59 330 704 2011 40 601 582 42 2012 44 601 582 42 2013 44 601 582 42 2014 41 59 601 582 42 2015 40 41 59 330 704 2016 40 41 59 704 2017 40 41 59 704 2018 40 41 59 864 704 2019 40 41 59 704 2020 40 41 123 792 2007 59 125 330 704 2021 40 41 59 704 2022 40 704 44 2023 61 753 41 59 2005 2024 40 41 123 792 2006 59 125 2003 2025 40 41 123 792 2004 59 125 125 59 ,"{'AvgLine': 16, 'CountLine': 246, 'CountStmt': 68, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 41, 'MaxEssential': 4, 'SumEssential': 18, 'AvgCyclomatic': 2, 'CountLineCode': 151, 'CountStmtDecl': 24, 'MaxCyclomatic': 7, 'SumCyclomatic': 26, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 30, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 2, 'CountDeclMethod': 13, 'AltCountLineCode': 195, 'CountLineCodeExe': 27, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 40, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 48, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 12, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 26, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 13, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 26, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
98943,C++,"class OGRS57Driver final: public GDALDriver
{
    static S57ClassRegistrar *poRegistrar;

  public:
                 OGRS57Driver();
                ~OGRS57Driver();

    static GDALDataset *Open( GDALOpenInfo* poOpenInfo );
    static GDALDataset *Create( const char * pszName,
                                int nBands, int nXSize, int nYSize, GDALDataType eDT,
                                char **papszOptions );

    static S57ClassRegistrar *GetS57Registrar();
};",0,587 2000 2001 58 777 2002 123 809 2003 42 2004 59 777 58 2000 40 41 59 126 2000 40 41 59 809 2005 42 2006 40 2007 42 2008 41 59 809 2005 42 2009 40 601 582 42 2010 44 704 2011 44 704 2012 44 704 2013 44 2014 2015 44 582 42 42 2016 41 59 809 2003 42 2017 40 41 59 125 59 ,"{'AvgLine': 15, 'CountLine': 90, 'CountStmt': 32, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 26, 'MaxEssential': 3, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 72, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 12, 'AltAvgLineCode': 12, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 72, 'CountLineCodeExe': 26, 'CountLineComment': 7, 'AltAvgLineComment': 1, 'AltCountLineBlank': 15, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.10', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 3, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99326,C++,"class FileGDBOGRGeometryConverter
{
    public:
       virtual                            ~FileGDBOGRGeometryConverter() {}

       virtual OGRGeometry*                GetAsGeometry(const OGRField* psField) = 0;

       static FileGDBOGRGeometryConverter* BuildConverter(const FileGDBGeomField* poGeomField);
       static OGRwkbGeometryType           GetGeometryTypeFromESRI(const char* pszESRIGeometryType);
};",0,587 2000 123 777 58 864 126 2000 40 41 123 125 864 2001 42 2002 40 601 2003 42 2004 41 61 1500 59 809 2000 42 2005 40 601 2006 42 2007 41 59 809 2008 2009 40 601 582 42 2010 41 59 125 59 ,"{'AvgLine': 6, 'CountLine': 27, 'CountStmt': 11, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 3, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 25, 'CountStmtDecl': 5, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 25, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 5, 'CountClassDerived': 1, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99757,C++,"class CPL_DLL IOGRConstGeometryVisitor
{
    public:
        /** Destructor/ */
        virtual ~IOGRConstGeometryVisitor() = default;

        /** Visit OGRPoint. */
        virtual void visit(const OGRPoint*) = 0;
        /** Visit OGRLineString. */
        virtual void visit(const OGRLineString*) = 0;
        /** Visit OGRLinearRing. */
        virtual void visit(const OGRLinearRing*) = 0;
        /** Visit OGRPolygon. */
        virtual void visit(const OGRPolygon*) = 0;
        /** Visit OGRMultiPoint. */
        virtual void visit(const OGRMultiPoint*) = 0;
        /** Visit OGRMultiLineString. */
        virtual void visit(const OGRMultiLineString*) = 0;
        /** Visit OGRMultiPolygon. */
        virtual void visit(const OGRMultiPolygon*) = 0;
        /** Visit OGRGeometryCollection. */
        virtual void visit(const OGRGeometryCollection*) = 0;
        /** Visit OGRCircularString. */
        virtual void visit(const OGRCircularString*) = 0;
        /** Visit OGRCompoundCurve. */
        virtual void visit(const OGRCompoundCurve*) = 0;
        /** Visit OGRCurvePolygon. */
        virtual void visit(const OGRCurvePolygon*) = 0;
        /** Visit OGRMultiCurve. */
        virtual void visit(const OGRMultiCurve*) = 0;
        /** Visit OGRMultiSurface. */
        virtual void visit(const OGRMultiSurface*) = 0;
        /** Visit OGRTriangle. */
        virtual void visit(const OGRTriangle*) = 0;
        /** Visit OGRPolyhedralSurface. */
        virtual void visit(const OGRPolyhedralSurface*) = 0;
        /** Visit OGRTriangulatedSurface. */
        virtual void visit(const OGRTriangulatedSurface*) = 0;
};",0,587 2000 2001 123 777 58 306 864 126 2001 40 41 61 613 59 306 864 865 2002 40 601 2003 42 41 61 1500 59 306 864 865 2002 40 601 2004 42 41 61 1500 59 306 864 865 2002 40 601 2005 42 41 61 1500 59 306 864 865 2002 40 601 2006 42 41 61 1500 59 306 864 865 2002 40 601 2007 42 41 61 1500 59 306 864 865 2002 40 601 2008 42 41 61 1500 59 306 864 865 2002 40 601 2009 42 41 61 1500 59 306 864 865 2002 40 601 2010 42 41 61 1500 59 306 864 865 2002 40 601 2011 42 41 61 1500 59 306 864 865 2002 40 601 2012 42 41 61 1500 59 306 864 865 2002 40 601 2013 42 41 61 1500 59 306 864 865 2002 40 601 2014 42 41 61 1500 59 306 864 865 2002 40 601 2015 42 41 61 1500 59 306 864 865 2002 40 601 2016 42 41 61 1500 59 306 864 865 2002 40 601 2017 42 41 61 1500 59 306 864 865 2002 40 601 2018 42 41 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 39, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 21, 'CountStmtDecl': 16, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 17, 'AltCountLineCode': 21, 'CountLineCodeExe': 0, 'CountLineComment': 17, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 16, 'CountClassDerived': 1, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.81', 'AltCountLineComment': 17, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 17, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 19, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99424,C++,"class CPL_DLL OGRCodedFieldDomain final: public OGRFieldDomain
{
private:
    std::vector<OGRCodedValue>  m_asValues{};

    OGRCodedFieldDomain(const OGRCodedFieldDomain&) = delete;
    OGRCodedFieldDomain& operator= (const OGRCodedFieldDomain&) = delete;

public:
    /** Constructor.
     *
     * This is the same as the C function OGR_CodedFldDomain_Create()
     * (except that the C function copies the enumeration, whereas the C++
     * method moves it)
     *
     * @param osName         Domain name.
     * @param osDescription  Domain description.
     * @param eFieldType     Field type. Generally numeric. Potentially OFTDateTime
     * @param eFieldSubType  Field subtype.
     * @param asValues       Enumeration as (code, value) pairs.
     *                       Each code should appear only once, but it is the
     *                       responsibility of the user to check it.
     */
    OGRCodedFieldDomain(const std::string& osName,
                        const std::string& osDescription,
                        OGRFieldType eFieldType,
                        OGRFieldSubType eFieldSubType,
                        std::vector<OGRCodedValue>&& asValues);

    ~OGRCodedFieldDomain() override;

    OGRCodedFieldDomain* Clone() const override;

    /** Get the enumeration as (code, value) pairs.
     * The end of the enumeration is signaled by code == NULL.
     *
     * This is the same as the C function OGR_CodedFldDomain_GetEnumeration().
     */
    const OGRCodedValue* GetEnumeration() const { return m_asValues.data(); }
};",0,587 2000 2001 2002 58 777 2003 123 773 58 2004 321 2005 60 2006 62 2007 123 125 59 2001 40 601 2001 38 41 61 619 59 2001 38 758 61 40 601 2001 38 41 61 619 59 777 58 306 2001 40 601 2004 321 2008 38 2009 44 601 2004 321 2008 38 2010 44 2011 2012 44 2013 2014 44 2004 321 2005 60 2006 62 307 2015 41 59 126 2001 40 41 2016 59 2001 42 2017 40 41 601 2016 59 306 601 2006 42 2018 40 41 601 123 792 2007 46 2019 40 41 59 125 125 59 ,"{'AvgLine': 8, 'CountLine': 72, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 47, 'CountStmtDecl': 7, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 47, 'CountLineCodeExe': 4, 'CountLineComment': 20, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.43', 'AltCountLineComment': 20, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99793,C++,"class TigerZipCodes final: public TigerFileBase
{
public:
                      TigerZipCodes( OGRTigerDataSource *, const char * );
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 125 59 ,"{'AvgLine': 16, 'CountLine': 21, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 10, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 1, 'AltCountLineCode': 15, 'CountLineCodeExe': 6, 'CountLineComment': 3, 'AltAvgLineComment': 3, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99794,C++,"template<class BaseLayer> class OGRGetNextFeatureThroughRaw
{
public:

    /** Implement OGRLayer::GetNextFeature(), relying on BaseLayer::GetNextRawFeature() */
    OGRFeature* GetNextFeature()
    {
        const auto poThis = static_cast<BaseLayer*>(this);
        while( true )
        {
            OGRFeature *poFeature = poThis->GetNextRawFeature();
            if (poFeature == nullptr)
                return nullptr;

            if((poThis->m_poFilterGeom == nullptr
                || poThis->FilterGeometry( poFeature->GetGeometryRef() ) )
            && (poThis->m_poAttrQuery == nullptr
                || poThis->m_poAttrQuery->Evaluate( poFeature )) )
            {
                return poFeature;
            }
            else
                delete poFeature;
        }
    }
};",0,822 60 587 2000 62 587 2001 123 777 58 306 2002 42 2003 40 41 123 601 561 2004 61 811 60 2000 42 62 40 823 41 59 870 40 829 41 123 2002 42 2005 61 2004 354 2006 40 41 59 688 40 2005 323 753 41 792 753 59 688 40 40 2004 354 2007 323 753 309 2004 354 2008 40 2005 354 2009 40 41 41 41 307 40 2004 354 2010 323 753 309 2004 354 2010 354 2011 40 2005 41 41 41 123 792 2005 59 125 630 619 2005 59 125 125 125 59 ,"{'AvgLine': 20, 'CountLine': 26, 'CountStmt': 9, 'MaxNesting': 2, 'AvgLineCode': 19, 'AvgEssential': 4, 'AvgLineBlank': 1, 'CountStmtExe': 6, 'MaxEssential': 4, 'SumEssential': 4, 'AvgCyclomatic': 4, 'CountLineCode': 23, 'CountStmtDecl': 3, 'MaxCyclomatic': 4, 'SumCyclomatic': 4, 'AltAvgLineCode': 19, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 1, 'AltCountLineCode': 23, 'CountLineCodeExe': 12, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 7, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 4, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99609,C++,"class CPL_DLL OGRDefaultConstGeometryVisitor: public IOGRConstGeometryVisitor
{
        void _visit(const OGRSimpleCurve* poGeom);

    public:

        void visit(const OGRPoint*) override {}
        void visit(const OGRLineString*) override;
        void visit(const OGRLinearRing*) override;
        void visit(const OGRPolygon*) override;
        void visit(const OGRMultiPoint*) override;
        void visit(const OGRMultiLineString*) override;
        void visit(const OGRMultiPolygon*) override;
        void visit(const OGRGeometryCollection*) override;
        void visit(const OGRCircularString*) override;
        void visit(const OGRCompoundCurve*) override;
        void visit(const OGRCurvePolygon*) override;
        void visit(const OGRMultiCurve*) override;
        void visit(const OGRMultiSurface*) override;
        void visit(const OGRTriangle*) override;
        void visit(const OGRPolyhedralSurface*) override;
        void visit(const OGRTriangulatedSurface*) override;
};",0,587 2000 2001 58 777 2002 123 865 2003 40 601 2004 42 2005 41 59 777 58 865 2006 40 601 2007 42 41 2008 123 125 865 2006 40 601 2009 42 41 2008 59 865 2006 40 601 2010 42 41 2008 59 865 2006 40 601 2011 42 41 2008 59 865 2006 40 601 2012 42 41 2008 59 865 2006 40 601 2013 42 41 2008 59 865 2006 40 601 2014 42 41 2008 59 865 2006 40 601 2015 42 41 2008 59 865 2006 40 601 2016 42 41 2008 59 865 2006 40 601 2017 42 41 2008 59 865 2006 40 601 2018 42 41 2008 59 865 2006 40 601 2019 42 41 2008 59 865 2006 40 601 2020 42 41 2008 59 865 2006 40 601 2021 42 41 2008 59 865 2006 40 601 2022 42 41 2008 59 865 2006 40 601 2023 42 41 2008 59 125 59 ,"{'AvgLine': 4, 'CountLine': 94, 'CountStmt': 49, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 92, 'CountStmtDecl': 37, 'MaxCyclomatic': 2, 'SumCyclomatic': 22, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 17, 'AltCountLineCode': 92, 'CountLineCodeExe': 21, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 18, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 34, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 16, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 22, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 22, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99758,C++,"class CPL_DLL IOGRGeometryVisitor
{
    public:
        /** Destructor/ */
        virtual ~IOGRGeometryVisitor() = default;

        /** Visit OGRPoint. */
        virtual void visit(OGRPoint*) = 0;
        /** Visit OGRLineString. */
        virtual void visit(OGRLineString*) = 0;
        /** Visit OGRLinearRing. */
        virtual void visit(OGRLinearRing*) = 0;
        /** Visit OGRPolygon. */
        virtual void visit(OGRPolygon*) = 0;
        /** Visit OGRMultiPoint. */
        virtual void visit(OGRMultiPoint*) = 0;
        /** Visit OGRMultiLineString. */
        virtual void visit(OGRMultiLineString*) = 0;
        /** Visit OGRMultiPolygon. */
        virtual void visit(OGRMultiPolygon*) = 0;
        /** Visit OGRGeometryCollection. */
        virtual void visit(OGRGeometryCollection*) = 0;
        /** Visit OGRCircularString. */
        virtual void visit(OGRCircularString*) = 0;
        /** Visit OGRCompoundCurve. */
        virtual void visit(OGRCompoundCurve*) = 0;
        /** Visit OGRCurvePolygon. */
        virtual void visit(OGRCurvePolygon*) = 0;
        /** Visit OGRMultiCurve. */
        virtual void visit(OGRMultiCurve*) = 0;
        /** Visit OGRMultiSurface. */
        virtual void visit(OGRMultiSurface*) = 0;
        /** Visit OGRTriangle. */
        virtual void visit(OGRTriangle*) = 0;
        /** Visit OGRPolyhedralSurface. */
        virtual void visit(OGRPolyhedralSurface*) = 0;
        /** Visit OGRTriangulatedSurface. */
        virtual void visit(OGRTriangulatedSurface*) = 0;
};",0,587 2000 2001 123 777 58 306 864 126 2001 40 41 61 613 59 306 864 865 2002 40 2003 42 41 61 1500 59 306 864 865 2002 40 2004 42 41 61 1500 59 306 864 865 2002 40 2005 42 41 61 1500 59 306 864 865 2002 40 2006 42 41 61 1500 59 306 864 865 2002 40 2007 42 41 61 1500 59 306 864 865 2002 40 2008 42 41 61 1500 59 306 864 865 2002 40 2009 42 41 61 1500 59 306 864 865 2002 40 2010 42 41 61 1500 59 306 864 865 2002 40 2011 42 41 61 1500 59 306 864 865 2002 40 2012 42 41 61 1500 59 306 864 865 2002 40 2013 42 41 61 1500 59 306 864 865 2002 40 2014 42 41 61 1500 59 306 864 865 2002 40 2015 42 41 61 1500 59 306 864 865 2002 40 2016 42 41 61 1500 59 306 864 865 2002 40 2017 42 41 61 1500 59 306 864 865 2002 40 2018 42 41 61 1500 59 125 59 ,"{'AvgLine': 0, 'CountLine': 39, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 21, 'CountStmtDecl': 16, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 17, 'AltCountLineCode': 21, 'CountLineCodeExe': 0, 'CountLineComment': 17, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 16, 'CountClassDerived': 1, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.81', 'AltCountLineComment': 17, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 17, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 19, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99856,C++,"class OGRIngresDriver final: public OGRSFDriver
{
    char         **ParseWrappedName( const char * );

  public:
    virtual ~OGRIngresDriver();

    const char *GetName() override;
    OGRDataSource *Open( const char *, int ) override;
    virtual OGRDataSource *CreateDataSource( const char *pszName,
                                             char ** = NULL ) override;
    int                 TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 582 42 42 2003 40 601 582 42 41 59 777 58 864 126 2000 40 41 59 601 582 42 2004 40 41 2005 59 2006 42 2007 40 601 582 42 44 704 41 2005 59 864 2006 42 2008 40 601 582 42 2009 44 582 42 42 61 2010 41 2005 59 704 2011 40 601 582 42 41 2005 59 125 59 ,"{'AvgLine': 14, 'CountLine': 102, 'CountStmt': 41, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 33, 'MaxEssential': 4, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 82, 'CountStmtDecl': 12, 'MaxCyclomatic': 4, 'SumCyclomatic': 16, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 20, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 6, 'AltCountLineCode': 82, 'CountLineCodeExe': 27, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 20, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 46, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99917,C++,"class SRSCache
{
    std::map<std::string, SRSDesc> oMap;
    SRSDesc oLastDesc;

  public:
    SRSCache() {}

    ~SRSCache()
    {
        std::map<std::string, SRSDesc>::iterator oIter;
        for( oIter = oMap.begin(); oIter != oMap.end(); ++oIter )
        {
            if( oIter->second.poSRS != nullptr )
                oIter->second.poSRS->Release();
        }
    }

    SRSDesc &Get(const std::string &osSRSName)
    {
        if( osSRSName == oLastDesc.osSRSName )
            return oLastDesc;

        std::map<std::string, SRSDesc>::iterator oIter = oMap.find(osSRSName);
        if( oIter != oMap.end() )
        {
            oLastDesc = oIter->second;
            return oLastDesc;
        }

        oLastDesc.osSRSName = osSRSName;
        oLastDesc.bAxisInvert = GML_IsSRSLatLongOrder(osSRSName.c_str());
        oLastDesc.poSRS = new OGRSpatialReference();
        oLastDesc.poSRS->SetAxisMappingStrategy(OAMS_TRADITIONAL_GIS_ORDER);
        if( oLastDesc.poSRS->SetFromUserInput(osSRSName.c_str(), OGRSpatialReference::SET_FROM_USER_INPUT_LIMITATIONS_get()) !=
            OGRERR_NONE )
        {
            delete oLastDesc.poSRS;
            oLastDesc.poSRS = nullptr;
        }
        oMap[osSRSName] = oLastDesc;
        return oLastDesc;
    }
};",0,587 2000 123 2001 321 2002 60 2001 321 2003 44 2004 62 2005 59 2004 2006 59 777 58 2000 40 41 123 125 126 2000 40 41 123 2001 321 2002 60 2001 321 2003 44 2004 62 321 2007 2008 59 664 40 2008 61 2005 46 2009 40 41 59 2008 340 2005 46 2010 40 41 59 349 2008 41 123 688 40 2008 354 2011 46 2012 340 753 41 2008 354 2011 46 2012 354 2013 40 41 59 125 125 2004 38 2014 40 601 2001 321 2003 38 2015 41 123 688 40 2015 323 2006 46 2015 41 792 2006 59 2001 321 2002 60 2001 321 2003 44 2004 62 321 2016 2017 61 2005 46 2018 40 2015 41 59 688 40 2017 340 2005 46 2019 40 41 41 123 2006 61 2017 354 2020 59 792 2006 59 125 2006 46 2015 61 2015 59 2006 46 2021 61 2022 40 2015 46 2023 40 41 41 59 2006 46 2024 61 744 2025 40 41 59 2006 46 2024 354 2026 40 2027 41 59 688 40 2006 46 2024 354 2028 40 2015 46 2023 40 41 44 2025 321 2029 40 41 41 340 2030 41 123 619 2006 46 2024 59 2006 46 2024 61 753 59 125 2005 91 2015 93 61 2006 59 792 2006 59 125 125 59 ,"{'AvgLine': 11, 'CountLine': 44, 'CountStmt': 20, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 3, 'SumEssential': 5, 'AvgCyclomatic': 2, 'CountLineCode': 39, 'CountStmtDecl': 7, 'MaxCyclomatic': 4, 'SumCyclomatic': 6, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 39, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99865,C++,"class XLSXFieldTypeExtended
{
public:
    OGRFieldType      eType;
    bool              bHasMS;

                    XLSXFieldTypeExtended() :
                        eType(OFTMaxType),
                        bHasMS(false) {}
                    explicit XLSXFieldTypeExtended(OGRFieldType eTypeIn,
                                          bool bHasMSIn = false) :
                                    eType(eTypeIn), bHasMS(bHasMSIn) {}
};",0,587 2000 123 777 58 2001 2002 59 569 2003 59 2000 40 41 58 2002 40 2004 41 44 2003 40 655 41 123 125 648 2000 40 2001 2005 44 569 2006 61 655 41 58 2002 40 2005 41 44 2003 40 2006 41 123 125 125 59 ,"{'AvgLine': 3, 'CountLine': 13, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 12, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99890,C++,"class OGRSimpleCurvePointIterator final: public OGRPointIterator
{
        CPL_DISALLOW_COPY_ASSIGN(OGRSimpleCurvePointIterator)

        const OGRSimpleCurve* poSC = nullptr;
        int                   iCurPoint = 0;

    public:
        explicit OGRSimpleCurvePointIterator(const OGRSimpleCurve* poSCIn) :
            poSC(poSCIn) {}

        OGRBoolean getNextPoint( OGRPoint* p ) override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 601 2004 42 2005 61 753 59 704 2006 61 1500 59 777 58 648 2000 40 601 2004 42 2007 41 58 2005 40 2007 41 123 125 2008 2009 40 2010 42 2011 41 2012 59 125 59 ,"{'AvgLine': 5, 'CountLine': 21, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 18, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99921,C++,"class OSMParsingException: public std::exception
{
        std::string m_osMessage;
    public:
        explicit OSMParsingException(int nLine): m_osMessage(
            CPLSPrintf(""Parsing error occurred at line %d"", nLine)) {}

        const char* what() const noexcept override
                                        { return m_osMessage.c_str(); }
};",0,587 2000 58 777 2001 321 2002 123 2001 321 2003 2004 59 777 58 648 2000 40 704 2005 41 58 2004 40 2006 40 362 44 2005 41 41 123 125 601 582 42 2007 40 41 601 748 2008 123 792 2004 46 2009 40 41 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 10, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 9, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99925,C++,"class OGR2SQLITEModule
{
#ifdef DEBUG
    void* pDummy; /* to track memory leaks */
#endif
    sqlite3* hDB; /* *NOT* to be freed */

    GDALDataset* poDS; /* *NOT* to be freed */
    std::vector<OGRDataSource*> apoExtraDS; /* each datasource to be freed */

    OGRSQLiteDataSource* poSQLiteDS;  /* *NOT* to be freed, might be NULL */

    std::map< CPLString, OGRLayer* > oMapVTableToOGRLayer;

    void* hHandleSQLFunctions;

  public:
                                 OGR2SQLITEModule();
                                ~OGR2SQLITEModule();

    int                          Setup(GDALDataset* poDS,
                                       OGRSQLiteDataSource* poSQLiteDS);
    int                          Setup(sqlite3* hDB);

    GDALDataset*               GetDS() { return poDS; }

    int                          AddExtraDS(OGRDataSource* poDS);
    OGRDataSource               *GetExtraDS(int nIndex);

    int                          FetchSRSId(OGRSpatialReference* poSRS);

    void                         RegisterVTable(const char* pszVTableName, OGRLayer* poLayer);
    void                         UnregisterVTable(const char* pszVTableName);
    OGRLayer*                    GetLayerForVTable(const char* pszVTableName);

    void                         SetHandleSQLFunctions(void* hHandleSQLFunctionsIn);
};",0,587 2000 123 35 689 2001 865 42 2002 59 305 35 636 2003 42 2004 59 305 2005 42 2006 59 305 2007 321 2008 60 2009 42 62 2010 59 305 2011 42 2012 59 305 2007 321 2013 60 2014 44 2015 42 62 2016 59 865 42 2017 59 777 58 2000 40 41 59 126 2000 40 41 59 704 2018 40 2005 42 2006 44 2011 42 2012 41 59 704 2018 40 2003 42 2004 41 59 2005 42 2019 40 41 123 792 2006 59 125 704 2020 40 2009 42 2006 41 59 2009 42 2021 40 704 2022 41 59 704 2023 40 2024 42 2025 41 59 865 2026 40 601 582 42 2027 44 2015 42 2028 41 59 865 2029 40 601 582 42 2027 41 59 2015 42 2030 40 601 582 42 2027 41 59 865 2031 40 865 42 2032 41 59 125 59 ,"{'AvgLine': 12, 'CountLine': 184, 'CountStmt': 73, 'MaxNesting': 4, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 43, 'MaxEssential': 6, 'SumEssential': 17, 'AvgCyclomatic': 2, 'CountLineCode': 142, 'CountStmtDecl': 30, 'MaxCyclomatic': 6, 'SumCyclomatic': 26, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 25, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 1, 'CountDeclMethod': 12, 'AltCountLineCode': 157, 'CountLineCodeExe': 49, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 25, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 25, 'CountLineInactive': 7, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 28, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 8, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 84, 'SumCyclomaticModified': 26, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
100200,C++,"class CADArcObject final: public CADEntityObject
{
public:
    CADArcObject();
    virtual ~CADArcObject(){}
    CADVector vertPosition;
    double    dfRadius;
    double    dfThickness;
    CADVector vectExtrusion;
    double    dfStartAngle;
    double    dfEndAngle;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 59 625 2005 59 625 2006 59 2003 2007 59 625 2008 59 625 2009 59 125 59 ,"{'AvgLine': 4, 'CountLine': 20, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 20, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100231,C++,"class CADMLineObject final: public CADEntityObject
{
public:
    CADMLineObject();
    virtual ~CADMLineObject(){}

    double        dfScale;
    unsigned char dJust;
    CADVector     vertBasePoint;
    CADVector     vectExtrusion;
    short         dOpenClosed; // 1 open, 3 closed
    unsigned char nLinesInStyle;
    short         nNumVertices;

    std::vector<CADMLineVertex> avertVertices;

    CADHandle hMLineStyle;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 625 2003 59 856 582 2004 59 2005 2006 59 2005 2007 59 803 2008 59 330 856 582 2009 59 803 2010 59 2011 321 2012 60 2013 62 2014 59 2015 2016 59 125 59 ,"{'AvgLine': 5, 'CountLine': 27, 'CountStmt': 20, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 17, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 24, 'CountLineCodeExe': 7, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 9, 'CountDeclInstanceVariablePublic': 9, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100236,C++,"class CADPolylinePFaceObject final: public CADEntityObject
{
public:
    CADPolylinePFaceObject();
    virtual ~CADPolylinePFaceObject(){}

    short             nNumVertices;
    short             nNumFaces;
    long              nObjectsOwned;
    std::vector<CADHandle> hVertices; // content really depends on DWG version.
    CADHandle         hSeqend;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 803 2003 59 803 2004 59 726 2005 59 2006 321 2007 60 2008 62 2009 59 330 2008 2010 59 125 59 ,"{'AvgLine': 4, 'CountLine': 19, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 18, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100220,C++,"class CADImageDefObject final: public CADImageDefReactorObject
{
public:
    CADImageDefObject();
    virtual ~CADImageDefObject(){}

    double        dfXImageSizeInPx;
    double        dfYImageSizeInPx;
    std::string   sFilePath;
    bool          bIsLoaded;
    unsigned char dResUnits; // 0 == none, 2 == centimeters, 5 == inches
    double        dfXPixelSize; // size of 1 pixel in autocad units
    double        dfYPixelSize;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 625 2003 59 625 2004 59 2005 321 2006 2007 59 569 2008 59 856 582 2009 59 330 625 2010 59 330 625 2011 59 125 59 ,"{'AvgLine': 5, 'CountLine': 24, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 23, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 23, 'CountLineCodeExe': 8, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 7, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100234,C++,"class CADPolyline2DObject final: public CADEntityObject
{
public:
    CADPolyline2DObject();
    virtual ~CADPolyline2DObject(){}
    short     dFlags;
    short     dCurveNSmoothSurfType;
    double    dfStartWidth;
    double    dfEndWidth;
    double    dfThickness;
    double    dfElevation;
    CADVector vectExtrusion;

    long nObjectsOwned;

    CADHandleArray hVertices; // content really depends on DWG version.

    CADHandle hSeqend;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 803 2003 59 803 2004 59 625 2005 59 625 2006 59 625 2007 59 625 2008 59 2009 2010 59 726 2011 59 2012 2013 59 330 2014 2015 59 125 59 ,"{'AvgLine': 6, 'CountLine': 30, 'CountStmt': 22, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 27, 'CountStmtDecl': 20, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 27, 'CountLineCodeExe': 9, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 10, 'CountDeclInstanceVariablePublic': 10, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100250,C++,"class GMLASAnalyzerEntityResolver final: public GMLASBaseEntityResolver
{
        std::map<CPLString, CPLString>& m_oMapURIToPrefix;
        const std::map<CPLString, CPLString>& m_oMapDocNSURIToPrefix;

  public:
        GMLASAnalyzerEntityResolver(const CPLString& osBasePath,
                            std::map<CPLString, CPLString>& oMapURIToPrefix,
                            const std::map<CPLString, CPLString>& oMapDocNSURIToPrefix,
                            GMLASXSDCache& oCache)
            : GMLASBaseEntityResolver(osBasePath, oCache)
            , m_oMapURIToPrefix(oMapURIToPrefix)
            , m_oMapDocNSURIToPrefix(oMapDocNSURIToPrefix)
        {
        }

        virtual void DoExtraSchemaProcessing(const CPLString& osFilename,
                                             VSILFILE* fp) override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 44 2005 62 38 2006 59 601 2003 321 2004 60 2005 44 2005 62 38 2007 59 777 58 2000 40 601 2005 38 2008 44 2003 321 2004 60 2005 44 2005 62 38 2009 44 601 2003 321 2004 60 2005 44 2005 62 38 2010 44 2011 38 2012 41 58 2002 40 2008 44 2012 41 44 2006 40 2009 41 44 2007 40 2010 41 123 125 864 865 2013 40 601 2005 38 2014 44 2015 42 2016 41 2017 59 125 59 ,"{'AvgLine': 9, 'CountLine': 28, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 26, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100243,C++,"class CADVertex3DObject final: public CADEntityObject
{
public:
    CADVertex3DObject();
    virtual ~CADVertex3DObject(){}
    CADVector vertPosition;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 59 125 59 ,"{'AvgLine': 2, 'CountLine': 11, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 11, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100309,C++,"class DXFBlockDefinition
{
public:
    DXFBlockDefinition() {}
    ~DXFBlockDefinition();

    std::vector<OGRDXFFeature *> apoFeatures;
};",0,587 2000 123 777 58 2000 40 41 123 125 126 2000 40 41 59 2001 321 2002 60 2003 42 62 2004 59 125 59 ,"{'AvgLine': 4, 'CountLine': 16, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 15, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100274,C++,"class GDALGPKGDriver final: public GDALDriver
{
        bool m_bInitialized = false;

        void InitializeCreationOptionList();

    public:
        GDALGPKGDriver() = default;

        const char* GetMetadataItem(const char* pszName, const char* pszDomain) override
        {
            if( EQUAL(pszName, GDAL_DMD_CREATIONOPTIONLIST) )
            {
                InitializeCreationOptionList();
            }
            return GDALDriver::GetMetadataItem(pszName, pszDomain);
        }

        char** GetMetadata(const char* pszDomain) override
        {
            InitializeCreationOptionList();
            return GDALDriver::GetMetadata(pszDomain);
        }
};",0,587 2000 2001 58 777 2002 123 569 2003 61 655 59 865 2004 40 41 59 777 58 2000 40 41 61 613 59 601 582 42 2005 40 601 582 42 2006 44 601 582 42 2007 41 2008 123 688 40 2009 40 2006 44 2010 41 41 123 2004 40 41 59 125 792 2002 321 2005 40 2006 44 2007 41 59 125 582 42 42 2011 40 601 582 42 2007 41 2008 123 2004 40 41 59 792 2002 321 2011 40 2007 41 59 125 125 59 ,"{'AvgLine': 32, 'CountLine': 106, 'CountStmt': 20, 'MaxNesting': 1, 'AvgLineCode': 30, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 96, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 30, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 98, 'CountLineCodeExe': 63, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 63, 'CountLineInactive': 0, 'CountDeclMethodAll': 38, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100276,C++,"class OGRDB2Driver final: public GDALDriver
{
public:
    ~OGRDB2Driver();
};",0,587 2000 2001 58 777 2002 123 777 58 126 2000 40 41 59 125 59 ,"{'AvgLine': 0, 'CountLine': 5, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 5, 'CountStmtDecl': 1, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 5, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 35, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100317,C++,"class OGRFGdbSingleFeatureLayer final: public OGRLayer
{
  private:
    char               *pszVal;
    OGRFeatureDefn     *poFeatureDefn;
    int                 iNextShapeId;

  public:
                        OGRFGdbSingleFeatureLayer( const char* pszLayerName,
                                                   const char *pszVal );
               virtual ~OGRFGdbSingleFeatureLayer();

    virtual void        ResetReading() override { iNextShapeId = 0; }
    virtual OGRFeature *GetNextFeature() override;
    virtual OGRFeatureDefn *GetLayerDefn() override { return poFeatureDefn; }
    virtual int         TestCapability( const char * ) override { return FALSE; }
};",0,587 2000 2001 58 777 2002 123 773 58 582 42 2003 59 2004 42 2005 59 704 2006 59 777 58 2000 40 601 582 42 2007 44 601 582 42 2003 41 59 864 126 2000 40 41 59 864 865 2008 40 41 2009 123 2006 61 1500 59 125 864 2010 42 2011 40 41 2009 59 864 2004 42 2012 40 41 2009 123 792 2005 59 125 864 704 2013 40 601 582 42 41 2009 123 792 2014 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 46, 'CountStmt': 29, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 42, 'CountStmtDecl': 11, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 42, 'CountLineCodeExe': 21, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 88, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 58, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99031,C++,"class String : public Sized {
 public:
  // Size prefix.
  String(const uint8_t *data, uint8_t byte_width) : Sized(data, byte_width) {}
  // Manual size.
  String(const uint8_t *data, uint8_t byte_width, size_t sz)
      : Sized(data, byte_width, sz) {}

  size_t length() const { return size(); }
  const char *c_str() const { return reinterpret_cast<const char *>(data_); }
  std::string str() const { return std::string(c_str(), size()); }

  static String EmptyString() {
    static const char *empty_string = """";
    return String(reinterpret_cast<const uint8_t *>(empty_string), 1, 0);
  }
  bool IsTheEmptyString() const { return data_ == EmptyString().data_; }
};",0,587 2000 58 777 2001 123 777 58 330 2000 40 601 2002 42 2003 44 2002 2004 41 58 2001 40 2003 44 2004 41 123 125 330 2000 40 601 2002 42 2003 44 2002 2004 44 2005 2006 41 58 2001 40 2003 44 2004 44 2006 41 123 125 2005 2007 40 41 601 123 792 2008 40 41 59 125 601 582 42 2009 40 41 601 123 792 786 60 601 582 42 62 40 2010 41 59 125 2011 321 2012 2013 40 41 601 123 792 2011 321 2012 40 2009 40 41 44 2014 40 41 41 59 125 809 2000 2015 40 41 123 809 601 582 42 2016 61 362 59 792 2000 40 786 60 601 2002 42 62 40 2016 41 44 1501 44 1500 41 59 125 569 2017 40 41 601 123 792 2018 323 2015 40 41 46 2018 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 18, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 14, 'CountLineCodeExe': 8, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98674,C++,"class OGRGeomediaTableLayer final: public OGRGeomediaLayer
{
    char                *pszQuery;

    void                ClearStatement();
    OGRErr              ResetStatement();

    virtual CPLODBCStatement *  GetStatement() override;

  public:
    explicit            OGRGeomediaTableLayer( OGRGeomediaDataSource * );
                        virtual ~OGRGeomediaTableLayer();

    CPLErr              Initialize( const char *pszTableName,
                                    const char *pszGeomCol,
                                    OGRSpatialReference* poSRS );

    virtual void        ResetReading() override;
    virtual GIntBig     GetFeatureCount( int ) override;

    virtual OGRErr      SetAttributeFilter( const char * ) override;
    virtual OGRFeature *GetFeature( GIntBig nFeatureId ) override;

    virtual int         TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 582 42 2003 59 865 2004 40 41 59 2005 2006 40 41 59 864 2007 42 2008 40 41 2009 59 777 58 648 2000 40 2010 42 41 59 864 126 2000 40 41 59 2011 2012 40 601 582 42 2013 44 601 582 42 2014 44 2015 42 2016 41 59 864 865 2017 40 41 2009 59 864 2018 2019 40 704 41 2009 59 864 2005 2020 40 601 582 42 41 2009 59 864 2021 42 2022 40 2018 2023 41 2009 59 864 704 2024 40 601 582 42 41 2009 59 125 59 ,"{'AvgLine': 18, 'CountLine': 232, 'CountStmt': 96, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 82, 'MaxEssential': 4, 'SumEssential': 17, 'AvgCyclomatic': 2, 'CountLineCode': 180, 'CountStmtDecl': 18, 'MaxCyclomatic': 7, 'SumCyclomatic': 29, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 46, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 11, 'AltCountLineCode': 180, 'CountLineCodeExe': 117, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 46, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 18, 'CountLineInactive': 0, 'CountDeclMethodAll': 106, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 35, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 61, 'SumCyclomaticModified': 29, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98685,C++,"class CPL_DLL OGRSFDriverRegistrar
{

                OGRSFDriverRegistrar();
                ~OGRSFDriverRegistrar();

    static GDALDataset* OpenWithDriverArg(GDALDriver* poDriver,
                                                 GDALOpenInfo* poOpenInfo);
    static GDALDataset* CreateVectorOnly( GDALDriver* poDriver,
                                          const char * pszName,
                                          char ** papszOptions );
    static CPLErr       DeleteDataSource( GDALDriver* poDriver,
                                          const char * pszName );

  public:
//! @cond Doxygen_Suppress
    static OGRSFDriverRegistrar *GetRegistrar() OGR_DEPRECATED(""Use GDALDriverManager class instead"");

    // cppcheck-suppress functionStatic
    void        RegisterDriver( OGRSFDriver * poDriver ) OGR_DEPRECATED(""Use GDALDriverManager class instead"");

    // cppcheck-suppress functionStatic
    int         GetDriverCount( void ) OGR_DEPRECATED(""Use GDALDriverManager class instead"");
    // cppcheck-suppress functionStatic
    GDALDriver *GetDriver( int iDriver ) OGR_DEPRECATED(""Use GDALDriverManager class instead"");
    // cppcheck-suppress functionStatic
    GDALDriver *GetDriverByName( const char * ) OGR_DEPRECATED(""Use GDALDriverManager class instead"");

    // cppcheck-suppress functionStatic
    int         GetOpenDSCount() OGR_DEPRECATED(""Use GDALDriverManager class instead"");
    // cppcheck-suppress functionStatic
    OGRDataSource *GetOpenDS( int ) OGR_DEPRECATED(""Use GDALDriverManager class instead"");
//! @endcond
};",0,587 2000 2001 123 2001 40 41 59 126 2001 40 41 59 809 2002 42 2003 40 2004 42 2005 44 2006 42 2007 41 59 809 2002 42 2008 40 2004 42 2005 44 601 582 42 2009 44 582 42 42 2010 41 59 809 2011 2012 40 2004 42 2005 44 601 582 42 2009 41 59 777 58 330 809 2001 42 2013 40 41 2014 40 362 41 59 330 865 2015 40 2016 42 2005 41 2014 40 362 41 59 330 704 2017 40 865 41 2014 40 362 41 59 330 2004 42 2018 40 704 2019 41 2014 40 362 41 59 330 2004 42 2020 40 601 582 42 41 2014 40 362 41 59 330 704 2021 40 41 2014 40 362 41 59 330 2022 42 2023 40 704 41 2014 40 362 41 59 330 125 59 ,"{'AvgLine': 11, 'CountLine': 167, 'CountStmt': 71, 'MaxNesting': 3, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 59, 'MaxEssential': 4, 'SumEssential': 15, 'AvgCyclomatic': 2, 'CountLineCode': 142, 'CountStmtDecl': 28, 'MaxCyclomatic': 6, 'SumCyclomatic': 27, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 12, 'AltCountLineCode': 142, 'CountLineCodeExe': 67, 'CountLineComment': 10, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 39, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 29, 'CountDeclClassMethod': 4, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 27, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98906,C++,"  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };",0,587 2000 123 775 58 2001 42 2002 59 777 58 2000 40 41 58 2002 40 1500 41 123 125 2000 40 601 2000 38 2003 41 58 2002 40 2003 46 2002 41 123 2004 59 2005 40 2002 41 59 2006 59 125 2000 40 2001 42 2007 44 569 2008 61 829 41 58 2002 40 2007 41 123 688 40 2008 41 123 2009 59 2010 40 2002 41 59 2011 59 125 125 2000 38 758 61 40 601 2000 38 2003 41 123 2012 59 2013 40 2003 46 2002 41 59 2014 40 2002 41 59 2002 61 2003 46 2002 59 2015 59 792 42 823 59 125 126 2000 40 41 123 2016 59 2017 40 2002 41 59 2018 59 125 758 2001 42 40 41 601 123 792 2002 59 125 2001 42 758 354 40 41 601 123 792 2002 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 52, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 45, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100318,C++,"class OGRFileGDBGroup final: public GDALGroup
{
protected:
    friend class FGdbDataSource;
    std::vector<std::shared_ptr<GDALGroup>> m_apoSubGroups{};
    std::vector<OGRLayer*> m_apoLayers{};

public:
    OGRFileGDBGroup(const std::string& osParentName, const char* pszName):
        GDALGroup(osParentName, pszName) {}

    std::vector<std::string> GetGroupNames(CSLConstList papszOptions) const override;
    std::shared_ptr<GDALGroup> OpenGroup(const std::string& osName,
                                         CSLConstList papszOptions) const override;

    std::vector<std::string> GetVectorLayerNames(CSLConstList papszOptions) const override;
    OGRLayer* OpenVectorLayer(const std::string& osName,
                              CSLConstList papszOptions) const override;
};",0,587 2000 2001 58 777 2002 123 775 58 667 587 2003 59 2004 321 2005 60 2004 321 2006 60 2002 355 2007 123 125 59 2004 321 2005 60 2008 42 62 2009 123 125 59 777 58 2000 40 601 2004 321 2010 38 2011 44 601 582 42 2012 41 58 2002 40 2011 44 2012 41 123 125 2004 321 2005 60 2004 321 2010 62 2013 40 2014 2015 41 601 2016 59 2004 321 2006 60 2002 62 2017 40 601 2004 321 2010 38 2018 44 2014 2015 41 601 2016 59 2004 321 2005 60 2004 321 2010 62 2019 40 2014 2015 41 601 2016 59 2008 42 2020 40 601 2004 321 2010 38 2018 44 2014 2015 41 601 2016 59 125 59 ,"{'AvgLine': 7, 'CountLine': 53, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 50, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 50, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 33, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100336,C++,"class CodeWriter {
 public:
  CodeWriter(std::string pad = std::string())
      : pad_(pad), cur_ident_lvl_(0), ignore_ident_(false) {}

  // Clears the current ""written"" code.
  void Clear() {
    stream_.str("""");
    stream_.clear();
  }

  // Associates a key with a value.  All subsequent calls to operator+=, where
  // the specified key is contained in {{ and }} delimiters will be replaced by
  // the given value.
  void SetValue(const std::string &key, const std::string &value) {
    value_map_[key] = value;
  }

  std::string GetValue(const std::string &key) const {
    const auto it = value_map_.find(key);
    return it == value_map_.end() ? """" : it->second;
  }

  // Appends the given text to the generated code as well as a newline
  // character.  Any text within {{ and }} delimiters is replaced by values
  // previously stored in the CodeWriter by calling SetValue above.  The newline
  // will be suppressed if the text ends with the \\ character.
  void operator+=(std::string text);

  // Returns the current contents of the CodeWriter as a std::string.
  std::string ToString() const { return stream_.str(); }

  // Increase ident level for writing code
  void IncrementIdentLevel() { cur_ident_lvl_++; }
  // Decrease ident level for writing code
  void DecrementIdentLevel() {
    if (cur_ident_lvl_) cur_ident_lvl_--;
  }

  void SetPadding(const std::string &padding) { pad_ = padding; }

 private:
  std::map<std::string, std::string> value_map_;
  std::stringstream stream_;
  std::string pad_;
  int cur_ident_lvl_;
  bool ignore_ident_;

  // Add ident padding (tab or space) based on ident level
  void AppendIdent(std::stringstream &stream);
};",0,587 2000 123 777 58 2000 40 2001 321 2002 2003 61 2001 321 2002 40 41 41 58 2004 40 2003 41 44 2005 40 1500 41 44 2006 40 655 41 123 125 330 865 2007 40 41 123 2008 46 2009 40 362 41 59 2008 46 2010 40 41 59 125 330 330 330 865 2011 40 601 2001 321 2002 38 2012 44 601 2001 321 2002 38 2013 41 123 2014 91 2012 93 61 2013 59 125 2001 321 2002 2015 40 601 2001 321 2002 38 2012 41 601 123 601 561 2016 61 2017 46 2018 40 2012 41 59 792 2016 323 2017 46 2019 40 41 63 362 58 2016 354 2020 59 125 330 330 330 330 865 758 348 40 2001 321 2002 2021 41 59 330 2001 321 2002 2022 40 41 601 123 792 2023 46 2024 40 41 59 125 330 865 2025 40 41 123 2005 349 59 125 330 865 2026 40 41 123 688 40 2005 41 2005 338 59 125 865 2027 40 601 2001 321 2002 38 2028 41 123 2004 61 2028 59 125 773 58 2001 321 2029 60 2001 321 2002 44 2001 321 2002 62 2030 59 2001 321 2031 2032 59 2001 321 2002 2004 59 704 2005 59 569 2006 59 330 865 2033 40 2001 321 2031 38 2034 41 59 125 59 ,"{'AvgLine': 2, 'CountLine': 51, 'CountStmt': 30, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 30, 'CountStmtDecl': 19, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 30, 'CountLineCodeExe': 11, 'CountLineComment': 12, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.40', 'AltCountLineComment': 12, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
100248,C++,"class CADXRecordObject final: public CADBaseControlObject
{
public:
    CADXRecordObject();
    virtual ~CADXRecordObject(){}

    long                                nNumDataBytes;
    std::vector<char>                   abyDataBytes;
    short                               dCloningFlag;
    std::vector<std::pair<short, std::vector<char> > > astXRecordData;
    CADHandle                           hParentHandle;
    std::vector<CADHandle>              hReactors;
    CADHandle                           hXDictionary;
    std::vector<CADHandle>              hObjIdHandles;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 726 2003 59 2004 321 2005 60 582 62 2006 59 803 2007 59 2004 321 2005 60 2004 321 2008 60 803 44 2004 321 2005 60 582 62 62 62 2009 59 2010 2011 59 2004 321 2005 60 2010 62 2012 59 2010 2013 59 2004 321 2005 60 2010 62 2014 59 125 59 ,"{'AvgLine': 3, 'CountLine': 21, 'CountStmt': 18, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 16, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 20, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 8, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98704,C++,"class CPL_DLL OGRStyleTable
{
  private:
    char **m_papszStyleTable = nullptr;

    CPLString osLastRequestedStyleName{};
    int iNextStyle = 0;

    CPL_DISALLOW_COPY_ASSIGN(OGRStyleTable)

  public:
    OGRStyleTable();
    ~OGRStyleTable();
    GBool AddStyle(const char *pszName,const char *pszStyleString);
    GBool RemoveStyle(const char *pszName);
    GBool ModifyStyle(const char *pszName, const char *pszStyleString);

    GBool SaveStyleTable(const char *pszFilename);
    GBool LoadStyleTable(const char *pszFilename);
    const char *Find(const char *pszStyleString);
    GBool IsExist(const char *pszName);
    const char *GetStyleName(const char *pszName);
    void  Print(FILE *fpOut);
    void  Clear();
    OGRStyleTable   *Clone();
    void ResetStyleStringReading();
    const char *GetNextStyle();
    const char *GetLastStyleName();
};",0,587 2000 2001 123 773 58 582 42 42 2002 61 753 59 2003 2004 123 125 59 704 2005 61 1500 59 2006 40 2001 41 777 58 2001 40 41 59 126 2001 40 41 59 2007 2008 40 601 582 42 2009 44 601 582 42 2010 41 59 2007 2011 40 601 582 42 2009 41 59 2007 2012 40 601 582 42 2009 44 601 582 42 2010 41 59 2007 2013 40 601 582 42 2014 41 59 2007 2015 40 601 582 42 2014 41 59 601 582 42 2016 40 601 582 42 2010 41 59 2007 2017 40 601 582 42 2009 41 59 601 582 42 2018 40 601 582 42 2009 41 59 865 2019 40 2020 42 2021 41 59 865 2022 40 41 59 2001 42 2023 40 41 59 865 2024 40 41 59 601 582 42 2025 40 41 59 601 582 42 2026 40 41 59 125 59 ,"{'AvgLine': 10, 'CountLine': 201, 'CountStmt': 99, 'MaxNesting': 3, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 80, 'MaxEssential': 4, 'SumEssential': 30, 'AvgCyclomatic': 2, 'CountLineCode': 170, 'CountStmtDecl': 34, 'MaxCyclomatic': 5, 'SumCyclomatic': 37, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 31, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 18, 'AltCountLineCode': 170, 'CountLineCodeExe': 72, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 31, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 34, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 40, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 16, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 37, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 18, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99474,C++,"    class CPL_DLL ConstFieldIterator
    {
        friend class OGRFeature;
        struct Private;
        std::unique_ptr<Private> m_poPrivate;

        ConstFieldIterator(const OGRFeature* poSelf, int nPos);

      public:
//! @cond Doxygen_Suppress
        ConstFieldIterator(ConstFieldIterator&& oOther) noexcept; // declared but not defined. Needed for gcc 5.4 at least
        ~ConstFieldIterator();
        const FieldValue& operator*() const;
        ConstFieldIterator& operator++();
        bool operator!=(const ConstFieldIterator& it) const;
//! @endcond
    };",0,587 2000 2001 123 667 587 2002 59 816 2003 59 2004 321 2005 60 2003 62 2006 59 2001 40 601 2002 42 2007 44 704 2008 41 59 777 58 330 2001 40 2001 307 2009 41 748 59 330 126 2001 40 41 59 601 2010 38 758 42 40 41 601 59 2001 38 758 349 40 41 59 569 758 340 40 601 2001 38 2011 41 601 59 330 125 59 ,"{'AvgLine': 4, 'CountLine': 36, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 32, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 32, 'CountLineCodeExe': 1, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 109, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100204,C++,"class CADBlockControlObject final: public CADBaseControlObject
{
public:
    CADBlockControlObject();
    virtual ~CADBlockControlObject(){}
    long           nNumEntries; // doesn't count MODELSPACE and PAPERSPACE
    CADHandle      hNull;
    CADHandle      hXDictionary;
    CADHandleArray hBlocks; // ends with modelspace and paperspace handles.
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 726 2003 59 330 2004 2005 59 2004 2006 59 2007 2008 59 330 125 59 ,"{'AvgLine': 3, 'CountLine': 15, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 15, 'CountLineCodeExe': 3, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98729,C++,"class OCAD_EXTERN CADEllipse : public CADArc
{
public:
    CADEllipse();
    virtual ~CADEllipse(){}

    double getAxisRatio() const;
    void   setAxisRatio( double value );

    CADVector getSMAxis();
    void      setSMAxis( const CADVector& vectSMA );

    virtual void print() const override;
protected:
    CADVector vectSMAxis;
    double    axisRatio;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 625 2003 40 41 601 59 865 2004 40 625 2005 41 59 2006 2007 40 41 59 865 2008 40 601 2006 38 2009 41 59 864 865 2010 40 41 601 2011 59 775 58 2006 2012 59 625 2013 59 125 59 ,"{'AvgLine': 4, 'CountLine': 47, 'CountStmt': 17, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 44, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 43, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
99089,C++,"class GMLASXPathMatcher
{
        class XPathComponent
        {
            public:
                    CPLString m_osValue;
                    bool      m_bDirectChild;
        };

        /** For reference xpaths, map prefix namespace to its URI */
        std::map<CPLString, CPLString> m_oMapPrefixToURIReferenceXPaths;

        /** Reference xpaths */
        std::vector<CPLString> m_aosReferenceXPathsUncompiled;

        /** Reference xpaths ""compiled"" */
        std::vector< std::vector<XPathComponent> > m_aosReferenceXPaths;

        static bool MatchesRefXPath(
            const CPLString& osXPath,
            const std::vector<XPathComponent>& oRefXPath);

    public:
                                GMLASXPathMatcher();
                    virtual    ~GMLASXPathMatcher();

        void    SetRefXPaths(const std::map<CPLString, CPLString>&
                                    oMapPrefixToURIReferenceXPaths,
                                const std::vector<CPLString>&
                                    aosReferenceXPaths);

        void    SetDocumentMapURIToPrefix(
                    const std::map<CPLString,CPLString>& oMapURIToPrefix );

        /** Return true if osXPath matches one of the XPath of
            m_aosReferenceXPaths */
        bool MatchesRefXPath(
            const CPLString& osXPath,
            CPLString& osOutMatchedXPath ) const;

        const std::map<CPLString, CPLString>& GetMapPrefixToURI() const
            { return m_oMapPrefixToURIReferenceXPaths; }
};",0,587 2000 123 587 2001 123 777 58 2002 2003 59 569 2004 59 125 59 306 2005 321 2006 60 2007 44 2007 62 2008 59 306 2005 321 2009 60 2007 62 2010 59 306 2005 321 2009 60 2005 321 2009 60 2001 62 62 2011 59 809 569 2012 40 601 2007 38 2013 44 601 2005 321 2009 60 2001 62 38 2014 41 59 777 58 2000 40 41 59 864 126 2000 40 41 59 865 2015 40 601 2005 321 2006 60 2007 44 2007 62 38 2016 44 601 2005 321 2009 60 2007 62 38 2017 41 59 865 2018 40 601 2005 321 2006 60 2007 44 2007 62 38 2019 41 59 306 569 2012 40 601 2007 38 2013 44 2007 38 2020 41 601 59 601 2005 321 2006 60 2007 44 2007 62 38 2021 40 41 601 123 792 2008 59 125 125 59 ,"{'AvgLine': 24, 'CountLine': 212, 'CountStmt': 33, 'MaxNesting': 0, 'AvgLineCode': 21, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 176, 'CountStmtDecl': 32, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AltAvgLineCode': 21, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 28, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 7, 'AltCountLineCode': 176, 'CountLineCodeExe': 3, 'CountLineComment': 8, 'AltAvgLineComment': 0, 'AltCountLineBlank': 28, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 36, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100230,C++,"class CADMInsertObject final: public CADEntityObject
{
public:
    CADMInsertObject();
    virtual ~CADMInsertObject(){}
    CADVector vertInsertionPoint;
    CADVector vertScales;
    double    dfRotation;
    CADVector vectExtrusion;
    bool      bHasAttribs;
    long      nObjectsOwned;

    short nNumCols;
    short nNumRows;
    short nColSpacing;
    short nRowSpacing;

    CADHandle      hBlockHeader;
    CADHandleArray hAtrribs;
    CADHandle      hSeqend; // if bHasAttribs == true
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 59 2003 2005 59 625 2006 59 2003 2007 59 569 2008 59 726 2009 59 803 2010 59 803 2011 59 803 2012 59 803 2013 59 2014 2015 59 2016 2017 59 2014 2018 59 330 125 59 ,"{'AvgLine': 6, 'CountLine': 32, 'CountStmt': 28, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 30, 'CountStmtDecl': 23, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 30, 'CountLineCodeExe': 9, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 13, 'CountDeclInstanceVariablePublic': 13, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98938,C++,"class Matrix
{
public:
              Matrix();
    void      translate( const CADVector& vector );
    void      rotate( double rotation );
    void      scale( const CADVector& vector );
    CADVector multiply( const CADVector& vector ) const;
protected:
    std::array<double, 9> matrix;
};",0,587 2000 123 777 58 2000 40 41 59 865 2001 40 601 2002 38 2003 41 59 865 2004 40 625 2005 41 59 865 2006 40 601 2002 38 2003 41 59 2002 2007 40 601 2002 38 2003 41 601 59 775 58 2008 321 2009 60 625 44 1502 62 2010 59 125 59 ,"{'AvgLine': 12, 'CountLine': 75, 'CountStmt': 53, 'MaxNesting': 0, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 46, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 72, 'CountStmtDecl': 25, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 72, 'CountLineCodeExe': 47, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 24, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 28, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
98727,C++,"class OCAD_EXTERN CADAttrib : public CADText
{
public:
    CADAttrib();
    virtual ~CADAttrib(){}

    double getElevation() const;
    void   setElevation( double );

    std::string getTag() const;
    void   setTag( const std::string& );

    CADVector getAlignmentPoint() const;
    void      setAlignmentPoint( const CADVector& );

    bool isPositionLocked() const;
    void setPositionLocked( bool );

    virtual void print() const override;
    virtual void transform( const Matrix& matrix ) override;
protected:
    CADVector vertAlignmentPoint;
    double    dfElevation;
    std::string    sTag;
    bool      bLockPosition;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 625 2003 40 41 601 59 865 2004 40 625 41 59 2005 321 2006 2007 40 41 601 59 865 2008 40 601 2005 321 2006 38 41 59 2009 2010 40 41 601 59 865 2011 40 601 2009 38 41 59 569 2012 40 41 601 59 865 2013 40 569 41 59 864 865 2014 40 41 601 2015 59 864 865 2016 40 601 2017 38 2018 41 2015 59 775 58 2009 2019 59 625 2020 59 2005 321 2006 2021 59 569 2022 59 125 59 ,"{'AvgLine': 4, 'CountLine': 78, 'CountStmt': 32, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 73, 'CountStmtDecl': 18, 'MaxCyclomatic': 1, 'SumCyclomatic': 12, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 12, 'AltCountLineCode': 73, 'CountLineCodeExe': 20, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 2, 'CountClassDerived': 1, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 47, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 4}"
98738,C++,"class OCAD_EXTERN CADVector
{
public:
    CADVector();
    CADVector( double dx, double dy );
    CADVector( double dx, double dy, double dz );
    CADVector( const CADVector& other );
    bool      operator==( const CADVector& second );
    CADVector& operator=( const CADVector& second );
    double getX() const;
    void   setX( double value );

    double getY() const;
    void   setY( double value );

    double getZ() const;
    void   setZ( double value );

    bool getBHasZ() const;
    void setBHasZ( bool value );

protected:
    inline static bool fcmp( double x, double y );
protected:
    double X;
    double Y;
    double Z;
    bool   bHasZ;
};",0,587 2000 2001 123 777 58 2001 40 41 59 2001 40 625 2002 44 625 2003 41 59 2001 40 625 2002 44 625 2003 44 625 2004 41 59 2001 40 601 2001 38 2005 41 59 569 758 323 40 601 2001 38 2006 41 59 2001 38 758 61 40 601 2001 38 2006 41 59 625 2007 40 41 601 59 865 2008 40 625 2009 41 59 625 2010 40 41 601 59 865 2011 40 625 2009 41 59 625 2012 40 41 601 59 865 2013 40 625 2009 41 59 569 2014 40 41 601 59 865 2015 40 569 2009 41 59 775 58 700 809 569 2016 40 625 2017 44 625 2018 41 59 775 58 625 2019 59 625 2020 59 625 2021 59 569 2022 59 125 59 ,"{'AvgLine': 5, 'CountLine': 110, 'CountStmt': 53, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 15, 'AvgCyclomatic': 1, 'CountLineCode': 103, 'CountStmtDecl': 31, 'MaxCyclomatic': 2, 'SumCyclomatic': 18, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 15, 'AltCountLineCode': 103, 'CountLineCodeExe': 32, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 14, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 4}"
100203,C++,"class CADBaseControlObject CPL_NON_FINAL: public CADObject
{
public:
    virtual ~CADBaseControlObject(){}
    long           nObjectSizeInBits;
    CADHandle      hObjectHandle;
    CADEedArray    aEED;
    long           nNumReactors;
    bool           bNoXDictionaryPresent;

protected:
    explicit CADBaseControlObject(ObjectType typeIn);
};",0,587 2000 2001 58 777 2002 123 777 58 864 126 2000 40 41 123 125 726 2003 59 2004 2005 59 2006 2007 59 726 2008 59 569 2009 59 775 58 648 2000 40 2010 2011 41 59 125 59 ,"{'AvgLine': 4, 'CountLine': 20, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 19, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 9, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100224,C++,"class CADLWPolylineObject final: public CADEntityObject
{
public:
    CADLWPolylineObject();
    virtual ~CADLWPolylineObject(){}

    bool                         bClosed;
    double                       dfConstWidth;
    double                       dfElevation;
    double                       dfThickness;
    CADVector                    vectExtrusion;
    std::vector<CADVector>            avertVertices;
    std::vector<double>               adfBulges;
    std::vector<short>                adVerticesID;
    std::vector<std::pair<double, double>> astWidths; // start, end.
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 569 2003 59 625 2004 59 625 2005 59 625 2006 59 2007 2008 59 2009 321 2010 60 2007 62 2011 59 2009 321 2010 60 625 62 2012 59 2009 321 2010 60 803 62 2013 59 2009 321 2010 60 2009 321 2014 60 625 44 625 355 2015 59 330 125 59 ,"{'AvgLine': 4, 'CountLine': 24, 'CountStmt': 20, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 23, 'CountStmtDecl': 19, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 23, 'CountLineCodeExe': 6, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 9, 'CountDeclInstanceVariablePublic': 9, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100242,C++,"class CADVertex2DObject final: public CADEntityObject
{
public:
    CADVertex2DObject();
    virtual ~CADVertex2DObject(){}
    CADVector vertPosition; // Z must be taken from 2d polyline elevation.
    double    dfStartWidth;
    double    dfEndWidth;
    double    dfBulge;
    long      nVertexID;
    double    dfTangentDir;

/* NOTES: Neither elevation nor thickness are present in the 2D VERTEX data.
 * Both should be taken from the 2D POLYLINE entity (15)
 */
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 59 330 625 2005 59 625 2006 59 625 2007 59 726 2008 59 625 2009 59 305 125 59 ,"{'AvgLine': 5, 'CountLine': 25, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 21, 'CountLineCodeExe': 7, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.19', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99891,C++,"class StdioIOInterface : public IOInterfaces
{
    virtual void   *Open( std::string filename, std::string access ) const override;
    virtual uint64  Seek( void *io_handle, uint64 offset, int whence ) const override;
    virtual uint64  Tell( void *io_handle ) const override;
    virtual uint64  Read( void *buffer, uint64 size, uint64 nmemb, void *io_hanle ) const override;
    virtual uint64  Write( const void *buffer, uint64 size, uint64 nmemb, void *io_handle ) const override;
    virtual int     Eof( void *io_handle ) const override;
    virtual int     Flush( void *io_handle ) const override;
    virtual int     Close( void *io_handle ) const override;

    const char     *LastError() const;
};",0,587 2000 58 777 2001 123 864 865 42 2002 40 2003 321 2004 2005 44 2003 321 2004 2006 41 601 2007 59 864 2008 2009 40 865 42 2010 44 2008 2011 44 704 2012 41 601 2007 59 864 2008 2013 40 865 42 2010 41 601 2007 59 864 2008 2014 40 865 42 2015 44 2008 2016 44 2008 2017 44 865 42 2018 41 601 2007 59 864 2008 2019 40 601 865 42 2015 44 2008 2016 44 2008 2017 44 865 42 2010 41 601 2007 59 864 704 2020 40 865 42 2010 41 601 2007 59 864 704 2021 40 865 42 2010 41 601 2007 59 864 704 2022 40 865 42 2010 41 601 2007 59 601 582 42 2023 40 41 601 59 125 59 ,"{'AvgLine': 15, 'CountLine': 150, 'CountStmt': 62, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 45, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 103, 'CountStmtDecl': 23, 'MaxCyclomatic': 6, 'SumCyclomatic': 18, 'AltAvgLineCode': 10, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 35, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 9, 'AltCountLineCode': 103, 'CountLineCodeExe': 85, 'CountLineComment': 12, 'AltAvgLineComment': 1, 'AltCountLineBlank': 35, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 26, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 12, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 23, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 9, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 9, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98905,C++,"template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};",0,822 60 835 2000 62 587 2001 123 816 2002 123 2000 42 2003 59 2002 40 2000 42 2004 41 58 2003 40 2004 41 123 125 126 2002 40 41 123 619 2003 59 125 2002 38 758 61 40 2002 38 2005 41 123 2000 42 2006 61 2003 59 2003 61 1500 59 619 2006 59 2003 61 2005 46 2003 59 2005 46 2003 61 1500 59 792 42 823 59 125 125 2007 59 2001 38 758 61 40 601 2001 60 2000 62 38 2008 41 59 2001 40 601 2001 60 2000 62 38 2008 41 59 777 58 2001 40 41 58 2007 40 1500 41 123 125 2001 38 758 61 40 601 2000 38 2009 41 123 2002 2010 40 744 2000 40 2009 41 41 59 2007 61 2010 59 792 42 823 59 125 758 2000 38 40 41 601 123 792 42 2007 46 2011 59 125 2000 42 758 38 40 41 123 792 2007 46 2012 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 15, 'CountStmt': 26, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 16, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 15, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100303,C++,"       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };",0,587 2000 123 569 2001 59 2002 2003 59 777 58 865 2004 40 41 123 688 40 2001 41 123 2005 40 2003 41 59 2001 61 655 59 125 125 2000 40 41 58 2001 40 829 41 44 2003 40 2006 40 41 41 123 125 126 2000 40 41 123 2004 40 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 8, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100295,C++,"class NUMPYMultiDimensionalDataset : public GDALDataset
{
    PyArrayObject *psArray = nullptr;
    std::unique_ptr<GDALDataset> poMEMDS{};

    NUMPYMultiDimensionalDataset();
    ~NUMPYMultiDimensionalDataset();

public:
    static GDALDataset *Open( PyArrayObject *psArray );

    std::shared_ptr<GDALGroup> GetRootGroup() const override { return poMEMDS->GetRootGroup(); }
};",0,587 2000 58 777 2001 123 2002 42 2003 61 753 59 2004 321 2005 60 2001 62 2006 123 125 59 2000 40 41 59 126 2000 40 41 59 777 58 809 2001 42 2007 40 2002 42 2003 41 59 2004 321 2008 60 2009 62 2010 40 41 601 2011 123 792 2006 354 2010 40 41 59 125 125 59 ,"{'AvgLine': 18, 'CountLine': 86, 'CountStmt': 37, 'MaxNesting': 1, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 22, 'MaxEssential': 4, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 78, 'CountStmtDecl': 21, 'MaxCyclomatic': 4, 'SumCyclomatic': 7, 'AltAvgLineCode': 17, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 78, 'CountLineCodeExe': 21, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 146, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99770,C++,"template<class T>
class Optional FLATBUFFERS_FINAL_CLASS {
  // Non-scalar 'T' would extremely complicated Optional<T>.
  // Use is_scalar<T> checking because flatbuffers flatbuffers::is_arithmetic<T>
  // isn't implemented.
  static_assert(flatbuffers::is_scalar<T>::value, ""unexpected type T"");

 public:
  ~Optional() {}

  FLATBUFFERS_CONSTEXPR_CPP11 Optional() FLATBUFFERS_NOEXCEPT
    : value_(), has_value_(false) {}

  FLATBUFFERS_CONSTEXPR_CPP11 Optional(nullopt_t) FLATBUFFERS_NOEXCEPT
    : value_(), has_value_(false) {}

  FLATBUFFERS_CONSTEXPR_CPP11 Optional(T val) FLATBUFFERS_NOEXCEPT
    : value_(val), has_value_(true) {}

  FLATBUFFERS_CONSTEXPR_CPP11 Optional(const Optional &other) FLATBUFFERS_NOEXCEPT
    : value_(other.value_), has_value_(other.has_value_) {}

  FLATBUFFERS_CONSTEXPR_CPP14 Optional &operator=(const Optional &other) FLATBUFFERS_NOEXCEPT {
    value_ = other.value_;
    has_value_ = other.has_value_;
    return *this;
  }

  FLATBUFFERS_CONSTEXPR_CPP14 Optional &operator=(nullopt_t) FLATBUFFERS_NOEXCEPT {
    value_ = T();
    has_value_ = false;
    return *this;
  }

  FLATBUFFERS_CONSTEXPR_CPP14 Optional &operator=(T val) FLATBUFFERS_NOEXCEPT {
    value_ = val;
    has_value_ = true;
    return *this;
  }

  void reset() FLATBUFFERS_NOEXCEPT {
    *this = nullopt;
  }

  void swap(Optional &other) FLATBUFFERS_NOEXCEPT {
    std::swap(value_, other.value_);
    std::swap(has_value_, other.has_value_);
  }

  FLATBUFFERS_CONSTEXPR_CPP11 FLATBUFFERS_EXPLICIT_CPP11 operator bool() const FLATBUFFERS_NOEXCEPT {
    return has_value_;
  }

  FLATBUFFERS_CONSTEXPR_CPP11 bool has_value() const FLATBUFFERS_NOEXCEPT {
    return has_value_;
  }

  FLATBUFFERS_CONSTEXPR_CPP11 const T& operator*() const FLATBUFFERS_NOEXCEPT {
    return value_;
  }

  const T& value() const {
    FLATBUFFERS_ASSERT(has_value());
    return value_;
  }

  T value_or(T default_value) const FLATBUFFERS_NOEXCEPT {
    return has_value() ? value_ : default_value;
  }

 private:
  T value_;
  bool has_value_;
};",0,822 60 587 2000 62 587 2001 2002 123 330 330 330 810 40 2003 321 2004 60 2000 62 321 2005 44 362 41 59 777 58 126 2001 40 41 123 125 2006 2001 40 41 2007 58 2008 40 41 44 2009 40 655 41 123 125 2006 2001 40 2010 41 2007 58 2008 40 41 44 2009 40 655 41 123 125 2006 2001 40 2000 2011 41 2007 58 2008 40 2011 41 44 2009 40 829 41 123 125 2006 2001 40 601 2001 38 2012 41 2007 58 2008 40 2012 46 2008 41 44 2009 40 2012 46 2009 41 123 125 2013 2001 38 758 61 40 601 2001 38 2012 41 2007 123 2008 61 2012 46 2008 59 2009 61 2012 46 2009 59 792 42 823 59 125 2013 2001 38 758 61 40 2010 41 2007 123 2008 61 2000 40 41 59 2009 61 655 59 792 42 823 59 125 2013 2001 38 758 61 40 2000 2011 41 2007 123 2008 61 2011 59 2009 61 829 59 792 42 823 59 125 865 2014 40 41 2007 123 42 823 61 2015 59 125 865 2016 40 2001 38 2012 41 2007 123 2017 321 2016 40 2008 44 2012 46 2008 41 59 2017 321 2016 40 2009 44 2012 46 2009 41 59 125 2006 2018 758 569 40 41 601 2007 123 792 2009 59 125 2006 569 2019 40 41 601 2007 123 792 2009 59 125 2006 601 2000 38 758 42 40 41 601 2007 123 792 2008 59 125 601 2000 38 2005 40 41 601 123 2020 40 2019 40 41 41 59 792 2008 59 125 2000 2021 40 2000 2022 41 601 2007 123 792 2019 40 41 63 2008 58 2022 59 125 773 58 2000 2008 59 569 2009 59 125 59 ,"{'AvgLine': 3, 'CountLine': 73, 'CountStmt': 43, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 15, 'AvgCyclomatic': 1, 'CountLineCode': 54, 'CountStmtDecl': 25, 'MaxCyclomatic': 2, 'SumCyclomatic': 17, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 15, 'AltCountLineCode': 54, 'CountLineCodeExe': 21, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 15, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 30, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
98763,C++,"    class PCIDSK_DLL PCIDSKException : public std::exception
    {
        friend void PCIDSK_DLL ThrowPCIDSKException( const char *fmt, ... ) PCIDSK_PRINT_FUNC_FORMAT(1,2);
        friend int PCIDSK_DLL ThrowPCIDSKException( int ret_unused, const char *fmt, ... ) PCIDSK_PRINT_FUNC_FORMAT(2,3);
        friend void PCIDSK_DLL * ThrowPCIDSKExceptionPtr( const char *fmt, ... ) PCIDSK_PRINT_FUNC_FORMAT(1,2);
        PCIDSKException() {}
    public:
        PCIDSKException(const char *fmt, ... ) PCIDSK_PRINT_FUNC_FORMAT(2,3);
        virtual ~PCIDSKException() throw();

        void vPrintf( const char *fmt, std::va_list list );
        virtual const char *what() const throw() override { return message.c_str(); }
    private:
        std::string   message;
    };",0,587 2000 2001 58 777 2002 321 2003 123 667 865 2000 2004 40 601 582 42 2005 44 322 41 2006 40 1501 44 1502 41 59 667 704 2000 2004 40 704 2007 44 601 582 42 2005 44 322 41 2006 40 1502 44 1502 41 59 667 865 2000 42 2008 40 601 582 42 2005 44 322 41 2006 40 1501 44 1502 41 59 2001 40 41 123 125 777 58 2001 40 601 582 42 2005 44 322 41 2006 40 1502 44 1502 41 59 864 126 2001 40 41 825 40 41 59 865 2009 40 601 582 42 2005 44 2002 321 2010 2011 41 59 864 601 582 42 2012 40 41 601 825 40 41 2013 123 792 2014 46 2015 40 41 59 125 773 58 2002 321 2016 2017 59 125 59 ,"{'AvgLine': 16, 'CountLine': 97, 'CountStmt': 34, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 55, 'CountStmtDecl': 15, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 78, 'CountLineCodeExe': 20, 'CountLineComment': 4, 'AltAvgLineComment': 1, 'AltCountLineBlank': 11, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 17, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 3, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 12, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 42, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100191,C++,"class GDALPDFClippingDataset final: public GDALDataset
{
        GDALDataset* poSrcDS;
        double adfGeoTransform[6];

    public:
        GDALPDFClippingDataset(GDALDataset* poSrcDSIn, double adfClippingExtent[4]) : poSrcDS(poSrcDSIn)
        {
            double adfSrcGeoTransform[6];
            poSrcDS->GetGeoTransform(adfSrcGeoTransform);
            adfGeoTransform[0] = adfClippingExtent[0];
            adfGeoTransform[1] = adfSrcGeoTransform[1];
            adfGeoTransform[2] = 0.0;
            adfGeoTransform[3] = adfSrcGeoTransform[5] < 0 ? adfClippingExtent[3] : adfClippingExtent[1];
            adfGeoTransform[4] = 0.0;
            adfGeoTransform[5] = adfSrcGeoTransform[5];
            nRasterXSize = (int)((adfClippingExtent[2] - adfClippingExtent[0]) / adfSrcGeoTransform[1]);
            nRasterYSize = (int)((adfClippingExtent[3] - adfClippingExtent[1]) / fabs(adfSrcGeoTransform[5]));
        }

        virtual CPLErr GetGeoTransform( double * padfGeoTransform ) override
        {
            memcpy(padfGeoTransform, adfGeoTransform, 6 * sizeof(double));
            return CE_None;
        }

        virtual const OGRSpatialReference* GetSpatialRef() const override
        {
            return poSrcDS->GetSpatialRef();
        }
};",0,587 2000 2001 58 777 2002 123 2002 42 2003 59 625 2004 91 1502 93 59 777 58 2000 40 2002 42 2005 44 625 2006 91 1502 93 41 58 2003 40 2005 41 123 625 2007 91 1502 93 59 2003 354 2008 40 2007 41 59 2004 91 1500 93 61 2006 91 1500 93 59 2004 91 1501 93 61 2007 91 1501 93 59 2004 91 1502 93 61 1500 59 2004 91 1502 93 61 2007 91 1502 93 60 1500 63 2006 91 1502 93 58 2006 91 1501 93 59 2004 91 1502 93 61 1500 59 2004 91 1502 93 61 2007 91 1502 93 59 2009 61 40 704 41 40 40 2006 91 1502 93 45 2006 91 1500 93 41 47 2007 91 1501 93 41 59 2010 61 40 704 41 40 40 2006 91 1502 93 45 2006 91 1501 93 41 47 2011 40 2007 91 1502 93 41 41 59 125 864 2012 2013 40 625 42 2014 41 2015 123 2016 40 2014 44 2004 44 1502 42 805 40 625 41 41 59 792 2017 59 125 864 601 2018 42 2019 40 41 601 2015 123 792 2003 354 2019 40 41 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 31, 'CountStmt': 19, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 7, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 28, 'CountLineCodeExe': 14, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 145, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100003,C++,"class GDALPDFOCGDesc
{
    public:
        GDALPDFObjectNum  nId{};
        GDALPDFObjectNum  nParentId{};
        CPLString    osLayerName{};
};",0,587 2000 123 777 58 2001 2002 123 125 59 2001 2003 123 125 59 2004 2005 123 125 59 125 59 ,"{'AvgLine': 0, 'CountLine': 7, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99105,C++,"class GDALPDFArrayRW : public GDALPDFArray
{
    private:
        std::vector<GDALPDFObject*> m_array;

    public:
                               GDALPDFArrayRW();
        virtual               ~GDALPDFArrayRW();

        virtual int            GetLength() override;
        virtual GDALPDFObject* Get(int nIndex) override;

        GDALPDFArrayRW&        Add(GDALPDFObject* poObj);

        GDALPDFArrayRW&        Add(GDALPDFArrayRW* poArray) { return Add(GDALPDFObjectRW::CreateArray(poArray)); }
        GDALPDFArrayRW&        Add(GDALPDFDictionaryRW* poDict) { return Add(GDALPDFObjectRW::CreateDictionary(poDict)); }
        GDALPDFArrayRW&        Add(const char* pszVal) { return Add(GDALPDFObjectRW::CreateString(pszVal)); }
        GDALPDFArrayRW&        Add(int nVal) { return Add(GDALPDFObjectRW::CreateInt(nVal)); }
        GDALPDFArrayRW&        Add(double dfVal, int bCanRepresentRealAsString = FALSE) { return Add(GDALPDFObjectRW::CreateReal(dfVal, bCanRepresentRealAsString)); }
        GDALPDFArrayRW&        AddWithPrecision(double dfVal, int nPrecision) { return Add(GDALPDFObjectRW::CreateRealWithPrecision(dfVal, nPrecision)); }
        GDALPDFArrayRW&        Add(double* padfVal, int nCount, int bCanRepresentRealAsString = FALSE);
        GDALPDFArrayRW&        Add(const GDALPDFObjectNum& nNum, int nGen) { return Add(GDALPDFObjectRW::CreateIndirect(nNum, nGen)); }
};",0,587 2000 58 777 2001 123 773 58 2002 321 2003 60 2004 42 62 2005 59 777 58 2000 40 41 59 864 126 2000 40 41 59 864 704 2006 40 41 2007 59 864 2004 42 2008 40 704 2009 41 2007 59 2000 38 2010 40 2004 42 2011 41 59 2000 38 2010 40 2000 42 2012 41 123 792 2010 40 2013 321 2014 40 2012 41 41 59 125 2000 38 2010 40 2015 42 2016 41 123 792 2010 40 2017 321 2018 40 2016 41 41 59 125 2000 38 2010 40 601 582 42 2019 41 123 792 2010 40 2020 321 2021 40 2019 41 41 59 125 2000 38 2010 40 704 2022 41 123 792 2010 40 2023 321 2024 40 2022 41 41 59 125 2000 38 2010 40 625 2025 44 704 2026 61 2027 41 123 792 2010 40 2028 321 2029 40 2025 44 2026 41 41 59 125 2000 38 2030 40 625 2025 44 704 2031 41 123 792 2010 40 2032 321 2033 40 2025 44 2031 41 41 59 125 2000 38 2010 40 625 42 2034 44 704 2035 44 704 2026 61 2027 41 59 2000 38 2010 40 601 2036 38 2037 44 704 2038 41 123 792 2010 40 2039 321 2040 40 2037 44 2038 41 41 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 51, 'CountStmt': 27, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 47, 'CountStmtDecl': 16, 'MaxCyclomatic': 2, 'SumCyclomatic': 14, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 13, 'AltCountLineCode': 47, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 19, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99725,C++,"class OCAD_EXTERN CADAttdef : public CADAttrib
{
public:
    CADAttdef();
    virtual ~CADAttdef(){}

    std::string getPrompt() const;
    void   setPrompt( const std::string& );

    virtual void print() const override;
protected:
    std::string sPrompt;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 2003 321 2004 2005 40 41 601 59 865 2006 40 601 2003 321 2004 38 41 59 864 865 2007 40 41 601 2008 59 775 58 2003 321 2004 2009 59 125 59 ,"{'AvgLine': 4, 'CountLine': 35, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 33, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 52, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 42, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
99593,C++,"class OGRPDFWritableLayer final: public OGRMemLayer
{
    PDFWritableVectorDataset       *poDS;

public:
        OGRPDFWritableLayer(PDFWritableVectorDataset* poDS,
                    const char * pszName,
                    OGRSpatialReference *poSRS,
                    OGRwkbGeometryType eGeomType);

    virtual int                 TestCapability( const char * ) override;
    virtual OGRErr              ICreateFeature( OGRFeature *poFeature ) override;
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 777 58 2000 40 2003 42 2004 44 601 582 42 2005 44 2006 42 2007 44 2008 2009 41 59 864 704 2010 40 601 582 42 41 2011 59 864 2012 2013 40 2014 42 2015 41 2011 59 125 59 ,"{'AvgLine': 6, 'CountLine': 33, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 30, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 30, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 111, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99849,C++,"class VSILFileIO : public CADFileIO
{
public:
    explicit VSILFileIO(const char* pszFilePath);
    virtual ~VSILFileIO();
    virtual const char* ReadLine() override;
    virtual bool Eof() const override;
    virtual bool Open(int mode) override;
    virtual bool Close() override;
    virtual int Seek(long int offset, SeekOrigin origin) override;
    virtual long int Tell() override;
    virtual size_t Read(void* ptr, size_t size) override;
    virtual size_t Write(void* ptr, size_t size) override;
    virtual void Rewind() override;
protected:
    VSILFILE *m_oFileStream;
};",0,587 2000 58 777 2001 123 777 58 648 2000 40 601 582 42 2002 41 59 864 126 2000 40 41 59 864 601 582 42 2003 40 41 2004 59 864 569 2005 40 41 601 2004 59 864 569 2006 40 704 2007 41 2004 59 864 569 2008 40 41 2004 59 864 704 2009 40 726 704 2010 44 2011 2012 41 2004 59 864 726 704 2013 40 41 2004 59 864 2014 2015 40 865 42 2016 44 2014 2017 41 2004 59 864 2014 2018 40 865 42 2016 44 2014 2017 41 2004 59 864 865 2019 40 41 2004 59 775 58 2020 42 2021 59 125 59 ,"{'AvgLine': 7, 'CountLine': 98, 'CountStmt': 45, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 31, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 89, 'CountStmtDecl': 16, 'MaxCyclomatic': 5, 'SumCyclomatic': 21, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 89, 'CountLineCodeExe': 37, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 30, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
98732,C++,"class OCAD_EXTERN CADLWPolyline : public CADPolyline3D
{
public:
    CADLWPolyline();
    virtual ~CADLWPolyline(){}

    double getConstWidth() const;
    void   setConstWidth( double value );

    double getElevation() const;
    void   setElevation( double value );

    CADVector getVectExtrusion() const;
    void      setVectExtrusion( const CADVector& value );

    std::vector<std::pair<double, double> > getWidths() const;
    void  setWidths( const std::vector<std::pair<double, double> >& value );

    std::vector<double> getBulges() const;
    void           setBulges( const std::vector<double>& value );

    bool isClosed() const;
    void setClosed( bool state );

    virtual void print() const override;
protected:
    bool                          bClosed;
    double                        constWidth;
    double                        elevation;
    CADVector                     vectExtrusion;
    std::vector<double>                bulges;
    std::vector<std::pair<double, double> > widths; // Start & end.
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 625 2003 40 41 601 59 865 2004 40 625 2005 41 59 625 2006 40 41 601 59 865 2007 40 625 2005 41 59 2008 2009 40 41 601 59 865 2010 40 601 2008 38 2005 41 59 2011 321 2012 60 2011 321 2013 60 625 44 625 62 62 2014 40 41 601 59 865 2015 40 601 2011 321 2012 60 2011 321 2013 60 625 44 625 62 62 38 2005 41 59 2011 321 2012 60 625 62 2016 40 41 601 59 865 2017 40 601 2011 321 2012 60 625 62 38 2005 41 59 569 2018 40 41 601 59 865 2019 40 569 2020 41 59 864 865 2021 40 41 601 2022 59 775 58 569 2023 59 625 2024 59 625 2025 59 2008 2026 59 2011 321 2012 60 625 62 2027 59 2011 321 2012 60 2011 321 2013 60 625 44 625 62 62 2028 59 330 125 59 ,"{'AvgLine': 4, 'CountLine': 99, 'CountStmt': 45, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 15, 'AvgCyclomatic': 1, 'CountLineCode': 92, 'CountStmtDecl': 27, 'MaxCyclomatic': 2, 'SumCyclomatic': 16, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 15, 'AltCountLineCode': 92, 'CountLineCodeExe': 23, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 35, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 15, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 82, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 17, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 6}"
100209,C++,"class CADDimensionAlignedObject final: public CADDimensionObject
{
public:
    CADDimensionAlignedObject();
    virtual ~CADDimensionAlignedObject(){}
    CADVector vert13pt, vert14pt;

    double dfExtLnRot;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 44 2005 59 625 2006 59 125 59 ,"{'AvgLine': 3, 'CountLine': 14, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 13, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98939,C++,"class OCAD_EXTERN CADHandle final
{
public:
    explicit CADHandle( unsigned char codeIn = 0 );
    CADHandle( const CADHandle& other );
    CADHandle& operator=( const CADHandle& other );

    void addOffset( unsigned char val );
    bool isNull() const;
    long getAsLong() const;
    long getAsLong( const CADHandle& ref_handle ) const;
private:
    static long getAsLong(const std::vector<unsigned char>& handle);
protected:
    unsigned char              code;
    std::vector<unsigned char> handleOrOffset;
};",0,587 2000 2001 2002 123 777 58 648 2001 40 856 582 2003 61 1500 41 59 2001 40 601 2001 38 2004 41 59 2001 38 758 61 40 601 2001 38 2004 41 59 865 2005 40 856 582 2006 41 59 569 2007 40 41 601 59 726 2008 40 41 601 59 726 2008 40 601 2001 38 2009 41 601 59 773 58 809 726 2008 40 601 2010 321 2011 60 856 582 62 38 2012 41 59 775 58 856 582 2013 59 2010 321 2011 60 856 582 62 2014 59 125 59 ,"{'AvgLine': 9, 'CountLine': 94, 'CountStmt': 46, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 32, 'MaxEssential': 6, 'SumEssential': 13, 'AvgCyclomatic': 2, 'CountLineCode': 90, 'CountStmtDecl': 17, 'MaxCyclomatic': 7, 'SumCyclomatic': 19, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 90, 'CountLineCodeExe': 37, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 38, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
100241,C++,"class CADTextObject final: public CADEntityObject
{
public:
    CADTextObject();
    virtual ~CADTextObject(){}
    unsigned char DataFlags;
    double        dfElevation;
    CADVector     vertInsetionPoint;
    CADVector     vertAlignmentPoint;
    CADVector     vectExtrusion;
    double        dfThickness;
    double        dfObliqueAng;
    double        dfRotationAng;
    double        dfHeight;
    double        dfWidthFactor;
    std::string   sTextValue;
    short         dGeneration;
    short         dHorizAlign;
    short         dVertAlign;

    CADHandle hStyle;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 856 582 2003 59 625 2004 59 2005 2006 59 2005 2007 59 2005 2008 59 625 2009 59 625 2010 59 625 2011 59 625 2012 59 625 2013 59 2014 321 2015 2016 59 803 2017 59 803 2018 59 803 2019 59 2020 2021 59 125 59 ,"{'AvgLine': 7, 'CountLine': 36, 'CountStmt': 32, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 27, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 35, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 15, 'CountDeclInstanceVariablePublic': 15, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98733,C++,"class OCAD_EXTERN CADLine : public CADGeometry
{
public:
    CADLine();
    CADLine( const CADPoint3D& startIn, const CADPoint3D& endIn );
    virtual ~CADLine(){}
    CADPoint3D getStart() const;
    void       setStart( const CADPoint3D& value );

    CADPoint3D getEnd() const;
    void       setEnd( const CADPoint3D& value );

    virtual void print() const override;
    virtual void transform( const Matrix& matrix ) override;
protected:
    CADPoint3D start;
    CADPoint3D end;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 2001 40 601 2003 38 2004 44 601 2003 38 2005 41 59 864 126 2001 40 41 123 125 2003 2006 40 41 601 59 865 2007 40 601 2003 38 2008 41 59 2003 2009 40 41 601 59 865 2010 40 601 2003 38 2008 41 59 864 865 2011 40 41 601 2012 59 864 865 2013 40 601 2014 38 2015 41 2012 59 775 58 2003 2016 59 2003 2017 59 125 59 ,"{'AvgLine': 4, 'CountLine': 59, 'CountStmt': 24, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 57, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 9, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 57, 'CountLineCodeExe': 18, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 45, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
100226,C++,"class CADLayerObject final: public CADBaseControlObject
{
public:
    CADLayerObject();
    virtual ~CADLayerObject(){}

    std::string sLayerName;
    bool        b64Flag;
    short       dXRefIndex;
    bool        bXDep;
    bool        bFrozen;
    bool        bOn;
    bool        bFrozenInNewVPORT;
    bool        bLocked;
    bool        bPlottingFlag;
    short       dLineWeight;
    short       dCMColor;

    CADHandle      hLayerControl;
    CADHandleArray hReactors;
    CADHandle      hXDictionary;
    CADHandle      hExternalRefBlockHandle;
    CADHandle      hPlotStyle;
    CADHandle      hMaterial;
    CADHandle      hLType;
    CADHandle      hUnknownHandle;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 321 2004 2005 59 569 2006 59 803 2007 59 569 2008 59 569 2009 59 569 2010 59 569 2011 59 569 2012 59 569 2013 59 803 2014 59 803 2015 59 2016 2017 59 2018 2019 59 2016 2020 59 2016 2021 59 2016 2022 59 2016 2023 59 2016 2024 59 2016 2025 59 125 59 ,"{'AvgLine': 7, 'CountLine': 41, 'CountStmt': 40, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 39, 'CountStmtDecl': 32, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 39, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 19, 'CountDeclInstanceVariablePublic': 19, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100357,C++,"template< class T >
class DeleteGuard
{
public:
    explicit DeleteGuard( T *p ) : _ptr( p ) { }
    ~DeleteGuard()
    {
        delete _ptr;
    }

    T *take()
    {
        T *tmp = _ptr;
        _ptr = nullptr;
        return tmp;
    }

private:
    T *_ptr;
    // prevent default copy constructor and assignment operator
    DeleteGuard( const DeleteGuard & );
    DeleteGuard &operator=( const DeleteGuard & );
};",0,822 60 587 2000 62 587 2001 123 777 58 648 2001 40 2000 42 2002 41 58 2003 40 2002 41 123 125 126 2001 40 41 123 619 2003 59 125 2000 42 2004 40 41 123 2000 42 2005 61 2003 59 2003 61 753 59 792 2005 59 125 773 58 2000 42 2003 59 330 2001 40 601 2001 38 41 59 2001 38 758 61 40 601 2001 38 41 59 125 59 ,"{'AvgLine': 3, 'CountLine': 22, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 19, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 40, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100222,C++,"class CADImageObject final: public CADEntityObject
{
public:
    CADImageObject();
    virtual ~CADImageObject(){}

    long      dClassVersion;
    CADVector vertInsertion;
    CADVector vectUDirection;
    CADVector vectVDirection;
    double    dfSizeX;
    double    dfSizeY;
    /*  display properties (bit coded), 1==show image,
        2==show image when not aligned with screen, 4==use
        clipping boundary, 8==transparency on */
    short     dDisplayProps;

    bool          bClipping;
    unsigned char dBrightness;
    unsigned char dContrast;
    unsigned char dFade;
    bool          bClipMode; // R2010+

    short dClipBoundaryType;

    long              nNumberVerticesInClipPolygon;
    std::vector<CADVector> avertClippingPolygonVertices;

    CADHandle hImageDef;
    CADHandle hImageDefReactor;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 726 2003 59 2004 2005 59 2004 2006 59 2004 2007 59 625 2008 59 625 2009 59 305 803 2010 59 569 2011 59 856 582 2012 59 856 582 2013 59 856 582 2014 59 569 2015 59 330 803 2016 59 726 2017 59 2018 321 2019 60 2004 62 2020 59 2021 2022 59 2021 2023 59 125 59 ,"{'AvgLine': 8, 'CountLine': 46, 'CountStmt': 36, 'MaxNesting': 0, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 38, 'CountStmtDecl': 31, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 38, 'CountLineCodeExe': 13, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 17, 'CountDeclInstanceVariablePublic': 17, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100229,C++,"class CADLineTypeObject final: public CADBaseControlObject
{
public:
    CADLineTypeObject();
    virtual ~CADLineTypeObject(){}

    std::string           sEntryName;
    bool                  b64Flag;
    short                 dXRefIndex;
    bool                  bXDep;
    std::string           sDescription;
    double                dfPatternLen;
    unsigned char         dAlignment;
    unsigned char         nNumDashes;
    std::vector<CADDash>  astDashes;
    std::vector<unsigned char> abyTextArea; // TODO: what is it?
    CADHandle             hLTControl;
    CADHandleArray        hReactors;
    CADHandle             hXDictionary;
    CADHandle             hXRefBlock;
    CADHandleArray        hShapefiles; // TODO: one for each dash?
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 321 2004 2005 59 569 2006 59 803 2007 59 569 2008 59 2003 321 2004 2009 59 625 2010 59 856 582 2011 59 856 582 2012 59 2003 321 2013 60 2014 62 2015 59 2003 321 2013 60 856 582 62 2016 59 330 2017 2018 59 2019 2020 59 2017 2021 59 2017 2022 59 2019 2023 59 330 125 59 ,"{'AvgLine': 5, 'CountLine': 32, 'CountStmt': 32, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 27, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 31, 'CountLineCodeExe': 8, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 15, 'CountDeclInstanceVariablePublic': 15, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98734,C++,"class OCAD_EXTERN CADPoint3D : public CADGeometry
{
public:
    CADPoint3D();
    CADPoint3D( const CADVector& positionIn, double thicknessIn );
    virtual ~CADPoint3D(){}
    CADVector getPosition() const;
    void      setPosition( const CADVector& value );

    CADVector getExtrusion() const;
    void      setExtrusion( const CADVector& value );

    double getXAxisAng() const;
    void   setXAxisAng( double value );

    virtual void print() const override;
    virtual void transform( const Matrix& matrix ) override;
protected:
    CADVector position;
    CADVector extrusion;
    double    xAxisAng;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 2001 40 601 2003 38 2004 44 625 2005 41 59 864 126 2001 40 41 123 125 2003 2006 40 41 601 59 865 2007 40 601 2003 38 2008 41 59 2003 2009 40 41 601 59 865 2010 40 601 2003 38 2008 41 59 625 2011 40 41 601 59 865 2012 40 625 2008 41 59 864 865 2013 40 41 601 2014 59 864 865 2015 40 601 2016 38 2017 41 2014 59 775 58 2003 2018 59 2003 2019 59 625 2020 59 125 59 ,"{'AvgLine': 4, 'CountLine': 69, 'CountStmt': 31, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 66, 'CountStmtDecl': 16, 'MaxCyclomatic': 1, 'SumCyclomatic': 11, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 66, 'CountLineCodeExe': 19, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 5, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 64, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 3}"
98736,C++,"class OCAD_EXTERN CADText : public CADPoint3D
{
public:
    CADText();
    virtual ~CADText(){}

    std::string getTextValue() const;
    void   setTextValue( const std::string& value );

    double getHeight() const;
    void   setHeight( double value );

    double getRotationAngle() const;
    void   setRotationAngle( double value );

    double getObliqueAngle() const;
    void   setObliqueAngle( double value );

    virtual void print() const override;
protected:
    double obliqueAngle;
    double rotationAngle;
    double height;
    std::string textValue;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 2003 321 2004 2005 40 41 601 59 865 2006 40 601 2003 321 2004 38 2007 41 59 625 2008 40 41 601 59 865 2009 40 625 2007 41 59 625 2010 40 41 601 59 865 2011 40 625 2007 41 59 625 2012 40 41 601 59 865 2013 40 625 2007 41 59 864 865 2014 40 41 601 2015 59 775 58 625 2016 59 625 2017 59 625 2018 59 2003 321 2004 2019 59 125 59 ,"{'AvgLine': 4, 'CountLine': 71, 'CountStmt': 29, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 66, 'CountStmtDecl': 18, 'MaxCyclomatic': 1, 'SumCyclomatic': 11, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 66, 'CountLineCodeExe': 17, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 35, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 4}"
98988,C++,"class NITFWrapperRasterBand final: public NITFProxyPamRasterBand
{
  GDALRasterBand* poBaseBand;
  GDALColorTable* poColorTable;
  GDALColorInterp eInterp;
  int             bIsJPEG;

  protected:
    /* Pure virtual method of the NITFProxyPamRasterBand */
    virtual GDALRasterBand* RefUnderlyingRasterBand() override;

  public:
                   NITFWrapperRasterBand( NITFDataset * poDS,
                                          GDALRasterBand* poBaseBand,
                                          int nBand);
    virtual ~NITFWrapperRasterBand();

    /* Methods from GDALRasterBand we want to override */
    virtual GDALColorInterp GetColorInterpretation() override;
    virtual CPLErr          SetColorInterpretation( GDALColorInterp ) override;

    virtual GDALColorTable *GetColorTable() override;

    virtual int             GetOverviewCount() override;
    virtual GDALRasterBand *GetOverview(int) override;

    /* Specific method */
    void                    SetColorTableFromNITFBandInfo();
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2005 42 2006 59 2007 2008 59 704 2009 59 775 58 305 864 2003 42 2010 40 41 2011 59 777 58 2000 40 2012 42 2013 44 2003 42 2004 44 704 2014 41 59 864 126 2000 40 41 59 305 864 2007 2015 40 41 2011 59 864 2016 2017 40 2007 41 2011 59 864 2005 42 2018 40 41 2011 59 864 704 2019 40 41 2011 59 864 2003 42 2020 40 704 41 2011 59 305 865 2021 40 41 59 125 59 ,"{'AvgLine': 8, 'CountLine': 101, 'CountStmt': 42, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 26, 'MaxEssential': 3, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 88, 'CountStmtDecl': 16, 'MaxCyclomatic': 3, 'SumCyclomatic': 15, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 88, 'CountLineCodeExe': 34, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 164, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
100305,C++,"  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };",0,587 2000 123 775 58 2001 42 2002 59 777 58 2000 40 41 58 2002 40 1500 41 123 125 2000 40 601 2000 38 2003 41 58 2002 40 2003 46 2002 41 123 2004 59 2005 40 2002 41 59 2006 59 125 2000 40 2001 42 2007 44 569 2008 61 829 41 58 2002 40 2007 41 123 688 40 2008 41 123 2009 59 2010 40 2002 41 59 2011 59 125 125 2000 38 758 61 40 601 2000 38 2003 41 123 2012 59 2013 40 2003 46 2002 41 59 2014 40 2002 41 59 2002 61 2003 46 2002 59 2015 59 792 42 823 59 125 126 2000 40 41 123 2016 59 2017 40 2002 41 59 2018 59 125 758 2001 42 40 41 601 123 792 2002 59 125 2001 42 758 354 40 41 601 123 792 2002 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 52, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 45, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99311,C++,"class OCAD_EXTERN CADFileIO
{
public:
    enum class SeekOrigin
    {
        BEG, /**< Begin of the file */
        CUR, /**< Current position of the pointer */
        END  /**< End of file */
    };

    enum OpenMode
    {
        binary      = 1L << 2,
        in          = 1L << 3,
        out         = 1L << 4
    };

public:
    explicit CADFileIO( const char * pszFileName );
    virtual                 ~CADFileIO();

    virtual const char * ReadLine() = 0;
    virtual bool     Eof() const                                = 0;
    virtual bool     Open( int mode )                           = 0;
    virtual bool     IsOpened() const;
    virtual bool     Close();
    virtual int      Seek( long int offset, SeekOrigin origin ) = 0;
    virtual long int Tell()                                     = 0;
    virtual size_t   Read( void * ptr, size_t size )            = 0;
    virtual size_t   Write( void * ptr, size_t size )           = 0;
    virtual void     Rewind()                                   = 0;
    const char * GetFilePath() const;

protected:
    std::string m_soFilePath;
    bool        m_bIsOpened;
};",0,587 2000 2001 123 777 58 640 587 2002 123 2003 44 306 2004 44 306 2005 306 125 59 640 2006 123 2007 61 1501 332 1502 44 2008 61 1501 332 1502 44 2009 61 1501 332 1502 125 59 777 58 648 2001 40 601 582 42 2010 41 59 864 126 2001 40 41 59 864 601 582 42 2011 40 41 61 1500 59 864 569 2012 40 41 601 61 1500 59 864 569 2013 40 704 2014 41 61 1500 59 864 569 2015 40 41 601 59 864 569 2016 40 41 59 864 704 2017 40 726 704 2018 44 2002 2019 41 61 1500 59 864 726 704 2020 40 41 61 1500 59 864 2021 2022 40 865 42 2023 44 2021 2024 41 61 1500 59 864 2021 2025 40 865 42 2023 44 2021 2024 41 61 1500 59 864 865 2026 40 41 61 1500 59 601 582 42 2027 40 41 601 59 775 58 2028 321 2029 2030 59 569 2031 59 125 59 ,"{'AvgLine': 4, 'CountLine': 46, 'CountStmt': 23, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 42, 'CountStmtDecl': 18, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 13, 'AltCountLineCode': 42, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
99028,C++,"class Object {
 public:
  Object(const uint8_t *data, uint8_t byte_width)
      : data_(data), byte_width_(byte_width) {}

 protected:
  const uint8_t *data_;
  uint8_t byte_width_;
};",0,587 2000 123 777 58 2000 40 601 2001 42 2002 44 2001 2003 41 58 2004 40 2002 41 44 2005 40 2003 41 123 125 775 58 601 2001 42 2004 59 2001 2005 59 125 59 ,"{'AvgLine': 2, 'CountLine': 9, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 8, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
99037,C++,"class WMSMiniDriver_AGS : public WMSMiniDriver
{
public:
    WMSMiniDriver_AGS();
    virtual ~WMSMiniDriver_AGS();

public:
    virtual CPLErr Initialize(CPLXMLNode *config, char **papszOpenOptions) override;
    virtual void GetCapabilities(WMSMiniDriverCapabilities *caps) override;
    virtual CPLErr TiledImageRequest(WMSHTTPRequest &request,
                                   const GDALWMSImageRequestInfo &iri,
                                   const GDALWMSTiledImageRequestInfo &tiri) override;
    virtual void GetTiledImageInfo(CPLString &url,
                                   const GDALWMSImageRequestInfo &iri,
                                   const GDALWMSTiledImageRequestInfo &tiri,
                                   int nXInBlock,
                                   int nYInBlock) override;

    virtual char **GetMetadataDomainList() override;

protected:

    /*
     * png | png8 | png24 | jpg | pdf | bmp | gif | svg | png32
     * http://resources.arcgis.com/en/help/rest/apiref/
     * Parameter - format
     */
    CPLString m_image_format;
    CPLString m_transparent;
    CPLString m_bbox_order;
    CPLString m_irs;

    CPLString m_layers;
    CPLString m_srs;
    CPLString m_crs;
    CPLString m_time_range;

    CPLString m_identification_tolerance;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 864 126 2000 40 41 59 777 58 864 2002 2003 40 2004 42 2005 44 582 42 42 2006 41 2007 59 864 865 2008 40 2009 42 2010 41 2007 59 864 2002 2011 40 2012 38 2013 44 601 2014 38 2015 44 601 2016 38 2017 41 2007 59 864 865 2018 40 2019 38 2020 44 601 2014 38 2015 44 601 2016 38 2017 44 704 2021 44 704 2022 41 2007 59 864 582 42 42 2023 40 41 2007 59 775 58 305 2019 2024 59 2019 2025 59 2019 2026 59 2019 2027 59 2019 2028 59 2019 2029 59 2019 2030 59 2019 2031 59 2019 2032 59 125 59 ,"{'AvgLine': 20, 'CountLine': 184, 'CountStmt': 84, 'MaxNesting': 2, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 67, 'MaxEssential': 3, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 152, 'CountStmtDecl': 22, 'MaxCyclomatic': 5, 'SumCyclomatic': 17, 'AltAvgLineCode': 17, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 23, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 7, 'AltCountLineCode': 152, 'CountLineCodeExe': 94, 'CountLineComment': 11, 'AltAvgLineComment': 0, 'AltCountLineBlank': 23, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 11, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 67, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 9, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 9}"
99697,C++,"class CPL_DLL GDALAttributeNumeric final: public GDALAttribute
{
    std::vector<std::shared_ptr<GDALDimension>> m_dims{};
    GDALExtendedDataType m_dt;
    int m_nValue = 0;
    double m_dfValue = 0;
    std::vector<GUInt32> m_anValuesUInt32{};

protected:

    bool IRead(const GUInt64* ,
               const size_t* ,
               const GInt64* ,
               const GPtrDiff_t* ,
               const GDALExtendedDataType& bufferDataType,
               void* pDstBuffer) const override;

public:
    GDALAttributeNumeric(const std::string& osParentName,
                  const std::string& osName,
                  double dfValue);
    GDALAttributeNumeric(const std::string& osParentName,
                  const std::string& osName,
                  int nValue);
    GDALAttributeNumeric(const std::string& osParentName,
                  const std::string& osName,
                  const std::vector<GUInt32>& anValues);

    const std::vector<std::shared_ptr<GDALDimension>>& GetDimensions() const override;

    const GDALExtendedDataType &GetDataType() const override;
};",0,587 2000 2001 2002 58 777 2003 123 2004 321 2005 60 2004 321 2006 60 2007 355 2008 123 125 59 2009 2010 59 704 2011 61 1500 59 625 2012 61 1500 59 2004 321 2005 60 2013 62 2014 123 125 59 775 58 569 2015 40 601 2016 42 44 601 2017 42 44 601 2018 42 44 601 2019 42 44 601 2009 38 2020 44 865 42 2021 41 601 2022 59 777 58 2001 40 601 2004 321 2023 38 2024 44 601 2004 321 2023 38 2025 44 625 2026 41 59 2001 40 601 2004 321 2023 38 2024 44 601 2004 321 2023 38 2025 44 704 2027 41 59 2001 40 601 2004 321 2023 38 2024 44 601 2004 321 2023 38 2025 44 601 2004 321 2005 60 2013 62 38 2028 41 59 601 2004 321 2005 60 2004 321 2006 60 2007 355 38 2029 40 41 601 2022 59 601 2009 38 2030 40 41 601 2022 59 125 59 ,"{'AvgLine': 11, 'CountLine': 100, 'CountStmt': 23, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 95, 'CountStmtDecl': 15, 'MaxCyclomatic': 4, 'SumCyclomatic': 9, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 3, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 95, 'CountLineCodeExe': 14, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 38, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99454,C++,"       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };",0,587 2000 123 569 2001 59 2002 42 2003 59 777 58 865 2004 40 41 123 688 40 2001 41 123 2005 40 2003 41 59 2001 61 655 59 125 125 2000 40 41 58 2001 40 829 41 44 2003 40 2006 40 41 41 123 125 126 2000 40 41 123 2004 40 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 8, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100033,C++,"class FileGDBTrivialIterator final : public FileGDBIterator
{
        FileGDBIterator            *poParentIter;
        FileGDBTable               *poTable;
        int                         iRow;

    public:
        explicit                     FileGDBTrivialIterator(FileGDBIterator *poParentIter);
        virtual                     ~FileGDBTrivialIterator() { delete poParentIter; }

        virtual FileGDBTable        *GetTable() override { return poTable; }
        virtual void                 Reset() override { iRow = 0; poParentIter->Reset(); }
        virtual int                  GetNextRowSortedByFID() override;
        virtual int                  GetRowCount() override
                { return poTable->GetTotalRecordCount(); }

        virtual int                  GetNextRowSortedByValue() override
                { return poParentIter->GetNextRowSortedByValue(); }

        virtual const OGRField*      GetMinValue(int& eOutType) override
                { return poParentIter->GetMinValue(eOutType); }
        virtual const OGRField*      GetMaxValue(int& eOutType) override
                { return poParentIter->GetMaxValue(eOutType); }
        virtual int                  GetMinMaxSumCount(double& dfMin, double& dfMax,
                                                       double& dfSum, int& nCount) override
            { return poParentIter->GetMinMaxSumCount(dfMin, dfMax, dfSum, nCount); }
};",0,587 2000 2001 58 777 2002 123 2002 42 2003 59 2004 42 2005 59 704 2006 59 777 58 648 2000 40 2002 42 2003 41 59 864 126 2000 40 41 123 619 2003 59 125 864 2004 42 2007 40 41 2008 123 792 2005 59 125 864 865 2009 40 41 2008 123 2006 61 1500 59 2003 354 2009 40 41 59 125 864 704 2010 40 41 2008 59 864 704 2011 40 41 2008 123 792 2005 354 2012 40 41 59 125 864 704 2013 40 41 2008 123 792 2003 354 2013 40 41 59 125 864 601 2014 42 2015 40 704 38 2016 41 2008 123 792 2003 354 2015 40 2016 41 59 125 864 601 2014 42 2017 40 704 38 2016 41 2008 123 792 2003 354 2017 40 2016 41 59 125 864 704 2018 40 625 38 2019 44 625 38 2020 44 625 38 2021 44 704 38 2022 41 2008 123 792 2003 354 2018 40 2019 44 2020 44 2021 44 2022 41 59 125 125 59 ,"{'AvgLine': 2, 'CountLine': 40, 'CountStmt': 28, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 15, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 36, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 61, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
100187,C++,"class XYMultiPointSetter
{
        OGRMultiPoint* poMPoint;
    public:
        explicit XYMultiPointSetter(OGRMultiPoint* poMPointIn) :
                                                poMPoint(poMPointIn) {}

        void set(int i, double dfX, double dfY)
        {
            (void)i;
            poMPoint->addGeometryDirectly(new OGRPoint(dfX, dfY));
        }
};",0,587 2000 123 2001 42 2002 59 777 58 648 2000 40 2001 42 2003 41 58 2002 40 2003 41 123 125 865 2004 40 704 2005 44 625 2006 44 625 2007 41 123 40 865 41 2005 59 2002 354 2008 40 744 2009 40 2006 44 2007 41 41 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 13, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 12, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99726,C++,"class OCAD_EXTERN CADHatch : public CADGeometry
{
public:
    CADHatch();
    virtual ~CADHatch(){}
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 125 59 ,"{'AvgLine': 2, 'CountLine': 10, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 10, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99417,C++,"class TABMAPObjMultiPoint final : public TABMAPObjHdrWithCoord
{
  public:
    GInt32      m_nNumPoints;
    GInt32      m_nComprOrgX;   /* Present only in compressed coord. case */
    GInt32      m_nComprOrgY;
    GByte       m_nSymbolId;
    GInt32      m_nLabelX;      /* Not sure if it is a label point, but */
    GInt32      m_nLabelY;      /* it is similar to what we find in PLINE */

    TABMAPObjMultiPoint():
        m_nNumPoints(0),
        m_nComprOrgX(0),
        m_nComprOrgY(0),
        m_nSymbolId(0),
        m_nLabelX(0),
        m_nLabelY(0)
        {}
    virtual ~TABMAPObjMultiPoint() {}

    virtual int WriteObj(TABMAPObjectBlock *) override;

//  protected:
    virtual int ReadObj(TABMAPObjectBlock *) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2003 2004 59 2003 2005 59 305 2003 2006 59 2007 2008 59 2003 2009 59 305 2003 2010 59 305 2000 40 41 58 2004 40 1500 41 44 2005 40 1500 41 44 2006 40 1500 41 44 2008 40 1500 41 44 2009 40 1500 41 44 2010 40 1500 41 123 125 864 126 2000 40 41 123 125 864 704 2011 40 2012 42 41 2013 59 330 864 704 2014 40 2012 42 41 2013 59 125 59 ,"{'AvgLine': 40, 'CountLine': 177, 'CountStmt': 93, 'MaxNesting': 1, 'AvgLineCode': 27, 'AvgEssential': 1, 'AvgLineBlank': 6, 'CountStmtExe': 77, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 3, 'CountLineCode': 123, 'CountStmtDecl': 17, 'MaxCyclomatic': 6, 'SumCyclomatic': 12, 'AltAvgLineCode': 29, 'AvgLineComment': 5, 'CountClassBase': 1, 'CountLineBlank': 29, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 6, 'CountDeclMethod': 4, 'AltCountLineCode': 128, 'CountLineCodeExe': 91, 'CountLineComment': 25, 'AltAvgLineComment': 5, 'AltCountLineBlank': 29, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 3, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 26, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 40, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98788,C++,"class GDALJPEGUserData
{
public:
    jmp_buf     setjmp_buffer;
    bool        bNonFatalErrorEncountered = false;
    void      (*p_previous_emit_message)(j_common_ptr cinfo, int msg_level) = nullptr;
    int         nMaxScans;

    GDALJPEGUserData() :
        nMaxScans(atoi(
            CPLGetConfigOption(""GDAL_JPEG_MAX_ALLOWED_SCAN_NUMBER"", ""100"")))
    {
        memset(&setjmp_buffer, 0, sizeof(setjmp_buffer));
    }
};",0,587 2000 123 777 58 2001 2002 59 569 2003 61 655 59 865 40 42 2004 41 40 2005 2006 44 704 2007 41 61 753 59 704 2008 59 2000 40 41 58 2008 40 2009 40 2010 40 362 44 362 41 41 41 123 2011 40 38 2002 44 1500 44 805 40 2002 41 41 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 15, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 14, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98789,C++,"class GDALJPGDriver final: public GDALDriver
{
  public:
    GDALJPGDriver() {}

    char      **GetMetadata( const char *pszDomain = """" ) override;
    const char *GetMetadataItem( const char *pszName,
                                 const char *pszDomain = """" ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 123 125 582 42 42 2003 40 601 582 42 2004 61 362 41 2005 59 601 582 42 2006 40 601 582 42 2007 44 601 582 42 2004 61 362 41 2005 59 125 59 ,"{'AvgLine': 14, 'CountLine': 52, 'CountStmt': 12, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 41, 'CountStmtDecl': 4, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 51, 'CountLineCodeExe': 34, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 6, 'CountDeclMethodAll': 37, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99405,C++,"class TigerPolygonCorrections final: public TigerFileBase
{
public:
                      TigerPolygonCorrections( OGRTigerDataSource *, const char * );
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 125 59 ,"{'AvgLine': 17, 'CountLine': 22, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 12, 'AvgLineComment': 4, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 1, 'AltCountLineCode': 17, 'CountLineCodeExe': 7, 'CountLineComment': 4, 'AltAvgLineComment': 4, 'AltCountLineBlank': 2, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.24', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99390,C++,"class OGRGTMLayer CPL_NON_FINAL: public OGRLayer
{
public:
    OGRGTMLayer();
    virtual ~OGRGTMLayer();
    //
    // OGRLayer Interface
    //
    OGRFeatureDefn* GetLayerDefn() override;

    int TestCapability( const char* pszCap ) override;

    OGRErr CreateField( OGRFieldDefn *poField, int bApproxOK ) override;

protected:
    OGRGTMDataSource* poDS;
    OGRSpatialReference* poSRS;
    OGRCoordinateTransformation *poCT;
    char* pszName;

    OGRFeatureDefn* poFeatureDefn;
    int nNextFID;
    int nTotalFCount;

    bool bError;

    static OGRErr CheckAndFixCoordinatesValidity( double& pdfLatitude, double& pdfLongitude );
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 59 330 330 330 2003 42 2004 40 41 2005 59 704 2006 40 601 582 42 2007 41 2005 59 2008 2009 40 2010 42 2011 44 704 2012 41 2005 59 775 58 2013 42 2014 59 2015 42 2016 59 2017 42 2018 59 582 42 2019 59 2003 42 2020 59 704 2021 59 704 2022 59 569 2023 59 809 2008 2024 40 625 38 2025 44 625 38 2026 41 59 125 59 ,"{'AvgLine': 17, 'CountLine': 130, 'CountStmt': 63, 'MaxNesting': 2, 'AvgLineCode': 15, 'AvgEssential': 2, 'AvgLineBlank': 1, 'CountStmtExe': 40, 'MaxEssential': 4, 'SumEssential': 13, 'AvgCyclomatic': 3, 'CountLineCode': 111, 'CountStmtDecl': 25, 'MaxCyclomatic': 7, 'SumCyclomatic': 20, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 111, 'CountLineCodeExe': 60, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 5, 'CountClassDerived': 2, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 88, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 26, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 76, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 8}"
99115,C++,"    class IOInterfaces
    {
    public:
        virtual ~IOInterfaces() {}
        virtual void   *Open( std::string filename, std::string access ) const = 0;
        virtual uint64  Seek( void *io_handle, uint64 offset, int whence ) const = 0;
        virtual uint64  Tell( void *io_handle ) const = 0;
        virtual uint64  Read( void *buffer, uint64 size, uint64 nmemb, void *io_handle ) const = 0;
        virtual uint64  Write( const void *buffer, uint64 size, uint64 nmemb, void *io_handle ) const = 0;
        virtual int     Eof( void *io_handle ) const = 0;
        virtual int     Flush( void *io_handle ) const = 0;
        virtual int     Close( void *io_handle ) const = 0;
    };",0,587 2000 123 777 58 864 126 2000 40 41 123 125 864 865 42 2001 40 2002 321 2003 2004 44 2002 321 2003 2005 41 601 61 1500 59 864 2006 2007 40 865 42 2008 44 2006 2009 44 704 2010 41 601 61 1500 59 864 2006 2011 40 865 42 2008 41 601 61 1500 59 864 2006 2012 40 865 42 2013 44 2006 2014 44 2006 2015 44 865 42 2008 41 601 61 1500 59 864 2006 2016 40 601 865 42 2013 44 2006 2014 44 2006 2015 44 865 42 2008 41 601 61 1500 59 864 704 2017 40 865 42 2008 41 601 61 1500 59 864 704 2018 40 865 42 2008 41 601 61 1500 59 864 704 2019 40 865 42 2008 41 601 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 13, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 13, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 3, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 8, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98577,C++,"class PCIDSK_DLL BlockLayer
{
protected:
    /// The associated block directory.
    BlockDir *          mpoBlockDir;

    /// The block layer index.
    uint32              mnLayer;

    /// The block info list.
    BlockInfoList       moBlockList;

    void                PushBlocks(const BlockInfoList & oBlockList);
    BlockInfoList       PopBlocks(uint32 nBlockCount);

    // We need the block directory interface class to be friend
    // since it needs to push/pop blocks to/from the block layer.
    friend class BlockDir;

/**
 * Sets the type of the layer.
 *
 * @param nLayerType The type of the layer.
 */
    virtual void        _SetLayerType(uint16 nLayerType) = 0;

/**
 * Sets the number of blocks in the block layer.
 *
 * @param nBlockCount The number of blocks in the block layer.
 */
    virtual void        _SetBlockCount(uint32 nBlockCount) = 0;

/**
 * Sets the size in bytes of the layer.
 *
 * @param nLayerSize The size in bytes of the layer.
 */
    virtual void        _SetLayerSize(uint64 nLayerSize) = 0;

    BlockInfo *         GetBlockInfo(uint32 iBlock);

    void                AllocateBlocks(uint64 nOffset, uint64 nSize);

    bool                AreBlocksAllocated(uint64 nOffset, uint64 nSize);

    uint32              GetContiguousCount(uint64 nOffset, uint64 nSize);

    void                FreeBlocks(uint64 nOffset, uint64 nSize);

public:
    BlockLayer(BlockDir * poBlockDir, uint32 nLayer);

    virtual             ~BlockLayer(void);

    void                WriteToLayer(const void * pData,
                                     uint64 nOffset, uint64 nSize);

    bool                ReadFromLayer(void * pData,
                                      uint64 nOffset, uint64 nSize);

    BlockFile *         GetFile(void) const;

    bool                NeedsSwap(void) const;

    bool                IsValid(void) const;

    void                Resize(uint64 nLayerSize);

/**
 * Gets the type of the layer.
 *
 * @return The type of the layer.
 */
    virtual uint16      GetLayerType(void) const = 0;

/**
 * Gets the number of blocks in the block layer.
 *
 * @return The number of blocks in the block layer.
 */
    virtual uint32      GetBlockCount(void) const = 0;

/**
 * Gets the size in bytes of the layer.
 *
 * @return The size in bytes of the layer.
 */
    virtual uint64      GetLayerSize(void) const = 0;
};",0,587 2000 2001 123 775 58 331 2002 42 2003 59 331 2004 2005 59 331 2006 2007 59 865 2008 40 601 2006 38 2009 41 59 2006 2010 40 2004 2011 41 59 330 330 667 587 2002 59 306 864 865 2012 40 2013 2014 41 61 1500 59 306 864 865 2015 40 2004 2011 41 61 1500 59 306 864 865 2016 40 2017 2018 41 61 1500 59 2019 42 2020 40 2004 2021 41 59 865 2022 40 2017 2023 44 2017 2024 41 59 569 2025 40 2017 2023 44 2017 2024 41 59 2004 2026 40 2017 2023 44 2017 2024 41 59 865 2027 40 2017 2023 44 2017 2024 41 59 777 58 2001 40 2002 42 2028 44 2004 2029 41 59 864 126 2001 40 865 41 59 865 2030 40 601 865 42 2031 44 2017 2023 44 2017 2024 41 59 569 2032 40 865 42 2031 44 2017 2023 44 2017 2024 41 59 2033 42 2034 40 865 41 601 59 569 2035 40 865 41 601 59 569 2036 40 865 41 601 59 865 2037 40 2017 2018 41 59 306 864 2013 2038 40 865 41 601 61 1500 59 306 864 2004 2039 40 865 41 601 61 1500 59 306 864 2017 2040 40 865 41 601 61 1500 59 125 59 ,"{'AvgLine': 22, 'CountLine': 427, 'CountStmt': 185, 'MaxNesting': 2, 'AvgLineCode': 16, 'AvgEssential': 2, 'AvgLineBlank': 5, 'CountStmtExe': 129, 'MaxEssential': 6, 'SumEssential': 33, 'AvgCyclomatic': 3, 'CountLineCode': 283, 'CountStmtDecl': 87, 'MaxCyclomatic': 6, 'SumCyclomatic': 55, 'AltAvgLineCode': 16, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 106, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 5, 'CountDeclMethod': 21, 'AltCountLineCode': 283, 'CountLineCodeExe': 161, 'CountLineComment': 38, 'AltAvgLineComment': 0, 'AltCountLineBlank': 106, 'CountClassCoupled': 4, 'CountClassDerived': 1, 'CountLineCodeDecl': 81, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 38, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 60, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 32, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 69, 'SumCyclomaticModified': 55, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 23, 'CountDeclMethodProtected': 10, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 3}"
99442,C++,"       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };",0,587 2000 123 569 2001 59 2002 42 2003 59 777 58 865 2004 40 41 123 688 40 2001 41 123 2005 40 2003 41 59 2001 61 655 59 125 125 2000 40 41 58 2001 40 829 41 44 2003 40 2006 40 41 41 123 125 126 2000 40 41 123 2004 40 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 8, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98600,C++,"class RRASTERRasterBand final: public RawRasterBand
{
      friend class RRASTERDataset;

      bool      m_bHasNoDataValue = false;
      double    m_dfNoDataValue = 0.0;
      double    m_dfMin = std::numeric_limits<double>::infinity();
      double    m_dfMax = -std::numeric_limits<double>::infinity();
      std::shared_ptr<GDALRasterAttributeTable> m_poRAT{};
      std::shared_ptr<GDALColorTable> m_poCT{};

      CPL_DISALLOW_COPY_ASSIGN(RRASTERRasterBand)

  public:
      RRASTERRasterBand( GDALDataset *poDS, int nBand, VSILFILE * fpRaw,
                    vsi_l_offset nImgOffset, int nPixelOffset,
                    int nLineOffset,
                    GDALDataType eDataType, int bNativeOrder );

      void SetMinMax( double dfMin, double dfMax );
      double GetMinimum( int *pbSuccess = nullptr ) override;
      double GetMaximum( int *pbSuccess = nullptr ) override;

      double GetNoDataValue( int* pbSuccess = nullptr ) override;
      CPLErr SetNoDataValue( double dfNoData ) override;

      GDALColorTable *GetColorTable() override;
      CPLErr SetColorTable( GDALColorTable *poNewCT ) override;

      GDALRasterAttributeTable *GetDefaultRAT() override;
      CPLErr SetDefaultRAT( const GDALRasterAttributeTable * poRAT ) override;

      void SetDescription( const char *pszDesc ) override;

  protected:
      CPLErr IWriteBlock( int, int, void * ) override;
      CPLErr IRasterIO( GDALRWFlag, int, int, int, int,
                        void *, int, int, GDALDataType,
                        GSpacing nPixelSpace, GSpacing nLineSpace,
                        GDALRasterIOExtraArg* psExtraArg ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 569 2004 61 655 59 625 2005 61 1500 59 625 2006 61 2007 321 2008 60 625 62 321 2009 40 41 59 625 2010 61 45 2007 321 2008 60 625 62 321 2009 40 41 59 2007 321 2011 60 2012 62 2013 123 125 59 2007 321 2011 60 2014 62 2015 123 125 59 2016 40 2000 41 777 58 2000 40 2017 42 2018 44 704 2019 44 2020 42 2021 44 2022 2023 44 704 2024 44 704 2025 44 2026 2027 44 704 2028 41 59 865 2029 40 625 2030 44 625 2031 41 59 625 2032 40 704 42 2033 61 753 41 2034 59 625 2035 40 704 42 2033 61 753 41 2034 59 625 2036 40 704 42 2033 61 753 41 2034 59 2037 2038 40 625 2039 41 2034 59 2014 42 2040 40 41 2034 59 2037 2041 40 2014 42 2042 41 2034 59 2012 42 2043 40 41 2034 59 2037 2044 40 601 2012 42 2045 41 2034 59 865 2046 40 601 582 42 2047 41 2034 59 775 58 2037 2048 40 704 44 704 44 865 42 41 2034 59 2037 2049 40 2050 44 704 44 704 44 704 44 704 44 865 42 44 704 44 704 44 2026 44 2051 2052 44 2051 2053 44 2054 42 2055 41 2034 59 125 59 ,"{'AvgLine': 12, 'CountLine': 198, 'CountStmt': 78, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 51, 'MaxEssential': 1, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 177, 'CountStmtDecl': 34, 'MaxCyclomatic': 3, 'SumCyclomatic': 25, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 15, 'AltCountLineCode': 177, 'CountLineCodeExe': 75, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 46, 'CountLineInactive': 0, 'CountDeclMethodAll': 183, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 29, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 25, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 16, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
98690,C++,"class OGRCARTOResultLayer final: public OGRCARTOLayer
{
    OGRFeature          *poFirstFeature;

    virtual CPLString    GetSRS_SQL(const char* pszGeomCol) override;

  public:
                        OGRCARTOResultLayer( OGRCARTODataSource* poDS,
                                               const char * pszRawStatement );
    virtual             ~OGRCARTOResultLayer();

    virtual OGRFeatureDefn *GetLayerDefnInternal(json_object* poObjIn) override;
    virtual OGRFeature  *GetNextRawFeature() override;

    bool                IsOK();
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 864 2005 2006 40 601 582 42 2007 41 2008 59 777 58 2000 40 2009 42 2010 44 601 582 42 2011 41 59 864 126 2000 40 41 59 864 2012 42 2013 40 2014 42 2015 41 2008 59 864 2003 42 2016 40 41 2008 59 569 2017 40 41 59 125 59 ,"{'AvgLine': 11, 'CountLine': 87, 'CountStmt': 38, 'MaxNesting': 3, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 31, 'MaxEssential': 4, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 75, 'CountStmtDecl': 14, 'MaxCyclomatic': 4, 'SumCyclomatic': 11, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 75, 'CountLineCodeExe': 36, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 103, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98666,C++,"class CPL_DLL VRTWarpedRasterBand final: public VRTRasterBand
{
  public:
                   VRTWarpedRasterBand( GDALDataset *poDS, int nBand,
                                        GDALDataType eType = GDT_Unknown );
    virtual        ~VRTWarpedRasterBand();

    virtual CPLXMLNode *   SerializeToXML( const char *pszVRTPath ) override;

    virtual CPLErr IReadBlock( int, int, void * ) override;
    virtual CPLErr IWriteBlock( int, int, void * ) override;

    virtual int GetOverviewCount() override;
    virtual GDALRasterBand *GetOverview(int) override;
};",0,587 2000 2001 2002 58 777 2003 123 777 58 2001 40 2004 42 2005 44 704 2006 44 2007 2008 61 2009 41 59 864 126 2001 40 41 59 864 2010 42 2011 40 601 582 42 2012 41 2013 59 864 2014 2015 40 704 44 704 44 865 42 41 2013 59 864 2014 2016 40 704 44 704 44 865 42 41 2013 59 864 704 2017 40 41 2013 59 864 2018 42 2019 40 704 41 2013 59 125 59 ,"{'AvgLine': 16, 'CountLine': 131, 'CountStmt': 43, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 30, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 87, 'CountStmtDecl': 16, 'MaxCyclomatic': 5, 'SumCyclomatic': 14, 'AltAvgLineCode': 10, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 27, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 7, 'AltCountLineCode': 87, 'CountLineCodeExe': 40, 'CountLineComment': 17, 'AltAvgLineComment': 2, 'AltCountLineBlank': 27, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 24, 'CountLineInactive': 0, 'CountDeclMethodAll': 144, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 17, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98803,C++,"    class CPCIDSKBinarySegment : public PCIDSKBinarySegment,
        public CPCIDSKSegment
    {
    public:
        CPCIDSKBinarySegment(PCIDSKFile *file, int segment,
            const char *segment_pointer, bool bLoad=true);
        ~CPCIDSKBinarySegment();

        const char* GetBuffer(void) const override
        {
            return seg_data.buffer;
        }

        unsigned int GetBufferSize(void) const override
        {
            return seg_data.buffer_size;
        }
        void SetBuffer(const char* pabyBuf,
            unsigned int nBufSize) override;

        //synchronize the segment on disk.
        void Synchronize() override;
    private:

        // Helper housekeeping functions
        void Load();
        void Write();

    //functions to read/write binary information
    protected:
        // The raw segment data
        PCIDSKBuffer seg_data;
        bool loaded_;
        bool mbModified;
    };",0,587 2000 58 777 2001 44 777 2002 123 777 58 2000 40 2003 42 2004 44 704 2005 44 601 582 42 2006 44 569 2007 61 829 41 59 126 2000 40 41 59 601 582 42 2008 40 865 41 601 2009 123 792 2010 46 2011 59 125 856 704 2012 40 865 41 601 2009 123 792 2013 46 2014 59 125 865 2015 40 601 582 42 2016 44 856 704 2017 41 2009 59 330 865 2018 40 41 2009 59 773 58 330 865 2019 40 41 59 865 2020 40 41 59 330 775 58 330 2021 2022 59 569 2023 59 569 2024 59 125 59 ,"{'AvgLine': 11, 'CountLine': 116, 'CountStmt': 43, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 28, 'MaxEssential': 4, 'SumEssential': 11, 'AvgCyclomatic': 2, 'CountLineCode': 91, 'CountStmtDecl': 15, 'MaxCyclomatic': 4, 'SumCyclomatic': 16, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 91, 'CountLineCodeExe': 33, 'CountLineComment': 10, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 62, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.11', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 56, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 3}"
98656,C++,"class VRTMDArraySourceRegularlySpaced final: public VRTMDArraySource
{
    double m_dfStart;
    double m_dfIncrement;

public:
    VRTMDArraySourceRegularlySpaced(
                 double dfStart, double dfIncrement):
        m_dfStart(dfStart),
        m_dfIncrement(dfIncrement)
    {
    }

    bool Read(const GUInt64* arrayStartIdx,
                      const size_t* count,
                      const GInt64* arrayStep,
                      const GPtrDiff_t* bufferStride,
                      const GDALExtendedDataType& bufferDataType,
                      void* pDstBuffer) const override;

    void Serialize(CPLXMLNode* psParent, const char* pszVRTPath) const override;
};",0,587 2000 2001 58 777 2002 123 625 2003 59 625 2004 59 777 58 2000 40 625 2005 44 625 2006 41 58 2003 40 2005 41 44 2004 40 2006 41 123 125 569 2007 40 601 2008 42 2009 44 601 2010 42 2011 44 601 2012 42 2013 44 601 2014 42 2015 44 601 2016 38 2017 44 865 42 2018 41 601 2019 59 865 2020 40 2021 42 2022 44 601 582 42 2023 41 601 2019 59 125 59 ,"{'AvgLine': 11, 'CountLine': 50, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 47, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 47, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
98684,C++,"    class CPL_DLL FeatureIterator
    {
            struct Private;
            std::unique_ptr<Private> m_poPrivate;
        public:
            FeatureIterator(OGRLayer* poLayer, bool bStart);
            FeatureIterator(FeatureIterator&& oOther) noexcept; // declared but not defined. Needed for gcc 5.4 at least
            ~FeatureIterator();
            OGRFeatureUniquePtr& operator*();
            FeatureIterator& operator++();
            bool operator!=(const FeatureIterator& it) const;
    };",0,587 2000 2001 123 816 2002 59 2003 321 2004 60 2002 62 2005 59 777 58 2001 40 2006 42 2007 44 569 2008 41 59 2001 40 2001 307 2009 41 748 59 330 126 2001 40 41 59 2010 38 758 42 40 41 59 2001 38 758 349 40 41 59 569 758 340 40 601 2001 38 2011 41 601 59 125 59 ,"{'AvgLine': 8, 'CountLine': 53, 'CountStmt': 12, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 53, 'CountStmtDecl': 8, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 53, 'CountLineCodeExe': 6, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99122,C++,"class GDALFeaturePoint
{
public:
    /**
     * Standard constructor. Initializes all parameters with negative numbers
     * and allocates memory for descriptor.
     */
    GDALFeaturePoint();

    /**
     * Copy constructor
     * @param fp Copied instance of GDALFeaturePoint class
     */
    GDALFeaturePoint(const GDALFeaturePoint& fp);

    /**
     * Create instance of GDALFeaturePoint class
     *
     * @param nX X-coordinate (pixel)
     * @param nY Y-coordinate (line)
     * @param nScale Scale which contains this point (2, 4, 8, 16 and so on)
     * @param nRadius Half of the side of descriptor area
     * @param nSign Sign of Hessian determinant for this point
     *
     * @note This constructor normally is invoked by SURF-based algorithm,
     * which provides all necessary parameters.
     */
    GDALFeaturePoint(int nX, int nY, int nScale, int nRadius, int nSign);
    virtual ~GDALFeaturePoint();

    /** Assignment operator */
    GDALFeaturePoint& operator=(const GDALFeaturePoint& point);

    /**
     * Provide access to point's descriptor.
     *
     * @param nIndex Position of descriptor's value.
     * nIndex should be within range from 0 to DESC_SIZE (in current version - 64)
     *
     * @return Reference to value of descriptor in 'nIndex' position.
     * If index is out of range then behavior is undefined.
     */
    double& operator[](int nIndex);

    /** Descriptor length */
    static const int DESC_SIZE = 64;

    /**
     * Fetch X-coordinate (pixel) of point
     *
     * @return X-coordinate in pixels
     */
    int GetX() const;

    /**
     * Set X coordinate of point
     *
     * @param nX X coordinate in pixels
     */
    void SetX(int nX);

    /**
     * Fetch Y-coordinate (line) of point.
     *
     * @return Y-coordinate in pixels.
     */
    int GetY() const;

    /**
     * Set Y coordinate of point.
     *
     * @param nY Y coordinate in pixels.
     */
    void SetY(int nY);

    /**
     * Fetch scale of point.
     *
     * @return Scale for this point.
     */
    int GetScale() const ;

    /**
     * Set scale of point.
     *
     * @param nScale Scale for this point.
     */
    void SetScale(int nScale);

    /**
     * Fetch radius of point.
     *
     * @return Radius for this point.
     */
    int  GetRadius() const;

    /**
     * Set radius of point.
     *
     * @param nRadius Radius for this point.
     */
    void SetRadius(int nRadius);

    /**
     * Fetch sign of Hessian determinant of point.
     *
     * @return Sign for this point.
     */
    int GetSign() const;

    /**
     * Set sign of point.
     *
     * @param nSign Sign of Hessian determinant for this point.
     */
    void SetSign(int nSign);

private:
    // Coordinates of point in image
    int nX;
    int nY;
    // --------------------
    int nScale;
    int nRadius;
    int nSign;
    // Descriptor array
    double *padfDescriptor;
};",0,587 2000 123 777 58 306 2000 40 41 59 306 2000 40 601 2000 38 2001 41 59 306 2000 40 704 2002 44 704 2003 44 704 2004 44 704 2005 44 704 2006 41 59 864 126 2000 40 41 59 306 2000 38 758 61 40 601 2000 38 2007 41 59 306 625 38 758 91 93 40 704 2008 41 59 306 809 601 704 2009 61 1503 59 306 704 2010 40 41 601 59 306 865 2011 40 704 2002 41 59 306 704 2012 40 41 601 59 306 865 2013 40 704 2003 41 59 306 704 2014 40 41 601 59 306 865 2015 40 704 2004 41 59 306 704 2016 40 41 601 59 306 865 2017 40 704 2005 41 59 306 704 2018 40 41 601 59 306 865 2019 40 704 2006 41 59 773 58 330 704 2002 59 704 2003 59 330 704 2004 59 704 2005 59 704 2006 59 330 625 42 2020 59 125 59 ,"{'AvgLine': 4, 'CountLine': 200, 'CountStmt': 71, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 32, 'MaxEssential': 1, 'SumEssential': 16, 'AvgCyclomatic': 1, 'CountLineCode': 93, 'CountStmtDecl': 43, 'MaxCyclomatic': 3, 'SumCyclomatic': 20, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 16, 'AltCountLineCode': 93, 'CountLineCodeExe': 47, 'CountLineComment': 86, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 20, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.92', 'AltCountLineComment': 86, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 16, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 63, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 16, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 6, 'CountDeclInstanceVariableProtected': 0}"
100297,C++,"       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };",0,587 2000 123 569 2001 59 2002 2003 59 777 58 865 2004 40 41 123 688 40 2001 41 123 2005 40 2003 41 59 2001 61 655 59 125 125 2000 40 41 58 2001 40 829 41 44 2003 40 2006 40 41 41 123 125 126 2000 40 41 123 2004 40 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 8, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99397,C++,"class VSIOCILobHandle : public VSIVirtualHandle
{
  private:

    OWConnection*     poConnection;
    OWStatement*      poStatement;
    OCILobLocator*    phLocator;
    GUIntBig          nFileSize;
    GUIntBig          nCurOff;
    boolean           bUpdate;

  public:
    VSIOCILobHandle( OWConnection* poConnectionIn,
                     OWStatement* poStatementIn,
                     OCILobLocator* phLocatorIn,
                     boolean bUpdateIn );
    ~VSIOCILobHandle() override;

    int Seek( vsi_l_offset nOffset, int nWhence ) override;
    vsi_l_offset Tell() override;
    size_t Read( void *pBuffer, size_t nSize, size_t nMemb ) override;
    size_t Write( const void *pBuffer, size_t nSize, size_t nMemb ) override;
    int Eof() override;
    int Close() override;
};",0,587 2000 58 777 2001 123 773 58 2002 42 2003 59 2004 42 2005 59 2006 42 2007 59 2008 2009 59 2008 2010 59 2011 2012 59 777 58 2000 40 2002 42 2013 44 2004 42 2014 44 2006 42 2015 44 2011 2016 41 59 126 2000 40 41 2017 59 704 2018 40 2019 2020 44 704 2021 41 2017 59 2019 2022 40 41 2017 59 2023 2024 40 865 42 2025 44 2023 2026 44 2023 2027 41 2017 59 2023 2028 40 601 865 42 2025 44 2023 2026 44 2023 2027 41 2017 59 704 2029 40 41 2017 59 704 2030 40 41 2017 59 125 59 ,"{'AvgLine': 10, 'CountLine': 112, 'CountStmt': 31, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 96, 'CountStmtDecl': 21, 'MaxCyclomatic': 3, 'SumCyclomatic': 13, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 96, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 18, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99677,C++,"class IDARasterBand final: public RawRasterBand
{
    friend class IDADataset;

    GDALRasterAttributeTable *poRAT;
    GDALColorTable       *poColorTable;

    CPL_DISALLOW_COPY_ASSIGN(IDARasterBand)

  public:
    IDARasterBand( IDADataset *poDSIn, VSILFILE *fpRaw, int nXSize );
    ~IDARasterBand() override;

    GDALRasterAttributeTable *GetDefaultRAT() override;
    GDALColorInterp GetColorInterpretation() override;
    GDALColorTable *GetColorTable() override;
    double GetOffset( int *pbSuccess = nullptr ) override;
    CPLErr SetOffset( double dfNewValue ) override;
    double GetScale( int *pbSuccess = nullptr ) override;
    CPLErr SetScale( double dfNewValue ) override;
    double GetNoDataValue( int *pbSuccess = nullptr ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 42 2005 59 2006 42 2007 59 2008 40 2000 41 777 58 2000 40 2003 42 2009 44 2010 42 2011 44 704 2012 41 59 126 2000 40 41 2013 59 2004 42 2014 40 41 2013 59 2015 2016 40 41 2013 59 2006 42 2017 40 41 2013 59 625 2018 40 704 42 2019 61 753 41 2013 59 2020 2021 40 625 2022 41 2013 59 625 2023 40 704 42 2019 61 753 41 2013 59 2020 2024 40 625 2022 41 2013 59 625 2025 40 704 42 2019 61 753 41 2013 59 125 59 ,"{'AvgLine': 10, 'CountLine': 124, 'CountStmt': 56, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 40, 'MaxEssential': 3, 'SumEssential': 14, 'AvgCyclomatic': 2, 'CountLineCode': 100, 'CountStmtDecl': 16, 'MaxCyclomatic': 3, 'SumCyclomatic': 22, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 24, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 12, 'AltCountLineCode': 100, 'CountLineCodeExe': 46, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 24, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 180, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 22, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99738,C++,"class TILRasterBand final: public GDALPamRasterBand
{
    friend class TILDataset;

    VRTSourcedRasterBand *poVRTBand;

  public:
                   TILRasterBand( TILDataset *, int, VRTSourcedRasterBand * );
    virtual       ~TILRasterBand() {}

    virtual CPLErr IReadBlock( int, int, void * ) override;
    virtual CPLErr IRasterIO( GDALRWFlag, int, int, int, int,
                              void *, int, int, GDALDataType,
                              GSpacing nPixelSpace, GSpacing nLineSpace,
                              GDALRasterIOExtraArg* psExtraArg ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 42 2005 59 777 58 2000 40 2003 42 44 704 44 2004 42 41 59 864 126 2000 40 41 123 125 864 2006 2007 40 704 44 704 44 865 42 41 2008 59 864 2006 2009 40 2010 44 704 44 704 44 704 44 704 44 865 42 44 704 44 704 44 2011 44 2012 2013 44 2012 2014 44 2015 42 2016 41 2008 59 125 59 ,"{'AvgLine': 9, 'CountLine': 52, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 43, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 43, 'CountLineCodeExe': 13, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 132, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 25, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99740,C++,"class OGRGeoJSONWriteOptions
{
    public:
        bool bWriteBBOX = false;
        bool bBBOXRFC7946 = false;
        int  nCoordPrecision = -1;
        int  nSignificantFigures = -1;
        bool bPolygonRightHandRule = false;
        bool bCanPatchCoordinatesWithNativeData = true;
        bool bHonourReservedRFC7946Members = false;
        CPLString osIDField{};
        bool bForceIDFieldType = false;
        bool bGenerateID = false;
        OGRFieldType eForcedIDFieldType = OFTString;
        bool bAllowNonFiniteValues = false;

        void SetRFC7946Settings();
        void SetIDOptions(CSLConstList papszOptions);
};",0,587 2000 123 777 58 569 2001 61 655 59 569 2002 61 655 59 704 2003 61 45 1501 59 704 2004 61 45 1501 59 569 2005 61 655 59 569 2006 61 829 59 569 2007 61 655 59 2008 2009 123 125 59 569 2010 61 655 59 569 2011 61 655 59 2012 2013 61 2014 59 569 2015 61 655 59 865 2016 40 41 59 865 2017 40 2018 2019 41 59 125 59 ,"{'AvgLine': 14, 'CountLine': 48, 'CountStmt': 29, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 3, 'CountLineCode': 46, 'CountStmtDecl': 15, 'MaxCyclomatic': 4, 'SumCyclomatic': 6, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 46, 'CountLineCodeExe': 14, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 86, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 12, 'CountDeclInstanceVariablePublic': 12, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99811,C++,"class MyRasterBand: public GDALRasterBand
{
        int bBusy;

    public:
        MyRasterBand()
        {
            nBlockXSize = 1;
            nBlockYSize = 1;
            bBusy = FALSE;
        }

        CPLErr IReadBlock(int, int, void*) CPL_OVERRIDE { CPLAssert(FALSE); return CE_Failure; }
        CPLErr IWriteBlock(int nXBlock, int nYBlock, void*) CPL_OVERRIDE
        {
            printf(""Entering IWriteBlock(%d, %d)\n"", nXBlock, nYBlock);
            CHECK(!bBusy);
            bBusy = TRUE;
            CPLSleep(0.5);
            bBusy = FALSE;
            printf(""Leaving IWriteBlock(%d, %d)\n"", nXBlock, nYBlock);
            return CE_None;
        }
};",0,587 2000 58 777 2001 123 704 2002 59 777 58 2000 40 41 123 2003 61 1501 59 2004 61 1501 59 2002 61 2005 59 125 2006 2007 40 704 44 704 44 865 42 41 2008 123 2009 40 2010 41 59 792 2011 59 125 2006 2012 40 704 2013 44 704 2014 44 865 42 41 2008 123 2015 40 362 44 2013 44 2014 41 59 2016 40 33 2002 41 59 2002 61 2017 59 2018 40 1500 41 59 2002 61 2019 59 2015 40 362 44 2013 44 2014 41 59 792 2020 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 24, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 22, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 22, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 97, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99831,C++,"class GDALVectorTranslateWrappedDataset: public GDALDataset
{
                GDALDataset* m_poBase;
                OGRSpatialReference* m_poOutputSRS;
                bool m_bTransform;

                std::vector<OGRLayer*> m_apoLayers;
                std::vector<OGRLayer*> m_apoHiddenLayers;

                GDALVectorTranslateWrappedDataset(
                                    GDALDataset* poBase,
                                    OGRSpatialReference* poOutputSRS,
                                    bool bTransform);
public:

       virtual ~GDALVectorTranslateWrappedDataset();

       virtual int GetLayerCount() override
                        { return static_cast<int>(m_apoLayers.size()); }
       virtual OGRLayer* GetLayer(int nIdx) override;
       virtual OGRLayer* GetLayerByName(const char* pszName) override;

       virtual OGRLayer *  ExecuteSQL( const char *pszStatement,
                                        OGRGeometry *poSpatialFilter,
                                        const char *pszDialect ) override;
       virtual void        ReleaseResultSet( OGRLayer * poResultsSet ) override;

       static GDALVectorTranslateWrappedDataset* New(
                                          GDALDataset* poBase,
                                          OGRSpatialReference* poOutputSRS,
                                          bool bTransform );
};",0,587 2000 58 777 2001 123 2001 42 2002 59 2003 42 2004 59 569 2005 59 2006 321 2007 60 2008 42 62 2009 59 2006 321 2007 60 2008 42 62 2010 59 2000 40 2001 42 2011 44 2003 42 2012 44 569 2013 41 59 777 58 864 126 2000 40 41 59 864 704 2014 40 41 2015 123 792 811 60 704 62 40 2009 46 2016 40 41 41 59 125 864 2008 42 2017 40 704 2018 41 2015 59 864 2008 42 2019 40 601 582 42 2020 41 2015 59 864 2008 42 2021 40 601 582 42 2022 44 2023 42 2024 44 601 582 42 2025 41 2015 59 864 865 2026 40 2008 42 2027 41 2015 59 809 2000 42 2028 40 2001 42 2011 44 2003 42 2012 44 569 2013 41 59 125 59 ,"{'AvgLine': 15, 'CountLine': 151, 'CountStmt': 53, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 33, 'MaxEssential': 5, 'SumEssential': 14, 'AvgCyclomatic': 2, 'CountLineCode': 139, 'CountStmtDecl': 28, 'MaxCyclomatic': 5, 'SumCyclomatic': 17, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 139, 'CountLineCodeExe': 37, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 37, 'CountLineInactive': 0, 'CountDeclMethodAll': 150, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 86, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99852,C++,"template<typename _Ty,typename _Dx>
class CPLAutoClose {
    static_assert( !std::is_const<_Ty>::value && std::is_pointer<_Ty>::value,
                    ""_Ty must is pointer type,_Dx must is function type"");
    private:
    _Ty& m_ResourcePtr;
    _Dx  m_CloseFunc;
    private:
    CPLAutoClose(const CPLAutoClose&) = delete;
    void operator=(const CPLAutoClose&) = delete;
    public:
        /**
         * @brief Constructor.
         * @param ptr Pointer to the resource object.
         * @param dt  Resource release(close) function.
         */
        explicit CPLAutoClose(_Ty& ptr,_Dx dt) :
            m_ResourcePtr(ptr),
            m_CloseFunc(dt)
        {}
        /**
         * @brief Destructor.
         */
        ~CPLAutoClose()
        {
            if(m_ResourcePtr && m_CloseFunc)
              m_CloseFunc(m_ResourcePtr);
        }
};",0,822 60 835 2000 44 835 2001 62 587 2002 123 810 40 33 2003 321 2004 60 2000 62 321 2005 307 2003 321 2006 60 2000 62 321 2005 44 362 41 59 773 58 2000 38 2007 59 2001 2008 59 773 58 2002 40 601 2002 38 41 61 619 59 865 758 61 40 601 2002 38 41 61 619 59 777 58 306 648 2002 40 2000 38 2009 44 2001 2010 41 58 2007 40 2009 41 44 2008 40 2010 41 123 125 306 126 2002 40 41 123 688 40 2007 307 2008 41 2008 40 2007 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 28, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 7, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 20, 'CountLineCodeExe': 4, 'CountLineComment': 8, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.40', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99886,C++,"class GDALNullDataset final: public GDALDataset
{
            int                 m_nLayers;
            OGRLayer**          m_papoLayers;

    public:
            GDALNullDataset();
            virtual ~GDALNullDataset();

            virtual int         GetLayerCount() override { return m_nLayers; }
            virtual OGRLayer   *GetLayer( int ) override;

            virtual OGRLayer    *ICreateLayer( const char *pszLayerName,
                                            OGRSpatialReference *poSRS,
                                            OGRwkbGeometryType eType,
                                            char **papszOptions ) override;

            virtual int         TestCapability( const char * ) override;

            virtual CPLErr      _SetProjection(const char*) override;
            CPLErr SetSpatialRef(const OGRSpatialReference* poSRS) override {
                return OldSetProjectionFromSetSpatialRef(poSRS);
            }

            virtual CPLErr      SetGeoTransform(double*) override;

            static GDALDataset* Open(GDALOpenInfo* poOpenInfo);
            static GDALDataset* Create(const char *pszFilename,
                                     int nXSize, int nYSize, int nBands,
                                     GDALDataType eType, char **papszOptions);

};",0,587 2000 2001 58 777 2002 123 704 2003 59 2004 42 42 2005 59 777 58 2000 40 41 59 864 126 2000 40 41 59 864 704 2006 40 41 2007 123 792 2003 59 125 864 2004 42 2008 40 704 41 2007 59 864 2004 42 2009 40 601 582 42 2010 44 2011 42 2012 44 2013 2014 44 582 42 42 2015 41 2007 59 864 704 2016 40 601 582 42 41 2007 59 864 2017 2018 40 601 582 42 41 2007 59 2017 2019 40 601 2011 42 2012 41 2007 123 792 2020 40 2012 41 59 125 864 2017 2021 40 625 42 41 2007 59 809 2002 42 2022 40 2023 42 2024 41 59 809 2002 42 2025 40 601 582 42 2026 44 704 2027 44 704 2028 44 704 2029 44 2030 2014 44 582 42 42 2015 41 59 125 59 ,"{'AvgLine': 8, 'CountLine': 119, 'CountStmt': 58, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 45, 'MaxEssential': 4, 'SumEssential': 16, 'AvgCyclomatic': 1, 'CountLineCode': 105, 'CountStmtDecl': 26, 'MaxCyclomatic': 4, 'SumCyclomatic': 19, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 105, 'CountLineCodeExe': 40, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 28, 'CountLineInactive': 0, 'CountDeclMethodAll': 153, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 65, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99912,C++,"class kdu_cpl_error_message final: public kdu_thread_safe_message
{
  public:  // Member classes.
    using kdu_thread_safe_message::put_text;

    explicit kdu_cpl_error_message( CPLErr eErrClass ) :
        m_eErrClass(eErrClass),
        m_pszError(nullptr)
    {}

    void put_text(const char *string) override
    {
        if( m_pszError == nullptr )
        {
            m_pszError = CPLStrdup(string);
        }
        else
        {
            m_pszError = static_cast<char *>(CPLRealloc(
                m_pszError, strlen(m_pszError) + strlen(string) + 1));
            strcat(m_pszError, string);
        }
    }

    class JP2KAKException {};

    void flush(bool end_of_message = false) override
    {
        kdu_thread_safe_message::flush(end_of_message);

        if( m_pszError == nullptr )
            return;
        if( m_pszError[strlen(m_pszError) - 1] == '\n' )
            m_pszError[strlen(m_pszError) - 1] = '\0';

        CPLError(m_eErrClass, CPLE_AppDefined, ""%s"", m_pszError);
        CPLFree(m_pszError);
        m_pszError = nullptr;

        if( end_of_message && m_eErrClass == CE_Failure )
        {
            throw JP2KAKException();
        }
    }

  private:
    CPLErr m_eErrClass;
    char *m_pszError;
};",0,587 2000 2001 58 777 2002 123 777 58 330 860 2002 321 2003 59 648 2000 40 2004 2005 41 58 2006 40 2005 41 44 2007 40 753 41 123 125 865 2003 40 601 582 42 2008 41 2009 123 688 40 2007 323 753 41 123 2007 61 2010 40 2008 41 59 125 630 123 2007 61 811 60 582 42 62 40 2011 40 2007 44 2012 40 2007 41 43 2012 40 2008 41 43 1501 41 41 59 2013 40 2007 44 2008 41 59 125 125 587 2014 123 125 59 865 2015 40 569 2016 61 655 41 2009 123 2002 321 2015 40 2016 41 59 688 40 2007 323 753 41 792 59 688 40 2007 91 2017 40 2007 41 45 1501 93 323 314 41 2007 91 2017 40 2007 41 45 1501 93 61 314 59 2018 40 2006 44 2019 44 362 44 2007 41 59 2020 40 2007 41 59 2007 61 753 59 688 40 2016 307 2006 323 2021 41 123 825 2014 40 41 59 125 125 773 58 2004 2006 59 582 42 2007 59 125 59 ,"{'AvgLine': 11, 'CountLine': 49, 'CountStmt': 22, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 41, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 7, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 3, 'AltCountLineCode': 41, 'CountLineCodeExe': 22, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99937,C++,"class OGCAPIMapWrapperBand final: public GDALRasterBand
{
  public:
                  OGCAPIMapWrapperBand(OGCAPIDataset* poDS, int nBand);

    virtual GDALRasterBand* GetOverview(int nLevel) override;
    virtual int GetOverviewCount() override;
    virtual GDALColorInterp GetColorInterpretation() override;

  protected:
    virtual CPLErr IReadBlock( int nBlockXOff, int nBlockYOff, void * pImage) override;
    virtual CPLErr IRasterIO( GDALRWFlag, int, int, int, int,
                              void *, int, int, GDALDataType,
                              GSpacing, GSpacing,
                              GDALRasterIOExtraArg* psExtraArg ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 2004 44 704 2005 41 59 864 2002 42 2006 40 704 2007 41 2008 59 864 704 2009 40 41 2008 59 864 2010 2011 40 41 2008 59 775 58 864 2012 2013 40 704 2014 44 704 2015 44 865 42 2016 41 2008 59 864 2012 2017 40 2018 44 704 44 704 44 704 44 704 44 865 42 44 704 44 704 44 2019 44 2020 44 2020 44 2021 42 2022 41 2008 59 125 59 ,"{'AvgLine': 7, 'CountLine': 61, 'CountStmt': 22, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 57, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 57, 'CountLineCodeExe': 20, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 100, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99956,C++,"class Subset
{
public:
  Subset(int x_loIn, int x_hiIn, int y_loIn, int y_hiIn)
    : m_x_lo(x_loIn), m_x_hi(x_hiIn),  m_y_lo(y_loIn),  m_y_hi(y_hiIn)
  {}

  bool operator < (const Subset& rhs) const {
    if (m_x_lo < rhs.m_x_lo || m_x_hi < rhs.m_x_hi
        || m_y_lo < rhs.m_y_lo || m_y_hi < rhs.m_y_hi) {

      return true;
    }
    return false;
  }

  bool contains(const Subset& other) const {
    return m_x_lo <= other.m_x_lo && m_x_hi >= other.m_x_hi
        && m_y_lo <= other.m_y_lo && m_y_hi >= other.m_y_hi;
  }

  bool within(const Subset& other) const {
    return other.contains(*this);
  }

  Subset& operator = (const Subset& rhs) {
    if( &rhs != this )
    {
        m_x_lo = rhs.m_x_lo;
        m_x_hi = rhs.m_x_hi;
        m_y_lo = rhs.m_y_lo;
        m_y_hi = rhs.m_y_hi;
    }
    return *this;
  }

  int x_lo() const { return m_x_lo; }
  int x_hi() const { return m_x_hi; }
  int y_lo() const { return m_y_lo; }
  int y_hi() const { return m_y_hi; }

private:
  int m_x_lo;
  int m_x_hi;
  int m_y_lo;
  int m_y_hi;
};",0,587 2000 123 777 58 2000 40 704 2001 44 704 2002 44 704 2003 44 704 2004 41 58 2005 40 2001 41 44 2006 40 2002 41 44 2007 40 2003 41 44 2008 40 2004 41 123 125 569 758 60 40 601 2000 38 2009 41 601 123 688 40 2005 60 2009 46 2005 309 2006 60 2009 46 2006 309 2007 60 2009 46 2007 309 2008 60 2009 46 2008 41 123 792 829 59 125 792 655 59 125 569 2010 40 601 2000 38 2011 41 601 123 792 2005 329 2011 46 2005 307 2006 325 2011 46 2006 307 2007 329 2011 46 2007 307 2008 325 2011 46 2008 59 125 569 2012 40 601 2000 38 2011 41 601 123 792 2011 46 2010 40 42 823 41 59 125 2000 38 758 61 40 601 2000 38 2009 41 123 688 40 38 2009 340 823 41 123 2005 61 2009 46 2005 59 2006 61 2009 46 2006 59 2007 61 2009 46 2007 59 2008 61 2009 46 2008 59 125 792 42 823 59 125 704 2013 40 41 601 123 792 2005 59 125 704 2014 40 41 601 123 792 2006 59 125 704 2015 40 41 601 123 792 2007 59 125 704 2016 40 41 601 123 792 2008 59 125 773 58 704 2005 59 704 2006 59 704 2007 59 704 2008 59 125 59 ,"{'AvgLine': 3, 'CountLine': 47, 'CountStmt': 32, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 40, 'CountStmtDecl': 17, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 40, 'CountLineCodeExe': 18, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 54, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
99963,C++,"class OGRMongoDBSingleFeatureLayer final: public OGRLayer
{
    OGRFeatureDefn     *m_poFeatureDefn;
    CPLString           osVal;
    int                 iNextShapeId;
    public:
       explicit OGRMongoDBSingleFeatureLayer( const char *pszVal );
       ~OGRMongoDBSingleFeatureLayer() { m_poFeatureDefn->Release(); }
       void             ResetReading() override { iNextShapeId = 0; }
       OGRFeature      *GetNextFeature() override;
       OGRFeatureDefn  *GetLayerDefn() override { return m_poFeatureDefn; }
       int              TestCapability( const char * ) override { return FALSE; }
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2005 2006 59 704 2007 59 777 58 648 2000 40 601 582 42 2008 41 59 126 2000 40 41 123 2004 354 2009 40 41 59 125 865 2010 40 41 2011 123 2007 61 1500 59 125 2012 42 2013 40 41 2011 59 2003 42 2014 40 41 2011 123 792 2004 59 125 704 2015 40 601 582 42 41 2011 123 792 2016 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 33, 'CountStmt': 23, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 31, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 88, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99977,C++,"        class URLSpecificResolution
        {
            public:

                CPLString m_osURLPrefix;

                std::vector< std::pair<CPLString, CPLString> > m_aosNameValueHTTPHeaders;

                bool m_bAllowRemoteDownload;

                ResolutionMode m_eResolutionMode;

                int m_nResolutionDepth;

                bool m_bCacheResults;

                class XPathDerivedField
                {
                    public:

                        CPLString m_osName;

                        CPLString m_osType;

                        CPLString m_osXPath;
                };

                std::vector<XPathDerivedField> m_aoFields;

                URLSpecificResolution();
        };",0,587 2000 123 777 58 2001 2002 59 2003 321 2004 60 2003 321 2005 60 2001 44 2001 62 62 2006 59 569 2007 59 2008 2009 59 704 2010 59 569 2011 59 587 2012 123 777 58 2001 2013 59 2001 2014 59 2001 2015 59 125 59 2003 321 2004 60 2012 62 2016 59 2000 40 41 59 125 59 ,"{'AvgLine': 7, 'CountLine': 38, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 26, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 7, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100017,C++,"class OGRVFKLayer:public OGRLayer
{
private:
    /* spatial reference */
    OGRSpatialReference *poSRS;

    /* feature definition */
    OGRFeatureDefn      *poFeatureDefn;

    /* VFK data block */
    IVFKDataBlock       *poDataBlock;

    /* get next feature */
    int                  m_iNextFeature;

    /* private methods */
    OGRGeometry         *CreateGeometry(IVFKFeature *);
    OGRFeature          *GetFeature(IVFKFeature *);

public:
    OGRVFKLayer(const char *, OGRSpatialReference *,
                OGRwkbGeometryType, OGRVFKDataSource *);
    ~OGRVFKLayer();

    OGRFeature          *GetNextFeature() override;
    OGRFeature          *GetFeature(GIntBig) override;

    OGRFeatureDefn      *GetLayerDefn() override { return poFeatureDefn; }

    void                 ResetReading() override;

    int                  TestCapability(const char *) override;

    GIntBig              GetFeatureCount(int = TRUE) override;
};",0,587 2000 58 777 2001 123 773 58 305 2002 42 2003 59 305 2004 42 2005 59 305 2006 42 2007 59 305 704 2008 59 305 2009 42 2010 40 2011 42 41 59 2012 42 2013 40 2011 42 41 59 777 58 2000 40 601 582 42 44 2002 42 44 2014 44 2015 42 41 59 126 2000 40 41 59 2012 42 2016 40 41 2017 59 2012 42 2013 40 2018 41 2017 59 2004 42 2019 40 41 2017 123 792 2005 59 125 865 2020 40 41 2017 59 704 2021 40 601 582 42 41 2017 59 2018 2022 40 704 61 2023 41 2017 59 125 59 ,"{'AvgLine': 15, 'CountLine': 184, 'CountStmt': 79, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 61, 'MaxEssential': 5, 'SumEssential': 17, 'AvgCyclomatic': 2, 'CountLineCode': 132, 'CountStmtDecl': 21, 'MaxCyclomatic': 6, 'SumCyclomatic': 28, 'AltAvgLineCode': 11, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 30, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 2, 'CountDeclMethod': 10, 'AltCountLineCode': 132, 'CountLineCodeExe': 64, 'CountLineComment': 23, 'AltAvgLineComment': 1, 'AltCountLineBlank': 30, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 92, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.17', 'AltCountLineComment': 23, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 35, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 28, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
100038,C++,"class CPL_DLL MEMGroup CPL_NON_FINAL: public GDALGroup
{
    std::map<CPLString, std::shared_ptr<GDALGroup>> m_oMapGroups{};
    std::map<CPLString, std::shared_ptr<GDALMDArray>> m_oMapMDArrays{};
    std::map<CPLString, std::shared_ptr<GDALAttribute>> m_oMapAttributes{};
    std::map<CPLString, std::shared_ptr<GDALDimension>> m_oMapDimensions{};

public:
    MEMGroup(const std::string& osParentName, const char* pszName): GDALGroup(osParentName, pszName ? pszName : """") {}

    std::vector<std::string> GetMDArrayNames(CSLConstList papszOptions) const override;
    std::shared_ptr<GDALMDArray> OpenMDArray(const std::string& osName,
                                             CSLConstList papszOptions) const override;

    std::vector<std::string> GetGroupNames(CSLConstList papszOptions) const override;
    std::shared_ptr<GDALGroup> OpenGroup(const std::string& osName,
                                         CSLConstList papszOptions) const override;

    std::shared_ptr<GDALGroup> CreateGroup(const std::string& osName,
                                           CSLConstList papszOptions) override;

    std::shared_ptr<GDALDimension> CreateDimension(const std::string&,
                                                   const std::string&,
                                                   const std::string&,
                                                   GUInt64,
                                                   CSLConstList papszOptions) override;

    std::shared_ptr<GDALMDArray> CreateMDArray(const std::string& osName,
                                                       const std::vector<std::shared_ptr<GDALDimension>>& aoDimensions,
                                                       const GDALExtendedDataType& oDataType,
                                                       CSLConstList papszOptions) override;

    std::shared_ptr<GDALAttribute> GetAttribute(const std::string& osName) const override;

    std::vector<std::shared_ptr<GDALAttribute>> GetAttributes(CSLConstList papszOptions) const override;

    std::vector<std::shared_ptr<GDALDimension>> GetDimensions(CSLConstList papszOptions) const override;

    std::shared_ptr<GDALAttribute> CreateAttribute(
        const std::string& osName,
        const std::vector<GUInt64>& anDimensions,
        const GDALExtendedDataType& oDataType,
        CSLConstList papszOptions) override;
};",0,587 2000 2001 2002 58 777 2003 123 2004 321 2005 60 2006 44 2004 321 2007 60 2003 355 2008 123 125 59 2004 321 2005 60 2006 44 2004 321 2007 60 2009 355 2010 123 125 59 2004 321 2005 60 2006 44 2004 321 2007 60 2011 355 2012 123 125 59 2004 321 2005 60 2006 44 2004 321 2007 60 2013 355 2014 123 125 59 777 58 2001 40 601 2004 321 2015 38 2016 44 601 582 42 2017 41 58 2003 40 2016 44 2017 63 2017 58 362 41 123 125 2004 321 2018 60 2004 321 2015 62 2019 40 2020 2021 41 601 2022 59 2004 321 2007 60 2009 62 2023 40 601 2004 321 2015 38 2024 44 2020 2021 41 601 2022 59 2004 321 2018 60 2004 321 2015 62 2025 40 2020 2021 41 601 2022 59 2004 321 2007 60 2003 62 2026 40 601 2004 321 2015 38 2024 44 2020 2021 41 601 2022 59 2004 321 2007 60 2003 62 2027 40 601 2004 321 2015 38 2024 44 2020 2021 41 2022 59 2004 321 2007 60 2013 62 2028 40 601 2004 321 2015 38 44 601 2004 321 2015 38 44 601 2004 321 2015 38 44 2029 44 2020 2021 41 2022 59 2004 321 2007 60 2009 62 2030 40 601 2004 321 2015 38 2024 44 601 2004 321 2018 60 2004 321 2007 60 2013 355 38 2031 44 601 2032 38 2033 44 2020 2021 41 2022 59 2004 321 2007 60 2011 62 2034 40 601 2004 321 2015 38 2024 41 601 2022 59 2004 321 2018 60 2004 321 2007 60 2011 355 2035 40 2020 2021 41 601 2022 59 2004 321 2018 60 2004 321 2007 60 2013 355 2036 40 2020 2021 41 601 2022 59 2004 321 2007 60 2011 62 2037 40 601 2004 321 2015 38 2024 44 601 2004 321 2018 60 2029 62 38 2038 44 601 2032 38 2033 44 2020 2021 41 2022 59 125 59 ,"{'AvgLine': 14, 'CountLine': 216, 'CountStmt': 60, 'MaxNesting': 3, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 27, 'MaxEssential': 1, 'SumEssential': 12, 'AvgCyclomatic': 2, 'CountLineCode': 204, 'CountStmtDecl': 38, 'MaxCyclomatic': 7, 'SumCyclomatic': 24, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 12, 'AltCountLineCode': 204, 'CountLineCodeExe': 28, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 45, 'CountLineInactive': 0, 'CountDeclMethodAll': 40, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 24, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 12, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 24, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 17, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100059,C++,"class HDF4EOSGridsGroup final: public GDALGroup
{
    std::shared_ptr<HDF4SharedResources> m_poShared;
    std::shared_ptr<HDF4GDsHandle> m_poGDsHandle;

public:
    HDF4EOSGridsGroup(const std::string& osParentName,
              const std::string& osName,
              const std::shared_ptr<HDF4SharedResources>& poShared,
              const std::shared_ptr<HDF4GDsHandle>& poGDsHandle):
        GDALGroup(osParentName, osName),
        m_poShared(poShared),
        m_poGDsHandle(poGDsHandle)
    {
    }

    std::vector<std::string> GetGroupNames(CSLConstList papszOptions) const override;
    std::shared_ptr<GDALGroup> OpenGroup(const std::string& osName, CSLConstList) const override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 2003 321 2004 60 2007 62 2008 59 777 58 2000 40 601 2003 321 2009 38 2010 44 601 2003 321 2009 38 2011 44 601 2003 321 2004 60 2005 62 38 2012 44 601 2003 321 2004 60 2007 62 38 2013 41 58 2002 40 2010 44 2011 41 44 2006 40 2012 41 44 2008 40 2013 41 123 125 2003 321 2014 60 2003 321 2009 62 2015 40 2016 2017 41 601 2018 59 2003 321 2004 60 2002 62 2019 40 601 2003 321 2009 38 2011 44 2016 41 601 2018 59 125 59 ,"{'AvgLine': 14, 'CountLine': 52, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 3, 'AltCountLineCode': 44, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 31, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100186,C++,"class XYLineStringSetter
{
        OGRRawPoint* paoPoints;
    public:
        explicit XYLineStringSetter(OGRRawPoint* paoPointsIn) :
                                            paoPoints(paoPointsIn) {}

        void set(int i, double dfX, double dfY)
        {
            paoPoints[i].x = dfX;
            paoPoints[i].y = dfY;
        }
};",0,587 2000 123 2001 42 2002 59 777 58 648 2000 40 2001 42 2003 41 58 2002 40 2003 41 123 125 865 2004 40 704 2005 44 625 2006 44 625 2007 41 123 2002 91 2005 93 46 2008 61 2006 59 2002 91 2005 93 46 2009 61 2007 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 13, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 12, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100063,C++,"class HDF4GRsGroup final: public GDALGroup
{
    std::shared_ptr<HDF4SharedResources> m_poShared;
    std::shared_ptr<HDF4GRsHandle> m_poGRsHandle;
    mutable std::map<std::string, int> m_oMapNameToGRIdx{};

public:
    HDF4GRsGroup(const std::string& osParentName,
              const std::string& osName,
              const std::shared_ptr<HDF4SharedResources>& poShared,
              const std::shared_ptr<HDF4GRsHandle>& poGRsHandle):
        GDALGroup(osParentName, osName),
        m_poShared(poShared),
        m_poGRsHandle(poGRsHandle)
    {
    }

    std::vector<std::string> GetMDArrayNames(CSLConstList papszOptions) const override;
    std::shared_ptr<GDALMDArray> OpenMDArray(const std::string& osName,
                                             CSLConstList papszOptions) const override;

    std::vector<std::shared_ptr<GDALAttribute>> GetAttributes(CSLConstList papszOptions = nullptr) const override;

};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 2003 321 2004 60 2007 62 2008 59 740 2003 321 2009 60 2003 321 2010 44 704 62 2011 123 125 59 777 58 2000 40 601 2003 321 2010 38 2012 44 601 2003 321 2010 38 2013 44 601 2003 321 2004 60 2005 62 38 2014 44 601 2003 321 2004 60 2007 62 38 2015 41 58 2002 40 2012 44 2013 41 44 2006 40 2014 41 44 2008 40 2015 41 123 125 2003 321 2016 60 2003 321 2010 62 2017 40 2018 2019 41 601 2020 59 2003 321 2004 60 2021 62 2022 40 601 2003 321 2010 38 2013 44 2018 2019 41 601 2020 59 2003 321 2016 60 2003 321 2004 60 2023 355 2024 40 2018 2019 61 753 41 601 2020 59 125 59 ,"{'AvgLine': 24, 'CountLine': 112, 'CountStmt': 36, 'MaxNesting': 1, 'AvgLineCode': 22, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 101, 'CountStmtDecl': 34, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 22, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 101, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 31, 'CountLineInactive': 0, 'CountDeclMethodAll': 32, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100068,C++,"class HDF4SharedResources
{
    friend class ::HDF4Dataset;
    int32       m_hSD = -1;
    std::string m_osFilename;
    CPLStringList m_aosOpenOptions;
    std::shared_ptr<GDALPamMultiDim> m_poPAM{};

public:
    explicit HDF4SharedResources(const std::string& osFilename);
    ~HDF4SharedResources();

    int32       GetSDHandle() const { return m_hSD; }
    const std::string& GetFilename() const { return m_osFilename; }
    const char*        FetchOpenOption(const char* pszName, const char* pszDefault) const {
        return m_aosOpenOptions.FetchNameValueDef(pszName, pszDefault);
    }

    const std::shared_ptr<GDALPamMultiDim>& GetPAM() { return m_poPAM; }
};",0,587 2000 123 667 587 321 2001 59 2002 2003 61 45 1501 59 2004 321 2005 2006 59 2007 2008 59 2004 321 2009 60 2010 62 2011 123 125 59 777 58 648 2000 40 601 2004 321 2005 38 2012 41 59 126 2000 40 41 59 2002 2013 40 41 601 123 792 2003 59 125 601 2004 321 2005 38 2014 40 41 601 123 792 2006 59 125 601 582 42 2015 40 601 582 42 2016 44 601 582 42 2017 41 601 123 792 2008 46 2018 40 2016 44 2017 41 59 125 601 2004 321 2009 60 2010 62 38 2019 40 41 123 792 2011 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 32, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 28, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100069,C++,"class HDF4SwathArray final: public GDALPamMDArray
{
    std::shared_ptr<HDF4SharedResources> m_poShared;
    std::shared_ptr<HDF4SwathHandle> m_poSwathHandle;
    std::vector<std::shared_ptr<GDALDimension>> m_dims{};
    GDALExtendedDataType m_dt = GDALExtendedDataType::Create(GDT_Unknown);
    mutable std::vector<GByte> m_abyNoData{};

protected:
    HDF4SwathArray(const std::string& osParentName,
                   const std::string& osName,
                   const std::shared_ptr<HDF4SharedResources>& poShared,
                   const std::shared_ptr<HDF4SwathHandle>& poSwathHandle,
                   const std::vector<int32>& aiDimSizes,
                   const std::string& dimNames,
                   int32 iNumType,
                   const std::vector<std::shared_ptr<GDALDimension>>& groupDims);

    bool IRead(const GUInt64* arrayStartIdx,
                      const size_t* count,
                      const GInt64* arrayStep,
                      const GPtrDiff_t* bufferStride,
                      const GDALExtendedDataType& bufferDataType,
                      void* pDstBuffer) const override;

public:
    static std::shared_ptr<HDF4SwathArray> Create(const std::string& osParentName,
                   const std::string& osName,
                   const std::shared_ptr<HDF4SharedResources>& poShared,
                   const std::shared_ptr<HDF4SwathHandle>& poSwathHandle,
                   const std::vector<int32>& aiDimSizes,
                   const std::string& dimNames,
                   int32 iNumType,
                   const std::vector<std::shared_ptr<GDALDimension>>& groupDims)
    {
        auto ar(std::shared_ptr<HDF4SwathArray>(new HDF4SwathArray(
            osParentName, osName, poShared,
            poSwathHandle, aiDimSizes, dimNames,
            iNumType, groupDims)));
        ar->SetSelf(ar);
        return ar;
    }

    bool IsWritable() const override { return false; }

    const std::string& GetFilename() const override { return m_poShared->GetFilename(); }

    const std::vector<std::shared_ptr<GDALDimension>>& GetDimensions() const override { return m_dims; }

    const GDALExtendedDataType &GetDataType() const override { return m_dt; }

    std::vector<std::shared_ptr<GDALAttribute>> GetAttributes(CSLConstList papszOptions = nullptr) const override;

    const void* GetRawNoDataValue() const override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 2003 321 2004 60 2007 62 2008 59 2003 321 2009 60 2003 321 2004 60 2010 355 2011 123 125 59 2012 2013 61 2012 321 2014 40 2015 41 59 740 2003 321 2009 60 2016 62 2017 123 125 59 775 58 2000 40 601 2003 321 2018 38 2019 44 601 2003 321 2018 38 2020 44 601 2003 321 2004 60 2005 62 38 2021 44 601 2003 321 2004 60 2007 62 38 2022 44 601 2003 321 2009 60 2023 62 38 2024 44 601 2003 321 2018 38 2025 44 2023 2026 44 601 2003 321 2009 60 2003 321 2004 60 2010 355 38 2027 41 59 569 2028 40 601 2029 42 2030 44 601 2031 42 2032 44 601 2033 42 2034 44 601 2035 42 2036 44 601 2012 38 2037 44 865 42 2038 41 601 2039 59 777 58 809 2003 321 2004 60 2000 62 2014 40 601 2003 321 2018 38 2019 44 601 2003 321 2018 38 2020 44 601 2003 321 2004 60 2005 62 38 2021 44 601 2003 321 2004 60 2007 62 38 2022 44 601 2003 321 2009 60 2023 62 38 2024 44 601 2003 321 2018 38 2025 44 2023 2026 44 601 2003 321 2009 60 2003 321 2004 60 2010 355 38 2027 41 123 561 2040 40 2003 321 2004 60 2000 62 40 744 2000 40 2019 44 2020 44 2021 44 2022 44 2024 44 2025 44 2026 44 2027 41 41 41 59 2040 354 2041 40 2040 41 59 792 2040 59 125 569 2042 40 41 601 2039 123 792 655 59 125 601 2003 321 2018 38 2043 40 41 601 2039 123 792 2006 354 2043 40 41 59 125 601 2003 321 2009 60 2003 321 2004 60 2010 355 38 2044 40 41 601 2039 123 792 2011 59 125 601 2012 38 2045 40 41 601 2039 123 792 2013 59 125 2003 321 2009 60 2003 321 2004 60 2046 355 2047 40 2048 2049 61 753 41 601 2039 59 601 865 42 2050 40 41 601 2039 59 125 59 ,"{'AvgLine': 16, 'CountLine': 182, 'CountStmt': 42, 'MaxNesting': 3, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 169, 'CountStmtDecl': 33, 'MaxCyclomatic': 4, 'SumCyclomatic': 16, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 169, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 44, 'CountLineInactive': 0, 'CountDeclMethodAll': 84, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 7, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100072,C++,"class HDF4SwathSubGroup final: public GDALGroup
{
    std::shared_ptr<HDF4SharedResources> m_poShared;
    std::shared_ptr<HDF4SwathHandle> m_poSwathHandle;
    int32 m_entryType;
    std::vector<std::shared_ptr<GDALDimension>> m_groupDims{};

public:
    HDF4SwathSubGroup(const std::string& osParentName,
              const std::string& osName,
              const std::shared_ptr<HDF4SharedResources>& poShared,
              const std::shared_ptr<HDF4SwathHandle>& poSwathHandle,
              int32 entryType,
              const std::vector<std::shared_ptr<GDALDimension>>& groupDims):
        GDALGroup(osParentName, osName),
        m_poShared(poShared),
        m_poSwathHandle(poSwathHandle),
        m_entryType(entryType),
        m_groupDims(groupDims)
    {
    }

    std::vector<std::string> GetMDArrayNames(CSLConstList papszOptions) const override;
    std::shared_ptr<GDALMDArray> OpenMDArray(const std::string& osName,
                                             CSLConstList papszOptions) const override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 2003 321 2004 60 2007 62 2008 59 2009 2010 59 2003 321 2011 60 2003 321 2004 60 2012 355 2013 123 125 59 777 58 2000 40 601 2003 321 2014 38 2015 44 601 2003 321 2014 38 2016 44 601 2003 321 2004 60 2005 62 38 2017 44 601 2003 321 2004 60 2007 62 38 2018 44 2009 2019 44 601 2003 321 2011 60 2003 321 2004 60 2012 355 38 2020 41 58 2002 40 2015 44 2016 41 44 2006 40 2017 41 44 2008 40 2018 41 44 2010 40 2019 41 44 2013 40 2020 41 123 125 2003 321 2011 60 2003 321 2014 62 2021 40 2022 2023 41 601 2024 59 2003 321 2004 60 2025 62 2026 40 601 2003 321 2014 38 2016 44 2022 2023 41 601 2024 59 125 59 ,"{'AvgLine': 22, 'CountLine': 79, 'CountStmt': 24, 'MaxNesting': 1, 'AvgLineCode': 19, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 70, 'CountStmtDecl': 22, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 19, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 3, 'AltCountLineCode': 70, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 31, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100124,C++,"    class netCDFVAttribute
    {
        public:
            /* vsync(...)
             * Implementation: Given the REAL ncID and REAL variable ID
             * Write the attribute to the variable
             */
            virtual void vsync(int realncid, int realvarid) = 0;

            /*  ~netCDFVAttribute()
             * Virtual destructor
             */
            virtual ~netCDFVAttribute() { }
    };",0,587 2000 123 777 58 305 864 865 2001 40 704 2002 44 704 2003 41 61 1500 59 305 864 126 2000 40 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 14, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '1.17', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100088,C++,"class BAGGeorefMDBandBase CPL_NON_FINAL: public GDALPamRasterBand
{
protected:
    std::shared_ptr<GDALMDArray> m_poKeys;
    std::unique_ptr<GDALRasterBand> m_poElevBand;
    std::unique_ptr<GDALRasterAttributeTable> m_poRAT{};

    BAGGeorefMDBandBase( const std::shared_ptr<GDALMDArray>& poValues,
                         const std::shared_ptr<GDALMDArray>& poKeys,
                         GDALRasterBand* poElevBand ):
        m_poKeys(poKeys), m_poElevBand(poElevBand),
        m_poRAT(CreateRAT(poValues)) {}

    CPLErr IReadBlockFromElevBand( int nBlockXOff, int nBlockYOff, void* pImage );

public:
    GDALRasterAttributeTable *GetDefaultRAT() override { return m_poRAT.get(); }
    double GetNoDataValue(int* pbSuccess) override;
};",0,587 2000 2001 58 777 2002 123 775 58 2003 321 2004 60 2005 62 2006 59 2003 321 2007 60 2008 62 2009 59 2003 321 2007 60 2010 62 2011 123 125 59 2000 40 601 2003 321 2004 60 2005 62 38 2012 44 601 2003 321 2004 60 2005 62 38 2013 44 2008 42 2014 41 58 2006 40 2013 41 44 2009 40 2014 41 44 2011 40 2015 40 2012 41 41 123 125 2016 2017 40 704 2018 44 704 2019 44 865 42 2020 41 59 777 58 2010 42 2021 40 41 2022 123 792 2011 46 2023 40 41 59 125 625 2024 40 704 42 2025 41 2022 59 125 59 ,"{'AvgLine': 11, 'CountLine': 60, 'CountStmt': 25, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 56, 'CountStmtDecl': 17, 'MaxCyclomatic': 4, 'SumCyclomatic': 8, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 56, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 2, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 132, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100113,C++,"class SDTSRasterBand final: public GDALPamRasterBand
{
    friend class SDTSDataset;

    SDTSRasterReader *poRL;

  public:

                SDTSRasterBand( SDTSDataset *, int, SDTSRasterReader * );

    virtual CPLErr IReadBlock( int, int, void * ) override;

    virtual double GetNoDataValue( int *pbSuccess ) override;
    virtual const char *GetUnitType() override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 42 2005 59 777 58 2000 40 2003 42 44 704 44 2004 42 41 59 864 2006 2007 40 704 44 704 44 865 42 41 2008 59 864 625 2009 40 704 42 2010 41 2008 59 864 601 582 42 2011 40 41 2008 59 125 59 ,"{'AvgLine': 10, 'CountLine': 57, 'CountStmt': 24, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 18, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 2, 'CountLineCode': 44, 'CountStmtDecl': 6, 'MaxCyclomatic': 3, 'SumCyclomatic': 9, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 4, 'AltCountLineCode': 44, 'CountLineCodeExe': 19, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 132, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100265,C++,"class FixedLevelRangeIterator
{
public:
    typedef RangeIterator<FixedLevelRangeIterator> Iterator;
    FixedLevelRangeIterator( const double* levels, size_t count, double maxLevel = Inf ) : levels_( levels ), count_( count ), maxLevel_( maxLevel )
    {
    }

    Range<Iterator> range( double min, double max ) const
    {
        if ( min > max )
            std::swap( min, max );
        size_t b = 0;
        for (; b != count_ && levels_[b] < fudge(levels_[b], min); b++);
        if ( min == max )
            return Range<Iterator>( Iterator( *this, int(b) ), Iterator( *this, int(b) ) );
        size_t e = b;
        for (; e != count_ && levels_[e] <= fudge(levels_[e], max); e++);
        return Range<Iterator>( Iterator( *this, int(b) ), Iterator( *this, int(e) ) );
    }

    double level( int idx ) const
    {
        if ( idx >= int(count_) )
            return maxLevel_;
        return levels_[size_t(idx)];
    }

private:
    const double* levels_;
    size_t count_;
    double maxLevel_;
};",0,587 2000 123 777 58 833 2001 60 2000 62 2002 59 2000 40 601 625 42 2003 44 2004 2005 44 625 2006 61 2007 41 58 2008 40 2003 41 44 2009 40 2005 41 44 2010 40 2006 41 123 125 2011 60 2002 62 2012 40 625 2013 44 625 2014 41 601 123 688 40 2013 62 2014 41 2015 321 2016 40 2013 44 2014 41 59 2004 2017 61 1500 59 664 40 59 2017 340 2009 307 2008 91 2017 93 60 2018 40 2008 91 2017 93 44 2013 41 59 2017 349 41 59 688 40 2013 323 2014 41 792 2011 60 2002 62 40 2002 40 42 823 44 704 40 2017 41 41 44 2002 40 42 823 44 704 40 2017 41 41 41 59 2004 2019 61 2017 59 664 40 59 2019 340 2009 307 2008 91 2019 93 329 2018 40 2008 91 2019 93 44 2014 41 59 2019 349 41 59 792 2011 60 2002 62 40 2002 40 42 823 44 704 40 2017 41 41 44 2002 40 42 823 44 704 40 2019 41 41 41 59 125 625 2020 40 704 2021 41 601 123 688 40 2021 325 704 40 2009 41 41 792 2010 59 792 2008 91 2004 40 2021 41 93 59 125 773 58 601 625 42 2008 59 2004 2009 59 625 2010 59 125 59 ,"{'AvgLine': 7, 'CountLine': 33, 'CountStmt': 26, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 30, 'CountStmtDecl': 12, 'MaxCyclomatic': 5, 'SumCyclomatic': 8, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 4, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 30, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 11, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
100122,C++,"class VSIZipReader final : public VSIArchiveReader
{
    CPL_DISALLOW_COPY_ASSIGN(VSIZipReader)

  private:
    unzFile unzF = nullptr;
    unz_file_pos file_pos;
    GUIntBig nNextFileSize = 0;
    CPLString osNextFileName{};
    GIntBig nModifiedTime = 0;

    bool SetInfo();

  public:
    explicit VSIZipReader( const char* pszZipFileName );
    ~VSIZipReader() override;

    int IsValid() { return unzF != nullptr; }

    unzFile GetUnzFileHandle() { return unzF; }

    int GotoFirstFile() override;
    int GotoNextFile() override;
    VSIArchiveEntryFileOffset* GetFileOffset() override
        { return new VSIZipEntryFileOffset(file_pos); }
    GUIntBig GetFileSize() override { return nNextFileSize; }
    CPLString GetFileName() override { return osNextFileName; }
    GIntBig GetModifiedTime() override { return nModifiedTime; }
    int GotoFileOffset( VSIArchiveEntryFileOffset* pOffset ) override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 773 58 2004 2005 61 753 59 2006 2007 59 2008 2009 61 1500 59 2010 2011 123 125 59 2012 2013 61 1500 59 569 2014 40 41 59 777 58 648 2000 40 601 582 42 2015 41 59 126 2000 40 41 2016 59 704 2017 40 41 123 792 2005 340 753 59 125 2004 2018 40 41 123 792 2005 59 125 704 2019 40 41 2016 59 704 2020 40 41 2016 59 2021 42 2022 40 41 2016 123 792 744 2023 40 2007 41 59 125 2008 2024 40 41 2016 123 792 2009 59 125 2010 2025 40 41 2016 123 792 2011 59 125 2012 2026 40 41 2016 123 792 2013 59 125 704 2027 40 2021 42 2028 41 2016 59 125 59 ,"{'AvgLine': 6, 'CountLine': 106, 'CountStmt': 61, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 40, 'MaxEssential': 3, 'SumEssential': 18, 'AvgCyclomatic': 1, 'CountLineCode': 92, 'CountStmtDecl': 22, 'MaxCyclomatic': 3, 'SumCyclomatic': 20, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 14, 'AltCountLineCode': 92, 'CountLineCodeExe': 40, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
100208,C++,"class CADDictionaryObject final: public CADBaseControlObject
{
public:
    CADDictionaryObject();
    virtual ~CADDictionaryObject(){}

    long          nNumItems;
    short         dCloningFlag;
    unsigned char dHardOwnerFlag;

    std::vector<std::string> sItemNames;

    CADHandle      hParentHandle;
    CADHandleArray hReactors;
    CADHandle      hXDictionary;
    CADHandleArray hItemHandles;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 726 2003 59 803 2004 59 856 582 2005 59 2006 321 2007 60 2006 321 2008 62 2009 59 2010 2011 59 2012 2013 59 2010 2014 59 2012 2015 59 125 59 ,"{'AvgLine': 4, 'CountLine': 24, 'CountStmt': 18, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 16, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 21, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 8, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100285,C++,"class L1BMaskBand final: public GDALPamRasterBand
{
    friend class L1BDataset;

  public:

    explicit       L1BMaskBand( L1BDataset * );

    virtual CPLErr IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 777 58 648 2000 40 2003 42 41 59 864 2004 2005 40 704 44 704 44 865 42 41 2006 59 125 59 ,"{'AvgLine': 16, 'CountLine': 42, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 3, 'CountDeclMethod': 2, 'AltCountLineCode': 33, 'CountLineCodeExe': 16, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 130, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100291,C++,"class TimeCode {
    long        lYear;
    long        lDay;
    long        lMillisecond;
    char        szString[L1B_TIMECODE_LENGTH];

  public:
    TimeCode() : lYear(0), lDay(0), lMillisecond(0)
    {
        memset( szString, 0, sizeof(szString) );
    }

    void SetYear(long year)
    {
        lYear = year;
    }
    void SetDay(long day)
    {
        lDay = day;
    }
    void SetMillisecond(long millisecond)
    {
        lMillisecond = millisecond;
    }
    long GetYear() const { return lYear; }
    long GetDay() const { return lDay; }
    long GetMillisecond() const { return lMillisecond; }
    char* PrintTime()
    {
        snprintf(szString, L1B_TIMECODE_LENGTH,
                 ""year: %ld, day: %ld, millisecond: %ld"",
                 lYear, lDay, lMillisecond);
        return szString;
    }
};",0,587 2000 123 726 2001 59 726 2002 59 726 2003 59 582 2004 91 2005 93 59 777 58 2000 40 41 58 2001 40 1500 41 44 2002 40 1500 41 44 2003 40 1500 41 123 2006 40 2004 44 1500 44 805 40 2004 41 41 59 125 865 2007 40 726 2008 41 123 2001 61 2008 59 125 865 2009 40 726 2010 41 123 2002 61 2010 59 125 865 2011 40 726 2012 41 123 2003 61 2012 59 125 726 2013 40 41 601 123 792 2001 59 125 726 2014 40 41 601 123 792 2002 59 125 726 2015 40 41 601 123 792 2003 59 125 582 42 2016 40 41 123 2017 40 2004 44 2005 44 362 44 2001 44 2002 44 2003 41 59 792 2004 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 35, 'CountStmt': 24, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 33, 'CountLineCodeExe': 12, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 65, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
100304,C++,"template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};",0,822 60 835 2000 62 587 2001 123 816 2002 123 2000 42 2003 59 2002 40 2000 42 2004 41 58 2003 40 2004 41 123 125 126 2002 40 41 123 619 2003 59 125 2002 38 758 61 40 2002 38 2005 41 123 2000 42 2006 61 2003 59 2003 61 1500 59 619 2006 59 2003 61 2005 46 2003 59 2005 46 2003 61 1500 59 792 42 823 59 125 125 2007 59 2001 38 758 61 40 601 2001 60 2000 62 38 2008 41 59 2001 40 601 2001 60 2000 62 38 2008 41 59 777 58 2001 40 41 58 2007 40 1500 41 123 125 2001 38 758 61 40 601 2000 38 2009 41 123 2002 2010 40 744 2000 40 2009 41 41 59 2007 61 2010 59 792 42 823 59 125 758 2000 38 40 41 601 123 792 42 2007 46 2011 59 125 2000 42 758 38 40 41 123 792 2007 46 2012 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 15, 'CountStmt': 26, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 16, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 15, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100348,C++,"template <class T>
class LTIDLLReader : public T
{
public:
   explicit LTIDLLReader(const LTFileSpec& fileSpec,
                bool useWorldFile = false) : T(fileSpec, useWorldFile) {}
   explicit LTIDLLReader(LTIOStreamInf &oStream,
                bool useWorldFile = false) : T(oStream, useWorldFile) {}
   explicit LTIDLLReader(LTIOStreamInf *poStream,
                LTIOStreamInf *poWorldFile = nullptr) : T(poStream, poWorldFile) {}
   virtual ~LTIDLLReader() {}
};",0,822 60 587 2000 62 587 2001 58 777 2000 123 777 58 648 2001 40 601 2002 38 2003 44 569 2004 61 655 41 58 2000 40 2003 44 2004 41 123 125 648 2001 40 2005 38 2006 44 569 2004 61 655 41 58 2000 40 2006 44 2004 41 123 125 648 2001 40 2005 42 2007 44 2005 42 2008 61 753 41 58 2000 40 2007 44 2008 41 123 125 864 126 2001 40 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 11, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 11, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100351,C++,"class MrSIDProgress : public LTIProgressDelegate
{
public:
    MrSIDProgress(GDALProgressFunc f, void *arg) : m_f(f), m_arg(arg) {}
    virtual ~MrSIDProgress() {}
    virtual LT_STATUS setProgressStatus(float fraction) override
    {
        if (!m_f)
            return LT_STS_BadContext;
        if( !m_f( fraction, nullptr, m_arg ) )
            return LT_STS_Failure;
        return LT_STS_Success;
    }
private:
    GDALProgressFunc m_f;
    void *m_arg;
};",0,587 2000 58 777 2001 123 777 58 2000 40 2002 2003 44 865 42 2004 41 58 2005 40 2003 41 44 2006 40 2004 41 123 125 864 126 2000 40 41 123 125 864 2007 2008 40 660 2009 41 2010 123 688 40 33 2005 41 792 2011 59 688 40 33 2005 40 2009 44 753 44 2006 41 41 792 2012 59 792 2013 59 125 773 58 2002 2005 59 865 42 2006 59 125 59 ,"{'AvgLine': 3, 'CountLine': 17, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 17, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100005,C++,"class GDALPDFRasterDesc
{
    public:
        GDALPDFObjectNum nOCGRasterId{};
        std::vector<GDALPDFImageDesc> asImageDesc{};
};",0,587 2000 123 777 58 2001 2002 123 125 59 2003 321 2004 60 2005 62 2006 123 125 59 125 59 ,"{'AvgLine': 0, 'CountLine': 6, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99796,C++,"class PDS4RawRasterBand final: public RawRasterBand
{
        friend class PDS4Dataset;

        bool      m_bHasOffset;
        bool      m_bHasScale;
        bool      m_bHasNoData;
        double    m_dfOffset;
        double    m_dfScale;
        double    m_dfNoData;

    public:
                 PDS4RawRasterBand( GDALDataset *l_poDS, int l_nBand,
                                     VSILFILE * l_fpRaw,
                                     vsi_l_offset l_nImgOffset,
                                     int l_nPixelOffset,
                                     int l_nLineOffset,
                                     GDALDataType l_eDataType,
                                     int l_bNativeOrder );
        virtual ~PDS4RawRasterBand() {}

        virtual CPLErr          IWriteBlock( int, int, void * ) override;

        virtual CPLErr  IRasterIO( GDALRWFlag, int, int, int, int,
                                void *, int, int, GDALDataType,
                                GSpacing nPixelSpace, GSpacing nLineSpace,
                                GDALRasterIOExtraArg* psExtraArg ) override;

        virtual double GetOffset( int *pbSuccess = nullptr ) override;
        virtual double GetScale( int *pbSuccess = nullptr ) override;
        virtual CPLErr SetOffset( double dfNewOffset ) override;
        virtual CPLErr SetScale( double dfNewScale ) override;
        virtual double GetNoDataValue( int *pbSuccess = nullptr ) override;
        virtual CPLErr SetNoDataValue( double dfNewNoData ) override;
        virtual const char* GetUnitType() override {
            return static_cast<PDS4Dataset*>(poDS)->m_osUnits.c_str(); }
        virtual CPLErr SetUnitType(const char* pszUnits) override {
            static_cast<PDS4Dataset*>(poDS)->m_osUnits = pszUnits;
            return CE_None;
        }

        void    SetMaskBand(GDALRasterBand* poMaskBand);
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 569 2004 59 569 2005 59 569 2006 59 625 2007 59 625 2008 59 625 2009 59 777 58 2000 40 2010 42 2011 44 704 2012 44 2013 42 2014 44 2015 2016 44 704 2017 44 704 2018 44 2019 2020 44 704 2021 41 59 864 126 2000 40 41 123 125 864 2022 2023 40 704 44 704 44 865 42 41 2024 59 864 2022 2025 40 2026 44 704 44 704 44 704 44 704 44 865 42 44 704 44 704 44 2019 44 2027 2028 44 2027 2029 44 2030 42 2031 41 2024 59 864 625 2032 40 704 42 2033 61 753 41 2024 59 864 625 2034 40 704 42 2033 61 753 41 2024 59 864 2022 2035 40 625 2036 41 2024 59 864 2022 2037 40 625 2038 41 2024 59 864 625 2039 40 704 42 2033 61 753 41 2024 59 864 2022 2040 40 625 2041 41 2024 59 864 601 582 42 2042 40 41 2024 123 792 811 60 2003 42 62 40 2043 41 354 2044 46 2045 40 41 59 125 864 2022 2046 40 601 582 42 2047 41 2024 123 811 60 2003 42 62 40 2048 41 354 2049 61 2047 59 792 2050 59 125 865 2051 40 2052 42 2053 41 59 125 59 ,"{'AvgLine': 7, 'CountLine': 138, 'CountStmt': 59, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 32, 'MaxEssential': 3, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 128, 'CountStmtDecl': 27, 'MaxCyclomatic': 3, 'SumCyclomatic': 20, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 13, 'AltCountLineCode': 128, 'CountLineCodeExe': 48, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 28, 'CountLineInactive': 0, 'CountDeclMethodAll': 181, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 76, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 6, 'CountDeclInstanceVariableProtected': 0}"
98640,C++,"class VRTAttribute final: public GDALAttribute
{
    GDALExtendedDataType m_dt;
    std::vector<std::string> m_aosList{};
    std::vector<std::shared_ptr<GDALDimension>> m_dims{};

protected:

    bool IRead(const GUInt64* arrayStartIdx,
                      const size_t* count,
                      const GInt64* arrayStep,
                      const GPtrDiff_t* bufferStride,
                      const GDALExtendedDataType& bufferDataType,
                      void* pDstBuffer) const override;

    bool IWrite(const GUInt64* arrayStartIdx,
                      const size_t* count,
                      const GInt64* arrayStep,
                      const GPtrDiff_t* bufferStride,
                      const GDALExtendedDataType& bufferDataType,
                      const void* pSrcBuffer) override;


public:
    VRTAttribute(const std::string& osParentName,
                 const std::string& osName,
                 const GDALExtendedDataType& dt,
                 std::vector<std::string>&& aosList):
        GDALAbstractMDArray(osParentName, osName),
        GDALAttribute(osParentName, osName),
        m_dt(dt),
        m_aosList(std::move(aosList))
    {
        if( m_aosList.size() > 1 )
        {
            m_dims.emplace_back(std::make_shared<GDALDimension>(
                std::string(), ""dim"",
                std::string(), std::string(), m_aosList.size()));
        }
    }

    VRTAttribute(const std::string& osParentName,
                 const std::string& osName,
                 GUInt64 nDim,
                 const GDALExtendedDataType& dt):
        GDALAbstractMDArray(osParentName, osName),
        GDALAttribute(osParentName, osName),
        m_dt(dt)
    {
        if( nDim != 0 )
        {
            m_dims.emplace_back(std::make_shared<GDALDimension>(
                std::string(), ""dim"",
                std::string(), std::string(), nDim));
        }
    }

    static bool CreationCommonChecks(const std::string& osName,
                                     const std::vector<GUInt64>& anDimensions,
                                     const std::map<std::string, std::shared_ptr<VRTAttribute>>& oMapAttributes);

    static std::shared_ptr<VRTAttribute> Create(const std::string& osParentName,
                                                const CPLXMLNode* psNode);

    const std::vector<std::shared_ptr<GDALDimension>>& GetDimensions() const override { return m_dims; }

    const GDALExtendedDataType &GetDataType() const override { return m_dt; }

    void Serialize(CPLXMLNode* psParent) const;
};",0,587 2000 2001 58 777 2002 123 2003 2004 59 2005 321 2006 60 2005 321 2007 62 2008 123 125 59 2005 321 2006 60 2005 321 2009 60 2010 355 2011 123 125 59 775 58 569 2012 40 601 2013 42 2014 44 601 2015 42 2016 44 601 2017 42 2018 44 601 2019 42 2020 44 601 2003 38 2021 44 865 42 2022 41 601 2023 59 569 2024 40 601 2013 42 2014 44 601 2015 42 2016 44 601 2017 42 2018 44 601 2019 42 2020 44 601 2003 38 2021 44 601 865 42 2025 41 2023 59 777 58 2000 40 601 2005 321 2007 38 2026 44 601 2005 321 2007 38 2027 44 601 2003 38 2028 44 2005 321 2006 60 2005 321 2007 62 307 2029 41 58 2030 40 2026 44 2027 41 44 2002 40 2026 44 2027 41 44 2004 40 2028 41 44 2008 40 2005 321 2031 40 2029 41 41 123 688 40 2008 46 2032 40 41 62 1501 41 123 2011 46 2033 40 2005 321 2034 60 2010 62 40 2005 321 2007 40 41 44 362 44 2005 321 2007 40 41 44 2005 321 2007 40 41 44 2008 46 2032 40 41 41 41 59 125 125 2000 40 601 2005 321 2007 38 2026 44 601 2005 321 2007 38 2027 44 2013 2035 44 601 2003 38 2028 41 58 2030 40 2026 44 2027 41 44 2002 40 2026 44 2027 41 44 2004 40 2028 41 123 688 40 2035 340 1500 41 123 2011 46 2036 40 2005 321 2037 60 2010 62 40 2005 321 2007 40 41 44 362 44 2005 321 2007 40 41 44 2005 321 2007 40 41 44 2035 41 41 59 125 125 809 569 2038 40 601 2005 321 2007 38 2027 44 601 2005 321 2006 60 2013 62 38 2039 44 601 2005 321 2040 60 2005 321 2007 44 2005 321 2009 60 2000 355 38 2041 41 59 809 2005 321 2009 60 2000 62 2042 40 601 2005 321 2007 38 2026 44 601 2043 42 2044 41 59 601 2005 321 2006 60 2005 321 2009 60 2010 355 38 2045 40 41 601 2023 123 792 2011 59 125 601 2003 38 2046 40 41 601 2023 123 792 2004 59 125 865 2047 40 2043 42 2048 41 601 59 125 59 ,"{'AvgLine': 18, 'CountLine': 207, 'CountStmt': 60, 'MaxNesting': 2, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 36, 'MaxEssential': 5, 'SumEssential': 13, 'AvgCyclomatic': 2, 'CountLineCode': 196, 'CountStmtDecl': 32, 'MaxCyclomatic': 5, 'SumCyclomatic': 21, 'AltAvgLineCode': 18, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 196, 'CountLineCodeExe': 43, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 48, 'CountLineInactive': 0, 'CountDeclMethodAll': 41, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 23, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98647,C++,"class VRTDriver final: public GDALDriver
{
    CPL_DISALLOW_COPY_ASSIGN(VRTDriver)

  public:
                 VRTDriver();
    virtual ~VRTDriver();

    char         **papszSourceParsers;

    virtual char      **GetMetadataDomainList() override;
    virtual char      **GetMetadata( const char * pszDomain = """" ) override;
    virtual CPLErr      SetMetadata( char ** papszMetadata,
                                     const char * pszDomain = """" ) override;

    VRTSource   *ParseSource( CPLXMLNode *psSrc, const char *pszVRTPath,
                              std::map<CPLString, GDALDataset*>& oMapSharedSources );
    void         AddSourceParser( const char *pszElementName,
                                  VRTSourceParser pfnParser );
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 777 58 2000 40 41 59 864 126 2000 40 41 59 582 42 42 2004 59 864 582 42 42 2005 40 41 2006 59 864 582 42 42 2007 40 601 582 42 2008 61 362 41 2006 59 864 2009 2010 40 582 42 42 2011 44 601 582 42 2008 61 362 41 2006 59 2012 42 2013 40 2014 42 2015 44 601 582 42 2016 44 2017 321 2018 60 2019 44 2020 42 62 38 2021 41 59 865 2022 40 601 582 42 2023 44 2024 2025 41 59 125 59 ,"{'AvgLine': 13, 'CountLine': 112, 'CountStmt': 39, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 27, 'MaxEssential': 4, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 83, 'CountStmtDecl': 15, 'MaxCyclomatic': 4, 'SumCyclomatic': 12, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 95, 'CountLineCodeExe': 34, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 17, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 20, 'CountLineInactive': 8, 'CountDeclMethodAll': 43, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98792,C++,"        class JPEGRawDataset: public RawDataset
        {
            public:
                JPEGRawDataset(int nXSizeIn, int nYSizeIn)
                {
                    nRasterXSize = nXSizeIn;
                    nRasterYSize = nYSizeIn;
                }
                ~JPEGRawDataset() = default;

                void SetBand(int nBand, GDALRasterBand* poBand)
                {
                    RawDataset::SetBand(nBand, poBand);
                }
        };",0,587 2000 58 777 2001 123 777 58 2000 40 704 2002 44 704 2003 41 123 2004 61 2002 59 2005 61 2003 59 125 126 2000 40 41 61 613 59 865 2006 40 704 2007 44 2008 42 2009 41 123 2001 321 2006 40 2007 44 2009 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 14, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 13, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 195, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99781,C++,"    class SGWriter_Exception_NCInqFailure : public SGWriter_Exception
    {
        std::string msg;

        public:
            const char * get_err_msg() override { return this->msg.c_str(); }
            SGWriter_Exception_NCInqFailure(const char * layer_name, const char * failure_name,
                const char * failure_type);
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 777 58 601 582 42 2005 40 41 2006 123 792 823 354 2004 46 2007 40 41 59 125 2000 40 601 582 42 2008 44 601 582 42 2009 44 601 582 42 2010 41 59 125 59 ,"{'AvgLine': 2, 'CountLine': 13, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 12, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99776,C++,"    class OGR_SGFS_NC_CharA_Transaction : public OGR_SGFS_Transaction
    {
        std::string char_rep;
        size_t counts[2];

        public:
            void commit(netCDFVID& n, size_t write_loc) override { size_t ind[2] = {write_loc, 0}; n.nc_put_vvara_text(OGR_SGFS_Transaction::getVarId(), ind, counts, char_rep.c_str()); }
            unsigned long long count() override { return char_rep.size() + sizeof(*this); } // account for actual character representation, this class
            void appendToLog(VSILFILE* f) override;
            nc_type getType() override { return NC_CHAR; }
            OGR_SGFS_NC_CharA_Transaction(int i_varId, const char* pszVal) :
               char_rep(pszVal),
               counts{1, char_rep.length()}
            {
                OGR_SGFS_Transaction::setVarId(i_varId);
            }
    };",0,587 2000 58 777 2001 123 2002 321 2003 2004 59 2005 2006 91 1502 93 59 777 58 865 2007 40 2008 38 2009 44 2005 2010 41 2011 123 2005 2012 91 1502 93 61 123 2010 44 1500 125 59 2009 46 2013 40 2001 321 2014 40 41 44 2012 44 2006 44 2004 46 2015 40 41 41 59 125 856 726 726 2016 40 41 2011 123 792 2004 46 2017 40 41 43 805 40 42 823 41 59 125 330 865 2018 40 2019 42 2020 41 2011 59 2021 2022 40 41 2011 123 792 2023 59 125 2000 40 704 2024 44 601 582 42 2025 41 58 2004 40 2025 41 44 2006 123 1501 44 2004 46 2026 40 41 125 123 2001 321 2027 40 2024 41 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 30, 'CountStmt': 21, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 4, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 28, 'CountLineCodeExe': 12, 'CountLineComment': 6, 'AltAvgLineComment': 1, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.21', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99818,C++,"class FetchBufferVirtualMemIO final
{
    const GByte* pabySrcData;
    size_t       nMappingSize;
    GByte       *pTempBuffer;

public:
            FetchBufferVirtualMemIO( const GByte* pabySrcDataIn,
                                     size_t nMappingSizeIn,
                                     GByte* pTempBufferIn ) :
                pabySrcData(pabySrcDataIn),
                nMappingSize(nMappingSizeIn),
                pTempBuffer(pTempBufferIn) {}

    const GByte* FetchBytes( vsi_l_offset nOffset,
                             int nPixels, int nDTSize,
                             bool bIsByteSwapped, bool bIsComplex,
                             int nBlockId )
    {
        if( nOffset + nPixels * nDTSize > nMappingSize )
        {
            CPLError(CE_Failure, CPLE_FileIO,
                     ""Missing data for block %d"", nBlockId);
            return nullptr;
        }
        if( !bIsByteSwapped )
            return pabySrcData + nOffset;
        memcpy(pTempBuffer, pabySrcData + nOffset, nPixels * nDTSize);
        if( bIsComplex )
            GDALSwapWords( pTempBuffer, nDTSize / 2, 2 * nPixels, nDTSize / 2);
        else
            GDALSwapWords( pTempBuffer, nDTSize, nPixels, nDTSize);
        return pTempBuffer;
    }

    bool FetchBytes( GByte* pabyDstBuffer,
                     vsi_l_offset nOffset,
                     int nPixels, int nDTSize,
                     bool bIsByteSwapped, bool bIsComplex,
                     int nBlockId )
    {
        if( nOffset + nPixels * nDTSize > nMappingSize )
        {
            CPLError(CE_Failure, CPLE_FileIO,
                     ""Missing data for block %d"", nBlockId);
            return false;
        }
        memcpy(pabyDstBuffer, pabySrcData + nOffset, nPixels * nDTSize);
        if( bIsByteSwapped )
        {
            if( bIsComplex )
                GDALSwapWords( pabyDstBuffer, nDTSize / 2, 2 * nPixels,
                               nDTSize / 2);
            else
                GDALSwapWords( pabyDstBuffer, nDTSize, nPixels, nDTSize);
        }
        return true;
    }

    static const EMULATED_BOOL bMinimizeIO = false;
};",0,587 2000 2001 123 601 2002 42 2003 59 2004 2005 59 2002 42 2006 59 777 58 2000 40 601 2002 42 2007 44 2004 2008 44 2002 42 2009 41 58 2003 40 2007 41 44 2005 40 2008 41 44 2006 40 2009 41 123 125 601 2002 42 2010 40 2011 2012 44 704 2013 44 704 2014 44 569 2015 44 569 2016 44 704 2017 41 123 688 40 2012 43 2013 42 2014 62 2005 41 123 2018 40 2019 44 2020 44 362 44 2017 41 59 792 753 59 125 688 40 33 2015 41 792 2003 43 2012 59 2021 40 2006 44 2003 43 2012 44 2013 42 2014 41 59 688 40 2016 41 2022 40 2006 44 2014 47 1502 44 1502 42 2013 44 2014 47 1502 41 59 630 2022 40 2006 44 2014 44 2013 44 2014 41 59 792 2006 59 125 569 2010 40 2002 42 2023 44 2011 2012 44 704 2013 44 704 2014 44 569 2015 44 569 2016 44 704 2017 41 123 688 40 2012 43 2013 42 2014 62 2005 41 123 2024 40 2025 44 2026 44 362 44 2017 41 59 792 655 59 125 2027 40 2023 44 2003 43 2012 44 2013 42 2014 41 59 688 40 2015 41 123 688 40 2016 41 2028 40 2023 44 2014 47 1502 44 1502 42 2013 44 2014 47 1502 41 59 630 2028 40 2023 44 2014 44 2013 44 2014 41 59 125 792 829 59 125 809 601 2029 2030 61 655 59 125 59 ,"{'AvgLine': 16, 'CountLine': 61, 'CountStmt': 29, 'MaxNesting': 2, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 19, 'MaxEssential': 3, 'SumEssential': 5, 'AvgCyclomatic': 3, 'CountLineCode': 57, 'CountStmtDecl': 10, 'MaxCyclomatic': 4, 'SumCyclomatic': 9, 'AltAvgLineCode': 16, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 57, 'CountLineCodeExe': 27, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
98751,C++,"class OGROSMResultLayerDecorator final: public OGRLayerDecorator
{
        CPLString               osDSName;
        CPLString               osInterestLayers;

    public:
        OGROSMResultLayerDecorator(OGRLayer* poLayer,
                                   CPLString osDSNameIn,
                                   CPLString osInterestLayersIn) :
                                        OGRLayerDecorator(poLayer, TRUE),
                                        osDSName(osDSNameIn),
                                        osInterestLayers(osInterestLayersIn) {}

        virtual GIntBig     GetFeatureCount( int bForce = TRUE ) override
        {
            /* When we run GetFeatureCount() with SQLite SQL dialect, */
            /* the OSM dataset will be re-opened. Make sure that it is */
            /* re-opened with the same interest layers */
            AddInterestLayersForDSName(osDSName, osInterestLayers);
            return OGRLayerDecorator::GetFeatureCount(bForce);
        }
};",0,587 2000 2001 58 777 2002 123 2003 2004 59 2003 2005 59 777 58 2000 40 2006 42 2007 44 2003 2008 44 2003 2009 41 58 2002 40 2007 44 2010 41 44 2004 40 2008 41 44 2005 40 2009 41 123 125 864 2011 2012 40 704 2013 61 2010 41 2014 123 305 305 305 2015 40 2004 44 2005 41 59 792 2002 321 2012 40 2013 41 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 22, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 5, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 17, 'CountLineCodeExe': 4, 'CountLineComment': 3, 'AltAvgLineComment': 1, 'AltCountLineBlank': 2, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 129, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.18', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99032,C++,"class TypedVector : public Sized {
 public:
  TypedVector(const uint8_t *data, uint8_t byte_width, Type element_type)
      : Sized(data, byte_width), type_(element_type) {}

  Reference operator[](size_t i) const;

  static TypedVector EmptyTypedVector() {
    static const uint8_t empty_typed_vector[] = { 0 /*len*/ };
    return TypedVector(empty_typed_vector + 1, 1, FBT_INT);
  }
  bool IsTheEmptyVector() const {
    return data_ == TypedVector::EmptyTypedVector().data_;
  }

  Type ElementType() { return type_; }

  friend Reference;

 private:
  Type type_;

  friend Map;
};",0,587 2000 58 777 2001 123 777 58 2000 40 601 2002 42 2003 44 2002 2004 44 2005 2006 41 58 2001 40 2003 44 2004 41 44 2007 40 2006 41 123 125 2008 758 91 93 40 2009 2010 41 601 59 809 2000 2011 40 41 123 809 601 2002 2012 91 93 61 123 1500 305 125 59 792 2000 40 2012 43 1501 44 1501 44 2013 41 59 125 569 2014 40 41 601 123 792 2015 323 2000 321 2011 40 41 46 2015 59 125 2005 2016 40 41 123 792 2007 59 125 667 2008 59 773 58 2005 2007 59 667 2017 59 125 59 ,"{'AvgLine': 3, 'CountLine': 30, 'CountStmt': 18, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 24, 'CountLineCodeExe': 9, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 77, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 62, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99034,C++,"class OGRRECDataSource final: public OGRDataSource
{
    char                *pszName;

    OGRRECLayer        *poLayer;

  public:
                        OGRRECDataSource();
                        ~OGRRECDataSource();

    int                 Open( const char * pszFilename );

    const char          *GetName() override { return pszName; }
    int                 GetLayerCount() override { return 1; }
    OGRLayer            *GetLayer( int ) override;
    int                 TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 582 42 2003 59 2004 42 2005 59 777 58 2000 40 41 59 126 2000 40 41 59 704 2006 40 601 582 42 2007 41 59 601 582 42 2008 40 41 2009 123 792 2003 59 125 704 2010 40 41 2009 123 792 1501 59 125 2011 42 2012 40 704 41 2009 59 704 2013 40 601 582 42 41 2009 59 125 59 ,"{'AvgLine': 10, 'CountLine': 86, 'CountStmt': 34, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 23, 'MaxEssential': 5, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 57, 'CountStmtDecl': 14, 'MaxCyclomatic': 5, 'SumCyclomatic': 12, 'AltAvgLineCode': 6, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 57, 'CountLineCodeExe': 25, 'CountLineComment': 13, 'AltAvgLineComment': 1, 'AltCountLineBlank': 16, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 152, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.23', 'AltCountLineComment': 13, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 61, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
98673,C++,"class OGRGeomediaSelectLayer final: public OGRGeomediaLayer
{
    char                *pszBaseStatement;

    void                ClearStatement();
    OGRErr              ResetStatement();

    virtual CPLODBCStatement *GetStatement() override;

  public:
                        OGRGeomediaSelectLayer( OGRGeomediaDataSource *,
                                                CPLODBCStatement * );
                        virtual ~OGRGeomediaSelectLayer();

    virtual void        ResetReading() override;
    virtual GIntBig     GetFeatureCount( int ) override;

    virtual OGRFeature *GetFeature( GIntBig nFeatureId ) override;

    virtual int         TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 582 42 2003 59 865 2004 40 41 59 2005 2006 40 41 59 864 2007 42 2008 40 41 2009 59 777 58 2000 40 2010 42 44 2007 42 41 59 864 126 2000 40 41 59 864 865 2011 40 41 2009 59 864 2012 2013 40 704 41 2009 59 864 2014 42 2015 40 2012 2016 41 2009 59 864 704 2017 40 601 582 42 41 2009 59 125 59 ,"{'AvgLine': 8, 'CountLine': 101, 'CountStmt': 37, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 27, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 79, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 13, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 22, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 9, 'AltCountLineCode': 79, 'CountLineCodeExe': 28, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 22, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 104, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 72, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98923,C++,"class OGRWalkSelectLayer final: public OGRWalkLayer
{
    char                *pszBaseStatement;

    void                ClearStatement();
    OGRErr              ResetStatement();

    virtual CPLODBCStatement *  GetStatement() override;

  public:
                        OGRWalkSelectLayer( OGRWalkDataSource *,
                                           CPLODBCStatement * );
                        virtual ~OGRWalkSelectLayer();

    virtual void        ResetReading() override;
    virtual OGRErr      GetExtent(OGREnvelope *psExtent, int bForce = TRUE) override;
    virtual OGRErr      GetExtent(int iGeomField, OGREnvelope *psExtent, int bForce) override
                { return OGRLayer::GetExtent(iGeomField, psExtent, bForce); }
};",0,587 2000 2001 58 777 2002 123 582 42 2003 59 865 2004 40 41 59 2005 2006 40 41 59 864 2007 42 2008 40 41 2009 59 777 58 2000 40 2010 42 44 2007 42 41 59 864 126 2000 40 41 59 864 865 2011 40 41 2009 59 864 2005 2012 40 2013 42 2014 44 704 2015 61 2016 41 2009 59 864 2005 2012 40 704 2017 44 2013 42 2014 44 704 2015 41 2009 123 792 2018 321 2012 40 2017 44 2014 44 2015 41 59 125 125 59 ,"{'AvgLine': 8, 'CountLine': 86, 'CountStmt': 35, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 26, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 69, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 12, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 17, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 69, 'CountLineCodeExe': 23, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 17, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 102, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99026,C++,"class FixedTypedVector : public Object {
 public:
  FixedTypedVector(const uint8_t *data, uint8_t byte_width, Type element_type,
                   uint8_t len)
      : Object(data, byte_width), type_(element_type), len_(len) {}

  Reference operator[](size_t i) const;

  static FixedTypedVector EmptyFixedTypedVector() {
    static const uint8_t fixed_empty_vector[] = { 0 /* unused */ };
    return FixedTypedVector(fixed_empty_vector, 1, FBT_INT, 0);
  }
  bool IsTheEmptyFixedTypedVector() const {
    return data_ == FixedTypedVector::EmptyFixedTypedVector().data_;
  }

  Type ElementType() { return type_; }
  uint8_t size() { return len_; }

 private:
  Type type_;
  uint8_t len_;
};",0,587 2000 58 777 2001 123 777 58 2000 40 601 2002 42 2003 44 2002 2004 44 2005 2006 44 2002 2007 41 58 2001 40 2003 44 2004 41 44 2008 40 2006 41 44 2009 40 2007 41 123 125 2010 758 91 93 40 2011 2012 41 601 59 809 2000 2013 40 41 123 809 601 2002 2014 91 93 61 123 1500 305 125 59 792 2000 40 2014 44 1501 44 2015 44 1500 41 59 125 569 2016 40 41 601 123 792 2017 323 2000 321 2013 40 41 46 2017 59 125 2005 2018 40 41 123 792 2008 59 125 2002 2019 40 41 123 792 2009 59 125 773 58 2005 2008 59 2002 2009 59 125 59 ,"{'AvgLine': 2, 'CountLine': 28, 'CountStmt': 19, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 24, 'CountLineCodeExe': 9, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99027,C++,"class Map : public Vector {
 public:
  Map(const uint8_t *data, uint8_t byte_width) : Vector(data, byte_width) {}

  Reference operator[](const char *key) const;
  Reference operator[](const std::string &key) const;

  Vector Values() const { return Vector(data_, byte_width_); }

  TypedVector Keys() const {
    const size_t num_prefixed_fields = 3;
    auto keys_offset = data_ - byte_width_ * num_prefixed_fields;
    return TypedVector(Indirect(keys_offset, byte_width_),
                       static_cast<uint8_t>(
                           ReadUInt64(keys_offset + byte_width_, byte_width_)),
                       FBT_KEY);
  }

  static Map EmptyMap() {
    static const uint8_t empty_map[] = {
      0 /*keys_len*/, 0 /*keys_offset*/, 1 /*keys_width*/, 0 /*len*/
    };
    return Map(empty_map + 4, 1);
  }

  bool IsTheEmptyMap() const { return data_ == EmptyMap().data_; }
};",0,587 2000 58 777 2001 123 777 58 2000 40 601 2002 42 2003 44 2002 2004 41 58 2001 40 2003 44 2004 41 123 125 2005 758 91 93 40 601 582 42 2006 41 601 59 2005 758 91 93 40 601 2007 321 2008 38 2006 41 601 59 2001 2009 40 41 601 123 792 2001 40 2010 44 2011 41 59 125 2012 2013 40 41 601 123 601 2014 2015 61 1502 59 561 2016 61 2017 45 2018 42 2015 59 792 2012 40 2019 40 2016 44 2018 41 44 811 60 2002 62 40 2020 40 2016 43 2018 44 2018 41 41 44 2021 41 59 125 809 2000 2022 40 41 123 809 601 2002 2023 91 93 61 123 1500 305 44 1500 305 44 1501 305 44 1500 305 125 59 792 2000 40 2023 43 1502 44 1501 41 59 125 569 2024 40 41 601 123 792 2025 323 2022 40 41 46 2025 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 46, 'CountStmt': 35, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 39, 'CountStmtDecl': 14, 'MaxCyclomatic': 6, 'SumCyclomatic': 12, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 39, 'CountLineCodeExe': 25, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 14, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99148,C++,"class SliceAllocator : public Allocator {
 public:
  SliceAllocator() : slice_(grpc_empty_slice()) {}

  SliceAllocator(const SliceAllocator &other) = delete;
  SliceAllocator &operator=(const SliceAllocator &other) = delete;

  SliceAllocator(SliceAllocator &&other) : slice_(grpc_empty_slice()) {
    // default-construct and swap idiom
    swap(other);
  }

  SliceAllocator &operator=(SliceAllocator &&other) {
    // move-construct and swap idiom
    SliceAllocator temp(std::move(other));
    swap(temp);
    return *this;
  }

  void swap(SliceAllocator &other) {
    using std::swap;
    swap(slice_, other.slice_);
  }

  virtual ~SliceAllocator() { grpc_slice_unref(slice_); }

  virtual uint8_t *allocate(size_t size) override {
    FLATBUFFERS_ASSERT(GRPC_SLICE_IS_EMPTY(slice_));
    slice_ = grpc_slice_malloc(size);
    return GRPC_SLICE_START_PTR(slice_);
  }

  virtual void deallocate(uint8_t *p, size_t size) override {
    FLATBUFFERS_ASSERT(p == GRPC_SLICE_START_PTR(slice_));
    FLATBUFFERS_ASSERT(size == GRPC_SLICE_LENGTH(slice_));
    grpc_slice_unref(slice_);
    slice_ = grpc_empty_slice();
  }

  virtual uint8_t *reallocate_downward(uint8_t *old_p, size_t old_size,
                                       size_t new_size, size_t in_use_back,
                                       size_t in_use_front) override {
    FLATBUFFERS_ASSERT(old_p == GRPC_SLICE_START_PTR(slice_));
    FLATBUFFERS_ASSERT(old_size == GRPC_SLICE_LENGTH(slice_));
    FLATBUFFERS_ASSERT(new_size > old_size);
    grpc_slice old_slice = slice_;
    grpc_slice new_slice = grpc_slice_malloc(new_size);
    uint8_t *new_p = GRPC_SLICE_START_PTR(new_slice);
    memcpy_downward(old_p, old_size, new_p, new_size, in_use_back,
                    in_use_front);
    slice_ = new_slice;
    grpc_slice_unref(old_slice);
    return new_p;
  }

 private:
  grpc_slice &get_slice(uint8_t *p, size_t size) {
    FLATBUFFERS_ASSERT(p == GRPC_SLICE_START_PTR(slice_));
    FLATBUFFERS_ASSERT(size == GRPC_SLICE_LENGTH(slice_));
    return slice_;
  }

  grpc_slice slice_;

  friend class MessageBuilder;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 58 2002 40 2003 40 41 41 123 125 2000 40 601 2000 38 2004 41 61 619 59 2000 38 758 61 40 601 2000 38 2004 41 61 619 59 2000 40 2000 307 2004 41 58 2002 40 2003 40 41 41 123 330 2005 40 2004 41 59 125 2000 38 758 61 40 2000 307 2004 41 123 330 2000 2006 40 2007 321 2008 40 2004 41 41 59 2009 40 2006 41 59 792 42 823 59 125 865 2010 40 2000 38 2004 41 123 860 2011 321 2010 59 2010 40 2002 44 2004 46 2002 41 59 125 864 126 2000 40 41 123 2012 40 2002 41 59 125 864 2013 42 2014 40 2015 2016 41 2017 123 2018 40 2019 40 2002 41 41 59 2002 61 2020 40 2016 41 59 792 2021 40 2002 41 59 125 864 865 2022 40 2013 42 2023 44 2015 2016 41 2017 123 2024 40 2023 323 2025 40 2002 41 41 59 2024 40 2016 323 2026 40 2002 41 41 59 2027 40 2002 41 59 2002 61 2003 40 41 59 125 864 2013 42 2028 40 2013 42 2029 44 2015 2030 44 2015 2031 44 2015 2032 44 2015 2033 41 2017 123 2034 40 2029 323 2035 40 2002 41 41 59 2034 40 2030 323 2036 40 2002 41 41 59 2034 40 2031 62 2030 41 59 2037 2038 61 2002 59 2037 2039 61 2040 40 2031 41 59 2013 42 2041 61 2035 40 2039 41 59 2042 40 2029 44 2030 44 2041 44 2031 44 2032 44 2033 41 59 2002 61 2039 59 2043 40 2038 41 59 792 2041 59 125 773 58 2044 38 2045 40 2013 42 2023 44 2015 2016 41 123 2046 40 2023 323 2047 40 2002 41 41 59 2046 40 2016 323 2048 40 2002 41 41 59 792 2002 59 125 2044 2002 59 667 587 2049 59 125 59 ,"{'AvgLine': 5, 'CountLine': 66, 'CountStmt': 46, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 53, 'CountStmtDecl': 39, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 53, 'CountLineCodeExe': 7, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 12, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99272,C++,"class OGRIDBSelectLayer final: public OGRIDBLayer
{
    char                *pszBaseQuery;

    void                ClearQuery();
    OGRErr              ResetQuery();

    virtual ITCursor *  GetQuery() override;

  public:
                        OGRIDBSelectLayer( OGRIDBDataSource *,
                                           ITCursor * );
                        virtual ~OGRIDBSelectLayer();

    virtual void        ResetReading() override;
    virtual GIntBig     GetFeatureCount( int ) override;

    virtual OGRFeature *GetFeature( GIntBig nFeatureId ) override;

    virtual OGRErr      GetExtent(OGREnvelope *psExtent, int bForce = TRUE) override;
    virtual OGRErr      GetExtent(int iGeomField, OGREnvelope *psExtent, int bForce) override
                { return OGRLayer::GetExtent(iGeomField, psExtent, bForce); }

    virtual int         TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 582 42 2003 59 865 2004 40 41 59 2005 2006 40 41 59 864 2007 42 2008 40 41 2009 59 777 58 2000 40 2010 42 44 2007 42 41 59 864 126 2000 40 41 59 864 865 2011 40 41 2009 59 864 2012 2013 40 704 41 2009 59 864 2014 42 2015 40 2012 2016 41 2009 59 864 2005 2017 40 2018 42 2019 44 704 2020 61 2021 41 2009 59 864 2005 2017 40 704 2022 44 2018 42 2019 44 704 2020 41 2009 123 792 2023 321 2017 40 2022 44 2019 44 2020 41 59 125 864 704 2024 40 601 582 42 41 2009 59 125 59 ,"{'AvgLine': 7, 'CountLine': 110, 'CountStmt': 32, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 85, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 15, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 25, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 11, 'AltCountLineCode': 85, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 25, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 106, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99367,C++,"class OGRMongoDBv3SingleFeatureLayer final: public OGRLayer
{
    OGRFeatureDefn     *m_poFeatureDefn;
    CPLString           osVal;
    int                 iNextShapeId;
    public:
       explicit OGRMongoDBv3SingleFeatureLayer( const char *pszVal );
       ~OGRMongoDBv3SingleFeatureLayer() { m_poFeatureDefn->Release(); }
       void             ResetReading() override { iNextShapeId = 0; }
       OGRFeature      *GetNextFeature() override;
       OGRFeatureDefn  *GetLayerDefn() override { return m_poFeatureDefn; }
       int              TestCapability( const char * ) override { return FALSE; }
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2005 2006 59 704 2007 59 777 58 648 2000 40 601 582 42 2008 41 59 126 2000 40 41 123 2004 354 2009 40 41 59 125 865 2010 40 41 2011 123 2007 61 1500 59 125 2012 42 2013 40 41 2011 59 2003 42 2014 40 41 2011 123 792 2004 59 125 704 2015 40 601 582 42 41 2011 123 792 2016 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 33, 'CountStmt': 23, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 11, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 31, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 88, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99538,C++,"class CPL_DLL OGRLayerAttrIndex
{
protected:
    OGRLayer    *poLayer;
    char        *pszIndexPath;

                OGRLayerAttrIndex();
    CPL_DISALLOW_COPY_ASSIGN(OGRLayerAttrIndex)

public:
    virtual     ~OGRLayerAttrIndex();

    virtual OGRErr Initialize( const char *pszIndexPath, OGRLayer * ) = 0;

    virtual OGRErr CreateIndex( int iField ) = 0;
    virtual OGRErr DropIndex( int iField ) = 0;
    virtual OGRErr IndexAllFeatures( int iField = -1 ) = 0;

    virtual OGRErr AddToIndex( OGRFeature *poFeature, int iField = -1 ) = 0;
    virtual OGRErr RemoveFromIndex( OGRFeature *poFeature ) = 0;

    virtual OGRAttrIndex *GetFieldIndex( int iField ) = 0;
};",0,587 2000 2001 123 775 58 2002 42 2003 59 582 42 2004 59 2001 40 41 59 2005 40 2001 41 777 58 864 126 2001 40 41 59 864 2006 2007 40 601 582 42 2004 44 2002 42 41 61 1500 59 864 2006 2008 40 704 2009 41 61 1500 59 864 2006 2010 40 704 2009 41 61 1500 59 864 2006 2011 40 704 2009 61 45 1501 41 61 1500 59 864 2006 2012 40 2013 42 2014 44 704 2009 61 45 1501 41 61 1500 59 864 2006 2015 40 2013 42 2014 41 61 1500 59 864 2016 42 2017 40 704 2009 41 61 1500 59 125 59 ,"{'AvgLine': 5, 'CountLine': 33, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 26, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 3, 'CountClassDerived': 1, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 86, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 3, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
99649,C++,"class OGRDODSDriver final: public OGRSFDriver
{
  public:
                ~OGRDODSDriver();
    const char *GetName() override;
    OGRDataSource *Open( const char *, int ) override;
    int                 TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 126 2000 40 41 59 601 582 42 2003 40 41 2004 59 2005 42 2006 40 601 582 42 44 704 41 2004 59 704 2007 40 601 582 42 41 2004 59 125 59 ,"{'AvgLine': 8, 'CountLine': 42, 'CountStmt': 15, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 4, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 5, 'MaxCyclomatic': 4, 'SumCyclomatic': 7, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 1, 'CountDeclMethod': 4, 'AltCountLineCode': 35, 'CountLineCodeExe': 9, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 44, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99695,C++,"class CPL_DLL DDFRecordIndex
{
    bool        bSorted;

    int         nRecordCount;
    int         nRecordMax;

    int         nLastObjlPos;  // Added for FindRecordByObjl().
    int         nLastObjl;     // Added for FindRecordByObjl().

    DDFIndexedRecord *pasRecords;

    void        Sort();

public:
                DDFRecordIndex();
               ~DDFRecordIndex();

    void        AddRecord( int nKey, DDFRecord * );
    bool        RemoveRecord( int nKey );

    DDFRecord  *FindRecord( int nKey );

    DDFRecord  *FindRecordByObjl( int nObjl );  // Added for FindRecordByObjl().

    void        Clear();

    int         GetCount() { return nRecordCount; }

    DDFRecord  *GetByIndex( int i );
    void        *GetClientInfoByIndex( int i );
    void        SetClientInfoByIndex( int i, void *pClientInfo );
};",0,587 2000 2001 123 569 2002 59 704 2003 59 704 2004 59 704 2005 59 330 704 2006 59 330 2007 42 2008 59 865 2009 40 41 59 777 58 2001 40 41 59 126 2001 40 41 59 865 2010 40 704 2011 44 2012 42 41 59 569 2013 40 704 2011 41 59 2012 42 2014 40 704 2011 41 59 2012 42 2015 40 704 2016 41 59 330 865 2017 40 41 59 704 2018 40 41 123 792 2003 59 125 2012 42 2019 40 704 2020 41 59 865 42 2021 40 704 2020 41 59 865 2022 40 704 2020 44 865 42 2023 41 59 125 59 ,"{'AvgLine': 16, 'CountLine': 228, 'CountStmt': 103, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 74, 'MaxEssential': 4, 'SumEssential': 20, 'AvgCyclomatic': 2, 'CountLineCode': 153, 'CountStmtDecl': 31, 'MaxCyclomatic': 6, 'SumCyclomatic': 33, 'AltAvgLineCode': 11, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 52, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 12, 'AltCountLineCode': 153, 'CountLineCodeExe': 104, 'CountLineComment': 26, 'AltAvgLineComment': 1, 'AltCountLineBlank': 52, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 20, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.17', 'AltCountLineComment': 26, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 36, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 52, 'SumCyclomaticModified': 33, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 6, 'CountDeclInstanceVariableProtected': 0}"
99729,C++,"class OCAD_EXTERN CADMText : public CADText
{
public:
    CADMText();
    virtual ~CADMText(){}

    double getRectWidth() const;
    void   setRectWidth( double value );

    double getExtents() const;
    void   setExtents( double value );

    double getExtentsWidth() const;
    void   setExtentsWidth( double value );

    virtual void print() const override;
protected:
    double rectWidth;
    double extents;
    double extentsWidth;
    // TODO: do we need this here?
    //short dDrawingDir;
    //short dLineSpacingStyle;
    //short dLineSpacingFactor;
    //long dBackgroundFlags; // R2004+
    //long dBackgroundScaleFactor;
    //short dBackgroundColor;
    //long dBackgroundTransparency;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 625 2003 40 41 601 59 865 2004 40 625 2005 41 59 625 2006 40 41 601 59 865 2007 40 625 2005 41 59 625 2008 40 41 601 59 865 2009 40 625 2005 41 59 864 865 2010 40 41 601 2011 59 775 58 625 2012 59 625 2013 59 625 2014 59 330 330 330 330 330 330 330 330 125 59 ,"{'AvgLine': 4, 'CountLine': 68, 'CountStmt': 23, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 56, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 9, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 56, 'CountLineCodeExe': 15, 'CountLineComment': 8, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 44, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 72, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 3}"
99610,C++,"class CPL_DLL OGRDefaultGeometryVisitor: public IOGRGeometryVisitor
{
        void _visit(OGRSimpleCurve* poGeom);

    public:

        void visit(OGRPoint*) override {}
        void visit(OGRLineString*) override;
        void visit(OGRLinearRing*) override;
        void visit(OGRPolygon*) override;
        void visit(OGRMultiPoint*) override;
        void visit(OGRMultiLineString*) override;
        void visit(OGRMultiPolygon*) override;
        void visit(OGRGeometryCollection*) override;
        void visit(OGRCircularString*) override;
        void visit(OGRCompoundCurve*) override;
        void visit(OGRCurvePolygon*) override;
        void visit(OGRMultiCurve*) override;
        void visit(OGRMultiSurface*) override;
        void visit(OGRTriangle*) override;
        void visit(OGRPolyhedralSurface*) override;
        void visit(OGRTriangulatedSurface*) override;
};",0,587 2000 2001 58 777 2002 123 865 2003 40 2004 42 2005 41 59 777 58 865 2006 40 2007 42 41 2008 123 125 865 2006 40 2009 42 41 2008 59 865 2006 40 2010 42 41 2008 59 865 2006 40 2011 42 41 2008 59 865 2006 40 2012 42 41 2008 59 865 2006 40 2013 42 41 2008 59 865 2006 40 2014 42 41 2008 59 865 2006 40 2015 42 41 2008 59 865 2006 40 2016 42 41 2008 59 865 2006 40 2017 42 41 2008 59 865 2006 40 2018 42 41 2008 59 865 2006 40 2019 42 41 2008 59 865 2006 40 2020 42 41 2008 59 865 2006 40 2021 42 41 2008 59 865 2006 40 2022 42 41 2008 59 865 2006 40 2023 42 41 2008 59 125 59 ,"{'AvgLine': 4, 'CountLine': 94, 'CountStmt': 49, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 92, 'CountStmtDecl': 37, 'MaxCyclomatic': 2, 'SumCyclomatic': 22, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 17, 'AltCountLineCode': 92, 'CountLineCodeExe': 21, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 18, 'CountClassDerived': 1, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 34, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 16, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 22, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 22, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99415,C++,"class TABMAPObjFontPoint: public TABMAPObjPoint
{
  public:
    GByte       m_nPointSize;
    GInt16      m_nFontStyle;
    GByte       m_nR;
    GByte       m_nG;
    GByte       m_nB;
    GInt16      m_nAngle;  /* In tenths of degree */
    GByte       m_nFontId;

    TABMAPObjFontPoint():
        m_nPointSize(0),
        m_nFontStyle(0),
        m_nR(0),
        m_nG(0),
        m_nB(0),
        m_nAngle(0),
        m_nFontId(0)
        {}
    virtual ~TABMAPObjFontPoint() {}

    virtual int WriteObj(TABMAPObjectBlock *) override;

//  protected:
    virtual int ReadObj(TABMAPObjectBlock *) override;
};",0,587 2000 58 777 2001 123 777 58 2002 2003 59 2004 2005 59 2002 2006 59 2002 2007 59 2002 2008 59 2004 2009 59 305 2002 2010 59 2000 40 41 58 2003 40 1500 41 44 2005 40 1500 41 44 2006 40 1500 41 44 2007 40 1500 41 44 2008 40 1500 41 44 2009 40 1500 41 44 2010 40 1500 41 123 125 864 126 2000 40 41 123 125 864 704 2011 40 2012 42 41 2013 59 330 864 704 2014 40 2012 42 41 2013 59 125 59 ,"{'AvgLine': 16, 'CountLine': 82, 'CountStmt': 50, 'MaxNesting': 1, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 32, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 61, 'CountStmtDecl': 18, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 12, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 19, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 4, 'AltCountLineCode': 61, 'CountLineCodeExe': 39, 'CountLineComment': 12, 'AltAvgLineComment': 2, 'AltCountLineBlank': 19, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 12, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 7, 'CountDeclInstanceVariablePublic': 7, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98634,C++,"class S57ClassContentExplorer
{
    S57ClassRegistrar* poRegistrar;

    char     ***papapszClassesFields;

    int         iCurrentClass;

    char      **papszCurrentFields;

    char      **papszTempResult;

    public:
    explicit    S57ClassContentExplorer(S57ClassRegistrar* poRegistrar);
       ~S57ClassContentExplorer();

    bool        SelectClassByIndex( int );
    bool        SelectClass( int );
    bool        SelectClass( const char * );

    bool        Rewind() { return SelectClassByIndex(0); }
    bool        NextClass() { return SelectClassByIndex(iCurrentClass+1); }

    int         GetOBJL();
    const char *GetDescription() const;
    const char *GetAcronym() const;

    char      **GetAttributeList( const char * = nullptr );

    char        GetClassCode() const;
    char      **GetPrimitives();
};",0,587 2000 123 2001 42 2002 59 582 42 42 42 2003 59 704 2004 59 582 42 42 2005 59 582 42 42 2006 59 777 58 648 2000 40 2001 42 2002 41 59 126 2000 40 41 59 569 2007 40 704 41 59 569 2008 40 704 41 59 569 2008 40 601 582 42 41 59 569 2009 40 41 123 792 2007 40 1500 41 59 125 569 2010 40 41 123 792 2007 40 2004 43 1501 41 59 125 704 2011 40 41 59 601 582 42 2012 40 41 601 59 601 582 42 2013 40 41 601 59 582 42 42 2014 40 601 582 42 61 753 41 59 582 2015 40 41 601 59 582 42 42 2016 40 41 59 125 59 ,"{'AvgLine': 12, 'CountLine': 193, 'CountStmt': 86, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 67, 'MaxEssential': 6, 'SumEssential': 23, 'AvgCyclomatic': 2, 'CountLineCode': 146, 'CountStmtDecl': 29, 'MaxCyclomatic': 6, 'SumCyclomatic': 33, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 41, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 13, 'AltCountLineCode': 146, 'CountLineCodeExe': 83, 'CountLineComment': 6, 'AltAvgLineComment': 0, 'AltCountLineBlank': 41, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 12, 'SumCyclomaticStrict': 52, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 55, 'SumCyclomaticModified': 33, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
99829,C++,"class CompositeCT : public OGRCoordinateTransformation
{
    CompositeCT(const CompositeCT& other):
        poCT1(other.poCT1 ? other.poCT1->Clone(): nullptr),
        bOwnCT1(true),
        poCT2(other.poCT2 ? other.poCT2->Clone(): nullptr),
        bOwnCT2(true) {}

    CompositeCT& operator= (const CompositeCT&) = delete;

public:

    OGRCoordinateTransformation* poCT1;
    bool bOwnCT1;
    OGRCoordinateTransformation* poCT2;
    bool bOwnCT2;

    CompositeCT( OGRCoordinateTransformation* poCT1In, bool bOwnCT1In,
                 OGRCoordinateTransformation* poCT2In, bool bOwnCT2In ) :
        poCT1(poCT1In),
        bOwnCT1(bOwnCT1In),
        poCT2(poCT2In),
        bOwnCT2(bOwnCT2In)
    {}

    virtual ~CompositeCT()
    {
        if( bOwnCT1 )
            delete poCT1;
        if( bOwnCT2 )
            delete poCT2;
    }

    OGRCoordinateTransformation* Clone() const override {
        return new CompositeCT(*this);
    }

    virtual OGRSpatialReference *GetSourceCS() override
    {
        return poCT1 ? poCT1->GetSourceCS() :
               poCT2 ? poCT2->GetSourceCS() : nullptr;
    }

    virtual OGRSpatialReference *GetTargetCS() override
    {
        return poCT2 ? poCT2->GetTargetCS() :
               poCT1 ? poCT1->GetTargetCS() : nullptr;
    }

    virtual int Transform( int nCount,
                           double *x, double *y, double *z,
                           double *t,
                           int *pabSuccess ) override
    {
        int nResult = TRUE;
        if( poCT1 )
            nResult = poCT1->Transform(nCount, x, y, z, t, pabSuccess);
        if( nResult && poCT2 )
            nResult = poCT2->Transform(nCount, x, y, z, t, pabSuccess);
        return nResult;
    }

    virtual OGRCoordinateTransformation* GetInverse() const override { return nullptr; }
};",0,587 2000 58 777 2001 123 2000 40 601 2000 38 2002 41 58 2003 40 2002 46 2003 63 2002 46 2003 354 2004 40 41 58 753 41 44 2005 40 829 41 44 2006 40 2002 46 2006 63 2002 46 2006 354 2004 40 41 58 753 41 44 2007 40 829 41 123 125 2000 38 758 61 40 601 2000 38 41 61 619 59 777 58 2001 42 2003 59 569 2005 59 2001 42 2006 59 569 2007 59 2000 40 2001 42 2008 44 569 2009 44 2001 42 2010 44 569 2011 41 58 2003 40 2008 41 44 2005 40 2009 41 44 2006 40 2010 41 44 2007 40 2011 41 123 125 864 126 2000 40 41 123 688 40 2005 41 619 2003 59 688 40 2007 41 619 2006 59 125 2001 42 2004 40 41 601 2012 123 792 744 2000 40 42 823 41 59 125 864 2013 42 2014 40 41 2012 123 792 2003 63 2003 354 2014 40 41 58 2006 63 2006 354 2014 40 41 58 753 59 125 864 2013 42 2015 40 41 2012 123 792 2006 63 2006 354 2015 40 41 58 2003 63 2003 354 2015 40 41 58 753 59 125 864 704 2016 40 704 2017 44 625 42 2018 44 625 42 2019 44 625 42 2020 44 625 42 2021 44 704 42 2022 41 2012 123 704 2023 61 2024 59 688 40 2003 41 2023 61 2003 354 2016 40 2017 44 2018 44 2019 44 2020 44 2021 44 2022 41 59 688 40 2023 307 2006 41 2023 61 2006 354 2016 40 2017 44 2018 44 2019 44 2020 44 2021 44 2022 41 59 792 2023 59 125 864 2001 42 2025 40 41 601 2012 123 792 753 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 64, 'CountStmt': 34, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 54, 'CountStmtDecl': 19, 'MaxCyclomatic': 3, 'SumCyclomatic': 16, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 54, 'CountLineCodeExe': 23, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 23, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99846,C++,"class OGRMIAttrIndex : public OGRAttrIndex
{
    CPL_DISALLOW_COPY_ASSIGN(OGRMIAttrIndex)

public:
    int         iIndex;
    TABINDFile  *poINDFile;
    OGRMILayerAttrIndex *poLIndex;
    OGRFieldDefn *poFldDefn;

    int         iField;

                OGRMIAttrIndex( OGRMILayerAttrIndex *, int iIndex, int iField);
               ~OGRMIAttrIndex();

    GByte      *BuildKey( OGRField *psKey );
    GIntBig     GetFirstMatch( OGRField *psKey ) override;
    GIntBig    *GetAllMatches( OGRField *psKey ) override;
    GIntBig    *GetAllMatches( OGRField *psKey, GIntBig* panFIDList, int* nFIDCount, int* nLength ) override;

    OGRErr      AddEntry( OGRField *psKey, GIntBig nFID ) override;
    OGRErr      RemoveEntry( OGRField *psKey, GIntBig nFID ) override;

    OGRErr      Clear() override;
};",0,587 2000 58 777 2001 123 2002 40 2000 41 777 58 704 2003 59 2004 42 2005 59 2006 42 2007 59 2008 42 2009 59 704 2010 59 2000 40 2006 42 44 704 2003 44 704 2010 41 59 126 2000 40 41 59 2011 42 2012 40 2013 42 2014 41 59 2015 2016 40 2013 42 2014 41 2017 59 2015 42 2018 40 2013 42 2014 41 2017 59 2015 42 2018 40 2013 42 2014 44 2015 42 2019 44 704 42 2020 44 704 42 2021 41 2017 59 2022 2023 40 2013 42 2014 44 2015 2024 41 2017 59 2022 2025 40 2013 42 2014 44 2015 2024 41 2017 59 2022 2026 40 41 2017 59 125 59 ,"{'AvgLine': 13, 'CountLine': 143, 'CountStmt': 63, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 38, 'MaxEssential': 5, 'SumEssential': 13, 'AvgCyclomatic': 2, 'CountLineCode': 119, 'CountStmtDecl': 26, 'MaxCyclomatic': 6, 'SumCyclomatic': 20, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 24, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 2, 'CountDeclMethod': 11, 'AltCountLineCode': 119, 'CountLineCodeExe': 33, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 24, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 19, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100136,C++,"class MFFTiledBand final: public GDALRasterBand
{
    friend class MFFDataset;

    VSILFILE      *fpRaw;
    bool           bNative;

    CPL_DISALLOW_COPY_ASSIGN(MFFTiledBand)

  public:
    MFFTiledBand( MFFDataset *, int, VSILFILE *, int, int,
                  GDALDataType, int );
    ~MFFTiledBand() override;

    CPLErr IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 42 2005 59 569 2006 59 2007 40 2000 41 777 58 2000 40 2003 42 44 704 44 2004 42 44 704 44 704 44 2008 44 704 41 59 126 2000 40 41 2009 59 2010 2011 40 704 44 704 44 865 42 41 2009 59 125 59 ,"{'AvgLine': 19, 'CountLine': 74, 'CountStmt': 27, 'MaxNesting': 2, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 62, 'CountStmtDecl': 10, 'MaxCyclomatic': 4, 'SumCyclomatic': 7, 'AltAvgLineCode': 16, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 62, 'CountLineCodeExe': 30, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 99, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
98730,C++,"class OCAD_EXTERN CADFace3D : public CADGeometry
{
public:
    CADFace3D();
    virtual ~CADFace3D(){}

    void      addCorner( const CADVector& corner );
    CADVector getCorner( size_t index );

    short getInvisFlags() const;
    void  setInvisFlags( short value );

    virtual void print() const override;
    virtual void transform( const Matrix& matrix ) override;
protected:
    std::vector<CADVector> avertCorners;
    short             invisFlags;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 865 2003 40 601 2004 38 2005 41 59 2004 2006 40 2007 2008 41 59 803 2009 40 41 601 59 865 2010 40 803 2011 41 59 864 865 2012 40 41 601 2013 59 864 865 2014 40 601 2015 38 2016 41 2013 59 775 58 2017 321 2018 60 2004 62 2019 59 803 2020 59 125 59 ,"{'AvgLine': 5, 'CountLine': 58, 'CountStmt': 27, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 55, 'CountStmtDecl': 17, 'MaxCyclomatic': 2, 'SumCyclomatic': 10, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 55, 'CountLineCodeExe': 16, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
99728,C++,"class OCAD_EXTERN CADMLine : public CADPoint3D
{
public:
    CADMLine();
    virtual ~CADMLine(){}

    double getScale() const;
    void   setScale( double value );

    bool isOpened() const;
    void setOpened( bool value );

    void addVertex( const CADVector& vertex );

    virtual void print() const override;
    virtual void transform( const Matrix& matrix ) override;
protected:
    double            scale;
    //char dJust;
    bool              opened; // 1 == open, 0 == close
    // TODO: do we need more properties here?
    std::vector<CADVector> avertVertices;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 625 2003 40 41 601 59 865 2004 40 625 2005 41 59 569 2006 40 41 601 59 865 2007 40 569 2005 41 59 865 2008 40 601 2009 38 2010 41 59 864 865 2011 40 41 601 2012 59 864 865 2013 40 601 2014 38 2015 41 2012 59 775 58 625 2016 59 330 569 2017 59 330 330 2018 321 2019 60 2009 62 2020 59 125 59 ,"{'AvgLine': 5, 'CountLine': 72, 'CountStmt': 32, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 66, 'CountStmtDecl': 20, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 9, 'AltCountLineCode': 66, 'CountLineCodeExe': 22, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 33, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 69, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 3}"
100232,C++,"class CADMTextObject final: public CADEntityObject
{
public:
    CADMTextObject();
    virtual ~CADMTextObject(){}

    CADVector vertInsertionPoint;
    CADVector vectExtrusion;
    CADVector vectXAxisDir;
    double    dfRectWidth;
    double    dfTextHeight;
    short     dAttachment; // TODO: meaning unknown
    short     dDrawingDir;
    double    dfExtents; // TODO: meaning unknown
    double    dfExtentsWidth; // TODO: meaning unknown
    std::string sTextValue;
    short     dLineSpacingStyle;
    double    dLineSpacingFactor;
    bool      bUnknownBit;
    long      dBackgroundFlags;
    long      dBackgroundScaleFactor;
    short     dBackgroundColor;
    long      dBackgroundTransparency;
    CADHandle hStyle;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 59 2003 2005 59 2003 2006 59 625 2007 59 625 2008 59 803 2009 59 330 803 2010 59 625 2011 59 330 625 2012 59 330 2013 321 2014 2015 59 803 2016 59 625 2017 59 569 2018 59 726 2019 59 726 2020 59 803 2021 59 726 2022 59 2023 2024 59 125 59 ,"{'AvgLine': 9, 'CountLine': 42, 'CountStmt': 38, 'MaxNesting': 0, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 41, 'CountStmtDecl': 33, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 41, 'CountLineCodeExe': 15, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 18, 'CountDeclInstanceVariablePublic': 18, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100315,C++,"class OGRLayerWithTransaction final: public OGRLayerDecorator
{
        CPL_DISALLOW_COPY_ASSIGN(OGRLayerWithTransaction)

    protected:
        friend class OGRDataSourceWithTransaction;

        OGRDataSourceWithTransaction* m_poDS;
        OGRFeatureDefn* m_poFeatureDefn;

    public:

        OGRLayerWithTransaction(OGRDataSourceWithTransaction* poDS,
                                OGRLayer* poBaseLayer);
    virtual ~OGRLayerWithTransaction() override;

    virtual const char *GetName() override { return GetDescription(); }
    virtual OGRFeatureDefn *GetLayerDefn() override;

    virtual OGRErr      CreateField( OGRFieldDefn *poField,
                                     int bApproxOK = TRUE ) override;
    virtual OGRErr      DeleteField( int iField ) override;
    virtual OGRErr      ReorderFields( int* panMap ) override;
    virtual OGRErr      AlterFieldDefn( int iField, OGRFieldDefn* poNewFieldDefn, int nFlags ) override;

    virtual OGRErr      CreateGeomField( OGRGeomFieldDefn *poField,
                                     int bApproxOK = TRUE ) override;

    virtual OGRFeature *GetNextFeature() override;
    virtual OGRFeature *GetFeature( GIntBig nFID ) override;
    virtual OGRErr      ISetFeature( OGRFeature *poFeature ) override;
    virtual OGRErr      ICreateFeature( OGRFeature *poFeature ) override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 775 58 667 587 2004 59 2004 42 2005 59 2006 42 2007 59 777 58 2000 40 2004 42 2008 44 2009 42 2010 41 59 864 126 2000 40 41 2011 59 864 601 582 42 2012 40 41 2011 123 792 2013 40 41 59 125 864 2006 42 2014 40 41 2011 59 864 2015 2016 40 2017 42 2018 44 704 2019 61 2020 41 2011 59 864 2015 2021 40 704 2022 41 2011 59 864 2015 2023 40 704 42 2024 41 2011 59 864 2015 2025 40 704 2022 44 2017 42 2026 44 704 2027 41 2011 59 864 2015 2028 40 2029 42 2018 44 704 2019 61 2020 41 2011 59 864 2030 42 2031 40 41 2011 59 864 2030 42 2032 40 2033 2034 41 2011 59 864 2015 2035 40 2030 42 2036 41 2011 59 864 2015 2037 40 2030 42 2036 41 2011 59 125 59 ,"{'AvgLine': 10, 'CountLine': 168, 'CountStmt': 108, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 89, 'MaxEssential': 3, 'SumEssential': 17, 'AvgCyclomatic': 2, 'CountLineCode': 160, 'CountStmtDecl': 36, 'MaxCyclomatic': 4, 'SumCyclomatic': 33, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 15, 'AltCountLineCode': 160, 'CountLineCodeExe': 83, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 8, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 37, 'CountLineInactive': 0, 'CountDeclMethodAll': 142, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 40, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 32, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 33, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
100202,C++,"class CADAttribObject CPL_NON_FINAL: public CADEntityObject
{
public:
    explicit CADAttribObject( ObjectType typeIn = ATTRIB );
    virtual ~CADAttribObject(){}
    unsigned char DataFlags;
    double        dfElevation;
    CADVector     vertInsetionPoint;
    CADVector     vertAlignmentPoint;
    CADVector     vectExtrusion;
    double        dfThickness;
    double        dfObliqueAng;
    double        dfRotationAng;
    double        dfHeight;
    double        dfWidthFactor;
    std::string   sTextValue;
    short         dGeneration;
    short         dHorizAlign;
    short         dVertAlign;
    char          dVersion; // R2010+
    std::string   sTag;
    short         nFieldLength;
    unsigned char nFlags;
    bool          bLockPosition;

    CADHandle hStyle;
};",0,587 2000 2001 58 777 2002 123 777 58 648 2000 40 2003 2004 61 2005 41 59 864 126 2000 40 41 123 125 856 582 2006 59 625 2007 59 2008 2009 59 2008 2010 59 2008 2011 59 625 2012 59 625 2013 59 625 2014 59 625 2015 59 625 2016 59 2017 321 2018 2019 59 803 2020 59 803 2021 59 803 2022 59 582 2023 59 330 2017 321 2018 2024 59 803 2025 59 856 582 2026 59 569 2027 59 2028 2029 59 125 59 ,"{'AvgLine': 9, 'CountLine': 45, 'CountStmt': 42, 'MaxNesting': 0, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 36, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 44, 'CountLineCodeExe': 16, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 1, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 20, 'CountDeclInstanceVariablePublic': 20, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98731,C++,"class OCAD_EXTERN CADGeometry
{
public:
    CADGeometry();
    virtual ~CADGeometry();
    /**
     * @brief The CAD geometry types enum
     */
    enum GeometryType
    {
        UNDEFINED = 0,
        POINT,
        CIRCLE,
        LWPOLYLINE,
        ELLIPSE,
        LINE,
        POLYLINE3D,
        TEXT,
        ARC,
        SPLINE,
        SOLID,
        RAY,
        HATCH, // NOT IMPLEMENTED
        IMAGE,
        MTEXT,
        MLINE,
        XLINE,
        FACE3D,
        POLYLINE_PFACE,
        ATTRIB,
        ATTDEF
    };

    enum GeometryType getType() const;
    double            getThickness() const;
    void              setThickness( double thickness );
    RGBColor          getColor() const;
    void              setColor( RGBColor color ); // TODO: In 2004+ ACI is not the only way to set the color.

    std::vector<CADAttrib> getBlockAttributes() const;
    void              setBlockAttributes( const std::vector<CADAttrib>& value );

    std::vector<std::string> getEED() const;
    void setEED( const std::vector<std::string>& eed );

    virtual void print() const                     = 0;
    virtual void transform( const Matrix& matrix ) = 0;
protected:
    std::vector<CADAttrib> blockAttributes; // Attributes of block reference this geometry is attached to.

    std::vector<std::string>    asEED;
    enum GeometryType geometryType;
    double            m_thickness;
    RGBColor          geometry_color;
};",0,587 2000 2001 123 777 58 2001 40 41 59 864 126 2001 40 41 59 306 640 2002 123 2003 61 1500 44 2004 44 2005 44 2006 44 2007 44 2008 44 2009 44 2010 44 2011 44 2012 44 2013 44 2014 44 2015 44 330 2016 44 2017 44 2018 44 2019 44 2020 44 2021 44 2022 44 2023 125 59 640 2002 2024 40 41 601 59 625 2025 40 41 601 59 865 2026 40 625 2027 41 59 2028 2029 40 41 601 59 865 2030 40 2028 2031 41 59 330 2032 321 2033 60 2034 62 2035 40 41 601 59 865 2036 40 601 2032 321 2033 60 2034 62 38 2037 41 59 2032 321 2033 60 2032 321 2038 62 2039 40 41 601 59 865 2040 40 601 2032 321 2033 60 2032 321 2038 62 38 2041 41 59 864 865 2042 40 41 601 61 1500 59 864 865 2043 40 601 2044 38 2045 41 61 1500 59 775 58 2032 321 2033 60 2034 62 2046 59 330 2032 321 2033 60 2032 321 2038 62 2047 59 640 2002 2048 59 625 2049 59 2028 2050 59 125 59 ,"{'AvgLine': 4, 'CountLine': 79, 'CountStmt': 36, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 70, 'CountStmtDecl': 24, 'MaxCyclomatic': 1, 'SumCyclomatic': 11, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 13, 'AltCountLineCode': 70, 'CountLineCodeExe': 15, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 4, 'CountClassDerived': 9, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 6, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 13, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 5}"
100240,C++,"class CADSplineObject final: public CADEntityObject
{
public:
    CADSplineObject();
    virtual ~CADSplineObject(){}

    long dScenario;
    long dSplineFlags; // 2013+
    long dKnotParameter; // 2013+

    long      dDegree;
    double    dfFitTol;
    CADVector vectBegTangDir;
    CADVector vectEndTangDir;
    long      nNumFitPts;

    bool   bRational;
    bool   bClosed;
    bool   bPeriodic;
    double dfKnotTol;
    double dfCtrlTol;
    long   nNumKnots;
    long   nNumCtrlPts;
    bool   bWeight;

    std::vector<double>    adfKnots;
    std::vector<double>    adfCtrlPointsWeight;
    std::vector<CADVector> avertCtrlPoints;
    std::vector<CADVector> averFitPoints;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 726 2003 59 726 2004 59 330 726 2005 59 330 726 2006 59 625 2007 59 2008 2009 59 2008 2010 59 726 2011 59 569 2012 59 569 2013 59 569 2014 59 625 2015 59 625 2016 59 726 2017 59 726 2018 59 569 2019 59 2020 321 2021 60 625 62 2022 59 2020 321 2021 60 625 62 2023 59 2020 321 2021 60 2008 62 2024 59 2020 321 2021 60 2008 62 2025 59 125 59 ,"{'AvgLine': 9, 'CountLine': 48, 'CountStmt': 42, 'MaxNesting': 0, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 44, 'CountStmtDecl': 40, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 44, 'CountLineCodeExe': 16, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 20, 'CountDeclInstanceVariablePublic': 20, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100205,C++,"class CADBlockHeaderObject final: public CADBaseControlObject
{
public:
    CADBlockHeaderObject();
    virtual ~CADBlockHeaderObject(){}
    std::string           sEntryName;
    bool                  b64Flag;
    short                 dXRefIndex;
    bool                  bXDep;
    bool                  bAnonymous;
    bool                  bHasAtts;
    bool                  bBlkisXRef;
    bool                  bXRefOverlaid;
    bool                  bLoadedBit;
    long                  nOwnedObjectsCount;
    CADVector             vertBasePoint;
    std::string           sXRefPName;
    std::vector<unsigned char> adInsertCount; // TODO: ???
    std::string           sBlockDescription;
    long                  nSizeOfPreviewData;
    std::vector<unsigned char> abyBinaryPreviewData;
    short                 nInsertUnits;
    bool                  bExplodable;
    char                  dBlockScaling;
    CADHandle             hBlockControl;
    std::vector<CADHandle> hReactors;
    CADHandle             hXDictionary;
    CADHandle             hNull;
    CADHandle             hBlockEntity;
    CADHandleArray        hEntities;
    CADHandle             hEndBlk;
    CADHandleArray        hInsertHandles;
    CADHandle             hLayout;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 321 2004 2005 59 569 2006 59 803 2007 59 569 2008 59 569 2009 59 569 2010 59 569 2011 59 569 2012 59 569 2013 59 726 2014 59 2015 2016 59 2003 321 2004 2017 59 2003 321 2018 60 856 582 62 2019 59 330 2003 321 2004 2020 59 726 2021 59 2003 321 2018 60 856 582 62 2022 59 803 2023 59 569 2024 59 582 2025 59 2026 2027 59 2003 321 2018 60 2026 62 2028 59 2026 2029 59 2026 2030 59 2026 2031 59 2032 2033 59 2026 2034 59 2032 2035 59 2026 2036 59 125 59 ,"{'AvgLine': 9, 'CountLine': 51, 'CountStmt': 58, 'MaxNesting': 0, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 51, 'CountStmtDecl': 48, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 51, 'CountLineCodeExe': 15, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 28, 'CountDeclInstanceVariablePublic': 28, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100139,C++,"class COASPMetadataItem
{
protected:
    char *pszItemName;
    char *pszItemValue;

public:
    COASPMetadataItem() : pszItemName(nullptr), pszItemValue(nullptr) { }
    COASPMetadataItem(char *pszItemName, char *pszItemValue);
    ~COASPMetadataItem();

    char *GetItemName();
    char *GetItemValue();
    static int GetType() { return TYPE_GENERIC; }
};",0,587 2000 123 775 58 582 42 2001 59 582 42 2002 59 777 58 2000 40 41 58 2001 40 753 41 44 2002 40 753 41 123 125 2000 40 582 42 2001 44 582 42 2002 41 59 126 2000 40 41 59 582 42 2003 40 41 59 582 42 2004 40 41 59 809 704 2005 40 41 123 792 2006 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 32, 'CountStmt': 17, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 30, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 30, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
100146,C++,"class VSIMemFile
{
    CPL_DISALLOW_COPY_ASSIGN(VSIMemFile)

public:
    CPLString     osFilename{};

    bool          bIsDirectory = false;

    bool          bOwnData = true;
    GByte        *pabyData = nullptr;
    vsi_l_offset  nLength = 0;
    vsi_l_offset  nAllocLength = 0;
    vsi_l_offset  nMaxLength = GUINTBIG_MAX;

    time_t        mTime = 0;

    VSIMemFile();
    virtual ~VSIMemFile();

    bool          SetLength( vsi_l_offset nNewSize );
};",0,587 2000 123 2001 40 2000 41 777 58 2002 2003 123 125 59 569 2004 61 655 59 569 2005 61 829 59 2006 42 2007 61 753 59 2008 2009 61 1500 59 2008 2010 61 1500 59 2008 2011 61 2012 59 2013 2014 61 1500 59 2000 40 41 59 864 126 2000 40 41 59 569 2015 40 2008 2016 41 59 125 59 ,"{'AvgLine': 22, 'CountLine': 90, 'CountStmt': 34, 'MaxNesting': 2, 'AvgLineCode': 17, 'AvgEssential': 2, 'AvgLineBlank': 2, 'CountStmtExe': 22, 'MaxEssential': 5, 'SumEssential': 7, 'AvgCyclomatic': 3, 'CountLineCode': 69, 'CountStmtDecl': 13, 'MaxCyclomatic': 6, 'SumCyclomatic': 9, 'AltAvgLineCode': 17, 'AvgLineComment': 2, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 69, 'CountLineCodeExe': 36, 'CountLineComment': 8, 'AltAvgLineComment': 2, 'AltCountLineBlank': 13, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.12', 'AltCountLineComment': 8, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 8, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99312,C++,"class CADFileStreamIO : public CADFileIO
{
public:
    explicit             CADFileStreamIO(const char* pszFilePath);
    virtual             ~CADFileStreamIO();

    virtual const char* ReadLine() override;
    virtual bool        Eof() const override;
    virtual bool        Open(int mode) override;
    virtual bool        Close() override;
    virtual int         Seek(long int offset, SeekOrigin origin) override;
    virtual long int    Tell() override;
    virtual size_t      Read(void* ptr, size_t size) override;
    virtual size_t      Write(void* ptr, size_t size) override;
    virtual void        Rewind() override;
protected:
    std::ifstream       m_oFileStream;
};",0,587 2000 58 777 2001 123 777 58 648 2000 40 601 582 42 2002 41 59 864 126 2000 40 41 59 864 601 582 42 2003 40 41 2004 59 864 569 2005 40 41 601 2004 59 864 569 2006 40 704 2007 41 2004 59 864 569 2008 40 41 2004 59 864 704 2009 40 726 704 2010 44 2011 2012 41 2004 59 864 726 704 2013 40 41 2004 59 864 2014 2015 40 865 42 2016 44 2014 2017 41 2004 59 864 2014 2018 40 865 42 2016 44 2014 2017 41 2004 59 864 865 2019 40 41 2004 59 775 58 2020 321 2021 2022 59 125 59 ,"{'AvgLine': 6, 'CountLine': 94, 'CountStmt': 45, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 31, 'MaxEssential': 4, 'SumEssential': 14, 'AvgCyclomatic': 1, 'CountLineCode': 84, 'CountStmtDecl': 14, 'MaxCyclomatic': 5, 'SumCyclomatic': 19, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 84, 'CountLineCodeExe': 32, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 27, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 1}"
100244,C++,"class CADVertexMeshObject final: public CADEntityObject
{
public:
    CADVertexMeshObject();
    virtual ~CADVertexMeshObject(){}
    CADVector vertPosition;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 2003 2004 59 125 59 ,"{'AvgLine': 2, 'CountLine': 11, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 11, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99456,C++,"template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};",0,822 60 835 2000 62 587 2001 123 816 2002 123 2000 42 2003 59 2002 40 2000 42 2004 41 58 2003 40 2004 41 123 125 126 2002 40 41 123 619 2003 59 125 2002 38 758 61 40 2002 38 2005 41 123 2000 42 2006 61 2003 59 2003 61 1500 59 619 2006 59 2003 61 2005 46 2003 59 2005 46 2003 61 1500 59 792 42 823 59 125 125 2007 59 2001 38 758 61 40 601 2001 60 2000 62 38 2008 41 59 2001 40 601 2001 60 2000 62 38 2008 41 59 777 58 2001 40 41 58 2007 40 1500 41 123 125 2001 38 758 61 40 601 2000 38 2009 41 123 2002 2010 40 744 2000 40 2009 41 41 59 2007 61 2010 59 792 42 823 59 125 758 2000 38 40 41 601 123 792 42 2007 46 2011 59 125 2000 42 758 38 40 41 123 792 2007 46 2012 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 15, 'CountStmt': 26, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 16, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 15, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100081,C++,"class OGRPGNoResetResultLayer final: public OGRPGLayer
{
  public:
                        OGRPGNoResetResultLayer(OGRPGDataSource *poDSIn,
                                                PGresult *hResultIn);

    virtual             ~OGRPGNoResetResultLayer();

    virtual void        ResetReading() override;

    virtual int         TestCapability( const char * ) override { return FALSE; }

    virtual OGRFeature *GetNextFeature() override;

    virtual CPLString   GetFromClauseForGetExtent() override { CPLAssert(false); return """"; }
    virtual void        ResolveSRID(const OGRPGGeomFieldDefn* poGFldDefn) override { poGFldDefn->nSRSId = -1; }
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 2004 44 2005 42 2006 41 59 864 126 2000 40 41 59 864 865 2007 40 41 2008 59 864 704 2009 40 601 582 42 41 2008 123 792 2010 59 125 864 2011 42 2012 40 41 2008 59 864 2013 2014 40 41 2008 123 2015 40 655 41 59 792 362 59 125 864 865 2016 40 601 2017 42 2018 41 2008 123 2018 354 2019 61 45 1501 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 50, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 43, 'CountStmtDecl': 7, 'MaxCyclomatic': 2, 'SumCyclomatic': 8, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 43, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 120, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99435,C++,"class PlannedCoverageVIS_IRRecord
{
public:
  explicit PlannedCoverageVIS_IRRecord(std::ifstream & ifile);

  int SouthernLinePlanned;
  int NorthernLinePlanned;
  int EasternColumnPlanned;
  int WesternColumnPlanned;
};",0,587 2000 123 777 58 648 2000 40 2001 321 2002 38 2003 41 59 704 2004 59 704 2005 59 704 2006 59 704 2007 59 125 59 ,"{'AvgLine': 7, 'CountLine': 17, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 16, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 16, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99118,C++,"    class PCIDSK_DLL PCIDSK_ARRAY
    {
    public:
        virtual ~PCIDSK_ARRAY() {}

        //ARRAY functions
        virtual unsigned char GetDimensionCount() const =0;
        virtual void SetDimensionCount(unsigned char nDim) =0;
        virtual const std::vector<unsigned int>& GetSizes() const =0;
        virtual void SetSizes(const std::vector<unsigned int>& oSizes) =0;
        virtual const std::vector<double>& GetArray() const =0;
        virtual void SetArray(const std::vector<double>& oArray) =0;
    };",0,587 2000 2001 123 777 58 864 126 2001 40 41 123 125 330 864 856 582 2002 40 41 601 61 1500 59 864 865 2003 40 856 582 2004 41 61 1500 59 864 601 2005 321 2006 60 856 704 62 38 2007 40 41 601 61 1500 59 864 865 2008 40 601 2005 321 2006 60 856 704 62 38 2009 41 61 1500 59 864 601 2005 321 2006 60 625 62 38 2010 40 41 601 61 1500 59 864 865 2011 40 601 2005 321 2006 60 625 62 38 2012 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 13, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 11, 'CountLineCodeExe': 0, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99446,C++,"class CPL_DLL GDALAttribute: virtual public GDALAbstractMDArray
{
    mutable std::string m_osCachedVal{};

protected:
//! @cond Doxygen_Suppress
    GDALAttribute(const std::string& osParentName, const std::string& osName);
//! @endcond

public:

    std::vector<GUInt64> GetDimensionsSize() const;

    GDALRawResult ReadAsRaw() const;
    const char* ReadAsString() const;
    int ReadAsInt() const;
    double ReadAsDouble() const;
    CPLStringList ReadAsStringArray() const;
    std::vector<int> ReadAsIntArray() const;
    std::vector<double> ReadAsDoubleArray() const;

    using GDALAbstractMDArray::Write;
    bool Write(const void* pabyValue, size_t nLen);
    bool Write(const char*);
    bool WriteInt(int);
    bool Write(double);
    bool Write(CSLConstList);
    bool Write(const double*, size_t);

//! @cond Doxygen_Suppress
    static constexpr GUInt64 COPY_COST = 100;
//! @endcond

};",0,587 2000 2001 58 864 777 2002 123 740 2003 321 2004 2005 123 125 59 775 58 330 2001 40 601 2003 321 2004 38 2006 44 601 2003 321 2004 38 2007 41 59 330 777 58 2003 321 2008 60 2009 62 2010 40 41 601 59 2011 2012 40 41 601 59 601 582 42 2013 40 41 601 59 704 2014 40 41 601 59 625 2015 40 41 601 59 2016 2017 40 41 601 59 2003 321 2008 60 704 62 2018 40 41 601 59 2003 321 2008 60 625 62 2019 40 41 601 59 860 2002 321 2020 59 569 2020 40 601 865 42 2021 44 2022 2023 41 59 569 2020 40 601 582 42 41 59 569 2024 40 704 41 59 569 2020 40 625 41 59 569 2020 40 2025 41 59 569 2020 40 601 625 42 44 2022 41 59 330 809 603 2009 2026 61 1503 59 330 125 59 ,"{'AvgLine': 15, 'CountLine': 262, 'CountStmt': 115, 'MaxNesting': 1, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 26, 'MaxEssential': 1, 'SumEssential': 15, 'AvgCyclomatic': 1, 'CountLineCode': 248, 'CountStmtDecl': 89, 'MaxCyclomatic': 2, 'SumCyclomatic': 23, 'AltAvgLineCode': 15, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 16, 'AltCountLineCode': 251, 'CountLineCodeExe': 46, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 3, 'CountClassDerived': 8, 'CountLineCodeDecl': 83, 'CountLineInactive': 1, 'CountDeclMethodAll': 32, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 23, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 8, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 15, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 23, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 21, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99480,C++,"class FGdbDriver final: public GDALDriver
{
public:

  static void Release(const char* pszName);

  static FGdbTransactionManager* GetTransactionManager();

  static CPLMutex* hMutex;
  static FGdbTransactionManager* m_poTransactionManager;
};",0,587 2000 2001 58 777 2002 123 777 58 809 865 2003 40 601 582 42 2004 41 59 809 2005 42 2006 40 41 59 809 2007 42 2008 59 809 2005 42 2009 59 125 59 ,"{'AvgLine': 14, 'CountLine': 39, 'CountStmt': 16, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 34, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AltAvgLineCode': 13, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 2, 'AltCountLineCode': 34, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 36, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99497,C++,"class CALSWrapperSrcBand final: public GDALPamRasterBand
{
        GDALDataset* poSrcDS;
        bool bInvertValues;

    public:
        explicit CALSWrapperSrcBand( GDALDataset* poSrcDSIn )
        {
            poSrcDS = poSrcDSIn;
            SetMetadataItem(""NBITS"", ""1"", ""IMAGE_STRUCTURE"");
            poSrcDS->GetRasterBand(1)->GetBlockSize(&nBlockXSize, &nBlockYSize);
            eDataType = GDT_Byte;
            bInvertValues = true;
            GDALColorTable* poCT = poSrcDS->GetRasterBand(1)->GetColorTable();
            if( poCT != nullptr && poCT->GetColorEntryCount() >= 2 )
            {
                const GDALColorEntry* psEntry1 = poCT->GetColorEntry(0);
                const GDALColorEntry* psEntry2 = poCT->GetColorEntry(1);
                if( psEntry1->c1 == 255 &&
                    psEntry1->c2 == 255 &&
                    psEntry1->c3 == 255 &&
                    psEntry2->c1 == 0 &&
                    psEntry2->c2 == 0 &&
                    psEntry2->c3 == 0 )
                {
                    bInvertValues = false;
                }
            }
        }

    CPLErr IReadBlock( int /* nBlockXOff */,
                       int /* nBlockYOff */,
                       void * /* pData */ ) override
    {
        // Should not be called.
        return CE_Failure;
    }

    CPLErr IRasterIO( GDALRWFlag eRWFlag,
                      int nXOff, int nYOff, int nXSize, int nYSize,
                      void * pData, int nBufXSize, int nBufYSize,
                      GDALDataType eBufType,
                      GSpacing nPixelSpace,
                      GSpacing nLineSpace,
                      GDALRasterIOExtraArg* psExtraArg ) override
    {
        const CPLErr eErr =
            poSrcDS->GetRasterBand(1)->RasterIO(
                eRWFlag, nXOff, nYOff, nXSize, nYSize,
                pData, nBufXSize, nBufYSize, eBufType,
                nPixelSpace, nLineSpace, psExtraArg ) ;
        if( bInvertValues )
        {
            for( int j = 0; j < nBufYSize; j++ )
            {
                for( int i = 0; i < nBufXSize; i++ )
                    ((GByte*)pData)[j * nLineSpace + i * nPixelSpace] =
                        1 - ((GByte*)pData)[j * nLineSpace +
                                            i * nPixelSpace];
            }
        }
        return eErr;
    }
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 569 2005 59 777 58 648 2000 40 2003 42 2006 41 123 2004 61 2006 59 2007 40 362 44 362 44 362 41 59 2004 354 2008 40 1501 41 354 2009 40 38 2010 44 38 2011 41 59 2012 61 2013 59 2005 61 829 59 2014 42 2015 61 2004 354 2008 40 1501 41 354 2016 40 41 59 688 40 2015 340 753 307 2015 354 2017 40 41 325 1502 41 123 601 2018 42 2019 61 2015 354 2020 40 1500 41 59 601 2018 42 2021 61 2015 354 2020 40 1501 41 59 688 40 2019 354 2022 323 1504 307 2019 354 2023 323 1504 307 2019 354 2024 323 1504 307 2021 354 2022 323 1500 307 2021 354 2023 323 1500 307 2021 354 2024 323 1500 41 123 2005 61 655 59 125 125 125 2025 2026 40 704 305 44 704 305 44 865 42 305 41 2027 123 330 792 2028 59 125 2025 2029 40 2030 2031 44 704 2032 44 704 2033 44 704 2034 44 704 2035 44 865 42 2036 44 704 2037 44 704 2038 44 2039 2040 44 2041 2042 44 2041 2043 44 2044 42 2045 41 2027 123 601 2025 2046 61 2004 354 2047 40 1501 41 354 2048 40 2031 44 2032 44 2033 44 2034 44 2035 44 2036 44 2037 44 2038 44 2040 44 2042 44 2043 44 2045 41 59 688 40 2005 41 123 664 40 704 2049 61 1500 59 2049 60 2038 59 2049 349 41 123 664 40 704 2050 61 1500 59 2050 60 2037 59 2050 349 41 40 40 2051 42 41 2036 41 91 2049 42 2043 43 2050 42 2042 93 61 1501 45 40 40 2051 42 41 2036 41 91 2049 42 2043 43 2050 42 2042 93 59 125 125 792 2046 59 125 125 59 ,"{'AvgLine': 18, 'CountLine': 64, 'CountStmt': 25, 'MaxNesting': 3, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 60, 'CountStmtDecl': 11, 'MaxCyclomatic': 4, 'SumCyclomatic': 8, 'AltAvgLineCode': 18, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 60, 'CountLineCodeExe': 28, 'CountLineComment': 4, 'AltAvgLineComment': 1, 'AltCountLineBlank': 3, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 131, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.07', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99540,C++,"class PythonPluginDriver: public GDALDriver
{
        CPLMutex* m_hMutex = nullptr;
        CPLString m_osFilename;
        PyObject* m_poPlugin = nullptr;

        PythonPluginDriver(const PythonPluginDriver&) = delete;
        PythonPluginDriver& operator= (const PythonPluginDriver&) = delete;

        bool LoadPlugin();

        int Identify( GDALOpenInfo *);
        static int IdentifyEx(GDALDriver*, GDALOpenInfo *);

        GDALDataset* Open( GDALOpenInfo *);
        static GDALDataset* OpenEx(GDALDriver*, GDALOpenInfo *);

    public:
        PythonPluginDriver(const char* pszFilename,
                           const char* pszPluginName, char** papszMD);
        ~PythonPluginDriver();
};",0,587 2000 58 777 2001 123 2002 42 2003 61 753 59 2004 2005 59 2006 42 2007 61 753 59 2000 40 601 2000 38 41 61 619 59 2000 38 758 61 40 601 2000 38 41 61 619 59 569 2008 40 41 59 704 2009 40 2010 42 41 59 809 704 2011 40 2001 42 44 2010 42 41 59 2012 42 2013 40 2010 42 41 59 809 2012 42 2014 40 2001 42 44 2010 42 41 59 777 58 2000 40 601 582 42 2015 44 601 582 42 2016 44 582 42 42 2017 41 59 126 2000 40 41 59 125 59 ,"{'AvgLine': 25, 'CountLine': 199, 'CountStmt': 107, 'MaxNesting': 2, 'AvgLineCode': 22, 'AvgEssential': 3, 'AvgLineBlank': 2, 'CountStmtExe': 82, 'MaxEssential': 7, 'SumEssential': 23, 'AvgCyclomatic': 3, 'CountLineCode': 177, 'CountStmtDecl': 35, 'MaxCyclomatic': 7, 'SumCyclomatic': 25, 'AltAvgLineCode': 22, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 22, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 2, 'CountDeclMethod': 9, 'AltCountLineCode': 177, 'CountLineCodeExe': 104, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 22, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 38, 'CountLineInactive': 0, 'CountDeclMethodAll': 43, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 29, 'CountDeclClassMethod': 2, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 62, 'SumCyclomaticModified': 25, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 7, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99572,C++,"class VSI_IOInterface : public IOInterfaces
{
    virtual void   *Open( std::string filename, std::string access ) const override;
    virtual uint64  Seek( void *io_handle, uint64 offset, int whence ) const override;
    virtual uint64  Tell( void *io_handle ) const override;
    virtual uint64  Read( void *buffer, uint64 size, uint64 nmemb, void *io_hanle ) const override;
    virtual uint64  Write( const void *buffer, uint64 size, uint64 nmemb, void *io_handle ) const override;
    virtual int     Eof( void *io_handle ) const override;
    virtual int     Flush( void *io_handle ) const override;
    virtual int     Close( void *io_handle ) const override;

    const char     *LastError() const;
};",0,587 2000 58 777 2001 123 864 865 42 2002 40 2003 321 2004 2005 44 2003 321 2004 2006 41 601 2007 59 864 2008 2009 40 865 42 2010 44 2008 2011 44 704 2012 41 601 2007 59 864 2008 2013 40 865 42 2010 41 601 2007 59 864 2008 2014 40 865 42 2015 44 2008 2016 44 2008 2017 44 865 42 2018 41 601 2007 59 864 2008 2019 40 601 865 42 2015 44 2008 2016 44 2008 2017 44 865 42 2010 41 601 2007 59 864 704 2020 40 865 42 2010 41 601 2007 59 864 704 2021 40 865 42 2010 41 601 2007 59 864 704 2022 40 865 42 2010 41 601 2007 59 601 582 42 2023 40 41 601 59 125 59 ,"{'AvgLine': 9, 'CountLine': 102, 'CountStmt': 36, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 78, 'CountStmtDecl': 17, 'MaxCyclomatic': 2, 'SumCyclomatic': 13, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 24, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 9, 'AltCountLineCode': 78, 'CountLineCodeExe': 49, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 24, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 9, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 9, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99613,C++,"class SpheroidList
{
    CPL_DISALLOW_COPY_ASSIGN(SpheroidList)

 public:
  int num_spheroids;
  // Acceptable errors for radii, inverse flattening.
  double epsilonR;
  double epsilonI;

// Maximum number of expected spheroids.
#define MAX_RECOGNIZED_SPHEROIDS 256

  // TODO(schwehr): Make this a vector.
  SpheroidItem spheroids[MAX_RECOGNIZED_SPHEROIDS];

#undef MAX_RECOGNIZED_SPHEROIDS

  SpheroidList();
  ~SpheroidList();

  char* GetSpheroidNameByRadii( double eq_radius, double polar_radius );
  char* GetSpheroidNameByEqRadiusAndInvFlattening( double eq_radius,
                                                   double inverse_flatting );

  int SpheroidInList( const char *spheroid_name );
  double GetSpheroidEqRadius( const char *spheroid_name );
  double GetSpheroidPolarRadius( const char *spheroid_name );
  double GetSpheroidInverseFlattening( const char *spheroid_name );
};",0,587 2000 123 2001 40 2000 41 777 58 704 2002 59 330 625 2003 59 625 2004 59 330 35 615 2005 1504 330 2006 2007 91 2005 93 59 35 850 2005 2000 40 41 59 126 2000 40 41 59 582 42 2008 40 625 2009 44 625 2010 41 59 582 42 2011 40 625 2009 44 625 2012 41 59 704 2013 40 601 582 42 2014 41 59 625 2015 40 601 582 42 2014 41 59 625 2016 40 601 582 42 2014 41 59 625 2017 40 601 582 42 2014 41 59 125 59 ,"{'AvgLine': 9, 'CountLine': 104, 'CountStmt': 50, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 37, 'MaxEssential': 3, 'SumEssential': 20, 'AvgCyclomatic': 2, 'CountLineCode': 85, 'CountStmtDecl': 25, 'MaxCyclomatic': 3, 'SumCyclomatic': 20, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 10, 'AltCountLineCode': 87, 'CountLineCodeExe': 31, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 1, 'CountClassDerived': 2, 'CountLineCodeDecl': 20, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 52, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99708,C++,"class GDALMDArrayResampledDatasetRasterBand final: public GDALRasterBand
{
protected:
    CPLErr IReadBlock( int, int, void * ) override;
    CPLErr IRasterIO( GDALRWFlag eRWFlag,
                                  int nXOff, int nYOff, int nXSize, int nYSize,
                                  void * pData, int nBufXSize, int nBufYSize,
                                  GDALDataType eBufType,
                                  GSpacing nPixelSpaceBuf,
                                  GSpacing nLineSpaceBuf,
                                  GDALRasterIOExtraArg* psExtraArg ) override;
public:
    explicit GDALMDArrayResampledDatasetRasterBand(GDALMDArrayResampledDataset* poDSIn);

    double GetNoDataValue(int* pbHasNoData) override;
};",0,587 2000 2001 58 777 2002 123 775 58 2003 2004 40 704 44 704 44 865 42 41 2005 59 2003 2006 40 2007 2008 44 704 2009 44 704 2010 44 704 2011 44 704 2012 44 865 42 2013 44 704 2014 44 704 2015 44 2016 2017 44 2018 2019 44 2018 2020 44 2021 42 2022 41 2005 59 777 58 648 2000 40 2023 42 2024 41 59 625 2025 40 704 42 2026 41 2005 59 125 59 ,"{'AvgLine': 19, 'CountLine': 93, 'CountStmt': 32, 'MaxNesting': 1, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 90, 'CountStmtDecl': 19, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 18, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 90, 'CountLineCodeExe': 27, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 29, 'CountLineInactive': 0, 'CountDeclMethodAll': 98, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 2, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99213,C++,"class ZarrSharedResource
{
    std::string m_osRootDirectoryName{};
    bool m_bZMetadataEnabled = false;
    CPLJSONObject m_oObj{}; // For .zmetadata
    bool m_bZMetadataModified = false;
    std::shared_ptr<GDALPamMultiDim> m_poPAM{};
    CPLStringList m_aosOpenOptions{};

public:
    explicit ZarrSharedResource(const std::string& osRootDirectoryName);

    ~ZarrSharedResource();

    void EnableZMetadata() { m_bZMetadataEnabled = true; }

    void InitFromZMetadata(const CPLJSONObject& obj) { m_oObj = obj; }

    void SetZMetadataItem(const std::string& osFilename, const CPLJSONObject& obj);

    const std::shared_ptr<GDALPamMultiDim>& GetPAM() { return m_poPAM; }

    const CPLStringList& GetOpenOptions() const { return m_aosOpenOptions; }

    void SetOpenOptions(CSLConstList papszOpenOptions) { m_aosOpenOptions = papszOpenOptions; }
};",0,587 2000 123 2001 321 2002 2003 123 125 59 569 2004 61 655 59 2005 2006 123 125 59 330 569 2007 61 655 59 2001 321 2008 60 2009 62 2010 123 125 59 2011 2012 123 125 59 777 58 648 2000 40 601 2001 321 2002 38 2013 41 59 126 2000 40 41 59 865 2014 40 41 123 2004 61 829 59 125 865 2015 40 601 2005 38 2016 41 123 2006 61 2016 59 125 865 2017 40 601 2001 321 2002 38 2018 44 601 2005 38 2016 41 59 601 2001 321 2008 60 2009 62 38 2019 40 41 123 792 2010 59 125 601 2011 38 2020 40 41 601 123 792 2012 59 125 865 2021 40 2022 2023 41 123 2012 61 2023 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 64, 'CountStmt': 35, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 55, 'CountStmtDecl': 17, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 9, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 55, 'CountLineCodeExe': 21, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 78, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 6, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclInstanceVariableProtected': 0}"
98578,C++,"class PCIDSK_DLL BlockTileDir : public BlockDir
{
public:
#pragma pack(push, 1)

    /// The block layer info structure.
    struct BlockLayerInfo
    {
        uint16 nLayerType = 0;
        uint32 nStartBlock = 0;
        uint32 nBlockCount = 0;
        uint64 nLayerSize = 0;
    };

    /// The tile layer info structure.
    struct TileLayerInfo
    {
        uint32 nXSize;
        uint32 nYSize;
        uint32 nTileXSize;
        uint32 nTileYSize;
        char   szDataType[4];
        char   szCompress[8];
        uint16 bNoDataValid;
        double dfNoDataValue;
    };

#pragma pack(pop)

    /// The block layer info list type.
    typedef std::vector<BlockLayerInfo *> BlockLayerInfoList;

    /// The tile layer info list type.
    typedef std::vector<TileLayerInfo *> TileLayerInfoList;

protected:
    /// The block layer info list.
    BlockLayerInfoList  moLayerInfoList;

    /// The tile layer info list.
    TileLayerInfoList   moTileLayerInfoList;

    /// The free block layer info.
    BlockLayerInfo      msFreeBlockLayer{};

    virtual uint32      GetNewBlockCount(void) const override;

    void                SwapBlockLayer(BlockLayerInfo * psBlockLayer);
    void                SwapTileLayer(TileLayerInfo * psTileLayer);
    void                SwapBlock(BlockInfo * psBlock, size_t nCount);

public:
    BlockTileDir(BlockFile * poFile, uint16 nSegment);
    BlockTileDir(BlockFile * poFile, uint16 nSegment, uint16 nVersion);

    virtual             ~BlockTileDir(void);

    BlockTileLayer *    GetTileLayer(uint32 iLayer);
};",0,587 2000 2001 58 777 2002 123 777 58 35 769 2003 40 2004 44 1501 41 331 816 2005 123 2006 2007 61 1500 59 2008 2009 61 1500 59 2008 2010 61 1500 59 2011 2012 61 1500 59 125 59 331 816 2013 123 2014 2015 59 2014 2016 59 2014 2017 59 2014 2018 59 582 2019 91 1502 93 59 582 2020 91 1502 93 59 2021 2022 59 625 2023 59 125 59 35 769 2003 40 2024 41 331 833 2025 321 2026 60 2005 42 62 2027 59 331 833 2025 321 2026 60 2013 42 62 2028 59 775 58 331 2027 2029 59 331 2028 2030 59 331 2005 2031 123 125 59 864 2032 2033 40 865 41 601 2034 59 865 2035 40 2005 42 2036 41 59 865 2037 40 2013 42 2038 41 59 865 2039 40 2040 42 2041 44 2042 2043 41 59 777 58 2001 40 2044 42 2045 44 2046 2047 41 59 2001 40 2044 42 2045 44 2046 2047 44 2046 2048 41 59 864 126 2001 40 865 41 59 2049 42 2050 40 2032 2051 41 59 125 59 ,"{'AvgLine': 7, 'CountLine': 119, 'CountStmt': 62, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 30, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 92, 'CountStmtDecl': 40, 'MaxCyclomatic': 4, 'SumCyclomatic': 15, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 18, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 94, 'CountLineCodeExe': 30, 'CountLineComment': 7, 'AltAvgLineComment': 0, 'AltCountLineBlank': 18, 'CountClassCoupled': 4, 'CountClassDerived': 2, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 40, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.08', 'AltCountLineComment': 7, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 4, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 3}"
98780,C++,"class STACTARasterBand final: public GDALRasterBand
{
        GDALColorInterp m_eColorInterp = GCI_Undefined;
        int             m_bHasNoDataValue = false;
        double          m_dfNoData = 0;

    public:
        STACTARasterBand(STACTADataset* poDSIn, int nBandIn,
                         GDALRasterBand* poProtoBand);
        CPLErr IReadBlock(int nBlockXOff, int nBlockYOff, void* pImage) override;
        CPLErr IRasterIO( GDALRWFlag, int, int, int, int,
                      void *, int, int, GDALDataType,
                      GSpacing, GSpacing,
                      GDALRasterIOExtraArg* psExtraArg ) override;
        GDALColorInterp GetColorInterpretation() override { return m_eColorInterp; }
        int GetOverviewCount() override;
        GDALRasterBand* GetOverview(int nIdx) override;
        double GetNoDataValue(int* pbHasNoData = nullptr) override;
};",0,587 2000 2001 58 777 2002 123 2003 2004 61 2005 59 704 2006 61 655 59 625 2007 61 1500 59 777 58 2000 40 2008 42 2009 44 704 2010 44 2002 42 2011 41 59 2012 2013 40 704 2014 44 704 2015 44 865 42 2016 41 2017 59 2012 2018 40 2019 44 704 44 704 44 704 44 704 44 865 42 44 704 44 704 44 2020 44 2021 44 2021 44 2022 42 2023 41 2017 59 2003 2024 40 41 2017 123 792 2004 59 125 704 2025 40 41 2017 59 2002 42 2026 40 704 2027 41 2017 59 625 2028 40 704 42 2029 61 753 41 2017 59 125 59 ,"{'AvgLine': 9, 'CountLine': 84, 'CountStmt': 35, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 20, 'MaxEssential': 3, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 82, 'CountStmtDecl': 16, 'MaxCyclomatic': 3, 'SumCyclomatic': 11, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 82, 'CountLineCodeExe': 29, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 26, 'CountLineInactive': 0, 'CountDeclMethodAll': 101, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
98801,C++,"    class PCIDSK_DLL PCIDSK_BPCT
    {
    public:
        virtual ~PCIDSK_BPCT() {}

/**
\brief Read a PCT Segment (SEG_BPCT).

@param vBPCT  Breakpoint Pseudo-Color Table buffer into which the breakpoint
pseudo-color table is read.  It consists of a vector of BPCTEntry.

*/
        virtual void ReadBPCT( std::vector<BPCTEntry>& vBPCT) = 0;

/**
\brief Write a BPCT Segment.

@param vBPCT  Breakpoint Pseudo-Color Table buffer from which the breakpoint
pseudo-color table is written.  It consists of a vector of BPCTEntry.

*/
        virtual void WriteBPCT( const std::vector<BPCTEntry>& vBPCT) = 0;
    };",0,587 2000 2001 123 777 58 864 126 2001 40 41 123 125 306 864 865 2002 40 2003 321 2004 60 2005 62 38 2006 41 61 1500 59 306 864 865 2007 40 601 2003 321 2004 60 2005 62 38 2006 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 23, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 14, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '2.00', 'AltCountLineComment': 14, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98816,C++,"class LockedRefCount
{
private:
    int m_nRefCount;
    CPLMutex *m_hMutex;

    CPL_DISALLOW_COPY_ASSIGN(LockedRefCount)

public:
    explicit LockedRefCount(int initCount=1)
    {
        m_nRefCount = initCount;
        m_hMutex = CPLCreateMutex();
        CPLReleaseMutex( m_hMutex );
    }
    ~LockedRefCount()
    {
        CPLDestroyMutex( m_hMutex );
        m_hMutex = nullptr;
    }

    void IncRef()
    {
        CPLMutexHolderD( &m_hMutex );
        m_nRefCount++;
    }

    // returns true if reference count now 0
    bool DecRef()
    {
        CPLMutexHolderD( &m_hMutex );
        m_nRefCount--;
        return m_nRefCount <= 0;
    }
};",0,587 2000 123 773 58 704 2001 59 2002 42 2003 59 2004 40 2000 41 777 58 648 2000 40 704 2005 61 1501 41 123 2001 61 2005 59 2003 61 2006 40 41 59 2007 40 2003 41 59 125 126 2000 40 41 123 2008 40 2003 41 59 2003 61 753 59 125 865 2009 40 41 123 2010 40 38 2003 41 59 2001 349 59 125 330 569 2011 40 41 123 2012 40 38 2003 41 59 2001 338 59 792 2001 329 1500 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 35, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 30, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 30, 'CountLineCodeExe': 9, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 41, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
98948,C++,"class PostGISRasterTileDataset final: public GDALDataset {
    friend class PostGISRasterDataset;
    friend class PostGISRasterRasterBand;
    friend class PostGISRasterTileRasterBand;
private:
    PostGISRasterDataset* poRDS;
    char * pszPKID;
    double adfGeoTransform[6];

    CPL_DISALLOW_COPY_ASSIGN(PostGISRasterTileDataset)

public:
    PostGISRasterTileDataset(PostGISRasterDataset* poRDS,
                             int nXSize,
                             int nYSize);
    ~PostGISRasterTileDataset();
    CPLErr GetGeoTransform(double *) override;
    void   GetExtent(double* pdfMinX, double* pdfMinY, double* pdfMaxX, double* pdfMaxY) const;
    const char* GetPKID() const { return pszPKID; }
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 667 587 2004 59 667 587 2005 59 773 58 2003 42 2006 59 582 42 2007 59 625 2008 91 1502 93 59 2009 40 2000 41 777 58 2000 40 2003 42 2006 44 704 2010 44 704 2011 41 59 126 2000 40 41 59 2012 2013 40 625 42 41 2014 59 865 2015 40 625 42 2016 44 625 42 2017 44 625 42 2018 44 625 42 2019 41 601 59 601 582 42 2020 40 41 601 123 792 2007 59 125 125 59 ,"{'AvgLine': 12, 'CountLine': 83, 'CountStmt': 42, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 26, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 71, 'CountStmtDecl': 16, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 7, 'AltCountLineCode': 71, 'CountLineCodeExe': 39, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 9, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 18, 'CountLineInactive': 0, 'CountDeclMethodAll': 149, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 6, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
98824,C++,"class VSIDummyCryptFilesystemHandler : public VSIFilesystemHandler
{
public:
    VSIDummyCryptFilesystemHandler() {}

    VSIVirtualHandle *Open( const char * /* pszFilename */,
                            const char * /* pszAccess */,
                            bool /* bSetError */,
                            CSLConstList /* papszOptions */ ) override
    {
        CPLError(CE_Failure, CPLE_NotSupported,
                 ""%s support not available in this build"", VSICRYPT_PREFIX);
        return nullptr;
    }

    int Stat( const char * /* pszFilename */,
              VSIStatBufL * /*pStatBuf */, int /* nFlags */ ) override
    {
        CPLError(CE_Failure, CPLE_NotSupported,
                 ""%s support not available in this build"", VSICRYPT_PREFIX);
        return -1;
    }
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 123 125 2002 42 2003 40 601 582 42 305 44 601 582 42 305 44 569 305 44 2004 305 41 2005 123 2006 40 2007 44 2008 44 362 44 2009 41 59 792 753 59 125 704 2010 40 601 582 42 305 44 2011 42 305 44 704 305 41 2005 123 2012 40 2013 44 2014 44 362 44 2015 41 59 792 45 1501 59 125 125 59 ,"{'AvgLine': 5, 'CountLine': 23, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 21, 'CountLineCodeExe': 6, 'CountLineComment': 6, 'AltAvgLineComment': 2, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 29, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.29', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98854,C++,"class OGREDIGEOFEADesc
{
    public:
        OGREDIGEOFEADesc() {}

        std::vector< strstrType > aosAttIdVal; /* e.g. (TEX2_id,BECHEREL),(IDU_id,022) */
        CPLString osSCP;                       /* e.g. COMMUNE_id */
        CPLString osQUP_RID;                   /* e.g. Actualite_Objet_X */
};",0,587 2000 123 777 58 2000 40 41 123 125 2001 321 2002 60 2003 62 2004 59 305 2005 2006 59 305 2005 2007 59 305 125 59 ,"{'AvgLine': 1, 'CountLine': 9, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 8, 'CountLineCodeExe': 1, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.38', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98984,C++,"    class Mutex
    {
    public:
        virtual ~Mutex() {}

        virtual int  Acquire() = 0;
        virtual int  Release() = 0;
    };",0,587 2000 123 777 58 864 126 2000 40 41 123 125 864 704 2001 40 41 61 1500 59 864 704 2002 40 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99019,C++,"class CTGRasterBand final: public GDALPamRasterBand
{
    friend class CTGDataset;

    char** papszCategories;

  public:

    CTGRasterBand( CTGDataset *, int );
    ~CTGRasterBand() override;

    CPLErr IReadBlock( int, int, void * ) override;
    double GetNoDataValue( int *pbSuccess = nullptr ) override;
    char **GetCategoryNames() override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 582 42 42 2004 59 777 58 2000 40 2003 42 44 704 41 59 126 2000 40 41 2005 59 2006 2007 40 704 44 704 44 865 42 41 2005 59 625 2008 40 704 42 2009 61 753 41 2005 59 582 42 42 2010 40 41 2005 59 125 59 ,"{'AvgLine': 12, 'CountLine': 75, 'CountStmt': 36, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 28, 'MaxEssential': 3, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 62, 'CountStmtDecl': 12, 'MaxCyclomatic': 6, 'SumCyclomatic': 11, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 62, 'CountLineCodeExe': 30, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 13, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 133, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 57, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99201,C++,"class CPLSafeIntOverflowDivisionByZero: public CPLSafeIntOverflow
{
public:
    inline CPLSafeIntOverflowDivisionByZero() {}
};",0,587 2000 58 777 2001 123 777 58 700 2000 40 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 5, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 5, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 5, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99204,C++,"class LTIVSIStream : public LTIOStreamInf
{
  public:
    LTIVSIStream();
    LT_STATUS initialize( const char *, const char * );
    LT_STATUS initialize( LTIVSIStream* ltiVSIStream );
    ~LTIVSIStream();

    bool isEOF() override;
    bool isOpen() override;

    LT_STATUS open() override;
    LT_STATUS close() override;

    lt_uint32 read( lt_uint8 *, lt_uint32 ) override;
    lt_uint32 write( const lt_uint8 *, lt_uint32 ) override;

    LT_STATUS seek( lt_int64, LTIOSeekDir ) override;
    lt_int64 tell() override;

    LTIOStreamInf* duplicate() override;

    LT_STATUS getLastError() const override;

    const char* getID() const override;

  private:
    VSIVirtualHandle    *poFileHandle;
    int                 nError;
    int                 *pnRefCount;
    int                 bIsOpen;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 2002 2003 40 601 582 42 44 601 582 42 41 59 2002 2003 40 2000 42 2004 41 59 126 2000 40 41 59 569 2005 40 41 2006 59 569 2007 40 41 2006 59 2002 2008 40 41 2006 59 2002 2009 40 41 2006 59 2010 2011 40 2012 42 44 2010 41 2006 59 2010 2013 40 601 2012 42 44 2010 41 2006 59 2002 2014 40 2015 44 2016 41 2006 59 2015 2017 40 41 2006 59 2001 42 2018 40 41 2006 59 2002 2019 40 41 601 2006 59 601 582 42 2020 40 41 601 2006 59 773 58 2021 42 2022 59 704 2023 59 704 42 2024 59 704 2025 59 125 59 ,"{'AvgLine': 10, 'CountLine': 196, 'CountStmt': 75, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 38, 'MaxEssential': 1, 'SumEssential': 15, 'AvgCyclomatic': 1, 'CountLineCode': 169, 'CountStmtDecl': 29, 'MaxCyclomatic': 3, 'SumCyclomatic': 21, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 27, 'CountStmtEmpty': 10, 'AltAvgLineBlank': 1, 'CountDeclMethod': 15, 'AltCountLineCode': 169, 'CountLineCodeExe': 65, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 27, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 15, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 59, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 16, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclInstanceVariableProtected': 0}"
99232,C++,"class OGRMSSQLSpatialDriver final: public OGRSFDriver
{
  public:
    virtual ~OGRMSSQLSpatialDriver();

    const char *GetName() override;
    OGRDataSource *Open( const char *, int ) override;

    virtual OGRDataSource *CreateDataSource( const char *pszName,
                                             char ** = nullptr ) override;

    int                 TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 864 126 2000 40 41 59 601 582 42 2003 40 41 2004 59 2005 42 2006 40 601 582 42 44 704 41 2004 59 864 2005 42 2007 40 601 582 42 2008 44 582 42 42 61 753 41 2004 59 704 2009 40 601 582 42 41 2004 59 125 59 ,"{'AvgLine': 10, 'CountLine': 66, 'CountStmt': 24, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 17, 'MaxEssential': 3, 'SumEssential': 9, 'AvgCyclomatic': 2, 'CountLineCode': 54, 'CountStmtDecl': 7, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 1, 'CountDeclMethod': 5, 'AltCountLineCode': 54, 'CountLineCodeExe': 16, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 12, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 45, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99288,C++,"class GMLReadState
{
    std::vector<std::string> aosPathComponents;

public:
    GMLReadState();
    ~GMLReadState();

    void        PushPath( const char *pszElement, int nLen = -1 );
    void        PopPath();

    const char  *GetLastComponent() const {
        return ( m_nPathLength == 0 ) ? """" : aosPathComponents[m_nPathLength-1].c_str();
    }

    size_t GetLastComponentLen() const {
        return ( m_nPathLength == 0 ) ? 0: aosPathComponents[m_nPathLength-1].size();
    }

    void        Reset();

    GMLFeature  *m_poFeature;
    GMLReadState *m_poParentState;

    std::string  osPath; // element path ... | as separator.
    int          m_nPathLength;
};",0,587 2000 123 2001 321 2002 60 2001 321 2003 62 2004 59 777 58 2000 40 41 59 126 2000 40 41 59 865 2005 40 601 582 42 2006 44 704 2007 61 45 1501 41 59 865 2008 40 41 59 601 582 42 2009 40 41 601 123 792 40 2010 323 1500 41 63 362 58 2004 91 2010 45 1501 93 46 2011 40 41 59 125 2012 2013 40 41 601 123 792 40 2014 323 1500 41 63 1500 58 2004 91 2014 45 1501 93 46 2015 40 41 59 125 865 2016 40 41 59 2017 42 2018 59 2000 42 2019 59 2001 321 2003 2020 59 330 704 2021 59 125 59 ,"{'AvgLine': 7, 'CountLine': 75, 'CountStmt': 30, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 64, 'CountStmtDecl': 15, 'MaxCyclomatic': 4, 'SumCyclomatic': 10, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 11, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 7, 'AltCountLineCode': 64, 'CountLineCodeExe': 18, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 5, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99321,C++,"    class CPL_DLL ConstIterator
    {
            const CPLJSONArray& m_oSelf;
            int m_nIdx;
            mutable CPLJSONObject m_oObj{};

        public:
            ConstIterator(const CPLJSONArray& oSelf, bool bStart): m_oSelf(oSelf), m_nIdx(bStart ? 0 : oSelf.Size()) {}
            ~ConstIterator() = default;
            CPLJSONObject& operator*() const { m_oObj = m_oSelf[m_nIdx]; return m_oObj; }
            ConstIterator& operator++() { m_nIdx ++; return *this; }
            bool operator==(const ConstIterator& it) const { return m_nIdx == it.m_nIdx; }
            bool operator!=(const ConstIterator& it) const { return m_nIdx != it.m_nIdx; }
    };",0,587 2000 2001 123 601 2002 38 2003 59 704 2004 59 740 2005 2006 123 125 59 777 58 2001 40 601 2002 38 2007 44 569 2008 41 58 2003 40 2007 41 44 2004 40 2008 63 1500 58 2007 46 2009 40 41 41 123 125 126 2001 40 41 61 613 59 2005 38 758 42 40 41 601 123 2006 61 2003 91 2004 93 59 792 2006 59 125 2001 38 758 349 40 41 123 2004 349 59 792 42 823 59 125 569 758 323 40 601 2001 38 2010 41 601 123 792 2004 323 2010 46 2004 59 125 569 758 340 40 601 2001 38 2010 41 601 123 792 2004 340 2010 46 2004 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 13, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 12, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 61, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclInstanceVariableProtected': 0}"
99398,C++,"class WSIOCILobFSHandle : public VSIFilesystemHandler
{
  public:
    WSIOCILobFSHandle();
    ~WSIOCILobFSHandle() override;

    VSIVirtualHandle *Open( const char *pszFilename,
                            const char *pszAccess,
                            bool bSetError,
                            CSLConstList /* papszOptions */ ) override;
    int               Stat( const char *pszFilename,
                            VSIStatBufL *pStatBuf, int nFlags ) override;

  private:
    OWConnection*     poConnection;
    OWStatement*      poStatement;
    OCILobLocator*    phLocator;

    char**            ParseIdentificator( const char* pszFilename );
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 126 2000 40 41 2002 59 2003 42 2004 40 601 582 42 2005 44 601 582 42 2006 44 569 2007 44 2008 305 41 2002 59 704 2009 40 601 582 42 2005 44 2010 42 2011 44 704 2012 41 2002 59 773 58 2013 42 2014 59 2015 42 2016 59 2017 42 2018 59 582 42 42 2019 40 601 582 42 2005 41 59 125 59 ,"{'AvgLine': 25, 'CountLine': 148, 'CountStmt': 53, 'MaxNesting': 1, 'AvgLineCode': 20, 'AvgEssential': 2, 'AvgLineBlank': 4, 'CountStmtExe': 43, 'MaxEssential': 5, 'SumEssential': 13, 'AvgCyclomatic': 3, 'CountLineCode': 121, 'CountStmtDecl': 13, 'MaxCyclomatic': 6, 'SumCyclomatic': 18, 'AltAvgLineCode': 20, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 27, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 4, 'CountDeclMethod': 5, 'AltCountLineCode': 121, 'CountLineCodeExe': 50, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 27, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 31, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
99437,C++,"class RadiometricProcessingRecord
{
public:
  explicit RadiometricProcessingRecord(std::ifstream & ifile);

  double Cal_Slope [12];
  double Cal_Offset [12];
};",0,587 2000 123 777 58 648 2000 40 2001 321 2002 38 2003 41 59 625 2004 91 1503 93 59 625 2005 91 1503 93 59 125 59 ,"{'AvgLine': 14, 'CountLine': 22, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 3, 'CountLineCode': 19, 'CountStmtDecl': 5, 'MaxCyclomatic': 3, 'SumCyclomatic': 3, 'AltAvgLineCode': 12, 'AvgLineComment': 1, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 1, 'AltCountLineCode': 19, 'CountLineCodeExe': 6, 'CountLineComment': 1, 'AltAvgLineComment': 1, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99444,C++,"template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};",0,822 60 835 2000 62 587 2001 123 816 2002 123 2000 42 2003 59 2002 40 2000 42 2004 41 58 2003 40 2004 41 123 125 126 2002 40 41 123 619 2003 59 125 2002 38 758 61 40 2002 38 2005 41 123 2000 42 2006 61 2003 59 2003 61 1500 59 619 2006 59 2003 61 2005 46 2003 59 2005 46 2003 61 1500 59 792 42 823 59 125 125 2007 59 2001 38 758 61 40 601 2001 60 2000 62 38 2008 41 59 2001 40 601 2001 60 2000 62 38 2008 41 59 777 58 2001 40 41 58 2007 40 1500 41 123 125 2001 38 758 61 40 601 2000 38 2009 41 123 2002 2010 40 744 2000 40 2009 41 41 59 2007 61 2010 59 792 42 823 59 125 758 2000 38 40 41 601 123 792 42 2007 46 2011 59 125 2000 42 758 38 40 41 123 792 2007 46 2012 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 15, 'CountStmt': 26, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 16, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 6, 'AltCountLineCode': 15, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99459,C++,"class CPL_DLL OGRAbstractProxiedLayer : public OGRLayer
{
        CPL_DISALLOW_COPY_ASSIGN(OGRAbstractProxiedLayer)

        friend class OGRLayerPool;

        OGRAbstractProxiedLayer   *poPrevLayer; /* Chain to a layer that was used more recently */
        OGRAbstractProxiedLayer   *poNextLayer; /* Chain to a layer that was used less recently */

    protected:
        OGRLayerPool              *poPool;

        virtual void    CloseUnderlyingLayer() = 0;

    public:
        explicit        OGRAbstractProxiedLayer(OGRLayerPool* poPool);
        virtual        ~OGRAbstractProxiedLayer();
};",0,587 2000 2001 58 777 2002 123 2003 40 2001 41 667 587 2004 59 2001 42 2005 59 305 2001 42 2006 59 305 775 58 2004 42 2007 59 864 865 2008 40 41 61 1500 59 777 58 648 2001 40 2004 42 2007 41 59 864 126 2001 40 41 59 125 59 ,"{'AvgLine': 6, 'CountLine': 30, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 1, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 24, 'CountLineCodeExe': 4, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 3, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 87, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 8, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 73, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 1}"
99475,C++,    class FieldNotFoundException: public std::exception {};,0,587 2000 58 777 2001 321 2002 123 125 59 ,"{'AvgLine': 0, 'CountLine': 1, 'CountStmt': 0, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 1, 'CountStmtDecl': 0, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 1, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99632,C++,"class OGRAmigoCloudResultLayer final: public OGRAmigoCloudLayer
{
        OGRFeature          *poFirstFeature;

        virtual CPLString    GetSRS_SQL(const char* pszGeomCol) override;

    public:
        OGRAmigoCloudResultLayer( OGRAmigoCloudDataSource* poDS,
                                               const char * pszRawStatement );
        virtual             ~OGRAmigoCloudResultLayer();

        virtual OGRFeatureDefn *GetLayerDefnInternal(json_object* poObjIn) override;
        virtual OGRFeature  *GetNextRawFeature() override;

        int                 IsOK();
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 864 2005 2006 40 601 582 42 2007 41 2008 59 777 58 2000 40 2009 42 2010 44 601 582 42 2011 41 59 864 126 2000 40 41 59 864 2012 42 2013 40 2014 42 2015 41 2008 59 864 2003 42 2016 40 41 2008 59 704 2017 40 41 59 125 59 ,"{'AvgLine': 12, 'CountLine': 88, 'CountStmt': 38, 'MaxNesting': 3, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 32, 'MaxEssential': 4, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 76, 'CountStmtDecl': 13, 'MaxCyclomatic': 4, 'SumCyclomatic': 11, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 76, 'CountLineCodeExe': 36, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 10, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 103, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99653,C++,"class ITABFeatureFont
{
  protected:
    int         m_nFontDefIndex;
    TABFontDef  m_sFontDef;
  public:
    ITABFeatureFont();
    virtual ~ITABFeatureFont() {}
    int         GetFontDefIndex() const {return m_nFontDefIndex;}
    TABFontDef *GetFontDefRef() {return &m_sFontDef;}
    const TABFontDef *GetFontDefRef() const {return &m_sFontDef;}

    const char *GetFontNameRef() const {return m_sFontDef.szFontName;}

    void        SetFontName(const char *pszName);

    void        DumpFontDef(FILE *fpOut = nullptr);
};",0,587 2000 123 775 58 704 2001 59 2002 2003 59 777 58 2000 40 41 59 864 126 2000 40 41 123 125 704 2004 40 41 601 123 792 2001 59 125 2002 42 2005 40 41 123 792 38 2003 59 125 601 2002 42 2005 40 41 601 123 792 38 2003 59 125 601 582 42 2006 40 41 601 123 792 2003 46 2007 59 125 865 2008 40 601 582 42 2009 41 59 865 2010 40 2011 42 2012 61 753 41 59 125 59 ,"{'AvgLine': 3, 'CountLine': 38, 'CountStmt': 24, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 33, 'CountLineCodeExe': 14, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 3, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 2}"
99675,C++,"    class PCIDSKGCPSegment
    {
    public:
        //! Return all GCPs in the segment
        virtual std::vector<PCIDSK::GCP> const& GetGCPs(void) const = 0;

        //! Write the given GCPs to the segment. If the segment already exists, it will be replaced with this one.
        virtual void SetGCPs(std::vector<PCIDSK::GCP> const& gcps) = 0;

        //! Return the count of GCPs in the segment
        virtual unsigned int GetGCPCount(void) const = 0;

        //! Clear a GCP Segment
        virtual void ClearGCPs(void) = 0;

        //! Virtual Destructor
        virtual ~PCIDSKGCPSegment(void) {}
    };",0,587 2000 123 777 58 330 864 2001 321 2002 60 2003 321 2004 62 601 38 2005 40 865 41 601 61 1500 59 330 864 865 2006 40 2001 321 2002 60 2003 321 2004 62 601 38 2007 41 61 1500 59 330 864 856 704 2008 40 865 41 601 61 1500 59 330 864 865 2009 40 865 41 61 1500 59 330 864 126 2000 40 865 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 18, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 4, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 9, 'CountLineCodeExe': 0, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 4, 'CountClassCoupled': 2, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.56', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100037,C++,"class MEMDimension CPL_NON_FINAL: public GDALDimension
{
    std::weak_ptr<GDALMDArray> m_poIndexingVariable{};

public:
    MEMDimension(const std::string& osParentName,
                 const std::string& osName,
                 const std::string& osType,
                 const std::string& osDirection,
                 GUInt64 nSize);

    std::shared_ptr<GDALMDArray> GetIndexingVariable() const override { return m_poIndexingVariable.lock(); }

    bool SetIndexingVariable(std::shared_ptr<GDALMDArray> poIndexingVariable) override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 123 125 59 777 58 2000 40 601 2003 321 2007 38 2008 44 601 2003 321 2007 38 2009 44 601 2003 321 2007 38 2010 44 601 2003 321 2007 38 2011 44 2012 2013 41 59 2003 321 2014 60 2005 62 2015 40 41 601 2016 123 792 2006 46 2017 40 41 59 125 569 2018 40 2003 321 2014 60 2005 62 2019 41 2016 59 125 59 ,"{'AvgLine': 4, 'CountLine': 28, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 25, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 25, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100044,C++,"    class SGWriter_Exception : public SG_Exception
    {
        public:
            const char * get_err_msg() override { return ""A general error occurred when writing a netCDF dataset""; }
    };",0,587 2000 58 777 2001 123 777 58 601 582 42 2002 40 41 2003 123 792 362 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 5, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 5, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 5, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 6, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99686,C++,"class SDTSPointReader : public SDTSIndexedReader
{
    SDTS_IREF   *poIREF;

  public:
                explicit SDTSPointReader( SDTS_IREF * );
    virtual    ~SDTSPointReader();

    int         Open( const char * );
    SDTSRawPoint *GetNextPoint();
    void        Close();

    SDTSFeature *GetNextRawFeature() override { return GetNextPoint(); }
};",0,587 2000 58 777 2001 123 2002 42 2003 59 777 58 648 2000 40 2002 42 41 59 864 126 2000 40 41 59 704 2004 40 601 582 42 41 59 2005 42 2006 40 41 59 865 2007 40 41 59 2008 42 2009 40 41 2010 123 792 2006 40 41 59 125 125 59 ,"{'AvgLine': 7, 'CountLine': 55, 'CountStmt': 21, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 13, 'MaxEssential': 4, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 38, 'CountStmtDecl': 10, 'MaxCyclomatic': 4, 'SumCyclomatic': 9, 'AltAvgLineCode': 4, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 38, 'CountLineCodeExe': 14, 'CountLineComment': 6, 'AltAvgLineComment': 1, 'AltCountLineBlank': 11, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.16', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100077,C++,"class IntergraphRGBBand final: public IntergraphRasterBand
{
public:
    IntergraphRGBBand( IntergraphDataset *poDS,
                       int nBand,
                       int nBandOffset,
                       int nRGorB );

    virtual CPLErr IReadBlock( int nBlockXOff, int nBlockYOff, void *pImage ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 2004 44 704 2005 44 704 2006 44 704 2007 41 59 864 2008 2009 40 704 2010 44 704 2011 44 865 42 2012 41 2013 59 125 59 ,"{'AvgLine': 24, 'CountLine': 58, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 3, 'CountLineCode': 45, 'CountStmtDecl': 4, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 18, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 2, 'AltCountLineCode': 45, 'CountLineCodeExe': 30, 'CountLineComment': 6, 'AltAvgLineComment': 3, 'AltCountLineBlank': 7, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 145, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 6, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100071,C++,"class HDF4SwathGroup final: public GDALGroup
{
    std::shared_ptr<HDF4SharedResources> m_poShared;
    std::shared_ptr<HDF4SwathHandle> m_poSwathHandle;
    mutable std::vector<std::shared_ptr<GDALDimension>> m_dims{};

public:
    HDF4SwathGroup(const std::string& osParentName,
              const std::string& osName,
              const std::shared_ptr<HDF4SharedResources>& poShared,
              const std::shared_ptr<HDF4SwathHandle>& poSwathHandle):
        GDALGroup(osParentName, osName),
        m_poShared(poShared),
        m_poSwathHandle(poSwathHandle)
    {
    }

    std::vector<std::shared_ptr<GDALDimension>> GetDimensions(CSLConstList papszOptions = nullptr) const override;

    std::vector<std::shared_ptr<GDALAttribute>> GetAttributes(CSLConstList papszOptions = nullptr) const override;

    std::vector<std::string> GetGroupNames(CSLConstList papszOptions) const override;
    std::shared_ptr<GDALGroup> OpenGroup(const std::string& osName, CSLConstList) const override;
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 2003 321 2004 60 2007 62 2008 59 740 2003 321 2009 60 2003 321 2004 60 2010 355 2011 123 125 59 777 58 2000 40 601 2003 321 2012 38 2013 44 601 2003 321 2012 38 2014 44 601 2003 321 2004 60 2005 62 38 2015 44 601 2003 321 2004 60 2007 62 38 2016 41 58 2002 40 2013 44 2014 41 44 2006 40 2015 41 44 2008 40 2016 41 123 125 2003 321 2009 60 2003 321 2004 60 2010 355 2017 40 2018 2019 61 753 41 601 2020 59 2003 321 2009 60 2003 321 2004 60 2021 355 2022 40 2018 2019 61 753 41 601 2020 59 2003 321 2009 60 2003 321 2012 62 2023 40 2018 2019 41 601 2020 59 2003 321 2004 60 2002 62 2024 40 601 2003 321 2012 38 2014 44 2018 41 601 2020 59 125 59 ,"{'AvgLine': 20, 'CountLine': 115, 'CountStmt': 36, 'MaxNesting': 2, 'AvgLineCode': 19, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 17, 'MaxEssential': 4, 'SumEssential': 8, 'AvgCyclomatic': 2, 'CountLineCode': 108, 'CountStmtDecl': 25, 'MaxCyclomatic': 5, 'SumCyclomatic': 14, 'AltAvgLineCode': 19, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 108, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 7, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 25, 'CountLineInactive': 0, 'CountDeclMethodAll': 33, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 4, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99698,C++,"class CPL_DLL GDALAttributeString final: public GDALAttribute
{
    std::vector<std::shared_ptr<GDALDimension>> m_dims{};
    GDALExtendedDataType m_dt = GDALExtendedDataType::CreateString();
    std::string m_osValue;

protected:

    bool IRead(const GUInt64* ,
               const size_t* ,
               const GInt64* ,
               const GPtrDiff_t* ,
               const GDALExtendedDataType& bufferDataType,
               void* pDstBuffer) const override;

public:
    GDALAttributeString(const std::string& osParentName,
                  const std::string& osName,
                  const std::string& osValue,
                  GDALExtendedDataTypeSubType eSubType = GEDTST_NONE);

    const std::vector<std::shared_ptr<GDALDimension>>& GetDimensions() const override;

    const GDALExtendedDataType &GetDataType() const override;
};",0,587 2000 2001 2002 58 777 2003 123 2004 321 2005 60 2004 321 2006 60 2007 355 2008 123 125 59 2009 2010 61 2009 321 2011 40 41 59 2004 321 2012 2013 59 775 58 569 2014 40 601 2015 42 44 601 2016 42 44 601 2017 42 44 601 2018 42 44 601 2009 38 2019 44 865 42 2020 41 601 2021 59 777 58 2001 40 601 2004 321 2012 38 2022 44 601 2004 321 2012 38 2023 44 601 2004 321 2012 38 2024 44 2025 2026 61 2027 41 59 601 2004 321 2005 60 2004 321 2006 60 2007 355 38 2028 40 41 601 2021 59 601 2009 38 2029 40 41 601 2021 59 125 59 ,"{'AvgLine': 8, 'CountLine': 58, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 3, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 53, 'CountStmtDecl': 9, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 4, 'AltCountLineCode': 53, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 36, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99716,C++,"class OGRMDBDatabase
{
    OGRMDBJavaEnv* env = nullptr;
    jobject database = nullptr;

    OGRMDBDatabase();
public:
    static OGRMDBDatabase* Open(OGRMDBJavaEnv* env, const char* pszName);
    ~OGRMDBDatabase();

    std::vector<CPLString>   apoTableNames;
    int                FetchTableNames();
    OGRMDBTable* GetTable(const char* pszTableName);
};",0,587 2000 123 2001 42 2002 61 753 59 2003 2004 61 753 59 2000 40 41 59 777 58 809 2000 42 2005 40 2001 42 2002 44 601 582 42 2006 41 59 126 2000 40 41 59 2007 321 2008 60 2009 62 2010 59 704 2011 40 41 59 2012 42 2013 40 601 582 42 2014 41 59 125 59 ,"{'AvgLine': 17, 'CountLine': 101, 'CountStmt': 48, 'MaxNesting': 1, 'AvgLineCode': 14, 'AvgEssential': 3, 'AvgLineBlank': 2, 'CountStmtExe': 28, 'MaxEssential': 5, 'SumEssential': 15, 'AvgCyclomatic': 3, 'CountLineCode': 85, 'CountStmtDecl': 21, 'MaxCyclomatic': 5, 'SumCyclomatic': 16, 'AltAvgLineCode': 14, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 5, 'AltCountLineCode': 85, 'CountLineCodeExe': 18, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountLineInactive': 0, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 3, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99735,C++,"class OCAD_EXTERN CADXLine : public CADRay
{
public:
    CADXLine();
    virtual ~CADXLine(){}

    virtual void print() const override;
};",0,587 2000 2001 58 777 2002 123 777 58 2001 40 41 59 864 126 2001 40 41 123 125 864 865 2003 40 41 601 2004 59 125 59 ,"{'AvgLine': 5, 'CountLine': 22, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 21, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 32, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99798,C++,"class SDTSAttrRecord : public SDTSFeature
{
  public:
                SDTSAttrRecord();
    virtual    ~SDTSAttrRecord();

    /** The entire DDFRecord read from the file. */
    DDFRecord   *poWholeRecord;

    /** The ATTR DDFField with the user attribute.  Each subfield is a
        attribute value. */

    DDFField    *poATTR;

    virtual void Dump( FILE * ) override;
};",0,587 2000 58 777 2001 123 777 58 2000 40 41 59 864 126 2000 40 41 59 306 2002 42 2003 59 306 2004 42 2005 59 864 865 2006 40 2007 42 41 2008 59 125 59 ,"{'AvgLine': 5, 'CountLine': 32, 'CountStmt': 11, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 23, 'CountStmtDecl': 7, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 23, 'CountLineCodeExe': 6, 'CountLineComment': 3, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.13', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99802,C++,"class SysTileDir : virtual public CPCIDSKSegment
{
public:
    SysTileDir(PCIDSKFile * poFile, int nSegment, const char *pbySegmentData);

    virtual             ~SysTileDir(void);

    virtual void        Initialize(void) override final;
    virtual void        Synchronize(void) override final;

    void                LoadTileDir(void);
    void                CreateTileDir(void);

    BlockTileLayer *    GetTileLayer(uint32 nLayer);

    uint32              CreateTileLayer(uint32 nWidth, uint32 nHeight,
                                        uint32 nTileWidth, uint32 nTileHeight,
                                        eChanType nDataType,
                                        std::string oCompress);

private:
    BlockTileDir *      mpoTileDir;
};",0,587 2000 58 864 777 2001 123 777 58 2000 40 2002 42 2003 44 704 2004 44 601 582 42 2005 41 59 864 126 2000 40 865 41 59 864 865 2006 40 865 41 2007 2008 59 864 865 2009 40 865 41 2007 2008 59 865 2010 40 865 41 59 865 2011 40 865 41 59 2012 42 2013 40 2014 2015 41 59 2014 2016 40 2014 2017 44 2014 2018 44 2014 2019 44 2014 2020 44 2021 2022 44 2023 321 2024 2025 41 59 773 58 2026 42 2027 59 125 59 ,"{'AvgLine': 11, 'CountLine': 115, 'CountStmt': 43, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 33, 'MaxEssential': 4, 'SumEssential': 13, 'AvgCyclomatic': 2, 'CountLineCode': 98, 'CountStmtDecl': 15, 'MaxCyclomatic': 4, 'SumCyclomatic': 17, 'AltAvgLineCode': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 8, 'AltCountLineCode': 98, 'CountLineCodeExe': 38, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 16, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 18, 'CountLineInactive': 0, 'CountDeclMethodAll': 58, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.01', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 30, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99889,C++,"class TigerTLIDRange final: public TigerFileBase
{
public:
                      TigerTLIDRange( OGRTigerDataSource *, const char * );
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 125 59 ,"{'AvgLine': 21, 'CountLine': 26, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 2, 'CountLineCode': 20, 'CountStmtDecl': 1, 'MaxCyclomatic': 2, 'SumCyclomatic': 2, 'AltAvgLineCode': 15, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 3, 'CountDeclMethod': 1, 'AltCountLineCode': 20, 'CountLineCodeExe': 10, 'CountLineComment': 3, 'AltAvgLineComment': 3, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.15', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99898,C++,"class BLXRasterBand final: public GDALPamRasterBand
{
    int overviewLevel;

  public:
    BLXRasterBand( BLXDataset *, int, int overviewLevel=0 );

    double  GetNoDataValue( int *pbSuccess = nullptr ) override;
    GDALColorInterp GetColorInterpretation(void) override;
    int GetOverviewCount() override;
    GDALRasterBand *GetOverview( int ) override;

    CPLErr IReadBlock( int, int, void * ) override;
};",0,587 2000 2001 58 777 2002 123 704 2003 59 777 58 2000 40 2004 42 44 704 44 704 2003 61 1500 41 59 625 2005 40 704 42 2006 61 753 41 2007 59 2008 2009 40 865 41 2007 59 704 2010 40 41 2007 59 2011 42 2012 40 704 41 2007 59 2013 2014 40 704 44 704 44 865 42 41 2007 59 125 59 ,"{'AvgLine': 8, 'CountLine': 65, 'CountStmt': 29, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 54, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AltAvgLineCode': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 54, 'CountLineCodeExe': 22, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 11, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 134, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99943,C++,"class TigerAreaLandmarks final: public TigerFileBase
{
public:
                      TigerAreaLandmarks( OGRTigerDataSource *, const char * );
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 2003 42 44 601 582 42 41 59 125 59 ,"{'AvgLine': 15, 'CountLine': 20, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 10, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 2, 'CountDeclMethod': 1, 'AltCountLineCode': 15, 'CountLineCodeExe': 6, 'CountLineComment': 3, 'AltAvgLineComment': 3, 'AltCountLineBlank': 2, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.20', 'AltCountLineComment': 3, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
99952,C++,"class ADSRange
{
  protected:

    int idx_first ; /* index of the first matched ADSR */
    int idx_last ;  /* index of the last matched ADSR */
    int off_first ; /* num. of lines from 1st matched ADSR to 1st MDSR */
    int off_last ;  /* num. of lines from last MDSR to last matched ADSR*/

    TimeDelta mjd_first ;  /* MDJ time of the first matched ADS record */
    TimeDelta mjd_last ;   /* MDJ time of the last matched ADS record */
    TimeDelta mjd_m_first ;  /* MDJ time of the first MDS record */
    TimeDelta mjd_m_last ;   /* MDJ time of the last MDS record */

  public:
    /* CONSTRUCTOR */
    ADSRange() :
        idx_first(0), idx_last(0), off_first(0), off_last(0),
        mjd_first(0), mjd_last(0), mjd_m_first(0), mjd_m_last(0)
    {}

    ADSRange( const int idx_firstIn, const int idx_lastIn,
        const int off_firstIn, const int off_lastIn,
        const TimeDelta &mjd_firstIn, const TimeDelta &mjd_lastIn,
        const TimeDelta &mjd_m_firstIn, const TimeDelta &mjd_m_lastIn ) :
        idx_first(idx_firstIn), idx_last(idx_lastIn), off_first(off_firstIn),
        off_last(off_lastIn), mjd_first(mjd_firstIn), mjd_last(mjd_lastIn),
        mjd_m_first(mjd_m_firstIn), mjd_m_last(mjd_m_lastIn)
    {}

    /* get count of matched records */
    inline int getDSRCount( void ) const
    {
        return ( idx_last - idx_first + 1 ) ;
    }

    /* GETTERS */

    /* get index of the first matched ADS record */
    inline int getFirstIndex( void ) const
    {
        return this->idx_first ;
    }

    /* get index of the last matched ADS record */
    inline int getLastIndex( void ) const
    {
        return this->idx_last ;
    }

    /* get offset of the first matched ADS record */
    inline int getFirstOffset( void ) const
    {
        return this->off_first ;
    }

    /* get offset of the last matched ADS record */
    inline int getLastOffset( void ) const
    {
        return this->off_last ;
    }

    /* get MJD time of the first matched ADS record */
    inline TimeDelta getFirstTime( void ) const
    {
        return this->mjd_first ;
    }

    /* get MJD time of the last matched ADS record */
    inline TimeDelta getLastTime( void ) const
    {
        return this->mjd_last ;
    }

    /* get MJD time of the first MDS record */
    inline TimeDelta getMDSRFirstTime( void ) const
    {
        return this->mjd_m_first ;
    }

    /* get MJD time of the last MDS record */
    inline TimeDelta getMDSRLastTime( void ) const
    {
        return this->mjd_m_last ;
    }
};",0,587 2000 123 775 58 704 2001 59 305 704 2002 59 305 704 2003 59 305 704 2004 59 305 2005 2006 59 305 2005 2007 59 305 2005 2008 59 305 2005 2009 59 305 777 58 305 2000 40 41 58 2001 40 1500 41 44 2002 40 1500 41 44 2003 40 1500 41 44 2004 40 1500 41 44 2006 40 1500 41 44 2007 40 1500 41 44 2008 40 1500 41 44 2009 40 1500 41 123 125 2000 40 601 704 2010 44 601 704 2011 44 601 704 2012 44 601 704 2013 44 601 2005 38 2014 44 601 2005 38 2015 44 601 2005 38 2016 44 601 2005 38 2017 41 58 2001 40 2010 41 44 2002 40 2011 41 44 2003 40 2012 41 44 2004 40 2013 41 44 2006 40 2014 41 44 2007 40 2015 41 44 2008 40 2016 41 44 2009 40 2017 41 123 125 305 700 704 2018 40 865 41 601 123 792 40 2002 45 2001 43 1501 41 59 125 305 305 700 704 2019 40 865 41 601 123 792 823 354 2001 59 125 305 700 704 2020 40 865 41 601 123 792 823 354 2002 59 125 305 700 704 2021 40 865 41 601 123 792 823 354 2003 59 125 305 700 704 2022 40 865 41 601 123 792 823 354 2004 59 125 305 700 2005 2023 40 865 41 601 123 792 823 354 2006 59 125 305 700 2005 2024 40 865 41 601 123 792 823 354 2007 59 125 305 700 2005 2025 40 865 41 601 123 792 823 354 2008 59 125 305 700 2005 2026 40 865 41 601 123 792 823 354 2009 59 125 125 59 ,"{'AvgLine': 4, 'CountLine': 86, 'CountStmt': 44, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 61, 'CountStmtDecl': 31, 'MaxCyclomatic': 1, 'SumCyclomatic': 11, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 14, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 11, 'AltCountLineCode': 61, 'CountLineCodeExe': 14, 'CountLineComment': 19, 'AltAvgLineComment': 0, 'AltCountLineBlank': 14, 'CountClassCoupled': 1, 'CountClassDerived': 1, 'CountLineCodeDecl': 15, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.31', 'AltCountLineComment': 19, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 9, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 11, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 76, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 8}"
99958,C++,"class LevellerRasterBand final: public GDALPamRasterBand
{
    friend class LevellerDataset;

    float*      m_pLine;
    bool        m_bFirstTime;

public:

    explicit LevellerRasterBand(LevellerDataset*);
    virtual ~LevellerRasterBand();

    bool        Init();

    // Geomeasure support.
    virtual const char* GetUnitType() override;
    virtual double GetScale(int* pbSuccess = nullptr) override;
    virtual double GetOffset(int* pbSuccess = nullptr) override;

    virtual CPLErr IReadBlock( int, int, void * ) override;
    virtual CPLErr IWriteBlock( int, int, void * ) override;
    virtual CPLErr SetUnitType( const char* ) override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 660 42 2004 59 569 2005 59 777 58 648 2000 40 2003 42 41 59 864 126 2000 40 41 59 569 2006 40 41 59 330 864 601 582 42 2007 40 41 2008 59 864 625 2009 40 704 42 2010 61 753 41 2008 59 864 625 2011 40 704 42 2010 61 753 41 2008 59 864 2012 2013 40 704 44 704 44 865 42 41 2008 59 864 2012 2014 40 704 44 704 44 865 42 41 2008 59 864 2012 2015 40 601 582 42 41 2008 59 125 59 ,"{'AvgLine': 18, 'CountLine': 192, 'CountStmt': 73, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 44, 'MaxEssential': 5, 'SumEssential': 15, 'AvgCyclomatic': 2, 'CountLineCode': 131, 'CountStmtDecl': 27, 'MaxCyclomatic': 6, 'SumCyclomatic': 21, 'AltAvgLineCode': 13, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 29, 'CountStmtEmpty': 6, 'AltAvgLineBlank': 2, 'CountDeclMethod': 9, 'AltCountLineCode': 141, 'CountLineCodeExe': 65, 'CountLineComment': 23, 'AltAvgLineComment': 2, 'AltCountLineBlank': 29, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 30, 'CountLineInactive': 4, 'CountDeclMethodAll': 137, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.18', 'AltCountLineComment': 24, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 9, 'CountLinePreprocessor': 6, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 72, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100178,C++,"class FileGDBArraySetter
{
        double* padfValues;
    public:
        explicit FileGDBArraySetter(double* padfValuesIn) :
                                                padfValues(padfValuesIn) {}

        void set(int i, double dfValue)
        {
            padfValues[i] = dfValue;
        }
};",0,587 2000 123 625 42 2001 59 777 58 648 2000 40 625 42 2002 41 58 2001 40 2002 41 123 125 865 2003 40 704 2004 44 625 2005 41 123 2001 91 2004 93 61 2005 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 12, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 11, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99991,C++,"class GDALEXRIOStream final: public IStream, public OStream
{
  public:

    GDALEXRIOStream (VSILFILE* fp, const char* filename):
            IStream (filename), OStream (filename), m_fp (fp) {}
    ~GDALEXRIOStream() { VSIFCloseL(m_fp); }

    virtual bool        read (char c[/*n*/], int n) override;
    virtual void        write (const char c[/*n*/], int n) override;
    virtual IoInt64Type tellg () override;
    virtual IoInt64Type tellp () override { return tellg(); }
    virtual void        seekg (IoInt64Type pos) override;
    virtual void        seekp (IoInt64Type pos) override { return seekg(pos); }

  private:
    VSILFILE* m_fp;
};",0,587 2000 2001 58 777 2002 44 777 2003 123 777 58 2000 40 2004 42 2005 44 601 582 42 2006 41 58 2002 40 2006 41 44 2003 40 2006 41 44 2007 40 2005 41 123 125 126 2000 40 41 123 2008 40 2007 41 59 125 864 569 2009 40 582 2010 91 305 93 44 704 2011 41 2012 59 864 865 2013 40 601 582 2010 91 305 93 44 704 2011 41 2012 59 864 2014 2015 40 41 2012 59 864 2014 2016 40 41 2012 123 792 2015 40 41 59 125 864 865 2017 40 2014 2018 41 2012 59 864 865 2019 40 2014 2018 41 2012 123 792 2017 40 2018 41 59 125 773 58 2004 42 2007 59 125 59 ,"{'AvgLine': 4, 'CountLine': 48, 'CountStmt': 22, 'MaxNesting': 2, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 10, 'MaxCyclomatic': 3, 'SumCyclomatic': 11, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 8, 'AltCountLineCode': 45, 'CountLineCodeExe': 16, 'CountLineComment': 4, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.09', 'AltCountLineComment': 4, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 40, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
99998,C++,"class VSIBufferedReaderHandle final : public VSIVirtualHandle
{
    CPL_DISALLOW_COPY_ASSIGN(VSIBufferedReaderHandle)

    VSIVirtualHandle* m_poBaseHandle = nullptr;
    GByte*            pabyBuffer = nullptr;
    GUIntBig          nBufferOffset = 0;
    int               nBufferSize = 0;
    GUIntBig          nCurOffset = 0;
    bool              bNeedBaseHandleSeek = false;
    bool              bEOF =  false;
    vsi_l_offset      nCheatFileSize = 0;

    int               SeekBaseTo( vsi_l_offset nTargetOffset );

  public:
    explicit VSIBufferedReaderHandle( VSIVirtualHandle* poBaseHandle );
    VSIBufferedReaderHandle( VSIVirtualHandle* poBaseHandle,
                             const GByte* pabyBeginningContent,
                             vsi_l_offset nCheatFileSizeIn );
    // TODO(schwehr): Add override when support dropped for VS2008.
    ~VSIBufferedReaderHandle() override;

    int Seek( vsi_l_offset nOffset, int nWhence ) override;
    vsi_l_offset Tell() override;
    size_t Read( void *pBuffer, size_t nSize,
                 size_t nMemb ) override;
    size_t Write( const void *pBuffer, size_t nSize,
                  size_t nMemb ) override;
    int Eof() override;
    int Flush() override;
    int Close() override;
};",0,587 2000 2001 58 777 2002 123 2003 40 2000 41 2002 42 2004 61 753 59 2005 42 2006 61 753 59 2007 2008 61 1500 59 704 2009 61 1500 59 2007 2010 61 1500 59 569 2011 61 655 59 569 2012 61 655 59 2013 2014 61 1500 59 704 2015 40 2013 2016 41 59 777 58 648 2000 40 2002 42 2017 41 59 2000 40 2002 42 2017 44 601 2005 42 2018 44 2013 2019 41 59 330 126 2000 40 41 2020 59 704 2021 40 2013 2022 44 704 2023 41 2020 59 2013 2024 40 41 2020 59 2025 2026 40 865 42 2027 44 2025 2028 44 2025 2029 41 2020 59 2025 2030 40 601 865 42 2027 44 2025 2028 44 2025 2029 41 2020 59 704 2031 40 41 2020 59 704 2032 40 41 2020 59 704 2033 40 41 2020 59 125 59 ,"{'AvgLine': 20, 'CountLine': 254, 'CountStmt': 89, 'MaxNesting': 4, 'AvgLineCode': 16, 'AvgEssential': 2, 'AvgLineBlank': 1, 'CountStmtExe': 58, 'MaxEssential': 7, 'SumEssential': 22, 'AvgCyclomatic': 2, 'CountLineCode': 205, 'CountStmtDecl': 36, 'MaxCyclomatic': 7, 'SumCyclomatic': 26, 'AltAvgLineCode': 18, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 13, 'AltCountLineCode': 226, 'CountLineCodeExe': 77, 'CountLineComment': 10, 'AltAvgLineComment': 0, 'AltCountLineBlank': 21, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 35, 'CountLineInactive': 9, 'CountDeclMethodAll': 25, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AltCountLineComment': 10, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 26, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 10, 'CountLinePreprocessor': 12, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 26, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 8, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 6, 'CountDeclInstanceVariableProtected': 0}"
100023,C++,"class OGRMemDriver final: public OGRSFDriver
{
  public:
    virtual ~OGRMemDriver();

    const char *GetName() override;
    OGRDataSource *Open( const char *, int ) override;

    virtual OGRDataSource *CreateDataSource( const char *pszName,
                                             char ** = nullptr ) override;

    int TestCapability( const char * ) override;
};",0,587 2000 2001 58 777 2002 123 777 58 864 126 2000 40 41 59 601 582 42 2003 40 41 2004 59 2005 42 2006 40 601 582 42 44 704 41 2004 59 864 2005 42 2007 40 601 582 42 2008 44 582 42 42 61 753 41 2004 59 704 2009 40 601 582 42 41 2004 59 125 59 ,"{'AvgLine': 4, 'CountLine': 33, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 27, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 5, 'AltCountLineCode': 27, 'CountLineCodeExe': 2, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 6, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 45, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.04', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100019,C++,"class BTRasterBand final: public GDALPamRasterBand
{
    VSILFILE          *fpImage;

    CPL_DISALLOW_COPY_ASSIGN(BTRasterBand)

  public:
                   BTRasterBand( GDALDataset * poDS, VSILFILE * fp,
                                 GDALDataType eType );
    ~BTRasterBand() override {}

    CPLErr IReadBlock( int, int, void * ) override;
    CPLErr IWriteBlock( int, int, void * ) override;

    const char* GetUnitType() override;
    CPLErr SetUnitType(const char*) override;
    double GetNoDataValue( int* = nullptr ) override;
    CPLErr SetNoDataValue( double ) override;
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 2005 40 2000 41 777 58 2000 40 2006 42 2007 44 2003 42 2008 44 2009 2010 41 59 126 2000 40 41 2011 123 125 2012 2013 40 704 44 704 44 865 42 41 2011 59 2012 2014 40 704 44 704 44 865 42 41 2011 59 601 582 42 2015 40 41 2011 59 2012 2016 40 601 582 42 41 2011 59 625 2017 40 704 42 61 753 41 2011 59 2012 2018 40 625 41 2011 59 125 59 ,"{'AvgLine': 26, 'CountLine': 229, 'CountStmt': 83, 'MaxNesting': 2, 'AvgLineCode': 16, 'AvgEssential': 2, 'AvgLineBlank': 3, 'CountStmtExe': 66, 'MaxEssential': 4, 'SumEssential': 20, 'AvgCyclomatic': 3, 'CountLineCode': 149, 'CountStmtDecl': 23, 'MaxCyclomatic': 4, 'SumCyclomatic': 25, 'AltAvgLineCode': 17, 'AvgLineComment': 5, 'CountClassBase': 1, 'CountLineBlank': 31, 'CountStmtEmpty': 2, 'AltAvgLineBlank': 3, 'CountDeclMethod': 10, 'AltCountLineCode': 155, 'CountLineCodeExe': 125, 'CountLineComment': 44, 'AltAvgLineComment': 5, 'AltCountLineBlank': 31, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 26, 'CountLineInactive': 2, 'CountDeclMethodAll': 138, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.30', 'AltCountLineComment': 44, 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 25, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 8, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 25, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100056,C++,"class HDF4EOSGridAttribute final: public HDF4AbstractAttribute
{
    std::shared_ptr<HDF4GDHandle> m_poGDHandle;

public:
    HDF4EOSGridAttribute(const std::string& osParentName,
                  const std::string& osName,
                  const std::shared_ptr<HDF4SharedResources>& poShared,
                  const std::shared_ptr<HDF4GDHandle>& poGDHandle,
                  int32 iNumType,
                  int32 nValues):
        GDALAbstractMDArray(osParentName, osName),
        HDF4AbstractAttribute(osParentName, osName, poShared, iNumType, nValues),
        m_poGDHandle(poGDHandle)
    {}

    void ReadData(void* pDstBuffer) const override {
        GDreadattr( m_poGDHandle->m_handle, GetName().c_str(), pDstBuffer);
    }
};",0,587 2000 2001 58 777 2002 123 2003 321 2004 60 2005 62 2006 59 777 58 2000 40 601 2003 321 2007 38 2008 44 601 2003 321 2007 38 2009 44 601 2003 321 2004 60 2010 62 38 2011 44 601 2003 321 2004 60 2005 62 38 2012 44 2013 2014 44 2013 2015 41 58 2016 40 2008 44 2009 41 44 2002 40 2008 44 2009 44 2011 44 2014 44 2015 41 44 2006 40 2012 41 123 125 865 2017 40 865 42 2018 41 601 2019 123 2020 40 2006 354 2021 44 2022 40 41 46 2023 40 41 44 2018 41 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 20, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 18, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100120,C++,"class VSIZipEntryFileOffset final : public VSIArchiveEntryFileOffset
{
public:
        unz_file_pos m_file_pos;

        explicit VSIZipEntryFileOffset( unz_file_pos file_pos ):
            m_file_pos()
        {
            m_file_pos.pos_in_zip_directory = file_pos.pos_in_zip_directory;
            m_file_pos.num_of_file = file_pos.num_of_file;
        }
};",0,587 2000 2001 58 777 2002 123 777 58 2003 2004 59 648 2000 40 2003 2005 41 58 2004 40 41 123 2004 46 2006 61 2005 46 2006 59 2004 46 2007 61 2005 46 2007 59 125 125 59 ,"{'AvgLine': 6, 'CountLine': 12, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 11, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100166,C++,"    class CPL_DLL Features
    {
      private:

        friend class GDALDataset;
        GDALDataset* m_poSelf;
        CPL_INTERNAL explicit Features(GDALDataset* poSelf): m_poSelf(poSelf) {}

        class CPL_DLL Iterator
        {
                struct Private;
                std::unique_ptr<Private> m_poPrivate;
            public:
                Iterator(GDALDataset* poDS, bool bStart);
                Iterator(const Iterator& oOther); // declared but not defined. Needed for gcc 5.4 at least
                Iterator(Iterator&& oOther) noexcept; // declared but not defined. Needed for gcc 5.4 at least
                ~Iterator();
                const FeatureLayerPair& operator*() const;
                Iterator& operator++();
                bool operator!=(const Iterator& it) const;
        };

      public:

        const Iterator begin() const;

        const Iterator end() const;
    };",0,587 2000 2001 123 773 58 667 587 2002 59 2002 42 2003 59 2004 648 2001 40 2002 42 2005 41 58 2003 40 2005 41 123 125 587 2000 2006 123 816 2007 59 2008 321 2009 60 2007 62 2010 59 777 58 2006 40 2002 42 2011 44 569 2012 41 59 2006 40 601 2006 38 2013 41 59 330 2006 40 2006 307 2013 41 748 59 330 126 2006 40 41 59 601 2014 38 758 42 40 41 601 59 2006 38 758 349 40 41 59 569 758 340 40 601 2006 38 2015 41 601 59 125 59 777 58 601 2006 2016 40 41 601 59 601 2006 2017 40 41 601 59 125 59 ,"{'AvgLine': 3, 'CountLine': 36, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 31, 'CountLineCodeExe': 3, 'CountLineComment': 2, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 2, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 128, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100199,C++,"class CAD3DFaceObject final: public CADEntityObject
{
public:
    CAD3DFaceObject();
    virtual ~CAD3DFaceObject(){}

    bool              bHasNoFlagInd; // 2000+
    bool              bZZero;
    std::vector<CADVector> avertCorners;
    short             dInvisFlags;
};",0,587 2000 2001 58 777 2002 123 777 58 2000 40 41 59 864 126 2000 40 41 123 125 569 2003 59 330 569 2004 59 2005 321 2006 60 2007 62 2008 59 803 2009 59 125 59 ,"{'AvgLine': 4, 'CountLine': 18, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 17, 'CountLineCodeExe': 5, 'CountLineComment': 1, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 1, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100198,C++,"class SRTMHGTRasterBand final: public GDALPamRasterBand
{
    friend class SRTMHGTDataset;

    int         bNoDataSet;
    double      dfNoDataValue;

  public:
    SRTMHGTRasterBand(SRTMHGTDataset*, int, GDALDataType);

    virtual CPLErr IReadBlock(int, int, void*) override;
    virtual CPLErr IWriteBlock(int nBlockXOff, int nBlockYOff, void* pImage) override;

    virtual GDALColorInterp GetColorInterpretation() override;

    virtual double  GetNoDataValue( int *pbSuccess = nullptr ) override;

    virtual const char* GetUnitType() override;
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 704 2004 59 625 2005 59 777 58 2000 40 2003 42 44 704 44 2006 41 59 864 2007 2008 40 704 44 704 44 865 42 41 2009 59 864 2007 2010 40 704 2011 44 704 2012 44 865 42 2013 41 2009 59 864 2014 2015 40 41 2009 59 864 625 2016 40 704 42 2017 61 753 41 2009 59 864 601 582 42 2018 40 41 2009 59 125 59 ,"{'AvgLine': 13, 'CountLine': 99, 'CountStmt': 42, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 29, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 77, 'CountStmtDecl': 15, 'MaxCyclomatic': 3, 'SumCyclomatic': 11, 'AltAvgLineCode': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 6, 'AltCountLineCode': 81, 'CountLineCodeExe': 35, 'CountLineComment': 5, 'AltAvgLineComment': 0, 'AltCountLineBlank': 15, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 134, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.06', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 6, 'CountLinePreprocessor': 4, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100283,C++,"class L1BGeolocDataset final: public GDALDataset
{
    friend class L1BGeolocRasterBand;

    L1BDataset* poL1BDS;
    int bInterpolGeolocationDS;

    public:
                L1BGeolocDataset(L1BDataset* poMainDS,
                                 int bInterpolGeolocationDS);
       virtual ~L1BGeolocDataset();

       static GDALDataset* CreateGeolocationDS(L1BDataset* poL1BDS,
                                               int bInterpolGeolocationDS);
};",0,587 2000 2001 58 777 2002 123 667 587 2003 59 2004 42 2005 59 704 2006 59 777 58 2000 40 2004 42 2007 44 704 2006 41 59 864 126 2000 40 41 59 809 2002 42 2008 40 2004 42 2005 44 704 2006 41 59 125 59 ,"{'AvgLine': 8, 'CountLine': 40, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 37, 'CountStmtDecl': 10, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AltAvgLineCode': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 37, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 145, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 1, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 3, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100346,C++,"template <class T>
class LTIDLLNavigator : public T
{
public:
   explicit LTIDLLNavigator(const LTIImage& image ) : T(image) {}
   virtual ~LTIDLLNavigator() {}
};",0,822 60 587 2000 62 587 2001 58 777 2000 123 777 58 648 2001 40 601 2002 38 2003 41 58 2000 40 2003 41 123 125 864 126 2001 40 41 123 125 125 59 ,"{'AvgLine': 1, 'CountLine': 6, 'CountStmt': 2, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100327,C++,"class NGWWrapperRasterBand : public GDALProxyRasterBand
{
    GDALRasterBand *poBaseBand;

protected:
    virtual GDALRasterBand *RefUnderlyingRasterBand() override { return poBaseBand; }

public:
    explicit NGWWrapperRasterBand( GDALRasterBand* poBaseBandIn ) :
        poBaseBand( poBaseBandIn )
    {
        eDataType = poBaseBand->GetRasterDataType();
        poBaseBand->GetBlockSize(&nBlockXSize, &nBlockYSize);
    }
    virtual ~NGWWrapperRasterBand() {}
};",0,587 2000 58 777 2001 123 2002 42 2003 59 775 58 864 2002 42 2004 40 41 2005 123 792 2003 59 125 777 58 648 2000 40 2002 42 2006 41 58 2003 40 2006 41 123 2007 61 2003 354 2008 40 41 59 2003 354 2009 40 38 2010 44 38 2011 41 59 125 864 126 2000 40 41 123 125 125 59 ,"{'AvgLine': 2, 'CountLine': 16, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AltAvgLineCode': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 14, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 148, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 1, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
98926,C++,"class VSIArchiveContent
{
public:
    time_t       mTime = 0;
    vsi_l_offset nFileSize = 0;
    int nEntries = 0;
    VSIArchiveEntry* entries = nullptr;

    ~VSIArchiveContent();
};",0,587 2000 123 777 58 2001 2002 61 1500 59 2003 2004 61 1500 59 704 2005 61 1500 59 2006 42 2007 61 753 59 126 2000 40 41 59 125 59 ,"{'AvgLine': 9, 'CountLine': 19, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 2, 'CountLineCode': 18, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 2, 'AltAvgLineCode': 9, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 18, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 4, 'CountDeclInstanceVariablePublic': 4, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98927,C++,"class VSIArchiveEntryFileOffset
{
    public:
        virtual ~VSIArchiveEntryFileOffset();
};",0,587 2000 123 777 58 864 126 2000 40 41 59 125 59 ,"{'AvgLine': 1, 'CountLine': 6, 'CountStmt': 1, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 1, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 1, 'AltCountLineCode': 6, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 2, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100341,C++,"class GDALDataset::Private
{
    CPL_DISALLOW_COPY_ASSIGN(Private)

  public:
    CPLMutex *hMutex = nullptr;
    std::map<GIntBig, int> oMapThreadToMutexTakenCount{};
#ifdef DEBUG_EXTRA
    std::map<GIntBig, int> oMapThreadToMutexTakenCountSaved{};
#endif
    GDALAllowReadWriteMutexState eStateReadWriteMutex = GDALAllowReadWriteMutexState::RW_MUTEX_STATE_UNKNOWN;
    int nCurrentLayerIdx = 0;
    int nLayerCount = -1;
    GIntBig nFeatureReadInLayer = 0;
    GIntBig nFeatureReadInDataset = 0;
    GIntBig nTotalFeaturesInLayer = TOTAL_FEATURES_NOT_INIT;
    GIntBig nTotalFeatures = TOTAL_FEATURES_NOT_INIT;
    OGRLayer *poCurrentLayer = nullptr;

    char               *m_pszWKTCached = nullptr;
    OGRSpatialReference *m_poSRSCached = nullptr;
    char               *m_pszWKTGCPCached = nullptr;
    OGRSpatialReference *m_poSRSGCPCached = nullptr;

    GDALDataset* poParentDataset = nullptr;

    bool m_bOverviewsEnabled = true;

    Private() = default;
};",0,587 2000 321 2001 123 2002 40 2001 41 777 58 2003 42 2004 61 753 59 2005 321 2006 60 2007 44 704 62 2008 123 125 59 35 689 2009 2005 321 2006 60 2007 44 704 62 2010 123 125 59 35 636 2011 2012 61 2011 321 2013 59 704 2014 61 1500 59 704 2015 61 45 1501 59 2007 2016 61 1500 59 2007 2017 61 1500 59 2007 2018 61 2019 59 2007 2020 61 2019 59 2021 42 2022 61 753 59 582 42 2023 61 753 59 2024 42 2025 61 753 59 582 42 2026 61 753 59 2024 42 2027 61 753 59 2000 42 2028 61 753 59 569 2029 61 829 59 2001 40 41 61 613 59 125 59 ,"{'AvgLine': 0, 'CountLine': 29, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 21, 'CountStmtDecl': 16, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 5, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 24, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 5, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 1, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 1, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 16, 'CountDeclInstanceVariablePublic': 16, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
100024,C++,    class JP2KAKException {};,0,587 2000 123 125 59 ,"{'AvgLine': 0, 'CountLine': 1, 'CountStmt': 0, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 1, 'CountStmtDecl': 0, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AltAvgLineCode': 0, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 0, 'AltCountLineCode': 1, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 0, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98562,C++,"    class PCIDSK_DLL PCIDSK_TEX
    {
    public:
        virtual ~PCIDSK_TEX() {}

/**
\brief Read a text segment (SEG_TEX).

All carriage returns in the file are converted to newlines during reading.  No other processing is done.

@return a string containing the entire contents of the text segment.

*/
        virtual std::string ReadText() = 0;

/**
\brief Write a text segment.

Writes the text to the text segment.  All newlines will be converted to
carriage controls for storage in the text segment per the normal text segment
conventions, and if missing a carriage return will be added to the end of the
file.

@param text the text to write to the segment.  May contain newlines, and other special characters but no embedded \0 characters.

*/
        virtual void WriteText( const std::string &text ) = 0;
    };",0,587 2000 2001 123 777 58 864 126 2001 40 41 123 125 306 864 2002 321 2003 2004 40 41 61 1500 59 306 864 865 2005 40 601 2002 321 2003 38 2006 41 61 1500 59 125 59 ,"{'AvgLine': 1, 'CountLine': 28, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 2, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 7, 'CountLineCodeExe': 0, 'CountLineComment': 19, 'AltAvgLineComment': 0, 'AltCountLineBlank': 2, 'CountClassCoupled': 0, 'CountClassDerived': 1, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '2.71', 'AltCountLineComment': 19, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclInstanceVariableProtected': 0}"
98903,C++,"       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };",0,587 2000 123 569 2001 59 2002 42 2003 59 777 58 865 2004 40 41 123 688 40 2001 41 123 2005 40 2003 41 59 2001 61 655 59 125 125 2000 40 41 58 2001 40 829 41 44 2003 40 2006 40 41 41 123 125 126 2000 40 41 123 2004 40 41 59 125 125 59 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AltAvgLineCode': 1, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 0, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 3, 'AltCountLineCode': 8, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 0, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
100184,C++,"class XYArraySetter
{
        double* padfX;
        double* padfY;
    public:
        XYArraySetter(double* padfXIn, double* padfYIn) : padfX(padfXIn), padfY(padfYIn) {}

        void set(int i, double dfX, double dfY)
        {
            padfX[i] = dfX;
            padfY[i] = dfY;
        }
};",0,587 2000 123 625 42 2001 59 625 42 2002 59 777 58 2000 40 625 42 2003 44 625 42 2004 41 58 2001 40 2003 41 44 2002 40 2004 41 123 125 865 2005 40 704 2006 44 625 2007 44 625 2008 41 123 2001 91 2006 93 61 2007 59 2002 91 2006 93 61 2008 59 125 125 59 ,"{'AvgLine': 3, 'CountLine': 13, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AltAvgLineCode': 3, 'AvgLineComment': 0, 'CountClassBase': 0, 'CountLineBlank': 1, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 0, 'CountDeclMethod': 2, 'AltCountLineCode': 12, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'AltAvgLineComment': 0, 'AltCountLineBlank': 1, 'CountClassCoupled': 0, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AltCountLineComment': 0, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 2, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclInstanceVariableProtected': 0}"
100141,C++,"class COASPRasterBand final: public GDALRasterBand {
    VSILFILE *fp;
    // int ePol;
  public:
    COASPRasterBand( COASPDataset *poDS, GDALDataType eDataType,
                     int ePol, VSILFILE *fp );
    CPLErr IReadBlock( int nBlockXOff, int nBlockYOff, void *pImage) override;
};",0,587 2000 2001 58 777 2002 123 2003 42 2004 59 330 777 58 2000 40 2005 42 2006 44 2007 2008 44 704 2009 44 2003 42 2004 41 59 2010 2011 40 704 2012 44 704 2013 44 865 42 2014 41 2015 59 125 59 ,"{'AvgLine': 17, 'CountLine': 42, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AltAvgLineCode': 15, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountStmtEmpty': 0, 'AltAvgLineBlank': 1, 'CountDeclMethod': 2, 'AltCountLineCode': 37, 'CountLineCodeExe': 15, 'CountLineComment': 5, 'AltAvgLineComment': 2, 'AltCountLineBlank': 3, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 96, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.14', 'AltCountLineComment': 5, 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'CountDeclMethodConst': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodFriend': 0, 'CountDeclMethodPublic': 2, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountDeclInstanceVariable': 1, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclInstanceVariableProtected': 0}"
