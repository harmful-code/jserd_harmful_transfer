id,language,text,smell,tokens,metrics
79742,C#,"    public class SnapshotCache : DataCache, IDisposable
    {
        private readonly IReadOnlyStore store;
        private readonly ISnapshot snapshot;

        /// <summary>
        /// Initializes a new instance of the <see cref=""SnapshotCache""/> class.
        /// </summary>
        /// <param name=""store"">An <see cref=""IReadOnlyStore""/> to create a readonly cache; or an <see cref=""ISnapshot""/> to create a snapshot cache.</param>
        public SnapshotCache(IReadOnlyStore store)
        {
            this.store = store;
            this.snapshot = store as ISnapshot;
        }

        protected override void AddInternal(StorageKey key, StorageItem value)
        {
            snapshot?.Put(key.ToArray(), value.ToArray());
        }

        protected override void DeleteInternal(StorageKey key)
        {
            snapshot?.Delete(key.ToArray());
        }

        public override void Commit()
        {
            base.Commit();
            snapshot.Commit();
        }

        protected override bool ContainsInternal(StorageKey key)
        {
            return store.Contains(key.ToArray());
        }

        public void Dispose()
        {
            snapshot?.Dispose();
        }

        protected override StorageItem GetInternal(StorageKey key)
        {
            return store.TryGet(key.ToArray()).AsSerializable<StorageItem>();
        }

        protected override IEnumerable<(StorageKey, StorageItem)> SeekInternal(byte[] keyOrPrefix, SeekDirection direction)
        {
            return store.Seek(keyOrPrefix, direction).Select(p => (p.Key.AsSerializable<StorageKey>(), p.Value.AsSerializable<StorageItem>()));
        }

        protected override StorageItem TryGetInternal(StorageKey key)
        {
            return store.TryGet(key.ToArray())?.AsSerializable<StorageItem>();
        }

        protected override void UpdateInternal(StorageKey key, StorageItem value)
        {
            snapshot?.Put(key.ToArray(), value.ToArray());
        }
    }",0,777 587 2000 58 2001 44 2002 123 773 780 2003 2004 59 773 780 2005 2006 59 331 777 2000 40 2003 2004 41 123 823 46 2004 61 2004 59 823 46 2006 61 2004 552 2005 59 125 775 763 865 2007 40 2008 2009 44 2010 2011 41 123 2006 346 2012 40 2009 46 2013 40 41 44 2011 46 2013 40 41 41 59 125 775 763 865 2014 40 2008 2009 41 123 2006 346 2015 40 2009 46 2016 40 41 41 59 125 777 763 865 2017 40 41 123 563 46 2017 40 41 59 2006 46 2017 40 41 59 125 775 763 569 2018 40 2008 2009 41 123 792 2004 46 2019 40 2009 46 2020 40 41 41 59 125 777 865 2021 40 41 123 2006 346 2021 40 41 59 125 775 763 2010 2022 40 2008 2009 41 123 792 2004 46 2023 40 2009 46 2024 40 41 41 46 2025 60 2010 62 40 41 59 125 775 763 2026 60 40 2008 44 2010 41 62 2027 40 574 91 93 2028 44 2029 2030 41 123 792 2004 46 2031 40 2028 44 2030 41 46 2032 40 2033 328 40 2033 46 2034 46 2035 60 2008 62 40 41 44 2033 46 2036 46 2035 60 2010 62 40 41 41 41 59 125 775 763 2010 2037 40 2008 2009 41 123 792 2004 46 2038 40 2009 46 2039 40 41 41 346 2040 60 2010 62 40 41 59 125 775 763 865 2041 40 2008 2009 44 2010 2011 41 123 2006 346 2042 40 2009 46 2043 40 41 44 2011 46 2043 40 41 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 61, 'CountStmt': 25, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 47, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 11, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 10, 'CountSemicolon': 14, 'CountDeclMethod': 10, 'CountLineCodeExe': 12, 'CountLineComment': 4, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 36, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 44, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 7, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 44, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79773,C#,"        internal class Logger : ReceiveActor
        {
            public Logger()
            {
                Receive<InitializeLogger>(_ => Sender.Tell(new LoggerInitialized()));
                Receive<LogEvent>(e => Log(e.LogSource, (LogLevel)e.LogLevel(), e.Message));
            }
        }",0,710 587 2000 58 2001 123 777 2000 40 41 123 2002 60 2003 62 40 2004 328 2005 46 2006 40 744 2007 40 41 41 41 59 2002 60 2008 62 40 2009 328 2010 40 2009 46 2011 44 40 2012 41 2009 46 2012 40 41 44 2009 46 2013 41 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 8, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 2, 'CountDeclMethod': 1, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79780,C#,"    class ContractTask<T> : ContractTask
    {
        protected override ContractTaskAwaiter<T> CreateAwaiter() => new();

        public override ContractTaskAwaiter<T> GetAwaiter() => (ContractTaskAwaiter<T>)base.GetAwaiter();

        public override object GetResult() => GetAwaiter().GetResult();
    }",0,587 2000 60 2001 62 58 2000 123 775 763 2002 60 2001 62 2003 40 41 328 744 40 41 59 777 763 2002 60 2001 62 2004 40 41 328 40 2002 60 2001 62 41 563 46 2004 40 41 59 777 763 755 2005 40 41 328 2004 40 41 46 2005 40 41 59 125 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 3, 'CountDeclMethod': 3, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 1, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79788,C#,"    public class FilterAddPayload : ISerializable
    {
        /// <summary>
        /// The items to be added.
        /// </summary>
        public byte[] Data;

        public int Size => Data.GetVarSize();

        void ISerializable.Deserialize(BinaryReader reader)
        {
            Data = reader.ReadVarBytes(520);
        }

        void ISerializable.Serialize(BinaryWriter writer)
        {
            writer.WriteVarBytes(Data);
        }
    }",0,777 587 2000 58 2001 123 331 777 574 91 93 2002 59 777 704 2003 328 2002 46 2004 40 41 59 865 2001 46 2005 40 2006 2007 41 123 2002 61 2007 46 2008 40 1504 41 59 125 865 2001 46 2009 40 2010 2011 41 123 2011 46 2012 40 2002 41 59 125 125 ,"{'AvgLine': 2, 'CountLine': 19, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 3, 'CountSemicolon': 4, 'CountDeclMethod': 3, 'CountLineCodeExe': 2, 'CountLineComment': 3, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.23', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79799,C#,"    public class NefFile : ISerializable
    {
        /// <summary>
        /// NEO Executable Format 3 (NEF3)
        /// </summary>
        private const uint Magic = 0x3346454E;

        /// <summary>
        /// The name and version of the compiler that generated this nef file.
        /// </summary>
        public string Compiler { get; set; }

        /// <summary>
        /// The url of the source files.
        /// </summary>
        public string Source { get; set; }

        /// <summary>
        /// The methods that to be called statically.
        /// </summary>
        public MethodToken[] Tokens { get; set; }

        /// <summary>
        /// The script of the contract.
        /// </summary>
        public byte[] Script { get; set; }

        /// <summary>
        /// The checksum of the nef file.
        /// </summary>
        public uint CheckSum { get; set; }

        /// <summary>
        /// The maximum length of the script.
        /// </summary>
        public const int MaxScriptLength = 512 * 1024;

        private const int HeaderSize =
            sizeof(uint) +  // Magic
            64;             // Compiler

        public int Size =>
            HeaderSize +            // Header
            Source.GetVarSize() +   // Source
            1 +                     // Reserve
            Tokens.GetVarSize() +   // Tokens
            2 +                     // Reserve
            Script.GetVarSize() +   // Script
            sizeof(uint);           // Checksum

        public void Serialize(BinaryWriter writer)
        {
            SerializeHeader(writer);
            writer.WriteVarString(Source);
            writer.Write((byte)0);
            writer.Write(Tokens);
            writer.Write((short)0);
            writer.WriteVarBytes(Script ?? Array.Empty<byte>());
            writer.Write(CheckSum);
        }

        private void SerializeHeader(BinaryWriter writer)
        {
            writer.Write(Magic);
            writer.WriteFixedString(Compiler, 64);
        }

        public void Deserialize(BinaryReader reader)
        {
            if (reader.ReadUInt32() != Magic) throw new FormatException(""Wrong magic"");
            Compiler = reader.ReadFixedString(64);
            Source = reader.ReadVarString(256);
            if (reader.ReadByte() != 0) throw new FormatException(""Reserved bytes must be 0"");
            Tokens = reader.ReadSerializableArray<MethodToken>(128);
            if (reader.ReadUInt16() != 0) throw new FormatException(""Reserved bytes must be 0"");
            Script = reader.ReadVarBytes(MaxScriptLength);
            if (Script.Length == 0) throw new ArgumentException($""Script can't be empty"");
            CheckSum = reader.ReadUInt32();
            if (CheckSum != ComputeChecksum(this)) throw new FormatException(""CRC verification fail"");
        }

        /// <summary>
        /// Computes the checksum for the specified nef file.
        /// </summary>
        /// <param name=""file"">The specified nef file.</param>
        /// <returns>The checksum of the nef file.</returns>
        public static uint ComputeChecksum(NefFile file)
        {
            return BinaryPrimitives.ReadUInt32LittleEndian(Crypto.Hash256(file.ToArray().AsSpan(..^sizeof(uint))));
        }

        /// <summary>
        /// Converts the nef file to a JSON object.
        /// </summary>
        /// <returns>The nef file represented by a JSON object.</returns>
        public JObject ToJson()
        {
            return new JObject
            {
                [""magic""] = Magic,
                [""compiler""] = Compiler,
                [""source""] = Source,
                [""tokens""] = new JArray(Tokens.Select(p => p.ToJson())),
                [""script""] = Convert.ToBase64String(Script),
                [""checksum""] = CheckSum
            };
        }
    }",0,777 587 2000 58 2001 123 331 773 601 842 2002 61 1510 59 331 777 815 2003 123 2004 59 2005 59 125 331 777 815 2006 123 2007 59 2008 59 125 331 777 2009 91 93 2010 123 2011 59 2012 59 125 331 777 574 91 93 2013 123 2014 59 2015 59 125 331 777 842 2016 123 2017 59 2018 59 125 331 777 601 704 2019 61 1504 42 1505 59 773 601 704 2020 61 805 40 842 41 43 330 1503 59 330 777 704 2021 328 2020 43 330 2006 46 2022 40 41 43 330 1501 43 330 2010 46 2022 40 41 43 330 1502 43 330 2013 46 2022 40 41 43 330 805 40 842 41 59 330 777 865 2023 40 2024 2025 41 123 2026 40 2025 41 59 2025 46 2027 40 2006 41 59 2025 46 2028 40 40 574 41 1500 41 59 2025 46 2028 40 2010 41 59 2025 46 2028 40 40 803 41 1500 41 59 2025 46 2029 40 2013 343 2030 46 2031 60 574 62 40 41 41 59 2025 46 2028 40 2016 41 59 125 773 865 2032 40 2024 2025 41 123 2025 46 2033 40 2002 41 59 2025 46 2034 40 2003 44 1503 41 59 125 777 865 2035 40 2036 2037 41 123 688 40 2037 46 2038 40 41 340 2002 41 825 744 2039 40 362 41 59 2003 61 2037 46 2040 40 1503 41 59 2006 61 2037 46 2041 40 1504 41 59 688 40 2037 46 2042 40 41 340 1500 41 825 744 2039 40 362 41 59 2010 61 2037 46 2043 60 2009 62 40 1504 41 59 688 40 2037 46 2044 40 41 340 1500 41 825 744 2039 40 362 41 59 2013 61 2037 46 2045 40 2019 41 59 688 40 2013 46 2046 323 1500 41 825 744 2047 40 36 362 41 59 2016 61 2037 46 2038 40 41 59 688 40 2016 340 2048 40 823 41 41 825 744 2039 40 362 41 59 125 331 777 809 842 2049 40 2000 2050 41 123 792 2051 46 2052 40 2053 46 2054 40 2050 46 2055 40 41 46 2056 40 46 46 94 805 40 842 41 41 41 41 59 125 331 777 2057 2058 40 41 123 792 744 2057 123 91 362 93 61 2002 44 91 362 93 61 2003 44 91 362 93 61 2006 44 91 362 93 61 744 2059 40 2010 46 2060 40 2061 328 2061 46 2058 40 41 41 41 44 91 362 93 61 2062 46 2063 40 2013 41 44 91 362 93 61 2016 125 59 125 125 ,"{'AvgLine': 2, 'CountLine': 108, 'CountStmt': 51, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 26, 'MaxEssential': 6, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 65, 'CountStmtDecl': 25, 'MaxCyclomatic': 6, 'SumCyclomatic': 11, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 13, 'CountSemicolon': 35, 'CountDeclMethod': 16, 'CountLineCodeExe': 28, 'CountLineComment': 39, 'CountClassCoupled': 15, 'CountClassDerived': 0, 'CountDeclProperty': 6, 'CountLineCodeDecl': 24, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.60', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 15, 'CountDeclPropertyAuto': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 40, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 3, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 15, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 9, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 36, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79809,C#,"    public class Tree<T>
    {
        public TreeNode<T> Root { get; private set; }

        public TreeNode<T> AddRoot(T item)
        {
            if (Root is not null)
                throw new InvalidOperationException();
            Root = new TreeNode<T>(item, null);
            return Root;
        }

        public IEnumerable<T> GetItems()
        {
            if (Root is null) yield break;
            foreach (T item in Root.GetItems())
                yield return item;
        }
    }",0,777 587 2000 60 2001 62 123 777 2002 60 2001 62 2003 123 2004 59 773 2005 59 125 777 2002 60 2001 62 2006 40 2001 2007 41 123 688 40 2003 712 2008 752 41 825 744 2009 40 41 59 2003 61 744 2002 60 2001 62 40 2007 44 752 41 59 792 2003 59 125 777 2010 60 2001 62 2011 40 41 123 688 40 2003 712 752 41 2012 572 59 665 40 2001 2007 696 2003 46 2011 40 41 41 2012 792 2007 59 125 125 ,"{'AvgLine': 3, 'CountLine': 19, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 6, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 7, 'CountDeclMethod': 4, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 4, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 1, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79818,C#,"    public class UT_ExtensiblePayload
    {
        [TestMethod]
        public void Size_Get()
        {
            var test = new ExtensiblePayload()
            {
                Sender = Array.Empty<byte>().ToScriptHash(),
                Category = ""123"",
                Data = new byte[] { 1, 2, 3 },
                Witness = new Witness() { InvocationScript = new byte[] { 3, 5, 6 }, VerificationScript = Array.Empty<byte>() }
            };
            test.Size.Should().Be(42);
        }

        [TestMethod]
        public void DeserializeAndSerialize()
        {
            var test = new ExtensiblePayload()
            {
                Category = ""123"",
                ValidBlockStart = 456,
                ValidBlockEnd = 789,
                Sender = Array.Empty<byte>().ToScriptHash(),
                Data = new byte[] { 1, 2, 3 },
                Witness = new Witness() { InvocationScript = new byte[] { (byte)OpCode.PUSH1, (byte)OpCode.PUSH2, (byte)OpCode.PUSH3 }, VerificationScript = Array.Empty<byte>() }
            };
            var clone = test.ToArray().AsSerializable<ExtensiblePayload>();

            Assert.AreEqual(test.Sender, clone.Witness.ScriptHash);
            Assert.AreEqual(test.Hash, clone.Hash);
            Assert.AreEqual(test.ValidBlockStart, clone.ValidBlockStart);
            Assert.AreEqual(test.ValidBlockEnd, clone.ValidBlockEnd);
            Assert.AreEqual(test.Category, clone.Category);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 41 123 2006 61 2007 46 2008 60 574 62 40 41 46 2009 40 41 44 2010 61 362 44 2011 61 744 574 91 93 123 1501 44 1502 44 1502 125 44 2012 61 744 2012 40 41 123 2013 61 744 574 91 93 123 1502 44 1502 44 1502 125 44 2014 61 2007 46 2008 60 574 62 40 41 125 125 59 2004 46 2015 46 2016 40 41 46 2017 40 1503 41 59 125 91 2001 93 777 865 2018 40 41 123 2019 2020 61 744 2021 40 41 123 2022 61 362 44 2023 61 1504 44 2024 61 1504 44 2025 61 2026 46 2027 60 574 62 40 41 46 2028 40 41 44 2029 61 744 574 91 93 123 1501 44 1502 44 1502 125 44 2030 61 744 2030 40 41 123 2031 61 744 574 91 93 123 40 574 41 2032 46 2033 44 40 574 41 2032 46 2034 44 40 574 41 2032 46 2035 125 44 2036 61 2026 46 2027 60 574 62 40 41 125 125 59 2019 2037 61 2020 46 2038 40 41 46 2039 60 2021 62 40 41 59 2040 46 2041 40 2020 46 2042 44 2037 46 2043 46 2044 41 59 2040 46 2041 40 2020 46 2045 44 2037 46 2045 41 59 2040 46 2041 40 2020 46 2046 44 2037 46 2046 41 59 2040 46 2041 40 2020 46 2047 44 2037 46 2047 41 59 2040 46 2041 40 2020 46 2048 44 2037 46 2048 41 59 125 125 ,"{'AvgLine': 15, 'CountLine': 36, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 9, 'CountDeclMethod': 2, 'CountLineCodeExe': 19, 'CountLineComment': 0, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79828,C#,"    public class ContractState : IInteroperable
    {
        /// <summary>
        /// The id of the contract.
        /// </summary>
        public int Id;

        /// <summary>
        /// Indicates the number of times the contract has been updated.
        /// </summary>
        public ushort UpdateCounter;

        /// <summary>
        /// The hash of the contract.
        /// </summary>
        public UInt160 Hash;

        /// <summary>
        /// The nef of the contract.
        /// </summary>
        public NefFile Nef;

        /// <summary>
        /// The manifest of the contract.
        /// </summary>
        public ContractManifest Manifest;

        /// <summary>
        /// The script of the contract.
        /// </summary>
        public byte[] Script => Nef.Script;

        void IInteroperable.FromStackItem(StackItem stackItem)
        {
            Array array = (Array)stackItem;
            Id = (int)array[0].GetInteger();
            UpdateCounter = (ushort)array[1].GetInteger();
            Hash = new UInt160(array[2].GetSpan());
            Nef = array[3].GetSpan().AsSerializable<NefFile>();
            Manifest = array[4].ToInteroperable<ContractManifest>();
        }

        /// <summary>
        /// Determines whether the current contract has the permission to call the specified contract.
        /// </summary>
        /// <param name=""targetContract"">The contract to be called.</param>
        /// <param name=""targetMethod"">The method to be called.</param>
        /// <returns><see langword=""true""/> if the contract allows to be called; otherwise, <see langword=""false""/>.</returns>
        public bool CanCall(ContractState targetContract, string targetMethod)
        {
            return Manifest.Permissions.Any(u => u.IsAllowed(targetContract, targetMethod));
        }

        /// <summary>
        /// Converts the contract to a JSON object.
        /// </summary>
        /// <returns>The contract represented by a JSON object.</returns>
        public JObject ToJson()
        {
            return new JObject
            {
                [""id""] = Id,
                [""updatecounter""] = UpdateCounter,
                [""hash""] = Hash.ToString(),
                [""nef""] = Nef.ToJson(),
                [""manifest""] = Manifest.ToJson()
            };
        }

        public StackItem ToStackItem(ReferenceCounter referenceCounter)
        {
            return new Array(referenceCounter, new StackItem[] { Id, (int)UpdateCounter, Hash.ToArray(), Nef.ToArray(), Manifest.ToStackItem(referenceCounter) });
        }
    }",0,777 587 2000 58 2001 123 331 777 704 2002 59 331 777 859 2003 59 331 777 2004 2005 59 331 777 2006 2007 59 331 777 2008 2009 59 331 777 574 91 93 2010 328 2007 46 2010 59 865 2001 46 2011 40 2012 2013 41 123 2014 2015 61 40 2014 41 2013 59 2002 61 40 704 41 2015 91 1500 93 46 2016 40 41 59 2003 61 40 859 41 2015 91 1501 93 46 2016 40 41 59 2005 61 744 2004 40 2015 91 1502 93 46 2017 40 41 41 59 2007 61 2015 91 1502 93 46 2017 40 41 46 2018 60 2006 62 40 41 59 2009 61 2015 91 1502 93 46 2019 60 2008 62 40 41 59 125 331 777 569 2020 40 2000 2021 44 815 2022 41 123 792 2009 46 2023 46 2024 40 2025 328 2025 46 2026 40 2021 44 2022 41 41 59 125 331 777 2027 2028 40 41 123 792 744 2027 123 91 362 93 61 2002 44 91 362 93 61 2003 44 91 362 93 61 2005 46 2029 40 41 44 91 362 93 61 2007 46 2028 40 41 44 91 362 93 61 2009 46 2028 40 41 125 59 125 777 2012 2030 40 2031 2032 41 123 792 744 2033 40 2032 44 744 2012 91 93 123 2002 44 40 704 41 2003 44 2005 46 2034 40 41 44 2007 46 2034 40 41 44 2009 46 2030 40 2032 41 125 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 74, 'CountStmt': 20, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 37, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 9, 'CountSemicolon': 15, 'CountDeclMethod': 5, 'CountLineCodeExe': 15, 'CountLineComment': 28, 'CountClassCoupled': 13, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.76', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 31, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 5, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 5, 'PercentLackOfCohesionModified': 31, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79840,C#,"    public class UT_Helper
    {
        [TestMethod]
        public void GetSignData()
        {
            TestVerifiable verifiable = new();
            byte[] res = verifiable.GetSignData(ProtocolSettings.Default.Network);
            res.ToHexString().Should().Be(""4e454f3350b51da6bb366be3ea50140cda45ba7df575287c0371000b2037ed3898ff8bf5"");
        }

        [TestMethod]
        public void Sign()
        {
            TestVerifiable verifiable = new();
            byte[] res = verifiable.Sign(new KeyPair(TestUtils.GetByteArray(32, 0x42)), ProtocolSettings.Default.Network);
            res.Length.Should().Be(64);
        }

        [TestMethod]
        public void ToScriptHash()
        {
            byte[] testByteArray = TestUtils.GetByteArray(64, 0x42);
            UInt160 res = testByteArray.ToScriptHash();
            res.Should().Be(UInt160.Parse(""2d3b96ae1bcc5a585e075e3b81920210dec16302""));
        }

        [TestMethod]
        public void TestGetLowestSetBit()
        {
            var big1 = new BigInteger(0);
            big1.GetLowestSetBit().Should().Be(-1);

            var big2 = new BigInteger(512);
            big2.GetLowestSetBit().Should().Be(9);

            var big3 = new BigInteger(int.MinValue);
            big3.GetLowestSetBit().Should().Be(31);

            var big4 = new BigInteger(long.MinValue);
            big4.GetLowestSetBit().Should().Be(63);
        }

        [TestMethod]
        public void TestHexToBytes()
        {
            string nullStr = null;
            _ = nullStr.HexToBytes().ToHexString().Should().Be(Array.Empty<byte>().ToHexString());
            string emptyStr = """";
            emptyStr.HexToBytes().ToHexString().Should().Be(Array.Empty<byte>().ToHexString());
            string str1 = ""hab"";
            Action action = () => str1.HexToBytes();
            action.Should().Throw<FormatException>();
            string str2 = ""0102"";
            byte[] bytes = str2.HexToBytes();
            bytes.ToHexString().Should().Be(new byte[] { 0x01, 0x02 }.ToHexString());
        }

        [TestMethod]
        public void TestRemoveHashsetDictionary()
        {
            var a = new HashSet<int>
            {
                1,
                2,
                3
            };

            var b = new Dictionary<int, object>
            {
                [2] = null
            };

            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 1, 3 }, a.ToArray());

            b[4] = null;
            b[5] = null;
            b[1] = null;
            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 3 }, a.ToArray());
        }

        [TestMethod]
        public void TestRemoveHashsetSet()
        {
            var a = new HashSet<int>
            {
                1,
                2,
                3
            };

            var b = new SortedSet<int>()
            {
                2
            };

            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 1, 3 }, a.ToArray());

            b.Add(4);
            b.Add(5);
            b.Add(1);
            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 3 }, a.ToArray());
        }

        [TestMethod]
        public void TestRemoveHashsetHashSetCache()
        {
            var a = new HashSet<int>
            {
                1,
                2,
                3
            };

            var b = new HashSetCache<int>(10)
            {
                2
            };

            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 1, 3 }, a.ToArray());

            b.Add(4);
            b.Add(5);
            b.Add(1);
            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 3 }, a.ToArray());
        }

        [TestMethod]
        public void TestToHexString()
        {
            byte[] nullStr = null;
            Assert.ThrowsException<NullReferenceException>(() => nullStr.ToHexString());
            byte[] empty = Array.Empty<byte>();
            empty.ToHexString().Should().Be("""");
            empty.ToHexString(false).Should().Be("""");
            empty.ToHexString(true).Should().Be("""");

            byte[] str1 = new byte[] { (byte)'n', (byte)'e', (byte)'o' };
            str1.ToHexString().Should().Be(""6e656f"");
            str1.ToHexString(false).Should().Be(""6e656f"");
            str1.ToHexString(true).Should().Be(""6f656e"");
        }

        [TestMethod]
        public void TestGetVersion()
        {
            // assembly without version

            var asm = AppDomain.CurrentDomain.GetAssemblies()
                .Where(u => u.FullName == ""Anonymously Hosted DynamicMethods Assembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"")
                .FirstOrDefault();
            string version = asm?.GetVersion() ?? """";
            version.Should().Be(""0.0.0"");
        }

        [TestMethod]
        public void TestToByteArrayStandard()
        {
            BigInteger number = BigInteger.Zero;
            Assert.AreEqual("""", number.ToByteArrayStandard().ToHexString());

            number = BigInteger.One;
            Assert.AreEqual(""01"", number.ToByteArrayStandard().ToHexString());
        }

        [TestMethod]
        public void TestNextBigIntegerForRandom()
        {
            Random ran = new();
            Action action1 = () => ran.NextBigInteger(-1);
            action1.Should().Throw<ArgumentException>();

            ran.NextBigInteger(0).Should().Be(0);
            ran.NextBigInteger(8).Should().NotBeNull();
            ran.NextBigInteger(9).Should().NotBeNull();
        }

        [TestMethod]
        public void TestUnmapForIPAddress()
        {
            var addr = new IPAddress(new byte[] { 127, 0, 0, 1 });
            addr.Unmap().Should().Be(addr);

            var addr2 = addr.MapToIPv6();
            addr2.Unmap().Should().Be(addr);
        }

        [TestMethod]
        public void TestUnmapForIPEndPoin()
        {
            var addr = new IPAddress(new byte[] { 127, 0, 0, 1 });
            var endPoint = new IPEndPoint(addr, 8888);
            endPoint.Unmap().Should().Be(endPoint);

            var addr2 = addr.MapToIPv6();
            var endPoint2 = new IPEndPoint(addr2, 8888);
            endPoint2.Unmap().Should().Be(endPoint);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 40 41 59 574 91 93 2005 61 2004 46 2002 40 2006 46 2007 46 2008 41 59 2005 46 2009 40 41 46 2010 40 41 46 2011 40 362 41 59 125 91 2001 93 777 865 2012 40 41 123 2013 2014 61 744 40 41 59 574 91 93 2015 61 2014 46 2012 40 744 2016 40 2017 46 2018 40 1503 44 1503 41 41 44 2019 46 2020 46 2021 41 59 2015 46 2022 46 2023 40 41 46 2024 40 1503 41 59 125 91 2001 93 777 865 2025 40 41 123 574 91 93 2026 61 2027 46 2028 40 1503 44 1503 41 59 2029 2030 61 2026 46 2025 40 41 59 2030 46 2031 40 41 46 2032 40 2029 46 2033 40 362 41 41 59 125 91 2001 93 777 865 2034 40 41 123 2035 2036 61 744 2037 40 1500 41 59 2036 46 2038 40 41 46 2039 40 41 46 2040 40 45 1501 41 59 2035 2041 61 744 2037 40 1504 41 59 2041 46 2038 40 41 46 2039 40 41 46 2040 40 1502 41 59 2035 2042 61 744 2037 40 704 46 2043 41 59 2042 46 2038 40 41 46 2039 40 41 46 2040 40 1503 41 59 2035 2044 61 744 2037 40 726 46 2043 41 59 2044 46 2038 40 41 46 2039 40 41 46 2040 40 1503 41 59 125 91 2001 93 777 865 2045 40 41 123 815 2046 61 752 59 2047 61 2046 46 2048 40 41 46 2049 40 41 46 2050 40 41 46 2051 40 2052 46 2053 60 574 62 40 41 46 2049 40 41 41 59 815 2054 61 362 59 2054 46 2048 40 41 46 2049 40 41 46 2050 40 41 46 2051 40 2052 46 2053 60 574 62 40 41 46 2049 40 41 41 59 815 2055 61 362 59 2056 2057 61 40 41 328 2055 46 2048 40 41 59 2057 46 2050 40 41 46 2058 60 2059 62 40 41 59 815 2060 61 362 59 574 91 93 2061 61 2060 46 2048 40 41 59 2061 46 2049 40 41 46 2050 40 41 46 2051 40 744 574 91 93 123 1501 44 1502 125 46 2049 40 41 41 59 125 91 2001 93 777 865 2062 40 41 123 2063 2064 61 744 2065 60 704 62 123 1501 44 1502 44 1502 125 59 2063 2066 61 744 2067 60 704 44 755 62 123 91 1502 93 61 752 125 59 2064 46 2068 40 2066 41 59 2069 46 2070 40 744 704 91 93 123 1501 44 1502 125 44 2064 46 2071 40 41 41 59 2066 91 1502 93 61 752 59 2066 91 1502 93 61 752 59 2066 91 1501 93 61 752 59 2064 46 2068 40 2066 41 59 2069 46 2070 40 744 704 91 93 123 1502 125 44 2064 46 2071 40 41 41 59 125 91 2001 93 777 865 2072 40 41 123 2073 2074 61 744 2075 60 704 62 123 1501 44 1502 44 1502 125 59 2073 2076 61 744 2077 60 704 62 40 41 123 1502 125 59 2074 46 2078 40 2076 41 59 2079 46 2080 40 744 704 91 93 123 1501 44 1502 125 44 2074 46 2081 40 41 41 59 2076 46 2082 40 1502 41 59 2076 46 2082 40 1502 41 59 2076 46 2082 40 1501 41 59 2074 46 2078 40 2076 41 59 2079 46 2080 40 744 704 91 93 123 1502 125 44 2074 46 2081 40 41 41 59 125 91 2001 93 777 865 2083 40 41 123 2084 2085 61 744 2086 60 704 62 123 1501 44 1502 44 1502 125 59 2084 2087 61 744 2088 60 704 62 40 1502 41 123 1502 125 59 2085 46 2089 40 2087 41 59 2090 46 2091 40 744 704 91 93 123 1501 44 1502 125 44 2085 46 2092 40 41 41 59 2087 46 2093 40 1502 41 59 2087 46 2093 40 1502 41 59 2087 46 2093 40 1501 41 59 2085 46 2089 40 2087 41 59 2090 46 2091 40 744 704 91 93 123 1502 125 44 2085 46 2092 40 41 41 59 125 91 2001 93 777 865 2094 40 41 123 574 91 93 2095 61 752 59 2096 46 2097 60 2098 62 40 40 41 328 2095 46 2099 40 41 41 59 574 91 93 2100 61 2101 46 2102 60 574 62 40 41 59 2100 46 2099 40 41 46 2103 40 41 46 2104 40 362 41 59 2100 46 2099 40 655 41 46 2103 40 41 46 2104 40 362 41 59 2100 46 2099 40 829 41 46 2103 40 41 46 2104 40 362 41 59 574 91 93 2105 61 744 574 91 93 123 40 574 41 314 44 40 574 41 314 44 40 574 41 314 125 59 2105 46 2099 40 41 46 2103 40 41 46 2104 40 362 41 59 2105 46 2099 40 655 41 46 2103 40 41 46 2104 40 362 41 59 2105 46 2099 40 829 41 46 2103 40 41 46 2104 40 362 41 59 125 91 2001 93 777 865 2106 40 41 123 330 2107 2108 61 2109 46 2110 46 2111 40 41 46 2112 40 2113 328 2113 46 2114 323 362 41 46 2115 40 41 59 815 2116 61 2108 346 2117 40 41 343 362 59 2116 46 2118 40 41 46 2119 40 362 41 59 125 91 2001 93 777 865 2120 40 41 123 2121 2122 61 2121 46 2123 59 2124 46 2125 40 362 44 2122 46 2126 40 41 46 2127 40 41 41 59 2122 61 2121 46 2128 59 2124 46 2125 40 362 44 2122 46 2126 40 41 46 2127 40 41 41 59 125 91 2001 93 777 865 2129 40 41 123 2130 2131 61 744 40 41 59 2132 2133 61 40 41 328 2131 46 2134 40 45 1501 41 59 2133 46 2135 40 41 46 2136 60 2137 62 40 41 59 2131 46 2134 40 1500 41 46 2135 40 41 46 2138 40 1500 41 59 2131 46 2134 40 1502 41 46 2135 40 41 46 2139 40 41 59 2131 46 2134 40 1502 41 46 2135 40 41 46 2139 40 41 59 125 91 2001 93 777 865 2140 40 41 123 2141 2142 61 744 2143 40 744 574 91 93 123 1504 44 1500 44 1500 44 1501 125 41 59 2142 46 2144 40 41 46 2145 40 41 46 2146 40 2142 41 59 2141 2147 61 2142 46 2148 40 41 59 2147 46 2144 40 41 46 2145 40 41 46 2146 40 2142 41 59 125 91 2001 93 777 865 2149 40 41 123 2150 2151 61 744 2152 40 744 574 91 93 123 1504 44 1500 44 1500 44 1501 125 41 59 2150 2153 61 744 2154 40 2151 44 1505 41 59 2153 46 2155 40 41 46 2156 40 41 46 2157 40 2153 41 59 2150 2158 61 2151 46 2159 40 41 59 2150 2160 61 744 2154 40 2158 44 1505 41 59 2160 46 2155 40 41 46 2156 40 41 46 2157 40 2153 41 59 125 125 ,"{'AvgLine': 12, 'CountLine': 210, 'CountStmt': 102, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 75, 'MaxEssential': 1, 'SumEssential': 18, 'AvgCyclomatic': 1, 'CountLineCode': 172, 'CountStmtDecl': 51, 'MaxCyclomatic': 1, 'SumCyclomatic': 18, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 37, 'CountSemicolon': 87, 'CountDeclMethod': 14, 'CountLineCodeExe': 101, 'CountLineComment': 1, 'CountClassCoupled': 24, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 72, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 14, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 20, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79846,C#,"    internal class OrderedDictionary<TKey, TValue> : IDictionary<TKey, TValue>
    {
        private class TItem
        {
            public TKey Key;
            public TValue Value;
        }

        private class InternalCollection : KeyedCollection<TKey, TItem>
        {
            protected override TKey GetKeyForItem(TItem item)
            {
                return item.Key;
            }
        }

        private readonly InternalCollection collection = new();

        public int Count => collection.Count;
        public bool IsReadOnly => false;
        public ICollection<TKey> Keys => collection.Select(p => p.Key).ToArray();
        public ICollection<TValue> Values => collection.Select(p => p.Value).ToArray();

        public TValue this[TKey key]
        {
            get
            {
                return collection[key].Value;
            }
            set
            {
                if (collection.TryGetValue(key, out var entry))
                    entry.Value = value;
                else
                    Add(key, value);
            }
        }

        public TValue this[int index]
        {
            get
            {
                return collection[index].Value;
            }
        }

        public void Add(TKey key, TValue value)
        {
            collection.Add(new TItem
            {
                Key = key,
                Value = value
            });
        }

        public bool ContainsKey(TKey key)
        {
            return collection.Contains(key);
        }

        public bool Remove(TKey key)
        {
            return collection.Remove(key);
        }

        public bool TryGetValue(TKey key, out TValue value)
        {
            if (collection.TryGetValue(key, out var entry))
            {
                value = entry.Value;
                return true;
            }
            value = default;
            return false;
        }

        void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> item)
        {
            Add(item.Key, item.Value);
        }

        public void Clear()
        {
            collection.Clear();
        }

        bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> item)
        {
            return collection.Contains(item.Key);
        }

        void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
        {
            for (int i = 0; i < collection.Count; i++)
                array[i + arrayIndex] = new KeyValuePair<TKey, TValue>(collection[i].Key, collection[i].Value);
        }

        bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> item)
        {
            return collection.Remove(item.Key);
        }

        IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
        {
            return collection.Select(p => new KeyValuePair<TKey, TValue>(p.Key, p.Value)).GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return collection.Select(p => new KeyValuePair<TKey, TValue>(p.Key, p.Value)).GetEnumerator();
        }
    }",0,710 587 2000 60 2001 44 2002 62 58 2003 60 2001 44 2002 62 123 773 587 2004 123 777 2001 2005 59 777 2002 2006 59 125 773 587 2007 58 2008 60 2001 44 2004 62 123 775 763 2001 2009 40 2004 2010 41 123 792 2010 46 2011 59 125 125 773 780 2007 2012 61 744 40 41 59 777 704 2013 328 2012 46 2013 59 777 569 2014 328 655 59 777 2015 60 2001 62 2016 328 2012 46 2017 40 2018 328 2018 46 2019 41 46 2020 40 41 59 777 2015 60 2002 62 2021 328 2012 46 2017 40 2018 328 2018 46 2022 41 46 2020 40 41 59 777 2002 823 91 2001 2023 93 123 2024 123 792 2012 91 2023 93 46 2022 59 125 2025 123 688 40 2012 46 2026 40 2023 44 762 2027 2028 41 41 2028 46 2022 61 2029 59 630 2030 40 2023 44 2029 41 59 125 125 777 2002 823 91 704 2031 93 123 2032 123 792 2012 91 2031 93 46 2022 59 125 125 777 865 2033 40 2001 2023 44 2002 2034 41 123 2012 46 2033 40 744 2004 123 2019 61 2023 44 2022 61 2034 125 41 59 125 777 569 2035 40 2001 2023 41 123 792 2012 46 2036 40 2023 41 59 125 777 569 2037 40 2001 2023 41 123 792 2012 46 2037 40 2023 41 59 125 777 569 2038 40 2001 2023 44 762 2002 2034 41 123 688 40 2012 46 2038 40 2023 44 762 2039 2040 41 41 123 2034 61 2040 46 2022 59 792 829 59 125 2034 61 613 59 792 655 59 125 865 2015 60 2041 60 2001 44 2002 355 46 2033 40 2041 60 2001 44 2002 62 2042 41 123 2033 40 2042 46 2019 44 2042 46 2022 41 59 125 777 865 2043 40 41 123 2012 46 2043 40 41 59 125 569 2015 60 2041 60 2001 44 2002 355 46 2044 40 2041 60 2001 44 2002 62 2042 41 123 792 2012 46 2044 40 2042 46 2019 41 59 125 865 2015 60 2041 60 2001 44 2002 355 46 2045 40 2041 60 2001 44 2002 62 91 93 2046 44 704 2047 41 123 664 40 704 2048 61 1500 59 2048 60 2012 46 2013 59 2048 349 41 2046 91 2048 43 2047 93 61 744 2041 60 2001 44 2002 62 40 2012 91 2048 93 46 2019 44 2012 91 2048 93 46 2022 41 59 125 569 2015 60 2041 60 2001 44 2002 355 46 2037 40 2041 60 2001 44 2002 62 2042 41 123 792 2012 46 2037 40 2042 46 2019 41 59 125 2049 60 2041 60 2001 44 2002 355 2050 60 2041 60 2001 44 2002 355 46 2051 40 41 123 792 2012 46 2017 40 2018 328 744 2041 60 2001 44 2002 62 40 2018 46 2019 44 2018 46 2022 41 41 46 2051 40 41 59 125 2049 2050 46 2051 40 41 123 792 2012 46 2017 40 2018 328 744 2041 60 2001 44 2002 62 40 2018 46 2019 44 2018 46 2022 41 41 46 2051 40 41 59 125 125 ,"{'AvgLine': 3, 'CountLine': 112, 'CountStmt': 51, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 96, 'CountStmtDecl': 28, 'MaxCyclomatic': 2, 'SumCyclomatic': 15, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountSemicolon': 28, 'CountDeclMethod': 18, 'CountLineCodeExe': 27, 'CountLineComment': 0, 'CountClassCoupled': 11, 'CountClassDerived': 0, 'CountDeclProperty': 4, 'CountLineCodeDecl': 27, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 12, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 11, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 6, 'CountDeclInstanceMethod': 15, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79853,C#,"        public class NeoAccountState : AccountState
        {
            /// <summary>
            /// The height of the block where the balance changed last time.
            /// </summary>
            public uint BalanceHeight;

            /// <summary>
            /// The voting target of the account. This field can be <see langword=""null""/>.
            /// </summary>
            public ECPoint VoteTo;

            public override void FromStackItem(StackItem stackItem)
            {
                base.FromStackItem(stackItem);
                Struct @struct = (Struct)stackItem;
                BalanceHeight = (uint)@struct[1].GetInteger();
                VoteTo = @struct[2].IsNull ? null : @struct[2].GetSpan().AsSerializable<ECPoint>();
            }

            public override StackItem ToStackItem(ReferenceCounter referenceCounter)
            {
                Struct @struct = (Struct)base.ToStackItem(referenceCounter);
                @struct.Add(BalanceHeight);
                @struct.Add(VoteTo?.ToArray() ?? StackItem.Null);
                return @struct;
            }
        }",0,777 587 2000 58 2001 123 331 777 842 2002 59 331 777 2003 2004 59 777 763 865 2005 40 2006 2007 41 123 563 46 2005 40 2007 41 59 2008 64 816 61 40 2008 41 2007 59 2002 61 40 842 41 64 816 91 1501 93 46 2009 40 41 59 2004 61 64 816 91 1502 93 46 2010 63 752 58 64 816 91 1502 93 46 2011 40 41 46 2012 60 2003 62 40 41 59 125 777 763 2006 2013 40 2014 2015 41 123 2016 64 816 61 40 2016 41 563 46 2013 40 2015 41 59 64 816 46 2017 40 2002 41 59 64 816 46 2017 40 2004 346 2018 40 41 343 2006 46 2019 41 59 792 64 816 59 125 125 ,"{'AvgLine': 7, 'CountLine': 28, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 7, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 10, 'CountDeclMethod': 2, 'CountLineCodeExe': 13, 'CountLineComment': 6, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.32', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79852,C#,"        internal class CandidateState : IInteroperable
        {
            public bool Registered = true;
            public BigInteger Votes;

            public void FromStackItem(StackItem stackItem)
            {
                Struct @struct = (Struct)stackItem;
                Registered = @struct[0].GetBoolean();
                Votes = @struct[1].GetInteger();
            }

            public StackItem ToStackItem(ReferenceCounter referenceCounter)
            {
                return new Struct(referenceCounter) { Registered, Votes };
            }
        }",0,710 587 2000 58 2001 123 777 569 2002 61 829 59 777 2003 2004 59 777 865 2005 40 2006 2007 41 123 2008 64 816 61 40 2008 41 2007 59 2002 61 64 816 91 1500 93 46 2009 40 41 59 2004 61 64 816 91 1501 93 46 2010 40 41 59 125 777 2006 2011 40 2012 2013 41 123 792 744 2014 40 2013 41 123 2002 44 2004 125 59 125 125 ,"{'AvgLine': 5, 'CountLine': 17, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 2, 'CountSemicolon': 6, 'CountDeclMethod': 2, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79867,C#,"    public class ExtensiblePayload : IInventory
    {
        /// <summary>
        /// The category of the extension.
        /// </summary>
        public string Category;

        /// <summary>
        /// Indicates that the payload is only valid when the block height is greater than or equal to this value.
        /// </summary>
        public uint ValidBlockStart;

        /// <summary>
        /// Indicates that the payload is only valid when the block height is less than this value.
        /// </summary>
        public uint ValidBlockEnd;

        /// <summary>
        /// The sender of the payload.
        /// </summary>
        public UInt160 Sender;

        /// <summary>
        /// The data of the payload.
        /// </summary>
        public byte[] Data;

        /// <summary>
        /// The witness of the payload. It must match the <see cref=""Sender""/>.
        /// </summary>
        public Witness Witness;

        private UInt256 _hash = null;
        public UInt256 Hash
        {
            get
            {
                if (_hash == null)
                {
                    _hash = this.CalculateHash();
                }
                return _hash;
            }
        }

        InventoryType IInventory.InventoryType => InventoryType.Extensible;

        public int Size =>
            Category.GetVarSize() + //Category
            sizeof(uint) +          //ValidBlockStart
            sizeof(uint) +          //ValidBlockEnd
            UInt160.Length +        //Sender
            Data.GetVarSize() +     //Data
            1 + Witness.Size;       //Witness

        Witness[] IVerifiable.Witnesses
        {
            get
            {
                return new[] { Witness };
            }
            set
            {
                if (value.Length != 1) throw new ArgumentException();
                Witness = value[0];
            }
        }

        void ISerializable.Deserialize(BinaryReader reader)
        {
            ((IVerifiable)this).DeserializeUnsigned(reader);
            if (reader.ReadByte() != 1) throw new FormatException();
            Witness = reader.ReadSerializable<Witness>();
        }

        void IVerifiable.DeserializeUnsigned(BinaryReader reader)
        {
            Category = reader.ReadVarString(32);
            ValidBlockStart = reader.ReadUInt32();
            ValidBlockEnd = reader.ReadUInt32();
            if (ValidBlockStart >= ValidBlockEnd) throw new FormatException();
            Sender = reader.ReadSerializable<UInt160>();
            Data = reader.ReadVarBytes(Message.PayloadMaxSize);
        }

        UInt160[] IVerifiable.GetScriptHashesForVerifying(DataCache snapshot)
        {
            return new[] { Sender }; // This address should be checked by consumer
        }

        void ISerializable.Serialize(BinaryWriter writer)
        {
            ((IVerifiable)this).SerializeUnsigned(writer);
            writer.Write((byte)1); writer.Write(Witness);
        }

        void IVerifiable.SerializeUnsigned(BinaryWriter writer)
        {
            writer.WriteVarString(Category);
            writer.Write(ValidBlockStart);
            writer.Write(ValidBlockEnd);
            writer.Write(Sender);
            writer.WriteVarBytes(Data);
        }

        internal bool Verify(ProtocolSettings settings, DataCache snapshot, ISet<UInt160> extensibleWitnessWhiteList)
        {
            uint height = NativeContract.Ledger.CurrentIndex(snapshot);
            if (height < ValidBlockStart || height >= ValidBlockEnd) return false;
            if (!extensibleWitnessWhiteList.Contains(Sender)) return false;
            return this.VerifyWitnesses(settings, snapshot, 0_06000000L);
        }
    }",0,777 587 2000 58 2001 123 331 777 815 2002 59 331 777 842 2003 59 331 777 842 2004 59 331 777 2005 2006 59 331 777 574 91 93 2007 59 331 777 2008 2008 59 773 2009 2010 61 752 59 777 2009 2011 123 2012 123 688 40 2010 323 752 41 123 2010 61 823 46 2013 40 41 59 125 792 2010 59 125 125 2014 2001 46 2014 328 2014 46 2015 59 777 704 2016 328 2002 46 2017 40 41 43 330 805 40 842 41 43 330 805 40 842 41 43 330 2005 46 2018 43 330 2007 46 2017 40 41 43 330 1501 43 2008 46 2016 59 330 2008 91 93 2019 46 2020 123 2021 123 792 744 91 93 123 2008 125 59 125 2022 123 688 40 2023 46 2018 340 1501 41 825 744 2024 40 41 59 2008 61 2023 91 1500 93 59 125 125 865 2025 46 2026 40 2027 2028 41 123 40 40 2019 41 823 41 46 2029 40 2028 41 59 688 40 2028 46 2030 40 41 340 1501 41 825 744 2031 40 41 59 2008 61 2028 46 2032 60 2008 62 40 41 59 125 865 2019 46 2033 40 2027 2028 41 123 2002 61 2028 46 2034 40 1503 41 59 2003 61 2028 46 2035 40 41 59 2004 61 2028 46 2035 40 41 59 688 40 2003 325 2004 41 825 744 2036 40 41 59 2006 61 2028 46 2037 60 2005 62 40 41 59 2007 61 2028 46 2038 40 2039 46 2040 41 59 125 2005 91 93 2019 46 2041 40 2042 2043 41 123 792 744 91 93 123 2006 125 59 330 125 865 2025 46 2044 40 2045 2046 41 123 40 40 2019 41 823 41 46 2047 40 2046 41 59 2046 46 2048 40 40 574 41 1501 41 59 2046 46 2048 40 2008 41 59 125 865 2019 46 2049 40 2045 2046 41 123 2046 46 2050 40 2002 41 59 2046 46 2051 40 2003 41 59 2046 46 2051 40 2004 41 59 2046 46 2051 40 2006 41 59 2046 46 2052 40 2007 41 59 125 710 569 2053 40 2054 2055 44 2042 2043 44 2056 60 2005 62 2057 41 123 842 2058 61 2059 46 2060 46 2061 40 2043 41 59 688 40 2058 60 2003 309 2058 325 2004 41 792 655 59 688 40 33 2057 46 2062 40 2006 41 41 792 655 59 792 823 46 2063 40 2055 44 2043 44 1500 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 113, 'CountStmt': 54, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 33, 'MaxEssential': 3, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 80, 'CountStmtDecl': 22, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 15, 'CountSemicolon': 36, 'CountDeclMethod': 11, 'CountLineCodeExe': 28, 'CountLineComment': 25, 'CountClassCoupled': 22, 'CountClassDerived': 0, 'CountDeclProperty': 4, 'CountLineCodeDecl': 28, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.31', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 8, 'CountDeclInstanceMethod': 11, 'CountDeclMethodInternal': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 15, 'CountDeclInstanceVariable': 7, 'PercentLackOfCohesionModified': 71, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79871,C#,"    public class OracleResponse : TransactionAttribute
    {
        /// <summary>
        /// Indicates the maximum size of the <see cref=""Result""/> field.
        /// </summary>
        public const int MaxResultSize = ushort.MaxValue;

        /// <summary>
        /// Represents the fixed value of the <see cref=""Transaction.Script""/> field of the oracle responding transaction.
        /// </summary>
        public static readonly byte[] FixedScript;

        /// <summary>
        /// The ID of the oracle request.
        /// </summary>
        public ulong Id;

        /// <summary>
        /// The response code for the oracle request.
        /// </summary>
        public OracleResponseCode Code;

        /// <summary>
        /// The result for the oracle request.
        /// </summary>
        public byte[] Result;

        public override TransactionAttributeType Type => TransactionAttributeType.OracleResponse;
        public override bool AllowMultiple => false;

        public override int Size => base.Size +
            sizeof(ulong) +                 //Id
            sizeof(OracleResponseCode) +    //ResponseCode
            Result.GetVarSize();            //Result

        static OracleResponse()
        {
            using ScriptBuilder sb = new();
            sb.EmitDynamicCall(NativeContract.Oracle.Hash, ""finish"");
            FixedScript = sb.ToArray();
        }

        protected override void DeserializeWithoutType(BinaryReader reader)
        {
            Id = reader.ReadUInt64();
            Code = (OracleResponseCode)reader.ReadByte();
            if (!Enum.IsDefined(typeof(OracleResponseCode), Code))
                throw new FormatException();
            Result = reader.ReadVarBytes(MaxResultSize);
            if (Code != OracleResponseCode.Success && Result.Length > 0)
                throw new FormatException();
        }

        protected override void SerializeWithoutType(BinaryWriter writer)
        {
            writer.Write(Id);
            writer.Write((byte)Code);
            writer.WriteVarBytes(Result);
        }

        public override JObject ToJson()
        {
            JObject json = base.ToJson();
            json[""id""] = Id;
            json[""code""] = Code;
            json[""result""] = Convert.ToBase64String(Result);
            return json;
        }

        public override bool Verify(DataCache snapshot, Transaction tx)
        {
            if (tx.Signers.Any(p => p.Scopes != WitnessScope.None)) return false;
            if (!tx.Script.AsSpan().SequenceEqual(FixedScript)) return false;
            OracleRequest request = NativeContract.Oracle.GetRequest(snapshot, Id);
            if (request is null) return false;
            if (tx.NetworkFee + tx.SystemFee != request.GasForResponse) return false;
            UInt160 oracleAccount = Contract.GetBFTAddress(NativeContract.RoleManagement.GetDesignatedByRole(snapshot, Role.Oracle, NativeContract.Ledger.CurrentIndex(snapshot) + 1));
            return tx.Signers.Any(p => p.Account.Equals(oracleAccount));
        }
    }",0,777 587 2000 58 2001 123 331 777 601 704 2002 61 859 46 2003 59 331 777 809 780 574 91 93 2004 59 331 777 848 2005 59 331 777 2006 2007 59 331 777 574 91 93 2008 59 777 763 2009 2010 328 2009 46 2000 59 777 763 569 2011 328 655 59 777 763 704 2012 328 563 46 2012 43 805 40 848 41 43 330 805 40 2006 41 43 330 2008 46 2013 40 41 59 330 809 2000 40 41 123 860 2014 2015 61 744 40 41 59 2015 46 2016 40 2017 46 2018 46 2019 44 362 41 59 2004 61 2015 46 2020 40 41 59 125 775 763 865 2021 40 2022 2023 41 123 2005 61 2023 46 2024 40 41 59 2007 61 40 2006 41 2023 46 2025 40 41 59 688 40 33 2026 46 2027 40 836 40 2006 41 44 2007 41 41 825 744 2028 40 41 59 2008 61 2023 46 2029 40 2002 41 59 688 40 2007 340 2006 46 2030 307 2008 46 2031 62 1500 41 825 744 2028 40 41 59 125 775 763 865 2032 40 2033 2034 41 123 2034 46 2035 40 2005 41 59 2034 46 2035 40 40 574 41 2007 41 59 2034 46 2036 40 2008 41 59 125 777 763 2037 2038 40 41 123 2037 2039 61 563 46 2038 40 41 59 2039 91 362 93 61 2005 59 2039 91 362 93 61 2007 59 2039 91 362 93 61 2040 46 2041 40 2008 41 59 792 2039 59 125 777 763 569 2042 40 2043 2044 44 2045 2046 41 123 688 40 2046 46 2047 46 2048 40 2049 328 2049 46 2050 340 2051 46 2052 41 41 792 655 59 688 40 33 2046 46 2053 46 2054 40 41 46 2055 40 2004 41 41 792 655 59 2056 2057 61 2058 46 2059 46 2060 40 2044 44 2005 41 59 688 40 2057 712 752 41 792 655 59 688 40 2046 46 2061 43 2046 46 2062 340 2057 46 2063 41 792 655 59 2064 2065 61 2066 46 2067 40 2058 46 2068 46 2069 40 2044 44 2070 46 2059 44 2058 46 2071 46 2072 40 2044 41 43 1501 41 41 59 792 2046 46 2047 46 2048 40 2049 328 2049 46 2073 46 2074 40 2065 41 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 80, 'CountStmt': 42, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 28, 'MaxEssential': 5, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 54, 'CountStmtDecl': 17, 'MaxCyclomatic': 5, 'SumCyclomatic': 13, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountSemicolon': 31, 'CountDeclMethod': 8, 'CountLineCodeExe': 25, 'CountLineComment': 18, 'CountClassCoupled': 21, 'CountClassDerived': 0, 'CountDeclProperty': 3, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.33', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 59, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 15, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 59, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79881,C#,"    public class UT_LogEventArgs
    {
        [TestMethod]
        public void TestGeneratorAndGet()
        {
            IVerifiable container = new Header();
            UInt160 scripthash = UInt160.Zero;
            string message = ""lalala"";
            LogEventArgs logEventArgs = new LogEventArgs(container, scripthash, message);
            Assert.IsNotNull(logEventArgs);
            Assert.AreEqual(container, logEventArgs.ScriptContainer);
            Assert.AreEqual(scripthash, logEventArgs.ScriptHash);
            Assert.AreEqual(message, logEventArgs.Message);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 41 59 2006 2007 61 2006 46 2008 59 815 2009 61 362 59 2010 2011 61 744 2010 40 2004 44 2007 44 2009 41 59 2012 46 2013 40 2011 41 59 2012 46 2014 40 2004 44 2011 46 2015 41 59 2012 46 2014 40 2007 44 2011 46 2016 41 59 2012 46 2014 40 2009 44 2011 46 2017 41 59 125 125 ,"{'AvgLine': 11, 'CountLine': 15, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 8, 'CountDeclMethod': 1, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79886,C#,"    public static class Nep17NativeContractExtensions
    {
        internal class ManualWitness : IVerifiable
        {
            private readonly UInt160[] _hashForVerify;

            public int Size => 0;

            public Witness[] Witnesses { get; set; }

            public ManualWitness(params UInt160[] hashForVerify)
            {
                _hashForVerify = hashForVerify ?? System.Array.Empty<UInt160>();
            }

            public void Deserialize(BinaryReader reader) { }

            public void DeserializeUnsigned(BinaryReader reader) { }

            public UInt160[] GetScriptHashesForVerifying(DataCache snapshot) => _hashForVerify;

            public void Serialize(BinaryWriter writer) { }

            public void SerializeUnsigned(BinaryWriter writer) { }
        }

        public static bool Transfer(this NativeContract contract, DataCache snapshot, byte[] from, byte[] to, BigInteger amount, bool signFrom, Block persistingBlock)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application,
                new ManualWitness(signFrom ? new UInt160(from) : null), snapshot, persistingBlock, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(contract.Hash, ""transfer"", from, to, amount, null);
            engine.LoadScript(script.ToArray());

            if (engine.Execute() == VMState.FAULT)
            {
                throw engine.FaultException;
            }

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Boolean));

            return result.GetBoolean();
        }

        public static BigInteger TotalSupply(this NativeContract contract, DataCache snapshot)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application, null, snapshot, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(contract.Hash, ""totalSupply"");
            engine.LoadScript(script.ToArray());

            engine.Execute().Should().Be(VMState.HALT);

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Integer));

            return result.GetInteger();
        }

        public static BigInteger BalanceOf(this NativeContract contract, DataCache snapshot, byte[] account)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application, null, snapshot, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(contract.Hash, ""balanceOf"", account);
            engine.LoadScript(script.ToArray());

            engine.Execute().Should().Be(VMState.HALT);

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Integer));

            return result.GetInteger();
        }

        public static BigInteger Decimals(this NativeContract contract, DataCache snapshot)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application, null, snapshot, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(contract.Hash, ""decimals"");
            engine.LoadScript(script.ToArray());

            engine.Execute().Should().Be(VMState.HALT);

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Integer));

            return result.GetInteger();
        }

        public static string Symbol(this NativeContract contract, DataCache snapshot)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application, null, snapshot, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(contract.Hash, ""symbol"");
            engine.LoadScript(script.ToArray());

            engine.Execute().Should().Be(VMState.HALT);

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.ByteString));

            return result.GetString();
        }
    }",0,777 809 587 2000 123 710 587 2001 58 2002 123 773 780 2003 91 93 2004 59 777 704 2005 328 1500 59 777 2006 91 93 2007 123 2008 59 2009 59 125 777 2001 40 766 2003 91 93 2010 41 123 2004 61 2010 343 2011 46 2012 46 2013 60 2003 62 40 41 59 125 777 865 2014 40 2015 2016 41 123 125 777 865 2017 40 2015 2016 41 123 125 777 2003 91 93 2018 40 2019 2020 41 328 2004 59 777 865 2021 40 2022 2023 41 123 125 777 865 2024 40 2022 2023 41 123 125 125 777 809 569 2025 40 823 2026 2027 44 2028 2029 44 574 91 93 2030 44 574 91 93 2031 44 2032 2033 44 569 2034 44 2035 2036 41 123 860 2037 2038 61 2039 46 2040 40 2041 46 2042 44 744 2001 40 2034 63 744 2043 40 2030 41 58 752 41 44 2029 44 2036 44 2044 58 2045 46 2046 46 2047 41 59 860 2037 2048 61 744 2049 40 41 59 2048 46 2050 40 2027 46 2051 44 362 44 2030 44 2031 44 2033 44 752 41 59 2038 46 2052 40 2048 46 2053 40 41 41 59 688 40 2038 46 2054 40 41 323 2055 46 2056 41 123 825 2038 46 2057 59 125 2037 2058 61 2038 46 2059 46 2060 40 41 59 2058 46 2061 40 41 46 2062 40 836 40 2063 46 2064 46 2065 41 41 59 792 2058 46 2066 40 41 59 125 777 809 2032 2067 40 823 2026 2027 44 2028 2029 41 123 860 2068 2069 61 2070 46 2071 40 2072 46 2073 44 752 44 2029 44 2074 58 2075 46 2076 46 2077 41 59 860 2068 2078 61 744 2079 40 41 59 2078 46 2080 40 2027 46 2081 44 362 41 59 2069 46 2082 40 2078 46 2083 40 41 41 59 2069 46 2084 40 41 46 2085 40 41 46 2086 40 2087 46 2088 41 59 2068 2089 61 2069 46 2090 46 2091 40 41 59 2089 46 2085 40 41 46 2092 40 836 40 2093 46 2094 46 2095 41 41 59 792 2089 46 2096 40 41 59 125 777 809 2032 2097 40 823 2026 2027 44 2028 2029 44 574 91 93 2098 41 123 860 2099 2100 61 2101 46 2102 40 2103 46 2104 44 752 44 2029 44 2105 58 2106 46 2107 46 2108 41 59 860 2099 2109 61 744 2110 40 41 59 2109 46 2111 40 2027 46 2112 44 362 44 2098 41 59 2100 46 2113 40 2109 46 2114 40 41 41 59 2100 46 2115 40 41 46 2116 40 41 46 2117 40 2118 46 2119 41 59 2099 2120 61 2100 46 2121 46 2122 40 41 59 2120 46 2116 40 41 46 2123 40 836 40 2124 46 2125 46 2126 41 41 59 792 2120 46 2127 40 41 59 125 777 809 2032 2128 40 823 2026 2027 44 2028 2029 41 123 860 2129 2130 61 2131 46 2132 40 2133 46 2134 44 752 44 2029 44 2135 58 2136 46 2137 46 2138 41 59 860 2129 2139 61 744 2140 40 41 59 2139 46 2141 40 2027 46 2142 44 362 41 59 2130 46 2143 40 2139 46 2144 40 41 41 59 2130 46 2145 40 41 46 2146 40 41 46 2147 40 2148 46 2149 41 59 2129 2150 61 2130 46 2151 46 2152 40 41 59 2150 46 2146 40 41 46 2153 40 836 40 2154 46 2155 46 2156 41 41 59 792 2150 46 2157 40 41 59 125 777 809 815 2158 40 823 2026 2027 44 2028 2029 41 123 860 2159 2160 61 2161 46 2162 40 2163 46 2164 44 752 44 2029 44 2165 58 2166 46 2167 46 2168 41 59 860 2159 2169 61 744 2170 40 41 59 2169 46 2171 40 2027 46 2172 44 362 41 59 2160 46 2173 40 2169 46 2174 40 41 41 59 2160 46 2175 40 41 46 2176 40 41 46 2177 40 2178 46 2179 41 59 2159 2180 61 2160 46 2181 46 2182 40 41 59 2180 46 2176 40 41 46 2183 40 836 40 2184 46 2185 46 2186 41 41 59 792 2180 46 2187 40 41 59 125 125 ,"{'AvgLine': 15, 'CountLine': 110, 'CountStmt': 51, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 33, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 77, 'CountStmtDecl': 23, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 33, 'CountSemicolon': 46, 'CountDeclMethod': 5, 'CountLineCodeExe': 51, 'CountLineComment': 0, 'CountClassCoupled': 16, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 13, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79894,C#,"    internal abstract class Cache<TKey, TValue> : ICollection<TValue>, IDisposable
    {
        protected class CacheItem
        {
            public readonly TKey Key;
            public readonly TValue Value;
            public readonly DateTime Time;

            public CacheItem(TKey key, TValue value)
            {
                this.Key = key;
                this.Value = value;
                this.Time = TimeProvider.Current.UtcNow;
            }
        }

        protected readonly ReaderWriterLockSlim RwSyncRootLock = new(LockRecursionPolicy.SupportsRecursion);
        protected readonly Dictionary<TKey, CacheItem> InnerDictionary;
        private readonly int max_capacity;

        public TValue this[TKey key]
        {
            get
            {
                RwSyncRootLock.EnterReadLock();
                try
                {
                    if (!InnerDictionary.TryGetValue(key, out CacheItem item)) throw new KeyNotFoundException();
                    OnAccess(item);
                    return item.Value;
                }
                finally
                {
                    RwSyncRootLock.ExitReadLock();
                }
            }
        }

        public int Count
        {
            get
            {
                RwSyncRootLock.EnterReadLock();
                try
                {
                    return InnerDictionary.Count;
                }
                finally
                {
                    RwSyncRootLock.ExitReadLock();
                }
            }
        }

        public bool IsReadOnly => false;

        public Cache(int max_capacity, IEqualityComparer<TKey> comparer = null)
        {
            this.max_capacity = max_capacity;
            this.InnerDictionary = new Dictionary<TKey, CacheItem>(comparer);
        }

        public void Add(TValue item)
        {
            TKey key = GetKeyForItem(item);
            RwSyncRootLock.EnterWriteLock();
            try
            {
                AddInternal(key, item);
            }
            finally
            {
                RwSyncRootLock.ExitWriteLock();
            }
        }

        private void AddInternal(TKey key, TValue item)
        {
            if (InnerDictionary.TryGetValue(key, out CacheItem cacheItem))
            {
                OnAccess(cacheItem);
            }
            else
            {
                if (InnerDictionary.Count >= max_capacity)
                {
                    //TODO: Perform a performance test on the PLINQ query to determine which algorithm is better here (parallel or not)
                    foreach (CacheItem item_del in InnerDictionary.Values.AsParallel().OrderBy(p => p.Time).Take(InnerDictionary.Count - max_capacity + 1))
                    {
                        RemoveInternal(item_del);
                    }
                }
                InnerDictionary.Add(key, new CacheItem(key, item));
            }
        }

        public void AddRange(IEnumerable<TValue> items)
        {
            RwSyncRootLock.EnterWriteLock();
            try
            {
                foreach (TValue item in items)
                {
                    TKey key = GetKeyForItem(item);
                    AddInternal(key, item);
                }
            }
            finally
            {
                RwSyncRootLock.ExitWriteLock();
            }
        }

        public void Clear()
        {
            RwSyncRootLock.EnterWriteLock();
            try
            {
                foreach (CacheItem item_del in InnerDictionary.Values.ToArray())
                {
                    RemoveInternal(item_del);
                }
            }
            finally
            {
                RwSyncRootLock.ExitWriteLock();
            }
        }

        public bool Contains(TKey key)
        {
            RwSyncRootLock.EnterReadLock();
            try
            {
                if (!InnerDictionary.TryGetValue(key, out CacheItem cacheItem)) return false;
                OnAccess(cacheItem);
                return true;
            }
            finally
            {
                RwSyncRootLock.ExitReadLock();
            }
        }

        public bool Contains(TValue item)
        {
            return Contains(GetKeyForItem(item));
        }

        public void CopyTo(TValue[] array, int arrayIndex)
        {
            if (array == null) throw new ArgumentNullException();
            if (arrayIndex < 0) throw new ArgumentOutOfRangeException();
            if (arrayIndex + InnerDictionary.Count > array.Length) throw new ArgumentException();
            foreach (TValue item in this)
            {
                array[arrayIndex++] = item;
            }
        }

        public void Dispose()
        {
            Clear();
            RwSyncRootLock.Dispose();
        }

        public IEnumerator<TValue> GetEnumerator()
        {
            RwSyncRootLock.EnterReadLock();
            try
            {
                foreach (TValue item in InnerDictionary.Values.Select(p => p.Value))
                {
                    yield return item;
                }
            }
            finally
            {
                RwSyncRootLock.ExitReadLock();
            }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        protected abstract TKey GetKeyForItem(TValue item);

        public bool Remove(TKey key)
        {
            RwSyncRootLock.EnterWriteLock();
            try
            {
                if (!InnerDictionary.TryGetValue(key, out CacheItem cacheItem)) return false;
                RemoveInternal(cacheItem);
                return true;
            }
            finally
            {
                RwSyncRootLock.ExitWriteLock();
            }
        }

        protected abstract void OnAccess(CacheItem item);

        public bool Remove(TValue item)
        {
            return Remove(GetKeyForItem(item));
        }

        private void RemoveInternal(CacheItem item)
        {
            InnerDictionary.Remove(item.Key);
            if (item.Value is IDisposable disposable)
            {
                disposable.Dispose();
            }
        }

        public bool TryGet(TKey key, out TValue item)
        {
            RwSyncRootLock.EnterReadLock();
            try
            {
                if (InnerDictionary.TryGetValue(key, out CacheItem cacheItem))
                {
                    OnAccess(cacheItem);
                    item = cacheItem.Value;
                    return true;
                }
            }
            finally
            {
                RwSyncRootLock.ExitReadLock();
            }
            item = default;
            return false;
        }
    }",0,710 539 587 2000 60 2001 44 2002 62 58 2003 60 2002 62 44 2004 123 775 587 2005 123 777 780 2001 2006 59 777 780 2002 2007 59 777 780 2008 2009 59 777 2005 40 2001 2010 44 2002 2011 41 123 823 46 2006 61 2010 59 823 46 2007 61 2011 59 823 46 2009 61 2012 46 2013 46 2014 59 125 125 775 780 2015 2016 61 744 40 2017 46 2018 41 59 775 780 2019 60 2001 44 2005 62 2020 59 773 780 704 2021 59 777 2002 823 91 2001 2022 93 123 2023 123 2016 46 2024 40 41 59 830 123 688 40 33 2020 46 2025 40 2022 44 762 2005 2026 41 41 825 744 2027 40 41 59 2028 40 2026 41 59 792 2026 46 2029 59 125 658 123 2016 46 2030 40 41 59 125 125 125 777 704 2031 123 2032 123 2016 46 2033 40 41 59 830 123 792 2020 46 2031 59 125 658 123 2016 46 2034 40 41 59 125 125 125 777 569 2035 328 655 59 777 2000 40 704 2021 44 2036 60 2001 62 2037 61 752 41 123 823 46 2021 61 2021 59 823 46 2020 61 744 2019 60 2001 44 2005 62 40 2037 41 59 125 777 865 2038 40 2002 2039 41 123 2001 2022 61 2040 40 2039 41 59 2016 46 2041 40 41 59 830 123 2042 40 2022 44 2039 41 59 125 658 123 2016 46 2043 40 41 59 125 125 773 865 2044 40 2001 2022 44 2002 2039 41 123 688 40 2020 46 2045 40 2022 44 762 2005 2046 41 41 123 2047 40 2046 41 59 125 630 123 688 40 2020 46 2031 325 2021 41 123 330 665 40 2005 2048 696 2020 46 2049 46 2050 40 41 46 2051 40 2052 328 2052 46 2053 41 46 2054 40 2020 46 2031 45 2021 43 1501 41 41 123 2055 40 2048 41 59 125 125 2020 46 2038 40 2022 44 744 2005 40 2022 44 2039 41 41 59 125 125 777 865 2056 40 2057 60 2002 62 2058 41 123 2016 46 2059 40 41 59 830 123 665 40 2002 2039 696 2058 41 123 2001 2022 61 2060 40 2039 41 59 2044 40 2022 44 2039 41 59 125 125 658 123 2016 46 2061 40 41 59 125 125 777 865 2062 40 41 123 2016 46 2063 40 41 59 830 123 665 40 2005 2064 696 2020 46 2065 46 2066 40 41 41 123 2067 40 2064 41 59 125 125 658 123 2016 46 2068 40 41 59 125 125 777 569 2069 40 2001 2022 41 123 2016 46 2070 40 41 59 830 123 688 40 33 2020 46 2071 40 2022 44 762 2005 2072 41 41 792 655 59 2073 40 2072 41 59 792 829 59 125 658 123 2016 46 2074 40 41 59 125 125 777 569 2069 40 2002 2039 41 123 792 2069 40 2075 40 2039 41 41 59 125 777 865 2076 40 2002 91 93 2077 44 704 2078 41 123 688 40 2077 323 752 41 825 744 2079 40 41 59 688 40 2078 60 1500 41 825 744 2080 40 41 59 688 40 2078 43 2020 46 2031 62 2077 46 2081 41 825 744 2082 40 41 59 665 40 2002 2039 696 823 41 123 2077 91 2078 349 93 61 2039 59 125 125 777 865 2083 40 41 123 2062 40 41 59 2016 46 2083 40 41 59 125 777 2084 60 2002 62 2085 40 41 123 2016 46 2086 40 41 59 830 123 665 40 2002 2039 696 2020 46 2087 46 2088 40 2089 328 2089 46 2090 41 41 123 2091 792 2039 59 125 125 658 123 2016 46 2092 40 41 59 125 125 2084 2057 46 2085 40 41 123 792 2085 40 41 59 125 775 539 2001 2093 40 2002 2039 41 59 777 569 2094 40 2001 2022 41 123 2016 46 2095 40 41 59 830 123 688 40 33 2020 46 2096 40 2022 44 762 2005 2097 41 41 792 655 59 2098 40 2097 41 59 792 829 59 125 658 123 2016 46 2099 40 41 59 125 125 775 539 865 2100 40 2005 2039 41 59 777 569 2094 40 2002 2039 41 123 792 2094 40 2093 40 2039 41 41 59 125 773 865 2101 40 2005 2039 41 123 2020 46 2094 40 2039 46 2102 41 59 688 40 2039 46 2103 712 2004 2104 41 123 2104 46 2083 40 41 59 125 125 777 569 2105 40 2001 2022 44 762 2002 2039 41 123 2016 46 2106 40 41 59 830 123 688 40 2020 46 2107 40 2022 44 762 2005 2108 41 41 123 2100 40 2108 41 59 2039 61 2108 46 2109 59 792 829 59 125 125 658 123 2016 46 2110 40 41 59 125 2039 61 613 59 792 655 59 125 125 ,"{'AvgLine': 10, 'CountLine': 240, 'CountStmt': 113, 'MaxNesting': 3, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 82, 'MaxEssential': 4, 'SumEssential': 20, 'AvgCyclomatic': 1, 'CountLineCode': 217, 'CountStmtDecl': 33, 'MaxCyclomatic': 5, 'SumCyclomatic': 31, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 22, 'CountSemicolon': 67, 'CountDeclMethod': 20, 'CountLineCodeExe': 87, 'CountLineComment': 1, 'CountClassCoupled': 14, 'CountClassDerived': 3, 'CountDeclProperty': 2, 'CountLineCodeDecl': 33, 'CountLineInactive': 0, 'CountDeclMethodAll': 26, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 31, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 15, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 57, 'SumCyclomaticModified': 31, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 19, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 37, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 2, 'CountDeclInstanceVariableProtectedInternal': 0}"
79906,C#,"    internal class TaskManagerMailbox : PriorityMailbox
    {
        public TaskManagerMailbox(Akka.Actor.Settings settings, Config config)
            : base(settings, config)
        {
        }

        internal protected override bool IsHighPriority(object message)
        {
            switch (message)
            {
                case TaskManager.Register _:
                case TaskManager.Update _:
                case TaskManager.RestartTasks _:
                    return true;
                case TaskManager.NewTasks tasks:
                    if (tasks.Payload.Type == InventoryType.Block || tasks.Payload.Type == InventoryType.Extensible)
                        return true;
                    return false;
                default:
                    return false;
            }
        }

        internal protected override bool ShallDrop(object message, IEnumerable queue)
        {
            if (message is not TaskManager.NewTasks tasks) return false;
            // Remove duplicate tasks
            if (queue.OfType<TaskManager.NewTasks>().Any(x => x.Payload.Type == tasks.Payload.Type && x.Payload.Hashes.SequenceEqual(tasks.Payload.Hashes))) return true;
            return false;
        }
    }",0,710 587 2000 58 2001 123 777 2000 40 2002 46 2003 46 2004 2005 44 2006 2007 41 58 563 40 2005 44 2007 41 123 125 710 775 763 569 2008 40 755 2009 41 123 819 40 2009 41 123 579 2010 46 2011 2012 58 579 2010 46 2013 2012 58 579 2010 46 2014 2012 58 792 829 59 579 2010 46 2015 2016 58 688 40 2016 46 2017 46 2018 323 2019 46 2020 309 2016 46 2017 46 2018 323 2019 46 2021 41 792 829 59 792 655 59 613 58 792 655 59 125 125 710 775 763 569 2022 40 755 2009 44 2023 2024 41 123 688 40 2009 712 2025 2026 46 2027 2028 41 792 655 59 330 688 40 2024 46 2029 60 2026 46 2027 62 40 41 46 2030 40 2031 328 2031 46 2032 46 2033 323 2028 46 2032 46 2033 307 2031 46 2032 46 2034 46 2035 40 2028 46 2032 46 2034 41 41 41 792 829 59 792 655 59 125 125 ,"{'AvgLine': 9, 'CountLine': 32, 'CountStmt': 15, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 4, 'SumEssential': 9, 'AvgCyclomatic': 3, 'CountLineCode': 29, 'CountStmtDecl': 4, 'MaxCyclomatic': 6, 'SumCyclomatic': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 7, 'CountDeclMethod': 3, 'CountLineCodeExe': 14, 'CountLineComment': 1, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.03', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 7, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 2, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79921,C#,"        protected class CacheItem
        {
            public readonly TKey Key;
            public readonly TValue Value;
            public readonly DateTime Time;

            public CacheItem(TKey key, TValue value)
            {
                this.Key = key;
                this.Value = value;
                this.Time = TimeProvider.Current.UtcNow;
            }
        }",0,775 587 2000 123 777 780 2001 2002 59 777 780 2003 2004 59 777 780 2005 2006 59 777 2000 40 2001 2007 44 2003 2008 41 123 823 46 2002 61 2007 59 823 46 2004 61 2008 59 823 46 2006 61 2009 46 2010 46 2011 59 125 125 ,"{'AvgLine': 6, 'CountLine': 13, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 6, 'CountDeclMethod': 1, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79953,C#,"    public class UT_Witness
    {
        Witness uut;

        [TestInitialize]
        public void TestSetup()
        {
            uut = new Witness();
        }

        [TestMethod]
        public void InvocationScript_Get()
        {
            uut.InvocationScript.Should().BeNull();
        }

        private static Witness PrepareDummyWitness(int pubKeys, int m)
        {
            var address = new WalletAccount[pubKeys];
            var wallets = new NEP6Wallet[pubKeys];
            var walletsUnlocks = new IDisposable[pubKeys];
            var snapshot = TestBlockchain.GetTestSnapshot();

            for (int x = 0; x < pubKeys; x++)
            {
                wallets[x] = TestUtils.GenerateTestWallet();
                walletsUnlocks[x] = wallets[x].Unlock(""123"");
                address[x] = wallets[x].CreateAccount();
            }

            // Generate multisignature

            var multiSignContract = Contract.CreateMultiSigContract(m, address.Select(a => a.GetKey().PublicKey).ToArray());

            for (int x = 0; x < pubKeys; x++)
            {
                wallets[x].CreateAccount(multiSignContract, address[x].GetKey());
            }

            // Sign

            var data = new ContractParametersContext(snapshot, new Transaction()
            {
                Attributes = Array.Empty<TransactionAttribute>(),
                Signers = new[] {new Signer()
                {
                    Account = multiSignContract.ScriptHash,
                    Scopes = WitnessScope.CalledByEntry
                }},
                NetworkFee = 0,
                Nonce = 0,
                Script = Array.Empty<byte>(),
                SystemFee = 0,
                ValidUntilBlock = 0,
                Version = 0,
                Witnesses = Array.Empty<Witness>()
            }, ProtocolSettings.Default.Network);

            for (int x = 0; x < m; x++)
            {
                Assert.IsTrue(wallets[x].Sign(data));
            }

            Assert.IsTrue(data.Completed);
            return data.GetWitnesses()[0];
        }

        [TestMethod]
        public void MaxSize_OK()
        {
            var witness = PrepareDummyWitness(10, 10);

            // Check max size

            witness.Size.Should().Be(1023);
            witness.InvocationScript.GetVarSize().Should().Be(663);
            witness.VerificationScript.GetVarSize().Should().Be(360);

            var copy = witness.ToArray().AsSerializable<Witness>();

            CollectionAssert.AreEqual(witness.InvocationScript, copy.InvocationScript);
            CollectionAssert.AreEqual(witness.VerificationScript, copy.VerificationScript);
        }

        [TestMethod]
        public void MaxSize_Error()
        {
            var witness = new Witness
            {
                InvocationScript = new byte[1025],
                VerificationScript = new byte[10]
            };

            // Check max size

            Assert.ThrowsException<FormatException>(() => witness.ToArray().AsSerializable<Witness>());

            // Check max size

            witness.InvocationScript = new byte[10];
            witness.VerificationScript = new byte[1025];
            Assert.ThrowsException<FormatException>(() => witness.ToArray().AsSerializable<Witness>());
        }

        [TestMethod]
        public void InvocationScript_Set()
        {
            byte[] dataArray = new byte[] { 0, 32, 32, 20, 32, 32 };
            uut.InvocationScript = dataArray;
            uut.InvocationScript.Length.Should().Be(6);
            Assert.AreEqual(uut.InvocationScript.ToHexString(), ""002020142020"");
        }

        private static void SetupWitnessWithValues(Witness uut, int lenghtInvocation, int lengthVerification, out byte[] invocationScript, out byte[] verificationScript)
        {
            invocationScript = TestUtils.GetByteArray(lenghtInvocation, 0x20);
            verificationScript = TestUtils.GetByteArray(lengthVerification, 0x20);
            uut.InvocationScript = invocationScript;
            uut.VerificationScript = verificationScript;
        }

        [TestMethod]
        public void SizeWitness_Small_Arrary()
        {
            SetupWitnessWithValues(uut, 252, 253, out _, out _);

            uut.Size.Should().Be(509); // (1 + 252*1) + (1 + 2 + 253*1)
        }

        [TestMethod]
        public void SizeWitness_Large_Arrary()
        {
            SetupWitnessWithValues(uut, 65535, 65536, out _, out _);

            uut.Size.Should().Be(131079); // (1 + 2 + 65535*1) + (1 + 4 + 65536*1)
        }

        [TestMethod]
        public void ToJson()
        {
            SetupWitnessWithValues(uut, 2, 3, out _, out _);

            JObject json = uut.ToJson();
            Assert.IsTrue(json.ContainsProperty(""invocation""));
            Assert.IsTrue(json.ContainsProperty(""verification""));
            Assert.AreEqual(json[""invocation""].AsString(), ""ICA="");
            Assert.AreEqual(json[""verification""].AsString(), ""ICAg"");
        }
    }",0,777 587 2000 123 2001 2002 59 91 2003 93 777 865 2004 40 41 123 2002 61 744 2001 40 41 59 125 91 2005 93 777 865 2006 40 41 123 2002 46 2007 46 2008 40 41 46 2009 40 41 59 125 773 809 2001 2010 40 704 2011 44 704 2012 41 123 2013 2014 61 744 2015 91 2011 93 59 2013 2016 61 744 2017 91 2011 93 59 2013 2018 61 744 2019 91 2011 93 59 2013 2020 61 2021 46 2022 40 41 59 664 40 704 2023 61 1500 59 2023 60 2011 59 2023 349 41 123 2016 91 2023 93 61 2024 46 2025 40 41 59 2018 91 2023 93 61 2016 91 2023 93 46 2026 40 362 41 59 2014 91 2023 93 61 2016 91 2023 93 46 2027 40 41 59 125 330 2013 2028 61 2029 46 2030 40 2012 44 2014 46 2031 40 2032 328 2032 46 2033 40 41 46 2034 41 46 2035 40 41 41 59 664 40 704 2023 61 1500 59 2023 60 2011 59 2023 349 41 123 2016 91 2023 93 46 2036 40 2028 44 2014 91 2023 93 46 2033 40 41 41 59 125 330 2013 2037 61 744 2038 40 2020 44 744 2039 40 41 123 2040 61 2041 46 2042 60 2043 62 40 41 44 2044 61 744 91 93 123 744 2045 40 41 123 2046 61 2028 46 2047 44 2048 61 2049 46 2050 125 125 44 2051 61 1500 44 2052 61 1500 44 2053 61 2041 46 2042 60 574 62 40 41 44 2054 61 1500 44 2055 61 1500 44 2056 61 1500 44 2057 61 2041 46 2042 60 2001 62 40 41 125 44 2058 46 2059 46 2060 41 59 664 40 704 2023 61 1500 59 2023 60 2012 59 2023 349 41 123 2061 46 2062 40 2016 91 2023 93 46 2063 40 2037 41 41 59 125 2064 46 2065 40 2037 46 2066 41 59 792 2037 46 2067 40 41 91 1500 93 59 125 91 2005 93 777 865 2068 40 41 123 2069 2070 61 2010 40 1502 44 1502 41 59 330 2070 46 2071 46 2072 40 41 46 2073 40 1505 41 59 2070 46 2074 46 2075 40 41 46 2072 40 41 46 2073 40 1504 41 59 2070 46 2076 46 2075 40 41 46 2072 40 41 46 2073 40 1504 41 59 2069 2077 61 2070 46 2078 40 41 46 2079 60 2001 62 40 41 59 2080 46 2081 40 2070 46 2074 44 2077 46 2074 41 59 2080 46 2081 40 2070 46 2076 44 2077 46 2076 41 59 125 91 2005 93 777 865 2082 40 41 123 2083 2084 61 744 2001 123 2085 61 744 574 91 1505 93 44 2086 61 744 574 91 1502 93 125 59 330 2087 46 2088 60 2089 62 40 40 41 328 2084 46 2090 40 41 46 2091 60 2001 62 40 41 41 59 330 2084 46 2092 61 744 574 91 1502 93 59 2084 46 2093 61 744 574 91 1505 93 59 2087 46 2088 60 2089 62 40 40 41 328 2084 46 2090 40 41 46 2091 60 2001 62 40 41 41 59 125 91 2005 93 777 865 2094 40 41 123 574 91 93 2095 61 744 574 91 93 123 1500 44 1503 44 1503 44 1503 44 1503 44 1503 125 59 2002 46 2096 61 2095 59 2002 46 2096 46 2097 46 2098 40 41 46 2099 40 1502 41 59 2100 46 2101 40 2002 46 2096 46 2102 40 41 44 362 41 59 125 773 809 865 2103 40 2001 2002 44 704 2104 44 704 2105 44 762 574 91 93 2106 44 762 574 91 93 2107 41 123 2106 61 2108 46 2109 40 2104 44 1503 41 59 2107 61 2108 46 2109 40 2105 44 1503 41 59 2002 46 2110 61 2106 59 2002 46 2111 61 2107 59 125 91 2005 93 777 865 2112 40 41 123 2103 40 2002 44 1504 44 1504 44 762 2113 44 762 2113 41 59 2002 46 2114 46 2115 40 41 46 2116 40 1504 41 59 330 125 91 2005 93 777 865 2117 40 41 123 2103 40 2002 44 1506 44 1506 44 762 2118 44 762 2118 41 59 2002 46 2119 46 2120 40 41 46 2121 40 1507 41 59 330 125 91 2005 93 777 865 2122 40 41 123 2103 40 2002 44 1502 44 1502 44 762 2123 44 762 2123 41 59 2124 2125 61 2002 46 2122 40 41 59 2126 46 2127 40 2125 46 2128 40 362 41 41 59 2126 46 2127 40 2125 46 2128 40 362 41 41 59 2126 46 2129 40 2125 91 362 93 46 2130 40 41 44 362 41 59 2126 46 2129 40 2125 91 362 93 46 2130 40 41 44 362 41 59 125 125 ,"{'AvgLine': 12, 'CountLine': 149, 'CountStmt': 66, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 47, 'MaxEssential': 1, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 115, 'CountStmtDecl': 26, 'MaxCyclomatic': 4, 'SumCyclomatic': 16, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 29, 'CountSemicolon': 52, 'CountDeclMethod': 10, 'CountLineCodeExe': 63, 'CountLineComment': 7, 'CountClassCoupled': 22, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 33, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 8, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 40, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 18, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 40, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79978,C#,"    internal class MemorySnapshot : ISnapshot
    {
        private readonly ConcurrentDictionary<byte[], byte[]> innerData;
        private readonly ImmutableDictionary<byte[], byte[]> immutableData;
        private readonly ConcurrentDictionary<byte[], byte[]> writeBatch;

        public MemorySnapshot(ConcurrentDictionary<byte[], byte[]> innerData)
        {
            this.innerData = innerData;
            this.immutableData = innerData.ToImmutableDictionary(ByteArrayEqualityComparer.Default);
            this.writeBatch = new ConcurrentDictionary<byte[], byte[]>(ByteArrayEqualityComparer.Default);
        }

        public void Commit()
        {
            foreach (var pair in writeBatch)
                if (pair.Value is null)
                    innerData.TryRemove(pair.Key, out _);
                else
                    innerData[pair.Key] = pair.Value;
        }

        public void Delete(byte[] key)
        {
            writeBatch[key.EnsureNotNull()] = null;
        }

        public void Dispose()
        {
        }

        public void Put(byte[] key, byte[] value)
        {
            writeBatch[key.EnsureNotNull()] = value;
        }

        public IEnumerable<(byte[] Key, byte[] Value)> Seek(byte[] keyOrPrefix, SeekDirection direction = SeekDirection.Forward)
        {
            ByteArrayComparer comparer = direction == SeekDirection.Forward ? ByteArrayComparer.Default : ByteArrayComparer.Reverse;
            IEnumerable<KeyValuePair<byte[], byte[]>> records = immutableData;
            if (keyOrPrefix?.Length > 0)
                records = records.Where(p => comparer.Compare(p.Key, keyOrPrefix) >= 0);
            records = records.OrderBy(p => p.Key, comparer);
            return records.Select(p => (p.Key, p.Value));
        }

        public byte[] TryGet(byte[] key)
        {
            immutableData.TryGetValue(key.EnsureNotNull(), out byte[] value);
            return value;
        }

        public bool Contains(byte[] key)
        {
            return innerData.ContainsKey(key.EnsureNotNull());
        }
    }",0,710 587 2000 58 2001 123 773 780 2002 60 574 91 93 44 574 91 93 62 2003 59 773 780 2004 60 574 91 93 44 574 91 93 62 2005 59 773 780 2002 60 574 91 93 44 574 91 93 62 2006 59 777 2000 40 2002 60 574 91 93 44 574 91 93 62 2003 41 123 823 46 2003 61 2003 59 823 46 2005 61 2003 46 2007 40 2008 46 2009 41 59 823 46 2006 61 744 2002 60 574 91 93 44 574 91 93 62 40 2008 46 2009 41 59 125 777 865 2010 40 41 123 665 40 2011 2012 696 2006 41 688 40 2012 46 2013 712 752 41 2003 46 2014 40 2012 46 2015 44 762 2016 41 59 630 2003 91 2012 46 2015 93 61 2012 46 2013 59 125 777 865 2017 40 574 91 93 2018 41 123 2006 91 2018 46 2019 40 41 93 61 752 59 125 777 865 2020 40 41 123 125 777 865 2021 40 574 91 93 2018 44 574 91 93 2022 41 123 2006 91 2018 46 2023 40 41 93 61 2022 59 125 777 2024 60 40 574 91 93 2025 44 574 91 93 2026 41 62 2027 40 574 91 93 2028 44 2029 2030 61 2029 46 2031 41 123 2032 2033 61 2030 323 2029 46 2031 63 2032 46 2034 58 2032 46 2035 59 2024 60 2036 60 574 91 93 44 574 91 93 355 2037 61 2005 59 688 40 2028 346 2038 62 1500 41 2037 61 2037 46 2039 40 2040 328 2033 46 2041 40 2040 46 2025 44 2028 41 325 1500 41 59 2037 61 2037 46 2042 40 2040 328 2040 46 2025 44 2033 41 59 792 2037 46 2043 40 2040 328 40 2040 46 2025 44 2040 46 2026 41 41 59 125 777 574 91 93 2044 40 574 91 93 2018 41 123 2005 46 2045 40 2018 46 2046 40 41 44 762 574 91 93 2022 41 59 792 2022 59 125 777 569 2047 40 574 91 93 2018 41 123 792 2003 46 2048 40 2018 46 2049 40 41 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 57, 'CountStmt': 30, 'MaxNesting': 2, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 16, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 49, 'CountStmtDecl': 14, 'MaxCyclomatic': 3, 'SumCyclomatic': 15, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 8, 'CountSemicolon': 18, 'CountDeclMethod': 8, 'CountLineCodeExe': 19, 'CountLineComment': 0, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 8, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 58, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 58, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79981,C#,"    internal class TestIMemoryPoolTxObserverPlugin : Plugin, IMemoryPoolTxObserverPlugin
    {
        protected override void Configure() { }
        public void TransactionAdded(NeoSystem system, Transaction tx) { }
        public void TransactionsRemoved(NeoSystem system, MemoryPoolTxRemovalReason reason, IEnumerable<Transaction> transactions) { }
    }",0,710 587 2000 58 2001 44 2002 123 775 763 865 2003 40 41 123 125 777 865 2004 40 2005 2006 44 2007 2008 41 123 125 777 865 2009 40 2005 2006 44 2010 2011 44 2012 60 2007 62 2013 41 123 125 125 ,"{'AvgLine': 1, 'CountLine': 6, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 0, 'CountSemicolon': 0, 'CountDeclMethod': 3, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80000,C#,"    internal class ReflectionCacheAttribute : Attribute
    {
        /// <summary>
        /// Type
        /// </summary>
        public Type Type { get; }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name=""type"">Type</param>
        public ReflectionCacheAttribute(Type type)
        {
            Type = type;
        }
    }",0,710 587 2000 58 2001 123 331 777 2002 2002 123 2003 59 125 331 777 2000 40 2002 2004 41 123 2002 61 2004 59 125 125 ,"{'AvgLine': 2, 'CountLine': 16, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 2, 'CountDeclMethod': 2, 'CountLineCodeExe': 1, 'CountLineComment': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.88', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 0, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80043,C#,"    public class UT_Cache
    {
        MyCache cache;
        readonly int max_capacity = 4;

        [TestInitialize]
        public void Init()
        {
            cache = new MyCache(max_capacity);
        }

        [TestMethod]
        public void TestCount()
        {
            cache.Count.Should().Be(0);

            cache.Add(""hello"");
            cache.Add(""world"");
            cache.Count.Should().Be(2);

            cache.Remove(""hello"");
            cache.Count.Should().Be(1);
        }

        [TestMethod]
        public void TestIsReadOnly()
        {
            cache.IsReadOnly.Should().BeFalse();
        }

        [TestMethod]
        public void TestAddAndAddInternal()
        {
            cache.Add(""hello"");
            cache.Contains(""hello"").Should().BeTrue();
            cache.Contains(""world"").Should().BeFalse();
            cache.Add(""hello"");
            cache.Count.Should().Be(1);
        }

        [TestMethod]
        public void TestAddRange()
        {
            string[] range = { ""hello"", ""world"" };
            cache.AddRange(range);
            cache.Count.Should().Be(2);
            cache.Contains(""hello"").Should().BeTrue();
            cache.Contains(""world"").Should().BeTrue();
            cache.Contains(""non exist string"").Should().BeFalse();
        }

        [TestMethod]
        public void TestClear()
        {
            cache.Add(""hello"");
            cache.Add(""world"");
            cache.Count.Should().Be(2);
            cache.Clear();
            cache.Count.Should().Be(0);
        }

        [TestMethod]
        public void TestContainsKey()
        {
            cache.Add(""hello"");
            cache.Contains(""hello"").Should().BeTrue();
            cache.Contains(""world"").Should().BeFalse();
        }

        [TestMethod]
        public void TestContainsValue()
        {
            cache.Add(""hello"");
            cache.Contains(""hello"".GetHashCode()).Should().BeTrue();
            cache.Contains(""world"".GetHashCode()).Should().BeFalse();
        }

        [TestMethod]
        public void TestCopyTo()
        {
            cache.Add(""hello"");
            cache.Add(""world"");
            string[] temp = new string[2];

            Action action = () => cache.CopyTo(null, 1);
            action.Should().Throw<ArgumentNullException>();

            action = () => cache.CopyTo(temp, -1);
            action.Should().Throw<ArgumentOutOfRangeException>();

            action = () => cache.CopyTo(temp, 1);
            action.Should().Throw<ArgumentException>();

            cache.CopyTo(temp, 0);
            temp[0].Should().Be(""hello"");
            temp[1].Should().Be(""world"");
        }

        [TestMethod]
        public void TestRemoveKey()
        {
            cache.Add(""hello"");
            cache.Remove(""hello"".GetHashCode()).Should().BeTrue();
            cache.Remove(""world"".GetHashCode()).Should().BeFalse();
            cache.Contains(""hello"").Should().BeFalse();
        }

        [TestMethod]
        public void TestRemoveDisposableKey()
        {
            var entry = new CacheDisposableEntry() { Key = 1 };
            var dcache = new MyDisposableCache(100)
            {
                entry
            };

            entry.IsDisposed.Should().BeFalse();
            dcache.Remove(entry.Key).Should().BeTrue();
            dcache.Remove(entry.Key).Should().BeFalse();
            entry.IsDisposed.Should().BeTrue();
        }

        [TestMethod]
        public void TestRemoveValue()
        {
            cache.Add(""hello"");
            cache.Remove(""hello"").Should().BeTrue();
            cache.Remove(""world"").Should().BeFalse();
            cache.Contains(""hello"").Should().BeFalse();
        }

        [TestMethod]
        public void TestTryGet()
        {
            cache.Add(""hello"");
            cache.TryGet(""hello"".GetHashCode(), out string output).Should().BeTrue();
            output.Should().Be(""hello"");
            cache.TryGet(""world"".GetHashCode(), out string output2).Should().BeFalse();
            output2.Should().NotBe(""world"");
            output2.Should().BeNull();
        }

        [TestMethod]
        public void TestArrayIndexAccess()
        {
            cache.Add(""hello"");
            cache.Add(""world"");
            cache[""hello"".GetHashCode()].Should().Be(""hello"");
            cache[""world"".GetHashCode()].Should().Be(""world"");

            Action action = () =>
            {
                string temp = cache[""non exist string"".GetHashCode()];
            };
            action.Should().Throw<KeyNotFoundException>();
        }

        [TestMethod]
        public void TestGetEnumerator()
        {
            cache.Add(""hello"");
            cache.Add(""world"");
            int i = 0;
            foreach (string item in cache)
            {
                if (i == 0) item.Should().Be(""hello"");
                if (i == 1) item.Should().Be(""world"");
                i++;
            }
            i.Should().Be(2);
            cache.MyGetEnumerator().Should().NotBeNull();
        }

        [TestMethod]
        public void TestOverMaxCapacity()
        {
            int i = 1;
            for (; i <= max_capacity; i++)
            {
                cache.Add(i.ToString());
            }
            cache.Add(i.ToString());    // The first one will be deleted 
            cache.Count.Should().Be(max_capacity);
            cache.Contains((max_capacity + 1).ToString()).Should().BeTrue();
        }

        [TestMethod]
        public void TestDispose()
        {
            cache.Add(""hello"");
            cache.Add(""world"");
            cache.Dispose();

            Action action = () =>
            {
                int count = cache.Count;
            };
            action.Should().Throw<ObjectDisposedException>();
        }
    }",0,777 587 2000 123 2001 2002 59 780 704 2003 61 1502 59 91 2004 93 777 865 2005 40 41 123 2002 61 744 2001 40 2003 41 59 125 91 2006 93 777 865 2007 40 41 123 2002 46 2008 46 2009 40 41 46 2010 40 1500 41 59 2002 46 2011 40 362 41 59 2002 46 2011 40 362 41 59 2002 46 2008 46 2009 40 41 46 2010 40 1502 41 59 2002 46 2012 40 362 41 59 2002 46 2008 46 2009 40 41 46 2010 40 1501 41 59 125 91 2006 93 777 865 2013 40 41 123 2002 46 2014 46 2015 40 41 46 2016 40 41 59 125 91 2006 93 777 865 2017 40 41 123 2002 46 2018 40 362 41 59 2002 46 2019 40 362 41 46 2020 40 41 46 2021 40 41 59 2002 46 2019 40 362 41 46 2020 40 41 46 2022 40 41 59 2002 46 2018 40 362 41 59 2002 46 2023 46 2020 40 41 46 2024 40 1501 41 59 125 91 2006 93 777 865 2025 40 41 123 815 91 93 2026 61 123 362 44 362 125 59 2002 46 2027 40 2026 41 59 2002 46 2028 46 2029 40 41 46 2030 40 1502 41 59 2002 46 2031 40 362 41 46 2029 40 41 46 2032 40 41 59 2002 46 2031 40 362 41 46 2029 40 41 46 2032 40 41 59 2002 46 2031 40 362 41 46 2029 40 41 46 2033 40 41 59 125 91 2006 93 777 865 2034 40 41 123 2002 46 2035 40 362 41 59 2002 46 2035 40 362 41 59 2002 46 2036 46 2037 40 41 46 2038 40 1502 41 59 2002 46 2039 40 41 59 2002 46 2036 46 2037 40 41 46 2038 40 1500 41 59 125 91 2006 93 777 865 2040 40 41 123 2002 46 2041 40 362 41 59 2002 46 2042 40 362 41 46 2043 40 41 46 2044 40 41 59 2002 46 2042 40 362 41 46 2043 40 41 46 2045 40 41 59 125 91 2006 93 777 865 2046 40 41 123 2002 46 2047 40 362 41 59 2002 46 2048 40 362 46 2049 40 41 41 46 2050 40 41 46 2051 40 41 59 2002 46 2048 40 362 46 2049 40 41 41 46 2050 40 41 46 2052 40 41 59 125 91 2006 93 777 865 2053 40 41 123 2002 46 2054 40 362 41 59 2002 46 2054 40 362 41 59 815 91 93 2055 61 744 815 91 1502 93 59 2056 2057 61 40 41 328 2002 46 2058 40 752 44 1501 41 59 2057 46 2059 40 41 46 2060 60 2061 62 40 41 59 2057 61 40 41 328 2002 46 2058 40 2055 44 45 1501 41 59 2057 46 2059 40 41 46 2060 60 2062 62 40 41 59 2057 61 40 41 328 2002 46 2058 40 2055 44 1501 41 59 2057 46 2059 40 41 46 2060 60 2063 62 40 41 59 2002 46 2058 40 2055 44 1500 41 59 2055 91 1500 93 46 2059 40 41 46 2064 40 362 41 59 2055 91 1501 93 46 2059 40 41 46 2064 40 362 41 59 125 91 2006 93 777 865 2065 40 41 123 2002 46 2066 40 362 41 59 2002 46 2067 40 362 46 2068 40 41 41 46 2069 40 41 46 2070 40 41 59 2002 46 2067 40 362 46 2068 40 41 41 46 2069 40 41 46 2071 40 41 59 2002 46 2072 40 362 41 46 2069 40 41 46 2071 40 41 59 125 91 2006 93 777 865 2073 40 41 123 2074 2075 61 744 2076 40 41 123 2077 61 1501 125 59 2074 2078 61 744 2079 40 1503 41 123 2075 125 59 2075 46 2080 46 2081 40 41 46 2082 40 41 59 2078 46 2083 40 2075 46 2084 41 46 2081 40 41 46 2085 40 41 59 2078 46 2083 40 2075 46 2084 41 46 2081 40 41 46 2082 40 41 59 2075 46 2080 46 2081 40 41 46 2085 40 41 59 125 91 2006 93 777 865 2086 40 41 123 2002 46 2087 40 362 41 59 2002 46 2088 40 362 41 46 2089 40 41 46 2090 40 41 59 2002 46 2088 40 362 41 46 2089 40 41 46 2091 40 41 59 2002 46 2092 40 362 41 46 2089 40 41 46 2091 40 41 59 125 91 2006 93 777 865 2093 40 41 123 2002 46 2094 40 362 41 59 2002 46 2095 40 362 46 2096 40 41 44 762 815 2097 41 46 2098 40 41 46 2099 40 41 59 2097 46 2098 40 41 46 2100 40 362 41 59 2002 46 2095 40 362 46 2096 40 41 44 762 815 2101 41 46 2098 40 41 46 2102 40 41 59 2101 46 2098 40 41 46 2103 40 362 41 59 2101 46 2098 40 41 46 2104 40 41 59 125 91 2006 93 777 865 2105 40 41 123 2002 46 2106 40 362 41 59 2002 46 2106 40 362 41 59 2002 91 362 46 2107 40 41 93 46 2108 40 41 46 2109 40 362 41 59 2002 91 362 46 2107 40 41 93 46 2108 40 41 46 2109 40 362 41 59 2110 2111 61 40 41 328 123 815 2112 61 2002 91 362 46 2107 40 41 93 59 125 59 2111 46 2108 40 41 46 2113 60 2114 62 40 41 59 125 91 2006 93 777 865 2115 40 41 123 2002 46 2116 40 362 41 59 2002 46 2116 40 362 41 59 704 2117 61 1500 59 665 40 815 2118 696 2002 41 123 688 40 2117 323 1500 41 2118 46 2119 40 41 46 2120 40 362 41 59 688 40 2117 323 1501 41 2118 46 2119 40 41 46 2120 40 362 41 59 2117 349 59 125 2117 46 2121 40 41 46 2122 40 1502 41 59 2002 46 2123 40 41 46 2121 40 41 46 2124 40 41 59 125 91 2006 93 777 865 2125 40 41 123 704 2126 61 1501 59 664 40 59 2126 329 2003 59 2126 349 41 123 2002 46 2127 40 2126 46 2128 40 41 41 59 125 2002 46 2129 40 2126 46 2130 40 41 41 59 330 2002 46 2131 46 2132 40 41 46 2133 40 2003 41 59 2002 46 2134 40 40 2003 43 1501 41 46 2130 40 41 41 46 2132 40 41 46 2135 40 41 59 125 91 2006 93 777 865 2136 40 41 123 2002 46 2137 40 362 41 59 2002 46 2137 40 362 41 59 2002 46 2138 40 41 59 2139 2140 61 40 41 328 123 704 2141 61 2002 46 2142 59 125 59 2140 46 2143 40 41 46 2144 60 2145 62 40 41 59 125 125 ,"{'AvgLine': 9, 'CountLine': 200, 'CountStmt': 113, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 85, 'MaxEssential': 1, 'SumEssential': 22, 'AvgCyclomatic': 1, 'CountLineCode': 174, 'CountStmtDecl': 31, 'MaxCyclomatic': 4, 'SumCyclomatic': 26, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 26, 'CountSemicolon': 92, 'CountDeclMethod': 17, 'CountLineCodeExe': 92, 'CountLineComment': 1, 'CountClassCoupled': 10, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 51, 'CountLineInactive': 0, 'CountDeclMethodAll': 23, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 26, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 17, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 47, 'SumCyclomaticModified': 26, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 17, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 47, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80053,C#,"    public class UT_Helper
    {
        private KeyPair _key;

        [TestInitialize]
        public void Init()
        {
            var pk = new byte[32];
            new Random().NextBytes(pk);
            _key = new KeyPair(pk);
        }

        [TestMethod]
        public void TestGetContractHash()
        {
            var nef = new NefFile()
            {
                Compiler = ""test"",
                Source = string.Empty,
                Tokens = Array.Empty<MethodToken>(),
                Script = new byte[] { 1, 2, 3 }
            };
            nef.CheckSum = NefFile.ComputeChecksum(nef);

            Assert.AreEqual(""0x9b9628e4f1611af90e761eea8cc21372380c74b6"", Neo.SmartContract.Helper.GetContractHash(UInt160.Zero, nef.CheckSum, """").ToString());
            Assert.AreEqual(""0x66eec404d86b918d084e62a29ac9990e3b6f4286"", Neo.SmartContract.Helper.GetContractHash(UInt160.Parse(""0xa400ff00ff00ff00ff00ff00ff00ff00ff00ff01""), nef.CheckSum, """").ToString());
        }

        [TestMethod]
        public void TestIsMultiSigContract()
        {
            var case1 = new byte[]
            {
                0, 2, 12, 33, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
                221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 12, 33, 255, 255, 255, 255,
                255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
                255, 255, 255, 255, 255, 255, 255, 255, 0,
            };
            Assert.IsFalse(case1.IsMultiSigContract());

            var case2 = new byte[]
            {
                18, 12, 33, 2, 111, 240, 59, 148, 146, 65, 206, 29, 173, 212, 53, 25, 230, 150, 14, 10, 133, 180, 26,
                105, 160, 92, 50, 129, 3, 170, 43, 206, 21, 148, 202, 22, 12, 33, 2, 111, 240, 59, 148, 146, 65, 206,
                29, 173, 212, 53, 25, 230, 150, 14, 10, 133, 180, 26, 105, 160, 92, 50, 129, 3, 170, 43, 206, 21, 148,
                202, 22, 18
            };
            Assert.IsFalse(case2.IsMultiSigContract());
        }

        [TestMethod]
        public void TestSignatureContractCost()
        {
            var contract = Contract.CreateSignatureContract(_key.PublicKey);

            var tx = TestUtils.CreateRandomHashTransaction();
            tx.Signers[0].Account = contract.ScriptHash;

            using ScriptBuilder invocationScript = new();
            invocationScript.EmitPush(Neo.Wallets.Helper.Sign(tx, _key, ProtocolSettings.Default.Network));
            tx.Witnesses = new Witness[] { new Witness() { InvocationScript = invocationScript.ToArray(), VerificationScript = contract.Script } };

            using var engine = ApplicationEngine.Create(TriggerType.Verification, tx, null, null, ProtocolSettings.Default);
            engine.LoadScript(contract.Script);
            engine.LoadScript(new Script(invocationScript.ToArray(), true), configureState: p => p.CallFlags = CallFlags.None);
            Assert.AreEqual(VMState.HALT, engine.Execute());
            Assert.IsTrue(engine.ResultStack.Pop().GetBoolean());

            Assert.AreEqual(Neo.SmartContract.Helper.SignatureContractCost() * PolicyContract.DefaultExecFeeFactor, engine.GasConsumed);
        }

        [TestMethod]
        public void TestMultiSignatureContractCost()
        {
            var contract = Contract.CreateMultiSigContract(1, new ECPoint[] { _key.PublicKey });

            var tx = TestUtils.CreateRandomHashTransaction();
            tx.Signers[0].Account = contract.ScriptHash;

            using ScriptBuilder invocationScript = new();
            invocationScript.EmitPush(Neo.Wallets.Helper.Sign(tx, _key, ProtocolSettings.Default.Network));

            using var engine = ApplicationEngine.Create(TriggerType.Verification, tx, null, null, ProtocolSettings.Default);
            engine.LoadScript(contract.Script);
            engine.LoadScript(new Script(invocationScript.ToArray(), true), configureState: p => p.CallFlags = CallFlags.None);
            Assert.AreEqual(VMState.HALT, engine.Execute());
            Assert.IsTrue(engine.ResultStack.Pop().GetBoolean());

            Assert.AreEqual(Neo.SmartContract.Helper.MultiSignatureContractCost(1, 1) * PolicyContract.DefaultExecFeeFactor, engine.GasConsumed);
        }
    }",0,777 587 2000 123 773 2001 2002 59 91 2003 93 777 865 2004 40 41 123 2005 2006 61 744 574 91 1503 93 59 744 2007 40 41 46 2008 40 2006 41 59 2002 61 744 2001 40 2006 41 59 125 91 2009 93 777 865 2010 40 41 123 2011 2012 61 744 2013 40 41 123 2014 61 362 44 2015 61 815 46 2016 44 2017 61 2018 46 2016 60 2019 62 40 41 44 2020 61 744 574 91 93 123 1501 44 1502 44 1502 125 125 59 2012 46 2021 61 2013 46 2022 40 2012 41 59 2023 46 2024 40 362 44 2025 46 2026 46 2027 46 2028 40 2029 46 2030 44 2012 46 2021 44 362 41 46 2031 40 41 41 59 2023 46 2024 40 362 44 2025 46 2026 46 2027 46 2028 40 2029 46 2032 40 362 41 44 2012 46 2021 44 362 41 46 2031 40 41 41 59 125 91 2009 93 777 865 2033 40 41 123 2034 2035 61 744 574 91 93 123 1500 44 1502 44 1503 44 1503 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1503 44 1503 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1500 44 125 59 2036 46 2037 40 2035 46 2038 40 41 41 59 2034 2039 61 744 574 91 93 123 1503 44 1503 44 1503 44 1502 44 1504 44 1504 44 1503 44 1504 44 1504 44 1503 44 1504 44 1503 44 1504 44 1504 44 1503 44 1503 44 1504 44 1504 44 1503 44 1502 44 1504 44 1504 44 1503 44 1504 44 1504 44 1503 44 1503 44 1504 44 1502 44 1504 44 1503 44 1504 44 1503 44 1504 44 1504 44 1503 44 1503 44 1503 44 1502 44 1504 44 1504 44 1503 44 1504 44 1504 44 1503 44 1504 44 1503 44 1504 44 1504 44 1503 44 1503 44 1504 44 1504 44 1503 44 1502 44 1504 44 1504 44 1503 44 1504 44 1504 44 1503 44 1503 44 1504 44 1502 44 1504 44 1503 44 1504 44 1503 44 1504 44 1504 44 1503 44 1503 125 59 2036 46 2037 40 2039 46 2038 40 41 41 59 125 91 2009 93 777 865 2040 40 41 123 2041 2042 61 2043 46 2044 40 2002 46 2045 41 59 2041 2046 61 2047 46 2048 40 41 59 2046 46 2049 91 1500 93 46 2050 61 2042 46 2051 59 860 2052 2053 61 744 40 41 59 2053 46 2054 40 2055 46 2056 46 2057 46 2058 40 2046 44 2002 44 2059 46 2060 46 2061 41 41 59 2046 46 2062 61 744 2063 91 93 123 744 2063 40 41 123 2064 61 2053 46 2065 40 41 44 2066 61 2042 46 2067 125 125 59 860 2041 2068 61 2069 46 2070 40 2071 46 2072 44 2046 44 752 44 752 44 2059 46 2060 41 59 2068 46 2073 40 2042 46 2074 41 59 2068 46 2073 40 744 2074 40 2053 46 2075 40 41 44 829 41 44 2076 58 2077 328 2077 46 2078 61 2078 46 2079 41 59 2080 46 2081 40 2082 46 2083 44 2068 46 2084 40 41 41 59 2080 46 2085 40 2068 46 2086 46 2087 40 41 46 2088 40 41 41 59 2080 46 2081 40 2055 46 2089 46 2057 46 2090 40 41 42 2091 46 2092 44 2068 46 2093 41 59 125 91 2009 93 777 865 2094 40 41 123 2095 2096 61 2097 46 2098 40 1501 44 744 2099 91 93 123 2002 46 2100 125 41 59 2095 2101 61 2102 46 2103 40 41 59 2101 46 2104 91 1500 93 46 2105 61 2096 46 2106 59 860 2107 2108 61 744 40 41 59 2108 46 2109 40 2110 46 2111 46 2112 46 2113 40 2101 44 2002 44 2114 46 2115 46 2116 41 41 59 860 2095 2117 61 2118 46 2119 40 2120 46 2121 44 2101 44 752 44 752 44 2114 46 2115 41 59 2117 46 2122 40 2096 46 2123 41 59 2117 46 2122 40 744 2123 40 2108 46 2124 40 41 44 829 41 44 2125 58 2126 328 2126 46 2127 61 2127 46 2128 41 59 2129 46 2130 40 2131 46 2132 44 2117 46 2133 40 41 41 59 2129 46 2134 40 2117 46 2135 46 2136 40 41 46 2137 40 41 41 59 2129 46 2130 40 2110 46 2138 46 2112 46 2139 40 1501 44 1501 41 42 2140 46 2141 44 2117 46 2142 41 59 125 125 ,"{'AvgLine': 15, 'CountLine': 91, 'CountStmt': 37, 'MaxNesting': 0, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 27, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 76, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountSemicolon': 35, 'CountDeclMethod': 5, 'CountLineCodeExe': 46, 'CountLineComment': 0, 'CountClassCoupled': 22, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 40, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 20, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 40, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80055,C#,"    public class UT_Key
    {
        [TestMethod]
        public void TestGenerator()
        {
            Key key = new Key();
            Assert.IsNotNull(key);
        }

        [TestMethod]
        public void TestSetAndGetName()
        {
            Key key = new Key
            {
                Name = ""AAA""
            };
            Assert.AreEqual(""AAA"", key.Name);
        }

        [TestMethod]
        public void TestSetAndGetValue()
        {
            Key key = new Key
            {
                Value = new byte[] { 0x01 }
            };
            Assert.AreEqual(Encoding.Default.GetString(new byte[] { 0x01 }), Encoding.Default.GetString(key.Value));
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2003 40 41 59 2005 46 2006 40 2004 41 59 125 91 2001 93 777 865 2007 40 41 123 2008 2009 61 744 2008 123 2010 61 362 125 59 2011 46 2012 40 362 44 2009 46 2013 41 59 125 91 2001 93 777 865 2014 40 41 123 2015 2016 61 744 2015 123 2017 61 744 574 91 93 123 1501 125 125 59 2018 46 2019 40 2020 46 2021 46 2022 40 744 574 91 93 123 1501 125 41 44 2020 46 2021 46 2022 40 2016 46 2023 41 41 59 125 125 ,"{'AvgLine': 7, 'CountLine': 29, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 27, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 6, 'CountDeclMethod': 3, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80059,C#,"    public class UT_NetworkAddressWithTime
    {
        [TestMethod]
        public void SizeAndEndPoint_Get()
        {
            var test = new NetworkAddressWithTime() { Capabilities = new NodeCapability[0], Address = IPAddress.Any, Timestamp = 1 };
            test.Size.Should().Be(21);

            Assert.AreEqual(test.EndPoint.Port, 0);

            test = NetworkAddressWithTime.Create(IPAddress.Any, 1, new NodeCapability[] { new ServerCapability(NodeCapabilityType.TcpServer, 22) });
            test.Size.Should().Be(24);

            Assert.AreEqual(test.EndPoint.Port, 22);
        }

        [TestMethod]
        public void DeserializeAndSerialize()
        {
            var test = NetworkAddressWithTime.Create(IPAddress.Any, 1, new NodeCapability[] { new ServerCapability(NodeCapabilityType.TcpServer, 22) });
            var clone = test.ToArray().AsSerializable<NetworkAddressWithTime>();

            CollectionAssert.AreEqual(test.Capabilities.ToByteArray(), clone.Capabilities.ToByteArray());
            Assert.AreEqual(test.EndPoint.ToString(), clone.EndPoint.ToString());
            Assert.AreEqual(test.Timestamp, clone.Timestamp);
            Assert.AreEqual(test.Address, clone.Address);

            Assert.ThrowsException<FormatException>(() => NetworkAddressWithTime.Create(IPAddress.Any, 1,
                new NodeCapability[] {
                    new ServerCapability(NodeCapabilityType.TcpServer, 22) ,
                    new ServerCapability(NodeCapabilityType.TcpServer, 22)
                }).ToArray().AsSerializable<NetworkAddressWithTime>());
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 41 123 2006 61 744 2007 91 1500 93 44 2008 61 2009 46 2010 44 2011 61 1501 125 59 2004 46 2012 46 2013 40 41 46 2014 40 1503 41 59 2015 46 2016 40 2004 46 2017 46 2018 44 1500 41 59 2004 61 2005 46 2019 40 2020 46 2021 44 1501 44 744 2022 91 93 123 744 2023 40 2024 46 2025 44 1503 41 125 41 59 2004 46 2012 46 2013 40 41 46 2014 40 1503 41 59 2015 46 2016 40 2004 46 2017 46 2018 44 1503 41 59 125 91 2001 93 777 865 2026 40 41 123 2027 2028 61 2029 46 2030 40 2031 46 2032 44 1501 44 744 2033 91 93 123 744 2034 40 2035 46 2036 44 1503 41 125 41 59 2027 2037 61 2028 46 2038 40 41 46 2039 60 2029 62 40 41 59 2040 46 2041 40 2028 46 2042 46 2043 40 41 44 2037 46 2042 46 2043 40 41 41 59 2044 46 2041 40 2028 46 2045 46 2046 40 41 44 2037 46 2045 46 2046 40 41 41 59 2044 46 2041 40 2028 46 2047 44 2037 46 2047 41 59 2044 46 2041 40 2028 46 2048 44 2037 46 2048 41 59 2044 46 2049 60 2050 62 40 40 41 328 2029 46 2030 40 2031 46 2032 44 1501 44 744 2033 91 93 123 744 2051 40 2052 46 2053 44 1503 41 44 744 2051 40 2052 46 2053 44 1503 41 125 41 46 2038 40 41 46 2039 60 2029 62 40 41 41 59 125 125 ,"{'AvgLine': 14, 'CountLine': 34, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountSemicolon': 13, 'CountDeclMethod': 2, 'CountLineCodeExe': 17, 'CountLineComment': 0, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79803,C#,"    public class CalledByEntryCondition : WitnessCondition
    {
        public override WitnessConditionType Type => WitnessConditionType.CalledByEntry;

        protected override void DeserializeWithoutType(BinaryReader reader, int maxNestDepth)
        {
        }

        public override bool Match(ApplicationEngine engine)
        {
            return engine.CallingScriptHash is null || engine.CallingScriptHash == engine.EntryScriptHash;
        }

        protected override void SerializeWithoutType(BinaryWriter writer)
        {
        }
    }",0,777 587 2000 58 2001 123 777 763 2002 2003 328 2002 46 2004 59 775 763 865 2005 40 2006 2007 44 704 2008 41 123 125 777 763 569 2009 40 2010 2011 41 123 792 2011 46 2012 712 752 309 2011 46 2012 323 2011 46 2013 59 125 775 763 865 2014 40 2015 2016 41 123 125 125 ,"{'AvgLine': 2, 'CountLine': 17, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 2, 'CountDeclMethod': 4, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79952,C#,"    public class UT_OpCodePrices
    {
        [TestMethod]
        public void AllOpcodePriceAreSet()
        {
            foreach (OpCode opcode in Enum.GetValues(typeof(OpCode)))
                Assert.IsTrue(ApplicationEngine.OpCodePrices.ContainsKey(opcode), opcode.ToString());
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 665 40 2003 2004 696 2005 46 2006 40 836 40 2003 41 41 41 2007 46 2008 40 2009 46 2010 46 2011 40 2004 41 44 2004 46 2012 40 41 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 9, 'CountStmt': 4, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 2, 'CountLineCode': 9, 'CountStmtDecl': 2, 'MaxCyclomatic': 2, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 1, 'CountDeclMethod': 1, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79768,C#,"    public class UT_ServerCapability
    {
        [TestMethod]
        public void Size_Get()
        {
            var test = new ServerCapability(NodeCapabilityType.TcpServer) { Port = 1 };
            test.Size.Should().Be(3);

            test = new ServerCapability(NodeCapabilityType.WsServer) { Port = 2 };
            test.Size.Should().Be(3);
        }

        [TestMethod]
        public void DeserializeAndSerialize()
        {
            var test = new ServerCapability(NodeCapabilityType.WsServer) { Port = 2 };
            var buffer = test.ToArray();

            using var br = new BinaryReader(new MemoryStream(buffer));
            var clone = (ServerCapability)ServerCapability.DeserializeFrom(br);

            Assert.AreEqual(test.Port, clone.Port);
            Assert.AreEqual(test.Type, clone.Type);

            clone = new ServerCapability(NodeCapabilityType.WsServer, 123);
            br.BaseStream.Seek(0, SeekOrigin.Begin);
            ((ISerializable)clone).Deserialize(br);

            Assert.AreEqual(test.Port, clone.Port);
            Assert.AreEqual(test.Type, clone.Type);

            clone = new ServerCapability(NodeCapabilityType.TcpServer, 123);

            br.BaseStream.Seek(0, SeekOrigin.Begin);
            Assert.ThrowsException<FormatException>(() => ((ISerializable)clone).Deserialize(br));
            Assert.ThrowsException<ArgumentException>(() => new ServerCapability(NodeCapabilityType.FullNode));

            // Wrog type
            br.BaseStream.Seek(0, SeekOrigin.Begin);
            br.BaseStream.WriteByte(0xFF);
            br.BaseStream.Seek(0, SeekOrigin.Begin);
            Assert.ThrowsException<FormatException>(() => ServerCapability.DeserializeFrom(br));
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 2006 46 2007 41 123 2008 61 1501 125 59 2004 46 2009 46 2010 40 41 46 2011 40 1502 41 59 2004 61 744 2005 40 2006 46 2012 41 123 2013 61 1502 125 59 2004 46 2009 46 2010 40 41 46 2011 40 1502 41 59 125 91 2001 93 777 865 2014 40 41 123 2015 2016 61 744 2017 40 2018 46 2019 41 123 2020 61 1502 125 59 2015 2021 61 2016 46 2022 40 41 59 860 2015 2023 61 744 2024 40 744 2025 40 2021 41 41 59 2015 2026 61 40 2017 41 2017 46 2027 40 2023 41 59 2028 46 2029 40 2016 46 2030 44 2026 46 2030 41 59 2028 46 2029 40 2016 46 2031 44 2026 46 2031 41 59 2026 61 744 2017 40 2018 46 2019 44 1504 41 59 2023 46 2032 46 2033 40 1500 44 2034 46 2035 41 59 40 40 2036 41 2026 41 46 2037 40 2023 41 59 2028 46 2029 40 2016 46 2030 44 2026 46 2030 41 59 2028 46 2029 40 2016 46 2031 44 2026 46 2031 41 59 2026 61 744 2017 40 2018 46 2038 44 1504 41 59 2023 46 2032 46 2033 40 1500 44 2034 46 2035 41 59 2028 46 2039 60 2040 62 40 40 41 328 40 40 2036 41 2026 41 46 2037 40 2023 41 41 59 2028 46 2039 60 2041 62 40 40 41 328 744 2017 40 2018 46 2042 41 41 59 330 2023 46 2032 46 2033 40 1500 44 2034 46 2035 41 59 2023 46 2032 46 2043 40 1504 41 59 2023 46 2032 46 2033 40 1500 44 2034 46 2035 41 59 2028 46 2039 60 2040 62 40 40 41 328 2017 46 2027 40 2023 41 41 59 125 125 ,"{'AvgLine': 19, 'CountLine': 44, 'CountStmt': 25, 'MaxNesting': 0, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountSemicolon': 23, 'CountDeclMethod': 2, 'CountLineCodeExe': 23, 'CountLineComment': 1, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79767,C#,"    internal class TaskSession
    {
        public Dictionary<UInt256, DateTime> InvTasks { get; } = new Dictionary<UInt256, DateTime>();
        public Dictionary<uint, DateTime> IndexTasks { get; } = new Dictionary<uint, DateTime>();
        public HashSet<UInt256> AvailableTasks { get; } = new HashSet<UInt256>();
        public Dictionary<uint, Block> ReceivedBlock { get; } = new Dictionary<uint, Block>();
        public bool HasTooManyTasks => InvTasks.Count + IndexTasks.Count >= 100;
        public bool IsFullNode { get; }
        public uint LastBlockIndex { get; set; }
        public bool MempoolSent { get; set; }

        public TaskSession(VersionPayload version)
        {
            var fullNode = version.Capabilities.OfType<FullNodeCapability>().FirstOrDefault();
            this.IsFullNode = fullNode != null;
            this.LastBlockIndex = fullNode?.StartHeight ?? 0;
        }
    }",0,710 587 2000 123 777 2001 60 2002 44 2003 62 2004 123 2005 59 125 61 744 2001 60 2002 44 2003 62 40 41 59 777 2001 60 842 44 2003 62 2006 123 2007 59 125 61 744 2001 60 842 44 2003 62 40 41 59 777 2008 60 2002 62 2009 123 2010 59 125 61 744 2008 60 2002 62 40 41 59 777 2001 60 842 44 2011 62 2012 123 2013 59 125 61 744 2001 60 842 44 2011 62 40 41 59 777 569 2014 328 2004 46 2015 43 2006 46 2015 325 1503 59 777 569 2016 123 2017 59 125 777 842 2018 123 2019 59 2020 59 125 777 569 2021 123 2022 59 2023 59 125 777 2000 40 2024 2025 41 123 2026 2027 61 2025 46 2028 46 2029 60 2030 62 40 41 46 2031 40 41 59 823 46 2016 61 2027 340 752 59 823 46 2018 61 2027 346 2032 343 1500 59 125 125 ,"{'AvgLine': 0, 'CountLine': 18, 'CountStmt': 22, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 20, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 17, 'CountDeclMethod': 11, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountDeclProperty': 8, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 11, 'CountDeclPropertyAuto': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 71, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79782,C#,"    class ContractTaskAwaiter<T> : ContractTaskAwaiter
    {
        private T result;

        public new T GetResult()
        {
            base.GetResult();
            return result;
        }

        public void SetResult(T result)
        {
            this.result = result;
            RunContinuation();
        }

        public override void SetResult(ApplicationEngine engine)
        {
            SetResult((T)engine.Convert(engine.Pop(), new InteropParameterDescriptor(typeof(T))));
        }
    }",0,587 2000 60 2001 62 58 2000 123 773 2001 2002 59 777 744 2001 2003 40 41 123 563 46 2003 40 41 59 792 2002 59 125 777 865 2004 40 2001 2002 41 123 823 46 2002 61 2002 59 2005 40 41 59 125 777 763 865 2004 40 2006 2007 41 123 2004 40 40 2001 41 2007 46 2008 40 2007 46 2009 40 41 44 744 2010 40 836 40 2001 41 41 41 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 21, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 6, 'CountDeclMethod': 3, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79835,C#,"    internal abstract class PriorityMailbox : MailboxType, IProducesMessageQueue<PriorityMessageQueue>
    {
        public PriorityMailbox(Akka.Actor.Settings settings, Config config)
            : base(settings, config)
        {
        }

        public override IMessageQueue Create(IActorRef owner, ActorSystem system)
        {
            return new PriorityMessageQueue(ShallDrop, IsHighPriority);
        }

        internal protected virtual bool IsHighPriority(object message) => false;
        internal protected virtual bool ShallDrop(object message, IEnumerable queue) => false;
    }",0,710 539 587 2000 58 2001 44 2002 60 2003 62 123 777 2000 40 2004 46 2005 46 2006 2007 44 2008 2009 41 58 563 40 2007 44 2009 41 123 125 777 763 2010 2011 40 2012 2013 44 2014 2015 41 123 792 744 2003 40 2016 44 2017 41 59 125 710 775 864 569 2018 40 755 2019 41 328 655 59 710 775 864 569 2020 40 755 2019 44 2021 2022 41 328 655 59 125 ,"{'AvgLine': 2, 'CountLine': 15, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 2, 'CountSemicolon': 3, 'CountDeclMethod': 4, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'CountClassCoupled': 8, 'CountClassDerived': 3, 'CountDeclProperty': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 2, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79959,C#,"    internal abstract class FIFOCache<TKey, TValue> : Cache<TKey, TValue>
    {
        public FIFOCache(int max_capacity, IEqualityComparer<TKey> comparer = null)
            : base(max_capacity, comparer)
        {
        }

        protected override void OnAccess(CacheItem item)
        {
        }
    }",0,710 539 587 2000 60 2001 44 2002 62 58 2003 60 2001 44 2002 62 123 777 2000 40 704 2004 44 2005 60 2001 62 2006 61 752 41 58 563 40 2004 44 2006 41 123 125 775 763 865 2007 40 2008 2009 41 123 125 125 ,"{'AvgLine': 3, 'CountLine': 11, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 0, 'CountDeclMethod': 2, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'CountClassCoupled': 3, 'CountClassDerived': 2, 'CountDeclProperty': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 28, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79936,C#,"    public class UT_HashIndexState
    {
        HashIndexState origin;

        [TestInitialize]
        public void Initialize()
        {
            origin = new HashIndexState
            {
                Hash = UInt256.Zero,
                Index = 10
            };
        }

        [TestMethod]
        public void TestDeserialize()
        {
            using MemoryStream ms = new MemoryStream(1024);
            using BinaryReader reader = new BinaryReader(ms);

            var data = BinarySerializer.Serialize(((IInteroperable)origin).ToStackItem(null), 1024);
            ms.Write(data);
            ms.Seek(0, SeekOrigin.Begin);

            HashIndexState dest = new HashIndexState();
            ((IInteroperable)dest).FromStackItem(BinarySerializer.Deserialize(reader, ExecutionEngineLimits.Default, null));

            dest.Hash.Should().Be(origin.Hash);
            dest.Index.Should().Be(origin.Index);
        }
    }",0,777 587 2000 123 2001 2002 59 91 2003 93 777 865 2004 40 41 123 2002 61 744 2001 123 2005 61 2006 46 2007 44 2008 61 1502 125 59 125 91 2009 93 777 865 2010 40 41 123 860 2011 2012 61 744 2011 40 1505 41 59 860 2013 2014 61 744 2013 40 2012 41 59 2015 2016 61 2017 46 2018 40 40 40 2019 41 2002 41 46 2020 40 752 41 44 1505 41 59 2012 46 2021 40 2016 41 59 2012 46 2022 40 1500 44 2023 46 2024 41 59 2001 2025 61 744 2001 40 41 59 40 40 2019 41 2025 41 46 2026 40 2017 46 2027 40 2014 44 2028 46 2029 44 752 41 41 59 2025 46 2030 46 2031 40 41 46 2032 40 2002 46 2030 41 59 2025 46 2033 46 2031 40 41 46 2032 40 2002 46 2033 41 59 125 125 ,"{'AvgLine': 11, 'CountLine': 31, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountSemicolon': 11, 'CountDeclMethod': 2, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 9, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79941,C#,"    public class UT_TaskSession
    {
        [TestMethod]
        public void CreateTest()
        {
            var ses = new TaskSession(new VersionPayload() { Capabilities = new NodeCapability[] { new FullNodeCapability(123) } });

            Assert.IsFalse(ses.HasTooManyTasks);
            Assert.AreEqual((uint)123, ses.LastBlockIndex);
            Assert.AreEqual(0, ses.IndexTasks.Count);
            Assert.IsTrue(ses.IsFullNode);

            ses = new TaskSession(new VersionPayload() { Capabilities = Array.Empty<NodeCapability>() });

            Assert.IsFalse(ses.HasTooManyTasks);
            Assert.AreEqual((uint)0, ses.LastBlockIndex);
            Assert.AreEqual(0, ses.IndexTasks.Count);
            Assert.IsFalse(ses.IsFullNode);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 744 2006 40 41 123 2007 61 744 2008 91 93 123 744 2009 40 1504 41 125 125 41 59 2010 46 2011 40 2004 46 2012 41 59 2010 46 2013 40 40 842 41 1504 44 2004 46 2014 41 59 2010 46 2013 40 1500 44 2004 46 2015 46 2016 41 59 2010 46 2017 40 2004 46 2018 41 59 2004 61 744 2005 40 744 2006 40 41 123 2019 61 2020 46 2021 60 2022 62 40 41 125 41 59 2010 46 2011 40 2004 46 2012 41 59 2010 46 2013 40 40 842 41 1500 44 2004 46 2014 41 59 2010 46 2013 40 1500 44 2004 46 2015 46 2016 41 59 2010 46 2011 40 2004 46 2018 41 59 125 125 ,"{'AvgLine': 16, 'CountLine': 20, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 10, 'CountDeclMethod': 1, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79954,C#,"    public class Witness : ISerializable
    {
        // This is designed to allow a MultiSig 21/11 (committee)
        // Invocation = 11 * (64 + 2) = 726
        private const int MaxInvocationScript = 1024;

        // Verification = m + (PUSH_PubKey * 21) + length + null + syscall = 1 + ((2 + 33) * 21) + 2 + 1 + 5 = 744
        private const int MaxVerificationScript = 1024;

        /// <summary>
        /// The invocation script of the witness. Used to pass arguments for <see cref=""VerificationScript""/>.
        /// </summary>
        public byte[] InvocationScript;

        /// <summary>
        /// The verification script of the witness. It can be empty if the contract is deployed.
        /// </summary>
        public byte[] VerificationScript;

        private UInt160 _scriptHash;
        /// <summary>
        /// The hash of the <see cref=""VerificationScript""/>.
        /// </summary>
        public UInt160 ScriptHash
        {
            get
            {
                if (_scriptHash == null)
                {
                    _scriptHash = VerificationScript.ToScriptHash();
                }
                return _scriptHash;
            }
        }

        public int Size => InvocationScript.GetVarSize() + VerificationScript.GetVarSize();

        void ISerializable.Deserialize(BinaryReader reader)
        {
            InvocationScript = reader.ReadVarBytes(MaxInvocationScript);
            VerificationScript = reader.ReadVarBytes(MaxVerificationScript);
        }

        void ISerializable.Serialize(BinaryWriter writer)
        {
            writer.WriteVarBytes(InvocationScript);
            writer.WriteVarBytes(VerificationScript);
        }

        /// <summary>
        /// Converts the witness to a JSON object.
        /// </summary>
        /// <returns>The witness represented by a JSON object.</returns>
        public JObject ToJson()
        {
            JObject json = new();
            json[""invocation""] = Convert.ToBase64String(InvocationScript);
            json[""verification""] = Convert.ToBase64String(VerificationScript);
            return json;
        }
    }",0,777 587 2000 58 2001 123 330 330 773 601 704 2002 61 1505 59 330 773 601 704 2003 61 1505 59 331 777 574 91 93 2004 59 331 777 574 91 93 2005 59 773 2006 2007 59 331 777 2006 2008 123 2009 123 688 40 2007 323 752 41 123 2007 61 2005 46 2010 40 41 59 125 792 2007 59 125 125 777 704 2011 328 2004 46 2012 40 41 43 2005 46 2012 40 41 59 865 2001 46 2013 40 2014 2015 41 123 2004 61 2015 46 2016 40 2002 41 59 2005 61 2015 46 2016 40 2003 41 59 125 865 2001 46 2017 40 2018 2019 41 123 2019 46 2020 40 2004 41 59 2019 46 2020 40 2005 41 59 125 331 777 2021 2022 40 41 123 2021 2023 61 744 40 41 59 2023 91 362 93 61 2024 46 2025 40 2004 41 59 2023 91 362 93 61 2024 46 2025 40 2005 41 59 792 2023 59 125 125 ,"{'AvgLine': 5, 'CountLine': 61, 'CountStmt': 23, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 37, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 8, 'CountSemicolon': 16, 'CountDeclMethod': 5, 'CountLineCodeExe': 11, 'CountLineComment': 16, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountDeclProperty': 2, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.43', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 33, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79964,C#,"        private class NodeList : List<ECPoint>, IInteroperable
        {
            public void FromStackItem(StackItem stackItem)
            {
                foreach (StackItem item in (VM.Types.Array)stackItem)
                    Add(item.GetSpan().AsSerializable<ECPoint>());
            }

            public StackItem ToStackItem(ReferenceCounter referenceCounter)
            {
                return new VM.Types.Array(referenceCounter, this.Select(p => (StackItem)p.ToArray()));
            }
        }",0,773 587 2000 58 2001 60 2002 62 44 2003 123 777 865 2004 40 2005 2006 41 123 665 40 2005 2007 696 40 2008 46 2009 46 2010 41 2006 41 2011 40 2007 46 2012 40 41 46 2013 60 2002 62 40 41 41 59 125 777 2005 2014 40 2015 2016 41 123 792 744 2017 46 2018 46 2019 40 2016 44 823 46 2020 40 2021 328 40 2005 41 2021 46 2022 40 41 41 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 13, 'CountStmt': 6, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 3, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 1, 'CountSemicolon': 2, 'CountDeclMethod': 2, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79973,C#,"        private class InternalCollection : KeyedCollection<TKey, TItem>
        {
            protected override TKey GetKeyForItem(TItem item)
            {
                return item.Key;
            }
        }",0,773 587 2000 58 2001 60 2002 44 2003 62 123 775 763 2002 2004 40 2003 2005 41 123 792 2005 46 2006 59 125 125 ,"{'AvgLine': 4, 'CountLine': 7, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 1, 'CountDeclMethod': 1, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 0, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79970,C#,"    public class UT_ContractEventDescriptor
    {
        [TestMethod]
        public void TestFromJson()
        {
            ContractEventDescriptor expected = new ContractEventDescriptor
            {
                Name = ""AAA"",
                Parameters = new ContractParameterDefinition[0]
            };
            ContractEventDescriptor actual = ContractEventDescriptor.FromJson(expected.ToJson());
            Assert.AreEqual(expected.Name, actual.Name);
            Assert.AreEqual(0, actual.Parameters.Length);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2003 123 2005 61 362 44 2006 61 744 2007 91 1500 93 125 59 2003 2008 61 2003 46 2009 40 2004 46 2010 40 41 41 59 2011 46 2012 40 2004 46 2013 44 2008 46 2013 41 59 2011 46 2012 40 1500 44 2008 46 2014 46 2015 41 59 125 125 ,"{'AvgLine': 11, 'CountLine': 15, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 4, 'CountDeclMethod': 1, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79989,C#,"    internal class BlockchainMailbox : PriorityMailbox
    {
        public BlockchainMailbox(Settings settings, Config config)
            : base(settings, config)
        {
        }

        internal protected override bool IsHighPriority(object message)
        {
            return message switch
            {
                Header[] or Block or ExtensiblePayload or Terminated => true,
                _ => false,
            };
        }
    }
}
",0,710 587 2000 58 2001 123 777 2000 40 2002 2003 44 2004 2005 41 58 563 40 2003 44 2005 41 123 125 710 775 763 569 2006 40 755 2007 41 123 792 2007 819 123 2008 91 93 2009 2010 2009 2011 2009 2012 328 829 44 2013 328 655 44 125 59 125 125 125 ,"{'AvgLine': 5, 'CountLine': 14, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 1, 'CountDeclMethod': 2, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 1, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79997,C#,"    public class UT_FungibleToken : TestKit
    {
        [TestMethod]
        public void TestTotalSupply()
        {
            var snapshot = TestBlockchain.GetTestSnapshot();
            NativeContract.GAS.TotalSupply(snapshot).Should().Be(5200000050000000);
        }
    }",0,777 587 2000 58 2001 123 91 2002 93 777 865 2003 40 41 123 2004 2005 61 2006 46 2007 40 41 59 2008 46 2009 46 2010 40 2005 41 46 2011 40 41 46 2012 40 1517 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 9, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 2, 'CountDeclMethod': 1, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80004,C#,"    public class UT_Account
    {
        [TestMethod]
        public void TestGenerator()
        {
            Account account = new Account();
            Assert.IsNotNull(account);
        }

        [TestMethod]
        public void TestSetAndGetNep2key()
        {
            Account account = new Account
            {
                Nep2key = ""123""
            };
            Assert.AreEqual(""123"", account.Nep2key);
        }

        [TestMethod]
        public void TestSetAndGetPublicKeyHash()
        {
            Account account = new Account
            {
                PublicKeyHash = new byte[] { 0x01 }
            };
            Assert.AreEqual(Encoding.Default.GetString(new byte[] { 0x01 }), Encoding.Default.GetString(account.PublicKeyHash));
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2003 40 41 59 2005 46 2006 40 2004 41 59 125 91 2001 93 777 865 2007 40 41 123 2008 2009 61 744 2008 123 2010 61 362 125 59 2011 46 2012 40 362 44 2009 46 2013 41 59 125 91 2001 93 777 865 2014 40 41 123 2015 2016 61 744 2015 123 2017 61 744 574 91 93 123 1501 125 125 59 2018 46 2019 40 2020 46 2021 46 2022 40 744 574 91 93 123 1501 125 41 44 2020 46 2021 46 2022 40 2016 46 2023 41 41 59 125 125 ,"{'AvgLine': 7, 'CountLine': 29, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 27, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 6, 'CountDeclMethod': 3, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80023,C#,"    public class UT_ProtocolSettings
    {
        [TestMethod]
        public void CheckFirstLetterOfAddresses()
        {
            UInt160 min = UInt160.Parse(""0x0000000000000000000000000000000000000000"");
            min.ToAddress(ProtocolSettings.Default.AddressVersion)[0].Should().Be('N');
            UInt160 max = UInt160.Parse(""0xffffffffffffffffffffffffffffffffffffffff"");
            max.ToAddress(ProtocolSettings.Default.AddressVersion)[0].Should().Be('N');
        }

        [TestMethod]
        public void Default_Network_should_be_mainnet_Network_value()
        {
            var mainNetNetwork = 0x334F454Eu;
            ProtocolSettings.Default.Network.Should().Be(mainNetNetwork);
        }

        [TestMethod]
        public void TestGetMemoryPoolMaxTransactions()
        {
            ProtocolSettings.Default.MemoryPoolMaxTransactions.Should().Be(50000);
        }

        [TestMethod]
        public void TestGetMillisecondsPerBlock()
        {
            ProtocolSettings.Default.MillisecondsPerBlock.Should().Be(15000);
        }

        [TestMethod]
        public void TestGetSeedList()
        {
            ProtocolSettings.Default.SeedList.Should().BeEquivalentTo(new string[] { ""seed1.neo.org:10333"", ""seed2.neo.org:10333"", ""seed3.neo.org:10333"", ""seed4.neo.org:10333"", ""seed5.neo.org:10333"", });
        }

        [TestMethod]
        public void TestNativeUpdateHistory()
        {
            ProtocolSettings.Default.NativeUpdateHistory.Count.Should().Be(NativeContract.Contracts.Count);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 2003 46 2005 40 362 41 59 2004 46 2006 40 2007 46 2008 46 2009 41 91 1500 93 46 2010 40 41 46 2011 40 314 41 59 2003 2012 61 2003 46 2005 40 362 41 59 2012 46 2006 40 2007 46 2008 46 2009 41 91 1500 93 46 2010 40 41 46 2011 40 314 41 59 125 91 2001 93 777 865 2013 40 41 123 2014 2015 61 1510 59 2016 46 2017 46 2018 46 2019 40 41 46 2020 40 2015 41 59 125 91 2001 93 777 865 2021 40 41 123 2022 46 2023 46 2024 46 2025 40 41 46 2026 40 1506 41 59 125 91 2001 93 777 865 2027 40 41 123 2028 46 2029 46 2030 46 2031 40 41 46 2032 40 1506 41 59 125 91 2001 93 777 865 2033 40 41 123 2034 46 2035 46 2036 46 2037 40 41 46 2038 40 744 815 91 93 123 362 44 362 44 362 44 362 44 362 44 125 41 59 125 91 2001 93 777 865 2039 40 41 123 2040 46 2041 46 2042 46 2043 46 2044 40 41 46 2045 40 2046 46 2047 46 2043 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 42, 'CountStmt': 17, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 37, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountSemicolon': 10, 'CountDeclMethod': 6, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 16, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 6, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80056,C#,"    public class UT_ECFieldElement
    {
        [TestMethod]
        public void TestECFieldElementConstructor()
        {
            BigInteger input = new(100);
            Action action = () => new ECFieldElement(input, ECCurve.Secp256k1);
            action.Should().NotThrow();

            input = ECCurve.Secp256k1.Q;
            action = () => new ECFieldElement(input, ECCurve.Secp256k1);
            action.Should().Throw<ArgumentException>();

            action = () => new ECFieldElement(input, null);
            action.Should().Throw<ArgumentNullException>();
        }

        [TestMethod]
        public void TestCompareTo()
        {
            ECFieldElement X1 = new(new BigInteger(100), ECCurve.Secp256k1);
            ECFieldElement Y1 = new(new BigInteger(200), ECCurve.Secp256k1);
            ECFieldElement X2 = new(new BigInteger(300), ECCurve.Secp256k1);
            ECFieldElement Y2 = new(new BigInteger(400), ECCurve.Secp256k1);
            ECFieldElement X3 = new(new BigInteger(100), ECCurve.Secp256r1);
            ECFieldElement Y3 = new(new BigInteger(400), ECCurve.Secp256r1);
            ECPoint point1 = new(X1, Y1, ECCurve.Secp256k1);
            ECPoint point2 = new(X2, Y1, ECCurve.Secp256k1);
            ECPoint point3 = new(X1, Y2, ECCurve.Secp256k1);
            ECPoint point4 = new(X3, Y3, ECCurve.Secp256r1);

            point1.CompareTo(point1).Should().Be(0);
            point1.CompareTo(point2).Should().Be(-1);
            point2.CompareTo(point1).Should().Be(1);
            point1.CompareTo(point3).Should().Be(-1);
            point3.CompareTo(point1).Should().Be(1);
            Action action = () => point3.CompareTo(point4);
            action.Should().Throw<InvalidOperationException>();
        }

        [TestMethod]
        public void TestEquals()
        {
            BigInteger input = new(100);
            object element = new ECFieldElement(input, ECCurve.Secp256k1);
            element.Equals(element).Should().BeTrue();
            element.Equals(1).Should().BeFalse();
            element.Equals(new ECFieldElement(input, ECCurve.Secp256r1)).Should().BeFalse();

            input = new BigInteger(200);
            element.Equals(new ECFieldElement(input, ECCurve.Secp256k1)).Should().BeFalse();
        }

        [TestMethod]
        public void TestSqrt()
        {
            ECFieldElement element = new(new BigInteger(100), ECCurve.Secp256k1);
            element.Sqrt().Should().Be(new ECFieldElement(BigInteger.Parse(""115792089237316195423570985008687907853269984665640564039457584007908834671653""), ECCurve.Secp256k1));

            ConstructorInfo constructor = typeof(ECCurve).GetConstructor(BindingFlags.NonPublic | BindingFlags.Instance, null, new Type[] { typeof(BigInteger), typeof(BigInteger), typeof(BigInteger), typeof(BigInteger), typeof(byte[]) }, null);
            ECCurve testCruve = constructor.Invoke(new object[] {
                BigInteger.Parse(""00FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFF0"", NumberStyles.AllowHexSpecifier),
                BigInteger.Parse(""00FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFF00"", NumberStyles.AllowHexSpecifier),
                BigInteger.Parse(""005AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B"", NumberStyles.AllowHexSpecifier),
                BigInteger.Parse(""00FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551"", NumberStyles.AllowHexSpecifier),
                (""04"" + ""6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296"" + ""4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5"").HexToBytes() }) as ECCurve;
            element = new ECFieldElement(new BigInteger(200), testCruve);
            element.Sqrt().Should().Be(null);
        }

        [TestMethod]
        public void TestToByteArray()
        {
            byte[] result = new byte[32];
            result[31] = 100;
            new ECFieldElement(new BigInteger(100), ECCurve.Secp256k1).ToByteArray().Should().BeEquivalentTo(result);

            byte[] result2 = { 2, 53, 250, 221, 129, 194, 130, 43, 179, 240, 120, 119, 151, 61, 80, 242, 139, 242, 42, 49, 190, 142, 232, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            new ECFieldElement(BigInteger.Pow(new BigInteger(10), 75), ECCurve.Secp256k1).ToByteArray().Should().BeEquivalentTo(result2);

            byte[] result3 = { 221, 21, 254, 134, 175, 250, 217, 18, 73, 239, 14, 183, 19, 243, 158, 190, 170, 152, 123, 110, 111, 210, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            new ECFieldElement(BigInteger.Pow(new BigInteger(10), 77), ECCurve.Secp256k1).ToByteArray().Should().BeEquivalentTo(result3);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 40 1503 41 59 2005 2006 61 40 41 328 744 2007 40 2004 44 2008 46 2009 41 59 2006 46 2010 40 41 46 2011 40 41 59 2004 61 2008 46 2009 46 2012 59 2006 61 40 41 328 744 2007 40 2004 44 2008 46 2009 41 59 2006 46 2010 40 41 46 2013 60 2014 62 40 41 59 2006 61 40 41 328 744 2007 40 2004 44 752 41 59 2006 46 2010 40 41 46 2013 60 2015 62 40 41 59 125 91 2001 93 777 865 2016 40 41 123 2017 2018 61 744 40 744 2019 40 1503 41 44 2020 46 2021 41 59 2017 2022 61 744 40 744 2019 40 1504 41 44 2020 46 2021 41 59 2017 2023 61 744 40 744 2019 40 1504 41 44 2020 46 2021 41 59 2017 2024 61 744 40 744 2019 40 1504 41 44 2020 46 2021 41 59 2017 2025 61 744 40 744 2019 40 1503 41 44 2020 46 2026 41 59 2017 2027 61 744 40 744 2019 40 1504 41 44 2020 46 2026 41 59 2028 2029 61 744 40 2018 44 2022 44 2020 46 2021 41 59 2028 2030 61 744 40 2023 44 2022 44 2020 46 2021 41 59 2028 2031 61 744 40 2018 44 2024 44 2020 46 2021 41 59 2028 2032 61 744 40 2025 44 2027 44 2020 46 2026 41 59 2029 46 2033 40 2029 41 46 2034 40 41 46 2035 40 1500 41 59 2029 46 2033 40 2030 41 46 2034 40 41 46 2035 40 45 1501 41 59 2030 46 2033 40 2029 41 46 2034 40 41 46 2035 40 1501 41 59 2029 46 2033 40 2031 41 46 2034 40 41 46 2035 40 45 1501 41 59 2031 46 2033 40 2029 41 46 2034 40 41 46 2035 40 1501 41 59 2036 2037 61 40 41 328 2031 46 2033 40 2032 41 59 2037 46 2034 40 41 46 2038 60 2039 62 40 41 59 125 91 2001 93 777 865 2040 40 41 123 2041 2042 61 744 40 1503 41 59 755 2043 61 744 2044 40 2042 44 2045 46 2046 41 59 2043 46 2047 40 2043 41 46 2048 40 41 46 2049 40 41 59 2043 46 2047 40 1501 41 46 2048 40 41 46 2050 40 41 59 2043 46 2047 40 744 2044 40 2042 44 2045 46 2051 41 41 46 2048 40 41 46 2050 40 41 59 2042 61 744 2041 40 1504 41 59 2043 46 2047 40 744 2044 40 2042 44 2045 46 2046 41 41 46 2048 40 41 46 2050 40 41 59 125 91 2001 93 777 865 2052 40 41 123 2053 2054 61 744 40 744 2055 40 1503 41 44 2056 46 2057 41 59 2054 46 2058 40 41 46 2059 40 41 46 2060 40 744 2053 40 2055 46 2061 40 362 41 44 2056 46 2057 41 41 59 2062 2063 61 836 40 2056 41 46 2064 40 2065 46 2066 124 2065 46 2067 44 752 44 744 2068 91 93 123 836 40 2055 41 44 836 40 2055 41 44 836 40 2055 41 44 836 40 2055 41 44 836 40 574 91 93 41 125 44 752 41 59 2056 2069 61 2063 46 2070 40 744 755 91 93 123 2055 46 2061 40 362 44 2071 46 2072 41 44 2055 46 2061 40 362 44 2071 46 2072 41 44 2055 46 2061 40 362 44 2071 46 2072 41 44 2055 46 2061 40 362 44 2071 46 2072 41 44 40 362 43 362 43 362 41 46 2073 40 41 125 41 552 2056 59 2054 61 744 2053 40 744 2055 40 1504 41 44 2069 41 59 2054 46 2058 40 41 46 2059 40 41 46 2060 40 752 41 59 125 91 2001 93 777 865 2074 40 41 123 574 91 93 2075 61 744 574 91 1503 93 59 2075 91 1503 93 61 1503 59 744 2076 40 744 2077 40 1503 41 44 2078 46 2079 41 46 2080 40 41 46 2081 40 41 46 2082 40 2075 41 59 574 91 93 2083 61 123 1502 44 1503 44 1504 44 1504 44 1504 44 1504 44 1504 44 1503 44 1504 44 1504 44 1504 44 1504 44 1504 44 1503 44 1503 44 1504 44 1504 44 1504 44 1503 44 1503 44 1504 44 1504 44 1504 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 125 59 744 2076 40 2077 46 2084 40 744 2077 40 1502 41 44 1503 41 44 2078 46 2079 41 46 2080 40 41 46 2081 40 41 46 2082 40 2083 41 59 574 91 93 2085 61 123 1504 44 1503 44 1504 44 1504 44 1504 44 1504 44 1504 44 1503 44 1503 44 1504 44 1503 44 1504 44 1503 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 125 59 744 2076 40 2077 46 2084 40 744 2077 40 1502 41 44 1503 41 44 2078 46 2079 41 46 2080 40 41 46 2081 40 41 46 2082 40 2085 41 59 125 125 ,"{'AvgLine': 14, 'CountLine': 84, 'CountStmt': 51, 'MaxNesting': 0, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 27, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 73, 'CountStmtDecl': 27, 'MaxCyclomatic': 1, 'SumCyclomatic': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountSemicolon': 45, 'CountDeclMethod': 5, 'CountLineCodeExe': 50, 'CountLineComment': 0, 'CountClassCoupled': 11, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 33, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 9, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79855,C#,"    public class AccountState : IInteroperable
    {
        /// <summary>
        /// The balance of the account.
        /// </summary>
        public BigInteger Balance;

        public virtual void FromStackItem(StackItem stackItem)
        {
            Balance = ((Struct)stackItem)[0].GetInteger();
        }

        public virtual StackItem ToStackItem(ReferenceCounter referenceCounter)
        {
            return new Struct(referenceCounter) { Balance };
        }
    }",0,777 587 2000 58 2001 123 331 777 2002 2003 59 777 864 865 2004 40 2005 2006 41 123 2003 61 40 40 2007 41 2006 41 91 1500 93 46 2008 40 41 59 125 777 864 2005 2009 40 2010 2011 41 123 792 744 2012 40 2011 41 123 2003 125 59 125 125 ,"{'AvgLine': 4, 'CountLine': 17, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 2, 'CountSemicolon': 3, 'CountDeclMethod': 2, 'CountLineCodeExe': 2, 'CountLineComment': 3, 'CountClassCoupled': 4, 'CountClassDerived': 1, 'CountDeclProperty': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.25', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79862,C#,"    public class UT_NeoSystem
    {
        private NeoSystem neoSystem;

        [TestInitialize]
        public void Setup()
        {
            neoSystem = TestBlockchain.TheNeoSystem;
        }

        [TestMethod]
        public void TestGetBlockchain() => neoSystem.Blockchain.Should().NotBeNull();

        [TestMethod]
        public void TestGetLocalNode() => neoSystem.LocalNode.Should().NotBeNull();

        [TestMethod]
        public void TestGetTaskManager() => neoSystem.TaskManager.Should().NotBeNull();
    }",0,777 587 2000 123 773 2001 2002 59 91 2003 93 777 865 2004 40 41 123 2002 61 2005 46 2006 59 125 91 2007 93 777 865 2008 40 41 328 2002 46 2009 46 2010 40 41 46 2011 40 41 59 91 2007 93 777 865 2012 40 41 328 2002 46 2013 46 2010 40 41 46 2011 40 41 59 91 2007 93 777 865 2014 40 41 328 2002 46 2015 46 2010 40 41 46 2011 40 41 59 125 ,"{'AvgLine': 1, 'CountLine': 19, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountSemicolon': 5, 'CountDeclMethod': 4, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79908,C#,"    internal class RelayCache : FIFOCache<UInt256, IInventory>
    {
        public RelayCache(int max_capacity)
            : base(max_capacity)
        {
        }

        protected override UInt256 GetKeyForItem(IInventory item)
        {
            return item.Hash;
        }
    }",0,710 587 2000 58 2001 60 2002 44 2003 62 123 777 2000 40 704 2004 41 58 563 40 2004 41 123 125 775 763 2002 2005 40 2003 2006 41 123 792 2006 46 2007 59 125 125 ,"{'AvgLine': 4, 'CountLine': 12, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 1, 'CountDeclMethod': 2, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 30, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79877,C#,"    public class UT_WalletAccount
    {
        [TestMethod]
        public void TestGetAddress()
        {
            MyWalletAccount walletAccount = new MyWalletAccount(UInt160.Zero);
            walletAccount.Address.Should().Be(""NKuyBkoGdZZSLyPbJEetheRhMjeznFZszf"");
        }

        [TestMethod]
        public void TestGetWatchOnly()
        {
            MyWalletAccount walletAccount = new MyWalletAccount(UInt160.Zero);
            walletAccount.WatchOnly.Should().BeTrue();
            walletAccount.Contract = new Contract();
            walletAccount.WatchOnly.Should().BeFalse();
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2003 40 2005 46 2006 41 59 2004 46 2007 46 2008 40 41 46 2009 40 362 41 59 125 91 2001 93 777 865 2010 40 41 123 2011 2012 61 744 2011 40 2013 46 2014 41 59 2012 46 2015 46 2016 40 41 46 2017 40 41 59 2012 46 2018 61 744 2018 40 41 59 2012 46 2015 46 2016 40 41 46 2019 40 41 59 125 125 ,"{'AvgLine': 6, 'CountLine': 18, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 6, 'CountDeclMethod': 2, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79897,C#,"    public abstract class Connection : UntypedActor
    {
        internal class Close { public bool Abort; }
        internal class Ack : Tcp.Event { public static Ack Instance = new(); }

        /// <summary>
        /// connection initial timeout (in seconds) before any package has been accepted.
        /// </summary>
        private const int connectionTimeoutLimitStart = 10;

        /// <summary>
        /// connection timeout (in seconds) after every `OnReceived(ByteString data)` event.
        /// </summary>
        private const int connectionTimeoutLimit = 60;

        /// <summary>
        /// The address of the remote node.
        /// </summary>
        public IPEndPoint Remote { get; }

        /// <summary>
        /// The address of the local node.
        /// </summary>
        public IPEndPoint Local { get; }

        private ICancelable timer;
        private readonly IActorRef tcp;
        private readonly WebSocket ws;
        private bool disconnected = false;

        /// <summary>
        /// Initializes a new instance of the <see cref=""Connection""/> class.
        /// </summary>
        /// <param name=""connection"">The underlying connection object.</param>
        /// <param name=""remote"">The address of the remote node.</param>
        /// <param name=""local"">The address of the local node.</param>
        protected Connection(object connection, IPEndPoint remote, IPEndPoint local)
        {
            this.Remote = remote;
            this.Local = local;
            this.timer = Context.System.Scheduler.ScheduleTellOnceCancelable(TimeSpan.FromSeconds(connectionTimeoutLimitStart), Self, new Close { Abort = true }, ActorRefs.NoSender);
            switch (connection)
            {
                case IActorRef tcp:
                    this.tcp = tcp;
                    break;
                case WebSocket ws:
                    this.ws = ws;
                    WsReceive();
                    break;
            }
        }

        private void WsReceive()
        {
            byte[] buffer = new byte[512];
            ws.ReceiveAsync(buffer, CancellationToken.None).PipeTo(Self,
                success: p =>
                {
                    switch (p.MessageType)
                    {
                        case WebSocketMessageType.Binary:
                            return new Tcp.Received(ByteString.FromBytes(buffer, 0, p.Count));
                        case WebSocketMessageType.Close:
                            return Tcp.PeerClosed.Instance;
                        default:
                            ws.Abort();
                            return Tcp.Aborted.Instance;
                    }
                },
                failure: ex => new Tcp.ErrorClosed(ex.Message));
        }

        /// <summary>
        /// Disconnect from the remote node.
        /// </summary>
        /// <param name=""abort"">Indicates whether the TCP ABORT command should be sent.</param>
        public void Disconnect(bool abort = false)
        {
            disconnected = true;
            if (tcp != null)
            {
                tcp.Tell(abort ? Tcp.Abort.Instance : Tcp.Close.Instance);
            }
            else
            {
                ws.Abort();
            }
            Context.Stop(Self);
        }

        /// <summary>
        /// Called when a TCP ACK message is received.
        /// </summary>
        protected virtual void OnAck()
        {
        }

        /// <summary>
        /// Called when data is received.
        /// </summary>
        /// <param name=""data"">The received data.</param>
        protected abstract void OnData(ByteString data);

        protected override void OnReceive(object message)
        {
            switch (message)
            {
                case Close close:
                    Disconnect(close.Abort);
                    break;
                case Ack _:
                    OnAck();
                    break;
                case Tcp.Received received:
                    OnReceived(received.Data);
                    break;
                case Tcp.ConnectionClosed _:
                    Context.Stop(Self);
                    break;
            }
        }

        private void OnReceived(ByteString data)
        {
            timer.CancelIfNotNull();
            timer = Context.System.Scheduler.ScheduleTellOnceCancelable(TimeSpan.FromSeconds(connectionTimeoutLimit), Self, new Close { Abort = true }, ActorRefs.NoSender);
            try
            {
                OnData(data);
            }
            catch
            {
                Disconnect(true);
            }
        }

        protected override void PostStop()
        {
            if (!disconnected)
                tcp?.Tell(Tcp.Close.Instance);
            timer.CancelIfNotNull();
            ws?.Dispose();
            base.PostStop();
        }

        /// <summary>
        /// Sends data to the remote node.
        /// </summary>
        /// <param name=""data""></param>
        protected void SendData(ByteString data)
        {
            if (tcp != null)
            {
                tcp.Tell(Tcp.Write.Create(data, Ack.Instance));
            }
            else
            {
                ArraySegment<byte> segment = new(data.ToArray());
                ws.SendAsync(segment, WebSocketMessageType.Binary, true, CancellationToken.None).PipeTo(Self,
                    success: () => Ack.Instance,
                    failure: ex => new Tcp.ErrorClosed(ex.Message));
            }
        }
    }",0,777 539 587 2000 58 2001 123 710 587 2002 123 777 569 2003 59 125 710 587 2004 58 2005 46 2006 123 777 809 2004 2007 61 744 40 41 59 125 331 773 601 704 2008 61 1502 59 331 773 601 704 2009 61 1503 59 331 777 2010 2011 123 2012 59 125 331 777 2010 2013 123 2014 59 125 773 2015 2016 59 773 780 2017 2018 59 773 780 2019 2020 59 773 569 2021 61 655 59 331 775 2000 40 755 2022 44 2010 2023 44 2010 2024 41 123 823 46 2011 61 2023 59 823 46 2013 61 2024 59 823 46 2016 61 2025 46 2026 46 2027 46 2028 40 2029 46 2030 40 2008 41 44 2031 44 744 2002 123 2032 61 829 125 44 2033 46 2034 41 59 819 40 2022 41 123 579 2017 2018 58 823 46 2018 61 2018 59 572 59 579 2019 2020 58 823 46 2020 61 2020 59 2035 40 41 59 572 59 125 125 773 865 2036 40 41 123 574 91 93 2037 61 744 574 91 1504 93 59 2020 46 2038 40 2037 44 2039 46 2040 41 46 2041 40 2042 44 2043 58 2044 328 123 819 40 2044 46 2045 41 123 579 2046 46 2047 58 792 744 2005 46 2048 40 2049 46 2050 40 2037 44 1500 44 2044 46 2051 41 41 59 579 2046 46 2002 58 792 2005 46 2052 46 2053 59 613 58 2020 46 2054 40 41 59 792 2005 46 2055 46 2053 59 125 125 44 2056 58 2057 328 744 2005 46 2058 40 2057 46 2059 41 41 59 125 331 777 865 2060 40 569 2061 61 655 41 123 2021 61 829 59 688 40 2018 340 752 41 123 2018 46 2062 40 2061 63 2005 46 2063 46 2064 58 2005 46 2002 46 2064 41 59 125 630 123 2020 46 2065 40 41 59 125 2066 46 2067 40 2068 41 59 125 331 775 864 865 2069 40 41 123 125 331 775 539 865 2070 40 2071 2072 41 59 775 763 865 2073 40 755 2074 41 123 819 40 2074 41 123 579 2002 2075 58 2060 40 2075 46 2076 41 59 572 59 579 2004 2077 58 2069 40 41 59 572 59 579 2005 46 2078 2079 58 2080 40 2079 46 2081 41 59 572 59 579 2005 46 2082 2077 58 2083 46 2084 40 2085 41 59 572 59 125 125 773 865 2086 40 2071 2072 41 123 2016 46 2087 40 41 59 2016 61 2088 46 2089 46 2090 46 2091 40 2092 46 2093 40 2009 41 44 2094 44 744 2002 123 2095 61 829 125 44 2096 46 2097 41 59 830 123 2070 40 2072 41 59 125 580 123 2060 40 829 41 59 125 125 775 763 865 2098 40 41 123 688 40 33 2021 41 2018 346 2099 40 2005 46 2002 46 2100 41 59 2016 46 2101 40 41 59 2020 346 2102 40 41 59 563 46 2098 40 41 59 125 331 775 865 2103 40 2071 2072 41 123 688 40 2018 340 752 41 123 2018 46 2104 40 2005 46 2105 46 2106 40 2072 44 2004 46 2107 41 41 59 125 630 123 2108 60 574 62 2109 61 744 40 2072 46 2110 40 41 41 59 2020 46 2111 40 2109 44 2112 46 2113 44 829 44 2114 46 2115 41 46 2116 40 2117 44 2118 58 40 41 328 2004 46 2119 44 2120 58 2121 328 744 2005 46 2122 40 2121 46 2123 41 41 59 125 125 125 ,"{'AvgLine': 10, 'CountLine': 165, 'CountStmt': 68, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 42, 'MaxEssential': 1, 'SumEssential': 12, 'AvgCyclomatic': 2, 'CountLineCode': 118, 'CountStmtDecl': 26, 'MaxCyclomatic': 5, 'SumCyclomatic': 25, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountSemicolon': 48, 'CountDeclMethod': 11, 'CountLineCodeExe': 63, 'CountLineComment': 33, 'CountClassCoupled': 14, 'CountClassDerived': 1, 'CountDeclProperty': 2, 'CountLineCodeDecl': 22, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.28', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 25, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 6, 'CountClassCoupledModified': 11, 'CountDeclInstanceVariable': 4, 'PercentLackOfCohesionModified': 52, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79905,C#,"    public class UT_TaskManagerMailbox : TestKit
    {
        private static readonly Random TestRandom = new Random(1337); // use fixed seed for guaranteed determinism

        TaskManagerMailbox uut;

        [TestCleanup]
        public void Cleanup()
        {
            Shutdown();
        }

        [TestInitialize]
        public void TestSetup()
        {
            Akka.Actor.ActorSystem system = Sys;
            var config = TestKit.DefaultConfig;
            var akkaSettings = new Akka.Actor.Settings(system, config);
            uut = new TaskManagerMailbox(akkaSettings, config);
        }

        [TestMethod]
        public void TaskManager_Test_IsHighPriority()
        {
            // high priority
            uut.IsHighPriority(new TaskManager.Register()).Should().Be(true);
            uut.IsHighPriority(new TaskManager.RestartTasks()).Should().Be(true);

            // low priority
            // -> NewTasks: generic InvPayload
            uut.IsHighPriority(new TaskManager.NewTasks { Payload = new InvPayload() }).Should().Be(false);

            // high priority
            // -> NewTasks: payload Block or Consensus
            uut.IsHighPriority(new TaskManager.NewTasks { Payload = new InvPayload { Type = InventoryType.Block } }).Should().Be(true);
            uut.IsHighPriority(new TaskManager.NewTasks { Payload = new InvPayload { Type = InventoryType.Extensible } }).Should().Be(true);

            // any random object should not have priority
            object obj = null;
            uut.IsHighPriority(obj).Should().Be(false);
        }
    }",0,777 587 2000 58 2001 123 773 809 780 2002 2003 61 744 2002 40 1505 41 59 330 2004 2005 59 91 2006 93 777 865 2007 40 41 123 2008 40 41 59 125 91 2009 93 777 865 2010 40 41 123 2011 46 2012 46 2013 2014 61 2015 59 2016 2017 61 2001 46 2018 59 2016 2019 61 744 2011 46 2012 46 2020 40 2014 44 2017 41 59 2005 61 744 2004 40 2019 44 2017 41 59 125 91 2021 93 777 865 2022 40 41 123 330 2005 46 2023 40 744 2024 46 2025 40 41 41 46 2026 40 41 46 2027 40 829 41 59 2005 46 2023 40 744 2024 46 2028 40 41 41 46 2026 40 41 46 2027 40 829 41 59 330 330 2005 46 2023 40 744 2024 46 2029 123 2030 61 744 2031 40 41 125 41 46 2026 40 41 46 2027 40 655 41 59 330 330 2005 46 2023 40 744 2024 46 2029 123 2032 61 744 2033 123 2034 61 2035 46 2036 125 125 41 46 2026 40 41 46 2027 40 829 41 59 2005 46 2023 40 744 2024 46 2029 123 2037 61 744 2038 123 2039 61 2040 46 2041 125 125 41 46 2026 40 41 46 2027 40 829 41 59 330 755 2042 61 752 59 2005 46 2023 40 2042 41 46 2026 40 41 46 2027 40 655 41 59 125 125 ,"{'AvgLine': 10, 'CountLine': 42, 'CountStmt': 18, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 29, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountSemicolon': 14, 'CountDeclMethod': 3, 'CountLineCodeExe': 13, 'CountLineComment': 7, 'CountClassCoupled': 13, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.24', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 13, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 66, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79943,C#,"    public class UT_UserWalletAccount
    {
        [TestMethod]
        public void TestGenerator()
        {
            UserWalletAccount account = new UserWalletAccount(UInt160.Zero, ProtocolSettings.Default);
            Assert.IsNotNull(account);
        }

        [TestMethod]
        public void TestGetHasKey()
        {
            UserWalletAccount account = new UserWalletAccount(UInt160.Zero, ProtocolSettings.Default);
            Assert.AreEqual(false, account.HasKey);
        }

        [TestMethod]
        public void TestGetKey()
        {
            UserWalletAccount account = new UserWalletAccount(UInt160.Zero, ProtocolSettings.Default);
            Assert.AreEqual(null, account.GetKey());
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2003 40 2005 46 2006 44 2007 46 2008 41 59 2009 46 2010 40 2004 41 59 125 91 2001 93 777 865 2011 40 41 123 2012 2013 61 744 2012 40 2014 46 2015 44 2016 46 2017 41 59 2018 46 2019 40 655 44 2013 46 2020 41 59 125 91 2001 93 777 865 2021 40 41 123 2022 2023 61 744 2022 40 2024 46 2025 44 2026 46 2027 41 59 2028 46 2029 40 752 44 2023 46 2030 40 41 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 23, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 6, 'CountDeclMethod': 3, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79822,C#,"    sealed class UserWalletAccount : WalletAccount
    {
        public KeyPair Key;

        public override bool HasKey => Key != null;

        public UserWalletAccount(UInt160 scriptHash, ProtocolSettings settings)
            : base(scriptHash, settings)
        {
        }

        public override KeyPair GetKey()
        {
            return Key;
        }
    }",0,798 587 2000 58 2001 123 777 2002 2003 59 777 763 569 2004 328 2003 340 752 59 777 2000 40 2005 2006 44 2007 2008 41 58 563 40 2006 44 2008 41 123 125 777 763 2002 2009 40 41 123 792 2003 59 125 125 ,"{'AvgLine': 2, 'CountLine': 16, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 3, 'CountDeclMethod': 3, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 33, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80068,C#,"    public class UT_HighPriorityAttribute
    {
        [TestMethod]
        public void Size_Get()
        {
            var test = new HighPriorityAttribute();
            test.Size.Should().Be(1);
        }

        [TestMethod]
        public void ToJson()
        {
            var test = new HighPriorityAttribute();
            var json = test.ToJson().ToString();
            Assert.AreEqual(@""{""""type"""":""""HighPriority""""}"", json);
        }

        [TestMethod]
        public void DeserializeAndSerialize()
        {
            var test = new HighPriorityAttribute();

            var clone = test.ToArray().AsSerializable<HighPriorityAttribute>();
            Assert.AreEqual(clone.Type, test.Type);

            // As transactionAttribute

            using var msRead = new MemoryStream();
            using var msWrite = new MemoryStream();
            using (var stream = new BinaryWriter(msWrite))
            {
                var data = (test as TransactionAttribute).ToArray();
                msRead.Write(data);
                msRead.Seek(0, SeekOrigin.Begin);
            }

            using var reader = new BinaryReader(msRead);
            clone = TransactionAttribute.DeserializeFrom(reader) as HighPriorityAttribute;
            Assert.AreEqual(clone.Type, test.Type);

            // Wrong type

            msRead.Seek(0, SeekOrigin.Begin);
            msRead.WriteByte(0xff);
            msRead.Seek(0, SeekOrigin.Begin);
            Assert.ThrowsException<FormatException>(() => TransactionAttribute.DeserializeFrom(reader));
            msRead.Seek(0, SeekOrigin.Begin);
            Assert.ThrowsException<FormatException>(() => new HighPriorityAttribute().Deserialize(reader));
        }

        [TestMethod]
        public void Verify()
        {
            var test = new HighPriorityAttribute();
            var snapshot = TestBlockchain.GetTestSnapshot();

            Assert.IsFalse(test.Verify(snapshot, new Transaction() { Signers = Array.Empty<Signer>() }));
            Assert.IsFalse(test.Verify(snapshot, new Transaction() { Signers = new Signer[] { new Signer() { Account = UInt160.Parse(""0xa400ff00ff00ff00ff00ff00ff00ff00ff00ff01"") } } }));
            Assert.IsTrue(test.Verify(snapshot, new Transaction() { Signers = new Signer[] { new Signer() { Account = NativeContract.NEO.GetCommitteeAddress(snapshot) } } }));
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 41 59 2004 46 2006 46 2007 40 41 46 2008 40 1501 41 59 125 91 2001 93 777 865 2009 40 41 123 2010 2011 61 744 2012 40 41 59 2010 2013 61 2011 46 2009 40 41 46 2014 40 41 59 2015 46 2016 40 64 362 362 362 362 362 44 2013 41 59 125 91 2001 93 777 865 2017 40 41 123 2018 2019 61 744 2020 40 41 59 2018 2021 61 2019 46 2022 40 41 46 2023 60 2020 62 40 41 59 2024 46 2025 40 2021 46 2026 44 2019 46 2026 41 59 330 860 2018 2027 61 744 2028 40 41 59 860 2018 2029 61 744 2028 40 41 59 860 40 2018 2030 61 744 2031 40 2029 41 41 123 2018 2032 61 40 2019 552 2033 41 46 2022 40 41 59 2027 46 2034 40 2032 41 59 2027 46 2035 40 1500 44 2036 46 2037 41 59 125 860 2018 2038 61 744 2039 40 2027 41 59 2021 61 2040 46 2041 40 2038 41 552 2020 59 2024 46 2025 40 2021 46 2026 44 2019 46 2026 41 59 330 2027 46 2042 40 1500 44 2043 46 2044 41 59 2027 46 2045 40 1504 41 59 2027 46 2042 40 1500 44 2043 46 2044 41 59 2024 46 2046 60 2047 62 40 40 41 328 2040 46 2041 40 2038 41 41 59 2027 46 2042 40 1500 44 2043 46 2044 41 59 2024 46 2046 60 2047 62 40 40 41 328 744 2020 40 41 46 2048 40 2038 41 41 59 125 91 2001 93 777 865 2049 40 41 123 2050 2051 61 744 2052 40 41 59 2050 2053 61 2054 46 2055 40 41 59 2056 46 2057 40 2051 46 2049 40 2053 44 744 2058 40 41 123 2059 61 2060 46 2061 60 2062 62 40 41 125 41 41 59 2056 46 2057 40 2051 46 2049 40 2053 44 744 2058 40 41 123 2063 61 744 2064 91 93 123 744 2064 40 41 123 2065 61 2066 46 2067 40 362 41 125 125 125 41 41 59 2056 46 2068 40 2051 46 2049 40 2053 44 744 2058 40 41 123 2069 61 744 2070 91 93 123 744 2070 40 41 123 2071 61 2072 46 2073 46 2074 40 2053 41 125 125 125 41 41 59 125 125 ,"{'AvgLine': 12, 'CountLine': 61, 'CountStmt': 30, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 25, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 49, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountSemicolon': 27, 'CountDeclMethod': 4, 'CountLineCodeExe': 28, 'CountLineComment': 2, 'CountClassCoupled': 19, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 16, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80054,C#,"    class TestWalletAccount : WalletAccount
    {
        private static readonly KeyPair key;

        public override bool HasKey => true;
        public override KeyPair GetKey() => key;

        public TestWalletAccount(UInt160 hash)
            : base(hash, ProtocolSettings.Default)
        {
            var mock = new Mock<Contract>();
            mock.SetupGet(p => p.ScriptHash).Returns(hash);
            mock.Object.Script = Contract.CreateSignatureRedeemScript(key.PublicKey);
            mock.Object.ParameterList = new[] { ContractParameterType.Signature };
            Contract = mock.Object;
        }

        static TestWalletAccount()
        {
            Random random = new();
            byte[] prikey = new byte[32];
            random.NextBytes(prikey);
            key = new KeyPair(prikey);
        }
    }",0,587 2000 58 2001 123 773 809 780 2002 2003 59 777 763 569 2004 328 829 59 777 763 2002 2005 40 41 328 2003 59 777 2000 40 2006 2007 41 58 563 40 2007 44 2008 46 2009 41 123 2010 2011 61 744 2012 60 2013 62 40 41 59 2011 46 2014 40 2015 328 2015 46 2016 41 46 2017 40 2007 41 59 2011 46 2018 46 2019 61 2013 46 2020 40 2003 46 2021 41 59 2011 46 2018 46 2022 61 744 91 93 123 2023 46 2024 125 59 2013 61 2011 46 2018 59 125 809 2000 40 41 123 2025 2026 61 744 40 41 59 574 91 93 2027 61 744 574 91 1503 93 59 2026 46 2028 40 2027 41 59 2003 61 744 2002 40 2027 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 25, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 22, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 12, 'CountDeclMethod': 4, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 25, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 25, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79831,C#,"    public abstract class WalletAccount
    {
        /// <summary>
        /// The <see cref=""Neo.ProtocolSettings""/> to be used by the wallet.
        /// </summary>
        protected readonly ProtocolSettings ProtocolSettings;

        /// <summary>
        /// The hash of the account.
        /// </summary>
        public readonly UInt160 ScriptHash;

        /// <summary>
        /// The label of the account.
        /// </summary>
        public string Label;

        /// <summary>
        /// Indicates whether the account is the default account in the wallet.
        /// </summary>
        public bool IsDefault;

        /// <summary>
        /// Indicates whether the account is locked.
        /// </summary>
        public bool Lock;

        /// <summary>
        /// The contract of the account.
        /// </summary>
        public Contract Contract;

        /// <summary>
        /// The address of the account.
        /// </summary>
        public string Address => ScriptHash.ToAddress(ProtocolSettings.AddressVersion);

        /// <summary>
        /// Indicates whether the account contains a private key.
        /// </summary>
        public abstract bool HasKey { get; }

        /// <summary>
        /// Indicates whether the account is a watch-only account.
        /// </summary>
        public bool WatchOnly => Contract == null;

        /// <summary>
        /// Gets the private key of the account.
        /// </summary>
        /// <returns>The private key of the account. Or <see langword=""null""/> if there is no private key in the account.</returns>
        public abstract KeyPair GetKey();

        /// <summary>
        /// Initializes a new instance of the <see cref=""WalletAccount""/> class.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the account.</param>
        /// <param name=""settings"">The <see cref=""Neo.ProtocolSettings""/> to be used by the wallet.</param>
        protected WalletAccount(UInt160 scriptHash, ProtocolSettings settings)
        {
            this.ProtocolSettings = settings;
            this.ScriptHash = scriptHash;
        }
    }",0,777 539 587 2000 123 331 775 780 2001 2001 59 331 777 780 2002 2003 59 331 777 815 2004 59 331 777 569 2005 59 331 777 569 2006 59 331 777 2007 2007 59 331 777 815 2008 328 2003 46 2009 40 2001 46 2010 41 59 331 777 539 569 2011 123 2012 59 125 331 777 569 2013 328 2007 323 752 59 331 777 539 2014 2015 40 41 59 331 775 2000 40 2002 2016 44 2001 2017 41 123 823 46 2001 61 2017 59 823 46 2003 61 2016 59 125 125 ,"{'AvgLine': 1, 'CountLine': 64, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountSemicolon': 12, 'CountDeclMethod': 5, 'CountLineCodeExe': 2, 'CountLineComment': 36, 'CountClassCoupled': 7, 'CountClassDerived': 4, 'CountDeclProperty': 3, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '2.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'CountDeclPropertyAuto': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 72, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 6, 'PercentLackOfCohesionModified': 72, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 1, 'CountDeclInstanceVariableProtectedInternal': 0}"
80070,C#,"    public class UT_ContractState
    {
        ContractState contract;
        byte[] script = { 0x01 };
        ContractManifest manifest;

        [TestInitialize]
        public void TestSetup()
        {
            manifest = TestUtils.CreateDefaultManifest();
            contract = new ContractState
            {
                Nef = new NefFile
                {
                    Compiler = nameof(ScriptBuilder),
                    Source = string.Empty,
                    Tokens = Array.Empty<MethodToken>(),
                    Script = script
                },
                Hash = script.ToScriptHash(),
                Manifest = manifest
            };
            contract.Nef.CheckSum = NefFile.ComputeChecksum(contract.Nef);
        }

        [TestMethod]
        public void TestGetScriptHash()
        {
            // _scriptHash == null
            contract.Hash.Should().Be(script.ToScriptHash());
            // _scriptHash != null
            contract.Hash.Should().Be(script.ToScriptHash());
        }

        [TestMethod]
        public void TestIInteroperable()
        {
            IInteroperable newContract = new ContractState();
            newContract.FromStackItem(contract.ToStackItem(null));
            ((ContractState)newContract).Manifest.ToJson().ToString().Should().Be(contract.Manifest.ToJson().ToString());
            ((ContractState)newContract).Script.Should().BeEquivalentTo(contract.Script);
        }

        [TestMethod]
        public void TestCanCall()
        {
            var temp = new ContractState() { Manifest = TestUtils.CreateDefaultManifest() };

            Assert.AreEqual(true, temp.CanCall(new ContractState() { Hash = UInt160.Zero, Manifest = TestUtils.CreateDefaultManifest() }, ""AAA""));
        }

        [TestMethod]
        public void TestToJson()
        {
            JObject json = contract.ToJson();
            json[""hash""].AsString().Should().Be(""0x820944cfdc70976602d71b0091445eedbc661bc5"");
            json[""nef""][""script""].AsString().Should().Be(""AQ=="");
            json[""manifest""].AsString().Should().Be(manifest.ToJson().AsString());
        }
    }",0,777 587 2000 123 2001 2002 59 574 91 93 2003 61 123 1501 125 59 2004 2005 59 91 2006 93 777 865 2007 40 41 123 2005 61 2008 46 2009 40 41 59 2002 61 744 2001 123 2010 61 744 2011 123 2012 61 2013 40 2014 41 44 2015 61 815 46 2016 44 2017 61 2018 46 2016 60 2019 62 40 41 44 2020 61 2003 125 44 2021 61 2003 46 2022 40 41 44 2023 61 2005 125 59 2002 46 2024 46 2025 61 2026 46 2027 40 2002 46 2024 41 59 125 91 2028 93 777 865 2029 40 41 123 330 2002 46 2030 46 2031 40 41 46 2032 40 2003 46 2033 40 41 41 59 330 2002 46 2030 46 2031 40 41 46 2032 40 2003 46 2033 40 41 41 59 125 91 2028 93 777 865 2034 40 41 123 2035 2036 61 744 2001 40 41 59 2036 46 2037 40 2002 46 2038 40 752 41 41 59 40 40 2001 41 2036 41 46 2039 46 2040 40 41 46 2041 40 41 46 2042 40 41 46 2043 40 2002 46 2039 46 2040 40 41 46 2041 40 41 41 59 40 40 2001 41 2036 41 46 2044 46 2042 40 41 46 2045 40 2002 46 2044 41 59 125 91 2028 93 777 865 2046 40 41 123 2047 2048 61 744 2001 40 41 123 2049 61 2050 46 2051 40 41 125 59 2052 46 2053 40 829 44 2048 46 2054 40 744 2001 40 41 123 2055 61 2056 46 2057 44 2058 61 2059 46 2060 40 41 125 44 362 41 41 59 125 91 2028 93 777 865 2061 40 41 123 2062 2063 61 2002 46 2064 40 41 59 2063 91 362 93 46 2065 40 41 46 2066 40 41 46 2067 40 362 41 59 2063 91 362 93 91 362 93 46 2065 40 41 46 2066 40 41 46 2067 40 362 41 59 2063 91 362 93 46 2065 40 41 46 2066 40 41 46 2067 40 2005 46 2064 40 41 46 2065 40 41 41 59 125 125 ,"{'AvgLine': 8, 'CountLine': 60, 'CountStmt': 24, 'MaxNesting': 0, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 52, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountSemicolon': 18, 'CountDeclMethod': 5, 'CountLineCodeExe': 25, 'CountLineComment': 2, 'CountClassCoupled': 13, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.04', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 46, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 11, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 46, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80013,C#,"    public class UT_ScryptParameters
    {
        ScryptParameters uut;

        [TestInitialize]
        public void TestSetup()
        {
            uut = ScryptParameters.Default;
        }

        [TestMethod]
        public void Test_Default_ScryptParameters()
        {
            uut.N.Should().Be(16384);
            uut.R.Should().Be(8);
            uut.P.Should().Be(8);
        }

        [TestMethod]
        public void Test_ScryptParameters_Default_ToJson()
        {
            JObject json = ScryptParameters.Default.ToJson();
            json[""n""].AsNumber().Should().Be(ScryptParameters.Default.N);
            json[""r""].AsNumber().Should().Be(ScryptParameters.Default.R);
            json[""p""].AsNumber().Should().Be(ScryptParameters.Default.P);
        }

        [TestMethod]
        public void Test_Default_ScryptParameters_FromJson()
        {
            JObject json = new JObject();
            json[""n""] = 16384;
            json[""r""] = 8;
            json[""p""] = 8;

            ScryptParameters uut2 = ScryptParameters.FromJson(json);
            uut2.N.Should().Be(ScryptParameters.Default.N);
            uut2.R.Should().Be(ScryptParameters.Default.R);
            uut2.P.Should().Be(ScryptParameters.Default.P);
        }

        [TestMethod]
        public void TestScryptParametersConstructor()
        {
            int n = 1, r = 2, p = 3;
            ScryptParameters parameter = new ScryptParameters(n, r, p);
            parameter.N.Should().Be(n);
            parameter.R.Should().Be(r);
            parameter.P.Should().Be(p);
        }
    }",0,777 587 2000 123 2001 2002 59 91 2003 93 777 865 2004 40 41 123 2002 61 2001 46 2005 59 125 91 2006 93 777 865 2007 40 41 123 2002 46 2008 46 2009 40 41 46 2010 40 1506 41 59 2002 46 2011 46 2009 40 41 46 2010 40 1502 41 59 2002 46 2012 46 2009 40 41 46 2010 40 1502 41 59 125 91 2006 93 777 865 2013 40 41 123 2014 2015 61 2001 46 2016 46 2017 40 41 59 2015 91 362 93 46 2018 40 41 46 2019 40 41 46 2020 40 2001 46 2016 46 2021 41 59 2015 91 362 93 46 2018 40 41 46 2019 40 41 46 2020 40 2001 46 2016 46 2022 41 59 2015 91 362 93 46 2018 40 41 46 2019 40 41 46 2020 40 2001 46 2016 46 2023 41 59 125 91 2006 93 777 865 2024 40 41 123 2025 2026 61 744 2025 40 41 59 2026 91 362 93 61 1506 59 2026 91 362 93 61 1502 59 2026 91 362 93 61 1502 59 2001 2027 61 2001 46 2028 40 2026 41 59 2027 46 2029 46 2030 40 41 46 2031 40 2001 46 2032 46 2029 41 59 2027 46 2033 46 2030 40 41 46 2031 40 2001 46 2032 46 2033 41 59 2027 46 2034 46 2030 40 41 46 2031 40 2001 46 2032 46 2034 41 59 125 91 2006 93 777 865 2035 40 41 123 704 2036 61 1501 44 2037 61 1502 44 2038 61 1502 59 2001 2039 61 744 2001 40 2036 44 2037 44 2038 41 59 2039 46 2040 46 2041 40 41 46 2042 40 2036 41 59 2039 46 2043 46 2041 40 41 46 2042 40 2037 41 59 2039 46 2044 46 2041 40 41 46 2042 40 2038 41 59 125 125 ,"{'AvgLine': 7, 'CountLine': 51, 'CountStmt': 28, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 45, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountSemicolon': 22, 'CountDeclMethod': 5, 'CountLineCodeExe': 21, 'CountLineComment': 0, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 60, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79876,C#,"    public class MyWalletAccount : WalletAccount
    {
        private KeyPair key = null;
        public override bool HasKey => key != null;

        public MyWalletAccount(UInt160 scriptHash)
            : base(scriptHash, ProtocolSettings.Default)
        {
        }

        public override KeyPair GetKey()
        {
            return key;
        }

        public void SetKey(KeyPair inputKey)
        {
            key = inputKey;
        }
    }",0,777 587 2000 58 2001 123 773 2002 2003 61 752 59 777 763 569 2004 328 2003 340 752 59 777 2000 40 2005 2006 41 58 563 40 2006 44 2007 46 2008 41 123 125 777 763 2002 2009 40 41 123 792 2003 59 125 777 865 2010 40 2002 2011 41 123 2003 61 2011 59 125 125 ,"{'AvgLine': 3, 'CountLine': 20, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 4, 'CountDeclMethod': 4, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 25, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 25, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79823,C#,"    public class ScryptParameters
    {
        /// <summary>
        /// The default parameters used by <see cref=""NEP6Wallet""/>.
        /// </summary>
        public static ScryptParameters Default { get; } = new ScryptParameters(16384, 8, 8);

        /// <summary>
        /// CPU/Memory cost parameter. Must be larger than 1, a power of 2 and less than 2^(128 * r / 8).
        /// </summary>
        public readonly int N;

        /// <summary>
        /// The block size, must be >= 1.
        /// </summary>
        public readonly int R;

        /// <summary>
        /// Parallelization parameter. Must be a positive integer less than or equal to Int32.MaxValue / (128 * r * 8).
        /// </summary>
        public readonly int P;

        /// <summary>
        /// Initializes a new instance of the <see cref=""ScryptParameters""/> class.
        /// </summary>
        /// <param name=""n"">CPU/Memory cost parameter.</param>
        /// <param name=""r"">The block size.</param>
        /// <param name=""p"">Parallelization parameter.</param>
        public ScryptParameters(int n, int r, int p)
        {
            this.N = n;
            this.R = r;
            this.P = p;
        }

        /// <summary>
        /// Converts the parameters from a JSON object.
        /// </summary>
        /// <param name=""json"">The parameters represented by a JSON object.</param>
        /// <returns>The converted parameters.</returns>
        public static ScryptParameters FromJson(JObject json)
        {
            return new ScryptParameters((int)json[""n""].AsNumber(), (int)json[""r""].AsNumber(), (int)json[""p""].AsNumber());
        }

        /// <summary>
        /// Converts the parameters to a JSON object.
        /// </summary>
        /// <returns>The parameters represented by a JSON object.</returns>
        public JObject ToJson()
        {
            JObject json = new();
            json[""n""] = N;
            json[""r""] = R;
            json[""p""] = P;
            return json;
        }
    }",0,777 587 2000 123 331 777 809 2000 2001 123 2002 59 125 61 744 2000 40 1506 44 1502 44 1502 41 59 331 777 780 704 2003 59 331 777 780 704 2004 59 331 777 780 704 2005 59 331 777 2000 40 704 2006 44 704 2007 44 704 2008 41 123 823 46 2003 61 2006 59 823 46 2004 61 2007 59 823 46 2005 61 2008 59 125 331 777 809 2000 2009 40 2010 2011 41 123 792 744 2000 40 40 704 41 2011 91 362 93 46 2012 40 41 44 40 704 41 2011 91 362 93 46 2012 40 41 44 40 704 41 2011 91 362 93 46 2012 40 41 41 59 125 331 777 2010 2013 40 41 123 2010 2011 61 744 40 41 59 2011 91 362 93 61 2003 59 2011 91 362 93 61 2004 59 2011 91 362 93 61 2005 59 792 2011 59 125 125 ,"{'AvgLine': 4, 'CountLine': 58, 'CountStmt': 18, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 25, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountSemicolon': 14, 'CountDeclMethod': 4, 'CountLineCodeExe': 10, 'CountLineComment': 27, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '1.08', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 1, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 25, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79814,C#,"    public class UT_NativeContract
    {
        [TestMethod]
        public void TestGetContract()
        {
            Assert.IsTrue(NativeContract.NEO == NativeContract.GetContract(NativeContract.NEO.Hash));
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 46 2004 40 2005 46 2006 323 2005 46 2007 40 2005 46 2006 46 2008 41 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 8, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 1, 'CountDeclMethod': 1, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80036,C#,"    public class UT_MethodToken
    {
        [TestMethod]
        public void TestSerialize()
        {
            var result = new MethodToken()
            {
                CallFlags = CallFlags.AllowCall,
                Hash = UInt160.Parse(""0xa400ff00ff00ff00ff00ff00ff00ff00ff00ff01""),
                Method = ""myMethod"",
                ParametersCount = 123,
                HasReturnValue = true
            };

            var copy = result.ToArray().AsSerializable<MethodToken>();

            Assert.AreEqual(CallFlags.AllowCall, copy.CallFlags);
            Assert.AreEqual(""0xa400ff00ff00ff00ff00ff00ff00ff00ff00ff01"", copy.Hash.ToString());
            Assert.AreEqual(""myMethod"", copy.Method);
            Assert.AreEqual(123, copy.ParametersCount);
            Assert.AreEqual(true, copy.HasReturnValue);
        }

        [TestMethod]
        public void TestSerializeErrors()
        {
            var result = new MethodToken()
            {
                CallFlags = (CallFlags)byte.MaxValue,
                Hash = UInt160.Parse(""0xa400ff00ff00ff00ff00ff00ff00ff00ff00ff01""),
                Method = ""myLongMethod"",
                ParametersCount = 123,
                HasReturnValue = true
            };

            Assert.ThrowsException<FormatException>(() => result.ToArray().AsSerializable<MethodToken>());

            result.CallFlags = CallFlags.All;
            result.Method += ""-123123123123123123123123"";
            Assert.ThrowsException<FormatException>(() => result.ToArray().AsSerializable<MethodToken>());
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 41 123 2006 61 2006 46 2007 44 2008 61 2009 46 2010 40 362 41 44 2011 61 362 44 2012 61 1504 44 2013 61 829 125 59 2003 2014 61 2004 46 2015 40 41 46 2016 60 2005 62 40 41 59 2017 46 2018 40 2019 46 2020 44 2014 46 2019 41 59 2017 46 2018 40 362 44 2014 46 2021 46 2022 40 41 41 59 2017 46 2018 40 362 44 2014 46 2023 41 59 2017 46 2018 40 1504 44 2014 46 2024 41 59 2017 46 2018 40 829 44 2014 46 2025 41 59 125 91 2001 93 777 865 2026 40 41 123 2027 2028 61 744 2029 40 41 123 2030 61 40 2030 41 574 46 2031 44 2032 61 2033 46 2034 40 362 41 44 2035 61 362 44 2036 61 1504 44 2037 61 829 125 59 2038 46 2039 60 2040 62 40 40 41 328 2028 46 2041 40 41 46 2042 60 2029 62 40 41 41 59 2028 46 2043 61 2043 46 2044 59 2028 46 2045 348 362 59 2038 46 2039 60 2040 62 40 40 41 328 2028 46 2041 40 41 46 2042 60 2029 62 40 41 41 59 125 125 ,"{'AvgLine': 18, 'CountLine': 42, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 37, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountSemicolon': 12, 'CountDeclMethod': 2, 'CountLineCodeExe': 22, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79741,C#,"    public class StorageItem : ISerializable
    {
        private byte[] value;
        private object cache;

        public int Size => Value.GetVarSize();

        /// <summary>
        /// The byte array value of the <see cref=""StorageItem""/>.
        /// </summary>
        public byte[] Value
        {
            get
            {
                return value ??= cache switch
                {
                    BigInteger bi => bi.ToByteArrayStandard(),
                    IInteroperable interoperable => BinarySerializer.Serialize(interoperable.ToStackItem(null), 1024 * 1024),
                    IReadOnlyCollection<ISerializable> list => list.ToByteArray(),
                    null => null,
                    _ => throw new InvalidCastException()
                };
            }
            set
            {
                this.value = value;
                cache = null;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref=""StorageItem""/> class.
        /// </summary>
        public StorageItem() { }

        /// <summary>
        /// Initializes a new instance of the <see cref=""StorageItem""/> class.
        /// </summary>
        /// <param name=""value"">The byte array value of the <see cref=""StorageItem""/>.</param>
        public StorageItem(byte[] value)
        {
            this.value = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref=""StorageItem""/> class.
        /// </summary>
        /// <param name=""value"">The integer value of the <see cref=""StorageItem""/>.</param>
        public StorageItem(BigInteger value)
        {
            this.cache = value;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref=""StorageItem""/> class.
        /// </summary>
        /// <param name=""interoperable"">The <see cref=""IInteroperable""/> value of the <see cref=""StorageItem""/>.</param>
        public StorageItem(IInteroperable interoperable)
        {
            this.cache = interoperable;
        }

        /// <summary>
        /// Increases the integer value in the store by the specified value.
        /// </summary>
        /// <param name=""integer"">The integer to add.</param>
        public void Add(BigInteger integer)
        {
            Set(this + integer);
        }

        /// <summary>
        /// Creates a new instance of <see cref=""StorageItem""/> with the same value as this instance.
        /// </summary>
        /// <returns>The created <see cref=""StorageItem""/>.</returns>
        public StorageItem Clone()
        {
            return new StorageItem
            {
                Value = Value
            };
        }

        public void Deserialize(BinaryReader reader)
        {
            Value = reader.ReadBytes((int)(reader.BaseStream.Length));
        }

        /// <summary>
        /// Copies the value of another <see cref=""StorageItem""/> instance to this instance.
        /// </summary>
        /// <param name=""replica"">The instance to be copied.</param>
        public void FromReplica(StorageItem replica)
        {
            Value = replica.Value;
        }

        /// <summary>
        /// Gets an <see cref=""IInteroperable""/> from the storage.
        /// </summary>
        /// <typeparam name=""T"">The type of the <see cref=""IInteroperable""/>.</typeparam>
        /// <returns>The <see cref=""IInteroperable""/> in the storage.</returns>
        public T GetInteroperable<T>() where T : IInteroperable, new()
        {
            if (cache is null)
            {
                var interoperable = new T();
                interoperable.FromStackItem(BinarySerializer.Deserialize(value, ExecutionEngineLimits.Default));
                cache = interoperable;
            }
            value = null;
            return (T)cache;
        }

        /// <summary>
        /// Gets a list of <see cref=""ISerializable""/> from the storage.
        /// </summary>
        /// <typeparam name=""T"">The type of the <see cref=""ISerializable""/>.</typeparam>
        /// <returns>The list of the <see cref=""ISerializable""/>.</returns>
        public List<T> GetSerializableList<T>() where T : ISerializable, new()
        {
            cache ??= new List<T>(value.AsSerializableArray<T>());
            value = null;
            return (List<T>)cache;
        }

        public void Serialize(BinaryWriter writer)
        {
            writer.Write(Value);
        }

        /// <summary>
        /// Sets the integer value of the storage.
        /// </summary>
        /// <param name=""integer"">The integer value to set.</param>
        public void Set(BigInteger integer)
        {
            cache = integer;
            value = null;
        }

        public static implicit operator BigInteger(StorageItem item)
        {
            item.cache ??= new BigInteger(item.value);
            return (BigInteger)item.cache;
        }
    }",0,777 587 2000 58 2001 123 773 574 91 93 2002 59 773 755 2003 59 777 704 2004 328 2005 46 2006 40 41 59 331 777 574 91 93 2005 123 2007 123 792 2002 343 61 2003 819 123 2008 2009 328 2009 46 2010 40 41 44 2011 2012 328 2013 46 2014 40 2012 46 2015 40 752 41 44 1505 42 1505 41 44 2016 60 2001 62 2017 328 2017 46 2018 40 41 44 752 328 752 44 2019 328 825 744 2020 40 41 125 59 125 2021 123 823 46 2002 61 2002 59 2003 61 752 59 125 125 331 777 2000 40 41 123 125 331 777 2000 40 574 91 93 2002 41 123 823 46 2002 61 2002 59 125 331 777 2000 40 2022 2002 41 123 823 46 2003 61 2002 59 125 331 777 2000 40 2023 2024 41 123 823 46 2003 61 2024 59 125 331 777 865 2025 40 2022 2026 41 123 2027 40 823 43 2026 41 59 125 331 777 2000 2028 40 41 123 792 744 2000 123 2005 61 2005 125 59 125 777 865 2029 40 2030 2031 41 123 2005 61 2031 46 2032 40 40 704 41 40 2031 46 2033 46 2034 41 41 59 125 331 777 865 2035 40 2000 2036 41 123 2005 61 2036 46 2005 59 125 331 777 2037 2038 60 2037 62 40 41 2039 2037 58 2023 44 744 40 41 123 688 40 2003 712 752 41 123 2040 2024 61 744 2037 40 41 59 2024 46 2041 40 2042 46 2029 40 2002 44 2043 46 2044 41 41 59 2003 61 2024 59 125 2002 61 752 59 792 40 2037 41 2003 59 125 331 777 2045 60 2037 62 2046 60 2037 62 40 41 2039 2037 58 2001 44 744 40 41 123 2003 343 61 744 2045 60 2037 62 40 2002 46 2047 60 2037 62 40 41 41 59 2002 61 752 59 792 40 2045 60 2037 62 41 2003 59 125 777 865 2048 40 2049 2050 41 123 2050 46 2051 40 2005 41 59 125 331 777 865 2052 40 2022 2026 41 123 2003 61 2026 59 2002 61 752 59 125 777 809 694 758 2022 40 2000 2053 41 123 2053 46 2003 343 61 744 2022 40 2053 46 2002 41 59 792 40 2022 41 2053 46 2003 59 125 125 ,"{'AvgLine': 4, 'CountLine': 147, 'CountStmt': 44, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 24, 'MaxEssential': 1, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 88, 'CountStmtDecl': 21, 'MaxCyclomatic': 2, 'SumCyclomatic': 16, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 15, 'CountSemicolon': 26, 'CountDeclMethod': 16, 'CountLineCodeExe': 32, 'CountLineComment': 44, 'CountClassCoupled': 12, 'CountClassDerived': 1, 'CountDeclProperty': 2, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.50', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 16, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 53, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 15, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 9, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 15, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79914,C#,"    public class UT_Address
    {
        [TestMethod]
        public void TestGenerator()
        {
            Address address = new Address();
            Assert.IsNotNull(address);
        }

        [TestMethod]
        public void TestSetAndGetScriptHash()
        {
            Address address = new Address
            {
                ScriptHash = new byte[] { 0x01 }
            };
            Assert.AreEqual(Encoding.Default.GetString(new byte[] { 0x01 }), Encoding.Default.GetString(address.ScriptHash));
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2003 40 41 59 2005 46 2006 40 2004 41 59 125 91 2001 93 777 865 2007 40 41 123 2008 2009 61 744 2008 123 2010 61 744 574 91 93 123 1501 125 125 59 2011 46 2012 40 2013 46 2014 46 2015 40 744 574 91 93 123 1501 125 41 44 2013 46 2014 46 2015 40 2009 46 2016 41 41 59 125 125 ,"{'AvgLine': 6, 'CountLine': 19, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 4, 'CountDeclMethod': 2, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79832,C#,"    internal class WalletLocker : IDisposable
    {
        private readonly NEP6Wallet wallet;

        public WalletLocker(NEP6Wallet wallet)
        {
            this.wallet = wallet;
        }

        public void Dispose()
        {
            wallet.Lock();
        }
    }",0,710 587 2000 58 2001 123 773 780 2002 2003 59 777 2000 40 2002 2003 41 123 823 46 2003 61 2003 59 125 777 865 2004 40 41 123 2003 46 2005 40 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 14, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 2, 'CountSemicolon': 3, 'CountDeclMethod': 2, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 1, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79791,C#,"    public class AssetDescriptor
    {
        /// <summary>
        /// The id of the asset.
        /// </summary>
        public UInt160 AssetId { get; }

        /// <summary>
        /// The name of the asset.
        /// </summary>
        public string AssetName { get; }

        /// <summary>
        /// The symbol of the asset.
        /// </summary>
        public string Symbol { get; }

        /// <summary>
        /// The number of decimal places of the token.
        /// </summary>
        public byte Decimals { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref=""AssetDescriptor""/> class.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> used by the <see cref=""ApplicationEngine""/>.</param>
        /// <param name=""asset_id"">The id of the asset.</param>
        public AssetDescriptor(DataCache snapshot, ProtocolSettings settings, UInt160 asset_id)
        {
            var contract = NativeContract.ContractManagement.GetContract(snapshot, asset_id);
            if (contract is null) throw new ArgumentException(null, nameof(asset_id));

            byte[] script;
            using (ScriptBuilder sb = new())
            {
                sb.EmitDynamicCall(asset_id, ""decimals"", CallFlags.ReadOnly);
                sb.EmitDynamicCall(asset_id, ""symbol"", CallFlags.ReadOnly);
                script = sb.ToArray();
            }
            using ApplicationEngine engine = ApplicationEngine.Run(script, snapshot, settings: settings, gas: 0_30000000L);
            if (engine.State != VMState.HALT) throw new ArgumentException(null, nameof(asset_id));
            this.AssetId = asset_id;
            this.AssetName = contract.Manifest.Name;
            this.Symbol = engine.ResultStack.Pop().GetString();
            this.Decimals = (byte)engine.ResultStack.Pop().GetInteger();
        }

        public override string ToString()
        {
            return AssetName;
        }
    }",0,777 587 2000 123 331 777 2001 2002 123 2003 59 125 331 777 815 2004 123 2005 59 125 331 777 815 2006 123 2007 59 125 331 777 574 2008 123 2009 59 125 331 777 2000 40 2010 2011 44 2012 2013 44 2001 2014 41 123 2015 2016 61 2017 46 2018 46 2019 40 2011 44 2014 41 59 688 40 2016 712 752 41 825 744 2020 40 752 44 2021 40 2014 41 41 59 574 91 93 2022 59 860 40 2023 2024 61 744 40 41 41 123 2024 46 2025 40 2014 44 362 44 2026 46 2027 41 59 2024 46 2025 40 2014 44 362 44 2026 46 2027 41 59 2022 61 2024 46 2028 40 41 59 125 860 2029 2030 61 2029 46 2031 40 2022 44 2011 44 2013 58 2013 44 2032 58 1500 41 59 688 40 2030 46 2033 340 2034 46 2035 41 825 744 2020 40 752 44 2021 40 2014 41 41 59 823 46 2002 61 2014 59 823 46 2004 61 2016 46 2036 46 2037 59 823 46 2006 61 2030 46 2038 46 2039 40 41 46 2040 40 41 59 823 46 2008 61 40 574 41 2030 46 2038 46 2039 40 41 46 2041 40 41 59 125 777 763 815 2042 40 41 123 792 2004 59 125 125 ,"{'AvgLine': 3, 'CountLine': 53, 'CountStmt': 26, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 3, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 29, 'CountStmtDecl': 13, 'MaxCyclomatic': 3, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountSemicolon': 17, 'CountDeclMethod': 6, 'CountLineCodeExe': 13, 'CountLineComment': 18, 'CountClassCoupled': 13, 'CountClassDerived': 0, 'CountDeclProperty': 4, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.62', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 6, 'CountDeclPropertyAuto': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 37, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 10, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 37, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79995,C#,"    public class UT_NotifyEventArgs
    {
        [TestMethod]
        public void TestGetScriptContainer()
        {
            IVerifiable container = new TestVerifiable();
            UInt160 script_hash = new byte[] { 0x00 }.ToScriptHash();
            NotifyEventArgs args = new NotifyEventArgs(container, script_hash, ""Test"", null);
            args.ScriptContainer.Should().Be(container);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 41 59 2006 2007 61 744 574 91 93 123 1500 125 46 2008 40 41 59 2009 2010 61 744 2009 40 2004 44 2007 44 362 44 752 41 59 2010 46 2011 46 2012 40 41 46 2013 40 2004 41 59 125 125 ,"{'AvgLine': 7, 'CountLine': 11, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 4, 'CountDeclMethod': 1, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 7, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80035,C#,"    public class UT_DeployedContract
    {
        [TestMethod]
        public void TestGetScriptHash()
        {
            var contract = new DeployedContract(new ContractState()
            {
                Manifest = new Neo.SmartContract.Manifest.ContractManifest()
                {
                    Abi = new Neo.SmartContract.Manifest.ContractAbi()
                    {
                        Methods = new Neo.SmartContract.Manifest.ContractMethodDescriptor[]
                         {
                             new Neo.SmartContract.Manifest.ContractMethodDescriptor()
                             {
                                  Name = ""verify"",
                                  Parameters = Array.Empty<Neo.SmartContract.Manifest.ContractParameterDefinition>()
                             }
                         }
                    }
                },
                Nef = new NefFile { Script = new byte[] { 1, 2, 3 } },
                Hash = new byte[] { 1, 2, 3 }.ToScriptHash()
            });

            Assert.AreEqual(""0xb2e3fe334830b4741fa5d762f2ab36b90b86c49b"", contract.ScriptHash.ToString());
        }

        [TestMethod]
        public void TestErrors()
        {
            Assert.ThrowsException<ArgumentNullException>(() => new DeployedContract(null));
            Assert.ThrowsException<NotSupportedException>(() => new DeployedContract(new ContractState()
            {
                Manifest = new Neo.SmartContract.Manifest.ContractManifest()
                {
                    Abi = new Neo.SmartContract.Manifest.ContractAbi()
                    {
                        Methods = new Neo.SmartContract.Manifest.ContractMethodDescriptor[]
                         {
                             new Neo.SmartContract.Manifest.ContractMethodDescriptor()
                             {
                                  Name = ""noverify"",
                                  Parameters = Array.Empty<Neo.SmartContract.Manifest.ContractParameterDefinition>()
                             }
                         }
                    }
                },
                Nef = new NefFile { Script = new byte[] { 1, 2, 3 } }
            }));
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 744 2006 40 41 123 2007 61 744 2008 46 2009 46 2007 46 2010 40 41 123 2011 61 744 2008 46 2009 46 2007 46 2012 40 41 123 2013 61 744 2008 46 2009 46 2007 46 2014 91 93 123 744 2008 46 2009 46 2007 46 2014 40 41 123 2015 61 362 44 2016 61 2017 46 2018 60 2008 46 2009 46 2007 46 2019 62 40 41 125 125 125 125 44 2020 61 744 2021 123 2022 61 744 574 91 93 123 1501 44 1502 44 1502 125 125 44 2023 61 744 574 91 93 123 1501 44 1502 44 1502 125 46 2024 40 41 125 41 59 2025 46 2026 40 362 44 2004 46 2027 46 2028 40 41 41 59 125 91 2001 93 777 865 2029 40 41 123 2030 46 2031 60 2032 62 40 40 41 328 744 2033 40 752 41 41 59 2030 46 2031 60 2034 62 40 40 41 328 744 2033 40 744 2035 40 41 123 2036 61 744 2037 46 2038 46 2036 46 2039 40 41 123 2040 61 744 2037 46 2038 46 2036 46 2041 40 41 123 2042 61 744 2037 46 2038 46 2036 46 2043 91 93 123 744 2037 46 2038 46 2036 46 2043 40 41 123 2044 61 362 44 2045 61 2046 46 2047 60 2037 46 2038 46 2036 46 2048 62 40 41 125 125 125 125 44 2049 61 744 2050 123 2051 61 744 574 91 93 123 1501 44 1502 44 1502 125 125 125 41 41 59 125 125 ,"{'AvgLine': 23, 'CountLine': 52, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 22, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 50, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 4, 'CountDeclMethod': 2, 'CountLineCodeExe': 23, 'CountLineComment': 0, 'CountClassCoupled': 12, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 10, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80066,C#,"        private class IdList : List<ulong>, IInteroperable
        {
            public void FromStackItem(StackItem stackItem)
            {
                foreach (StackItem item in (VM.Types.Array)stackItem)
                    Add((ulong)item.GetInteger());
            }

            public StackItem ToStackItem(ReferenceCounter referenceCounter)
            {
                return new VM.Types.Array(referenceCounter, this.Select(p => (Integer)p));
            }
        }",0,773 587 2000 58 2001 60 848 62 44 2002 123 777 865 2003 40 2004 2005 41 123 665 40 2004 2006 696 40 2007 46 2008 46 2009 41 2005 41 2010 40 40 848 41 2006 46 2011 40 41 41 59 125 777 2004 2012 40 2013 2014 41 123 792 744 2015 46 2016 46 2017 40 2014 44 823 46 2018 40 2019 328 40 2020 41 2019 41 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 13, 'CountStmt': 6, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 3, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 1, 'CountSemicolon': 2, 'CountDeclMethod': 2, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79985,C#,"        private class ContainerPlaceholder : StackItem
        {
            public override StackItemType Type { get; }
            public int ElementCount { get; }

            public ContainerPlaceholder(StackItemType type, int count)
            {
                Type = type;
                ElementCount = count;
            }

            public override bool Equals(StackItem other) => throw new NotSupportedException();

            public override int GetHashCode() => throw new NotSupportedException();

            public override bool GetBoolean() => throw new NotSupportedException();
        }",0,773 587 2000 58 2001 123 777 763 2002 2003 123 2004 59 125 777 704 2005 123 2006 59 125 777 2000 40 2002 2007 44 704 2008 41 123 2003 61 2007 59 2005 61 2008 59 125 777 763 569 2009 40 2001 2010 41 328 825 744 2011 40 41 59 777 763 704 2012 40 41 328 825 744 2011 40 41 59 777 763 569 2013 40 41 328 825 744 2011 40 41 59 125 ,"{'AvgLine': 1, 'CountLine': 17, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountSemicolon': 7, 'CountDeclMethod': 6, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountDeclProperty': 2, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 6, 'CountDeclPropertyAuto': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 1, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 75, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
88941,C#,"    class SharedFontManager
    {
        private static readonly uint FontKey    = 0x06186249;
        private static readonly uint BFTTFMagic = 0x18029a7f;

        private readonly Switch              _device;
        private readonly SharedMemoryStorage _storage;

        private struct FontInfo
        {
            public int Offset;
            public int Size;

            public FontInfo(int offset, int size)
            {
                Offset = offset;
                Size   = size;
            }
        }

        private Dictionary<SharedFontType, FontInfo> _fontData;

        public SharedFontManager(Switch device, SharedMemoryStorage storage)
        {
            _device  = device;
            _storage = storage;
        }

        public void Initialize()
        {
            _fontData?.Clear();
            _fontData = null;

        }

        public void EnsureInitialized(ContentManager contentManager)
        {
            if (_fontData == null)
            {
                _storage.ZeroFill();

                uint fontOffset = 0;

                FontInfo CreateFont(string name)
                {
                    if (contentManager.TryGetFontTitle(name, out ulong fontTitle) && contentManager.TryGetFontFilename(name, out string fontFilename))
                    {
                        string contentPath = contentManager.GetInstalledContentPath(fontTitle, StorageId.NandSystem, NcaContentType.Data);
                        string fontPath    = _device.FileSystem.SwitchPathToSystemPath(contentPath);

                        if (!string.IsNullOrWhiteSpace(fontPath))
                        {
                            byte[] data;

                            using (IStorage ncaFileStream = new LocalStorage(fontPath, FileAccess.Read, FileMode.Open))
                            {
                                Nca         nca   = new Nca(_device.System.KeySet, ncaFileStream);
                                IFileSystem romfs = nca.OpenFileSystem(NcaSectionType.Data, _device.System.FsIntegrityCheckLevel);

                                romfs.OpenFile(out IFile fontFile, (""/"" + fontFilename).ToU8Span(), OpenMode.Read).ThrowIfFailure();

                                data = DecryptFont(fontFile.AsStream());
                            }

                            FontInfo info = new FontInfo((int)fontOffset, data.Length);

                            WriteMagicAndSize(fontOffset, data.Length);

                            fontOffset += 8;

                            uint start = fontOffset;

                            for (; fontOffset - start < data.Length; fontOffset++)
                            {
                                _storage.GetRef<byte>(fontOffset) = data[fontOffset - start];
                            }

                            return info;
                        }
                        else
                        {
                            if (!contentManager.TryGetSystemTitlesName(fontTitle, out string titleName))
                            {
                                titleName = ""Unknown"";
                            }

                            throw new InvalidSystemResourceException($""{titleName} ({fontTitle:x8}) system title not found! This font will not work, provide the system archive to fix this error. (See https://github.com/Ryujinx/Ryujinx#requirements for more information)"");
                        }
                    }
                    else
                    {
                        throw new ArgumentException($""Unknown font \""{name}\""!"");
                    }
                }

                _fontData = new Dictionary<SharedFontType, FontInfo>
                {
                    { SharedFontType.JapanUsEurope,       CreateFont(""FontStandard"")                  },
                    { SharedFontType.SimplifiedChinese,   CreateFont(""FontChineseSimplified"")         },
                    { SharedFontType.SimplifiedChineseEx, CreateFont(""FontExtendedChineseSimplified"") },
                    { SharedFontType.TraditionalChinese,  CreateFont(""FontChineseTraditional"")        },
                    { SharedFontType.Korean,              CreateFont(""FontKorean"")                    },
                    { SharedFontType.NintendoEx,          CreateFont(""FontNintendoExtended"")          }
                };

                if (fontOffset > Horizon.FontSize)
                {
                    throw new InvalidSystemResourceException(""The sum of all fonts size exceed the shared memory size. "" +
                                                             $""Please make sure that the fonts don't exceed {Horizon.FontSize} bytes in total. (actual size: {fontOffset} bytes)."");
                }
            }
        }

        private void WriteMagicAndSize(ulong offset, int size)
        {
            const int key = 0x49621806;

            int encryptedSize = BinaryPrimitives.ReverseEndianness(size ^ key);

            _storage.GetRef<int>(offset + 0) = (int)BFTTFMagic;
            _storage.GetRef<int>(offset + 4) = encryptedSize;
        }

        public int GetFontSize(SharedFontType fontType)
        {
            EnsureInitialized(_device.System.ContentManager);

            return _fontData[fontType].Size;
        }

        public int GetSharedMemoryAddressOffset(SharedFontType fontType)
        {
            EnsureInitialized(_device.System.ContentManager);

            return _fontData[fontType].Offset + 8;
        }

        private static byte[] DecryptFont(Stream bfttfStream)
        {
            static uint KXor(uint data) => data ^ FontKey;

            using (BinaryReader reader    = new BinaryReader(bfttfStream))
            using (MemoryStream ttfStream = new MemoryStream())
            using (BinaryWriter output    = new BinaryWriter(ttfStream))
            {
                if (KXor(reader.ReadUInt32()) != BFTTFMagic)
                {
                    throw new InvalidDataException(""Error: Input file is not in BFTTF format!"");
                }

                bfttfStream.Position += 4;

                for (int i = 0; i < (bfttfStream.Length - 8) / 4; i++)
                {
                    output.Write(KXor(reader.ReadUInt32()));
                }

                return ttfStream.ToArray();
            }
        }
    }",0,587 2000 123 773 809 780 842 2001 61 1510 59 773 809 780 842 2002 61 1510 59 773 780 2003 2004 59 773 780 2005 2006 59 773 816 2007 123 777 704 2008 59 777 704 2009 59 777 2007 40 704 2010 44 704 2011 41 123 2008 61 2010 59 2009 61 2011 59 125 125 773 2012 60 2013 44 2007 62 2014 59 777 2000 40 2003 2015 44 2005 2016 41 123 2004 61 2015 59 2006 61 2016 59 125 777 865 2017 40 41 123 2014 346 2018 40 41 59 2014 61 752 59 125 777 865 2019 40 2020 2021 41 123 688 40 2014 323 752 41 123 2006 46 2022 40 41 59 842 2023 61 1500 59 2007 2024 40 815 2025 41 123 688 40 2021 46 2026 40 2025 44 762 848 2027 41 307 2021 46 2028 40 2025 44 762 815 2029 41 41 123 815 2030 61 2021 46 2031 40 2027 44 2032 46 2033 44 2034 46 2035 41 59 815 2036 61 2004 46 2037 46 2038 40 2030 41 59 688 40 33 815 46 2039 40 2036 41 41 123 574 91 93 2040 59 860 40 2041 2042 61 744 2043 40 2036 44 2044 46 2045 44 2046 46 2047 41 41 123 2048 2049 61 744 2048 40 2004 46 2050 46 2051 44 2042 41 59 2052 2053 61 2049 46 2054 40 2055 46 2035 44 2004 46 2050 46 2056 41 59 2053 46 2057 40 762 2058 2059 44 40 362 43 2029 41 46 2060 40 41 44 2061 46 2045 41 46 2062 40 41 59 2040 61 2063 40 2059 46 2064 40 41 41 59 125 2007 2065 61 744 2007 40 40 704 41 2023 44 2040 46 2066 41 59 2067 40 2023 44 2040 46 2066 41 59 2023 348 1502 59 842 2068 61 2023 59 664 40 59 2023 45 2068 60 2040 46 2066 59 2023 349 41 123 2006 46 2069 60 574 62 40 2023 41 61 2040 91 2023 45 2068 93 59 125 792 2065 59 125 630 123 688 40 33 2021 46 2070 40 2027 44 762 815 2071 41 41 123 2071 61 362 59 125 825 744 2072 40 36 362 41 59 125 125 630 123 825 744 2073 40 36 362 41 59 125 125 2014 61 744 2012 60 2013 44 2007 62 123 123 2013 46 2074 44 2024 40 362 41 125 44 123 2013 46 2075 44 2024 40 362 41 125 44 123 2013 46 2076 44 2024 40 362 41 125 44 123 2013 46 2077 44 2024 40 362 41 125 44 123 2013 46 2078 44 2024 40 362 41 125 44 123 2013 46 2079 44 2024 40 362 41 125 125 59 688 40 2023 62 2080 46 2081 41 123 825 744 2082 40 362 43 36 362 41 59 125 125 125 773 865 2083 40 848 2084 44 704 2085 41 123 601 704 2086 61 1511 59 704 2087 61 2088 46 2089 40 2085 94 2086 41 59 2006 46 2090 60 704 62 40 2084 43 1500 41 61 40 704 41 2002 59 2006 46 2090 60 704 62 40 2084 43 1502 41 61 2087 59 125 777 704 2091 40 2013 2092 41 123 2019 40 2004 46 2093 46 2020 41 59 792 2014 91 2092 93 46 2094 59 125 777 704 2095 40 2013 2092 41 123 2019 40 2004 46 2096 46 2020 41 59 792 2014 91 2092 93 46 2097 43 1502 59 125 773 809 574 91 93 2098 40 2099 2100 41 123 809 842 2101 40 842 2102 41 328 2102 94 2001 59 860 40 2103 2104 61 744 2103 40 2100 41 41 860 40 2105 2106 61 744 2105 40 41 41 860 40 2107 2108 61 744 2107 40 2106 41 41 123 688 40 2101 40 2104 46 2109 40 41 41 340 2002 41 123 825 744 2110 40 362 41 59 125 2100 46 2111 348 1502 59 664 40 704 2112 61 1500 59 2112 60 40 2100 46 2113 45 1502 41 47 1502 59 2112 349 41 123 2108 46 2114 40 2101 40 2104 46 2109 40 41 41 41 59 125 792 2106 46 2115 40 41 59 125 125 125 ,"{'AvgLine': 18, 'CountLine': 161, 'CountStmt': 73, 'MaxNesting': 4, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 49, 'MaxEssential': 3, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 126, 'CountStmtDecl': 30, 'MaxCyclomatic': 3, 'SumCyclomatic': 17, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 35, 'CountSemicolon': 50, 'CountDeclMethod': 7, 'CountLineCodeExe': 62, 'CountLineComment': 1, 'CountClassCoupled': 25, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 30, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 65, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 6, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 18, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 60, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79850,C#,"        internal class CachedCommittee : List<(ECPoint PublicKey, BigInteger Votes)>, IInteroperable
        {
            public CachedCommittee()
            {
            }

            public CachedCommittee(IEnumerable<(ECPoint PublicKey, BigInteger Votes)> collection) : base(collection)
            {
            }

            public void FromStackItem(StackItem stackItem)
            {
                foreach (StackItem item in (VM.Types.Array)stackItem)
                {
                    Struct @struct = (Struct)item;
                    Add((@struct[0].GetSpan().AsSerializable<ECPoint>(), @struct[1].GetInteger()));
                }
            }

            public StackItem ToStackItem(ReferenceCounter referenceCounter)
            {
                return new VM.Types.Array(referenceCounter, this.Select(p => new Struct(referenceCounter, new StackItem[] { p.PublicKey.ToArray(), p.Votes })));
            }
        }",0,710 587 2000 58 2001 60 40 2002 2003 44 2004 2005 41 62 44 2006 123 777 2000 40 41 123 125 777 2000 40 2007 60 40 2002 2003 44 2004 2005 41 62 2008 41 58 563 40 2008 41 123 125 777 865 2009 40 2010 2011 41 123 665 40 2010 2012 696 40 2013 46 2014 46 2015 41 2011 41 123 2016 64 816 61 40 2016 41 2012 59 2017 40 40 64 816 91 1500 93 46 2018 40 41 46 2019 60 2002 62 40 41 44 64 816 91 1501 93 46 2020 40 41 41 41 59 125 125 777 2010 2021 40 2022 2023 41 123 792 744 2024 46 2025 46 2026 40 2023 44 823 46 2027 40 2028 328 744 2029 40 2023 44 744 2010 91 93 123 2028 46 2003 46 2030 40 41 44 2028 46 2005 125 41 41 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 24, 'CountStmt': 9, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 21, 'CountStmtDecl': 6, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 3, 'CountSemicolon': 3, 'CountDeclMethod': 4, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80027,C#,"    sealed class ContractTaskMethodBuilder<T>
    {
        private ContractTask<T> task;

        public ContractTask<T> Task => task ??= new ContractTask<T>();

        public static ContractTaskMethodBuilder<T> Create() => new();

        public void SetException(Exception exception)
        {
            Task.GetAwaiter().SetException(exception);
        }

        public void SetResult(T result)
        {
            Task.GetAwaiter().SetResult(result);
        }

        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : INotifyCompletion
            where TStateMachine : IAsyncStateMachine
        {
            awaiter.OnCompleted(stateMachine.MoveNext);
        }

        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)
            where TAwaiter : ICriticalNotifyCompletion
            where TStateMachine : IAsyncStateMachine
        {
            awaiter.OnCompleted(stateMachine.MoveNext);
        }

        public void Start<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine
        {
            stateMachine.MoveNext();
        }

        public void SetStateMachine(IAsyncStateMachine stateMachine)
        {
        }
    }",0,798 587 2000 60 2001 62 123 773 2002 60 2001 62 2003 59 777 2002 60 2001 62 2004 328 2003 343 61 744 2002 60 2001 62 40 41 59 777 809 2000 60 2001 62 2005 40 41 328 744 40 41 59 777 865 2006 40 2007 2008 41 123 2004 46 2009 40 41 46 2006 40 2008 41 59 125 777 865 2010 40 2001 2011 41 123 2004 46 2012 40 41 46 2010 40 2011 41 59 125 777 865 2013 60 2014 44 2015 62 40 783 2014 2016 44 783 2015 2017 41 2018 2014 58 2019 2018 2015 58 2020 123 2016 46 2021 40 2017 46 2022 41 59 125 777 865 2023 60 2014 44 2015 62 40 783 2014 2016 44 783 2015 2017 41 2018 2014 58 2024 2018 2015 58 2020 123 2016 46 2025 40 2017 46 2026 41 59 125 777 865 2027 60 2015 62 40 783 2015 2017 41 2018 2015 58 2020 123 2017 46 2028 40 41 59 125 777 865 2029 40 2020 2017 41 123 125 125 ,"{'AvgLine': 3, 'CountLine': 41, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 33, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountSemicolon': 8, 'CountDeclMethod': 8, 'CountLineCodeExe': 19, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 8, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 62, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80033,C#,"    public class UT_MemoryStore
    {
        [TestMethod]
        public void StoreTest()
        {
            using var store = new MemoryStore();

            store.Delete(new byte[] { 1 });
            Assert.AreEqual(null, store.TryGet(new byte[] { 1 }));
            store.Put(new byte[] { 1 }, new byte[] { 1, 2, 3 });
            CollectionAssert.AreEqual(new byte[] { 1, 2, 3 }, store.TryGet(new byte[] { 1 }));

            store.Put(new byte[] { 2 }, new byte[] { 4, 5, 6 });
            CollectionAssert.AreEqual(new byte[] { 1 }, store.Seek(Array.Empty<byte>(), SeekDirection.Forward).Select(u => u.Key).First());
            CollectionAssert.AreEqual(new byte[] { 2 }, store.Seek(new byte[] { 2 }, SeekDirection.Backward).Select(u => u.Key).First());
            CollectionAssert.AreEqual(new byte[] { 1 }, store.Seek(new byte[] { 1 }, SeekDirection.Backward).Select(u => u.Key).First());

            store.Delete(new byte[] { 1 });
            store.Delete(new byte[] { 2 });

            store.Put(new byte[] { 0x00, 0x00, 0x00 }, new byte[] { 0x00 });
            store.Put(new byte[] { 0x00, 0x00, 0x01 }, new byte[] { 0x01 });
            store.Put(new byte[] { 0x00, 0x00, 0x02 }, new byte[] { 0x02 });
            store.Put(new byte[] { 0x00, 0x00, 0x03 }, new byte[] { 0x03 });
            store.Put(new byte[] { 0x00, 0x00, 0x04 }, new byte[] { 0x04 });

            var entries = store.Seek(Array.Empty<byte>(), SeekDirection.Backward).ToArray();
            Assert.AreEqual(entries.Count(), 0);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 860 2003 2004 61 744 2005 40 41 59 2004 46 2006 40 744 574 91 93 123 1501 125 41 59 2007 46 2008 40 752 44 2004 46 2009 40 744 574 91 93 123 1501 125 41 41 59 2004 46 2010 40 744 574 91 93 123 1501 125 44 744 574 91 93 123 1501 44 1502 44 1502 125 41 59 2011 46 2008 40 744 574 91 93 123 1501 44 1502 44 1502 125 44 2004 46 2009 40 744 574 91 93 123 1501 125 41 41 59 2004 46 2010 40 744 574 91 93 123 1502 125 44 744 574 91 93 123 1502 44 1502 44 1502 125 41 59 2011 46 2008 40 744 574 91 93 123 1501 125 44 2004 46 2012 40 2013 46 2014 60 574 62 40 41 44 2015 46 2016 41 46 2017 40 2018 328 2018 46 2019 41 46 2020 40 41 41 59 2011 46 2008 40 744 574 91 93 123 1502 125 44 2004 46 2012 40 744 574 91 93 123 1502 125 44 2015 46 2021 41 46 2017 40 2018 328 2018 46 2019 41 46 2020 40 41 41 59 2011 46 2008 40 744 574 91 93 123 1501 125 44 2004 46 2012 40 744 574 91 93 123 1501 125 44 2015 46 2021 41 46 2017 40 2018 328 2018 46 2019 41 46 2020 40 41 41 59 2004 46 2006 40 744 574 91 93 123 1501 125 41 59 2004 46 2006 40 744 574 91 93 123 1502 125 41 59 2004 46 2010 40 744 574 91 93 123 1500 44 1500 44 1500 125 44 744 574 91 93 123 1500 125 41 59 2004 46 2010 40 744 574 91 93 123 1500 44 1500 44 1501 125 44 744 574 91 93 123 1501 125 41 59 2004 46 2010 40 744 574 91 93 123 1500 44 1500 44 1502 125 44 744 574 91 93 123 1502 125 41 59 2004 46 2010 40 744 574 91 93 123 1500 44 1500 44 1502 125 44 744 574 91 93 123 1502 125 41 59 2004 46 2010 40 744 574 91 93 123 1500 44 1500 44 1502 125 44 744 574 91 93 123 1502 125 41 59 2003 2022 61 2004 46 2012 40 2013 46 2014 60 574 62 40 41 44 2015 46 2021 41 46 2023 40 41 59 2007 46 2008 40 2022 46 2024 40 41 44 1500 41 59 125 125 ,"{'AvgLine': 26, 'CountLine': 30, 'CountStmt': 19, 'MaxNesting': 0, 'AvgLineCode': 21, 'AvgEssential': 1, 'AvgLineBlank': 5, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 25, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountSemicolon': 18, 'CountDeclMethod': 1, 'CountLineCodeExe': 18, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79977,C#,"    public class MemoryStore : IStore
    {
        private readonly ConcurrentDictionary<byte[], byte[]> innerData = new(ByteArrayEqualityComparer.Default);

        public void Delete(byte[] key)
        {
            innerData.TryRemove(key.EnsureNotNull(), out _);
        }

        public void Dispose()
        {
        }

        public ISnapshot GetSnapshot()
        {
            return new MemorySnapshot(innerData);
        }

        public void Put(byte[] key, byte[] value)
        {
            innerData[key.EnsureNotNull()] = value;
        }

        public IEnumerable<(byte[] Key, byte[] Value)> Seek(byte[] keyOrPrefix, SeekDirection direction = SeekDirection.Forward)
        {
            if (direction == SeekDirection.Backward && keyOrPrefix?.Length == 0) yield break;

            ByteArrayComparer comparer = direction == SeekDirection.Forward ? ByteArrayComparer.Default : ByteArrayComparer.Reverse;
            IEnumerable<KeyValuePair<byte[], byte[]>> records = innerData;
            if (keyOrPrefix?.Length > 0)
                records = records.Where(p => comparer.Compare(p.Key, keyOrPrefix) >= 0);
            records = records.OrderBy(p => p.Key, comparer);
            foreach (var pair in records)
                yield return (pair.Key, pair.Value);
        }

        public byte[] TryGet(byte[] key)
        {
            innerData.TryGetValue(key.EnsureNotNull(), out byte[] value);
            return value;
        }

        public bool Contains(byte[] key)
        {
            return innerData.ContainsKey(key.EnsureNotNull());
        }
    }",0,777 587 2000 58 2001 123 773 780 2002 60 574 91 93 44 574 91 93 62 2003 61 744 40 2004 46 2005 41 59 777 865 2006 40 574 91 93 2007 41 123 2003 46 2008 40 2007 46 2009 40 41 44 762 2010 41 59 125 777 865 2011 40 41 123 125 777 2012 2013 40 41 123 792 744 2014 40 2003 41 59 125 777 865 2015 40 574 91 93 2007 44 574 91 93 2016 41 123 2003 91 2007 46 2017 40 41 93 61 2016 59 125 777 2018 60 40 574 91 93 2019 44 574 91 93 2020 41 62 2021 40 574 91 93 2022 44 2023 2024 61 2023 46 2025 41 123 688 40 2024 323 2023 46 2026 307 2022 346 2027 323 1500 41 2028 572 59 2029 2030 61 2024 323 2023 46 2025 63 2029 46 2005 58 2029 46 2031 59 2018 60 2032 60 574 91 93 44 574 91 93 355 2033 61 2003 59 688 40 2022 346 2027 62 1500 41 2033 61 2033 46 2034 40 2035 328 2030 46 2036 40 2035 46 2019 44 2022 41 325 1500 41 59 2033 61 2033 46 2037 40 2035 328 2035 46 2019 44 2030 41 59 665 40 2038 2039 696 2033 41 2028 792 40 2039 46 2019 44 2039 46 2020 41 59 125 777 574 91 93 2040 40 574 91 93 2007 41 123 2003 46 2041 40 2007 46 2042 40 41 44 762 574 91 93 2016 41 59 792 2016 59 125 777 569 2043 40 574 91 93 2007 41 123 792 2003 46 2044 40 2007 46 2045 40 41 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 47, 'CountStmt': 24, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 39, 'CountStmtDecl': 11, 'MaxCyclomatic': 5, 'SumCyclomatic': 13, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 8, 'CountSemicolon': 13, 'CountDeclMethod': 7, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 7, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 14, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 14, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79868,C#,"    public class UT_RemoteNode : TestKit
    {
        private static NeoSystem testBlockchain;

        public UT_RemoteNode()
            : base($""remote-node-mailbox {{ mailbox-type: \""{typeof(RemoteNodeMailbox).AssemblyQualifiedName}\"" }}"")
        {
        }

        [ClassInitialize]
        public static void TestSetup(TestContext ctx)
        {
            testBlockchain = TestBlockchain.TheNeoSystem;
        }

        [TestMethod]
        public void RemoteNode_Test_Abort_DifferentNetwork()
        {
            var connectionTestProbe = CreateTestProbe();
            var remoteNodeActor = ActorOfAsTestActorRef(() => new RemoteNode(testBlockchain, new LocalNode(testBlockchain), connectionTestProbe, null, null));

            var msg = Message.Create(MessageCommand.Version, new VersionPayload
            {
                UserAgent = """".PadLeft(1024, '0'),
                Nonce = 1,
                Network = 2,
                Timestamp = 5,
                Version = 6,
                Capabilities = new NodeCapability[]
                {
                    new ServerCapability(NodeCapabilityType.TcpServer, 25)
                }
            });

            var testProbe = CreateTestProbe();
            testProbe.Send(remoteNodeActor, new Tcp.Received((ByteString)msg.ToArray()));

            connectionTestProbe.ExpectMsg<Tcp.Abort>();
        }

        [TestMethod]
        public void RemoteNode_Test_Accept_IfSameNetwork()
        {
            var connectionTestProbe = CreateTestProbe();
            var remoteNodeActor = ActorOfAsTestActorRef(() => new RemoteNode(testBlockchain, new LocalNode(testBlockchain), connectionTestProbe, new IPEndPoint(IPAddress.Parse(""192.168.1.2""), 8080), new IPEndPoint(IPAddress.Parse(""192.168.1.1""), 8080)));

            var msg = Message.Create(MessageCommand.Version, new VersionPayload()
            {
                UserAgent = ""Unit Test"".PadLeft(1024, '0'),
                Nonce = 1,
                Network = ProtocolSettings.Default.Network,
                Timestamp = 5,
                Version = 6,
                Capabilities = new NodeCapability[]
                {
                    new ServerCapability(NodeCapabilityType.TcpServer, 25)
                }
            });

            var testProbe = CreateTestProbe();
            testProbe.Send(remoteNodeActor, new Tcp.Received((ByteString)msg.ToArray()));

            var verackMessage = connectionTestProbe.ExpectMsg<Tcp.Write>();

            //Verack
            verackMessage.Data.Count.Should().Be(3);
        }
    }",0,777 587 2000 58 2001 123 773 809 2002 2003 59 777 2000 40 41 58 563 40 36 362 41 123 125 91 2004 93 777 809 865 2005 40 2006 2007 41 123 2003 61 2008 46 2009 59 125 91 2010 93 777 865 2011 40 41 123 2012 2013 61 2014 40 41 59 2012 2015 61 2016 40 40 41 328 744 2017 40 2003 44 744 2018 40 2003 41 44 2013 44 752 44 752 41 41 59 2012 2019 61 2020 46 2021 40 2022 46 2023 44 744 2024 123 2025 61 362 46 2026 40 1505 44 314 41 44 2027 61 1501 44 2028 61 1502 44 2029 61 1502 44 2023 61 1502 44 2030 61 744 2031 91 93 123 744 2032 40 2033 46 2034 44 1503 41 125 125 41 59 2012 2035 61 2014 40 41 59 2035 46 2036 40 2015 44 744 2037 46 2038 40 40 2039 41 2019 46 2040 40 41 41 41 59 2013 46 2041 60 2037 46 2042 62 40 41 59 125 91 2010 93 777 865 2043 40 41 123 2044 2045 61 2046 40 41 59 2044 2047 61 2048 40 40 41 328 744 2049 40 2003 44 744 2050 40 2003 41 44 2045 44 744 2051 40 2052 46 2053 40 362 41 44 1505 41 44 744 2051 40 2052 46 2053 40 362 41 44 1505 41 41 41 59 2044 2054 61 2055 46 2056 40 2057 46 2058 44 744 2059 40 41 123 2060 61 362 46 2061 40 1505 44 314 41 44 2062 61 1501 44 2063 61 2064 46 2065 46 2063 44 2066 61 1502 44 2058 61 1502 44 2067 61 744 2068 91 93 123 744 2069 40 2070 46 2071 44 1503 41 125 125 41 59 2044 2072 61 2046 40 41 59 2072 46 2073 40 2047 44 744 2074 46 2075 40 40 2076 41 2054 46 2077 40 41 41 41 59 2044 2078 61 2045 46 2079 60 2074 46 2080 62 40 41 59 330 2078 46 2081 46 2082 46 2083 40 41 46 2084 40 1502 41 59 125 125 ,"{'AvgLine': 14, 'CountLine': 68, 'CountStmt': 20, 'MaxNesting': 0, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 56, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountSemicolon': 15, 'CountDeclMethod': 4, 'CountLineCodeExe': 30, 'CountLineComment': 1, 'CountClassCoupled': 18, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 18, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 75, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79890,C#,"        private class PendingKnownHashesCollection : KeyedCollection<UInt256, (UInt256, DateTime)>
        {
            protected override UInt256 GetKeyForItem((UInt256, DateTime) item)
            {
                return item.Item1;
            }
        }",0,773 587 2000 58 2001 60 2002 44 40 2002 44 2003 41 62 123 775 763 2002 2004 40 40 2002 44 2003 41 2005 41 123 792 2005 46 2006 59 125 125 ,"{'AvgLine': 4, 'CountLine': 7, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 1, 'CountDeclMethod': 1, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 0, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 1, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80002,C#,"    internal class RemoteNodeMailbox : PriorityMailbox
    {
        public RemoteNodeMailbox(Settings settings, Config config) : base(settings, config) { }

        internal protected override bool IsHighPriority(object message)
        {
            return message switch
            {
                Message msg => msg.Command switch
                {
                    MessageCommand.Extensible or MessageCommand.FilterAdd or MessageCommand.FilterClear or MessageCommand.FilterLoad or MessageCommand.Verack or MessageCommand.Version or MessageCommand.Alert => true,
                    _ => false,
                },
                Tcp.ConnectionClosed _ or Connection.Close _ or Connection.Ack _ => true,
                _ => false,
            };
        }

        internal protected override bool ShallDrop(object message, IEnumerable queue)
        {
            if (message is not Message msg) return false;
            return msg.Command switch
            {
                MessageCommand.GetAddr or MessageCommand.GetBlocks or MessageCommand.GetHeaders or MessageCommand.Mempool => queue.OfType<Message>().Any(p => p.Command == msg.Command),
                _ => false,
            };
        }
    }
}
",0,710 587 2000 58 2001 123 777 2000 40 2002 2003 44 2004 2005 41 58 563 40 2003 44 2005 41 123 125 710 775 763 569 2006 40 755 2007 41 123 792 2007 819 123 2008 2009 328 2009 46 2010 819 123 2011 46 2012 2013 2011 46 2014 2013 2011 46 2015 2013 2011 46 2016 2013 2011 46 2017 2013 2011 46 2018 2013 2011 46 2019 328 829 44 2020 328 655 44 125 44 2021 46 2022 2023 2024 2025 46 2026 2023 2024 2025 46 2027 2023 328 829 44 2023 328 655 44 125 59 125 710 775 763 569 2028 40 755 2007 44 2029 2030 41 123 688 40 2007 712 2031 2032 2033 41 792 655 59 792 2033 46 2034 819 123 2035 46 2036 2037 2035 46 2038 2037 2035 46 2039 2037 2035 46 2040 328 2030 46 2041 60 2032 62 40 41 46 2042 40 2043 328 2043 46 2034 323 2033 46 2034 41 44 2044 328 655 44 125 59 125 125 125 ,"{'AvgLine': 12, 'CountLine': 28, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 3, 'CountDeclMethod': 2, 'CountLineCodeExe': 14, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 1, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79947,C#,"    public class TransactionState : IInteroperable
    {
        /// <summary>
        /// The block containing this transaction.
        /// </summary>
        public uint BlockIndex;

        /// <summary>
        /// The transaction.
        /// </summary>
        public Transaction Transaction;

        /// <summary>
        /// The execution state
        /// </summary>
        public VMState State;

        private StackItem _rawTransaction;

        void IInteroperable.FromStackItem(StackItem stackItem)
        {
            Struct @struct = (Struct)stackItem;
            BlockIndex = (uint)@struct[0].GetInteger();
            _rawTransaction = @struct[1];
            Transaction = _rawTransaction.GetSpan().AsSerializable<Transaction>();
            State = (VMState)(byte)@struct[2].GetInteger();
        }

        StackItem IInteroperable.ToStackItem(ReferenceCounter referenceCounter)
        {
            _rawTransaction ??= Transaction.ToArray();
            return new Struct(referenceCounter) { BlockIndex, _rawTransaction, (byte)State };
        }
    }",0,777 587 2000 58 2001 123 331 777 842 2002 59 331 777 2003 2003 59 331 777 2004 2005 59 773 2006 2007 59 865 2001 46 2008 40 2006 2009 41 123 2010 64 816 61 40 2010 41 2009 59 2002 61 40 842 41 64 816 91 1500 93 46 2011 40 41 59 2007 61 64 816 91 1501 93 59 2003 61 2007 46 2012 40 41 46 2013 60 2003 62 40 41 59 2005 61 40 2004 41 40 574 41 64 816 91 1502 93 46 2011 40 41 59 125 2006 2001 46 2014 40 2015 2016 41 123 2007 343 61 2003 46 2017 40 41 59 792 744 2018 40 2016 41 123 2002 44 2007 44 40 574 41 2005 125 59 125 125 ,"{'AvgLine': 6, 'CountLine': 34, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 8, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 5, 'CountSemicolon': 11, 'CountDeclMethod': 2, 'CountLineCodeExe': 7, 'CountLineComment': 9, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.45', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 0, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 4, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79892,C#,"    public class NetworkAddressWithTime : ISerializable
    {
        /// <summary>
        /// The time when connected to the node.
        /// </summary>
        public uint Timestamp;

        /// <summary>
        /// The address of the node.
        /// </summary>
        public IPAddress Address;

        /// <summary>
        /// The capabilities of the node.
        /// </summary>
        public NodeCapability[] Capabilities;

        /// <summary>
        /// The <see cref=""IPEndPoint""/> of the Tcp server.
        /// </summary>
        public IPEndPoint EndPoint => new(Address, Capabilities.Where(p => p.Type == NodeCapabilityType.TcpServer).Select(p => (ServerCapability)p).FirstOrDefault()?.Port ?? 0);

        public int Size => sizeof(uint) + 16 + Capabilities.GetVarSize();

        /// <summary>
        /// Creates a new instance of the <see cref=""NetworkAddressWithTime""/> class.
        /// </summary>
        /// <param name=""address"">The address of the node.</param>
        /// <param name=""timestamp"">The time when connected to the node.</param>
        /// <param name=""capabilities"">The capabilities of the node.</param>
        /// <returns>The created payload.</returns>
        public static NetworkAddressWithTime Create(IPAddress address, uint timestamp, params NodeCapability[] capabilities)
        {
            return new NetworkAddressWithTime
            {
                Timestamp = timestamp,
                Address = address,
                Capabilities = capabilities
            };
        }

        void ISerializable.Deserialize(BinaryReader reader)
        {
            Timestamp = reader.ReadUInt32();

            // Address
            byte[] data = reader.ReadFixedBytes(16);
            Address = new IPAddress(data).Unmap();

            // Capabilities
            Capabilities = new NodeCapability[reader.ReadVarInt(VersionPayload.MaxCapabilities)];
            for (int x = 0, max = Capabilities.Length; x < max; x++)
                Capabilities[x] = NodeCapability.DeserializeFrom(reader);
            if (Capabilities.Select(p => p.Type).Distinct().Count() != Capabilities.Length)
                throw new FormatException();
        }

        void ISerializable.Serialize(BinaryWriter writer)
        {
            writer.Write(Timestamp);
            writer.Write(Address.MapToIPv6().GetAddressBytes());
            writer.Write(Capabilities);
        }
    }",0,777 587 2000 58 2001 123 331 777 842 2002 59 331 777 2003 2004 59 331 777 2005 91 93 2006 59 331 777 2007 2008 328 744 40 2004 44 2006 46 2009 40 2010 328 2010 46 2011 323 2012 46 2013 41 46 2014 40 2010 328 40 2015 41 2010 41 46 2016 40 41 346 2017 343 1500 41 59 777 704 2018 328 805 40 842 41 43 1503 43 2006 46 2019 40 41 59 331 777 809 2000 2020 40 2003 2021 44 842 2022 44 766 2005 91 93 2023 41 123 792 744 2000 123 2002 61 2022 44 2004 61 2021 44 2006 61 2023 125 59 125 865 2001 46 2024 40 2025 2026 41 123 2002 61 2026 46 2027 40 41 59 330 574 91 93 2028 61 2026 46 2029 40 1503 41 59 2004 61 744 2003 40 2028 41 46 2030 40 41 59 330 2006 61 744 2005 91 2026 46 2031 40 2032 46 2033 41 93 59 664 40 704 2034 61 1500 44 2035 61 2006 46 2036 59 2034 60 2035 59 2034 349 41 2006 91 2034 93 61 2005 46 2037 40 2026 41 59 688 40 2006 46 2014 40 2010 328 2010 46 2011 41 46 2038 40 41 46 2039 40 41 340 2006 46 2036 41 825 744 2040 40 41 59 125 865 2001 46 2041 40 2042 2043 41 123 2043 46 2044 40 2002 41 59 2043 46 2044 40 2004 46 2045 40 41 46 2046 40 41 41 59 2043 46 2044 40 2006 41 59 125 125 ,"{'AvgLine': 6, 'CountLine': 64, 'CountStmt': 23, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 11, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 9, 'CountSemicolon': 17, 'CountDeclMethod': 5, 'CountLineCodeExe': 16, 'CountLineComment': 21, 'CountClassCoupled': 14, 'CountClassDerived': 0, 'CountDeclProperty': 2, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.62', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 19, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 4, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 10, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 19, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79963,C#,"    public class FilterLoadPayload : ISerializable
    {
        /// <summary>
        /// The data of the <see cref=""BloomFilter""/>.
        /// </summary>
        public byte[] Filter;

        /// <summary>
        /// The number of hash functions used by the <see cref=""BloomFilter""/>.
        /// </summary>
        public byte K;

        /// <summary>
        /// Used to generate the seeds of the murmur hash functions.
        /// </summary>
        public uint Tweak;

        public int Size => Filter.GetVarSize() + sizeof(byte) + sizeof(uint);

        /// <summary>
        /// Creates a new instance of the <see cref=""FilterLoadPayload""/> class.
        /// </summary>
        /// <param name=""filter"">The fields in the filter will be copied to the payload.</param>
        /// <returns>The created payload.</returns>
        public static FilterLoadPayload Create(BloomFilter filter)
        {
            byte[] buffer = new byte[filter.M / 8];
            filter.GetBits(buffer);
            return new FilterLoadPayload
            {
                Filter = buffer,
                K = (byte)filter.K,
                Tweak = filter.Tweak
            };
        }

        void ISerializable.Deserialize(BinaryReader reader)
        {
            Filter = reader.ReadVarBytes(36000);
            K = reader.ReadByte();
            if (K > 50) throw new FormatException();
            Tweak = reader.ReadUInt32();
        }

        void ISerializable.Serialize(BinaryWriter writer)
        {
            writer.WriteVarBytes(Filter);
            writer.Write(K);
            writer.Write(Tweak);
        }
    }",0,777 587 2000 58 2001 123 331 777 574 91 93 2002 59 331 777 574 2003 59 331 777 842 2004 59 777 704 2005 328 2002 46 2006 40 41 43 805 40 574 41 43 805 40 842 41 59 331 777 809 2000 2007 40 2008 2009 41 123 574 91 93 2010 61 744 574 91 2009 46 2011 47 1502 93 59 2009 46 2012 40 2010 41 59 792 744 2000 123 2002 61 2010 44 2003 61 40 574 41 2009 46 2003 44 2004 61 2009 46 2004 125 59 125 865 2001 46 2013 40 2014 2015 41 123 2002 61 2015 46 2016 40 1506 41 59 2003 61 2015 46 2017 40 41 59 688 40 2003 62 1503 41 825 744 2018 40 41 59 2004 61 2015 46 2019 40 41 59 125 865 2001 46 2020 40 2021 2022 41 123 2022 46 2023 40 2002 41 59 2022 46 2024 40 2003 41 59 2022 46 2024 40 2004 41 59 125 125 ,"{'AvgLine': 6, 'CountLine': 51, 'CountStmt': 19, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 6, 'CountSemicolon': 14, 'CountDeclMethod': 4, 'CountLineCodeExe': 14, 'CountLineComment': 14, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.45', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 16, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 16, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80024,C#,"    public class UT_FilterAddPayload
    {
        [TestMethod]
        public void Size_Get()
        {
            var test = new FilterAddPayload() { Data = new byte[0] };
            test.Size.Should().Be(1);

            test = new FilterAddPayload() { Data = new byte[] { 1, 2, 3 } };
            test.Size.Should().Be(4);
        }

        [TestMethod]
        public void DeserializeAndSerialize()
        {
            var test = new FilterAddPayload() { Data = new byte[] { 1, 2, 3 } };
            var clone = test.ToArray().AsSerializable<FilterAddPayload>();

            CollectionAssert.AreEqual(test.Data, clone.Data);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 41 123 2006 61 744 574 91 1500 93 125 59 2004 46 2007 46 2008 40 41 46 2009 40 1501 41 59 2004 61 744 2005 40 41 123 2010 61 744 574 91 93 123 1501 44 1502 44 1502 125 125 59 2004 46 2007 46 2008 40 41 46 2009 40 1502 41 59 125 91 2001 93 777 865 2011 40 41 123 2012 2013 61 744 2014 40 41 123 2015 61 744 574 91 93 123 1501 44 1502 44 1502 125 125 59 2012 2016 61 2013 46 2017 40 41 46 2018 60 2014 62 40 41 59 2019 46 2020 40 2013 46 2021 44 2016 46 2021 41 59 125 125 ,"{'AvgLine': 7, 'CountLine': 21, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 7, 'CountDeclMethod': 2, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
89563,C#,"    static class AudioProcessorMemoryManager
    {
        /// <summary>
        /// Map the given <see cref=""CpuAddress""/> to the <see cref=""Dsp.AudioProcessor""/> address space.
        /// </summary>
        /// <param name=""processHandle"">The process owning the CPU memory.</param>
        /// <param name=""cpuAddress"">The <see cref=""CpuAddress""/> to map.</param>
        /// <param name=""size"">The size of the CPU memory region to map.</param>
        /// <returns>The address on the <see cref=""Dsp.AudioProcessor""/> address space.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static DspAddress Map(uint processHandle, CpuAddress cpuAddress, ulong size)
        {
            return cpuAddress;
        }

        /// <summary>
        /// Unmap the given <see cref=""CpuAddress""/> from the <see cref=""Dsp.AudioProcessor""/> address space.
        /// </summary>
        /// <param name=""processHandle"">The process owning the CPU memory.</param>
        /// <param name=""cpuAddress"">The <see cref=""CpuAddress""/> to unmap.</param>
        /// <param name=""size"">The size of the CPU memory region to unmap.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void Unmap(uint processHandle, CpuAddress cpuAddress, ulong size)
        {
        }

        /// <summary>
        /// Invalidate the <see cref=""Dsp.AudioProcessor""/> data cache at the given address.
        /// </summary>
        /// <param name=""address"">The base DSP address to invalidate</param>
        /// <param name=""size"">The size of the DSP memory region to invalidate.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void InvalidateDspCache(DspAddress address, ulong size)
        {
        }

        /// <summary>
        /// Invalidate the CPU data cache at the given address.
        /// </summary>
        /// <param name=""address"">The base <see cref=""CpuAddress""/> to invalidate</param>
        /// <param name=""size"">The size of the CPU memory region to invalidate.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void InvalidateDataCache(CpuAddress address, ulong size)
        {
        }
    }",0,809 587 2000 123 331 91 2001 40 2002 46 2003 41 93 777 809 2004 2005 40 842 2006 44 2007 2008 44 848 2009 41 123 792 2008 59 125 331 91 2001 40 2002 46 2003 41 93 777 809 865 2010 40 842 2006 44 2007 2008 44 848 2009 41 123 125 331 91 2001 40 2002 46 2003 41 93 777 809 865 2011 40 2004 2012 44 848 2009 41 123 125 331 91 2001 40 2002 46 2003 41 93 777 809 865 2013 40 2007 2012 44 848 2009 41 123 125 125 ,"{'AvgLine': 3, 'CountLine': 46, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 1, 'CountDeclMethod': 4, 'CountLineCodeExe': 1, 'CountLineComment': 23, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '1.15', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 4, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 1, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79918,C#,"    public class UT_TransactionState
    {
        TransactionState origin;

        [TestInitialize]
        public void Initialize()
        {
            origin = new TransactionState
            {
                BlockIndex = 1,
                Transaction = new Transaction()
                {
                    Attributes = Array.Empty<TransactionAttribute>(),
                    Script = new byte[] { (byte)OpCode.PUSH1 },
                    Signers = new Signer[] { new Signer() { Account = UInt160.Zero } },
                    Witnesses = new Witness[] { new Witness() {
                        InvocationScript=Array.Empty<byte>(),
                        VerificationScript=Array.Empty<byte>()
                    } }
                }
            };
        }

        [TestMethod]
        public void TestDeserialize()
        {
            using MemoryStream ms = new MemoryStream(1024);
            using BinaryReader reader = new BinaryReader(ms);

            var data = BinarySerializer.Serialize(((IInteroperable)origin).ToStackItem(null), 1024);
            ms.Write(data);
            ms.Seek(0, SeekOrigin.Begin);

            TransactionState dest = new TransactionState();
            ((IInteroperable)dest).FromStackItem(BinarySerializer.Deserialize(reader, ExecutionEngineLimits.Default, null));

            dest.BlockIndex.Should().Be(origin.BlockIndex);
            dest.Transaction.Hash.Should().Be(origin.Transaction.Hash);
        }
    }",0,777 587 2000 123 2001 2002 59 91 2003 93 777 865 2004 40 41 123 2002 61 744 2001 123 2005 61 1501 44 2006 61 744 2006 40 41 123 2007 61 2008 46 2009 60 2010 62 40 41 44 2011 61 744 574 91 93 123 40 574 41 2012 46 2013 125 44 2014 61 744 2015 91 93 123 744 2015 40 41 123 2016 61 2017 46 2018 125 125 44 2019 61 744 2020 91 93 123 744 2020 40 41 123 2021 61 2008 46 2009 60 574 62 40 41 44 2022 61 2008 46 2009 60 574 62 40 41 125 125 125 125 59 125 91 2023 93 777 865 2024 40 41 123 860 2025 2026 61 744 2025 40 1505 41 59 860 2027 2028 61 744 2027 40 2026 41 59 2029 2030 61 2031 46 2032 40 40 40 2033 41 2002 41 46 2034 40 752 41 44 1505 41 59 2026 46 2035 40 2030 41 59 2026 46 2036 40 1500 44 2037 46 2038 41 59 2001 2039 61 744 2001 40 41 59 40 40 2033 41 2039 41 46 2040 40 2031 46 2041 40 2028 44 2042 46 2043 44 752 41 41 59 2039 46 2044 46 2045 40 41 46 2046 40 2002 46 2044 41 59 2039 46 2047 46 2048 46 2045 40 41 46 2046 40 2002 46 2047 46 2048 41 59 125 125 ,"{'AvgLine': 16, 'CountLine': 40, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 35, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountSemicolon': 11, 'CountDeclMethod': 2, 'CountLineCodeExe': 19, 'CountLineComment': 0, 'CountClassCoupled': 14, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 12, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80003,C#,"    class HashIndexState : IInteroperable
    {
        public UInt256 Hash;
        public uint Index;

        void IInteroperable.FromStackItem(StackItem stackItem)
        {
            Struct @struct = (Struct)stackItem;
            Hash = new UInt256(@struct[0].GetSpan());
            Index = (uint)@struct[1].GetInteger();
        }

        StackItem IInteroperable.ToStackItem(ReferenceCounter referenceCounter)
        {
            return new Struct(referenceCounter) { Hash.ToArray(), Index };
        }
    }",0,587 2000 58 2001 123 777 2002 2003 59 777 842 2004 59 865 2001 46 2005 40 2006 2007 41 123 2008 64 816 61 40 2008 41 2007 59 2003 61 744 2002 40 64 816 91 1500 93 46 2009 40 41 41 59 2004 61 40 842 41 64 816 91 1501 93 46 2010 40 41 59 125 2006 2001 46 2011 40 2012 2013 41 123 792 744 2014 40 2013 41 123 2003 46 2015 40 41 44 2004 125 59 125 125 ,"{'AvgLine': 5, 'CountLine': 17, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 2, 'CountSemicolon': 6, 'CountDeclMethod': 2, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 6, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 0, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79907,C#,"    public class UT_RelayCache
    {
        RelayCache relayCache;

        [TestInitialize]
        public void SetUp()
        {
            relayCache = new RelayCache(10);
        }

        [TestMethod]
        public void TestGetKeyForItem()
        {
            Transaction tx = new Transaction()
            {
                Version = 0,
                Nonce = 1,
                SystemFee = 0,
                NetworkFee = 0,
                ValidUntilBlock = 100,
                Attributes = Array.Empty<TransactionAttribute>(),
                Signers = Array.Empty<Signer>(),
                Script = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04 },
                Witnesses = Array.Empty<Witness>()
            };
            relayCache.Add(tx);
            relayCache.Contains(tx).Should().BeTrue();
            relayCache.TryGet(tx.Hash, out IInventory tmp).Should().BeTrue();
            (tmp is Transaction).Should().BeTrue();
        }
    }",0,777 587 2000 123 2001 2002 59 91 2003 93 777 865 2004 40 41 123 2002 61 744 2001 40 1502 41 59 125 91 2005 93 777 865 2006 40 41 123 2007 2008 61 744 2007 40 41 123 2009 61 1500 44 2010 61 1501 44 2011 61 1500 44 2012 61 1500 44 2013 61 1503 44 2014 61 2015 46 2016 60 2017 62 40 41 44 2018 61 2015 46 2016 60 2019 62 40 41 44 2020 61 744 574 91 93 123 1500 44 1501 44 1502 44 1502 44 1502 125 44 2021 61 2015 46 2016 60 2022 62 40 41 125 59 2002 46 2023 40 2008 41 59 2002 46 2024 40 2008 41 46 2025 40 41 46 2026 40 41 59 2002 46 2027 40 2008 46 2028 44 762 2029 2030 41 46 2025 40 41 46 2026 40 41 59 40 2030 712 2007 41 46 2025 40 41 46 2026 40 41 59 125 125 ,"{'AvgLine': 11, 'CountLine': 31, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 29, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 7, 'CountDeclMethod': 2, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 7, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79836,C#,"    internal class PriorityMessageQueue : IMessageQueue, IUnboundedMessageQueueSemantics
    {
        private readonly ConcurrentQueue<Envelope> high = new();
        private readonly ConcurrentQueue<Envelope> low = new();
        private readonly Func<object, IEnumerable, bool> dropper;
        private readonly Func<object, bool> priority_generator;
        private int idle = 1;

        public bool HasMessages => !high.IsEmpty || !low.IsEmpty;
        public int Count => high.Count + low.Count;

        public PriorityMessageQueue(Func<object, IEnumerable, bool> dropper, Func<object, bool> priority_generator)
        {
            this.dropper = dropper;
            this.priority_generator = priority_generator;
        }

        public void CleanUp(IActorRef owner, IMessageQueue deadletters)
        {
        }

        public void Enqueue(IActorRef receiver, Envelope envelope)
        {
            Interlocked.Increment(ref idle);
            if (envelope.Message is Idle) return;
            if (dropper(envelope.Message, high.Concat(low).Select(p => p.Message)))
                return;
            ConcurrentQueue<Envelope> queue = priority_generator(envelope.Message) ? high : low;
            queue.Enqueue(envelope);
        }

        public bool TryDequeue(out Envelope envelope)
        {
            if (high.TryDequeue(out envelope)) return true;
            if (low.TryDequeue(out envelope)) return true;
            if (Interlocked.Exchange(ref idle, 0) > 0)
            {
                envelope = new Envelope(Idle.Instance, ActorRefs.NoSender);
                return true;
            }
            return false;
        }
    }",0,710 587 2000 58 2001 44 2002 123 773 780 2003 60 2004 62 2005 61 744 40 41 59 773 780 2003 60 2004 62 2006 61 744 40 41 59 773 780 2007 60 755 44 2008 44 569 62 2009 59 773 780 2007 60 755 44 569 62 2010 59 773 704 2011 61 1501 59 777 569 2012 328 33 2005 46 2013 309 33 2006 46 2013 59 777 704 2014 328 2005 46 2014 43 2006 46 2014 59 777 2000 40 2007 60 755 44 2008 44 569 62 2009 44 2007 60 755 44 569 62 2010 41 123 823 46 2009 61 2009 59 823 46 2010 61 2010 59 125 777 865 2015 40 2016 2017 44 2001 2018 41 123 125 777 865 2019 40 2016 2020 44 2004 2021 41 123 2022 46 2023 40 783 2011 41 59 688 40 2021 46 2024 712 2025 41 792 59 688 40 2009 40 2021 46 2024 44 2005 46 2026 40 2006 41 46 2027 40 2028 328 2028 46 2024 41 41 41 792 59 2003 60 2004 62 2029 61 2010 40 2021 46 2024 41 63 2005 58 2006 59 2029 46 2019 40 2021 41 59 125 777 569 2030 40 762 2004 2021 41 123 688 40 2005 46 2030 40 762 2021 41 41 792 829 59 688 40 2006 46 2030 40 762 2021 41 41 792 829 59 688 40 2031 46 2032 40 783 2011 44 1500 41 62 1500 41 123 2021 61 744 2004 40 2033 46 2034 44 2035 46 2036 41 59 792 829 59 125 792 655 59 125 125 ,"{'AvgLine': 4, 'CountLine': 43, 'CountStmt': 29, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 17, 'MaxEssential': 4, 'SumEssential': 10, 'AvgCyclomatic': 2, 'CountLineCode': 38, 'CountStmtDecl': 13, 'MaxCyclomatic': 4, 'SumCyclomatic': 11, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 5, 'CountSemicolon': 19, 'CountDeclMethod': 6, 'CountLineCodeExe': 17, 'CountLineComment': 0, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountDeclProperty': 2, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 6, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 53, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 5, 'PercentLackOfCohesionModified': 53, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79760,C#,"    public class MerkleTree
    {
        private readonly MerkleTreeNode root;

        /// <summary>
        /// The depth of the tree.
        /// </summary>
        public int Depth { get; }

        internal MerkleTree(UInt256[] hashes)
        {
            this.root = Build(hashes.Select(p => new MerkleTreeNode { Hash = p }).ToArray());
            if (root is null) return;
            int depth = 1;
            for (MerkleTreeNode i = root; i.LeftChild != null; i = i.LeftChild)
                depth++;
            this.Depth = depth;
        }

        private static MerkleTreeNode Build(MerkleTreeNode[] leaves)
        {
            if (leaves.Length == 0) return null;
            if (leaves.Length == 1) return leaves[0];

            Span<byte> buffer = stackalloc byte[64];
            MerkleTreeNode[] parents = new MerkleTreeNode[(leaves.Length + 1) / 2];
            for (int i = 0; i < parents.Length; i++)
            {
                parents[i] = new MerkleTreeNode
                {
                    LeftChild = leaves[i * 2]
                };
                leaves[i * 2].Parent = parents[i];
                if (i * 2 + 1 == leaves.Length)
                {
                    parents[i].RightChild = parents[i].LeftChild;
                }
                else
                {
                    parents[i].RightChild = leaves[i * 2 + 1];
                    leaves[i * 2 + 1].Parent = parents[i];
                }
                parents[i].Hash = Concat(buffer, parents[i].LeftChild.Hash, parents[i].RightChild.Hash);
            }
            return Build(parents); //TailCall
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static UInt256 Concat(Span<byte> buffer, UInt256 hash1, UInt256 hash2)
        {
            hash1.ToArray().CopyTo(buffer);
            hash2.ToArray().CopyTo(buffer[32..]);

            return new UInt256(Crypto.Hash256(buffer));
        }

        /// <summary>
        /// Computes the root of the hash tree.
        /// </summary>
        /// <param name=""hashes"">The leaves of the hash tree.</param>
        /// <returns>The root of the hash tree.</returns>
        public static UInt256 ComputeRoot(UInt256[] hashes)
        {
            if (hashes.Length == 0) return UInt256.Zero;
            if (hashes.Length == 1) return hashes[0];
            MerkleTree tree = new(hashes);
            return tree.root.Hash;
        }

        private static void DepthFirstSearch(MerkleTreeNode node, IList<UInt256> hashes)
        {
            if (node.LeftChild == null)
            {
                // if left is null, then right must be null
                hashes.Add(node.Hash);
            }
            else
            {
                DepthFirstSearch(node.LeftChild, hashes);
                DepthFirstSearch(node.RightChild, hashes);
            }
        }

        /// <summary>
        /// Gets all nodes of the hash tree in depth-first order.
        /// </summary>
        /// <returns>All nodes of the hash tree.</returns>
        public UInt256[] ToHashArray()
        {
            if (root is null) return Array.Empty<UInt256>();
            List<UInt256> hashes = new();
            DepthFirstSearch(root, hashes);
            return hashes.ToArray();
        }

        /// <summary>
        /// Trims the hash tree using the specified bit array.
        /// </summary>
        /// <param name=""flags"">The bit array to be used.</param>
        public void Trim(BitArray flags)
        {
            if (root is null) return;
            flags = new BitArray(flags)
            {
                Length = 1 << (Depth - 1)
            };
            Trim(root, 0, Depth, flags);
        }

        private static void Trim(MerkleTreeNode node, int index, int depth, BitArray flags)
        {
            if (depth == 1) return;
            if (node.LeftChild == null) return; // if left is null, then right must be null
            if (depth == 2)
            {
                if (!flags.Get(index * 2) && !flags.Get(index * 2 + 1))
                {
                    node.LeftChild = null;
                    node.RightChild = null;
                }
            }
            else
            {
                Trim(node.LeftChild, index * 2, depth - 1, flags);
                Trim(node.RightChild, index * 2 + 1, depth - 1, flags);
                if (node.LeftChild.LeftChild == null && node.RightChild.RightChild == null)
                {
                    node.LeftChild = null;
                    node.RightChild = null;
                }
            }
        }
    }",0,777 587 2000 123 773 780 2001 2002 59 331 777 704 2003 123 2004 59 125 710 2000 40 2005 91 93 2006 41 123 823 46 2002 61 2007 40 2006 46 2008 40 2009 328 744 2001 123 2010 61 2009 125 41 46 2011 40 41 41 59 688 40 2002 712 752 41 792 59 704 2012 61 1501 59 664 40 2001 2013 61 2002 59 2013 46 2014 340 752 59 2013 61 2013 46 2014 41 2012 349 59 823 46 2003 61 2012 59 125 773 809 2001 2015 40 2001 91 93 2016 41 123 688 40 2016 46 2017 323 1500 41 792 752 59 688 40 2016 46 2017 323 1501 41 792 2016 91 1500 93 59 2018 60 574 62 2019 61 808 574 91 1503 93 59 2001 91 93 2020 61 744 2001 91 40 2016 46 2017 43 1501 41 47 1502 93 59 664 40 704 2021 61 1500 59 2021 60 2020 46 2017 59 2021 349 41 123 2020 91 2021 93 61 744 2001 123 2022 61 2016 91 2021 42 1502 93 125 59 2016 91 2021 42 1502 93 46 2023 61 2020 91 2021 93 59 688 40 2021 42 1502 43 1501 323 2016 46 2017 41 123 2020 91 2021 93 46 2024 61 2020 91 2021 93 46 2025 59 125 630 123 2020 91 2021 93 46 2026 61 2016 91 2021 42 1502 43 1501 93 59 2016 91 2021 42 1502 43 1501 93 46 2023 61 2020 91 2021 93 59 125 2020 91 2021 93 46 2027 61 2028 40 2019 44 2020 91 2021 93 46 2029 46 2027 44 2020 91 2021 93 46 2030 46 2027 41 59 125 792 2015 40 2020 41 59 330 125 91 2031 40 2032 46 2033 41 93 773 809 2005 2034 40 2035 60 574 62 2036 44 2005 2037 44 2005 2038 41 123 2037 46 2039 40 41 46 2040 40 2036 41 59 2038 46 2039 40 41 46 2040 40 2036 91 1503 93 41 59 792 744 2005 40 2041 46 2042 40 2036 41 41 59 125 331 777 809 2005 2043 40 2005 91 93 2006 41 123 688 40 2006 46 2044 323 1500 41 792 2005 46 2045 59 688 40 2006 46 2044 323 1501 41 792 2006 91 1500 93 59 2000 2046 61 744 40 2006 41 59 792 2046 46 2002 46 2047 59 125 773 809 865 2048 40 2001 2049 44 2050 60 2005 62 2006 41 123 688 40 2049 46 2051 323 752 41 123 330 2006 46 2052 40 2049 46 2053 41 59 125 630 123 2048 40 2049 46 2051 44 2006 41 59 2048 40 2049 46 2054 44 2006 41 59 125 125 331 777 2005 91 93 2055 40 41 123 688 40 2002 712 752 41 792 2056 46 2057 60 2005 62 40 41 59 2058 60 2005 62 2006 61 744 40 41 59 2048 40 2002 44 2006 41 59 792 2006 46 2059 40 41 59 125 331 777 865 2060 40 2061 2062 41 123 688 40 2002 712 752 41 792 59 2062 61 744 2061 40 2062 41 123 2063 61 1501 332 40 2003 45 1501 41 125 59 2060 40 2002 44 1500 44 2003 44 2062 41 59 125 773 809 865 2060 40 2001 2049 44 704 2064 44 704 2065 44 2061 2062 41 123 688 40 2065 323 1501 41 792 59 688 40 2049 46 2066 323 752 41 792 59 330 688 40 2065 323 1502 41 123 688 40 33 2062 46 2067 40 2064 42 1502 41 307 33 2062 46 2067 40 2064 42 1502 43 1501 41 41 123 2049 46 2066 61 752 59 2049 46 2068 61 752 59 125 125 630 123 2060 40 2049 46 2066 44 2064 42 1502 44 2065 45 1501 44 2062 41 59 2060 40 2049 46 2069 44 2064 42 1502 43 1501 44 2065 45 1501 44 2062 41 59 688 40 2049 46 2066 46 2066 323 752 307 2049 46 2069 46 2069 323 752 41 123 2049 46 2066 61 752 59 2049 46 2069 61 752 59 125 125 125 125 ,"{'AvgLine': 11, 'CountLine': 133, 'CountStmt': 73, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 54, 'MaxEssential': 3, 'SumEssential': 15, 'AvgCyclomatic': 2, 'CountLineCode': 105, 'CountStmtDecl': 19, 'MaxCyclomatic': 6, 'SumCyclomatic': 25, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountSemicolon': 47, 'CountDeclMethod': 9, 'CountLineCodeExe': 55, 'CountLineComment': 19, 'CountClassCoupled': 13, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.18', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 27, 'CountDeclClassMethod': 5, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 4, 'CountDeclPropertyAuto': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 62, 'SumCyclomaticModified': 25, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 4, 'CountDeclMethodInternal': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 62, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80051,C#,"    public class UT_WitnessCondition
    {
        [TestMethod]
        public void TestFromJson1()
        {
            var point = ECPoint.Parse(""03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c"", ECCurve.Secp256r1);
            var hash = UInt160.Zero;
            var condition = new OrCondition
            {
                Expressions = new WitnessCondition[]
                {
                    new CalledByContractCondition { Hash = hash },
                    new CalledByGroupCondition { Group = point }
                }
            };
            var json = condition.ToJson();
            var new_condi = WitnessCondition.FromJson(json);
            Assert.IsTrue(new_condi is OrCondition);
            var or_condi = (OrCondition)new_condi;
            Assert.AreEqual(2, or_condi.Expressions.Length);
            Assert.IsTrue(or_condi.Expressions[0] is CalledByContractCondition);
            var cbcc = (CalledByContractCondition)(or_condi.Expressions[0]);
            Assert.IsTrue(or_condi.Expressions[1] is CalledByGroupCondition);
            var cbgc = (CalledByGroupCondition)(or_condi.Expressions[1]);
            Assert.IsTrue(cbcc.Hash.Equals(hash));
            Assert.IsTrue(cbgc.Group.Equals(point));
        }

        [TestMethod]
        public void TestFromJson2()
        {
            var point = ECPoint.Parse(""03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c"", ECCurve.Secp256r1);
            var hash1 = UInt160.Zero;
            var hash2 = UInt160.Parse(""0xd2a4cff31913016155e38e474a2c06d08be276cf"");
            var jstr = ""{\""type\"":\""Or\"",\""expressions\"":[{\""type\"":\""And\"",\""expressions\"":[{\""type\"":\""CalledByContract\"",\""hash\"":\""0x0000000000000000000000000000000000000000\""},{\""type\"":\""ScriptHash\"",\""hash\"":\""0xd2a4cff31913016155e38e474a2c06d08be276cf\""}]},{\""type\"":\""Or\"",\""expressions\"":[{\""type\"":\""CalledByGroup\"",\""group\"":\""03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c\""},{\""type\"":\""Boolean\"",\""expression\"":true}]}]}"";
            var json = JObject.Parse(jstr);
            var condi = WitnessCondition.FromJson(json);
            var or_condi = (OrCondition)condi;
            Assert.AreEqual(2, or_condi.Expressions.Length);
            var and_condi = (AndCondition)or_condi.Expressions[0];
            var or_condi1 = (OrCondition)or_condi.Expressions[1];
            Assert.AreEqual(2, and_condi.Expressions.Length);
            Assert.AreEqual(2, or_condi1.Expressions.Length);
            var cbcc = (CalledByContractCondition)and_condi.Expressions[0];
            var cbsc = (ScriptHashCondition)and_condi.Expressions[1];
            Assert.IsTrue(cbcc.Hash.Equals(hash1));
            Assert.IsTrue(cbsc.Hash.Equals(hash2));
            var cbgc = (CalledByGroupCondition)or_condi1.Expressions[0];
            var bc = (BooleanCondition)or_condi1.Expressions[1];
            Assert.IsTrue(cbgc.Group.Equals(point));
            Assert.IsTrue(bc.Expression);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 2005 46 2006 40 362 44 2007 46 2008 41 59 2003 2009 61 2010 46 2011 59 2003 2012 61 744 2013 123 2014 61 744 2015 91 93 123 744 2016 123 2017 61 2009 125 44 744 2018 123 2019 61 2004 125 125 125 59 2003 2020 61 2012 46 2021 40 41 59 2003 2022 61 2023 46 2024 40 2020 41 59 2025 46 2026 40 2022 712 2013 41 59 2003 2027 61 40 2013 41 2022 59 2025 46 2028 40 1502 44 2027 46 2029 46 2030 41 59 2025 46 2026 40 2027 46 2029 91 1500 93 712 2031 41 59 2003 2032 61 40 2031 41 40 2027 46 2029 91 1500 93 41 59 2025 46 2026 40 2027 46 2029 91 1501 93 712 2033 41 59 2003 2034 61 40 2033 41 40 2027 46 2029 91 1501 93 41 59 2025 46 2026 40 2032 46 2035 46 2036 40 2009 41 41 59 2025 46 2026 40 2034 46 2037 46 2036 40 2004 41 41 59 125 91 2001 93 777 865 2038 40 41 123 2039 2040 61 2041 46 2042 40 362 44 2043 46 2044 41 59 2039 2045 61 2046 46 2047 59 2039 2048 61 2046 46 2042 40 362 41 59 2039 2049 61 362 59 2039 2050 61 2051 46 2042 40 2049 41 59 2039 2052 61 2053 46 2054 40 2050 41 59 2039 2055 61 40 2056 41 2052 59 2057 46 2058 40 1502 44 2055 46 2059 46 2060 41 59 2039 2061 61 40 2062 41 2055 46 2059 91 1500 93 59 2039 2063 61 40 2056 41 2055 46 2059 91 1501 93 59 2057 46 2058 40 1502 44 2061 46 2059 46 2060 41 59 2057 46 2058 40 1502 44 2063 46 2059 46 2060 41 59 2039 2064 61 40 2065 41 2061 46 2059 91 1500 93 59 2039 2066 61 40 2067 41 2061 46 2059 91 1501 93 59 2057 46 2068 40 2064 46 2069 46 2070 40 2045 41 41 59 2057 46 2068 40 2066 46 2069 46 2070 40 2048 41 41 59 2039 2071 61 40 2072 41 2063 46 2059 91 1500 93 59 2039 2073 61 40 2074 41 2063 46 2059 91 1501 93 59 2057 46 2068 40 2071 46 2075 46 2070 40 2040 41 41 59 2057 46 2068 40 2073 46 2076 41 59 125 125 ,"{'AvgLine': 23, 'CountLine': 53, 'CountStmt': 37, 'MaxNesting': 0, 'AvgLineCode': 23, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 21, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 52, 'CountStmtDecl': 24, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 34, 'CountDeclMethod': 2, 'CountLineCodeExe': 37, 'CountLineComment': 0, 'CountClassCoupled': 15, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 27, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 13, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79745,C#,"    public class UT_StorageItem
    {
        StorageItem uut;

        [TestInitialize]
        public void TestSetup()
        {
            uut = new StorageItem();
        }

        [TestMethod]
        public void Value_Get()
        {
            uut.Value.Should().BeNull();
        }

        [TestMethod]
        public void Value_Set()
        {
            byte[] val = new byte[] { 0x42, 0x32 };
            uut.Value = val;
            uut.Value.Length.Should().Be(2);
            uut.Value[0].Should().Be(val[0]);
            uut.Value[1].Should().Be(val[1]);
        }

        [TestMethod]
        public void Size_Get()
        {
            uut.Value = TestUtils.GetByteArray(10, 0x42);
            uut.Size.Should().Be(11); // 1 + 10
        }

        [TestMethod]
        public void Size_Get_Larger()
        {
            uut.Value = TestUtils.GetByteArray(88, 0x42);
            uut.Size.Should().Be(89); // 1 + 88
        }

        [TestMethod]
        public void Clone()
        {
            uut.Value = TestUtils.GetByteArray(10, 0x42);

            StorageItem newSi = uut.Clone();
            newSi.Value.Length.Should().Be(10);
            newSi.Value[0].Should().Be(0x42);
            for (int i = 1; i < 10; i++)
            {
                newSi.Value[i].Should().Be(0x20);
            }
        }

        [TestMethod]
        public void Deserialize()
        {
            byte[] data = new byte[] { 66, 32, 32, 32, 32, 32, 32, 32, 32, 32 };
            int index = 0;
            using (MemoryStream ms = new MemoryStream(data, index, data.Length - index, false))
            {
                using (BinaryReader reader = new BinaryReader(ms))
                {
                    uut.Deserialize(reader);
                }
            }
            uut.Value.Length.Should().Be(10);
            uut.Value[0].Should().Be(0x42);
            for (int i = 1; i < 10; i++)
            {
                uut.Value[i].Should().Be(0x20);
            }
        }

        [TestMethod]
        public void Serialize()
        {
            uut.Value = TestUtils.GetByteArray(10, 0x42);

            byte[] data;
            using (MemoryStream stream = new MemoryStream())
            {
                using (BinaryWriter writer = new BinaryWriter(stream, Encoding.ASCII, true))
                {
                    uut.Serialize(writer);
                    data = stream.ToArray();
                }
            }

            byte[] requiredData = new byte[] { 66, 32, 32, 32, 32, 32, 32, 32, 32, 32 };

            data.Length.Should().Be(requiredData.Length);
            for (int i = 0; i < requiredData.Length; i++)
            {
                data[i].Should().Be(requiredData[i]);
            }
        }

        [TestMethod]
        public void TestFromReplica()
        {
            uut.Value = TestUtils.GetByteArray(10, 0x42);
            StorageItem dest = new StorageItem();
            dest.FromReplica(uut);
            dest.Value.Should().BeEquivalentTo(uut.Value);
        }
    }",0,777 587 2000 123 2001 2002 59 91 2003 93 777 865 2004 40 41 123 2002 61 744 2001 40 41 59 125 91 2005 93 777 865 2006 40 41 123 2002 46 2007 46 2008 40 41 46 2009 40 41 59 125 91 2005 93 777 865 2010 40 41 123 574 91 93 2011 61 744 574 91 93 123 1503 44 1503 125 59 2002 46 2012 61 2011 59 2002 46 2012 46 2013 46 2014 40 41 46 2015 40 1502 41 59 2002 46 2012 91 1500 93 46 2014 40 41 46 2015 40 2011 91 1500 93 41 59 2002 46 2012 91 1501 93 46 2014 40 41 46 2015 40 2011 91 1501 93 41 59 125 91 2005 93 777 865 2016 40 41 123 2002 46 2017 61 2018 46 2019 40 1502 44 1503 41 59 2002 46 2020 46 2021 40 41 46 2022 40 1503 41 59 330 125 91 2005 93 777 865 2023 40 41 123 2002 46 2024 61 2025 46 2026 40 1503 44 1503 41 59 2002 46 2027 46 2028 40 41 46 2029 40 1503 41 59 330 125 91 2005 93 777 865 2030 40 41 123 2002 46 2031 61 2032 46 2033 40 1502 44 1503 41 59 2001 2034 61 2002 46 2030 40 41 59 2034 46 2031 46 2035 46 2036 40 41 46 2037 40 1502 41 59 2034 46 2031 91 1500 93 46 2036 40 41 46 2037 40 1503 41 59 664 40 704 2038 61 1501 59 2038 60 1502 59 2038 349 41 123 2034 46 2031 91 2038 93 46 2036 40 41 46 2037 40 1503 41 59 125 125 91 2005 93 777 865 2039 40 41 123 574 91 93 2040 61 744 574 91 93 123 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 125 59 704 2041 61 1500 59 860 40 2042 2043 61 744 2042 40 2040 44 2041 44 2040 46 2044 45 2041 44 655 41 41 123 860 40 2045 2046 61 744 2045 40 2043 41 41 123 2002 46 2039 40 2046 41 59 125 125 2002 46 2047 46 2044 46 2048 40 41 46 2049 40 1502 41 59 2002 46 2047 91 1500 93 46 2048 40 41 46 2049 40 1503 41 59 664 40 704 2050 61 1501 59 2050 60 1502 59 2050 349 41 123 2002 46 2047 91 2050 93 46 2048 40 41 46 2049 40 1503 41 59 125 125 91 2005 93 777 865 2051 40 41 123 2002 46 2052 61 2053 46 2054 40 1502 44 1503 41 59 574 91 93 2055 59 860 40 2056 2057 61 744 2056 40 41 41 123 860 40 2058 2059 61 744 2058 40 2057 44 2060 46 2061 44 829 41 41 123 2002 46 2051 40 2059 41 59 2055 61 2057 46 2062 40 41 59 125 125 574 91 93 2063 61 744 574 91 93 123 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 125 59 2055 46 2064 46 2065 40 41 46 2066 40 2063 46 2064 41 59 664 40 704 2067 61 1500 59 2067 60 2063 46 2064 59 2067 349 41 123 2055 91 2067 93 46 2065 40 41 46 2066 40 2063 91 2067 93 41 59 125 125 91 2005 93 777 865 2068 40 41 123 2002 46 2069 61 2070 46 2071 40 1502 44 1503 41 59 2001 2072 61 744 2001 40 41 59 2072 46 2073 40 2002 41 59 2072 46 2069 46 2074 40 41 46 2075 40 2002 46 2069 41 59 125 125 ,"{'AvgLine': 9, 'CountLine': 107, 'CountStmt': 57, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 38, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 94, 'CountStmtDecl': 21, 'MaxCyclomatic': 2, 'SumCyclomatic': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountSemicolon': 40, 'CountDeclMethod': 9, 'CountLineCodeExe': 39, 'CountLineComment': 2, 'CountClassCoupled': 11, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 29, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 9, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
90385,C#,"	public class BZip2InputStream
	{
		private byte[] compressedData;

		public BZip2InputStream()
		{
			var outputMemoryStream = new MemoryStream();
			using (var outputStream = new SharpZipLib.BZip2.BZip2OutputStream(outputMemoryStream))
			{
				var random = new Random(1234);
				var inputData = new byte[1024 * 1024 * 30];
				random.NextBytes(inputData);
				var inputMemoryStream = new MemoryStream(inputData);
				inputMemoryStream.CopyTo(outputStream);
			}

			compressedData = outputMemoryStream.ToArray();
		}

		[Benchmark]
		public void DecompressData()
		{
			var memoryStream = new MemoryStream(compressedData);
			using (var inputStream = new SharpZipLib.BZip2.BZip2InputStream(memoryStream))
			{
				inputStream.CopyTo(Stream.Null);
			}
		}
	}",0,777 587 2000 123 773 574 91 93 2001 59 777 2000 40 41 123 2002 2003 61 744 2004 40 41 59 860 40 2002 2005 61 744 2006 46 2007 46 2008 40 2003 41 41 123 2002 2009 61 744 2010 40 1505 41 59 2002 2011 61 744 574 91 1505 42 1505 42 1503 93 59 2009 46 2012 40 2011 41 59 2002 2013 61 744 2004 40 2011 41 59 2013 46 2014 40 2005 41 59 125 2001 61 2003 46 2015 40 41 59 125 91 2016 93 777 865 2017 40 41 123 2018 2019 61 744 2020 40 2001 41 59 860 40 2018 2021 61 744 2022 46 2023 46 2000 40 2019 41 41 123 2021 46 2024 40 2025 46 2026 41 59 125 125 125 ,"{'AvgLine': 11, 'CountLine': 29, 'CountStmt': 15, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 10, 'CountDeclMethod': 2, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
