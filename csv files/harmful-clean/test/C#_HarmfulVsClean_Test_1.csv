id,language,text,smell,tokens,metrics
79886,C#,"    public static class Nep17NativeContractExtensions
    {
        internal class ManualWitness : IVerifiable
        {
            private readonly UInt160[] _hashForVerify;

            public int Size => 0;

            public Witness[] Witnesses { get; set; }

            public ManualWitness(params UInt160[] hashForVerify)
            {
                _hashForVerify = hashForVerify ?? System.Array.Empty<UInt160>();
            }

            public void Deserialize(BinaryReader reader) { }

            public void DeserializeUnsigned(BinaryReader reader) { }

            public UInt160[] GetScriptHashesForVerifying(DataCache snapshot) => _hashForVerify;

            public void Serialize(BinaryWriter writer) { }

            public void SerializeUnsigned(BinaryWriter writer) { }
        }

        public static bool Transfer(this NativeContract contract, DataCache snapshot, byte[] from, byte[] to, BigInteger amount, bool signFrom, Block persistingBlock)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application,
                new ManualWitness(signFrom ? new UInt160(from) : null), snapshot, persistingBlock, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(contract.Hash, ""transfer"", from, to, amount, null);
            engine.LoadScript(script.ToArray());

            if (engine.Execute() == VMState.FAULT)
            {
                throw engine.FaultException;
            }

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Boolean));

            return result.GetBoolean();
        }

        public static BigInteger TotalSupply(this NativeContract contract, DataCache snapshot)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application, null, snapshot, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(contract.Hash, ""totalSupply"");
            engine.LoadScript(script.ToArray());

            engine.Execute().Should().Be(VMState.HALT);

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Integer));

            return result.GetInteger();
        }

        public static BigInteger BalanceOf(this NativeContract contract, DataCache snapshot, byte[] account)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application, null, snapshot, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(contract.Hash, ""balanceOf"", account);
            engine.LoadScript(script.ToArray());

            engine.Execute().Should().Be(VMState.HALT);

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Integer));

            return result.GetInteger();
        }

        public static BigInteger Decimals(this NativeContract contract, DataCache snapshot)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application, null, snapshot, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(contract.Hash, ""decimals"");
            engine.LoadScript(script.ToArray());

            engine.Execute().Should().Be(VMState.HALT);

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Integer));

            return result.GetInteger();
        }

        public static string Symbol(this NativeContract contract, DataCache snapshot)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application, null, snapshot, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(contract.Hash, ""symbol"");
            engine.LoadScript(script.ToArray());

            engine.Execute().Should().Be(VMState.HALT);

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.ByteString));

            return result.GetString();
        }
    }",0,777 809 587 2000 123 710 587 2001 58 2002 123 773 780 2003 91 93 2004 59 777 704 2005 328 1500 59 777 2006 91 93 2007 123 2008 59 2009 59 125 777 2001 40 766 2003 91 93 2010 41 123 2004 61 2010 343 2011 46 2012 46 2013 60 2003 62 40 41 59 125 777 865 2014 40 2015 2016 41 123 125 777 865 2017 40 2015 2016 41 123 125 777 2003 91 93 2018 40 2019 2020 41 328 2004 59 777 865 2021 40 2022 2023 41 123 125 777 865 2024 40 2022 2023 41 123 125 125 777 809 569 2025 40 823 2026 2027 44 2028 2029 44 574 91 93 2030 44 574 91 93 2031 44 2032 2033 44 569 2034 44 2035 2036 41 123 860 2037 2038 61 2039 46 2040 40 2041 46 2042 44 744 2001 40 2034 63 744 2043 40 2030 41 58 752 41 44 2029 44 2036 44 2044 58 2045 46 2046 46 2047 41 59 860 2037 2048 61 744 2049 40 41 59 2048 46 2050 40 2027 46 2051 44 362 44 2030 44 2031 44 2033 44 752 41 59 2038 46 2052 40 2048 46 2053 40 41 41 59 688 40 2038 46 2054 40 41 323 2055 46 2056 41 123 825 2038 46 2057 59 125 2037 2058 61 2038 46 2059 46 2060 40 41 59 2058 46 2061 40 41 46 2062 40 836 40 2063 46 2064 46 2065 41 41 59 792 2058 46 2066 40 41 59 125 777 809 2032 2067 40 823 2026 2027 44 2028 2029 41 123 860 2068 2069 61 2070 46 2071 40 2072 46 2073 44 752 44 2029 44 2074 58 2075 46 2076 46 2077 41 59 860 2068 2078 61 744 2079 40 41 59 2078 46 2080 40 2027 46 2081 44 362 41 59 2069 46 2082 40 2078 46 2083 40 41 41 59 2069 46 2084 40 41 46 2085 40 41 46 2086 40 2087 46 2088 41 59 2068 2089 61 2069 46 2090 46 2091 40 41 59 2089 46 2085 40 41 46 2092 40 836 40 2093 46 2094 46 2095 41 41 59 792 2089 46 2096 40 41 59 125 777 809 2032 2097 40 823 2026 2027 44 2028 2029 44 574 91 93 2098 41 123 860 2099 2100 61 2101 46 2102 40 2103 46 2104 44 752 44 2029 44 2105 58 2106 46 2107 46 2108 41 59 860 2099 2109 61 744 2110 40 41 59 2109 46 2111 40 2027 46 2112 44 362 44 2098 41 59 2100 46 2113 40 2109 46 2114 40 41 41 59 2100 46 2115 40 41 46 2116 40 41 46 2117 40 2118 46 2119 41 59 2099 2120 61 2100 46 2121 46 2122 40 41 59 2120 46 2116 40 41 46 2123 40 836 40 2124 46 2125 46 2126 41 41 59 792 2120 46 2127 40 41 59 125 777 809 2032 2128 40 823 2026 2027 44 2028 2029 41 123 860 2129 2130 61 2131 46 2132 40 2133 46 2134 44 752 44 2029 44 2135 58 2136 46 2137 46 2138 41 59 860 2129 2139 61 744 2140 40 41 59 2139 46 2141 40 2027 46 2142 44 362 41 59 2130 46 2143 40 2139 46 2144 40 41 41 59 2130 46 2145 40 41 46 2146 40 41 46 2147 40 2148 46 2149 41 59 2129 2150 61 2130 46 2151 46 2152 40 41 59 2150 46 2146 40 41 46 2153 40 836 40 2154 46 2155 46 2156 41 41 59 792 2150 46 2157 40 41 59 125 777 809 815 2158 40 823 2026 2027 44 2028 2029 41 123 860 2159 2160 61 2161 46 2162 40 2163 46 2164 44 752 44 2029 44 2165 58 2166 46 2167 46 2168 41 59 860 2159 2169 61 744 2170 40 41 59 2169 46 2171 40 2027 46 2172 44 362 41 59 2160 46 2173 40 2169 46 2174 40 41 41 59 2160 46 2175 40 41 46 2176 40 41 46 2177 40 2178 46 2179 41 59 2159 2180 61 2160 46 2181 46 2182 40 41 59 2180 46 2176 40 41 46 2183 40 836 40 2184 46 2185 46 2186 41 41 59 792 2180 46 2187 40 41 59 125 125 ,"{'AvgLine': 15, 'CountLine': 110, 'CountStmt': 51, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 33, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 77, 'CountStmtDecl': 23, 'MaxCyclomatic': 3, 'SumCyclomatic': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 33, 'CountSemicolon': 46, 'CountDeclMethod': 5, 'CountLineCodeExe': 51, 'CountLineComment': 0, 'CountClassCoupled': 16, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 13, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79852,C#,"        internal class CandidateState : IInteroperable
        {
            public bool Registered = true;
            public BigInteger Votes;

            public void FromStackItem(StackItem stackItem)
            {
                Struct @struct = (Struct)stackItem;
                Registered = @struct[0].GetBoolean();
                Votes = @struct[1].GetInteger();
            }

            public StackItem ToStackItem(ReferenceCounter referenceCounter)
            {
                return new Struct(referenceCounter) { Registered, Votes };
            }
        }",0,710 587 2000 58 2001 123 777 569 2002 61 829 59 777 2003 2004 59 777 865 2005 40 2006 2007 41 123 2008 64 816 61 40 2008 41 2007 59 2002 61 64 816 91 1500 93 46 2009 40 41 59 2004 61 64 816 91 1501 93 46 2010 40 41 59 125 777 2006 2011 40 2012 2013 41 123 792 744 2014 40 2013 41 123 2002 44 2004 125 59 125 125 ,"{'AvgLine': 5, 'CountLine': 17, 'CountStmt': 9, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 2, 'CountSemicolon': 6, 'CountDeclMethod': 2, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 1, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79809,C#,"    public class Tree<T>
    {
        public TreeNode<T> Root { get; private set; }

        public TreeNode<T> AddRoot(T item)
        {
            if (Root is not null)
                throw new InvalidOperationException();
            Root = new TreeNode<T>(item, null);
            return Root;
        }

        public IEnumerable<T> GetItems()
        {
            if (Root is null) yield break;
            foreach (T item in Root.GetItems())
                yield return item;
        }
    }",0,777 587 2000 60 2001 62 123 777 2002 60 2001 62 2003 123 2004 59 773 2005 59 125 777 2002 60 2001 62 2006 40 2001 2007 41 123 688 40 2003 712 2008 752 41 825 744 2009 40 41 59 2003 61 744 2002 60 2001 62 40 2007 44 752 41 59 792 2003 59 125 777 2010 60 2001 62 2011 40 41 123 688 40 2003 712 752 41 2012 572 59 665 40 2001 2007 696 2003 46 2011 40 41 41 2012 792 2007 59 125 125 ,"{'AvgLine': 3, 'CountLine': 19, 'CountStmt': 14, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 6, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 7, 'CountDeclMethod': 4, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 4, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 1, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79953,C#,"    public class UT_Witness
    {
        Witness uut;

        [TestInitialize]
        public void TestSetup()
        {
            uut = new Witness();
        }

        [TestMethod]
        public void InvocationScript_Get()
        {
            uut.InvocationScript.Should().BeNull();
        }

        private static Witness PrepareDummyWitness(int pubKeys, int m)
        {
            var address = new WalletAccount[pubKeys];
            var wallets = new NEP6Wallet[pubKeys];
            var walletsUnlocks = new IDisposable[pubKeys];
            var snapshot = TestBlockchain.GetTestSnapshot();

            for (int x = 0; x < pubKeys; x++)
            {
                wallets[x] = TestUtils.GenerateTestWallet();
                walletsUnlocks[x] = wallets[x].Unlock(""123"");
                address[x] = wallets[x].CreateAccount();
            }

            // Generate multisignature

            var multiSignContract = Contract.CreateMultiSigContract(m, address.Select(a => a.GetKey().PublicKey).ToArray());

            for (int x = 0; x < pubKeys; x++)
            {
                wallets[x].CreateAccount(multiSignContract, address[x].GetKey());
            }

            // Sign

            var data = new ContractParametersContext(snapshot, new Transaction()
            {
                Attributes = Array.Empty<TransactionAttribute>(),
                Signers = new[] {new Signer()
                {
                    Account = multiSignContract.ScriptHash,
                    Scopes = WitnessScope.CalledByEntry
                }},
                NetworkFee = 0,
                Nonce = 0,
                Script = Array.Empty<byte>(),
                SystemFee = 0,
                ValidUntilBlock = 0,
                Version = 0,
                Witnesses = Array.Empty<Witness>()
            }, ProtocolSettings.Default.Network);

            for (int x = 0; x < m; x++)
            {
                Assert.IsTrue(wallets[x].Sign(data));
            }

            Assert.IsTrue(data.Completed);
            return data.GetWitnesses()[0];
        }

        [TestMethod]
        public void MaxSize_OK()
        {
            var witness = PrepareDummyWitness(10, 10);

            // Check max size

            witness.Size.Should().Be(1023);
            witness.InvocationScript.GetVarSize().Should().Be(663);
            witness.VerificationScript.GetVarSize().Should().Be(360);

            var copy = witness.ToArray().AsSerializable<Witness>();

            CollectionAssert.AreEqual(witness.InvocationScript, copy.InvocationScript);
            CollectionAssert.AreEqual(witness.VerificationScript, copy.VerificationScript);
        }

        [TestMethod]
        public void MaxSize_Error()
        {
            var witness = new Witness
            {
                InvocationScript = new byte[1025],
                VerificationScript = new byte[10]
            };

            // Check max size

            Assert.ThrowsException<FormatException>(() => witness.ToArray().AsSerializable<Witness>());

            // Check max size

            witness.InvocationScript = new byte[10];
            witness.VerificationScript = new byte[1025];
            Assert.ThrowsException<FormatException>(() => witness.ToArray().AsSerializable<Witness>());
        }

        [TestMethod]
        public void InvocationScript_Set()
        {
            byte[] dataArray = new byte[] { 0, 32, 32, 20, 32, 32 };
            uut.InvocationScript = dataArray;
            uut.InvocationScript.Length.Should().Be(6);
            Assert.AreEqual(uut.InvocationScript.ToHexString(), ""002020142020"");
        }

        private static void SetupWitnessWithValues(Witness uut, int lenghtInvocation, int lengthVerification, out byte[] invocationScript, out byte[] verificationScript)
        {
            invocationScript = TestUtils.GetByteArray(lenghtInvocation, 0x20);
            verificationScript = TestUtils.GetByteArray(lengthVerification, 0x20);
            uut.InvocationScript = invocationScript;
            uut.VerificationScript = verificationScript;
        }

        [TestMethod]
        public void SizeWitness_Small_Arrary()
        {
            SetupWitnessWithValues(uut, 252, 253, out _, out _);

            uut.Size.Should().Be(509); // (1 + 252*1) + (1 + 2 + 253*1)
        }

        [TestMethod]
        public void SizeWitness_Large_Arrary()
        {
            SetupWitnessWithValues(uut, 65535, 65536, out _, out _);

            uut.Size.Should().Be(131079); // (1 + 2 + 65535*1) + (1 + 4 + 65536*1)
        }

        [TestMethod]
        public void ToJson()
        {
            SetupWitnessWithValues(uut, 2, 3, out _, out _);

            JObject json = uut.ToJson();
            Assert.IsTrue(json.ContainsProperty(""invocation""));
            Assert.IsTrue(json.ContainsProperty(""verification""));
            Assert.AreEqual(json[""invocation""].AsString(), ""ICA="");
            Assert.AreEqual(json[""verification""].AsString(), ""ICAg"");
        }
    }",0,777 587 2000 123 2001 2002 59 91 2003 93 777 865 2004 40 41 123 2002 61 744 2001 40 41 59 125 91 2005 93 777 865 2006 40 41 123 2002 46 2007 46 2008 40 41 46 2009 40 41 59 125 773 809 2001 2010 40 704 2011 44 704 2012 41 123 2013 2014 61 744 2015 91 2011 93 59 2013 2016 61 744 2017 91 2011 93 59 2013 2018 61 744 2019 91 2011 93 59 2013 2020 61 2021 46 2022 40 41 59 664 40 704 2023 61 1500 59 2023 60 2011 59 2023 349 41 123 2016 91 2023 93 61 2024 46 2025 40 41 59 2018 91 2023 93 61 2016 91 2023 93 46 2026 40 362 41 59 2014 91 2023 93 61 2016 91 2023 93 46 2027 40 41 59 125 330 2013 2028 61 2029 46 2030 40 2012 44 2014 46 2031 40 2032 328 2032 46 2033 40 41 46 2034 41 46 2035 40 41 41 59 664 40 704 2023 61 1500 59 2023 60 2011 59 2023 349 41 123 2016 91 2023 93 46 2036 40 2028 44 2014 91 2023 93 46 2033 40 41 41 59 125 330 2013 2037 61 744 2038 40 2020 44 744 2039 40 41 123 2040 61 2041 46 2042 60 2043 62 40 41 44 2044 61 744 91 93 123 744 2045 40 41 123 2046 61 2028 46 2047 44 2048 61 2049 46 2050 125 125 44 2051 61 1500 44 2052 61 1500 44 2053 61 2041 46 2042 60 574 62 40 41 44 2054 61 1500 44 2055 61 1500 44 2056 61 1500 44 2057 61 2041 46 2042 60 2001 62 40 41 125 44 2058 46 2059 46 2060 41 59 664 40 704 2023 61 1500 59 2023 60 2012 59 2023 349 41 123 2061 46 2062 40 2016 91 2023 93 46 2063 40 2037 41 41 59 125 2064 46 2065 40 2037 46 2066 41 59 792 2037 46 2067 40 41 91 1500 93 59 125 91 2005 93 777 865 2068 40 41 123 2069 2070 61 2010 40 1502 44 1502 41 59 330 2070 46 2071 46 2072 40 41 46 2073 40 1505 41 59 2070 46 2074 46 2075 40 41 46 2072 40 41 46 2073 40 1504 41 59 2070 46 2076 46 2075 40 41 46 2072 40 41 46 2073 40 1504 41 59 2069 2077 61 2070 46 2078 40 41 46 2079 60 2001 62 40 41 59 2080 46 2081 40 2070 46 2074 44 2077 46 2074 41 59 2080 46 2081 40 2070 46 2076 44 2077 46 2076 41 59 125 91 2005 93 777 865 2082 40 41 123 2083 2084 61 744 2001 123 2085 61 744 574 91 1505 93 44 2086 61 744 574 91 1502 93 125 59 330 2087 46 2088 60 2089 62 40 40 41 328 2084 46 2090 40 41 46 2091 60 2001 62 40 41 41 59 330 2084 46 2092 61 744 574 91 1502 93 59 2084 46 2093 61 744 574 91 1505 93 59 2087 46 2088 60 2089 62 40 40 41 328 2084 46 2090 40 41 46 2091 60 2001 62 40 41 41 59 125 91 2005 93 777 865 2094 40 41 123 574 91 93 2095 61 744 574 91 93 123 1500 44 1503 44 1503 44 1503 44 1503 44 1503 125 59 2002 46 2096 61 2095 59 2002 46 2096 46 2097 46 2098 40 41 46 2099 40 1502 41 59 2100 46 2101 40 2002 46 2096 46 2102 40 41 44 362 41 59 125 773 809 865 2103 40 2001 2002 44 704 2104 44 704 2105 44 762 574 91 93 2106 44 762 574 91 93 2107 41 123 2106 61 2108 46 2109 40 2104 44 1503 41 59 2107 61 2108 46 2109 40 2105 44 1503 41 59 2002 46 2110 61 2106 59 2002 46 2111 61 2107 59 125 91 2005 93 777 865 2112 40 41 123 2103 40 2002 44 1504 44 1504 44 762 2113 44 762 2113 41 59 2002 46 2114 46 2115 40 41 46 2116 40 1504 41 59 330 125 91 2005 93 777 865 2117 40 41 123 2103 40 2002 44 1506 44 1506 44 762 2118 44 762 2118 41 59 2002 46 2119 46 2120 40 41 46 2121 40 1507 41 59 330 125 91 2005 93 777 865 2122 40 41 123 2103 40 2002 44 1502 44 1502 44 762 2123 44 762 2123 41 59 2124 2125 61 2002 46 2122 40 41 59 2126 46 2127 40 2125 46 2128 40 362 41 41 59 2126 46 2127 40 2125 46 2128 40 362 41 41 59 2126 46 2129 40 2125 91 362 93 46 2130 40 41 44 362 41 59 2126 46 2129 40 2125 91 362 93 46 2130 40 41 44 362 41 59 125 125 ,"{'AvgLine': 12, 'CountLine': 149, 'CountStmt': 66, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 47, 'MaxEssential': 1, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 115, 'CountStmtDecl': 26, 'MaxCyclomatic': 4, 'SumCyclomatic': 16, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 29, 'CountSemicolon': 52, 'CountDeclMethod': 10, 'CountLineCodeExe': 63, 'CountLineComment': 7, 'CountClassCoupled': 22, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 33, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 8, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 40, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 18, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 40, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79871,C#,"    public class OracleResponse : TransactionAttribute
    {
        /// <summary>
        /// Indicates the maximum size of the <see cref=""Result""/> field.
        /// </summary>
        public const int MaxResultSize = ushort.MaxValue;

        /// <summary>
        /// Represents the fixed value of the <see cref=""Transaction.Script""/> field of the oracle responding transaction.
        /// </summary>
        public static readonly byte[] FixedScript;

        /// <summary>
        /// The ID of the oracle request.
        /// </summary>
        public ulong Id;

        /// <summary>
        /// The response code for the oracle request.
        /// </summary>
        public OracleResponseCode Code;

        /// <summary>
        /// The result for the oracle request.
        /// </summary>
        public byte[] Result;

        public override TransactionAttributeType Type => TransactionAttributeType.OracleResponse;
        public override bool AllowMultiple => false;

        public override int Size => base.Size +
            sizeof(ulong) +                 //Id
            sizeof(OracleResponseCode) +    //ResponseCode
            Result.GetVarSize();            //Result

        static OracleResponse()
        {
            using ScriptBuilder sb = new();
            sb.EmitDynamicCall(NativeContract.Oracle.Hash, ""finish"");
            FixedScript = sb.ToArray();
        }

        protected override void DeserializeWithoutType(BinaryReader reader)
        {
            Id = reader.ReadUInt64();
            Code = (OracleResponseCode)reader.ReadByte();
            if (!Enum.IsDefined(typeof(OracleResponseCode), Code))
                throw new FormatException();
            Result = reader.ReadVarBytes(MaxResultSize);
            if (Code != OracleResponseCode.Success && Result.Length > 0)
                throw new FormatException();
        }

        protected override void SerializeWithoutType(BinaryWriter writer)
        {
            writer.Write(Id);
            writer.Write((byte)Code);
            writer.WriteVarBytes(Result);
        }

        public override JObject ToJson()
        {
            JObject json = base.ToJson();
            json[""id""] = Id;
            json[""code""] = Code;
            json[""result""] = Convert.ToBase64String(Result);
            return json;
        }

        public override bool Verify(DataCache snapshot, Transaction tx)
        {
            if (tx.Signers.Any(p => p.Scopes != WitnessScope.None)) return false;
            if (!tx.Script.AsSpan().SequenceEqual(FixedScript)) return false;
            OracleRequest request = NativeContract.Oracle.GetRequest(snapshot, Id);
            if (request is null) return false;
            if (tx.NetworkFee + tx.SystemFee != request.GasForResponse) return false;
            UInt160 oracleAccount = Contract.GetBFTAddress(NativeContract.RoleManagement.GetDesignatedByRole(snapshot, Role.Oracle, NativeContract.Ledger.CurrentIndex(snapshot) + 1));
            return tx.Signers.Any(p => p.Account.Equals(oracleAccount));
        }
    }",0,777 587 2000 58 2001 123 331 777 601 704 2002 61 859 46 2003 59 331 777 809 780 574 91 93 2004 59 331 777 848 2005 59 331 777 2006 2007 59 331 777 574 91 93 2008 59 777 763 2009 2010 328 2009 46 2000 59 777 763 569 2011 328 655 59 777 763 704 2012 328 563 46 2012 43 805 40 848 41 43 330 805 40 2006 41 43 330 2008 46 2013 40 41 59 330 809 2000 40 41 123 860 2014 2015 61 744 40 41 59 2015 46 2016 40 2017 46 2018 46 2019 44 362 41 59 2004 61 2015 46 2020 40 41 59 125 775 763 865 2021 40 2022 2023 41 123 2005 61 2023 46 2024 40 41 59 2007 61 40 2006 41 2023 46 2025 40 41 59 688 40 33 2026 46 2027 40 836 40 2006 41 44 2007 41 41 825 744 2028 40 41 59 2008 61 2023 46 2029 40 2002 41 59 688 40 2007 340 2006 46 2030 307 2008 46 2031 62 1500 41 825 744 2028 40 41 59 125 775 763 865 2032 40 2033 2034 41 123 2034 46 2035 40 2005 41 59 2034 46 2035 40 40 574 41 2007 41 59 2034 46 2036 40 2008 41 59 125 777 763 2037 2038 40 41 123 2037 2039 61 563 46 2038 40 41 59 2039 91 362 93 61 2005 59 2039 91 362 93 61 2007 59 2039 91 362 93 61 2040 46 2041 40 2008 41 59 792 2039 59 125 777 763 569 2042 40 2043 2044 44 2045 2046 41 123 688 40 2046 46 2047 46 2048 40 2049 328 2049 46 2050 340 2051 46 2052 41 41 792 655 59 688 40 33 2046 46 2053 46 2054 40 41 46 2055 40 2004 41 41 792 655 59 2056 2057 61 2058 46 2059 46 2060 40 2044 44 2005 41 59 688 40 2057 712 752 41 792 655 59 688 40 2046 46 2061 43 2046 46 2062 340 2057 46 2063 41 792 655 59 2064 2065 61 2066 46 2067 40 2058 46 2068 46 2069 40 2044 44 2070 46 2059 44 2058 46 2071 46 2072 40 2044 41 43 1501 41 41 59 792 2046 46 2047 46 2048 40 2049 328 2049 46 2073 46 2074 40 2065 41 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 80, 'CountStmt': 42, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 28, 'MaxEssential': 5, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 54, 'CountStmtDecl': 17, 'MaxCyclomatic': 5, 'SumCyclomatic': 13, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountSemicolon': 31, 'CountDeclMethod': 8, 'CountLineCodeExe': 25, 'CountLineComment': 18, 'CountClassCoupled': 21, 'CountClassDerived': 0, 'CountDeclProperty': 3, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.33', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 59, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 15, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 59, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79818,C#,"    public class UT_ExtensiblePayload
    {
        [TestMethod]
        public void Size_Get()
        {
            var test = new ExtensiblePayload()
            {
                Sender = Array.Empty<byte>().ToScriptHash(),
                Category = ""123"",
                Data = new byte[] { 1, 2, 3 },
                Witness = new Witness() { InvocationScript = new byte[] { 3, 5, 6 }, VerificationScript = Array.Empty<byte>() }
            };
            test.Size.Should().Be(42);
        }

        [TestMethod]
        public void DeserializeAndSerialize()
        {
            var test = new ExtensiblePayload()
            {
                Category = ""123"",
                ValidBlockStart = 456,
                ValidBlockEnd = 789,
                Sender = Array.Empty<byte>().ToScriptHash(),
                Data = new byte[] { 1, 2, 3 },
                Witness = new Witness() { InvocationScript = new byte[] { (byte)OpCode.PUSH1, (byte)OpCode.PUSH2, (byte)OpCode.PUSH3 }, VerificationScript = Array.Empty<byte>() }
            };
            var clone = test.ToArray().AsSerializable<ExtensiblePayload>();

            Assert.AreEqual(test.Sender, clone.Witness.ScriptHash);
            Assert.AreEqual(test.Hash, clone.Hash);
            Assert.AreEqual(test.ValidBlockStart, clone.ValidBlockStart);
            Assert.AreEqual(test.ValidBlockEnd, clone.ValidBlockEnd);
            Assert.AreEqual(test.Category, clone.Category);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 41 123 2006 61 2007 46 2008 60 574 62 40 41 46 2009 40 41 44 2010 61 362 44 2011 61 744 574 91 93 123 1501 44 1502 44 1502 125 44 2012 61 744 2012 40 41 123 2013 61 744 574 91 93 123 1502 44 1502 44 1502 125 44 2014 61 2007 46 2008 60 574 62 40 41 125 125 59 2004 46 2015 46 2016 40 41 46 2017 40 1503 41 59 125 91 2001 93 777 865 2018 40 41 123 2019 2020 61 744 2021 40 41 123 2022 61 362 44 2023 61 1504 44 2024 61 1504 44 2025 61 2026 46 2027 60 574 62 40 41 46 2028 40 41 44 2029 61 744 574 91 93 123 1501 44 1502 44 1502 125 44 2030 61 744 2030 40 41 123 2031 61 744 574 91 93 123 40 574 41 2032 46 2033 44 40 574 41 2032 46 2034 44 40 574 41 2032 46 2035 125 44 2036 61 2026 46 2027 60 574 62 40 41 125 125 59 2019 2037 61 2020 46 2038 40 41 46 2039 60 2021 62 40 41 59 2040 46 2041 40 2020 46 2042 44 2037 46 2043 46 2044 41 59 2040 46 2041 40 2020 46 2045 44 2037 46 2045 41 59 2040 46 2041 40 2020 46 2046 44 2037 46 2046 41 59 2040 46 2041 40 2020 46 2047 44 2037 46 2047 41 59 2040 46 2041 40 2020 46 2048 44 2037 46 2048 41 59 125 125 ,"{'AvgLine': 15, 'CountLine': 36, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 9, 'CountDeclMethod': 2, 'CountLineCodeExe': 19, 'CountLineComment': 0, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79867,C#,"    public class ExtensiblePayload : IInventory
    {
        /// <summary>
        /// The category of the extension.
        /// </summary>
        public string Category;

        /// <summary>
        /// Indicates that the payload is only valid when the block height is greater than or equal to this value.
        /// </summary>
        public uint ValidBlockStart;

        /// <summary>
        /// Indicates that the payload is only valid when the block height is less than this value.
        /// </summary>
        public uint ValidBlockEnd;

        /// <summary>
        /// The sender of the payload.
        /// </summary>
        public UInt160 Sender;

        /// <summary>
        /// The data of the payload.
        /// </summary>
        public byte[] Data;

        /// <summary>
        /// The witness of the payload. It must match the <see cref=""Sender""/>.
        /// </summary>
        public Witness Witness;

        private UInt256 _hash = null;
        public UInt256 Hash
        {
            get
            {
                if (_hash == null)
                {
                    _hash = this.CalculateHash();
                }
                return _hash;
            }
        }

        InventoryType IInventory.InventoryType => InventoryType.Extensible;

        public int Size =>
            Category.GetVarSize() + //Category
            sizeof(uint) +          //ValidBlockStart
            sizeof(uint) +          //ValidBlockEnd
            UInt160.Length +        //Sender
            Data.GetVarSize() +     //Data
            1 + Witness.Size;       //Witness

        Witness[] IVerifiable.Witnesses
        {
            get
            {
                return new[] { Witness };
            }
            set
            {
                if (value.Length != 1) throw new ArgumentException();
                Witness = value[0];
            }
        }

        void ISerializable.Deserialize(BinaryReader reader)
        {
            ((IVerifiable)this).DeserializeUnsigned(reader);
            if (reader.ReadByte() != 1) throw new FormatException();
            Witness = reader.ReadSerializable<Witness>();
        }

        void IVerifiable.DeserializeUnsigned(BinaryReader reader)
        {
            Category = reader.ReadVarString(32);
            ValidBlockStart = reader.ReadUInt32();
            ValidBlockEnd = reader.ReadUInt32();
            if (ValidBlockStart >= ValidBlockEnd) throw new FormatException();
            Sender = reader.ReadSerializable<UInt160>();
            Data = reader.ReadVarBytes(Message.PayloadMaxSize);
        }

        UInt160[] IVerifiable.GetScriptHashesForVerifying(DataCache snapshot)
        {
            return new[] { Sender }; // This address should be checked by consumer
        }

        void ISerializable.Serialize(BinaryWriter writer)
        {
            ((IVerifiable)this).SerializeUnsigned(writer);
            writer.Write((byte)1); writer.Write(Witness);
        }

        void IVerifiable.SerializeUnsigned(BinaryWriter writer)
        {
            writer.WriteVarString(Category);
            writer.Write(ValidBlockStart);
            writer.Write(ValidBlockEnd);
            writer.Write(Sender);
            writer.WriteVarBytes(Data);
        }

        internal bool Verify(ProtocolSettings settings, DataCache snapshot, ISet<UInt160> extensibleWitnessWhiteList)
        {
            uint height = NativeContract.Ledger.CurrentIndex(snapshot);
            if (height < ValidBlockStart || height >= ValidBlockEnd) return false;
            if (!extensibleWitnessWhiteList.Contains(Sender)) return false;
            return this.VerifyWitnesses(settings, snapshot, 0_06000000L);
        }
    }",0,777 587 2000 58 2001 123 331 777 815 2002 59 331 777 842 2003 59 331 777 842 2004 59 331 777 2005 2006 59 331 777 574 91 93 2007 59 331 777 2008 2008 59 773 2009 2010 61 752 59 777 2009 2011 123 2012 123 688 40 2010 323 752 41 123 2010 61 823 46 2013 40 41 59 125 792 2010 59 125 125 2014 2001 46 2014 328 2014 46 2015 59 777 704 2016 328 2002 46 2017 40 41 43 330 805 40 842 41 43 330 805 40 842 41 43 330 2005 46 2018 43 330 2007 46 2017 40 41 43 330 1501 43 2008 46 2016 59 330 2008 91 93 2019 46 2020 123 2021 123 792 744 91 93 123 2008 125 59 125 2022 123 688 40 2023 46 2018 340 1501 41 825 744 2024 40 41 59 2008 61 2023 91 1500 93 59 125 125 865 2025 46 2026 40 2027 2028 41 123 40 40 2019 41 823 41 46 2029 40 2028 41 59 688 40 2028 46 2030 40 41 340 1501 41 825 744 2031 40 41 59 2008 61 2028 46 2032 60 2008 62 40 41 59 125 865 2019 46 2033 40 2027 2028 41 123 2002 61 2028 46 2034 40 1503 41 59 2003 61 2028 46 2035 40 41 59 2004 61 2028 46 2035 40 41 59 688 40 2003 325 2004 41 825 744 2036 40 41 59 2006 61 2028 46 2037 60 2005 62 40 41 59 2007 61 2028 46 2038 40 2039 46 2040 41 59 125 2005 91 93 2019 46 2041 40 2042 2043 41 123 792 744 91 93 123 2006 125 59 330 125 865 2025 46 2044 40 2045 2046 41 123 40 40 2019 41 823 41 46 2047 40 2046 41 59 2046 46 2048 40 40 574 41 1501 41 59 2046 46 2048 40 2008 41 59 125 865 2019 46 2049 40 2045 2046 41 123 2046 46 2050 40 2002 41 59 2046 46 2051 40 2003 41 59 2046 46 2051 40 2004 41 59 2046 46 2051 40 2006 41 59 2046 46 2052 40 2007 41 59 125 710 569 2053 40 2054 2055 44 2042 2043 44 2056 60 2005 62 2057 41 123 842 2058 61 2059 46 2060 46 2061 40 2043 41 59 688 40 2058 60 2003 309 2058 325 2004 41 792 655 59 688 40 33 2057 46 2062 40 2006 41 41 792 655 59 792 823 46 2063 40 2055 44 2043 44 1500 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 113, 'CountStmt': 54, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 33, 'MaxEssential': 3, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 80, 'CountStmtDecl': 22, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 15, 'CountSemicolon': 36, 'CountDeclMethod': 11, 'CountLineCodeExe': 28, 'CountLineComment': 25, 'CountClassCoupled': 22, 'CountClassDerived': 0, 'CountDeclProperty': 4, 'CountLineCodeDecl': 28, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.31', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 8, 'CountDeclInstanceMethod': 11, 'CountDeclMethodInternal': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 15, 'CountDeclInstanceVariable': 7, 'PercentLackOfCohesionModified': 71, 'CountDeclInstanceVariablePublic': 6, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79906,C#,"    internal class TaskManagerMailbox : PriorityMailbox
    {
        public TaskManagerMailbox(Akka.Actor.Settings settings, Config config)
            : base(settings, config)
        {
        }

        internal protected override bool IsHighPriority(object message)
        {
            switch (message)
            {
                case TaskManager.Register _:
                case TaskManager.Update _:
                case TaskManager.RestartTasks _:
                    return true;
                case TaskManager.NewTasks tasks:
                    if (tasks.Payload.Type == InventoryType.Block || tasks.Payload.Type == InventoryType.Extensible)
                        return true;
                    return false;
                default:
                    return false;
            }
        }

        internal protected override bool ShallDrop(object message, IEnumerable queue)
        {
            if (message is not TaskManager.NewTasks tasks) return false;
            // Remove duplicate tasks
            if (queue.OfType<TaskManager.NewTasks>().Any(x => x.Payload.Type == tasks.Payload.Type && x.Payload.Hashes.SequenceEqual(tasks.Payload.Hashes))) return true;
            return false;
        }
    }",0,710 587 2000 58 2001 123 777 2000 40 2002 46 2003 46 2004 2005 44 2006 2007 41 58 563 40 2005 44 2007 41 123 125 710 775 763 569 2008 40 755 2009 41 123 819 40 2009 41 123 579 2010 46 2011 2012 58 579 2010 46 2013 2012 58 579 2010 46 2014 2012 58 792 829 59 579 2010 46 2015 2016 58 688 40 2016 46 2017 46 2018 323 2019 46 2020 309 2016 46 2017 46 2018 323 2019 46 2021 41 792 829 59 792 655 59 613 58 792 655 59 125 125 710 775 763 569 2022 40 755 2009 44 2023 2024 41 123 688 40 2009 712 2025 2026 46 2027 2028 41 792 655 59 330 688 40 2024 46 2029 60 2026 46 2027 62 40 41 46 2030 40 2031 328 2031 46 2032 46 2033 323 2028 46 2032 46 2033 307 2031 46 2032 46 2034 46 2035 40 2028 46 2032 46 2034 41 41 41 792 829 59 792 655 59 125 125 ,"{'AvgLine': 9, 'CountLine': 32, 'CountStmt': 15, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 4, 'SumEssential': 9, 'AvgCyclomatic': 3, 'CountLineCode': 29, 'CountStmtDecl': 4, 'MaxCyclomatic': 6, 'SumCyclomatic': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 7, 'CountDeclMethod': 3, 'CountLineCodeExe': 14, 'CountLineComment': 1, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.03', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 13, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 7, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 2, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79740,C#,"    public abstract class DataCache
    {
        /// <summary>
        /// Represents an entry in the cache.
        /// </summary>
        public class Trackable
        {
            /// <summary>
            /// The key of the entry.
            /// </summary>
            public StorageKey Key;

            /// <summary>
            /// The data of the entry.
            /// </summary>
            public StorageItem Item;

            /// <summary>
            /// The state of the entry.
            /// </summary>
            public TrackState State;
        }

        private readonly Dictionary<StorageKey, Trackable> dictionary = new();
        private readonly HashSet<StorageKey> changeSet = new();

        /// <summary>
        /// Reads a specified entry from the cache. If the entry is not in the cache, it will be automatically loaded from the underlying storage.
        /// </summary>
        /// <param name=""key"">The key of the entry.</param>
        /// <returns>The cached data.</returns>
        /// <exception cref=""KeyNotFoundException"">If the entry doesn't exist.</exception>
        public StorageItem this[StorageKey key]
        {
            get
            {
                lock (dictionary)
                {
                    if (dictionary.TryGetValue(key, out Trackable trackable))
                    {
                        if (trackable.State == TrackState.Deleted)
                            throw new KeyNotFoundException();
                    }
                    else
                    {
                        trackable = new Trackable
                        {
                            Key = key,
                            Item = GetInternal(key),
                            State = TrackState.None
                        };
                        dictionary.Add(key, trackable);
                    }
                    return trackable.Item;
                }
            }
        }

        /// <summary>
        /// Adds a new entry to the cache.
        /// </summary>
        /// <param name=""key"">The key of the entry.</param>
        /// <param name=""value"">The data of the entry.</param>
        /// <exception cref=""ArgumentException"">The entry has already been cached.</exception>
        /// <remarks>Note: This method does not read the internal storage to check whether the record already exists.</remarks>
        public void Add(StorageKey key, StorageItem value)
        {
            lock (dictionary)
            {
                if (dictionary.TryGetValue(key, out Trackable trackable) && trackable.State != TrackState.Deleted)
                    throw new ArgumentException();
                dictionary[key] = new Trackable
                {
                    Key = key,
                    Item = value,
                    State = trackable == null ? TrackState.Added : TrackState.Changed
                };
                changeSet.Add(key);
            }
        }

        /// <summary>
        /// Adds a new entry to the underlying storage.
        /// </summary>
        /// <param name=""key"">The key of the entry.</param>
        /// <param name=""value"">The data of the entry.</param>
        protected abstract void AddInternal(StorageKey key, StorageItem value);

        /// <summary>
        /// Commits all changes in the cache to the underlying storage.
        /// </summary>
        public virtual void Commit()
        {
            LinkedList<StorageKey> deletedItem = new();
            foreach (Trackable trackable in GetChangeSet())
                switch (trackable.State)
                {
                    case TrackState.Added:
                        AddInternal(trackable.Key, trackable.Item);
                        trackable.State = TrackState.None;
                        break;
                    case TrackState.Changed:
                        UpdateInternal(trackable.Key, trackable.Item);
                        trackable.State = TrackState.None;
                        break;
                    case TrackState.Deleted:
                        DeleteInternal(trackable.Key);
                        deletedItem.AddFirst(trackable.Key);
                        break;
                }
            foreach (StorageKey key in deletedItem)
            {
                dictionary.Remove(key);
            }
            changeSet.Clear();
        }

        /// <summary>
        /// Creates a snapshot, which uses this instance as the underlying storage.
        /// </summary>
        /// <returns>The snapshot of this instance.</returns>
        public DataCache CreateSnapshot()
        {
            return new ClonedCache(this);
        }

        /// <summary>
        /// Deletes an entry from the cache.
        /// </summary>
        /// <param name=""key"">The key of the entry.</param>
        public void Delete(StorageKey key)
        {
            lock (dictionary)
            {
                if (dictionary.TryGetValue(key, out Trackable trackable))
                {
                    if (trackable.State == TrackState.Added)
                    {
                        dictionary.Remove(key);
                        changeSet.Remove(key);
                    }
                    else
                    {
                        trackable.State = TrackState.Deleted;
                        changeSet.Add(key);
                    }
                }
                else
                {
                    StorageItem item = TryGetInternal(key);
                    if (item == null) return;
                    dictionary.Add(key, new Trackable
                    {
                        Key = key,
                        Item = item,
                        State = TrackState.Deleted
                    });
                    changeSet.Add(key);
                }
            }
        }

        /// <summary>
        /// Deletes an entry from the underlying storage.
        /// </summary>
        /// <param name=""key"">The key of the entry.</param>
        protected abstract void DeleteInternal(StorageKey key);

        /// <summary>
        /// Finds the entries starting with the specified prefix.
        /// </summary>
        /// <param name=""key_prefix"">The prefix of the key.</param>
        /// <returns>The entries found with the desired prefix.</returns>
        public IEnumerable<(StorageKey Key, StorageItem Value)> Find(byte[] key_prefix = null)
        {
            foreach (var (key, value) in Seek(key_prefix, SeekDirection.Forward))
                if (key.ToArray().AsSpan().StartsWith(key_prefix))
                    yield return (key, value);
                else
                    yield break;
        }

        /// <summary>
        /// Finds the entries that between [start, end).
        /// </summary>
        /// <param name=""start"">The start key (inclusive).</param>
        /// <param name=""end"">The end key (exclusive).</param>
        /// <param name=""direction"">The search direction.</param>
        /// <returns>The entries found with the desired range.</returns>
        public IEnumerable<(StorageKey Key, StorageItem Value)> FindRange(byte[] start, byte[] end, SeekDirection direction = SeekDirection.Forward)
        {
            ByteArrayComparer comparer = direction == SeekDirection.Forward
                ? ByteArrayComparer.Default
                : ByteArrayComparer.Reverse;
            foreach (var (key, value) in Seek(start, direction))
                if (comparer.Compare(key.ToArray(), end) < 0)
                    yield return (key, value);
                else
                    yield break;
        }

        /// <summary>
        /// Gets the change set in the cache.
        /// </summary>
        /// <returns>The change set.</returns>
        public IEnumerable<Trackable> GetChangeSet()
        {
            lock (dictionary)
            {
                foreach (StorageKey key in changeSet)
                    yield return dictionary[key];
            }
        }

        /// <summary>
        /// Determines whether the cache contains the specified entry.
        /// </summary>
        /// <param name=""key"">The key of the entry.</param>
        /// <returns><see langword=""true""/> if the cache contains an entry with the specified key; otherwise, <see langword=""false""/>.</returns>
        public bool Contains(StorageKey key)
        {
            lock (dictionary)
            {
                if (dictionary.TryGetValue(key, out Trackable trackable))
                {
                    if (trackable.State == TrackState.Deleted) return false;
                    return true;
                }
                return ContainsInternal(key);
            }
        }

        /// <summary>
        /// Determines whether the underlying storage contains the specified entry.
        /// </summary>
        /// <param name=""key"">The key of the entry.</param>
        /// <returns><see langword=""true""/> if the underlying storage contains an entry with the specified key; otherwise, <see langword=""false""/>.</returns>
        protected abstract bool ContainsInternal(StorageKey key);

        /// <summary>
        /// Reads a specified entry from the underlying storage.
        /// </summary>
        /// <param name=""key"">The key of the entry.</param>
        /// <returns>The data of the entry. Or <see langword=""null""/> if the entry doesn't exist.</returns>
        protected abstract StorageItem GetInternal(StorageKey key);

        /// <summary>
        /// Reads a specified entry from the cache, and mark it as <see cref=""TrackState.Changed""/>. If the entry is not in the cache, it will be automatically loaded from the underlying storage.
        /// </summary>
        /// <param name=""key"">The key of the entry.</param>
        /// <param name=""factory"">A delegate used to create the entry if it doesn't exist. If the entry already exists, the factory will not be used.</param>
        /// <returns>The cached data. Or <see langword=""null""/> if it doesn't exist and the <paramref name=""factory""/> is not provided.</returns>
        public StorageItem GetAndChange(StorageKey key, Func<StorageItem> factory = null)
        {
            lock (dictionary)
            {
                if (dictionary.TryGetValue(key, out Trackable trackable))
                {
                    if (trackable.State == TrackState.Deleted)
                    {
                        if (factory == null) return null;
                        trackable.Item = factory();
                        trackable.State = TrackState.Changed;
                    }
                    else if (trackable.State == TrackState.None)
                    {
                        trackable.State = TrackState.Changed;
                        changeSet.Add(key);
                    }
                }
                else
                {
                    trackable = new Trackable
                    {
                        Key = key,
                        Item = TryGetInternal(key)
                    };
                    if (trackable.Item == null)
                    {
                        if (factory == null) return null;
                        trackable.Item = factory();
                        trackable.State = TrackState.Added;
                    }
                    else
                    {
                        trackable.State = TrackState.Changed;
                    }
                    dictionary.Add(key, trackable);
                    changeSet.Add(key);
                }
                return trackable.Item;
            }
        }

        /// <summary>
        /// Reads a specified entry from the cache. If the entry is not in the cache, it will be automatically loaded from the underlying storage. If the entry doesn't exist, the factory will be used to create a new one.
        /// </summary>
        /// <param name=""key"">The key of the entry.</param>
        /// <param name=""factory"">A delegate used to create the entry if it doesn't exist. If the entry already exists, the factory will not be used.</param>
        /// <returns>The cached data.</returns>
        public StorageItem GetOrAdd(StorageKey key, Func<StorageItem> factory)
        {
            lock (dictionary)
            {
                if (dictionary.TryGetValue(key, out Trackable trackable))
                {
                    if (trackable.State == TrackState.Deleted)
                    {
                        trackable.Item = factory();
                        trackable.State = TrackState.Changed;
                    }
                }
                else
                {
                    trackable = new Trackable
                    {
                        Key = key,
                        Item = TryGetInternal(key)
                    };
                    if (trackable.Item == null)
                    {
                        trackable.Item = factory();
                        trackable.State = TrackState.Added;
                        changeSet.Add(key);
                    }
                    else
                    {
                        trackable.State = TrackState.None;
                    }
                    dictionary.Add(key, trackable);
                }
                return trackable.Item;
            }
        }

        /// <summary>
        /// Seeks to the entry with the specified key.
        /// </summary>
        /// <param name=""keyOrPrefix"">The key to be sought.</param>
        /// <param name=""direction"">The direction of seek.</param>
        /// <returns>An enumerator containing all the entries after seeking.</returns>
        public IEnumerable<(StorageKey Key, StorageItem Value)> Seek(byte[] keyOrPrefix = null, SeekDirection direction = SeekDirection.Forward)
        {
            IEnumerable<(byte[], StorageKey, StorageItem)> cached;
            HashSet<StorageKey> cachedKeySet;
            ByteArrayComparer comparer = direction == SeekDirection.Forward ? ByteArrayComparer.Default : ByteArrayComparer.Reverse;
            lock (dictionary)
            {
                cached = dictionary
                    .Where(p => p.Value.State != TrackState.Deleted && (keyOrPrefix == null || comparer.Compare(p.Key.ToArray(), keyOrPrefix) >= 0))
                    .Select(p =>
                    (
                        KeyBytes: p.Key.ToArray(),
                        p.Key,
                        p.Value.Item
                    ))
                    .OrderBy(p => p.KeyBytes, comparer)
                    .ToArray();
                cachedKeySet = new HashSet<StorageKey>(dictionary.Keys);
            }
            var uncached = SeekInternal(keyOrPrefix ?? Array.Empty<byte>(), direction)
                .Where(p => !cachedKeySet.Contains(p.Key))
                .Select(p =>
                (
                    KeyBytes: p.Key.ToArray(),
                    p.Key,
                    p.Value
                ));
            using var e1 = cached.GetEnumerator();
            using var e2 = uncached.GetEnumerator();
            (byte[] KeyBytes, StorageKey Key, StorageItem Item) i1, i2;
            bool c1 = e1.MoveNext();
            bool c2 = e2.MoveNext();
            i1 = c1 ? e1.Current : default;
            i2 = c2 ? e2.Current : default;
            while (c1 || c2)
            {
                if (!c2 || (c1 && comparer.Compare(i1.KeyBytes, i2.KeyBytes) < 0))
                {
                    yield return (i1.Key, i1.Item);
                    c1 = e1.MoveNext();
                    i1 = c1 ? e1.Current : default;
                }
                else
                {
                    yield return (i2.Key, i2.Item);
                    c2 = e2.MoveNext();
                    i2 = c2 ? e2.Current : default;
                }
            }
        }

        /// <summary>
        /// Seeks to the entry with the specified key in the underlying storage.
        /// </summary>
        /// <param name=""keyOrPrefix"">The key to be sought.</param>
        /// <param name=""direction"">The direction of seek.</param>
        /// <returns>An enumerator containing all the entries after seeking.</returns>
        protected abstract IEnumerable<(StorageKey Key, StorageItem Value)> SeekInternal(byte[] keyOrPrefix, SeekDirection direction);

        /// <summary>
        /// Reads a specified entry from the cache. If the entry is not in the cache, it will be automatically loaded from the underlying storage.
        /// </summary>
        /// <param name=""key"">The key of the entry.</param>
        /// <returns>The cached data. Or <see langword=""null""/> if it is neither in the cache nor in the underlying storage.</returns>
        public StorageItem TryGet(StorageKey key)
        {
            lock (dictionary)
            {
                if (dictionary.TryGetValue(key, out Trackable trackable))
                {
                    if (trackable.State == TrackState.Deleted) return null;
                    return trackable.Item;
                }
                StorageItem value = TryGetInternal(key);
                if (value == null) return null;
                dictionary.Add(key, new Trackable
                {
                    Key = key,
                    Item = value,
                    State = TrackState.None
                });
                return value;
            }
        }

        /// <summary>
        /// Reads a specified entry from the underlying storage.
        /// </summary>
        /// <param name=""key"">The key of the entry.</param>
        /// <returns>The data of the entry. Or <see langword=""null""/> if it doesn't exist.</returns>
        protected abstract StorageItem TryGetInternal(StorageKey key);

        /// <summary>
        /// Updates an entry in the underlying storage.
        /// </summary>
        /// <param name=""key"">The key of the entry.</param>
        /// <param name=""value"">The data of the entry.</param>
        protected abstract void UpdateInternal(StorageKey key, StorageItem value);
    }",1,777 539 587 2000 123 331 777 587 2001 123 331 777 2002 2003 59 331 777 2004 2005 59 331 777 2006 2007 59 125 773 780 2008 60 2009 44 2001 62 2010 61 744 40 41 59 773 780 2011 60 2009 62 2012 61 744 40 41 59 331 777 2013 823 91 2009 2014 93 123 2015 123 725 40 2010 41 123 688 40 2010 46 2016 40 2014 44 762 2001 2017 41 41 123 688 40 2017 46 2018 323 2019 46 2020 41 825 744 2021 40 41 59 125 630 123 2017 61 744 2001 123 2022 61 2014 44 2023 61 2024 40 2014 41 44 2025 61 2026 46 2027 125 59 2010 46 2028 40 2014 44 2017 41 59 125 792 2017 46 2029 59 125 125 125 331 777 865 2030 40 2009 2014 44 2013 2031 41 123 725 40 2010 41 123 688 40 2010 46 2032 40 2014 44 762 2001 2033 41 307 2033 46 2034 340 2035 46 2036 41 825 744 2037 40 41 59 2010 91 2014 93 61 744 2001 123 2038 61 2014 44 2039 61 2031 44 2034 61 2033 323 752 63 2035 46 2040 58 2035 46 2041 125 59 2012 46 2030 40 2014 41 59 125 125 331 775 539 865 2042 40 2009 2014 44 2013 2031 41 59 331 777 864 865 2043 40 41 123 2044 60 2009 62 2045 61 744 40 41 59 665 40 2001 2046 696 2047 40 41 41 819 40 2046 46 2048 41 123 579 2049 46 2050 58 2042 40 2046 46 2051 44 2046 46 2052 41 59 2046 46 2048 61 2049 46 2053 59 572 59 579 2049 46 2054 58 2055 40 2046 46 2051 44 2046 46 2052 41 59 2046 46 2048 61 2049 46 2053 59 572 59 579 2049 46 2056 58 2057 40 2046 46 2051 41 59 2045 46 2058 40 2046 46 2051 41 59 572 59 125 665 40 2009 2014 696 2045 41 123 2010 46 2059 40 2014 41 59 125 2012 46 2060 40 41 59 125 331 777 2000 2061 40 41 123 792 744 2062 40 823 41 59 125 331 777 865 2063 40 2009 2014 41 123 725 40 2010 41 123 688 40 2010 46 2064 40 2014 44 762 2001 2065 41 41 123 688 40 2065 46 2066 323 2067 46 2068 41 123 2010 46 2069 40 2014 41 59 2012 46 2069 40 2014 41 59 125 630 123 2065 46 2066 61 2067 46 2070 59 2012 46 2030 40 2014 41 59 125 125 630 123 2013 2071 61 2072 40 2014 41 59 688 40 2071 323 752 41 792 59 2010 46 2030 40 2014 44 744 2001 123 2073 61 2014 44 2074 61 2071 44 2075 61 2076 46 2077 125 41 59 2012 46 2030 40 2014 41 59 125 125 125 331 775 539 865 2078 40 2009 2014 41 59 331 777 2079 60 40 2009 2080 44 2013 2081 41 62 2082 40 574 91 93 2083 61 752 41 123 665 40 2084 40 2014 44 2031 41 696 2085 40 2083 44 2086 46 2087 41 41 688 40 2014 46 2088 40 41 46 2089 40 41 46 2090 40 2083 41 41 2091 792 40 2014 44 2031 41 59 630 2091 572 59 125 331 777 2079 60 40 2009 2080 44 2013 2081 41 62 2092 40 574 91 93 2093 44 574 91 93 2094 44 2095 2096 61 2095 46 2097 41 123 2098 2099 61 2096 323 2095 46 2097 63 2098 46 2100 58 2098 46 2101 59 665 40 2102 40 2014 44 2031 41 696 2103 40 2093 44 2096 41 41 688 40 2099 46 2104 40 2014 46 2105 40 41 44 2094 41 60 1500 41 2106 792 40 2014 44 2031 41 59 630 2106 572 59 125 331 777 2079 60 2001 62 2107 40 41 123 725 40 2010 41 123 665 40 2009 2014 696 2012 41 2108 792 2010 91 2014 93 59 125 125 331 777 569 2109 40 2009 2014 41 123 725 40 2010 41 123 688 40 2010 46 2110 40 2014 44 762 2001 2111 41 41 123 688 40 2111 46 2112 323 2113 46 2114 41 792 655 59 792 829 59 125 792 2115 40 2014 41 59 125 125 331 775 539 569 2116 40 2009 2014 41 59 331 775 539 2013 2117 40 2009 2014 41 59 331 777 2013 2118 40 2009 2014 44 2119 60 2013 62 2120 61 752 41 123 725 40 2010 41 123 688 40 2010 46 2121 40 2014 44 762 2001 2122 41 41 123 688 40 2122 46 2123 323 2124 46 2125 41 123 688 40 2120 323 752 41 792 752 59 2122 46 2126 61 2120 40 41 59 2122 46 2123 61 2124 46 2127 59 125 630 688 40 2122 46 2123 323 2124 46 2128 41 123 2122 46 2123 61 2124 46 2129 59 2012 46 2030 40 2014 41 59 125 125 630 123 2122 61 744 2001 123 2080 61 2014 44 2130 61 2131 40 2014 41 125 59 688 40 2122 46 2132 323 752 41 123 688 40 2120 323 752 41 792 752 59 2122 46 2132 61 2120 40 41 59 2122 46 2133 61 2134 46 2135 59 125 630 123 2122 46 2136 61 2137 46 2138 59 125 2010 46 2030 40 2014 44 2122 41 59 2012 46 2030 40 2014 41 59 125 792 2122 46 2139 59 125 125 331 777 2013 2140 40 2009 2014 44 2119 60 2013 62 2120 41 123 725 40 2010 41 123 688 40 2010 46 2141 40 2014 44 762 2001 2142 41 41 123 688 40 2142 46 2143 323 2144 46 2145 41 123 2142 46 2146 61 2120 40 41 59 2142 46 2143 61 2144 46 2147 59 125 125 630 123 2142 61 744 2001 123 2080 61 2014 44 2148 61 2149 40 2014 41 125 59 688 40 2142 46 2150 323 752 41 123 2142 46 2150 61 2120 40 41 59 2142 46 2151 61 2152 46 2153 59 2012 46 2030 40 2014 41 59 125 630 123 2142 46 2154 61 2155 46 2156 59 125 2010 46 2030 40 2014 44 2142 41 59 125 792 2142 46 2157 59 125 125 331 777 2079 60 40 2009 2080 44 2013 2081 41 62 2158 40 574 91 93 2159 61 752 44 2095 2096 61 2095 46 2097 41 123 2079 60 40 574 91 93 44 2009 44 2013 41 62 2160 59 2011 60 2009 62 2161 59 2162 2163 61 2096 323 2095 46 2097 63 2162 46 2164 58 2162 46 2165 59 725 40 2010 41 123 2160 61 2010 46 2166 40 2167 328 2167 46 2081 46 2168 340 2169 46 2170 307 40 2159 323 752 309 2163 46 2171 40 2167 46 2080 46 2172 40 41 44 2159 41 325 1500 41 41 46 2173 40 2167 328 40 2174 58 2167 46 2080 46 2172 40 41 44 2167 46 2080 44 2167 46 2081 46 2175 41 41 46 2176 40 2167 328 2167 46 2174 44 2163 41 46 2172 40 41 59 2161 61 744 2011 60 2009 62 40 2010 46 2177 41 59 125 2178 2179 61 2180 40 2159 343 2181 46 2182 60 574 62 40 41 44 2096 41 46 2183 40 2184 328 33 2161 46 2109 40 2184 46 2080 41 41 46 2185 40 2184 328 40 2186 58 2184 46 2080 46 2187 40 41 44 2184 46 2080 44 2184 46 2081 41 41 59 860 2178 2188 61 2160 46 2189 40 41 59 860 2178 2190 61 2179 46 2189 40 41 59 40 574 91 93 2186 44 2009 2080 44 2013 2191 41 2192 44 2193 59 569 2194 61 2188 46 2195 40 41 59 569 2196 61 2190 46 2195 40 41 59 2192 61 2194 63 2188 46 2197 58 613 59 2193 61 2196 63 2190 46 2197 58 613 59 870 40 2194 309 2196 41 123 688 40 33 2196 309 40 2194 307 2163 46 2198 40 2192 46 2186 44 2193 46 2186 41 60 1500 41 41 123 2199 792 40 2192 46 2080 44 2192 46 2191 41 59 2194 61 2188 46 2195 40 41 59 2192 61 2194 63 2188 46 2197 58 613 59 125 630 123 2200 792 40 2193 46 2080 44 2193 46 2191 41 59 2196 61 2190 46 2195 40 41 59 2193 61 2196 63 2190 46 2197 58 613 59 125 125 125 331 775 539 2079 60 40 2009 2080 44 2013 2081 41 62 2201 40 574 91 93 2159 44 2095 2096 41 59 331 777 2013 2202 40 2009 2014 41 123 725 40 2010 41 123 688 40 2010 46 2203 40 2014 44 762 2001 2204 41 41 123 688 40 2204 46 2205 323 2206 46 2207 41 792 752 59 792 2204 46 2208 59 125 2013 2031 61 2209 40 2014 41 59 688 40 2031 323 752 41 792 752 59 2010 46 2030 40 2014 44 744 2001 123 2080 61 2014 44 2210 61 2031 44 2211 61 2212 46 2213 125 41 59 792 2031 59 125 125 331 775 539 2013 2214 40 2009 2014 41 59 331 775 539 865 2215 40 2009 2014 44 2013 2031 41 59 125 ,"{'AvgLine': 21, 'CountLine': 440, 'CountStmt': 149, 'MaxNesting': 4, 'AvgLineCode': 21, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 115, 'MaxEssential': 6, 'SumEssential': 29, 'AvgCyclomatic': 4, 'CountLineCode': 302, 'CountStmtDecl': 39, 'MaxCyclomatic': 8, 'SumCyclomatic': 54, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 23, 'CountSemicolon': 96, 'CountDeclMethod': 20, 'CountLineCodeExe': 169, 'CountLineComment': 115, 'CountClassCoupled': 17, 'CountClassDerived': 3, 'CountDeclProperty': 0, 'CountLineCodeDecl': 42, 'CountLineInactive': 0, 'CountDeclMethodAll': 26, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.38', 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 11, 'SumCyclomaticStrict': 60, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodPublic': 13, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 38, 'SumCyclomaticModified': 52, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 19, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 7, 'CountClassCoupledModified': 11, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 30, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79857,C#,"    public sealed class OracleContract : NativeContract
    {
        private const int MaxUrlLength = 256;
        private const int MaxFilterLength = 128;
        private const int MaxCallbackLength = 32;
        private const int MaxUserDataLength = 512;

        private const byte Prefix_Price = 5;
        private const byte Prefix_RequestId = 9;
        private const byte Prefix_Request = 7;
        private const byte Prefix_IdList = 6;

        internal OracleContract()
        {
            var events = new List<ContractEventDescriptor>(Manifest.Abi.Events)
            {
                new ContractEventDescriptor
                {
                    Name = ""OracleRequest"",
                    Parameters = new ContractParameterDefinition[]
                    {
                        new ContractParameterDefinition()
                        {
                            Name = ""Id"",
                            Type = ContractParameterType.Integer
                        },
                        new ContractParameterDefinition()
                        {
                            Name = ""RequestContract"",
                            Type = ContractParameterType.Hash160
                        },
                        new ContractParameterDefinition()
                        {
                            Name = ""Url"",
                            Type = ContractParameterType.String
                        },
                        new ContractParameterDefinition()
                        {
                            Name = ""Filter"",
                            Type = ContractParameterType.String
                        }
                    }
                },
                new ContractEventDescriptor
                {
                    Name = ""OracleResponse"",
                    Parameters = new ContractParameterDefinition[]
                    {
                        new ContractParameterDefinition()
                        {
                            Name = ""Id"",
                            Type = ContractParameterType.Integer
                        },
                        new ContractParameterDefinition()
                        {
                            Name = ""OriginalTx"",
                            Type = ContractParameterType.Hash256
                        }
                    }
                }
            };

            Manifest.Abi.Events = events.ToArray();
        }

        [ContractMethod(CpuFee = 1 << 15, RequiredCallFlags = CallFlags.States)]
        private void SetPrice(ApplicationEngine engine, long price)
        {
            if (price <= 0)
                throw new ArgumentOutOfRangeException(nameof(price));
            if (!CheckCommittee(engine)) throw new InvalidOperationException();
            engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_Price)).Set(price);
        }

        /// <summary>
        /// Gets the price for an Oracle request.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <returns>The price for an Oracle request.</returns>
        [ContractMethod(CpuFee = 1 << 15, RequiredCallFlags = CallFlags.ReadStates)]
        public long GetPrice(DataCache snapshot)
        {
            return (long)(BigInteger)snapshot[CreateStorageKey(Prefix_Price)];
        }

        [ContractMethod(RequiredCallFlags = CallFlags.States | CallFlags.AllowCall | CallFlags.AllowNotify)]
        private ContractTask Finish(ApplicationEngine engine)
        {
            Transaction tx = (Transaction)engine.ScriptContainer;
            OracleResponse response = tx.GetAttribute<OracleResponse>();
            if (response == null) throw new ArgumentException(""Oracle response was not found"");
            OracleRequest request = GetRequest(engine.Snapshot, response.Id);
            if (request == null) throw new ArgumentException(""Oracle request was not found"");
            engine.SendNotification(Hash, ""OracleResponse"", new VM.Types.Array { response.Id, request.OriginalTxid.ToArray() });
            StackItem userData = BinarySerializer.Deserialize(request.UserData, engine.Limits, engine.ReferenceCounter);
            return engine.CallFromNativeContract(Hash, request.CallbackContract, request.CallbackMethod, request.Url, userData, (int)response.Code, response.Result);
        }

        private UInt256 GetOriginalTxid(ApplicationEngine engine)
        {
            Transaction tx = (Transaction)engine.ScriptContainer;
            OracleResponse response = tx.GetAttribute<OracleResponse>();
            if (response is null) return tx.Hash;
            OracleRequest request = GetRequest(engine.Snapshot, response.Id);
            return request.OriginalTxid;
        }

        /// <summary>
        /// Gets a pending request with the specified id.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""id"">The id of the request.</param>
        /// <returns>The pending request. Or <see langword=""null""/> if no request with the specified id is found.</returns>
        public OracleRequest GetRequest(DataCache snapshot, ulong id)
        {
            return snapshot.TryGet(CreateStorageKey(Prefix_Request).AddBigEndian(id))?.GetInteroperable<OracleRequest>();
        }

        /// <summary>
        /// Gets all the pending requests.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <returns>All the pending requests.</returns>
        public IEnumerable<(ulong, OracleRequest)> GetRequests(DataCache snapshot)
        {
            return snapshot.Find(CreateStorageKey(Prefix_Request).ToArray()).Select(p => (BinaryPrimitives.ReadUInt64BigEndian(p.Key.Key.AsSpan(1)), p.Value.GetInteroperable<OracleRequest>()));
        }

        /// <summary>
        /// Gets the requests with the specified url.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""url"">The url of the requests.</param>
        /// <returns>All the requests with the specified url.</returns>
        public IEnumerable<(ulong, OracleRequest)> GetRequestsByUrl(DataCache snapshot, string url)
        {
            IdList list = snapshot.TryGet(CreateStorageKey(Prefix_IdList).Add(GetUrlHash(url)))?.GetInteroperable<IdList>();
            if (list is null) yield break;
            foreach (ulong id in list)
                yield return (id, snapshot[CreateStorageKey(Prefix_Request).AddBigEndian(id)].GetInteroperable<OracleRequest>());
        }

        private static byte[] GetUrlHash(string url)
        {
            return Crypto.Hash160(Utility.StrictUTF8.GetBytes(url));
        }

        internal override ContractTask Initialize(ApplicationEngine engine)
        {
            engine.Snapshot.Add(CreateStorageKey(Prefix_RequestId), new StorageItem(BigInteger.Zero));
            engine.Snapshot.Add(CreateStorageKey(Prefix_Price), new StorageItem(0_50000000));
            return ContractTask.CompletedTask;
        }

        internal override async ContractTask PostPersist(ApplicationEngine engine)
        {
            (UInt160 Account, BigInteger GAS)[] nodes = null;
            foreach (Transaction tx in engine.PersistingBlock.Transactions)
            {
                //Filter the response transactions
                OracleResponse response = tx.GetAttribute<OracleResponse>();
                if (response is null) continue;

                //Remove the request from storage
                StorageKey key = CreateStorageKey(Prefix_Request).AddBigEndian(response.Id);
                OracleRequest request = engine.Snapshot.TryGet(key)?.GetInteroperable<OracleRequest>();
                if (request == null) continue;
                engine.Snapshot.Delete(key);

                //Remove the id from IdList
                key = CreateStorageKey(Prefix_IdList).Add(GetUrlHash(request.Url));
                IdList list = engine.Snapshot.GetAndChange(key).GetInteroperable<IdList>();
                if (!list.Remove(response.Id)) throw new InvalidOperationException();
                if (list.Count == 0) engine.Snapshot.Delete(key);

                //Mint GAS for oracle nodes
                nodes ??= RoleManagement.GetDesignatedByRole(engine.Snapshot, Role.Oracle, engine.PersistingBlock.Index).Select(p => (Contract.CreateSignatureRedeemScript(p).ToScriptHash(), BigInteger.Zero)).ToArray();
                if (nodes.Length > 0)
                {
                    int index = (int)(response.Id % (ulong)nodes.Length);
                    nodes[index].GAS += GetPrice(engine.Snapshot);
                }
            }
            if (nodes != null)
            {
                foreach (var (account, gas) in nodes)
                {
                    if (gas.Sign > 0)
                        await GAS.Mint(engine, account, gas, false);
                }
            }
        }

        [ContractMethod(RequiredCallFlags = CallFlags.States | CallFlags.AllowNotify)]
        private async ContractTask Request(ApplicationEngine engine, string url, string filter, string callback, StackItem userData, long gasForResponse)
        {
            //Check the arguments
            if (Utility.StrictUTF8.GetByteCount(url) > MaxUrlLength
                || (filter != null && Utility.StrictUTF8.GetByteCount(filter) > MaxFilterLength)
                || Utility.StrictUTF8.GetByteCount(callback) > MaxCallbackLength || callback.StartsWith('_')
                || gasForResponse < 0_10000000)
                throw new ArgumentException();

            engine.AddGas(GetPrice(engine.Snapshot));

            //Mint gas for the response
            engine.AddGas(gasForResponse);
            await GAS.Mint(engine, Hash, gasForResponse, false);

            //Increase the request id
            StorageItem item_id = engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_RequestId));
            ulong id = (ulong)(BigInteger)item_id;
            item_id.Add(1);

            //Put the request to storage
            if (ContractManagement.GetContract(engine.Snapshot, engine.CallingScriptHash) is null)
                throw new InvalidOperationException();
            engine.Snapshot.Add(CreateStorageKey(Prefix_Request).AddBigEndian(id), new StorageItem(new OracleRequest
            {
                OriginalTxid = GetOriginalTxid(engine),
                GasForResponse = gasForResponse,
                Url = url,
                Filter = filter,
                CallbackContract = engine.CallingScriptHash,
                CallbackMethod = callback,
                UserData = BinarySerializer.Serialize(userData, MaxUserDataLength)
            }));

            //Add the id to the IdList
            var list = engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_IdList).Add(GetUrlHash(url)), () => new StorageItem(new IdList())).GetInteroperable<IdList>();
            if (list.Count >= 256)
                throw new InvalidOperationException(""There are too many pending responses for this url"");
            list.Add(id);

            engine.SendNotification(Hash, ""OracleRequest"", new VM.Types.Array { id, engine.CallingScriptHash.ToArray(), url, filter ?? StackItem.Null });
        }

        [ContractMethod(CpuFee = 1 << 15)]
        private bool Verify(ApplicationEngine engine)
        {
            Transaction tx = (Transaction)engine.ScriptContainer;
            return tx?.GetAttribute<OracleResponse>() != null;
        }

        private class IdList : List<ulong>, IInteroperable
        {
            public void FromStackItem(StackItem stackItem)
            {
                foreach (StackItem item in (VM.Types.Array)stackItem)
                    Add((ulong)item.GetInteger());
            }

            public StackItem ToStackItem(ReferenceCounter referenceCounter)
            {
                return new VM.Types.Array(referenceCounter, this.Select(p => (Integer)p));
            }
        }
    }",1,777 798 587 2000 58 2001 123 773 601 704 2002 61 1504 59 773 601 704 2003 61 1504 59 773 601 704 2004 61 1503 59 773 601 704 2005 61 1504 59 773 601 574 2006 61 1502 59 773 601 574 2007 61 1502 59 773 601 574 2008 61 1502 59 773 601 574 2009 61 1502 59 710 2000 40 41 123 2010 2011 61 744 2012 60 2013 62 40 2014 46 2015 46 2016 41 123 744 2013 123 2017 61 362 44 2018 61 744 2019 91 93 123 744 2019 40 41 123 2017 61 362 44 2020 61 2021 46 2022 125 44 744 2019 40 41 123 2017 61 362 44 2023 61 2024 46 2025 125 44 744 2019 40 41 123 2017 61 362 44 2026 61 2027 46 2028 125 44 744 2019 40 41 123 2017 61 362 44 2029 61 2030 46 2031 125 125 125 44 744 2013 123 2032 61 362 44 2033 61 744 2034 91 93 123 744 2034 40 41 123 2032 61 362 44 2035 61 2036 46 2037 125 44 744 2034 40 41 123 2032 61 362 44 2038 61 2039 46 2040 125 125 125 125 59 2014 46 2015 46 2016 61 2011 46 2041 40 41 59 125 91 2042 40 2043 61 1501 332 1503 44 2044 61 2045 46 2046 41 93 773 865 2047 40 2048 2049 44 726 2050 41 123 688 40 2050 329 1500 41 825 744 2051 40 2052 40 2050 41 41 59 688 40 33 2053 40 2049 41 41 825 744 2054 40 41 59 2049 46 2055 46 2056 40 2057 40 2006 41 41 46 2058 40 2050 41 59 125 331 91 2042 40 2043 61 1501 332 1503 44 2044 61 2045 46 2059 41 93 777 726 2060 40 2061 2062 41 123 792 40 726 41 40 2063 41 2062 91 2064 40 2006 41 93 59 125 91 2042 40 2044 61 2045 46 2046 124 2045 46 2065 124 2045 46 2066 41 93 773 2067 2068 40 2048 2049 41 123 2069 2070 61 40 2069 41 2049 46 2071 59 2072 2073 61 2070 46 2074 60 2072 62 40 41 59 688 40 2073 323 752 41 825 744 2075 40 362 41 59 2076 2077 61 2078 40 2049 46 2079 44 2073 46 2080 41 59 688 40 2077 323 752 41 825 744 2075 40 362 41 59 2049 46 2081 40 2082 44 362 44 744 2083 46 2084 46 2085 123 2073 46 2080 44 2077 46 2086 46 2087 40 41 125 41 59 2088 2089 61 2090 46 2091 40 2077 46 2092 44 2049 46 2093 44 2049 46 2094 41 59 792 2049 46 2095 40 2082 44 2077 46 2096 44 2077 46 2097 44 2077 46 2098 44 2089 44 40 704 41 2073 46 2099 44 2073 46 2100 41 59 125 773 2101 2102 40 2048 2049 41 123 2103 2104 61 40 2103 41 2049 46 2105 59 2106 2107 61 2104 46 2108 60 2106 62 40 41 59 688 40 2107 712 752 41 792 2104 46 2109 59 2110 2111 61 2112 40 2049 46 2113 44 2107 46 2114 41 59 792 2111 46 2115 59 125 331 777 2116 2117 40 2061 2062 44 848 2118 41 123 792 2062 46 2119 40 2120 40 2008 41 46 2121 40 2118 41 41 346 2122 60 2116 62 40 41 59 125 331 777 2123 60 40 848 44 2116 41 62 2124 40 2061 2062 41 123 792 2062 46 2125 40 2126 40 2008 41 46 2127 40 41 41 46 2128 40 2129 328 40 2130 46 2131 40 2129 46 2132 46 2132 46 2133 40 1501 41 41 44 2129 46 2134 46 2135 60 2116 62 40 41 41 41 59 125 331 777 2123 60 40 848 44 2116 41 62 2136 40 2061 2062 44 815 2137 41 123 2138 2139 61 2062 46 2140 40 2141 40 2009 41 46 2142 40 2143 40 2137 41 41 41 346 2144 60 2138 62 40 41 59 688 40 2139 712 752 41 2145 572 59 665 40 848 2118 696 2139 41 2145 792 40 2118 44 2062 91 2141 40 2008 41 46 2146 40 2118 41 93 46 2144 60 2116 62 40 41 41 59 125 773 809 574 91 93 2147 40 815 2137 41 123 792 2148 46 2149 40 2150 46 2151 46 2152 40 2137 41 41 59 125 710 763 2067 2153 40 2048 2049 41 123 2049 46 2154 46 2155 40 2156 40 2007 41 44 744 2157 40 2158 46 2159 41 41 59 2049 46 2154 46 2155 40 2156 40 2006 41 44 744 2157 40 1500 41 41 59 792 2067 46 2160 59 125 710 763 2161 2067 2162 40 2048 2049 41 123 40 2163 2164 44 2165 2166 41 91 93 2167 61 752 59 665 40 2168 2169 696 2049 46 2170 46 2171 41 123 330 2172 2173 61 2169 46 2174 60 2172 62 40 41 59 688 40 2173 712 752 41 605 59 330 2175 2176 61 2177 40 2008 41 46 2178 40 2173 46 2179 41 59 2116 2180 61 2049 46 2181 46 2182 40 2176 41 346 2183 60 2116 62 40 41 59 688 40 2180 323 752 41 605 59 2049 46 2181 46 2184 40 2176 41 59 330 2176 61 2177 40 2009 41 46 2185 40 2147 40 2180 46 2186 41 41 59 2187 2188 61 2049 46 2181 46 2189 40 2176 41 46 2183 60 2187 62 40 41 59 688 40 33 2188 46 2190 40 2173 46 2179 41 41 825 744 2191 40 41 59 688 40 2188 46 2192 323 1500 41 2049 46 2181 46 2184 40 2176 41 59 330 2167 343 61 2193 46 2194 40 2049 46 2181 44 2195 46 2196 44 2049 46 2170 46 2197 41 46 2198 40 2199 328 40 2200 46 2201 40 2199 41 46 2202 40 41 44 2165 46 2203 41 41 46 2204 40 41 59 688 40 2167 46 2205 62 1500 41 123 704 2206 61 40 704 41 40 2173 46 2179 37 40 848 41 2167 46 2205 41 59 2167 91 2206 93 46 2166 348 2060 40 2049 46 2181 41 59 125 125 688 40 2167 340 752 41 123 665 40 2207 40 2208 44 2209 41 696 2167 41 123 688 40 2209 46 2210 62 1500 41 2211 2166 46 2212 40 2049 44 2208 44 2209 44 655 41 59 125 125 125 91 2042 40 2044 61 2045 46 2046 124 2045 46 2066 41 93 773 2161 2067 2213 40 2048 2049 44 815 2137 44 815 2214 44 815 2215 44 2216 2217 44 726 2218 41 123 330 688 40 2219 46 2220 46 2221 40 2137 41 62 2002 309 40 2214 340 752 307 2219 46 2220 46 2221 40 2214 41 62 2003 41 309 2219 46 2220 46 2221 40 2215 41 62 2004 309 2215 46 2222 40 314 41 309 2218 60 1500 41 825 744 2223 40 41 59 2049 46 2224 40 2060 40 2049 46 2225 41 41 59 330 2049 46 2224 40 2218 41 59 2226 2227 46 2228 40 2049 44 2229 44 2218 44 655 41 59 330 2230 2231 61 2049 46 2225 46 2232 40 2233 40 2007 41 41 59 848 2118 61 40 848 41 40 2234 41 2231 59 2231 46 2235 40 1501 41 59 330 688 40 2236 46 2237 40 2049 46 2225 44 2049 46 2238 41 712 752 41 825 744 2239 40 41 59 2049 46 2225 46 2235 40 2233 40 2008 41 46 2240 40 2118 41 44 744 2230 40 744 2116 123 2241 61 2102 40 2049 41 44 2242 61 2218 44 2243 61 2137 44 2244 61 2214 44 2245 61 2049 46 2238 44 2246 61 2215 44 2247 61 2248 46 2249 40 2217 44 2005 41 125 41 41 59 330 2250 2251 61 2049 46 2225 46 2232 40 2233 40 2009 41 46 2235 40 2147 40 2137 41 41 44 40 41 328 744 2230 40 744 2252 40 41 41 41 46 2253 60 2252 62 40 41 59 688 40 2251 46 2254 325 1504 41 825 744 2239 40 362 41 59 2251 46 2235 40 2118 41 59 2049 46 2255 40 2229 44 362 44 744 2256 46 2257 46 2258 123 2118 44 2049 46 2238 46 2259 40 41 44 2137 44 2214 343 2216 46 2260 125 41 59 125 91 2042 40 2043 61 1501 332 1503 41 93 773 569 2261 40 2048 2049 41 123 2262 2263 61 40 2262 41 2049 46 2264 59 792 2263 346 2265 60 2266 62 40 41 340 752 59 125 773 587 2267 58 2268 60 848 62 44 2269 123 777 865 2270 40 2216 2271 41 123 665 40 2216 2272 696 40 2273 46 2274 46 2275 41 2271 41 2276 40 40 848 41 2272 46 2277 40 41 41 59 125 777 2216 2278 40 2279 2280 41 123 792 744 2281 46 2282 46 2283 40 2280 44 823 46 2284 40 2285 328 40 2286 41 2285 41 41 59 125 125 125 ,"{'AvgLine': 14, 'CountLine': 258, 'CountStmt': 105, 'MaxNesting': 3, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 74, 'MaxEssential': 5, 'SumEssential': 27, 'AvgCyclomatic': 2, 'CountLineCode': 201, 'CountStmtDecl': 44, 'MaxCyclomatic': 11, 'SumCyclomatic': 36, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 26, 'CountSemicolon': 68, 'CountDeclMethod': 13, 'CountLineCodeExe': 111, 'CountLineComment': 31, 'CountClassCoupled': 43, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 50, 'CountLineInactive': 0, 'CountDeclMethodAll': 43, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.15', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 11, 'SumCyclomaticStrict': 41, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 4, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 11, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 36, 'CountDeclClassVariable': 8, 'CountDeclMethodPrivate': 6, 'CountDeclInstanceMethod': 12, 'CountDeclMethodInternal': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 33, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79982,C#,"    public class UT_MemoryPool : TestKit
    {
        private static NeoSystem testBlockchain;

        private const byte Prefix_MaxTransactionsPerBlock = 23;
        private const byte Prefix_FeePerByte = 10;
        private readonly UInt160 senderAccount = UInt160.Zero;
        private MemoryPool _unit;
        private MemoryPool _unit2;
        private TestIMemoryPoolTxObserverPlugin plugin;

        [ClassInitialize]
        public static void TestSetup(TestContext ctx)
        {
            testBlockchain = TestBlockchain.TheNeoSystem;
        }

        private static DataCache GetSnapshot()
        {
            return testBlockchain.StoreView.CreateSnapshot();
        }

        [TestInitialize]
        public void TestSetup()
        {
            // protect against external changes on TimeProvider
            TimeProvider.ResetToDefault();

            // Create a MemoryPool with capacity of 100
            _unit = new MemoryPool(new NeoSystem(ProtocolSettings.Default with { MemoryPoolMaxTransactions = 100 }));

            // Verify capacity equals the amount specified
            _unit.Capacity.Should().Be(100);

            _unit.VerifiedCount.Should().Be(0);
            _unit.UnVerifiedCount.Should().Be(0);
            _unit.Count.Should().Be(0);
            _unit2 = new MemoryPool(new NeoSystem(ProtocolSettings.Default with { MemoryPoolMaxTransactions = 0 }));
            plugin = new TestIMemoryPoolTxObserverPlugin();
        }

        [TestCleanup]
        public void CleanUp()
        {
            Plugin.TxObserverPlugins.Remove(plugin);
        }

        private static long LongRandom(long min, long max, Random rand)
        {
            // Only returns positive random long values.
            long longRand = (long)rand.NextBigInteger(63);
            return longRand % (max - min) + min;
        }

        private Transaction CreateTransactionWithFee(long fee)
        {
            Random random = new();
            var randomBytes = new byte[16];
            random.NextBytes(randomBytes);
            Mock<Transaction> mock = new();
            mock.Setup(p => p.VerifyStateDependent(It.IsAny<ProtocolSettings>(), It.IsAny<DataCache>(), It.IsAny<TransactionVerificationContext>())).Returns(VerifyResult.Succeed);
            mock.Setup(p => p.VerifyStateIndependent(It.IsAny<ProtocolSettings>())).Returns(VerifyResult.Succeed);
            mock.Object.Script = randomBytes;
            mock.Object.NetworkFee = fee;
            mock.Object.Attributes = Array.Empty<TransactionAttribute>();
            mock.Object.Signers = new Signer[] { new Signer() { Account = senderAccount, Scopes = WitnessScope.None } };
            mock.Object.Witnesses = new[]
            {
                new Witness
                {
                    InvocationScript = Array.Empty<byte>(),
                    VerificationScript = Array.Empty<byte>()
                }
            };
            return mock.Object;
        }

        private Transaction CreateTransactionWithFeeAndBalanceVerify(long fee)
        {
            Random random = new();
            var randomBytes = new byte[16];
            random.NextBytes(randomBytes);
            Mock<Transaction> mock = new();
            UInt160 sender = senderAccount;
            mock.Setup(p => p.VerifyStateDependent(It.IsAny<ProtocolSettings>(), It.IsAny<DataCache>(), It.IsAny<TransactionVerificationContext>())).Returns((ProtocolSettings settings, DataCache snapshot, TransactionVerificationContext context) => context.CheckTransaction(mock.Object, snapshot) ? VerifyResult.Succeed : VerifyResult.InsufficientFunds);
            mock.Setup(p => p.VerifyStateIndependent(It.IsAny<ProtocolSettings>())).Returns(VerifyResult.Succeed);
            mock.Object.Script = randomBytes;
            mock.Object.NetworkFee = fee;
            mock.Object.Attributes = Array.Empty<TransactionAttribute>();
            mock.Object.Signers = new Signer[] { new Signer() { Account = senderAccount, Scopes = WitnessScope.None } };
            mock.Object.Witnesses = new[]
            {
                new Witness
                {
                    InvocationScript = Array.Empty<byte>(),
                    VerificationScript = Array.Empty<byte>()
                }
            };
            return mock.Object;
        }

        private Transaction CreateTransaction(long fee = -1)
        {
            if (fee != -1)
                return CreateTransactionWithFee(fee);
            return CreateTransactionWithFee(LongRandom(100000, 100000000, TestUtils.TestRandom));
        }

        private void AddTransactions(int count)
        {
            var snapshot = GetSnapshot();
            for (int i = 0; i < count; i++)
            {
                var txToAdd = CreateTransaction();
                _unit.TryAdd(txToAdd, snapshot);
            }

            Console.WriteLine($""created {count} tx"");
        }

        private void AddTransaction(Transaction txToAdd)
        {
            var snapshot = GetSnapshot();
            _unit.TryAdd(txToAdd, snapshot);
        }

        private void AddTransactionsWithBalanceVerify(int count, long fee, DataCache snapshot)
        {
            for (int i = 0; i < count; i++)
            {
                var txToAdd = CreateTransactionWithFeeAndBalanceVerify(fee);
                _unit.TryAdd(txToAdd, snapshot);
            }

            Console.WriteLine($""created {count} tx"");
        }

        [TestMethod]
        public void CapacityTest()
        {
            // Add over the capacity items, verify that the verified count increases each time
            AddTransactions(101);

            Console.WriteLine($""VerifiedCount: {_unit.VerifiedCount} Count {_unit.SortedTxCount}"");

            _unit.SortedTxCount.Should().Be(100);
            _unit.VerifiedCount.Should().Be(100);
            _unit.UnVerifiedCount.Should().Be(0);
            _unit.Count.Should().Be(100);
        }

        [TestMethod]
        public void BlockPersistMovesTxToUnverifiedAndReverification()
        {
            AddTransactions(70);

            _unit.SortedTxCount.Should().Be(70);

            var block = new Block
            {
                Header = new Header(),
                Transactions = _unit.GetSortedVerifiedTransactions().Take(10)
                    .Concat(_unit.GetSortedVerifiedTransactions().Take(5)).ToArray()
            };
            _unit.UpdatePoolForBlockPersisted(block, GetSnapshot());
            _unit.InvalidateVerifiedTransactions();
            _unit.SortedTxCount.Should().Be(0);
            _unit.UnverifiedSortedTxCount.Should().Be(60);

            _unit.ReVerifyTopUnverifiedTransactionsIfNeeded(10, GetSnapshot());
            _unit.SortedTxCount.Should().Be(10);
            _unit.UnverifiedSortedTxCount.Should().Be(50);

            _unit.ReVerifyTopUnverifiedTransactionsIfNeeded(10, GetSnapshot());
            _unit.SortedTxCount.Should().Be(20);
            _unit.UnverifiedSortedTxCount.Should().Be(40);

            _unit.ReVerifyTopUnverifiedTransactionsIfNeeded(10, GetSnapshot());
            _unit.SortedTxCount.Should().Be(30);
            _unit.UnverifiedSortedTxCount.Should().Be(30);

            _unit.ReVerifyTopUnverifiedTransactionsIfNeeded(10, GetSnapshot());
            _unit.SortedTxCount.Should().Be(40);
            _unit.UnverifiedSortedTxCount.Should().Be(20);

            _unit.ReVerifyTopUnverifiedTransactionsIfNeeded(10, GetSnapshot());
            _unit.SortedTxCount.Should().Be(50);
            _unit.UnverifiedSortedTxCount.Should().Be(10);

            _unit.ReVerifyTopUnverifiedTransactionsIfNeeded(10, GetSnapshot());
            _unit.SortedTxCount.Should().Be(60);
            _unit.UnverifiedSortedTxCount.Should().Be(0);
        }

        [TestMethod]
        public async Task BlockPersistAndReverificationWillAbandonTxAsBalanceTransfered()
        {
            var snapshot = GetSnapshot();
            BigInteger balance = NativeContract.GAS.BalanceOf(snapshot, senderAccount);
            ApplicationEngine engine = ApplicationEngine.Create(TriggerType.Application, null, snapshot, settings: TestBlockchain.TheNeoSystem.Settings, gas: long.MaxValue);
            await NativeContract.GAS.Burn(engine, UInt160.Zero, balance);
            _ = NativeContract.GAS.Mint(engine, UInt160.Zero, 70, true);

            long txFee = 1;
            AddTransactionsWithBalanceVerify(70, txFee, snapshot);

            _unit.SortedTxCount.Should().Be(70);

            var block = new Block
            {
                Header = new Header(),
                Transactions = _unit.GetSortedVerifiedTransactions().Take(10).ToArray()
            };

            // Simulate the transfer process in tx by burning the balance
            UInt160 sender = block.Transactions[0].Sender;

            ApplicationEngine applicationEngine = ApplicationEngine.Create(TriggerType.All, block, snapshot, block, settings: TestBlockchain.TheNeoSystem.Settings, gas: (long)balance);
            await NativeContract.GAS.Burn(applicationEngine, sender, NativeContract.GAS.BalanceOf(snapshot, sender));
            _ = NativeContract.GAS.Mint(applicationEngine, sender, txFee * 30, true); // Set the balance to meet 30 txs only

            // Persist block and reverify all the txs in mempool, but half of the txs will be discarded
            _unit.UpdatePoolForBlockPersisted(block, snapshot);
            _unit.SortedTxCount.Should().Be(30);
            _unit.UnverifiedSortedTxCount.Should().Be(0);

            // Revert the balance
            await NativeContract.GAS.Burn(applicationEngine, sender, txFee * 30);
            _ = NativeContract.GAS.Mint(applicationEngine, sender, balance, true);
        }

        private static void VerifyTransactionsSortedDescending(IEnumerable<Transaction> transactions)
        {
            Transaction lastTransaction = null;
            foreach (var tx in transactions)
            {
                if (lastTransaction != null)
                {
                    if (lastTransaction.FeePerByte == tx.FeePerByte)
                    {
                        if (lastTransaction.NetworkFee == tx.NetworkFee)
                            lastTransaction.Hash.Should().BeLessThan(tx.Hash);
                        else
                            lastTransaction.NetworkFee.Should().BeGreaterThan(tx.NetworkFee);
                    }
                    else
                    {
                        lastTransaction.FeePerByte.Should().BeGreaterThan(tx.FeePerByte);
                    }
                }
                lastTransaction = tx;
            }
        }

        [TestMethod]
        public void VerifySortOrderAndThatHighetFeeTransactionsAreReverifiedFirst()
        {
            AddTransactions(100);

            var sortedVerifiedTxs = _unit.GetSortedVerifiedTransactions().ToList();
            // verify all 100 transactions are returned in sorted order
            sortedVerifiedTxs.Count.Should().Be(100);
            VerifyTransactionsSortedDescending(sortedVerifiedTxs);

            // move all to unverified
            var block = new Block
            {
                Header = new Header(),
                Transactions = Array.Empty<Transaction>()
            };
            _unit.UpdatePoolForBlockPersisted(block, GetSnapshot());
            _unit.InvalidateVerifiedTransactions();
            _unit.SortedTxCount.Should().Be(0);
            _unit.UnverifiedSortedTxCount.Should().Be(100);

            // We can verify the order they are re-verified by reverifying 2 at a time
            while (_unit.UnVerifiedCount > 0)
            {
                _unit.GetVerifiedAndUnverifiedTransactions(out var sortedVerifiedTransactions, out var sortedUnverifiedTransactions);
                sortedVerifiedTransactions.Count().Should().Be(0);
                var sortedUnverifiedArray = sortedUnverifiedTransactions.ToArray();
                VerifyTransactionsSortedDescending(sortedUnverifiedArray);
                var maxTransaction = sortedUnverifiedArray.First();
                var minTransaction = sortedUnverifiedArray.Last();

                // reverify 1 high priority and 1 low priority transaction
                _unit.ReVerifyTopUnverifiedTransactionsIfNeeded(1, GetSnapshot());
                var verifiedTxs = _unit.GetSortedVerifiedTransactions().ToArray();
                verifiedTxs.Length.Should().Be(1);
                verifiedTxs[0].Should().BeEquivalentTo(maxTransaction);
                var blockWith2Tx = new Block
                {
                    Header = new Header(),
                    Transactions = new[] { maxTransaction, minTransaction }
                };
                // verify and remove the 2 transactions from the verified pool
                _unit.UpdatePoolForBlockPersisted(blockWith2Tx, GetSnapshot());
                _unit.InvalidateVerifiedTransactions();
                _unit.SortedTxCount.Should().Be(0);
            }
            _unit.UnverifiedSortedTxCount.Should().Be(0);
        }

        void VerifyCapacityThresholdForAttemptingToAddATransaction()
        {
            var sortedVerified = _unit.GetSortedVerifiedTransactions().ToArray();

            var txBarelyWontFit = CreateTransactionWithFee(sortedVerified.Last().NetworkFee - 1);
            _unit.CanTransactionFitInPool(txBarelyWontFit).Should().Be(false);
            var txBarelyFits = CreateTransactionWithFee(sortedVerified.Last().NetworkFee + 1);
            _unit.CanTransactionFitInPool(txBarelyFits).Should().Be(true);
        }

        [TestMethod]
        public void VerifyCanTransactionFitInPoolWorksAsIntended()
        {
            AddTransactions(100);
            VerifyCapacityThresholdForAttemptingToAddATransaction();
            AddTransactions(50);
            VerifyCapacityThresholdForAttemptingToAddATransaction();
            AddTransactions(50);
            VerifyCapacityThresholdForAttemptingToAddATransaction();
        }

        [TestMethod]
        public void CapacityTestWithUnverifiedHighProirtyTransactions()
        {
            // Verify that unverified high priority transactions will not be pushed out of the queue by incoming
            // low priority transactions

            // Fill pool with high priority transactions
            AddTransactions(99);

            // move all to unverified
            var block = new Block
            {
                Header = new Header(),
                Transactions = Array.Empty<Transaction>()
            };
            _unit.UpdatePoolForBlockPersisted(block, GetSnapshot());

            _unit.CanTransactionFitInPool(CreateTransaction()).Should().Be(true);
            AddTransactions(1);
            _unit.CanTransactionFitInPool(CreateTransactionWithFee(0)).Should().Be(false);
        }

        [TestMethod]
        public void TestInvalidateAll()
        {
            AddTransactions(30);

            _unit.UnverifiedSortedTxCount.Should().Be(0);
            _unit.SortedTxCount.Should().Be(30);
            _unit.InvalidateAllTransactions();
            _unit.UnverifiedSortedTxCount.Should().Be(30);
            _unit.SortedTxCount.Should().Be(0);
        }

        [TestMethod]
        public void TestContainsKey()
        {
            var snapshot = GetSnapshot();
            AddTransactions(10);

            var txToAdd = CreateTransaction();
            _unit.TryAdd(txToAdd, snapshot);
            _unit.ContainsKey(txToAdd.Hash).Should().BeTrue();
            _unit.InvalidateVerifiedTransactions();
            _unit.ContainsKey(txToAdd.Hash).Should().BeTrue();
        }

        [TestMethod]
        public void TestGetEnumerator()
        {
            AddTransactions(10);
            _unit.InvalidateVerifiedTransactions();
            IEnumerator<Transaction> enumerator = _unit.GetEnumerator();
            foreach (Transaction tx in _unit)
            {
                enumerator.MoveNext();
                enumerator.Current.Should().BeSameAs(tx);
            }
        }

        [TestMethod]
        public void TestIEnumerableGetEnumerator()
        {
            AddTransactions(10);
            _unit.InvalidateVerifiedTransactions();
            IEnumerable enumerable = _unit;
            var enumerator = enumerable.GetEnumerator();
            foreach (Transaction tx in _unit)
            {
                enumerator.MoveNext();
                enumerator.Current.Should().BeSameAs(tx);
            }
        }

        [TestMethod]
        public void TestGetVerifiedTransactions()
        {
            var snapshot = GetSnapshot();
            var tx1 = CreateTransaction();
            var tx2 = CreateTransaction();
            _unit.TryAdd(tx1, snapshot);
            _unit.InvalidateVerifiedTransactions();
            _unit.TryAdd(tx2, snapshot);
            IEnumerable<Transaction> enumerable = _unit.GetVerifiedTransactions();
            enumerable.Count().Should().Be(1);
            var enumerator = enumerable.GetEnumerator();
            enumerator.MoveNext();
            enumerator.Current.Should().BeSameAs(tx2);
        }

        [TestMethod]
        public void TestReVerifyTopUnverifiedTransactionsIfNeeded()
        {
            _unit = new MemoryPool(new NeoSystem(ProtocolSettings.Default with { MemoryPoolMaxTransactions = 600 }));

            AddTransaction(CreateTransaction(100000001));
            AddTransaction(CreateTransaction(100000001));
            AddTransaction(CreateTransaction(100000001));
            AddTransaction(CreateTransaction(1));
            _unit.VerifiedCount.Should().Be(4);
            _unit.UnVerifiedCount.Should().Be(0);

            _unit.InvalidateVerifiedTransactions();
            _unit.VerifiedCount.Should().Be(0);
            _unit.UnVerifiedCount.Should().Be(4);

            AddTransactions(511); // Max per block currently is 512
            _unit.VerifiedCount.Should().Be(511);
            _unit.UnVerifiedCount.Should().Be(4);

            var result = _unit.ReVerifyTopUnverifiedTransactionsIfNeeded(1, GetSnapshot());
            result.Should().BeTrue();
            _unit.VerifiedCount.Should().Be(512);
            _unit.UnVerifiedCount.Should().Be(3);

            result = _unit.ReVerifyTopUnverifiedTransactionsIfNeeded(2, GetSnapshot());
            result.Should().BeTrue();
            _unit.VerifiedCount.Should().Be(514);
            _unit.UnVerifiedCount.Should().Be(1);

            result = _unit.ReVerifyTopUnverifiedTransactionsIfNeeded(3, GetSnapshot());
            result.Should().BeFalse();
            _unit.VerifiedCount.Should().Be(515);
            _unit.UnVerifiedCount.Should().Be(0);
        }

        [TestMethod]
        public void TestTryAdd()
        {
            var snapshot = GetSnapshot();
            var tx1 = CreateTransaction();
            _unit.TryAdd(tx1, snapshot).Should().Be(VerifyResult.Succeed);
            _unit.TryAdd(tx1, snapshot).Should().NotBe(VerifyResult.Succeed);
            _unit2.TryAdd(tx1, snapshot).Should().NotBe(VerifyResult.Succeed);
        }

        [TestMethod]
        public void TestTryGetValue()
        {
            var snapshot = GetSnapshot();
            var tx1 = CreateTransaction();
            _unit.TryAdd(tx1, snapshot);
            _unit.TryGetValue(tx1.Hash, out Transaction tx).Should().BeTrue();
            tx.Should().BeEquivalentTo(tx1);

            _unit.InvalidateVerifiedTransactions();
            _unit.TryGetValue(tx1.Hash, out tx).Should().BeTrue();
            tx.Should().BeEquivalentTo(tx1);

            var tx2 = CreateTransaction();
            _unit.TryGetValue(tx2.Hash, out _).Should().BeFalse();
        }

        [TestMethod]
        public void TestUpdatePoolForBlockPersisted()
        {
            var snapshot = GetSnapshot();
            byte[] transactionsPerBlock = { 0x18, 0x00, 0x00, 0x00 }; // 24
            byte[] feePerByte = { 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00 }; // 1048576
            StorageItem item1 = new()
            {
                Value = transactionsPerBlock
            };
            StorageItem item2 = new()
            {
                Value = feePerByte
            };
            var key1 = CreateStorageKey(Prefix_MaxTransactionsPerBlock);
            var key2 = CreateStorageKey(Prefix_FeePerByte);
            key1.Id = NativeContract.Policy.Id;
            key2.Id = NativeContract.Policy.Id;
            snapshot.Add(key1, item1);
            snapshot.Add(key2, item2);

            var tx1 = CreateTransaction();
            var tx2 = CreateTransaction();
            Transaction[] transactions = { tx1, tx2 };
            _unit.TryAdd(tx1, snapshot);

            var block = new Block
            {
                Header = new Header(),
                Transactions = transactions
            };

            _unit.UnVerifiedCount.Should().Be(0);
            _unit.VerifiedCount.Should().Be(1);

            _unit.UpdatePoolForBlockPersisted(block, snapshot);

            _unit.UnVerifiedCount.Should().Be(0);
            _unit.VerifiedCount.Should().Be(0);
        }

        public static StorageKey CreateStorageKey(byte prefix, byte[] key = null)
        {
            StorageKey storageKey = new()
            {
                Id = 0,
                Key = new byte[sizeof(byte) + (key?.Length ?? 0)]
            };
            storageKey.Key[0] = prefix;
            if (key != null)
                Buffer.BlockCopy(key, 0, storageKey.Key, 1, key.Length);
            return storageKey;
        }
    }",1,777 587 2000 58 2001 123 773 809 2002 2003 59 773 601 574 2004 61 1503 59 773 601 574 2005 61 1502 59 773 780 2006 2007 61 2006 46 2008 59 773 2009 2010 59 773 2009 2011 59 773 2012 2013 59 91 2014 93 777 809 865 2015 40 2016 2017 41 123 2003 61 2018 46 2019 59 125 773 809 2020 2021 40 41 123 792 2003 46 2022 46 2023 40 41 59 125 91 2024 93 777 865 2015 40 41 123 330 2025 46 2026 40 41 59 330 2010 61 744 2009 40 744 2002 40 2027 46 2028 2029 123 2030 61 1503 125 41 41 59 330 2010 46 2031 46 2032 40 41 46 2033 40 1503 41 59 2010 46 2034 46 2032 40 41 46 2033 40 1500 41 59 2010 46 2035 46 2032 40 41 46 2033 40 1500 41 59 2010 46 2036 46 2032 40 41 46 2033 40 1500 41 59 2011 61 744 2009 40 744 2002 40 2027 46 2028 2029 123 2037 61 1500 125 41 41 59 2013 61 744 2012 40 41 59 125 91 2038 93 777 865 2039 40 41 123 2040 46 2041 46 2042 40 2013 41 59 125 773 809 726 2043 40 726 2044 44 726 2045 44 2046 2047 41 123 330 726 2048 61 40 726 41 2047 46 2049 40 1503 41 59 792 2048 37 40 2045 45 2044 41 43 2044 59 125 773 2050 2051 40 726 2052 41 123 2046 2053 61 744 40 41 59 2054 2055 61 744 574 91 1503 93 59 2053 46 2056 40 2055 41 59 2057 60 2050 62 2058 61 744 40 41 59 2058 46 2059 40 2060 328 2060 46 2061 40 2062 46 2063 60 2064 62 40 41 44 2062 46 2063 60 2020 62 40 41 44 2062 46 2063 60 2065 62 40 41 41 41 46 2066 40 2067 46 2068 41 59 2058 46 2059 40 2060 328 2060 46 2069 40 2062 46 2063 60 2064 62 40 41 41 41 46 2066 40 2067 46 2068 41 59 2058 46 2070 46 2071 61 2055 59 2058 46 2070 46 2072 61 2052 59 2058 46 2070 46 2073 61 2074 46 2075 60 2076 62 40 41 59 2058 46 2070 46 2077 61 744 2078 91 93 123 744 2078 40 41 123 2079 61 2007 44 2080 61 2081 46 2082 125 125 59 2058 46 2070 46 2083 61 744 91 93 123 744 2084 123 2085 61 2074 46 2075 60 574 62 40 41 44 2086 61 2074 46 2075 60 574 62 40 41 125 125 59 792 2058 46 2070 59 125 773 2050 2087 40 726 2052 41 123 2046 2088 61 744 40 41 59 2089 2090 61 744 574 91 1503 93 59 2088 46 2091 40 2090 41 59 2092 60 2050 62 2093 61 744 40 41 59 2006 2094 61 2007 59 2093 46 2095 40 2096 328 2096 46 2097 40 2098 46 2099 60 2100 62 40 41 44 2098 46 2099 60 2020 62 40 41 44 2098 46 2099 60 2101 62 40 41 41 41 46 2102 40 40 2100 2103 44 2020 2104 44 2101 2105 41 328 2105 46 2106 40 2093 46 2107 44 2104 41 63 2108 46 2109 58 2108 46 2110 41 59 2093 46 2095 40 2096 328 2096 46 2111 40 2098 46 2099 60 2100 62 40 41 41 41 46 2102 40 2108 46 2109 41 59 2093 46 2107 46 2112 61 2090 59 2093 46 2107 46 2113 61 2052 59 2093 46 2107 46 2114 61 2115 46 2116 60 2117 62 40 41 59 2093 46 2107 46 2118 61 744 2119 91 93 123 744 2119 40 41 123 2120 61 2007 44 2121 61 2122 46 2123 125 125 59 2093 46 2107 46 2124 61 744 91 93 123 744 2125 123 2126 61 2115 46 2116 60 574 62 40 41 44 2127 61 2115 46 2116 60 574 62 40 41 125 125 59 792 2093 46 2107 59 125 773 2050 2128 40 726 2052 61 45 1501 41 123 688 40 2052 340 45 1501 41 792 2051 40 2052 41 59 792 2051 40 2043 40 1506 44 1509 44 2129 46 2130 41 41 59 125 773 865 2131 40 704 2132 41 123 2133 2134 61 2021 40 41 59 664 40 704 2135 61 1500 59 2135 60 2132 59 2135 349 41 123 2133 2136 61 2128 40 41 59 2010 46 2137 40 2136 44 2134 41 59 125 2138 46 2139 40 36 362 41 59 125 773 865 2140 40 2050 2141 41 123 2142 2143 61 2021 40 41 59 2010 46 2144 40 2141 44 2143 41 59 125 773 865 2145 40 704 2132 44 726 2052 44 2020 2146 41 123 664 40 704 2147 61 1500 59 2147 60 2132 59 2147 349 41 123 2148 2141 61 2087 40 2052 41 59 2010 46 2149 40 2141 44 2146 41 59 125 2150 46 2151 40 36 362 41 59 125 91 2152 93 777 865 2153 40 41 123 330 2131 40 1504 41 59 2154 46 2155 40 36 362 41 59 2010 46 2156 46 2157 40 41 46 2158 40 1503 41 59 2010 46 2159 46 2157 40 41 46 2158 40 1503 41 59 2010 46 2160 46 2157 40 41 46 2158 40 1500 41 59 2010 46 2161 46 2157 40 41 46 2158 40 1503 41 59 125 91 2152 93 777 865 2162 40 41 123 2131 40 1503 41 59 2010 46 2163 46 2164 40 41 46 2165 40 1503 41 59 2166 2167 61 744 2168 123 2169 61 744 2169 40 41 44 2170 61 2010 46 2171 40 41 46 2172 40 1502 41 46 2173 40 2010 46 2171 40 41 46 2172 40 1502 41 41 46 2174 40 41 125 59 2010 46 2175 40 2167 44 2021 40 41 41 59 2010 46 2176 40 41 59 2010 46 2163 46 2164 40 41 46 2165 40 1500 41 59 2010 46 2177 46 2164 40 41 46 2165 40 1503 41 59 2010 46 2178 40 1502 44 2021 40 41 41 59 2010 46 2163 46 2164 40 41 46 2165 40 1502 41 59 2010 46 2177 46 2164 40 41 46 2165 40 1503 41 59 2010 46 2178 40 1502 44 2021 40 41 41 59 2010 46 2163 46 2164 40 41 46 2165 40 1503 41 59 2010 46 2177 46 2164 40 41 46 2165 40 1503 41 59 2010 46 2178 40 1502 44 2021 40 41 41 59 2010 46 2163 46 2164 40 41 46 2165 40 1503 41 59 2010 46 2177 46 2164 40 41 46 2165 40 1503 41 59 2010 46 2178 40 1502 44 2021 40 41 41 59 2010 46 2163 46 2164 40 41 46 2165 40 1503 41 59 2010 46 2177 46 2164 40 41 46 2165 40 1503 41 59 2010 46 2178 40 1502 44 2021 40 41 41 59 2010 46 2163 46 2164 40 41 46 2165 40 1503 41 59 2010 46 2177 46 2164 40 41 46 2165 40 1502 41 59 2010 46 2178 40 1502 44 2021 40 41 41 59 2010 46 2163 46 2164 40 41 46 2165 40 1503 41 59 2010 46 2177 46 2164 40 41 46 2165 40 1500 41 59 125 91 2152 93 777 2179 2180 2181 40 41 123 2182 2146 61 2021 40 41 59 2183 2184 61 2185 46 2186 46 2187 40 2146 44 2007 41 59 2188 2189 61 2188 46 2190 40 2191 46 2192 44 752 44 2146 44 2193 58 2194 46 2195 46 2196 44 2197 58 726 46 2198 41 59 2199 2185 46 2186 46 2200 40 2189 44 2006 46 2008 44 2184 41 59 2201 61 2185 46 2186 46 2202 40 2189 44 2006 46 2008 44 1503 44 829 41 59 726 2203 61 1501 59 2145 40 1503 44 2203 44 2146 41 59 2010 46 2204 46 2205 40 41 46 2206 40 1503 41 59 2182 2207 61 744 2208 123 2209 61 744 2209 40 41 44 2210 61 2010 46 2211 40 41 46 2212 40 1502 41 46 2213 40 41 125 59 330 2006 2214 61 2207 46 2215 91 1500 93 46 2216 59 2188 2217 61 2188 46 2190 40 2191 46 2218 44 2207 44 2146 44 2207 44 2193 58 2194 46 2195 46 2196 44 2197 58 40 726 41 2184 41 59 2199 2185 46 2186 46 2200 40 2217 44 2214 44 2185 46 2186 46 2187 40 2146 44 2214 41 41 59 2201 61 2185 46 2186 46 2202 40 2217 44 2214 44 2203 42 1503 44 829 41 59 330 330 2010 46 2219 40 2207 44 2146 41 59 2010 46 2204 46 2205 40 41 46 2206 40 1503 41 59 2010 46 2220 46 2205 40 41 46 2206 40 1500 41 59 330 2199 2185 46 2186 46 2200 40 2217 44 2214 44 2203 42 1503 41 59 2201 61 2185 46 2186 46 2202 40 2217 44 2214 44 2184 44 829 41 59 125 773 809 865 2221 40 2222 60 2050 62 2223 41 123 2050 2224 61 752 59 665 40 2225 2226 696 2223 41 123 688 40 2224 340 752 41 123 688 40 2224 46 2227 323 2226 46 2227 41 123 688 40 2224 46 2228 323 2226 46 2228 41 2224 46 2229 46 2230 40 41 46 2231 40 2226 46 2229 41 59 630 2224 46 2228 46 2230 40 41 46 2232 40 2226 46 2228 41 59 125 630 123 2224 46 2227 46 2233 40 41 46 2234 40 2226 46 2227 41 59 125 125 2224 61 2226 59 125 125 91 2152 93 777 865 2235 40 41 123 2131 40 1503 41 59 2236 2237 61 2010 46 2238 40 41 46 2239 40 41 59 330 2237 46 2240 46 2241 40 41 46 2242 40 1503 41 59 2221 40 2237 41 59 330 2236 2243 61 744 2244 123 2245 61 744 2245 40 41 44 2246 61 2247 46 2248 60 2050 62 40 41 125 59 2010 46 2249 40 2243 44 2021 40 41 41 59 2010 46 2250 40 41 59 2010 46 2251 46 2241 40 41 46 2242 40 1500 41 59 2010 46 2252 46 2241 40 41 46 2242 40 1503 41 59 330 870 40 2010 46 2253 62 1500 41 123 2010 46 2254 40 762 2236 2255 44 762 2236 2256 41 59 2255 46 2240 40 41 46 2241 40 41 46 2242 40 1500 41 59 2236 2257 61 2256 46 2258 40 41 59 2221 40 2257 41 59 2236 2259 61 2257 46 2260 40 41 59 2236 2261 61 2257 46 2262 40 41 59 330 2010 46 2263 40 1501 44 2021 40 41 41 59 2236 2264 61 2010 46 2238 40 41 46 2258 40 41 59 2264 46 2265 46 2241 40 41 46 2242 40 1501 41 59 2264 91 1500 93 46 2241 40 41 46 2266 40 2259 41 59 2236 2267 61 744 2244 123 2268 61 744 2268 40 41 44 2269 61 744 91 93 123 2259 44 2261 125 125 59 330 2010 46 2249 40 2267 44 2021 40 41 41 59 2010 46 2250 40 41 59 2010 46 2251 46 2241 40 41 46 2242 40 1500 41 59 125 2010 46 2252 46 2241 40 41 46 2242 40 1500 41 59 125 865 2270 40 41 123 2271 2272 61 2010 46 2273 40 41 46 2274 40 41 59 2271 2275 61 2051 40 2272 46 2276 40 41 46 2277 45 1501 41 59 2010 46 2278 40 2275 41 46 2279 40 41 46 2280 40 655 41 59 2271 2281 61 2051 40 2272 46 2276 40 41 46 2277 43 1501 41 59 2010 46 2278 40 2281 41 46 2279 40 41 46 2280 40 829 41 59 125 91 2152 93 777 865 2282 40 41 123 2131 40 1503 41 59 2270 40 41 59 2131 40 1503 41 59 2270 40 41 59 2131 40 1503 41 59 2270 40 41 59 125 91 2152 93 777 865 2283 40 41 123 330 330 330 2131 40 1503 41 59 330 2284 2285 61 744 2286 123 2287 61 744 2287 40 41 44 2288 61 2289 46 2290 60 2050 62 40 41 125 59 2010 46 2291 40 2285 44 2021 40 41 41 59 2010 46 2292 40 2128 40 41 41 46 2293 40 41 46 2294 40 829 41 59 2131 40 1501 41 59 2010 46 2292 40 2051 40 1500 41 41 46 2293 40 41 46 2294 40 655 41 59 125 91 2152 93 777 865 2295 40 41 123 2131 40 1503 41 59 2010 46 2296 46 2297 40 41 46 2298 40 1500 41 59 2010 46 2299 46 2297 40 41 46 2298 40 1503 41 59 2010 46 2300 40 41 59 2010 46 2296 46 2297 40 41 46 2298 40 1503 41 59 2010 46 2299 46 2297 40 41 46 2298 40 1500 41 59 125 91 2152 93 777 865 2301 40 41 123 2302 2146 61 2021 40 41 59 2131 40 1502 41 59 2302 2141 61 2128 40 41 59 2010 46 2303 40 2141 44 2146 41 59 2010 46 2304 40 2141 46 2305 41 46 2306 40 41 46 2307 40 41 59 2010 46 2308 40 41 59 2010 46 2304 40 2141 46 2305 41 46 2306 40 41 46 2307 40 41 59 125 91 2152 93 777 865 2309 40 41 123 2131 40 1502 41 59 2010 46 2310 40 41 59 2311 60 2050 62 2312 61 2010 46 2313 40 41 59 665 40 2050 2314 696 2010 41 123 2312 46 2315 40 41 59 2312 46 2316 46 2317 40 41 46 2318 40 2314 41 59 125 125 91 2152 93 777 865 2319 40 41 123 2131 40 1502 41 59 2010 46 2320 40 41 59 2222 2321 61 2010 59 2322 2323 61 2321 46 2324 40 41 59 665 40 2050 2325 696 2010 41 123 2323 46 2326 40 41 59 2323 46 2327 46 2328 40 41 46 2329 40 2325 41 59 125 125 91 2152 93 777 865 2330 40 41 123 2331 2146 61 2021 40 41 59 2331 2332 61 2128 40 41 59 2331 2333 61 2128 40 41 59 2010 46 2334 40 2332 44 2146 41 59 2010 46 2335 40 41 59 2010 46 2334 40 2333 44 2146 41 59 2222 60 2050 62 2336 61 2010 46 2337 40 41 59 2336 46 2338 40 41 46 2339 40 41 46 2340 40 1501 41 59 2331 2341 61 2336 46 2342 40 41 59 2341 46 2343 40 41 59 2341 46 2344 46 2339 40 41 46 2345 40 2333 41 59 125 91 2152 93 777 865 2346 40 41 123 2010 61 744 2009 40 744 2002 40 2347 46 2348 2349 123 2350 61 1504 125 41 41 59 2140 40 2128 40 1510 41 41 59 2140 40 2128 40 1510 41 41 59 2140 40 2128 40 1510 41 41 59 2140 40 2128 40 1501 41 41 59 2010 46 2351 46 2352 40 41 46 2353 40 1502 41 59 2010 46 2354 46 2352 40 41 46 2353 40 1500 41 59 2010 46 2355 40 41 59 2010 46 2351 46 2352 40 41 46 2353 40 1500 41 59 2010 46 2354 46 2352 40 41 46 2353 40 1502 41 59 2131 40 1504 41 59 330 2010 46 2351 46 2352 40 41 46 2353 40 1504 41 59 2010 46 2354 46 2352 40 41 46 2353 40 1502 41 59 2356 2357 61 2010 46 2358 40 1501 44 2021 40 41 41 59 2357 46 2352 40 41 46 2359 40 41 59 2010 46 2351 46 2352 40 41 46 2353 40 1504 41 59 2010 46 2354 46 2352 40 41 46 2353 40 1502 41 59 2357 61 2010 46 2358 40 1502 44 2021 40 41 41 59 2357 46 2352 40 41 46 2359 40 41 59 2010 46 2351 46 2352 40 41 46 2353 40 1504 41 59 2010 46 2354 46 2352 40 41 46 2353 40 1501 41 59 2357 61 2010 46 2358 40 1502 44 2021 40 41 41 59 2357 46 2352 40 41 46 2360 40 41 59 2010 46 2351 46 2352 40 41 46 2353 40 1504 41 59 2010 46 2354 46 2352 40 41 46 2353 40 1500 41 59 125 91 2152 93 777 865 2361 40 41 123 2362 2146 61 2021 40 41 59 2362 2363 61 2128 40 41 59 2010 46 2364 40 2363 44 2146 41 46 2365 40 41 46 2366 40 2367 46 2368 41 59 2010 46 2364 40 2363 44 2146 41 46 2365 40 41 46 2369 40 2367 46 2368 41 59 2011 46 2364 40 2363 44 2146 41 46 2365 40 41 46 2369 40 2367 46 2368 41 59 125 91 2152 93 777 865 2370 40 41 123 2371 2146 61 2021 40 41 59 2371 2372 61 2128 40 41 59 2010 46 2373 40 2372 44 2146 41 59 2010 46 2374 40 2372 46 2375 44 762 2050 2376 41 46 2377 40 41 46 2378 40 41 59 2376 46 2377 40 41 46 2379 40 2372 41 59 2010 46 2380 40 41 59 2010 46 2374 40 2372 46 2375 44 762 2376 41 46 2377 40 41 46 2378 40 41 59 2376 46 2377 40 41 46 2379 40 2372 41 59 2371 2381 61 2128 40 41 59 2010 46 2374 40 2381 46 2375 44 762 2382 41 46 2377 40 41 46 2383 40 41 59 125 91 2152 93 777 865 2384 40 41 123 2385 2146 61 2021 40 41 59 574 91 93 2386 61 123 1503 44 1500 44 1500 44 1500 125 59 330 574 91 93 2387 61 123 1500 44 1500 44 1503 44 1500 44 1500 44 1500 44 1500 44 1500 125 59 330 2388 2389 61 744 40 41 123 2390 61 2386 125 59 2388 2391 61 744 40 41 123 2392 61 2387 125 59 2385 2393 61 2394 40 2004 41 59 2385 2395 61 2394 40 2005 41 59 2393 46 2396 61 2397 46 2398 46 2396 59 2395 46 2396 61 2397 46 2398 46 2396 59 2146 46 2399 40 2393 44 2389 41 59 2146 46 2399 40 2395 44 2391 41 59 2385 2400 61 2128 40 41 59 2385 2401 61 2128 40 41 59 2050 91 93 2223 61 123 2400 44 2401 125 59 2010 46 2402 40 2400 44 2146 41 59 2385 2403 61 744 2404 123 2405 61 744 2405 40 41 44 2406 61 2223 125 59 2010 46 2407 46 2408 40 41 46 2409 40 1500 41 59 2010 46 2410 46 2408 40 41 46 2409 40 1501 41 59 2010 46 2411 40 2403 44 2146 41 59 2010 46 2407 46 2408 40 41 46 2409 40 1500 41 59 2010 46 2410 46 2408 40 41 46 2409 40 1500 41 59 125 777 809 2412 2413 40 574 2414 44 574 91 93 2415 61 752 41 123 2412 2416 61 744 40 41 123 2417 61 1500 44 2418 61 744 574 91 805 40 574 41 43 40 2415 346 2419 343 1500 41 93 125 59 2416 46 2420 91 1500 93 61 2414 59 688 40 2415 340 752 41 2421 46 2422 40 2415 44 1500 44 2416 46 2420 44 1501 44 2415 46 2423 41 59 792 2416 59 125 125 ,"{'AvgLine': 16, 'CountLine': 531, 'CountStmt': 296, 'MaxNesting': 4, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 240, 'MaxEssential': 1, 'SumEssential': 34, 'AvgCyclomatic': 1, 'CountLineCode': 439, 'CountStmtDecl': 99, 'MaxCyclomatic': 5, 'SumCyclomatic': 46, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 75, 'CountSemicolon': 255, 'CountDeclMethod': 29, 'CountLineCodeExe': 283, 'CountLineComment': 21, 'CountClassCoupled': 42, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 124, 'CountLineInactive': 0, 'CountDeclMethodAll': 35, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 46, 'CountDeclClassMethod': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 19, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 46, 'CountDeclClassVariable': 3, 'CountDeclMethodPrivate': 10, 'CountDeclInstanceMethod': 24, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 33, 'CountDeclInstanceVariable': 4, 'PercentLackOfCohesionModified': 55, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79756,C#,"    public static class Helper
    {
        /// <summary>
        /// Emits the opcodes for creating an array.
        /// </summary>
        /// <typeparam name=""T"">The type of the elements of the array.</typeparam>
        /// <param name=""builder"">The <see cref=""ScriptBuilder""/> to be used.</param>
        /// <param name=""list"">The elements of the array.</param>
        /// <returns>The same instance as <paramref name=""builder""/>.</returns>
        public static ScriptBuilder CreateArray<T>(this ScriptBuilder builder, IReadOnlyList<T> list = null)
        {
            if (list is null || list.Count == 0)
                return builder.Emit(OpCode.NEWARRAY0);
            for (int i = list.Count - 1; i >= 0; i--)
                builder.EmitPush(list[i]);
            builder.EmitPush(list.Count);
            return builder.Emit(OpCode.PACK);
        }

        /// <summary>
        /// Emits the opcodes for creating a map.
        /// </summary>
        /// <typeparam name=""TKey"">The type of the key of the map.</typeparam>
        /// <typeparam name=""TValue"">The type of the value of the map.</typeparam>
        /// <param name=""builder"">The <see cref=""ScriptBuilder""/> to be used.</param>
        /// <param name=""map"">The key/value pairs of the map.</param>
        /// <returns>The same instance as <paramref name=""builder""/>.</returns>
        public static ScriptBuilder CreateMap<TKey, TValue>(this ScriptBuilder builder, IEnumerable<KeyValuePair<TKey, TValue>> map = null)
        {
            builder.Emit(OpCode.NEWMAP);
            if (map != null)
                foreach (var p in map)
                {
                    builder.Emit(OpCode.DUP);
                    builder.EmitPush(p.Key);
                    builder.EmitPush(p.Value);
                    builder.Emit(OpCode.SETITEM);
                }
            return builder;
        }

        /// <summary>
        /// Emits the specified opcodes.
        /// </summary>
        /// <param name=""builder"">The <see cref=""ScriptBuilder""/> to be used.</param>
        /// <param name=""ops"">The opcodes to emit.</param>
        /// <returns>The same instance as <paramref name=""builder""/>.</returns>
        public static ScriptBuilder Emit(this ScriptBuilder builder, params OpCode[] ops)
        {
            foreach (OpCode op in ops)
                builder.Emit(op);
            return builder;
        }

        /// <summary>
        /// Emits the opcodes for calling a contract dynamically.
        /// </summary>
        /// <param name=""builder"">The <see cref=""ScriptBuilder""/> to be used.</param>
        /// <param name=""scriptHash"">The hash of the contract to be called.</param>
        /// <param name=""method"">The method to be called in the contract.</param>
        /// <param name=""args"">The arguments for calling the contract.</param>
        /// <returns>The same instance as <paramref name=""builder""/>.</returns>
        public static ScriptBuilder EmitDynamicCall(this ScriptBuilder builder, UInt160 scriptHash, string method, params object[] args)
        {
            return EmitDynamicCall(builder, scriptHash, method, CallFlags.All, args);
        }

        /// <summary>
        /// Emits the opcodes for calling a contract dynamically.
        /// </summary>
        /// <param name=""builder"">The <see cref=""ScriptBuilder""/> to be used.</param>
        /// <param name=""scriptHash"">The hash of the contract to be called.</param>
        /// <param name=""method"">The method to be called in the contract.</param>
        /// <param name=""flags"">The <see cref=""CallFlags""/> for calling the contract.</param>
        /// <param name=""args"">The arguments for calling the contract.</param>
        /// <returns>The same instance as <paramref name=""builder""/>.</returns>
        public static ScriptBuilder EmitDynamicCall(this ScriptBuilder builder, UInt160 scriptHash, string method, CallFlags flags, params object[] args)
        {
            builder.CreateArray(args);
            builder.EmitPush(flags);
            builder.EmitPush(method);
            builder.EmitPush(scriptHash);
            builder.EmitSysCall(ApplicationEngine.System_Contract_Call);
            return builder;
        }

        /// <summary>
        /// Emits the opcodes for pushing the specified data onto the stack.
        /// </summary>
        /// <param name=""builder"">The <see cref=""ScriptBuilder""/> to be used.</param>
        /// <param name=""data"">The data to be pushed.</param>
        /// <returns>The same instance as <paramref name=""builder""/>.</returns>
        public static ScriptBuilder EmitPush(this ScriptBuilder builder, ISerializable data)
        {
            return builder.EmitPush(data.ToArray());
        }

        /// <summary>
        /// Emits the opcodes for pushing the specified data onto the stack.
        /// </summary>
        /// <param name=""builder"">The <see cref=""ScriptBuilder""/> to be used.</param>
        /// <param name=""parameter"">The data to be pushed.</param>
        /// <returns>The same instance as <paramref name=""builder""/>.</returns>
        public static ScriptBuilder EmitPush(this ScriptBuilder builder, ContractParameter parameter)
        {
            if (parameter.Value is null)
                builder.Emit(OpCode.PUSHNULL);
            else
                switch (parameter.Type)
                {
                    case ContractParameterType.Signature:
                    case ContractParameterType.ByteArray:
                        builder.EmitPush((byte[])parameter.Value);
                        break;
                    case ContractParameterType.Boolean:
                        builder.EmitPush((bool)parameter.Value);
                        break;
                    case ContractParameterType.Integer:
                        if (parameter.Value is BigInteger bi)
                            builder.EmitPush(bi);
                        else
                            builder.EmitPush((BigInteger)typeof(BigInteger).GetConstructor(new[] { parameter.Value.GetType() }).Invoke(new[] { parameter.Value }));
                        break;
                    case ContractParameterType.Hash160:
                        builder.EmitPush((UInt160)parameter.Value);
                        break;
                    case ContractParameterType.Hash256:
                        builder.EmitPush((UInt256)parameter.Value);
                        break;
                    case ContractParameterType.PublicKey:
                        builder.EmitPush((ECPoint)parameter.Value);
                        break;
                    case ContractParameterType.String:
                        builder.EmitPush((string)parameter.Value);
                        break;
                    case ContractParameterType.Array:
                        {
                            IList<ContractParameter> parameters = (IList<ContractParameter>)parameter.Value;
                            for (int i = parameters.Count - 1; i >= 0; i--)
                                builder.EmitPush(parameters[i]);
                            builder.EmitPush(parameters.Count);
                            builder.Emit(OpCode.PACK);
                        }
                        break;
                    case ContractParameterType.Map:
                        {
                            var pairs = (IList<KeyValuePair<ContractParameter, ContractParameter>>)parameter.Value;
                            builder.CreateMap(pairs);
                        }
                        break;
                    default:
                        throw new ArgumentException(null, nameof(parameter));
                }
            return builder;
        }

        /// <summary>
        /// Emits the opcodes for pushing the specified data onto the stack.
        /// </summary>
        /// <param name=""builder"">The <see cref=""ScriptBuilder""/> to be used.</param>
        /// <param name=""obj"">The data to be pushed.</param>
        /// <returns>The same instance as <paramref name=""builder""/>.</returns>
        public static ScriptBuilder EmitPush(this ScriptBuilder builder, object obj)
        {
            switch (obj)
            {
                case bool data:
                    builder.EmitPush(data);
                    break;
                case byte[] data:
                    builder.EmitPush(data);
                    break;
                case string data:
                    builder.EmitPush(data);
                    break;
                case BigInteger data:
                    builder.EmitPush(data);
                    break;
                case ISerializable data:
                    builder.EmitPush(data);
                    break;
                case sbyte data:
                    builder.EmitPush(data);
                    break;
                case byte data:
                    builder.EmitPush(data);
                    break;
                case short data:
                    builder.EmitPush(data);
                    break;
                case ushort data:
                    builder.EmitPush(data);
                    break;
                case int data:
                    builder.EmitPush(data);
                    break;
                case uint data:
                    builder.EmitPush(data);
                    break;
                case long data:
                    builder.EmitPush(data);
                    break;
                case ulong data:
                    builder.EmitPush(data);
                    break;
                case Enum data:
                    builder.EmitPush(BigInteger.Parse(data.ToString(""d"")));
                    break;
                case ContractParameter data:
                    builder.EmitPush(data);
                    break;
                case null:
                    builder.Emit(OpCode.PUSHNULL);
                    break;
                default:
                    throw new ArgumentException(null, nameof(obj));
            }
            return builder;
        }

        /// <summary>
        /// Emits the opcodes for invoking an interoperable service.
        /// </summary>
        /// <param name=""builder"">The <see cref=""ScriptBuilder""/> to be used.</param>
        /// <param name=""method"">The hash of the interoperable service.</param>
        /// <param name=""args"">The arguments for calling the interoperable service.</param>
        /// <returns>The same instance as <paramref name=""builder""/>.</returns>
        public static ScriptBuilder EmitSysCall(this ScriptBuilder builder, uint method, params object[] args)
        {
            for (int i = args.Length - 1; i >= 0; i--)
                EmitPush(builder, args[i]);
            return builder.EmitSysCall(method);
        }

        /// <summary>
        /// Generates the script for calling a contract dynamically.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the contract to be called.</param>
        /// <param name=""method"">The method to be called in the contract.</param>
        /// <param name=""args"">The arguments for calling the contract.</param>
        /// <returns>The generated script.</returns>
        public static byte[] MakeScript(this UInt160 scriptHash, string method, params object[] args)
        {
            using ScriptBuilder sb = new();
            sb.EmitDynamicCall(scriptHash, method, args);
            return sb.ToArray();
        }

        /// <summary>
        /// Converts the <see cref=""StackItem""/> to a JSON object.
        /// </summary>
        /// <param name=""item"">The <see cref=""StackItem""/> to convert.</param>
        /// <returns>The <see cref=""StackItem""/> represented by a JSON object.</returns>
        public static JObject ToJson(this StackItem item)
        {
            return ToJson(item, null);
        }

        private static JObject ToJson(StackItem item, HashSet<StackItem> context)
        {
            JObject json = new();
            json[""type""] = item.Type;
            switch (item)
            {
                case Array array:
                    context ??= new HashSet<StackItem>(ReferenceEqualityComparer.Instance);
                    if (!context.Add(array)) throw new InvalidOperationException();
                    json[""value""] = new JArray(array.Select(p => ToJson(p, context)));
                    break;
                case Boolean boolean:
                    json[""value""] = boolean.GetBoolean();
                    break;
                case Buffer _:
                case ByteString _:
                    json[""value""] = Convert.ToBase64String(item.GetSpan());
                    break;
                case Integer integer:
                    json[""value""] = integer.GetInteger().ToString();
                    break;
                case Map map:
                    context ??= new HashSet<StackItem>(ReferenceEqualityComparer.Instance);
                    if (!context.Add(map)) throw new InvalidOperationException();
                    json[""value""] = new JArray(map.Select(p =>
                    {
                        JObject item = new();
                        item[""key""] = ToJson(p.Key, context);
                        item[""value""] = ToJson(p.Value, context);
                        return item;
                    }));
                    break;
                case Pointer pointer:
                    json[""value""] = pointer.Position;
                    break;
            }
            return json;
        }

        /// <summary>
        /// Converts the <see cref=""StackItem""/> to a <see cref=""ContractParameter""/>.
        /// </summary>
        /// <param name=""item"">The <see cref=""StackItem""/> to convert.</param>
        /// <returns>The converted <see cref=""ContractParameter""/>.</returns>
        public static ContractParameter ToParameter(this StackItem item)
        {
            return ToParameter(item, null);
        }

        private static ContractParameter ToParameter(StackItem item, List<(StackItem, ContractParameter)> context)
        {
            if (item is null) throw new ArgumentNullException(nameof(item));
            ContractParameter parameter = null;
            switch (item)
            {
                case Array array:
                    if (context is null)
                        context = new List<(StackItem, ContractParameter)>();
                    else
                        (_, parameter) = context.FirstOrDefault(p => ReferenceEquals(p.Item1, item));
                    if (parameter is null)
                    {
                        parameter = new ContractParameter { Type = ContractParameterType.Array };
                        context.Add((item, parameter));
                        parameter.Value = array.Select(p => ToParameter(p, context)).ToList();
                    }
                    break;
                case Map map:
                    if (context is null)
                        context = new List<(StackItem, ContractParameter)>();
                    else
                        (_, parameter) = context.FirstOrDefault(p => ReferenceEquals(p.Item1, item));
                    if (parameter is null)
                    {
                        parameter = new ContractParameter { Type = ContractParameterType.Map };
                        context.Add((item, parameter));
                        parameter.Value = map.Select(p => new KeyValuePair<ContractParameter, ContractParameter>(ToParameter(p.Key, context), ToParameter(p.Value, context))).ToList();
                    }
                    break;
                case Boolean _:
                    parameter = new ContractParameter
                    {
                        Type = ContractParameterType.Boolean,
                        Value = item.GetBoolean()
                    };
                    break;
                case ByteString array:
                    parameter = new ContractParameter
                    {
                        Type = ContractParameterType.ByteArray,
                        Value = array.GetSpan().ToArray()
                    };
                    break;
                case Integer i:
                    parameter = new ContractParameter
                    {
                        Type = ContractParameterType.Integer,
                        Value = i.GetInteger()
                    };
                    break;
                case InteropInterface _:
                    parameter = new ContractParameter
                    {
                        Type = ContractParameterType.InteropInterface
                    };
                    break;
                case Null _:
                    parameter = new ContractParameter
                    {
                        Type = ContractParameterType.Any
                    };
                    break;
                default:
                    throw new ArgumentException($""StackItemType({item.Type}) is not supported to ContractParameter."");
            }
            return parameter;
        }

        /// <summary>
        /// Converts the <see cref=""ContractParameter""/> to a <see cref=""StackItem""/>.
        /// </summary>
        /// <param name=""parameter"">The <see cref=""ContractParameter""/> to convert.</param>
        /// <returns>The converted <see cref=""StackItem""/>.</returns>
        public static StackItem ToStackItem(this ContractParameter parameter)
        {
            return ToStackItem(parameter, null);
        }

        private static StackItem ToStackItem(ContractParameter parameter, List<(StackItem, ContractParameter)> context)
        {
            if (parameter is null) throw new ArgumentNullException(nameof(parameter));
            if (parameter.Value is null) return StackItem.Null;
            StackItem stackItem = null;
            switch (parameter.Type)
            {
                case ContractParameterType.Array:
                    if (context is null)
                        context = new List<(StackItem, ContractParameter)>();
                    else
                        (stackItem, _) = context.FirstOrDefault(p => ReferenceEquals(p.Item2, parameter));
                    if (stackItem is null)
                    {
                        stackItem = new Array(((IList<ContractParameter>)parameter.Value).Select(p => ToStackItem(p, context)));
                        context.Add((stackItem, parameter));
                    }
                    break;
                case ContractParameterType.Map:
                    if (context is null)
                        context = new List<(StackItem, ContractParameter)>();
                    else
                        (stackItem, _) = context.FirstOrDefault(p => ReferenceEquals(p.Item2, parameter));
                    if (stackItem is null)
                    {
                        Map map = new();
                        foreach (var pair in (IList<KeyValuePair<ContractParameter, ContractParameter>>)parameter.Value)
                            map[(PrimitiveType)ToStackItem(pair.Key, context)] = ToStackItem(pair.Value, context);
                        stackItem = map;
                        context.Add((stackItem, parameter));
                    }
                    break;
                case ContractParameterType.Boolean:
                    stackItem = (bool)parameter.Value;
                    break;
                case ContractParameterType.ByteArray:
                case ContractParameterType.Signature:
                    stackItem = (byte[])parameter.Value;
                    break;
                case ContractParameterType.Integer:
                    stackItem = (BigInteger)parameter.Value;
                    break;
                case ContractParameterType.Hash160:
                    stackItem = ((UInt160)parameter.Value).ToArray();
                    break;
                case ContractParameterType.Hash256:
                    stackItem = ((UInt256)parameter.Value).ToArray();
                    break;
                case ContractParameterType.PublicKey:
                    stackItem = ((ECPoint)parameter.Value).EncodePoint(true);
                    break;
                case ContractParameterType.String:
                    stackItem = (string)parameter.Value;
                    break;
                default:
                    throw new ArgumentException($""ContractParameterType({parameter.Type}) is not supported to StackItem."");
            }
            return stackItem;
        }
    }",1,777 809 587 2000 123 331 777 809 2001 2002 60 2003 62 40 823 2001 2004 44 2005 60 2003 62 2006 61 752 41 123 688 40 2006 712 752 309 2006 46 2007 323 1500 41 792 2004 46 2008 40 2009 46 2010 41 59 664 40 704 2011 61 2006 46 2007 45 1501 59 2011 325 1500 59 2011 338 41 2004 46 2012 40 2006 91 2011 93 41 59 2004 46 2012 40 2006 46 2007 41 59 792 2004 46 2008 40 2009 46 2013 41 59 125 331 777 809 2001 2014 60 2015 44 2016 62 40 823 2001 2004 44 2017 60 2018 60 2015 44 2016 355 2019 61 752 41 123 2004 46 2020 40 2021 46 2022 41 59 688 40 2019 340 752 41 665 40 2023 2024 696 2019 41 123 2004 46 2020 40 2021 46 2025 41 59 2004 46 2026 40 2024 46 2027 41 59 2004 46 2026 40 2024 46 2028 41 59 2004 46 2020 40 2021 46 2029 41 59 125 792 2004 59 125 331 777 809 2001 2030 40 823 2001 2004 44 766 2031 91 93 2032 41 123 665 40 2031 2033 696 2032 41 2004 46 2030 40 2033 41 59 792 2004 59 125 331 777 809 2001 2034 40 823 2001 2004 44 2035 2036 44 815 2037 44 766 755 91 93 2038 41 123 792 2034 40 2004 44 2036 44 2037 44 2039 46 2040 44 2038 41 59 125 331 777 809 2001 2034 40 823 2001 2004 44 2035 2036 44 815 2037 44 2041 2042 44 766 755 91 93 2038 41 123 2004 46 2002 40 2038 41 59 2004 46 2043 40 2042 41 59 2004 46 2043 40 2037 41 59 2004 46 2043 40 2036 41 59 2004 46 2044 40 2045 46 2046 41 59 792 2004 59 125 331 777 809 2001 2047 40 823 2001 2004 44 2048 2049 41 123 792 2004 46 2047 40 2049 46 2050 40 41 41 59 125 331 777 809 2001 2047 40 823 2001 2004 44 2051 2052 41 123 688 40 2052 46 2053 712 752 41 2004 46 2030 40 2031 46 2054 41 59 630 819 40 2052 46 2055 41 123 579 2056 46 2057 58 579 2056 46 2058 58 2004 46 2047 40 40 574 91 93 41 2052 46 2053 41 59 572 59 579 2056 46 2059 58 2004 46 2047 40 40 569 41 2052 46 2053 41 59 572 59 579 2056 46 2060 58 688 40 2052 46 2053 712 2061 2062 41 2004 46 2047 40 2062 41 59 630 2004 46 2047 40 40 2061 41 836 40 2061 41 46 2063 40 744 91 93 123 2052 46 2053 46 2064 40 41 125 41 46 2065 40 744 91 93 123 2052 46 2053 125 41 41 59 572 59 579 2056 46 2066 58 2004 46 2047 40 40 2035 41 2052 46 2053 41 59 572 59 579 2056 46 2067 58 2004 46 2047 40 40 2068 41 2052 46 2053 41 59 572 59 579 2056 46 2069 58 2004 46 2047 40 40 2070 41 2052 46 2053 41 59 572 59 579 2056 46 2071 58 2004 46 2047 40 40 815 41 2052 46 2053 41 59 572 59 579 2056 46 2072 58 123 2073 60 2051 62 2074 61 40 2073 60 2051 62 41 2052 46 2053 59 664 40 704 2075 61 2074 46 2076 45 1501 59 2075 325 1500 59 2075 338 41 2004 46 2047 40 2074 91 2075 93 41 59 2004 46 2047 40 2074 46 2076 41 59 2004 46 2030 40 2031 46 2077 41 59 125 572 59 579 2056 46 2078 58 123 2079 2080 61 40 2081 60 2018 60 2051 44 2051 355 41 2052 46 2053 59 2004 46 2014 40 2080 41 59 125 572 59 613 58 825 744 2082 40 752 44 2083 40 2052 41 41 59 125 792 2004 59 125 331 777 809 2001 2047 40 823 2001 2004 44 755 2084 41 123 819 40 2084 41 123 579 569 2049 58 2004 46 2047 40 2049 41 59 572 59 579 574 91 93 2049 58 2004 46 2047 40 2049 41 59 572 59 579 815 2049 58 2004 46 2047 40 2049 41 59 572 59 579 2085 2049 58 2004 46 2047 40 2049 41 59 572 59 579 2048 2049 58 2004 46 2047 40 2049 41 59 572 59 579 797 2049 58 2004 46 2047 40 2049 41 59 572 59 579 574 2049 58 2004 46 2047 40 2049 41 59 572 59 579 803 2049 58 2004 46 2047 40 2049 41 59 572 59 579 859 2049 58 2004 46 2047 40 2049 41 59 572 59 579 704 2049 58 2004 46 2047 40 2049 41 59 572 59 579 842 2049 58 2004 46 2047 40 2049 41 59 572 59 579 726 2049 58 2004 46 2047 40 2049 41 59 572 59 579 848 2049 58 2004 46 2047 40 2049 41 59 572 59 579 2086 2049 58 2004 46 2047 40 2085 46 2087 40 2049 46 2088 40 362 41 41 41 59 572 59 579 2051 2049 58 2004 46 2047 40 2049 41 59 572 59 579 752 58 2004 46 2030 40 2031 46 2089 41 59 572 59 613 58 825 744 2090 40 752 44 2091 40 2084 41 41 59 125 792 2004 59 125 331 777 809 2001 2092 40 823 2001 2004 44 842 2037 44 766 755 91 93 2038 41 123 664 40 704 2093 61 2038 46 2094 45 1501 59 2093 325 1500 59 2093 338 41 2047 40 2004 44 2038 91 2093 93 41 59 792 2004 46 2092 40 2037 41 59 125 331 777 809 574 91 93 2095 40 823 2035 2036 44 815 2037 44 766 755 91 93 2038 41 123 860 2001 2096 61 744 40 41 59 2096 46 2034 40 2036 44 2037 44 2038 41 59 792 2096 46 2097 40 41 59 125 331 777 809 2098 2099 40 823 2100 2101 41 123 792 2099 40 2101 44 752 41 59 125 773 809 2098 2099 40 2100 2101 44 2102 60 2100 62 2103 41 123 2098 2104 61 744 40 41 59 2104 91 362 93 61 2101 46 2105 59 819 40 2101 41 123 579 2106 2107 58 2103 343 61 744 2102 60 2100 62 40 2108 46 2109 41 59 688 40 33 2103 46 2110 40 2107 41 41 825 744 2111 40 41 59 2104 91 362 93 61 744 2112 40 2107 46 2113 40 2114 328 2099 40 2114 44 2103 41 41 41 59 572 59 579 2115 2116 58 2104 91 362 93 61 2116 46 2117 40 41 59 572 59 579 2118 2119 58 579 2120 2119 58 2104 91 362 93 61 2121 46 2122 40 2101 46 2123 40 41 41 59 572 59 579 2124 2125 58 2104 91 362 93 61 2125 46 2126 40 41 46 2127 40 41 59 572 59 579 2128 2019 58 2103 343 61 744 2102 60 2100 62 40 2108 46 2109 41 59 688 40 33 2103 46 2110 40 2019 41 41 825 744 2111 40 41 59 2104 91 362 93 61 744 2112 40 2019 46 2113 40 2114 328 123 2098 2101 61 744 40 41 59 2101 91 362 93 61 2099 40 2114 46 2129 44 2103 41 59 2101 91 362 93 61 2099 40 2114 46 2130 44 2103 41 59 792 2101 59 125 41 41 59 572 59 579 2131 2132 58 2104 91 362 93 61 2132 46 2133 59 572 59 125 792 2104 59 125 331 777 809 2051 2134 40 823 2100 2101 41 123 792 2134 40 2101 44 752 41 59 125 773 809 2051 2134 40 2100 2101 44 2135 60 40 2100 44 2051 41 62 2103 41 123 688 40 2101 712 752 41 825 744 2136 40 2137 40 2101 41 41 59 2051 2052 61 752 59 819 40 2101 41 123 579 2138 2139 58 688 40 2103 712 752 41 2103 61 744 2135 60 40 2100 44 2051 41 62 40 41 59 630 40 2140 44 2052 41 61 2103 46 2141 40 2142 328 2143 40 2142 46 2144 44 2101 41 41 59 688 40 2052 712 752 41 123 2052 61 744 2051 123 2145 61 2146 46 2138 125 59 2103 46 2147 40 40 2101 44 2052 41 41 59 2052 46 2148 61 2139 46 2149 40 2142 328 2134 40 2142 44 2103 41 41 46 2150 40 41 59 125 572 59 579 2151 2019 58 688 40 2103 712 752 41 2103 61 744 2135 60 40 2100 44 2051 41 62 40 41 59 630 40 2140 44 2052 41 61 2103 46 2141 40 2142 328 2143 40 2142 46 2144 44 2101 41 41 59 688 40 2052 712 752 41 123 2052 61 744 2051 123 2152 61 2153 46 2151 125 59 2103 46 2154 40 40 2101 44 2052 41 41 59 2052 46 2155 61 2019 46 2156 40 2142 328 744 2018 60 2051 44 2051 62 40 2134 40 2142 46 2157 44 2103 41 44 2134 40 2142 46 2155 44 2103 41 41 41 46 2158 40 41 59 125 572 59 579 2159 2140 58 2052 61 744 2051 123 2160 61 2161 46 2159 44 2162 61 2101 46 2163 40 41 125 59 572 59 579 2164 2139 58 2052 61 744 2051 123 2165 61 2166 46 2167 44 2168 61 2139 46 2169 40 41 46 2170 40 41 125 59 572 59 579 2171 2172 58 2052 61 744 2051 123 2173 61 2174 46 2171 44 2175 61 2172 46 2176 40 41 125 59 572 59 579 2177 2140 58 2052 61 744 2051 123 2178 61 2179 46 2177 125 59 572 59 579 2180 2140 58 2052 61 744 2051 123 2181 61 2182 46 2183 125 59 572 59 613 58 825 744 2184 40 36 362 41 59 125 792 2052 59 125 331 777 809 2100 2185 40 823 2051 2052 41 123 792 2185 40 2052 44 752 41 59 125 773 809 2100 2185 40 2051 2052 44 2135 60 40 2100 44 2051 41 62 2103 41 123 688 40 2052 712 752 41 825 744 2186 40 2187 40 2052 41 41 59 688 40 2052 46 2188 712 752 41 792 2100 46 2189 59 2100 2190 61 752 59 819 40 2052 46 2191 41 123 579 2192 46 2193 58 688 40 2103 712 752 41 2103 61 744 2135 60 40 2100 44 2051 41 62 40 41 59 630 40 2190 44 2194 41 61 2103 46 2195 40 2196 328 2197 40 2196 46 2198 44 2052 41 41 59 688 40 2190 712 752 41 123 2190 61 744 2193 40 40 40 2199 60 2051 62 41 2052 46 2188 41 46 2200 40 2196 328 2185 40 2196 44 2103 41 41 41 59 2103 46 2201 40 40 2190 44 2052 41 41 59 125 572 59 579 2192 46 2202 58 688 40 2103 712 752 41 2103 61 744 2135 60 40 2100 44 2051 41 62 40 41 59 630 40 2190 44 2194 41 61 2103 46 2195 40 2196 328 2197 40 2196 46 2198 44 2052 41 41 59 688 40 2190 712 752 41 123 2202 2019 61 744 40 41 59 665 40 2203 2204 696 40 2205 60 2018 60 2051 44 2051 355 41 2052 46 2188 41 2019 91 40 2206 41 2185 40 2204 46 2207 44 2103 41 93 61 2185 40 2204 46 2188 44 2103 41 59 2190 61 2019 59 2103 46 2208 40 40 2190 44 2052 41 41 59 125 572 59 579 2192 46 2209 58 2190 61 40 569 41 2052 46 2188 59 572 59 579 2192 46 2210 58 579 2192 46 2211 58 2190 61 40 574 91 93 41 2052 46 2188 59 572 59 579 2192 46 2212 58 2190 61 40 2213 41 2052 46 2188 59 572 59 579 2192 46 2214 58 2190 61 40 40 2035 41 2052 46 2188 41 46 2215 40 41 59 572 59 579 2192 46 2216 58 2190 61 40 40 2217 41 2052 46 2188 41 46 2215 40 41 59 572 59 579 2192 46 2218 58 2190 61 40 40 2219 41 2052 46 2188 41 46 2220 40 829 41 59 572 59 579 2192 46 2221 58 2190 61 40 815 41 2052 46 2188 59 572 59 613 58 825 744 2222 40 36 362 41 59 125 792 2190 59 125 125 ,"{'AvgLine': 21, 'CountLine': 446, 'CountStmt': 218, 'MaxNesting': 3, 'AvgLineCode': 21, 'AvgEssential': 4, 'AvgLineBlank': 0, 'CountStmtExe': 191, 'MaxEssential': 17, 'SumEssential': 78, 'AvgCyclomatic': 5, 'CountLineCode': 346, 'CountStmtDecl': 27, 'MaxCyclomatic': 18, 'SumCyclomatic': 100, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountSemicolon': 174, 'CountDeclMethod': 16, 'CountLineCodeExe': 265, 'CountLineComment': 85, 'CountClassCoupled': 44, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 25, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.25', 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 18, 'SumCyclomaticStrict': 101, 'CountDeclClassMethod': 16, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 13, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 55, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 0, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 28, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79883,C#,"    internal class ContractMethodMetadata
    {
        public string Name { get; }
        public MethodInfo Handler { get; }
        public InteropParameterDescriptor[] Parameters { get; }
        public bool NeedApplicationEngine { get; }
        public bool NeedSnapshot { get; }
        public long CpuFee { get; }
        public long StorageFee { get; }
        public CallFlags RequiredCallFlags { get; }
        public ContractMethodDescriptor Descriptor { get; }

        public ContractMethodMetadata(MemberInfo member, ContractMethodAttribute attribute)
        {
            this.Name = attribute.Name ?? member.Name.ToLower()[0] + member.Name[1..];
            this.Handler = member switch
            {
                MethodInfo m => m,
                PropertyInfo p => p.GetMethod,
                _ => throw new ArgumentException(null, nameof(member))
            };
            ParameterInfo[] parameterInfos = this.Handler.GetParameters();
            if (parameterInfos.Length > 0)
            {
                NeedApplicationEngine = parameterInfos[0].ParameterType.IsAssignableFrom(typeof(ApplicationEngine));
                NeedSnapshot = parameterInfos[0].ParameterType.IsAssignableFrom(typeof(DataCache));
            }
            if (NeedApplicationEngine || NeedSnapshot)
                this.Parameters = parameterInfos.Skip(1).Select(p => new InteropParameterDescriptor(p)).ToArray();
            else
                this.Parameters = parameterInfos.Select(p => new InteropParameterDescriptor(p)).ToArray();
            this.CpuFee = attribute.CpuFee;
            this.StorageFee = attribute.StorageFee;
            this.RequiredCallFlags = attribute.RequiredCallFlags;
            this.Descriptor = new ContractMethodDescriptor
            {
                Name = Name,
                ReturnType = ToParameterType(Handler.ReturnType),
                Parameters = Parameters.Select(p => new ContractParameterDefinition { Type = ToParameterType(p.Type), Name = p.Name }).ToArray(),
                Safe = (attribute.RequiredCallFlags & ~CallFlags.ReadOnly) == 0
            };
        }

        private static ContractParameterType ToParameterType(Type type)
        {
            if (type.BaseType == typeof(ContractTask)) return ToParameterType(type.GenericTypeArguments[0]);
            if (type == typeof(ContractTask)) return ContractParameterType.Void;
            if (type == typeof(void)) return ContractParameterType.Void;
            if (type == typeof(bool)) return ContractParameterType.Boolean;
            if (type == typeof(sbyte)) return ContractParameterType.Integer;
            if (type == typeof(byte)) return ContractParameterType.Integer;
            if (type == typeof(short)) return ContractParameterType.Integer;
            if (type == typeof(ushort)) return ContractParameterType.Integer;
            if (type == typeof(int)) return ContractParameterType.Integer;
            if (type == typeof(uint)) return ContractParameterType.Integer;
            if (type == typeof(long)) return ContractParameterType.Integer;
            if (type == typeof(ulong)) return ContractParameterType.Integer;
            if (type == typeof(BigInteger)) return ContractParameterType.Integer;
            if (type == typeof(byte[])) return ContractParameterType.ByteArray;
            if (type == typeof(string)) return ContractParameterType.String;
            if (type == typeof(UInt160)) return ContractParameterType.Hash160;
            if (type == typeof(UInt256)) return ContractParameterType.Hash256;
            if (type == typeof(ECPoint)) return ContractParameterType.PublicKey;
            if (type == typeof(VM.Types.Boolean)) return ContractParameterType.Boolean;
            if (type == typeof(Integer)) return ContractParameterType.Integer;
            if (type == typeof(ByteString)) return ContractParameterType.ByteArray;
            if (type == typeof(VM.Types.Buffer)) return ContractParameterType.ByteArray;
            if (type == typeof(Array)) return ContractParameterType.Array;
            if (type == typeof(Struct)) return ContractParameterType.Array;
            if (type == typeof(Map)) return ContractParameterType.Map;
            if (type == typeof(StackItem)) return ContractParameterType.Any;
            if (type == typeof(object)) return ContractParameterType.Any;
            if (typeof(IInteroperable).IsAssignableFrom(type)) return ContractParameterType.Array;
            if (typeof(ISerializable).IsAssignableFrom(type)) return ContractParameterType.ByteArray;
            if (type.IsArray) return ContractParameterType.Array;
            if (type.IsEnum) return ContractParameterType.Integer;
            if (type.IsValueType) return ContractParameterType.Array;
            return ContractParameterType.InteropInterface;
        }
    }",1,710 587 2000 123 777 815 2001 123 2002 59 125 777 2003 2004 123 2005 59 125 777 2006 91 93 2007 123 2008 59 125 777 569 2009 123 2010 59 125 777 569 2011 123 2012 59 125 777 726 2013 123 2014 59 125 777 726 2015 123 2016 59 125 777 2017 2018 123 2019 59 125 777 2020 2021 123 2022 59 125 777 2000 40 2023 2024 44 2025 2026 41 123 823 46 2001 61 2026 46 2001 343 2024 46 2001 46 2027 40 41 91 1500 93 43 2024 46 2001 91 1501 93 59 823 46 2004 61 2024 819 123 2003 2028 328 2028 44 2029 2030 328 2030 46 2031 44 2032 328 825 744 2033 40 752 44 2034 40 2024 41 41 125 59 2035 91 93 2036 61 823 46 2004 46 2037 40 41 59 688 40 2036 46 2038 62 1500 41 123 2009 61 2036 91 1500 93 46 2039 46 2040 40 836 40 2041 41 41 59 2011 61 2036 91 1500 93 46 2039 46 2040 40 836 40 2042 41 41 59 125 688 40 2009 309 2011 41 823 46 2007 61 2036 46 2043 40 1501 41 46 2044 40 2045 328 744 2006 40 2045 41 41 46 2046 40 41 59 630 823 46 2007 61 2036 46 2044 40 2045 328 744 2006 40 2045 41 41 46 2046 40 41 59 823 46 2013 61 2026 46 2013 59 823 46 2015 61 2026 46 2015 59 823 46 2018 61 2026 46 2018 59 823 46 2021 61 744 2020 123 2001 61 2001 44 2047 61 2048 40 2004 46 2047 41 44 2007 61 2007 46 2044 40 2045 328 744 2049 123 2050 61 2048 40 2045 46 2050 41 44 2001 61 2045 46 2001 125 41 46 2046 40 41 44 2051 61 40 2026 46 2018 38 126 2017 46 2052 41 323 1500 125 59 125 773 809 2053 2054 40 2055 2056 41 123 688 40 2056 46 2057 323 836 40 2058 41 41 792 2054 40 2056 46 2059 91 1500 93 41 59 688 40 2056 323 836 40 2058 41 41 792 2053 46 2060 59 688 40 2056 323 836 40 865 41 41 792 2053 46 2060 59 688 40 2056 323 836 40 569 41 41 792 2053 46 2061 59 688 40 2056 323 836 40 797 41 41 792 2053 46 2062 59 688 40 2056 323 836 40 574 41 41 792 2053 46 2062 59 688 40 2056 323 836 40 803 41 41 792 2053 46 2062 59 688 40 2056 323 836 40 859 41 41 792 2053 46 2062 59 688 40 2056 323 836 40 704 41 41 792 2053 46 2062 59 688 40 2056 323 836 40 842 41 41 792 2053 46 2062 59 688 40 2056 323 836 40 726 41 41 792 2053 46 2062 59 688 40 2056 323 836 40 848 41 41 792 2053 46 2062 59 688 40 2056 323 836 40 2063 41 41 792 2053 46 2062 59 688 40 2056 323 836 40 574 91 93 41 41 792 2053 46 2064 59 688 40 2056 323 836 40 815 41 41 792 2053 46 2065 59 688 40 2056 323 836 40 2066 41 41 792 2053 46 2067 59 688 40 2056 323 836 40 2068 41 41 792 2053 46 2069 59 688 40 2056 323 836 40 2070 41 41 792 2053 46 2071 59 688 40 2056 323 836 40 2072 46 2073 46 2061 41 41 792 2053 46 2061 59 688 40 2056 323 836 40 2062 41 41 792 2053 46 2062 59 688 40 2056 323 836 40 2074 41 41 792 2053 46 2064 59 688 40 2056 323 836 40 2072 46 2073 46 2075 41 41 792 2053 46 2064 59 688 40 2056 323 836 40 2076 41 41 792 2053 46 2076 59 688 40 2056 323 836 40 2077 41 41 792 2053 46 2076 59 688 40 2056 323 836 40 2078 41 41 792 2053 46 2078 59 688 40 2056 323 836 40 2079 41 41 792 2053 46 2080 59 688 40 2056 323 836 40 755 41 41 792 2053 46 2080 59 688 40 836 40 2081 41 46 2082 40 2056 41 41 792 2053 46 2076 59 688 40 836 40 2083 41 46 2082 40 2056 41 41 792 2053 46 2064 59 688 40 2056 46 2084 41 792 2053 46 2076 59 688 40 2056 46 2085 41 792 2053 46 2062 59 688 40 2056 46 2086 41 792 2053 46 2076 59 792 2053 46 2087 59 125 125 ,"{'AvgLine': 6, 'CountLine': 80, 'CountStmt': 99, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 3, 'AvgLineBlank': 0, 'CountStmtExe': 78, 'MaxEssential': 33, 'SumEssential': 37, 'AvgCyclomatic': 4, 'CountLineCode': 78, 'CountStmtDecl': 22, 'MaxCyclomatic': 33, 'SumCyclomatic': 39, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 53, 'CountDeclMethod': 11, 'CountLineCodeExe': 56, 'CountLineComment': 0, 'CountClassCoupled': 37, 'CountClassDerived': 0, 'CountDeclProperty': 9, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 33, 'SumCyclomaticStrict': 40, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 4, 'CountDeclMethodPublic': 10, 'CountDeclPropertyAuto': 9, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 33, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 39, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 10, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 24, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 50, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79723,C#,"    public static class Helper
    {
        private static readonly DateTime unixEpoch = new(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static int BitLen(int w)
        {
            return (w < 1 << 15 ? (w < 1 << 7
                ? (w < 1 << 3 ? (w < 1 << 1
                ? (w < 1 << 0 ? (w < 0 ? 32 : 0) : 1)
                : (w < 1 << 2 ? 2 : 3)) : (w < 1 << 5
                ? (w < 1 << 4 ? 4 : 5)
                : (w < 1 << 6 ? 6 : 7)))
                : (w < 1 << 11
                ? (w < 1 << 9 ? (w < 1 << 8 ? 8 : 9) : (w < 1 << 10 ? 10 : 11))
                : (w < 1 << 13 ? (w < 1 << 12 ? 12 : 13) : (w < 1 << 14 ? 14 : 15)))) : (w < 1 << 23 ? (w < 1 << 19
                ? (w < 1 << 17 ? (w < 1 << 16 ? 16 : 17) : (w < 1 << 18 ? 18 : 19))
                : (w < 1 << 21 ? (w < 1 << 20 ? 20 : 21) : (w < 1 << 22 ? 22 : 23))) : (w < 1 << 27
                ? (w < 1 << 25 ? (w < 1 << 24 ? 24 : 25) : (w < 1 << 26 ? 26 : 27))
                : (w < 1 << 29 ? (w < 1 << 28 ? 28 : 29) : (w < 1 << 30 ? 30 : 31)))));
        }

        /// <summary>
        /// Concatenates the specified byte arrays.
        /// </summary>
        /// <param name=""buffers"">The byte arrays to concatenate.</param>
        /// <returns>The concatenated byte array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte[] Concat(params byte[][] buffers)
        {
            int length = 0;
            for (int i = 0; i < buffers.Length; i++)
                length += buffers[i].Length;
            byte[] dst = new byte[length];
            int p = 0;
            foreach (byte[] src in buffers)
            {
                Buffer.BlockCopy(src, 0, dst, p, src.Length);
                p += src.Length;
            }
            return dst;
        }

        /// <summary>
        /// Concatenates two byte arrays.
        /// </summary>
        /// <param name=""a"">The first byte array to concatenate.</param>
        /// <param name=""b"">The second byte array to concatenate.</param>
        /// <returns>The concatenated byte array.</returns>
        public static byte[] Concat(ReadOnlySpan<byte> a, ReadOnlySpan<byte> b)
        {
            byte[] buffer = new byte[a.Length + b.Length];
            a.CopyTo(buffer);
            b.CopyTo(buffer.AsSpan(a.Length));
            return buffer;
        }

        internal static int GetLowestSetBit(this BigInteger i)
        {
            if (i.Sign == 0)
                return -1;
            byte[] b = i.ToByteArray();
            int w = 0;
            while (b[w] == 0)
                w++;
            for (int x = 0; x < 8; x++)
                if ((b[w] & 1 << x) > 0)
                    return x + w * 8;
            throw new Exception();
        }

        internal static void Remove<T>(this HashSet<T> set, ISet<T> other)
        {
            if (set.Count > other.Count)
            {
                set.ExceptWith(other);
            }
            else
            {
                set.RemoveWhere(u => other.Contains(u));
            }
        }

        internal static void Remove<T>(this HashSet<T> set, HashSetCache<T> other)
            where T : IEquatable<T>
        {
            if (set.Count > other.Count)
            {
                set.ExceptWith(other);
            }
            else
            {
                set.RemoveWhere(u => other.Contains(u));
            }
        }

        internal static void Remove<T, V>(this HashSet<T> set, IReadOnlyDictionary<T, V> other)
        {
            if (set.Count > other.Count)
            {
                set.ExceptWith(other.Keys);
            }
            else
            {
                set.RemoveWhere(u => other.ContainsKey(u));
            }
        }

        internal static string GetVersion(this Assembly assembly)
        {
            CustomAttributeData attribute = assembly.CustomAttributes.FirstOrDefault(p => p.AttributeType == typeof(AssemblyInformationalVersionAttribute));
            if (attribute == null) return assembly.GetName().Version.ToString(3);
            return (string)attribute.ConstructorArguments[0].Value;
        }

        /// <summary>
        /// Converts a hex <see cref=""string""/> to byte array.
        /// </summary>
        /// <param name=""value"">The hex <see cref=""string""/> to convert.</param>
        /// <returns>The converted byte array.</returns>
        public static byte[] HexToBytes(this string value)
        {
            if (value == null || value.Length == 0)
                return Array.Empty<byte>();
            if (value.Length % 2 == 1)
                throw new FormatException();
            byte[] result = new byte[value.Length / 2];
            for (int i = 0; i < result.Length; i++)
                result[i] = byte.Parse(value.Substring(i * 2, 2), NumberStyles.AllowHexSpecifier);
            return result;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static BigInteger Mod(this BigInteger x, BigInteger y)
        {
            x %= y;
            if (x.Sign < 0)
                x += y;
            return x;
        }

        internal static BigInteger ModInverse(this BigInteger a, BigInteger n)
        {
            BigInteger i = n, v = 0, d = 1;
            while (a > 0)
            {
                BigInteger t = i / a, x = a;
                a = i % x;
                i = x;
                x = d;
                d = v - t * x;
                v = x;
            }
            v %= n;
            if (v < 0) v = (v + n) % n;
            return v;
        }

        internal static BigInteger NextBigInteger(this Random rand, int sizeInBits)
        {
            if (sizeInBits < 0)
                throw new ArgumentException(""sizeInBits must be non-negative"");
            if (sizeInBits == 0)
                return 0;
            Span<byte> b = stackalloc byte[sizeInBits / 8 + 1];
            rand.NextBytes(b);
            if (sizeInBits % 8 == 0)
                b[^1] = 0;
            else
                b[^1] &= (byte)((1 << sizeInBits % 8) - 1);
            return new BigInteger(b);
        }

        /// <summary>
        /// Finds the sum of the specified integers.
        /// </summary>
        /// <param name=""source"">The specified integers.</param>
        /// <returns>The sum of the integers.</returns>
        public static BigInteger Sum(this IEnumerable<BigInteger> source)
        {
            var sum = BigInteger.Zero;
            foreach (var bi in source) sum += bi;
            return sum;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static bool TestBit(this BigInteger i, int index)
        {
            return (i & (BigInteger.One << index)) > BigInteger.Zero;
        }

        /// <summary>
        /// Converts a <see cref=""BigInteger""/> to byte array and eliminates all the leading zeros.
        /// </summary>
        /// <param name=""i"">The <see cref=""BigInteger""/> to convert.</param>
        /// <returns>The converted byte array.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static byte[] ToByteArrayStandard(this BigInteger i)
        {
            if (i.IsZero) return Array.Empty<byte>();
            return i.ToByteArray();
        }

        /// <summary>
        /// Converts a byte array to hex <see cref=""string""/>.
        /// </summary>
        /// <param name=""value"">The byte array to convert.</param>
        /// <returns>The converted hex <see cref=""string""/>.</returns>
        public static string ToHexString(this byte[] value)
        {
            StringBuilder sb = new();
            foreach (byte b in value)
                sb.AppendFormat(""{0:x2}"", b);
            return sb.ToString();
        }

        /// <summary>
        /// Converts a byte array to hex <see cref=""string""/>.
        /// </summary>
        /// <param name=""value"">The byte array to convert.</param>
        /// <param name=""reverse"">Indicates whether it should be converted in the reversed byte order.</param>
        /// <returns>The converted hex <see cref=""string""/>.</returns>
        public static string ToHexString(this byte[] value, bool reverse = false)
        {
            StringBuilder sb = new();
            for (int i = 0; i < value.Length; i++)
                sb.AppendFormat(""{0:x2}"", value[reverse ? value.Length - i - 1 : i]);
            return sb.ToString();
        }

        /// <summary>
        /// Converts a byte array to hex <see cref=""string""/>.
        /// </summary>
        /// <param name=""value"">The byte array to convert.</param>
        /// <returns>The converted hex <see cref=""string""/>.</returns>
        public static string ToHexString(this ReadOnlySpan<byte> value)
        {
            StringBuilder sb = new();
            foreach (byte b in value)
                sb.AppendFormat(""{0:x2}"", b);
            return sb.ToString();
        }

        /// <summary>
        /// Converts a <see cref=""DateTime""/> to timestamp.
        /// </summary>
        /// <param name=""time"">The <see cref=""DateTime""/> to convert.</param>
        /// <returns>The converted timestamp.</returns>
        public static uint ToTimestamp(this DateTime time)
        {
            return (uint)(time.ToUniversalTime() - unixEpoch).TotalSeconds;
        }

        /// <summary>
        /// Converts a <see cref=""DateTime""/> to timestamp in milliseconds.
        /// </summary>
        /// <param name=""time"">The <see cref=""DateTime""/> to convert.</param>
        /// <returns>The converted timestamp.</returns>
        public static ulong ToTimestampMS(this DateTime time)
        {
            return (ulong)(time.ToUniversalTime() - unixEpoch).TotalMilliseconds;
        }

        /// <summary>
        /// Checks if address is IPv4 Maped to IPv6 format, if so, Map to IPv4.
        /// Otherwise, return current address.
        /// </summary>
        internal static IPAddress Unmap(this IPAddress address)
        {
            if (address.IsIPv4MappedToIPv6)
                address = address.MapToIPv4();
            return address;
        }

        /// <summary>
        /// Checks if IPEndPoint is IPv4 Maped to IPv6 format, if so, unmap to IPv4.
        /// Otherwise, return current endpoint.
        /// </summary>
        internal static IPEndPoint Unmap(this IPEndPoint endPoint)
        {
            if (!endPoint.Address.IsIPv4MappedToIPv6)
                return endPoint;
            return new IPEndPoint(endPoint.Address.Unmap(), endPoint.Port);
        }
    }",1,777 809 587 2000 123 773 809 780 2001 2002 61 744 40 1505 44 1501 44 1501 44 1500 44 1500 44 1500 44 2003 46 2004 41 59 91 2005 40 2006 46 2007 41 93 773 809 704 2008 40 704 2009 41 123 792 40 2009 60 1501 332 1503 63 40 2009 60 1501 332 1502 63 40 2009 60 1501 332 1502 63 40 2009 60 1501 332 1501 63 40 2009 60 1501 332 1500 63 40 2009 60 1500 63 1503 58 1500 41 58 1501 41 58 40 2009 60 1501 332 1502 63 1502 58 1502 41 41 58 40 2009 60 1501 332 1502 63 40 2009 60 1501 332 1502 63 1502 58 1502 41 58 40 2009 60 1501 332 1502 63 1502 58 1502 41 41 41 58 40 2009 60 1501 332 1503 63 40 2009 60 1501 332 1502 63 40 2009 60 1501 332 1502 63 1502 58 1502 41 58 40 2009 60 1501 332 1502 63 1502 58 1503 41 41 58 40 2009 60 1501 332 1503 63 40 2009 60 1501 332 1503 63 1503 58 1503 41 58 40 2009 60 1501 332 1503 63 1503 58 1503 41 41 41 41 58 40 2009 60 1501 332 1503 63 40 2009 60 1501 332 1503 63 40 2009 60 1501 332 1503 63 40 2009 60 1501 332 1503 63 1503 58 1503 41 58 40 2009 60 1501 332 1503 63 1503 58 1503 41 41 58 40 2009 60 1501 332 1503 63 40 2009 60 1501 332 1503 63 1503 58 1503 41 58 40 2009 60 1501 332 1503 63 1503 58 1503 41 41 41 58 40 2009 60 1501 332 1503 63 40 2009 60 1501 332 1503 63 40 2009 60 1501 332 1503 63 1503 58 1503 41 58 40 2009 60 1501 332 1503 63 1503 58 1503 41 41 58 40 2009 60 1501 332 1503 63 40 2009 60 1501 332 1503 63 1503 58 1503 41 58 40 2009 60 1501 332 1503 63 1503 58 1503 41 41 41 41 41 59 125 331 91 2005 40 2006 46 2007 41 93 777 809 574 91 93 2010 40 766 574 91 93 91 93 2011 41 123 704 2012 61 1500 59 664 40 704 2013 61 1500 59 2013 60 2011 46 2014 59 2013 349 41 2012 348 2011 91 2013 93 46 2014 59 574 91 93 2015 61 744 574 91 2012 93 59 704 2016 61 1500 59 665 40 574 91 93 2017 696 2011 41 123 2018 46 2019 40 2017 44 1500 44 2015 44 2016 44 2017 46 2014 41 59 2016 348 2017 46 2014 59 125 792 2015 59 125 331 777 809 574 91 93 2010 40 2020 60 574 62 2021 44 2020 60 574 62 2022 41 123 574 91 93 2023 61 744 574 91 2021 46 2024 43 2022 46 2024 93 59 2021 46 2025 40 2023 41 59 2022 46 2025 40 2023 46 2026 40 2021 46 2024 41 41 59 792 2023 59 125 710 809 704 2027 40 823 2028 2029 41 123 688 40 2029 46 2030 323 1500 41 792 45 1501 59 574 91 93 2022 61 2029 46 2031 40 41 59 704 2009 61 1500 59 870 40 2022 91 2009 93 323 1500 41 2009 349 59 664 40 704 2032 61 1500 59 2032 60 1502 59 2032 349 41 688 40 40 2022 91 2009 93 38 1501 332 2032 41 62 1500 41 792 2032 43 2009 42 1502 59 825 744 2033 40 41 59 125 710 809 865 2034 60 2035 62 40 823 2036 60 2035 62 2037 44 2038 60 2035 62 2039 41 123 688 40 2037 46 2040 62 2039 46 2040 41 123 2037 46 2041 40 2039 41 59 125 630 123 2037 46 2042 40 2043 328 2039 46 2044 40 2043 41 41 59 125 125 710 809 865 2034 60 2035 62 40 823 2036 60 2035 62 2037 44 2045 60 2035 62 2039 41 2046 2035 58 2047 60 2035 62 123 688 40 2037 46 2048 62 2039 46 2048 41 123 2037 46 2049 40 2039 41 59 125 630 123 2037 46 2050 40 2051 328 2039 46 2052 40 2051 41 41 59 125 125 710 809 865 2034 60 2035 44 2053 62 40 823 2036 60 2035 62 2037 44 2054 60 2035 44 2053 62 2039 41 123 688 40 2037 46 2055 62 2039 46 2055 41 123 2037 46 2056 40 2039 46 2057 41 59 125 630 123 2037 46 2058 40 2059 328 2039 46 2060 40 2059 41 41 59 125 125 710 809 815 2061 40 823 2062 2063 41 123 2064 2065 61 2063 46 2066 46 2067 40 2068 328 2068 46 2069 323 836 40 2070 41 41 59 688 40 2065 323 752 41 792 2063 46 2071 40 41 46 2072 46 2073 40 1502 41 59 792 40 815 41 2065 46 2074 91 1500 93 46 2075 59 125 331 777 809 574 91 93 2076 40 823 815 2077 41 123 688 40 2077 323 752 309 2077 46 2078 323 1500 41 792 2079 46 2080 60 574 62 40 41 59 688 40 2077 46 2078 37 1502 323 1501 41 825 744 2081 40 41 59 574 91 93 2082 61 744 574 91 2077 46 2078 47 1502 93 59 664 40 704 2029 61 1500 59 2029 60 2082 46 2078 59 2029 349 41 2082 91 2029 93 61 574 46 2083 40 2077 46 2084 40 2029 42 1502 44 1502 41 44 2085 46 2086 41 59 792 2082 59 125 91 2005 40 2006 46 2007 41 93 710 809 2028 2087 40 823 2028 2088 44 2028 2089 41 123 2088 339 2089 59 688 40 2088 46 2090 60 1500 41 2088 348 2089 59 792 2088 59 125 710 809 2028 2091 40 823 2028 2021 44 2028 2092 41 123 2028 2029 61 2092 44 2093 61 1500 44 2094 61 1501 59 870 40 2021 62 1500 41 123 2028 2095 61 2029 47 2021 44 2088 61 2021 59 2021 61 2029 37 2088 59 2029 61 2088 59 2088 61 2094 59 2094 61 2093 45 2095 42 2088 59 2093 61 2088 59 125 2093 339 2092 59 688 40 2093 60 1500 41 2093 61 40 2093 43 2092 41 37 2092 59 792 2093 59 125 710 809 2028 2096 40 823 2097 2098 44 704 2099 41 123 688 40 2099 60 1500 41 825 744 2100 40 362 41 59 688 40 2099 323 1500 41 792 1500 59 2101 60 574 62 2022 61 808 574 91 2099 47 1502 43 1501 93 59 2098 46 2102 40 2022 41 59 688 40 2099 37 1502 323 1500 41 2022 91 94 1501 93 61 1500 59 630 2022 91 94 1501 93 301 40 574 41 40 40 1501 332 2099 37 1502 41 45 1501 41 59 792 744 2028 40 2022 41 59 125 331 777 809 2028 2103 40 823 2104 60 2028 62 2105 41 123 2106 2107 61 2028 46 2108 59 665 40 2106 2109 696 2105 41 2107 348 2109 59 792 2107 59 125 91 2005 40 2006 46 2007 41 93 710 809 569 2110 40 823 2028 2029 44 704 2111 41 123 792 40 2029 38 40 2028 46 2112 332 2111 41 41 62 2028 46 2113 59 125 331 91 2005 40 2006 46 2007 41 93 777 809 574 91 93 2114 40 823 2028 2029 41 123 688 40 2029 46 2115 41 792 2116 46 2117 60 574 62 40 41 59 792 2029 46 2118 40 41 59 125 331 777 809 815 2119 40 823 574 91 93 2077 41 123 2120 2121 61 744 40 41 59 665 40 574 2022 696 2077 41 2121 46 2122 40 362 44 2022 41 59 792 2121 46 2123 40 41 59 125 331 777 809 815 2119 40 823 574 91 93 2077 44 569 2124 61 655 41 123 2125 2126 61 744 40 41 59 664 40 704 2029 61 1500 59 2029 60 2077 46 2127 59 2029 349 41 2126 46 2128 40 362 44 2077 91 2124 63 2077 46 2127 45 2029 45 1501 58 2029 93 41 59 792 2126 46 2129 40 41 59 125 331 777 809 815 2119 40 823 2020 60 574 62 2077 41 123 2130 2131 61 744 40 41 59 665 40 574 2022 696 2077 41 2131 46 2132 40 362 44 2022 41 59 792 2131 46 2133 40 41 59 125 331 777 809 842 2134 40 823 2001 2135 41 123 792 40 842 41 40 2135 46 2136 40 41 45 2002 41 46 2137 59 125 331 777 809 848 2138 40 823 2001 2135 41 123 792 40 848 41 40 2135 46 2139 40 41 45 2002 41 46 2140 59 125 331 710 809 2141 2142 40 823 2141 2143 41 123 688 40 2143 46 2144 41 2143 61 2143 46 2145 40 41 59 792 2143 59 125 331 710 809 2146 2142 40 823 2146 2147 41 123 688 40 33 2147 46 2148 46 2149 41 792 2147 59 792 744 2146 40 2147 46 2148 46 2142 40 41 44 2147 46 2150 41 59 125 125 ,"{'AvgLine': 8, 'CountLine': 285, 'CountStmt': 131, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 90, 'MaxEssential': 4, 'SumEssential': 33, 'AvgCyclomatic': 3, 'CountLineCode': 203, 'CountStmtDecl': 43, 'MaxCyclomatic': 33, 'SumCyclomatic': 85, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 22, 'CountSemicolon': 82, 'CountDeclMethod': 22, 'CountLineCodeExe': 112, 'CountLineComment': 60, 'CountClassCoupled': 27, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 45, 'CountLineInactive': 0, 'CountDeclMethodAll': 28, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.30', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 33, 'SumCyclomaticStrict': 86, 'CountDeclClassMethod': 22, 'AvgCyclomaticModified': 3, 'CountDeclMethodPublic': 10, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 33, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 85, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 0, 'CountDeclMethodInternal': 11, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 17, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 90, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79922,C#,"    public class UT_JsonSerializer
    {
        [TestMethod]
        public void JsonTest_WrongJson()
        {
            var json = ""[    ]XXXXXXX"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""{   }XXXXXXX"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""[,,,,]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""false,X"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""false@@@"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = @""{""""length}"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));
        }

        [TestMethod]
        public void JsonTest_Array()
        {
            var json = ""[    ]"";
            var parsed = JObject.Parse(json);

            Assert.AreEqual(""[]"", parsed.ToString());

            json = ""[1,\""a==\"",    -1.3 ,null] "";
            parsed = JObject.Parse(json);

            Assert.AreEqual(""[1,\""a==\"",-1.3,null]"", parsed.ToString());
        }

        [TestMethod]
        public void JsonTest_Serialize_Map_Test()
        {
            var entry = new Map
            {
                [new byte[] { 0xC1 }] = 1,
                [new byte[] { 0xC2 }] = 2,
            };
            Assert.ThrowsException<DecoderFallbackException>(() => JsonSerializer.Serialize(entry));
        }

        [TestMethod]
        public void JsonTest_Bool()
        {
            var json = ""[  true ,false ]"";
            var parsed = JObject.Parse(json);

            Assert.AreEqual(""[true,false]"", parsed.ToString());

            json = ""[True,FALSE] "";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));
        }

        [TestMethod]
        public void JsonTest_Numbers()
        {
            var json = ""[  1, -2 , 3.5 ]"";
            var parsed = JObject.Parse(json);

            Assert.AreEqual(""[1,-2,3.5]"", parsed.ToString());

            json = ""[200.500000E+005,200.500000e+5,-1.1234e-100]"";
            parsed = JObject.Parse(json);

            Assert.AreEqual(""[20050000,20050000,-1.1234E-100]"", parsed.ToString());

            json = ""[-]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""[1.]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""[.123]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""[--1.123]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""[+1.123]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""[1.12.3]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""[e--1]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""[e++1]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""[E- 1]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""[3e--1]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""[2e++1]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = ""[1E- 1]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));
        }

        [TestMethod]
        public void JsonTest_String()
        {
            var json = @"" ["""""""" ,  """"\b\f\t\n\r\/\\"""" ]"";
            var parsed = JObject.Parse(json);

            Assert.AreEqual(@""["""""""",""""\b\f\t\n\r/\\""""]"", parsed.ToString());

            json = @""[""""\uD834\uDD1E""""]"";
            parsed = JObject.Parse(json);

            Assert.AreEqual(json, parsed.ToString());

            json = @""[""""\\x00""""]"";
            parsed = JObject.Parse(json);

            Assert.AreEqual(json, parsed.ToString());

            json = @""[""""]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = @""[""""\uaaa""""]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = @""[""""\uaa""""]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = @""[""""\ua""""]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = @""[""""\u""""]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));
        }

        [TestMethod]
        public void JsonTest_Object()
        {
            var json = @"" {""""test"""":   true}"";
            var parsed = JObject.Parse(json);

            Assert.AreEqual(@""{""""test"""":true}"", parsed.ToString());

            json = @"" {""""\uAAAA"""":   true}"";
            parsed = JObject.Parse(json);

            Assert.AreEqual(@""{""""\uAAAA"""":true}"", parsed.ToString());

            json = @""{""""a"""":}"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = @""{NULL}"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));

            json = @""[""""a"""":]"";
            Assert.ThrowsException<FormatException>(() => JObject.Parse(json));
        }

        [TestMethod]
        public void Deserialize_WrongJson()
        {
            Assert.ThrowsException<FormatException>(() => JsonSerializer.Deserialize(JObject.Parse(""x""), ExecutionEngineLimits.Default));
        }

        [TestMethod]
        public void Serialize_WrongJson()
        {
            Assert.ThrowsException<FormatException>(() => JsonSerializer.Serialize(StackItem.FromInterface(new object())));
        }

        [TestMethod]
        public void Serialize_EmptyObject()
        {
            var entry = new Map();
            var json = JsonSerializer.Serialize(entry).ToString();

            Assert.AreEqual(json, ""{}"");
        }

        [TestMethod]
        public void Serialize_Number()
        {
            var entry = new VM.Types.Array { 1, 9007199254740992 };
            Assert.ThrowsException<InvalidOperationException>(() => JsonSerializer.Serialize(entry));
        }

        [TestMethod]
        public void Serialize_Null()
        {
            Assert.AreEqual(JObject.Null, JsonSerializer.Serialize(StackItem.Null));
        }

        [TestMethod]
        public void Deserialize_EmptyObject()
        {
            var items = JsonSerializer.Deserialize(JObject.Parse(""{}""), ExecutionEngineLimits.Default);

            Assert.IsInstanceOfType(items, typeof(Map));
            Assert.AreEqual(((Map)items).Count, 0);
        }

        [TestMethod]
        public void Serialize_EmptyArray()
        {
            var entry = new VM.Types.Array();
            var json = JsonSerializer.Serialize(entry).ToString();

            Assert.AreEqual(json, ""[]"");
        }

        [TestMethod]
        public void Deserialize_EmptyArray()
        {
            var items = JsonSerializer.Deserialize(JObject.Parse(""[]""), ExecutionEngineLimits.Default);

            Assert.IsInstanceOfType(items, typeof(VM.Types.Array));
            Assert.AreEqual(((VM.Types.Array)items).Count, 0);
        }

        [TestMethod]
        public void Serialize_Map_Test()
        {
            var entry = new Map
            {
                [""test1""] = 1,
                [""test3""] = 3,
                [""test2""] = 2
            };

            var json = JsonSerializer.Serialize(entry).ToString();

            Assert.AreEqual(json, ""{\""test1\"":1,\""test3\"":3,\""test2\"":2}"");
        }

        [TestMethod]
        public void Deserialize_Map_Test()
        {
            var items = JsonSerializer.Deserialize(JObject.Parse(""{\""test1\"":123,\""test2\"":321}""), ExecutionEngineLimits.Default);

            Assert.IsInstanceOfType(items, typeof(Map));
            Assert.AreEqual(((Map)items).Count, 2);

            var map = (Map)items;

            Assert.IsTrue(map.TryGetValue(""test1"", out var value));
            Assert.AreEqual(value.GetInteger(), 123);

            Assert.IsTrue(map.TryGetValue(""test2"", out value));
            Assert.AreEqual(value.GetInteger(), 321);

            CollectionAssert.AreEqual(map.Values.Select(u => u.GetInteger()).ToArray(), new BigInteger[] { 123, 321 });
        }

        [TestMethod]
        public void Serialize_Array_Bool_Str_Num()
        {
            var entry = new VM.Types.Array { true, ""test"", 123 };

            var json = JsonSerializer.Serialize(entry).ToString();

            Assert.AreEqual(json, ""[true,\""test\"",123]"");
        }

        [TestMethod]
        public void Deserialize_Array_Bool_Str_Num()
        {
            var items = JsonSerializer.Deserialize(JObject.Parse(""[true,\""test\"",123]""), ExecutionEngineLimits.Default);

            Assert.IsInstanceOfType(items, typeof(VM.Types.Array));
            Assert.AreEqual(((VM.Types.Array)items).Count, 3);

            var array = (VM.Types.Array)items;

            Assert.IsTrue(array[0].GetBoolean());
            Assert.AreEqual(array[1].GetString(), ""test"");
            Assert.AreEqual(array[2].GetInteger(), 123);
        }

        [TestMethod]
        public void Serialize_Array_OfArray()
        {
            var entry = new VM.Types.Array
            {
                new VM.Types.Array { true, ""test1"", 123 },
                new VM.Types.Array { true, ""test2"", 321 }
            };

            var json = JsonSerializer.Serialize(entry).ToString();

            Assert.AreEqual(json, ""[[true,\""test1\"",123],[true,\""test2\"",321]]"");
        }

        [TestMethod]
        public void Deserialize_Array_OfArray()
        {
            var items = JsonSerializer.Deserialize(JObject.Parse(""[[true,\""test1\"",123],[true,\""test2\"",321]]""), ExecutionEngineLimits.Default);

            Assert.IsInstanceOfType(items, typeof(VM.Types.Array));
            Assert.AreEqual(((VM.Types.Array)items).Count, 2);

            var array = (VM.Types.Array)items;

            Assert.IsInstanceOfType(array[0], typeof(VM.Types.Array));
            Assert.AreEqual(((VM.Types.Array)array[0]).Count, 3);

            array = (VM.Types.Array)array[0];
            Assert.AreEqual(array.Count, 3);

            Assert.IsTrue(array[0].GetBoolean());
            Assert.AreEqual(array[1].GetString(), ""test1"");
            Assert.AreEqual(array[2].GetInteger(), 123);

            array = (VM.Types.Array)items;
            array = (VM.Types.Array)array[1];
            Assert.AreEqual(array.Count, 3);

            Assert.IsTrue(array[0].GetBoolean());
            Assert.AreEqual(array[1].GetString(), ""test2"");
            Assert.AreEqual(array[2].GetInteger(), 321);
        }
    }",1,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 362 59 2005 46 2006 60 2007 62 40 40 41 328 2008 46 2009 40 2004 41 41 59 2004 61 362 59 2005 46 2006 60 2007 62 40 40 41 328 2008 46 2009 40 2004 41 41 59 2004 61 362 59 2005 46 2006 60 2007 62 40 40 41 328 2008 46 2009 40 2004 41 41 59 2004 61 362 59 2005 46 2006 60 2007 62 40 40 41 328 2008 46 2009 40 2004 41 41 59 2004 61 362 59 2005 46 2006 60 2007 62 40 40 41 328 2008 46 2009 40 2004 41 41 59 2004 61 64 362 362 362 59 2005 46 2006 60 2007 62 40 40 41 328 2008 46 2009 40 2004 41 41 59 125 91 2001 93 777 865 2010 40 41 123 2011 2012 61 362 59 2011 2013 61 2014 46 2015 40 2012 41 59 2016 46 2017 40 362 44 2013 46 2018 40 41 41 59 2012 61 362 59 2013 61 2014 46 2015 40 2012 41 59 2016 46 2017 40 362 44 2013 46 2018 40 41 41 59 125 91 2001 93 777 865 2019 40 41 123 2020 2021 61 744 2022 123 91 744 574 91 93 123 1504 125 93 61 1501 44 91 744 574 91 93 123 1504 125 93 61 1502 44 125 59 2023 46 2024 60 2025 62 40 40 41 328 2026 46 2027 40 2021 41 41 59 125 91 2001 93 777 865 2028 40 41 123 2029 2030 61 362 59 2029 2031 61 2032 46 2033 40 2030 41 59 2034 46 2035 40 362 44 2031 46 2036 40 41 41 59 2030 61 362 59 2034 46 2037 60 2038 62 40 40 41 328 2032 46 2033 40 2030 41 41 59 125 91 2001 93 777 865 2039 40 41 123 2040 2041 61 362 59 2040 2042 61 2043 46 2044 40 2041 41 59 2045 46 2046 40 362 44 2042 46 2047 40 41 41 59 2041 61 362 59 2042 61 2043 46 2044 40 2041 41 59 2045 46 2046 40 362 44 2042 46 2047 40 41 41 59 2041 61 362 59 2045 46 2048 60 2049 62 40 40 41 328 2043 46 2044 40 2041 41 41 59 2041 61 362 59 2045 46 2048 60 2049 62 40 40 41 328 2043 46 2044 40 2041 41 41 59 2041 61 362 59 2045 46 2048 60 2049 62 40 40 41 328 2043 46 2044 40 2041 41 41 59 2041 61 362 59 2045 46 2048 60 2049 62 40 40 41 328 2043 46 2044 40 2041 41 41 59 2041 61 362 59 2045 46 2048 60 2049 62 40 40 41 328 2043 46 2044 40 2041 41 41 59 2041 61 362 59 2045 46 2048 60 2049 62 40 40 41 328 2043 46 2044 40 2041 41 41 59 2041 61 362 59 2045 46 2048 60 2049 62 40 40 41 328 2043 46 2044 40 2041 41 41 59 2041 61 362 59 2045 46 2048 60 2049 62 40 40 41 328 2043 46 2044 40 2041 41 41 59 2041 61 362 59 2045 46 2048 60 2049 62 40 40 41 328 2043 46 2044 40 2041 41 41 59 2041 61 362 59 2045 46 2048 60 2049 62 40 40 41 328 2043 46 2044 40 2041 41 41 59 2041 61 362 59 2045 46 2048 60 2049 62 40 40 41 328 2043 46 2044 40 2041 41 41 59 2041 61 362 59 2045 46 2048 60 2049 62 40 40 41 328 2043 46 2044 40 2041 41 41 59 125 91 2001 93 777 865 2050 40 41 123 2051 2052 61 64 362 362 362 362 362 59 2051 2053 61 2054 46 2055 40 2052 41 59 2056 46 2057 40 64 362 362 362 362 362 44 2053 46 2058 40 41 41 59 2052 61 64 362 362 362 59 2053 61 2054 46 2055 40 2052 41 59 2056 46 2057 40 2052 44 2053 46 2058 40 41 41 59 2052 61 64 362 362 362 59 2053 61 2054 46 2055 40 2052 41 59 2056 46 2057 40 2052 44 2053 46 2058 40 41 41 59 2052 61 64 362 362 59 2056 46 2059 60 2060 62 40 40 41 328 2054 46 2055 40 2052 41 41 59 2052 61 64 362 362 362 59 2056 46 2059 60 2060 62 40 40 41 328 2054 46 2055 40 2052 41 41 59 2052 61 64 362 362 362 59 2056 46 2059 60 2060 62 40 40 41 328 2054 46 2055 40 2052 41 41 59 2052 61 64 362 362 362 59 2056 46 2059 60 2060 62 40 40 41 328 2054 46 2055 40 2052 41 41 59 2052 61 64 362 362 362 59 2056 46 2059 60 2060 62 40 40 41 328 2054 46 2055 40 2052 41 41 59 125 91 2001 93 777 865 2061 40 41 123 2062 2063 61 64 362 362 362 59 2062 2064 61 2065 46 2066 40 2063 41 59 2067 46 2068 40 64 362 362 362 44 2064 46 2069 40 41 41 59 2063 61 64 362 362 362 59 2064 61 2065 46 2066 40 2063 41 59 2067 46 2068 40 64 362 362 362 44 2064 46 2069 40 41 41 59 2063 61 64 362 362 362 59 2067 46 2070 60 2071 62 40 40 41 328 2065 46 2066 40 2063 41 41 59 2063 61 64 362 59 2067 46 2070 60 2071 62 40 40 41 328 2065 46 2066 40 2063 41 41 59 2063 61 64 362 362 362 59 2067 46 2070 60 2071 62 40 40 41 328 2065 46 2066 40 2063 41 41 59 125 91 2001 93 777 865 2072 40 41 123 2073 46 2074 60 2075 62 40 40 41 328 2076 46 2077 40 2078 46 2079 40 362 41 44 2080 46 2081 41 41 59 125 91 2001 93 777 865 2082 40 41 123 2083 46 2084 60 2085 62 40 40 41 328 2086 46 2087 40 2088 46 2089 40 744 755 40 41 41 41 41 59 125 91 2001 93 777 865 2090 40 41 123 2091 2092 61 744 2093 40 41 59 2091 2094 61 2095 46 2096 40 2092 41 46 2097 40 41 59 2098 46 2099 40 2094 44 362 41 59 125 91 2001 93 777 865 2100 40 41 123 2101 2102 61 744 2103 46 2104 46 2105 123 1501 44 1517 125 59 2106 46 2107 60 2108 62 40 40 41 328 2109 46 2110 40 2102 41 41 59 125 91 2001 93 777 865 2111 40 41 123 2112 46 2113 40 2114 46 2115 44 2116 46 2117 40 2118 46 2115 41 41 59 125 91 2001 93 777 865 2119 40 41 123 2120 2121 61 2122 46 2123 40 2124 46 2125 40 362 41 44 2126 46 2127 41 59 2128 46 2129 40 2121 44 836 40 2130 41 41 59 2128 46 2131 40 40 40 2130 41 2121 41 46 2132 44 1500 41 59 125 91 2001 93 777 865 2133 40 41 123 2134 2135 61 744 2136 46 2137 46 2138 40 41 59 2134 2139 61 2140 46 2141 40 2135 41 46 2142 40 41 59 2143 46 2144 40 2139 44 362 41 59 125 91 2001 93 777 865 2145 40 41 123 2146 2147 61 2148 46 2149 40 2150 46 2151 40 362 41 44 2152 46 2153 41 59 2154 46 2155 40 2147 44 836 40 2156 46 2157 46 2158 41 41 59 2154 46 2159 40 40 40 2156 46 2157 46 2158 41 2147 41 46 2160 44 1500 41 59 125 91 2001 93 777 865 2161 40 41 123 2162 2163 61 744 2164 123 91 362 93 61 1501 44 91 362 93 61 1502 44 91 362 93 61 1502 125 59 2162 2165 61 2166 46 2167 40 2163 41 46 2168 40 41 59 2169 46 2170 40 2165 44 362 41 59 125 91 2001 93 777 865 2171 40 41 123 2172 2173 61 2174 46 2175 40 2176 46 2177 40 362 41 44 2178 46 2179 41 59 2180 46 2181 40 2173 44 836 40 2182 41 41 59 2180 46 2183 40 40 40 2182 41 2173 41 46 2184 44 1502 41 59 2172 2185 61 40 2182 41 2173 59 2180 46 2186 40 2185 46 2187 40 362 44 762 2172 2188 41 41 59 2180 46 2183 40 2188 46 2189 40 41 44 1504 41 59 2180 46 2186 40 2185 46 2187 40 362 44 762 2188 41 41 59 2180 46 2183 40 2188 46 2189 40 41 44 1504 41 59 2190 46 2183 40 2185 46 2191 46 2192 40 2193 328 2193 46 2189 40 41 41 46 2194 40 41 44 744 2195 91 93 123 1504 44 1504 125 41 59 125 91 2001 93 777 865 2196 40 41 123 2197 2198 61 744 2199 46 2200 46 2201 123 829 44 362 44 1504 125 59 2197 2202 61 2203 46 2204 40 2198 41 46 2205 40 41 59 2206 46 2207 40 2202 44 362 41 59 125 91 2001 93 777 865 2208 40 41 123 2209 2210 61 2211 46 2212 40 2213 46 2214 40 362 41 44 2215 46 2216 41 59 2217 46 2218 40 2210 44 836 40 2219 46 2220 46 2221 41 41 59 2217 46 2222 40 40 40 2219 46 2220 46 2221 41 2210 41 46 2223 44 1502 41 59 2209 2224 61 40 2219 46 2220 46 2221 41 2210 59 2217 46 2225 40 2224 91 1500 93 46 2226 40 41 41 59 2217 46 2222 40 2224 91 1501 93 46 2227 40 41 44 362 41 59 2217 46 2222 40 2224 91 1502 93 46 2228 40 41 44 1504 41 59 125 91 2001 93 777 865 2229 40 41 123 2230 2231 61 744 2232 46 2233 46 2234 123 744 2232 46 2233 46 2234 123 829 44 362 44 1504 125 44 744 2232 46 2233 46 2234 123 829 44 362 44 1504 125 125 59 2230 2235 61 2236 46 2237 40 2231 41 46 2238 40 41 59 2239 46 2240 40 2235 44 362 41 59 125 91 2001 93 777 865 2241 40 41 123 2242 2243 61 2244 46 2245 40 2246 46 2247 40 362 41 44 2248 46 2249 41 59 2250 46 2251 40 2243 44 836 40 2252 46 2253 46 2254 41 41 59 2250 46 2255 40 40 40 2252 46 2253 46 2254 41 2243 41 46 2256 44 1502 41 59 2242 2257 61 40 2252 46 2253 46 2254 41 2243 59 2250 46 2251 40 2257 91 1500 93 44 836 40 2252 46 2253 46 2254 41 41 59 2250 46 2255 40 40 40 2252 46 2253 46 2254 41 2257 91 1500 93 41 46 2256 44 1502 41 59 2257 61 40 2252 46 2253 46 2254 41 2257 91 1500 93 59 2250 46 2255 40 2257 46 2256 44 1502 41 59 2250 46 2258 40 2257 91 1500 93 46 2259 40 41 41 59 2250 46 2255 40 2257 91 1501 93 46 2260 40 41 44 362 41 59 2250 46 2255 40 2257 91 1502 93 46 2261 40 41 44 1504 41 59 2257 61 40 2252 46 2253 46 2254 41 2243 59 2257 61 40 2252 46 2253 46 2254 41 2257 91 1501 93 59 2250 46 2255 40 2257 46 2256 44 1502 41 59 2250 46 2258 40 2257 91 1500 93 46 2259 40 41 41 59 2250 46 2255 40 2257 91 1501 93 46 2260 40 41 44 362 41 59 2250 46 2255 40 2257 91 1502 93 46 2261 40 41 44 1504 41 59 125 125 ,"{'AvgLine': 13, 'CountLine': 331, 'CountStmt': 167, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 136, 'MaxEssential': 1, 'SumEssential': 53, 'AvgCyclomatic': 1, 'CountLineCode': 245, 'CountStmtDecl': 53, 'MaxCyclomatic': 1, 'SumCyclomatic': 53, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 86, 'CountSemicolon': 145, 'CountDeclMethod': 21, 'CountLineCodeExe': 152, 'CountLineComment': 0, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 77, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 53, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 21, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 53, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 21, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 7, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79817,C#,"    public class Message : ISerializable
    {
        /// <summary>
        /// Indicates the maximum size of <see cref=""Payload""/>.
        /// </summary>
        public const int PayloadMaxSize = 0x02000000;

        private const int CompressionMinSize = 128;
        private const int CompressionThreshold = 64;

        /// <summary>
        /// The flags of the message.
        /// </summary>
        public MessageFlags Flags;

        /// <summary>
        /// The command of the message.
        /// </summary>
        public MessageCommand Command;

        /// <summary>
        /// The payload of the message.
        /// </summary>
        public ISerializable Payload;

        private byte[] _payload_compressed;

        public int Size => sizeof(MessageFlags) + sizeof(MessageCommand) + _payload_compressed.GetVarSize();

        /// <summary>
        /// Creates a new instance of the <see cref=""Message""/> class.
        /// </summary>
        /// <param name=""command"">The command of the message.</param>
        /// <param name=""payload"">The payload of the message. For the messages that don't require a payload, it should be <see langword=""null""/>.</param>
        /// <returns></returns>
        public static Message Create(MessageCommand command, ISerializable payload = null)
        {
            Message message = new()
            {
                Flags = MessageFlags.None,
                Command = command,
                Payload = payload,
                _payload_compressed = payload?.ToArray() ?? Array.Empty<byte>()
            };

            bool tryCompression =
                command == MessageCommand.Block ||
                command == MessageCommand.Extensible ||
                command == MessageCommand.Transaction ||
                command == MessageCommand.Headers ||
                command == MessageCommand.Addr ||
                command == MessageCommand.MerkleBlock ||
                command == MessageCommand.FilterLoad ||
                command == MessageCommand.FilterAdd;

            // Try compression
            if (tryCompression && message._payload_compressed.Length > CompressionMinSize)
            {
                var compressed = message._payload_compressed.CompressLz4();
                if (compressed.Length < message._payload_compressed.Length - CompressionThreshold)
                {
                    message._payload_compressed = compressed;
                    message.Flags |= MessageFlags.Compressed;
                }
            }

            return message;
        }

        private void DecompressPayload()
        {
            if (_payload_compressed.Length == 0) return;
            byte[] decompressed = Flags.HasFlag(MessageFlags.Compressed)
                ? _payload_compressed.DecompressLz4(PayloadMaxSize)
                : _payload_compressed;
            Payload = ReflectionCache<MessageCommand>.CreateSerializable(Command, decompressed);
        }

        void ISerializable.Deserialize(BinaryReader reader)
        {
            Flags = (MessageFlags)reader.ReadByte();
            Command = (MessageCommand)reader.ReadByte();
            _payload_compressed = reader.ReadVarBytes(PayloadMaxSize);
            DecompressPayload();
        }

        void ISerializable.Serialize(BinaryWriter writer)
        {
            writer.Write((byte)Flags);
            writer.Write((byte)Command);
            writer.WriteVarBytes(_payload_compressed);
        }

        internal static int TryDeserialize(ByteString data, out Message msg)
        {
            msg = null;
            if (data.Count < 3) return 0;

            var header = data.Slice(0, 3).ToArray();
            var flags = (MessageFlags)header[0];
            ulong length = header[2];
            var payloadIndex = 3;

            if (length == 0xFD)
            {
                if (data.Count < 5) return 0;
                length = BinaryPrimitives.ReadUInt16LittleEndian(data.Slice(payloadIndex, 2).ToArray());
                payloadIndex += 2;
            }
            else if (length == 0xFE)
            {
                if (data.Count < 7) return 0;
                length = BinaryPrimitives.ReadUInt32LittleEndian(data.Slice(payloadIndex, 4).ToArray());
                payloadIndex += 4;
            }
            else if (length == 0xFF)
            {
                if (data.Count < 11) return 0;
                length = BinaryPrimitives.ReadUInt64LittleEndian(data.Slice(payloadIndex, 8).ToArray());
                payloadIndex += 8;
            }

            if (length > PayloadMaxSize) throw new FormatException();

            if (data.Count < (int)length + payloadIndex) return 0;

            msg = new Message()
            {
                Flags = flags,
                Command = (MessageCommand)header[1],
                _payload_compressed = length <= 0 ? Array.Empty<byte>() : data.Slice(payloadIndex, (int)length).ToArray()
            };
            msg.DecompressPayload();

            return payloadIndex + (int)length;
        }
    }",1,777 587 2000 58 2001 123 331 777 601 704 2002 61 1509 59 773 601 704 2003 61 1504 59 773 601 704 2004 61 1503 59 331 777 2005 2006 59 331 777 2007 2008 59 331 777 2001 2009 59 773 574 91 93 2010 59 777 704 2011 328 805 40 2005 41 43 805 40 2007 41 43 2010 46 2012 40 41 59 331 777 809 2000 2013 40 2007 2014 44 2001 2015 61 752 41 123 2000 2016 61 744 40 41 123 2006 61 2005 46 2017 44 2008 61 2014 44 2009 61 2015 44 2010 61 2015 346 2018 40 41 343 2019 46 2020 60 574 62 40 41 125 59 569 2021 61 2014 323 2007 46 2022 309 2014 323 2007 46 2023 309 2014 323 2007 46 2024 309 2014 323 2007 46 2025 309 2014 323 2007 46 2026 309 2014 323 2007 46 2027 309 2014 323 2007 46 2028 309 2014 323 2007 46 2029 59 330 688 40 2021 307 2016 46 2010 46 2030 62 2003 41 123 2031 2032 61 2016 46 2010 46 2033 40 41 59 688 40 2032 46 2030 60 2016 46 2010 46 2030 45 2004 41 123 2016 46 2010 61 2032 59 2016 46 2006 347 2005 46 2034 59 125 125 792 2016 59 125 773 865 2035 40 41 123 688 40 2010 46 2036 323 1500 41 792 59 574 91 93 2037 61 2006 46 2038 40 2005 46 2039 41 63 2010 46 2040 40 2002 41 58 2010 59 2009 61 2041 60 2007 62 46 2042 40 2008 44 2037 41 59 125 865 2001 46 2043 40 2044 2045 41 123 2006 61 40 2005 41 2045 46 2046 40 41 59 2008 61 40 2007 41 2045 46 2046 40 41 59 2010 61 2045 46 2047 40 2002 41 59 2035 40 41 59 125 865 2001 46 2048 40 2049 2050 41 123 2050 46 2051 40 40 574 41 2006 41 59 2050 46 2051 40 40 574 41 2008 41 59 2050 46 2052 40 2010 41 59 125 710 809 704 2053 40 2054 2055 44 762 2000 2056 41 123 2056 61 752 59 688 40 2055 46 2057 60 1502 41 792 1500 59 2058 2059 61 2055 46 2060 40 1500 44 1502 41 46 2061 40 41 59 2058 2062 61 40 2005 41 2059 91 1500 93 59 848 2063 61 2059 91 1502 93 59 2058 2064 61 1502 59 688 40 2063 323 1504 41 123 688 40 2055 46 2057 60 1502 41 792 1500 59 2063 61 2065 46 2066 40 2055 46 2060 40 2064 44 1502 41 46 2061 40 41 41 59 2064 348 1502 59 125 630 688 40 2063 323 1504 41 123 688 40 2055 46 2057 60 1502 41 792 1500 59 2063 61 2067 46 2068 40 2055 46 2060 40 2064 44 1502 41 46 2061 40 41 41 59 2064 348 1502 59 125 630 688 40 2063 323 1504 41 123 688 40 2055 46 2057 60 1503 41 792 1500 59 2063 61 2069 46 2070 40 2055 46 2060 40 2064 44 1502 41 46 2061 40 41 41 59 2064 348 1502 59 125 688 40 2063 62 2002 41 825 744 2071 40 41 59 688 40 2055 46 2057 60 40 704 41 2063 43 2064 41 792 1500 59 2056 61 744 2000 40 41 123 2006 61 2062 44 2008 61 40 2007 41 2059 91 1501 93 44 2010 61 2063 329 1500 63 2072 46 2073 60 574 62 40 41 58 2055 46 2060 40 2064 44 40 704 41 2063 41 46 2061 40 41 125 59 2056 46 2035 40 41 59 792 2064 43 40 704 41 2063 59 125 125 ,"{'AvgLine': 16, 'CountLine': 137, 'CountStmt': 62, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 2, 'AvgLineBlank': 1, 'CountStmtExe': 43, 'MaxEssential': 10, 'SumEssential': 14, 'AvgCyclomatic': 3, 'CountLineCode': 98, 'CountStmtDecl': 22, 'MaxCyclomatic': 11, 'SumCyclomatic': 19, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 20, 'CountSemicolon': 44, 'CountDeclMethod': 6, 'CountLineCodeExe': 58, 'CountLineComment': 19, 'CountClassCoupled': 12, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 25, 'CountLineInactive': 0, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.19', 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 11, 'SumCyclomaticStrict': 27, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 3, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 11, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 3, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 4, 'CountDeclMethodInternal': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 7, 'CountDeclInstanceVariable': 4, 'PercentLackOfCohesionModified': 25, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
