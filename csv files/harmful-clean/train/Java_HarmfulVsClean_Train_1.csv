id,language,text,smell,tokens,metrics
2911,Java,"    class Builder {
        private String rpcHost;
        private int rpcPort = -1;
        private String rpcUser;
        private String rpcPassword;
        private URLStreamHandler urlStreamHandler;
        private RequestIDGenerator requestIDGenerator;

        public Builder rpcHost(String rpcHost) {
            this.rpcHost = rpcHost;
            return this;
        }

        public Builder rpcPort(int rpcPort) {
            this.rpcPort = rpcPort;
            return this;
        }

        public Builder rpcUser(String rpcUser) {
            this.rpcUser = rpcUser;
            return this;
        }

        public Builder rpcPassword(String rpcPassword) {
            this.rpcPassword = rpcPassword;
            return this;
        }

        public Builder urlStreamHandler(URLStreamHandler urlStreamHandler) {
            this.urlStreamHandler = urlStreamHandler;
            return this;
        }

        public Builder requestIDGenerator(RequestIDGenerator requestIDGenerator) {
            this.requestIDGenerator = requestIDGenerator;
            return this;
        }

        public BitcoindClient build() throws MalformedURLException {
            var userPass = checkNotNull(rpcUser, ""rpcUser not set"") +
                    "":"" + checkNotNull(rpcPassword, ""rpcPassword not set"");

            var headers = Collections.singletonMap(""Authorization"", ""Basic "" +
                    Base64.getEncoder().encodeToString(userPass.getBytes(StandardCharsets.US_ASCII)));

            var httpClient = new JsonRpcHttpClient(
                    new ObjectMapper()
                            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
                            .configure(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE, true),
                    new URL(""http"", rpcHost, rpcPort, """", urlStreamHandler),
                    headers);
            Optional.ofNullable(requestIDGenerator).ifPresent(httpClient::setRequestIDGenerator);
            return ProxyUtil.createClientProxy(getClass().getClassLoader(), BitcoindClient.class, httpClient);
        }
    }",0,587 2000 123 773 2001 2002 59 773 704 2003 61 45 1501 59 773 2001 2004 59 773 2001 2005 59 773 2006 2007 59 773 2008 2009 59 777 2000 2002 40 2001 2002 41 123 823 46 2002 61 2002 59 792 823 59 125 777 2000 2003 40 704 2003 41 123 823 46 2003 61 2003 59 792 823 59 125 777 2000 2004 40 2001 2004 41 123 823 46 2004 61 2004 59 792 823 59 125 777 2000 2005 40 2001 2005 41 123 823 46 2005 61 2005 59 792 823 59 125 777 2000 2007 40 2006 2007 41 123 823 46 2007 61 2007 59 792 823 59 125 777 2000 2009 40 2008 2009 41 123 823 46 2009 61 2009 59 792 823 59 125 777 2010 2011 40 41 826 2012 123 2013 2014 61 2015 40 2004 44 362 41 43 362 43 2015 40 2005 44 362 41 59 2013 2016 61 2017 46 2018 40 362 44 362 43 2019 46 2020 40 41 46 2021 40 2014 46 2022 40 2023 46 2024 41 41 41 59 2013 2025 61 744 2026 40 744 2027 40 41 46 2028 40 2029 46 2030 44 2031 41 46 2028 40 2029 46 2032 44 2033 41 44 744 2034 40 362 44 2002 44 2003 44 362 44 2007 41 44 2016 41 59 2035 46 2036 40 2009 41 46 2037 40 2025 58 58 2038 41 59 792 2039 46 2040 40 2041 40 41 46 2042 40 41 44 2010 46 587 44 2025 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 55, 'CountStmt': 31, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 46, 'CountStmtDecl': 17, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountSemicolon': 23, 'CountDeclMethod': 7, 'CountLineCodeExe': 25, 'CountLineComment': 0, 'CountClassCoupled': 14, 'CountClassDerived': 0, 'CountLineCodeDecl': 20, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 7, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 14, 'CountDeclInstanceVariable': 6, 'PercentLackOfCohesionModified': 71}"
2930,Java,"@EqualsAndHashCode(callSuper = true, exclude = {""uid""})
@Value
@Slf4j
public final class AckMessage extends NetworkEnvelope implements MailboxMessage, PersistablePayload, ExpirablePayload {
    public static final long TTL = TimeUnit.DAYS.toMillis(7);

    private final String uid;
    private final NodeAddress senderNodeAddress;
    private final AckMessageSourceType sourceType;
    private final String sourceMsgClassName;
    @Nullable
    private final String sourceUid;
    private final String sourceId;
    private final boolean success;
    @Nullable
    private final String errorMessage;

    /**
     *
     * @param senderNodeAddress       Address of sender
     * @param sourceType            Type of source e.g. TradeMessage, DisputeMessage,...
     * @param sourceMsgClassName    Class name of source msg
     * @param sourceUid             Optional Uid of source (TradeMessage). Can be null if we receive trades/offers from old clients
     * @param sourceId              Id of source (tradeId, disputeId)
     * @param success               True if source message was processed successfully
     * @param errorMessage          Optional error message if source message processing failed
     */
    public AckMessage(NodeAddress senderNodeAddress,
                      AckMessageSourceType sourceType,
                      String sourceMsgClassName,
                      String sourceUid,
                      String sourceId,
                      boolean success,
                      String errorMessage) {
        this(UUID.randomUUID().toString(),
                senderNodeAddress,
                sourceType,
                sourceMsgClassName,
                sourceUid,
                sourceId,
                success,
                errorMessage,
                Version.getP2PMessageVersion());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    private AckMessage(String uid,
                       NodeAddress senderNodeAddress,
                       AckMessageSourceType sourceType,
                       String sourceMsgClassName,
                       @Nullable String sourceUid,
                       String sourceId,
                       boolean success,
                       @Nullable String errorMessage,
                       int messageVersion) {
        super(messageVersion);
        this.uid = uid;
        this.senderNodeAddress = senderNodeAddress;
        this.sourceType = sourceType;
        this.sourceMsgClassName = sourceMsgClassName;
        this.sourceUid = sourceUid;
        this.sourceId = sourceId;
        this.success = success;
        this.errorMessage = errorMessage;
    }

    public protobuf.AckMessage toProtoMessage() {
        return getBuilder().build();
    }

    @Override
    public protobuf.NetworkEnvelope toProtoNetworkEnvelope() {
        return getNetworkEnvelopeBuilder().setAckMessage(getBuilder()).build();
    }

    public protobuf.AckMessage.Builder getBuilder() {
        protobuf.AckMessage.Builder builder = protobuf.AckMessage.newBuilder()
                .setUid(uid)
                .setSenderNodeAddress(senderNodeAddress.toProtoMessage())
                .setSourceType(sourceType.name())
                .setSourceMsgClassName(sourceMsgClassName)
                .setSourceId(sourceId)
                .setSuccess(success);
        Optional.ofNullable(sourceUid).ifPresent(builder::setSourceUid);
        Optional.ofNullable(errorMessage).ifPresent(builder::setErrorMessage);
        return builder;
    }

    public static AckMessage fromProto(protobuf.AckMessage proto, int messageVersion) {
        AckMessageSourceType sourceType = ProtoUtil.enumFromProto(AckMessageSourceType.class, proto.getSourceType());
        return new AckMessage(proto.getUid(),
                NodeAddress.fromProto(proto.getSenderNodeAddress()),
                sourceType,
                proto.getSourceMsgClassName(),
                proto.getSourceUid().isEmpty() ? null : proto.getSourceUid(),
                proto.getSourceId(),
                proto.getSuccess(),
                proto.getErrorMessage().isEmpty() ? null : proto.getErrorMessage(),
                messageVersion);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public long getTTL() {
        return TTL;
    }

    @Override
    public String toString() {
        return ""AckMessage{"" +
                ""\n     uid='"" + uid + '\'' +
                "",\n     senderNodeAddress="" + senderNodeAddress +
                "",\n     sourceType="" + sourceType +
                "",\n     sourceMsgClassName='"" + sourceMsgClassName + '\'' +
                "",\n     sourceUid='"" + sourceUid + '\'' +
                "",\n     sourceId='"" + sourceId + '\'' +
                "",\n     success="" + success +
                "",\n     errorMessage='"" + errorMessage + '\'' +
                ""\n} "" + super.toString();
    }
}",0,64 2000 40 2001 61 2002 44 2003 61 123 362 125 41 64 2004 64 2005 777 657 587 2006 650 2007 693 2008 44 2009 44 2010 123 777 809 657 726 2011 61 2012 46 2013 46 2014 40 1502 41 59 773 657 2015 2016 59 773 657 2017 2018 59 773 657 2019 2020 59 773 657 2015 2021 59 64 2022 773 657 2015 2023 59 773 657 2015 2024 59 773 657 570 2025 59 64 2022 773 657 2015 2026 59 306 777 2006 40 2017 2018 44 2019 2020 44 2015 2021 44 2015 2023 44 2015 2024 44 570 2025 44 2015 2026 41 123 823 40 2027 46 2028 40 41 46 2029 40 41 44 2018 44 2020 44 2021 44 2023 44 2024 44 2025 44 2026 44 2030 46 2031 40 41 41 59 125 331 330 331 773 2006 40 2015 2016 44 2017 2018 44 2019 2020 44 2015 2021 44 64 2022 2015 2023 44 2015 2024 44 570 2025 44 64 2022 2015 2026 44 704 2032 41 123 818 40 2032 41 59 823 46 2016 61 2016 59 823 46 2018 61 2018 59 823 46 2020 61 2020 59 823 46 2021 61 2021 59 823 46 2023 61 2023 59 823 46 2024 61 2024 59 823 46 2025 61 2025 59 823 46 2026 61 2026 59 125 777 2033 46 2006 2034 40 41 123 792 2035 40 41 46 2036 40 41 59 125 64 2037 777 2033 46 2007 2038 40 41 123 792 2039 40 41 46 2040 40 2041 40 41 41 46 2042 40 41 59 125 777 2033 46 2006 46 2043 2044 40 41 123 2033 46 2006 46 2043 2045 61 2033 46 2006 46 2046 40 41 46 2047 40 2016 41 46 2048 40 2018 46 2034 40 41 41 46 2049 40 2020 46 2050 40 41 41 46 2051 40 2021 41 46 2052 40 2024 41 46 2053 40 2025 41 59 2054 46 2055 40 2023 41 46 2056 40 2045 58 58 2057 41 59 2054 46 2055 40 2026 41 46 2056 40 2045 58 58 2058 41 59 792 2045 59 125 777 809 2006 2059 40 2033 46 2006 2060 44 704 2032 41 123 2019 2020 61 2061 46 2062 40 2019 46 587 44 2060 46 2063 40 41 41 59 792 744 2006 40 2060 46 2064 40 41 44 2017 46 2059 40 2060 46 2065 40 41 41 44 2020 44 2060 46 2066 40 41 44 2060 46 2067 40 41 46 2068 40 41 63 2069 58 2060 46 2067 40 41 44 2060 46 2070 40 41 44 2060 46 2071 40 41 44 2060 46 2072 40 41 46 2068 40 41 63 2069 58 2060 46 2072 40 41 44 2032 41 59 125 331 330 331 64 2037 777 726 2073 40 41 123 792 2011 59 125 64 2037 777 2015 2074 40 41 123 792 362 43 362 43 2016 43 314 43 362 43 2018 43 362 43 2020 43 362 43 2021 43 314 43 362 43 2023 43 314 43 362 43 2024 43 314 43 362 43 2025 43 362 43 2026 43 314 43 362 43 818 46 2074 40 41 59 125 125 ,"{'AvgLine': 11, 'CountLine': 129, 'CountStmt': 38, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 21, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 100, 'CountStmtDecl': 20, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AvgLineComment': 1, 'CountClassBase': 4, 'CountLineBlank': 13, 'CountSemicolon': 29, 'CountDeclMethod': 8, 'CountLineCodeExe': 52, 'CountLineComment': 16, 'CountClassCoupled': 16, 'CountClassDerived': 0, 'CountLineCodeDecl': 43, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.16', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 7, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 62, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 16, 'CountDeclInstanceVariable': 8, 'PercentLackOfCohesionModified': 12}"
2887,Java,"@EqualsAndHashCode(exclude = {""hash""})
@Getter
public abstract class OfferPayloadBase implements ProtectedStoragePayload, ExpirablePayload, RequiresOwnerIsOnlinePayload {
    public static final long TTL = TimeUnit.MINUTES.toMillis(9);

    protected final String id;
    protected final long date;
    // For fiat offer the baseCurrencyCode is BTC and the counterCurrencyCode is the fiat currency
    // For altcoin offers it is the opposite. baseCurrencyCode is the altcoin and the counterCurrencyCode is BTC.
    protected final String baseCurrencyCode;
    protected final String counterCurrencyCode;
    // price if fixed price is used (usePercentageBasedPrice = false), otherwise 0
    protected final long price;
    protected final long amount;
    protected final long minAmount;
    protected final String paymentMethodId;
    protected final String makerPaymentAccountId;
    protected final NodeAddress ownerNodeAddress;
    protected final OfferDirection direction;
    protected final String versionNr;
    protected final int protocolVersion;
    @JsonExclude
    protected final PubKeyRing pubKeyRing;
    // cache
    protected transient byte[] hash;
    @Nullable
    protected final Map<String, String> extraDataMap;

    public OfferPayloadBase(String id,
                            long date,
                            NodeAddress ownerNodeAddress,
                            PubKeyRing pubKeyRing,
                            String baseCurrencyCode,
                            String counterCurrencyCode,
                            OfferDirection direction,
                            long price,
                            long amount,
                            long minAmount,
                            String paymentMethodId,
                            String makerPaymentAccountId,
                            @Nullable Map<String, String> extraDataMap,
                            String versionNr,
                            int protocolVersion) {
        this.id = id;
        this.date = date;
        this.ownerNodeAddress = ownerNodeAddress;
        this.pubKeyRing = pubKeyRing;
        this.baseCurrencyCode = baseCurrencyCode;
        this.counterCurrencyCode = counterCurrencyCode;
        this.direction = direction;
        this.price = price;
        this.amount = amount;
        this.minAmount = minAmount;
        this.paymentMethodId = paymentMethodId;
        this.makerPaymentAccountId = makerPaymentAccountId;
        this.extraDataMap = extraDataMap;
        this.versionNr = versionNr;
        this.protocolVersion = protocolVersion;
    }

    public byte[] getHash() {
        if (this.hash == null) {
            this.hash = Hash.getSha256Hash(this.toProtoMessage().toByteArray());
        }
        return this.hash;
    }

    @Override
    public PublicKey getOwnerPubKey() {
        return pubKeyRing.getSignaturePubKey();
    }

    // In the offer we support base and counter currency
    // Fiat offers have base currency BTC and counterCurrency Fiat
    // Altcoins have base currency Altcoin and counterCurrency BTC
    // The rest of the app does not support yet that concept of base currency and counter currencies
    // so we map here for convenience
    public String getCurrencyCode() {
        return getBaseCurrencyCode().equals(""BTC"") ? getCounterCurrencyCode() : getBaseCurrencyCode();
    }

    @Override
    public long getTTL() {
        return TTL;
    }

    @Override
    public String toString() {
        return ""OfferPayloadBase{"" +
                ""\r\n     id='"" + id + '\'' +
                "",\r\n     date="" + date +
                "",\r\n     baseCurrencyCode='"" + baseCurrencyCode + '\'' +
                "",\r\n     counterCurrencyCode='"" + counterCurrencyCode + '\'' +
                "",\r\n     price="" + price +
                "",\r\n     amount="" + amount +
                "",\r\n     minAmount="" + minAmount +
                "",\r\n     paymentMethodId='"" + paymentMethodId + '\'' +
                "",\r\n     makerPaymentAccountId='"" + makerPaymentAccountId + '\'' +
                "",\r\n     ownerNodeAddress="" + ownerNodeAddress +
                "",\r\n     direction="" + direction +
                "",\r\n     versionNr='"" + versionNr + '\'' +
                "",\r\n     protocolVersion="" + protocolVersion +
                "",\r\n     pubKeyRing="" + pubKeyRing +
                "",\r\n     hash="" + (hash != null ? Hex.encode(hash) : ""null"") +
                "",\r\n     extraDataMap="" + extraDataMap +
                ""\r\n}"";
    }
}",0,64 2000 40 2001 61 123 362 125 41 64 2002 777 539 587 2003 693 2004 44 2005 44 2006 123 777 809 657 726 2007 61 2008 46 2009 46 2010 40 1502 41 59 775 657 2011 2012 59 775 657 726 2013 59 330 330 775 657 2011 2014 59 775 657 2011 2015 59 330 775 657 726 2016 59 775 657 726 2017 59 775 657 726 2018 59 775 657 2011 2019 59 775 657 2011 2020 59 775 657 2021 2022 59 775 657 2023 2024 59 775 657 2011 2025 59 775 657 704 2026 59 64 2027 775 657 2028 2029 59 330 775 828 574 91 93 2030 59 64 2031 775 657 2032 60 2011 44 2011 62 2033 59 777 2003 40 2011 2012 44 726 2013 44 2021 2022 44 2028 2029 44 2011 2014 44 2011 2015 44 2023 2024 44 726 2016 44 726 2017 44 726 2018 44 2011 2019 44 2011 2020 44 64 2031 2032 60 2011 44 2011 62 2033 44 2011 2025 44 704 2026 41 123 823 46 2012 61 2012 59 823 46 2013 61 2013 59 823 46 2022 61 2022 59 823 46 2029 61 2029 59 823 46 2014 61 2014 59 823 46 2015 61 2015 59 823 46 2024 61 2024 59 823 46 2016 61 2016 59 823 46 2017 61 2017 59 823 46 2018 61 2018 59 823 46 2019 61 2019 59 823 46 2020 61 2020 59 823 46 2033 61 2033 59 823 46 2025 61 2025 59 823 46 2026 61 2026 59 125 777 574 91 93 2034 40 41 123 688 40 823 46 2030 323 2035 41 123 823 46 2030 61 2036 46 2037 40 823 46 2038 40 41 46 2039 40 41 41 59 125 792 823 46 2030 59 125 64 2040 777 2041 2042 40 41 123 792 2029 46 2043 40 41 59 125 330 330 330 330 330 777 2011 2044 40 41 123 792 2045 40 41 46 2046 40 362 41 63 2047 40 41 58 2045 40 41 59 125 64 2040 777 726 2048 40 41 123 792 2007 59 125 64 2040 777 2011 2049 40 41 123 792 362 43 362 43 2012 43 314 43 362 43 2013 43 362 43 2014 43 314 43 362 43 2015 43 314 43 362 43 2016 43 362 43 2017 43 362 43 2018 43 362 43 2019 43 314 43 362 43 2020 43 314 43 362 43 2022 43 362 43 2024 43 362 43 2025 43 314 43 362 43 2026 43 362 43 2029 43 362 43 40 2030 340 2050 63 2051 46 2052 40 2030 41 58 362 41 43 362 43 2033 43 362 59 125 125 ,"{'AvgLine': 11, 'CountLine': 108, 'CountStmt': 46, 'MaxNesting': 1, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 92, 'CountStmtDecl': 24, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AvgLineComment': 0, 'CountClassBase': 4, 'CountLineBlank': 7, 'CountSemicolon': 38, 'CountDeclMethod': 6, 'CountLineCodeExe': 40, 'CountLineComment': 9, 'CountClassCoupled': 14, 'CountClassDerived': 2, 'CountLineCodeDecl': 45, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.10', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 6, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 65, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 14, 'CountDeclInstanceVariable': 16, 'PercentLackOfCohesionModified': 65}"
2914,Java,"public class BisqHelpFormatter implements HelpFormatter {

    private final String fullName;
    private final String scriptName;
    private final String version;

    public BisqHelpFormatter(String fullName, String scriptName, String version) {
        this.fullName = fullName;
        this.scriptName = scriptName;
        this.version = version;
    }

    public String format(Map<String, ? extends OptionDescriptor> descriptors) {

        StringBuilder output = new StringBuilder();
        output.append(String.format(""%s version %s\n\n"", fullName, version));
        output.append(String.format(""Usage: %s [options]\n\n"", scriptName));
        output.append(""Options:\n\n"");

        for (Map.Entry<String, ? extends OptionDescriptor> entry : descriptors.entrySet()) {
            String optionName = entry.getKey();
            OptionDescriptor optionDesc = entry.getValue();

            if (optionDesc.representsNonOptions())
                continue;

            output.append(String.format(""%s\n"", formatOptionSyntax(optionName, optionDesc)));
            output.append(String.format(""%s\n"", formatOptionDescription(optionDesc)));
        }

        return output.toString();
    }

    private String formatOptionSyntax(String optionName, OptionDescriptor optionDesc) {
        StringBuilder result = new StringBuilder(String.format(""  --%s"", optionName));

        if (optionDesc.acceptsArguments())
            result.append(String.format(""=<%s>"", formatArgDescription(optionDesc)));

        List<?> defaultValues = optionDesc.defaultValues();
        if (defaultValues.size() > 0)
            result.append(String.format("" (default: %s)"", formatDefaultValues(defaultValues)));

        return result.toString();
    }

    private String formatArgDescription(OptionDescriptor optionDesc) {
        String argDescription = optionDesc.argumentDescription();

        if (argDescription.length() > 0)
            return argDescription;

        String typeIndicator = optionDesc.argumentTypeIndicator();

        if (typeIndicator == null)
            return ""value"";

        try {
            Class<?> type = Class.forName(typeIndicator);
            return type.isEnum() ?
                    Arrays.stream(type.getEnumConstants()).map(Object::toString).collect(Collectors.joining(""|"")) :
                    typeIndicator.substring(typeIndicator.lastIndexOf('.') + 1);
        } catch (ClassNotFoundException ex) {
            // typeIndicator is something other than a class name, which can occur
            // in certain cases e.g. where OptionParser.withValuesConvertedBy is used.
            return typeIndicator;
        }
    }

    private Object formatDefaultValues(List<?> defaultValues) {
        return defaultValues.size() == 1 ?
                defaultValues.get(0) :
                defaultValues.toString();
    }

    private String formatOptionDescription(OptionDescriptor optionDesc) {
        StringBuilder output = new StringBuilder();

        String remainder = optionDesc.description().trim();

        // Wrap description text at 80 characters with 8 spaces of indentation and a
        // maximum of 72 chars of text, wrapping on spaces. Strings longer than 72 chars
        // without any spaces (e.g. a URL) are allowed to overflow the 80-char margin.
        while (remainder.length() > 72) {
            int idxFirstSpace = remainder.indexOf(' ');
            int chunkLen = idxFirstSpace == -1 ? remainder.length() : Math.max(idxFirstSpace, 73);
            String chunk = remainder.substring(0, chunkLen);
            int idxLastSpace = chunk.lastIndexOf(' ');
            int idxBreak = idxLastSpace > 0 ? idxLastSpace : chunk.length();
            String line = remainder.substring(0, idxBreak);
            output.append(formatLine(line));
            remainder = remainder.substring(chunk.length() - (chunk.length() - idxBreak)).trim();
        }

        if (remainder.length() > 0)
            output.append(formatLine(remainder));

        return output.toString();
    }

    private String formatLine(String line) {
        return String.format(""        %s\n"", line.trim());
    }
}",0,777 587 2000 693 2001 123 773 657 2002 2003 59 773 657 2002 2004 59 773 657 2002 2005 59 777 2000 40 2002 2003 44 2002 2004 44 2002 2005 41 123 823 46 2003 61 2003 59 823 46 2004 61 2004 59 823 46 2005 61 2005 59 125 777 2002 2006 40 2007 60 2002 44 63 650 2008 62 2009 41 123 2010 2011 61 744 2010 40 41 59 2011 46 2012 40 2002 46 2006 40 362 44 2003 44 2005 41 41 59 2011 46 2012 40 2002 46 2006 40 362 44 2004 41 41 59 2011 46 2012 40 362 41 59 664 40 2007 46 2013 60 2002 44 63 650 2008 62 2014 58 2009 46 2015 40 41 41 123 2002 2016 61 2014 46 2017 40 41 59 2008 2018 61 2014 46 2019 40 41 59 688 40 2018 46 2020 40 41 41 605 59 2011 46 2012 40 2002 46 2006 40 362 44 2021 40 2016 44 2018 41 41 41 59 2011 46 2012 40 2002 46 2006 40 362 44 2022 40 2018 41 41 41 59 125 792 2011 46 2023 40 41 59 125 773 2002 2024 40 2002 2025 44 2008 2026 41 123 2027 2028 61 744 2027 40 2002 46 2006 40 362 44 2025 41 41 59 688 40 2026 46 2029 40 41 41 2028 46 2030 40 2002 46 2006 40 362 44 2031 40 2026 41 41 41 59 2032 60 63 62 2033 61 2026 46 2033 40 41 59 688 40 2033 46 2034 40 41 62 1500 41 2028 46 2030 40 2002 46 2006 40 362 44 2035 40 2033 41 41 41 59 792 2028 46 2036 40 41 59 125 773 2002 2037 40 2008 2026 41 123 2002 2038 61 2026 46 2039 40 41 59 688 40 2038 46 2040 40 41 62 1500 41 792 2038 59 2002 2041 61 2026 46 2042 40 41 59 688 40 2041 323 2043 41 792 362 59 830 123 2044 60 63 62 2045 61 2044 46 2046 40 2041 41 59 792 2045 46 2047 40 41 63 2048 46 2049 40 2045 46 2050 40 41 41 46 2051 40 2052 58 58 2053 41 46 2054 40 2055 46 2056 40 362 41 41 58 2041 46 2057 40 2041 46 2058 40 314 41 43 1501 41 59 125 580 40 2059 2060 41 123 330 330 792 2041 59 125 125 773 2061 2062 40 2063 60 63 62 2064 41 123 792 2064 46 2065 40 41 323 1501 63 2064 46 2066 40 1500 41 58 2064 46 2067 40 41 59 125 773 2002 2068 40 2008 2026 41 123 2069 2070 61 744 2069 40 41 59 2002 2071 61 2026 46 2072 40 41 46 2073 40 41 59 330 330 330 870 40 2071 46 2074 40 41 62 1503 41 123 704 2075 61 2071 46 2076 40 314 41 59 704 2077 61 2075 323 45 1501 63 2071 46 2074 40 41 58 2078 46 2079 40 2075 44 1503 41 59 2002 2080 61 2071 46 2081 40 1500 44 2077 41 59 704 2082 61 2080 46 2083 40 314 41 59 704 2084 61 2082 62 1500 63 2082 58 2080 46 2074 40 41 59 2002 2085 61 2071 46 2081 40 1500 44 2084 41 59 2070 46 2086 40 2087 40 2085 41 41 59 2071 61 2071 46 2081 40 2080 46 2074 40 41 45 40 2080 46 2074 40 41 45 2084 41 41 46 2073 40 41 59 125 688 40 2071 46 2074 40 41 62 1500 41 2070 46 2088 40 2089 40 2071 41 41 59 792 2070 46 2090 40 41 59 125 773 2002 2091 40 2002 2092 41 123 792 2002 46 2006 40 362 44 2092 46 2093 40 41 41 59 125 125 ,"{'AvgLine': 13, 'CountLine': 104, 'CountStmt': 60, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 48, 'MaxEssential': 4, 'SumEssential': 12, 'AvgCyclomatic': 2, 'CountLineCode': 75, 'CountStmtDecl': 28, 'MaxCyclomatic': 5, 'SumCyclomatic': 20, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 24, 'CountSemicolon': 42, 'CountDeclMethod': 7, 'CountLineCodeExe': 53, 'CountLineComment': 5, 'CountClassCoupled': 10, 'CountClassDerived': 0, 'CountLineCodeDecl': 27, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.07', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 10, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 71}"
2973,Java,"public class Utils {
    public static int findFreeSystemPort() {
        try {
            ServerSocket server = new ServerSocket(0);
            int port = server.getLocalPort();
            server.close();
            return port;
        } catch (IOException ignored) {
            return new Random().nextInt(10000) + 50000;
        }
    }

    public static boolean isV3Address(String address) {
        return address.matches(""[a-z2-7]{56}.onion"");
    }
}",0,777 587 2000 123 777 809 704 2001 40 41 123 830 123 2002 2003 61 744 2002 40 1500 41 59 704 2004 61 2003 46 2005 40 41 59 2003 46 2006 40 41 59 792 2004 59 125 580 40 2007 2008 41 123 792 744 2009 40 41 46 2010 40 1505 41 43 1506 59 125 125 777 809 570 2011 40 2012 2013 41 123 792 2013 46 2014 40 362 41 59 125 125 ,"{'AvgLine': 6, 'CountLine': 16, 'CountStmt': 10, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 5, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 6, 'CountDeclMethod': 2, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 5, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2736,Java,"public class SatoshiColumn extends LongColumn {

    protected final boolean isBsqSatoshis;

    // The default SatoshiColumn JUSTIFICATION is RIGHT.
    public SatoshiColumn(String name) {
        this(name, RIGHT, false);
    }

    public SatoshiColumn(String name, boolean isBsqSatoshis) {
        this(name, RIGHT, isBsqSatoshis);
    }

    public SatoshiColumn(String name, JUSTIFICATION justification) {
        this(name, justification, false);
    }

    public SatoshiColumn(String name, JUSTIFICATION justification, boolean isBsqSatoshis) {
        super(name, justification);
        this.isBsqSatoshis = isBsqSatoshis;
    }

    @Override
    public void addRow(Long value) {
        rows.add(value);

        // We do not know how much padding each StringColumn value needs until it has all the values.
        String s = isBsqSatoshis ? formatBsq(value) : formatSatoshis(value);
        stringColumn.addRow(s);

        if (isNewMaxWidth.test(s))
            maxWidth = s.length();
    }

    @Override
    public String getRowAsFormattedString(int rowIndex) {
        return isBsqSatoshis
                ? formatBsq(getRow(rowIndex))
                : formatSatoshis(getRow(rowIndex));
    }

    @Override
    public StringColumn asStringColumn() {
        return stringColumn.justify();
    }
}",0,777 587 2000 650 2001 123 775 657 570 2002 59 330 777 2000 40 2003 2004 41 123 823 40 2004 44 2005 44 2006 41 59 125 777 2000 40 2003 2004 44 570 2002 41 123 823 40 2004 44 2007 44 2002 41 59 125 777 2000 40 2003 2004 44 2008 2009 41 123 823 40 2004 44 2009 44 2010 41 59 125 777 2000 40 2003 2004 44 2008 2009 44 570 2002 41 123 818 40 2004 44 2009 41 59 823 46 2002 61 2002 59 125 64 2011 777 865 2012 40 2013 2014 41 123 2015 46 2016 40 2014 41 59 330 2003 2017 61 2002 63 2018 40 2014 41 58 2019 40 2014 41 59 2020 46 2012 40 2017 41 59 688 40 2021 46 2022 40 2017 41 41 2023 61 2017 46 2024 40 41 59 125 64 2011 777 2003 2025 40 704 2026 41 123 792 2002 63 2027 40 2028 40 2026 41 41 58 2029 40 2028 40 2026 41 41 59 125 64 2011 777 2030 2031 40 41 123 792 2032 46 2033 40 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 49, 'CountStmt': 21, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 10, 'MaxCyclomatic': 3, 'SumCyclomatic': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountSemicolon': 12, 'CountDeclMethod': 7, 'CountLineCodeExe': 14, 'CountLineComment': 5, 'CountClassCoupled': 6, 'CountClassDerived': 1, 'CountLineCodeDecl': 13, 'CountDeclMethodAll': 26, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.15', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 7, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 57, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 14}"
2774,Java,"public class OfferViewUtil {

    public static Label createPopOverLabel(String text) {
        final Label label = new Label(text);
        label.setPrefWidth(300);
        label.setWrapText(true);
        label.setLineSpacing(1);
        label.setPadding(new Insets(10));
        return label;
    }

    public static void showPaymentAccountWarning(String msgKey,
                                                 HashMap<String, Boolean> paymentAccountWarningDisplayed) {
        if (msgKey == null || paymentAccountWarningDisplayed.getOrDefault(msgKey, false)) {
            return;
        }
        paymentAccountWarningDisplayed.put(msgKey, true);
        UserThread.runAfter(() -> {
            new Popup().information(Res.get(msgKey))
                    .width(900)
                    .closeButtonText(Res.get(""shared.iConfirm""))
                    .dontShowAgainId(msgKey)
                    .show();
        }, 500, TimeUnit.MILLISECONDS);
    }

    public static void addPayInfoEntry(GridPane infoGridPane, int row, String labelText, String value) {
        Label label = new AutoTooltipLabel(labelText);
        TextField textField = new TextField(value);
        textField.setMinWidth(500);
        textField.setEditable(false);
        textField.setFocusTraversable(false);
        textField.setId(""payment-info"");
        GridPane.setConstraints(label, 0, row, 1, 1, HPos.RIGHT, VPos.CENTER);
        GridPane.setConstraints(textField, 1, row);
        infoGridPane.getChildren().addAll(label, textField);
    }

    public static Tuple2<AutoTooltipButton, HBox> createBuyBsqButtonBox(Navigation navigation,
                                                                        Preferences preferences) {
        String buyBsqText = Res.get(""shared.buyCurrency"", ""BSQ"");
        var buyBsqButton = new AutoTooltipButton(buyBsqText);
        buyBsqButton.getStyleClass().add(""action-button"");
        buyBsqButton.getStyleClass().add(""tiny-button"");
        buyBsqButton.setMinWidth(60);
        buyBsqButton.setOnAction(e -> openBuyBsqOfferBook(navigation, preferences)
        );

        var info = new AutoTooltipLabel(""BSQ is colored BTC that helps fund Bisq developers."");
        var learnMore = new HyperlinkWithIcon(""Learn More"");
        learnMore.setOnAction(e -> new Popup().headLine(buyBsqText)
                .information(Res.get(""createOffer.buyBsq.popupMessage""))
                .actionButtonText(buyBsqText)
                .buttonAlignment(HPos.CENTER)
                .onAction(() -> openBuyBsqOfferBook(navigation, preferences)).show());
        learnMore.setMinWidth(100);

        HBox buyBsqBox = new HBox(buyBsqButton, info, learnMore);
        buyBsqBox.setAlignment(Pos.BOTTOM_LEFT);
        buyBsqBox.setSpacing(10);
        buyBsqBox.setPadding(new Insets(0, 0, 4, -20));

        return new Tuple2<>(buyBsqButton, buyBsqBox);
    }

    private static void openBuyBsqOfferBook(Navigation navigation, Preferences preferences) {
        preferences.setSellScreenCurrencyCode(""BSQ"");
        navigation.navigateTo(
                MainView.class, SellOfferView.class, OfferBookView.class);
    }
}",0,777 587 2000 123 777 809 2001 2002 40 2003 2004 41 123 657 2001 2005 61 744 2001 40 2004 41 59 2005 46 2006 40 1504 41 59 2005 46 2007 40 2008 41 59 2005 46 2009 40 1501 41 59 2005 46 2010 40 744 2011 40 1502 41 41 59 792 2005 59 125 777 809 865 2012 40 2003 2013 44 2014 60 2003 44 2015 62 2016 41 123 688 40 2013 323 2017 309 2016 46 2018 40 2013 44 2019 41 41 123 792 59 125 2016 46 2020 40 2013 44 2021 41 59 2022 46 2023 40 40 41 45 62 123 744 2024 40 41 46 2025 40 2026 46 2027 40 2013 41 41 46 2028 40 1504 41 46 2029 40 2026 46 2027 40 362 41 41 46 2030 40 2013 41 46 2031 40 41 59 125 44 1504 44 2032 46 2033 41 59 125 777 809 865 2034 40 2035 2036 44 704 2037 44 2003 2038 44 2003 2039 41 123 2001 2040 61 744 2041 40 2038 41 59 2042 2043 61 744 2042 40 2039 41 59 2043 46 2044 40 1504 41 59 2043 46 2045 40 2046 41 59 2043 46 2047 40 2046 41 59 2043 46 2048 40 362 41 59 2035 46 2049 40 2040 44 1500 44 2037 44 1501 44 1501 44 2050 46 2051 44 2052 46 2053 41 59 2035 46 2049 40 2043 44 1501 44 2037 41 59 2036 46 2054 40 41 46 2055 40 2040 44 2043 41 59 125 777 809 2056 60 2057 44 2058 62 2059 40 2060 2061 44 2062 2063 41 123 2003 2064 61 2065 46 2066 40 362 44 362 41 59 2067 2068 61 744 2057 40 2064 41 59 2068 46 2069 40 41 46 2070 40 362 41 59 2068 46 2069 40 41 46 2070 40 362 41 59 2068 46 2071 40 1503 41 59 2068 46 2072 40 2073 45 62 2074 40 2061 44 2063 41 41 59 2067 2075 61 744 2076 40 362 41 59 2067 2077 61 744 2078 40 362 41 59 2077 46 2072 40 2073 45 62 744 2079 40 41 46 2080 40 2064 41 46 2081 40 2065 46 2066 40 362 41 41 46 2082 40 2064 41 46 2083 40 2084 46 2085 41 46 2086 40 40 41 45 62 2074 40 2061 44 2063 41 41 46 2087 40 41 41 59 2077 46 2071 40 1503 41 59 2058 2088 61 744 2058 40 2068 44 2075 44 2077 41 59 2088 46 2089 40 2090 46 2091 41 59 2088 46 2092 40 1502 41 59 2088 46 2093 40 744 2094 40 1500 44 1500 44 1502 44 45 1503 41 41 59 792 744 2056 60 62 40 2068 44 2088 41 59 125 773 809 865 2095 40 2060 2061 44 2062 2063 41 123 2063 46 2096 40 362 41 59 2061 46 2097 40 2098 46 587 44 2099 46 587 44 2100 46 587 41 59 125 125 ,"{'AvgLine': 12, 'CountLine': 71, 'CountStmt': 43, 'MaxNesting': 1, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 37, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 63, 'CountStmtDecl': 14, 'MaxCyclomatic': 2, 'SumCyclomatic': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountSemicolon': 36, 'CountDeclMethod': 5, 'CountLineCodeExe': 48, 'CountLineComment': 0, 'CountClassCoupled': 24, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 5, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 24, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2822,Java,"public class Encryption {
    private static final Logger log = LoggerFactory.getLogger(Encryption.class);

    public static final String ASYM_KEY_ALGO = ""RSA"";
    private static final String ASYM_CIPHER = ""RSA/ECB/OAEPWithSHA-256AndMGF1PADDING"";

    private static final String SYM_KEY_ALGO = ""AES"";
    private static final String SYM_CIPHER = ""AES"";

    private static final String HMAC = ""HmacSHA256"";

    public static KeyPair generateKeyPair() {
        long ts = System.currentTimeMillis();
        try {
            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(ASYM_KEY_ALGO);
            keyPairGenerator.initialize(2048);
            return keyPairGenerator.genKeyPair();
        } catch (Throwable e) {
            log.error(""Could not create key."", e);
            throw new RuntimeException(""Could not create key."");
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Symmetric
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static byte[] encrypt(byte[] payload, SecretKey secretKey) throws CryptoException {
        try {
            Cipher cipher = Cipher.getInstance(SYM_CIPHER);
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            return cipher.doFinal(payload);
        } catch (Throwable e) {
            log.error(""error in encrypt"", e);
            throw new CryptoException(e);
        }
    }

    public static byte[] decrypt(byte[] encryptedPayload, SecretKey secretKey) throws CryptoException {
        try {
            Cipher cipher = Cipher.getInstance(SYM_CIPHER);
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            return cipher.doFinal(encryptedPayload);
        } catch (Throwable e) {
            throw new CryptoException(e);
        }
    }

    public static SecretKey getSecretKeyFromBytes(byte[] secretKeyBytes) {
        return new SecretKeySpec(secretKeyBytes, 0, secretKeyBytes.length, SYM_KEY_ALGO);
    }

    public static byte[] getSecretKeyBytes(SecretKey secretKey) {
        return secretKey.getEncoded();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Hmac
    ///////////////////////////////////////////////////////////////////////////////////////////

    private static byte[] getPayloadWithHmac(byte[] payload, SecretKey secretKey) {
        byte[] payloadWithHmac;
        try {

            ByteArrayOutputStream outputStream = null;
            try {
                byte[] hmac = getHmac(payload, secretKey);
                outputStream = new ByteArrayOutputStream();
                outputStream.write(payload);
                outputStream.write(hmac);
                outputStream.flush();
                payloadWithHmac = outputStream.toByteArray().clone();
            } catch (IOException | NoSuchProviderException e) {
                log.error(""Could not create hmac"", e);
                throw new RuntimeException(""Could not create hmac"");
            } finally {
                if (outputStream != null) {
                    try {
                        outputStream.close();
                    } catch (IOException ignored) {
                    }
                }
            }
        } catch (Throwable e) {
            log.error(""Could not create hmac"", e);
            throw new RuntimeException(""Could not create hmac"");
        }
        return payloadWithHmac;
    }


    private static boolean verifyHmac(byte[] message, byte[] hmac, SecretKey secretKey) {
        try {
            byte[] hmacTest = getHmac(message, secretKey);
            return Arrays.equals(hmacTest, hmac);
        } catch (Throwable e) {
            log.error(""Could not create cipher"", e);
            throw new RuntimeException(""Could not create cipher"");
        }
    }

    private static byte[] getHmac(byte[] payload, SecretKey secretKey) throws NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException {
        Mac mac = Mac.getInstance(HMAC);
        mac.init(secretKey);
        return mac.doFinal(payload);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Symmetric with Hmac
    ///////////////////////////////////////////////////////////////////////////////////////////


    public static byte[] encryptPayloadWithHmac(byte[] payload, SecretKey secretKey) throws CryptoException {
        return encrypt(getPayloadWithHmac(payload, secretKey), secretKey);
    }

    public static byte[] decryptPayloadWithHmac(byte[] encryptedPayloadWithHmac, SecretKey secretKey) throws CryptoException {
        byte[] payloadWithHmac = decrypt(encryptedPayloadWithHmac, secretKey);
        String payloadWithHmacAsHex = Hex.encode(payloadWithHmac);
        // first part is raw message
        int length = payloadWithHmacAsHex.length();
        int sep = length - 64;
        String payloadAsHex = payloadWithHmacAsHex.substring(0, sep);
        // last 64 bytes is hmac
        String hmacAsHex = payloadWithHmacAsHex.substring(sep, length);
        if (verifyHmac(Hex.decode(payloadAsHex), Hex.decode(hmacAsHex), secretKey)) {
            return Hex.decode(payloadAsHex);
        } else {
            throw new CryptoException(""Hmac does not match."");
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Asymmetric
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static byte[] encryptSecretKey(SecretKey secretKey, PublicKey publicKey) throws CryptoException {
        try {
            Cipher cipher = Cipher.getInstance(ASYM_CIPHER);
            OAEPParameterSpec oaepParameterSpec = new OAEPParameterSpec(""SHA-256"", ""MGF1"",
                    MGF1ParameterSpec.SHA256, PSource.PSpecified.DEFAULT);
            cipher.init(Cipher.WRAP_MODE, publicKey, oaepParameterSpec);
            return cipher.wrap(secretKey);
        } catch (Throwable e) {
            log.error(""Couldn't encrypt payload"", e);
            throw new CryptoException(""Couldn't encrypt payload"");
        }
    }

    public static SecretKey decryptSecretKey(byte[] encryptedSecretKey, PrivateKey privateKey) throws CryptoException {
        try {
            Cipher cipher = Cipher.getInstance(ASYM_CIPHER);
            OAEPParameterSpec oaepParameterSpec = new OAEPParameterSpec(""SHA-256"", ""MGF1"",
                    MGF1ParameterSpec.SHA256, PSource.PSpecified.DEFAULT);
            cipher.init(Cipher.UNWRAP_MODE, privateKey, oaepParameterSpec);
            return (SecretKey) cipher.unwrap(encryptedSecretKey, ""AES"", Cipher.SECRET_KEY);
        } catch (Throwable e) {
            // errors when trying to decrypt foreign network_messages are normal
            throw new CryptoException(e);
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Hybrid with signature of asymmetric key
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static SecretKey generateSecretKey(int bits) {
        try {
            KeyGenerator keyPairGenerator = KeyGenerator.getInstance(SYM_KEY_ALGO);
            keyPairGenerator.init(bits);
            return keyPairGenerator.generateKey();
        } catch (Throwable e) {
            log.error(""Couldn't generate key"", e);
            throw new RuntimeException(""Couldn't generate key"");
        }
    }

    public static byte[] getPublicKeyBytes(PublicKey encryptionPubKey) {
        return new X509EncodedKeySpec(encryptionPubKey.getEncoded()).getEncoded();
    }

    /**
     * @param encryptionPubKeyBytes
     * @return
     */
    public static PublicKey getPublicKeyFromBytes(byte[] encryptionPubKeyBytes) {
        try {
            return KeyFactory.getInstance(Encryption.ASYM_KEY_ALGO).generatePublic(new X509EncodedKeySpec(encryptionPubKeyBytes));
        } catch (InvalidKeySpecException | NoSuchAlgorithmException e) {
            log.error(""Error creating sigPublicKey from bytes. sigPublicKeyBytes as hex={}, error={}"", Utilities.bytesAsHexString(encryptionPubKeyBytes), e);
            throw new KeyConversionException(e);
        }
    }
}",0,777 587 2000 123 773 809 657 2001 2002 61 2003 46 2004 40 2000 46 587 41 59 777 809 657 2005 2006 61 362 59 773 809 657 2005 2007 61 362 59 773 809 657 2005 2008 61 362 59 773 809 657 2005 2009 61 362 59 773 809 657 2005 2010 61 362 59 777 809 2011 2012 40 41 123 726 2013 61 2014 46 2015 40 41 59 830 123 2016 2017 61 2016 46 2018 40 2006 41 59 2017 46 2019 40 1505 41 59 792 2017 46 2020 40 41 59 125 580 40 2021 2022 41 123 2002 46 2023 40 362 44 2022 41 59 825 744 2024 40 362 41 59 125 125 331 330 331 777 809 574 91 93 2025 40 574 91 93 2026 44 2027 2028 41 826 2029 123 830 123 2030 2031 61 2030 46 2032 40 2009 41 59 2031 46 2033 40 2030 46 2034 44 2028 41 59 792 2031 46 2035 40 2026 41 59 125 580 40 2036 2037 41 123 2002 46 2038 40 362 44 2037 41 59 825 744 2029 40 2037 41 59 125 125 777 809 574 91 93 2039 40 574 91 93 2040 44 2027 2028 41 826 2029 123 830 123 2041 2042 61 2041 46 2043 40 2009 41 59 2042 46 2044 40 2041 46 2045 44 2028 41 59 792 2042 46 2046 40 2040 41 59 125 580 40 2047 2048 41 123 825 744 2029 40 2048 41 59 125 125 777 809 2027 2049 40 574 91 93 2050 41 123 792 744 2051 40 2050 44 1500 44 2050 46 2052 44 2008 41 59 125 777 809 574 91 93 2053 40 2027 2028 41 123 792 2028 46 2054 40 41 59 125 331 330 331 773 809 574 91 93 2055 40 574 91 93 2026 44 2027 2028 41 123 574 91 93 2056 59 830 123 2057 2058 61 2059 59 830 123 574 91 93 2060 61 2061 40 2026 44 2028 41 59 2058 61 744 2057 40 41 59 2058 46 2062 40 2026 41 59 2058 46 2062 40 2060 41 59 2058 46 2063 40 41 59 2056 61 2058 46 2064 40 41 46 2065 40 41 59 125 580 40 2066 124 2067 2068 41 123 2002 46 2069 40 362 44 2068 41 59 825 744 2070 40 362 41 59 125 658 123 688 40 2058 340 2059 41 123 830 123 2058 46 2071 40 41 59 125 580 40 2066 2072 41 123 125 125 125 125 580 40 2073 2074 41 123 2002 46 2075 40 362 44 2074 41 59 825 744 2076 40 362 41 59 125 792 2056 59 125 773 809 570 2077 40 574 91 93 2078 44 574 91 93 2079 44 2027 2028 41 123 830 123 574 91 93 2080 61 2081 40 2078 44 2028 41 59 792 2082 46 2083 40 2080 44 2079 41 59 125 580 40 2084 2085 41 123 2002 46 2086 40 362 44 2085 41 59 825 744 2087 40 362 41 59 125 125 773 809 574 91 93 2088 40 574 91 93 2026 44 2027 2028 41 826 2089 44 2090 44 2091 123 2092 2093 61 2092 46 2094 40 2010 41 59 2093 46 2095 40 2028 41 59 792 2093 46 2096 40 2026 41 59 125 331 330 331 777 809 574 91 93 2097 40 574 91 93 2026 44 2027 2028 41 826 2029 123 792 2025 40 2055 40 2026 44 2028 41 44 2028 41 59 125 777 809 574 91 93 2098 40 574 91 93 2099 44 2027 2028 41 826 2029 123 574 91 93 2100 61 2039 40 2099 44 2028 41 59 2005 2101 61 2102 46 2103 40 2100 41 59 330 704 2104 61 2101 46 2104 40 41 59 704 2105 61 2104 45 1503 59 2005 2106 61 2101 46 2107 40 1500 44 2105 41 59 330 2005 2108 61 2101 46 2107 40 2105 44 2104 41 59 688 40 2077 40 2102 46 2109 40 2106 41 44 2102 46 2109 40 2108 41 44 2028 41 41 123 792 2102 46 2109 40 2106 41 59 125 630 123 825 744 2029 40 362 41 59 125 125 331 330 331 777 809 574 91 93 2110 40 2027 2028 44 2111 2112 41 826 2029 123 830 123 2113 2114 61 2113 46 2115 40 2007 41 59 2116 2117 61 744 2116 40 362 44 362 44 2118 46 2119 44 2120 46 2121 46 2122 41 59 2114 46 2123 40 2113 46 2124 44 2112 44 2117 41 59 792 2114 46 2125 40 2028 41 59 125 580 40 2126 2127 41 123 2002 46 2128 40 362 44 2127 41 59 825 744 2029 40 362 41 59 125 125 777 809 2027 2129 40 574 91 93 2130 44 2131 2132 41 826 2029 123 830 123 2133 2134 61 2133 46 2135 40 2007 41 59 2136 2137 61 744 2136 40 362 44 362 44 2138 46 2139 44 2140 46 2141 46 2142 41 59 2134 46 2143 40 2133 46 2144 44 2132 44 2137 41 59 792 40 2027 41 2134 46 2145 40 2130 44 362 44 2133 46 2146 41 59 125 580 40 2147 2148 41 123 330 825 744 2029 40 2148 41 59 125 125 331 330 331 777 809 2027 2149 40 704 2150 41 123 830 123 2151 2152 61 2151 46 2153 40 2008 41 59 2152 46 2154 40 2150 41 59 792 2152 46 2155 40 41 59 125 580 40 2156 2157 41 123 2002 46 2158 40 362 44 2157 41 59 825 744 2159 40 362 41 59 125 125 777 809 574 91 93 2160 40 2111 2161 41 123 792 744 2162 40 2161 46 2163 40 41 41 46 2163 40 41 59 125 306 777 809 2111 2164 40 574 91 93 2165 41 123 830 123 792 2166 46 2167 40 2000 46 2006 41 46 2168 40 744 2169 40 2165 41 41 59 125 580 40 2170 124 2089 2171 41 123 2002 46 2172 40 362 44 2173 46 2174 40 2165 41 44 2171 41 59 825 744 2175 40 2171 41 59 125 125 125 ,"{'AvgLine': 9, 'CountLine': 199, 'CountStmt': 102, 'MaxNesting': 3, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 78, 'MaxEssential': 1, 'SumEssential': 15, 'AvgCyclomatic': 1, 'CountLineCode': 146, 'CountStmtDecl': 42, 'MaxCyclomatic': 5, 'SumCyclomatic': 28, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 31, 'CountSemicolon': 73, 'CountDeclMethod': 15, 'CountLineCodeExe': 100, 'CountLineComment': 22, 'CountClassCoupled': 30, 'CountClassDerived': 0, 'CountLineCodeDecl': 44, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.15', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 28, 'CountDeclClassMethod': 15, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 12, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 28, 'CountDeclClassVariable': 6, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 30, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2809,Java,"@Singleton
public class Transitions {

    public final static int DEFAULT_DURATION = 600;

    private final Preferences preferences;
    private Timeline removeEffectTimeLine;

    @Inject
    public Transitions(Preferences preferences) {
        this.preferences = preferences;
    }

    private int getDuration(int duration) {
        return preferences.isUseAnimations() ? duration : 1;
    }

    // Fade
    public void fadeIn(Node node) {
        fadeIn(node, DEFAULT_DURATION);
    }

    public void fadeIn(Node node, int duration) {
        FadeTransition fade = new FadeTransition(Duration.millis(getDuration(duration)), node);
        fade.setFromValue(node.getOpacity());
        fade.setToValue(1.0);
        fade.play();
    }

    public FadeTransition fadeOut(Node node) {
        return fadeOut(node, DEFAULT_DURATION);
    }

    private FadeTransition fadeOut(Node node, int duration) {
        FadeTransition fade = new FadeTransition(Duration.millis(getDuration(duration)), node);
        fade.setFromValue(node.getOpacity());
        fade.setToValue(0.0);
        fade.play();
        return fade;
    }

    public void fadeOutAndRemove(Node node) {
        fadeOutAndRemove(node, DEFAULT_DURATION);
    }

    public void fadeOutAndRemove(Node node, int duration) {
        fadeOutAndRemove(node, duration, null);
    }

    public void fadeOutAndRemove(Node node, int duration, EventHandler<ActionEvent> handler) {
        FadeTransition fade = fadeOut(node, getDuration(duration));
        fade.setInterpolator(Interpolator.EASE_IN);
        fade.setOnFinished(actionEvent -> {
            ((Pane) (node.getParent())).getChildren().remove(node);
            //Profiler.printMsgWithTime(""fadeOutAndRemove"");
            if (handler != null)
                handler.handle(actionEvent);
        });
    }

    // Blur
    public void blur(Node node) {
        blur(node, DEFAULT_DURATION, -0.1, false, 15);
    }

    public void blur(Node node, int duration, double brightness, boolean removeNode, double blurRadius) {
        if (removeEffectTimeLine != null)
            removeEffectTimeLine.stop();

        node.setMouseTransparent(true);
        GaussianBlur blur = new GaussianBlur(0.0);
        Timeline timeline = new Timeline();
        KeyValue kv1 = new KeyValue(blur.radiusProperty(), blurRadius);
        KeyFrame kf1 = new KeyFrame(Duration.millis(getDuration(duration)), kv1);
        ColorAdjust darken = new ColorAdjust();
        darken.setBrightness(0.0);
        blur.setInput(darken);
        KeyValue kv2 = new KeyValue(darken.brightnessProperty(), brightness);
        KeyFrame kf2 = new KeyFrame(Duration.millis(getDuration(duration)), kv2);
        timeline.getKeyFrames().addAll(kf1, kf2);
        node.setEffect(blur);
        if (removeNode) timeline.setOnFinished(actionEvent -> UserThread.execute(() -> ((Pane) (node.getParent()))
                .getChildren().remove(node)));
        timeline.play();
    }

    // Darken
    public void darken(Node node, int duration, boolean removeNode) {
        blur(node, duration, -0.2, removeNode, 0);
    }

    public void removeEffect(Node node) {
        removeEffect(node, DEFAULT_DURATION);
    }

    private void removeEffect(Node node, int duration) {
        if (node != null) {
            node.setMouseTransparent(false);
            removeEffectTimeLine = new Timeline();
            GaussianBlur blur = (GaussianBlur) node.getEffect();
            if (blur != null) {
                KeyValue kv1 = new KeyValue(blur.radiusProperty(), 0.0);
                KeyFrame kf1 = new KeyFrame(Duration.millis(getDuration(duration)), kv1);
                removeEffectTimeLine.getKeyFrames().add(kf1);

                ColorAdjust darken = (ColorAdjust) blur.getInput();
                KeyValue kv2 = new KeyValue(darken.brightnessProperty(), 0.0);
                KeyFrame kf2 = new KeyFrame(Duration.millis(getDuration(duration)), kv2);
                removeEffectTimeLine.getKeyFrames().add(kf2);
                removeEffectTimeLine.setOnFinished(actionEvent -> {
                    node.setEffect(null);
                    removeEffectTimeLine = null;
                });
                removeEffectTimeLine.play();
            } else {
                node.setEffect(null);
                removeEffectTimeLine = null;
            }
        }
    }
}",0,64 2000 777 587 2001 123 777 657 809 704 2002 61 1504 59 773 657 2003 2004 59 773 2005 2006 59 64 2007 777 2001 40 2003 2004 41 123 823 46 2004 61 2004 59 125 773 704 2008 40 704 2009 41 123 792 2004 46 2010 40 41 63 2009 58 1501 59 125 330 777 865 2011 40 2012 2013 41 123 2011 40 2013 44 2002 41 59 125 777 865 2011 40 2012 2013 44 704 2009 41 123 2014 2015 61 744 2014 40 2016 46 2017 40 2008 40 2009 41 41 44 2013 41 59 2015 46 2018 40 2013 46 2019 40 41 41 59 2015 46 2020 40 1501 41 59 2015 46 2021 40 41 59 125 777 2022 2023 40 2012 2013 41 123 792 2023 40 2013 44 2002 41 59 125 773 2022 2023 40 2012 2013 44 704 2009 41 123 2022 2024 61 744 2022 40 2025 46 2026 40 2008 40 2009 41 41 44 2013 41 59 2024 46 2027 40 2013 46 2028 40 41 41 59 2024 46 2029 40 1500 41 59 2024 46 2030 40 41 59 792 2024 59 125 777 865 2031 40 2012 2013 41 123 2031 40 2013 44 2002 41 59 125 777 865 2031 40 2012 2013 44 704 2009 41 123 2031 40 2013 44 2009 44 2032 41 59 125 777 865 2031 40 2012 2013 44 704 2009 44 2033 60 2034 62 2035 41 123 2022 2036 61 2023 40 2013 44 2008 40 2009 41 41 59 2036 46 2037 40 2038 46 2039 41 59 2036 46 2040 40 2041 45 62 123 40 40 2042 41 40 2013 46 2043 40 41 41 41 46 2044 40 41 46 2045 40 2013 41 59 330 688 40 2035 340 2046 41 2035 46 2047 40 2041 41 59 125 41 59 125 330 777 865 2048 40 2012 2013 41 123 2048 40 2013 44 2002 44 45 1500 44 2049 44 1503 41 59 125 777 865 2048 40 2012 2013 44 704 2009 44 625 2050 44 570 2051 44 625 2052 41 123 688 40 2006 340 2053 41 2006 46 2054 40 41 59 2013 46 2055 40 2056 41 59 2057 2048 61 744 2057 40 1500 41 59 2005 2058 61 744 2005 40 41 59 2059 2060 61 744 2059 40 2048 46 2061 40 41 44 2052 41 59 2062 2063 61 744 2062 40 2064 46 2065 40 2008 40 2009 41 41 44 2060 41 59 2066 2067 61 744 2066 40 41 59 2067 46 2068 40 1500 41 59 2048 46 2069 40 2067 41 59 2059 2070 61 744 2059 40 2067 46 2071 40 41 44 2050 41 59 2062 2072 61 744 2062 40 2064 46 2065 40 2008 40 2009 41 41 44 2070 41 59 2058 46 2073 40 41 46 2074 40 2063 44 2072 41 59 2013 46 2075 40 2048 41 59 688 40 2051 41 2058 46 2076 40 2077 45 62 2078 46 2079 40 40 41 45 62 40 40 2080 41 40 2013 46 2081 40 41 41 41 46 2082 40 41 46 2083 40 2013 41 41 41 59 2058 46 2084 40 41 59 125 330 777 865 2085 40 2012 2013 44 704 2009 44 570 2051 41 123 2048 40 2013 44 2009 44 45 1500 44 2051 44 1500 41 59 125 777 865 2086 40 2012 2013 41 123 2086 40 2013 44 2002 41 59 125 773 865 2086 40 2012 2013 44 704 2009 41 123 688 40 2013 340 2087 41 123 2013 46 2088 40 2089 41 59 2006 61 744 2005 40 41 59 2090 2048 61 40 2090 41 2013 46 2091 40 41 59 688 40 2048 340 2087 41 123 2092 2093 61 744 2092 40 2048 46 2094 40 41 44 1500 41 59 2095 2096 61 744 2095 40 2097 46 2098 40 2008 40 2009 41 41 44 2093 41 59 2006 46 2099 40 41 46 2100 40 2096 41 59 2101 2085 61 40 2101 41 2048 46 2102 40 41 59 2092 2103 61 744 2092 40 2085 46 2104 40 41 44 1500 41 59 2095 2105 61 744 2095 40 2097 46 2098 40 2008 40 2009 41 41 44 2103 41 59 2006 46 2099 40 41 46 2100 40 2105 41 59 2006 46 2106 40 2107 45 62 123 2013 46 2108 40 2087 41 59 2006 61 2087 59 125 41 59 2006 46 2109 40 41 59 125 630 123 2013 46 2110 40 2087 41 59 2006 61 2087 59 125 125 125 125 ,"{'AvgLine': 6, 'CountLine': 121, 'CountStmt': 77, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 59, 'MaxEssential': 1, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 99, 'CountStmtDecl': 34, 'MaxCyclomatic': 3, 'SumCyclomatic': 23, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 18, 'CountSemicolon': 57, 'CountDeclMethod': 14, 'CountLineCodeExe': 63, 'CountLineComment': 4, 'CountClassCoupled': 15, 'CountClassDerived': 0, 'CountLineCodeDecl': 36, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 23, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 11, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 23, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 15, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 32}"
2837,Java,"public final class ViewPath extends ArrayList<Class<? extends View>> {
    private ViewPath() {
    }

    public ViewPath(Collection<? extends Class<? extends View>> c) {
        super(c);
    }

    @SafeVarargs
    public static ViewPath to(Class<? extends View>... elements) {
        ViewPath path = new ViewPath();
        List<Class<? extends View>> list = Arrays.asList(elements);
        path.addAll(list);
        return path;
    }

    public static ViewPath from(ViewPath original) {
        ViewPath path = new ViewPath();
        path.addAll(original);
        return path;
    }

    public Class<? extends View> tip() {
        if (size() == 0)
            return null;

        return get(size() - 1);
    }
}",0,777 657 587 2000 650 2001 60 2002 60 63 650 2003 356 123 773 2000 40 41 123 125 777 2000 40 2004 60 63 650 2002 60 63 650 2003 356 2005 41 123 818 40 2005 41 59 125 64 2006 777 809 2000 2007 40 2002 60 63 650 2003 62 322 2008 41 123 2000 2009 61 744 2000 40 41 59 2010 60 2002 60 63 650 2003 356 2011 61 2012 46 2013 40 2008 41 59 2009 46 2014 40 2011 41 59 792 2009 59 125 777 809 2000 2015 40 2000 2016 41 123 2000 2017 61 744 2000 40 41 59 2017 46 2018 40 2016 41 59 792 2017 59 125 777 2002 60 63 650 2003 62 2019 40 41 123 688 40 2020 40 41 323 1500 41 792 2021 59 792 2022 40 2020 40 41 45 1501 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 29, 'CountStmt': 17, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 9, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountSemicolon': 10, 'CountDeclMethod': 5, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2879,Java,"@Immutable
@EqualsAndHashCode(callSuper = true)
public class BallotList extends PersistableList<Ballot> implements ConsensusCritical, ImmutableDaoStateModel {

    public BallotList(List<Ballot> list) {
        super(list);
    }

    public BallotList() {
        super();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public protobuf.PersistableEnvelope toProtoMessage() {
        return protobuf.PersistableEnvelope.newBuilder().setBallotList(getBuilder()).build();
    }

    public protobuf.BallotList.Builder getBuilder() {
        return protobuf.BallotList.newBuilder()
                .addAllBallot(getList().stream()
                        .map(Ballot::toProtoMessage)
                        .collect(Collectors.toList()));
    }

    public static BallotList fromProto(protobuf.BallotList proto) {
        return new BallotList(new ArrayList<>(proto.getBallotList().stream()
                .map(Ballot::fromProto)
                .collect(Collectors.toList())));
    }

    @Override
    public String toString() {
        return ""BallotList: "" + getList().stream()
                .map(Ballot::info)
                .collect(Collectors.toList());
    }
}",0,64 2000 64 2001 40 2002 61 2003 41 777 587 2004 650 2005 60 2006 62 693 2007 44 2008 123 777 2004 40 2009 60 2006 62 2010 41 123 818 40 2010 41 59 125 777 2004 40 41 123 818 40 41 59 125 331 330 331 64 2011 777 2012 46 2013 2014 40 41 123 792 2012 46 2013 46 2015 40 41 46 2016 40 2017 40 41 41 46 2018 40 41 59 125 777 2012 46 2004 46 2019 2020 40 41 123 792 2012 46 2004 46 2021 40 41 46 2022 40 2023 40 41 46 2024 40 41 46 2025 40 2006 58 58 2014 41 46 2026 40 2027 46 2028 40 41 41 41 59 125 777 809 2004 2029 40 2012 46 2004 2030 41 123 792 744 2004 40 744 2031 60 62 40 2030 46 2032 40 41 46 2033 40 41 46 2034 40 2006 58 58 2029 41 46 2035 40 2036 46 2037 40 41 41 41 41 59 125 64 2011 777 2038 2039 40 41 123 792 362 43 2040 40 41 46 2041 40 41 46 2042 40 2006 58 58 2043 41 46 2044 40 2045 46 2046 40 41 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 45, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 6, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 8, 'CountSemicolon': 6, 'CountDeclMethod': 6, 'CountLineCodeExe': 13, 'CountLineComment': 6, 'CountClassCoupled': 11, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.19', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 6, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 11, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2784,Java,"public class BalanceTextField extends AnchorPane {

    private Coin targetAmount;
    private final JFXTextField textField;
    private final Effect fundedEffect = new DropShadow(BlurType.THREE_PASS_BOX, Color.GREEN, 4, 0.0, 0, 0);
    private final Effect notFundedEffect = new DropShadow(BlurType.THREE_PASS_BOX, Color.ORANGERED, 4, 0.0, 0, 0);
    private CoinFormatter formatter;
    @Nullable
    private Coin balance;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    public BalanceTextField(String label) {
        textField = new BisqTextField();
        textField.setLabelFloat(true);
        textField.setPromptText(label);
        textField.setFocusTraversable(false);
        textField.setEditable(false);
        textField.setId(""info-field"");

        AnchorPane.setRightAnchor(textField, 0.0);
        AnchorPane.setLeftAnchor(textField, 0.0);

        getChildren().addAll(textField);
    }

    public void setFormatter(CoinFormatter formatter) {
        this.formatter = formatter;
    }

    public void setBalance(Coin balance) {
        this.balance = balance;

        updateBalance(balance);
    }

    public void setTargetAmount(Coin targetAmount) {
        this.targetAmount = targetAmount;

        if (this.balance != null)
            updateBalance(balance);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Private methods
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void updateBalance(Coin balance) {
        if (formatter != null)
            textField.setText(formatter.formatCoinWithCode(balance));

        //TODO: replace with new validation logic
//        if (targetAmount != null) {
//            if (balance.compareTo(targetAmount) >= 0)
//                textField.setEffect(fundedEffect);
//            else
//                textField.setEffect(notFundedEffect);
//        } else {
//            textField.setEffect(null);
//        }
    }
}",0,777 587 2000 650 2001 123 773 2002 2003 59 773 657 2004 2005 59 773 657 2006 2007 61 744 2008 40 2009 46 2010 44 2011 46 2012 44 1502 44 1500 44 1500 44 1500 41 59 773 657 2006 2013 61 744 2008 40 2009 46 2010 44 2011 46 2014 44 1502 44 1500 44 1500 44 1500 41 59 773 2015 2016 59 64 2017 773 2002 2018 59 331 330 331 777 2000 40 2019 2020 41 123 2005 61 744 2021 40 41 59 2005 46 2022 40 2023 41 59 2005 46 2024 40 2020 41 59 2005 46 2025 40 2026 41 59 2005 46 2027 40 2026 41 59 2005 46 2028 40 362 41 59 2001 46 2029 40 2005 44 1500 41 59 2001 46 2030 40 2005 44 1500 41 59 2031 40 41 46 2032 40 2005 41 59 125 777 865 2033 40 2015 2016 41 123 823 46 2016 61 2016 59 125 777 865 2034 40 2002 2018 41 123 823 46 2018 61 2018 59 2035 40 2018 41 59 125 777 865 2036 40 2002 2003 41 123 823 46 2003 61 2003 59 688 40 823 46 2018 340 2037 41 2038 40 2018 41 59 125 331 330 331 773 865 2039 40 2002 2018 41 123 688 40 2016 340 2040 41 2005 46 2041 40 2016 46 2042 40 2018 41 41 59 330 330 330 330 330 330 330 330 330 125 125 ,"{'AvgLine': 8, 'CountLine': 65, 'CountStmt': 29, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 19, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountSemicolon': 21, 'CountDeclMethod': 5, 'CountLineCodeExe': 19, 'CountLineComment': 15, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.42', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 76, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 9, 'CountDeclInstanceVariable': 6, 'PercentLackOfCohesionModified': 63}"
2834,Java,"@Slf4j
public class LanguageUtil {
    private static final List<String> userLanguageCodes = Arrays.asList(
            ""en"", // English
            ""de"", // German
            ""es"", // Spanish
            ""pt"", // Portuguese
            ""pt-BR"", // Portuguese (Brazil)
            ""zh-Hans"", // Chinese [Han Simplified]
            ""zh-Hant"", // Chinese [Han Traditional]
            ""ru"", // Russian
            ""fr"", // French
            ""vi"", // Vietnamese
            ""th"", // Thai
            ""ja"", // Japanese
            ""fa"", // Persian
            ""it"", // Italian
            ""cs"", // Czech
            ""pl"" // Polish
            /*
            // not translated yet
            ""el"", // Greek
            ""sr-Latn-RS"", // Serbian [Latin] (Serbia)
            ""hu"", // Hungarian
            ""ro"", // Romanian
            ""tr"" // Turkish
            ""iw"", // Hebrew
            ""hi"", // Hindi
            ""ko"", // Korean
            ""sv"", // Swedish
            ""no"", // Norwegian
            ""nl"", // Dutch
            ""be"", // Belarusian
            ""fi"", // Finnish
            ""bg"", // Bulgarian
            ""lt"", // Lithuanian
            ""lv"", // Latvian
            ""hr"", // Croatian
            ""uk"", // Ukrainian
            ""sk"", // Slovak
            ""sl"", // Slovenian
            ""ga"", // Irish
            ""sq"", // Albanian
            ""ca"", // Catalan
            ""mk"", // Macedonian
            ""kk"", // Kazakh
            ""km"", // Khmer
            ""sw"", // Swahili
            ""in"", // Indonesian
            ""ms"", // Malay
            ""is"", // Icelandic
            ""et"", // Estonian
            ""ar"", // Arabic
            ""vi"", // Vietnamese
            ""th"", // Thai
            ""da"", // Danish
            ""mt""  // Maltese
            */
    );

    private static final List<String> rtlLanguagesCodes = Arrays.asList(
            ""fa"", // Persian
            ""ar"", // Arabic
            ""iw"" // Hebrew
    );

    public static List<String> getAllLanguageCodes() {
        List<Locale> allLocales = LocaleUtil.getAllLocales();

        // Filter duplicate locale entries
        Set<String> allLocalesAsSet = allLocales.stream().filter(locale -> !locale.getLanguage().isEmpty() &&
                !locale.getDisplayLanguage().isEmpty())
                .map(Locale::getLanguage)
                .collect(Collectors.toSet());

        List<String> allLanguageCodes = new ArrayList<>();
        allLanguageCodes.addAll(allLocalesAsSet);
        allLanguageCodes.sort((o1, o2) -> getDisplayName(o1).compareTo(getDisplayName(o2)));
        return allLanguageCodes;
    }

    public static String getDefaultLanguage() {
        // might be set later in pref or config, so not use defaultLocale anywhere in the code
        return getLocale().getLanguage();
    }

    public static String getDefaultLanguageLocaleAsCode() {
        return new Locale(LanguageUtil.getDefaultLanguage()).getLanguage();
    }

    public static String getEnglishLanguageLocaleCode() {
        return new Locale(Locale.ENGLISH.getLanguage()).getLanguage();
    }

    public static String getDisplayName(String code) {
        Locale locale = Locale.forLanguageTag(code);
        return locale.getDisplayName(locale);
    }

    public static boolean isDefaultLanguageRTL() {
        return rtlLanguagesCodes.contains(LanguageUtil.getDefaultLanguageLocaleAsCode());
    }

    public static List<String> getUserLanguageCodes() {
        return userLanguageCodes;
    }

    private static Locale getLocale() {
        return GlobalSettings.getLocale();
    }
}",0,64 2000 777 587 2001 123 773 809 657 2002 60 2003 62 2004 61 2005 46 2006 40 362 44 330 362 44 330 362 44 330 362 44 330 362 44 330 362 44 330 362 44 330 362 44 330 362 44 330 362 44 330 362 44 330 362 44 330 362 44 330 362 44 330 362 44 330 362 330 305 41 59 773 809 657 2002 60 2003 62 2007 61 2005 46 2006 40 362 44 330 362 44 330 362 330 41 59 777 809 2002 60 2003 62 2008 40 41 123 2002 60 2009 62 2010 61 2011 46 2012 40 41 59 330 2013 60 2003 62 2014 61 2010 46 2015 40 41 46 2016 40 2017 45 62 33 2017 46 2018 40 41 46 2019 40 41 307 33 2017 46 2020 40 41 46 2019 40 41 41 46 2021 40 2009 58 58 2018 41 46 2022 40 2023 46 2024 40 41 41 59 2002 60 2003 62 2025 61 744 2026 60 62 40 41 59 2025 46 2027 40 2014 41 59 2025 46 2028 40 40 2029 44 2030 41 45 62 2031 40 2029 41 46 2032 40 2031 40 2030 41 41 41 59 792 2025 59 125 777 809 2003 2033 40 41 123 330 792 2034 40 41 46 2035 40 41 59 125 777 809 2003 2036 40 41 123 792 744 2037 40 2001 46 2033 40 41 41 46 2038 40 41 59 125 777 809 2003 2039 40 41 123 792 744 2040 40 2040 46 2041 46 2042 40 41 41 46 2042 40 41 59 125 777 809 2003 2043 40 2003 2044 41 123 2045 2046 61 2045 46 2047 40 2044 41 59 792 2046 46 2043 40 2046 41 59 125 777 809 570 2048 40 41 123 792 2007 46 2049 40 2001 46 2036 40 41 41 59 125 777 809 2002 60 2003 62 2050 40 41 123 792 2004 59 125 773 809 2051 2052 40 41 123 792 2053 46 2052 40 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 111, 'CountStmt': 25, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 16, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 59, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountSemicolon': 16, 'CountDeclMethod': 8, 'CountLineCodeExe': 40, 'CountLineComment': 60, 'CountClassCoupled': 10, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '1.02', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 8, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 7, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 2, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 10, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2801,Java,"public class AutoTooltipSlideToggleButton extends JFXToggleButton {
    public AutoTooltipSlideToggleButton() {
        super();
    }

    @Override
    protected Skin<?> createDefaultSkin() {
        return new AutoTooltipSlideToggleButton.AutoTooltipSlideToggleButtonSkin(this);
    }

    private class AutoTooltipSlideToggleButtonSkin extends JFXToggleButtonSkin {
        public AutoTooltipSlideToggleButtonSkin(JFXToggleButton toggleButton) {
            super(toggleButton);
        }

        @Override
        protected void layoutChildren(double x, double y, double w, double h) {
            super.layoutChildren(x, y, w, h);
            showTooltipIfTruncated(this, getSkinnable());
        }
    }
}",0,777 587 2000 650 2001 123 777 2000 40 41 123 818 40 41 59 125 64 2002 775 2003 60 63 62 2004 40 41 123 792 744 2000 46 2005 40 823 41 59 125 773 587 2006 650 2007 123 777 2006 40 2001 2008 41 123 818 40 2008 41 59 125 64 2002 775 865 2009 40 625 2010 44 625 2011 44 625 2012 44 625 2013 41 123 818 46 2009 40 2010 44 2011 44 2012 44 2013 41 59 2014 40 823 44 2015 40 41 41 59 125 125 125 ,"{'AvgLine': 3, 'CountLine': 22, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 5, 'CountDeclMethod': 2, 'CountLineCodeExe': 5, 'CountLineComment': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2954,Java,"                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    Button button = getRegularIconButton(MaterialDesignIcon.GAVEL);
                                    button.setOnAction(e -> {
                                        tableView.getSelectionModel().select(this.getIndex());
                                        handleOnProcessDispute(item);
                                        item.setDisputeSeen(senderFlag());
                                        newBadgeByDispute.get(item.getId()).setVisible(item.isNew());
                                    });
                                    HBox hBox = new HBox(button);
                                    hBox.setAlignment(Pos.CENTER);
                                    setGraphic(hBox);
                                } else {
                                    setGraphic(null);
                                }
                            }
                        };",0,792 744 2000 60 62 40 41 123 64 2001 777 865 2002 40 657 2003 2004 44 570 2005 41 123 818 46 2002 40 2004 44 2005 41 59 688 40 2004 340 2006 307 33 2005 41 123 2007 2008 61 2009 40 2010 46 2011 41 59 2008 46 2012 40 2013 45 62 123 2014 46 2015 40 41 46 2016 40 823 46 2017 40 41 41 59 2018 40 2004 41 59 2004 46 2019 40 2020 40 41 41 59 2021 46 2022 40 2004 46 2023 40 41 41 46 2024 40 2004 46 2025 40 41 41 59 125 41 59 2026 2027 61 744 2026 40 2008 41 59 2027 46 2028 40 2029 46 2030 41 59 2031 40 2027 41 59 125 630 123 2032 40 2006 41 59 125 125 125 59 ,"{'AvgLine': 18, 'CountLine': 19, 'CountStmt': 13, 'MaxNesting': 1, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 19, 'CountStmtDecl': 3, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 11, 'CountDeclMethod': 1, 'CountLineCodeExe': 17, 'CountLineComment': 0, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2902,Java,"class CreateOfferDataModel extends MutableOfferDataModel {

    @Inject
    public CreateOfferDataModel(CreateOfferService createOfferService,
                                OpenOfferManager openOfferManager,
                                OfferUtil offerUtil,
                                BtcWalletService btcWalletService,
                                BsqWalletService bsqWalletService,
                                Preferences preferences,
                                User user,
                                P2PService p2PService,
                                PriceFeedService priceFeedService,
                                AccountAgeWitnessService accountAgeWitnessService,
                                FeeService feeService,
                                @Named(FormattingUtils.BTC_FORMATTER_KEY) CoinFormatter btcFormatter,
                                TradeStatisticsManager tradeStatisticsManager,
                                Navigation navigation) {
        super(createOfferService,
                openOfferManager,
                offerUtil,
                btcWalletService,
                bsqWalletService,
                preferences,
                user,
                p2PService,
                priceFeedService,
                accountAgeWitnessService,
                feeService,
                btcFormatter,
                tradeStatisticsManager,
                navigation);
    }
}",0,587 2000 650 2001 123 64 2002 777 2000 40 2003 2004 44 2005 2006 44 2007 2008 44 2009 2010 44 2011 2012 44 2013 2014 44 2015 2016 44 2017 2018 44 2019 2020 44 2021 2022 44 2023 2024 44 64 2025 40 2026 46 2027 41 2028 2029 44 2030 2031 44 2032 2033 41 123 818 40 2004 44 2006 44 2008 44 2010 44 2012 44 2014 44 2016 44 2018 44 2020 44 2022 44 2024 44 2029 44 2031 44 2033 41 59 125 125 ,"{'AvgLine': 30, 'CountLine': 38, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 30, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 32, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 1, 'CountDeclMethod': 1, 'CountLineCodeExe': 14, 'CountLineComment': 5, 'CountClassCoupled': 17, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountDeclMethodAll': 90, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.16', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 17, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2513,Java,"public class PathingCommandContext extends PathingCommand {

    public final CalculationContext desiredCalcContext;

    public PathingCommandContext(Goal goal, PathingCommandType commandType, CalculationContext context) {
        super(goal, commandType);
        this.desiredCalcContext = context;
    }
}",0,777 587 2000 650 2001 123 777 657 2002 2003 59 777 2000 40 2004 2005 44 2006 2007 44 2002 2008 41 123 818 40 2005 44 2007 41 59 823 46 2003 61 2008 59 125 125 ,"{'AvgLine': 4, 'CountLine': 9, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 7, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 3, 'CountDeclMethod': 1, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0}"
2975,Java,"public class SendPrivateNotificationWindow extends Overlay<SendPrivateNotificationWindow> {
    private static final Logger log = LoggerFactory.getLogger(SendPrivateNotificationWindow.class);

    private final PrivateNotificationManager privateNotificationManager;
    private final PubKeyRing pubKeyRing;
    private final NodeAddress nodeAddress;
    private final boolean useDevPrivilegeKeys;

    public SendPrivateNotificationWindow(PrivateNotificationManager privateNotificationManager,
                                         PubKeyRing pubKeyRing,
                                         NodeAddress nodeAddress,
                                         boolean useDevPrivilegeKeys) {
        this.privateNotificationManager = privateNotificationManager;
        this.pubKeyRing = pubKeyRing;
        this.nodeAddress = nodeAddress;
        this.useDevPrivilegeKeys = useDevPrivilegeKeys;
        type = Type.Attention;
    }

    public void show() {
        if (headLine == null)
            headLine = Res.get(""sendPrivateNotificationWindow.headline"");

        width = 868;
        createGridPane();
        addHeadLine();
        addContent();
        applyStyles();
        display();
    }

    @Override
    protected void setupKeyHandler(Scene scene) {
        if (!hideCloseButton) {
            scene.setOnKeyPressed(e -> {
                if (e.getCode() == KeyCode.ESCAPE) {
                    e.consume();
                    doClose();
                }
            });
        }
    }

    private void addContent() {
        InputTextField keyInputTextField = addInputTextField(gridPane, ++rowIndex, Res.get(""shared.unlock""), 10);
        if (useDevPrivilegeKeys)
            keyInputTextField.setText(DevEnv.DEV_PRIVILEGE_PRIV_KEY);

        Tuple2<Label, TextArea> labelTextAreaTuple2 = addTopLabelTextArea(gridPane, ++rowIndex,
                Res.get(""sendPrivateNotificationWindow.privateNotification""),
                Res.get(""sendPrivateNotificationWindow.enterNotification""));
        TextArea alertMessageTextArea = labelTextAreaTuple2.second;
        Label first = labelTextAreaTuple2.first;
        first.setMinWidth(200);

        Button sendButton = new AutoTooltipButton(Res.get(""sendPrivateNotificationWindow.send""));
        sendButton.setOnAction(e -> {
            if (alertMessageTextArea.getText().length() > 0 && keyInputTextField.getText().length() > 0) {
                PrivateNotificationPayload privateNotification = new PrivateNotificationPayload(alertMessageTextArea.getText());
                boolean wasKeyValid = privateNotificationManager.sendPrivateNotificationMessageIfKeyIsValid(
                        privateNotification,
                        pubKeyRing,
                        nodeAddress,
                        keyInputTextField.getText(),
                        new SendMailboxMessageListener() {
                            @Override
                            public void onArrived() {
                                log.info(""PrivateNotificationPayload arrived at peer {}."", nodeAddress);
                                UserThread.runAfter(() -> new Popup().feedback(Res.get(""shared.messageArrived""))
                                        .onClose(SendPrivateNotificationWindow.this::hide)
                                        .show(), 100, TimeUnit.MILLISECONDS);
                            }

                            @Override
                            public void onStoredInMailbox() {
                                log.info(""PrivateNotificationPayload stored in mailbox for peer {}."", nodeAddress);
                                UserThread.runAfter(() -> new Popup().feedback(Res.get(""shared.messageStoredInMailbox""))
                                        .onClose(SendPrivateNotificationWindow.this::hide)
                                        .show(), 100, TimeUnit.MILLISECONDS);
                            }

                            @Override
                            public void onFault(String errorMessage) {
                                log.error(""PrivateNotificationPayload failed: Peer {}, errorMessage={}"", nodeAddress,
                                        errorMessage);
                                UserThread.runAfter(() -> new Popup().feedback(Res.get(""shared.messageSendingFailed"", errorMessage))
                                        .onClose(SendPrivateNotificationWindow.this::hide)
                                        .show(), 100, TimeUnit.MILLISECONDS);
                            }
                        });
                if (wasKeyValid) {
                    doClose();
                } else {
                    UserThread.runAfter(() -> new Popup().warning(Res.get(""shared.invalidKey""))
                            .width(300)
                            .onClose(this::blurAgain)
                            .show(), 100, TimeUnit.MILLISECONDS);
                }
            }
        });

        closeButton = new AutoTooltipButton(Res.get(""shared.close""));
        closeButton.setOnAction(e -> {
            hide();
            closeHandlerOptional.ifPresent(Runnable::run);
        });

        HBox hBox = new HBox();
        hBox.setSpacing(10);
        hBox.setAlignment(Pos.CENTER_RIGHT);
        GridPane.setRowIndex(hBox, ++rowIndex);
        GridPane.setColumnSpan(hBox, 2);
        GridPane.setColumnIndex(hBox, 0);
        hBox.getChildren().addAll(sendButton, closeButton);
        gridPane.getChildren().add(hBox);
        GridPane.setMargin(hBox, new Insets(10, 0, 0, 0));
    }
}",0,777 587 2000 650 2001 60 2000 62 123 773 809 657 2002 2003 61 2004 46 2005 40 2000 46 587 41 59 773 657 2006 2007 59 773 657 2008 2009 59 773 657 2010 2011 59 773 657 570 2012 59 777 2000 40 2006 2007 44 2008 2009 44 2010 2011 44 570 2012 41 123 823 46 2007 61 2007 59 823 46 2009 61 2009 59 823 46 2011 61 2011 59 823 46 2012 61 2012 59 2013 61 2014 46 2015 59 125 777 865 2016 40 41 123 688 40 2017 323 2018 41 2017 61 2019 46 2020 40 362 41 59 2021 61 1504 59 2022 40 41 59 2023 40 41 59 2024 40 41 59 2025 40 41 59 2026 40 41 59 125 64 2027 775 865 2028 40 2029 2030 41 123 688 40 33 2031 41 123 2030 46 2032 40 2033 45 62 123 688 40 2033 46 2034 40 41 323 2035 46 2036 41 123 2033 46 2037 40 41 59 2038 40 41 59 125 125 41 59 125 125 773 865 2039 40 41 123 2040 2041 61 2042 40 2043 44 349 2044 44 2045 46 2046 40 362 41 44 1502 41 59 688 40 2012 41 2041 46 2047 40 2048 46 2049 41 59 2050 60 2051 44 2052 62 2053 61 2054 40 2043 44 349 2044 44 2045 46 2046 40 362 41 44 2045 46 2046 40 362 41 41 59 2052 2055 61 2053 46 2056 59 2051 2057 61 2053 46 2057 59 2057 46 2058 40 1504 41 59 2059 2060 61 744 2061 40 2045 46 2046 40 362 41 41 59 2060 46 2062 40 2063 45 62 123 688 40 2055 46 2064 40 41 46 2065 40 41 62 1500 307 2041 46 2064 40 41 46 2065 40 41 62 1500 41 123 2066 2067 61 744 2066 40 2055 46 2064 40 41 41 59 570 2068 61 2007 46 2069 40 2067 44 2009 44 2011 44 2041 46 2064 40 41 44 744 2070 40 41 123 64 2027 777 865 2071 40 41 123 2003 46 2072 40 362 44 2011 41 59 2073 46 2074 40 40 41 45 62 744 2075 40 41 46 2076 40 2045 46 2046 40 362 41 41 46 2077 40 2000 46 823 58 58 2078 41 46 2016 40 41 44 1503 44 2079 46 2080 41 59 125 64 2027 777 865 2081 40 41 123 2003 46 2082 40 362 44 2011 41 59 2083 46 2084 40 40 41 45 62 744 2085 40 41 46 2086 40 2045 46 2046 40 362 41 41 46 2087 40 2000 46 823 58 58 2088 41 46 2016 40 41 44 1503 44 2089 46 2090 41 59 125 64 2027 777 865 2091 40 2092 2093 41 123 2003 46 2094 40 362 44 2011 44 2093 41 59 2095 46 2096 40 40 41 45 62 744 2097 40 41 46 2098 40 2045 46 2046 40 362 44 2093 41 41 46 2099 40 2000 46 823 58 58 2100 41 46 2016 40 41 44 1503 44 2101 46 2102 41 59 125 125 41 59 688 40 2068 41 123 2103 40 41 59 125 630 123 2104 46 2105 40 40 41 45 62 744 2106 40 41 46 2107 40 2045 46 2046 40 362 41 41 46 2108 40 1504 41 46 2109 40 823 58 58 2110 41 46 2016 40 41 44 1503 44 2111 46 2112 41 59 125 125 125 41 59 2113 61 744 2061 40 2045 46 2046 40 362 41 41 59 2113 46 2062 40 2063 45 62 123 2114 40 41 59 2115 46 2116 40 2117 58 58 2118 41 59 125 41 59 2119 2120 61 744 2119 40 41 59 2120 46 2121 40 1502 41 59 2120 46 2122 40 2123 46 2124 41 59 2125 46 2126 40 2120 44 349 2044 41 59 2125 46 2127 40 2120 44 1502 41 59 2125 46 2128 40 2120 44 1500 41 59 2120 46 2129 40 41 46 2130 40 2060 44 2113 41 59 2043 46 2129 40 41 46 2131 40 2120 41 59 2125 46 2132 40 2120 44 744 2133 40 1502 44 1500 44 1500 44 1500 41 41 59 125 125 ,"{'AvgLine': 26, 'CountLine': 118, 'CountStmt': 65, 'MaxNesting': 2, 'AvgLineCode': 24, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 51, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 106, 'CountStmtDecl': 21, 'MaxCyclomatic': 2, 'SumCyclomatic': 13, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountSemicolon': 51, 'CountDeclMethod': 4, 'CountLineCodeExe': 81, 'CountLineComment': 0, 'CountClassCoupled': 26, 'CountClassDerived': 0, 'CountLineCodeDecl': 24, 'CountDeclMethodAll': 73, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 68, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 26, 'CountDeclInstanceVariable': 4, 'PercentLackOfCohesionModified': 62}"
2889,Java,"public class VolumeUtil {

    private static final MonetaryFormat FIAT_VOLUME_FORMAT = new MonetaryFormat().shift(0).minDecimals(0).repeatOptionalDecimals(0, 0);

    public static Volume getRoundedFiatVolume(Volume volumeByAmount) {
        // We want to get rounded to 1 unit of the fiat currency, e.g. 1 EUR.
        return getAdjustedFiatVolume(volumeByAmount, 1);
    }

    public static Volume getAdjustedVolumeForHalCash(Volume volumeByAmount) {
        // EUR has precision 4 and we want multiple of 10 so we divide by 100000 then
        // round and multiply with 10
        return getAdjustedFiatVolume(volumeByAmount, 10);
    }

    /**
     *
     * @param volumeByAmount      The volume generated from an amount
     * @param factor              The factor used for rounding. E.g. 1 means rounded to
     *                            units of 1 EUR, 10 means rounded to 10 EUR.
     * @return The adjusted Fiat volume
     */
    public static Volume getAdjustedFiatVolume(Volume volumeByAmount, int factor) {
        // Fiat currencies use precision 4 and we want multiple of factor so we divide by 10000 * factor then
        // round and multiply with factor
        long roundedVolume = Math.round((double) volumeByAmount.getValue() / (10000d * factor)) * factor;
        // Smallest allowed volume is factor (e.g. 10 EUR or 1 EUR,...)
        roundedVolume = Math.max(factor, roundedVolume);
        return Volume.parse(String.valueOf(roundedVolume), volumeByAmount.getCurrencyCode());
    }

    public static Volume getVolume(Coin amount, Price price) {
        if (price.getMonetary() instanceof Altcoin) {
            return new Volume(new AltcoinExchangeRate((Altcoin) price.getMonetary()).coinToAltcoin(amount));
        } else {
            return new Volume(new ExchangeRate((Fiat) price.getMonetary()).coinToFiat(amount));
        }
    }


    public static String formatVolume(Offer offer, Boolean decimalAligned, int maxNumberOfDigits) {
        return formatVolume(offer, decimalAligned, maxNumberOfDigits, true);
    }

    public static String formatVolume(Offer offer, Boolean decimalAligned, int maxNumberOfDigits, boolean showRange) {
        String formattedVolume = offer.isRange() && showRange
                ? formatVolume(offer.getMinVolume()) + FormattingUtils.RANGE_SEPARATOR + formatVolume(offer.getVolume())
                : formatVolume(offer.getVolume());

        if (decimalAligned) {
            formattedVolume = FormattingUtils.fillUpPlacesWithEmptyStrings(formattedVolume, maxNumberOfDigits);
        }
        return formattedVolume;
    }

    public static String formatLargeFiat(double value, String currency) {
        if (value <= 0) {
            return ""0"";
        }
        NumberFormat numberFormat = DecimalFormat.getInstance(Locale.US);
        numberFormat.setGroupingUsed(true);
        return numberFormat.format(value) + "" "" + currency;
    }

    public static String formatLargeFiatWithUnitPostFix(double value, String currency) {
        if (value <= 0) {
            return ""0"";
        }
        String[] units = new String[]{"""", ""K"", ""M"", ""B""};
        int digitGroups = (int) (Math.log10(value) / Math.log10(1000));
        return new DecimalFormat(""#,##0.###"")
                .format(value / Math.pow(1000, digitGroups)) + units[digitGroups] + "" "" + currency;
    }

    public static String formatVolume(Volume volume) {
        return formatVolume(volume, FIAT_VOLUME_FORMAT, false);
    }

    private static String formatVolume(Volume volume, MonetaryFormat fiatVolumeFormat, boolean appendCurrencyCode) {
        if (volume != null) {
            Monetary monetary = volume.getMonetary();
            if (monetary instanceof Fiat)
                return FormattingUtils.formatFiat((Fiat) monetary, fiatVolumeFormat, appendCurrencyCode);
            else
                return FormattingUtils.formatAltcoinVolume((Altcoin) monetary, appendCurrencyCode);
        } else {
            return """";
        }
    }

    public static String formatVolumeWithCode(Volume volume) {
        return formatVolume(volume, true);
    }

    public static String formatVolume(Volume volume, boolean appendCode) {
        return formatVolume(volume, FIAT_VOLUME_FORMAT, appendCode);
    }

    public static String formatAverageVolumeWithCode(Volume volume) {
        return formatVolume(volume, FIAT_VOLUME_FORMAT.minDecimals(2), true);
    }

    public static String formatVolumeLabel(String currencyCode) {
        return formatVolumeLabel(currencyCode, """");
    }

    public static String formatVolumeLabel(String currencyCode, String postFix) {
        return Res.get(""formatter.formatVolumeLabel"",
                currencyCode, postFix);
    }
}",0,777 587 2000 123 773 809 657 2001 2002 61 744 2001 40 41 46 2003 40 1500 41 46 2004 40 1500 41 46 2005 40 1500 44 1500 41 59 777 809 2006 2007 40 2006 2008 41 123 330 792 2009 40 2008 44 1501 41 59 125 777 809 2006 2010 40 2006 2008 41 123 330 330 792 2011 40 2008 44 1502 41 59 125 306 777 809 2006 2012 40 2006 2008 44 704 2013 41 123 330 330 726 2014 61 2015 46 2016 40 40 625 41 2008 46 2017 40 41 47 40 1505 42 2013 41 41 42 2013 59 330 2014 61 2015 46 2018 40 2013 44 2014 41 59 792 2006 46 2019 40 2020 46 2021 40 2014 41 44 2008 46 2022 40 41 41 59 125 777 809 2006 2023 40 2024 2025 44 2026 2027 41 123 688 40 2027 46 2028 40 41 702 2029 41 123 792 744 2006 40 744 2030 40 40 2029 41 2027 46 2028 40 41 41 46 2031 40 2025 41 41 59 125 630 123 792 744 2006 40 744 2032 40 40 2033 41 2027 46 2028 40 41 41 46 2034 40 2025 41 41 59 125 125 777 809 2035 2036 40 2037 2038 44 2039 2040 44 704 2041 41 123 792 2036 40 2038 44 2040 44 2041 44 2042 41 59 125 777 809 2035 2036 40 2037 2038 44 2039 2040 44 704 2041 44 570 2043 41 123 2035 2044 61 2038 46 2045 40 41 307 2043 63 2036 40 2038 46 2046 40 41 41 43 2047 46 2048 43 2036 40 2038 46 2023 40 41 41 58 2036 40 2038 46 2023 40 41 41 59 688 40 2040 41 123 2044 61 2047 46 2049 40 2044 44 2041 41 59 125 792 2044 59 125 777 809 2035 2050 40 625 2051 44 2035 2052 41 123 688 40 2051 329 1500 41 123 792 362 59 125 2053 2054 61 2055 46 2056 40 2057 46 2058 41 59 2054 46 2059 40 2060 41 59 792 2054 46 2061 40 2051 41 43 362 43 2052 59 125 777 809 2035 2062 40 625 2051 44 2035 2052 41 123 688 40 2051 329 1500 41 123 792 362 59 125 2035 91 93 2063 61 744 2035 91 93 123 362 44 362 44 362 44 362 125 59 704 2064 61 40 704 41 40 2065 46 2066 40 2051 41 47 2065 46 2066 40 1504 41 41 59 792 744 2067 40 362 41 46 2068 40 2051 47 2065 46 2069 40 1504 44 2064 41 41 43 2063 91 2064 93 43 362 43 2052 59 125 777 809 2035 2036 40 2006 2070 41 123 792 2036 40 2070 44 2002 44 2071 41 59 125 773 809 2035 2036 40 2006 2070 44 2001 2072 44 570 2073 41 123 688 40 2070 340 2074 41 123 2075 2076 61 2070 46 2077 40 41 59 688 40 2076 702 2078 41 792 2079 46 2080 40 40 2078 41 2076 44 2072 44 2073 41 59 630 792 2079 46 2081 40 40 2082 41 2076 44 2073 41 59 125 630 123 792 362 59 125 125 777 809 2035 2083 40 2006 2070 41 123 792 2036 40 2070 44 2084 41 59 125 777 809 2035 2036 40 2006 2070 44 570 2085 41 123 792 2036 40 2070 44 2002 44 2085 41 59 125 777 809 2035 2086 40 2006 2070 41 123 792 2036 40 2070 44 2002 46 2004 40 1502 41 44 2087 41 59 125 777 809 2035 2088 40 2035 2089 41 123 792 2088 40 2089 44 362 41 59 125 777 809 2035 2088 40 2035 2089 44 2035 2090 41 123 792 2091 46 2092 40 362 44 2089 44 2090 41 59 125 125 ,"{'AvgLine': 6, 'CountLine': 111, 'CountStmt': 52, 'MaxNesting': 2, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 35, 'MaxEssential': 3, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 80, 'CountStmtDecl': 23, 'MaxCyclomatic': 3, 'SumCyclomatic': 22, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 18, 'CountSemicolon': 30, 'CountDeclMethod': 15, 'CountLineCodeExe': 43, 'CountLineComment': 13, 'CountClassCoupled': 16, 'CountClassDerived': 0, 'CountLineCodeDecl': 24, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.16', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 23, 'CountDeclClassMethod': 15, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 14, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 22, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 16, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2920,Java,"@Slf4j
abstract class AbstractLinuxProcess implements LinuxProcess {

    protected final String name;
    protected final ApiTestConfig config;

    protected long pid;

    protected final List<Throwable> startupExceptions;
    protected final List<Throwable> shutdownExceptions;

    public AbstractLinuxProcess(String name, ApiTestConfig config) {
        this.name = name;
        this.config = config;
        this.startupExceptions = new ArrayList<>();
        this.shutdownExceptions = new ArrayList<>();
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public boolean hasStartupExceptions() {
        return !startupExceptions.isEmpty();
    }

    @Override
    public boolean hasShutdownExceptions() {
        return !shutdownExceptions.isEmpty();
    }

    @Override
    public void logExceptions(List<Throwable> exceptions, org.slf4j.Logger log) {
        for (Throwable t : exceptions) {
            log.error("""", t);
        }
    }

    @Override
    public List<Throwable> getStartupExceptions() {
        return startupExceptions;
    }

    @Override
    public List<Throwable> getShutdownExceptions() {
        return shutdownExceptions;
    }

    @SuppressWarnings(""unused"")
    public void verifyBitcoinPathsExist() {
        verifyBitcoinPathsExist(false);
    }

    public void verifyBitcoinPathsExist(boolean verbose) {
        if (verbose)
            log.info(format(""Checking bitcoind env...%n""
                            + ""\t%-20s%s%n\t%-20s%s%n\t%-20s%s%n\t%-20s%s"",
                    ""berkeleyDbLibPath"", config.berkeleyDbLibPath,
                    ""bitcoinPath"", config.bitcoinPath,
                    ""bitcoinDatadir"", config.bitcoinDatadir,
                    ""blocknotify"", config.bitcoinDatadir + ""/blocknotify""));

        if (!config.berkeleyDbLibPath.equals(EMPTY)) {
            File berkeleyDbLibPath = new File(config.berkeleyDbLibPath);
            if (!berkeleyDbLibPath.exists() || !berkeleyDbLibPath.canExecute())
                throw new IllegalStateException(berkeleyDbLibPath + "" cannot be found or executed"");
        }

        File bitcoindExecutable = Paths.get(config.bitcoinPath, ""bitcoind"").toFile();
        if (!bitcoindExecutable.exists() || !bitcoindExecutable.canExecute())
            throw new IllegalStateException(format(""'%s' cannot be found or executed.%n""
                            + ""A bitcoin-core v0.19 - v22 installation is required,"" +
                            "" and the 'bitcoinPath' must be configured in 'apitest.properties'"",
                    bitcoindExecutable.getAbsolutePath()));

        File bitcoindDatadir = new File(config.bitcoinDatadir);
        if (!bitcoindDatadir.exists() || !bitcoindDatadir.canWrite())
            throw new IllegalStateException(bitcoindDatadir + "" cannot be found or written to"");

        File blocknotify = new File(bitcoindDatadir, ""blocknotify"");
        if (!blocknotify.exists() || !blocknotify.canExecute())
            throw new IllegalStateException(blocknotify.getAbsolutePath() + "" cannot be found or executed"");
    }

    public void verifyBitcoindRunning() throws IOException, InterruptedException {
        long bitcoindPid = BashCommand.getPid(""bitcoind"");
        if (bitcoindPid < 0 || !isAlive(bitcoindPid))
            throw new IllegalStateException(""Bitcoind not running"");
    }
}",0,64 2000 539 587 2001 693 2002 123 775 657 2003 2004 59 775 657 2005 2006 59 775 726 2007 59 775 657 2008 60 2009 62 2010 59 775 657 2008 60 2009 62 2011 59 777 2001 40 2003 2004 44 2005 2006 41 123 823 46 2004 61 2004 59 823 46 2006 61 2006 59 823 46 2010 61 744 2012 60 62 40 41 59 823 46 2011 61 744 2012 60 62 40 41 59 125 64 2013 777 2003 2014 40 41 123 792 823 46 2004 59 125 64 2013 777 570 2015 40 41 123 792 33 2010 46 2016 40 41 59 125 64 2013 777 570 2017 40 41 123 792 33 2011 46 2018 40 41 59 125 64 2013 777 865 2019 40 2008 60 2009 62 2020 44 2021 46 2022 46 2023 2024 41 123 664 40 2009 2025 58 2020 41 123 2024 46 2026 40 362 44 2025 41 59 125 125 64 2013 777 2008 60 2009 62 2027 40 41 123 792 2010 59 125 64 2013 777 2008 60 2009 62 2028 40 41 123 792 2011 59 125 64 2029 40 362 41 777 865 2030 40 41 123 2030 40 2031 41 59 125 777 865 2030 40 570 2032 41 123 688 40 2032 41 2024 46 2033 40 2034 40 362 43 362 44 362 44 2006 46 2035 44 362 44 2006 46 2036 44 362 44 2006 46 2037 44 362 44 2006 46 2037 43 362 41 41 59 688 40 33 2006 46 2035 46 2038 40 2039 41 41 123 2040 2035 61 744 2040 40 2006 46 2035 41 59 688 40 33 2035 46 2041 40 41 309 33 2035 46 2042 40 41 41 825 744 2043 40 2035 43 362 41 59 125 2044 2045 61 2046 46 2047 40 2006 46 2036 44 362 41 46 2048 40 41 59 688 40 33 2045 46 2049 40 41 309 33 2045 46 2050 40 41 41 825 744 2051 40 2034 40 362 43 362 43 362 44 2045 46 2052 40 41 41 41 59 2044 2053 61 744 2044 40 2006 46 2037 41 59 688 40 33 2053 46 2049 40 41 309 33 2053 46 2054 40 41 41 825 744 2051 40 2053 43 362 41 59 2044 2055 61 744 2044 40 2053 44 362 41 59 688 40 33 2055 46 2049 40 41 309 33 2055 46 2050 40 41 41 825 744 2051 40 2055 46 2052 40 41 43 362 41 59 125 777 865 2056 40 41 826 2057 44 2058 123 726 2059 61 2060 46 2061 40 362 41 59 688 40 2059 60 1500 309 33 2062 40 2059 41 41 825 744 2063 40 362 41 59 125 125 ,"{'AvgLine': 7, 'CountLine': 92, 'CountStmt': 47, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 30, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 75, 'CountStmtDecl': 22, 'MaxCyclomatic': 7, 'SumCyclomatic': 18, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 17, 'CountSemicolon': 27, 'CountDeclMethod': 10, 'CountLineCodeExe': 38, 'CountLineComment': 0, 'CountClassCoupled': 15, 'CountClassDerived': 3, 'CountLineCodeDecl': 29, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 11, 'SumCyclomaticStrict': 23, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 10, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 15, 'CountDeclInstanceVariable': 5, 'PercentLackOfCohesionModified': 78}"
3350,Java,"@Slf4j
public class BisqHeadlessAppMain extends BisqExecutable {
    protected HeadlessApp headlessApp;
    private TradeLimits tradeLimits;

    public BisqHeadlessAppMain() {
        super(""Bisq Daemon"", ""bisqd"", ""Bisq"", Version.VERSION);
    }

    public static void main(String[] args) throws Exception {
        // For some reason the JavaFX launch process results in us losing the thread
        // context class loader: reset it. In order to work around a bug in JavaFX 8u25
        // and below, you must include the following code as the first line of your
        // realMain method:
        Thread.currentThread().setContextClassLoader(BisqHeadlessAppMain.class.getClassLoader());

        new BisqHeadlessAppMain().execute(args);
    }

    @Override
    protected void doExecute() {
        super.doExecute();

        keepRunning();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // First synchronous execution tasks
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void configUserThread() {
        final ThreadFactory threadFactory = new ThreadFactoryBuilder()
                .setNameFormat(this.getClass().getSimpleName())
                .setDaemon(true)
                .build();
        UserThread.setExecutor(Executors.newSingleThreadExecutor(threadFactory));
    }

    @Override
    protected void launchApplication() {
        headlessApp = new BisqHeadlessApp();

        UserThread.execute(this::onApplicationLaunched);
    }

    @Override
    protected void onApplicationLaunched() {
        super.onApplicationLaunched();
        headlessApp.setGracefulShutDownHandler(this);
    }

    @Override
    public void handleUncaughtException(Throwable throwable, boolean doShutDown) {
        headlessApp.handleUncaughtException(throwable, doShutDown);
    }

    @Override
    public void onSetupComplete() {
        log.info(""onSetupComplete"");
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // We continue with a series of synchronous execution tasks
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected AppModule getModule() {
        return new CoreModule(config);
    }

    @Override
    protected void applyInjector() {
        super.applyInjector();

        headlessApp.setInjector(injector);
    }

    @Override
    protected void startApplication() {
        // Pin that as it is used in PaymentMethods and verification in TradeStatistics
        tradeLimits = injector.getInstance(TradeLimits.class);

        // We need to be in user thread! We mapped at launchApplication already...
        headlessApp.startApplication();

        // In headless mode we don't have an async behaviour so we trigger the setup by calling onApplicationStarted
        onApplicationStarted();
    }

    private void keepRunning() {
        while (true) {
            try {
                Thread.sleep(Long.MAX_VALUE);
            } catch (InterruptedException ignore) {
            }
        }
    }
}",0,64 2000 777 587 2001 650 2002 123 775 2003 2004 59 773 2005 2006 59 777 2001 40 41 123 818 40 362 44 362 44 362 44 2007 46 2008 41 59 125 777 809 865 2009 40 2010 91 93 2011 41 826 2012 123 330 330 330 330 2013 46 2014 40 41 46 2015 40 2001 46 587 46 2016 40 41 41 59 744 2001 40 41 46 2017 40 2011 41 59 125 64 2018 775 865 2019 40 41 123 818 46 2019 40 41 59 2020 40 41 59 125 331 330 331 64 2018 775 865 2021 40 41 123 657 2022 2023 61 744 2024 40 41 46 2025 40 823 46 2026 40 41 46 2027 40 41 41 46 2028 40 2029 41 46 2030 40 41 59 2031 46 2032 40 2033 46 2034 40 2023 41 41 59 125 64 2018 775 865 2035 40 41 123 2004 61 744 2036 40 41 59 2037 46 2038 40 823 58 58 2039 41 59 125 64 2018 775 865 2040 40 41 123 818 46 2040 40 41 59 2004 46 2041 40 823 41 59 125 64 2018 777 865 2042 40 2043 2044 44 570 2045 41 123 2004 46 2042 40 2044 44 2045 41 59 125 64 2018 777 865 2046 40 41 123 2047 46 2048 40 362 41 59 125 331 330 331 64 2018 775 2049 2050 40 41 123 792 744 2051 40 2052 41 59 125 64 2018 775 865 2053 40 41 123 818 46 2053 40 41 59 2004 46 2054 40 2055 41 59 125 64 2018 775 865 2056 40 41 123 330 2006 61 2057 46 2058 40 2005 46 587 41 59 330 2004 46 2056 40 41 59 330 2059 40 41 59 125 773 865 2060 40 41 123 870 40 2061 41 123 830 123 2062 46 2063 40 2064 46 2065 41 59 125 580 40 2066 2067 41 123 125 125 125 125 ,"{'AvgLine': 6, 'CountLine': 100, 'CountStmt': 37, 'MaxNesting': 2, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 66, 'CountStmtDecl': 16, 'MaxCyclomatic': 3, 'SumCyclomatic': 14, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountSemicolon': 22, 'CountDeclMethod': 12, 'CountLineCodeExe': 26, 'CountLineComment': 13, 'CountClassCoupled': 15, 'CountClassDerived': 1, 'CountLineCodeDecl': 27, 'CountDeclMethodAll': 33, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.20', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 7, 'CountClassCoupledModified': 15, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 75}"
2868,Java,"@Slf4j
@EqualsAndHashCode(callSuper = true)
@Value
public final class PayoutTxPublishedMessage extends TradeMailboxMessage {
    private final byte[] payoutTx;
    private final NodeAddress senderNodeAddress;

    // Added in v1.4.0
    @Nullable
    private final SignedWitness signedWitness;

    public PayoutTxPublishedMessage(String tradeId,
                                    byte[] payoutTx,
                                    NodeAddress senderNodeAddress,
                                    @Nullable SignedWitness signedWitness) {
        this(tradeId,
                payoutTx,
                senderNodeAddress,
                signedWitness,
                UUID.randomUUID().toString(),
                Version.getP2PMessageVersion());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    private PayoutTxPublishedMessage(String tradeId,
                                     byte[] payoutTx,
                                     NodeAddress senderNodeAddress,
                                     @Nullable SignedWitness signedWitness,
                                     String uid,
                                     int messageVersion) {
        super(messageVersion, tradeId, uid);
        this.payoutTx = payoutTx;
        this.senderNodeAddress = senderNodeAddress;
        this.signedWitness = signedWitness;
    }

    @Override
    public protobuf.NetworkEnvelope toProtoNetworkEnvelope() {
        protobuf.PayoutTxPublishedMessage.Builder builder = protobuf.PayoutTxPublishedMessage.newBuilder()
                .setTradeId(tradeId)
                .setPayoutTx(ByteString.copyFrom(payoutTx))
                .setSenderNodeAddress(senderNodeAddress.toProtoMessage())
                .setUid(uid);
        Optional.ofNullable(signedWitness).ifPresent(signedWitness -> builder.setSignedWitness(signedWitness.toProtoSignedWitness()));
        return getNetworkEnvelopeBuilder().setPayoutTxPublishedMessage(builder).build();
    }

    public static NetworkEnvelope fromProto(protobuf.PayoutTxPublishedMessage proto, int messageVersion) {
        // There is no method to check for a nullable non-primitive data type object but we know that all fields
        // are empty/null, so we check for the signature to see if we got a valid signedWitness.
        protobuf.SignedWitness protoSignedWitness = proto.getSignedWitness();
        SignedWitness signedWitness = !protoSignedWitness.getSignature().isEmpty() ?
                SignedWitness.fromProto(protoSignedWitness) :
                null;
        return new PayoutTxPublishedMessage(proto.getTradeId(),
                proto.getPayoutTx().toByteArray(),
                NodeAddress.fromProto(proto.getSenderNodeAddress()),
                signedWitness,
                proto.getUid(),
                messageVersion);
    }

    @Override
    public String toString() {
        return ""PayoutTxPublishedMessage{"" +
                ""\n     payoutTx="" + Utilities.bytesAsHexString(payoutTx) +
                "",\n     senderNodeAddress="" + senderNodeAddress +
                "",\n     signedWitness="" + signedWitness +
                ""\n} "" + super.toString();
    }
}",0,64 2000 64 2001 40 2002 61 2003 41 64 2004 777 657 587 2005 650 2006 123 773 657 574 91 93 2007 59 773 657 2008 2009 59 330 64 2010 773 657 2011 2012 59 777 2005 40 2013 2014 44 574 91 93 2007 44 2008 2009 44 64 2010 2011 2012 41 123 823 40 2014 44 2007 44 2009 44 2012 44 2015 46 2016 40 41 46 2017 40 41 44 2018 46 2019 40 41 41 59 125 331 330 331 773 2005 40 2013 2014 44 574 91 93 2007 44 2008 2009 44 64 2010 2011 2012 44 2013 2020 44 704 2021 41 123 818 40 2021 44 2014 44 2020 41 59 823 46 2007 61 2007 59 823 46 2009 61 2009 59 823 46 2012 61 2012 59 125 64 2022 777 2023 46 2024 2025 40 41 123 2023 46 2005 46 2026 2027 61 2023 46 2005 46 2028 40 41 46 2029 40 2014 41 46 2030 40 2031 46 2032 40 2007 41 41 46 2033 40 2009 46 2034 40 41 41 46 2035 40 2020 41 59 2036 46 2037 40 2012 41 46 2038 40 2012 45 62 2027 46 2039 40 2012 46 2040 40 41 41 41 59 792 2041 40 41 46 2042 40 2027 41 46 2043 40 41 59 125 777 809 2024 2044 40 2023 46 2005 2045 44 704 2021 41 123 330 330 2023 46 2011 2046 61 2045 46 2047 40 41 59 2011 2012 61 33 2046 46 2048 40 41 46 2049 40 41 63 2011 46 2044 40 2046 41 58 2050 59 792 744 2005 40 2045 46 2051 40 41 44 2045 46 2052 40 41 46 2053 40 41 44 2008 46 2044 40 2045 46 2054 40 41 41 44 2012 44 2045 46 2055 40 41 44 2021 41 59 125 64 2022 777 2013 2056 40 41 123 792 362 43 362 43 2057 46 2058 40 2007 41 43 362 43 2009 43 362 43 2012 43 362 43 818 46 2056 40 41 59 125 125 ,"{'AvgLine': 10, 'CountLine': 75, 'CountStmt': 21, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 61, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountSemicolon': 15, 'CountDeclMethod': 5, 'CountLineCodeExe': 32, 'CountLineComment': 6, 'CountClassCoupled': 17, 'CountClassDerived': 0, 'CountLineCodeDecl': 28, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.10', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 40, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 17, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 0}"
2863,Java,"@Getter
@EqualsAndHashCode
@Slf4j
public final class NodeAddress implements PersistablePayload, NetworkPayload, UsedForTradeContractJson {
    private final String hostName;
    private final int port;

    @JsonExclude
    private byte[] addressPrefixHash;

    public NodeAddress(String hostName, int port) {
        this.hostName = hostName;
        this.port = port;
    }

    public NodeAddress(String fullAddress) {
        final String[] split = fullAddress.split(Pattern.quote("":""));
        checkArgument(split.length == 2, ""fullAddress must contain ':'"");
        this.hostName = split[0];
        this.port = Integer.parseInt(split[1]);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    public protobuf.NodeAddress toProtoMessage() {
        return protobuf.NodeAddress.newBuilder().setHostName(hostName).setPort(port).build();
    }

    public static NodeAddress fromProto(protobuf.NodeAddress proto) {
        return new NodeAddress(proto.getHostName(), proto.getPort());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public String getFullAddress() {
        return hostName + "":"" + port;
    }

    public String getHostNameWithoutPostFix() {
        return hostName.replace("".onion"", """");
    }

    // tor v3 onions are too long to display for example in a table grid, so this convenience method
    // produces a display-friendly format which includes [first 7]..[last 7] characters.
    // tor v2 and localhost will be displayed in full, as they are 16 chars or less.
    public String getHostNameForDisplay() {
        String work = getHostNameWithoutPostFix();
        if (work.length() > 16) {
            return work.substring(0, 7) + "".."" + work.substring(work.length() - 7);
        }
        return work;
    }

    // We use just a few chars from the full address to blur the potential receiver for sent network_messages
    public byte[] getAddressPrefixHash() {
        if (addressPrefixHash == null)
            addressPrefixHash = Hash.getSha256Hash(getFullAddress().substring(0, Math.min(2, getFullAddress().length())));
        return addressPrefixHash;
    }

    @Override
    public String toString() {
        return getFullAddress();
    }
}",0,64 2000 64 2001 64 2002 777 657 587 2003 693 2004 44 2005 44 2006 123 773 657 2007 2008 59 773 657 704 2009 59 64 2010 773 574 91 93 2011 59 777 2003 40 2007 2008 44 704 2009 41 123 823 46 2008 61 2008 59 823 46 2009 61 2009 59 125 777 2003 40 2007 2012 41 123 657 2007 91 93 2013 61 2012 46 2013 40 2014 46 2015 40 362 41 41 59 2016 40 2013 46 2017 323 1502 44 362 41 59 823 46 2008 61 2013 91 1500 93 59 823 46 2009 61 2018 46 2019 40 2013 91 1501 93 41 59 125 331 330 331 777 2020 46 2003 2021 40 41 123 792 2020 46 2003 46 2022 40 41 46 2023 40 2008 41 46 2024 40 2009 41 46 2025 40 41 59 125 777 809 2003 2026 40 2020 46 2003 2027 41 123 792 744 2003 40 2027 46 2028 40 41 44 2027 46 2029 40 41 41 59 125 331 330 331 777 2007 2030 40 41 123 792 2008 43 362 43 2009 59 125 777 2007 2031 40 41 123 792 2008 46 2032 40 362 44 362 41 59 125 330 330 330 777 2007 2033 40 41 123 2007 2034 61 2031 40 41 59 688 40 2034 46 2035 40 41 62 1503 41 123 792 2034 46 2036 40 1500 44 1502 41 43 362 43 2034 46 2036 40 2034 46 2035 40 41 45 1502 41 59 125 792 2034 59 125 330 777 574 91 93 2037 40 41 123 688 40 2011 323 2038 41 2011 61 2039 46 2040 40 2030 40 41 46 2041 40 1500 44 2042 46 2043 40 1502 44 2030 40 41 46 2044 40 41 41 41 41 59 792 2011 59 125 64 2045 777 2007 2046 40 41 123 792 2030 40 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 71, 'CountStmt': 31, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 47, 'CountStmtDecl': 15, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AvgLineComment': 0, 'CountClassBase': 4, 'CountLineBlank': 14, 'CountSemicolon': 19, 'CountDeclMethod': 9, 'CountLineCodeExe': 18, 'CountLineComment': 10, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountLineCodeDecl': 20, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.21', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 9, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 62, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 9, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 37}"
2783,Java,"public class TitledGroupBg extends Pane {

    private final Label label;
    private final StringProperty text = new SimpleStringProperty();

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    public TitledGroupBg() {
        GridPane.setMargin(this, new Insets(-10, -10, -10, -10));
        GridPane.setColumnSpan(this, 2);

        label = new AutoTooltipLabel();
        label.textProperty().bind(text);
        label.setLayoutX(4);
        label.setLayoutY(-8);
        label.setPadding(new Insets(0, 7, 0, 5));
        setActive();
        getChildren().add(label);
    }

    public void setInactive() {
        resetStyles();
        getStyleClass().add(""titled-group-bg"");
        label.getStyleClass().add(""titled-group-bg-label"");
    }

    private void resetStyles() {
        getStyleClass().removeAll(""titled-group-bg"", ""titled-group-bg-active"");
        label.getStyleClass().removeAll(""titled-group-bg-label"", ""titled-group-bg-label-active"");
    }

    private void setActive() {
        resetStyles();
        getStyleClass().add(""titled-group-bg-active"");
        label.getStyleClass().add(""titled-group-bg-label-active"");
    }

    public String getText() {
        return text.get();
    }

    public StringProperty textProperty() {
        return text;
    }

    public void setText(String text) {
        this.text.set(text);
    }

    public Label getLabel() {
        return label;
    }

}",0,777 587 2000 650 2001 123 773 657 2002 2003 59 773 657 2004 2005 61 744 2006 40 41 59 331 330 331 777 2000 40 41 123 2007 46 2008 40 823 44 744 2009 40 45 1502 44 45 1502 44 45 1502 44 45 1502 41 41 59 2007 46 2010 40 823 44 1502 41 59 2003 61 744 2011 40 41 59 2003 46 2012 40 41 46 2013 40 2005 41 59 2003 46 2014 40 1502 41 59 2003 46 2015 40 45 1502 41 59 2003 46 2016 40 744 2009 40 1500 44 1502 44 1500 44 1502 41 41 59 2017 40 41 59 2018 40 41 46 2019 40 2003 41 59 125 777 865 2020 40 41 123 2021 40 41 59 2022 40 41 46 2023 40 362 41 59 2003 46 2022 40 41 46 2023 40 362 41 59 125 773 865 2024 40 41 123 2025 40 41 46 2026 40 362 44 362 41 59 2003 46 2025 40 41 46 2026 40 362 44 362 41 59 125 773 865 2027 40 41 123 2024 40 41 59 2028 40 41 46 2029 40 362 41 59 2003 46 2028 40 41 46 2029 40 362 41 59 125 777 2030 2031 40 41 123 792 2005 46 2032 40 41 59 125 777 2004 2033 40 41 123 792 2005 59 125 777 865 2034 40 2030 2005 41 123 823 46 2005 46 2035 40 2005 41 59 125 777 2002 2036 40 41 123 792 2003 59 125 125 ,"{'AvgLine': 4, 'CountLine': 56, 'CountStmt': 32, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 41, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountSemicolon': 23, 'CountDeclMethod': 8, 'CountLineCodeExe': 22, 'CountLineComment': 3, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 11, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.07', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 6, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 43, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 7, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 43}"
2900,Java,"public class RegexAddressValidator implements AddressValidator {

    private final String regex;
    private final String errorMessageI18nKey;

    public RegexAddressValidator(String regex) {
        this(regex, null);
    }

    public RegexAddressValidator(String regex, String errorMessageI18nKey) {
        this.regex = regex;
        this.errorMessageI18nKey = errorMessageI18nKey;
    }

    @Override
    public AddressValidationResult validate(String address) {
        if (!address.matches(regex))
            if (errorMessageI18nKey == null) return AddressValidationResult.invalidStructure();
            else return AddressValidationResult.invalidAddress("""", errorMessageI18nKey);

        return AddressValidationResult.validAddress();
    }
}",0,777 587 2000 693 2001 123 773 657 2002 2003 59 773 657 2002 2004 59 777 2000 40 2002 2003 41 123 823 40 2003 44 2005 41 59 125 777 2000 40 2002 2003 44 2002 2004 41 123 823 46 2003 61 2003 59 823 46 2004 61 2004 59 125 64 2006 777 2007 2008 40 2002 2009 41 123 688 40 33 2009 46 2010 40 2003 41 41 688 40 2004 323 2011 41 792 2007 46 2012 40 41 59 630 792 2007 46 2013 40 362 44 2004 41 59 792 2007 46 2014 40 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 29, 'CountStmt': 14, 'MaxNesting': 2, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 3, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 6, 'MaxCyclomatic': 3, 'SumCyclomatic': 5, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 5, 'CountSemicolon': 8, 'CountDeclMethod': 3, 'CountLineCodeExe': 7, 'CountLineComment': 6, 'CountClassCoupled': 3, 'CountClassDerived': 8, 'CountLineCodeDecl': 7, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.33', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 0}"
2699,Java,"@Mixin(NetHandlerPlayClient.class)
public class MixinNetHandlerPlayClient {

    @Inject(
            method = ""handleChunkData"",
            at = @At(
                    value = ""INVOKE"",
                    target = ""net/minecraft/world/chunk/Chunk.read(Lnet/minecraft/network/PacketBuffer;IZ)V""
            )
    )
    private void preRead(SPacketChunkData packetIn, CallbackInfo ci) {
        for (IBaritone ibaritone : BaritoneAPI.getProvider().getAllBaritones()) {
            EntityPlayerSP player = ibaritone.getPlayerContext().player();
            if (player != null && player.connection == (NetHandlerPlayClient) (Object) this) {
                ibaritone.getGameEventHandler().onChunkEvent(
                        new ChunkEvent(
                                EventState.PRE,
                                packetIn.isFullChunk() ? ChunkEvent.Type.POPULATE_FULL : ChunkEvent.Type.POPULATE_PARTIAL,
                                packetIn.getChunkX(),
                                packetIn.getChunkZ()
                        )
                );
            }
        }
    }

    @Inject(
            method = ""handleChunkData"",
            at = @At(""RETURN"")
    )
    private void postHandleChunkData(SPacketChunkData packetIn, CallbackInfo ci) {
        for (IBaritone ibaritone : BaritoneAPI.getProvider().getAllBaritones()) {
            EntityPlayerSP player = ibaritone.getPlayerContext().player();
            if (player != null && player.connection == (NetHandlerPlayClient) (Object) this) {
                ibaritone.getGameEventHandler().onChunkEvent(
                        new ChunkEvent(
                                EventState.POST,
                                packetIn.isFullChunk() ? ChunkEvent.Type.POPULATE_FULL : ChunkEvent.Type.POPULATE_PARTIAL,
                                packetIn.getChunkX(),
                                packetIn.getChunkZ()
                        )
                );
            }
        }
    }

    @Inject(
            method = ""handleBlockChange"",
            at = @At(""RETURN"")
    )
    private void postHandleBlockChange(SPacketBlockChange packetIn, CallbackInfo ci) {
        if (!Baritone.settings().repackOnAnyBlockChange.value) {
            return;
        }
        if (!CachedChunk.BLOCKS_TO_KEEP_TRACK_OF.contains(packetIn.getBlockState().getBlock())) {
            return;
        }
        for (IBaritone ibaritone : BaritoneAPI.getProvider().getAllBaritones()) {
            EntityPlayerSP player = ibaritone.getPlayerContext().player();
            if (player != null && player.connection == (NetHandlerPlayClient) (Object) this) {
                ibaritone.getGameEventHandler().onChunkEvent(
                        new ChunkEvent(
                                EventState.POST,
                                ChunkEvent.Type.POPULATE_FULL,
                                packetIn.getBlockPosition().getX() >> 4,
                                packetIn.getBlockPosition().getZ() >> 4
                        )
                );
            }
        }
    }

    @Inject(
            method = ""handleMultiBlockChange"",
            at = @At(""RETURN"")
    )
    private void postHandleMultiBlockChange(SPacketMultiBlockChange packetIn, CallbackInfo ci) {
        if (!Baritone.settings().repackOnAnyBlockChange.value) {
            return;
        }
        if (packetIn.getChangedBlocks().length == 0) {
            return;
        }
        https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.15
        {
            for (SPacketMultiBlockChange.BlockUpdateData update : packetIn.getChangedBlocks()) {
                if (CachedChunk.BLOCKS_TO_KEEP_TRACK_OF.contains(update.getBlockState().getBlock())) {
                    break https;
                }
            }
            return;
        }
        ChunkPos pos = new ChunkPos(packetIn.getChangedBlocks()[0].getPos());
        for (IBaritone ibaritone : BaritoneAPI.getProvider().getAllBaritones()) {
            EntityPlayerSP player = ibaritone.getPlayerContext().player();
            if (player != null && player.connection == (NetHandlerPlayClient) (Object) this) {
                ibaritone.getGameEventHandler().onChunkEvent(
                        new ChunkEvent(
                                EventState.POST,
                                ChunkEvent.Type.POPULATE_FULL,
                                pos.x,
                                pos.z
                        )
                );
            }
        }
    }

    @Inject(
            method = ""handleCombatEvent"",
            at = @At(
                    value = ""INVOKE"",
                    target = ""net/minecraft/client/Minecraft.displayGuiScreen(Lnet/minecraft/client/gui/GuiScreen;)V""
            )
    )
    private void onPlayerDeath(SPacketCombatEvent packetIn, CallbackInfo ci) {
        for (IBaritone ibaritone : BaritoneAPI.getProvider().getAllBaritones()) {
            EntityPlayerSP player = ibaritone.getPlayerContext().player();
            if (player != null && player.connection == (NetHandlerPlayClient) (Object) this) {
                ibaritone.getGameEventHandler().onPlayerDeath();
            }
        }
    }
}",0,64 2000 40 2001 46 587 41 777 587 2002 123 64 2003 40 2004 61 362 44 2005 61 64 2006 40 2007 61 362 44 2008 61 362 41 41 773 865 2009 40 2010 2011 44 2012 2013 41 123 664 40 2014 2015 58 2016 46 2017 40 41 46 2018 40 41 41 123 2019 2020 61 2015 46 2021 40 41 46 2020 40 41 59 688 40 2020 340 2022 307 2020 46 2023 323 40 2001 41 40 2024 41 823 41 123 2015 46 2025 40 41 46 2026 40 744 2027 40 2028 46 2029 44 2011 46 2030 40 41 63 2027 46 2031 46 2032 58 2027 46 2031 46 2033 44 2011 46 2034 40 41 44 2011 46 2035 40 41 41 41 59 125 125 125 64 2003 40 2004 61 362 44 2005 61 64 2006 40 362 41 41 773 865 2036 40 2010 2011 44 2012 2013 41 123 664 40 2037 2038 58 2039 46 2040 40 41 46 2041 40 41 41 123 2042 2043 61 2038 46 2044 40 41 46 2043 40 41 59 688 40 2043 340 2045 307 2043 46 2046 323 40 2001 41 40 2047 41 823 41 123 2038 46 2048 40 41 46 2049 40 744 2050 40 2051 46 2052 44 2011 46 2053 40 41 63 2050 46 2054 46 2055 58 2050 46 2054 46 2056 44 2011 46 2057 40 41 44 2011 46 2058 40 41 41 41 59 125 125 125 64 2003 40 2004 61 362 44 2005 61 64 2006 40 362 41 41 773 865 2059 40 2060 2011 44 2012 2013 41 123 688 40 33 2061 46 2062 40 41 46 2063 46 2007 41 123 792 59 125 688 40 33 2064 46 2065 46 2066 40 2011 46 2067 40 41 46 2068 40 41 41 41 123 792 59 125 664 40 2069 2070 58 2071 46 2072 40 41 46 2073 40 41 41 123 2074 2075 61 2070 46 2076 40 41 46 2075 40 41 59 688 40 2075 340 2077 307 2075 46 2078 323 40 2001 41 40 2079 41 823 41 123 2070 46 2080 40 41 46 2081 40 744 2082 40 2083 46 2084 44 2082 46 2085 46 2086 44 2011 46 2087 40 41 46 2088 40 41 356 1502 44 2011 46 2087 40 41 46 2089 40 41 356 1502 41 41 59 125 125 125 64 2003 40 2004 61 362 44 2005 61 64 2006 40 362 41 41 773 865 2090 40 2091 2011 44 2012 2013 41 123 688 40 33 2092 46 2093 40 41 46 2094 46 2007 41 123 792 59 125 688 40 2011 46 2095 40 41 46 2096 323 1500 41 123 792 59 125 2097 58 330 123 664 40 2091 46 2098 2099 58 2011 46 2095 40 41 41 123 688 40 2100 46 2101 46 2102 40 2099 46 2103 40 41 46 2104 40 41 41 41 123 572 2097 59 125 125 792 59 125 2105 2106 61 744 2105 40 2011 46 2095 40 41 91 1500 93 46 2107 40 41 41 59 664 40 2108 2109 58 2110 46 2111 40 41 46 2112 40 41 41 123 2113 2114 61 2109 46 2115 40 41 46 2114 40 41 59 688 40 2114 340 2116 307 2114 46 2117 323 40 2001 41 40 2118 41 823 41 123 2109 46 2119 40 41 46 2120 40 744 2121 40 2122 46 2123 44 2121 46 2124 46 2125 44 2106 46 2126 44 2106 46 2127 41 41 59 125 125 125 64 2003 40 2004 61 362 44 2005 61 64 2006 40 2007 61 362 44 2008 61 362 41 41 773 865 2128 40 2129 2011 44 2012 2013 41 123 664 40 2130 2131 58 2132 46 2133 40 41 46 2134 40 41 41 123 2135 2136 61 2131 46 2137 40 41 46 2136 40 41 59 688 40 2136 340 2138 307 2136 46 2139 323 40 2001 41 40 2140 41 823 41 123 2131 46 2141 40 41 46 2128 40 41 59 125 125 125 125 ,"{'AvgLine': 23, 'CountLine': 128, 'CountStmt': 45, 'MaxNesting': 2, 'AvgLineCode': 23, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 33, 'MaxEssential': 5, 'SumEssential': 11, 'AvgCyclomatic': 4, 'CountLineCode': 119, 'CountStmtDecl': 18, 'MaxCyclomatic': 7, 'SumCyclomatic': 23, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountSemicolon': 17, 'CountDeclMethod': 5, 'CountLineCodeExe': 62, 'CountLineComment': 5, 'CountClassCoupled': 23, 'CountClassDerived': 0, 'CountLineCodeDecl': 39, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 28, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 4, 'CountDeclMethodPublic': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 23, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 23, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2817,Java,"public abstract class Reporter extends Configurable {

    protected Reporter() {
        setName(this.getClass().getSimpleName());
    }

    /**
     * Report our findings.
     *
     * @param value the value to report
     */
    public abstract void report(long value);

    /**
     * Report our findings
     *
     * @param value the value to report
     * @param prefix a common prefix to be included in the tag name
     */
    public abstract void report(long value, String prefix);

    /**
     * Report our findings.
     *
     * @param values Map<metric name, metric value>
     */
    public abstract void report(Map<String, String> values);

    /**
     * Report our findings.
     *
     * @param values Map<metric name, metric value>
     * @param prefix for example ""torStartupTime""
     */
    public abstract void report(Map<String, String> values, String prefix);

    /**
     * Report our findings one by one.
     *
     * @param key the metric name
     * @param value the value to report
     * @param timestamp a unix timestamp in milliseconds
     * @param prefix for example ""torStartupTime""
     */
    public abstract void report(String key, String value, String timestamp, String prefix);

}",0,777 539 587 2000 650 2001 123 775 2000 40 41 123 2002 40 823 46 2003 40 41 46 2004 40 41 41 59 125 306 777 539 865 2005 40 726 2006 41 59 306 777 539 865 2005 40 726 2006 44 2007 2008 41 59 306 777 539 865 2005 40 2009 60 2007 44 2007 62 2010 41 59 306 777 539 865 2005 40 2009 60 2007 44 2007 62 2010 44 2007 2008 41 59 306 777 539 865 2005 40 2007 2011 44 2007 2006 44 2007 2012 44 2007 2008 41 59 125 ,"{'AvgLine': 3, 'CountLine': 53, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountSemicolon': 6, 'CountDeclMethod': 6, 'CountLineCodeExe': 1, 'CountLineComment': 36, 'CountClassCoupled': 2, 'CountClassDerived': 6, 'CountLineCodeDecl': 7, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '3.60', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2770,Java,"@Value
public final class Attachment implements NetworkPayload {
    private final String fileName;
    private final byte[] bytes;

    public Attachment(String fileName, byte[] bytes) {
        this.fileName = fileName;
        this.bytes = bytes;
    }

    @Override
    public protobuf.Attachment toProtoMessage() {
        return protobuf.Attachment.newBuilder()
                .setFileName(fileName)
                .setBytes(ByteString.copyFrom(bytes))
                .build();
    }

    public static Attachment fromProto(protobuf.Attachment proto) {
        return new Attachment(proto.getFileName(), proto.getBytes().toByteArray());
    }
}",0,64 2000 777 657 587 2001 693 2002 123 773 657 2003 2004 59 773 657 574 91 93 2005 59 777 2001 40 2003 2004 44 574 91 93 2005 41 123 823 46 2004 61 2004 59 823 46 2005 61 2005 59 125 64 2006 777 2007 46 2001 2008 40 41 123 792 2007 46 2001 46 2009 40 41 46 2010 40 2004 41 46 2011 40 2012 46 2013 40 2005 41 41 46 2014 40 41 59 125 777 809 2001 2015 40 2007 46 2001 2016 41 123 792 744 2001 40 2016 46 2017 40 41 44 2016 46 2018 40 41 46 2019 40 41 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 22, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 3, 'CountSemicolon': 6, 'CountDeclMethod': 3, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 0}"
2928,Java,"@EqualsAndHashCode(callSuper = true)
@Getter
public abstract class SupportMessage extends NetworkEnvelope implements MailboxMessage, UidMessage {
    protected final String uid;

    // Added with v1.1.6. Old clients will not have set that field and we fall back to entry 0 which is ARBITRATION.
    protected final SupportType supportType;

    public SupportMessage(int messageVersion, String uid, SupportType supportType) {
        super(messageVersion);
        this.uid = uid;
        this.supportType = supportType;
    }

    public abstract String getTradeId();

    @Override
    public String toString() {
        return ""DisputeMessage{"" +
                ""\n     uid='"" + uid + '\'' +
                "",\n     messageVersion="" + messageVersion +
                "",\n     supportType="" + supportType +
                ""\n} "" + super.toString();
    }
}",0,64 2000 40 2001 61 2002 41 64 2003 777 539 587 2004 650 2005 693 2006 44 2007 123 775 657 2008 2009 59 330 775 657 2010 2011 59 777 2004 40 704 2012 44 2008 2009 44 2010 2011 41 123 818 40 2012 41 59 823 46 2009 61 2009 59 823 46 2011 61 2011 59 125 777 539 2008 2013 40 41 59 64 2014 777 2008 2015 40 41 123 792 362 43 362 43 2009 43 314 43 362 43 2012 43 362 43 2011 43 362 43 818 46 2015 40 41 59 125 125 ,"{'AvgLine': 6, 'CountLine': 25, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 20, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 4, 'CountSemicolon': 7, 'CountDeclMethod': 3, 'CountLineCodeExe': 8, 'CountLineComment': 1, 'CountClassCoupled': 5, 'CountClassDerived': 2, 'CountLineCodeDecl': 9, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.05', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 0}"
2956,Java,"                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    setText(item.getRoleString());
                                } else {
                                    setText("""");
                                }
                            }
                        };",0,792 744 2000 60 62 40 41 123 64 2001 777 865 2002 40 657 2003 2004 44 570 2005 41 123 818 46 2002 40 2004 44 2005 41 59 688 40 2004 340 2006 307 33 2005 41 123 2007 40 2004 46 2008 40 41 41 59 125 630 123 2009 40 362 41 59 125 125 125 59 ,"{'AvgLine': 9, 'CountLine': 10, 'CountStmt': 5, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 2, 'CountLineCode': 10, 'CountStmtDecl': 1, 'MaxCyclomatic': 2, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 3, 'CountDeclMethod': 1, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2862,Java,"@EqualsAndHashCode
@Immutable
@Getter
public final class RawTransactionInput implements NetworkPayload, PersistablePayload {
    public final long index;                // Index of spending txo
    public final byte[] parentTransaction;  // Spending tx (fromTx)
    public final long value;

    // Added at Bsq swap release
    // id of the org.bitcoinj.script.Script.ScriptType. Useful to know if input is segwit.
    // Lowest Script.ScriptType.id value is 1, so we use 0 as value for not defined
    public final int scriptTypeId;

    public RawTransactionInput(TransactionInput input) {
        this(input.getOutpoint().getIndex(),
                Objects.requireNonNull(Objects.requireNonNull(input.getConnectedOutput()).getParentTransaction()),
                Objects.requireNonNull(input.getValue()).value,
                input.getConnectedOutput() != null &&
                        input.getConnectedOutput().getScriptPubKey() != null &&
                        input.getConnectedOutput().getScriptPubKey().getScriptType() != null ?
                        input.getConnectedOutput().getScriptPubKey().getScriptType().id : 0);
    }

    // Does not set the scriptTypeId. Use RawTransactionInput(TransactionInput input) for any new code.
    @Deprecated
    public RawTransactionInput(long index, byte[] parentTransaction, long value) {
        this(index, parentTransaction, value, 0);
    }

    private RawTransactionInput(long index, Transaction parentTransaction, long value, int scriptTypeId) {
        this(index,
                parentTransaction.bitcoinSerialize(scriptTypeId == Script.ScriptType.P2WPKH.id ||
                        scriptTypeId == Script.ScriptType.P2WSH.id),
                value, scriptTypeId);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Holds the relevant data for the connected output for a tx input.
     * @param index  the index of the parentTransaction
     * @param parentTransaction  the spending output tx, not the parent tx of the input
     * @param value  the number of satoshis being spent
     * @param scriptTypeId The id of the org.bitcoinj.script.Script.ScriptType of the spending output
     *                     If not set it is 0.
     */
    private RawTransactionInput(long index,
                                byte[] parentTransaction,
                                long value,
                                int scriptTypeId) {
        this.index = index;
        this.parentTransaction = parentTransaction;
        this.value = value;
        this.scriptTypeId = scriptTypeId;
    }

    @Override
    public protobuf.RawTransactionInput toProtoMessage() {
        return protobuf.RawTransactionInput.newBuilder()
                .setIndex(index)
                .setParentTransaction(ByteString.copyFrom(parentTransaction))
                .setValue(value)
                .setScriptTypeId(scriptTypeId)
                .build();
    }

    public static RawTransactionInput fromProto(protobuf.RawTransactionInput proto) {
        return new RawTransactionInput(proto.getIndex(),
                proto.getParentTransaction().toByteArray(),
                proto.getValue(),
                proto.getScriptTypeId());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public boolean isSegwit() {
        return isP2WPKH() || isP2WSH();
    }

    public boolean isP2WPKH() {
        return scriptTypeId == Script.ScriptType.P2WPKH.id;
    }

    public boolean isP2WSH() {
        return scriptTypeId == Script.ScriptType.P2WSH.id;
    }

    public String getParentTxId(WalletService walletService) {
        return walletService.getTxFromSerializedTx(parentTransaction).getTxId().toString();
    }

    public void validate(WalletService walletService) {
        Transaction tx = walletService.getTxFromSerializedTx(checkNotNull(parentTransaction));
        checkArgument(index == (int) index, ""Input index out of range."");
        checkElementIndex((int) index, tx.getOutputs().size(), ""Input index"");
        long outputValue = tx.getOutput(index).getValue().value;
        checkArgument(value == outputValue,
                ""Input value (%s) mismatches connected tx output value (%s)."", value, outputValue);
        var scriptPubKey = tx.getOutput(index).getScriptPubKey();
        var scriptType = scriptPubKey != null ? scriptPubKey.getScriptType() : null;
        checkArgument(scriptTypeId <= 0 || scriptType != null && scriptType.id == scriptTypeId,
                ""Input scriptTypeId (%s) mismatches connected tx output scriptTypeId (%s.id = %s)."",
                scriptTypeId, scriptType, scriptType != null ? scriptType.id : 0);
    }

    @Override
    public String toString() {
        return ""RawTransactionInput{"" +
                ""index="" + index +
                "", parentTransaction as HEX "" + Utilities.bytesAsHexString(parentTransaction) +
                "", value="" + value +
                "", scriptTypeId="" + scriptTypeId +
                '}';
    }
}",0,64 2000 64 2001 64 2002 777 657 587 2003 693 2004 44 2005 123 777 657 726 2006 59 330 777 657 574 91 93 2007 59 330 777 657 726 2008 59 330 330 330 777 657 704 2009 59 777 2003 40 2010 2011 41 123 823 40 2011 46 2012 40 41 46 2013 40 41 44 2014 46 2015 40 2014 46 2015 40 2011 46 2016 40 41 41 46 2017 40 41 41 44 2014 46 2015 40 2011 46 2018 40 41 41 46 2008 44 2011 46 2016 40 41 340 2019 307 2011 46 2016 40 41 46 2020 40 41 340 2019 307 2011 46 2016 40 41 46 2020 40 41 46 2021 40 41 340 2019 63 2011 46 2016 40 41 46 2020 40 41 46 2021 40 41 46 2022 58 1500 41 59 125 330 64 2023 777 2003 40 726 2006 44 574 91 93 2007 44 726 2008 41 123 823 40 2006 44 2007 44 2008 44 1500 41 59 125 773 2003 40 726 2006 44 2024 2007 44 726 2008 44 704 2009 41 123 823 40 2006 44 2007 46 2025 40 2009 323 2026 46 2027 46 2028 46 2029 309 2009 323 2026 46 2027 46 2030 46 2029 41 44 2008 44 2009 41 59 125 331 330 331 306 773 2003 40 726 2006 44 574 91 93 2007 44 726 2008 44 704 2009 41 123 823 46 2006 61 2006 59 823 46 2007 61 2007 59 823 46 2008 61 2008 59 823 46 2009 61 2009 59 125 64 2031 777 2032 46 2003 2033 40 41 123 792 2032 46 2003 46 2034 40 41 46 2035 40 2006 41 46 2036 40 2037 46 2038 40 2007 41 41 46 2039 40 2008 41 46 2040 40 2009 41 46 2041 40 41 59 125 777 809 2003 2042 40 2032 46 2003 2043 41 123 792 744 2003 40 2043 46 2044 40 41 44 2043 46 2045 40 41 46 2046 40 41 44 2043 46 2047 40 41 44 2043 46 2048 40 41 41 59 125 331 330 331 777 570 2049 40 41 123 792 2050 40 41 309 2051 40 41 59 125 777 570 2052 40 41 123 792 2009 323 2053 46 2054 46 2055 46 2056 59 125 777 570 2057 40 41 123 792 2009 323 2058 46 2059 46 2060 46 2061 59 125 777 2062 2063 40 2064 2065 41 123 792 2065 46 2066 40 2007 41 46 2067 40 41 46 2068 40 41 59 125 777 865 2069 40 2064 2065 41 123 2024 2070 61 2065 46 2071 40 2072 40 2007 41 41 59 2073 40 2006 323 40 704 41 2006 44 362 41 59 2074 40 40 704 41 2006 44 2070 46 2075 40 41 46 2076 40 41 44 362 41 59 726 2077 61 2070 46 2078 40 2006 41 46 2079 40 41 46 2008 59 2073 40 2008 323 2077 44 362 44 2008 44 2077 41 59 2080 2081 61 2070 46 2078 40 2006 41 46 2082 40 41 59 2080 2083 61 2081 340 2084 63 2081 46 2085 40 41 58 2084 59 2073 40 2009 329 1500 309 2083 340 2084 307 2083 46 2086 323 2009 44 362 44 2009 44 2083 44 2083 340 2084 63 2083 46 2086 58 1500 41 59 125 64 2031 777 2062 2087 40 41 123 792 362 43 362 43 2006 43 362 43 2088 46 2089 40 2007 41 43 362 43 2008 43 362 43 2009 43 314 59 125 125 ,"{'AvgLine': 7, 'CountLine': 121, 'CountStmt': 39, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 86, 'CountStmtDecl': 21, 'MaxCyclomatic': 3, 'SumCyclomatic': 15, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 17, 'CountSemicolon': 26, 'CountDeclMethod': 12, 'CountLineCodeExe': 47, 'CountLineComment': 20, 'CountClassCoupled': 12, 'CountClassDerived': 0, 'CountLineCodeDecl': 30, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.23', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 10, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 12, 'CountDeclInstanceVariable': 4, 'PercentLackOfCohesionModified': 50}"
2874,Java,"public class PopOverWrapper {

    private PopOver popover;
    private Supplier<PopOver> popoverSupplier;
    private boolean hidePopover;
    private PopOverState state = PopOverState.HIDDEN;

    enum PopOverState {
        HIDDEN, SHOWING, SHOWN, HIDING
    }

    public void showPopOver(Supplier<PopOver> popoverSupplier) {
        this.popoverSupplier = popoverSupplier;
        hidePopover = false;

        if (state == PopOverState.HIDDEN) {
            state = PopOverState.SHOWING;
            popover = popoverSupplier.get();

            UserThread.runAfter(() -> {
                state = PopOverState.SHOWN;
                if (hidePopover) {
                    // For some reason, this can result in a brief flicker when invoked
                    // from a 'runAfter' callback, rather than directly. So make the delay
                    // very short (25ms) so that we don't reach here often:
                    hidePopOver();
                }
            }, 25, TimeUnit.MILLISECONDS);
        }
    }

    public void hidePopOver() {
        hidePopover = true;

        if (state == PopOverState.SHOWN) {
            state = PopOverState.HIDING;
            popover.hide();

            UserThread.runAfter(() -> {
                state = PopOverState.HIDDEN;
                if (!hidePopover) {
                    showPopOver(popoverSupplier);
                }
            }, 250, TimeUnit.MILLISECONDS);
        }
    }
}",0,777 587 2000 123 773 2001 2002 59 773 2003 60 2001 62 2004 59 773 570 2005 59 773 2006 2007 61 2006 46 2008 59 640 2006 123 2008 44 2009 44 2010 44 2011 125 777 865 2012 40 2003 60 2001 62 2004 41 123 823 46 2004 61 2004 59 2005 61 2013 59 688 40 2007 323 2006 46 2008 41 123 2007 61 2006 46 2014 59 2002 61 2004 46 2015 40 41 59 2016 46 2017 40 40 41 45 62 123 2007 61 2006 46 2018 59 688 40 2005 41 123 330 330 330 2019 40 41 59 125 125 44 1503 44 2020 46 2021 41 59 125 125 777 865 2022 40 41 123 2005 61 2023 59 688 40 2007 323 2006 46 2024 41 123 2007 61 2006 46 2025 59 2002 46 2026 40 41 59 2027 46 2028 40 40 41 45 62 123 2007 61 2006 46 2008 59 688 40 33 2005 41 123 2012 40 2004 41 59 125 125 44 1504 44 2029 46 2030 41 59 125 125 125 ,"{'AvgLine': 17, 'CountLine': 47, 'CountStmt': 25, 'MaxNesting': 2, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 36, 'CountStmtDecl': 8, 'MaxCyclomatic': 2, 'SumCyclomatic': 8, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountSemicolon': 17, 'CountDeclMethod': 2, 'CountLineCodeExe': 20, 'CountLineComment': 3, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.08', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 12, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 4, 'PercentLackOfCohesionModified': 12}"
2883,Java,"@Slf4j
@Getter
@EqualsAndHashCode
public abstract class StateBlockListItem<StH extends StateHash, StB extends StateBlock<StH>> {
    protected final StateBlock<StH> stateBlock;
    private final Supplier<String> height;
    private final String hash;
    private final String numNetworkMessages;
    private final String numMisMatches;
    private final boolean isInSync;

    public String getHeight() {
        return height.get();
    }

    protected StateBlockListItem(StB stateBlock, int cycleIndex) {
        this(stateBlock, () -> cycleIndex);
    }

    protected StateBlockListItem(StB stateBlock, IntSupplier cycleIndexSupplier) {
        this.stateBlock = stateBlock;
        height = Suppliers.memoize(() ->
                Res.get(""dao.monitor.table.cycleBlockHeight"", cycleIndexSupplier.getAsInt() + 1,
                        String.valueOf(stateBlock.getHeight())))::get;
        hash = Utilities.bytesAsHexString(stateBlock.getHash());
        numNetworkMessages = String.valueOf(stateBlock.getPeersMap().size());
        int size = stateBlock.getInConflictMap().size();
        numMisMatches = String.valueOf(size);
        isInSync = size == 0;
    }
}",0,64 2000 64 2001 64 2002 777 539 587 2003 60 2004 650 2005 44 2006 650 2007 60 2004 356 123 775 657 2007 60 2004 62 2008 59 773 657 2009 60 2010 62 2011 59 773 657 2010 2012 59 773 657 2010 2013 59 773 657 2010 2014 59 773 657 570 2015 59 777 2010 2016 40 41 123 792 2011 46 2017 40 41 59 125 775 2003 40 2006 2008 44 704 2018 41 123 823 40 2008 44 40 41 45 62 2018 41 59 125 775 2003 40 2006 2008 44 2019 2020 41 123 823 46 2008 61 2008 59 2011 61 2021 46 2022 40 40 41 45 62 2023 46 2024 40 362 44 2020 46 2025 40 41 43 1501 44 2010 46 2026 40 2008 46 2016 40 41 41 41 41 58 58 2024 59 2012 61 2027 46 2028 40 2008 46 2029 40 41 41 59 2013 61 2010 46 2026 40 2008 46 2030 40 41 46 2031 40 41 41 59 704 2031 61 2008 46 2032 40 41 46 2031 40 41 59 2014 61 2010 46 2026 40 2031 41 59 2015 61 2031 323 1500 59 125 125 ,"{'AvgLine': 5, 'CountLine': 31, 'CountStmt': 19, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 11, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 15, 'CountDeclMethod': 3, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'CountClassCoupled': 10, 'CountClassDerived': 4, 'CountLineCodeDecl': 14, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 61, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 10, 'CountDeclInstanceVariable': 6, 'PercentLackOfCohesionModified': 61}"
2831,Java,"public class AutoTooltipToggleButton extends ToggleButton {

    public AutoTooltipToggleButton() {
        super();
    }

    public AutoTooltipToggleButton(String text) {
        super(text);
    }

    public AutoTooltipToggleButton(String text, Node graphic) {
        super(text, graphic);
    }

    @Override
    protected Skin<?> createDefaultSkin() {
        return new AutoTooltipToggleButtonSkin(this);
    }

    private class AutoTooltipToggleButtonSkin extends ToggleButtonSkin {
        public AutoTooltipToggleButtonSkin(ToggleButton toggleButton) {
            super(toggleButton);
        }

        @Override
        protected void layoutChildren(double x, double y, double w, double h) {
            super.layoutChildren(x, y, w, h);
            showTooltipIfTruncated(this, getSkinnable());
        }
    }
}",0,777 587 2000 650 2001 123 777 2000 40 41 123 818 40 41 59 125 777 2000 40 2002 2003 41 123 818 40 2003 41 59 125 777 2000 40 2002 2003 44 2004 2005 41 123 818 40 2003 44 2005 41 59 125 64 2006 775 2007 60 63 62 2008 40 41 123 792 744 2009 40 823 41 59 125 773 587 2010 650 2011 123 777 2010 40 2001 2012 41 123 818 40 2012 41 59 125 64 2006 775 865 2013 40 625 2014 44 625 2015 44 625 2016 44 625 2017 41 123 818 46 2013 40 2014 44 2015 44 2016 44 2017 41 59 2018 40 823 44 2019 40 41 41 59 125 125 125 ,"{'AvgLine': 3, 'CountLine': 31, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 25, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountSemicolon': 7, 'CountDeclMethod': 4, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 2, 'CountLineCodeDecl': 10, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2797,Java,"@Slf4j
@Singleton
public final class Navigation implements PersistedDataHost {
    private static final ViewPath DEFAULT_VIEW_PATH = ViewPath.to(MainView.class, MarketView.class);

    public interface Listener {
        void onNavigationRequested(ViewPath path, @Nullable Object data);
    }

    // New listeners can be added during iteration so we use CopyOnWriteArrayList to
    // prevent invalid array modification
    private final CopyOnWriteArraySet<Listener> listeners = new CopyOnWriteArraySet<>();
    private final PersistenceManager<NavigationPath> persistenceManager;
    private ViewPath currentPath;
    // Used for returning to the last important view. After setup is done we want to
    // return to the last opened view (e.g. sell/buy)
    private ViewPath returnPath;
    // this string is updated just before saving to disk so it reflects the latest currentPath situation.
    private final NavigationPath navigationPath = new NavigationPath();

    // Persisted fields
    @Getter
    @Setter
    private ViewPath previousPath = DEFAULT_VIEW_PATH;


    @Inject
    public Navigation(PersistenceManager<NavigationPath> persistenceManager) {
        this.persistenceManager = persistenceManager;

        persistenceManager.initialize(navigationPath, PersistenceManager.Source.PRIVATE_LOW_PRIO);
    }

    @Override
    public void readPersisted(Runnable completeHandler) {
        persistenceManager.readPersisted(persisted -> {
                    List<Class<? extends View>> viewClasses = persisted.getPath().stream()
                            .map(className -> {
                                try {
                                    return (Class<? extends View>) Class.forName(className).asSubclass(View.class);
                                } catch (ClassNotFoundException e) {
                                    log.warn(""Could not find the viewPath class {}; exception: {}"", className, e);
                                }
                                return null;
                            })
                            .filter(Objects::nonNull)
                            .collect(Collectors.toList());

                    if (!viewClasses.isEmpty()) {
                        previousPath = new ViewPath(viewClasses);
                    }
                    completeHandler.run();
                },
                completeHandler);
    }

    @SafeVarargs
    public final void navigateTo(Class<? extends View>... viewClasses) {
        navigateTo(ViewPath.to(viewClasses), null);
    }

    @SafeVarargs
    public final void navigateToWithData(Object data, Class<? extends View>... viewClasses) {
        navigateTo(ViewPath.to(viewClasses), data);
    }

    public void navigateTo(ViewPath newPath, @Nullable Object data) {
        if (newPath == null)
            return;

        ArrayList<Class<? extends View>> temp = new ArrayList<>();
        for (int i = 0; i < newPath.size(); i++) {
            Class<? extends View> viewClass = newPath.get(i);
            temp.add(viewClass);
            if (currentPath == null ||
                    (currentPath.size() > i &&
                            viewClass != currentPath.get(i) &&
                            i != newPath.size() - 1)) {
                ArrayList<Class<? extends View>> temp2 = new ArrayList<>(temp);
                for (int n = i + 1; n < newPath.size(); n++) {
                    //noinspection unchecked
                    Class<? extends View>[] newTemp = new Class[i + 1];
                    currentPath = ViewPath.to(temp2.toArray(newTemp));
                    navigateTo(currentPath, data);
                    viewClass = newPath.get(n);
                    temp2.add(viewClass);
                }
            }
        }

        currentPath = newPath;
        previousPath = currentPath;
        listeners.forEach((e) -> e.onNavigationRequested(currentPath, data));
        requestPersistence();
    }

    private void requestPersistence() {
        if (currentPath.tip() != null) {
            navigationPath.setPath(currentPath.stream().map(Class::getName).collect(Collectors.toUnmodifiableList()));
        }
        persistenceManager.requestPersistence();
    }

    public void navigateToPreviousVisitedView() {
        if (previousPath == null || previousPath.size() == 0)
            previousPath = DEFAULT_VIEW_PATH;

        navigateTo(previousPath, null);
    }

    public void addListener(Listener listener) {
        listeners.add(listener);
    }

    public void removeListener(Listener listener) {
        listeners.remove(listener);
    }

    public ViewPath getReturnPath() {
        return returnPath;
    }

    public ViewPath getCurrentPath() {
        return currentPath;
    }

    public void setReturnPath(ViewPath returnPath) {
        this.returnPath = returnPath;
    }
}",0,64 2000 64 2001 777 657 587 2002 693 2003 123 773 809 657 2004 2005 61 2004 46 2006 40 2007 46 587 44 2008 46 587 41 59 777 709 2009 123 865 2010 40 2004 2011 44 64 2012 2013 2014 41 59 125 330 330 773 657 2015 60 2009 62 2016 61 744 2015 60 62 40 41 59 773 657 2017 60 2018 62 2019 59 773 2004 2020 59 330 330 773 2004 2021 59 330 773 657 2018 2022 61 744 2018 40 41 59 330 64 2023 64 2024 773 2004 2025 61 2005 59 64 2026 777 2002 40 2017 60 2018 62 2019 41 123 823 46 2019 61 2019 59 2019 46 2027 40 2022 44 2017 46 2028 46 2029 41 59 125 64 2030 777 865 2031 40 2032 2033 41 123 2019 46 2031 40 2034 45 62 123 2035 60 2036 60 63 650 2037 356 2038 61 2034 46 2039 40 41 46 2040 40 41 46 2041 40 2042 45 62 123 830 123 792 40 2036 60 63 650 2037 62 41 2036 46 2043 40 2042 41 46 2044 40 2037 46 587 41 59 125 580 40 2045 2046 41 123 2047 46 2048 40 362 44 2042 44 2046 41 59 125 792 2049 59 125 41 46 2050 40 2051 58 58 2052 41 46 2053 40 2054 46 2055 40 41 41 59 688 40 33 2038 46 2056 40 41 41 123 2025 61 744 2004 40 2038 41 59 125 2033 46 2057 40 41 59 125 44 2033 41 59 125 64 2058 777 657 865 2059 40 2060 60 63 650 2061 62 322 2062 41 123 2059 40 2004 46 2006 40 2062 41 44 2063 41 59 125 64 2058 777 657 865 2064 40 2065 2066 44 2060 60 63 650 2061 62 322 2062 41 123 2059 40 2004 46 2006 40 2062 41 44 2066 41 59 125 777 865 2059 40 2004 2067 44 64 2068 2065 2066 41 123 688 40 2067 323 2069 41 792 59 2070 60 2060 60 63 650 2061 356 2071 61 744 2070 60 62 40 41 59 664 40 704 2072 61 1500 59 2072 60 2067 46 2073 40 41 59 2072 349 41 123 2060 60 63 650 2061 62 2074 61 2067 46 2075 40 2072 41 59 2071 46 2076 40 2074 41 59 688 40 2020 323 2069 309 40 2020 46 2073 40 41 62 2072 307 2074 340 2020 46 2075 40 2072 41 307 2072 340 2067 46 2073 40 41 45 1501 41 41 123 2070 60 2060 60 63 650 2061 356 2077 61 744 2070 60 62 40 2071 41 59 664 40 704 2078 61 2072 43 1501 59 2078 60 2067 46 2073 40 41 59 2078 349 41 123 330 2060 60 63 650 2061 62 91 93 2079 61 744 2060 91 2072 43 1501 93 59 2020 61 2004 46 2006 40 2077 46 2080 40 2079 41 41 59 2059 40 2020 44 2066 41 59 2074 61 2067 46 2075 40 2078 41 59 2077 46 2076 40 2074 41 59 125 125 125 2020 61 2067 59 2025 61 2020 59 2016 46 2081 40 40 2082 41 45 62 2082 46 2083 40 2020 44 2066 41 41 59 2084 40 41 59 125 773 865 2085 40 41 123 688 40 2020 46 2086 40 41 340 2087 41 123 2022 46 2088 40 2020 46 2089 40 41 46 2090 40 2060 58 58 2091 41 46 2092 40 2093 46 2094 40 41 41 41 59 125 2019 46 2085 40 41 59 125 777 865 2095 40 41 123 688 40 2025 323 2096 309 2025 46 2097 40 41 323 1500 41 2025 61 2005 59 2059 40 2025 44 2096 41 59 125 777 865 2098 40 2009 2099 41 123 2016 46 2100 40 2099 41 59 125 777 865 2101 40 2009 2099 41 123 2016 46 2102 40 2099 41 59 125 777 2004 2103 40 41 123 792 2021 59 125 777 2004 2104 40 41 123 792 2020 59 125 777 865 2105 40 2004 2021 41 123 823 46 2021 61 2021 59 125 125 ,"{'AvgLine': 7, 'CountLine': 130, 'CountStmt': 68, 'MaxNesting': 3, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 46, 'MaxEssential': 1, 'SumEssential': 14, 'AvgCyclomatic': 1, 'CountLineCode': 102, 'CountStmtDecl': 29, 'MaxCyclomatic': 5, 'SumCyclomatic': 21, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 21, 'CountSemicolon': 46, 'CountDeclMethod': 12, 'CountLineCodeExe': 56, 'CountLineComment': 7, 'CountClassCoupled': 24, 'CountClassDerived': 0, 'CountLineCodeDecl': 36, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.07', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 25, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 11, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 79, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 24, 'CountDeclInstanceVariable': 6, 'PercentLackOfCohesionModified': 56}"
2846,Java,"public class LengthValidator extends InputValidator {
    private int minLength;
    private int maxLength;

    public LengthValidator() {
        this(0, Integer.MAX_VALUE);
    }

    public LengthValidator(int min, int max) {
        this.minLength = min;
        this.maxLength = max;
    }

    @Override
    public ValidationResult validate(String input) {
        ValidationResult result = new ValidationResult(true);
        int length = (input == null) ? 0 : input.length();

        if (this.minLength == this.maxLength) {
            if (length != this.minLength)
                result = new ValidationResult(false, Res.get(""validation.fixedLength"", this.minLength));
        } else
        if (length < this.minLength || length > this.maxLength)
            result = new ValidationResult(false, Res.get(""validation.length"", this.minLength, this.maxLength));

        return result;
    }

    public void setMinLength(int minLength) {
        this.minLength = minLength;
    }

    public void setMaxLength(int maxLength) {
        this.maxLength = maxLength;
    }
}",0,777 587 2000 650 2001 123 773 704 2002 59 773 704 2003 59 777 2000 40 41 123 823 40 1500 44 2004 46 2005 41 59 125 777 2000 40 704 2006 44 704 2007 41 123 823 46 2002 61 2006 59 823 46 2003 61 2007 59 125 64 2008 777 2009 2010 40 2011 2012 41 123 2009 2013 61 744 2009 40 2014 41 59 704 2015 61 40 2012 323 2016 41 63 1500 58 2012 46 2015 40 41 59 688 40 823 46 2002 323 823 46 2003 41 123 688 40 2015 340 823 46 2002 41 2013 61 744 2009 40 2017 44 2018 46 2019 40 362 44 823 46 2002 41 41 59 125 630 688 40 2015 60 823 46 2002 309 2015 62 823 46 2003 41 2013 61 744 2009 40 2020 44 2021 46 2022 40 362 44 823 46 2002 44 823 46 2003 41 41 59 792 2013 59 125 777 865 2023 40 704 2002 41 123 823 46 2002 61 2002 59 125 777 865 2024 40 704 2003 41 123 823 46 2003 61 2003 59 125 125 ,"{'AvgLine': 5, 'CountLine': 36, 'CountStmt': 21, 'MaxNesting': 2, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 29, 'CountStmtDecl': 10, 'MaxCyclomatic': 5, 'SumCyclomatic': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountSemicolon': 12, 'CountDeclMethod': 5, 'CountLineCodeExe': 14, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 1, 'CountLineCodeDecl': 11, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 40, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 19}"
2751,Java,"@Slf4j
@Value
public class VoteWithProposalTxIdList implements Proto, ConsensusCritical {
    private final List<VoteWithProposalTxId> list;

    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static VoteWithProposalTxIdList getVoteWithProposalTxIdListFromBytes(byte[] bytes) throws InvalidProtocolBufferException {
        return VoteWithProposalTxIdList.fromProto(protobuf.VoteWithProposalTxIdList.parseFrom(bytes));
    }

    @Override
    public protobuf.VoteWithProposalTxIdList toProtoMessage() {
        return getBuilder().build();
    }

    private protobuf.VoteWithProposalTxIdList.Builder getBuilder() {
        return protobuf.VoteWithProposalTxIdList.newBuilder()
                .addAllItem(getList().stream()
                        .map(VoteWithProposalTxId::toProtoMessage)
                        .collect(Collectors.toList()));
    }

    private static VoteWithProposalTxIdList fromProto(protobuf.VoteWithProposalTxIdList proto) {
        final ArrayList<VoteWithProposalTxId> list = proto.getItemList().stream()
                .map(VoteWithProposalTxId::fromProto).collect(Collectors.toCollection(ArrayList::new));
        return new VoteWithProposalTxIdList(list);
    }

    @Override
    public String toString() {
        return ""VoteWithProposalTxIdList: "" + getList().stream()
                .map(VoteWithProposalTxId::getProposalTxId)
                .collect(Collectors.toList());
    }
}",0,64 2000 64 2001 777 587 2002 693 2003 44 2004 123 773 657 2005 60 2006 62 2007 59 331 330 331 777 809 2002 2008 40 574 91 93 2009 41 826 2010 123 792 2002 46 2011 40 2012 46 2002 46 2013 40 2009 41 41 59 125 64 2014 777 2015 46 2002 2016 40 41 123 792 2017 40 41 46 2018 40 41 59 125 773 2015 46 2002 46 2019 2020 40 41 123 792 2015 46 2002 46 2021 40 41 46 2022 40 2023 40 41 46 2024 40 41 46 2025 40 2006 58 58 2016 41 46 2026 40 2027 46 2028 40 41 41 41 59 125 773 809 2002 2029 40 2015 46 2002 2030 41 123 657 2031 60 2006 62 2007 61 2030 46 2032 40 41 46 2033 40 41 46 2034 40 2006 58 58 2029 41 46 2035 40 2036 46 2037 40 2031 58 58 744 41 41 59 792 744 2002 40 2007 41 59 125 64 2014 777 2038 2039 40 41 123 792 362 43 2040 40 41 46 2041 40 41 46 2042 40 2006 58 58 2043 41 46 2044 40 2045 46 2046 40 41 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 43, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 29, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 6, 'CountSemicolon': 7, 'CountDeclMethod': 5, 'CountLineCodeExe': 12, 'CountLineComment': 8, 'CountClassCoupled': 11, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.28', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 11, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 100}"
2923,Java,"                    new SendMailboxMessageListener() {
                        @Override
                        public void onArrived() {
                            log.info(""{} arrived at peer {}. tradeId={}, uid={}"",
                                    message.getClass().getSimpleName(), peersNodeAddress, message.getTradeId(), message.getUid());
                            message.setArrived(true);
                            requestPersistence();
                        }

                        @Override
                        public void onStoredInMailbox() {
                            log.info(""{} stored in mailbox for peer {}. tradeId={}, uid={}"",
                                    message.getClass().getSimpleName(), peersNodeAddress, message.getTradeId(), message.getUid());
                            message.setStoredInMailbox(true);
                            requestPersistence();
                        }

                        @Override
                        public void onFault(String errorMessage) {
                            log.error(""{} failed: Peer {}. tradeId={}, uid={}, errorMessage={}"",
                                    message.getClass().getSimpleName(), peersNodeAddress, message.getTradeId(), message.getUid(), errorMessage);
                            message.setSendMessageError(errorMessage);
                            requestPersistence();
                        }
                    }",0,744 2000 40 41 123 64 2001 777 865 2002 40 41 123 2003 46 2004 40 362 44 2005 46 2006 40 41 46 2007 40 41 44 2008 44 2005 46 2009 40 41 44 2005 46 2010 40 41 41 59 2005 46 2011 40 2012 41 59 2013 40 41 59 125 64 2001 777 865 2014 40 41 123 2015 46 2016 40 362 44 2017 46 2018 40 41 46 2019 40 41 44 2020 44 2017 46 2021 40 41 44 2017 46 2022 40 41 41 59 2017 46 2023 40 2024 41 59 2025 40 41 59 125 64 2001 777 865 2026 40 2027 2028 41 123 2029 46 2030 40 362 44 2031 46 2032 40 41 46 2033 40 41 44 2034 44 2031 46 2035 40 41 44 2031 46 2036 40 41 44 2028 41 59 2031 46 2037 40 2028 41 59 2038 40 41 59 125 125 ,"{'AvgLine': 7, 'CountLine': 25, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 23, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 2, 'CountSemicolon': 9, 'CountDeclMethod': 3, 'CountLineCodeExe': 19, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2892,Java,"public class InsufficientFundsException extends Exception {
    public InsufficientFundsException(String message) {
        super(message);
    }
}",0,777 587 2000 650 2001 123 777 2000 40 2002 2003 41 123 818 40 2003 41 59 125 125 ,"{'AvgLine': 3, 'CountLine': 5, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 5, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 1, 'CountDeclMethod': 1, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 1, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2528,Java,"public class PathCalculationResult {

    private final IPath path;
    private final Type type;

    public PathCalculationResult(Type type) {
        this(type, null);
    }

    public PathCalculationResult(Type type, IPath path) {
        Objects.requireNonNull(type);
        this.path = path;
        this.type = type;
    }

    public final Optional<IPath> getPath() {
        return Optional.ofNullable(this.path);
    }

    public final Type getType() {
        return this.type;
    }

    public enum Type {
        SUCCESS_TO_GOAL,
        SUCCESS_SEGMENT,
        FAILURE,
        CANCELLATION,
        EXCEPTION,
    }
}",0,777 587 2000 123 773 657 2001 2002 59 773 657 2003 2004 59 777 2000 40 2003 2004 41 123 823 40 2004 44 2005 41 59 125 777 2000 40 2003 2004 44 2001 2002 41 123 2006 46 2007 40 2004 41 59 823 46 2002 61 2002 59 823 46 2004 61 2004 59 125 777 657 2008 60 2001 62 2009 40 41 123 792 2008 46 2010 40 823 46 2002 41 59 125 777 657 2003 2011 40 41 123 792 823 46 2004 59 125 777 640 2003 123 2012 44 2013 44 2014 44 2015 44 2016 44 125 125 ,"{'AvgLine': 3, 'CountLine': 31, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 25, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountSemicolon': 8, 'CountDeclMethod': 4, 'CountLineCodeExe': 6, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 25}"
2752,Java,"@Value
public class VoteWithProposalTxId implements PersistablePayload {
    private final String proposalTxId;
    @Nullable
    private final Vote vote;

    VoteWithProposalTxId(String proposalTxId, @Nullable Vote vote) {
        this.proposalTxId = proposalTxId;
        this.vote = vote;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    // Used for sending over the network
    @Override
    public protobuf.VoteWithProposalTxId toProtoMessage() {
        return getBuilder().build();
    }

    @NotNull
    private protobuf.VoteWithProposalTxId.Builder getBuilder() {
        final protobuf.VoteWithProposalTxId.Builder builder = protobuf.VoteWithProposalTxId.newBuilder()
                .setProposalTxId(proposalTxId);
        Optional.ofNullable(vote).ifPresent(e -> builder.setVote((protobuf.Vote) e.toProtoMessage()));
        return builder;
    }

    public static VoteWithProposalTxId fromProto(protobuf.VoteWithProposalTxId proto) {
        return new VoteWithProposalTxId(proto.getProposalTxId(),
                proto.hasVote() ? Vote.fromProto(proto.getVote()) : null);
    }
}",0,64 2000 777 587 2001 693 2002 123 773 657 2003 2004 59 64 2005 773 657 2006 2007 59 2001 40 2003 2004 44 64 2005 2006 2007 41 123 823 46 2004 61 2004 59 823 46 2007 61 2007 59 125 331 330 331 330 64 2008 777 2009 46 2001 2010 40 41 123 792 2011 40 41 46 2012 40 41 59 125 64 2013 773 2009 46 2001 46 2014 2015 40 41 123 657 2009 46 2001 46 2014 2016 61 2009 46 2001 46 2017 40 41 46 2018 40 2004 41 59 2019 46 2020 40 2007 41 46 2021 40 2022 45 62 2016 46 2023 40 40 2009 46 2006 41 2022 46 2010 40 41 41 41 59 792 2016 59 125 777 809 2001 2024 40 2009 46 2001 2025 41 123 792 744 2001 40 2025 46 2026 40 41 44 2025 46 2027 40 41 63 2006 46 2024 40 2025 46 2028 40 41 41 58 2029 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 35, 'CountStmt': 14, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 25, 'CountStmtDecl': 8, 'MaxCyclomatic': 2, 'SumCyclomatic': 6, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 6, 'CountSemicolon': 9, 'CountDeclMethod': 4, 'CountLineCodeExe': 9, 'CountLineComment': 4, 'CountClassCoupled': 10, 'CountClassDerived': 0, 'CountLineCodeDecl': 13, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.16', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 10, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 0}"
2990,Java,"public class DarkPay extends Coin {
    public DarkPay() {
        super(""DarkPay"", ""D4RK"", new Base58AddressValidator(new DarkPayMainNetParams()));
    }

    public static class DarkPayMainNetParams extends NetworkParametersAdapter {
        public DarkPayMainNetParams() {
            this.addressHeader = 31;
            this.p2shHeader = 60;
        }
    }
}",0,777 587 2000 650 2001 123 777 2000 40 41 123 818 40 362 44 362 44 744 2002 40 744 2003 40 41 41 41 59 125 777 809 587 2004 650 2005 123 777 2004 40 41 123 823 46 2006 61 1503 59 823 46 2007 61 1503 59 125 125 125 ,"{'AvgLine': 3, 'CountLine': 12, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 3, 'CountDeclMethod': 1, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2616,Java,"public final class BlockInteractEvent {

    /**
     * The position of the block interacted with
     */
    private final BlockPos pos;

    /**
     * The type of interaction that occurred
     */
    private final Type type;

    public BlockInteractEvent(BlockPos pos, Type type) {
        this.pos = pos;
        this.type = type;
    }

    /**
     * @return The position of the block interacted with
     */
    public final BlockPos getPos() {
        return this.pos;
    }

    /**
     * @return The type of interaction with the target block
     */
    public final Type getType() {
        return this.type;
    }

    public enum Type {

        /**
         * We're starting to break the target block.
         */
        START_BREAK,

        /**
         * We're right clicking on the target block. Either placing or interacting with.
         */
        USE
    }
}",0,777 657 587 2000 123 306 773 657 2001 2002 59 306 773 657 2003 2004 59 777 2000 40 2001 2002 44 2003 2004 41 123 823 46 2002 61 2002 59 823 46 2004 61 2004 59 125 306 777 657 2001 2005 40 41 123 792 823 46 2002 59 125 306 777 657 2003 2006 40 41 123 792 823 46 2004 59 125 777 640 2003 123 306 2007 44 306 2008 125 125 ,"{'AvgLine': 5, 'CountLine': 50, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 8, 'CountSemicolon': 6, 'CountDeclMethod': 3, 'CountLineCodeExe': 4, 'CountLineComment': 24, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '1.33', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 33}"
2844,Java,"@SuppressWarnings(""ResultOfMethodCallIgnored"")
@Disabled
@Slf4j
@TestMethodOrder(OrderAnnotation.class)
public class WalletProtectionTest extends MethodTest {

    @BeforeAll
    public static void setUp() {
        try {
            setUpScaffold(alicedaemon);
            MILLISECONDS.sleep(2000);
        } catch (Exception ex) {
            fail(ex);
        }
    }

    @Test
    @Order(1)
    public void testSetWalletPassword() {
        aliceClient.setWalletPassword(""first-password"");
    }

    @Test
    @Order(2)
    public void testGetBalanceOnEncryptedWalletShouldThrowException() {
        Throwable exception = assertThrows(StatusRuntimeException.class, () -> aliceClient.getBtcBalances());
        assertEquals(""UNKNOWN: wallet is locked"", exception.getMessage());
    }

    @Test
    @Order(3)
    public void testUnlockWalletFor4Seconds() {
        aliceClient.unlockWallet(""first-password"", 4);
        aliceClient.getBtcBalances(); // should not throw 'wallet locked' exception
        sleep(4500); // let unlock timeout expire
        Throwable exception = assertThrows(StatusRuntimeException.class, () -> aliceClient.getBtcBalances());
        assertEquals(""UNKNOWN: wallet is locked"", exception.getMessage());
    }

    @Test
    @Order(4)
    public void testGetBalanceAfterUnlockTimeExpiryShouldThrowException() {
        aliceClient.unlockWallet(""first-password"", 3);
        sleep(4000); // let unlock timeout expire
        Throwable exception = assertThrows(StatusRuntimeException.class, () -> aliceClient.getBtcBalances());
        assertEquals(""UNKNOWN: wallet is locked"", exception.getMessage());
    }

    @Test
    @Order(5)
    public void testLockWalletBeforeUnlockTimeoutExpiry() {
        aliceClient.unlockWallet(""first-password"", 60);
        aliceClient.lockWallet();
        Throwable exception = assertThrows(StatusRuntimeException.class, () -> aliceClient.getBtcBalances());
        assertEquals(""UNKNOWN: wallet is locked"", exception.getMessage());
    }

    @Test
    @Order(6)
    public void testLockWalletWhenWalletAlreadyLockedShouldThrowException() {
        Throwable exception = assertThrows(StatusRuntimeException.class, () -> aliceClient.lockWallet());
        assertEquals(""UNKNOWN: wallet is already locked"", exception.getMessage());
    }

    @Test
    @Order(7)
    public void testUnlockWalletTimeoutOverride() {
        aliceClient.unlockWallet(""first-password"", 2);
        sleep(500); // override unlock timeout after 0.5s
        aliceClient.unlockWallet(""first-password"", 6);
        sleep(5000);
        aliceClient.getBtcBalances(); // getbalance 5s after overriding timeout to 6s
    }

    @Test
    @Order(8)
    public void testSetNewWalletPassword() {
        aliceClient.setWalletPassword(""first-password"", ""second-password"");
        sleep(2500); // allow time for wallet save
        aliceClient.unlockWallet(""second-password"", 2);
        aliceClient.getBtcBalances();
    }

    @Test
    @Order(9)
    public void testSetNewWalletPasswordWithIncorrectNewPasswordShouldThrowException() {
        Throwable exception = assertThrows(StatusRuntimeException.class, () ->
                aliceClient.setWalletPassword(""bad old password"", ""irrelevant""));
        assertEquals(""UNKNOWN: incorrect old password"", exception.getMessage());
    }

    @Test
    @Order(10)
    public void testRemoveNewWalletPassword() {
        aliceClient.removeWalletPassword(""second-password"");
        aliceClient.getBtcBalances();  // should not throw 'wallet locked' exception
    }

    @AfterAll
    public static void tearDown() {
        tearDownScaffold();
    }
}",0,64 2000 40 362 41 64 2001 64 2002 64 2003 40 2004 46 587 41 777 587 2005 650 2006 123 64 2007 777 809 865 2008 40 41 123 830 123 2009 40 2010 41 59 2011 46 2012 40 1505 41 59 125 580 40 2013 2014 41 123 2015 40 2014 41 59 125 125 64 2016 64 2017 40 1501 41 777 865 2018 40 41 123 2019 46 2020 40 362 41 59 125 64 2016 64 2017 40 1502 41 777 865 2021 40 41 123 2022 2023 61 2024 40 2025 46 587 44 40 41 45 62 2026 46 2027 40 41 41 59 2028 40 362 44 2023 46 2029 40 41 41 59 125 64 2016 64 2017 40 1502 41 777 865 2030 40 41 123 2031 46 2032 40 362 44 1502 41 59 2031 46 2033 40 41 59 330 2034 40 1505 41 59 330 2035 2036 61 2037 40 2038 46 587 44 40 41 45 62 2031 46 2033 40 41 41 59 2039 40 362 44 2036 46 2040 40 41 41 59 125 64 2016 64 2017 40 1502 41 777 865 2041 40 41 123 2042 46 2043 40 362 44 1502 41 59 2044 40 1505 41 59 330 2045 2046 61 2047 40 2048 46 587 44 40 41 45 62 2042 46 2049 40 41 41 59 2050 40 362 44 2046 46 2051 40 41 41 59 125 64 2016 64 2017 40 1502 41 777 865 2052 40 41 123 2053 46 2054 40 362 44 1503 41 59 2053 46 2055 40 41 59 2056 2057 61 2058 40 2059 46 587 44 40 41 45 62 2053 46 2060 40 41 41 59 2061 40 362 44 2057 46 2062 40 41 41 59 125 64 2016 64 2017 40 1502 41 777 865 2063 40 41 123 2064 2065 61 2066 40 2067 46 587 44 40 41 45 62 2068 46 2069 40 41 41 59 2070 40 362 44 2065 46 2071 40 41 41 59 125 64 2016 64 2017 40 1502 41 777 865 2072 40 41 123 2073 46 2074 40 362 44 1502 41 59 2075 40 1504 41 59 330 2073 46 2074 40 362 44 1502 41 59 2075 40 1505 41 59 2073 46 2076 40 41 59 330 125 64 2016 64 2017 40 1502 41 777 865 2077 40 41 123 2078 46 2079 40 362 44 362 41 59 2080 40 1505 41 59 330 2078 46 2081 40 362 44 1502 41 59 2078 46 2082 40 41 59 125 64 2016 64 2017 40 1502 41 777 865 2083 40 41 123 2084 2085 61 2086 40 2087 46 587 44 40 41 45 62 2088 46 2089 40 362 44 362 41 41 59 2090 40 362 44 2085 46 2091 40 41 41 59 125 64 2016 64 2017 40 1502 41 777 865 2092 40 41 123 2093 46 2094 40 362 41 59 2093 46 2095 40 41 59 330 125 64 2096 777 809 865 2097 40 41 123 2098 40 41 59 125 125 ,"{'AvgLine': 7, 'CountLine': 103, 'CountStmt': 49, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 36, 'MaxEssential': 1, 'SumEssential': 18, 'AvgCyclomatic': 1, 'CountLineCode': 91, 'CountStmtDecl': 19, 'MaxCyclomatic': 2, 'SumCyclomatic': 19, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountSemicolon': 35, 'CountDeclMethod': 12, 'CountLineCodeExe': 38, 'CountLineComment': 7, 'CountClassCoupled': 13, 'CountClassDerived': 0, 'CountLineCodeDecl': 46, 'CountDeclMethodAll': 32, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.08', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 12, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 13, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2886,Java,"@EqualsAndHashCode(callSuper = true)
@Getter
@Slf4j
public final class OfferPayload extends OfferPayloadBase {
    // Keys for extra map
    // Only set for fiat offers
    public static final String ACCOUNT_AGE_WITNESS_HASH = ""accountAgeWitnessHash"";
    public static final String REFERRAL_ID = ""referralId"";
    // Only used in payment method F2F
    public static final String F2F_CITY = ""f2fCity"";
    public static final String F2F_EXTRA_INFO = ""f2fExtraInfo"";
    public static final String CASH_BY_MAIL_EXTRA_INFO = ""cashByMailExtraInfo"";

    // Comma separated list of ordinal of a bisq.common.app.Capability. E.g. ordinal of
    // Capability.SIGNED_ACCOUNT_AGE_WITNESS is 11 and Capability.MEDIATION is 12 so if we want to signal that maker
    // of the offer supports both capabilities we add ""11, 12"" to capabilities.
    public static final String CAPABILITIES = ""capabilities"";
    // If maker is seller and has xmrAutoConf enabled it is set to ""1"" otherwise it is not set
    public static final String XMR_AUTO_CONF = ""xmrAutoConf"";
    public static final String XMR_AUTO_CONF_ENABLED_VALUE = ""1"";


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Instance fields
    ///////////////////////////////////////////////////////////////////////////////////////////

    // Distance form market price if percentage based price is used (usePercentageBasedPrice = true), otherwise 0.
    // E.g. 0.1 -> 10%. Can be negative as well. Depending on direction the marketPriceMargin is above or below the market price.
    // Positive values is always the usual case where you want a better price as the market.
    // E.g. Buy offer with market price 400.- leads to a 360.- price.
    // Sell offer with market price 400.- leads to a 440.- price.
    private final double marketPriceMargin;
    // We use 2 type of prices: fixed price or price based on distance from market price
    private final boolean useMarketBasedPrice;

    @Deprecated
    // Not used anymore, but we cannot set it Nullable or remove it to not break backward compatibility (diff. hash)
    private final List<NodeAddress> arbitratorNodeAddresses;
    @Deprecated
    // Not used anymore, but we cannot set it Nullable or remove it to not break backward compatibility (diff. hash)
    private final List<NodeAddress> mediatorNodeAddresses;

    // Mutable property. Has to be set before offer is saved in P2P network as it changes the payload hash!
    @Setter
    @Nullable
    private String offerFeePaymentTxId;
    @Nullable
    private final String countryCode;
    @Nullable
    private final List<String> acceptedCountryCodes;
    @Nullable
    private final String bankId;
    @Nullable
    private final List<String> acceptedBankIds;
    private final long blockHeightAtOfferCreation;
    private final long txFee;
    private final long makerFee;
    private final boolean isCurrencyForMakerFeeBtc;
    private final long buyerSecurityDeposit;
    private final long sellerSecurityDeposit;
    private final long maxTradeLimit;
    private final long maxTradePeriod;

    // reserved for future use cases
    // Close offer when certain price is reached
    private final boolean useAutoClose;
    // If useReOpenAfterAutoClose=true we re-open a new offer with the remaining funds if the trade amount
    // was less than the offer's max. trade amount.
    private final boolean useReOpenAfterAutoClose;
    // Used when useAutoClose is set for canceling the offer when lowerClosePrice is triggered
    private final long lowerClosePrice;
    // Used when useAutoClose is set for canceling the offer when upperClosePrice is triggered
    private final long upperClosePrice;
    // Reserved for possible future use to support private trades where the taker needs to have an accessKey
    private final boolean isPrivateOffer;
    @Nullable
    private final String hashOfChallenge;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    public OfferPayload(String id,
                        long date,
                        NodeAddress ownerNodeAddress,
                        PubKeyRing pubKeyRing,
                        OfferDirection direction,
                        long price,
                        double marketPriceMargin,
                        boolean useMarketBasedPrice,
                        long amount,
                        long minAmount,
                        String baseCurrencyCode,
                        String counterCurrencyCode,
                        List<NodeAddress> arbitratorNodeAddresses,
                        List<NodeAddress> mediatorNodeAddresses,
                        String paymentMethodId,
                        String makerPaymentAccountId,
                        @Nullable String offerFeePaymentTxId,
                        @Nullable String countryCode,
                        @Nullable List<String> acceptedCountryCodes,
                        @Nullable String bankId,
                        @Nullable List<String> acceptedBankIds,
                        String versionNr,
                        long blockHeightAtOfferCreation,
                        long txFee,
                        long makerFee,
                        boolean isCurrencyForMakerFeeBtc,
                        long buyerSecurityDeposit,
                        long sellerSecurityDeposit,
                        long maxTradeLimit,
                        long maxTradePeriod,
                        boolean useAutoClose,
                        boolean useReOpenAfterAutoClose,
                        long lowerClosePrice,
                        long upperClosePrice,
                        boolean isPrivateOffer,
                        @Nullable String hashOfChallenge,
                        @Nullable Map<String, String> extraDataMap,
                        int protocolVersion) {
        super(id,
                date,
                ownerNodeAddress,
                pubKeyRing,
                baseCurrencyCode,
                counterCurrencyCode,
                direction,
                price,
                amount,
                minAmount,
                paymentMethodId,
                makerPaymentAccountId,
                extraDataMap,
                versionNr,
                protocolVersion);

        this.marketPriceMargin = marketPriceMargin;
        this.useMarketBasedPrice = useMarketBasedPrice;
        this.arbitratorNodeAddresses = arbitratorNodeAddresses;
        this.mediatorNodeAddresses = mediatorNodeAddresses;
        this.offerFeePaymentTxId = offerFeePaymentTxId;
        this.countryCode = countryCode;
        this.acceptedCountryCodes = acceptedCountryCodes;
        this.bankId = bankId;
        this.acceptedBankIds = acceptedBankIds;
        this.blockHeightAtOfferCreation = blockHeightAtOfferCreation;
        this.txFee = txFee;
        this.makerFee = makerFee;
        this.isCurrencyForMakerFeeBtc = isCurrencyForMakerFeeBtc;
        this.buyerSecurityDeposit = buyerSecurityDeposit;
        this.sellerSecurityDeposit = sellerSecurityDeposit;
        this.maxTradeLimit = maxTradeLimit;
        this.maxTradePeriod = maxTradePeriod;
        this.useAutoClose = useAutoClose;
        this.useReOpenAfterAutoClose = useReOpenAfterAutoClose;
        this.lowerClosePrice = lowerClosePrice;
        this.upperClosePrice = upperClosePrice;
        this.isPrivateOffer = isPrivateOffer;
        this.hashOfChallenge = hashOfChallenge;
    }

    @Override
    public byte[] getHash() {
        if (this.hash == null && this.offerFeePaymentTxId != null) {
            // A proto message can be created only after the offerFeePaymentTxId is
            // set to a non-null value;  now is the time to cache the payload hash.
            this.hash = Hash.getSha256Hash(this.toProtoMessage().toByteArray());
        }
        return this.hash;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public protobuf.StoragePayload toProtoMessage() {
        protobuf.OfferPayload.Builder builder = protobuf.OfferPayload.newBuilder()
                .setId(id)
                .setDate(date)
                .setOwnerNodeAddress(ownerNodeAddress.toProtoMessage())
                .setPubKeyRing(pubKeyRing.toProtoMessage())
                .setDirection(OfferDirection.toProtoMessage(direction))
                .setPrice(price)
                .setMarketPriceMargin(marketPriceMargin)
                .setUseMarketBasedPrice(useMarketBasedPrice)
                .setAmount(amount)
                .setMinAmount(minAmount)
                .setBaseCurrencyCode(baseCurrencyCode)
                .setCounterCurrencyCode(counterCurrencyCode)
                .addAllArbitratorNodeAddresses(arbitratorNodeAddresses.stream()
                        .map(NodeAddress::toProtoMessage)
                        .collect(Collectors.toList()))
                .addAllMediatorNodeAddresses(mediatorNodeAddresses.stream()
                        .map(NodeAddress::toProtoMessage)
                        .collect(Collectors.toList()))
                .setPaymentMethodId(paymentMethodId)
                .setMakerPaymentAccountId(makerPaymentAccountId)
                .setVersionNr(versionNr)
                .setBlockHeightAtOfferCreation(blockHeightAtOfferCreation)
                .setTxFee(txFee)
                .setMakerFee(makerFee)
                .setIsCurrencyForMakerFeeBtc(isCurrencyForMakerFeeBtc)
                .setBuyerSecurityDeposit(buyerSecurityDeposit)
                .setSellerSecurityDeposit(sellerSecurityDeposit)
                .setMaxTradeLimit(maxTradeLimit)
                .setMaxTradePeriod(maxTradePeriod)
                .setUseAutoClose(useAutoClose)
                .setUseReOpenAfterAutoClose(useReOpenAfterAutoClose)
                .setLowerClosePrice(lowerClosePrice)
                .setUpperClosePrice(upperClosePrice)
                .setIsPrivateOffer(isPrivateOffer)
                .setProtocolVersion(protocolVersion);

        builder.setOfferFeePaymentTxId(checkNotNull(offerFeePaymentTxId,
                ""OfferPayload is in invalid state: offerFeePaymentTxID is not set when adding to P2P network.""));

        Optional.ofNullable(countryCode).ifPresent(builder::setCountryCode);
        Optional.ofNullable(bankId).ifPresent(builder::setBankId);
        Optional.ofNullable(acceptedBankIds).ifPresent(builder::addAllAcceptedBankIds);
        Optional.ofNullable(acceptedCountryCodes).ifPresent(builder::addAllAcceptedCountryCodes);
        Optional.ofNullable(hashOfChallenge).ifPresent(builder::setHashOfChallenge);
        Optional.ofNullable(extraDataMap).ifPresent(builder::putAllExtraData);

        return protobuf.StoragePayload.newBuilder().setOfferPayload(builder).build();
    }

    public static OfferPayload fromProto(protobuf.OfferPayload proto) {
        checkArgument(!proto.getOfferFeePaymentTxId().isEmpty(), ""OfferFeePaymentTxId must be set in PB.OfferPayload"");
        List<String> acceptedBankIds = proto.getAcceptedBankIdsList().isEmpty() ?
                null : new ArrayList<>(proto.getAcceptedBankIdsList());
        List<String> acceptedCountryCodes = proto.getAcceptedCountryCodesList().isEmpty() ?
                null : new ArrayList<>(proto.getAcceptedCountryCodesList());
        String hashOfChallenge = ProtoUtil.stringOrNullFromProto(proto.getHashOfChallenge());
        Map<String, String> extraDataMapMap = CollectionUtils.isEmpty(proto.getExtraDataMap()) ?
                null : proto.getExtraDataMap();

        return new OfferPayload(proto.getId(),
                proto.getDate(),
                NodeAddress.fromProto(proto.getOwnerNodeAddress()),
                PubKeyRing.fromProto(proto.getPubKeyRing()),
                OfferDirection.fromProto(proto.getDirection()),
                proto.getPrice(),
                proto.getMarketPriceMargin(),
                proto.getUseMarketBasedPrice(),
                proto.getAmount(),
                proto.getMinAmount(),
                proto.getBaseCurrencyCode(),
                proto.getCounterCurrencyCode(),
                proto.getArbitratorNodeAddressesList().stream()
                        .map(NodeAddress::fromProto)
                        .collect(Collectors.toList()),
                proto.getMediatorNodeAddressesList().stream()
                        .map(NodeAddress::fromProto)
                        .collect(Collectors.toList()),
                proto.getPaymentMethodId(),
                proto.getMakerPaymentAccountId(),
                proto.getOfferFeePaymentTxId(),
                ProtoUtil.stringOrNullFromProto(proto.getCountryCode()),
                acceptedCountryCodes,
                ProtoUtil.stringOrNullFromProto(proto.getBankId()),
                acceptedBankIds,
                proto.getVersionNr(),
                proto.getBlockHeightAtOfferCreation(),
                proto.getTxFee(),
                proto.getMakerFee(),
                proto.getIsCurrencyForMakerFeeBtc(),
                proto.getBuyerSecurityDeposit(),
                proto.getSellerSecurityDeposit(),
                proto.getMaxTradeLimit(),
                proto.getMaxTradePeriod(),
                proto.getUseAutoClose(),
                proto.getUseReOpenAfterAutoClose(),
                proto.getLowerClosePrice(),
                proto.getUpperClosePrice(),
                proto.getIsPrivateOffer(),
                hashOfChallenge,
                extraDataMapMap,
                proto.getProtocolVersion());
    }

    @Override
    public String toString() {
        return ""OfferPayload{"" +
                ""\r\n     marketPriceMargin="" + marketPriceMargin +
                "",\r\n     useMarketBasedPrice="" + useMarketBasedPrice +
                "",\r\n     arbitratorNodeAddresses="" + arbitratorNodeAddresses +
                "",\r\n     mediatorNodeAddresses="" + mediatorNodeAddresses +
                "",\r\n     offerFeePaymentTxId='"" + offerFeePaymentTxId + '\'' +
                "",\r\n     countryCode='"" + countryCode + '\'' +
                "",\r\n     acceptedCountryCodes="" + acceptedCountryCodes +
                "",\r\n     bankId='"" + bankId + '\'' +
                "",\r\n     acceptedBankIds="" + acceptedBankIds +
                "",\r\n     blockHeightAtOfferCreation="" + blockHeightAtOfferCreation +
                "",\r\n     txFee="" + txFee +
                "",\r\n     makerFee="" + makerFee +
                "",\r\n     isCurrencyForMakerFeeBtc="" + isCurrencyForMakerFeeBtc +
                "",\r\n     buyerSecurityDeposit="" + buyerSecurityDeposit +
                "",\r\n     sellerSecurityDeposit="" + sellerSecurityDeposit +
                "",\r\n     maxTradeLimit="" + maxTradeLimit +
                "",\r\n     maxTradePeriod="" + maxTradePeriod +
                "",\r\n     useAutoClose="" + useAutoClose +
                "",\r\n     useReOpenAfterAutoClose="" + useReOpenAfterAutoClose +
                "",\r\n     lowerClosePrice="" + lowerClosePrice +
                "",\r\n     upperClosePrice="" + upperClosePrice +
                "",\r\n     isPrivateOffer="" + isPrivateOffer +
                "",\r\n     hashOfChallenge='"" + hashOfChallenge + '\'' +
                ""\r\n} "" + super.toString();
    }

    // For backward compatibility we need to ensure same order for json fields as with 1.7.5. and earlier versions.
    // The json is used for the hash in the contract and change of oder would cause a different hash and
    // therefore a failure during trade.
    public static class JsonSerializer implements com.google.gson.JsonSerializer<OfferPayload> {
        @Override
        public JsonElement serialize(OfferPayload offerPayload, Type type, JsonSerializationContext context) {
            JsonObject object = new JsonObject();
            object.add(""id"", context.serialize(offerPayload.getId()));
            object.add(""date"", context.serialize(offerPayload.getDate()));
            object.add(""ownerNodeAddress"", context.serialize(offerPayload.getOwnerNodeAddress()));
            object.add(""direction"", context.serialize(offerPayload.getDirection()));
            object.add(""price"", context.serialize(offerPayload.getPrice()));
            object.add(""marketPriceMargin"", context.serialize(offerPayload.getMarketPriceMargin()));
            object.add(""useMarketBasedPrice"", context.serialize(offerPayload.isUseMarketBasedPrice()));
            object.add(""amount"", context.serialize(offerPayload.getAmount()));
            object.add(""minAmount"", context.serialize(offerPayload.getMinAmount()));
            object.add(""baseCurrencyCode"", context.serialize(offerPayload.getBaseCurrencyCode()));
            object.add(""counterCurrencyCode"", context.serialize(offerPayload.getCounterCurrencyCode()));
            object.add(""arbitratorNodeAddresses"", context.serialize(offerPayload.getArbitratorNodeAddresses()));
            object.add(""mediatorNodeAddresses"", context.serialize(offerPayload.getMediatorNodeAddresses()));
            object.add(""paymentMethodId"", context.serialize(offerPayload.getPaymentMethodId()));
            object.add(""makerPaymentAccountId"", context.serialize(offerPayload.getMakerPaymentAccountId()));
            object.add(""offerFeePaymentTxId"", context.serialize(offerPayload.getOfferFeePaymentTxId()));
            object.add(""versionNr"", context.serialize(offerPayload.getVersionNr()));
            object.add(""blockHeightAtOfferCreation"", context.serialize(offerPayload.getBlockHeightAtOfferCreation()));
            object.add(""txFee"", context.serialize(offerPayload.getTxFee()));
            object.add(""makerFee"", context.serialize(offerPayload.getMakerFee()));
            object.add(""isCurrencyForMakerFeeBtc"", context.serialize(offerPayload.isCurrencyForMakerFeeBtc()));
            object.add(""buyerSecurityDeposit"", context.serialize(offerPayload.getBuyerSecurityDeposit()));
            object.add(""sellerSecurityDeposit"", context.serialize(offerPayload.getSellerSecurityDeposit()));
            object.add(""maxTradeLimit"", context.serialize(offerPayload.getMaxTradeLimit()));
            object.add(""maxTradePeriod"", context.serialize(offerPayload.getMaxTradePeriod()));
            object.add(""useAutoClose"", context.serialize(offerPayload.isUseAutoClose()));
            object.add(""useReOpenAfterAutoClose"", context.serialize(offerPayload.isUseReOpenAfterAutoClose()));
            object.add(""lowerClosePrice"", context.serialize(offerPayload.getLowerClosePrice()));
            object.add(""upperClosePrice"", context.serialize(offerPayload.getUpperClosePrice()));
            object.add(""isPrivateOffer"", context.serialize(offerPayload.isPrivateOffer()));
            object.add(""extraDataMap"", context.serialize(offerPayload.getExtraDataMap()));
            object.add(""protocolVersion"", context.serialize(offerPayload.getProtocolVersion()));
            return object;
        }
    }
}",0,64 2000 40 2001 61 2002 41 64 2003 64 2004 777 657 587 2005 650 2006 123 330 330 777 809 657 2007 2008 61 362 59 777 809 657 2007 2009 61 362 59 330 777 809 657 2007 2010 61 362 59 777 809 657 2007 2011 61 362 59 777 809 657 2007 2012 61 362 59 330 330 330 777 809 657 2007 2013 61 362 59 330 777 809 657 2007 2014 61 362 59 777 809 657 2007 2015 61 362 59 331 330 331 330 330 330 330 330 773 657 625 2016 59 330 773 657 570 2017 59 64 2018 330 773 657 2019 60 2020 62 2021 59 64 2018 330 773 657 2019 60 2020 62 2022 59 330 64 2023 64 2024 773 2007 2025 59 64 2024 773 657 2007 2026 59 64 2024 773 657 2019 60 2007 62 2027 59 64 2024 773 657 2007 2028 59 64 2024 773 657 2019 60 2007 62 2029 59 773 657 726 2030 59 773 657 726 2031 59 773 657 726 2032 59 773 657 570 2033 59 773 657 726 2034 59 773 657 726 2035 59 773 657 726 2036 59 773 657 726 2037 59 330 330 773 657 570 2038 59 330 330 773 657 570 2039 59 330 773 657 726 2040 59 330 773 657 726 2041 59 330 773 657 570 2042 59 64 2024 773 657 2007 2043 59 331 330 331 777 2005 40 2007 2044 44 726 2045 44 2020 2046 44 2047 2048 44 2049 2050 44 726 2051 44 625 2016 44 570 2017 44 726 2052 44 726 2053 44 2007 2054 44 2007 2055 44 2019 60 2020 62 2021 44 2019 60 2020 62 2022 44 2007 2056 44 2007 2057 44 64 2024 2007 2025 44 64 2024 2007 2026 44 64 2024 2019 60 2007 62 2027 44 64 2024 2007 2028 44 64 2024 2019 60 2007 62 2029 44 2007 2058 44 726 2030 44 726 2031 44 726 2032 44 570 2033 44 726 2034 44 726 2035 44 726 2036 44 726 2037 44 570 2038 44 570 2039 44 726 2040 44 726 2041 44 570 2042 44 64 2024 2007 2043 44 64 2024 2059 60 2007 44 2007 62 2060 44 704 2061 41 123 818 40 2044 44 2045 44 2046 44 2048 44 2054 44 2055 44 2050 44 2051 44 2052 44 2053 44 2056 44 2057 44 2060 44 2058 44 2061 41 59 823 46 2016 61 2016 59 823 46 2017 61 2017 59 823 46 2021 61 2021 59 823 46 2022 61 2022 59 823 46 2025 61 2025 59 823 46 2026 61 2026 59 823 46 2027 61 2027 59 823 46 2028 61 2028 59 823 46 2029 61 2029 59 823 46 2030 61 2030 59 823 46 2031 61 2031 59 823 46 2032 61 2032 59 823 46 2033 61 2033 59 823 46 2034 61 2034 59 823 46 2035 61 2035 59 823 46 2036 61 2036 59 823 46 2037 61 2037 59 823 46 2038 61 2038 59 823 46 2039 61 2039 59 823 46 2040 61 2040 59 823 46 2041 61 2041 59 823 46 2042 61 2042 59 823 46 2043 61 2043 59 125 64 2062 777 574 91 93 2063 40 41 123 688 40 823 46 2064 323 2065 307 823 46 2025 340 2065 41 123 330 330 823 46 2064 61 2066 46 2067 40 823 46 2068 40 41 46 2069 40 41 41 59 125 792 823 46 2064 59 125 331 330 331 64 2062 777 2070 46 2071 2072 40 41 123 2070 46 2005 46 2073 2074 61 2070 46 2005 46 2075 40 41 46 2076 40 2044 41 46 2077 40 2045 41 46 2078 40 2046 46 2072 40 41 41 46 2079 40 2048 46 2072 40 41 41 46 2080 40 2049 46 2072 40 2050 41 41 46 2081 40 2051 41 46 2082 40 2016 41 46 2083 40 2017 41 46 2084 40 2052 41 46 2085 40 2053 41 46 2086 40 2054 41 46 2087 40 2055 41 46 2088 40 2021 46 2089 40 41 46 2090 40 2020 58 58 2072 41 46 2091 40 2092 46 2093 40 41 41 41 46 2094 40 2022 46 2089 40 41 46 2090 40 2020 58 58 2072 41 46 2091 40 2092 46 2093 40 41 41 41 46 2095 40 2056 41 46 2096 40 2057 41 46 2097 40 2058 41 46 2098 40 2030 41 46 2099 40 2031 41 46 2100 40 2032 41 46 2101 40 2033 41 46 2102 40 2034 41 46 2103 40 2035 41 46 2104 40 2036 41 46 2105 40 2037 41 46 2106 40 2038 41 46 2107 40 2039 41 46 2108 40 2040 41 46 2109 40 2041 41 46 2110 40 2042 41 46 2111 40 2061 41 59 2074 46 2112 40 2113 40 2025 44 362 41 41 59 2114 46 2115 40 2026 41 46 2116 40 2074 58 58 2117 41 59 2114 46 2115 40 2028 41 46 2116 40 2074 58 58 2118 41 59 2114 46 2115 40 2029 41 46 2116 40 2074 58 58 2119 41 59 2114 46 2115 40 2027 41 46 2116 40 2074 58 58 2120 41 59 2114 46 2115 40 2043 41 46 2116 40 2074 58 58 2121 41 59 2114 46 2115 40 2060 41 46 2116 40 2074 58 58 2122 41 59 792 2070 46 2071 46 2075 40 41 46 2123 40 2074 41 46 2124 40 41 59 125 777 809 2005 2125 40 2070 46 2005 2126 41 123 2127 40 33 2126 46 2128 40 41 46 2129 40 41 44 362 41 59 2019 60 2007 62 2029 61 2126 46 2130 40 41 46 2129 40 41 63 2131 58 744 2132 60 62 40 2126 46 2130 40 41 41 59 2019 60 2007 62 2027 61 2126 46 2133 40 41 46 2129 40 41 63 2131 58 744 2132 60 62 40 2126 46 2133 40 41 41 59 2007 2043 61 2134 46 2135 40 2126 46 2136 40 41 41 59 2059 60 2007 44 2007 62 2137 61 2138 46 2129 40 2126 46 2139 40 41 41 63 2131 58 2126 46 2139 40 41 59 792 744 2005 40 2126 46 2140 40 41 44 2126 46 2141 40 41 44 2020 46 2125 40 2126 46 2142 40 41 41 44 2047 46 2125 40 2126 46 2143 40 41 41 44 2049 46 2125 40 2126 46 2144 40 41 41 44 2126 46 2145 40 41 44 2126 46 2146 40 41 44 2126 46 2147 40 41 44 2126 46 2148 40 41 44 2126 46 2149 40 41 44 2126 46 2150 40 41 44 2126 46 2151 40 41 44 2126 46 2152 40 41 46 2153 40 41 46 2154 40 2020 58 58 2125 41 46 2155 40 2156 46 2157 40 41 41 44 2126 46 2158 40 41 46 2153 40 41 46 2154 40 2020 58 58 2125 41 46 2155 40 2156 46 2157 40 41 41 44 2126 46 2159 40 41 44 2126 46 2160 40 41 44 2126 46 2128 40 41 44 2134 46 2135 40 2126 46 2161 40 41 41 44 2027 44 2134 46 2135 40 2126 46 2162 40 41 41 44 2029 44 2126 46 2163 40 41 44 2126 46 2164 40 41 44 2126 46 2165 40 41 44 2126 46 2166 40 41 44 2126 46 2167 40 41 44 2126 46 2168 40 41 44 2126 46 2169 40 41 44 2126 46 2170 40 41 44 2126 46 2171 40 41 44 2126 46 2172 40 41 44 2126 46 2173 40 41 44 2126 46 2174 40 41 44 2126 46 2175 40 41 44 2126 46 2176 40 41 44 2043 44 2137 44 2126 46 2177 40 41 41 59 125 64 2062 777 2007 2178 40 41 123 792 362 43 362 43 2016 43 362 43 2017 43 362 43 2021 43 362 43 2022 43 362 43 2025 43 314 43 362 43 2026 43 314 43 362 43 2027 43 362 43 2028 43 314 43 362 43 2029 43 362 43 2030 43 362 43 2031 43 362 43 2032 43 362 43 2033 43 362 43 2034 43 362 43 2035 43 362 43 2036 43 362 43 2037 43 362 43 2038 43 362 43 2039 43 362 43 2040 43 362 43 2041 43 362 43 2042 43 362 43 2043 43 314 43 362 43 818 46 2178 40 41 59 125 330 330 330 777 809 587 2179 693 2180 46 2181 46 2182 46 2179 60 2005 62 123 64 2062 777 2183 2184 40 2005 2185 44 2186 2187 44 2188 2189 41 123 2190 2191 61 744 2190 40 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2193 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2194 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2195 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2196 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2197 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2198 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2199 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2200 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2201 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2202 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2203 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2204 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2205 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2206 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2207 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2208 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2209 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2210 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2211 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2212 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2033 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2213 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2214 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2215 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2216 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2217 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2218 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2219 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2220 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2042 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2221 40 41 41 41 59 2191 46 2192 40 362 44 2189 46 2184 40 2185 46 2222 40 41 41 41 59 792 2191 59 125 125 125 ,"{'AvgLine': 43, 'CountLine': 355, 'CountStmt': 116, 'MaxNesting': 1, 'AvgLineCode': 42, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 77, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 296, 'CountStmtDecl': 45, 'MaxCyclomatic': 4, 'SumCyclomatic': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 22, 'CountSemicolon': 107, 'CountDeclMethod': 5, 'CountLineCodeExe': 203, 'CountLineComment': 37, 'CountClassCoupled': 22, 'CountClassDerived': 0, 'CountLineCodeDecl': 102, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.13', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 39, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 8, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 22, 'CountDeclInstanceVariable': 23, 'PercentLackOfCohesionModified': 0}"
2852,Java,"@EqualsAndHashCode(callSuper = true)
public final class TransferwiseUsdAccount extends CountryBasedPaymentAccount {
    public TransferwiseUsdAccount() {
        super(PaymentMethod.TRANSFERWISE_USD);
    }

    @Override
    protected PaymentAccountPayload createPayload() {
        return new TransferwiseUsdAccountPayload(paymentMethod.getId(), id);
    }

    public void setEmail(String email) {
        ((TransferwiseUsdAccountPayload) paymentAccountPayload).setEmail(email);
    }

    public String getEmail() {
        return ((TransferwiseUsdAccountPayload) paymentAccountPayload).getEmail();
    }

    public void setHolderName(String accountId) {
        ((TransferwiseUsdAccountPayload) paymentAccountPayload).setHolderName(accountId);
    }

    public String getHolderName() {
        return ((TransferwiseUsdAccountPayload) paymentAccountPayload).getHolderName();
    }

    public void setBeneficiaryAddress(String address) {
        ((TransferwiseUsdAccountPayload) paymentAccountPayload).setBeneficiaryAddress(address);
    }

    public String getBeneficiaryAddress() {
        return ((TransferwiseUsdAccountPayload) paymentAccountPayload).getBeneficiaryAddress();
    }

    public String getMessageForBuyer() {
        return ""payment.transferwiseUsd.info.buyer"";
    }

    public String getMessageForSeller() {
        return ""payment.transferwiseUsd.info.seller"";
    }

    public String getMessageForAccountCreation() {
        return ""payment.transferwiseUsd.info.account"";
    }
}",0,64 2000 40 2001 61 2002 41 777 657 587 2003 650 2004 123 777 2003 40 41 123 818 40 2005 46 2006 41 59 125 64 2007 775 2008 2009 40 41 123 792 744 2010 40 2011 46 2012 40 41 44 2013 41 59 125 777 865 2014 40 2015 2016 41 123 40 40 2017 41 2018 41 46 2014 40 2016 41 59 125 777 2015 2019 40 41 123 792 40 40 2020 41 2021 41 46 2019 40 41 59 125 777 865 2022 40 2015 2023 41 123 40 40 2024 41 2025 41 46 2022 40 2023 41 59 125 777 2015 2026 40 41 123 792 40 40 2027 41 2028 41 46 2026 40 41 59 125 777 865 2029 40 2015 2030 41 123 40 40 2031 41 2032 41 46 2029 40 2030 41 59 125 777 2015 2033 40 41 123 792 40 40 2034 41 2035 41 46 2033 40 41 59 125 777 2015 2036 40 41 123 792 362 59 125 777 2015 2037 40 41 123 792 362 59 125 777 2015 2038 40 41 123 792 362 59 125 125 ,"{'AvgLine': 3, 'CountLine': 47, 'CountStmt': 23, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 11, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 37, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountSemicolon': 11, 'CountDeclMethod': 11, 'CountLineCodeExe': 11, 'CountLineComment': 0, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 10, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
3071,Java,"@Slf4j
public class BallotListService implements PersistedDataHost, DaoSetupService {
    public interface BallotListChangeListener {
        void onListChanged(List<Ballot> list);
    }

    private final ProposalService proposalService;
    private final PeriodService periodService;
    private final ProposalValidatorProvider validatorProvider;
    private final PersistenceManager<BallotList> persistenceManager;

    private final BallotList ballotList = new BallotList();
    private final List<BallotListChangeListener> listeners = new CopyOnWriteArrayList<>();

    @Inject
    public BallotListService(ProposalService proposalService,
                             PeriodService periodService,
                             ProposalValidatorProvider validatorProvider,
                             PersistenceManager<BallotList> persistenceManager) {
        this.proposalService = proposalService;
        this.periodService = periodService;
        this.validatorProvider = validatorProvider;
        this.persistenceManager = persistenceManager;

        this.persistenceManager.initialize(ballotList, PersistenceManager.Source.NETWORK);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // DaoSetupService
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public final void addListeners() {
        ObservableList<ProposalPayload> payloads = proposalService.getProposalPayloads();
        payloads.addListener(this::onChanged);
    }

    private void onChanged(Change<? extends ProposalPayload> change) {
        change.next();
        if (change.wasAdded()) {
            List<? extends ProposalPayload> addedPayloads = change.getAddedSubList();
            addedPayloads.stream()
                    .map(ProposalPayload::getProposal)
                    .filter(this::isNewProposal)
                    .forEach(this::registerProposalAsBallot);
            requestPersistence();
        }
    }

    private boolean isNewProposal(Proposal proposal) {
        return ballotList.stream()
                .map(Ballot::getProposal)
                .noneMatch(proposal::equals);
    }

    private void registerProposalAsBallot(Proposal proposal) {
        Ballot ballot = new Ballot(proposal); // vote is null
        if (log.isInfoEnabled()) {
            log.debug(""We create a new ballot with a proposal and add it to our list. "" +
                    ""Vote is null at that moment. proposalTxId={}"", proposal.getTxId());
        }
        if (ballotList.contains(ballot)) {
            log.warn(""Ballot {} already exists on our ballotList"", ballot);
        } else {
            ballotList.add(ballot);
            listeners.forEach(listener -> listener.onListChanged(ballotList.getList()));
        }
    }

    @Override
    public void start() {
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PersistedDataHost
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void readPersisted(Runnable completeHandler) {
        if (DevEnv.isDaoActivated()) {
            persistenceManager.readPersisted(persisted -> {
                        ballotList.setAll(persisted.getList());
                        listeners.forEach(l -> l.onListChanged(ballotList.getList()));
                        completeHandler.run();
                    },
                    completeHandler);
        } else {
            completeHandler.run();
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void setVote(Ballot ballot, @Nullable Vote vote) {
        ballot.setVote(vote);
        requestPersistence();
    }

    public void addListener(BallotListChangeListener listener) {
        listeners.add(listener);
    }

    public List<Ballot> getValidatedBallotList() {
        return ballotList.stream()
                .filter(ballot -> validatorProvider.getValidator(ballot.getProposal()).isTxTypeValid(ballot.getProposal()))
                .collect(Collectors.toList());
    }

    public List<Ballot> getValidBallotsOfCycle() {
        return ballotList.stream()
                .filter(ballot -> validatorProvider.getValidator(ballot.getProposal()).isTxTypeValid(ballot.getProposal()))
                .filter(ballot -> periodService.isTxInCorrectCycle(ballot.getTxId(), periodService.getChainHeight()))
                .collect(Collectors.toList());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Private
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void requestPersistence() {
        persistenceManager.requestPersistence();
    }
}",0,64 2000 777 587 2001 693 2002 44 2003 123 777 709 2004 123 865 2005 40 2006 60 2007 62 2008 41 59 125 773 657 2009 2010 59 773 657 2011 2012 59 773 657 2013 2014 59 773 657 2015 60 2016 62 2017 59 773 657 2016 2018 61 744 2016 40 41 59 773 657 2019 60 2004 62 2020 61 744 2021 60 62 40 41 59 64 2022 777 2001 40 2009 2010 44 2011 2012 44 2013 2014 44 2015 60 2016 62 2017 41 123 823 46 2010 61 2010 59 823 46 2012 61 2012 59 823 46 2014 61 2014 59 823 46 2017 61 2017 59 823 46 2017 46 2023 40 2018 44 2015 46 2024 46 2025 41 59 125 331 330 331 64 2026 777 657 865 2027 40 41 123 2028 60 2029 62 2030 61 2010 46 2031 40 41 59 2030 46 2032 40 823 58 58 2033 41 59 125 773 865 2034 40 2035 60 63 650 2036 62 2037 41 123 2037 46 2038 40 41 59 688 40 2037 46 2039 40 41 41 123 2019 60 63 650 2036 62 2040 61 2037 46 2041 40 41 59 2040 46 2042 40 41 46 2043 40 2036 58 58 2044 41 46 2045 40 823 58 58 2046 41 46 2047 40 823 58 58 2048 41 59 2049 40 41 59 125 125 773 570 2050 40 2051 2052 41 123 792 2018 46 2053 40 41 46 2054 40 2055 58 58 2056 41 46 2057 40 2052 58 58 2058 41 59 125 773 865 2059 40 2051 2052 41 123 2060 2061 61 744 2060 40 2052 41 59 330 688 40 2062 46 2063 40 41 41 123 2062 46 2064 40 362 43 362 44 2052 46 2065 40 41 41 59 125 688 40 2018 46 2066 40 2061 41 41 123 2062 46 2067 40 362 44 2061 41 59 125 630 123 2018 46 2068 40 2061 41 59 2020 46 2069 40 2070 45 62 2070 46 2071 40 2018 46 2072 40 41 41 41 59 125 125 64 2026 777 865 2073 40 41 123 125 331 330 331 64 2026 777 865 2074 40 2075 2076 41 123 688 40 2077 46 2078 40 41 41 123 2017 46 2074 40 2079 45 62 123 2018 46 2080 40 2079 46 2081 40 41 41 59 2020 46 2082 40 2083 45 62 2083 46 2084 40 2018 46 2081 40 41 41 41 59 2076 46 2085 40 41 59 125 44 2076 41 59 125 630 123 2076 46 2086 40 41 59 125 125 331 330 331 777 865 2087 40 2088 2089 44 64 2090 2091 2092 41 123 2089 46 2087 40 2092 41 59 2093 40 41 59 125 777 865 2094 40 2004 2095 41 123 2020 46 2096 40 2095 41 59 125 777 2019 60 2088 62 2097 40 41 123 792 2018 46 2098 40 41 46 2099 40 2089 45 62 2014 46 2100 40 2089 46 2101 40 41 41 46 2102 40 2089 46 2101 40 41 41 41 46 2103 40 2104 46 2105 40 41 41 59 125 777 2019 60 2088 62 2106 40 41 123 792 2018 46 2107 40 41 46 2108 40 2089 45 62 2014 46 2109 40 2089 46 2110 40 41 41 46 2111 40 2089 46 2110 40 41 41 41 46 2108 40 2089 45 62 2012 46 2112 40 2089 46 2113 40 41 44 2012 46 2114 40 41 41 41 46 2115 40 2116 46 2117 40 41 41 59 125 331 330 331 773 865 2118 40 41 123 2017 46 2118 40 41 59 125 125 ,"{'AvgLine': 6, 'CountLine': 134, 'CountStmt': 53, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 34, 'MaxEssential': 1, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 94, 'CountStmtDecl': 24, 'MaxCyclomatic': 3, 'SumCyclomatic': 21, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 23, 'CountSemicolon': 35, 'CountDeclMethod': 12, 'CountLineCodeExe': 49, 'CountLineComment': 18, 'CountClassCoupled': 23, 'CountClassDerived': 0, 'CountLineCodeDecl': 32, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.19', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 8, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 23, 'CountDeclInstanceVariable': 6, 'PercentLackOfCohesionModified': 70}"
2881,Java,"@Immutable
@Slf4j
@Getter
@EqualsAndHashCode
public final class Ballot implements PersistablePayload, ConsensusCritical, ImmutableDaoStateModel {
    protected final Proposal proposal;

    @Nullable
    protected Vote vote;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Ballot(Proposal proposal) {
        this(proposal, null);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Ballot(Proposal proposal, @Nullable Vote vote) {
        this.proposal = proposal;
        this.vote = vote;
    }

    @Override
    public protobuf.Ballot toProtoMessage() {
        final protobuf.Ballot.Builder builder = protobuf.Ballot.newBuilder()
                .setProposal(proposal.getProposalBuilder());
        Optional.ofNullable(vote).ifPresent(e -> builder.setVote((protobuf.Vote) e.toProtoMessage()));
        return builder.build();
    }

    public static Ballot fromProto(protobuf.Ballot proto) {
        return new Ballot(Proposal.fromProto(proto.getProposal()),
                proto.hasVote() ? Vote.fromProto(proto.getVote()) : null);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void setVote(@Nullable Vote vote) {
        this.vote = vote;
    }

    public String getTxId() {
        return proposal.getTxId();
    }

    public Optional<Vote> getVoteAsOptional() {
        return Optional.ofNullable(vote);
    }

    @Override
    public String toString() {
        return ""Ballot{"" +
                ""\n     proposal="" + proposal +
                "",\n     vote="" + vote +
                ""\n}"";
    }

    public String info() {
        return ""Ballot{"" +
                ""\n     proposalTxId="" + proposal.getTxId() +
                "",\n     vote="" + vote +
                ""\n}"";
    }
}",0,64 2000 64 2001 64 2002 64 2003 777 657 587 2004 693 2005 44 2006 44 2007 123 775 657 2008 2009 59 64 2010 775 2011 2012 59 331 330 331 777 2004 40 2008 2009 41 123 823 40 2009 44 2013 41 59 125 331 330 331 777 2004 40 2008 2009 44 64 2010 2011 2012 41 123 823 46 2009 61 2009 59 823 46 2012 61 2012 59 125 64 2014 777 2015 46 2004 2016 40 41 123 657 2015 46 2004 46 2017 2018 61 2015 46 2004 46 2019 40 41 46 2020 40 2009 46 2021 40 41 41 59 2022 46 2023 40 2012 41 46 2024 40 2025 45 62 2018 46 2026 40 40 2015 46 2011 41 2025 46 2016 40 41 41 41 59 792 2018 46 2027 40 41 59 125 777 809 2004 2028 40 2015 46 2004 2029 41 123 792 744 2004 40 2008 46 2028 40 2029 46 2030 40 41 41 44 2029 46 2031 40 41 63 2011 46 2028 40 2029 46 2032 40 41 41 58 2033 41 59 125 331 330 331 777 865 2034 40 64 2010 2011 2012 41 123 823 46 2012 61 2012 59 125 777 2035 2036 40 41 123 792 2009 46 2036 40 41 59 125 777 2037 60 2011 62 2038 40 41 123 792 2037 46 2039 40 2012 41 59 125 64 2014 777 2035 2040 40 41 123 792 362 43 362 43 2009 43 362 43 2012 43 362 59 125 777 2035 2041 40 41 123 792 362 43 362 43 2009 46 2036 40 41 43 362 43 2012 43 362 59 125 125 ,"{'AvgLine': 4, 'CountLine': 81, 'CountStmt': 24, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 49, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AvgLineComment': 0, 'CountClassBase': 4, 'CountLineBlank': 16, 'CountSemicolon': 14, 'CountDeclMethod': 9, 'CountLineCodeExe': 20, 'CountLineComment': 16, 'CountClassCoupled': 13, 'CountClassDerived': 0, 'CountLineCodeDecl': 21, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.33', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 9, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 38, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 13, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 16}"
2945,Java,"                new Callback<>() {
                    @Override
                    public TableCell<Dispute, Dispute> call(TableColumn<Dispute, Dispute> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    String id = item.getId();
                                    Button button;
                                    if (!chatButtonByDispute.containsKey(id)) {
                                        button = FormBuilder.getIconButton(MaterialDesignIcon.COMMENT_MULTIPLE_OUTLINE);
                                        chatButtonByDispute.put(id, button);
                                        button.setTooltip(new Tooltip(Res.get(""tradeChat.openChat"")));
                                    } else {
                                        button = chatButtonByDispute.get(id);
                                    }
                                    JFXBadge chatBadge;
                                    if (!chatBadgeByDispute.containsKey(id)) {
                                        chatBadge = new JFXBadge(button);
                                        chatBadgeByDispute.put(id, chatBadge);
                                        chatBadge.setPosition(Pos.TOP_RIGHT);
                                    } else {
                                        chatBadge = chatBadgeByDispute.get(id);
                                    }
                                    button.setOnAction(e -> {
                                        tableView.getSelectionModel().select(this.getIndex());
                                        openChat(item);
                                    });
                                    if (!listenerByDispute.containsKey(id)) {
                                        ListChangeListener<ChatMessage> listener = c -> updateChatMessageCount(item, chatBadge);
                                        listenerByDispute.put(id, listener);
                                        item.getChatMessages().addListener(listener);
                                    }
                                    updateChatMessageCount(item, chatBadge);
                                    setGraphic(chatBadge);
                                } else {
                                    setGraphic(null);
                                }
                            }
                        };
                    }
                });",0,744 2000 60 62 40 41 123 64 2001 777 2002 60 2003 44 2003 62 2004 40 2005 60 2003 44 2003 62 2006 41 123 792 744 2002 60 62 40 41 123 64 2001 777 865 2007 40 657 2003 2008 44 570 2009 41 123 818 46 2007 40 2008 44 2009 41 59 688 40 2008 340 2010 307 33 2009 41 123 2011 2012 61 2008 46 2013 40 41 59 2014 2015 59 688 40 33 2016 46 2017 40 2012 41 41 123 2015 61 2018 46 2019 40 2020 46 2021 41 59 2016 46 2022 40 2012 44 2015 41 59 2015 46 2023 40 744 2024 40 2025 46 2026 40 362 41 41 41 59 125 630 123 2015 61 2016 46 2027 40 2012 41 59 125 2028 2029 59 688 40 33 2030 46 2017 40 2012 41 41 123 2029 61 744 2028 40 2015 41 59 2030 46 2031 40 2012 44 2029 41 59 2029 46 2032 40 2033 46 2034 41 59 125 630 123 2029 61 2030 46 2035 40 2012 41 59 125 2015 46 2036 40 2037 45 62 123 2038 46 2039 40 41 46 2040 40 823 46 2041 40 41 41 59 2042 40 2008 41 59 125 41 59 688 40 33 2043 46 2017 40 2012 41 41 123 2044 60 2045 62 2046 61 2047 45 62 2048 40 2008 44 2029 41 59 2043 46 2049 40 2012 44 2046 41 59 2008 46 2050 40 41 46 2051 40 2046 41 59 125 2052 40 2008 44 2029 41 59 2053 40 2029 41 59 125 630 123 2054 40 2010 41 59 125 125 125 59 125 125 41 59 ,"{'AvgLine': 41, 'CountLine': 42, 'CountStmt': 28, 'MaxNesting': 0, 'AvgLineCode': 41, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 42, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 22, 'CountDeclMethod': 1, 'CountLineCodeExe': 34, 'CountLineComment': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2758,Java,"@Disabled
@Slf4j
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class CreateOfferUsingFixedPriceTest extends AbstractOfferTest {

    private static final String MAKER_FEE_CURRENCY_CODE = BSQ;

    @Test
    @Order(1)
    public void testCreateAUDBTCBuyOfferUsingFixedPrice16000() {
        PaymentAccount audAccount = createDummyF2FAccount(aliceClient, ""AU"");
        var newOffer = aliceClient.createFixedPricedOffer(BUY.name(),
                ""aud"",
                10_000_000L,
                10_000_000L,
                ""36000"",
                getDefaultBuyerSecurityDepositAsPercent(),
                audAccount.getId(),
                MAKER_FEE_CURRENCY_CODE);
        log.debug(""OFFER #1:\n{}"", toOfferTable.apply(newOffer));
        assertTrue(newOffer.getIsMyOffer());
        assertTrue(newOffer.getIsMyPendingOffer());

        String newOfferId = newOffer.getId();
        assertNotEquals("""", newOfferId);
        assertEquals(BUY.name(), newOffer.getDirection());
        assertFalse(newOffer.getUseMarketBasedPrice());
        assertEquals(360_000_000, newOffer.getPrice());
        assertEquals(10_000_000, newOffer.getAmount());
        assertEquals(10_000_000, newOffer.getMinAmount());
        assertEquals(1_500_000, newOffer.getBuyerSecurityDeposit());
        assertEquals(audAccount.getId(), newOffer.getPaymentAccountId());
        assertEquals(BTC, newOffer.getBaseCurrencyCode());
        assertEquals(""AUD"", newOffer.getCounterCurrencyCode());
        assertFalse(newOffer.getIsCurrencyForMakerFeeBtc());

        newOffer = aliceClient.getMyOffer(newOfferId);
        assertTrue(newOffer.getIsMyOffer());
        assertFalse(newOffer.getIsMyPendingOffer());
        assertEquals(newOfferId, newOffer.getId());
        assertEquals(BUY.name(), newOffer.getDirection());
        assertFalse(newOffer.getUseMarketBasedPrice());
        assertEquals(360_000_000, newOffer.getPrice());
        assertEquals(10_000_000, newOffer.getAmount());
        assertEquals(10_000_000, newOffer.getMinAmount());
        assertEquals(1_500_000, newOffer.getBuyerSecurityDeposit());
        assertEquals(audAccount.getId(), newOffer.getPaymentAccountId());
        assertEquals(BTC, newOffer.getBaseCurrencyCode());
        assertEquals(""AUD"", newOffer.getCounterCurrencyCode());
        assertFalse(newOffer.getIsCurrencyForMakerFeeBtc());
    }

    @Test
    @Order(2)
    public void testCreateUSDBTCBuyOfferUsingFixedPrice100001234() {
        PaymentAccount usdAccount = createDummyF2FAccount(aliceClient, ""US"");
        var newOffer = aliceClient.createFixedPricedOffer(BUY.name(),
                ""usd"",
                10_000_000L,
                10_000_000L,
                ""30000.1234"",
                getDefaultBuyerSecurityDepositAsPercent(),
                usdAccount.getId(),
                MAKER_FEE_CURRENCY_CODE);
        log.debug(""OFFER #2:\n{}"", toOfferTable.apply(newOffer));
        assertTrue(newOffer.getIsMyOffer());
        assertTrue(newOffer.getIsMyPendingOffer());

        String newOfferId = newOffer.getId();
        assertNotEquals("""", newOfferId);
        assertEquals(BUY.name(), newOffer.getDirection());
        assertFalse(newOffer.getUseMarketBasedPrice());
        assertEquals(300_001_234, newOffer.getPrice());
        assertEquals(10_000_000, newOffer.getAmount());
        assertEquals(10_000_000, newOffer.getMinAmount());
        assertEquals(1_500_000, newOffer.getBuyerSecurityDeposit());
        assertEquals(usdAccount.getId(), newOffer.getPaymentAccountId());
        assertEquals(BTC, newOffer.getBaseCurrencyCode());
        assertEquals(USD, newOffer.getCounterCurrencyCode());
        assertFalse(newOffer.getIsCurrencyForMakerFeeBtc());

        newOffer = aliceClient.getMyOffer(newOfferId);
        assertTrue(newOffer.getIsMyOffer());
        assertFalse(newOffer.getIsMyPendingOffer());
        assertEquals(newOfferId, newOffer.getId());
        assertEquals(BUY.name(), newOffer.getDirection());
        assertFalse(newOffer.getUseMarketBasedPrice());
        assertEquals(300_001_234, newOffer.getPrice());
        assertEquals(10_000_000, newOffer.getAmount());
        assertEquals(10_000_000, newOffer.getMinAmount());
        assertEquals(1_500_000, newOffer.getBuyerSecurityDeposit());
        assertEquals(usdAccount.getId(), newOffer.getPaymentAccountId());
        assertEquals(BTC, newOffer.getBaseCurrencyCode());
        assertEquals(USD, newOffer.getCounterCurrencyCode());
        assertFalse(newOffer.getIsCurrencyForMakerFeeBtc());
    }

    @Test
    @Order(3)
    public void testCreateEURBTCSellOfferUsingFixedPrice95001234() {
        PaymentAccount eurAccount = createDummyF2FAccount(aliceClient, ""FR"");
        var newOffer = aliceClient.createFixedPricedOffer(SELL.name(),
                ""eur"",
                10_000_000L,
                5_000_000L,
                ""29500.1234"",
                getDefaultBuyerSecurityDepositAsPercent(),
                eurAccount.getId(),
                MAKER_FEE_CURRENCY_CODE);
        log.debug(""OFFER #3:\n{}"", toOfferTable.apply(newOffer));
        assertTrue(newOffer.getIsMyOffer());
        assertTrue(newOffer.getIsMyPendingOffer());

        String newOfferId = newOffer.getId();
        assertNotEquals("""", newOfferId);
        assertEquals(SELL.name(), newOffer.getDirection());
        assertFalse(newOffer.getUseMarketBasedPrice());
        assertEquals(295_001_234, newOffer.getPrice());
        assertEquals(10_000_000, newOffer.getAmount());
        assertEquals(5_000_000, newOffer.getMinAmount());
        assertEquals(1_500_000, newOffer.getBuyerSecurityDeposit());
        assertEquals(eurAccount.getId(), newOffer.getPaymentAccountId());
        assertEquals(BTC, newOffer.getBaseCurrencyCode());
        assertEquals(EUR, newOffer.getCounterCurrencyCode());
        assertFalse(newOffer.getIsCurrencyForMakerFeeBtc());

        newOffer = aliceClient.getMyOffer(newOfferId);
        assertTrue(newOffer.getIsMyOffer());
        assertFalse(newOffer.getIsMyPendingOffer());
        assertEquals(newOfferId, newOffer.getId());
        assertEquals(SELL.name(), newOffer.getDirection());
        assertFalse(newOffer.getUseMarketBasedPrice());
        assertEquals(295_001_234, newOffer.getPrice());
        assertEquals(10_000_000, newOffer.getAmount());
        assertEquals(5_000_000, newOffer.getMinAmount());
        assertEquals(1_500_000, newOffer.getBuyerSecurityDeposit());
        assertEquals(eurAccount.getId(), newOffer.getPaymentAccountId());
        assertEquals(BTC, newOffer.getBaseCurrencyCode());
        assertEquals(EUR, newOffer.getCounterCurrencyCode());
        assertFalse(newOffer.getIsCurrencyForMakerFeeBtc());
    }
}",0,64 2000 64 2001 64 2002 40 2003 46 2004 46 587 41 777 587 2005 650 2006 123 773 809 657 2007 2008 61 2009 59 64 2010 64 2011 40 1501 41 777 865 2012 40 41 123 2013 2014 61 2015 40 2016 44 362 41 59 2017 2018 61 2016 46 2019 40 2020 46 2021 40 41 44 362 44 1502 44 1502 44 362 44 2022 40 41 44 2014 46 2023 40 41 44 2008 41 59 2024 46 2025 40 362 44 2026 46 2027 40 2018 41 41 59 2028 40 2018 46 2029 40 41 41 59 2028 40 2018 46 2030 40 41 41 59 2007 2031 61 2018 46 2023 40 41 59 2032 40 362 44 2031 41 59 2033 40 2020 46 2021 40 41 44 2018 46 2034 40 41 41 59 2035 40 2018 46 2036 40 41 41 59 2033 40 1504 44 2018 46 2037 40 41 41 59 2033 40 1502 44 2018 46 2038 40 41 41 59 2033 40 1502 44 2018 46 2039 40 41 41 59 2033 40 1501 44 2018 46 2040 40 41 41 59 2033 40 2014 46 2023 40 41 44 2018 46 2041 40 41 41 59 2033 40 2042 44 2018 46 2043 40 41 41 59 2033 40 362 44 2018 46 2044 40 41 41 59 2035 40 2018 46 2045 40 41 41 59 2018 61 2016 46 2046 40 2031 41 59 2028 40 2018 46 2029 40 41 41 59 2035 40 2018 46 2030 40 41 41 59 2033 40 2031 44 2018 46 2023 40 41 41 59 2033 40 2020 46 2021 40 41 44 2018 46 2034 40 41 41 59 2035 40 2018 46 2036 40 41 41 59 2033 40 1504 44 2018 46 2037 40 41 41 59 2033 40 1502 44 2018 46 2038 40 41 41 59 2033 40 1502 44 2018 46 2039 40 41 41 59 2033 40 1501 44 2018 46 2040 40 41 41 59 2033 40 2014 46 2023 40 41 44 2018 46 2041 40 41 41 59 2033 40 2042 44 2018 46 2043 40 41 41 59 2033 40 362 44 2018 46 2044 40 41 41 59 2035 40 2018 46 2045 40 41 41 59 125 64 2010 64 2011 40 1502 41 777 865 2047 40 41 123 2048 2049 61 2050 40 2051 44 362 41 59 2052 2053 61 2051 46 2054 40 2055 46 2056 40 41 44 362 44 1502 44 1502 44 362 44 2057 40 41 44 2049 46 2058 40 41 44 2008 41 59 2059 46 2060 40 362 44 2061 46 2062 40 2053 41 41 59 2063 40 2053 46 2064 40 41 41 59 2063 40 2053 46 2065 40 41 41 59 2007 2066 61 2053 46 2058 40 41 59 2067 40 362 44 2066 41 59 2068 40 2055 46 2056 40 41 44 2053 46 2069 40 41 41 59 2070 40 2053 46 2071 40 41 41 59 2068 40 1504 44 2053 46 2072 40 41 41 59 2068 40 1502 44 2053 46 2073 40 41 41 59 2068 40 1502 44 2053 46 2074 40 41 41 59 2068 40 1501 44 2053 46 2075 40 41 41 59 2068 40 2049 46 2058 40 41 44 2053 46 2076 40 41 41 59 2068 40 2077 44 2053 46 2078 40 41 41 59 2068 40 2079 44 2053 46 2080 40 41 41 59 2070 40 2053 46 2081 40 41 41 59 2053 61 2051 46 2082 40 2066 41 59 2063 40 2053 46 2064 40 41 41 59 2070 40 2053 46 2065 40 41 41 59 2068 40 2066 44 2053 46 2058 40 41 41 59 2068 40 2055 46 2056 40 41 44 2053 46 2069 40 41 41 59 2070 40 2053 46 2071 40 41 41 59 2068 40 1504 44 2053 46 2072 40 41 41 59 2068 40 1502 44 2053 46 2073 40 41 41 59 2068 40 1502 44 2053 46 2074 40 41 41 59 2068 40 1501 44 2053 46 2075 40 41 41 59 2068 40 2049 46 2058 40 41 44 2053 46 2076 40 41 41 59 2068 40 2077 44 2053 46 2078 40 41 41 59 2068 40 2079 44 2053 46 2080 40 41 41 59 2070 40 2053 46 2081 40 41 41 59 125 64 2010 64 2011 40 1502 41 777 865 2083 40 41 123 2084 2085 61 2086 40 2087 44 362 41 59 2088 2089 61 2087 46 2090 40 2091 46 2092 40 41 44 362 44 1502 44 1502 44 362 44 2093 40 41 44 2085 46 2094 40 41 44 2008 41 59 2095 46 2096 40 362 44 2097 46 2098 40 2089 41 41 59 2099 40 2089 46 2100 40 41 41 59 2099 40 2089 46 2101 40 41 41 59 2007 2102 61 2089 46 2094 40 41 59 2103 40 362 44 2102 41 59 2104 40 2091 46 2092 40 41 44 2089 46 2105 40 41 41 59 2106 40 2089 46 2107 40 41 41 59 2104 40 1504 44 2089 46 2108 40 41 41 59 2104 40 1502 44 2089 46 2109 40 41 41 59 2104 40 1502 44 2089 46 2110 40 41 41 59 2104 40 1501 44 2089 46 2111 40 41 41 59 2104 40 2085 46 2094 40 41 44 2089 46 2112 40 41 41 59 2104 40 2113 44 2089 46 2114 40 41 41 59 2104 40 2115 44 2089 46 2116 40 41 41 59 2106 40 2089 46 2117 40 41 41 59 2089 61 2087 46 2118 40 2102 41 59 2099 40 2089 46 2100 40 41 41 59 2106 40 2089 46 2101 40 41 41 59 2104 40 2102 44 2089 46 2094 40 41 41 59 2104 40 2091 46 2092 40 41 44 2089 46 2105 40 41 41 59 2106 40 2089 46 2107 40 41 41 59 2104 40 1504 44 2089 46 2108 40 41 41 59 2104 40 1502 44 2089 46 2109 40 41 41 59 2104 40 1502 44 2089 46 2110 40 41 41 59 2104 40 1501 44 2089 46 2111 40 41 41 59 2104 40 2085 46 2094 40 41 44 2089 46 2112 40 41 41 59 2104 40 2113 44 2089 46 2114 40 41 41 59 2104 40 2115 44 2089 46 2116 40 41 41 59 2106 40 2089 46 2117 40 41 41 59 125 125 ,"{'AvgLine': 44, 'CountLine': 142, 'CountStmt': 98, 'MaxNesting': 0, 'AvgLineCode': 42, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 93, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 132, 'CountStmtDecl': 14, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountSemicolon': 94, 'CountDeclMethod': 3, 'CountLineCodeExe': 115, 'CountLineComment': 0, 'CountClassCoupled': 11, 'CountClassDerived': 0, 'CountLineCodeDecl': 26, 'CountDeclMethodAll': 35, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 11, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2938,Java,"public class BitDaricTest extends AbstractAssetTest {
    public BitDaricTest() {
        super(new BitDaric());
    }
    @Test
    public void testValidAddresses() {
        assertValidAddress(""RKWuQUtmV3em1MyB7QKdshgDEAwKQXuifa"");
        assertValidAddress(""RG9YuDw7fa21a8h4E3Z2z2tgHrFNN27NnG"");
    }
    @Test
    public void testInvalidAddresses() {
        assertInvalidAddress(""17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem"");
        assertInvalidAddress(""38NwrYsD1HxQW5zfLT0QcUUXGMPvQgzTSn"");
        assertInvalidAddress(""8tP9rh3SH6n9cSLmV22vnSNNw56LKGpLrB"");
        assertInvalidAddress(""8Zbvjr"");
    }
}",0,777 587 2000 650 2001 123 777 2000 40 41 123 818 40 744 2002 40 41 41 59 125 64 2003 777 865 2004 40 41 123 2005 40 362 41 59 2005 40 362 41 59 125 64 2003 777 865 2006 40 41 123 2007 40 362 41 59 2007 40 362 41 59 2007 40 362 41 59 2007 40 362 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 17, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 7, 'CountDeclMethod': 3, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
3349,Java,"public class RestartUtil {
    private static final Logger log = LoggerFactory.getLogger(RestartUtil.class);

    /**
     * Sun property pointing the main class and its arguments.
     * Might not be defined on non Hotspot VM implementations.
     */
    public static final String SUN_JAVA_COMMAND = ""sun.java.command"";

    public static void restartApplication(String logPath) throws IOException {
        try {
            String java = System.getProperty(""java.home"") + ""/bin/java"";
            List<String> vmArguments = ManagementFactory.getRuntimeMXBean().getInputArguments();
            StringBuilder vmArgsOneLine = new StringBuilder();
            // if it's the agent argument : we ignore it otherwise the
// address of the old application and the new one will be in conflict
            vmArguments.stream().filter(arg -> !arg.contains(""-agentlib"")).forEach(arg -> {
                vmArgsOneLine.append(arg);
                vmArgsOneLine.append("" "");
            });
            // init the command to execute, add the vm args
            final StringBuilder cmd = new StringBuilder(java + "" "" + vmArgsOneLine);

            // program main and program arguments
            String[] mainCommand = System.getProperty(SUN_JAVA_COMMAND).split("" "");
            // program main is a jar
            if (mainCommand[0].endsWith("".jar"")) {
                // if it's a jar, add -jar mainJar
                cmd.append(""-jar "").append(new File(mainCommand[0]).getPath());
            } else {
                // else it's a .class, add the classpath and mainClass
                cmd.append(""-cp \"""").append(System.getProperty(""java.class.path"")).append(""\"" "").append(mainCommand[0]);
            }
            // finally add program arguments
            for (int i = 1; i < mainCommand.length; i++) {
                cmd.append("" "");
                cmd.append(mainCommand[i]);
            }

            try {
                final String command = ""nohup "" + cmd.toString() + "" >/dev/null 2>"" + logPath + "" &"";
                log.warn(""\n\n############################################################\n"" +
                                ""Executing cmd for restart: {}"" +
                                ""\n############################################################\n\n"",
                        command);
                Runtime.getRuntime().exec(command);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (Exception e) {
            throw new IOException(""Error while trying to restart the application"", e);
        }
    }
}",0,777 587 2000 123 773 809 657 2001 2002 61 2003 46 2004 40 2000 46 587 41 59 306 777 809 657 2005 2006 61 362 59 777 809 865 2007 40 2005 2008 41 826 2009 123 830 123 2005 2010 61 2011 46 2012 40 362 41 43 362 59 2013 60 2005 62 2014 61 2015 46 2016 40 41 46 2017 40 41 59 2018 2019 61 744 2018 40 41 59 330 330 2014 46 2020 40 41 46 2021 40 2022 45 62 33 2022 46 2023 40 362 41 41 46 2024 40 2022 45 62 123 2019 46 2025 40 2022 41 59 2019 46 2025 40 362 41 59 125 41 59 330 657 2018 2026 61 744 2018 40 2010 43 362 43 2019 41 59 330 2005 91 93 2027 61 2011 46 2012 40 2006 41 46 2028 40 362 41 59 330 688 40 2027 91 1500 93 46 2029 40 362 41 41 123 330 2026 46 2030 40 362 41 46 2030 40 744 2031 40 2027 91 1500 93 41 46 2032 40 41 41 59 125 630 123 330 2026 46 2033 40 362 41 46 2033 40 2011 46 2012 40 362 41 41 46 2033 40 362 41 46 2033 40 2027 91 1500 93 41 59 125 330 664 40 704 2034 61 1501 59 2034 60 2027 46 2035 59 2034 349 41 123 2026 46 2036 40 362 41 59 2026 46 2036 40 2027 91 2034 93 41 59 125 830 123 657 2005 2037 61 362 43 2026 46 2038 40 41 43 362 43 2008 43 362 59 2002 46 2039 40 362 43 362 43 362 44 2037 41 59 2040 46 2041 40 41 46 2042 40 2037 41 59 125 580 40 2009 2043 41 123 2043 46 2044 40 41 59 125 125 580 40 2045 2046 41 123 825 744 2009 40 362 44 2046 41 59 125 125 125 ,"{'AvgLine': 44, 'CountLine': 54, 'CountStmt': 27, 'MaxNesting': 2, 'AvgLineCode': 34, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 5, 'CountLineCode': 38, 'CountStmtDecl': 11, 'MaxCyclomatic': 5, 'SumCyclomatic': 7, 'AvgLineComment': 8, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountSemicolon': 21, 'CountDeclMethod': 1, 'CountLineCodeExe': 30, 'CountLineComment': 12, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.32', 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 5, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 2, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 9, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2595,Java,"            PathNode pn = new PathNode(0, 0, 0, new Goal() {
                @Override
                public boolean isInGoal(int x, int y, int z) {
                    return false;
                }

                @Override
                public double heuristic(int x, int y, int z) {
                    return 0;
                }
            });",0,2000 2001 61 744 2000 40 1500 44 1500 44 1500 44 744 2002 40 41 123 64 2003 777 570 2004 40 704 2005 44 704 2006 44 704 2007 41 123 792 2008 59 125 64 2003 777 625 2009 40 704 2005 44 704 2006 44 704 2007 41 123 792 1500 59 125 125 41 59 ,"{'AvgLine': 4, 'CountLine': 10, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 9, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 1, 'CountSemicolon': 2, 'CountDeclMethod': 2, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 1, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2953,Java,"                new Callback<>() {
                    @Override
                    public TableCell<Dispute, Dispute> call(TableColumn<Dispute, Dispute> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    Button button = getRegularIconButton(MaterialDesignIcon.GAVEL);
                                    button.setOnAction(e -> {
                                        tableView.getSelectionModel().select(this.getIndex());
                                        handleOnProcessDispute(item);
                                        item.setDisputeSeen(senderFlag());
                                        newBadgeByDispute.get(item.getId()).setVisible(item.isNew());
                                    });
                                    HBox hBox = new HBox(button);
                                    hBox.setAlignment(Pos.CENTER);
                                    setGraphic(hBox);
                                } else {
                                    setGraphic(null);
                                }
                            }
                        };
                    }
                });",0,744 2000 60 62 40 41 123 64 2001 777 2002 60 2003 44 2003 62 2004 40 2005 60 2003 44 2003 62 2006 41 123 792 744 2002 60 62 40 41 123 64 2001 777 865 2007 40 657 2003 2008 44 570 2009 41 123 818 46 2007 40 2008 44 2009 41 59 688 40 2008 340 2010 307 33 2009 41 123 2011 2012 61 2013 40 2014 46 2015 41 59 2012 46 2016 40 2017 45 62 123 2018 46 2019 40 41 46 2020 40 823 46 2021 40 41 41 59 2022 40 2008 41 59 2008 46 2023 40 2024 40 41 41 59 2025 46 2026 40 2008 46 2027 40 41 41 46 2028 40 2008 46 2029 40 41 41 59 125 41 59 2030 2031 61 744 2030 40 2012 41 59 2031 46 2032 40 2033 46 2034 41 59 2035 40 2031 41 59 125 630 123 2036 40 2010 41 59 125 125 125 59 125 125 41 59 ,"{'AvgLine': 23, 'CountLine': 24, 'CountStmt': 15, 'MaxNesting': 0, 'AvgLineCode': 23, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 24, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 12, 'CountDeclMethod': 1, 'CountLineCodeExe': 21, 'CountLineComment': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2761,Java,"@Slf4j
public abstract class SendMailboxMessageTask extends TradeTask {
    public SendMailboxMessageTask(TaskRunner<Trade> taskHandler, Trade trade) {
        super(taskHandler, trade);
    }

    protected abstract TradeMailboxMessage getTradeMailboxMessage(String id);

    protected abstract void setStateSent();

    protected abstract void setStateArrived();

    protected abstract void setStateStoredInMailbox();

    protected abstract void setStateFault();

    @Override
    protected void run() {
        try {
            runInterceptHook();
            String id = processModel.getOfferId();
            TradeMailboxMessage message = getTradeMailboxMessage(id);
            setStateSent();
            NodeAddress peersNodeAddress = trade.getTradingPeerNodeAddress();
            log.info(""Send {} to peer {}. tradeId={}, uid={}"",
                    message.getClass().getSimpleName(), peersNodeAddress, message.getTradeId(), message.getUid());

            processModel.getP2PService().getMailboxMessageService().sendEncryptedMailboxMessage(
                    peersNodeAddress,
                    processModel.getTradePeer().getPubKeyRing(),
                    message,
                    new SendMailboxMessageListener() {
                        @Override
                        public void onArrived() {
                            log.info(""{} arrived at peer {}. tradeId={}, uid={}"",
                                    message.getClass().getSimpleName(), peersNodeAddress, message.getTradeId(), message.getUid());
                            setStateArrived();
                            complete();
                        }

                        @Override
                        public void onStoredInMailbox() {
                            log.info(""{} stored in mailbox for peer {}. tradeId={}, uid={}"",
                                    message.getClass().getSimpleName(), peersNodeAddress, message.getTradeId(), message.getUid());
                            SendMailboxMessageTask.this.onStoredInMailbox();
                        }

                        @Override
                        public void onFault(String errorMessage) {
                            log.error(""{} failed: Peer {}. tradeId={}, uid={}, errorMessage={}"",
                                    message.getClass().getSimpleName(), peersNodeAddress, message.getTradeId(), message.getUid(), errorMessage);
                            SendMailboxMessageTask.this.onFault(errorMessage, message);
                        }
                    }
            );
        } catch (Throwable t) {
            failed(t);
        }
    }

    protected void onStoredInMailbox() {
        setStateStoredInMailbox();
        complete();
    }

    protected void onFault(String errorMessage, TradeMessage message) {
        setStateFault();
        appendToErrorMessage(""Sending message failed: message="" + message + ""\nerrorMessage="" + errorMessage);
        failed(errorMessage);
    }
}",0,64 2000 777 539 587 2001 650 2002 123 777 2001 40 2003 60 2004 62 2005 44 2004 2006 41 123 818 40 2005 44 2006 41 59 125 775 539 2007 2008 40 2009 2010 41 59 775 539 865 2011 40 41 59 775 539 865 2012 40 41 59 775 539 865 2013 40 41 59 775 539 865 2014 40 41 59 64 2015 775 865 2016 40 41 123 830 123 2017 40 41 59 2009 2010 61 2018 46 2019 40 41 59 2007 2020 61 2008 40 2010 41 59 2011 40 41 59 2021 2022 61 2006 46 2023 40 41 59 2024 46 2025 40 362 44 2020 46 2026 40 41 46 2027 40 41 44 2022 44 2020 46 2028 40 41 44 2020 46 2029 40 41 41 59 2018 46 2030 40 41 46 2031 40 41 46 2032 40 2022 44 2018 46 2033 40 41 46 2034 40 41 44 2020 44 744 2035 40 41 123 64 2015 777 865 2036 40 41 123 2024 46 2025 40 362 44 2020 46 2026 40 41 46 2027 40 41 44 2022 44 2020 46 2028 40 41 44 2020 46 2029 40 41 41 59 2012 40 41 59 2037 40 41 59 125 64 2015 777 865 2038 40 41 123 2024 46 2025 40 362 44 2020 46 2026 40 41 46 2027 40 41 44 2022 44 2020 46 2028 40 41 44 2020 46 2029 40 41 41 59 2001 46 823 46 2038 40 41 59 125 64 2015 777 865 2039 40 2009 2040 41 123 2024 46 2041 40 362 44 2020 46 2026 40 41 46 2027 40 41 44 2022 44 2020 46 2028 40 41 44 2020 46 2029 40 41 44 2040 41 59 2001 46 823 46 2039 40 2040 44 2020 41 59 125 125 41 59 125 580 40 2042 2043 41 123 2044 40 2043 41 59 125 125 775 865 2045 40 41 123 2013 40 41 59 2046 40 41 59 125 775 865 2047 40 2009 2048 44 2049 2050 41 123 2014 40 41 59 2051 40 362 43 2050 43 362 43 2048 41 59 2052 40 2048 41 59 125 125 ,"{'AvgLine': 13, 'CountLine': 71, 'CountStmt': 35, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 60, 'CountStmtDecl': 16, 'MaxCyclomatic': 2, 'SumCyclomatic': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountSemicolon': 26, 'CountDeclMethod': 9, 'CountLineCodeExe': 38, 'CountLineComment': 0, 'CountClassCoupled': 13, 'CountClassDerived': 6, 'CountLineCodeDecl': 15, 'CountDeclMethodAll': 23, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 8, 'CountClassCoupledModified': 13, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2827,Java,"        return new ListCell<>() {
            @Override
            protected void updateItem(PriceFeedComboBoxItem item, boolean empty) {
                super.updateItem(item, empty);

                if (!empty && item != null) {
                    textProperty().bind(item.displayStringProperty);
                } else {
                    textProperty().unbind();
                }
            }
        };",0,792 744 2000 60 62 40 41 123 64 2001 775 865 2002 40 2003 2004 44 570 2005 41 123 818 46 2002 40 2004 44 2005 41 59 688 40 33 2005 307 2004 340 2006 41 123 2007 40 41 46 2008 40 2004 46 2009 41 59 125 630 123 2010 40 41 46 2011 40 41 59 125 125 125 59 ,"{'AvgLine': 10, 'CountLine': 11, 'CountStmt': 5, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 4, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 2, 'CountLineCode': 10, 'CountStmtDecl': 1, 'MaxCyclomatic': 2, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 3, 'CountDeclMethod': 1, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 0, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2882,Java,"@Slf4j
@Value
@EqualsAndHashCode(callSuper = true)
class ProposalStateBlockListItem extends StateBlockListItem<ProposalStateHash, ProposalStateBlock> {
    private final String numProposals;

    ProposalStateBlockListItem(ProposalStateBlock stateBlock, int cycleIndex) {
        super(stateBlock, cycleIndex);

        numProposals = String.valueOf(stateBlock.getNumProposals());
    }
}",0,64 2000 64 2001 64 2002 40 2003 61 2004 41 587 2005 650 2006 60 2007 44 2008 62 123 773 657 2009 2010 59 2005 40 2008 2011 44 704 2012 41 123 818 40 2011 44 2012 41 59 2010 61 2009 46 2013 40 2011 46 2014 40 41 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 12, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 3, 'CountDeclMethod': 1, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0}"
2789,Java,"public class AddressTextField extends AnchorPane {
    private static final Logger log = LoggerFactory.getLogger(AddressTextField.class);

    private final StringProperty address = new SimpleStringProperty();
    private final StringProperty paymentLabel = new SimpleStringProperty();
    private final ObjectProperty<Coin> amountAsCoin = new SimpleObjectProperty<>(Coin.ZERO);
    private boolean wasPrimaryButtonDown;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    public AddressTextField(String label) {
        JFXTextField textField = new BisqTextField();
        textField.setId(""address-text-field"");
        textField.setEditable(false);
        textField.setLabelFloat(true);
        textField.setPromptText(label);

        textField.textProperty().bind(address);
        String tooltipText = Res.get(""addressTextField.openWallet"");
        textField.setTooltip(new Tooltip(tooltipText));

        textField.setOnMousePressed(event -> wasPrimaryButtonDown = event.isPrimaryButtonDown());
        textField.setOnMouseReleased(event -> {
            if (wasPrimaryButtonDown)
                GUIUtil.showFeeInfoBeforeExecute(AddressTextField.this::openWallet);

            wasPrimaryButtonDown = false;
        });

        textField.focusTraversableProperty().set(focusTraversableProperty().get());
        Label extWalletIcon = new Label();
        extWalletIcon.setLayoutY(3);
        extWalletIcon.getStyleClass().addAll(""icon"", ""highlight"");
        extWalletIcon.setTooltip(new Tooltip(tooltipText));
        AwesomeDude.setIcon(extWalletIcon, AwesomeIcon.SIGNIN);
        extWalletIcon.setOnMouseClicked(e -> GUIUtil.showFeeInfoBeforeExecute(this::openWallet));

        Label copyIcon = new Label();
        copyIcon.setLayoutY(3);
        copyIcon.getStyleClass().addAll(""icon"", ""highlight"");
        Tooltip.install(copyIcon, new Tooltip(Res.get(""addressTextField.copyToClipboard"")));
        AwesomeDude.setIcon(copyIcon, AwesomeIcon.COPY);
        copyIcon.setOnMouseClicked(e -> GUIUtil.showFeeInfoBeforeExecute(() -> {
            if (address.get() != null && address.get().length() > 0)
                Utilities.copyToClipboard(address.get());
        }));

        AnchorPane.setRightAnchor(copyIcon, 30.0);
        AnchorPane.setRightAnchor(extWalletIcon, 5.0);
        AnchorPane.setRightAnchor(textField, 55.0);
        AnchorPane.setLeftAnchor(textField, 0.0);

        getChildren().addAll(textField, copyIcon, extWalletIcon);
    }

    private void openWallet() {
        try {
            Utilities.openURI(URI.create(getBitcoinURI()));
        } catch (Exception e) {
            log.warn(e.getMessage());
            new Popup().warning(Res.get(""addressTextField.openWallet.failed"")).show();
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters/Setters
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void setAddress(String address) {
        this.address.set(address);
    }

    public String getAddress() {
        return address.get();
    }

    public StringProperty addressProperty() {
        return address;
    }

    public Coin getAmountAsCoin() {
        return amountAsCoin.get();
    }

    public ObjectProperty<Coin> amountAsCoinProperty() {
        return amountAsCoin;
    }

    public void setAmountAsCoin(Coin amountAsCoin) {
        this.amountAsCoin.set(amountAsCoin);
    }

    public String getPaymentLabel() {
        return paymentLabel.get();
    }

    public StringProperty paymentLabelProperty() {
        return paymentLabel;
    }

    public void setPaymentLabel(String paymentLabel) {
        this.paymentLabel.set(paymentLabel);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Private
    ///////////////////////////////////////////////////////////////////////////////////////////

    private String getBitcoinURI() {
        if (amountAsCoin.get().isNegative()) {
            log.warn(""Amount must not be negative"");
            setAmountAsCoin(Coin.ZERO);
        }
        return GUIUtil.getBitcoinURI(address.get(), amountAsCoin.get(),
                paymentLabel.get());
    }
}",0,777 587 2000 650 2001 123 773 809 657 2002 2003 61 2004 46 2005 40 2000 46 587 41 59 773 657 2006 2007 61 744 2008 40 41 59 773 657 2006 2009 61 744 2008 40 41 59 773 657 2010 60 2011 62 2012 61 744 2013 60 62 40 2011 46 2014 41 59 773 570 2015 59 331 330 331 777 2000 40 2016 2017 41 123 2018 2019 61 744 2020 40 41 59 2019 46 2021 40 362 41 59 2019 46 2022 40 2023 41 59 2019 46 2024 40 2025 41 59 2019 46 2026 40 2017 41 59 2019 46 2027 40 41 46 2028 40 2007 41 59 2016 2029 61 2030 46 2031 40 362 41 59 2019 46 2032 40 744 2033 40 2029 41 41 59 2019 46 2034 40 2035 45 62 2015 61 2035 46 2036 40 41 41 59 2019 46 2037 40 2035 45 62 123 688 40 2015 41 2038 46 2039 40 2000 46 823 58 58 2040 41 59 2015 61 2023 59 125 41 59 2019 46 2041 40 41 46 2042 40 2041 40 41 46 2031 40 41 41 59 2043 2044 61 744 2043 40 41 59 2044 46 2045 40 1502 41 59 2044 46 2046 40 41 46 2047 40 362 44 362 41 59 2044 46 2032 40 744 2033 40 2029 41 41 59 2048 46 2049 40 2044 44 2050 46 2051 41 59 2044 46 2052 40 2053 45 62 2054 46 2055 40 823 58 58 2056 41 41 59 2043 2057 61 744 2043 40 41 59 2057 46 2045 40 1502 41 59 2057 46 2046 40 41 46 2047 40 362 44 362 41 59 2033 46 2058 40 2057 44 744 2033 40 2030 46 2031 40 362 41 41 41 59 2048 46 2049 40 2057 44 2050 46 2059 41 59 2057 46 2052 40 2053 45 62 2054 46 2055 40 40 41 45 62 123 688 40 2007 46 2031 40 41 340 2060 307 2007 46 2031 40 41 46 2061 40 41 62 1500 41 2062 46 2063 40 2007 46 2031 40 41 41 59 125 41 41 59 2001 46 2064 40 2057 44 1503 41 59 2001 46 2064 40 2044 44 1502 41 59 2001 46 2064 40 2019 44 1503 41 59 2001 46 2065 40 2019 44 1500 41 59 2066 40 41 46 2047 40 2019 44 2057 44 2044 41 59 125 773 865 2067 40 41 123 830 123 2068 46 2069 40 2070 46 2071 40 2072 40 41 41 41 59 125 580 40 2073 2074 41 123 2003 46 2075 40 2074 46 2076 40 41 41 59 744 2077 40 41 46 2078 40 2079 46 2080 40 362 41 41 46 2081 40 41 59 125 125 331 330 331 777 865 2082 40 2016 2007 41 123 823 46 2007 46 2083 40 2007 41 59 125 777 2016 2084 40 41 123 792 2007 46 2085 40 41 59 125 777 2006 2086 40 41 123 792 2007 59 125 777 2011 2087 40 41 123 792 2012 46 2088 40 41 59 125 777 2010 60 2011 62 2089 40 41 123 792 2012 59 125 777 865 2090 40 2011 2012 41 123 823 46 2012 46 2091 40 2012 41 59 125 777 2016 2092 40 41 123 792 2009 46 2093 40 41 59 125 777 2006 2094 40 41 123 792 2009 59 125 777 865 2095 40 2016 2009 41 123 823 46 2009 46 2096 40 2009 41 59 125 331 330 331 773 2016 2097 40 41 123 688 40 2012 46 2098 40 41 46 2099 40 41 41 123 2003 46 2100 40 362 41 59 2090 40 2011 46 2014 41 59 125 792 2101 46 2097 40 2007 46 2098 40 41 44 2012 46 2098 40 41 44 2009 46 2098 40 41 41 59 125 125 ,"{'AvgLine': 7, 'CountLine': 122, 'CountStmt': 68, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 54, 'MaxEssential': 1, 'SumEssential': 16, 'AvgCyclomatic': 1, 'CountLineCode': 87, 'CountStmtDecl': 22, 'MaxCyclomatic': 2, 'SumCyclomatic': 19, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 26, 'CountSemicolon': 51, 'CountDeclMethod': 12, 'CountLineCodeExe': 58, 'CountLineComment': 9, 'CountClassCoupled': 20, 'CountClassDerived': 0, 'CountLineCodeDecl': 22, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.10', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 10, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 72, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 20, 'CountDeclInstanceVariable': 4, 'PercentLackOfCohesionModified': 66}"
2908,Java,"public class ResourceNotFoundException extends Exception {
    public ResourceNotFoundException(String path) {
        super(""Resource not found: path = "" + path);
    }
}",0,777 587 2000 650 2001 123 777 2000 40 2002 2003 41 123 818 40 362 43 2003 41 59 125 125 ,"{'AvgLine': 3, 'CountLine': 5, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 5, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 1, 'CountDeclMethod': 1, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 1, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
4131,Java,"public abstract class GeneralSepaForm extends PaymentMethodForm {

    static final String BIC = ""BIC"";
    static final String IBAN = ""IBAN"";

    final List<CheckBox> euroCountryCheckBoxes = new ArrayList<>();
    final List<CheckBox> nonEuroCountryCheckBoxes = new ArrayList<>();
    private TextField currencyTextField;
    InputTextField ibanInputTextField;

    private FiatCurrency euroCurrency = CurrencyUtil.getFiatCurrency(""EUR"").get();

    GeneralSepaForm(PaymentAccount paymentAccount, AccountAgeWitnessService accountAgeWitnessService, InputValidator inputValidator, GridPane gridPane, int gridRow, CoinFormatter formatter) {
        super(paymentAccount, accountAgeWitnessService, inputValidator, gridPane, gridRow, formatter);
        paymentAccount.setSingleTradeCurrency(euroCurrency);
    }

    @Override
    protected void autoFillNameTextField() {
        if (useCustomAccountNameToggleButton != null && !useCustomAccountNameToggleButton.isSelected()) {
            TradeCurrency singleTradeCurrency = this.paymentAccount.getSingleTradeCurrency();
            String currency = singleTradeCurrency != null ? singleTradeCurrency.getCode() : null;
            if (currency != null) {
                String iban = ibanInputTextField.getText();
                if (iban.length() > 9)
                    iban = StringUtils.abbreviate(iban, 9);
                String method = Res.get(paymentAccount.getPaymentMethod().getId());
                CountryBasedPaymentAccount countryBasedPaymentAccount = (CountryBasedPaymentAccount) this.paymentAccount;
                String country = countryBasedPaymentAccount.getCountry() != null ?
                        countryBasedPaymentAccount.getCountry().code : null;
                if (country != null)
                    accountNameTextField.setText(method.concat("" ("").concat(currency).concat(""/"").concat(country)
                            .concat(""): "").concat(iban));
            }
        }
    }

    void setCountryComboBoxAction(ComboBox<Country> countryComboBox, CountryBasedPaymentAccount paymentAccount) {
        countryComboBox.setOnAction(e -> {
            Country selectedItem = countryComboBox.getSelectionModel().getSelectedItem();
            paymentAccount.setCountry(selectedItem);

            updateCountriesSelection(euroCountryCheckBoxes);
            updateCountriesSelection(nonEuroCountryCheckBoxes);
            updateFromInputs();
        });
    }

    void addCountriesGrid(String title, List<CheckBox> checkBoxList,
                          List<Country> dataProvider) {
        FlowPane flowPane = FormBuilder.addTopLabelFlowPane(gridPane, ++gridRow, title, 0).second;

        flowPane.setId(""flow-pane-checkboxes-bg"");

        dataProvider.forEach(country ->
                fillUpFlowPaneWithCountries(checkBoxList, flowPane, country));
        updateCountriesSelection(checkBoxList);
    }

    ComboBox<Country> addCountrySelection() {
        HBox hBox = new HBox();

        hBox.setSpacing(10);
        ComboBox<Country> countryComboBox = new JFXComboBox<>();
        currencyTextField = new JFXTextField("""");
        currencyTextField.setEditable(false);
        currencyTextField.setMouseTransparent(true);
        currencyTextField.setFocusTraversable(false);
        currencyTextField.setMinWidth(300);

        currencyTextField.setVisible(true);
        currencyTextField.setManaged(true);
        currencyTextField.setText(Res.get(""payment.currencyWithSymbol"", euroCurrency.getNameAndCode()));

        hBox.getChildren().addAll(countryComboBox, currencyTextField);

        addTopLabelWithVBox(gridPane, ++gridRow, Res.get(""payment.bank.country""), hBox, 0);

        countryComboBox.setPromptText(Res.get(""payment.select.bank.country""));
        countryComboBox.setConverter(new StringConverter<>() {
            @Override
            public String toString(Country country) {
                return country.name + "" ("" + country.code + "")"";
            }

            @Override
            public Country fromString(String s) {
                return null;
            }
        });
        return countryComboBox;
    }

    abstract void updateCountriesSelection(List<CheckBox> checkBoxList);

}",0,777 539 587 2000 650 2001 123 809 657 2002 2003 61 362 59 809 657 2002 2004 61 362 59 657 2005 60 2006 62 2007 61 744 2008 60 62 40 41 59 657 2005 60 2006 62 2009 61 744 2008 60 62 40 41 59 773 2010 2011 59 2012 2013 59 773 2014 2015 61 2016 46 2017 40 362 41 46 2018 40 41 59 2000 40 2019 2020 44 2021 2022 44 2023 2024 44 2025 2026 44 704 2027 44 2028 2029 41 123 818 40 2020 44 2022 44 2024 44 2026 44 2027 44 2029 41 59 2020 46 2030 40 2015 41 59 125 64 2031 775 865 2032 40 41 123 688 40 2033 340 2034 307 33 2033 46 2035 40 41 41 123 2036 2037 61 823 46 2020 46 2038 40 41 59 2002 2039 61 2037 340 2034 63 2037 46 2040 40 41 58 2034 59 688 40 2039 340 2034 41 123 2002 2041 61 2013 46 2042 40 41 59 688 40 2041 46 2043 40 41 62 1502 41 2041 61 2044 46 2045 40 2041 44 1502 41 59 2002 2046 61 2047 46 2018 40 2020 46 2048 40 41 46 2049 40 41 41 59 2050 2051 61 40 2050 41 823 46 2020 59 2002 2052 61 2051 46 2053 40 41 340 2034 63 2051 46 2053 40 41 46 2054 58 2034 59 688 40 2052 340 2034 41 2055 46 2056 40 2046 46 2057 40 362 41 46 2057 40 2039 41 46 2057 40 362 41 46 2057 40 2052 41 46 2057 40 362 41 46 2057 40 2041 41 41 59 125 125 125 865 2058 40 2059 60 2060 62 2061 44 2062 2020 41 123 2061 46 2063 40 2064 45 62 123 2060 2065 61 2061 46 2066 40 41 46 2067 40 41 59 2020 46 2068 40 2065 41 59 2069 40 2007 41 59 2069 40 2009 41 59 2070 40 41 59 125 41 59 125 865 2071 40 2002 2072 44 2005 60 2006 62 2073 44 2005 60 2060 62 2074 41 123 2075 2076 61 2077 46 2078 40 2026 44 349 2027 44 2072 44 1500 41 46 2079 59 2076 46 2080 40 362 41 59 2074 46 2081 40 2082 45 62 2083 40 2073 44 2076 44 2082 41 41 59 2084 40 2073 41 59 125 2059 60 2060 62 2085 40 41 123 2086 2087 61 744 2086 40 41 59 2087 46 2088 40 1502 41 59 2059 60 2060 62 2061 61 744 2089 60 62 40 41 59 2011 61 744 2090 40 362 41 59 2011 46 2091 40 2092 41 59 2011 46 2093 40 2094 41 59 2011 46 2095 40 2092 41 59 2011 46 2096 40 1504 41 59 2011 46 2097 40 2094 41 59 2011 46 2098 40 2094 41 59 2011 46 2099 40 2100 46 2018 40 362 44 2015 46 2101 40 41 41 41 59 2087 46 2102 40 41 46 2103 40 2061 44 2011 41 59 2104 40 2026 44 349 2027 44 2100 46 2018 40 362 41 44 2087 44 1500 41 59 2061 46 2105 40 2100 46 2018 40 362 41 41 59 2061 46 2106 40 744 2107 60 62 40 41 123 64 2031 777 2002 2108 40 2060 2109 41 123 792 2109 46 2110 43 362 43 2109 46 2111 43 362 59 125 64 2031 777 2060 2112 40 2002 2113 41 123 792 2114 59 125 125 41 59 792 2061 59 125 539 865 2115 40 2005 60 2006 62 2073 41 59 125 ,"{'AvgLine': 15, 'CountLine': 96, 'CountStmt': 58, 'MaxNesting': 3, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 44, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 77, 'CountStmtDecl': 26, 'MaxCyclomatic': 7, 'SumCyclomatic': 13, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 19, 'CountSemicolon': 46, 'CountDeclMethod': 6, 'CountLineCodeExe': 56, 'CountLineComment': 0, 'CountClassCoupled': 25, 'CountClassDerived': 2, 'CountLineCodeDecl': 27, 'CountDeclMethodAll': 29, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 84, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 2, 'CountDeclMethodDefault': 5, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 25, 'CountDeclInstanceVariable': 5, 'PercentLackOfCohesionModified': 84}"
2877,Java,"public class ProtectedStoragePayloadStub implements ProtectedStoragePayload {
    @Getter
    private PublicKey ownerPubKey;

    protected final Message messageMock;

    public ProtectedStoragePayloadStub(PublicKey ownerPubKey) {
        this.ownerPubKey = ownerPubKey;

        // Need to be able to take the hash which leverages protobuf Messages
        this.messageMock = mock(protobuf.StoragePayload.class);
        when(this.messageMock.toByteArray()).thenReturn(Sig.getPublicKeyBytes(ownerPubKey));
    }

    @Nullable
    @Override
    public Map<String, String> getExtraDataMap() {
        return null;
    }

    @Override
    public Message toProtoMessage() {
        return this.messageMock;
    }
}",0,777 587 2000 693 2001 123 64 2002 773 2003 2004 59 775 657 2005 2006 59 777 2000 40 2003 2004 41 123 823 46 2004 61 2004 59 330 823 46 2006 61 2007 40 2008 46 2009 46 587 41 59 2010 40 823 46 2006 46 2011 40 41 41 46 2012 40 2013 46 2014 40 2004 41 41 59 125 64 2015 64 2016 777 2017 60 2018 44 2018 62 2019 40 41 123 792 2020 59 125 64 2016 777 2005 2021 40 41 123 792 823 46 2006 59 125 125 ,"{'AvgLine': 5, 'CountLine': 32, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 5, 'CountSemicolon': 7, 'CountDeclMethod': 3, 'CountLineCodeExe': 5, 'CountLineComment': 8, 'CountClassCoupled': 7, 'CountClassDerived': 2, 'CountLineCodeDecl': 10, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.42', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 7, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 50}"
2807,Java,"public class GenericMessageWindow extends Overlay<GenericMessageWindow> {
    private String preamble;

    public GenericMessageWindow() {
        super();
    }

    public void show() {
        createGridPane();
        addHeadLine();
        addContent();
        addButtons();
        applyStyles();
        display();
    }

    public GenericMessageWindow preamble(String preamble) {
        this.preamble = preamble;
        return this;
    }

    private void addContent() {
        if (preamble != null) {
            Label label = addMultilineLabel(gridPane, ++rowIndex, preamble, 10);
            label.setPrefSize(Layout.INITIAL_WINDOW_WIDTH, Layout.INITIAL_WINDOW_HEIGHT * 0.1);
        }
        checkNotNull(message, ""message must not be null"");
        TextArea textArea = addTextArea(gridPane, ++rowIndex, """", 10);
        textArea.setText(message);
        textArea.setEditable(false);
        textArea.setWrapText(true);
        // sizes the textArea to fit within its parent container
        double verticalSizePercentage = ensureRange(countLines(message) / 20.0, 0.2, 0.7);
        textArea.setPrefSize(Layout.INITIAL_WINDOW_WIDTH, Layout.INITIAL_WINDOW_HEIGHT * verticalSizePercentage);
    }

    private static int countLines(String str) {
        String[] lines = str.split(""\r\n|\r|\n"");
        return  lines.length;
    }

    private static double ensureRange(double value, double min, double max) {
        return Math.min(Math.max(value, min), max);
    }
}",0,777 587 2000 650 2001 60 2000 62 123 773 2002 2003 59 777 2000 40 41 123 818 40 41 59 125 777 865 2004 40 41 123 2005 40 41 59 2006 40 41 59 2007 40 41 59 2008 40 41 59 2009 40 41 59 2010 40 41 59 125 777 2000 2003 40 2002 2003 41 123 823 46 2003 61 2003 59 792 823 59 125 773 865 2011 40 41 123 688 40 2003 340 2012 41 123 2013 2014 61 2015 40 2016 44 349 2017 44 2003 44 1502 41 59 2014 46 2018 40 2019 46 2020 44 2019 46 2021 42 1500 41 59 125 2022 40 2023 44 362 41 59 2024 2025 61 2026 40 2027 44 349 2028 44 362 44 1502 41 59 2025 46 2029 40 2023 41 59 2025 46 2030 40 2031 41 59 2025 46 2032 40 2033 41 59 330 625 2034 61 2035 40 2036 40 2023 41 47 1503 44 1500 44 1500 41 59 2025 46 2037 40 2038 46 2039 44 2038 46 2040 42 2034 41 59 125 773 809 704 2041 40 2002 2042 41 123 2002 91 93 2043 61 2042 46 2044 40 362 41 59 792 2043 46 2045 59 125 773 809 625 2046 40 625 2047 44 625 2048 44 625 2049 41 123 792 2050 46 2048 40 2050 46 2049 40 2047 44 2048 41 44 2049 41 59 125 125 ,"{'AvgLine': 6, 'CountLine': 45, 'CountStmt': 30, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 1, 'CountLineCode': 38, 'CountStmtDecl': 12, 'MaxCyclomatic': 2, 'SumCyclomatic': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountSemicolon': 22, 'CountDeclMethod': 6, 'CountLineCodeExe': 22, 'CountLineComment': 1, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountDeclMethodAll': 75, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.03', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 50}"
2932,Java,"@Slf4j
public class BuyerSubView extends TradeSubView {
    private TradeWizardItem step1;
    private TradeWizardItem step2;
    private TradeWizardItem step3;
    private TradeWizardItem step4;

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, Initialisation
    ///////////////////////////////////////////////////////////////////////////////////////////

    public BuyerSubView(PendingTradesViewModel model) {
        super(model);
    }

    @Override
    protected void activate() {
        viewStateSubscription = EasyBind.subscribe(model.getBuyerState(), this::onViewStateChanged);
        super.activate();
    }

    @Override
    protected void addWizards() {
        step1 = new TradeWizardItem(BuyerStep1View.class, Res.get(""portfolio.pending.step1.waitForConf""), ""1"");
        step2 = new TradeWizardItem(BuyerStep2View.class, Res.get(""portfolio.pending.step2_buyer.startPayment""), ""2"");
        step3 = new TradeWizardItem(BuyerStep3View.class, Res.get(""portfolio.pending.step3_buyer.waitPaymentArrived""), ""3"");
        step4 = new TradeWizardItem(BuyerStep4View.class, Res.get(""portfolio.pending.step5.completed""), ""4"");

        addWizardsToGridPane(step1);
        addLineSeparatorToGridPane();
        addWizardsToGridPane(step2);
        addLineSeparatorToGridPane();
        addWizardsToGridPane(step3);
        addLineSeparatorToGridPane();
        addWizardsToGridPane(step4);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // State
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void onViewStateChanged(PendingTradesViewModel.State viewState) {
        super.onViewStateChanged(viewState);

        if (viewState != null) {
            PendingTradesViewModel.BuyerState buyerState = (PendingTradesViewModel.BuyerState) viewState;

            step1.setDisabled();
            step2.setDisabled();
            step3.setDisabled();
            step4.setDisabled();

            switch (buyerState) {
                case UNDEFINED:
                    break;
                case STEP1:
                    showItem(step1);
                    break;
                case STEP2:
                    step1.setCompleted();
                    showItem(step2);
                    break;
                case STEP3:
                    step1.setCompleted();
                    step2.setCompleted();
                    showItem(step3);
                    break;
                case STEP4:
                    step1.setCompleted();
                    step2.setCompleted();
                    step3.setCompleted();
                    showItem(step4);
                    break;
                default:
                    log.warn(""unhandled buyerState "" + buyerState);
                    break;
            }
        }
    }
}",0,64 2000 777 587 2001 650 2002 123 773 2003 2004 59 773 2003 2005 59 773 2003 2006 59 773 2003 2007 59 331 330 331 777 2001 40 2008 2009 41 123 818 40 2009 41 59 125 64 2010 775 865 2011 40 41 123 2012 61 2013 46 2014 40 2009 46 2015 40 41 44 823 58 58 2016 41 59 818 46 2011 40 41 59 125 64 2010 775 865 2017 40 41 123 2004 61 744 2003 40 2018 46 587 44 2019 46 2020 40 362 41 44 362 41 59 2005 61 744 2003 40 2021 46 587 44 2019 46 2020 40 362 41 44 362 41 59 2006 61 744 2003 40 2022 46 587 44 2019 46 2020 40 362 41 44 362 41 59 2007 61 744 2003 40 2023 46 587 44 2019 46 2020 40 362 41 44 362 41 59 2024 40 2004 41 59 2025 40 41 59 2024 40 2005 41 59 2025 40 41 59 2024 40 2006 41 59 2025 40 41 59 2024 40 2007 41 59 125 331 330 331 64 2010 775 865 2026 40 2008 46 2027 2028 41 123 818 46 2026 40 2028 41 59 688 40 2028 340 2029 41 123 2008 46 2030 2031 61 40 2008 46 2030 41 2028 59 2004 46 2032 40 41 59 2005 46 2032 40 41 59 2006 46 2032 40 41 59 2007 46 2032 40 41 59 819 40 2031 41 123 579 2033 58 572 59 579 2034 58 2035 40 2004 41 59 572 59 579 2036 58 2004 46 2037 40 41 59 2035 40 2005 41 59 572 59 579 2038 58 2004 46 2037 40 41 59 2005 46 2037 40 41 59 2035 40 2006 41 59 572 59 579 2039 58 2004 46 2037 40 41 59 2005 46 2037 40 41 59 2006 46 2037 40 41 59 2035 40 2007 41 59 572 59 613 58 2040 46 2041 40 362 43 2031 41 59 572 59 125 125 125 125 ,"{'AvgLine': 15, 'CountLine': 81, 'CountStmt': 48, 'MaxNesting': 2, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 38, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 2, 'CountLineCode': 65, 'CountStmtDecl': 10, 'MaxCyclomatic': 7, 'SumCyclomatic': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountSemicolon': 41, 'CountDeclMethod': 4, 'CountLineCodeExe': 45, 'CountLineComment': 6, 'CountClassCoupled': 12, 'CountClassDerived': 0, 'CountLineCodeDecl': 14, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.09', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 3, 'CountClassCoupledModified': 12, 'CountDeclInstanceVariable': 4, 'PercentLackOfCohesionModified': 25}"
2812,Java,"public class TorRoundTripTime extends Metric {

    private static final String SAMPLE_SIZE = ""run.sampleSize"";
    private static final String HOSTS = ""run.hosts"";

    public TorRoundTripTime(Reporter reporter) {
        super(reporter);
    }

    @Override
    protected void execute() {
        SocksSocket socket;
        try {
            // fetch proxy
            Tor tor = Tor.getDefault();
            checkNotNull(tor, ""tor must not be null"");
            Socks5Proxy proxy = tor.getProxy();

            // for each configured host
            for (String current : configuration.getProperty(HOSTS, """").split("","")) {
                // parse Url
                NodeAddress tmp = OnionParser.getNodeAddress(current);

                List<Long> samples = new ArrayList<>();

                while (samples.size() < Integer.parseInt(configuration.getProperty(SAMPLE_SIZE, ""1""))) {
                    // start timer - we do not need System.nanoTime as we expect our result to be in
                    // seconds time.
                    long start = System.currentTimeMillis();

                    // connect
                    socket = new SocksSocket(proxy, tmp.getHostName(), tmp.getPort());

                    // by the time we get here, we are connected
                    samples.add(System.currentTimeMillis() - start);

                    // cleanup
                    socket.close();
                }

                // report
                reporter.report(StatisticsHelper.process(samples), getName());
            }
        } catch (TorCtlException | IOException e) {
            e.printStackTrace();
        }
    }
}",0,777 587 2000 650 2001 123 773 809 657 2002 2003 61 362 59 773 809 657 2002 2004 61 362 59 777 2000 40 2005 2006 41 123 818 40 2006 41 59 125 64 2007 775 865 2008 40 41 123 2009 2010 59 830 123 330 2011 2012 61 2011 46 2013 40 41 59 2014 40 2012 44 362 41 59 2015 2016 61 2012 46 2017 40 41 59 330 664 40 2002 2018 58 2019 46 2020 40 2004 44 362 41 46 2021 40 362 41 41 123 330 2022 2023 61 2024 46 2025 40 2018 41 59 2026 60 2027 62 2028 61 744 2029 60 62 40 41 59 870 40 2028 46 2030 40 41 60 2031 46 2032 40 2019 46 2020 40 2003 44 362 41 41 41 123 330 330 726 2033 61 2034 46 2035 40 41 59 330 2010 61 744 2009 40 2016 44 2023 46 2036 40 41 44 2023 46 2037 40 41 41 59 330 2028 46 2038 40 2034 46 2035 40 41 45 2033 41 59 330 2010 46 2039 40 41 59 125 330 2006 46 2040 40 2041 46 2042 40 2028 41 44 2043 40 41 41 59 125 125 580 40 2044 124 2045 2046 41 123 2046 46 2047 40 41 59 125 125 125 ,"{'AvgLine': 20, 'CountLine': 53, 'CountStmt': 22, 'MaxNesting': 3, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 29, 'CountStmtDecl': 12, 'MaxCyclomatic': 4, 'SumCyclomatic': 5, 'AvgLineComment': 4, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountSemicolon': 15, 'CountDeclMethod': 2, 'CountLineCodeExe': 18, 'CountLineComment': 14, 'CountClassCoupled': 12, 'CountClassDerived': 0, 'CountLineCodeDecl': 12, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.48', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 2, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 12, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2790,Java,"public class InputTextField extends JFXTextField {

    private final ObjectProperty<InputValidator.ValidationResult> validationResult = new SimpleObjectProperty<>
            (new InputValidator.ValidationResult(true));

    private final JFXInputValidator jfxValidationWrapper = new JFXInputValidator();
    private double inputLineExtension = 0;

    private InputValidator validator;
    private String errorMessage = null;


    public InputValidator getValidator() {
        return validator;
    }

    public void setValidator(InputValidator validator) {
        this.validator = validator;
    }

    public void setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    public InputTextField() {
        super();

        getValidators().add(jfxValidationWrapper);

        validationResult.addListener((ov, oldValue, newValue) -> {
            if (newValue != null) {
                jfxValidationWrapper.resetValidation();
                if (!newValue.isValid) {
                    if (!newValue.errorMessageEquals(oldValue)) {  // avoid blinking
                        validate();  // ensure that the new error message replaces the old one
                    }
                    if (this.errorMessage != null) {
                        jfxValidationWrapper.applyErrorMessage(this.errorMessage);
                    } else {
                        jfxValidationWrapper.applyErrorMessage(newValue);
                    }
                }
                validate();
            }
        });

        textProperty().addListener((o, oldValue, newValue) -> {
            refreshValidation();
        });

        focusedProperty().addListener((o, oldValue, newValue) -> {
            if (validator != null) {
                if (!oldValue && newValue) {
                    this.validationResult.set(new InputValidator.ValidationResult(true));
                } else {
                    this.validationResult.set(validator.validate(getText()));
                }
            }
        });
    }


    public InputTextField(double inputLineExtension) {
        this();
        this.inputLineExtension = inputLineExtension;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Public methods
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void resetValidation() {
        jfxValidationWrapper.resetValidation();

        String input = getText();
        if (input.isEmpty()) {
            validationResult.set(new InputValidator.ValidationResult(true));
        } else {
            validationResult.set(validator.validate(input));
        }
    }

    public void refreshValidation() {
        if (validator != null) {
            this.validationResult.set(validator.validate(getText()));
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    public ObjectProperty<InputValidator.ValidationResult> validationResultProperty() {
        return validationResult;
    }

    protected Skin<?> createDefaultSkin() {
        return new JFXTextFieldSkinBisqStyle<>(this, inputLineExtension);
    }
}",0,777 587 2000 650 2001 123 773 657 2002 60 2003 46 2004 62 2005 61 744 2006 60 62 40 744 2003 46 2004 40 2007 41 41 59 773 657 2008 2009 61 744 2008 40 41 59 773 625 2010 61 1500 59 773 2003 2011 59 773 2012 2013 61 2014 59 777 2003 2015 40 41 123 792 2011 59 125 777 865 2016 40 2003 2011 41 123 823 46 2011 61 2011 59 125 777 865 2017 40 2012 2013 41 123 823 46 2013 61 2013 59 125 331 330 331 777 2000 40 41 123 818 40 41 59 2018 40 41 46 2019 40 2009 41 59 2005 46 2020 40 40 2021 44 2022 44 2023 41 45 62 123 688 40 2023 340 2014 41 123 2009 46 2024 40 41 59 688 40 33 2023 46 2025 41 123 688 40 33 2023 46 2026 40 2022 41 41 123 330 2027 40 41 59 330 125 688 40 823 46 2013 340 2014 41 123 2009 46 2028 40 823 46 2013 41 59 125 630 123 2009 46 2029 40 2023 41 59 125 125 2030 40 41 59 125 125 41 59 2031 40 41 46 2020 40 40 2032 44 2022 44 2023 41 45 62 123 2033 40 41 59 125 41 59 2034 40 41 46 2020 40 40 2032 44 2022 44 2023 41 45 62 123 688 40 2011 340 2014 41 123 688 40 33 2022 307 2023 41 123 823 46 2005 46 2035 40 744 2003 46 2004 40 2007 41 41 59 125 630 123 823 46 2005 46 2036 40 2011 46 2037 40 2038 40 41 41 41 59 125 125 125 41 59 125 777 2000 40 625 2010 41 123 823 40 41 59 823 46 2010 61 2010 59 125 331 330 331 777 865 2039 40 41 123 2009 46 2039 40 41 59 2012 2040 61 2041 40 41 59 688 40 2040 46 2042 40 41 41 123 2005 46 2043 40 744 2003 46 2004 40 2007 41 41 59 125 630 123 2005 46 2044 40 2011 46 2045 40 2040 41 41 59 125 125 777 865 2046 40 41 123 688 40 2011 340 2014 41 123 823 46 2005 46 2047 40 2011 46 2048 40 2049 40 41 41 41 59 125 125 331 330 331 777 2002 60 2003 46 2004 62 2050 40 41 123 792 2005 59 125 775 2051 60 63 62 2052 40 41 123 792 744 2053 60 62 40 823 44 2010 41 59 125 125 ,"{'AvgLine': 7, 'CountLine': 115, 'CountStmt': 48, 'MaxNesting': 3, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 35, 'MaxEssential': 1, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 73, 'CountStmtDecl': 16, 'MaxCyclomatic': 2, 'SumCyclomatic': 20, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 22, 'CountSemicolon': 30, 'CountDeclMethod': 9, 'CountLineCodeExe': 44, 'CountLineComment': 22, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.30', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 8, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 5, 'PercentLackOfCohesionModified': 66}"
2781,Java,"@Slf4j
public class Res {
    public static void setup() {
        BaseCurrencyNetwork baseCurrencyNetwork = Config.baseCurrencyNetwork();
        setBaseCurrencyCode(baseCurrencyNetwork.getCurrencyCode());
        setBaseCurrencyName(baseCurrencyNetwork.getCurrencyName());
    }

    @SuppressWarnings(""CanBeFinal"")
    private static ResourceBundle resourceBundle = ResourceBundle.getBundle(""i18n.displayStrings"", GlobalSettings.getLocale(), new UTF8Control());

    static {
        GlobalSettings.localeProperty().addListener((observable, oldValue, newValue) -> {
            if (""en"".equalsIgnoreCase(newValue.getLanguage()))
                newValue = Locale.ROOT;
            resourceBundle = ResourceBundle.getBundle(""i18n.displayStrings"", newValue, new UTF8Control());
        });
    }

    public static String getWithCol(String key) {
        return get(key) + "":"";
    }

    public static String getWithColAndCap(String key) {
        return StringUtils.capitalize(get(key)) + "":"";
    }

    public static ResourceBundle getResourceBundle() {
        return resourceBundle;
    }

    private static String baseCurrencyCode;
    private static String baseCurrencyName;
    private static String baseCurrencyNameLowerCase;

    public static void setBaseCurrencyCode(String baseCurrencyCode) {
        Res.baseCurrencyCode = baseCurrencyCode;
    }

    public static void setBaseCurrencyName(String baseCurrencyName) {
        Res.baseCurrencyName = baseCurrencyName;
        baseCurrencyNameLowerCase = baseCurrencyName.toLowerCase();
    }

    public static String getBaseCurrencyCode() {
        return baseCurrencyCode;
    }

    public static String getBaseCurrencyName() {
        return baseCurrencyName;
    }

    // Capitalize first character
    public static String getWithCap(String key) {
        return StringUtils.capitalize(get(key));
    }

    public static String getWithCol(String key, Object... arguments) {
        return get(key, arguments) + "":"";
    }

    public static String get(String key, Object... arguments) {
        return MessageFormat.format(Res.get(key), arguments);
    }

    public static String get(String key) {
        try {
            return resourceBundle.getString(key)
                    .replace(""BTC"", baseCurrencyCode)
                    .replace(""Bitcoin"", baseCurrencyName)
                    .replace(""bitcoin"", baseCurrencyNameLowerCase);
        } catch (MissingResourceException e) {
            log.warn(""Missing resource for key: {}"", key);
            if (DevEnv.isDevMode()) {
                e.printStackTrace();
                UserThread.runAfter(() -> {
                    // We delay a bit to not throw while UI is not ready
                    throw new RuntimeException(""Missing resource for key: "" + key);
                }, 1);
            }
            return key;
        }
    }

    public static List<String> getWrappedAsList(String key, int wrapLength) {
        String[] raw = get(key).split(""\n"");
        List<String> wrapped = new ArrayList<>();
        for (String s : raw) {
            List<String> list = toListOfWrappedStrings(s, wrapLength);
            for (String line : list) {
                if (!line.isEmpty())
                    wrapped.add(line);
            }
        }
        return wrapped;
    }
}",0,64 2000 777 587 2001 123 777 809 865 2002 40 41 123 2003 2004 61 2005 46 2004 40 41 59 2006 40 2004 46 2007 40 41 41 59 2008 40 2004 46 2009 40 41 41 59 125 64 2010 40 362 41 773 809 2011 2012 61 2011 46 2013 40 362 44 2014 46 2015 40 41 44 744 2016 40 41 41 59 809 123 2014 46 2017 40 41 46 2018 40 40 2019 44 2020 44 2021 41 45 62 123 688 40 362 46 2022 40 2021 46 2023 40 41 41 41 2021 61 2024 46 2025 59 2012 61 2011 46 2013 40 362 44 2021 44 744 2016 40 41 41 59 125 41 59 125 777 809 2026 2027 40 2026 2028 41 123 792 2029 40 2028 41 43 362 59 125 777 809 2026 2030 40 2026 2028 41 123 792 2031 46 2032 40 2033 40 2028 41 41 43 362 59 125 777 809 2011 2034 40 41 123 792 2012 59 125 773 809 2026 2035 59 773 809 2026 2036 59 773 809 2026 2037 59 777 809 865 2038 40 2026 2035 41 123 2001 46 2035 61 2035 59 125 777 809 865 2039 40 2026 2036 41 123 2001 46 2036 61 2036 59 2037 61 2036 46 2040 40 41 59 125 777 809 2026 2041 40 41 123 792 2035 59 125 777 809 2026 2042 40 41 123 792 2036 59 125 330 777 809 2026 2043 40 2026 2028 41 123 792 2044 46 2045 40 2046 40 2028 41 41 59 125 777 809 2026 2027 40 2026 2028 44 2047 322 2048 41 123 792 2049 40 2028 44 2048 41 43 362 59 125 777 809 2026 2050 40 2026 2028 44 2047 322 2048 41 123 792 2051 46 2052 40 2001 46 2050 40 2028 41 44 2048 41 59 125 777 809 2026 2050 40 2026 2028 41 123 830 123 792 2012 46 2053 40 2028 41 46 2054 40 362 44 2035 41 46 2054 40 362 44 2036 41 46 2054 40 362 44 2037 41 59 125 580 40 2055 2056 41 123 2057 46 2058 40 362 44 2028 41 59 688 40 2059 46 2060 40 41 41 123 2056 46 2061 40 41 59 2062 46 2063 40 40 41 45 62 123 330 825 744 2064 40 362 43 2028 41 59 125 44 1501 41 59 125 792 2028 59 125 125 777 809 2065 60 2026 62 2066 40 2026 2028 44 704 2067 41 123 2026 91 93 2068 61 2050 40 2028 41 46 2069 40 362 41 59 2065 60 2026 62 2070 61 744 2071 60 62 40 41 59 664 40 2026 2072 58 2068 41 123 2065 60 2026 62 2073 61 2074 40 2072 44 2067 41 59 664 40 2026 2075 58 2073 41 123 688 40 33 2075 46 2076 40 41 41 2070 46 2077 40 2075 41 59 125 125 792 2070 59 125 125 ,"{'AvgLine': 5, 'CountLine': 97, 'CountStmt': 54, 'MaxNesting': 3, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 35, 'MaxEssential': 1, 'SumEssential': 14, 'AvgCyclomatic': 1, 'CountLineCode': 80, 'CountStmtDecl': 24, 'MaxCyclomatic': 4, 'SumCyclomatic': 19, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountSemicolon': 32, 'CountDeclMethod': 13, 'CountLineCodeExe': 41, 'CountLineComment': 2, 'CountClassCoupled': 18, 'CountClassDerived': 0, 'CountLineCodeDecl': 25, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 13, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 13, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 4, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 18, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 28}"
2739,Java,"public class Table {

    public final Column<?>[] columns;
    public final int rowCount;

    // Each printed column is delimited by two spaces.
    private final int columnDelimiterLength = 2;

    /**
     * Default constructor.  Takes populated Columns.
     *
     * @param columns containing the same number of rows
     */
    public Table(Column<?>... columns) {
        this.columns = columns;
        this.rowCount = columns.length > 0 ? columns[0].rowCount() : 0;
        validateStructure();
    }

    /**
     * Print table data to a PrintStream.
     *
     * @param printStream the target output stream
     */
    public void print(PrintStream printStream) {
        printColumnNames(printStream);
        for (int rowIndex = 0; rowIndex < rowCount; rowIndex++) {
            printRow(printStream, rowIndex);
        }
    }

    /**
     * Print table column names to a PrintStream.
     *
     * @param printStream the target output stream
     */
    private void printColumnNames(PrintStream printStream) {
        IntStream.range(0, columns.length).forEachOrdered(colIndex -> {
            var c = columns[colIndex];
            var justifiedName = c.getJustification().equals(RIGHT)
                    ? padStart(c.getName(), c.getWidth(), ' ')
                    : c.getName();
            var paddedWidth = colIndex == columns.length - 1
                    ? c.getName().length()
                    : c.getWidth() + columnDelimiterLength;
            printStream.printf(""%-"" + paddedWidth + ""s"", justifiedName);
        });
        printStream.println();
    }

    /**
     * Print a table row to a PrintStream.
     *
     * @param printStream the target output stream
     */
    private void printRow(PrintStream printStream, int rowIndex) {
        IntStream.range(0, columns.length).forEachOrdered(colIndex -> {
            var c = columns[colIndex];
            var paddedWidth = colIndex == columns.length - 1
                    ? c.getWidth()
                    : c.getWidth() + columnDelimiterLength;
            printStream.printf(""%-"" + paddedWidth + ""s"", c.getRow(rowIndex));
            if (colIndex == columns.length - 1)
                printStream.println();
        });
    }

    /**
     * Returns the table's formatted output as a String.
     * @return String
     */
    @Override
    public String toString() {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try (PrintStream ps = new PrintStream(baos, true, UTF_8)) {
            print(ps);
        }
        return baos.toString();
    }

    /**
     * Verifies the table has columns, and each column has the same number of rows.
     */
    private void validateStructure() {
        if (columns.length == 0)
            throw new IllegalArgumentException(""Table has no columns."");

        if (columns[0].isEmpty())
            throw new IllegalArgumentException(
                    format(""Table's 1st column (%s) has no data."",
                            columns[0].getName()));

        IntStream.range(1, columns.length).forEachOrdered(colIndex -> {
            var c = columns[colIndex];

            if (c.isEmpty())
                throw new IllegalStateException(
                        format(""Table column # %d (%s) does not have any data."",
                                colIndex + 1,
                                c.getName()));

            if (this.rowCount != c.rowCount())
                throw new IllegalStateException(
                        format(""Table column # %d (%s) does not have same number of rows as 1st column."",
                                colIndex + 1,
                                c.getName()));
        });
    }
}",0,777 587 2000 123 777 657 2001 60 63 62 91 93 2002 59 777 657 704 2003 59 330 773 657 704 2004 61 1502 59 306 777 2000 40 2001 60 63 62 322 2002 41 123 823 46 2002 61 2002 59 823 46 2003 61 2002 46 2005 62 1500 63 2002 91 1500 93 46 2003 40 41 58 1500 59 2006 40 41 59 125 306 777 865 2007 40 2008 2009 41 123 2010 40 2009 41 59 664 40 704 2011 61 1500 59 2011 60 2003 59 2011 349 41 123 2012 40 2009 44 2011 41 59 125 125 306 773 865 2013 40 2008 2009 41 123 2014 46 2015 40 1500 44 2002 46 2016 41 46 2017 40 2018 45 62 123 2019 2020 61 2002 91 2018 93 59 2019 2021 61 2020 46 2022 40 41 46 2023 40 2024 41 63 2025 40 2020 46 2026 40 41 44 2020 46 2027 40 41 44 314 41 58 2020 46 2026 40 41 59 2019 2028 61 2018 323 2002 46 2016 45 1501 63 2020 46 2026 40 41 46 2016 40 41 58 2020 46 2027 40 41 43 2004 59 2009 46 2029 40 362 43 2028 43 362 44 2021 41 59 125 41 59 2009 46 2030 40 41 59 125 306 773 865 2031 40 2008 2009 44 704 2032 41 123 2033 46 2034 40 1500 44 2002 46 2035 41 46 2036 40 2037 45 62 123 2038 2039 61 2002 91 2037 93 59 2038 2040 61 2037 323 2002 46 2035 45 1501 63 2039 46 2041 40 41 58 2039 46 2041 40 41 43 2004 59 2009 46 2042 40 362 43 2040 43 362 44 2039 46 2043 40 2032 41 41 59 688 40 2037 323 2002 46 2035 45 1501 41 2009 46 2044 40 41 59 125 41 59 125 306 64 2045 777 2046 2047 40 41 123 2048 2049 61 744 2048 40 41 59 830 40 2008 2050 61 744 2008 40 2049 44 2051 44 2052 41 41 123 2007 40 2050 41 59 125 792 2049 46 2047 40 41 59 125 306 773 865 2053 40 41 123 688 40 2002 46 2054 323 1500 41 825 744 2055 40 362 41 59 688 40 2002 91 1500 93 46 2056 40 41 41 825 744 2055 40 2057 40 362 44 2002 91 1500 93 46 2058 40 41 41 41 59 2059 46 2060 40 1501 44 2002 46 2054 41 46 2061 40 2062 45 62 123 2063 2064 61 2002 91 2062 93 59 688 40 2064 46 2056 40 41 41 825 744 2065 40 2057 40 362 44 2062 43 1501 44 2064 46 2058 40 41 41 41 59 688 40 823 46 2003 340 2064 46 2003 40 41 41 825 744 2065 40 2057 40 362 44 2062 43 1501 44 2064 46 2058 40 41 41 41 59 125 41 59 125 125 ,"{'AvgLine': 15, 'CountLine': 122, 'CountStmt': 44, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 30, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 69, 'CountStmtDecl': 18, 'MaxCyclomatic': 3, 'SumCyclomatic': 19, 'AvgLineComment': 4, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountSemicolon': 30, 'CountDeclMethod': 6, 'CountLineCodeExe': 50, 'CountLineComment': 41, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountLineCodeDecl': 21, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.59', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 19, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 19, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 9, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 50}"
2855,Java,"public class MaterialDesignIconDemoLauncher {
    public static void main(String[] args) {
        Application.launch(MaterialDesignIconDemo.class);
    }
}",0,777 587 2000 123 777 809 865 2001 40 2002 91 93 2003 41 123 2004 46 2005 40 2006 46 587 41 59 125 125 ,"{'AvgLine': 3, 'CountLine': 5, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 5, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 1, 'CountDeclMethod': 1, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2641,Java,"public class ReobfWrapper {

    private final Object instance;
    private final Class<?> type;

    public ReobfWrapper(Object instance) {
        this.instance = instance;
        Objects.requireNonNull(instance);
        this.type = instance.getClass();
    }

    public String getName() {
        try {
            Field nameField = type.getDeclaredField(""name"");
            nameField.setAccessible(true);
            return (String) nameField.get(this.instance);
        } catch (ReflectiveOperationException ex) {
            throw new IllegalStateException(ex);
        }
    }

    public MappingType getMappingType() {
        try {
            Field enumField = type.getDeclaredField(""mappingType"");
            enumField.setAccessible(true);
            Enum<?> aEnum = (Enum<?>) enumField.get(this.instance);
            MappingType mappingType = MappingType.values()[aEnum.ordinal()];
            if (!aEnum.name().equals(mappingType.name())) {
                throw new IllegalStateException(""ForgeGradle ReobfMappingType is not equivalent to MappingType (version error?)"");
            }
            return mappingType;
        } catch (ReflectiveOperationException ex) {
            throw new IllegalStateException(ex);
        }
    }
}",0,777 587 2000 123 773 657 2001 2002 59 773 657 2003 60 63 62 2004 59 777 2000 40 2001 2002 41 123 823 46 2002 61 2002 59 2005 46 2006 40 2002 41 59 823 46 2004 61 2002 46 2007 40 41 59 125 777 2008 2009 40 41 123 830 123 2010 2011 61 2004 46 2012 40 362 41 59 2011 46 2013 40 2014 41 59 792 40 2008 41 2011 46 2015 40 823 46 2002 41 59 125 580 40 2016 2017 41 123 825 744 2018 40 2017 41 59 125 125 777 2019 2020 40 41 123 830 123 2021 2022 61 2004 46 2023 40 362 41 59 2022 46 2024 40 2025 41 59 2026 60 63 62 2027 61 40 2026 60 63 62 41 2022 46 2028 40 823 46 2002 41 59 2019 2029 61 2019 46 2030 40 41 91 2027 46 2031 40 41 93 59 688 40 33 2027 46 2032 40 41 46 2033 40 2029 46 2032 40 41 41 41 123 825 744 2034 40 362 41 59 125 792 2029 59 125 580 40 2035 2036 41 123 825 744 2037 40 2036 41 59 125 125 125 ,"{'AvgLine': 9, 'CountLine': 41, 'CountStmt': 23, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 2, 'CountLineCode': 32, 'CountStmtDecl': 10, 'MaxCyclomatic': 3, 'SumCyclomatic': 6, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountSemicolon': 16, 'CountDeclMethod': 3, 'CountLineCodeExe': 19, 'CountLineComment': 5, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.16', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 6, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 0}"
2756,Java,"@Disabled
@Slf4j
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class CreateBSQOffersTest extends AbstractOfferTest {

    private static final String MAKER_FEE_CURRENCY_CODE = BSQ;

    @BeforeAll
    public static void setUp() {
        AbstractOfferTest.setUp();
    }

    @Test
    @Order(1)
    public void testCreateBuy1BTCFor20KBSQOffer() {
        // Remember alt coin trades are BTC trades.  When placing an offer, you are
        // offering to buy or sell BTC, not BSQ, XMR, etc.  In this test case,
        // Alice places an offer to BUY BTC with BSQ.
        var newOffer = aliceClient.createFixedPricedOffer(BUY.name(),
                BSQ,
                100_000_000L,
                100_000_000L,
                ""0.00005"",   // FIXED PRICE IN BTC (satoshis) FOR 1 BSQ
                getDefaultBuyerSecurityDepositAsPercent(),
                alicesLegacyBsqAcct.getId(),
                MAKER_FEE_CURRENCY_CODE);
        log.debug(""Sell BSQ (Buy BTC) OFFER:\n{}"", toOfferTable.apply(newOffer));
        assertTrue(newOffer.getIsMyOffer());
        assertTrue(newOffer.getIsMyPendingOffer());

        String newOfferId = newOffer.getId();
        assertNotEquals("""", newOfferId);
        assertEquals(BUY.name(), newOffer.getDirection());
        assertFalse(newOffer.getUseMarketBasedPrice());
        assertEquals(5_000, newOffer.getPrice());
        assertEquals(100_000_000L, newOffer.getAmount());
        assertEquals(100_000_000L, newOffer.getMinAmount());
        assertEquals(15_000_000, newOffer.getBuyerSecurityDeposit());
        assertEquals(alicesLegacyBsqAcct.getId(), newOffer.getPaymentAccountId());
        assertEquals(BSQ, newOffer.getBaseCurrencyCode());
        assertEquals(BTC, newOffer.getCounterCurrencyCode());
        assertFalse(newOffer.getIsCurrencyForMakerFeeBtc());

        genBtcBlockAndWaitForOfferPreparation();

        newOffer = aliceClient.getMyOffer(newOfferId);
        assertTrue(newOffer.getIsMyOffer());
        assertFalse(newOffer.getIsMyPendingOffer());
        assertEquals(newOfferId, newOffer.getId());
        assertEquals(BUY.name(), newOffer.getDirection());
        assertFalse(newOffer.getUseMarketBasedPrice());
        assertEquals(5_000, newOffer.getPrice());
        assertEquals(100_000_000L, newOffer.getAmount());
        assertEquals(100_000_000L, newOffer.getMinAmount());
        assertEquals(15_000_000, newOffer.getBuyerSecurityDeposit());
        assertEquals(alicesLegacyBsqAcct.getId(), newOffer.getPaymentAccountId());
        assertEquals(BSQ, newOffer.getBaseCurrencyCode());
        assertEquals(BTC, newOffer.getCounterCurrencyCode());
        assertFalse(newOffer.getIsCurrencyForMakerFeeBtc());
    }

    @Test
    @Order(2)
    public void testCreateSell1BTCFor20KBSQOffer() {
        // Alice places an offer to SELL BTC for BSQ.
        var newOffer = aliceClient.createFixedPricedOffer(SELL.name(),
                BSQ,
                100_000_000L,
                100_000_000L,
                ""0.00005"",   // FIXED PRICE IN BTC (satoshis) FOR 1 BSQ
                getDefaultBuyerSecurityDepositAsPercent(),
                alicesLegacyBsqAcct.getId(),
                MAKER_FEE_CURRENCY_CODE);
        log.debug(""SELL 20K BSQ OFFER:\n{}"", toOfferTable.apply(newOffer));
        assertTrue(newOffer.getIsMyOffer());
        assertTrue(newOffer.getIsMyPendingOffer());

        String newOfferId = newOffer.getId();
        assertNotEquals("""", newOfferId);
        assertEquals(SELL.name(), newOffer.getDirection());
        assertFalse(newOffer.getUseMarketBasedPrice());
        assertEquals(5_000, newOffer.getPrice());
        assertEquals(100_000_000L, newOffer.getAmount());
        assertEquals(100_000_000L, newOffer.getMinAmount());
        assertEquals(15_000_000, newOffer.getBuyerSecurityDeposit());
        assertEquals(alicesLegacyBsqAcct.getId(), newOffer.getPaymentAccountId());
        assertEquals(BSQ, newOffer.getBaseCurrencyCode());
        assertEquals(BTC, newOffer.getCounterCurrencyCode());
        assertFalse(newOffer.getIsCurrencyForMakerFeeBtc());

        genBtcBlockAndWaitForOfferPreparation();

        newOffer = aliceClient.getMyOffer(newOfferId);
        assertTrue(newOffer.getIsMyOffer());
        assertFalse(newOffer.getIsMyPendingOffer());
        assertEquals(newOfferId, newOffer.getId());
        assertEquals(SELL.name(), newOffer.getDirection());
        assertFalse(newOffer.getUseMarketBasedPrice());
        assertEquals(5_000, newOffer.getPrice());
        assertEquals(100_000_000L, newOffer.getAmount());
        assertEquals(100_000_000L, newOffer.getMinAmount());
        assertEquals(15_000_000, newOffer.getBuyerSecurityDeposit());
        assertEquals(alicesLegacyBsqAcct.getId(), newOffer.getPaymentAccountId());
        assertEquals(BSQ, newOffer.getBaseCurrencyCode());
        assertEquals(BTC, newOffer.getCounterCurrencyCode());
        assertFalse(newOffer.getIsCurrencyForMakerFeeBtc());
    }

    @Test
    @Order(3)
    public void testCreateBuyBTCWith1To2KBSQOffer() {
        // Alice places an offer to BUY 0.05 - 0.10 BTC with BSQ.
        var newOffer = aliceClient.createFixedPricedOffer(BUY.name(),
                BSQ,
                10_000_000L,
                5_000_000L,
                ""0.00005"",   // FIXED PRICE IN BTC sats FOR 1 BSQ
                getDefaultBuyerSecurityDepositAsPercent(),
                alicesLegacyBsqAcct.getId(),
                MAKER_FEE_CURRENCY_CODE);
        log.debug(""BUY 1-2K BSQ OFFER:\n{}"", toOfferTable.apply(newOffer));
        assertTrue(newOffer.getIsMyOffer());
        assertTrue(newOffer.getIsMyPendingOffer());

        String newOfferId = newOffer.getId();
        assertNotEquals("""", newOfferId);
        assertEquals(BUY.name(), newOffer.getDirection());
        assertFalse(newOffer.getUseMarketBasedPrice());
        assertEquals(5_000, newOffer.getPrice());
        assertEquals(10_000_000L, newOffer.getAmount());
        assertEquals(5_000_000L, newOffer.getMinAmount());
        assertEquals(1_500_000, newOffer.getBuyerSecurityDeposit());
        assertEquals(alicesLegacyBsqAcct.getId(), newOffer.getPaymentAccountId());
        assertEquals(BSQ, newOffer.getBaseCurrencyCode());
        assertEquals(BTC, newOffer.getCounterCurrencyCode());
        assertFalse(newOffer.getIsCurrencyForMakerFeeBtc());

        genBtcBlockAndWaitForOfferPreparation();

        newOffer = aliceClient.getMyOffer(newOfferId);
        assertTrue(newOffer.getIsMyOffer());
        assertFalse(newOffer.getIsMyPendingOffer());
        assertEquals(newOfferId, newOffer.getId());
        assertEquals(BUY.name(), newOffer.getDirection());
        assertFalse(newOffer.getUseMarketBasedPrice());
        assertEquals(5_000, newOffer.getPrice());
        assertEquals(10_000_000L, newOffer.getAmount());
        assertEquals(5_000_000L, newOffer.getMinAmount());
        assertEquals(1_500_000, newOffer.getBuyerSecurityDeposit());
        assertEquals(alicesLegacyBsqAcct.getId(), newOffer.getPaymentAccountId());
        assertEquals(BSQ, newOffer.getBaseCurrencyCode());
        assertEquals(BTC, newOffer.getCounterCurrencyCode());
        assertFalse(newOffer.getIsCurrencyForMakerFeeBtc());
    }

    @Test
    @Order(4)
    public void testCreateSellBTCFor5To10KBSQOffer() {
        // Alice places an offer to SELL 0.25 - 0.50 BTC for BSQ.
        var newOffer = aliceClient.createFixedPricedOffer(SELL.name(),
                BSQ,
                50_000_000L,
                25_000_000L,
                ""0.00005"",   // FIXED PRICE IN BTC sats FOR 1 BSQ
                getDefaultBuyerSecurityDepositAsPercent(),
                alicesLegacyBsqAcct.getId(),
                MAKER_FEE_CURRENCY_CODE);
        log.debug(""SELL 5-10K BSQ OFFER:\n{}"", toOfferTable.apply(newOffer));
        assertTrue(newOffer.getIsMyOffer());
        assertTrue(newOffer.getIsMyPendingOffer());

        String newOfferId = newOffer.getId();
        assertNotEquals("""", newOfferId);
        assertEquals(SELL.name(), newOffer.getDirection());
        assertFalse(newOffer.getUseMarketBasedPrice());
        assertEquals(5_000, newOffer.getPrice());
        assertEquals(50_000_000L, newOffer.getAmount());
        assertEquals(25_000_000L, newOffer.getMinAmount());
        assertEquals(7_500_000, newOffer.getBuyerSecurityDeposit());
        assertEquals(alicesLegacyBsqAcct.getId(), newOffer.getPaymentAccountId());
        assertEquals(BSQ, newOffer.getBaseCurrencyCode());
        assertEquals(BTC, newOffer.getCounterCurrencyCode());
        assertFalse(newOffer.getIsCurrencyForMakerFeeBtc());

        genBtcBlockAndWaitForOfferPreparation();

        newOffer = aliceClient.getMyOffer(newOfferId);
        assertTrue(newOffer.getIsMyOffer());
        assertFalse(newOffer.getIsMyPendingOffer());
        assertEquals(newOfferId, newOffer.getId());
        assertEquals(SELL.name(), newOffer.getDirection());
        assertFalse(newOffer.getUseMarketBasedPrice());
        assertEquals(5_000, newOffer.getPrice());
        assertEquals(50_000_000L, newOffer.getAmount());
        assertEquals(25_000_000L, newOffer.getMinAmount());
        assertEquals(7_500_000, newOffer.getBuyerSecurityDeposit());
        assertEquals(alicesLegacyBsqAcct.getId(), newOffer.getPaymentAccountId());
        assertEquals(BSQ, newOffer.getBaseCurrencyCode());
        assertEquals(BTC, newOffer.getCounterCurrencyCode());
        assertFalse(newOffer.getIsCurrencyForMakerFeeBtc());
    }

    @Test
    @Order(5)
    public void testGetAllMyBsqOffers() {
        List<OfferInfo> offers = aliceClient.getMyBsqOffersSortedByDate();
        log.debug(""ALL ALICE'S BSQ OFFERS:\n{}"", toOffersTable.apply(offers));
        assertEquals(4, offers.size());
        log.debug(""ALICE'S BALANCES\n{}"", formatBalancesTbls(aliceClient.getBalances()));
    }

    @Test
    @Order(6)
    public void testGetAvailableBsqOffers() {
        List<OfferInfo> offers = bobClient.getBsqOffersSortedByDate();
        log.debug(""ALL BOB'S AVAILABLE BSQ OFFERS:\n{}"", toOffersTable.apply(offers));
        assertEquals(4, offers.size());
        log.debug(""BOB'S BALANCES\n{}"", formatBalancesTbls(bobClient.getBalances()));
    }

    private void genBtcBlockAndWaitForOfferPreparation() {
        // Extra time is needed for the OfferUtils#isBsqForMakerFeeAvailable, which
        // can sometimes return an incorrect false value if the BsqWallet's
        // available confirmed balance is temporarily = zero during BSQ offer prep.
        genBtcBlocksThenWait(1, 5000);
    }
}",0,64 2000 64 2001 64 2002 40 2003 46 2004 46 587 41 777 587 2005 650 2006 123 773 809 657 2007 2008 61 2009 59 64 2010 777 809 865 2011 40 41 123 2006 46 2011 40 41 59 125 64 2012 64 2013 40 1501 41 777 865 2014 40 41 123 330 330 330 2015 2016 61 2017 46 2018 40 2019 46 2020 40 41 44 2009 44 1503 44 1503 44 362 44 330 2021 40 41 44 2022 46 2023 40 41 44 2008 41 59 2024 46 2025 40 362 44 2026 46 2027 40 2016 41 41 59 2028 40 2016 46 2029 40 41 41 59 2028 40 2016 46 2030 40 41 41 59 2007 2031 61 2016 46 2023 40 41 59 2032 40 362 44 2031 41 59 2033 40 2019 46 2020 40 41 44 2016 46 2034 40 41 41 59 2035 40 2016 46 2036 40 41 41 59 2033 40 1502 44 2016 46 2037 40 41 41 59 2033 40 1503 44 2016 46 2038 40 41 41 59 2033 40 1503 44 2016 46 2039 40 41 41 59 2033 40 1503 44 2016 46 2040 40 41 41 59 2033 40 2022 46 2023 40 41 44 2016 46 2041 40 41 41 59 2033 40 2009 44 2016 46 2042 40 41 41 59 2033 40 2043 44 2016 46 2044 40 41 41 59 2035 40 2016 46 2045 40 41 41 59 2046 40 41 59 2016 61 2017 46 2047 40 2031 41 59 2028 40 2016 46 2029 40 41 41 59 2035 40 2016 46 2030 40 41 41 59 2033 40 2031 44 2016 46 2023 40 41 41 59 2033 40 2019 46 2020 40 41 44 2016 46 2034 40 41 41 59 2035 40 2016 46 2036 40 41 41 59 2033 40 1502 44 2016 46 2037 40 41 41 59 2033 40 1503 44 2016 46 2038 40 41 41 59 2033 40 1503 44 2016 46 2039 40 41 41 59 2033 40 1503 44 2016 46 2040 40 41 41 59 2033 40 2022 46 2023 40 41 44 2016 46 2041 40 41 41 59 2033 40 2009 44 2016 46 2042 40 41 41 59 2033 40 2043 44 2016 46 2044 40 41 41 59 2035 40 2016 46 2045 40 41 41 59 125 64 2012 64 2013 40 1502 41 777 865 2048 40 41 123 330 2049 2050 61 2051 46 2052 40 2053 46 2054 40 41 44 2009 44 1503 44 1503 44 362 44 330 2055 40 41 44 2056 46 2057 40 41 44 2008 41 59 2058 46 2059 40 362 44 2060 46 2061 40 2050 41 41 59 2062 40 2050 46 2063 40 41 41 59 2062 40 2050 46 2064 40 41 41 59 2007 2065 61 2050 46 2057 40 41 59 2066 40 362 44 2065 41 59 2067 40 2053 46 2054 40 41 44 2050 46 2068 40 41 41 59 2069 40 2050 46 2070 40 41 41 59 2067 40 1502 44 2050 46 2071 40 41 41 59 2067 40 1503 44 2050 46 2072 40 41 41 59 2067 40 1503 44 2050 46 2073 40 41 41 59 2067 40 1503 44 2050 46 2074 40 41 41 59 2067 40 2056 46 2057 40 41 44 2050 46 2075 40 41 41 59 2067 40 2009 44 2050 46 2076 40 41 41 59 2067 40 2077 44 2050 46 2078 40 41 41 59 2069 40 2050 46 2079 40 41 41 59 2080 40 41 59 2050 61 2051 46 2081 40 2065 41 59 2062 40 2050 46 2063 40 41 41 59 2069 40 2050 46 2064 40 41 41 59 2067 40 2065 44 2050 46 2057 40 41 41 59 2067 40 2053 46 2054 40 41 44 2050 46 2068 40 41 41 59 2069 40 2050 46 2070 40 41 41 59 2067 40 1502 44 2050 46 2071 40 41 41 59 2067 40 1503 44 2050 46 2072 40 41 41 59 2067 40 1503 44 2050 46 2073 40 41 41 59 2067 40 1503 44 2050 46 2074 40 41 41 59 2067 40 2056 46 2057 40 41 44 2050 46 2075 40 41 41 59 2067 40 2009 44 2050 46 2076 40 41 41 59 2067 40 2077 44 2050 46 2078 40 41 41 59 2069 40 2050 46 2079 40 41 41 59 125 64 2012 64 2013 40 1502 41 777 865 2082 40 41 123 330 2083 2084 61 2085 46 2086 40 2087 46 2088 40 41 44 2009 44 1502 44 1502 44 362 44 330 2089 40 41 44 2090 46 2091 40 41 44 2008 41 59 2092 46 2093 40 362 44 2094 46 2095 40 2084 41 41 59 2096 40 2084 46 2097 40 41 41 59 2096 40 2084 46 2098 40 41 41 59 2007 2099 61 2084 46 2091 40 41 59 2100 40 362 44 2099 41 59 2101 40 2087 46 2088 40 41 44 2084 46 2102 40 41 41 59 2103 40 2084 46 2104 40 41 41 59 2101 40 1502 44 2084 46 2105 40 41 41 59 2101 40 1502 44 2084 46 2106 40 41 41 59 2101 40 1502 44 2084 46 2107 40 41 41 59 2101 40 1501 44 2084 46 2108 40 41 41 59 2101 40 2090 46 2091 40 41 44 2084 46 2109 40 41 41 59 2101 40 2009 44 2084 46 2110 40 41 41 59 2101 40 2111 44 2084 46 2112 40 41 41 59 2103 40 2084 46 2113 40 41 41 59 2114 40 41 59 2084 61 2085 46 2115 40 2099 41 59 2096 40 2084 46 2097 40 41 41 59 2103 40 2084 46 2098 40 41 41 59 2101 40 2099 44 2084 46 2091 40 41 41 59 2101 40 2087 46 2088 40 41 44 2084 46 2102 40 41 41 59 2103 40 2084 46 2104 40 41 41 59 2101 40 1502 44 2084 46 2105 40 41 41 59 2101 40 1502 44 2084 46 2106 40 41 41 59 2101 40 1502 44 2084 46 2107 40 41 41 59 2101 40 1501 44 2084 46 2108 40 41 41 59 2101 40 2090 46 2091 40 41 44 2084 46 2109 40 41 41 59 2101 40 2009 44 2084 46 2110 40 41 41 59 2101 40 2111 44 2084 46 2112 40 41 41 59 2103 40 2084 46 2113 40 41 41 59 125 64 2012 64 2013 40 1502 41 777 865 2116 40 41 123 330 2117 2118 61 2119 46 2120 40 2121 46 2122 40 41 44 2009 44 1503 44 1503 44 362 44 330 2123 40 41 44 2124 46 2125 40 41 44 2008 41 59 2126 46 2127 40 362 44 2128 46 2129 40 2118 41 41 59 2130 40 2118 46 2131 40 41 41 59 2130 40 2118 46 2132 40 41 41 59 2007 2133 61 2118 46 2125 40 41 59 2134 40 362 44 2133 41 59 2135 40 2121 46 2122 40 41 44 2118 46 2136 40 41 41 59 2137 40 2118 46 2138 40 41 41 59 2135 40 1502 44 2118 46 2139 40 41 41 59 2135 40 1503 44 2118 46 2140 40 41 41 59 2135 40 1503 44 2118 46 2141 40 41 41 59 2135 40 1502 44 2118 46 2142 40 41 41 59 2135 40 2124 46 2125 40 41 44 2118 46 2143 40 41 41 59 2135 40 2009 44 2118 46 2144 40 41 41 59 2135 40 2145 44 2118 46 2146 40 41 41 59 2137 40 2118 46 2147 40 41 41 59 2148 40 41 59 2118 61 2119 46 2149 40 2133 41 59 2130 40 2118 46 2131 40 41 41 59 2137 40 2118 46 2132 40 41 41 59 2135 40 2133 44 2118 46 2125 40 41 41 59 2135 40 2121 46 2122 40 41 44 2118 46 2136 40 41 41 59 2137 40 2118 46 2138 40 41 41 59 2135 40 1502 44 2118 46 2139 40 41 41 59 2135 40 1503 44 2118 46 2140 40 41 41 59 2135 40 1503 44 2118 46 2141 40 41 41 59 2135 40 1502 44 2118 46 2142 40 41 41 59 2135 40 2124 46 2125 40 41 44 2118 46 2143 40 41 41 59 2135 40 2009 44 2118 46 2144 40 41 41 59 2135 40 2145 44 2118 46 2146 40 41 41 59 2137 40 2118 46 2147 40 41 41 59 125 64 2012 64 2013 40 1502 41 777 865 2150 40 41 123 2151 60 2152 62 2153 61 2154 46 2155 40 41 59 2156 46 2157 40 362 44 2158 46 2159 40 2153 41 41 59 2160 40 1502 44 2153 46 2161 40 41 41 59 2156 46 2157 40 362 44 2162 40 2154 46 2163 40 41 41 41 59 125 64 2012 64 2013 40 1502 41 777 865 2164 40 41 123 2165 60 2166 62 2167 61 2168 46 2169 40 41 59 2170 46 2171 40 362 44 2172 46 2173 40 2167 41 41 59 2174 40 1502 44 2167 46 2175 40 41 41 59 2170 46 2171 40 362 44 2176 40 2168 46 2177 40 41 41 41 59 125 773 865 2178 40 41 123 330 330 330 2179 40 1501 44 1505 41 59 125 125 ,"{'AvgLine': 26, 'CountLine': 227, 'CountStmt': 144, 'MaxNesting': 0, 'AvgLineCode': 23, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 134, 'MaxEssential': 1, 'SumEssential': 8, 'AvgCyclomatic': 1, 'CountLineCode': 197, 'CountStmtDecl': 20, 'MaxCyclomatic': 1, 'SumCyclomatic': 8, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountSemicolon': 135, 'CountDeclMethod': 8, 'CountLineCodeExe': 163, 'CountLineComment': 13, 'CountClassCoupled': 12, 'CountClassDerived': 0, 'CountLineCodeDecl': 40, 'CountDeclMethodAll': 40, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.07', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 8, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 7, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 12, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2805,Java,"public class Notification extends Overlay<Notification> {
    private boolean hasBeenDisplayed;
    private boolean autoClose;
    private Timer autoCloseTimer;

    public Notification() {
        width = 413; // 320 visible bg because of insets
        NotificationCenter.add(this);
        type = Type.Notification;
    }

    void onReadyForDisplay() {
        super.display();

        if (autoClose && autoCloseTimer == null)
            autoCloseTimer = UserThread.runAfter(this::doClose, 6);

        stage.addEventHandler(MouseEvent.MOUSE_PRESSED, (event) -> doClose());
    }

    @Override
    public void hide() {
        animateHide();
    }

    @Override
    protected void onShow() {
        NotificationManager.queueForDisplay(this);
    }

    @Override
    protected void onHidden() {
        NotificationManager.onHidden(this);
    }

    public Notification tradeHeadLine(String tradeId) {
        return headLine(Res.get(""notification.trade.headline"", tradeId));
    }

    public Notification disputeHeadLine(String tradeId) {
        return headLine(Res.get(""notification.ticket.headline"", tradeId));
    }

    @Override
    public void show() {
        if (DevEnv.isDevMode()) {
            return;
        }
        super.show();
        hasBeenDisplayed = true;
    }


    public Notification autoClose() {
        autoClose = true;
        return this;
    }

    @Override
    protected void animateHide(Runnable onFinishedHandler) {
        if (autoCloseTimer != null) {
            autoCloseTimer.stop();
            autoCloseTimer = null;
        }

        if (NotificationCenter.useAnimations) {
            double duration = getDuration(400);
            Interpolator interpolator = Interpolator.SPLINE(0.25, 0.1, 0.25, 1);

            gridPane.setRotationAxis(Rotate.X_AXIS);
            Camera camera = gridPane.getScene().getCamera();
            gridPane.getScene().setCamera(new PerspectiveCamera());

            Timeline timeline = new Timeline();
            ObservableList<KeyFrame> keyFrames = timeline.getKeyFrames();
            keyFrames.add(new KeyFrame(Duration.millis(0),
                    new KeyValue(gridPane.rotateProperty(), 0, interpolator),
                    new KeyValue(gridPane.opacityProperty(), 1, interpolator)
            ));
            keyFrames.add(new KeyFrame(Duration.millis(duration),
                    new KeyValue(gridPane.rotateProperty(), -90, interpolator),
                    new KeyValue(gridPane.opacityProperty(), 0, interpolator)
            ));
            timeline.setOnFinished(event -> {
                gridPane.setRotate(0);
                gridPane.setRotationAxis(Rotate.Z_AXIS);
                gridPane.getScene().setCamera(camera);
                onFinishedHandler.run();
            });
            timeline.play();
        } else {
            onFinishedHandler.run();
        }
    }

    @Override
    protected void animateDisplay() {
        if (NotificationCenter.useAnimations) {
            double startX = 320;
            double duration = getDuration(600);
            Interpolator interpolator = Interpolator.SPLINE(0.25, 0.1, 0.25, 1);

            Timeline timeline = new Timeline();
            ObservableList<KeyFrame> keyFrames = timeline.getKeyFrames();
            keyFrames.add(new KeyFrame(Duration.millis(0),
                    new KeyValue(gridPane.opacityProperty(), 0, interpolator),
                    new KeyValue(gridPane.translateXProperty(), startX, interpolator)
            ));
            //bouncing
         /*   keyFrames.add(new KeyFrame(Duration.millis(duration * 0.6),
                    new KeyValue(gridPane.opacityProperty(), 1, interpolator),
                    new KeyValue(gridPane.translateXProperty(), -12, interpolator)
            ));
            keyFrames.add(new KeyFrame(Duration.millis(duration * 0.8),
                    new KeyValue(gridPane.opacityProperty(), 1, interpolator),
                    new KeyValue(gridPane.translateXProperty(), 4, interpolator)
            ));*/
            keyFrames.add(new KeyFrame(Duration.millis(duration),
                    new KeyValue(gridPane.opacityProperty(), 1, interpolator),
                    new KeyValue(gridPane.translateXProperty(), 0, interpolator)
            ));

            timeline.play();
        }
    }


    @Override
    protected void createGridPane() {
        super.createGridPane();
        gridPane.setPadding(new Insets(62, 62, 62, 62));
    }

    @Override
    protected void addButtons() {
        buttonDistance = 10;
        super.addButtons();
    }

    @Override
    protected void applyStyles() {
        gridPane.getStyleClass().add(""notification-popup-bg"");
        if (headLineLabel != null)
            headLineLabel.getStyleClass().add(""notification-popup-headline"");

        headlineIcon.getStyleClass().add(""popup-icon-information"");
        headlineIcon.setManaged(true);
        headlineIcon.setVisible(true);
        headlineIcon.setPadding(new Insets(1));
        FormBuilder.getIconForLabel(AwesomeIcon.INFO_SIGN, headlineIcon, ""1em"");
        if (actionButton != null)
            actionButton.getStyleClass().add(""compact-button"");
    }

    @Override
    protected void setModality() {
        stage.initOwner(owner.getScene().getWindow());
        stage.initModality(Modality.NONE);
    }

    @Override
    protected void layout() {
        Window window = owner.getScene().getWindow();
        double titleBarHeight = window.getHeight() - owner.getScene().getHeight();
        double shadowInset = 44;
        stage.setX(Math.round(window.getX() + window.getWidth() + shadowInset - stage.getWidth()));
        stage.setY(Math.round(window.getY() + titleBarHeight - shadowInset));
    }

    @Override
    protected void addEffectToBackground() {
    }

    @Override
    protected void removeEffectFromBackground() {
    }

    public boolean isHasBeenDisplayed() {
        return hasBeenDisplayed;
    }
}",0,777 587 2000 650 2001 60 2000 62 123 773 570 2002 59 773 570 2003 59 773 2004 2005 59 777 2000 40 41 123 2006 61 1504 59 330 2007 46 2008 40 823 41 59 2009 61 2010 46 2000 59 125 865 2011 40 41 123 818 46 2012 40 41 59 688 40 2003 307 2005 323 2013 41 2005 61 2014 46 2015 40 823 58 58 2016 44 1502 41 59 2017 46 2018 40 2019 46 2020 44 40 2021 41 45 62 2016 40 41 41 59 125 64 2022 777 865 2023 40 41 123 2024 40 41 59 125 64 2022 775 865 2025 40 41 123 2026 46 2027 40 823 41 59 125 64 2022 775 865 2028 40 41 123 2029 46 2028 40 823 41 59 125 777 2000 2030 40 2031 2032 41 123 792 2033 40 2034 46 2035 40 362 44 2032 41 41 59 125 777 2000 2036 40 2031 2032 41 123 792 2037 40 2038 46 2039 40 362 44 2032 41 41 59 125 64 2022 777 865 2040 40 41 123 688 40 2041 46 2042 40 41 41 123 792 59 125 818 46 2040 40 41 59 2002 61 2043 59 125 777 2000 2003 40 41 123 2003 61 2044 59 792 823 59 125 64 2022 775 865 2045 40 2046 2047 41 123 688 40 2005 340 2048 41 123 2005 46 2049 40 41 59 2005 61 2048 59 125 688 40 2050 46 2051 41 123 625 2052 61 2053 40 1504 41 59 2054 2055 61 2054 46 2056 40 1500 44 1500 44 1500 44 1501 41 59 2057 46 2058 40 2059 46 2060 41 59 2061 2062 61 2057 46 2063 40 41 46 2064 40 41 59 2057 46 2063 40 41 46 2065 40 744 2066 40 41 41 59 2067 2068 61 744 2067 40 41 59 2069 60 2070 62 2071 61 2068 46 2072 40 41 59 2071 46 2073 40 744 2070 40 2074 46 2075 40 1500 41 44 744 2076 40 2057 46 2077 40 41 44 1500 44 2055 41 44 744 2076 40 2057 46 2078 40 41 44 1501 44 2055 41 41 41 59 2071 46 2073 40 744 2070 40 2074 46 2075 40 2052 41 44 744 2076 40 2057 46 2077 40 41 44 45 1503 44 2055 41 44 744 2076 40 2057 46 2078 40 41 44 1500 44 2055 41 41 41 59 2068 46 2079 40 2080 45 62 123 2057 46 2081 40 1500 41 59 2057 46 2058 40 2059 46 2082 41 59 2057 46 2063 40 41 46 2065 40 2062 41 59 2047 46 2083 40 41 59 125 41 59 2068 46 2084 40 41 59 125 630 123 2047 46 2085 40 41 59 125 125 64 2022 775 865 2086 40 41 123 688 40 2087 46 2088 41 123 625 2089 61 1504 59 625 2090 61 2091 40 1504 41 59 2092 2093 61 2092 46 2094 40 1500 44 1500 44 1500 44 1501 41 59 2095 2096 61 744 2095 40 41 59 2097 60 2098 62 2099 61 2096 46 2100 40 41 59 2099 46 2101 40 744 2098 40 2102 46 2103 40 1500 41 44 744 2104 40 2105 46 2106 40 41 44 1500 44 2093 41 44 744 2104 40 2105 46 2107 40 41 44 2089 44 2093 41 41 41 59 330 305 2099 46 2101 40 744 2098 40 2102 46 2103 40 2090 41 44 744 2104 40 2105 46 2106 40 41 44 1501 44 2093 41 44 744 2104 40 2105 46 2107 40 41 44 1500 44 2093 41 41 41 59 2096 46 2108 40 41 59 125 125 64 2022 775 865 2109 40 41 123 818 46 2109 40 41 59 2110 46 2111 40 744 2112 40 1503 44 1503 44 1503 44 1503 41 41 59 125 64 2022 775 865 2113 40 41 123 2114 61 1502 59 818 46 2113 40 41 59 125 64 2022 775 865 2115 40 41 123 2116 46 2117 40 41 46 2118 40 362 41 59 688 40 2119 340 2120 41 2119 46 2117 40 41 46 2118 40 362 41 59 2121 46 2117 40 41 46 2118 40 362 41 59 2121 46 2122 40 2123 41 59 2121 46 2124 40 2123 41 59 2121 46 2125 40 744 2126 40 1501 41 41 59 2127 46 2128 40 2129 46 2130 44 2121 44 362 41 59 688 40 2131 340 2120 41 2131 46 2117 40 41 46 2118 40 362 41 59 125 64 2022 775 865 2132 40 41 123 2133 46 2134 40 2135 46 2136 40 41 46 2137 40 41 41 59 2133 46 2138 40 2139 46 2140 41 59 125 64 2022 775 865 2141 40 41 123 2142 2143 61 2144 46 2145 40 41 46 2146 40 41 59 625 2147 61 2143 46 2148 40 41 45 2144 46 2145 40 41 46 2148 40 41 59 625 2149 61 1503 59 2150 46 2151 40 2152 46 2153 40 2143 46 2154 40 41 43 2143 46 2155 40 41 43 2149 45 2150 46 2155 40 41 41 41 59 2150 46 2156 40 2152 46 2153 40 2143 46 2157 40 41 43 2147 45 2149 41 41 59 125 64 2022 775 865 2158 40 41 123 125 64 2022 775 865 2159 40 41 123 125 777 570 2160 40 41 123 792 2002 59 125 125 ,"{'AvgLine': 8, 'CountLine': 181, 'CountStmt': 92, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 67, 'MaxEssential': 1, 'SumEssential': 21, 'AvgCyclomatic': 1, 'CountLineCode': 143, 'CountStmtDecl': 36, 'MaxCyclomatic': 3, 'SumCyclomatic': 28, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 29, 'CountSemicolon': 65, 'CountDeclMethod': 19, 'CountLineCodeExe': 83, 'CountLineComment': 10, 'CountClassCoupled': 25, 'CountClassDerived': 0, 'CountLineCodeDecl': 49, 'CountDeclMethodAll': 88, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.07', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 29, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 7, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 89, 'SumCyclomaticModified': 28, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 19, 'CountDeclMethodProtected': 11, 'CountClassCoupledModified': 25, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 89}"
2980,Java,"@Slf4j
@Singleton
public class RefundAgentManager extends DisputeAgentManager<RefundAgent> {

    @Inject
    public RefundAgentManager(KeyRing keyRing,
                              RefundAgentService refundAgentService,
                              User user,
                              FilterManager filterManager,
                              @Named(Config.USE_DEV_PRIVILEGE_KEYS) boolean useDevPrivilegeKeys) {
        super(keyRing, refundAgentService, user, filterManager, useDevPrivilegeKeys);
    }

    @Override
    protected List<String> getPubKeyList() {
        return List.of(""02a25798e256b800d7ea71c31098ac9a47cb20892176afdfeb051f5ded382d44af"",
                ""0360455d3cffe00ef73cc1284c84eedacc8c5c3374c43f4aac8ffb95f5130b9ef5"",
                ""03b0513afbb531bc4551b379eba027feddd33c92b5990fd477b0fa6eff90a5b7db"",
                ""03533fd75fda29c351298e50b8ea696656dcb8ce4e263d10618c6901a50450bf0e"",
                ""028124436482aa4c61a4bc4097d60c80b09f4285413be3b023a37a0164cbd5d818"",
                ""0384fcf883116d8e9469720ed7808cc4141f6dc6a5ed23d76dd48f2f5f255590d7"",
                ""029bd318ecee4e212ff06a4396770d600d72e9e0c6532142a428bdb401491e9721"",
                ""02e375b4b24d0a858953f7f94666667554d41f78000b9c8a301294223688b29011"",
                ""0232c088ae7c070de89d2b6c8d485b34bf0e3b2a964a2c6622f39ca501260c23f7"",
                ""033e047f74f2aa1ce41e8c85731f97ab83d448d65dc8518ab3df4474a5d53a3d19"",
                ""02f52a8cf373c8cbddb318e523b7f111168bf753fdfb6f8aa81f88c950ede3a5ce"",
                ""039784029922c54bcd0f0e7f14530f586053a5f4e596e86b3474cd7404657088ae"",
                ""037969f9d5ab2cc609104c6e61323df55428f8f108c11aab7c7b5f953081d39304"",
                ""031bd37475b8c5615ac46d6816e791c59d806d72a0bc6739ae94e5fe4545c7f8a6"",
                ""021bb92c636feacf5b082313eb071a63dfcd26501a48b3cd248e35438e5afb7daf"");


    }

    @Override
    protected boolean isExpectedInstance(ProtectedStorageEntry data) {
        return data.getProtectedStoragePayload() instanceof RefundAgent;
    }

    @Override
    protected void addAcceptedDisputeAgentToUser(RefundAgent disputeAgent) {
        user.addAcceptedRefundAgent(disputeAgent);
    }

    @Override
    protected void removeAcceptedDisputeAgentFromUser(ProtectedStorageEntry data) {
        user.removeAcceptedRefundAgent((RefundAgent) data.getProtectedStoragePayload());
    }

    @Override
    protected List<RefundAgent> getAcceptedDisputeAgentsFromUser() {
        return user.getAcceptedRefundAgents();
    }

    @Override
    protected void clearAcceptedDisputeAgentsAtUser() {
        user.clearAcceptedRefundAgents();
    }

    @Override
    protected RefundAgent getRegisteredDisputeAgentFromUser() {
        return user.getRegisteredRefundAgent();
    }

    @Override
    protected void setRegisteredDisputeAgentAtUser(RefundAgent disputeAgent) {
        user.setRegisteredRefundAgent(disputeAgent);
    }
}",0,64 2000 64 2001 777 587 2002 650 2003 60 2004 62 123 64 2005 777 2002 40 2006 2007 44 2008 2009 44 2010 2011 44 2012 2013 44 64 2014 40 2015 46 2016 41 570 2017 41 123 818 40 2007 44 2009 44 2011 44 2013 44 2017 41 59 125 64 2018 775 2019 60 2020 62 2021 40 41 123 792 2019 46 2022 40 362 44 362 44 362 44 362 44 362 44 362 44 362 44 362 44 362 44 362 44 362 44 362 44 362 44 362 44 362 41 59 125 64 2018 775 570 2023 40 2024 2025 41 123 792 2025 46 2026 40 41 702 2004 59 125 64 2018 775 865 2027 40 2004 2028 41 123 2011 46 2029 40 2028 41 59 125 64 2018 775 865 2030 40 2024 2025 41 123 2011 46 2031 40 40 2004 41 2025 46 2032 40 41 41 59 125 64 2018 775 2019 60 2004 62 2033 40 41 123 792 2011 46 2034 40 41 59 125 64 2018 775 865 2035 40 41 123 2011 46 2036 40 41 59 125 64 2018 775 2004 2037 40 41 123 792 2011 46 2038 40 41 59 125 64 2018 775 865 2039 40 2004 2028 41 123 2011 46 2040 40 2028 41 59 125 125 ,"{'AvgLine': 6, 'CountLine': 69, 'CountStmt': 19, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 9, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 58, 'CountStmtDecl': 10, 'MaxCyclomatic': 1, 'SumCyclomatic': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 11, 'CountSemicolon': 9, 'CountDeclMethod': 9, 'CountLineCodeExe': 23, 'CountLineComment': 0, 'CountClassCoupled': 13, 'CountClassDerived': 0, 'CountLineCodeDecl': 25, 'CountDeclMethodAll': 35, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 8, 'CountClassCoupledModified': 13, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
3369,Java,"@Immutable
@Getter
public final class Tx extends BaseTx implements PersistablePayload, ImmutableDaoStateModel {
    // Created after parsing of a tx is completed. We store only the immutable tx in the block.
    public static Tx fromTempTx(TempTx tempTx) {
        ImmutableList<TxOutput> txOutputs = ImmutableList.copyOf(tempTx.getTempTxOutputs().stream()
                .map(TxOutput::fromTempOutput)
                .collect(Collectors.toList()));

        return new Tx(tempTx.getTxVersion(),
                tempTx.getId(),
                tempTx.getBlockHeight(),
                tempTx.getBlockHash(),
                tempTx.getTime(),
                tempTx.getTxInputs(),
                txOutputs,
                tempTx.getTxType(),
                tempTx.getBurntBsq());
    }

    private final ImmutableList<TxOutput> txOutputs;
    @Nullable
    private final TxType txType;
    // Can be burned fee or in case of an invalid tx the burned BSQ from all BSQ inputs
    private final long burntBsq;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    private Tx(String txVersion,
               String id,
               int blockHeight,
               String blockHash,
               long time,
               ImmutableList<TxInput> txInputs,
               ImmutableList<TxOutput> txOutputs,
               @Nullable TxType txType,
               long burntBsq) {
        super(txVersion,
                id,
                blockHeight,
                blockHash,
                time,
                txInputs);
        this.txOutputs = txOutputs;
        this.txType = txType;
        this.burntBsq = burntBsq;

    }

    @Override
    public protobuf.BaseTx toProtoMessage() {
        final protobuf.Tx.Builder builder = protobuf.Tx.newBuilder()
                .addAllTxOutputs(txOutputs.stream()
                        .map(TxOutput::toProtoMessage)
                        .collect(Collectors.toList()))
                .setBurntBsq(burntBsq);
        Optional.ofNullable(txType).ifPresent(txType -> builder.setTxType(txType.toProtoMessage()));
        return getBaseTxBuilder().setTx(builder).build();
    }

    public static Tx fromProto(protobuf.BaseTx protoBaseTx) {
        ImmutableList<TxInput> txInputs = protoBaseTx.getTxInputsList().isEmpty() ?
                ImmutableList.copyOf(new ArrayList<>()) :
                ImmutableList.copyOf(protoBaseTx.getTxInputsList().stream()
                        .map(TxInput::fromProto)
                        .collect(Collectors.toList()));
        protobuf.Tx protoTx = protoBaseTx.getTx();
        ImmutableList<TxOutput> outputs = protoTx.getTxOutputsList().isEmpty() ?
                ImmutableList.copyOf(new ArrayList<>()) :
                ImmutableList.copyOf(protoTx.getTxOutputsList().stream()
                        .map(TxOutput::fromProto)
                        .collect(Collectors.toList()));
        return new Tx(protoBaseTx.getTxVersion(),
                protoBaseTx.getId(),
                protoBaseTx.getBlockHeight(),
                protoBaseTx.getBlockHash(),
                protoBaseTx.getTime(),
                txInputs,
                outputs,
                TxType.fromProto(protoTx.getTxType()),
                protoTx.getBurntBsq());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Utils
    ///////////////////////////////////////////////////////////////////////////////////////////

    public TxOutput getLastTxOutput() {
        return txOutputs.get(txOutputs.size() - 1);
    }


    public long getBurntBsq() {
        return burntBsq;
    }

    public long getBurntFee() {
        return txType == TxType.INVALID ? 0 : burntBsq;
    }

    public long getInvalidatedBsq() {
        return txType == TxType.INVALID ? burntBsq : 0;
    }

    public int getLockTime() {
        return getLockupOutput().getLockTime();
    }

    public long getLockedAmount() {
        return getLockupOutput().getValue();
    }

    // The lockTime is stored in the first output of the LOCKUP tx.
    public TxOutput getLockupOutput() {
        return txOutputs.get(0);
    }

    // The unlockBlockHeight is stored in the first output of the UNLOCK tx.
    public int getUnlockBlockHeight() {
        return getLockupOutput().getUnlockBlockHeight();
    }

    @Override
    public String toString() {
        return ""Tx{"" +
                ""\n     txOutputs="" + txOutputs +
                "",\n     txType="" + txType +
                "",\n     burntBsq="" + burntBsq +
                ""\n} "" + super.toString();
    }

    // Enums must not be used directly for hashCode or equals as it delivers the Object.hashCode (internal address)!
    // The equals and hashCode methods cannot be overwritten in Enums.
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Tx)) return false;
        if (!super.equals(o)) return false;
        Tx tx = (Tx) o;

        String name = txType != null ? txType.name() : """";
        String name1 = tx.txType != null ? tx.txType.name() : """";
        boolean isTxTypeEquals = name.equals(name1);

        return burntBsq == tx.burntBsq &&
                Objects.equals(txOutputs, tx.txOutputs) &&
                isTxTypeEquals;
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode(), txOutputs, txType, burntBsq);
    }
}",0,64 2000 64 2001 777 657 587 2002 650 2003 693 2004 44 2005 123 330 777 809 2002 2006 40 2007 2008 41 123 2009 60 2010 62 2011 61 2009 46 2012 40 2008 46 2013 40 41 46 2014 40 41 46 2015 40 2010 58 58 2016 41 46 2017 40 2018 46 2019 40 41 41 41 59 792 744 2002 40 2008 46 2020 40 41 44 2008 46 2021 40 41 44 2008 46 2022 40 41 44 2008 46 2023 40 41 44 2008 46 2024 40 41 44 2008 46 2025 40 41 44 2011 44 2008 46 2026 40 41 44 2008 46 2027 40 41 41 59 125 773 657 2028 60 2029 62 2030 59 64 2031 773 657 2032 2033 59 330 773 657 726 2034 59 331 330 331 773 2002 40 2035 2036 44 2035 2037 44 704 2038 44 2035 2039 44 726 2040 44 2028 60 2041 62 2042 44 2028 60 2029 62 2030 44 64 2031 2032 2033 44 726 2034 41 123 818 40 2036 44 2037 44 2038 44 2039 44 2040 44 2042 41 59 823 46 2030 61 2030 59 823 46 2033 61 2033 59 823 46 2034 61 2034 59 125 64 2043 777 2044 46 2003 2045 40 41 123 657 2044 46 2002 46 2046 2047 61 2044 46 2002 46 2048 40 41 46 2049 40 2030 46 2050 40 41 46 2051 40 2029 58 58 2045 41 46 2052 40 2053 46 2054 40 41 41 41 46 2055 40 2034 41 59 2056 46 2057 40 2033 41 46 2058 40 2033 45 62 2047 46 2059 40 2033 46 2045 40 41 41 41 59 792 2060 40 41 46 2061 40 2047 41 46 2062 40 41 59 125 777 809 2002 2063 40 2044 46 2003 2064 41 123 2028 60 2041 62 2042 61 2064 46 2065 40 41 46 2066 40 41 63 2028 46 2067 40 744 2068 60 62 40 41 41 58 2028 46 2067 40 2064 46 2065 40 41 46 2069 40 41 46 2070 40 2041 58 58 2063 41 46 2071 40 2072 46 2073 40 41 41 41 59 2044 46 2002 2074 61 2064 46 2075 40 41 59 2028 60 2029 62 2076 61 2074 46 2077 40 41 46 2066 40 41 63 2028 46 2067 40 744 2068 60 62 40 41 41 58 2028 46 2067 40 2074 46 2077 40 41 46 2069 40 41 46 2070 40 2029 58 58 2063 41 46 2071 40 2072 46 2073 40 41 41 41 59 792 744 2002 40 2064 46 2078 40 41 44 2064 46 2079 40 41 44 2064 46 2080 40 41 44 2064 46 2081 40 41 44 2064 46 2082 40 41 44 2042 44 2076 44 2032 46 2063 40 2074 46 2083 40 41 41 44 2074 46 2084 40 41 41 59 125 331 330 331 777 2029 2085 40 41 123 792 2030 46 2086 40 2030 46 2087 40 41 45 1501 41 59 125 777 726 2088 40 41 123 792 2034 59 125 777 726 2089 40 41 123 792 2033 323 2032 46 2090 63 1500 58 2034 59 125 777 726 2091 40 41 123 792 2033 323 2032 46 2092 63 2034 58 1500 59 125 777 704 2093 40 41 123 792 2094 40 41 46 2093 40 41 59 125 777 726 2095 40 41 123 792 2096 40 41 46 2097 40 41 59 125 330 777 2029 2098 40 41 123 792 2030 46 2099 40 1500 41 59 125 330 777 704 2100 40 41 123 792 2098 40 41 46 2100 40 41 59 125 64 2043 777 2035 2101 40 41 123 792 362 43 362 43 2030 43 362 43 2033 43 362 43 2034 43 362 43 818 46 2101 40 41 59 125 330 330 64 2043 777 570 2102 40 2103 2104 41 123 688 40 823 323 2104 41 792 2105 59 688 40 33 40 2104 702 2002 41 41 792 2106 59 688 40 33 818 46 2102 40 2104 41 41 792 2106 59 2002 2107 61 40 2002 41 2104 59 2035 2108 61 2033 340 2109 63 2033 46 2108 40 41 58 362 59 2035 2110 61 2107 46 2033 340 2109 63 2107 46 2033 46 2108 40 41 58 362 59 570 2111 61 2108 46 2102 40 2110 41 59 792 2034 323 2107 46 2034 307 2112 46 2102 40 2030 44 2107 46 2030 41 307 2111 59 125 64 2043 777 704 2113 40 41 123 792 2114 46 2115 40 818 46 2113 40 41 44 2030 44 2033 44 2034 41 59 125 125 ,"{'AvgLine': 7, 'CountLine': 162, 'CountStmt': 53, 'MaxNesting': 1, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 33, 'MaxEssential': 4, 'SumEssential': 19, 'AvgCyclomatic': 1, 'CountLineCode': 122, 'CountStmtDecl': 28, 'MaxCyclomatic': 6, 'SumCyclomatic': 25, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 24, 'CountSemicolon': 34, 'CountDeclMethod': 15, 'CountLineCodeExe': 72, 'CountLineComment': 16, 'CountClassCoupled': 17, 'CountClassDerived': 0, 'CountLineCodeDecl': 47, 'CountDeclMethodAll': 18, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.13', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 27, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 14, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 51, 'SumCyclomaticModified': 25, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 17, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 31}"
2875,Java,"public class ChauchaTest extends AbstractAssetTest {

    public ChauchaTest() {
        super(new Chaucha());
    }

    @Test
    public void testValidAddresses() {
        assertValidAddress(""cTC7AodMWM4fXsG1TDu4JLn2qKQoMg4F9N"");
        assertValidAddress(""caWnffHrx8wkQqcSVJ7wpRvN1E7Ztz7kPP"");
        assertValidAddress(""ciWwaG4trw1vQZSL4F4phQqznK4NgZURdQ"");
    }

    @Test
    public void testInvalidAddresses() {
        assertInvalidAddress(""1cTC7AodMWM4fXsG1TDu4JLn2qKQoMg4F9N"");
        assertInvalidAddress(""cTC7AodMWM4fXsG1TDu4JLn2qKQoMg4F9XN"");
        assertInvalidAddress(""cTC7AodMWM4fXsG1TDu4JLn2qKQoMg4F9N#"");
    }
}",0,777 587 2000 650 2001 123 777 2000 40 41 123 818 40 744 2002 40 41 41 59 125 64 2003 777 865 2004 40 41 123 2005 40 362 41 59 2005 40 362 41 59 2005 40 362 41 59 125 64 2003 777 865 2006 40 41 123 2007 40 362 41 59 2007 40 362 41 59 2007 40 362 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 20, 'CountStmt': 11, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 7, 'CountDeclMethod': 3, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2742,Java,"@Slf4j
class OpenBsqSwapOffer {
    @Getter
    @Delegate
    private final OpenOffer openOffer;

    private final OpenBsqSwapOfferService openBsqSwapOfferService;
    private final FeeService feeService;
    private final BtcWalletService btcWalletService;
    private final BsqWalletService bsqWalletService;

    private final long tradeFee;
    private final boolean isBuyOffer;
    private final InvalidationListener feeChangeListener;
    private final BsqBalanceListener bsqBalanceListener;
    private final WalletChangeEventListener btcWalletChangeEventListener;
    private final Coin btcAmount;
    private final Coin requiredBsqInput;

    // Mutable data
    private long txFeePerVbyte;
    private Coin walletBalance;
    private boolean hasMissingFunds;

    public OpenBsqSwapOffer(OpenOffer openOffer,
                            OpenBsqSwapOfferService openBsqSwapOfferService,
                            FeeService feeService,
                            BtcWalletService btcWalletService,
                            BsqWalletService bsqWalletService) {
        this.openOffer = openOffer;
        this.openBsqSwapOfferService = openBsqSwapOfferService;
        this.feeService = feeService;
        this.btcWalletService = btcWalletService;
        this.bsqWalletService = bsqWalletService;

        Offer offer = openOffer.getOffer();
        isBuyOffer = offer.isBuyOffer();
        tradeFee = offer.getMakerFee().getValue();

        txFeePerVbyte = feeService.getTxFeePerVbyte().getValue();
        feeChangeListener = observable -> {
            long newTxFeePerVbyte = feeService.getTxFeePerVbyte().value;
            if (newTxFeePerVbyte != this.txFeePerVbyte) {
                this.txFeePerVbyte = newTxFeePerVbyte;
                evaluateFundedState();
                log.info(""Updated because of fee change. txFeePerVbyte={}, hasMissingFunds={}"",
                        txFeePerVbyte, hasMissingFunds);

            }
        };
        feeService.feeUpdateCounterProperty().addListener(feeChangeListener);

        if (isBuyOffer) {

            Coin bsqAmount = BsqSwapCalculation.getBsqTradeAmount(Objects.requireNonNull(offer.getVolume()));
            requiredBsqInput = BsqSwapCalculation.getBuyersBsqInputValue(bsqAmount.getValue(), tradeFee);
            walletBalance = bsqWalletService.getVerifiedBalance();
            bsqBalanceListener = (availableBalance,
                                  availableNonBsqBalance,
                                  unverifiedBalance,
                                  unconfirmedChangeBalance,
                                  lockedForVotingBalance,
                                  lockedInBondsBalance,
                                  unlockingBondsBalance) -> {
                if (!walletBalance.equals(availableBalance)) {
                    walletBalance = bsqWalletService.getVerifiedBalance();
                    evaluateFundedState();
                    applyFundingState();
                    log.info(""Updated because of BSQ wallet balance change. walletBalance={}, hasMissingFunds={}"",
                            walletBalance, hasMissingFunds);
                }
            };
            bsqWalletService.addBsqBalanceListener(bsqBalanceListener);
            btcWalletChangeEventListener = null;
            btcAmount = null;
        } else {
            btcAmount = offer.getAmount();
            walletBalance = btcWalletService.getSavingWalletBalance();
            btcWalletChangeEventListener = wallet -> {
                Coin newBalance = btcWalletService.getSavingWalletBalance();
                if (!this.walletBalance.equals(newBalance)) {
                    this.walletBalance = newBalance;
                    evaluateFundedState();
                    applyFundingState();
                    log.info(""Updated because of BTC wallet balance change. walletBalance={}, hasMissingFunds={}"",
                            walletBalance, hasMissingFunds);
                }
            };
            btcWalletService.addChangeEventListener(btcWalletChangeEventListener);
            bsqBalanceListener = null;
            requiredBsqInput = null;
        }

        // We might need to reset the state
        if (openOffer.isBsqSwapOfferHasMissingFunds()) {
            openOffer.setState(OpenOffer.State.AVAILABLE);
            openBsqSwapOfferService.requestPersistence();
        }

        evaluateFundedState();
        applyFundingState();
    }

    public void removeListeners() {
        feeService.feeUpdateCounterProperty().removeListener(feeChangeListener);
        if (isBuyOffer) {
            bsqWalletService.removeBsqBalanceListener(bsqBalanceListener);
        } else {
            btcWalletService.removeChangeEventListener(btcWalletChangeEventListener);
        }
    }

    // We apply the
    public void applyFundingState() {
        boolean prev = openOffer.isBsqSwapOfferHasMissingFunds();
        if (hasMissingFunds && !prev) {
            openOffer.setBsqSwapOfferHasMissingFunds(true);
            openBsqSwapOfferService.requestPersistence();

            if (!isDeactivated()) {
                openBsqSwapOfferService.disableBsqSwapOffer(getOpenOffer());
            }

        } else if (!hasMissingFunds && prev) {
            openOffer.setBsqSwapOfferHasMissingFunds(false);
            openBsqSwapOfferService.requestPersistence();

            if (!isDeactivated()) {
                openBsqSwapOfferService.enableBsqSwapOffer(getOpenOffer());
            }
        }
    }

    private void evaluateFundedState() {
        if (isBuyOffer) {
            hasMissingFunds = walletBalance.isLessThan(requiredBsqInput);
        } else {
            try {
                Coin requiredInput = BsqSwapCalculation.getSellersBtcInputValue(btcWalletService,
                        btcAmount,
                        txFeePerVbyte,
                        tradeFee);
                hasMissingFunds = walletBalance.isLessThan(requiredInput);
            } catch (InsufficientMoneyException e) {
                hasMissingFunds = true;
            }
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        OpenBsqSwapOffer that = (OpenBsqSwapOffer) o;
        return tradeFee == that.tradeFee && isBuyOffer == that.isBuyOffer && openOffer.equals(that.openOffer) &&
                btcAmount.equals(that.btcAmount) && requiredBsqInput.equals(that.requiredBsqInput);
    }

    @Override
    public int hashCode() {
        return Objects.hash(openOffer, tradeFee, isBuyOffer, btcAmount, requiredBsqInput);
    }
}",0,64 2000 587 2001 123 64 2002 64 2003 773 657 2004 2005 59 773 657 2006 2007 59 773 657 2008 2009 59 773 657 2010 2011 59 773 657 2012 2013 59 773 657 726 2014 59 773 657 570 2015 59 773 657 2016 2017 59 773 657 2018 2019 59 773 657 2020 2021 59 773 657 2022 2023 59 773 657 2022 2024 59 330 773 726 2025 59 773 2022 2026 59 773 570 2027 59 777 2001 40 2004 2005 44 2006 2007 44 2008 2009 44 2010 2011 44 2012 2013 41 123 823 46 2005 61 2005 59 823 46 2007 61 2007 59 823 46 2009 61 2009 59 823 46 2011 61 2011 59 823 46 2013 61 2013 59 2028 2029 61 2005 46 2030 40 41 59 2015 61 2029 46 2015 40 41 59 2014 61 2029 46 2031 40 41 46 2032 40 41 59 2025 61 2009 46 2033 40 41 46 2032 40 41 59 2017 61 2034 45 62 123 726 2035 61 2009 46 2033 40 41 46 2036 59 688 40 2035 340 823 46 2025 41 123 823 46 2025 61 2035 59 2037 40 41 59 2038 46 2039 40 362 44 2025 44 2027 41 59 125 125 59 2009 46 2040 40 41 46 2041 40 2017 41 59 688 40 2015 41 123 2022 2042 61 2043 46 2044 40 2045 46 2046 40 2029 46 2047 40 41 41 41 59 2024 61 2043 46 2048 40 2042 46 2032 40 41 44 2014 41 59 2026 61 2013 46 2049 40 41 59 2019 61 40 2050 44 2051 44 2052 44 2053 44 2054 44 2055 44 2056 41 45 62 123 688 40 33 2026 46 2057 40 2050 41 41 123 2026 61 2013 46 2049 40 41 59 2058 40 41 59 2059 40 41 59 2060 46 2061 40 362 44 2026 44 2027 41 59 125 125 59 2013 46 2062 40 2019 41 59 2021 61 2063 59 2023 61 2063 59 125 630 123 2023 61 2029 46 2064 40 41 59 2026 61 2011 46 2065 40 41 59 2021 61 2066 45 62 123 2022 2067 61 2011 46 2065 40 41 59 688 40 33 823 46 2026 46 2068 40 2067 41 41 123 823 46 2026 61 2067 59 2069 40 41 59 2070 40 41 59 2071 46 2072 40 362 44 2026 44 2027 41 59 125 125 59 2011 46 2073 40 2021 41 59 2019 61 2074 59 2024 61 2074 59 125 330 688 40 2005 46 2075 40 41 41 123 2005 46 2076 40 2004 46 2077 46 2078 41 59 2007 46 2079 40 41 59 125 2080 40 41 59 2081 40 41 59 125 777 865 2082 40 41 123 2009 46 2083 40 41 46 2084 40 2017 41 59 688 40 2015 41 123 2013 46 2085 40 2019 41 59 125 630 123 2011 46 2086 40 2021 41 59 125 125 330 777 865 2087 40 41 123 570 2088 61 2005 46 2089 40 41 59 688 40 2027 307 33 2088 41 123 2005 46 2090 40 2091 41 59 2007 46 2092 40 41 59 688 40 33 2093 40 41 41 123 2007 46 2094 40 2095 40 41 41 59 125 125 630 688 40 33 2027 307 2088 41 123 2005 46 2096 40 2097 41 59 2007 46 2098 40 41 59 688 40 33 2099 40 41 41 123 2007 46 2100 40 2101 40 41 41 59 125 125 125 773 865 2102 40 41 123 688 40 2015 41 123 2027 61 2026 46 2103 40 2024 41 59 125 630 123 830 123 2022 2104 61 2105 46 2106 40 2011 44 2023 44 2025 44 2014 41 59 2027 61 2026 46 2107 40 2104 41 59 125 580 40 2108 2109 41 123 2027 61 2110 59 125 125 125 64 2111 777 570 2112 40 2113 2114 41 123 688 40 823 323 2114 41 792 2115 59 688 40 2114 323 2116 309 2117 40 41 340 2114 46 2117 40 41 41 792 2118 59 2001 2119 61 40 2001 41 2114 59 792 2014 323 2119 46 2014 307 2015 323 2119 46 2015 307 2005 46 2112 40 2119 46 2005 41 307 2023 46 2112 40 2119 46 2023 41 307 2024 46 2112 40 2119 46 2024 41 59 125 64 2111 777 704 2120 40 41 123 792 2121 46 2122 40 2005 44 2014 44 2015 44 2023 44 2024 41 59 125 125 ,"{'AvgLine': 22, 'CountLine': 172, 'CountStmt': 96, 'MaxNesting': 2, 'AvgLineCode': 20, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 73, 'MaxEssential': 3, 'SumEssential': 11, 'AvgCyclomatic': 2, 'CountLineCode': 141, 'CountStmtDecl': 29, 'MaxCyclomatic': 5, 'SumCyclomatic': 23, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 19, 'CountSemicolon': 75, 'CountDeclMethod': 6, 'CountLineCodeExe': 92, 'CountLineComment': 12, 'CountClassCoupled': 18, 'CountClassDerived': 0, 'CountLineCodeDecl': 39, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 30, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 5, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 53, 'SumCyclomaticModified': 23, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 18, 'CountDeclInstanceVariable': 15, 'PercentLackOfCohesionModified': 52}"
2735,Java,"public class StringColumn extends AbstractColumn<StringColumn, String> {

    private final List<String> rows = new ArrayList<>();

    private final Predicate<String> isNewMaxWidth = (s) -> s != null && !s.isEmpty() && s.length() > maxWidth;

    // The default StringColumn JUSTIFICATION is LEFT.
    public StringColumn(String name) {
        this(name, LEFT);
    }

    // Use this constructor to override default LEFT justification.
    public StringColumn(String name, JUSTIFICATION justification) {
        super(name, justification);
        this.maxWidth = name.length();
    }

    @Override
    public void addRow(String value) {
        rows.add(value);
        if (isNewMaxWidth.test(value))
            maxWidth = value.length();
    }

    @Override
    public List<String> getRows() {
        return rows;
    }

    @Override
    public int rowCount() {
        return rows.size();
    }

    @Override
    public boolean isEmpty() {
        return rows.isEmpty();
    }

    @Override
    public String getRow(int rowIndex) {
        return rows.get(rowIndex);
    }

    @Override
    public void updateRow(int rowIndex, String newValue) {
        rows.set(rowIndex, newValue);
    }

    @Override
    public String getRowAsFormattedString(int rowIndex) {
        return getRow(rowIndex);
    }

    @Override
    public StringColumn asStringColumn() {
        return this;
    }

    @Override
    public StringColumn justify() {
        if (justification.equals(RIGHT)) {
            IntStream.range(0, getRows().size()).forEach(rowIndex -> {
                String unjustified = getRow(rowIndex);
                String justified = toJustifiedString(unjustified);
                updateRow(rowIndex, justified);
            });
        }
        return this;
    }
}",0,777 587 2000 650 2001 60 2000 44 2002 62 123 773 657 2003 60 2002 62 2004 61 744 2005 60 62 40 41 59 773 657 2006 60 2002 62 2007 61 40 2008 41 45 62 2008 340 2009 307 33 2008 46 2010 40 41 307 2008 46 2011 40 41 62 2012 59 330 777 2000 40 2002 2013 41 123 823 40 2013 44 2014 41 59 125 330 777 2000 40 2002 2013 44 2015 2016 41 123 818 40 2013 44 2016 41 59 823 46 2012 61 2013 46 2011 40 41 59 125 64 2017 777 865 2018 40 2002 2019 41 123 2004 46 2020 40 2019 41 59 688 40 2007 46 2021 40 2019 41 41 2012 61 2019 46 2011 40 41 59 125 64 2017 777 2003 60 2002 62 2022 40 41 123 792 2004 59 125 64 2017 777 704 2023 40 41 123 792 2004 46 2024 40 41 59 125 64 2017 777 570 2010 40 41 123 792 2004 46 2010 40 41 59 125 64 2017 777 2002 2025 40 704 2026 41 123 792 2004 46 2027 40 2026 41 59 125 64 2017 777 865 2028 40 704 2026 44 2002 2029 41 123 2004 46 2030 40 2026 44 2029 41 59 125 64 2017 777 2002 2031 40 704 2026 41 123 792 2025 40 2026 41 59 125 64 2017 777 2000 2032 40 41 123 792 823 59 125 64 2017 777 2000 2033 40 41 123 688 40 2016 46 2034 40 2035 41 41 123 2036 46 2037 40 1500 44 2022 40 41 46 2038 40 41 41 46 2039 40 2026 45 62 123 2002 2040 61 2025 40 2026 41 59 2002 2041 61 2042 40 2040 41 59 2028 40 2026 44 2041 41 59 125 41 59 125 792 823 59 125 125 ,"{'AvgLine': 4, 'CountLine': 74, 'CountStmt': 33, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 20, 'MaxEssential': 1, 'SumEssential': 12, 'AvgCyclomatic': 1, 'CountLineCode': 56, 'CountStmtDecl': 16, 'MaxCyclomatic': 2, 'SumCyclomatic': 14, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountSemicolon': 19, 'CountDeclMethod': 11, 'CountLineCodeExe': 22, 'CountLineComment': 5, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 25, 'CountDeclMethodAll': 19, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.09', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 11, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 68, 'SumCyclomaticModified': 14, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 7, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 59}"
2947,Java,"                new Callback<>() {
                    @Override
                    public TableCell<Dispute, Dispute> call(TableColumn<Dispute, Dispute> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    Button button = getRegularIconButton(MaterialDesignIcon.INFORMATION_OUTLINE);
                                    JFXBadge badge = new JFXBadge(new Label(""""), Pos.BASELINE_RIGHT);
                                    badge.setPosition(Pos.TOP_RIGHT);
                                    badge.setVisible(item.isNew());
                                    badge.setText(""New"");
                                    badge.getStyleClass().add(""new"");
                                    newBadgeByDispute.put(item.getId(), badge);
                                    HBox hBox = new HBox(button, badge);
                                    setGraphic(hBox);
                                    button.setOnAction(e -> {
                                        tableView.getSelectionModel().select(this.getIndex());
                                        onOpenContract(item);
                                        item.setDisputeSeen(senderFlag());
                                        badge.setVisible(item.isNew());
                                    });
                                } else {
                                    setGraphic(null);
                                }
                            }
                        };
                    }
                });",0,744 2000 60 62 40 41 123 64 2001 777 2002 60 2003 44 2003 62 2004 40 2005 60 2003 44 2003 62 2006 41 123 792 744 2002 60 62 40 41 123 64 2001 777 865 2007 40 657 2003 2008 44 570 2009 41 123 818 46 2007 40 2008 44 2009 41 59 688 40 2008 340 2010 307 33 2009 41 123 2011 2012 61 2013 40 2014 46 2015 41 59 2016 2017 61 744 2016 40 744 2018 40 362 41 44 2019 46 2020 41 59 2017 46 2021 40 2019 46 2022 41 59 2017 46 2023 40 2008 46 2024 40 41 41 59 2017 46 2025 40 362 41 59 2017 46 2026 40 41 46 2027 40 362 41 59 2028 46 2029 40 2008 46 2030 40 41 44 2017 41 59 2031 2032 61 744 2031 40 2012 44 2017 41 59 2033 40 2032 41 59 2012 46 2034 40 2035 45 62 123 2036 46 2037 40 41 46 2038 40 823 46 2039 40 41 41 59 2040 40 2008 41 59 2008 46 2041 40 2042 40 41 41 59 2017 46 2023 40 2008 46 2024 40 41 41 59 125 41 59 125 630 123 2043 40 2010 41 59 125 125 125 59 125 125 41 59 ,"{'AvgLine': 28, 'CountLine': 29, 'CountStmt': 20, 'MaxNesting': 0, 'AvgLineCode': 28, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 18, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 29, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 17, 'CountDeclMethod': 1, 'CountLineCodeExe': 26, 'CountLineComment': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2819,Java,"public class Helium extends Coin {

    public Helium() {
        super(""Helium"", ""HLM"", new Base58AddressValidator(new HeliumParams()));
    }

    public static class HeliumParams extends NetworkParametersAdapter {

        public HeliumParams() {
            addressHeader = 63;
            p2shHeader = 5;
        }
    }
}",0,777 587 2000 650 2001 123 777 2000 40 41 123 818 40 362 44 362 44 744 2002 40 744 2003 40 41 41 41 59 125 777 809 587 2004 650 2005 123 777 2004 40 41 123 2006 61 1503 59 2007 61 1502 59 125 125 125 ,"{'AvgLine': 3, 'CountLine': 14, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 3, 'CountDeclMethod': 1, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2815,Java,"public class StatisticsHelper {

    public static Map<String, String> process(Collection<Long> input) {

        List<Long> samples = new ArrayList<>(input);

        // aftermath
        Collections.sort(samples);

        // - average, max, min , sample size
        LongSummaryStatistics statistics = samples.stream().mapToLong(val -> val).summaryStatistics();

        Map<String, String> results = new HashMap<>();
        results.put(""average"", String.valueOf(Math.round(statistics.getAverage())));
        results.put(""max"", String.valueOf(statistics.getMax()));
        results.put(""min"", String.valueOf(statistics.getMin()));
        results.put(""sampleSize"", String.valueOf(statistics.getCount()));

        // - p25, median, p75
        Integer[] percentiles = new Integer[] { 25, 50, 75 };
        for (Integer percentile : percentiles) {
            double rank = statistics.getCount() * percentile / 100.0;
            Long percentileValue;
            if (samples.size() <= rank + 1)
                percentileValue = samples.get(samples.size() - 1);
            else if (Math.floor(rank) == rank)
                percentileValue = samples.get((int) rank);
            else
                percentileValue = Math.round(samples.get((int) Math.floor(rank))
                        + (samples.get((int) (Math.floor(rank) + 1)) - samples.get((int) Math.floor(rank)))
                                / (rank - Math.floor(rank)));
            results.put(""p"" + percentile, String.valueOf(percentileValue));
        }

        return results;
    }
}",0,777 587 2000 123 777 809 2001 60 2002 44 2002 62 2003 40 2004 60 2005 62 2006 41 123 2007 60 2005 62 2008 61 744 2009 60 62 40 2006 41 59 330 2010 46 2011 40 2008 41 59 330 2012 2013 61 2008 46 2014 40 41 46 2015 40 2016 45 62 2016 41 46 2017 40 41 59 2001 60 2002 44 2002 62 2018 61 744 2019 60 62 40 41 59 2018 46 2020 40 362 44 2002 46 2021 40 2022 46 2023 40 2013 46 2024 40 41 41 41 41 59 2018 46 2020 40 362 44 2002 46 2021 40 2013 46 2025 40 41 41 41 59 2018 46 2020 40 362 44 2002 46 2021 40 2013 46 2026 40 41 41 41 59 2018 46 2020 40 362 44 2002 46 2021 40 2013 46 2027 40 41 41 41 59 330 2028 91 93 2029 61 744 2028 91 93 123 1503 44 1503 44 1503 125 59 664 40 2028 2030 58 2029 41 123 625 2031 61 2013 46 2027 40 41 42 2030 47 1503 59 2005 2032 59 688 40 2008 46 2033 40 41 329 2031 43 1501 41 2032 61 2008 46 2034 40 2008 46 2033 40 41 45 1501 41 59 630 688 40 2022 46 2035 40 2031 41 323 2031 41 2032 61 2008 46 2034 40 40 704 41 2031 41 59 630 2032 61 2022 46 2023 40 2008 46 2034 40 40 704 41 2022 46 2035 40 2031 41 41 43 40 2008 46 2034 40 40 704 41 40 2022 46 2035 40 2031 41 43 1501 41 41 45 2008 46 2034 40 40 704 41 2022 46 2035 40 2031 41 41 41 47 40 2031 45 2022 46 2035 40 2031 41 41 41 59 2018 46 2020 40 362 43 2030 44 2002 46 2021 40 2032 41 41 59 125 792 2018 59 125 125 ,"{'AvgLine': 34, 'CountLine': 43, 'CountStmt': 22, 'MaxNesting': 2, 'AvgLineCode': 25, 'AvgEssential': 1, 'AvgLineBlank': 6, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 4, 'CountLineCode': 27, 'CountStmtDecl': 9, 'MaxCyclomatic': 4, 'SumCyclomatic': 5, 'AvgLineComment': 3, 'CountClassBase': 1, 'CountLineBlank': 7, 'CountSemicolon': 16, 'CountDeclMethod': 1, 'CountLineCodeExe': 21, 'CountLineComment': 9, 'CountClassCoupled': 10, 'CountClassDerived': 0, 'CountLineCodeDecl': 8, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.33', 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 4, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 10, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2918,Java,"@Slf4j
public class SetupTask implements Callable<SetupTask.Status> {

    private final LinuxProcess linuxProcess;
    private final CountDownLatch countdownLatch;

    public SetupTask(LinuxProcess linuxProcess, CountDownLatch countdownLatch) {
        this.linuxProcess = linuxProcess;
        this.countdownLatch = countdownLatch;
    }

    @Override
    public Status call() throws Exception {
        try {
            linuxProcess.start();              // always runs in background
            MILLISECONDS.sleep(1000);  // give 1s for bg process to init
        } catch (InterruptedException ex) {
            throw new IllegalStateException(format(""Error starting %s"", linuxProcess.getName()), ex);
        }
        Objects.requireNonNull(countdownLatch).countDown();
        return new Status(linuxProcess.getName(), LocalDateTime.now());
    }

    public LinuxProcess getLinuxProcess() {
        return linuxProcess;
    }

    public static class Status {
        private final String name;
        private final LocalDateTime startTime;

        public Status(String name, LocalDateTime startTime) {
            super();
            this.name = name;
            this.startTime = startTime;
        }

        public String getName() {
            return name;
        }

        public LocalDateTime getStartTime() {
            return startTime;
        }

        @Override
        public String toString() {
            return ""SetupTask.Status [name="" + name + "", completionTime="" + startTime + ""]"";
        }
    }
}",0,64 2000 777 587 2001 693 2002 60 2001 46 2003 62 123 773 657 2004 2005 59 773 657 2006 2007 59 777 2001 40 2004 2005 44 2006 2007 41 123 823 46 2005 61 2005 59 823 46 2007 61 2007 59 125 64 2008 777 2003 2009 40 41 826 2010 123 830 123 2005 46 2011 40 41 59 330 2012 46 2013 40 1504 41 59 330 125 580 40 2014 2015 41 123 825 744 2016 40 2017 40 362 44 2005 46 2018 40 41 41 44 2015 41 59 125 2019 46 2020 40 2007 41 46 2021 40 41 59 792 744 2003 40 2005 46 2022 40 41 44 2023 46 2024 40 41 41 59 125 777 2004 2025 40 41 123 792 2005 59 125 777 809 587 2003 123 773 657 2026 2027 59 773 657 2028 2029 59 777 2003 40 2026 2027 44 2028 2029 41 123 818 40 41 59 823 46 2027 61 2027 59 823 46 2029 61 2029 59 125 777 2026 2030 40 41 123 792 2027 59 125 777 2028 2031 40 41 123 792 2029 59 125 64 2008 777 2026 2032 40 41 123 792 362 43 2027 43 362 43 2029 43 362 59 125 125 125 ,"{'AvgLine': 6, 'CountLine': 51, 'CountStmt': 28, 'MaxNesting': 1, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 42, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 9, 'CountSemicolon': 18, 'CountDeclMethod': 3, 'CountLineCodeExe': 16, 'CountLineComment': 2, 'CountClassCoupled': 10, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 16, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 10, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 16}"
4062,Java,"public class BitcoinRhodium extends Coin {

    public BitcoinRhodium() {
        super(""XRhodium"", ""XRC"", new Base58AddressValidator(new BitcoinRhodiumParams()));
    }

    public static class BitcoinRhodiumParams extends NetworkParametersAdapter {

        public BitcoinRhodiumParams() {
            addressHeader = 61;
            p2shHeader = 123;
        }
    }
}",0,777 587 2000 650 2001 123 777 2000 40 41 123 818 40 362 44 362 44 744 2002 40 744 2003 40 41 41 41 59 125 777 809 587 2004 650 2005 123 777 2004 40 41 123 2006 61 1503 59 2007 61 1504 59 125 125 125 ,"{'AvgLine': 3, 'CountLine': 14, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 11, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 3, 'CountDeclMethod': 1, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 4, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2962,Java,"                        return new TableCell<>() {
                            private HyperlinkWithIcon field;

                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);

                                if (item != null && !empty) {
                                    Optional<Trade> tradeOptional = tradeManager.getTradeById(item.getTradeId());
                                    if (tradeOptional.isPresent()) {
                                        field = new HyperlinkWithIcon(item.getShortTradeId());
                                        field.setMouseTransparent(false);
                                        field.setTooltip(new Tooltip(Res.get(""tooltip.openPopupForDetails"")));
                                        field.setOnAction(event -> tradeDetailsWindow.show(tradeOptional.get()));
                                    } else {
                                        setText(item.getShortTradeId());
                                    }
                                    setGraphic(field);
                                } else {
                                    setGraphic(null);
                                    setText("""");
                                    if (field != null)
                                        field.setOnAction(null);
                                }
                            }
                        };",0,792 744 2000 60 62 40 41 123 773 2001 2002 59 64 2003 777 865 2004 40 657 2005 2006 44 570 2007 41 123 818 46 2004 40 2006 44 2007 41 59 688 40 2006 340 2008 307 33 2007 41 123 2009 60 2010 62 2011 61 2012 46 2013 40 2006 46 2014 40 41 41 59 688 40 2011 46 2015 40 41 41 123 2002 61 744 2001 40 2006 46 2016 40 41 41 59 2002 46 2017 40 2018 41 59 2002 46 2019 40 744 2020 40 2021 46 2022 40 362 41 41 41 59 2002 46 2023 40 2024 45 62 2025 46 2026 40 2011 46 2022 40 41 41 41 59 125 630 123 2027 40 2006 46 2028 40 41 41 59 125 2029 40 2002 41 59 125 630 123 2030 40 2008 41 59 2031 40 362 41 59 688 40 2002 340 2008 41 2002 46 2032 40 2008 41 59 125 125 125 59 ,"{'AvgLine': 22, 'CountLine': 25, 'CountStmt': 16, 'MaxNesting': 2, 'AvgLineCode': 21, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 4, 'CountLineCode': 23, 'CountStmtDecl': 3, 'MaxCyclomatic': 4, 'SumCyclomatic': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 12, 'CountDeclMethod': 1, 'CountLineCodeExe': 20, 'CountLineComment': 0, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 1, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 6, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 4, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0}"
2792,Java,"public class BusyAnimation extends JFXSpinner {

    private final BooleanProperty isRunningProperty = new SimpleBooleanProperty();

    public BusyAnimation() {
        this(true);
    }

    public BusyAnimation(boolean isRunning) {
        getStyleClass().add(""busyanimation"");
        isRunningProperty.set(isRunning);

        updateVisibility();
    }

    public void play() {
        isRunningProperty.set(true);

        setProgress(-1);
        updateVisibility();
    }

    public void stop() {
        isRunningProperty.set(false);
        setProgress(0);
        updateVisibility();
    }

    public boolean isRunning() {
        return isRunningProperty.get();
    }

    public BooleanProperty isRunningProperty() {
        return isRunningProperty;
    }

    private void updateVisibility() {
        setVisible(isRunning());
        setManaged(isRunning());
    }
}",0,777 587 2000 650 2001 123 773 657 2002 2003 61 744 2004 40 41 59 777 2000 40 41 123 823 40 2005 41 59 125 777 2000 40 570 2006 41 123 2007 40 41 46 2008 40 362 41 59 2003 46 2009 40 2006 41 59 2010 40 41 59 125 777 865 2011 40 41 123 2003 46 2012 40 2013 41 59 2014 40 45 1501 41 59 2015 40 41 59 125 777 865 2016 40 41 123 2003 46 2017 40 2018 41 59 2019 40 1500 41 59 2020 40 41 59 125 777 570 2006 40 41 123 792 2003 46 2021 40 41 59 125 777 2002 2003 40 41 123 792 2003 59 125 773 865 2022 40 41 123 2023 40 2006 40 41 41 59 2024 40 2006 40 41 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 41, 'CountStmt': 23, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 15, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 31, 'CountStmtDecl': 9, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountSemicolon': 15, 'CountDeclMethod': 7, 'CountLineCodeExe': 15, 'CountLineComment': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountLineCodeDecl': 9, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 6, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 28, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0}"
2897,Java,"public class SetXmrTxKeyWindow extends Overlay<SetXmrTxKeyWindow> {

    private InputTextField txHashInputTextField, txKeyInputTextField;
    @Getter
    private RegexValidator regexValidator;

    public SetXmrTxKeyWindow() {
        type = Type.Attention;
    }

    public void show() {
        if (headLine == null)
            headLine = Res.get(""setXMRTxKeyWindow.headline"");

        width = 868;
        createGridPane();
        addHeadLine();
        addContent();
        addButtons();

        regexValidator = new RegexValidator();
        regexValidator.setPattern(""[a-fA-F0-9]{64}|^$"");
        regexValidator.setErrorMessage(Res.get(""portfolio.pending.step2_buyer.confirmStart.proof.invalidInput""));
        txHashInputTextField.setValidator(regexValidator);
        txKeyInputTextField.setValidator(regexValidator);
        if (isDevMode()) {
            // pre-populate the fields with test data when in dev mode
            txHashInputTextField.setText(XmrTxProofModel.DEV_TX_HASH);
            txKeyInputTextField.setText(XmrTxProofModel.DEV_TX_KEY);
        }

        actionButton.disableProperty().bind(createBooleanBinding(() -> {
                    String txHash = txHashInputTextField.getText();
                    String txKey = txKeyInputTextField.getText();

                    // If a field is empty we allow to continue. We do not enforce that users send the data.
                    if (txHash.isEmpty() || txKey.isEmpty()) {
                        return false;
                    }

                    // Otherwise we require that input is valid
                    return !txHashInputTextField.getValidator().validate(txHash).isValid ||
                            !txKeyInputTextField.getValidator().validate(txKey).isValid;
                },
                txHashInputTextField.textProperty(), txKeyInputTextField.textProperty()));

        applyStyles();
        display();
    }

    @Override
    protected void createGridPane() {
        gridPane = new GridPane();
        gridPane.setHgap(5);
        gridPane.setVgap(5);
        gridPane.setPadding(new Insets(64, 64, 64, 64));
        gridPane.setPrefWidth(width);

        ColumnConstraints columnConstraints1 = new ColumnConstraints();
        columnConstraints1.setHalignment(HPos.RIGHT);
        columnConstraints1.setHgrow(Priority.SOMETIMES);
        gridPane.getColumnConstraints().addAll(columnConstraints1);
    }

    @Nullable
    public String getTxHash() {
        return txHashInputTextField != null ? txHashInputTextField.getText() : null;
    }

    @Nullable
    public String getTxKey() {
        return txKeyInputTextField != null ? txKeyInputTextField.getText() : null;
    }

    private void addContent() {
        addMultilineLabel(gridPane, ++rowIndex, Res.get(""setXMRTxKeyWindow.note""), 0);
        txHashInputTextField = addInputTextField(gridPane, ++rowIndex, Res.get(""setXMRTxKeyWindow.txHash""), 10);
        txKeyInputTextField = addInputTextField(gridPane, ++rowIndex, Res.get(""setXMRTxKeyWindow.txKey""));
    }
}",0,777 587 2000 650 2001 60 2000 62 123 773 2002 2003 44 2004 59 64 2005 773 2006 2007 59 777 2000 40 41 123 2008 61 2009 46 2010 59 125 777 865 2011 40 41 123 688 40 2012 323 2013 41 2012 61 2014 46 2015 40 362 41 59 2016 61 1504 59 2017 40 41 59 2018 40 41 59 2019 40 41 59 2020 40 41 59 2007 61 744 2006 40 41 59 2007 46 2021 40 362 41 59 2007 46 2022 40 2014 46 2015 40 362 41 41 59 2003 46 2023 40 2007 41 59 2004 46 2023 40 2007 41 59 688 40 2024 40 41 41 123 330 2003 46 2025 40 2026 46 2027 41 59 2004 46 2025 40 2026 46 2028 41 59 125 2029 46 2030 40 41 46 2031 40 2032 40 40 41 45 62 123 2033 2034 61 2003 46 2035 40 41 59 2033 2036 61 2004 46 2035 40 41 59 330 688 40 2034 46 2037 40 41 309 2036 46 2037 40 41 41 123 792 2038 59 125 330 792 33 2003 46 2039 40 41 46 2040 40 2034 41 46 2041 309 33 2004 46 2039 40 41 46 2040 40 2036 41 46 2041 59 125 44 2003 46 2042 40 41 44 2004 46 2042 40 41 41 41 59 2043 40 41 59 2044 40 41 59 125 64 2045 775 865 2046 40 41 123 2047 61 744 2048 40 41 59 2047 46 2049 40 1502 41 59 2047 46 2050 40 1502 41 59 2047 46 2051 40 744 2052 40 1503 44 1503 44 1503 44 1503 41 41 59 2047 46 2053 40 2054 41 59 2055 2056 61 744 2055 40 41 59 2056 46 2057 40 2058 46 2059 41 59 2056 46 2060 40 2061 46 2062 41 59 2047 46 2063 40 41 46 2064 40 2056 41 59 125 64 2065 777 2066 2067 40 41 123 792 2003 340 2068 63 2003 46 2069 40 41 58 2068 59 125 64 2065 777 2066 2070 40 41 123 792 2004 340 2071 63 2004 46 2072 40 41 58 2071 59 125 773 865 2073 40 41 123 2074 40 2075 44 349 2076 44 2077 46 2078 40 362 41 44 1500 41 59 2003 61 2079 40 2075 44 349 2076 44 2077 46 2078 40 362 41 44 1502 41 59 2004 61 2079 40 2075 44 349 2076 44 2077 46 2078 40 362 41 41 59 125 125 ,"{'AvgLine': 11, 'CountLine': 80, 'CountStmt': 47, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 38, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 63, 'CountStmtDecl': 12, 'MaxCyclomatic': 3, 'SumCyclomatic': 12, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountSemicolon': 37, 'CountDeclMethod': 6, 'CountLineCodeExe': 41, 'CountLineComment': 3, 'CountClassCoupled': 18, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountDeclMethodAll': 75, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.05', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 61, 'SumCyclomaticModified': 12, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 18, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 61}"
2964,Java,"@Slf4j
public abstract class DisputeManager<T extends DisputeList<Dispute>> extends SupportManager {
    protected final TradeWalletService tradeWalletService;
    protected final BtcWalletService btcWalletService;
    protected final TradeManager tradeManager;
    protected final ClosedTradableManager closedTradableManager;
    protected final OpenOfferManager openOfferManager;
    protected final PubKeyRing pubKeyRing;
    protected final DisputeListService<T> disputeListService;
    private final Config config;
    private final PriceFeedService priceFeedService;
    protected final DaoFacade daoFacade;

    @Getter
    protected final ObservableList<TradeDataValidation.ValidationException> validationExceptions =
            FXCollections.observableArrayList();
    @Getter
    private final KeyPair signatureKeyPair;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    public DisputeManager(P2PService p2PService,
                          TradeWalletService tradeWalletService,
                          BtcWalletService btcWalletService,
                          WalletsSetup walletsSetup,
                          TradeManager tradeManager,
                          ClosedTradableManager closedTradableManager,
                          OpenOfferManager openOfferManager,
                          DaoFacade daoFacade,
                          KeyRing keyRing,
                          DisputeListService<T> disputeListService,
                          Config config,
                          PriceFeedService priceFeedService) {
        super(p2PService, walletsSetup);

        this.tradeWalletService = tradeWalletService;
        this.btcWalletService = btcWalletService;
        this.tradeManager = tradeManager;
        this.closedTradableManager = closedTradableManager;
        this.openOfferManager = openOfferManager;
        this.daoFacade = daoFacade;
        this.pubKeyRing = keyRing.getPubKeyRing();
        signatureKeyPair = keyRing.getSignatureKeyPair();
        this.disputeListService = disputeListService;
        this.config = config;
        this.priceFeedService = priceFeedService;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Implement template methods
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void requestPersistence() {
        disputeListService.requestPersistence();
    }

    @Override
    public NodeAddress getPeerNodeAddress(ChatMessage message) {
        Optional<Dispute> disputeOptional = findDispute(message);
        if (!disputeOptional.isPresent()) {
            log.warn(""Could not find dispute for tradeId = {} traderId = {}"",
                    message.getTradeId(), message.getTraderId());
            return null;
        }
        return getNodeAddressPubKeyRingTuple(disputeOptional.get()).first;
    }

    @Override
    public PubKeyRing getPeerPubKeyRing(ChatMessage message) {
        Optional<Dispute> disputeOptional = findDispute(message);
        if (!disputeOptional.isPresent()) {
            log.warn(""Could not find dispute for tradeId = {} traderId = {}"",
                    message.getTradeId(), message.getTraderId());
            return null;
        }

        return getNodeAddressPubKeyRingTuple(disputeOptional.get()).second;
    }

    @Override
    public List<ChatMessage> getAllChatMessages(String tradeId) {
        return getDisputeList().stream()
                .filter(dispute -> dispute.getTradeId().equals(tradeId))
                .flatMap(dispute -> dispute.getChatMessages().stream())
                .collect(Collectors.toList());
    }

    @Override
    public boolean channelOpen(ChatMessage message) {
        return findDispute(message).isPresent();
    }

    @Override
    public void addAndPersistChatMessage(ChatMessage message) {
        findDispute(message).ifPresent(dispute -> {
            if (dispute.getChatMessages().stream().noneMatch(m -> m.getUid().equals(message.getUid()))) {
                dispute.addAndPersistChatMessage(message);
                requestPersistence();
            } else {
                log.warn(""We got a chatMessage that we have already stored. UId = {} TradeId = {}"",
                        message.getUid(), message.getTradeId());
            }
        });
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Abstract methods
    ///////////////////////////////////////////////////////////////////////////////////////////

    // We get that message at both peers. The dispute object is in context of the trader
    public abstract void onDisputeResultMessage(DisputeResultMessage disputeResultMessage);

    @Nullable
    public abstract NodeAddress getAgentNodeAddress(Dispute dispute);

    protected abstract Trade.DisputeState getDisputeStateStartedByPeer();

    public abstract void cleanupDisputes();

    protected abstract String getDisputeInfo(Dispute dispute);

    protected abstract String getDisputeIntroForPeer(String disputeInfo);

    protected abstract String getDisputeIntroForDisputeCreator(String disputeInfo);


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Delegates for disputeListService
    ///////////////////////////////////////////////////////////////////////////////////////////

    public IntegerProperty getNumOpenDisputes() {
        return disputeListService.getNumOpenDisputes();
    }

    public ObservableList<Dispute> getDisputesAsObservableList() {
        return disputeListService.getObservableList();
    }

    public String getNrOfDisputes(boolean isBuyer, Contract contract) {
        return disputeListService.getNrOfDisputes(isBuyer, contract);
    }

    protected T getDisputeList() {
        return disputeListService.getDisputeList();
    }

    public Set<String> getDisputedTradeIds() {
        return disputeListService.getDisputedTradeIds();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void onAllServicesInitialized() {
        super.onAllServicesInitialized();
        disputeListService.onAllServicesInitialized();

        p2PService.addP2PServiceListener(new BootstrapListener() {
            @Override
            public void onUpdatedDataReceived() {
                tryApplyMessages();
            }
        });

        walletsSetup.downloadPercentageProperty().addListener((observable, oldValue, newValue) -> {
            if (walletsSetup.isDownloadComplete())
                tryApplyMessages();
        });

        walletsSetup.numPeersProperty().addListener((observable, oldValue, newValue) -> {
            if (walletsSetup.hasSufficientPeersForBroadcast())
                tryApplyMessages();
        });

        tryApplyMessages();
        cleanupDisputes();

        List<Dispute> disputes = getDisputeList().getList();
        disputes.forEach(dispute -> {
            try {
                TradeDataValidation.validateDonationAddress(dispute, dispute.getDonationAddressOfDelayedPayoutTx(), daoFacade);
                TradeDataValidation.validateNodeAddress(dispute, dispute.getContract().getBuyerNodeAddress(), config);
                TradeDataValidation.validateNodeAddress(dispute, dispute.getContract().getSellerNodeAddress(), config);
            } catch (TradeDataValidation.AddressException | TradeDataValidation.NodeAddressException e) {
                log.error(e.toString());
                validationExceptions.add(e);
            }
        });

        TradeDataValidation.testIfAnyDisputeTriedReplay(disputes,
                disputeReplayException -> {
                    log.error(disputeReplayException.toString());
                    validationExceptions.add(disputeReplayException);
                });
    }

    public boolean isTrader(Dispute dispute) {
        return pubKeyRing.equals(dispute.getTraderPubKeyRing());
    }


    public Optional<Dispute> findOwnDispute(String tradeId) {
        T disputeList = getDisputeList();
        if (disputeList == null) {
            log.warn(""disputes is null"");
            return Optional.empty();
        }
        return disputeList.stream().filter(e -> e.getTradeId().equals(tradeId)).findAny();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Message handler
    ///////////////////////////////////////////////////////////////////////////////////////////

    // dispute agent receives that from trader who opens dispute
    protected void onOpenNewDisputeMessage(OpenNewDisputeMessage openNewDisputeMessage) {
        T disputeList = getDisputeList();
        if (disputeList == null) {
            log.warn(""disputes is null"");
            return;
        }

        String errorMessage = null;
        Dispute dispute = openNewDisputeMessage.getDispute();
        // Disputes from clients < 1.2.0 always have support type ARBITRATION in dispute as the field didn't exist before
        dispute.setSupportType(openNewDisputeMessage.getSupportType());
        // disputes from clients < 1.6.0 have state not set as the field didn't exist before
        dispute.setState(Dispute.State.NEW);    // this can be removed a few months after 1.6.0 release

        Contract contract = dispute.getContract();
        addPriceInfoMessage(dispute, 0);

        PubKeyRing peersPubKeyRing = dispute.isDisputeOpenerIsBuyer() ? contract.getSellerPubKeyRing() : contract.getBuyerPubKeyRing();
        if (isAgent(dispute)) {
            if (!disputeList.contains(dispute)) {
                Optional<Dispute> storedDisputeOptional = findDispute(dispute);
                if (!storedDisputeOptional.isPresent()) {
                    disputeList.add(dispute);
                    sendPeerOpenedDisputeMessage(dispute, contract, peersPubKeyRing);
                } else {
                    // valid case if both have opened a dispute and agent was not online.
                    log.debug(""We got a dispute already open for that trade and trading peer. TradeId = {}"",
                            dispute.getTradeId());
                }
            } else {
                errorMessage = ""We got a dispute msg what we have already stored. TradeId = "" + dispute.getTradeId();
                log.warn(errorMessage);
            }
        } else {
            errorMessage = ""Trader received openNewDisputeMessage. That must never happen."";
            log.error(errorMessage);
        }

        // We use the ChatMessage not the openNewDisputeMessage for the ACK
        ObservableList<ChatMessage> messages = dispute.getChatMessages();
        if (!messages.isEmpty()) {
            ChatMessage chatMessage = messages.get(0);
            PubKeyRing sendersPubKeyRing = dispute.isDisputeOpenerIsBuyer() ? contract.getBuyerPubKeyRing() : contract.getSellerPubKeyRing();
            sendAckMessage(chatMessage, sendersPubKeyRing, errorMessage == null, errorMessage);
        }

        addMediationResultMessage(dispute);

        try {
            TradeDataValidation.validateDonationAddress(dispute.getDonationAddressOfDelayedPayoutTx(), daoFacade);
            TradeDataValidation.testIfDisputeTriesReplay(dispute, disputeList.getList());
            TradeDataValidation.validateNodeAddress(dispute, dispute.getContract().getBuyerNodeAddress(), config);
            TradeDataValidation.validateNodeAddress(dispute, dispute.getContract().getSellerNodeAddress(), config);
        } catch (TradeDataValidation.AddressException |
                TradeDataValidation.DisputeReplayException |
                TradeDataValidation.NodeAddressException e) {
            log.error(e.toString());
            validationExceptions.add(e);
        }
        requestPersistence();
    }

    // Not-dispute-requester receives that msg from dispute agent
    protected void onPeerOpenedDisputeMessage(PeerOpenedDisputeMessage peerOpenedDisputeMessage) {
        T disputeList = getDisputeList();
        if (disputeList == null) {
            log.warn(""disputes is null"");
            return;
        }

        String errorMessage = null;
        Dispute dispute = peerOpenedDisputeMessage.getDispute();

        Optional<Trade> optionalTrade = tradeManager.getTradeById(dispute.getTradeId());
        if (!optionalTrade.isPresent()) {
            return;
        }

        Trade trade = optionalTrade.get();
        try {
            TradeDataValidation.validateDelayedPayoutTx(trade,
                    trade.getDelayedPayoutTx(),
                    dispute,
                    daoFacade,
                    btcWalletService);
        } catch (TradeDataValidation.ValidationException e) {
            // The peer sent us an invalid donation address. We do not return here as we don't want to break
            // mediation/arbitration and log only the issue. The dispute agent will run validation as well and will get
            // a popup displayed to react.
            log.warn(""Donation address is invalid. {}"", e.toString());
        }

        if (!isAgent(dispute)) {
            if (!disputeList.contains(dispute)) {
                Optional<Dispute> storedDisputeOptional = findDispute(dispute);
                if (!storedDisputeOptional.isPresent()) {
                    disputeList.add(dispute);
                    trade.setDisputeState(getDisputeStateStartedByPeer());
                    tradeManager.requestPersistence();
                    errorMessage = null;
                } else {
                    // valid case if both have opened a dispute and agent was not online.
                    log.debug(""We got a dispute already open for that trade and trading peer. TradeId = {}"",
                            dispute.getTradeId());
                }
            } else {
                errorMessage = ""We got a dispute msg what we have already stored. TradeId = "" + dispute.getTradeId();
                log.warn(errorMessage);
            }
        } else {
            errorMessage = ""Arbitrator received peerOpenedDisputeMessage. That must never happen."";
            log.error(errorMessage);
        }

        // We use the ChatMessage not the peerOpenedDisputeMessage for the ACK
        ObservableList<ChatMessage> messages = peerOpenedDisputeMessage.getDispute().getChatMessages();
        if (!messages.isEmpty()) {
            ChatMessage msg = messages.get(0);
            sendAckMessage(msg, dispute.getAgentPubKeyRing(), errorMessage == null, errorMessage);
        }

        sendAckMessage(peerOpenedDisputeMessage, dispute.getAgentPubKeyRing(), errorMessage == null, errorMessage);
        requestPersistence();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Send message
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void sendOpenNewDisputeMessage(Dispute dispute,
                                          boolean reOpen,
                                          ResultHandler resultHandler,
                                          FaultHandler faultHandler) {
        T disputeList = getDisputeList();
        if (disputeList == null) {
            log.warn(""disputes is null"");
            return;
        }

        if (disputeList.contains(dispute)) {
            String msg = ""We got a dispute msg what we have already stored. TradeId = "" + dispute.getTradeId();
            log.warn(msg);
            faultHandler.handleFault(msg, new DisputeAlreadyOpenException());
            return;
        }

        Optional<Dispute> storedDisputeOptional = findDispute(dispute);
        if (!storedDisputeOptional.isPresent() || reOpen) {
            String disputeInfo = getDisputeInfo(dispute);
            String disputeMessage = getDisputeIntroForDisputeCreator(disputeInfo);
            String sysMsg = dispute.isSupportTicket() ?
                    Res.get(""support.youOpenedTicket"", disputeInfo, Version.VERSION)
                    : disputeMessage;

            String message = Res.get(""support.systemMsg"", sysMsg);
            ChatMessage chatMessage = new ChatMessage(
                    getSupportType(),
                    dispute.getTradeId(),
                    pubKeyRing.hashCode(),
                    false,
                    message,
                    p2PService.getAddress());
            chatMessage.setSystemMessage(true);
            dispute.addAndPersistChatMessage(chatMessage);
            if (!reOpen) {
                disputeList.add(dispute);
            }

            NodeAddress agentNodeAddress = getAgentNodeAddress(dispute);
            if (agentNodeAddress == null) {
                return;
            }

            OpenNewDisputeMessage openNewDisputeMessage = new OpenNewDisputeMessage(dispute,
                    p2PService.getAddress(),
                    UUID.randomUUID().toString(),
                    getSupportType());

            log.info(""Send {} to peer {}. tradeId={}, openNewDisputeMessage.uid={}, chatMessage.uid={}"",
                    openNewDisputeMessage.getClass().getSimpleName(),
                    agentNodeAddress,
                    openNewDisputeMessage.getTradeId(),
                    openNewDisputeMessage.getUid(),
                    chatMessage.getUid());

            mailboxMessageService.sendEncryptedMailboxMessage(agentNodeAddress,
                    dispute.getAgentPubKeyRing(),
                    openNewDisputeMessage,
                    new SendMailboxMessageListener() {
                        @Override
                        public void onArrived() {
                            log.info(""{} arrived at peer {}. tradeId={}, openNewDisputeMessage.uid={}, "" +
                                            ""chatMessage.uid={}"",
                                    openNewDisputeMessage.getClass().getSimpleName(), agentNodeAddress,
                                    openNewDisputeMessage.getTradeId(), openNewDisputeMessage.getUid(),
                                    chatMessage.getUid());

                            // We use the chatMessage wrapped inside the openNewDisputeMessage for
                            // the state, as that is displayed to the user and we only persist that msg
                            chatMessage.setArrived(true);
                            requestPersistence();
                            resultHandler.handleResult();
                        }

                        @Override
                        public void onStoredInMailbox() {
                            log.info(""{} stored in mailbox for peer {}. tradeId={}, openNewDisputeMessage.uid={}, "" +
                                            ""chatMessage.uid={}"",
                                    openNewDisputeMessage.getClass().getSimpleName(), agentNodeAddress,
                                    openNewDisputeMessage.getTradeId(), openNewDisputeMessage.getUid(),
                                    chatMessage.getUid());

                            // We use the chatMessage wrapped inside the openNewDisputeMessage for
                            // the state, as that is displayed to the user and we only persist that msg
                            chatMessage.setStoredInMailbox(true);
                            requestPersistence();
                            resultHandler.handleResult();
                        }

                        @Override
                        public void onFault(String errorMessage) {
                            log.error(""{} failed: Peer {}. tradeId={}, openNewDisputeMessage.uid={}, "" +
                                            ""chatMessage.uid={}, errorMessage={}"",
                                    openNewDisputeMessage.getClass().getSimpleName(), agentNodeAddress,
                                    openNewDisputeMessage.getTradeId(), openNewDisputeMessage.getUid(),
                                    chatMessage.getUid(), errorMessage);

                            // We use the chatMessage wrapped inside the openNewDisputeMessage for
                            // the state, as that is displayed to the user and we only persist that msg
                            chatMessage.setSendMessageError(errorMessage);
                            requestPersistence();
                            faultHandler.handleFault(""Sending dispute message failed: "" +
                                    errorMessage, new DisputeMessageDeliveryFailedException());
                        }
                    }
            );
        } else {
            String msg = ""We got a dispute already open for that trade and trading peer.\n"" +
                    ""TradeId = "" + dispute.getTradeId();
            log.warn(msg);
            faultHandler.handleFault(msg, new DisputeAlreadyOpenException());
        }
        requestPersistence();
    }

    // Dispute agent sends that to trading peer when he received openDispute request
    private void sendPeerOpenedDisputeMessage(Dispute disputeFromOpener,
                                              Contract contractFromOpener,
                                              PubKeyRing pubKeyRing) {
        // We delay a bit for sending the message to the peer to allow that a openDispute message from the peer is
        // being used as the valid msg. If dispute agent was offline and both peer requested we want to see the correct
        // message and not skip the system message of the peer as it would be the case if we have created the system msg
        // from the code below.
        UserThread.runAfter(() -> doSendPeerOpenedDisputeMessage(disputeFromOpener,
                contractFromOpener,
                pubKeyRing),
                100, TimeUnit.MILLISECONDS);
    }

    private void doSendPeerOpenedDisputeMessage(Dispute disputeFromOpener,
                                                Contract contractFromOpener,
                                                PubKeyRing pubKeyRing) {
        T disputeList = getDisputeList();
        if (disputeList == null) {
            log.warn(""disputes is null"");
            return;
        }

        Dispute dispute = new Dispute(new Date().getTime(),
                disputeFromOpener.getTradeId(),
                pubKeyRing.hashCode(),
                !disputeFromOpener.isDisputeOpenerIsBuyer(),
                !disputeFromOpener.isDisputeOpenerIsMaker(),
                pubKeyRing,
                disputeFromOpener.getTradeDate().getTime(),
                disputeFromOpener.getTradePeriodEnd().getTime(),
                contractFromOpener,
                disputeFromOpener.getContractHash(),
                disputeFromOpener.getDepositTxSerialized(),
                disputeFromOpener.getPayoutTxSerialized(),
                disputeFromOpener.getDepositTxId(),
                disputeFromOpener.getPayoutTxId(),
                disputeFromOpener.getContractAsJson(),
                disputeFromOpener.getMakerContractSignature(),
                disputeFromOpener.getTakerContractSignature(),
                disputeFromOpener.getAgentPubKeyRing(),
                disputeFromOpener.isSupportTicket(),
                disputeFromOpener.getSupportType());
        dispute.setExtraDataMap(disputeFromOpener.getExtraDataMap());
        dispute.setDelayedPayoutTxId(disputeFromOpener.getDelayedPayoutTxId());
        dispute.setDonationAddressOfDelayedPayoutTx(disputeFromOpener.getDonationAddressOfDelayedPayoutTx());

        Optional<Dispute> storedDisputeOptional = findDispute(dispute);

        // Valid case if both have opened a dispute and agent was not online.
        if (storedDisputeOptional.isPresent()) {
            log.info(""We got a dispute already open for that trade and trading peer. TradeId = {}"", dispute.getTradeId());
            return;
        }

        String disputeInfo = getDisputeInfo(dispute);
        String disputeMessage = getDisputeIntroForPeer(disputeInfo);
        String sysMsg = dispute.isSupportTicket() ?
                Res.get(""support.peerOpenedTicket"", disputeInfo, Version.VERSION)
                : disputeMessage;
        ChatMessage chatMessage = new ChatMessage(
                getSupportType(),
                dispute.getTradeId(),
                pubKeyRing.hashCode(),
                false,
                Res.get(""support.systemMsg"", sysMsg),
                p2PService.getAddress());
        chatMessage.setSystemMessage(true);
        dispute.addAndPersistChatMessage(chatMessage);

        addPriceInfoMessage(dispute, 0);

        disputeList.add(dispute);

        // We mirrored dispute already!
        Contract contract = dispute.getContract();
        PubKeyRing peersPubKeyRing = dispute.isDisputeOpenerIsBuyer() ? contract.getBuyerPubKeyRing() : contract.getSellerPubKeyRing();
        NodeAddress peersNodeAddress = dispute.isDisputeOpenerIsBuyer() ? contract.getBuyerNodeAddress() : contract.getSellerNodeAddress();
        PeerOpenedDisputeMessage peerOpenedDisputeMessage = new PeerOpenedDisputeMessage(dispute,
                p2PService.getAddress(),
                UUID.randomUUID().toString(),
                getSupportType());

        log.info(""Send {} to peer {}. tradeId={}, peerOpenedDisputeMessage.uid={}, chatMessage.uid={}"",
                peerOpenedDisputeMessage.getClass().getSimpleName(), peersNodeAddress,
                peerOpenedDisputeMessage.getTradeId(), peerOpenedDisputeMessage.getUid(),
                chatMessage.getUid());

        mailboxMessageService.sendEncryptedMailboxMessage(peersNodeAddress,
                peersPubKeyRing,
                peerOpenedDisputeMessage,
                new SendMailboxMessageListener() {
                    @Override
                    public void onArrived() {
                        log.info(""{} arrived at peer {}. tradeId={}, peerOpenedDisputeMessage.uid={}, "" +
                                        ""chatMessage.uid={}"",
                                peerOpenedDisputeMessage.getClass().getSimpleName(), peersNodeAddress,
                                peerOpenedDisputeMessage.getTradeId(), peerOpenedDisputeMessage.getUid(),
                                chatMessage.getUid());

                        // We use the chatMessage wrapped inside the peerOpenedDisputeMessage for
                        // the state, as that is displayed to the user and we only persist that msg
                        chatMessage.setArrived(true);
                        requestPersistence();
                    }

                    @Override
                    public void onStoredInMailbox() {
                        log.info(""{} stored in mailbox for peer {}. tradeId={}, peerOpenedDisputeMessage.uid={}, "" +
                                        ""chatMessage.uid={}"",
                                peerOpenedDisputeMessage.getClass().getSimpleName(), peersNodeAddress,
                                peerOpenedDisputeMessage.getTradeId(), peerOpenedDisputeMessage.getUid(),
                                chatMessage.getUid());

                        // We use the chatMessage wrapped inside the peerOpenedDisputeMessage for
                        // the state, as that is displayed to the user and we only persist that msg
                        chatMessage.setStoredInMailbox(true);
                        requestPersistence();
                    }

                    @Override
                    public void onFault(String errorMessage) {
                        log.error(""{} failed: Peer {}. tradeId={}, peerOpenedDisputeMessage.uid={}, "" +
                                        ""chatMessage.uid={}, errorMessage={}"",
                                peerOpenedDisputeMessage.getClass().getSimpleName(), peersNodeAddress,
                                peerOpenedDisputeMessage.getTradeId(), peerOpenedDisputeMessage.getUid(),
                                chatMessage.getUid(), errorMessage);

                        // We use the chatMessage wrapped inside the peerOpenedDisputeMessage for
                        // the state, as that is displayed to the user and we only persist that msg
                        chatMessage.setSendMessageError(errorMessage);
                        requestPersistence();
                    }
                }
        );
        requestPersistence();
    }

    // dispute agent send result to trader
    public void sendDisputeResultMessage(DisputeResult disputeResult, Dispute dispute, String summaryText) {
        T disputeList = getDisputeList();
        if (disputeList == null) {
            log.warn(""disputes is null"");
            return;
        }

        ChatMessage chatMessage = new ChatMessage(
                getSupportType(),
                dispute.getTradeId(),
                dispute.getTraderPubKeyRing().hashCode(),
                false,
                summaryText,
                p2PService.getAddress());

        disputeResult.setChatMessage(chatMessage);
        dispute.addAndPersistChatMessage(chatMessage);

        NodeAddress peersNodeAddress;
        Contract contract = dispute.getContract();
        if (contract.getBuyerPubKeyRing().equals(dispute.getTraderPubKeyRing()))
            peersNodeAddress = contract.getBuyerNodeAddress();
        else
            peersNodeAddress = contract.getSellerNodeAddress();
        DisputeResultMessage disputeResultMessage = new DisputeResultMessage(disputeResult,
                p2PService.getAddress(),
                UUID.randomUUID().toString(),
                getSupportType());
        log.info(""Send {} to peer {}. tradeId={}, disputeResultMessage.uid={}, chatMessage.uid={}"",
                disputeResultMessage.getClass().getSimpleName(), peersNodeAddress, disputeResultMessage.getTradeId(),
                disputeResultMessage.getUid(), chatMessage.getUid());
        mailboxMessageService.sendEncryptedMailboxMessage(peersNodeAddress,
                dispute.getTraderPubKeyRing(),
                disputeResultMessage,
                new SendMailboxMessageListener() {
                    @Override
                    public void onArrived() {
                        log.info(""{} arrived at peer {}. tradeId={}, disputeResultMessage.uid={}, "" +
                                        ""chatMessage.uid={}"",
                                disputeResultMessage.getClass().getSimpleName(), peersNodeAddress,
                                disputeResultMessage.getTradeId(), disputeResultMessage.getUid(),
                                chatMessage.getUid());

                        // We use the chatMessage wrapped inside the disputeResultMessage for
                        // the state, as that is displayed to the user and we only persist that msg
                        chatMessage.setArrived(true);
                        requestPersistence();
                    }

                    @Override
                    public void onStoredInMailbox() {
                        log.info(""{} stored in mailbox for peer {}. tradeId={}, disputeResultMessage.uid={}, "" +
                                        ""chatMessage.uid={}"",
                                disputeResultMessage.getClass().getSimpleName(), peersNodeAddress,
                                disputeResultMessage.getTradeId(), disputeResultMessage.getUid(),
                                chatMessage.getUid());

                        // We use the chatMessage wrapped inside the disputeResultMessage for
                        // the state, as that is displayed to the user and we only persist that msg
                        chatMessage.setStoredInMailbox(true);
                        requestPersistence();
                    }

                    @Override
                    public void onFault(String errorMessage) {
                        log.error(""{} failed: Peer {}. tradeId={}, disputeResultMessage.uid={}, "" +
                                        ""chatMessage.uid={}, errorMessage={}"",
                                disputeResultMessage.getClass().getSimpleName(), peersNodeAddress,
                                disputeResultMessage.getTradeId(), disputeResultMessage.getUid(),
                                chatMessage.getUid(), errorMessage);

                        // We use the chatMessage wrapped inside the disputeResultMessage for
                        // the state, as that is displayed to the user and we only persist that msg
                        chatMessage.setSendMessageError(errorMessage);
                        requestPersistence();
                    }
                }
        );
        requestPersistence();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Utils
    ///////////////////////////////////////////////////////////////////////////////////////////

    private Tuple2<NodeAddress, PubKeyRing> getNodeAddressPubKeyRingTuple(Dispute dispute) {
        PubKeyRing receiverPubKeyRing = null;
        NodeAddress peerNodeAddress = null;
        if (isTrader(dispute)) {
            receiverPubKeyRing = dispute.getAgentPubKeyRing();
            peerNodeAddress = getAgentNodeAddress(dispute);
        } else if (isAgent(dispute)) {
            receiverPubKeyRing = dispute.getTraderPubKeyRing();
            Contract contract = dispute.getContract();
            if (contract.getBuyerPubKeyRing().equals(receiverPubKeyRing))
                peerNodeAddress = contract.getBuyerNodeAddress();
            else
                peerNodeAddress = contract.getSellerNodeAddress();
        } else {
            log.error(""That must not happen. Trader cannot communicate to other trader."");
        }
        return new Tuple2<>(peerNodeAddress, receiverPubKeyRing);
    }

    private boolean isAgent(Dispute dispute) {
        return pubKeyRing.equals(dispute.getAgentPubKeyRing());
    }

    private Optional<Dispute> findDispute(Dispute dispute) {
        return findDispute(dispute.getTradeId(), dispute.getTraderId());
    }

    protected Optional<Dispute> findDispute(DisputeResult disputeResult) {
        ChatMessage chatMessage = disputeResult.getChatMessage();
        checkNotNull(chatMessage, ""chatMessage must not be null"");
        return findDispute(disputeResult.getTradeId(), disputeResult.getTraderId());
    }

    private Optional<Dispute> findDispute(ChatMessage message) {
        return findDispute(message.getTradeId(), message.getTraderId());
    }

    private Optional<Dispute> findDispute(String tradeId, int traderId) {
        T disputeList = getDisputeList();
        if (disputeList == null) {
            log.warn(""disputes is null"");
            return Optional.empty();
        }
        return disputeList.stream()
                .filter(e -> e.getTradeId().equals(tradeId) && e.getTraderId() == traderId)
                .findAny();
    }

    public Optional<Dispute> findDispute(String tradeId) {
        T disputeList = getDisputeList();
        if (disputeList == null) {
            log.warn(""disputes is null"");
            return Optional.empty();
        }
        return disputeList.stream()
                .filter(e -> e.getTradeId().equals(tradeId))
                .findAny();
    }

    public Optional<Trade> findTrade(Dispute dispute) {
        Optional<Trade> retVal = tradeManager.getTradeById(dispute.getTradeId());
        if (!retVal.isPresent()) {
            retVal = closedTradableManager.getClosedTrades().stream().filter(e -> e.getId().equals(dispute.getTradeId())).findFirst();
        }
        return retVal;
    }

    private void addMediationResultMessage(Dispute dispute) {
        // In case of refundAgent we add a message with the mediatorsDisputeSummary. Only visible for refundAgent.
        if (dispute.getMediatorsDisputeResult() != null) {
            String mediatorsDisputeResult = Res.get(""support.mediatorsDisputeSummary"", dispute.getMediatorsDisputeResult());
            ChatMessage mediatorsDisputeResultMessage = new ChatMessage(
                    getSupportType(),
                    dispute.getTradeId(),
                    pubKeyRing.hashCode(),
                    false,
                    mediatorsDisputeResult,
                    p2PService.getAddress());
            mediatorsDisputeResultMessage.setSystemMessage(true);
            dispute.addAndPersistChatMessage(mediatorsDisputeResultMessage);
            requestPersistence();
        }
    }

    public void addMediationReOpenedMessage(Dispute dispute, boolean senderIsTrader) {
        ChatMessage chatMessage = new ChatMessage(
                getSupportType(),
                dispute.getTradeId(),
                dispute.getTraderId(),
                senderIsTrader,
                Res.get(""support.info.disputeReOpened""),
                p2PService.getAddress());
        chatMessage.setSystemMessage(false);
        dispute.addAndPersistChatMessage(chatMessage);
        this.sendChatMessage(chatMessage);
        requestPersistence();
    }

    // If price was going down between take offer time and open dispute time the buyer has an incentive to
    // not send the payment but to try to make a new trade with the better price. We risks to lose part of the
    // security deposit (in mediation we will always get back 0.003 BTC to keep some incentive to accept mediated
    // proposal). But if gain is larger than this loss he has economically an incentive to default in the trade.
    // We do all those calculations to give a hint to mediators to detect option trades.
    protected void addPriceInfoMessage(Dispute dispute, int counter) {
        if (!priceFeedService.hasPrices()) {
            if (counter < 3) {
                log.info(""Price provider has still no data. This is expected at startup. We try again in 10 sec."");
                UserThread.runAfter(() -> addPriceInfoMessage(dispute, counter + 1), 10);
            } else {
                log.warn(""Price provider still has no data after 3 repeated requests and 30 seconds delay. We give up."");
            }
            return;
        }

        Contract contract = dispute.getContract();
        OfferPayload offerPayload = contract.getOfferPayload();
        Price priceAtDisputeOpening = getPrice(offerPayload.getCurrencyCode());
        if (priceAtDisputeOpening == null) {
            log.info(""Price provider did not provide a price for {}. "" +
                            ""This is expected if this currency is not supported by the price providers."",
                    offerPayload.getCurrencyCode());
            return;
        }

        // The amount we would get if we do a new trade with current price
        Coin potentialAmountAtDisputeOpening = priceAtDisputeOpening.getAmountByVolume(contract.getTradeVolume());
        Coin buyerSecurityDeposit = Coin.valueOf(offerPayload.getBuyerSecurityDeposit());
        Coin minRefundAtMediatedDispute = Restrictions.getMinRefundAtMediatedDispute();
        // minRefundAtMediatedDispute is always larger as buyerSecurityDeposit at mediated payout, we ignore refund agent case here as there it can be 0.
        Coin maxLossSecDeposit = buyerSecurityDeposit.subtract(minRefundAtMediatedDispute);
        Coin tradeAmount = contract.getTradeAmount();
        Coin potentialGain = potentialAmountAtDisputeOpening.subtract(tradeAmount).subtract(maxLossSecDeposit);
        String optionTradeDetails;
        // We don't translate those strings (yet) as it is only displayed to mediators/arbitrators.
        String headline;
        if (potentialGain.isPositive()) {
            headline = ""This might be a potential option trade!"";
            optionTradeDetails = ""\nBTC amount calculated with price at dispute opening: "" + potentialAmountAtDisputeOpening.toFriendlyString() +
                    ""\nMax loss of security deposit is: "" + maxLossSecDeposit.toFriendlyString() +
                    ""\nPossible gain from an option trade is: "" + potentialGain.toFriendlyString();
        } else {
            headline = ""It does not appear to be an option trade."";
            optionTradeDetails = ""\nBTC amount calculated with price at dispute opening: "" + potentialAmountAtDisputeOpening.toFriendlyString() +
                    ""\nMax loss of security deposit is: "" + maxLossSecDeposit.toFriendlyString() +
                    ""\nPossible loss from an option trade is: "" + potentialGain.multiply(-1).toFriendlyString();
        }

        String percentagePriceDetails = offerPayload.isUseMarketBasedPrice() ?
                "" (market based price was used: "" + offerPayload.getMarketPriceMargin() * 100 + ""%)"" :
                "" (fix price was used)"";

        String priceInfoText = ""System message: "" + headline +
                ""\n\nTrade price: "" + contract.getTradePrice().toFriendlyString() + percentagePriceDetails +
                ""\nTrade amount: "" + tradeAmount.toFriendlyString() +
                ""\nPrice at dispute opening: "" + priceAtDisputeOpening.toFriendlyString() +
                optionTradeDetails;

        // We use the existing msg to copy over the users data
        ChatMessage priceInfoMessage = new ChatMessage(
                getSupportType(),
                dispute.getTradeId(),
                pubKeyRing.hashCode(),
                false,
                priceInfoText,
                p2PService.getAddress());
        priceInfoMessage.setSystemMessage(true);
        dispute.addAndPersistChatMessage(priceInfoMessage);
        requestPersistence();
    }

    @Nullable
    private Price getPrice(String currencyCode) {
        MarketPrice marketPrice = priceFeedService.getMarketPrice(currencyCode);
        if (marketPrice != null && marketPrice.isRecentExternalPriceAvailable()) {
            double marketPriceAsDouble = marketPrice.getPrice();
            try {
                int precision = CurrencyUtil.isCryptoCurrency(currencyCode) ?
                        Altcoin.SMALLEST_UNIT_EXPONENT :
                        Fiat.SMALLEST_UNIT_EXPONENT;
                double scaled = MathUtils.scaleUpByPowerOf10(marketPriceAsDouble, precision);
                long roundedToLong = MathUtils.roundDoubleToLong(scaled);
                return Price.valueOf(currencyCode, roundedToLong);
            } catch (Exception e) {
                log.error(""Exception at getPrice / parseToFiat: "" + e.toString());
                return null;
            }
        } else {
            return null;
        }
    }
}",1,64 2000 777 539 587 2001 60 2002 650 2003 60 2004 356 650 2005 123 775 657 2006 2007 59 775 657 2008 2009 59 775 657 2010 2011 59 775 657 2012 2013 59 775 657 2014 2015 59 775 657 2016 2017 59 775 657 2018 60 2002 62 2019 59 773 657 2020 2021 59 773 657 2022 2023 59 775 657 2024 2025 59 64 2026 775 657 2027 60 2028 46 2029 62 2030 61 2031 46 2032 40 41 59 64 2026 773 657 2033 2034 59 331 330 331 777 2001 40 2035 2036 44 2006 2007 44 2008 2009 44 2037 2038 44 2010 2011 44 2012 2013 44 2014 2015 44 2024 2025 44 2039 2040 44 2018 60 2002 62 2019 44 2020 2021 44 2022 2023 41 123 818 40 2036 44 2038 41 59 823 46 2007 61 2007 59 823 46 2009 61 2009 59 823 46 2011 61 2011 59 823 46 2013 61 2013 59 823 46 2015 61 2015 59 823 46 2025 61 2025 59 823 46 2017 61 2040 46 2041 40 41 59 2034 61 2040 46 2042 40 41 59 823 46 2019 61 2019 59 823 46 2021 61 2021 59 823 46 2023 61 2023 59 125 331 330 331 64 2043 777 865 2044 40 41 123 2019 46 2044 40 41 59 125 64 2043 777 2045 2046 40 2047 2048 41 123 2049 60 2004 62 2050 61 2051 40 2048 41 59 688 40 33 2050 46 2052 40 41 41 123 2053 46 2054 40 362 44 2048 46 2055 40 41 44 2048 46 2056 40 41 41 59 792 2057 59 125 792 2058 40 2050 46 2059 40 41 41 46 2060 59 125 64 2043 777 2016 2061 40 2047 2048 41 123 2062 60 2004 62 2063 61 2064 40 2048 41 59 688 40 33 2063 46 2065 40 41 41 123 2066 46 2067 40 362 44 2048 46 2068 40 41 44 2048 46 2069 40 41 41 59 792 2070 59 125 792 2071 40 2063 46 2072 40 41 41 46 2073 59 125 64 2043 777 2074 60 2047 62 2075 40 2076 2077 41 123 792 2078 40 41 46 2079 40 41 46 2080 40 2081 45 62 2081 46 2082 40 41 46 2083 40 2077 41 41 46 2084 40 2081 45 62 2081 46 2085 40 41 46 2079 40 41 41 46 2086 40 2087 46 2088 40 41 41 59 125 64 2043 777 570 2089 40 2047 2048 41 123 792 2090 40 2048 41 46 2091 40 41 59 125 64 2043 777 865 2092 40 2047 2048 41 123 2093 40 2048 41 46 2094 40 2095 45 62 123 688 40 2095 46 2096 40 41 46 2097 40 41 46 2098 40 2099 45 62 2099 46 2100 40 41 46 2101 40 2048 46 2100 40 41 41 41 41 123 2095 46 2092 40 2048 41 59 2044 40 41 59 125 630 123 2102 46 2103 40 362 44 2048 46 2100 40 41 44 2048 46 2104 40 41 41 59 125 125 41 59 125 331 330 331 330 777 539 865 2105 40 2106 2107 41 59 64 2108 777 539 2045 2109 40 2004 2110 41 59 775 539 2111 46 2112 2113 40 41 59 777 539 865 2114 40 41 59 775 539 2076 2115 40 2004 2110 41 59 775 539 2076 2116 40 2076 2117 41 59 775 539 2076 2118 40 2076 2117 41 59 331 330 331 777 2119 2120 40 41 123 792 2019 46 2120 40 41 59 125 777 2027 60 2004 62 2121 40 41 123 792 2019 46 2122 40 41 59 125 777 2076 2123 40 570 2124 44 2125 2126 41 123 792 2019 46 2123 40 2124 44 2126 41 59 125 775 2002 2127 40 41 123 792 2019 46 2127 40 41 59 125 777 2128 60 2076 62 2129 40 41 123 792 2019 46 2129 40 41 59 125 331 330 331 777 865 2130 40 41 123 818 46 2130 40 41 59 2019 46 2130 40 41 59 2036 46 2131 40 744 2132 40 41 123 64 2043 777 865 2133 40 41 123 2134 40 41 59 125 125 41 59 2038 46 2135 40 41 46 2136 40 40 2137 44 2138 44 2139 41 45 62 123 688 40 2038 46 2140 40 41 41 2141 40 41 59 125 41 59 2038 46 2142 40 41 46 2136 40 40 2137 44 2138 44 2139 41 45 62 123 688 40 2038 46 2143 40 41 41 2144 40 41 59 125 41 59 2145 40 41 59 2114 40 41 59 2074 60 2004 62 2146 61 2127 40 41 46 2147 40 41 59 2146 46 2148 40 2110 45 62 123 830 123 2028 46 2149 40 2110 44 2110 46 2150 40 41 44 2025 41 59 2028 46 2151 40 2110 44 2110 46 2152 40 41 46 2153 40 41 44 2021 41 59 2028 46 2151 40 2110 44 2110 46 2152 40 41 46 2154 40 41 44 2021 41 59 125 580 40 2028 46 2155 124 2028 46 2156 2157 41 123 2158 46 2159 40 2157 46 2160 40 41 41 59 2030 46 2161 40 2157 41 59 125 125 41 59 2028 46 2162 40 2146 44 2163 45 62 123 2164 46 2165 40 2163 46 2166 40 41 41 59 2030 46 2167 40 2163 41 59 125 41 59 125 777 570 2168 40 2004 2110 41 123 792 2017 46 2169 40 2110 46 2170 40 41 41 59 125 777 2171 60 2004 62 2172 40 2076 2077 41 123 2002 2173 61 2127 40 41 59 688 40 2173 323 2174 41 123 2175 46 2176 40 362 41 59 792 2171 46 2177 40 41 59 125 792 2173 46 2178 40 41 46 2179 40 2180 45 62 2180 46 2181 40 41 46 2182 40 2077 41 41 46 2183 40 41 59 125 331 330 331 330 775 865 2184 40 2185 2186 41 123 2002 2187 61 2127 40 41 59 688 40 2187 323 2188 41 123 2189 46 2190 40 362 41 59 792 59 125 2076 2191 61 2188 59 2004 2110 61 2186 46 2192 40 41 59 330 2110 46 2193 40 2186 46 2194 40 41 41 59 330 2110 46 2195 40 2004 46 2196 46 2197 41 59 330 2125 2126 61 2110 46 2198 40 41 59 2199 40 2110 44 1500 41 59 2016 2200 61 2110 46 2201 40 41 63 2126 46 2202 40 41 58 2126 46 2203 40 41 59 688 40 2204 40 2110 41 41 123 688 40 33 2187 46 2205 40 2110 41 41 123 2171 60 2004 62 2206 61 2207 40 2110 41 59 688 40 33 2206 46 2208 40 41 41 123 2187 46 2209 40 2110 41 59 2210 40 2110 44 2126 44 2200 41 59 125 630 123 330 2211 46 2212 40 362 44 2110 46 2213 40 41 41 59 125 125 630 123 2191 61 362 43 2110 46 2214 40 41 59 2215 46 2216 40 2191 41 59 125 125 630 123 2191 61 362 59 2217 46 2218 40 2191 41 59 125 330 2027 60 2047 62 2219 61 2110 46 2220 40 41 59 688 40 33 2219 46 2221 40 41 41 123 2047 2222 61 2219 46 2223 40 1500 41 59 2016 2224 61 2110 46 2201 40 41 63 2126 46 2203 40 41 58 2126 46 2202 40 41 59 2225 40 2222 44 2224 44 2191 323 2188 44 2191 41 59 125 2226 40 2110 41 59 830 123 2028 46 2227 40 2110 46 2228 40 41 44 2025 41 59 2028 46 2229 40 2110 44 2187 46 2230 40 41 41 59 2028 46 2231 40 2110 44 2110 46 2198 40 41 46 2232 40 41 44 2021 41 59 2028 46 2231 40 2110 44 2110 46 2198 40 41 46 2233 40 41 44 2021 41 59 125 580 40 2028 46 2234 124 2028 46 2235 124 2028 46 2236 2237 41 123 2238 46 2239 40 2237 46 2240 40 41 41 59 2030 46 2241 40 2237 41 59 125 2044 40 41 59 125 330 775 865 2242 40 2243 2244 41 123 2002 2245 61 2127 40 41 59 688 40 2245 323 2246 41 123 2247 46 2248 40 362 41 59 792 59 125 2076 2249 61 2246 59 2004 2110 61 2244 46 2250 40 41 59 2171 60 2111 62 2251 61 2011 46 2252 40 2110 46 2253 40 41 41 59 688 40 33 2251 46 2254 40 41 41 123 792 59 125 2111 2255 61 2251 46 2256 40 41 59 830 123 2028 46 2257 40 2255 44 2255 46 2258 40 41 44 2110 44 2025 44 2009 41 59 125 580 40 2028 46 2029 2259 41 123 330 330 330 2260 46 2261 40 362 44 2259 46 2262 40 41 41 59 125 688 40 33 2263 40 2110 41 41 123 688 40 33 2245 46 2264 40 2110 41 41 123 2171 60 2004 62 2265 61 2266 40 2110 41 59 688 40 33 2265 46 2254 40 41 41 123 2245 46 2267 40 2110 41 59 2255 46 2268 40 2113 40 41 41 59 2011 46 2044 40 41 59 2249 61 2246 59 125 630 123 330 2269 46 2270 40 362 44 2110 46 2253 40 41 41 59 125 125 630 123 2249 61 362 43 2110 46 2253 40 41 59 2271 46 2272 40 2249 41 59 125 125 630 123 2249 61 362 59 2273 46 2274 40 2249 41 59 125 330 2027 60 2047 62 2275 61 2244 46 2250 40 41 46 2276 40 41 59 688 40 33 2275 46 2277 40 41 41 123 2047 2278 61 2275 46 2256 40 1500 41 59 2279 40 2278 44 2110 46 2280 40 41 44 2249 323 2246 44 2249 41 59 125 2281 40 2244 44 2110 46 2282 40 41 44 2249 323 2246 44 2249 41 59 2044 40 41 59 125 331 330 331 777 865 2283 40 2004 2110 44 570 2284 44 2285 2286 44 2287 2288 41 123 2002 2289 61 2127 40 41 59 688 40 2289 323 2290 41 123 2291 46 2292 40 362 41 59 792 59 125 688 40 2289 46 2293 40 2110 41 41 123 2076 2294 61 362 43 2110 46 2295 40 41 59 2296 46 2297 40 2294 41 59 2288 46 2298 40 2294 44 744 2299 40 41 41 59 792 59 125 2171 60 2004 62 2300 61 2301 40 2110 41 59 688 40 33 2300 46 2302 40 41 309 2284 41 123 2076 2117 61 2115 40 2110 41 59 2076 2303 61 2118 40 2117 41 59 2076 2304 61 2110 46 2305 40 41 63 2306 46 2307 40 362 44 2117 44 2308 46 2309 41 58 2303 59 2076 2048 61 2306 46 2307 40 362 44 2304 41 59 2047 2310 61 744 2047 40 2311 40 41 44 2110 46 2312 40 41 44 2017 46 2313 40 41 44 2314 44 2048 44 2036 46 2315 40 41 41 59 2310 46 2316 40 2317 41 59 2110 46 2092 40 2310 41 59 688 40 33 2284 41 123 2289 46 2318 40 2110 41 59 125 2045 2319 61 2109 40 2110 41 59 688 40 2319 323 2290 41 123 792 59 125 2185 2186 61 744 2185 40 2110 44 2036 46 2315 40 41 44 2320 46 2321 40 41 46 2322 40 41 44 2311 40 41 41 59 2323 46 2324 40 362 44 2186 46 2325 40 41 46 2326 40 41 44 2319 44 2186 46 2312 40 41 44 2186 46 2327 40 41 44 2310 46 2327 40 41 41 59 2328 46 2329 40 2319 44 2110 46 2330 40 41 44 2186 44 744 2331 40 41 123 64 2043 777 865 2332 40 41 123 2323 46 2324 40 362 43 362 44 2186 46 2325 40 41 46 2326 40 41 44 2319 44 2186 46 2312 40 41 44 2186 46 2327 40 41 44 2310 46 2327 40 41 41 59 330 330 2310 46 2333 40 2317 41 59 2044 40 41 59 2286 46 2334 40 41 59 125 64 2043 777 865 2335 40 41 123 2323 46 2324 40 362 43 362 44 2186 46 2325 40 41 46 2326 40 41 44 2319 44 2186 46 2312 40 41 44 2186 46 2327 40 41 44 2310 46 2327 40 41 41 59 330 330 2310 46 2336 40 2317 41 59 2044 40 41 59 2286 46 2337 40 41 59 125 64 2043 777 865 2338 40 2076 2339 41 123 2323 46 2340 40 362 43 362 44 2186 46 2325 40 41 46 2326 40 41 44 2319 44 2186 46 2312 40 41 44 2186 46 2327 40 41 44 2310 46 2327 40 41 44 2339 41 59 330 330 2310 46 2341 40 2339 41 59 2044 40 41 59 2288 46 2342 40 362 43 2339 44 744 2343 40 41 41 59 125 125 41 59 125 630 123 2076 2344 61 362 43 362 43 2110 46 2345 40 41 59 2346 46 2347 40 2344 41 59 2288 46 2348 40 2344 44 744 2349 40 41 41 59 125 2044 40 41 59 125 330 773 865 2350 40 2004 2351 44 2125 2352 44 2016 2017 41 123 330 330 330 330 2353 46 2354 40 40 41 45 62 2355 40 2351 44 2352 44 2017 41 44 1503 44 2356 46 2357 41 59 125 773 865 2358 40 2004 2351 44 2125 2352 44 2016 2017 41 123 2002 2359 61 2127 40 41 59 688 40 2359 323 2360 41 123 2361 46 2362 40 362 41 59 792 59 125 2004 2110 61 744 2004 40 744 2363 40 41 46 2364 40 41 44 2351 46 2365 40 41 44 2017 46 2366 40 41 44 33 2351 46 2367 40 41 44 33 2351 46 2368 40 41 44 2017 44 2351 46 2369 40 41 46 2364 40 41 44 2351 46 2370 40 41 46 2364 40 41 44 2352 44 2351 46 2371 40 41 44 2351 46 2372 40 41 44 2351 46 2373 40 41 44 2351 46 2374 40 41 44 2351 46 2375 40 41 44 2351 46 2376 40 41 44 2351 46 2377 40 41 44 2351 46 2378 40 41 44 2351 46 2379 40 41 44 2351 46 2380 40 41 44 2351 46 2381 40 41 41 59 2110 46 2382 40 2351 46 2383 40 41 41 59 2110 46 2384 40 2351 46 2385 40 41 41 59 2110 46 2386 40 2351 46 2387 40 41 41 59 2171 60 2004 62 2388 61 2389 40 2110 41 59 330 688 40 2388 46 2390 40 41 41 123 2391 46 2392 40 362 44 2110 46 2365 40 41 41 59 792 59 125 2076 2117 61 2115 40 2110 41 59 2076 2393 61 2116 40 2117 41 59 2076 2394 61 2110 46 2380 40 41 63 2395 46 2396 40 362 44 2117 44 2397 46 2398 41 58 2393 59 2047 2399 61 744 2047 40 2381 40 41 44 2110 46 2365 40 41 44 2017 46 2366 40 41 44 2400 44 2395 46 2396 40 362 44 2394 41 44 2036 46 2401 40 41 41 59 2399 46 2402 40 2403 41 59 2110 46 2092 40 2399 41 59 2404 40 2110 44 1500 41 59 2359 46 2405 40 2110 41 59 330 2125 2126 61 2110 46 2406 40 41 59 2016 2407 61 2110 46 2367 40 41 63 2126 46 2408 40 41 58 2126 46 2409 40 41 59 2045 2410 61 2110 46 2367 40 41 63 2126 46 2411 40 41 58 2126 46 2412 40 41 59 2243 2244 61 744 2243 40 2110 44 2036 46 2401 40 41 44 2413 46 2414 40 41 46 2415 40 41 44 2381 40 41 41 59 2416 46 2417 40 362 44 2244 46 2418 40 41 46 2419 40 41 44 2410 44 2244 46 2365 40 41 44 2244 46 2420 40 41 44 2399 46 2420 40 41 41 59 2421 46 2422 40 2410 44 2407 44 2244 44 744 2423 40 41 123 64 2043 777 865 2424 40 41 123 2416 46 2417 40 362 43 362 44 2244 46 2418 40 41 46 2419 40 41 44 2410 44 2244 46 2365 40 41 44 2244 46 2420 40 41 44 2399 46 2420 40 41 41 59 330 330 2399 46 2425 40 2403 41 59 2044 40 41 59 125 64 2043 777 865 2426 40 41 123 2416 46 2417 40 362 43 362 44 2244 46 2418 40 41 46 2419 40 41 44 2410 44 2244 46 2365 40 41 44 2244 46 2420 40 41 44 2399 46 2420 40 41 41 59 330 330 2399 46 2427 40 2403 41 59 2044 40 41 59 125 64 2043 777 865 2428 40 2076 2429 41 123 2416 46 2430 40 362 43 362 44 2244 46 2418 40 41 46 2419 40 41 44 2410 44 2244 46 2365 40 41 44 2244 46 2420 40 41 44 2399 46 2420 40 41 44 2429 41 59 330 330 2399 46 2431 40 2429 41 59 2044 40 41 59 125 125 41 59 2044 40 41 59 125 330 777 865 2432 40 2433 2434 44 2004 2110 44 2076 2435 41 123 2002 2436 61 2127 40 41 59 688 40 2436 323 2437 41 123 2438 46 2439 40 362 41 59 792 59 125 2047 2440 61 744 2047 40 2441 40 41 44 2110 46 2442 40 41 44 2110 46 2443 40 41 46 2444 40 41 44 2445 44 2435 44 2036 46 2446 40 41 41 59 2434 46 2447 40 2440 41 59 2110 46 2092 40 2440 41 59 2045 2448 59 2125 2126 61 2110 46 2449 40 41 59 688 40 2126 46 2450 40 41 46 2451 40 2110 46 2443 40 41 41 41 2448 61 2126 46 2452 40 41 59 630 2448 61 2126 46 2453 40 41 59 2106 2107 61 744 2106 40 2434 44 2036 46 2446 40 41 44 2454 46 2455 40 41 46 2456 40 41 44 2441 40 41 41 59 2457 46 2458 40 362 44 2107 46 2459 40 41 46 2460 40 41 44 2448 44 2107 46 2442 40 41 44 2107 46 2461 40 41 44 2440 46 2461 40 41 41 59 2462 46 2463 40 2448 44 2110 46 2443 40 41 44 2107 44 744 2464 40 41 123 64 2043 777 865 2465 40 41 123 2457 46 2458 40 362 43 362 44 2107 46 2459 40 41 46 2460 40 41 44 2448 44 2107 46 2442 40 41 44 2107 46 2461 40 41 44 2440 46 2461 40 41 41 59 330 330 2440 46 2466 40 2467 41 59 2044 40 41 59 125 64 2043 777 865 2468 40 41 123 2457 46 2458 40 362 43 362 44 2107 46 2459 40 41 46 2460 40 41 44 2448 44 2107 46 2442 40 41 44 2107 46 2461 40 41 44 2440 46 2461 40 41 41 59 330 330 2440 46 2469 40 2470 41 59 2044 40 41 59 125 64 2043 777 865 2471 40 2076 2472 41 123 2457 46 2473 40 362 43 362 44 2107 46 2459 40 41 46 2460 40 41 44 2448 44 2107 46 2442 40 41 44 2107 46 2461 40 41 44 2440 46 2461 40 41 44 2472 41 59 330 330 2440 46 2474 40 2472 41 59 2044 40 41 59 125 125 41 59 2044 40 41 59 125 331 330 331 773 2475 60 2045 44 2016 62 2476 40 2004 2110 41 123 2016 2477 61 2478 59 2045 2479 61 2478 59 688 40 2168 40 2110 41 41 123 2477 61 2110 46 2480 40 41 59 2479 61 2109 40 2110 41 59 125 630 688 40 2481 40 2110 41 41 123 2477 61 2110 46 2482 40 41 59 2125 2126 61 2110 46 2483 40 41 59 688 40 2126 46 2484 40 41 46 2485 40 2477 41 41 2479 61 2126 46 2486 40 41 59 630 2479 61 2126 46 2487 40 41 59 125 630 123 2488 46 2489 40 362 41 59 125 792 744 2475 60 62 40 2479 44 2477 41 59 125 773 570 2490 40 2004 2110 41 123 792 2017 46 2491 40 2110 46 2492 40 41 41 59 125 773 2171 60 2004 62 2493 40 2004 2110 41 123 792 2493 40 2110 46 2494 40 41 44 2110 46 2495 40 41 41 59 125 775 2171 60 2004 62 2493 40 2433 2434 41 123 2047 2496 61 2434 46 2497 40 41 59 2498 40 2496 44 362 41 59 792 2493 40 2434 46 2499 40 41 44 2434 46 2500 40 41 41 59 125 773 2171 60 2004 62 2493 40 2047 2048 41 123 792 2493 40 2048 46 2501 40 41 44 2048 46 2502 40 41 41 59 125 773 2171 60 2004 62 2493 40 2076 2077 44 704 2503 41 123 2002 2504 61 2127 40 41 59 688 40 2504 323 2505 41 123 2506 46 2507 40 362 41 59 792 2171 46 2508 40 41 59 125 792 2504 46 2509 40 41 46 2510 40 2511 45 62 2511 46 2512 40 41 46 2513 40 2077 41 307 2511 46 2514 40 41 323 2503 41 46 2515 40 41 59 125 777 2171 60 2004 62 2493 40 2076 2077 41 123 2002 2516 61 2127 40 41 59 688 40 2516 323 2517 41 123 2518 46 2519 40 362 41 59 792 2171 46 2520 40 41 59 125 792 2516 46 2521 40 41 46 2522 40 2523 45 62 2523 46 2524 40 41 46 2525 40 2077 41 41 46 2526 40 41 59 125 777 2171 60 2111 62 2527 40 2004 2110 41 123 2171 60 2111 62 2528 61 2011 46 2529 40 2110 46 2530 40 41 41 59 688 40 33 2528 46 2531 40 41 41 123 2528 61 2013 46 2532 40 41 46 2533 40 41 46 2534 40 2535 45 62 2535 46 2536 40 41 46 2537 40 2110 46 2530 40 41 41 41 46 2538 40 41 59 125 792 2528 59 125 773 865 2539 40 2004 2110 41 123 330 688 40 2110 46 2540 40 41 340 2541 41 123 2076 2542 61 2543 46 2544 40 362 44 2110 46 2540 40 41 41 59 2047 2545 61 744 2047 40 2546 40 41 44 2110 46 2547 40 41 44 2017 46 2548 40 41 44 2549 44 2542 44 2036 46 2550 40 41 41 59 2545 46 2551 40 2552 41 59 2110 46 2092 40 2545 41 59 2044 40 41 59 125 125 777 865 2553 40 2004 2110 44 570 2554 41 123 2047 2555 61 744 2047 40 2556 40 41 44 2110 46 2557 40 41 44 2110 46 2558 40 41 44 2554 44 2559 46 2560 40 362 41 44 2036 46 2561 40 41 41 59 2555 46 2562 40 2563 41 59 2110 46 2092 40 2555 41 59 823 46 2564 40 2555 41 59 2044 40 41 59 125 330 330 330 330 330 775 865 2565 40 2004 2110 44 704 2566 41 123 688 40 33 2023 46 2567 40 41 41 123 688 40 2566 60 1502 41 123 2568 46 2569 40 362 41 59 2570 46 2571 40 40 41 45 62 2565 40 2110 44 2566 43 1501 41 44 1502 41 59 125 630 123 2572 46 2573 40 362 41 59 125 792 59 125 2125 2126 61 2110 46 2574 40 41 59 2575 2576 61 2126 46 2577 40 41 59 2578 2579 61 2580 40 2576 46 2581 40 41 41 59 688 40 2579 323 2582 41 123 2583 46 2584 40 362 43 362 44 2576 46 2581 40 41 41 59 792 59 125 330 2585 2586 61 2579 46 2587 40 2126 46 2588 40 41 41 59 2585 2589 61 2585 46 2590 40 2576 46 2591 40 41 41 59 2585 2592 61 2593 46 2594 40 41 59 330 2585 2595 61 2589 46 2596 40 2592 41 59 2585 2597 61 2126 46 2598 40 41 59 2585 2599 61 2586 46 2596 40 2597 41 46 2596 40 2595 41 59 2076 2600 59 330 2076 2601 59 688 40 2599 46 2602 40 41 41 123 2601 61 362 59 2600 61 362 43 2586 46 2603 40 41 43 362 43 2595 46 2603 40 41 43 362 43 2599 46 2603 40 41 59 125 630 123 2601 61 362 59 2600 61 362 43 2586 46 2604 40 41 43 362 43 2595 46 2604 40 41 43 362 43 2599 46 2605 40 45 1501 41 46 2604 40 41 59 125 2076 2606 61 2576 46 2607 40 41 63 362 43 2576 46 2608 40 41 42 1503 43 362 58 362 59 2076 2609 61 362 43 2601 43 362 43 2126 46 2610 40 41 46 2611 40 41 43 2606 43 362 43 2597 46 2611 40 41 43 362 43 2579 46 2611 40 41 43 2600 59 330 2047 2612 61 744 2047 40 2613 40 41 44 2110 46 2614 40 41 44 2017 46 2615 40 41 44 2616 44 2609 44 2036 46 2617 40 41 41 59 2612 46 2618 40 2619 41 59 2110 46 2092 40 2612 41 59 2044 40 41 59 125 64 2108 773 2620 2621 40 2076 2622 41 123 2623 2624 61 2023 46 2625 40 2622 41 59 688 40 2624 340 2626 307 2624 46 2627 40 41 41 123 625 2628 61 2624 46 2621 40 41 59 830 123 704 2629 61 2630 46 2631 40 2622 41 63 2632 46 2633 58 2634 46 2633 59 625 2635 61 2636 46 2637 40 2628 44 2629 41 59 726 2638 61 2636 46 2639 40 2635 41 59 792 2620 46 2640 40 2622 44 2638 41 59 125 580 40 2641 2642 41 123 2643 46 2644 40 362 43 2642 46 2645 40 41 41 59 792 2626 59 125 125 630 123 792 2626 59 125 125 125 ,"{'AvgLine': 23, 'CountLine': 885, 'CountStmt': 385, 'MaxNesting': 3, 'AvgLineCode': 20, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 316, 'MaxEssential': 5, 'SumEssential': 58, 'AvgCyclomatic': 2, 'CountLineCode': 697, 'CountStmtDecl': 140, 'MaxCyclomatic': 9, 'SumCyclomatic': 96, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 116, 'CountSemicolon': 299, 'CountDeclMethod': 40, 'CountLineCodeExe': 528, 'CountLineComment': 73, 'CountClassCoupled': 63, 'CountClassDerived': 3, 'CountLineCodeDecl': 176, 'CountDeclMethodAll': 62, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.10', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 99, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 22, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 91, 'SumCyclomaticModified': 96, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 9, 'CountDeclInstanceMethod': 40, 'CountDeclMethodProtected': 9, 'CountClassCoupledModified': 63, 'CountDeclInstanceVariable': 12, 'PercentLackOfCohesionModified': 84}"
3351,Java,"@Slf4j
public abstract class BisqExecutable implements GracefulShutDownHandler, BisqSetup.BisqSetupListener, UncaughtExceptionHandler {

    public static final int EXIT_SUCCESS = 0;
    public static final int EXIT_FAILURE = 1;

    private final String fullName;
    private final String scriptName;
    private final String appName;
    private final String version;

    protected Injector injector;
    protected AppModule module;
    protected Config config;
    private boolean isShutdownInProgress;
    private boolean hasDowngraded;

    public BisqExecutable(String fullName, String scriptName, String appName, String version) {
        this.fullName = fullName;
        this.scriptName = scriptName;
        this.appName = appName;
        this.version = version;
    }

    public void execute(String[] args) {
        try {
            config = new Config(appName, Utilities.getUserDataDir(), args);
            if (config.helpRequested) {
                config.printHelp(System.out, new BisqHelpFormatter(fullName, scriptName, version));
                System.exit(EXIT_SUCCESS);
            }
        } catch (ConfigException ex) {
            System.err.println(""error: "" + ex.getMessage());
            System.exit(EXIT_FAILURE);
        } catch (Throwable ex) {
            System.err.println(""fault: An unexpected error occurred. "" +
                    ""Please file a report at https://bisq.network/issues"");
            ex.printStackTrace(System.err);
            System.exit(EXIT_FAILURE);
        }

        doExecute();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // First synchronous execution tasks
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected void doExecute() {
        CommonSetup.setup(config, this);
        CoreSetup.setup(config);

        addCapabilities();

        // If application is JavaFX application we need to wait until it is initialized
        launchApplication();
    }

    protected abstract void configUserThread();

    protected void addCapabilities() {
    }

    // The onApplicationLaunched call must map to UserThread, so that all following methods are running in the
    // thread the application is running and we don't run into thread interference.
    protected abstract void launchApplication();


    ///////////////////////////////////////////////////////////////////////////////////////////
    // If application is a JavaFX application we need wait for onApplicationLaunched
    ///////////////////////////////////////////////////////////////////////////////////////////

    // Headless versions can call inside launchApplication the onApplicationLaunched() manually
    // Desktop gets called from JavaFx thread
    protected void onApplicationLaunched() {
        configUserThread();

        // Now we can use the user thread start periodic tasks
        CommonSetup.startPeriodicTasks();

        // As the handler method might be overwritten by subclasses and they use the application as handler
        // we need to setup the handler after the application is created.
        CommonSetup.setupUncaughtExceptionHandler(this);
        setupGuice();
        setupAvoidStandbyMode();

        hasDowngraded = BisqSetup.hasDowngraded();
        if (hasDowngraded) {
            // If user tried to downgrade we do not read the persisted data to avoid data corruption
            // We call startApplication to enable UI to show popup. We prevent in BisqSetup to go further
            // in the process and require a shut down.
            startApplication();
        } else {
            readAllPersisted(this::startApplication);
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // We continue with a series of synchronous execution tasks
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected void setupGuice() {
        module = getModule();
        injector = getInjector();
        applyInjector();
    }

    protected abstract AppModule getModule();

    protected Injector getInjector() {
        return Guice.createInjector(module);
    }

    protected void applyInjector() {
        // Subclasses might configure classes with the injector here
    }

    protected void readAllPersisted(Runnable completeHandler) {
        readAllPersisted(null, completeHandler);
    }

    protected void readAllPersisted(@Nullable List<PersistedDataHost> additionalHosts, Runnable completeHandler) {
        List<PersistedDataHost> hosts = CorePersistedDataHost.getPersistedDataHosts(injector);
        if (additionalHosts != null) {
            hosts.addAll(additionalHosts);
        }

        AtomicInteger remaining = new AtomicInteger(hosts.size());
        hosts.forEach(host -> {
            host.readPersisted(() -> {
                if (remaining.decrementAndGet() == 0) {
                    UserThread.execute(completeHandler);
                }
            });
        });
    }

    protected void setupAvoidStandbyMode() {
    }

    protected abstract void startApplication();

    // Once the application is ready we get that callback and we start the setup
    protected void onApplicationStarted() {
        runBisqSetup();
    }

    protected void runBisqSetup() {
        BisqSetup bisqSetup = injector.getInstance(BisqSetup.class);
        bisqSetup.addBisqSetupListener(this);
        bisqSetup.start();
    }

    public abstract void onSetupComplete();


    ///////////////////////////////////////////////////////////////////////////////////////////
    // GracefulShutDownHandler implementation
    ///////////////////////////////////////////////////////////////////////////////////////////

    // This might need to be overwritten in case the application is not using all modules
    @Override
    public void gracefulShutDown(ResultHandler resultHandler) {
        log.info(""Start graceful shutDown"");
        if (isShutdownInProgress) {
            return;
        }

        isShutdownInProgress = true;

        if (injector == null) {
            log.info(""Shut down called before injector was created"");
            resultHandler.handleResult();
            System.exit(EXIT_SUCCESS);
        }

        // We do not use the UserThread to avoid that the timeout would not get triggered in case the UserThread
        // would get blocked by a shutdown routine.
        new Timer().schedule(new TimerTask() {
            @Override
            public void run() {
                log.warn(""Graceful shutdown not completed in 10 sec. We trigger our timeout handler."");
                flushAndExit(resultHandler, EXIT_SUCCESS);
            }
        }, 10000);

        try {
            injector.getInstance(ClockWatcher.class).shutDown();
            injector.getInstance(OpenBsqSwapOfferService.class).shutDown();
            injector.getInstance(PriceFeedService.class).shutDown();
            injector.getInstance(ArbitratorManager.class).shutDown();
            injector.getInstance(TradeStatisticsManager.class).shutDown();
            injector.getInstance(XmrTxProofService.class).shutDown();
            injector.getInstance(RpcService.class).shutDown();
            injector.getInstance(DaoSetup.class).shutDown();
            injector.getInstance(AvoidStandbyModeService.class).shutDown();
            log.info(""OpenOfferManager shutdown started"");
            injector.getInstance(OpenOfferManager.class).shutDown(() -> {
                log.info(""OpenOfferManager shutdown completed"");

                injector.getInstance(BtcWalletService.class).shutDown();
                injector.getInstance(BsqWalletService.class).shutDown();

                // We need to shut down BitcoinJ before the P2PService as it uses Tor.
                WalletsSetup walletsSetup = injector.getInstance(WalletsSetup.class);
                walletsSetup.shutDownComplete.addListener((ov, o, n) -> {
                    log.info(""WalletsSetup shutdown completed"");
                    injector.getInstance(P2PService.class).shutDown(() -> {
                        log.info(""P2PService shutdown completed"");
                        module.close(injector);
                        flushAndExit(resultHandler, EXIT_SUCCESS);
                    });
                });
                walletsSetup.shutDown();
            });
        } catch (Throwable t) {
            log.error(""App shutdown failed with an exception"", t);
            flushAndExit(resultHandler, EXIT_FAILURE);
        }
    }

    private void flushAndExit(ResultHandler resultHandler, int status) {
        if (!hasDowngraded) {
            // If user tried to downgrade we do not write the persistable data to avoid data corruption
            log.info(""PersistenceManager flushAllDataToDiskAtShutdown started"");
            PersistenceManager.flushAllDataToDiskAtShutdown(() -> {
                log.info(""Graceful shutdown completed. Exiting now."");
                resultHandler.handleResult();
                UserThread.runAfter(() -> System.exit(status), 100, TimeUnit.MILLISECONDS);
            });
        } else {
            UserThread.runAfter(() -> System.exit(status), 100, TimeUnit.MILLISECONDS);
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // UncaughtExceptionHandler implementation
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void handleUncaughtException(Throwable throwable, boolean doShutDown) {
        log.error(throwable.toString());

        if (doShutDown)
            gracefulShutDown(() -> log.info(""gracefulShutDown complete""));
    }
}",1,64 2000 777 539 587 2001 693 2002 44 2003 46 2004 44 2005 123 777 809 657 704 2006 61 1500 59 777 809 657 704 2007 61 1501 59 773 657 2008 2009 59 773 657 2008 2010 59 773 657 2008 2011 59 773 657 2008 2012 59 775 2013 2014 59 775 2015 2016 59 775 2017 2018 59 773 570 2019 59 773 570 2020 59 777 2001 40 2008 2009 44 2008 2010 44 2008 2011 44 2008 2012 41 123 823 46 2009 61 2009 59 823 46 2010 61 2010 59 823 46 2011 61 2011 59 823 46 2012 61 2012 59 125 777 865 2021 40 2008 91 93 2022 41 123 830 123 2018 61 744 2017 40 2011 44 2023 46 2024 40 41 44 2022 41 59 688 40 2018 46 2025 41 123 2018 46 2026 40 2027 46 2028 44 744 2029 40 2009 44 2010 44 2012 41 41 59 2027 46 2030 40 2006 41 59 125 125 580 40 2031 2032 41 123 2033 46 2034 46 2035 40 362 43 2032 46 2036 40 41 41 59 2033 46 2037 40 2007 41 59 125 580 40 2038 2032 41 123 2039 46 2040 46 2041 40 362 43 362 41 59 2032 46 2042 40 2039 46 2040 41 59 2039 46 2043 40 2007 41 59 125 2044 40 41 59 125 331 330 331 775 865 2045 40 41 123 2046 46 2047 40 2018 44 823 41 59 2048 46 2047 40 2018 41 59 2049 40 41 59 330 2050 40 41 59 125 775 539 865 2051 40 41 59 775 865 2052 40 41 123 125 330 330 775 539 865 2053 40 41 59 331 330 331 330 330 775 865 2054 40 41 123 2051 40 41 59 330 2055 46 2056 40 41 59 330 330 2055 46 2057 40 823 41 59 2058 40 41 59 2059 40 41 59 2020 61 2003 46 2020 40 41 59 688 40 2020 41 123 330 330 330 2060 40 41 59 125 630 123 2061 40 823 58 58 2062 41 59 125 125 331 330 331 775 865 2063 40 41 123 2016 61 2064 40 41 59 2014 61 2065 40 41 59 2066 40 41 59 125 775 539 2015 2067 40 41 59 775 2013 2068 40 41 123 792 2069 46 2070 40 2016 41 59 125 775 865 2071 40 41 123 330 125 775 865 2072 40 2073 2074 41 123 2072 40 2075 44 2074 41 59 125 775 865 2072 40 64 2076 2077 60 2078 62 2079 44 2073 2074 41 123 2077 60 2078 62 2080 61 2081 46 2082 40 2014 41 59 688 40 2079 340 2083 41 123 2080 46 2084 40 2079 41 59 125 2085 2086 61 744 2085 40 2080 46 2087 40 41 41 59 2080 46 2088 40 2089 45 62 123 2089 46 2090 40 40 41 45 62 123 688 40 2086 46 2091 40 41 323 1500 41 123 2092 46 2021 40 2074 41 59 125 125 41 59 125 41 59 125 775 865 2093 40 41 123 125 775 539 865 2094 40 41 59 330 775 865 2095 40 41 123 2096 40 41 59 125 775 865 2097 40 41 123 2003 2098 61 2014 46 2099 40 2003 46 587 41 59 2098 46 2100 40 823 41 59 2098 46 2101 40 41 59 125 777 539 865 2102 40 41 59 331 330 331 330 64 2103 777 865 2104 40 2105 2106 41 123 2107 46 2108 40 362 41 59 688 40 2019 41 123 792 59 125 2019 61 2109 59 688 40 2014 323 2110 41 123 2107 46 2108 40 362 41 59 2106 46 2111 40 41 59 2112 46 2113 40 2006 41 59 125 330 330 744 2114 40 41 46 2115 40 744 2116 40 41 123 64 2103 777 865 2117 40 41 123 2107 46 2118 40 362 41 59 2119 40 2106 44 2006 41 59 125 125 44 1505 41 59 830 123 2014 46 2120 40 2121 46 587 41 46 2122 40 41 59 2014 46 2120 40 2123 46 587 41 46 2122 40 41 59 2014 46 2120 40 2124 46 587 41 46 2122 40 41 59 2014 46 2120 40 2125 46 587 41 46 2122 40 41 59 2014 46 2120 40 2126 46 587 41 46 2122 40 41 59 2014 46 2120 40 2127 46 587 41 46 2122 40 41 59 2014 46 2120 40 2128 46 587 41 46 2122 40 41 59 2014 46 2120 40 2129 46 587 41 46 2122 40 41 59 2014 46 2120 40 2130 46 587 41 46 2122 40 41 59 2107 46 2108 40 362 41 59 2014 46 2120 40 2131 46 587 41 46 2122 40 40 41 45 62 123 2107 46 2108 40 362 41 59 2014 46 2120 40 2132 46 587 41 46 2122 40 41 59 2014 46 2120 40 2133 46 587 41 46 2122 40 41 59 330 2134 2135 61 2014 46 2120 40 2134 46 587 41 59 2135 46 2136 46 2137 40 40 2138 44 2139 44 2140 41 45 62 123 2107 46 2108 40 362 41 59 2014 46 2120 40 2141 46 587 41 46 2122 40 40 41 45 62 123 2107 46 2108 40 362 41 59 2016 46 2142 40 2014 41 59 2143 40 2106 44 2006 41 59 125 41 59 125 41 59 2135 46 2122 40 41 59 125 41 59 125 580 40 2144 2145 41 123 2107 46 2146 40 362 44 2145 41 59 2147 40 2106 44 2007 41 59 125 125 773 865 2148 40 2105 2106 44 704 2149 41 123 688 40 33 2020 41 123 330 2150 46 2151 40 362 41 59 2152 46 2153 40 40 41 45 62 123 2150 46 2151 40 362 41 59 2106 46 2154 40 41 59 2155 46 2156 40 40 41 45 62 2157 46 2158 40 2149 41 44 1503 44 2159 46 2160 41 59 125 41 59 125 630 123 2161 46 2162 40 40 41 45 62 2163 46 2164 40 2149 41 44 1503 44 2165 46 2166 41 59 125 125 331 330 331 64 2103 777 865 2167 40 2168 2169 44 570 2170 41 123 2171 46 2172 40 2169 46 2173 40 41 41 59 688 40 2170 41 2104 40 40 41 45 62 2171 46 2174 40 362 41 41 59 125 125 ,"{'AvgLine': 11, 'CountLine': 248, 'CountStmt': 125, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 91, 'MaxEssential': 1, 'SumEssential': 21, 'AvgCyclomatic': 1, 'CountLineCode': 169, 'CountStmtDecl': 38, 'MaxCyclomatic': 4, 'SumCyclomatic': 31, 'AvgLineComment': 0, 'CountClassBase': 4, 'CountLineBlank': 46, 'CountSemicolon': 97, 'CountDeclMethod': 21, 'CountLineCodeExe': 108, 'CountLineComment': 34, 'CountClassCoupled': 38, 'CountClassDerived': 3, 'CountLineCodeDecl': 40, 'CountDeclMethodAll': 21, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.20', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 31, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 86, 'SumCyclomaticModified': 31, 'CountDeclClassVariable': 2, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 21, 'CountDeclMethodProtected': 15, 'CountClassCoupledModified': 38, 'CountDeclInstanceVariable': 9, 'PercentLackOfCohesionModified': 83}"
4077,Java,"@Singleton
@Slf4j
class CoreDisputeAgentsService {

    private final Config config;
    private final KeyRing keyRing;
    private final MediatorManager mediatorManager;
    private final RefundAgentManager refundAgentManager;
    private final P2PService p2PService;
    private final NodeAddress nodeAddress;
    private final List<String> languageCodes;

    @Inject
    public CoreDisputeAgentsService(Config config,
                                    KeyRing keyRing,
                                    MediatorManager mediatorManager,
                                    RefundAgentManager refundAgentManager,
                                    P2PService p2PService) {
        this.config = config;
        this.keyRing = keyRing;
        this.mediatorManager = mediatorManager;
        this.refundAgentManager = refundAgentManager;
        this.p2PService = p2PService;
        this.nodeAddress = new NodeAddress(getLoopbackAddress().getHostAddress(), config.nodePort);
        this.languageCodes = asList(""de"", ""en"", ""es"", ""fr"");
    }

    void registerDisputeAgent(String disputeAgentType, String registrationKey) {
        if (!p2PService.isBootstrapped())
            throw new IllegalStateException(""p2p service is not bootstrapped yet"");

        if (config.baseCurrencyNetwork.isMainnet()
                || config.baseCurrencyNetwork.isDaoBetaNet()
                || !config.useLocalhostForP2P)
            throw new IllegalStateException(""dispute agents must be registered in a Bisq UI"");

        if (!registrationKey.equals(DEV_PRIVILEGE_PRIV_KEY))
            throw new IllegalArgumentException(""invalid registration key"");

        Optional<SupportType> supportType = getSupportType(disputeAgentType);
        if (supportType.isPresent()) {
            ECKey ecKey;
            String signature;
            switch (supportType.get()) {
                case ARBITRATION:
                    throw new IllegalArgumentException(""arbitrators must be registered in a Bisq UI"");
                case MEDIATION:
                    ecKey = mediatorManager.getRegistrationKey(registrationKey);
                    signature = mediatorManager.signStorageSignaturePubKey(Objects.requireNonNull(ecKey));
                    registerMediator(nodeAddress, languageCodes, ecKey, signature);
                    return;
                case REFUND:
                    ecKey = refundAgentManager.getRegistrationKey(registrationKey);
                    signature = refundAgentManager.signStorageSignaturePubKey(Objects.requireNonNull(ecKey));
                    registerRefundAgent(nodeAddress, languageCodes, ecKey, signature);
                    return;
                case TRADE:
                    throw new IllegalArgumentException(""trade agent registration not supported"");
            }
        } else {
            throw new IllegalArgumentException(format(""unknown dispute agent type '%s'"", disputeAgentType));
        }
    }

    private void registerMediator(NodeAddress nodeAddress,
                                  List<String> languageCodes,
                                  ECKey ecKey,
                                  String signature) {
        Mediator mediator = new Mediator(nodeAddress,
                keyRing.getPubKeyRing(),
                languageCodes,
                new Date().getTime(),
                ecKey.getPubKey(),
                signature,
                null,
                null,
                null
        );
        mediatorManager.addDisputeAgent(mediator, () -> {
        }, errorMessage -> {
        });
        mediatorManager.getDisputeAgentByNodeAddress(nodeAddress).orElseThrow(() ->
                new IllegalStateException(""could not register mediator""));
    }

    private void registerRefundAgent(NodeAddress nodeAddress,
                                     List<String> languageCodes,
                                     ECKey ecKey,
                                     String signature) {
        RefundAgent refundAgent = new RefundAgent(nodeAddress,
                keyRing.getPubKeyRing(),
                languageCodes,
                new Date().getTime(),
                ecKey.getPubKey(),
                signature,
                null,
                null,
                null
        );
        refundAgentManager.addDisputeAgent(refundAgent, () -> {
        }, errorMessage -> {
        });
        refundAgentManager.getDisputeAgentByNodeAddress(nodeAddress).orElseThrow(() ->
                new IllegalStateException(""could not register refund agent""));
    }

    private Optional<SupportType> getSupportType(String disputeAgentType) {
        switch (disputeAgentType.toLowerCase()) {
            case ""arbitrator"":
                return Optional.of(ARBITRATION);
            case ""mediator"":
                return Optional.of(MEDIATION);
            case ""refundagent"":
            case ""refund_agent"":
                return Optional.of(REFUND);
            case ""tradeagent"":
            case ""trade_agent"":
                return Optional.of(TRADE);
            default:
                return Optional.empty();
        }
    }
}",1,64 2000 64 2001 587 2002 123 773 657 2003 2004 59 773 657 2005 2006 59 773 657 2007 2008 59 773 657 2009 2010 59 773 657 2011 2012 59 773 657 2013 2014 59 773 657 2015 60 2016 62 2017 59 64 2018 777 2002 40 2003 2004 44 2005 2006 44 2007 2008 44 2009 2010 44 2011 2012 41 123 823 46 2004 61 2004 59 823 46 2006 61 2006 59 823 46 2008 61 2008 59 823 46 2010 61 2010 59 823 46 2012 61 2012 59 823 46 2014 61 744 2013 40 2019 40 41 46 2020 40 41 44 2004 46 2021 41 59 823 46 2017 61 2022 40 362 44 362 44 362 44 362 41 59 125 865 2023 40 2016 2024 44 2016 2025 41 123 688 40 33 2012 46 2026 40 41 41 825 744 2027 40 362 41 59 688 40 2004 46 2028 46 2029 40 41 309 2004 46 2028 46 2030 40 41 309 33 2004 46 2031 41 825 744 2027 40 362 41 59 688 40 33 2025 46 2032 40 2033 41 41 825 744 2034 40 362 41 59 2035 60 2036 62 2037 61 2038 40 2024 41 59 688 40 2037 46 2039 40 41 41 123 2040 2041 59 2016 2042 59 819 40 2037 46 2043 40 41 41 123 579 2044 58 825 744 2034 40 362 41 59 579 2045 58 2041 61 2008 46 2046 40 2025 41 59 2042 61 2008 46 2047 40 2048 46 2049 40 2041 41 41 59 2050 40 2014 44 2017 44 2041 44 2042 41 59 792 59 579 2051 58 2041 61 2010 46 2046 40 2025 41 59 2042 61 2010 46 2047 40 2048 46 2049 40 2041 41 41 59 2052 40 2014 44 2017 44 2041 44 2042 41 59 792 59 579 2053 58 825 744 2034 40 362 41 59 125 125 630 123 825 744 2034 40 2054 40 362 44 2024 41 41 59 125 125 773 865 2055 40 2013 2014 44 2015 60 2016 62 2017 44 2056 2057 44 2016 2058 41 123 2059 2060 61 744 2059 40 2014 44 2006 46 2061 40 41 44 2017 44 744 2062 40 41 46 2063 40 41 44 2057 46 2064 40 41 44 2058 44 2065 44 2065 44 2065 41 59 2008 46 2066 40 2060 44 40 41 45 62 123 125 44 2067 45 62 123 125 41 59 2008 46 2068 40 2014 41 46 2069 40 40 41 45 62 744 2070 40 362 41 41 59 125 773 865 2071 40 2013 2014 44 2015 60 2016 62 2017 44 2056 2057 44 2016 2058 41 123 2072 2073 61 744 2072 40 2014 44 2006 46 2074 40 41 44 2017 44 744 2075 40 41 46 2076 40 41 44 2057 46 2077 40 41 44 2058 44 2078 44 2078 44 2078 41 59 2010 46 2079 40 2073 44 40 41 45 62 123 125 44 2080 45 62 123 125 41 59 2010 46 2081 40 2014 41 46 2082 40 40 41 45 62 744 2083 40 362 41 41 59 125 773 2084 60 2085 62 2086 40 2016 2024 41 123 819 40 2024 46 2087 40 41 41 123 579 362 58 792 2084 46 2088 40 2089 41 59 579 362 58 792 2084 46 2088 40 2090 41 59 579 362 58 579 362 58 792 2084 46 2088 40 2091 41 59 579 362 58 579 362 58 792 2084 46 2088 40 2092 41 59 613 58 792 2084 46 2093 40 41 59 125 125 125 ,"{'AvgLine': 21, 'CountLine': 123, 'CountStmt': 54, 'MaxNesting': 2, 'AvgLineCode': 20, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 39, 'MaxEssential': 6, 'SumEssential': 16, 'AvgCyclomatic': 3, 'CountLineCode': 114, 'CountStmtDecl': 18, 'MaxCyclomatic': 9, 'SumCyclomatic': 25, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountSemicolon': 42, 'CountDeclMethod': 5, 'CountLineCodeExe': 77, 'CountLineComment': 0, 'CountClassCoupled': 22, 'CountClassDerived': 0, 'CountLineCodeDecl': 33, 'CountDeclMethodAll': 5, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 11, 'SumCyclomaticStrict': 27, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 51, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 1, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 22, 'CountDeclInstanceVariable': 7, 'PercentLackOfCohesionModified': 48}"
3496,Java,"public class FilterWindow extends Overlay<FilterWindow> {
    private final FilterManager filterManager;
    private final BsqFormatter bsqFormatter;
    private final CoinFormatter btcFormatter;
    private final boolean useDevPrivilegeKeys;
    private ScrollPane scrollPane;

    @Inject
    public FilterWindow(FilterManager filterManager,
                        BsqFormatter bsqFormatter,
                        @Named(FormattingUtils.BTC_FORMATTER_KEY) CoinFormatter btcFormatter,
                        @Named(Config.USE_DEV_PRIVILEGE_KEYS) boolean useDevPrivilegeKeys) {
        this.filterManager = filterManager;
        this.bsqFormatter = bsqFormatter;
        this.btcFormatter = btcFormatter;
        this.useDevPrivilegeKeys = useDevPrivilegeKeys;
        type = Type.Attention;
    }

    @Override
    protected Region getRootContainer() {
        return scrollPane;
    }

    public void show() {
        if (headLine == null)
            headLine = Res.get(""filterWindow.headline"");

        width = 1000;

        createGridPane();

        scrollPane = new ScrollPane();
        scrollPane.setContent(gridPane);
        scrollPane.setFitToWidth(true);
        scrollPane.setFitToHeight(true);
        scrollPane.setMaxHeight(700);
        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);

        addHeadLine();
        addContent();
        applyStyles();
        display();
    }

    @Override
    protected void setupKeyHandler(Scene scene) {
        if (!hideCloseButton) {
            scene.setOnKeyPressed(e -> {
                if (e.getCode() == KeyCode.ESCAPE) {
                    e.consume();
                    doClose();
                }
            });
        }
    }

    private void addContent() {
        gridPane.getColumnConstraints().remove(1);
        gridPane.getColumnConstraints().get(0).setHalignment(HPos.LEFT);

        InputTextField keyTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""shared.unlock""), 10);
        if (useDevPrivilegeKeys) {
            keyTF.setText(DevEnv.DEV_PRIVILEGE_PRIV_KEY);
        }

        InputTextField offerIdsTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.offers""));
        InputTextField bannedFromTradingTF = addTopLabelInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.onions"")).second;
        InputTextField bannedFromNetworkTF = addTopLabelInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.bannedFromNetwork"")).second;
        bannedFromTradingTF.setPromptText(""E.g. zqnzx6o3nifef5df.onion:9999""); // Do not translate
        InputTextField paymentAccountFilterTF = addTopLabelInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.accounts"")).second;
        GridPane.setHalignment(paymentAccountFilterTF, HPos.RIGHT);
        paymentAccountFilterTF.setPromptText(""E.g. PERFECT_MONEY|getAccountNr|12345""); // Do not translate
        InputTextField bannedCurrenciesTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.bannedCurrencies""));
        InputTextField bannedPaymentMethodsTF = addTopLabelInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.bannedPaymentMethods"")).second;
        bannedPaymentMethodsTF.setPromptText(""E.g. PERFECT_MONEY""); // Do not translate
        InputTextField bannedAccountWitnessSignerPubKeysTF = addTopLabelInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.bannedAccountWitnessSignerPubKeys"")).second;
        bannedAccountWitnessSignerPubKeysTF.setPromptText(""E.g. 7f66117aa084e5a2c54fe17d29dd1fee2b241257""); // Do not translate
        InputTextField arbitratorsTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.arbitrators""));
        InputTextField mediatorsTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.mediators""));
        InputTextField refundAgentsTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.refundAgents""));
        InputTextField btcFeeReceiverAddressesTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.btcFeeReceiverAddresses""));
        InputTextField seedNodesTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.seedNode""));
        InputTextField priceRelayNodesTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.priceRelayNode""));
        InputTextField btcNodesTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.btcNode""));
        CheckBox preventPublicBtcNetworkCheckBox = addLabelCheckBox(gridPane, ++rowIndex,
                Res.get(""filterWindow.preventPublicBtcNetwork""));
        CheckBox disableDaoCheckBox = addLabelCheckBox(gridPane, ++rowIndex,
                Res.get(""filterWindow.disableDao""));
        CheckBox disableAutoConfCheckBox = addLabelCheckBox(gridPane, ++rowIndex,
                Res.get(""filterWindow.disableAutoConf""));
        InputTextField disableDaoBelowVersionTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.disableDaoBelowVersion""));
        InputTextField disableTradeBelowVersionTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.disableTradeBelowVersion""));
        InputTextField bannedPrivilegedDevPubKeysTF = addTopLabelInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.bannedPrivilegedDevPubKeys"")).second;
        InputTextField autoConfExplorersTF = addTopLabelInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.autoConfExplorers"")).second;
        CheckBox disableMempoolValidationCheckBox = addLabelCheckBox(gridPane, ++rowIndex,
                Res.get(""filterWindow.disableMempoolValidation""));
        CheckBox disableApiCheckBox = addLabelCheckBox(gridPane, ++rowIndex,
                Res.get(""filterWindow.disableApi""));
        CheckBox disablePowMessage = addLabelCheckBox(gridPane, ++rowIndex,
                Res.get(""filterWindow.disablePowMessage""));
        InputTextField powDifficultyTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.powDifficulty""));
        powDifficultyTF.setText(""0.0"");
        InputTextField enabledPowVersionsTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.enabledPowVersions""));
        InputTextField makerFeeBtcTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.makerFeeBtc""));
        InputTextField takerFeeBtcTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.takerFeeBtc""));
        InputTextField makerFeeBsqTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.makerFeeBsq""));
        InputTextField takerFeeBsqTF = addInputTextField(gridPane, ++rowIndex,
                Res.get(""filterWindow.takerFeeBsq""));

        Filter filter = filterManager.getDevFilter();
        if (filter != null) {
            setupFieldFromList(offerIdsTF, filter.getBannedOfferIds());
            setupFieldFromList(bannedFromTradingTF, filter.getNodeAddressesBannedFromTrading());
            setupFieldFromList(bannedFromNetworkTF, filter.getNodeAddressesBannedFromNetwork());
            setupFieldFromPaymentAccountFiltersList(paymentAccountFilterTF, filter.getBannedPaymentAccounts());
            setupFieldFromList(bannedCurrenciesTF, filter.getBannedCurrencies());
            setupFieldFromList(bannedPaymentMethodsTF, filter.getBannedPaymentMethods());
            setupFieldFromList(bannedAccountWitnessSignerPubKeysTF, filter.getBannedAccountWitnessSignerPubKeys());
            setupFieldFromList(arbitratorsTF, filter.getArbitrators());
            setupFieldFromList(mediatorsTF, filter.getMediators());
            setupFieldFromList(refundAgentsTF, filter.getRefundAgents());
            setupFieldFromList(btcFeeReceiverAddressesTF, filter.getBtcFeeReceiverAddresses());
            setupFieldFromList(seedNodesTF, filter.getSeedNodes());
            setupFieldFromList(priceRelayNodesTF, filter.getPriceRelayNodes());
            setupFieldFromList(btcNodesTF, filter.getBtcNodes());
            setupFieldFromList(bannedPrivilegedDevPubKeysTF, filter.getBannedPrivilegedDevPubKeys());
            setupFieldFromList(autoConfExplorersTF, filter.getBannedAutoConfExplorers());
            setupFieldFromList(enabledPowVersionsTF, filter.getEnabledPowVersions());

            preventPublicBtcNetworkCheckBox.setSelected(filter.isPreventPublicBtcNetwork());
            disableDaoCheckBox.setSelected(filter.isDisableDao());
            disableAutoConfCheckBox.setSelected(filter.isDisableAutoConf());
            disableDaoBelowVersionTF.setText(filter.getDisableDaoBelowVersion());
            disableTradeBelowVersionTF.setText(filter.getDisableTradeBelowVersion());
            disableMempoolValidationCheckBox.setSelected(filter.isDisableMempoolValidation());
            disableApiCheckBox.setSelected(filter.isDisableApi());
            disablePowMessage.setSelected(filter.isDisablePowMessage());
            powDifficultyTF.setText(String.valueOf(filter.getPowDifficulty()));

            makerFeeBtcTF.setText(btcFormatter.formatCoin(Coin.valueOf(filter.getMakerFeeBtc())));
            takerFeeBtcTF.setText(btcFormatter.formatCoin(Coin.valueOf(filter.getTakerFeeBtc())));
            makerFeeBsqTF.setText(bsqFormatter.formatBSQSatoshis(filter.getMakerFeeBsq()));
            takerFeeBsqTF.setText(bsqFormatter.formatBSQSatoshis(filter.getTakerFeeBsq()));
        }

        Button removeFilterMessageButton = new AutoTooltipButton(Res.get(""filterWindow.remove""));
        removeFilterMessageButton.setDisable(filterManager.getDevFilter() == null);

        Button sendButton = new AutoTooltipButton(Res.get(""filterWindow.add""));
        sendButton.setOnAction(e -> {
            String privKeyString = keyTF.getText();
            if (filterManager.canAddDevFilter(privKeyString)) {
                String signerPubKeyAsHex = filterManager.getSignerPubKeyAsHex(privKeyString);
                Filter newFilter = new Filter(
                        readAsList(offerIdsTF),
                        readAsList(bannedFromTradingTF),
                        readAsPaymentAccountFiltersList(paymentAccountFilterTF),
                        readAsList(bannedCurrenciesTF),
                        readAsList(bannedPaymentMethodsTF),
                        readAsList(arbitratorsTF),
                        readAsList(seedNodesTF),
                        readAsList(priceRelayNodesTF),
                        preventPublicBtcNetworkCheckBox.isSelected(),
                        readAsList(btcNodesTF),
                        disableDaoCheckBox.isSelected(),
                        disableDaoBelowVersionTF.getText(),
                        disableTradeBelowVersionTF.getText(),
                        readAsList(mediatorsTF),
                        readAsList(refundAgentsTF),
                        readAsList(bannedAccountWitnessSignerPubKeysTF),
                        readAsList(btcFeeReceiverAddressesTF),
                        filterManager.getOwnerPubKey(),
                        signerPubKeyAsHex,
                        readAsList(bannedPrivilegedDevPubKeysTF),
                        disableAutoConfCheckBox.isSelected(),
                        readAsList(autoConfExplorersTF),
                        new HashSet<>(readAsList(bannedFromNetworkTF)),
                        disableMempoolValidationCheckBox.isSelected(),
                        disableApiCheckBox.isSelected(),
                        disablePowMessage.isSelected(),
                        Double.parseDouble(powDifficultyTF.getText()),
                        readAsList(enabledPowVersionsTF).stream().map(Integer::parseInt).collect(Collectors.toList()),
                        ParsingUtils.parseToCoin(makerFeeBtcTF.getText(), btcFormatter).value,
                        ParsingUtils.parseToCoin(takerFeeBtcTF.getText(), btcFormatter).value,
                        ParsingUtils.parseToCoin(makerFeeBsqTF.getText(), bsqFormatter).value,
                        ParsingUtils.parseToCoin(takerFeeBsqTF.getText(), bsqFormatter).value
                );

                // We remove first the old filter
                // We delay a bit with adding as it seems that the instant add/remove calls lead to issues that the
                // remove msg was rejected (P2P storage should handle it but seems there are edge cases where its not
                // working as expected)
                if (filterManager.canRemoveDevFilter(privKeyString)) {
                    filterManager.removeDevFilter(privKeyString);
                    if (DevEnv.isDevMode()) {
                        addDevFilter(removeFilterMessageButton, privKeyString, newFilter);
                    } else {
                        UserThread.runAfter(() -> addDevFilter(removeFilterMessageButton, privKeyString, newFilter), 5);
                    }
                } else {
                    addDevFilter(removeFilterMessageButton, privKeyString, newFilter);
                }
            } else {
                new Popup().warning(Res.get(""shared.invalidKey"")).onClose(this::blurAgain).show();
            }
        });

        removeFilterMessageButton.setOnAction(e -> {
            String privKeyString = keyTF.getText();
            if (filterManager.canRemoveDevFilter(privKeyString)) {
                filterManager.removeDevFilter(privKeyString);
                hide();
            } else {
                new Popup().warning(Res.get(""shared.invalidKey"")).onClose(this::blurAgain).show();
            }
        });

        closeButton = new AutoTooltipButton(Res.get(""shared.close""));
        closeButton.setOnAction(e -> {
            hide();
            closeHandlerOptional.ifPresent(Runnable::run);
        });

        HBox hBox = new HBox();
        hBox.setSpacing(10);
        GridPane.setRowIndex(hBox, ++rowIndex);
        hBox.getChildren().addAll(sendButton, removeFilterMessageButton, closeButton);
        gridPane.getChildren().add(hBox);
        GridPane.setMargin(hBox, new Insets(10, 0, 0, 0));
    }

    private void addDevFilter(Button removeFilterMessageButton, String privKeyString, Filter newFilter) {
        filterManager.addDevFilter(newFilter, privKeyString);
        removeFilterMessageButton.setDisable(filterManager.getDevFilter() == null);
        hide();
    }

    private void setupFieldFromList(InputTextField field, Collection<?> values) {
        if (values != null) {
            field.setText(Joiner.on("", "").join(values));
        }
    }

    private void setupFieldFromPaymentAccountFiltersList(InputTextField field, List<PaymentAccountFilter> values) {
        if (values != null) {
            StringBuilder sb = new StringBuilder();
            values.forEach(e -> {
                if (e != null && e.getPaymentMethodId() != null) {
                    sb
                            .append(e.getPaymentMethodId())
                            .append(""|"")
                            .append(e.getGetMethodName())
                            .append(""|"")
                            .append(e.getValue())
                            .append("", "");
                }
            });
            field.setText(sb.toString());
        }
    }

    private List<String> readAsList(InputTextField field) {
        return Splitter.on(',').trimResults().omitEmptyStrings().splitToList(field.getText());
    }

    private List<PaymentAccountFilter> readAsPaymentAccountFiltersList(InputTextField field) {
        return readAsList(field)
                .stream().map(item -> {
                    String[] list = item.split(""\\|"");
                    if (list.length == 3)
                        return new PaymentAccountFilter(list[0], list[1], list[2]);
                    else
                        return new PaymentAccountFilter("""", """", """");
                })
                .collect(Collectors.toList());
    }
}",1,777 587 2000 650 2001 60 2000 62 123 773 657 2002 2003 59 773 657 2004 2005 59 773 657 2006 2007 59 773 657 570 2008 59 773 2009 2010 59 64 2011 777 2000 40 2002 2003 44 2004 2005 44 64 2012 40 2013 46 2014 41 2006 2007 44 64 2012 40 2015 46 2016 41 570 2008 41 123 823 46 2003 61 2003 59 823 46 2005 61 2005 59 823 46 2007 61 2007 59 823 46 2008 61 2008 59 2017 61 2018 46 2019 59 125 64 2020 775 2021 2022 40 41 123 792 2010 59 125 777 865 2023 40 41 123 688 40 2024 323 2025 41 2024 61 2026 46 2027 40 362 41 59 2028 61 1504 59 2029 40 41 59 2010 61 744 2009 40 41 59 2010 46 2030 40 2031 41 59 2010 46 2032 40 2033 41 59 2010 46 2034 40 2033 41 59 2010 46 2035 40 1504 41 59 2010 46 2036 40 2009 46 2037 46 2038 41 59 2039 40 41 59 2040 40 41 59 2041 40 41 59 2042 40 41 59 125 64 2020 775 865 2043 40 2044 2045 41 123 688 40 33 2046 41 123 2045 46 2047 40 2048 45 62 123 688 40 2048 46 2049 40 41 323 2050 46 2051 41 123 2048 46 2052 40 41 59 2053 40 41 59 125 125 41 59 125 125 773 865 2054 40 41 123 2055 46 2056 40 41 46 2057 40 1501 41 59 2055 46 2056 40 41 46 2058 40 1500 41 46 2059 40 2060 46 2061 41 59 2062 2063 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 44 1502 41 59 688 40 2008 41 123 2063 46 2067 40 2068 46 2069 41 59 125 2062 2070 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2071 61 2072 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 46 2073 59 2062 2074 61 2072 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 46 2073 59 2071 46 2075 40 362 41 59 330 2062 2076 61 2072 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 46 2073 59 2077 46 2059 40 2076 44 2060 46 2078 41 59 2076 46 2075 40 362 41 59 330 2062 2079 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2080 61 2072 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 46 2073 59 2080 46 2075 40 362 41 59 330 2062 2081 61 2072 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 46 2073 59 2081 46 2075 40 362 41 59 330 2062 2082 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2083 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2084 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2085 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2086 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2087 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2088 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2089 2090 61 2091 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2089 2092 61 2091 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2089 2093 61 2091 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2094 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2095 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2096 61 2072 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 46 2073 59 2062 2097 61 2072 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 46 2073 59 2089 2098 61 2091 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2089 2099 61 2091 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2089 2100 61 2091 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2101 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2101 46 2102 40 362 41 59 2062 2103 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2104 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2105 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2106 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2062 2107 61 2064 40 2055 44 349 2065 44 2066 46 2058 40 362 41 41 59 2108 2109 61 2003 46 2110 40 41 59 688 40 2109 340 2111 41 123 2112 40 2070 44 2109 46 2113 40 41 41 59 2112 40 2071 44 2109 46 2114 40 41 41 59 2112 40 2074 44 2109 46 2115 40 41 41 59 2116 40 2076 44 2109 46 2117 40 41 41 59 2112 40 2079 44 2109 46 2118 40 41 41 59 2112 40 2080 44 2109 46 2119 40 41 41 59 2112 40 2081 44 2109 46 2120 40 41 41 59 2112 40 2082 44 2109 46 2121 40 41 41 59 2112 40 2083 44 2109 46 2122 40 41 41 59 2112 40 2084 44 2109 46 2123 40 41 41 59 2112 40 2085 44 2109 46 2124 40 41 41 59 2112 40 2086 44 2109 46 2125 40 41 41 59 2112 40 2087 44 2109 46 2126 40 41 41 59 2112 40 2088 44 2109 46 2127 40 41 41 59 2112 40 2096 44 2109 46 2128 40 41 41 59 2112 40 2097 44 2109 46 2129 40 41 41 59 2112 40 2103 44 2109 46 2130 40 41 41 59 2090 46 2131 40 2109 46 2132 40 41 41 59 2092 46 2131 40 2109 46 2133 40 41 41 59 2093 46 2131 40 2109 46 2134 40 41 41 59 2094 46 2102 40 2109 46 2135 40 41 41 59 2095 46 2102 40 2109 46 2136 40 41 41 59 2098 46 2131 40 2109 46 2137 40 41 41 59 2099 46 2131 40 2109 46 2138 40 41 41 59 2100 46 2131 40 2109 46 2139 40 41 41 59 2101 46 2102 40 2140 46 2141 40 2109 46 2142 40 41 41 41 59 2104 46 2102 40 2007 46 2143 40 2144 46 2141 40 2109 46 2145 40 41 41 41 41 59 2105 46 2102 40 2007 46 2143 40 2144 46 2141 40 2109 46 2146 40 41 41 41 41 59 2106 46 2102 40 2005 46 2147 40 2109 46 2148 40 41 41 41 59 2107 46 2102 40 2005 46 2147 40 2109 46 2149 40 41 41 41 59 125 2150 2151 61 744 2152 40 2066 46 2058 40 362 41 41 59 2151 46 2153 40 2003 46 2110 40 41 323 2111 41 59 2150 2154 61 744 2152 40 2066 46 2058 40 362 41 41 59 2154 46 2155 40 2156 45 62 123 2157 2158 61 2063 46 2159 40 41 59 688 40 2003 46 2160 40 2158 41 41 123 2157 2161 61 2003 46 2162 40 2158 41 59 2108 2163 61 744 2108 40 2164 40 2070 41 44 2164 40 2071 41 44 2165 40 2076 41 44 2164 40 2079 41 44 2164 40 2080 41 44 2164 40 2082 41 44 2164 40 2086 41 44 2164 40 2087 41 44 2090 46 2166 40 41 44 2164 40 2088 41 44 2092 46 2166 40 41 44 2094 46 2159 40 41 44 2095 46 2159 40 41 44 2164 40 2083 41 44 2164 40 2084 41 44 2164 40 2081 41 44 2164 40 2085 41 44 2003 46 2167 40 41 44 2161 44 2164 40 2096 41 44 2093 46 2166 40 41 44 2164 40 2097 41 44 744 2168 60 62 40 2164 40 2074 41 41 44 2098 46 2166 40 41 44 2099 46 2166 40 41 44 2100 46 2166 40 41 44 2169 46 2170 40 2101 46 2159 40 41 41 44 2164 40 2103 41 46 2171 40 41 46 2172 40 2173 58 58 2174 41 46 2175 40 2176 46 2177 40 41 41 44 2178 46 2179 40 2104 46 2159 40 41 44 2007 41 46 2180 44 2178 46 2179 40 2105 46 2159 40 41 44 2007 41 46 2180 44 2178 46 2179 40 2106 46 2159 40 41 44 2005 41 46 2180 44 2178 46 2179 40 2107 46 2159 40 41 44 2005 41 46 2180 41 59 330 330 330 330 688 40 2003 46 2181 40 2158 41 41 123 2003 46 2182 40 2158 41 59 688 40 2183 46 2184 40 41 41 123 2185 40 2151 44 2158 44 2163 41 59 125 630 123 2186 46 2187 40 40 41 45 62 2188 40 2151 44 2158 44 2163 41 44 1502 41 59 125 125 630 123 2189 40 2151 44 2158 44 2163 41 59 125 125 630 123 744 2190 40 41 46 2191 40 2066 46 2058 40 362 41 41 46 2192 40 823 58 58 2193 41 46 2023 40 41 59 125 125 41 59 2151 46 2155 40 2156 45 62 123 2194 2195 61 2063 46 2196 40 41 59 688 40 2003 46 2197 40 2195 41 41 123 2003 46 2198 40 2195 41 59 2199 40 41 59 125 630 123 744 2200 40 41 46 2201 40 2066 46 2058 40 362 41 41 46 2202 40 823 58 58 2203 41 46 2023 40 41 59 125 125 41 59 2204 61 744 2152 40 2066 46 2058 40 362 41 41 59 2204 46 2155 40 2156 45 62 123 2205 40 41 59 2206 46 2207 40 2208 58 58 2209 41 59 125 41 59 2210 2211 61 744 2210 40 41 59 2211 46 2212 40 1502 41 59 2077 46 2213 40 2211 44 349 2065 41 59 2211 46 2214 40 41 46 2215 40 2154 44 2151 44 2204 41 59 2055 46 2214 40 41 46 2216 40 2211 41 59 2077 46 2217 40 2211 44 744 2218 40 1502 44 1500 44 1500 44 1500 41 41 59 125 773 865 2219 40 2220 2221 44 2222 2223 44 2224 2225 41 123 2003 46 2219 40 2225 44 2223 41 59 2221 46 2226 40 2003 46 2227 40 41 323 2228 41 59 2229 40 41 59 125 773 865 2230 40 2231 2232 44 2233 60 63 62 2234 41 123 688 40 2234 340 2235 41 123 2232 46 2236 40 2237 46 2238 40 362 41 46 2239 40 2234 41 41 59 125 125 773 865 2240 40 2231 2232 44 2241 60 2242 62 2234 41 123 688 40 2234 340 2243 41 123 2244 2245 61 744 2244 40 41 59 2234 46 2246 40 2247 45 62 123 688 40 2247 340 2243 307 2247 46 2248 40 41 340 2243 41 123 2245 46 2249 40 2247 46 2248 40 41 41 46 2249 40 362 41 46 2249 40 2247 46 2250 40 41 41 46 2249 40 362 41 46 2249 40 2247 46 2251 40 41 41 46 2249 40 362 41 59 125 125 41 59 2232 46 2252 40 2245 46 2253 40 41 41 59 125 125 773 2241 60 2222 62 2254 40 2231 2232 41 123 792 2255 46 2256 40 314 41 46 2257 40 41 46 2258 40 41 46 2259 40 2232 46 2260 40 41 41 59 125 773 2241 60 2242 62 2261 40 2231 2232 41 123 792 2254 40 2232 41 46 2262 40 41 46 2263 40 2264 45 62 123 2222 91 93 2265 61 2264 46 2266 40 362 41 59 688 40 2265 46 2267 323 1502 41 792 744 2242 40 2265 91 1500 93 44 2265 91 1501 93 44 2265 91 1502 93 41 59 630 792 744 2242 40 362 44 362 44 362 41 59 125 41 46 2268 40 2269 46 2270 40 41 41 59 125 125 ,"{'AvgLine': 28, 'CountLine': 302, 'CountStmt': 162, 'MaxNesting': 3, 'AvgLineCode': 26, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 146, 'MaxEssential': 1, 'SumEssential': 16, 'AvgCyclomatic': 1, 'CountLineCode': 273, 'CountStmtDecl': 57, 'MaxCyclomatic': 3, 'SumCyclomatic': 29, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 25, 'CountSemicolon': 138, 'CountDeclMethod': 10, 'CountLineCodeExe': 229, 'CountLineComment': 8, 'CountClassCoupled': 38, 'CountClassDerived': 0, 'CountLineCodeDecl': 95, 'CountDeclMethodAll': 79, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.03', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 30, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 78, 'SumCyclomaticModified': 29, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 6, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 38, 'CountDeclInstanceVariable': 5, 'PercentLackOfCohesionModified': 70}"
4411,Java,"@FxmlView
public class BsqTxView extends ActivatableView<GridPane, Void> implements BsqBalanceListener, DaoStateListener,
        BsqWalletService.WalletTransactionsChangeListener {

    private TableView<BsqTxListItem> tableView;
    private AutoTooltipButton exportButton;

    private final DaoFacade daoFacade;
    private final DaoStateService daoStateService;
    private final BsqFormatter bsqFormatter;
    private final BsqWalletService bsqWalletService;
    private final BtcWalletService btcWalletService;
    private final BsqBalanceUtil bsqBalanceUtil;
    private final Preferences preferences;
    private final TradableRepository tradableRepository;
    private final BsqTradeDetailsWindow bsqTradeDetailsWindow;

    private final ObservableList<BsqTxListItem> observableList = FXCollections.observableArrayList();
    // Need to be DoubleProperty as we pass it as reference
    private final SortedList<BsqTxListItem> sortedList = new SortedList<>(observableList);
    private int gridRow = 0;
    private Label chainHeightLabel;
    private ProgressBar chainSyncIndicator;
    private ChangeListener<Number> walletChainHeightListener;
    private Timer updateAnyChainHeightTimer;
    private int walletChainHeight;
    private int blockHeightBeforeProcessing;
    private int missingBlocks;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    private BsqTxView(DaoFacade daoFacade,
                      DaoStateService daoStateService,
                      BsqWalletService bsqWalletService,
                      Preferences preferences,
                      BtcWalletService btcWalletService,
                      BsqBalanceUtil bsqBalanceUtil,
                      BsqFormatter bsqFormatter,
                      TradableRepository tradableRepository,
                      BsqTradeDetailsWindow bsqTradeDetailsWindow) {
        this.daoFacade = daoFacade;
        this.daoStateService = daoStateService;
        this.bsqFormatter = bsqFormatter;
        this.bsqWalletService = bsqWalletService;
        this.preferences = preferences;
        this.btcWalletService = btcWalletService;
        this.bsqBalanceUtil = bsqBalanceUtil;
        this.tradableRepository = tradableRepository;
        this.bsqTradeDetailsWindow = bsqTradeDetailsWindow;
    }

    @Override
    public void initialize() {
        gridRow = bsqBalanceUtil.addGroup(root, gridRow);

        tableView = new TableView<>();
        tableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);

        addDateColumn();
        addTxIdColumn();
        addInformationColumn();
        addAmountColumn();
        addConfidenceColumn();
        addTxTypeColumn();

        chainSyncIndicator = new JFXProgressBar();
        chainSyncIndicator.setPrefWidth(120);
        if (DevEnv.isDaoActivated())
            chainSyncIndicator.setProgress(-1);
        else
            chainSyncIndicator.setProgress(0);
        chainSyncIndicator.setPadding(new Insets(-6, 0, -10, 5));

        chainHeightLabel = FormBuilder.addLabel(root, ++gridRow, """");
        chainHeightLabel.setId(""num-offers"");
        chainHeightLabel.setPadding(new Insets(-5, 0, -10, 5));
        exportButton = new AutoTooltipButton();
        exportButton.updateText(Res.get(""shared.exportCSV""));

        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);
        HBox hBox = new HBox();
        hBox.setSpacing(10);
        hBox.getChildren().addAll(chainHeightLabel, chainSyncIndicator, spacer, exportButton);

        VBox vBox = new VBox();
        vBox.setSpacing(10);
        GridPane.setVgrow(vBox, Priority.ALWAYS);
        GridPane.setRowIndex(vBox, ++gridRow);
        GridPane.setColumnSpan(vBox, 3);
        GridPane.setRowSpan(vBox, 2);
        GridPane.setMargin(vBox, new Insets(40, -10, 5, -10));
        vBox.getChildren().addAll(tableView, hBox);
        VBox.setVgrow(tableView, Priority.ALWAYS);
        root.getChildren().add(vBox);

        walletChainHeightListener = (observable, oldValue, newValue) -> {
            walletChainHeight = bsqWalletService.getBestChainHeight();
            onUpdateAnyChainHeight();
        };
    }

    @Override
    protected void activate() {
        bsqBalanceUtil.activate();
        bsqWalletService.addWalletTransactionsChangeListener(this);
        bsqWalletService.addBsqBalanceListener(this);
        btcWalletService.getChainHeightProperty().addListener(walletChainHeightListener);

        sortedList.comparatorProperty().bind(tableView.comparatorProperty());
        tableView.setItems(sortedList);

        daoFacade.addBsqStateListener(this);

        updateList();

        walletChainHeight = bsqWalletService.getBestChainHeight();
        blockHeightBeforeProcessing = daoFacade.getChainHeight();
        missingBlocks = walletChainHeight - blockHeightBeforeProcessing;
        if (!daoStateService.isParseBlockChainComplete()) {
            updateAnyChainHeightTimer = UserThread.runPeriodically(this::onUpdateAnyChainHeight, 100, TimeUnit.MILLISECONDS);
        }
        onUpdateAnyChainHeight();

        exportButton.setOnAction(event -> {
            CSVEntryConverter<BsqTxListItem> headerConverter = item -> {
                ObservableList<TableColumn<BsqTxListItem, ?>> tableColumns = tableView.getColumns();
                String[] columns = new String[8];
                columns[0] = ((AutoTooltipLabel) tableColumns.get(0).getGraphic()).getText();
                columns[1] = ((AutoTooltipLabel) tableColumns.get(1).getGraphic()).getText();
                // Table col 2 (information is split up into 3 different ones for cvs)
                columns[2] = Res.get(""shared.details"");
                columns[3] = Res.get(""shared.address"");
                columns[4] = Res.get(""funds.tx.receivedFunds"");
                columns[5] = ((AutoTooltipLabel) tableColumns.get(3).getGraphic()).getText();
                columns[6] = ((AutoTooltipLabel) tableColumns.get(4).getGraphic()).getText();
                columns[7] = ((AutoTooltipLabel) tableColumns.get(5).getGraphic()).getText();
                return columns;
            };
            CSVEntryConverter<BsqTxListItem> contentConverter = item -> {
                String[] columns = new String[8];
                columns[0] = item.getDateAsString();
                columns[1] = item.getTxId();
                columns[2] = item.getDirection();
                columns[3] = item.getAddress();
                columns[4] = String.valueOf(item.isReceived());
                columns[5] = item.getAmountAsString();
                columns[6] = String.valueOf(item.getConfirmations());
                columns[7] = item.getTxType().name();
                return columns;
            };

            GUIUtil.exportCSV(""BSQ_transactions.csv"", headerConverter, contentConverter,
                    new BsqTxListItem(), sortedList, (Stage) root.getScene().getWindow());
        });
    }

    @Override
    protected void deactivate() {
        bsqBalanceUtil.deactivate();
        sortedList.comparatorProperty().unbind();
        bsqWalletService.removeWalletTransactionsChangeListener(this);
        bsqWalletService.removeBsqBalanceListener(this);
        btcWalletService.getChainHeightProperty().removeListener(walletChainHeightListener);
        daoFacade.removeBsqStateListener(this);
        exportButton.setOnAction(null);

        observableList.forEach(BsqTxListItem::cleanup);

        if (updateAnyChainHeightTimer != null) {
            updateAnyChainHeightTimer.stop();
            updateAnyChainHeightTimer = null;
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // BsqBalanceListener
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void onUpdateBalances(Coin availableBalance,
                                 Coin availableNonBsqBalance,
                                 Coin unverifiedBalance,
                                 Coin unconfirmedChangeBalance,
                                 Coin lockedForVotingBalance,
                                 Coin lockedInBondsBalance,
                                 Coin unlockingBondsBalance) {
        updateList();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // DaoStateListener
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void onParseBlockCompleteAfterBatchProcessing(Block block) {
        onUpdateAnyChainHeight();
    }

    @Override
    public void onParseBlockChainComplete() {
        if (updateAnyChainHeightTimer != null) {
            updateAnyChainHeightTimer.stop();
            updateAnyChainHeightTimer = null;
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // BsqWalletService.WalletTransactionsChangeListener
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void onWalletTransactionsChange() {
        updateList();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Private
    ///////////////////////////////////////////////////////////////////////////////////////////

    // If chain height from wallet or from the BSQ blockchain parsing changed we update our state.
    private void onUpdateAnyChainHeight() {
        int currentBlockHeight = daoFacade.getChainHeight();
        if (walletChainHeight > 0) {
            int processedBlocks = currentBlockHeight - blockHeightBeforeProcessing;
            double progress = (double) processedBlocks / (double) missingBlocks;
            boolean synced = walletChainHeight == currentBlockHeight;
            chainSyncIndicator.setVisible(!synced);
            chainSyncIndicator.setManaged(!synced);
            if (synced) {
                chainHeightLabel.setText(Res.get(""dao.wallet.chainHeightSynced"", currentBlockHeight));
            } else {
                chainSyncIndicator.setProgress(progress);
                if (walletChainHeight > currentBlockHeight) {
                    // Normally we get the latest block height from BitcoinJ as the target height,
                    // and we request BSQ blocks from seed nodes up to latest block
                    chainHeightLabel.setText(Res.get(""dao.wallet.chainHeightSyncing"",
                            currentBlockHeight,
                            walletChainHeight));
                } else {
                    // Our wallet chain height is behind our BSQ chain height. That can be the case at SPV resync or if
                    // we updated manually our DaoStateStore with a newer version. We do not want to show sync state
                    // as we do not know at that moment if we are missing blocks. Once Btc wallet has synced we will
                    // trigger a check and request more blocks in case we are the lite node.
                    chainSyncIndicator.setVisible(false);
                    chainSyncIndicator.setManaged(false);
                    chainHeightLabel.setText(Res.get(""dao.wallet.chainHeightSynced"", currentBlockHeight));
                }
            }
        } else {
            chainHeightLabel.setText(Res.get(""dao.wallet.chainHeightSyncing"",
                    currentBlockHeight,
                    walletChainHeight));
        }
        updateList();
    }

    private void updateList() {
        observableList.forEach(BsqTxListItem::cleanup);

        List<Transaction> walletTransactions = bsqWalletService.getClonedWalletTransactions();
        List<BsqTxListItem> items = walletTransactions.stream()
                .map(transaction -> {
                    return new BsqTxListItem(transaction,
                            bsqWalletService,
                            btcWalletService,
                            daoFacade,
                            // Use tx.getIncludedInBestChainAt() when available, otherwise use tx.getUpdateTime()
                            transaction.getIncludedInBestChainAt() != null ? transaction.getIncludedInBestChainAt() : transaction.getUpdateTime(),
                            bsqFormatter,
                            tradableRepository);
                })
                .collect(Collectors.toList());
        observableList.setAll(items);
    }

    private boolean isValidType(TxType txType) {
        switch (txType) {
            case UNDEFINED:
            case UNDEFINED_TX_TYPE:
            case UNVERIFIED:
            case INVALID:
                return false;
            case GENESIS:
            case TRANSFER_BSQ:
            case PAY_TRADE_FEE:
            case PROPOSAL:
            case COMPENSATION_REQUEST:
            case REIMBURSEMENT_REQUEST:
            case BLIND_VOTE:
            case VOTE_REVEAL:
            case LOCKUP:
            case UNLOCK:
            case ASSET_LISTING_FEE:
            case PROOF_OF_BURN:
                return true;
            case IRREGULAR:
                return false;
            default:
                return false;
        }
    }

    private void addDateColumn() {
        TableColumn<BsqTxListItem, BsqTxListItem> column = new AutoTooltipTableColumn<>(Res.get(""shared.dateTime""));
        column.setCellValueFactory(item -> new ReadOnlyObjectWrapper<>(item.getValue()));
        column.setMinWidth(180);
        column.setMaxWidth(column.getMinWidth() + 20);
        column.getStyleClass().add(""first-column"");

        column.setCellFactory(
                new Callback<>() {

                    @Override
                    public TableCell<BsqTxListItem, BsqTxListItem> call(TableColumn<BsqTxListItem,
                            BsqTxListItem> column) {
                        return new TableCell<>() {

                            @Override
                            public void updateItem(final BsqTxListItem item, boolean empty) {
                                super.updateItem(item, empty);

                                if (item != null && !empty) {
                                    setText(item.getDateAsString());
                                } else {
                                    setText("""");
                                }
                            }
                        };
                    }
                });
        tableView.getColumns().add(column);
        column.setComparator(Comparator.comparing(BsqTxListItem::getDate));
        column.setSortType(TableColumn.SortType.DESCENDING);
        tableView.getSortOrder().add(column);
    }

    private void addTxIdColumn() {
        TableColumn<BsqTxListItem, BsqTxListItem> column = new AutoTooltipTableColumn<>(Res.get(""shared.txId""));

        column.setCellValueFactory(item -> new ReadOnlyObjectWrapper<>(item.getValue()));
        column.setMinWidth(60);
        column.setCellFactory(
                new Callback<>() {

                    @Override
                    public TableCell<BsqTxListItem, BsqTxListItem> call(TableColumn<BsqTxListItem,
                            BsqTxListItem> column) {
                        return new TableCell<>() {
                            private HyperlinkWithIcon hyperlinkWithIcon;

                            @Override
                            public void updateItem(final BsqTxListItem item, boolean empty) {
                                super.updateItem(item, empty);

                                //noinspection Duplicates
                                if (item != null && !empty) {
                                    String transactionId = item.getTxId();
                                    hyperlinkWithIcon = new ExternalHyperlink(transactionId);
                                    hyperlinkWithIcon.setOnAction(event -> openTxInBlockExplorer(item));
                                    hyperlinkWithIcon.setTooltip(new Tooltip(Res.get(""tooltip.openBlockchainForTx"", transactionId)));
                                    setGraphic(hyperlinkWithIcon);
                                } else {
                                    setGraphic(null);
                                    if (hyperlinkWithIcon != null)
                                        hyperlinkWithIcon.setOnAction(null);
                                }
                            }
                        };
                    }
                });
        tableView.getColumns().add(column);
    }

    private void addInformationColumn() {
        TableColumn<BsqTxListItem, BsqTxListItem> column = new AutoTooltipTableColumn<>(Res.get(""shared.details""));
        column.setCellValueFactory(item -> new ReadOnlyObjectWrapper<>(item.getValue()));
        column.setMinWidth(160);
        column.setCellFactory(
                new Callback<>() {

                    @Override
                    public TableCell<BsqTxListItem, BsqTxListItem> call(TableColumn<BsqTxListItem,
                            BsqTxListItem> column) {
                        return new TableCell<>() {

                            private AddressWithIconAndDirection field;

                            @Override
                            public void updateItem(final BsqTxListItem item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    TxType txType = item.getTxType();
                                    String labelString = Res.get(""dao.tx.type.enum."" + txType.name());
                                    Label label;
                                    if (item.getConfirmations() > 0 && isValidType(txType)) {
                                        if (item.getOptionalBsqTrade().isPresent()) {
                                            if (field != null)
                                                field.setOnAction(null);

                                            BsqSwapTrade bsqSwapTrade = item.getOptionalBsqTrade().get();
                                            String text = Res.get(""dao.tx.bsqSwapTrade"", bsqSwapTrade.getShortId());
                                            HyperlinkWithIcon hyperlinkWithIcon = new HyperlinkWithIcon(text, AwesomeIcon.INFO_SIGN);
                                            hyperlinkWithIcon.setOnAction(e -> bsqTradeDetailsWindow.show(bsqSwapTrade));
                                            hyperlinkWithIcon.setTooltip(new Tooltip(Res.get(""tooltip.openPopupForDetails"")));
                                            setGraphic(hyperlinkWithIcon);
                                        } else if (txType == TxType.COMPENSATION_REQUEST &&
                                                daoFacade.isIssuanceTx(item.getTxId(), IssuanceType.COMPENSATION)) {
                                            if (field != null)
                                                field.setOnAction(null);

                                            labelString = Res.get(""dao.tx.issuanceFromCompReq"");
                                            label = new AutoTooltipLabel(labelString);
                                            setGraphic(label);
                                        } else if (txType == TxType.REIMBURSEMENT_REQUEST &&
                                                daoFacade.isIssuanceTx(item.getTxId(), IssuanceType.REIMBURSEMENT)) {
                                            if (field != null)
                                                field.setOnAction(null);

                                            labelString = Res.get(""dao.tx.issuanceFromReimbursement"");
                                            label = new AutoTooltipLabel(labelString);
                                            setGraphic(label);
                                        } else if (item.isBurnedBsqTx() || item.getAmount().isZero()) {
                                            if (field != null)
                                                field.setOnAction(null);

                                            if (txType == TxType.TRANSFER_BSQ &&
                                                    item.getAmount().isZero() &&
                                                    item.getTxType() != TxType.UNLOCK) {
                                                labelString = Res.get(""funds.tx.direction.self"");
                                            }

                                            label = new AutoTooltipLabel(labelString);
                                            setGraphic(label);
                                        } else {
                                            // Received
                                            String addressString = item.getAddress();
                                            field = new AddressWithIconAndDirection(item.getDirection(), addressString,
                                                    item.isReceived());
                                            field.setOnAction(event -> openAddressInBlockExplorer(item));
                                            field.setTooltip(new Tooltip(Res.get(""tooltip.openBlockchainForAddress"", addressString)));
                                            setGraphic(field);
                                        }
                                    } else {
                                        if (item.isWithdrawalToBTCWallet())
                                            labelString = Res.get(""dao.tx.withdrawnFromWallet"");

                                        label = new AutoTooltipLabel(labelString);
                                        setGraphic(label);
                                    }
                                } else {
                                    setGraphic(null);
                                    if (field != null)
                                        field.setOnAction(null);
                                }
                            }
                        };
                    }
                });
        tableView.getColumns().add(column);
    }

    private void addAmountColumn() {
        TableColumn<BsqTxListItem, BsqTxListItem> column = new AutoTooltipTableColumn<>(Res.get(""shared.amountWithCur"", ""BSQ""));
        column.setMinWidth(120);
        column.setMaxWidth(column.getMinWidth());

        column.setCellValueFactory((item) -> new ReadOnlyObjectWrapper<>(item.getValue()));
        column.setCellFactory(new Callback<>() {

            @Override
            public TableCell<BsqTxListItem, BsqTxListItem> call(TableColumn<BsqTxListItem,
                    BsqTxListItem> column) {
                return new TableCell<>() {

                    @Override
                    public void updateItem(final BsqTxListItem item, boolean empty) {
                        super.updateItem(item, empty);
                        if (item != null && !empty) {
                            TxType txType = item.getTxType();

                            String bsqAmount = Res.get(""shared.na"");

                            if (item.getConfirmations() > 0) {
                                if (isValidType(txType))
                                    bsqAmount = item.getAmountAsString();
                                else if (item.isWithdrawalToBTCWallet())
                                    bsqAmount = bsqFormatter.formatBSQSatoshis(0L);
                            }

                            setText(bsqAmount);
                        } else
                            setText("""");
                    }
                };
            }
        });
        tableView.getColumns().add(column);
    }

    private void addConfidenceColumn() {
        TableColumn<BsqTxListItem, BsqTxListItem> column = new AutoTooltipTableColumn<>(Res.get(""shared.confirmations""));
        column.setMinWidth(130);
        column.setMaxWidth(column.getMinWidth());

        column.setCellValueFactory((item) -> new ReadOnlyObjectWrapper<>(item.getValue()));
        column.setCellFactory(new Callback<>() {

            @Override
            public TableCell<BsqTxListItem, BsqTxListItem> call(TableColumn<BsqTxListItem,
                    BsqTxListItem> column) {
                return new TableCell<>() {

                    @Override
                    public void updateItem(final BsqTxListItem item, boolean empty) {
                        super.updateItem(item, empty);

                        if (item != null && !empty) {
                            setGraphic(item.getTxConfidenceIndicator());
                        } else {
                            setGraphic(null);
                        }
                    }
                };
            }
        });
        tableView.getColumns().add(column);
    }

    private void addTxTypeColumn() {
        TableColumn<BsqTxListItem, BsqTxListItem> column = new AutoTooltipTableColumn<>(Res.get(""dao.wallet.tx.type""));
        column.setCellValueFactory(item -> new ReadOnlyObjectWrapper<>(item.getValue()));
        column.setMinWidth(70);
        column.setMaxWidth(column.getMinWidth());
        column.getStyleClass().add(""last-column"");
        column.setCellFactory(
                new Callback<>() {

                    @Override
                    public TableCell<BsqTxListItem, BsqTxListItem> call(TableColumn<BsqTxListItem,
                            BsqTxListItem> column) {
                        return new TableCell<>() {

                            @Override
                            public void updateItem(final BsqTxListItem item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    String style;
                                    AwesomeIcon awesomeIcon;
                                    TxType txType = item.getTxType();
                                    String toolTipText = Res.get(""dao.tx.type.enum."" + txType.name());
                                    boolean doRotate = false;
                                    switch (txType) {
                                        case UNDEFINED_TX_TYPE:
                                            awesomeIcon = AwesomeIcon.REMOVE_CIRCLE;
                                            style = ""dao-tx-type-unverified-icon"";
                                            break;
                                        case UNVERIFIED:
                                            awesomeIcon = AwesomeIcon.QUESTION_SIGN;
                                            style = ""dao-tx-type-unverified-icon"";
                                            break;
                                        case INVALID:
                                            awesomeIcon = AwesomeIcon.WARNING_SIGN;
                                            style = ""dao-tx-type-invalid-icon"";
                                            break;
                                        case GENESIS:
                                            awesomeIcon = AwesomeIcon.ROCKET;
                                            style = ""dao-tx-type-genesis-icon"";
                                            break;
                                        case TRANSFER_BSQ:
                                            if (item.getAmount().isZero()) {
                                                awesomeIcon = AwesomeIcon.RETWEET;
                                                style = ""dao-tx-type-self-icon"";
                                            } else {
                                                awesomeIcon = item.isReceived() ? AwesomeIcon.SIGNIN : AwesomeIcon.SIGNOUT;
                                                doRotate = item.isReceived();
                                                style = item.isReceived() ? ""dao-tx-type-received-funds-icon"" : ""dao-tx-type-sent-funds-icon"";
                                                toolTipText = item.isReceived() ?
                                                        Res.get(""dao.tx.type.enum.received."" + txType.name()) :
                                                        Res.get(""dao.tx.type.enum.sent."" + txType.name());
                                            }
                                            break;
                                        case PAY_TRADE_FEE:
                                            // We do not detect a BSQ swap tx. It is considered a PAY_TRADE_FEE tx
                                            // which is correct as well as it pays a trade fee.
                                            // Locally we can derive the information to distinguish a BSQ swap tx
                                            // by looking up our closed trades. Globally (like on the explorer) we do
                                            // not have the data to make that distinction.
                                            if (item.isBsqSwapTx()) {
                                                awesomeIcon = AwesomeIcon.EXCHANGE;
                                                style = ""dao-tx-type-bsq-swap-icon"";
                                                toolTipText = Res.get(""dao.tx.bsqSwapTx"");
                                            } else {
                                                awesomeIcon = AwesomeIcon.LEAF;
                                                style = ""dao-tx-type-trade-fee-icon"";
                                            }
                                            break;
                                        case PROPOSAL:
                                        case COMPENSATION_REQUEST:
                                            String txId = item.getTxId();
                                            if (daoFacade.isIssuanceTx(txId, IssuanceType.COMPENSATION)) {
                                                awesomeIcon = AwesomeIcon.MONEY;
                                                style = ""dao-tx-type-issuance-icon"";
                                                int issuanceBlockHeight = daoFacade.getIssuanceBlockHeight(txId);
                                                long blockTime = daoFacade.getBlockTime(issuanceBlockHeight);
                                                String formattedDate = DisplayUtils.formatDateTime(new Date(blockTime));
                                                toolTipText = Res.get(""dao.tx.issuanceFromCompReq.tooltip"", formattedDate);
                                            } else {
                                                awesomeIcon = AwesomeIcon.FILE_TEXT;
                                                style = ""dao-tx-type-proposal-fee-icon"";
                                            }
                                            break;
                                        case REIMBURSEMENT_REQUEST:
                                            txId = item.getTxId();
                                            if (daoFacade.isIssuanceTx(txId, IssuanceType.REIMBURSEMENT)) {
                                                awesomeIcon = AwesomeIcon.MONEY;
                                                style = ""dao-tx-type-issuance-icon"";
                                                int issuanceBlockHeight = daoFacade.getIssuanceBlockHeight(txId);
                                                long blockTime = daoFacade.getBlockTime(issuanceBlockHeight);
                                                String formattedDate = DisplayUtils.formatDateTime(new Date(blockTime));
                                                toolTipText = Res.get(""dao.tx.issuanceFromReimbursement.tooltip"", formattedDate);
                                            } else {
                                                awesomeIcon = AwesomeIcon.FILE_TEXT;
                                                style = ""dao-tx-type-proposal-fee-icon"";
                                            }
                                            break;
                                        case BLIND_VOTE:
                                            awesomeIcon = AwesomeIcon.EYE_CLOSE;
                                            style = ""dao-tx-type-vote-icon"";
                                            break;
                                        case VOTE_REVEAL:
                                            awesomeIcon = AwesomeIcon.EYE_OPEN;
                                            style = ""dao-tx-type-vote-reveal-icon"";
                                            break;
                                        case LOCKUP:
                                            awesomeIcon = AwesomeIcon.LOCK;
                                            style = ""dao-tx-type-lockup-icon"";
                                            break;
                                        case UNLOCK:
                                            awesomeIcon = AwesomeIcon.UNLOCK;
                                            style = ""dao-tx-type-unlock-icon"";
                                            break;
                                        case ASSET_LISTING_FEE:
                                            awesomeIcon = AwesomeIcon.FILE_TEXT;
                                            style = ""dao-tx-type-proposal-fee-icon"";
                                            break;
                                        case PROOF_OF_BURN:
                                            awesomeIcon = AwesomeIcon.FILE_TEXT;
                                            style = ""dao-tx-type-proposal-fee-icon"";
                                            break;
                                        case IRREGULAR:
                                            awesomeIcon = AwesomeIcon.WARNING_SIGN;
                                            style = ""dao-tx-type-invalid-icon"";
                                            break;
                                        default:
                                            awesomeIcon = AwesomeIcon.QUESTION_SIGN;
                                            style = ""dao-tx-type-unverified-icon"";
                                            break;
                                    }
                                    Label label = FormBuilder.getIcon(awesomeIcon);
                                    label.getStyleClass().addAll(""icon"", style);
                                    label.setTooltip(new Tooltip(toolTipText));
                                    if (doRotate)
                                        label.setRotate(180);
                                    setGraphic(label);
                                } else {
                                    setGraphic(null);
                                }
                            }
                        };
                    }
                });

        tableView.getColumns().add(column);
    }

    private void openTxInBlockExplorer(BsqTxListItem item) {
        if (item.getTxId() != null)
            GUIUtil.openWebPage(preferences.getBsqBlockChainExplorer().txUrl + item.getTxId(), false);
    }

    private void openAddressInBlockExplorer(BsqTxListItem item) {
        if (item.getAddress() != null) {
            GUIUtil.openWebPage(preferences.getBsqBlockChainExplorer().addressUrl + item.getAddress(), false);
        }
    }
}",1,64 2000 777 587 2001 650 2002 60 2003 44 2004 62 693 2005 44 2006 44 2007 46 2008 123 773 2009 60 2010 62 2011 59 773 2012 2013 59 773 657 2014 2015 59 773 657 2016 2017 59 773 657 2018 2019 59 773 657 2007 2020 59 773 657 2021 2022 59 773 657 2023 2024 59 773 657 2025 2026 59 773 657 2027 2028 59 773 657 2029 2030 59 773 657 2031 60 2010 62 2032 61 2033 46 2034 40 41 59 330 773 657 2035 60 2010 62 2036 61 744 2035 60 62 40 2032 41 59 773 704 2037 61 1500 59 773 2038 2039 59 773 2040 2041 59 773 2042 60 2043 62 2044 59 773 2045 2046 59 773 704 2047 59 773 704 2048 59 773 704 2049 59 331 330 331 64 2050 773 2001 40 2014 2015 44 2016 2017 44 2007 2020 44 2025 2026 44 2021 2022 44 2023 2024 44 2018 2019 44 2027 2028 44 2029 2030 41 123 823 46 2015 61 2015 59 823 46 2017 61 2017 59 823 46 2019 61 2019 59 823 46 2020 61 2020 59 823 46 2026 61 2026 59 823 46 2022 61 2022 59 823 46 2024 61 2024 59 823 46 2028 61 2028 59 823 46 2030 61 2030 59 125 64 2051 777 865 2052 40 41 123 2037 61 2024 46 2053 40 2054 44 2037 41 59 2011 61 744 2009 60 62 40 41 59 2011 46 2055 40 2009 46 2056 41 59 2057 40 41 59 2058 40 41 59 2059 40 41 59 2060 40 41 59 2061 40 41 59 2062 40 41 59 2041 61 744 2063 40 41 59 2041 46 2064 40 1504 41 59 688 40 2065 46 2066 40 41 41 2041 46 2067 40 45 1501 41 59 630 2041 46 2067 40 1500 41 59 2041 46 2068 40 744 2069 40 45 1502 44 1500 44 45 1502 44 1502 41 41 59 2039 61 2070 46 2071 40 2054 44 349 2037 44 362 41 59 2039 46 2072 40 362 41 59 2039 46 2068 40 744 2069 40 45 1502 44 1500 44 45 1502 44 1502 41 41 59 2013 61 744 2012 40 41 59 2013 46 2073 40 2074 46 2075 40 362 41 41 59 2076 2077 61 744 2076 40 41 59 2078 46 2079 40 2077 44 2080 46 2081 41 59 2078 2082 61 744 2078 40 41 59 2082 46 2083 40 1502 41 59 2082 46 2084 40 41 46 2085 40 2039 44 2041 44 2077 44 2013 41 59 2086 2087 61 744 2086 40 41 59 2087 46 2083 40 1502 41 59 2003 46 2088 40 2087 44 2080 46 2081 41 59 2003 46 2089 40 2087 44 349 2037 41 59 2003 46 2090 40 2087 44 1502 41 59 2003 46 2091 40 2087 44 1502 41 59 2003 46 2092 40 2087 44 744 2069 40 1503 44 45 1502 44 1502 44 45 1502 41 41 59 2087 46 2084 40 41 46 2085 40 2011 44 2082 41 59 2086 46 2088 40 2011 44 2080 46 2081 41 59 2054 46 2084 40 41 46 2093 40 2087 41 59 2044 61 40 2094 44 2095 44 2096 41 45 62 123 2047 61 2020 46 2097 40 41 59 2098 40 41 59 125 59 125 64 2051 775 865 2099 40 41 123 2024 46 2099 40 41 59 2020 46 2100 40 823 41 59 2020 46 2101 40 823 41 59 2022 46 2102 40 41 46 2103 40 2044 41 59 2036 46 2104 40 41 46 2105 40 2011 46 2104 40 41 41 59 2011 46 2106 40 2036 41 59 2015 46 2107 40 823 41 59 2108 40 41 59 2047 61 2020 46 2109 40 41 59 2048 61 2015 46 2110 40 41 59 2049 61 2047 45 2048 59 688 40 33 2017 46 2111 40 41 41 123 2046 61 2112 46 2113 40 823 58 58 2114 44 1503 44 2115 46 2116 41 59 125 2117 40 41 59 2013 46 2118 40 2119 45 62 123 2120 60 2010 62 2121 61 2122 45 62 123 2031 60 2123 60 2010 44 63 356 2124 61 2011 46 2125 40 41 59 2126 91 93 2127 61 744 2126 91 1502 93 59 2127 91 1500 93 61 40 40 2128 41 2124 46 2129 40 1500 41 46 2130 40 41 41 46 2131 40 41 59 2127 91 1501 93 61 40 40 2128 41 2124 46 2129 40 1501 41 46 2130 40 41 41 46 2131 40 41 59 330 2127 91 1502 93 61 2132 46 2129 40 362 41 59 2127 91 1502 93 61 2132 46 2129 40 362 41 59 2127 91 1502 93 61 2132 46 2129 40 362 41 59 2127 91 1502 93 61 40 40 2128 41 2124 46 2129 40 1502 41 46 2130 40 41 41 46 2131 40 41 59 2127 91 1502 93 61 40 40 2128 41 2124 46 2129 40 1502 41 46 2130 40 41 41 46 2131 40 41 59 2127 91 1502 93 61 40 40 2128 41 2124 46 2129 40 1502 41 46 2130 40 41 41 46 2131 40 41 59 792 2127 59 125 59 2120 60 2010 62 2133 61 2122 45 62 123 2134 91 93 2135 61 744 2134 91 1502 93 59 2135 91 1500 93 61 2122 46 2136 40 41 59 2135 91 1501 93 61 2122 46 2137 40 41 59 2135 91 1502 93 61 2122 46 2138 40 41 59 2135 91 1502 93 61 2122 46 2139 40 41 59 2135 91 1502 93 61 2134 46 2140 40 2122 46 2141 40 41 41 59 2135 91 1502 93 61 2122 46 2142 40 41 59 2135 91 1502 93 61 2134 46 2140 40 2122 46 2143 40 41 41 59 2135 91 1502 93 61 2122 46 2144 40 41 46 2145 40 41 59 792 2135 59 125 59 2146 46 2147 40 362 44 2121 44 2133 44 744 2010 40 41 44 2036 44 40 2148 41 2149 46 2150 40 41 46 2151 40 41 41 59 125 41 59 125 64 2051 775 865 2152 40 41 123 2024 46 2152 40 41 59 2036 46 2153 40 41 46 2154 40 41 59 2020 46 2155 40 823 41 59 2020 46 2156 40 823 41 59 2022 46 2157 40 41 46 2158 40 2044 41 59 2015 46 2159 40 823 41 59 2013 46 2160 40 2161 41 59 2032 46 2162 40 2010 58 58 2163 41 59 688 40 2046 340 2161 41 123 2046 46 2164 40 41 59 2046 61 2161 59 125 125 331 330 331 64 2051 777 865 2165 40 2166 2167 44 2166 2168 44 2166 2169 44 2166 2170 44 2166 2171 44 2166 2172 44 2166 2173 41 123 2174 40 41 59 125 331 330 331 64 2051 777 865 2175 40 2176 2177 41 123 2178 40 41 59 125 64 2051 777 865 2179 40 41 123 688 40 2046 340 2180 41 123 2046 46 2181 40 41 59 2046 61 2180 59 125 125 331 330 331 64 2051 777 865 2182 40 41 123 2183 40 41 59 125 331 330 331 330 773 865 2184 40 41 123 704 2185 61 2015 46 2186 40 41 59 688 40 2047 62 1500 41 123 704 2187 61 2185 45 2048 59 625 2188 61 40 625 41 2187 47 40 625 41 2049 59 570 2189 61 2047 323 2185 59 2041 46 2190 40 33 2189 41 59 2041 46 2191 40 33 2189 41 59 688 40 2189 41 123 2039 46 2192 40 2193 46 2194 40 362 44 2185 41 41 59 125 630 123 2041 46 2195 40 2188 41 59 688 40 2047 62 2185 41 123 330 330 2039 46 2196 40 2197 46 2198 40 362 44 2185 44 2047 41 41 59 125 630 123 330 330 330 330 2041 46 2190 40 2199 41 59 2041 46 2191 40 2199 41 59 2039 46 2200 40 2201 46 2202 40 362 44 2185 41 41 59 125 125 125 630 123 2039 46 2203 40 2204 46 2205 40 362 44 2185 44 2047 41 41 59 125 2206 40 41 59 125 773 865 2207 40 41 123 2032 46 2208 40 2010 58 58 2209 41 59 2210 60 2211 62 2212 61 2020 46 2213 40 41 59 2210 60 2010 62 2214 61 2212 46 2215 40 41 46 2216 40 2217 45 62 123 792 744 2010 40 2217 44 2020 44 2022 44 2015 44 330 2217 46 2218 40 41 340 2219 63 2217 46 2218 40 41 58 2217 46 2220 40 41 44 2019 44 2028 41 59 125 41 46 2221 40 2222 46 2223 40 41 41 59 2032 46 2224 40 2214 41 59 125 773 570 2225 40 2226 2227 41 123 819 40 2227 41 123 579 2228 58 579 2229 58 579 2230 58 579 2231 58 792 2232 59 579 2233 58 579 2234 58 579 2235 58 579 2236 58 579 2237 58 579 2238 58 579 2239 58 579 2240 58 579 2241 58 579 2242 58 579 2243 58 579 2244 58 792 2245 59 579 2246 58 792 2232 59 613 58 792 2232 59 125 125 773 865 2247 40 41 123 2248 60 2010 44 2010 62 2249 61 744 2250 60 62 40 2251 46 2252 40 362 41 41 59 2249 46 2253 40 2254 45 62 744 2255 60 62 40 2254 46 2256 40 41 41 41 59 2249 46 2257 40 1504 41 59 2249 46 2258 40 2249 46 2259 40 41 43 1503 41 59 2249 46 2260 40 41 46 2261 40 362 41 59 2249 46 2262 40 744 2263 60 62 40 41 123 64 2051 777 2264 60 2010 44 2010 62 2265 40 2248 60 2010 44 2010 62 2249 41 123 792 744 2264 60 62 40 41 123 64 2051 777 865 2266 40 657 2010 2254 44 570 2267 41 123 818 46 2266 40 2254 44 2267 41 59 688 40 2254 340 2268 307 33 2267 41 123 2269 40 2254 46 2270 40 41 41 59 125 630 123 2271 40 362 41 59 125 125 125 59 125 125 41 59 2011 46 2272 40 41 46 2261 40 2249 41 59 2249 46 2273 40 2274 46 2275 40 2010 58 58 2276 41 41 59 2249 46 2277 40 2248 46 2278 46 2279 41 59 2011 46 2280 40 41 46 2261 40 2249 41 59 125 773 865 2281 40 41 123 2282 60 2010 44 2010 62 2283 61 744 2284 60 62 40 2285 46 2286 40 362 41 41 59 2283 46 2287 40 2288 45 62 744 2289 60 62 40 2288 46 2290 40 41 41 41 59 2283 46 2291 40 1503 41 59 2283 46 2292 40 744 2293 60 62 40 41 123 64 2051 777 2294 60 2010 44 2010 62 2295 40 2282 60 2010 44 2010 62 2283 41 123 792 744 2294 60 62 40 41 123 773 2296 2297 59 64 2051 777 865 2298 40 657 2010 2288 44 570 2299 41 123 818 46 2298 40 2288 44 2299 41 59 330 688 40 2288 340 2300 307 33 2299 41 123 2301 2302 61 2288 46 2303 40 41 59 2297 61 744 2304 40 2302 41 59 2297 46 2305 40 2306 45 62 2307 40 2288 41 41 59 2297 46 2308 40 744 2309 40 2285 46 2286 40 362 44 2302 41 41 41 59 2310 40 2297 41 59 125 630 123 2311 40 2300 41 59 688 40 2297 340 2300 41 2297 46 2312 40 2300 41 59 125 125 125 59 125 125 41 59 2011 46 2313 40 41 46 2314 40 2283 41 59 125 773 865 2315 40 41 123 2316 60 2010 44 2010 62 2317 61 744 2318 60 62 40 2319 46 2320 40 362 41 41 59 2317 46 2321 40 2322 45 62 744 2323 60 62 40 2322 46 2324 40 41 41 41 59 2317 46 2325 40 1504 41 59 2317 46 2326 40 744 2327 60 62 40 41 123 64 2051 777 2328 60 2010 44 2010 62 2329 40 2316 60 2010 44 2010 62 2317 41 123 792 744 2328 60 62 40 41 123 773 2330 2331 59 64 2051 777 865 2332 40 657 2010 2322 44 570 2333 41 123 818 46 2332 40 2322 44 2333 41 59 688 40 2322 340 2334 307 33 2333 41 123 2226 2227 61 2322 46 2335 40 41 59 2336 2337 61 2319 46 2320 40 362 43 2227 46 2338 40 41 41 59 2038 2339 59 688 40 2322 46 2340 40 41 62 1500 307 2225 40 2227 41 41 123 688 40 2322 46 2341 40 41 46 2342 40 41 41 123 688 40 2331 340 2334 41 2331 46 2343 40 2334 41 59 2344 2345 61 2322 46 2341 40 41 46 2320 40 41 59 2336 2346 61 2319 46 2320 40 362 44 2345 46 2347 40 41 41 59 2348 2349 61 744 2348 40 2346 44 2350 46 2351 41 59 2349 46 2343 40 2352 45 62 2030 46 2353 40 2345 41 41 59 2349 46 2354 40 744 2355 40 2319 46 2320 40 362 41 41 41 59 2356 40 2349 41 59 125 630 688 40 2227 323 2226 46 2357 307 2015 46 2358 40 2322 46 2359 40 41 44 2360 46 2361 41 41 123 688 40 2331 340 2334 41 2331 46 2362 40 2334 41 59 2337 61 2319 46 2320 40 362 41 59 2339 61 744 2363 40 2337 41 59 2364 40 2339 41 59 125 630 688 40 2227 323 2226 46 2365 307 2015 46 2358 40 2322 46 2359 40 41 44 2360 46 2366 41 41 123 688 40 2331 340 2334 41 2331 46 2367 40 2334 41 59 2337 61 2319 46 2320 40 362 41 59 2339 61 744 2368 40 2337 41 59 2369 40 2339 41 59 125 630 688 40 2322 46 2370 40 41 309 2322 46 2371 40 41 46 2372 40 41 41 123 688 40 2331 340 2334 41 2331 46 2373 40 2334 41 59 688 40 2227 323 2226 46 2374 307 2322 46 2371 40 41 46 2372 40 41 307 2322 46 2335 40 41 340 2226 46 2375 41 123 2337 61 2319 46 2320 40 362 41 59 125 2339 61 744 2376 40 2337 41 59 2377 40 2339 41 59 125 630 123 330 2336 2378 61 2322 46 2379 40 41 59 2331 61 744 2330 40 2322 46 2380 40 41 44 2378 44 2322 46 2381 40 41 41 59 2331 46 2382 40 2383 45 62 2384 40 2322 41 41 59 2331 46 2385 40 744 2386 40 2319 46 2320 40 362 44 2378 41 41 41 59 2387 40 2331 41 59 125 125 630 123 688 40 2322 46 2388 40 41 41 2337 61 2319 46 2320 40 362 41 59 2339 61 744 2389 40 2337 41 59 2390 40 2339 41 59 125 125 630 123 2391 40 2334 41 59 688 40 2331 340 2334 41 2331 46 2392 40 2334 41 59 125 125 125 59 125 125 41 59 2011 46 2393 40 41 46 2394 40 2317 41 59 125 773 865 2395 40 41 123 2396 60 2010 44 2010 62 2397 61 744 2398 60 62 40 2399 46 2400 40 362 44 362 41 41 59 2397 46 2401 40 1504 41 59 2397 46 2402 40 2397 46 2403 40 41 41 59 2397 46 2404 40 40 2405 41 45 62 744 2406 60 62 40 2405 46 2407 40 41 41 41 59 2397 46 2408 40 744 2409 60 62 40 41 123 64 2051 777 2410 60 2010 44 2010 62 2411 40 2396 60 2010 44 2010 62 2397 41 123 792 744 2410 60 62 40 41 123 64 2051 777 865 2412 40 657 2010 2405 44 570 2413 41 123 818 46 2412 40 2405 44 2413 41 59 688 40 2405 340 2414 307 33 2413 41 123 2226 2227 61 2405 46 2415 40 41 59 2416 2417 61 2399 46 2400 40 362 41 59 688 40 2405 46 2418 40 41 62 1500 41 123 688 40 2225 40 2227 41 41 2417 61 2405 46 2419 40 41 59 630 688 40 2405 46 2420 40 41 41 2417 61 2019 46 2421 40 1500 41 59 125 2422 40 2417 41 59 125 630 2423 40 362 41 59 125 125 59 125 125 41 59 2011 46 2424 40 41 46 2425 40 2397 41 59 125 773 865 2426 40 41 123 2427 60 2010 44 2010 62 2428 61 744 2429 60 62 40 2430 46 2431 40 362 41 41 59 2428 46 2432 40 1504 41 59 2428 46 2433 40 2428 46 2434 40 41 41 59 2428 46 2435 40 40 2436 41 45 62 744 2437 60 62 40 2436 46 2438 40 41 41 41 59 2428 46 2439 40 744 2440 60 62 40 41 123 64 2051 777 2441 60 2010 44 2010 62 2442 40 2427 60 2010 44 2010 62 2428 41 123 792 744 2441 60 62 40 41 123 64 2051 777 865 2443 40 657 2010 2436 44 570 2444 41 123 818 46 2443 40 2436 44 2444 41 59 688 40 2436 340 2445 307 33 2444 41 123 2446 40 2436 46 2447 40 41 41 59 125 630 123 2448 40 2445 41 59 125 125 125 59 125 125 41 59 2011 46 2449 40 41 46 2450 40 2428 41 59 125 773 865 2451 40 41 123 2452 60 2010 44 2010 62 2453 61 744 2454 60 62 40 2455 46 2456 40 362 41 41 59 2453 46 2457 40 2458 45 62 744 2459 60 62 40 2458 46 2460 40 41 41 41 59 2453 46 2461 40 1503 41 59 2453 46 2462 40 2453 46 2463 40 41 41 59 2453 46 2464 40 41 46 2465 40 362 41 59 2453 46 2466 40 744 2467 60 62 40 41 123 64 2051 777 2468 60 2010 44 2010 62 2469 40 2452 60 2010 44 2010 62 2453 41 123 792 744 2468 60 62 40 41 123 64 2051 777 865 2470 40 657 2010 2458 44 570 2471 41 123 818 46 2470 40 2458 44 2471 41 59 688 40 2458 340 2472 307 33 2471 41 123 2473 2474 59 2475 2476 59 2226 2227 61 2458 46 2477 40 41 59 2473 2478 61 2455 46 2456 40 362 43 2227 46 2479 40 41 41 59 570 2480 61 2481 59 819 40 2227 41 123 579 2482 58 2476 61 2475 46 2483 59 2474 61 362 59 572 59 579 2484 58 2476 61 2475 46 2485 59 2474 61 362 59 572 59 579 2486 58 2476 61 2475 46 2487 59 2474 61 362 59 572 59 579 2488 58 2476 61 2475 46 2489 59 2474 61 362 59 572 59 579 2490 58 688 40 2458 46 2491 40 41 46 2492 40 41 41 123 2476 61 2475 46 2493 59 2474 61 362 59 125 630 123 2476 61 2458 46 2494 40 41 63 2475 46 2495 58 2475 46 2496 59 2480 61 2458 46 2494 40 41 59 2474 61 2458 46 2494 40 41 63 362 58 362 59 2478 61 2458 46 2494 40 41 63 2455 46 2456 40 362 43 2227 46 2479 40 41 41 58 2455 46 2456 40 362 43 2227 46 2479 40 41 41 59 125 572 59 579 2497 58 330 330 330 330 330 688 40 2458 46 2498 40 41 41 123 2476 61 2475 46 2499 59 2474 61 362 59 2478 61 2455 46 2456 40 362 41 59 125 630 123 2476 61 2475 46 2500 59 2474 61 362 59 125 572 59 579 2501 58 579 2502 58 2473 2503 61 2458 46 2504 40 41 59 688 40 2015 46 2505 40 2503 44 2506 46 2507 41 41 123 2476 61 2475 46 2508 59 2474 61 362 59 704 2509 61 2015 46 2510 40 2503 41 59 726 2511 61 2015 46 2512 40 2509 41 59 2473 2513 61 2514 46 2515 40 744 2516 40 2511 41 41 59 2478 61 2455 46 2456 40 362 44 2513 41 59 125 630 123 2476 61 2475 46 2517 59 2474 61 362 59 125 572 59 579 2518 58 2503 61 2458 46 2504 40 41 59 688 40 2015 46 2505 40 2503 44 2506 46 2519 41 41 123 2476 61 2475 46 2520 59 2474 61 362 59 704 2521 61 2015 46 2522 40 2503 41 59 726 2523 61 2015 46 2524 40 2521 41 59 2473 2525 61 2526 46 2527 40 744 2528 40 2523 41 41 59 2478 61 2455 46 2456 40 362 44 2525 41 59 125 630 123 2476 61 2475 46 2529 59 2474 61 362 59 125 572 59 579 2530 58 2476 61 2475 46 2531 59 2474 61 362 59 572 59 579 2532 58 2476 61 2475 46 2533 59 2474 61 362 59 572 59 579 2534 58 2476 61 2475 46 2535 59 2474 61 362 59 572 59 579 2536 58 2476 61 2475 46 2536 59 2474 61 362 59 572 59 579 2537 58 2476 61 2475 46 2538 59 2474 61 362 59 572 59 579 2539 58 2476 61 2475 46 2538 59 2474 61 362 59 572 59 579 2540 58 2476 61 2475 46 2487 59 2474 61 362 59 572 59 613 58 2476 61 2475 46 2485 59 2474 61 362 59 572 59 125 2038 2541 61 2542 46 2543 40 2476 41 59 2541 46 2464 40 41 46 2544 40 362 44 2474 41 59 2541 46 2545 40 744 2546 40 2478 41 41 59 688 40 2480 41 2541 46 2547 40 1504 41 59 2548 40 2541 41 59 125 630 123 2549 40 2472 41 59 125 125 125 59 125 125 41 59 2011 46 2550 40 41 46 2465 40 2453 41 59 125 773 865 2551 40 2010 2552 41 123 688 40 2552 46 2553 40 41 340 2554 41 2555 46 2556 40 2026 46 2557 40 41 46 2558 43 2552 46 2553 40 41 44 2559 41 59 125 773 865 2560 40 2010 2552 41 123 688 40 2552 46 2561 40 41 340 2562 41 123 2563 46 2564 40 2026 46 2565 40 41 46 2566 43 2552 46 2561 40 41 44 2567 41 59 125 125 125 ,"{'AvgLine': 32, 'CountLine': 694, 'CountStmt': 397, 'MaxNesting': 3, 'AvgLineCode': 29, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 333, 'MaxEssential': 1, 'SumEssential': 28, 'AvgCyclomatic': 2, 'CountLineCode': 585, 'CountStmtDecl': 98, 'MaxCyclomatic': 18, 'SumCyclomatic': 55, 'AvgLineComment': 0, 'CountClassBase': 4, 'CountLineBlank': 77, 'CountSemicolon': 327, 'CountDeclMethod': 19, 'CountLineCodeExe': 464, 'CountLineComment': 32, 'CountClassCoupled': 49, 'CountClassDerived': 0, 'CountLineCodeDecl': 111, 'CountDeclMethodAll': 32, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.05', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 18, 'SumCyclomaticStrict': 55, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 86, 'SumCyclomaticModified': 39, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 12, 'CountDeclInstanceMethod': 19, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 49, 'CountDeclInstanceVariable': 21, 'PercentLackOfCohesionModified': 81}"
27319,Java,"public final class SingleServerInfo implements ServerInfo {

    private final Set<String> accounts = new HashSet<>();
    private final String key;
    private int id;
    private volatile boolean isAuthed;
    private int status = ServerStatus.STATUS_DOWN;

    private boolean isPvp;
    private boolean isShowingBrackets;
    private int maxAccounts;
    private int type;
    private byte ageLimit;
    private ServerClient client;
    private Endpoint[] endpoints;

    public SingleServerInfo(ServerData serverData) {
        this.key = serverData.key();
        this.id = serverData.getId();
        this.type = serverData.getServerType();
    }

    public SingleServerInfo(String key, int id, ServerClient client, int type) {
        this.key = key;
        this.id = id;
        this.client = client;
        this.type = type;
    }

    public void setClient(ServerClient client) {
        this.client = client;
    }

    public int onlineAccounts() {
        return accounts.size();
    }

    public void setDown() {
        setAuthed(false);
        setEndpoints(null);
        setStatus(ServerStatus.STATUS_DOWN);
        accounts.clear();
        client = null;
    }

    public void disconnectAccount(String account) {
        removeAccount(account);
        client.sendPacket(new KickPlayer(account));
    }

    public void requestAccountInfo(String account) {
        client.sendPacket(new RequestAccountInfo(account));
    }

    public void removeAccount(String account) {
        accounts.remove(account);
    }

    public boolean isAccountInUse(String account) {
        return accounts.contains(account);
    }

    public void setId(int id) {
        this.id = id;
    }

    public int id() {
        return id;
    }

    public String key() {
        return key;
    }

    public void setAuthed(boolean isAuthed) {
        this.isAuthed = isAuthed;
    }

    public boolean isAuthed() {
        return isAuthed;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    public int status() {
        return status;
    }


    public void setMaxAccounts(int maxPlayers) {
        maxAccounts = maxPlayers;
    }

    public int maxAccounts() {
        return maxAccounts;
    }

    public boolean isPvp() {
        return isPvp;
    }

    public void setShowingBrackets(boolean val) {
        isShowingBrackets = val;
    }

    public boolean isShowingBrackets() {
        return isShowingBrackets;
    }

    public void setType(int type) {
        this.type = type;
    }

    public int type() {
        return type;
    }

    public void addAccounts(List<String> accounts) {
        this.accounts.addAll(accounts);
    }

    public void setAgeLimit(byte ageLimit) {
        this.ageLimit = ageLimit;
    }

    public void setIsPvp(boolean isPvp) {
        this.isPvp = isPvp;
    }

    public byte ageLimit() {
        return ageLimit;
    }

    public Endpoint endpointFrom(String hostAddress)  {
        if(endpoints != null ) {
            for (Endpoint endpoint : endpoints) {
                if (endpoint != null && endpoint.isInSameSubnet(hostAddress)) {
                    return endpoint;
                }
            }
        }
        return Endpoint.LOCALHOST;
    }

    String serverAddress() {
      return client.getHostAddress();
    }

    float currentLoad() {
        return  onlineAccounts() / (float) maxAccounts();
    }

    public void setEndpoints(Endpoint[] endpoints) {
        this.endpoints = endpoints;
    }

}",1,777 657 587 2000 693 2001 123 773 657 2002 60 2003 62 2004 61 744 2005 60 62 40 41 59 773 657 2003 2006 59 773 704 2007 59 773 866 570 2008 59 773 704 2009 61 2010 46 2011 59 773 570 2012 59 773 570 2013 59 773 704 2014 59 773 704 2015 59 773 574 2016 59 773 2017 2018 59 773 2019 91 93 2020 59 777 2000 40 2021 2022 41 123 823 46 2006 61 2022 46 2006 40 41 59 823 46 2007 61 2022 46 2023 40 41 59 823 46 2015 61 2022 46 2024 40 41 59 125 777 2000 40 2003 2006 44 704 2007 44 2017 2018 44 704 2015 41 123 823 46 2006 61 2006 59 823 46 2007 61 2007 59 823 46 2018 61 2018 59 823 46 2015 61 2015 59 125 777 865 2025 40 2017 2018 41 123 823 46 2018 61 2018 59 125 777 704 2026 40 41 123 792 2004 46 2027 40 41 59 125 777 865 2028 40 41 123 2029 40 2030 41 59 2031 40 2032 41 59 2033 40 2010 46 2011 41 59 2004 46 2034 40 41 59 2018 61 2032 59 125 777 865 2035 40 2003 2036 41 123 2037 40 2036 41 59 2018 46 2038 40 744 2039 40 2036 41 41 59 125 777 865 2040 40 2003 2036 41 123 2018 46 2041 40 744 2042 40 2036 41 41 59 125 777 865 2043 40 2003 2036 41 123 2004 46 2044 40 2036 41 59 125 777 570 2045 40 2003 2036 41 123 792 2004 46 2046 40 2036 41 59 125 777 865 2047 40 704 2007 41 123 823 46 2007 61 2007 59 125 777 704 2007 40 41 123 792 2007 59 125 777 2003 2006 40 41 123 792 2006 59 125 777 865 2048 40 570 2008 41 123 823 46 2008 61 2008 59 125 777 570 2008 40 41 123 792 2008 59 125 777 865 2049 40 704 2009 41 123 823 46 2009 61 2009 59 125 777 704 2009 40 41 123 792 2009 59 125 777 865 2050 40 704 2051 41 123 2014 61 2051 59 125 777 704 2014 40 41 123 792 2014 59 125 777 570 2012 40 41 123 792 2012 59 125 777 865 2052 40 570 2053 41 123 2013 61 2053 59 125 777 570 2013 40 41 123 792 2013 59 125 777 865 2054 40 704 2015 41 123 823 46 2015 61 2015 59 125 777 704 2015 40 41 123 792 2015 59 125 777 865 2055 40 2056 60 2003 62 2004 41 123 823 46 2004 46 2057 40 2004 41 59 125 777 865 2058 40 574 2016 41 123 823 46 2016 61 2016 59 125 777 865 2059 40 570 2012 41 123 823 46 2012 61 2012 59 125 777 574 2016 40 41 123 792 2016 59 125 777 2019 2060 40 2003 2061 41 123 688 40 2020 340 2062 41 123 664 40 2019 2063 58 2020 41 123 688 40 2063 340 2062 307 2063 46 2064 40 2061 41 41 123 792 2063 59 125 125 125 792 2019 46 2065 59 125 2003 2066 40 41 123 792 2018 46 2067 40 41 59 125 660 2068 40 41 123 792 2026 40 41 47 40 660 41 2014 40 41 59 125 777 865 2069 40 2019 91 93 2020 41 123 823 46 2020 61 2020 59 125 125 ,"{'AvgLine': 3, 'CountLine': 160, 'CountStmt': 90, 'MaxNesting': 3, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 46, 'MaxEssential': 4, 'SumEssential': 34, 'AvgCyclomatic': 1, 'CountLineCode': 123, 'CountStmtDecl': 45, 'MaxCyclomatic': 4, 'SumCyclomatic': 34, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 34, 'CountSemicolon': 54, 'CountDeclMethod': 31, 'CountLineCodeExe': 47, 'CountLineComment': 3, 'CountClassCoupled': 10, 'CountClassDerived': 0, 'CountLineCodeDecl': 44, 'CountDeclMethodAll': 31, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 35, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 29, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 34, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 2, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 31, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 10, 'CountDeclInstanceVariable': 12, 'PercentLackOfCohesionModified': 88}"
2782,Java,"@Slf4j
public abstract class Overlay<T extends Overlay<T>> {

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Enum
    ///////////////////////////////////////////////////////////////////////////////////////////

    private enum AnimationType {
        FadeInAtCenter,
        SlideDownFromCenterTop,
        SlideFromRightTop,
        ScaleDownToCenter,
        ScaleFromCenter,
        ScaleYFromCenter
    }

    private enum ChangeBackgroundType {
        BlurLight,
        BlurUltraLight,
        Darken
    }

    protected enum Type {
        Undefined(AnimationType.ScaleFromCenter, ChangeBackgroundType.BlurLight),

        Notification(AnimationType.SlideFromRightTop, ChangeBackgroundType.BlurLight),

        BackgroundInfo(AnimationType.SlideDownFromCenterTop, ChangeBackgroundType.BlurUltraLight),
        Feedback(AnimationType.SlideDownFromCenterTop, ChangeBackgroundType.Darken),

        Information(AnimationType.FadeInAtCenter, ChangeBackgroundType.BlurLight),
        Instruction(AnimationType.ScaleFromCenter, ChangeBackgroundType.BlurLight),
        Attention(AnimationType.ScaleFromCenter, ChangeBackgroundType.BlurLight),
        Confirmation(AnimationType.ScaleYFromCenter, ChangeBackgroundType.BlurLight),

        Warning(AnimationType.ScaleDownToCenter, ChangeBackgroundType.BlurLight),
        Error(AnimationType.ScaleDownToCenter, ChangeBackgroundType.BlurLight);

        public final AnimationType animationType;
        public final ChangeBackgroundType changeBackgroundType;

        Type(AnimationType animationType, ChangeBackgroundType changeBackgroundType) {
            this.animationType = animationType;
            this.changeBackgroundType = changeBackgroundType;
        }
    }

    protected final static double DEFAULT_WIDTH = 668;
    protected Stage stage;
    protected GridPane gridPane;
    protected Pane owner;

    protected int rowIndex = -1;
    protected double width = DEFAULT_WIDTH;
    protected double buttonDistance = 20;

    protected boolean showReportErrorButtons;
    private boolean showBusyAnimation;
    protected boolean hideCloseButton;
    protected boolean isDisplayed;
    protected boolean disableActionButton;

    @Getter
    protected BooleanProperty isHiddenProperty = new SimpleBooleanProperty();

    // Used when a priority queue is used for displaying order of popups. Higher numbers mean lower priority
    @Setter
    @Getter
    protected Integer displayOrderPriority = Integer.MAX_VALUE;

    protected boolean useAnimation = true;

    protected Label headlineIcon, headLineLabel, messageLabel;
    protected String headLine, message, closeButtonText, actionButtonText,
            secondaryActionButtonText, dontShowAgainId, dontShowAgainText,
            truncatedMessage;
    private ArrayList<String> messageHyperlinks;
    private String headlineStyle;
    protected Button actionButton, secondaryActionButton;
    private HBox buttonBox;
    protected AutoTooltipButton closeButton;

    private HPos buttonAlignment = HPos.RIGHT;

    protected Optional<Runnable> closeHandlerOptional = Optional.<Runnable>empty();
    protected Optional<Runnable> actionHandlerOptional = Optional.empty();
    protected Optional<Runnable> secondaryActionHandlerOptional = Optional.<Runnable>empty();
    protected ChangeListener<Number> positionListener;

    protected Timer centerTime;
    protected Type type = Type.Undefined;

    protected int maxChar = 2200;

    private T cast() {
        //noinspection unchecked
        return (T) this;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Public API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Overlay() {
        //noinspection UnstableApiUsage
        TypeToken<T> typeToken = new TypeToken<>(getClass()) {
        };
        if (!typeToken.isSupertypeOf(getClass())) {
            throw new RuntimeException(""Subclass of Overlay<T> should be castable to T"");
        }
    }

    public void show(boolean showAgainChecked) {
        if (dontShowAgainId == null || DontShowAgainLookup.showAgain(dontShowAgainId)) {
            createGridPane();
            if (LanguageUtil.isDefaultLanguageRTL())
                getRootContainer().setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);

            addHeadLine();

            if (showBusyAnimation)
                addBusyAnimation();

            addMessage();
            if (showReportErrorButtons)
                addReportErrorButtons();

            addButtons();
            addDontShowAgainCheckBox(showAgainChecked);
            applyStyles();
            onShow();
        }
    }

    public void show() {
        this.show(false);
    }

    protected void onShow() {
    }

    public void hide() {
        if (gridPane != null) {
            animateHide();
        }
        isDisplayed = false;
        isHiddenProperty.set(true);
    }

    protected void animateHide() {
        animateHide(() -> {
            removeEffectFromBackground();

            if (stage != null)
                stage.hide();
            else
                log.warn(""Stage is null"");

            cleanup();
            onHidden();
        });
    }

    protected void onHidden() {
    }

    protected void cleanup() {
        if (centerTime != null)
            centerTime.stop();

        if (owner == null)
            owner = MainView.getRootContainer();
        Scene rootScene = owner.getScene();
        if (rootScene != null) {
            Window window = rootScene.getWindow();
            if (window != null && positionListener != null) {
                window.xProperty().removeListener(positionListener);
                window.yProperty().removeListener(positionListener);
                window.widthProperty().removeListener(positionListener);
            }
        }
    }

    public T onClose(Runnable closeHandler) {
        this.closeHandlerOptional = Optional.of(closeHandler);
        return cast();
    }

    public T onAction(Runnable actionHandler) {
        this.actionHandlerOptional = Optional.of(actionHandler);
        return cast();
    }

    public T onSecondaryAction(Runnable secondaryActionHandlerOptional) {
        this.secondaryActionHandlerOptional = Optional.of(secondaryActionHandlerOptional);
        return cast();
    }

    public T headLine(String headLine) {
        this.headLine = headLine;
        return cast();
    }

    public T notification(String message) {
        type = Type.Notification;
        if (headLine == null)
            this.headLine = Res.get(""popup.headline.notification"");
        preProcessMessage(message);
        return cast();
    }

    public T instruction(String message) {
        type = Type.Instruction;
        if (headLine == null)
            this.headLine = Res.get(""popup.headline.instruction"");
        preProcessMessage(message);
        return cast();
    }

    public T attention(String message) {
        type = Type.Attention;
        if (headLine == null)
            this.headLine = Res.get(""popup.headline.attention"");
        preProcessMessage(message);
        return cast();
    }

    public T backgroundInfo(String message) {
        type = Type.BackgroundInfo;
        if (headLine == null)
            this.headLine = Res.get(""popup.headline.backgroundInfo"");
        preProcessMessage(message);
        return cast();
    }

    public T feedback(String message) {
        type = Type.Feedback;
        if (headLine == null)
            this.headLine = Res.get(""popup.headline.feedback"");
        preProcessMessage(message);
        return cast();
    }

    public T confirmation(String message) {
        type = Type.Confirmation;
        if (headLine == null)
            this.headLine = Res.get(""popup.headline.confirmation"");
        preProcessMessage(message);
        return cast();
    }

    public T information(String message) {
        type = Type.Information;
        if (headLine == null)
            this.headLine = Res.get(""popup.headline.information"");
        preProcessMessage(message);
        return cast();
    }

    public T warning(String message) {
        type = Type.Warning;

        if (headLine == null)
            this.headLine = Res.get(""popup.headline.warning"");
        preProcessMessage(message);
        return cast();
    }

    public T error(String message) {
        type = Type.Error;
        showReportErrorButtons();
        width = 1100;
        if (headLine == null)
            this.headLine = Res.get(""popup.headline.error"");
        preProcessMessage(message);
        return cast();
    }

    @SuppressWarnings(""UnusedReturnValue"")
    public T showReportErrorButtons() {
        this.showReportErrorButtons = true;
        return cast();
    }

    public T message(String message) {
        preProcessMessage(message);
        return cast();
    }

    public T closeButtonText(String closeButtonText) {
        this.closeButtonText = closeButtonText;
        return cast();
    }

    public T useReportBugButton() {
        this.closeButtonText = Res.get(""shared.reportBug"");
        this.closeHandlerOptional = Optional.of(() -> GUIUtil.openWebPage(""https://bisq.network/source/bisq/issues""));
        return cast();
    }

    public T useIUnderstandButton() {
        this.closeButtonText = Res.get(""shared.iUnderstand"");
        return cast();
    }

    public T actionButtonTextWithGoTo(String target) {
        this.actionButtonText = Res.get(""shared.goTo"", Res.get(target));
        return cast();
    }

    public T secondaryActionButtonTextWithGoTo(String target) {
        this.secondaryActionButtonText = Res.get(""shared.goTo"", Res.get(target));
        return cast();
    }

    public T closeButtonTextWithGoTo(String target) {
        this.closeButtonText = Res.get(""shared.goTo"", Res.get(target));
        return cast();
    }

    public T actionButtonText(String actionButtonText) {
        this.actionButtonText = actionButtonText;
        return cast();
    }

    public T secondaryActionButtonText(String secondaryActionButtonText) {
        this.secondaryActionButtonText = secondaryActionButtonText;
        return cast();
    }

    public T useShutDownButton() {
        this.actionButtonText = Res.get(""shared.shutDown"");
        this.actionHandlerOptional = Optional.ofNullable(BisqApp.getShutDownHandler());
        return cast();
    }

    public T buttonAlignment(HPos pos) {
        this.buttonAlignment = pos;
        return cast();
    }

    public T width(double width) {
        this.width = width;
        return cast();
    }

    public T maxMessageLength(int maxChar) {
        this.maxChar = maxChar;
        return cast();
    }

    public T showBusyAnimation() {
        this.showBusyAnimation = true;
        return cast();
    }

    public T dontShowAgainId(String key) {
        this.dontShowAgainId = key;
        return cast();
    }

    public T dontShowAgainText(String dontShowAgainText) {
        this.dontShowAgainText = dontShowAgainText;
        return cast();
    }

    public T hideCloseButton() {
        this.hideCloseButton = true;
        return cast();
    }

    public T useAnimation(boolean useAnimation) {
        this.useAnimation = useAnimation;
        return cast();
    }

    public T setHeadlineStyle(String headlineStyle) {
        this.headlineStyle = headlineStyle;
        return cast();
    }

    public T disableActionButton() {
        this.disableActionButton = true;
        return cast();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Protected
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected void createGridPane() {
        gridPane = new GridPane();
        gridPane.setHgap(5);
        gridPane.setVgap(5);
        gridPane.setPadding(new Insets(64, 64, 64, 64));
        gridPane.setPrefWidth(width);

        ColumnConstraints columnConstraints1 = new ColumnConstraints();
        columnConstraints1.setHalignment(HPos.RIGHT);
        columnConstraints1.setHgrow(Priority.SOMETIMES);
        ColumnConstraints columnConstraints2 = new ColumnConstraints();
        columnConstraints2.setHgrow(Priority.ALWAYS);
        gridPane.getColumnConstraints().addAll(columnConstraints1, columnConstraints2);
    }

    protected void blurAgain() {
        UserThread.runAfter(MainView::blurLight, Transitions.DEFAULT_DURATION, TimeUnit.MILLISECONDS);
    }

    public void display() {
        if (owner == null)
            owner = MainView.getRootContainer();

        if (owner != null) {
            Scene rootScene = owner.getScene();
            if (rootScene != null) {
                Scene scene = new Scene(getRootContainer());
                scene.getStylesheets().setAll(rootScene.getStylesheets());
                scene.setFill(Color.TRANSPARENT);

                setupKeyHandler(scene);

                stage = new Stage();
                stage.setScene(scene);
                Window window = rootScene.getWindow();
                setModality();
                stage.initStyle(StageStyle.TRANSPARENT);
                stage.setOnCloseRequest(event -> {
                    event.consume();
                    doClose();
                });
                stage.sizeToScene();
                stage.show();

                layout();

                addEffectToBackground();

                // On Linux the owner stage does not move the child stage as it does on Mac
                // So we need to apply centerPopup. Further with fast movements the handler loses
                // the latest position, with a delay it fixes that.
                // Also on Mac sometimes the popups are positioned outside of the main app, so keep it for all OS
                positionListener = (observable, oldValue, newValue) -> {
                    if (stage != null) {
                        layout();
                        if (centerTime != null)
                            centerTime.stop();

                        centerTime = UserThread.runAfter(this::layout, 3);
                    }
                };
                window.xProperty().addListener(positionListener);
                window.yProperty().addListener(positionListener);
                window.widthProperty().addListener(positionListener);

                animateDisplay();
                isDisplayed = true;
            }
        }
    }

    protected Region getRootContainer() {
        return gridPane;
    }


    protected void setupKeyHandler(Scene scene) {
        if (!hideCloseButton) {
            scene.setOnKeyPressed(e -> {
                if (e.getCode() == KeyCode.ESCAPE || e.getCode() == KeyCode.ENTER) {
                    e.consume();
                    doClose();
                }
            });
        }
    }

    protected void animateDisplay() {
        Region rootContainer = this.getRootContainer();

        rootContainer.setOpacity(0);
        Interpolator interpolator = Interpolator.SPLINE(0.25, 0.1, 0.25, 1);
        double duration = getDuration(400);
        Timeline timeline = new Timeline();
        ObservableList<KeyFrame> keyFrames = timeline.getKeyFrames();

        if (type.animationType == AnimationType.SlideDownFromCenterTop) {
            double startY = -rootContainer.getHeight();
            keyFrames.add(new KeyFrame(Duration.millis(0),
                    new KeyValue(rootContainer.opacityProperty(), 0, interpolator),
                    new KeyValue(rootContainer.translateYProperty(), startY, interpolator)
            ));
            keyFrames.add(new KeyFrame(Duration.millis(duration),
                    new KeyValue(rootContainer.opacityProperty(), 1, interpolator),
                    new KeyValue(rootContainer.translateYProperty(), -50, interpolator)
            ));
        } else if (type.animationType == AnimationType.ScaleFromCenter) {
            double startScale = 0.25;
            keyFrames.add(new KeyFrame(Duration.millis(0),
                    new KeyValue(rootContainer.opacityProperty(), 0, interpolator),
                    new KeyValue(rootContainer.scaleXProperty(), startScale, interpolator),
                    new KeyValue(rootContainer.scaleYProperty(), startScale, interpolator)

            ));
            keyFrames.add(new KeyFrame(Duration.millis(duration),
                    new KeyValue(rootContainer.opacityProperty(), 1, interpolator),
                    new KeyValue(rootContainer.scaleXProperty(), 1, interpolator),
                    new KeyValue(rootContainer.scaleYProperty(), 1, interpolator)
            ));
        } else if (type.animationType == AnimationType.ScaleYFromCenter) {
            double startYScale = 0.25;
            keyFrames.add(new KeyFrame(Duration.millis(0),
                    new KeyValue(rootContainer.opacityProperty(), 0, interpolator),
                    new KeyValue(rootContainer.scaleYProperty(), startYScale, interpolator)

            ));
            keyFrames.add(new KeyFrame(Duration.millis(duration),
                    new KeyValue(rootContainer.opacityProperty(), 1, interpolator),
                    new KeyValue(rootContainer.scaleYProperty(), 1, interpolator)
            ));
        } else if (type.animationType == AnimationType.ScaleDownToCenter) {
            double startScale = 1.1;
            keyFrames.add(new KeyFrame(Duration.millis(0),
                    new KeyValue(rootContainer.opacityProperty(), 0, interpolator),
                    new KeyValue(rootContainer.scaleXProperty(), startScale, interpolator),
                    new KeyValue(rootContainer.scaleYProperty(), startScale, interpolator)

            ));
            keyFrames.add(new KeyFrame(Duration.millis(duration),
                    new KeyValue(rootContainer.opacityProperty(), 1, interpolator),
                    new KeyValue(rootContainer.scaleXProperty(), 1, interpolator),
                    new KeyValue(rootContainer.scaleYProperty(), 1, interpolator)
            ));
        } else if (type.animationType == AnimationType.FadeInAtCenter) {
            keyFrames.add(new KeyFrame(Duration.millis(0),
                    new KeyValue(rootContainer.opacityProperty(), 0, interpolator)

            ));
            keyFrames.add(new KeyFrame(Duration.millis(duration),
                    new KeyValue(rootContainer.opacityProperty(), 1, interpolator)
            ));
        }

        timeline.play();
    }

    protected void animateHide(Runnable onFinishedHandler) {
        Interpolator interpolator = Interpolator.SPLINE(0.25, 0.1, 0.25, 1);
        double duration = getDuration(200);
        Timeline timeline = new Timeline();
        ObservableList<KeyFrame> keyFrames = timeline.getKeyFrames();

        Region rootContainer = getRootContainer();
        if (type.animationType == AnimationType.SlideDownFromCenterTop) {
            double endY = -rootContainer.getHeight();
            keyFrames.add(new KeyFrame(Duration.millis(0),
                    new KeyValue(rootContainer.opacityProperty(), 1, interpolator),
                    new KeyValue(rootContainer.translateYProperty(), -10, interpolator)
            ));
            keyFrames.add(new KeyFrame(Duration.millis(duration),
                    new KeyValue(rootContainer.opacityProperty(), 0, interpolator),
                    new KeyValue(rootContainer.translateYProperty(), endY, interpolator)
            ));

            timeline.setOnFinished(e -> onFinishedHandler.run());
            timeline.play();
        } else if (type.animationType == AnimationType.ScaleFromCenter) {
            double endScale = 0.25;
            keyFrames.add(new KeyFrame(Duration.millis(0),
                    new KeyValue(rootContainer.opacityProperty(), 1, interpolator),
                    new KeyValue(rootContainer.scaleXProperty(), 1, interpolator),
                    new KeyValue(rootContainer.scaleYProperty(), 1, interpolator)
            ));
            keyFrames.add(new KeyFrame(Duration.millis(duration),
                    new KeyValue(rootContainer.opacityProperty(), 0, interpolator),
                    new KeyValue(rootContainer.scaleXProperty(), endScale, interpolator),
                    new KeyValue(rootContainer.scaleYProperty(), endScale, interpolator)
            ));
        } else if (type.animationType == AnimationType.ScaleYFromCenter) {
            rootContainer.setRotationAxis(Rotate.X_AXIS);
            rootContainer.getScene().setCamera(new PerspectiveCamera());
            keyFrames.add(new KeyFrame(Duration.millis(0),
                    new KeyValue(rootContainer.rotateProperty(), 0, interpolator),
                    new KeyValue(rootContainer.opacityProperty(), 1, interpolator)
            ));
            keyFrames.add(new KeyFrame(Duration.millis(duration),
                    new KeyValue(rootContainer.rotateProperty(), -90, interpolator),
                    new KeyValue(rootContainer.opacityProperty(), 0, interpolator)
            ));
        } else if (type.animationType == AnimationType.ScaleDownToCenter) {
            double endScale = 0.1;
            keyFrames.add(new KeyFrame(Duration.millis(0),
                    new KeyValue(rootContainer.opacityProperty(), 1, interpolator),
                    new KeyValue(rootContainer.scaleXProperty(), 1, interpolator),
                    new KeyValue(rootContainer.scaleYProperty(), 1, interpolator)
            ));
            keyFrames.add(new KeyFrame(Duration.millis(duration),
                    new KeyValue(rootContainer.opacityProperty(), 0, interpolator),
                    new KeyValue(rootContainer.scaleXProperty(), endScale, interpolator),
                    new KeyValue(rootContainer.scaleYProperty(), endScale, interpolator)
            ));
        } else if (type.animationType == AnimationType.FadeInAtCenter) {
            keyFrames.add(new KeyFrame(Duration.millis(0),
                    new KeyValue(rootContainer.opacityProperty(), 1, interpolator)
            ));
            keyFrames.add(new KeyFrame(Duration.millis(duration),
                    new KeyValue(rootContainer.opacityProperty(), 0, interpolator)
            ));
        }

        timeline.setOnFinished(e -> onFinishedHandler.run());
        timeline.play();
    }

    protected void layout() {
        if (owner == null)
            owner = MainView.getRootContainer();
        Scene rootScene = owner.getScene();
        if (rootScene != null) {
            Window window = rootScene.getWindow();
            double titleBarHeight = window.getHeight() - rootScene.getHeight();
            if (Utilities.isWindows())
                titleBarHeight -= 9;
            stage.setX(Math.round(window.getX() + (owner.getWidth() - stage.getWidth()) / 2));

            if (type.animationType == AnimationType.SlideDownFromCenterTop)
                stage.setY(Math.round(window.getY() + titleBarHeight));
            else
                stage.setY(Math.round(window.getY() + titleBarHeight + (owner.getHeight() - stage.getHeight()) / 2));
        }
    }

    protected void addEffectToBackground() {
        if (type.changeBackgroundType == ChangeBackgroundType.BlurUltraLight)
            MainView.blurUltraLight();
        else if (type.changeBackgroundType == ChangeBackgroundType.BlurLight)
            MainView.blurLight();
        else
            MainView.darken();
    }


    protected void applyStyles() {
        Region rootContainer = getRootContainer();
        if (type.animationType == AnimationType.SlideDownFromCenterTop) {
            rootContainer.getStyleClass().add(""popup-bg-top"");
        } else {
            rootContainer.getStyleClass().add(""popup-bg"");
        }


        if (headLineLabel != null) {

            switch (type) {
                case Information:
                case BackgroundInfo:
                case Instruction:
                case Confirmation:
                case Feedback:
                case Notification:
                case Attention:
                    headLineLabel.getStyleClass().add(""popup-headline-information"");
                    headlineIcon.getStyleClass().add(""popup-icon-information"");
                    headlineIcon.setManaged(true);
                    headlineIcon.setVisible(true);
                    FormBuilder.getIconForLabel(AwesomeIcon.INFO_SIGN, headlineIcon, ""1.5em"");
                    break;
                case Warning:
                case Error:
                    headLineLabel.getStyleClass().add(""popup-headline-warning"");
                    headlineIcon.getStyleClass().add(""popup-icon-warning"");
                    headlineIcon.setManaged(true);
                    headlineIcon.setVisible(true);
                    FormBuilder.getIconForLabel(AwesomeIcon.EXCLAMATION_SIGN, headlineIcon, ""1.5em"");
                    break;
                default:
                    headLineLabel.getStyleClass().add(""popup-headline"");
            }
        }
    }

    protected void setModality() {
        stage.initOwner(owner.getScene().getWindow());
        stage.initModality(Modality.WINDOW_MODAL);
    }

    protected void removeEffectFromBackground() {
        MainView.removeEffect();
    }

    protected void addHeadLine() {
        if (headLine != null) {
            ++rowIndex;

            HBox hBox = new HBox();
            hBox.setSpacing(7);
            headLineLabel = new AutoTooltipLabel(headLine);
            headlineIcon = new Label();
            headlineIcon.setManaged(false);
            headlineIcon.setVisible(false);
            headlineIcon.setPadding(new Insets(3));
            headLineLabel.setMouseTransparent(true);

            if (headlineStyle != null)
                headLineLabel.setStyle(headlineStyle);

            hBox.getChildren().addAll(headlineIcon, headLineLabel);

            GridPane.setHalignment(hBox, HPos.LEFT);
            GridPane.setRowIndex(hBox, rowIndex);
            GridPane.setColumnSpan(hBox, 2);
            gridPane.getChildren().addAll(hBox);
        }
    }

    protected void addMessage() {
        if (message != null) {
            messageLabel = new AutoTooltipLabel(truncatedMessage);
            messageLabel.setMouseTransparent(true);
            messageLabel.setWrapText(true);
            GridPane.setHalignment(messageLabel, HPos.LEFT);
            GridPane.setHgrow(messageLabel, Priority.ALWAYS);
            GridPane.setMargin(messageLabel, new Insets(3, 0, 0, 0));
            GridPane.setRowIndex(messageLabel, ++rowIndex);
            GridPane.setColumnIndex(messageLabel, 0);
            GridPane.setColumnSpan(messageLabel, 2);
            gridPane.getChildren().add(messageLabel);
            addFooter();
        }
    }

    // footer contains optional hyperlinks extracted from the message
    private void addFooter() {
        if (messageHyperlinks != null && messageHyperlinks.size() > 0) {
            VBox footerBox = new VBox();
            GridPane.setRowIndex(footerBox, ++rowIndex);
            GridPane.setColumnSpan(footerBox, 2);
            GridPane.setMargin(footerBox, new Insets(buttonDistance, 0, 0, 0));
            gridPane.getChildren().add(footerBox);
            for (int i = 0; i < messageHyperlinks.size(); i++) {
                Label label = new Label(String.format(""[%d]"", i + 1));
                Hyperlink link = new Hyperlink(messageHyperlinks.get(i));
                link.setOnAction(event -> GUIUtil.openWebPageNoPopup(link.getText()));
                footerBox.getChildren().addAll(new HBox(label, link));
            }
        }
    }

    private void addReportErrorButtons() {
        messageLabel.setText(Res.get(""popup.reportError"", truncatedMessage));

        Button logButton = new AutoTooltipButton(Res.get(""popup.reportError.log""));
        GridPane.setMargin(logButton, new Insets(20, 0, 0, 0));
        GridPane.setHalignment(logButton, HPos.LEFT);
        GridPane.setRowIndex(logButton, ++rowIndex);
        gridPane.getChildren().add(logButton);
        logButton.setOnAction(event -> {
            try {
                File dataDir = Config.appDataDir();
                File logFile = new File(dataDir, ""bisq.log"");
                Utilities.openFile(logFile);
            } catch (IOException e) {
                e.printStackTrace();
                log.error(e.getMessage());
            }
        });

        Button gitHubButton = new AutoTooltipButton(Res.get(""popup.reportError.gitHub""));
        GridPane.setHalignment(gitHubButton, HPos.RIGHT);
        GridPane.setRowIndex(gitHubButton, ++rowIndex);
        gridPane.getChildren().add(gitHubButton);
        gitHubButton.setOnAction(event -> {
            if (message != null)
                Utilities.copyToClipboard(message);
            GUIUtil.openWebPage(""https://bisq.network/source/bisq/issues"");
            hide();
        });
    }

    protected void addBusyAnimation() {
        BusyAnimation busyAnimation = new BusyAnimation();
        GridPane.setHalignment(busyAnimation, HPos.CENTER);
        GridPane.setRowIndex(busyAnimation, ++rowIndex);
        GridPane.setColumnSpan(busyAnimation, 2);
        gridPane.getChildren().add(busyAnimation);
    }

    protected void addDontShowAgainCheckBox(boolean isChecked) {
        if (dontShowAgainId != null) {
            // We might have set it and overridden the default, so we check if it is not set
            if (dontShowAgainText == null)
                dontShowAgainText = Res.get(""popup.doNotShowAgain"");

            CheckBox dontShowAgainCheckBox = new AutoTooltipCheckBox(dontShowAgainText);
            HBox.setHgrow(dontShowAgainCheckBox, Priority.NEVER);
            buttonBox.getChildren().add(0, dontShowAgainCheckBox);

            dontShowAgainCheckBox.setSelected(isChecked);
            DontShowAgainLookup.dontShowAgain(dontShowAgainId, isChecked);
            dontShowAgainCheckBox.setOnAction(e -> DontShowAgainLookup.dontShowAgain(dontShowAgainId, dontShowAgainCheckBox.isSelected()));
        }
    }

    protected void addDontShowAgainCheckBox() {
        this.addDontShowAgainCheckBox(false);
    }

    protected void addButtons() {
        if (!hideCloseButton) {
            closeButton = new AutoTooltipButton(closeButtonText == null ? Res.get(""shared.close"") : closeButtonText);
            closeButton.getStyleClass().add(""compact-button"");
            closeButton.setOnAction(event -> doClose());
            closeButton.setMinWidth(70);
            HBox.setHgrow(closeButton, Priority.SOMETIMES);
        }

        Pane spacer = new Pane();

        if (buttonAlignment == HPos.RIGHT) {
            HBox.setHgrow(spacer, Priority.ALWAYS);
            spacer.setMaxWidth(Double.MAX_VALUE);
        }

        buttonBox = new HBox();

        GridPane.setHalignment(buttonBox, buttonAlignment);
        GridPane.setRowIndex(buttonBox, ++rowIndex);
        GridPane.setColumnSpan(buttonBox, 2);
        GridPane.setMargin(buttonBox, new Insets(buttonDistance, 0, 0, 0));
        gridPane.getChildren().add(buttonBox);

        if (actionHandlerOptional.isPresent() || actionButtonText != null) {
            actionButton = new AutoTooltipButton(actionButtonText == null ? Res.get(""shared.ok"") : actionButtonText);

            if (!disableActionButton)
                actionButton.setDefaultButton(true);
            else
                actionButton.setDisable(true);

            HBox.setHgrow(actionButton, Priority.SOMETIMES);

            actionButton.getStyleClass().add(""action-button"");
            //TODO app wide focus
            //actionButton.requestFocus();

            if (!disableActionButton) {
                actionButton.setOnAction(event -> {
                    hide();
                    actionHandlerOptional.ifPresent(Runnable::run);
                });
            }

            buttonBox.setSpacing(10);

            buttonBox.setAlignment(Pos.CENTER);

            if (buttonAlignment == HPos.RIGHT)
                buttonBox.getChildren().add(spacer);

            buttonBox.getChildren().addAll(actionButton);

            if (secondaryActionButtonText != null && secondaryActionHandlerOptional.isPresent()) {
                secondaryActionButton = new AutoTooltipButton(secondaryActionButtonText);
                secondaryActionButton.setOnAction(event -> {
                    hide();
                    secondaryActionHandlerOptional.ifPresent(Runnable::run);
                });

                buttonBox.getChildren().add(secondaryActionButton);
            }

            if (!hideCloseButton)
                buttonBox.getChildren().add(closeButton);
        } else if (!hideCloseButton) {
            closeButton.setDefaultButton(true);
            buttonBox.getChildren().addAll(spacer, closeButton);
        }
    }

    protected void doClose() {
        hide();
        closeHandlerOptional.ifPresent(Runnable::run);
    }

    protected void setTruncatedMessage() {
        if (message != null && message.length() > maxChar)
            truncatedMessage = StringUtils.abbreviate(message, maxChar);
        else truncatedMessage = Objects.requireNonNullElse(message, """");
    }

    // separate a popup message from optional hyperlinks.  [bisq-network/bisq/pull/4637]
    // hyperlinks are distinguished by [HYPERLINK:] tag
    // referenced in order from within the message via [1], [2] etc.
    // e.g. [HYPERLINK:https://bisq.wiki]
    private void preProcessMessage(String message) {
        Pattern pattern = Pattern.compile(""\\[HYPERLINK:(.*?)\\]"");
        Matcher matcher = pattern.matcher(message);
        String work = message;
        while (matcher.find()) {  // extract hyperlinks & store in array
            if (messageHyperlinks == null) {
                messageHyperlinks = new ArrayList<>();
            }
            messageHyperlinks.add(matcher.group(1));
            // replace hyperlink in message with [n] reference
            work = work.replaceFirst(pattern.toString(), String.format(""[%d]"", messageHyperlinks.size()));
        }
        this.message = work;
        setTruncatedMessage();
    }

    protected double getDuration(double duration) {
        return useAnimation && GlobalSettings.getUseAnimations() ? duration : 1;
    }

    public boolean isDisplayed() {
        return isDisplayed;
    }

    @Override
    public String toString() {
        return ""Popup{"" +
                ""headLine='"" + headLine + '\'' +
                "", message='"" + message + '\'' +
                '}';
    }
}{'AvgLine': 10, 'CountLine': 928, 'CountStmt': 532, 'MaxNesting': 4, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 423, 'MaxEssential': 1, 'SumEssential': 83, 'AvgCyclomatic': 2, 'CountLineCode': 752, 'CountStmtDecl': 150, 'MaxCyclomatic': 12, 'SumCyclomatic': 161, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 151, 'CountSemicolon': 392, 'CountDeclMethod': 69, 'CountLineCodeExe': 528, 'CountLineComment': 28, 'CountClassCoupled': 73, 'CountClassDerived': 51, 'CountLineCodeDecl': 177, 'CountDeclMethodAll': 69, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 14, 'SumCyclomaticStrict': 169, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 41, 'MaxCyclomaticModified': 12, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 153, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 69, 'CountDeclMethodProtected': 24, 'CountClassCoupledModified': 73, 'CountDeclInstanceVariable': 39, 'PercentLackOfCohesionModified': 91}"
2763,Java,"@Slf4j
public abstract class TradeTask extends Task<TradeModel> {
    protected final ProcessModel processModel;
    protected final Trade trade;

    protected TradeTask(TaskRunner<Trade> taskHandler, Trade trade) {
        super(taskHandler, trade);

        this.trade = trade;
        processModel = trade.getProcessModel();
    }

    @Override
    protected void complete() {
        processModel.getTradeManager().requestPersistence();

        super.complete();
    }

    @Override
    protected void failed() {
        trade.setErrorMessage(errorMessage);
        processModel.getTradeManager().requestPersistence();

        super.failed();
    }

    @Override
    protected void failed(String message) {
        appendToErrorMessage(message);
        trade.setErrorMessage(errorMessage);
        processModel.getTradeManager().requestPersistence();

        super.failed();
    }

    @Override
    protected void failed(Throwable t) {
        t.printStackTrace();
        appendExceptionToErrorMessage(t);
        trade.setErrorMessage(errorMessage);
        processModel.getTradeManager().requestPersistence();

        super.failed();
    }
}",1,64 2000 777 539 587 2001 650 2002 60 2003 62 123 775 657 2004 2005 59 775 657 2006 2007 59 775 2001 40 2008 60 2006 62 2009 44 2006 2007 41 123 818 40 2009 44 2007 41 59 823 46 2007 61 2007 59 2005 61 2007 46 2010 40 41 59 125 64 2011 775 865 2012 40 41 123 2005 46 2013 40 41 46 2014 40 41 59 818 46 2012 40 41 59 125 64 2011 775 865 2015 40 41 123 2007 46 2016 40 2017 41 59 2005 46 2018 40 41 46 2019 40 41 59 818 46 2015 40 41 59 125 64 2011 775 865 2015 40 2020 2021 41 123 2022 40 2021 41 59 2007 46 2023 40 2024 41 59 2005 46 2025 40 41 46 2026 40 41 59 818 46 2015 40 41 59 125 64 2011 775 865 2015 40 2027 2028 41 123 2028 46 2029 40 41 59 2030 40 2028 41 59 2007 46 2031 40 2032 41 59 2005 46 2033 40 41 46 2034 40 41 59 818 46 2015 40 41 59 125 125 ,"{'AvgLine': 7, 'CountLine': 46, 'CountStmt': 25, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 17, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 36, 'CountStmtDecl': 8, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountSemicolon': 19, 'CountDeclMethod': 5, 'CountLineCodeExe': 17, 'CountLineComment': 0, 'CountClassCoupled': 10, 'CountClassDerived': 53, 'CountLineCodeDecl': 13, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 9, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 5, 'CountClassCoupledModified': 10, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 9}"
3733,Java,"@Slf4j
public class CliMain {

    public static void main(String[] args) {
        try {
            run(args);
        } catch (Throwable t) {
            err.println(""Error: "" + t.getMessage());
            exit(1);
        }
    }

    public static void run(String[] args) {
        var parser = new OptionParser();

        var helpOpt = parser.accepts(OPT_HELP, ""Print this help text"")
                .forHelp();

        var hostOpt = parser.accepts(OPT_HOST, ""rpc server hostname or ip"")
                .withRequiredArg()
                .defaultsTo(""localhost"");

        var portOpt = parser.accepts(OPT_PORT, ""rpc server port"")
                .withRequiredArg()
                .ofType(Integer.class)
                .defaultsTo(9998);

        var passwordOpt = parser.accepts(OPT_PASSWORD, ""rpc server password"")
                .withRequiredArg();

        // Parse the CLI opts host, port, password, method name, and help.  The help opt
        // may indicate the user is asking for method level help, and will be excluded
        // from the parsed options if a method opt is present in String[] args.
        OptionSet options = parser.parse(new ArgumentList(args).getCLIArguments());
        @SuppressWarnings(""unchecked"")
        var nonOptionArgs = (List<String>) options.nonOptionArguments();

        // If neither the help opt nor a method name is present, print CLI level help
        // to stderr and throw an exception.
        if (!options.has(helpOpt) && nonOptionArgs.isEmpty()) {
            printHelp(parser, err);
            throw new IllegalArgumentException(""no method specified"");
        }

        // If the help opt is present, but not a method name, print CLI level help
        // to stdout.
        if (options.has(helpOpt) && nonOptionArgs.isEmpty()) {
            printHelp(parser, out);
            return;
        }

        var host = options.valueOf(hostOpt);
        var port = options.valueOf(portOpt);
        var password = options.valueOf(passwordOpt);
        if (password == null)
            throw new IllegalArgumentException(""missing required 'password' option"");

        var methodName = nonOptionArgs.get(0);
        Method method;
        try {
            method = getMethodFromCmd(methodName);
        } catch (IllegalArgumentException ex) {
            throw new IllegalArgumentException(format(""'%s' is not a supported method"", methodName));
        }

        GrpcClient client = new GrpcClient(host, port, password);
        try {
            switch (method) {
                case getversion: {
                    if (new SimpleMethodOptionParser(args).parse().isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var version = client.getVersion();
                    out.println(version);
                    return;
                }
                case getbalance: {
                    var opts = new GetBalanceOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var currencyCode = opts.getCurrencyCode();
                    var balances = client.getBalances(currencyCode);
                    switch (currencyCode.toUpperCase()) {
                        case ""BSQ"":
                            new TableBuilder(BSQ_BALANCE_TBL, balances.getBsq()).build().print(out);
                            break;
                        case ""BTC"":
                            new TableBuilder(BTC_BALANCE_TBL, balances.getBtc()).build().print(out);
                            break;
                        case """":
                        default: {
                            out.println(""BTC"");
                            new TableBuilder(BTC_BALANCE_TBL, balances.getBtc()).build().print(out);
                            out.println(""BSQ"");
                            new TableBuilder(BSQ_BALANCE_TBL, balances.getBsq()).build().print(out);
                            break;
                        }
                    }
                    return;
                }
                case getaddressbalance: {
                    var opts = new GetAddressBalanceOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var address = opts.getAddress();
                    var addressBalance = client.getAddressBalance(address);
                    new TableBuilder(ADDRESS_BALANCE_TBL, addressBalance).build().print(out);
                    return;
                }
                case getbtcprice: {
                    var opts = new GetBTCMarketPriceOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var currencyCode = opts.getCurrencyCode();
                    var price = client.getBtcPrice(currencyCode);
                    out.println(formatInternalFiatPrice(price));
                    return;
                }
                case getfundingaddresses: {
                    if (new SimpleMethodOptionParser(args).parse().isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var fundingAddresses = client.getFundingAddresses();
                    new TableBuilder(ADDRESS_BALANCE_TBL, fundingAddresses).build().print(out);
                    return;
                }
                case getunusedbsqaddress: {
                    if (new SimpleMethodOptionParser(args).parse().isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var address = client.getUnusedBsqAddress();
                    out.println(address);
                    return;
                }
                case sendbsq: {
                    var opts = new SendBsqOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var address = opts.getAddress();
                    var amount = opts.getAmount();
                    verifyStringIsValidDecimal(OPT_AMOUNT, amount);

                    var txFeeRate = opts.getFeeRate();
                    if (!txFeeRate.isEmpty())
                        verifyStringIsValidLong(OPT_TX_FEE_RATE, txFeeRate);

                    var txInfo = client.sendBsq(address, amount, txFeeRate);
                    out.printf(""%s bsq sent to %s in tx %s%n"",
                            amount,
                            address,
                            txInfo.getTxId());
                    return;
                }
                case sendbtc: {
                    var opts = new SendBtcOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var address = opts.getAddress();
                    var amount = opts.getAmount();
                    verifyStringIsValidDecimal(OPT_AMOUNT, amount);

                    var txFeeRate = opts.getFeeRate();
                    if (!txFeeRate.isEmpty())
                        verifyStringIsValidLong(OPT_TX_FEE_RATE, txFeeRate);

                    var memo = opts.getMemo();

                    var txInfo = client.sendBtc(address, amount, txFeeRate, memo);
                    out.printf(""%s btc sent to %s in tx %s%n"",
                            amount,
                            address,
                            txInfo.getTxId());
                    return;
                }
                case verifybsqsenttoaddress: {
                    var opts = new VerifyBsqSentToAddressOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var address = opts.getAddress();
                    var amount = opts.getAmount();
                    verifyStringIsValidDecimal(OPT_AMOUNT, amount);

                    var bsqWasSent = client.verifyBsqSentToAddress(address, amount);
                    out.printf(""%s bsq %s sent to address %s%n"",
                            amount,
                            bsqWasSent ? ""has been"" : ""has not been"",
                            address);
                    return;
                }
                case gettxfeerate: {
                    if (new SimpleMethodOptionParser(args).parse().isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var txFeeRate = client.getTxFeeRate();
                    out.println(formatTxFeeRateInfo(txFeeRate));
                    return;
                }
                case settxfeerate: {
                    var opts = new SetTxFeeRateOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var txFeeRate = client.setTxFeeRate(toLong(opts.getFeeRate()));
                    out.println(formatTxFeeRateInfo(txFeeRate));
                    return;
                }
                case unsettxfeerate: {
                    if (new SimpleMethodOptionParser(args).parse().isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var txFeeRate = client.unsetTxFeeRate();
                    out.println(formatTxFeeRateInfo(txFeeRate));
                    return;
                }
                case gettransaction: {
                    var opts = new GetTransactionOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var txId = opts.getTxId();
                    var tx = client.getTransaction(txId);
                    new TableBuilder(TRANSACTION_TBL, tx).build().print(out);
                    return;
                }
                case createoffer: {
                    var opts = new CreateOfferOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var isSwap = opts.getIsSwap();
                    var paymentAcctId = opts.getPaymentAccountId();
                    var direction = opts.getDirection();
                    var currencyCode = opts.getCurrencyCode();
                    var amount = toSatoshis(opts.getAmount());
                    var minAmount = toSatoshis(opts.getMinAmount());
                    var useMarketBasedPrice = opts.isUsingMktPriceMargin();
                    var fixedPrice = opts.getFixedPrice();
                    var marketPriceMargin = opts.getMktPriceMarginAsBigDecimal();
                    var securityDeposit = isSwap ? 0.00 : toSecurityDepositAsPct(opts.getSecurityDeposit());
                    var makerFeeCurrencyCode = opts.getMakerFeeCurrencyCode();
                    var triggerPrice = 0; // Cannot be defined until offer is in book.
                    OfferInfo offer;
                    if (isSwap) {
                        offer = client.createBsqSwapOffer(direction,
                                amount,
                                minAmount,
                                fixedPrice);
                    } else {
                        offer = client.createOffer(direction,
                                currencyCode,
                                amount,
                                minAmount,
                                useMarketBasedPrice,
                                fixedPrice,
                                marketPriceMargin.doubleValue(),
                                securityDeposit,
                                paymentAcctId,
                                makerFeeCurrencyCode,
                                triggerPrice);
                    }
                    new TableBuilder(OFFER_TBL, offer).build().print(out);
                    return;
                }
                case editoffer: {
                    var offerIdOpt = new OfferIdOptionParser(args, true).parse();
                    if (offerIdOpt.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    // What kind of offer is being edited? BSQ swaps cannot be edited.
                    var offerId = offerIdOpt.getOfferId();
                    var offerCategory = client.getMyOfferCategory(offerId);
                    if (offerCategory.equals(BSQ_SWAP))
                        throw new IllegalStateException(""bsq swap offers cannot be edited,""
                                + "" but you may cancel them without forfeiting any funds"");

                    var opts = new EditOfferOptionParser(args).parse();
                    var fixedPrice = opts.getFixedPrice();
                    var isUsingMktPriceMargin = opts.isUsingMktPriceMargin();
                    var marketPriceMargin = opts.getMktPriceMarginAsBigDecimal();
                    var triggerPrice = toInternalTriggerPrice(client, offerId, opts.getTriggerPriceAsBigDecimal());
                    var enable = opts.getEnableAsSignedInt();
                    var editOfferType = opts.getOfferEditType();
                    client.editOffer(offerId,
                            fixedPrice,
                            isUsingMktPriceMargin,
                            marketPriceMargin.doubleValue(),
                            triggerPrice,
                            enable,
                            editOfferType);
                    out.println(""offer has been edited"");
                    return;
                }
                case canceloffer: {
                    var opts = new CancelOfferOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var offerId = opts.getOfferId();
                    client.cancelOffer(offerId);
                    out.println(""offer canceled and removed from offer book"");
                    return;
                }
                case getoffer: {
                    var opts = new OfferIdOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var offerId = opts.getOfferId();
                    var offer = client.getOffer(offerId);
                    new TableBuilder(OFFER_TBL, offer).build().print(out);
                    return;
                }
                case getmyoffer: {
                    var opts = new OfferIdOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var offerId = opts.getOfferId();
                    var offer = client.getMyOffer(offerId);
                    new TableBuilder(OFFER_TBL, offer).build().print(out);
                    return;
                }
                case getoffers: {
                    var opts = new GetOffersOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var direction = opts.getDirection();
                    var currencyCode = opts.getCurrencyCode();
                    List<OfferInfo> offers = client.getOffers(direction, currencyCode);
                    if (offers.isEmpty())
                        out.printf(""no %s %s offers found%n"", direction, currencyCode);
                    else
                        new TableBuilder(OFFER_TBL, offers).build().print(out);

                    return;
                }
                case getmyoffers: {
                    var opts = new GetOffersOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var direction = opts.getDirection();
                    var currencyCode = opts.getCurrencyCode();
                    List<OfferInfo> offers = client.getMyOffers(direction, currencyCode);
                    if (offers.isEmpty())
                        out.printf(""no %s %s offers found%n"", direction, currencyCode);
                    else
                        new TableBuilder(OFFER_TBL, offers).build().print(out);

                    return;
                }
                case takeoffer: {
                    var offerIdOpt = new OfferIdOptionParser(args, true).parse();
                    if (offerIdOpt.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var offerId = offerIdOpt.getOfferId();
                    TradeInfo trade;
                    // We only send an 'offer-id' param when taking a BsqSwapOffer.
                    // Find out what kind of offer is being taken before sending a
                    // 'takeoffer' request.
                    var offerCategory = client.getAvailableOfferCategory(offerId);
                    if (offerCategory.equals(BSQ_SWAP)) {
                        trade = client.takeBsqSwapOffer(offerId);
                    } else {
                        var opts = new TakeOfferOptionParser(args).parse();
                        var paymentAccountId = opts.getPaymentAccountId();
                        var takerFeeCurrencyCode = opts.getTakerFeeCurrencyCode();
                        trade = client.takeOffer(offerId, paymentAccountId, takerFeeCurrencyCode);
                    }
                    out.printf(""trade %s successfully taken%n"", trade.getTradeId());
                    return;
                }
                case gettrade: {
                    // TODO make short-id a valid argument?
                    var opts = new GetTradeOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var tradeId = opts.getTradeId();
                    var showContract = opts.getShowContract();
                    var trade = client.getTrade(tradeId);
                    if (showContract)
                        out.println(trade.getContractAsJson());
                    else
                        new TableBuilder(TRADE_DETAIL_TBL, trade).build().print(out);

                    return;
                }
                case confirmpaymentstarted: {
                    var opts = new GetTradeOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var tradeId = opts.getTradeId();
                    client.confirmPaymentStarted(tradeId);
                    out.printf(""trade %s payment started message sent%n"", tradeId);
                    return;
                }
                case confirmpaymentreceived: {
                    var opts = new GetTradeOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var tradeId = opts.getTradeId();
                    client.confirmPaymentReceived(tradeId);
                    out.printf(""trade %s payment received message sent%n"", tradeId);
                    return;
                }
                case keepfunds: {
                    var opts = new GetTradeOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var tradeId = opts.getTradeId();
                    client.keepFunds(tradeId);
                    out.printf(""funds from trade %s saved in bisq wallet%n"", tradeId);
                    return;
                }
                case withdrawfunds: {
                    var opts = new WithdrawFundsOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var tradeId = opts.getTradeId();
                    var address = opts.getAddress();
                    // Multi-word memos must be double-quoted.
                    var memo = opts.getMemo();
                    client.withdrawFunds(tradeId, address, memo);
                    out.printf(""trade %s funds sent to btc address %s%n"", tradeId, address);
                    return;
                }
                case getpaymentmethods: {
                    if (new SimpleMethodOptionParser(args).parse().isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var paymentMethods = client.getPaymentMethods();
                    paymentMethods.forEach(p -> out.println(p.getId()));
                    return;
                }
                case getpaymentacctform: {
                    var opts = new GetPaymentAcctFormOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var paymentMethodId = opts.getPaymentMethodId();
                    String jsonString = client.getPaymentAcctFormAsJson(paymentMethodId);
                    File jsonFile = saveFileToDisk(paymentMethodId.toLowerCase(),
                            "".json"",
                            jsonString);
                    out.printf(""payment account form %s%nsaved to %s%n"",
                            jsonString, jsonFile.getAbsolutePath());
                    out.println(""Edit the file, and use as the argument to a 'createpaymentacct' command."");
                    return;
                }
                case createpaymentacct: {
                    var opts = new CreatePaymentAcctOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var paymentAccountForm = opts.getPaymentAcctForm();
                    String jsonString;
                    try {
                        jsonString = new String(Files.readAllBytes(paymentAccountForm));
                    } catch (IOException e) {
                        throw new IllegalStateException(
                                format(""could not read %s"", paymentAccountForm));
                    }
                    var paymentAccount = client.createPaymentAccount(jsonString);
                    out.println(""payment account saved"");
                    new TableBuilder(PAYMENT_ACCOUNT_TBL, paymentAccount).build().print(out);
                    return;
                }
                case createcryptopaymentacct: {
                    var opts =
                            new CreateCryptoCurrencyPaymentAcctOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var accountName = opts.getAccountName();
                    var currencyCode = opts.getCurrencyCode();
                    var address = opts.getAddress();
                    var isTradeInstant = opts.getIsTradeInstant();
                    var paymentAccount = client.createCryptoCurrencyPaymentAccount(accountName,
                            currencyCode,
                            address,
                            isTradeInstant);
                    out.println(""payment account saved"");
                    new TableBuilder(PAYMENT_ACCOUNT_TBL, paymentAccount).build().print(out);
                    return;
                }
                case getpaymentaccts: {
                    if (new SimpleMethodOptionParser(args).parse().isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var paymentAccounts = client.getPaymentAccounts();
                    if (paymentAccounts.size() > 0)
                        new TableBuilder(PAYMENT_ACCOUNT_TBL, paymentAccounts).build().print(out);
                    else
                        out.println(""no payment accounts are saved"");

                    return;
                }
                case lockwallet: {
                    if (new SimpleMethodOptionParser(args).parse().isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    client.lockWallet();
                    out.println(""wallet locked"");
                    return;
                }
                case unlockwallet: {
                    var opts = new UnlockWalletOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var walletPassword = opts.getPassword();
                    var timeout = opts.getUnlockTimeout();
                    client.unlockWallet(walletPassword, timeout);
                    out.println(""wallet unlocked"");
                    return;
                }
                case removewalletpassword: {
                    var opts = new RemoveWalletPasswordOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var walletPassword = opts.getPassword();
                    client.removeWalletPassword(walletPassword);
                    out.println(""wallet decrypted"");
                    return;
                }
                case setwalletpassword: {
                    var opts = new SetWalletPasswordOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var walletPassword = opts.getPassword();
                    var newWalletPassword = opts.getNewPassword();
                    client.setWalletPassword(walletPassword, newWalletPassword);
                    out.println(""wallet encrypted"" + (!newWalletPassword.isEmpty() ? "" with new password"" : """"));
                    return;
                }
                case registerdisputeagent: {
                    var opts = new RegisterDisputeAgentOptionParser(args).parse();
                    if (opts.isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    var disputeAgentType = opts.getDisputeAgentType();
                    var registrationKey = opts.getRegistrationKey();
                    client.registerDisputeAgent(disputeAgentType, registrationKey);
                    out.println(disputeAgentType + "" registered"");
                    return;
                }
                case stop: {
                    if (new SimpleMethodOptionParser(args).parse().isForHelp()) {
                        out.println(client.getMethodHelp(method));
                        return;
                    }
                    client.stopServer();
                    out.println(""server shutdown signal received"");
                    return;
                }
                default: {
                    throw new RuntimeException(format(""unhandled method '%s'"", method));
                }
            }
        } catch (StatusRuntimeException ex) {
            // Remove the leading gRPC status code (e.g. ""UNKNOWN: "") from the message
            String message = ex.getMessage().replaceFirst(""^[A-Z_]+: "", """");
            if (message.equals(""io exception""))
                throw new RuntimeException(message + "", server may not be running"", ex);
            else
                throw new RuntimeException(message, ex);
        }
    }

    private static Method getMethodFromCmd(String methodName) {
        // TODO if we use const type for enum we need add some mapping.  Even if we don't
        //  change now it is handy to have flexibility in case we change internal code
        //  and don't want to break user commands.
        return Method.valueOf(methodName.toLowerCase());
    }

    @SuppressWarnings(""SameParameterValue"")
    private static void verifyStringIsValidDecimal(String optionLabel, String optionValue) {
        try {
            Double.parseDouble(optionValue);
        } catch (NumberFormatException ex) {
            throw new IllegalArgumentException(format(""--%s=%s, '%s' is not a number"",
                    optionLabel,
                    optionValue,
                    optionValue));
        }
    }

    @SuppressWarnings(""SameParameterValue"")
    private static void verifyStringIsValidLong(String optionLabel, String optionValue) {
        try {
            Long.parseLong(optionValue);
        } catch (NumberFormatException ex) {
            throw new IllegalArgumentException(format(""--%s=%s, '%s' is not a number"",
                    optionLabel,
                    optionValue,
                    optionValue));
        }
    }

    private static long toLong(String param) {
        try {
            return Long.parseLong(param);
        } catch (NumberFormatException ex) {
            throw new IllegalArgumentException(format(""'%s' is not a number"", param));
        }
    }

    private static long toInternalTriggerPrice(GrpcClient client,
                                               String offerId,
                                               BigDecimal unscaledTriggerPrice) {
        if (unscaledTriggerPrice.compareTo(ZERO) >= 0) {
            // Unfortunately, the EditOffer proto triggerPrice field was declared as
            // a long instead of a string, so the CLI has to look at the offer to know
            // how to scale the trigger-price (for a fiat or altcoin offer) param sent
            // to the server in its 'editoffer' request.  That means a preliminary round
            // trip to the server:  a 'getmyoffer' request.
            var offer = client.getMyOffer(offerId);
            if (offer.getCounterCurrencyCode().equals(""BTC""))
                return toInternalCryptoCurrencyPrice(unscaledTriggerPrice);
            else
                return toInternalFiatPrice(unscaledTriggerPrice);
        } else {
            return 0L;
        }
    }

    private static File saveFileToDisk(String prefix,
                                       @SuppressWarnings(""SameParameterValue"") String suffix,
                                       String text) {
        String timestamp = Long.toUnsignedString(new Date().getTime());
        String relativeFileName = prefix + ""_"" + timestamp + suffix;
        try {
            Path path = Paths.get(relativeFileName);
            if (!Files.exists(path)) {
                try (PrintWriter out = new PrintWriter(path.toString())) {
                    out.println(text);
                }
                return path.toAbsolutePath().toFile();
            } else {
                throw new IllegalStateException(format(""could not overwrite existing file '%s'"", relativeFileName));
            }
        } catch (FileNotFoundException e) {
            throw new IllegalStateException(format(""could not create file '%s'"", relativeFileName));
        }
    }

    private static void printHelp(OptionParser parser, @SuppressWarnings(""SameParameterValue"") PrintStream stream) {
        try {
            stream.println(""Bisq RPC Client"");
            stream.println();
            stream.println(""Usage: bisq-cli [options] <method> [params]"");
            stream.println();
            parser.printHelpOn(stream);
            stream.println();
            String rowFormat = ""%-25s%-52s%s%n"";
            stream.format(rowFormat, ""Method"", ""Params"", ""Description"");
            stream.format(rowFormat, ""------"", ""------"", ""------------"");
            stream.format(rowFormat, getversion.name(), """", ""Get server version"");
            stream.println();
            stream.format(rowFormat, getbalance.name(), ""[--currency-code=<bsq|btc>]"", ""Get server wallet balances"");
            stream.println();
            stream.format(rowFormat, getaddressbalance.name(), ""--address=<btc-address>"", ""Get server wallet address balance"");
            stream.println();
            stream.format(rowFormat, getbtcprice.name(), ""--currency-code=<currency-code>"", ""Get current market btc price"");
            stream.println();
            stream.format(rowFormat, getfundingaddresses.name(), """", ""Get BTC funding addresses"");
            stream.println();
            stream.format(rowFormat, getunusedbsqaddress.name(), """", ""Get unused BSQ address"");
            stream.println();
            stream.format(rowFormat, sendbsq.name(), ""--address=<bsq-address> --amount=<bsq-amount>  \\"", ""Send BSQ"");
            stream.format(rowFormat, """", ""[--tx-fee-rate=<sats/byte>]"", """");
            stream.println();
            stream.format(rowFormat, sendbtc.name(), ""--address=<btc-address> --amount=<btc-amount> \\"", ""Send BTC"");
            stream.format(rowFormat, """", ""[--tx-fee-rate=<sats/byte>]"", """");
            stream.format(rowFormat, """", ""[--memo=<\""memo\"">]"", """");
            stream.println();
            stream.format(rowFormat, verifybsqsenttoaddress.name(), ""--address=<bsq-address> --amount=<bsq-amount>"",
                    ""Verify amount was sent to BSQ wallet address"");
            stream.println();
            stream.format(rowFormat, gettxfeerate.name(), """", ""Get current tx fee rate in sats/byte"");
            stream.println();
            stream.format(rowFormat, settxfeerate.name(), ""--tx-fee-rate=<sats/byte>"", ""Set custom tx fee rate in sats/byte"");
            stream.println();
            stream.format(rowFormat, unsettxfeerate.name(), """", ""Unset custom tx fee rate"");
            stream.println();
            stream.format(rowFormat, gettransaction.name(), ""--transaction-id=<transaction-id>"", ""Get transaction with id"");
            stream.println();
            stream.format(rowFormat, createoffer.name(), ""--payment-account=<payment-account-id> \\"", ""Create and place an offer"");
            stream.format(rowFormat, """", ""--direction=<buy|sell> \\"", """");
            stream.format(rowFormat, """", ""--currency-code=<currency-code> \\"", """");
            stream.format(rowFormat, """", ""--amount=<btc-amount> \\"", """");
            stream.format(rowFormat, """", ""[--min-amount=<min-btc-amount>] \\"", """");
            stream.format(rowFormat, """", ""--fixed-price=<price> | --market-price-margin=<percent> \\"", """");
            stream.format(rowFormat, """", ""--security-deposit=<percent> \\"", """");
            stream.format(rowFormat, """", ""[--fee-currency=<bsq|btc>]"", """");
            stream.format(rowFormat, """", ""[--trigger-price=<price>]"", """");
            stream.format(rowFormat, """", ""[--swap=<true|false>]"", """");
            stream.println();
            stream.format(rowFormat, editoffer.name(), ""--offer-id=<offer-id> \\"", ""Edit offer with id"");
            stream.format(rowFormat, """", ""[--fixed-price=<price>] \\"", """");
            stream.format(rowFormat, """", ""[--market-price-margin=<percent>] \\"", """");
            stream.format(rowFormat, """", ""[--trigger-price=<price>] \\"", """");
            stream.format(rowFormat, """", ""[--enabled=<true|false>]"", """");
            stream.println();
            stream.format(rowFormat, canceloffer.name(), ""--offer-id=<offer-id>"", ""Cancel offer with id"");
            stream.println();
            stream.format(rowFormat, getoffer.name(), ""--offer-id=<offer-id>"", ""Get current offer with id"");
            stream.println();
            stream.format(rowFormat, getmyoffer.name(), ""--offer-id=<offer-id>"", ""Get my current offer with id"");
            stream.println();
            stream.format(rowFormat, getoffers.name(), ""--direction=<buy|sell> \\"", ""Get current offers"");
            stream.format(rowFormat, """", ""--currency-code=<currency-code>"", """");
            stream.println();
            stream.format(rowFormat, getmyoffers.name(), ""--direction=<buy|sell> \\"", ""Get my current offers"");
            stream.format(rowFormat, """", ""--currency-code=<currency-code>"", """");
            stream.println();
            stream.format(rowFormat, takeoffer.name(), ""--offer-id=<offer-id> \\"", ""Take offer with id"");
            stream.format(rowFormat, """", ""[--payment-account=<payment-account-id>]"", """");
            stream.format(rowFormat, """", ""[--fee-currency=<btc|bsq>]"", """");
            stream.println();
            stream.format(rowFormat, gettrade.name(), ""--trade-id=<trade-id> \\"", ""Get trade summary or full contract"");
            stream.format(rowFormat, """", ""[--show-contract=<true|false>]"", """");
            stream.println();
            stream.format(rowFormat, confirmpaymentstarted.name(), ""--trade-id=<trade-id>"", ""Confirm payment started"");
            stream.println();
            stream.format(rowFormat, confirmpaymentreceived.name(), ""--trade-id=<trade-id>"", ""Confirm payment received"");
            stream.println();
            stream.format(rowFormat, keepfunds.name(), ""--trade-id=<trade-id>"", ""Keep received funds in Bisq wallet"");
            stream.println();
            stream.format(rowFormat, withdrawfunds.name(), ""--trade-id=<trade-id> --address=<btc-address> \\"",
                    ""Withdraw received funds to external wallet address"");
            stream.format(rowFormat, """", ""[--memo=<\""memo\"">]"", """");
            stream.println();
            stream.format(rowFormat, getpaymentmethods.name(), """", ""Get list of supported payment account method ids"");
            stream.println();
            stream.format(rowFormat, getpaymentacctform.name(), ""--payment-method-id=<payment-method-id>"", ""Get a new payment account form"");
            stream.println();
            stream.format(rowFormat, createpaymentacct.name(), ""--payment-account-form=<path>"", ""Create a new payment account"");
            stream.println();
            stream.format(rowFormat, createcryptopaymentacct.name(), ""--account-name=<name> \\"", ""Create a new cryptocurrency payment account"");
            stream.format(rowFormat, """", ""--currency-code=<bsq> \\"", """");
            stream.format(rowFormat, """", ""--address=<bsq-address>"", """");
            stream.format(rowFormat, """", ""--trade-instant=<true|false>"", """");
            stream.println();
            stream.format(rowFormat, getpaymentaccts.name(), """", ""Get user payment accounts"");
            stream.println();
            stream.format(rowFormat, lockwallet.name(), """", ""Remove wallet password from memory, locking the wallet"");
            stream.println();
            stream.format(rowFormat, unlockwallet.name(), ""--wallet-password=<password> --timeout=<seconds>"",
                    ""Store wallet password in memory for timeout seconds"");
            stream.println();
            stream.format(rowFormat, setwalletpassword.name(), ""--wallet-password=<password> \\"",
                    ""Encrypt wallet with password, or set new password on encrypted wallet"");
            stream.format(rowFormat, """", ""[--new-wallet-password=<new-password>]"", """");
            stream.println();
            stream.format(rowFormat, stop.name(), """", ""Shut down the server"");
            stream.println();
            stream.println(""Method Help Usage: bisq-cli [options] <method> --help"");
            stream.println();
        } catch (IOException ex) {
            ex.printStackTrace(stream);
        }
    }
}",1,64 2000 777 587 2001 123 777 809 865 2002 40 2003 91 93 2004 41 123 830 123 2005 40 2004 41 59 125 580 40 2006 2007 41 123 2008 46 2009 40 362 43 2007 46 2010 40 41 41 59 2011 40 1501 41 59 125 125 777 809 865 2012 40 2003 91 93 2004 41 123 2013 2014 61 744 2015 40 41 59 2013 2016 61 2014 46 2017 40 2018 44 362 41 46 2019 40 41 59 2013 2020 61 2014 46 2017 40 2021 44 362 41 46 2022 40 41 46 2023 40 362 41 59 2013 2024 61 2014 46 2017 40 2025 44 362 41 46 2022 40 41 46 2026 40 2027 46 587 41 46 2023 40 1505 41 59 2013 2028 61 2014 46 2017 40 2029 44 362 41 46 2022 40 41 59 330 330 330 2030 2031 61 2014 46 2032 40 744 2033 40 2004 41 46 2034 40 41 41 59 64 2035 40 362 41 2013 2036 61 40 2037 60 2003 62 41 2031 46 2038 40 41 59 330 330 688 40 33 2031 46 2039 40 2016 41 307 2036 46 2040 40 41 41 123 2041 40 2014 44 2042 41 59 825 744 2043 40 362 41 59 125 330 330 688 40 2031 46 2039 40 2016 41 307 2036 46 2040 40 41 41 123 2044 40 2014 44 2045 41 59 792 59 125 2013 2046 61 2031 46 2047 40 2020 41 59 2013 2048 61 2031 46 2047 40 2024 41 59 2013 2049 61 2031 46 2047 40 2028 41 59 688 40 2049 323 2050 41 825 744 2051 40 362 41 59 2013 2052 61 2036 46 2053 40 1500 41 59 2054 2055 59 830 123 2055 61 2056 40 2052 41 59 125 580 40 2051 2057 41 123 825 744 2051 40 2058 40 362 44 2052 41 41 59 125 2059 2060 61 744 2059 40 2046 44 2048 44 2049 41 59 830 123 819 40 2055 41 123 579 2061 58 123 688 40 744 2062 40 2004 41 46 2032 40 41 46 2063 40 41 41 123 2064 46 2065 40 2060 46 2066 40 2055 41 41 59 792 59 125 2013 2067 61 2060 46 2068 40 41 59 2069 46 2070 40 2067 41 59 792 59 125 579 2071 58 123 2013 2072 61 744 2073 40 2004 41 46 2032 40 41 59 688 40 2072 46 2074 40 41 41 123 2075 46 2076 40 2060 46 2077 40 2055 41 41 59 792 59 125 2013 2078 61 2072 46 2079 40 41 59 2013 2080 61 2060 46 2081 40 2078 41 59 819 40 2078 46 2082 40 41 41 123 579 362 58 744 2083 40 2084 44 2080 46 2085 40 41 41 46 2086 40 41 46 2087 40 2088 41 59 572 59 579 362 58 744 2083 40 2089 44 2080 46 2090 40 41 41 46 2086 40 41 46 2087 40 2088 41 59 572 59 579 362 58 613 58 123 2088 46 2091 40 362 41 59 744 2083 40 2089 44 2080 46 2090 40 41 41 46 2086 40 41 46 2087 40 2088 41 59 2088 46 2091 40 362 41 59 744 2083 40 2084 44 2080 46 2085 40 41 41 46 2086 40 41 46 2087 40 2088 41 59 572 59 125 125 792 59 125 579 2092 58 123 2013 2093 61 744 2094 40 2004 41 46 2032 40 41 59 688 40 2093 46 2095 40 41 41 123 2096 46 2097 40 2060 46 2098 40 2055 41 41 59 792 59 125 2013 2099 61 2093 46 2100 40 41 59 2013 2101 61 2060 46 2102 40 2099 41 59 744 2103 40 2104 44 2101 41 46 2105 40 41 46 2106 40 2107 41 59 792 59 125 579 2108 58 123 2013 2109 61 744 2110 40 2004 41 46 2032 40 41 59 688 40 2109 46 2111 40 41 41 123 2112 46 2113 40 2060 46 2114 40 2055 41 41 59 792 59 125 2013 2115 61 2109 46 2116 40 41 59 2013 2117 61 2060 46 2118 40 2115 41 59 2119 46 2120 40 2121 40 2117 41 41 59 792 59 125 579 2122 58 123 688 40 744 2123 40 2004 41 46 2032 40 41 46 2124 40 41 41 123 2125 46 2126 40 2060 46 2127 40 2055 41 41 59 792 59 125 2013 2128 61 2060 46 2129 40 41 59 744 2130 40 2131 44 2128 41 46 2132 40 41 46 2133 40 2134 41 59 792 59 125 579 2135 58 123 688 40 744 2136 40 2004 41 46 2032 40 41 46 2137 40 41 41 123 2138 46 2139 40 2060 46 2140 40 2055 41 41 59 792 59 125 2013 2141 61 2060 46 2142 40 41 59 2143 46 2144 40 2141 41 59 792 59 125 579 2145 58 123 2013 2146 61 744 2147 40 2004 41 46 2032 40 41 59 688 40 2146 46 2148 40 41 41 123 2149 46 2150 40 2060 46 2151 40 2055 41 41 59 792 59 125 2013 2152 61 2146 46 2153 40 41 59 2013 2154 61 2146 46 2155 40 41 59 2156 40 2157 44 2154 41 59 2013 2158 61 2146 46 2159 40 41 59 688 40 33 2158 46 2040 40 41 41 2160 40 2161 44 2158 41 59 2013 2162 61 2060 46 2163 40 2152 44 2154 44 2158 41 59 2164 46 2165 40 362 44 2154 44 2152 44 2162 46 2166 40 41 41 59 792 59 125 579 2167 58 123 2013 2168 61 744 2169 40 2004 41 46 2032 40 41 59 688 40 2168 46 2170 40 41 41 123 2171 46 2172 40 2060 46 2173 40 2055 41 41 59 792 59 125 2013 2174 61 2168 46 2175 40 41 59 2013 2176 61 2168 46 2177 40 41 59 2178 40 2179 44 2176 41 59 2013 2180 61 2168 46 2181 40 41 59 688 40 33 2180 46 2040 40 41 41 2182 40 2183 44 2180 41 59 2013 2184 61 2168 46 2185 40 41 59 2013 2186 61 2060 46 2187 40 2174 44 2176 44 2180 44 2184 41 59 2188 46 2189 40 362 44 2176 44 2174 44 2186 46 2190 40 41 41 59 792 59 125 579 2191 58 123 2013 2192 61 744 2193 40 2004 41 46 2032 40 41 59 688 40 2192 46 2194 40 41 41 123 2195 46 2196 40 2060 46 2197 40 2055 41 41 59 792 59 125 2013 2198 61 2192 46 2199 40 41 59 2013 2200 61 2192 46 2201 40 41 59 2202 40 2203 44 2200 41 59 2013 2204 61 2060 46 2205 40 2198 44 2200 41 59 2206 46 2207 40 362 44 2200 44 2204 63 362 58 362 44 2198 41 59 792 59 125 579 2208 58 123 688 40 744 2209 40 2004 41 46 2032 40 41 46 2210 40 41 41 123 2211 46 2212 40 2060 46 2213 40 2055 41 41 59 792 59 125 2013 2214 61 2060 46 2215 40 41 59 2216 46 2217 40 2218 40 2214 41 41 59 792 59 125 579 2219 58 123 2013 2220 61 744 2221 40 2004 41 46 2032 40 41 59 688 40 2220 46 2222 40 41 41 123 2223 46 2224 40 2060 46 2225 40 2055 41 41 59 792 59 125 2013 2226 61 2060 46 2227 40 2228 40 2220 46 2229 40 41 41 41 59 2230 46 2231 40 2232 40 2226 41 41 59 792 59 125 579 2233 58 123 688 40 744 2234 40 2004 41 46 2032 40 41 46 2235 40 41 41 123 2236 46 2237 40 2060 46 2238 40 2055 41 41 59 792 59 125 2013 2239 61 2060 46 2240 40 41 59 2241 46 2242 40 2243 40 2239 41 41 59 792 59 125 579 2244 58 123 2013 2245 61 744 2246 40 2004 41 46 2032 40 41 59 688 40 2245 46 2247 40 41 41 123 2248 46 2249 40 2060 46 2250 40 2055 41 41 59 792 59 125 2013 2251 61 2245 46 2252 40 41 59 2013 2253 61 2060 46 2254 40 2251 41 59 744 2255 40 2256 44 2253 41 46 2257 40 41 46 2258 40 2259 41 59 792 59 125 579 2260 58 123 2013 2261 61 744 2262 40 2004 41 46 2032 40 41 59 688 40 2261 46 2263 40 41 41 123 2264 46 2265 40 2060 46 2266 40 2055 41 41 59 792 59 125 2013 2267 61 2261 46 2268 40 41 59 2013 2269 61 2261 46 2270 40 41 59 2013 2271 61 2261 46 2272 40 41 59 2013 2273 61 2261 46 2274 40 41 59 2013 2275 61 2276 40 2261 46 2277 40 41 41 59 2013 2278 61 2276 40 2261 46 2279 40 41 41 59 2013 2280 61 2261 46 2281 40 41 59 2013 2282 61 2261 46 2283 40 41 59 2013 2284 61 2261 46 2285 40 41 59 2013 2286 61 2267 63 1500 58 2287 40 2261 46 2288 40 41 41 59 2013 2289 61 2261 46 2290 40 41 59 2013 2291 61 1500 59 330 2292 2293 59 688 40 2267 41 123 2293 61 2060 46 2294 40 2271 44 2275 44 2278 44 2282 41 59 125 630 123 2293 61 2060 46 2295 40 2271 44 2273 44 2275 44 2278 44 2280 44 2282 44 2284 46 2296 40 41 44 2286 44 2269 44 2289 44 2291 41 59 125 744 2297 40 2298 44 2293 41 46 2299 40 41 46 2300 40 2301 41 59 792 59 125 579 2302 58 123 2013 2303 61 744 2304 40 2004 44 2305 41 46 2032 40 41 59 688 40 2303 46 2306 40 41 41 123 2307 46 2308 40 2060 46 2309 40 2055 41 41 59 792 59 125 330 2013 2310 61 2303 46 2311 40 41 59 2013 2312 61 2060 46 2313 40 2310 41 59 688 40 2312 46 2314 40 2315 41 41 825 744 2316 40 362 43 362 41 59 2013 2317 61 744 2318 40 2004 41 46 2032 40 41 59 2013 2319 61 2317 46 2320 40 41 59 2013 2321 61 2317 46 2321 40 41 59 2013 2322 61 2317 46 2323 40 41 59 2013 2324 61 2325 40 2060 44 2310 44 2317 46 2326 40 41 41 59 2013 2327 61 2317 46 2328 40 41 59 2013 2329 61 2317 46 2330 40 41 59 2060 46 2331 40 2310 44 2319 44 2321 44 2322 46 2332 40 41 44 2324 44 2327 44 2329 41 59 2333 46 2334 40 362 41 59 792 59 125 579 2335 58 123 2013 2336 61 744 2337 40 2004 41 46 2032 40 41 59 688 40 2336 46 2338 40 41 41 123 2339 46 2340 40 2060 46 2341 40 2055 41 41 59 792 59 125 2013 2342 61 2336 46 2343 40 41 59 2060 46 2344 40 2342 41 59 2345 46 2346 40 362 41 59 792 59 125 579 2347 58 123 2013 2348 61 744 2349 40 2004 41 46 2032 40 41 59 688 40 2348 46 2350 40 41 41 123 2351 46 2352 40 2060 46 2353 40 2055 41 41 59 792 59 125 2013 2354 61 2348 46 2355 40 41 59 2013 2356 61 2060 46 2357 40 2354 41 59 744 2358 40 2359 44 2356 41 46 2360 40 41 46 2361 40 2362 41 59 792 59 125 579 2363 58 123 2013 2364 61 744 2365 40 2004 41 46 2032 40 41 59 688 40 2364 46 2366 40 41 41 123 2367 46 2368 40 2060 46 2369 40 2055 41 41 59 792 59 125 2013 2370 61 2364 46 2371 40 41 59 2013 2372 61 2060 46 2373 40 2370 41 59 744 2374 40 2375 44 2372 41 46 2376 40 41 46 2377 40 2378 41 59 792 59 125 579 2379 58 123 2013 2380 61 744 2381 40 2004 41 46 2032 40 41 59 688 40 2380 46 2382 40 41 41 123 2383 46 2384 40 2060 46 2385 40 2055 41 41 59 792 59 125 2013 2386 61 2380 46 2387 40 41 59 2013 2388 61 2380 46 2389 40 41 59 2037 60 2390 62 2391 61 2060 46 2392 40 2386 44 2388 41 59 688 40 2391 46 2040 40 41 41 2393 46 2394 40 362 44 2386 44 2388 41 59 630 744 2395 40 2396 44 2391 41 46 2397 40 41 46 2398 40 2393 41 59 792 59 125 579 2399 58 123 2013 2400 61 744 2401 40 2004 41 46 2032 40 41 59 688 40 2400 46 2402 40 41 41 123 2403 46 2404 40 2060 46 2405 40 2055 41 41 59 792 59 125 2013 2406 61 2400 46 2407 40 41 59 2013 2408 61 2400 46 2409 40 41 59 2037 60 2410 62 2411 61 2060 46 2412 40 2406 44 2408 41 59 688 40 2411 46 2040 40 41 41 2413 46 2414 40 362 44 2406 44 2408 41 59 630 744 2415 40 2416 44 2411 41 46 2417 40 41 46 2418 40 2413 41 59 792 59 125 579 2419 58 123 2013 2420 61 744 2421 40 2004 44 2422 41 46 2032 40 41 59 688 40 2420 46 2423 40 41 41 123 2424 46 2425 40 2060 46 2426 40 2055 41 41 59 792 59 125 2013 2427 61 2420 46 2428 40 41 59 2429 2430 59 330 330 330 2013 2431 61 2060 46 2432 40 2427 41 59 688 40 2431 46 2433 40 2434 41 41 123 2430 61 2060 46 2435 40 2427 41 59 125 630 123 2013 2436 61 744 2437 40 2004 41 46 2032 40 41 59 2013 2438 61 2436 46 2439 40 41 59 2013 2440 61 2436 46 2441 40 41 59 2430 61 2060 46 2442 40 2427 44 2438 44 2440 41 59 125 2443 46 2444 40 362 44 2430 46 2445 40 41 41 59 792 59 125 579 2446 58 123 330 2013 2447 61 744 2448 40 2004 41 46 2032 40 41 59 688 40 2447 46 2449 40 41 41 123 2450 46 2451 40 2060 46 2452 40 2055 41 41 59 792 59 125 2013 2453 61 2447 46 2454 40 41 59 2013 2455 61 2447 46 2456 40 41 59 2013 2457 61 2060 46 2458 40 2453 41 59 688 40 2455 41 2459 46 2460 40 2457 46 2461 40 41 41 59 630 744 2462 40 2463 44 2457 41 46 2464 40 41 46 2465 40 2459 41 59 792 59 125 579 2466 58 123 2013 2467 61 744 2468 40 2004 41 46 2032 40 41 59 688 40 2467 46 2469 40 41 41 123 2470 46 2471 40 2060 46 2472 40 2055 41 41 59 792 59 125 2013 2473 61 2467 46 2474 40 41 59 2060 46 2475 40 2473 41 59 2476 46 2477 40 362 44 2473 41 59 792 59 125 579 2478 58 123 2013 2479 61 744 2480 40 2004 41 46 2032 40 41 59 688 40 2479 46 2481 40 41 41 123 2482 46 2483 40 2060 46 2484 40 2055 41 41 59 792 59 125 2013 2485 61 2479 46 2486 40 41 59 2060 46 2487 40 2485 41 59 2488 46 2489 40 362 44 2485 41 59 792 59 125 579 2490 58 123 2013 2491 61 744 2492 40 2004 41 46 2032 40 41 59 688 40 2491 46 2493 40 41 41 123 2494 46 2495 40 2060 46 2496 40 2055 41 41 59 792 59 125 2013 2497 61 2491 46 2498 40 41 59 2060 46 2499 40 2497 41 59 2500 46 2501 40 362 44 2497 41 59 792 59 125 579 2502 58 123 2013 2503 61 744 2504 40 2004 41 46 2032 40 41 59 688 40 2503 46 2505 40 41 41 123 2506 46 2507 40 2060 46 2508 40 2055 41 41 59 792 59 125 2013 2509 61 2503 46 2510 40 41 59 2013 2511 61 2503 46 2512 40 41 59 330 2013 2513 61 2503 46 2514 40 41 59 2060 46 2515 40 2509 44 2511 44 2513 41 59 2516 46 2517 40 362 44 2509 44 2511 41 59 792 59 125 579 2518 58 123 688 40 744 2519 40 2004 41 46 2032 40 41 46 2520 40 41 41 123 2521 46 2522 40 2060 46 2523 40 2055 41 41 59 792 59 125 2013 2524 61 2060 46 2525 40 41 59 2524 46 2526 40 2527 45 62 2528 46 2529 40 2527 46 2530 40 41 41 41 59 792 59 125 579 2531 58 123 2013 2532 61 744 2533 40 2004 41 46 2032 40 41 59 688 40 2532 46 2534 40 41 41 123 2535 46 2536 40 2060 46 2537 40 2055 41 41 59 792 59 125 2013 2538 61 2532 46 2539 40 41 59 2003 2540 61 2060 46 2541 40 2538 41 59 2542 2543 61 2544 40 2538 46 2545 40 41 44 362 44 2540 41 59 2546 46 2547 40 362 44 2540 44 2543 46 2548 40 41 41 59 2546 46 2549 40 362 41 59 792 59 125 579 2550 58 123 2013 2551 61 744 2552 40 2004 41 46 2032 40 41 59 688 40 2551 46 2553 40 41 41 123 2554 46 2555 40 2060 46 2556 40 2055 41 41 59 792 59 125 2013 2557 61 2551 46 2558 40 41 59 2003 2559 59 830 123 2559 61 744 2003 40 2560 46 2561 40 2557 41 41 59 125 580 40 2562 2563 41 123 825 744 2564 40 2565 40 362 44 2557 41 41 59 125 2013 2566 61 2060 46 2567 40 2559 41 59 2568 46 2569 40 362 41 59 744 2570 40 2571 44 2566 41 46 2572 40 41 46 2573 40 2568 41 59 792 59 125 579 2574 58 123 2013 2575 61 744 2576 40 2004 41 46 2032 40 41 59 688 40 2575 46 2577 40 41 41 123 2578 46 2579 40 2060 46 2580 40 2055 41 41 59 792 59 125 2013 2581 61 2575 46 2582 40 41 59 2013 2583 61 2575 46 2584 40 41 59 2013 2585 61 2575 46 2586 40 41 59 2013 2587 61 2575 46 2588 40 41 59 2013 2589 61 2060 46 2590 40 2581 44 2583 44 2585 44 2587 41 59 2591 46 2592 40 362 41 59 744 2593 40 2594 44 2589 41 46 2595 40 41 46 2596 40 2591 41 59 792 59 125 579 2597 58 123 688 40 744 2598 40 2004 41 46 2032 40 41 46 2599 40 41 41 123 2600 46 2601 40 2060 46 2602 40 2055 41 41 59 792 59 125 2013 2603 61 2060 46 2604 40 41 59 688 40 2603 46 2605 40 41 62 1500 41 744 2606 40 2607 44 2603 41 46 2608 40 41 46 2609 40 2610 41 59 630 2610 46 2611 40 362 41 59 792 59 125 579 2612 58 123 688 40 744 2613 40 2004 41 46 2032 40 41 46 2614 40 41 41 123 2615 46 2616 40 2060 46 2617 40 2055 41 41 59 792 59 125 2060 46 2618 40 41 59 2619 46 2620 40 362 41 59 792 59 125 579 2621 58 123 2013 2622 61 744 2623 40 2004 41 46 2032 40 41 59 688 40 2622 46 2624 40 41 41 123 2625 46 2626 40 2060 46 2627 40 2055 41 41 59 792 59 125 2013 2628 61 2622 46 2629 40 41 59 2013 2630 61 2622 46 2631 40 41 59 2060 46 2632 40 2628 44 2630 41 59 2633 46 2634 40 362 41 59 792 59 125 579 2635 58 123 2013 2636 61 744 2637 40 2004 41 46 2032 40 41 59 688 40 2636 46 2638 40 41 41 123 2639 46 2640 40 2060 46 2641 40 2055 41 41 59 792 59 125 2013 2642 61 2636 46 2643 40 41 59 2060 46 2644 40 2642 41 59 2645 46 2646 40 362 41 59 792 59 125 579 2647 58 123 2013 2648 61 744 2649 40 2004 41 46 2032 40 41 59 688 40 2648 46 2650 40 41 41 123 2651 46 2652 40 2060 46 2653 40 2055 41 41 59 792 59 125 2013 2654 61 2648 46 2655 40 41 59 2013 2656 61 2648 46 2657 40 41 59 2060 46 2658 40 2654 44 2656 41 59 2659 46 2660 40 362 43 40 33 2656 46 2040 40 41 63 362 58 362 41 41 59 792 59 125 579 2661 58 123 2013 2662 61 744 2663 40 2004 41 46 2032 40 41 59 688 40 2662 46 2664 40 41 41 123 2665 46 2666 40 2060 46 2667 40 2055 41 41 59 792 59 125 2013 2668 61 2662 46 2669 40 41 59 2013 2670 61 2662 46 2671 40 41 59 2060 46 2672 40 2668 44 2670 41 59 2673 46 2674 40 2668 43 362 41 59 792 59 125 579 2675 58 123 688 40 744 2676 40 2004 41 46 2032 40 41 46 2677 40 41 41 123 2678 46 2679 40 2060 46 2680 40 2055 41 41 59 792 59 125 2060 46 2681 40 41 59 2682 46 2683 40 362 41 59 792 59 125 613 58 123 825 744 2684 40 2685 40 362 44 2055 41 41 59 125 125 125 580 40 2686 2057 41 123 330 2003 2687 61 2057 46 2688 40 41 46 2689 40 362 44 362 41 59 688 40 2687 46 2690 40 362 41 41 825 744 2691 40 2687 43 362 44 2057 41 59 630 825 744 2691 40 2687 44 2057 41 59 125 125 773 809 2692 2693 40 2003 2694 41 123 330 330 330 792 2692 46 2695 40 2694 46 2696 40 41 41 59 125 64 2697 40 362 41 773 809 865 2698 40 2003 2699 44 2003 2700 41 123 830 123 2701 46 2702 40 2700 41 59 125 580 40 2703 2704 41 123 825 744 2705 40 2706 40 362 44 2699 44 2700 44 2700 41 41 59 125 125 64 2697 40 362 41 773 809 865 2707 40 2003 2699 44 2003 2700 41 123 830 123 2708 46 2709 40 2700 41 59 125 580 40 2710 2711 41 123 825 744 2712 40 2713 40 362 44 2699 44 2700 44 2700 41 41 59 125 125 773 809 726 2714 40 2003 2715 41 123 830 123 792 2716 46 2717 40 2715 41 59 125 580 40 2718 2719 41 123 825 744 2720 40 2721 40 362 44 2715 41 41 59 125 125 773 809 726 2722 40 2723 2724 44 2003 2725 44 2726 2727 41 123 688 40 2727 46 2728 40 2729 41 325 1500 41 123 330 330 330 330 330 2730 2731 61 2724 46 2732 40 2725 41 59 688 40 2731 46 2733 40 41 46 2734 40 362 41 41 792 2735 40 2727 41 59 630 792 2736 40 2727 41 59 125 630 123 792 1500 59 125 125 773 809 2737 2738 40 2003 2739 44 64 2697 40 362 41 2003 2740 44 2003 2741 41 123 2003 2742 61 2743 46 2744 40 744 2745 40 41 46 2746 40 41 41 59 2003 2747 61 2739 43 362 43 2742 43 2740 59 830 123 2748 2749 61 2750 46 2751 40 2747 41 59 688 40 33 2752 46 2753 40 2749 41 41 123 830 40 2754 2755 61 744 2754 40 2749 46 2756 40 41 41 41 123 2755 46 2757 40 2741 41 59 125 792 2749 46 2758 40 41 46 2759 40 41 59 125 630 123 825 744 2760 40 2761 40 362 44 2747 41 41 59 125 125 580 40 2762 2763 41 123 825 744 2764 40 2765 40 362 44 2747 41 41 59 125 125 773 809 865 2766 40 2767 2768 44 64 2697 40 362 41 2769 2770 41 123 830 123 2770 46 2771 40 362 41 59 2770 46 2771 40 41 59 2770 46 2771 40 362 41 59 2770 46 2771 40 41 59 2768 46 2772 40 2770 41 59 2770 46 2771 40 41 59 2003 2773 61 362 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 2775 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2777 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2778 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2779 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2780 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2781 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2782 46 2776 40 41 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2783 46 2776 40 41 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2784 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2785 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2786 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2787 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2788 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2789 46 2776 40 41 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2790 46 2776 40 41 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2791 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2792 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2793 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2794 46 2776 40 41 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2795 46 2776 40 41 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2796 46 2776 40 41 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2797 46 2776 40 41 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2798 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2799 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2800 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2801 46 2776 40 41 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2802 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2803 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2804 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2805 46 2776 40 41 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2806 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2807 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2808 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2809 46 2776 40 41 44 362 44 362 41 59 2770 46 2774 40 2773 44 362 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2774 40 2773 44 2810 46 2776 40 41 44 362 44 362 41 59 2770 46 2771 40 41 59 2770 46 2771 40 362 41 59 2770 46 2771 40 41 59 125 580 40 2811 2812 41 123 2812 46 2813 40 2770 41 59 125 125 125 ,"{'AvgLine': 89, 'CountLine': 819, 'CountStmt': 537, 'MaxNesting': 3, 'AvgLineCode': 84, 'AvgEssential': 9, 'AvgLineBlank': 2, 'CountStmtExe': 520, 'MaxEssential': 77, 'SumEssential': 90, 'AvgCyclomatic': 12, 'CountLineCode': 764, 'CountStmtDecl': 151, 'MaxCyclomatic': 97, 'SumCyclomatic': 115, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 30, 'CountSemicolon': 462, 'CountDeclMethod': 9, 'CountLineCodeExe': 637, 'CountLineComment': 26, 'CountClassCoupled': 61, 'CountClassDerived': 0, 'CountLineCodeDecl': 166, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AvgCyclomaticStrict': 12, 'MaxCyclomaticStrict': 99, 'SumCyclomaticStrict': 117, 'CountDeclClassMethod': 9, 'AvgCyclomaticModified': 8, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 59, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 77, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 7, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 61, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2773,Java,"@FxmlView
public class TakeOfferView extends ActivatableViewAndModel<AnchorPane, TakeOfferViewModel> {
    private final Navigation navigation;
    private final CoinFormatter formatter;
    private final BsqFormatter bsqFormatter;
    private final OfferDetailsWindow offerDetailsWindow;
    private final Transitions transitions;

    private ScrollPane scrollPane;
    private GridPane gridPane;
    private TitledGroupBg payFundsTitledGroupBg, paymentAccountTitledGroupBg, advancedOptionsGroup;
    private VBox priceAsPercentageInputBox, amountRangeBox;
    private HBox fundingHBox, amountValueCurrencyBox, priceValueCurrencyBox, volumeValueCurrencyBox,
            priceAsPercentageValueCurrencyBox, minAmountValueCurrencyBox, advancedOptionsBox,
            takeOfferBox, buttonBox, firstRowHBox, buyBsqBox;
    private ComboBox<PaymentAccount> paymentAccountsComboBox;
    private Label amountDescriptionLabel,
            paymentMethodLabel,
            priceCurrencyLabel, priceAsPercentageLabel,
            volumeCurrencyLabel, priceDescriptionLabel, volumeDescriptionLabel,
            waitingForFundsLabel, offerAvailabilityLabel, priceAsPercentageDescription,
            tradeFeeDescriptionLabel, resultLabel, tradeFeeInBtcLabel, tradeFeeInBsqLabel, xLabel,
            fakeXLabel;
    private InputTextField amountTextField;
    private TextField paymentMethodTextField, currencyTextField, priceTextField, priceAsPercentageTextField,
            volumeTextField, amountRangeTextField;
    private FundsTextField totalToPayTextField;
    private AddressTextField addressTextField;
    private BalanceTextField balanceTextField;
    private Text xIcon, fakeXIcon;
    private Button nextButton, cancelButton1, cancelButton2;
    private AutoTooltipButton takeOfferButton;
    private ImageView qrCodeImageView;
    private BusyAnimation waitingForFundsBusyAnimation, offerAvailabilityBusyAnimation;
    private Notification walletFundedNotification;
    private OfferView.CloseHandler closeHandler;
    private Subscription balanceSubscription,
            showTransactionPublishedScreenSubscription, showWarningInvalidBtcDecimalPlacesSubscription,
            isWaitingForFundsSubscription, offerWarningSubscription, errorMessageSubscription,
            isOfferAvailableSubscription;

    private int gridRow = 0;
    private final HashMap<String, Boolean> paymentAccountWarningDisplayed = new HashMap<>();
    private boolean offerDetailsWindowDisplayed, clearXchangeWarningDisplayed, fasterPaymentsWarningDisplayed,
            takeOfferFromUnsignedAccountWarningDisplayed, cashByMailWarningDisplayed;
    private SimpleBooleanProperty errorPopupDisplayed;
    private ChangeListener<Boolean> amountFocusedListener, getShowWalletFundedNotificationListener;

    private InfoInputTextField volumeInfoTextField;
    private AutoTooltipSlideToggleButton tradeFeeInBtcToggle, tradeFeeInBsqToggle;
    private ChangeListener<Boolean> tradeFeeInBtcToggleListener, tradeFeeInBsqToggleListener,
            tradeFeeVisibleListener;

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    private TakeOfferView(TakeOfferViewModel model,
                          Navigation navigation,
                          @Named(FormattingUtils.BTC_FORMATTER_KEY) CoinFormatter formatter,
                          BsqFormatter bsqFormatter,
                          OfferDetailsWindow offerDetailsWindow,
                          Transitions transitions) {
        super(model);

        this.navigation = navigation;
        this.formatter = formatter;
        this.bsqFormatter = bsqFormatter;
        this.offerDetailsWindow = offerDetailsWindow;
        this.transitions = transitions;
    }

    @Override
    protected void initialize() {
        addScrollPane();
        addGridPane();
        addPaymentGroup();
        addAmountPriceGroup();
        addOptionsGroup();

        addButtons();
        addOfferAvailabilityLabel();
        addFundingGroup();

        balanceTextField.setFormatter(model.getBtcFormatter());

        amountFocusedListener = (o, oldValue, newValue) -> {
            model.onFocusOutAmountTextField(oldValue, newValue, amountTextField.getText());
            amountTextField.setText(model.amount.get());
        };

        getShowWalletFundedNotificationListener = (observable, oldValue, newValue) -> {
            if (newValue) {
                Notification walletFundedNotification = new Notification()
                        .headLine(Res.get(""notification.walletUpdate.headline""))
                        .notification(Res.get(""notification.walletUpdate.msg"", formatter.formatCoinWithCode(model.dataModel.getTotalToPayAsCoin().get())))
                        .autoClose();

                walletFundedNotification.show();
            }
        };

        tradeFeeInBtcToggleListener = (observable, oldValue, newValue) -> {
            if (newValue && tradeFeeInBsqToggle.isSelected())
                tradeFeeInBsqToggle.setSelected(false);

            if (!newValue && !tradeFeeInBsqToggle.isSelected())
                tradeFeeInBsqToggle.setSelected(true);

            setIsCurrencyForMakerFeeBtc(newValue);
        };
        tradeFeeInBsqToggleListener = (observable, oldValue, newValue) -> {
            if (newValue && tradeFeeInBtcToggle.isSelected())
                tradeFeeInBtcToggle.setSelected(false);

            if (!newValue && !tradeFeeInBtcToggle.isSelected())
                tradeFeeInBtcToggle.setSelected(true);

            setIsCurrencyForMakerFeeBtc(!newValue);
        };

        tradeFeeVisibleListener = (observable, oldValue, newValue) -> {
            if (DevEnv.isDaoActivated()) {
                tradeFeeInBtcToggle.setVisible(newValue);
                tradeFeeInBsqToggle.setVisible(newValue);
                if (model.isShowBuyBsqHint()) {
                    buyBsqBox.setVisible(newValue);
                    buyBsqBox.setManaged(newValue);
                }
            }
        };

        GUIUtil.focusWhenAddedToScene(amountTextField);
    }

    private void setIsCurrencyForMakerFeeBtc(boolean isCurrencyForMakerFeeBtc) {
        model.setIsCurrencyForTakerFeeBtc(isCurrencyForMakerFeeBtc);
        if (DevEnv.isDaoActivated()) {
            tradeFeeInBtcLabel.setOpacity(isCurrencyForMakerFeeBtc ? 1 : 0.3);
            tradeFeeInBsqLabel.setOpacity(isCurrencyForMakerFeeBtc ? 0.3 : 1);
        }
    }

    @Override
    protected void activate() {
        addBindings();
        addSubscriptions();
        addListeners();

        if (offerAvailabilityBusyAnimation != null && !model.showPayFundsScreenDisplayed.get()) {
            // temporarily disabled due to high CPU usage (per issue #4649)
            //    offerAvailabilityBusyAnimation.play();
            offerAvailabilityLabel.setVisible(true);
            offerAvailabilityLabel.setManaged(true);
        } else {
            offerAvailabilityLabel.setVisible(false);
            offerAvailabilityLabel.setManaged(false);
        }

        if (waitingForFundsBusyAnimation != null && model.isWaitingForFunds.get()) {
            // temporarily disabled due to high CPU usage (per issue #4649)
            //    waitingForFundsBusyAnimation.play();
            waitingForFundsLabel.setVisible(true);
            waitingForFundsLabel.setManaged(true);
        } else {
            waitingForFundsLabel.setVisible(false);
            waitingForFundsLabel.setManaged(false);
        }

        String currencyCode = model.dataModel.getCurrencyCode();
        volumeCurrencyLabel.setText(currencyCode);
        priceDescriptionLabel.setText(CurrencyUtil.getPriceWithCurrencyCode(currencyCode));
        volumeDescriptionLabel.setText(model.volumeDescriptionLabel.get());

        PaymentAccount lastPaymentAccount = model.getLastSelectedPaymentAccount();

        if (model.getPossiblePaymentAccounts().size() > 1) {
            new Popup().headLine(Res.get(""popup.info.multiplePaymentAccounts.headline""))
                    .information(Res.get(""popup.info.multiplePaymentAccounts.msg""))
                    .dontShowAgainId(""MultiplePaymentAccountsAvailableWarning"")
                    .show();

            paymentAccountsComboBox.setItems(model.getPossiblePaymentAccounts());
            paymentAccountsComboBox.getSelectionModel().select(lastPaymentAccount);
            model.onPaymentAccountSelected(lastPaymentAccount);
            paymentAccountTitledGroupBg.setText(Res.get(""shared.selectTradingAccount""));
        }

        balanceTextField.setTargetAmount(model.dataModel.getTotalToPayAsCoin().get());

        maybeShowTakeOfferFromUnsignedAccountWarning(model.dataModel.getOffer());
        maybeShowClearXchangeWarning(lastPaymentAccount);
        maybeShowFasterPaymentsWarning(lastPaymentAccount);
        maybeShowAccountWarning(lastPaymentAccount, model.dataModel.isBuyOffer());
        maybeShowCashByMailWarning(lastPaymentAccount, model.dataModel.getOffer());

        if (!DevEnv.isDaoActivated() && !model.isRange()) {
            nextButton.setVisible(false);
            cancelButton1.setVisible(false);
            if (model.isOfferAvailable.get())
                showNextStepAfterAmountIsSet();
        }

        boolean currencyForMakerFeeBtc = model.dataModel.isCurrencyForTakerFeeBtc();
        tradeFeeInBtcToggle.setSelected(currencyForMakerFeeBtc);
        tradeFeeInBsqToggle.setSelected(!currencyForMakerFeeBtc);

        if (!DevEnv.isDaoActivated()) {
            tradeFeeInBtcToggle.setVisible(false);
            tradeFeeInBtcToggle.setManaged(false);
            tradeFeeInBsqToggle.setVisible(false);
            tradeFeeInBsqToggle.setManaged(false);
            buyBsqBox.setVisible(false);
            buyBsqBox.setManaged(false);
        }

        if (!model.isShowBuyBsqHint()) {
            buyBsqBox.setVisible(false);
            buyBsqBox.setManaged(false);
        }
    }

    @Override
    protected void deactivate() {
        removeBindings();
        removeSubscriptions();
        removeListeners();

        if (offerAvailabilityBusyAnimation != null)
            offerAvailabilityBusyAnimation.stop();

        if (waitingForFundsBusyAnimation != null)
            waitingForFundsBusyAnimation.stop();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void initWithData(Offer offer) {
        model.initWithData(offer);
        priceAsPercentageInputBox.setVisible(offer.isUseMarketBasedPrice());

        if (model.getOffer().getDirection() == OfferDirection.SELL) {
            takeOfferButton.setId(""buy-button-big"");
            takeOfferButton.updateText(Res.get(""takeOffer.takeOfferButton"", Res.get(""shared.buy"")));
            nextButton.setId(""buy-button"");
        } else {
            takeOfferButton.setId(""sell-button-big"");
            nextButton.setId(""sell-button"");
            takeOfferButton.updateText(Res.get(""takeOffer.takeOfferButton"", Res.get(""shared.sell"")));
        }
        priceAsPercentageDescription.setText(model.getPercentagePriceDescription());

        boolean showComboBox = model.getPossiblePaymentAccounts().size() > 1;
        paymentAccountsComboBox.setVisible(showComboBox);
        paymentAccountsComboBox.setManaged(showComboBox);
        paymentAccountsComboBox.setMouseTransparent(!showComboBox);
        paymentMethodTextField.setVisible(!showComboBox);
        paymentMethodTextField.setManaged(!showComboBox);
        paymentMethodLabel.setVisible(!showComboBox);
        paymentMethodLabel.setManaged(!showComboBox);

        if (!showComboBox) {
            paymentMethodTextField.setText(model.getPossiblePaymentAccounts().get(0).getAccountName());
        }

        currencyTextField.setText(model.dataModel.getCurrencyNameAndCode());
        amountDescriptionLabel.setText(model.getAmountDescription());

        if (model.isRange()) {
            amountRangeTextField.setText(model.getAmountRange());
            amountRangeBox.setVisible(true);
        } else {
            amountTextField.setDisable(true);
        }

        priceTextField.setText(model.getPrice());
        priceAsPercentageTextField.setText(model.marketPriceMargin);
        addressTextField.setPaymentLabel(model.getPaymentLabel());
        addressTextField.setAddress(model.dataModel.getAddressEntry().getAddressString());

        if (CurrencyUtil.isFiatCurrency(offer.getCurrencyCode())) {
            Label popOverLabel = OfferViewUtil.createPopOverLabel(Res.get(""offerbook.info.roundedFiatVolume""));
            volumeInfoTextField.setContentForPrivacyPopOver(popOverLabel);
        }

        if (offer.getPrice() == null)
            new Popup().warning(Res.get(""takeOffer.noPriceFeedAvailable""))
                    .onClose(() -> close(false))
                    .show();
    }

    public void setCloseHandler(OfferView.CloseHandler closeHandler) {
        this.closeHandler = closeHandler;
    }

    // Called from parent as the view does not get notified when the tab is closed
    public void onClose() {
        Coin balance = model.dataModel.getBalance().get();
        if (balance != null && balance.isPositive() && !model.takeOfferCompleted.get() && !DevEnv.isDevMode()) {
            model.dataModel.swapTradeToSavings();
        }
    }

    public void onTabSelected(boolean isSelected) {
        model.dataModel.onTabSelected(isSelected);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // UI actions
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void onTakeOffer() {
        if (!model.dataModel.canTakeOffer()) {
            return;
        }

        if (!model.dataModel.isTakerFeeValid()) {
            showInsufficientBsqFundsForBtcFeePaymentPopup();
            return;
        }

        if (DevEnv.isDevMode()) {
            balanceSubscription.unsubscribe();
            model.onTakeOffer(() -> {
            });
            return;
        }

        offerDetailsWindow.onTakeOffer(() ->
                model.onTakeOffer(() -> {
                    offerDetailsWindow.hide();
                    offerDetailsWindowDisplayed = false;
                })
        ).show(model.getOffer(),
                model.dataModel.getAmount().get(),
                model.dataModel.tradePrice);

        offerDetailsWindowDisplayed = true;
    }

    private void onShowPayFundsScreen() {
        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);

        nextButton.setVisible(false);
        nextButton.setManaged(false);
        nextButton.setOnAction(null);
        cancelButton1.setVisible(false);
        cancelButton1.setManaged(false);
        cancelButton1.setOnAction(null);
        offerAvailabilityBusyAnimation.stop();
        offerAvailabilityBusyAnimation.setVisible(false);
        offerAvailabilityBusyAnimation.setManaged(false);
        offerAvailabilityLabel.setVisible(false);
        offerAvailabilityLabel.setManaged(false);

        tradeFeeInBtcToggle.setMouseTransparent(true);
        tradeFeeInBsqToggle.setMouseTransparent(true);
        buyBsqBox.setVisible(false);
        buyBsqBox.setManaged(false);

        int delay = 500;
        int diff = 100;

        transitions.fadeOutAndRemove(advancedOptionsGroup, delay, (event) -> {
        });
        delay -= diff;
        transitions.fadeOutAndRemove(advancedOptionsBox, delay);

        model.onShowPayFundsScreen();

        if (DevEnv.isDaoActivated()) {
            paymentAccountsComboBox.setMouseTransparent(true);
            paymentAccountsComboBox.setDisable(true);
            paymentAccountsComboBox.setFocusTraversable(false);
        }

        amountTextField.setMouseTransparent(true);
        amountTextField.setDisable(false);
        amountTextField.setFocusTraversable(false);

        amountRangeTextField.setMouseTransparent(true);
        amountRangeTextField.setDisable(false);
        amountRangeTextField.setFocusTraversable(false);

        priceTextField.setMouseTransparent(true);
        priceTextField.setDisable(false);
        priceTextField.setFocusTraversable(false);

        priceAsPercentageTextField.setMouseTransparent(true);
        priceAsPercentageTextField.setDisable(false);
        priceAsPercentageTextField.setFocusTraversable(false);

        volumeTextField.setMouseTransparent(true);
        volumeTextField.setDisable(false);
        volumeTextField.setFocusTraversable(false);

        updateOfferElementsStyle();

        balanceTextField.setTargetAmount(model.dataModel.getTotalToPayAsCoin().get());

        if (!DevEnv.isDevMode()) {
            String key = ""securityDepositInfo"";
            new Popup().backgroundInfo(Res.get(""popup.info.securityDepositInfo""))
                    .actionButtonText(Res.get(""shared.faq""))
                    .onAction(() -> GUIUtil.openWebPage(""https://bisq.wiki/Frequently_asked_questions#Why_does_Bisq_require_a_security_deposit_in_BTC.3F""))
                    .useIUnderstandButton()
                    .dontShowAgainId(key)
                    .show();


            String tradeAmountText = model.isSeller() ? Res.get(""takeOffer.takeOfferFundWalletInfo.tradeAmount"", model.getTradeAmount()) : """";
            String message = Res.get(""takeOffer.takeOfferFundWalletInfo.msg"",
                    model.getTotalToPayInfo(),
                    tradeAmountText,
                    model.getSecurityDepositInfo(),
                    model.getTradeFee(),
                    model.getTxFee()
            );
            key = ""takeOfferFundWalletInfo"";
            new Popup().headLine(Res.get(""takeOffer.takeOfferFundWalletInfo.headline""))
                    .instruction(message)
                    .dontShowAgainId(key)
                    .show();
        }

        cancelButton2.setVisible(true);

        // temporarily disabled due to high CPU usage (per issue #4649)
        //waitingForFundsBusyAnimation.play();

        payFundsTitledGroupBg.setVisible(true);
        totalToPayTextField.setVisible(true);
        addressTextField.setVisible(true);
        qrCodeImageView.setVisible(true);
        balanceTextField.setVisible(true);

        totalToPayTextField.setFundsStructure(Res.get(""takeOffer.fundsBox.fundsStructure"",
                model.getSecurityDepositWithCode(), model.getTakerFeePercentage(), model.getTxFeePercentage()));
        totalToPayTextField.setContentForInfoPopOver(createInfoPopover());

        if (model.dataModel.getIsBtcWalletFunded().get()) {
            if (walletFundedNotification == null) {
                walletFundedNotification = new Notification()
                        .headLine(Res.get(""notification.walletUpdate.headline""))
                        .notification(Res.get(""notification.takeOffer.walletUpdate.msg"", formatter.formatCoinWithCode(model.dataModel.getTotalToPayAsCoin().get())))
                        .autoClose();
                walletFundedNotification.show();
            }
        }

        final byte[] imageBytes = QRCode
                .from(getBitcoinURI())
                .withSize(98, 98) // code has 41 elements 8 px is border with 98 we get double scale and min. border
                .to(ImageType.PNG)
                .stream()
                .toByteArray();
        Image qrImage = new Image(new ByteArrayInputStream(imageBytes));
        qrCodeImageView.setImage(qrImage);
    }

    private void updateOfferElementsStyle() {
        GridPane.setColumnSpan(firstRowHBox, 1);

        final String activeInputStyle = ""input-with-border"";
        final String readOnlyInputStyle = ""input-with-border-readonly"";
        amountValueCurrencyBox.getStyleClass().remove(activeInputStyle);
        amountValueCurrencyBox.getStyleClass().add(readOnlyInputStyle);
        priceAsPercentageValueCurrencyBox.getStyleClass().remove(activeInputStyle);
        priceAsPercentageValueCurrencyBox.getStyleClass().add(readOnlyInputStyle);
        volumeValueCurrencyBox.getStyleClass().remove(activeInputStyle);
        volumeValueCurrencyBox.getStyleClass().add(readOnlyInputStyle);
        priceValueCurrencyBox.getStyleClass().remove(activeInputStyle);
        priceValueCurrencyBox.getStyleClass().add(readOnlyInputStyle);
        minAmountValueCurrencyBox.getStyleClass().remove(activeInputStyle);
        minAmountValueCurrencyBox.getStyleClass().add(readOnlyInputStyle);

        resultLabel.getStyleClass().add(""small"");
        xLabel.getStyleClass().add(""small"");
        xIcon.setStyle(String.format(""-fx-font-family: %s; -fx-font-size: %s;"", MaterialDesignIcon.CLOSE.fontFamily(), ""1em""));
        fakeXIcon.setStyle(String.format(""-fx-font-family: %s; -fx-font-size: %s;"", MaterialDesignIcon.CLOSE.fontFamily(), ""1em""));
        fakeXLabel.getStyleClass().add(""small"");
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Navigation
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void close() {
        close(true);
    }

    private void close(boolean removeOffer) {
        model.dataModel.onClose(removeOffer);
        if (closeHandler != null)
            closeHandler.close();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Bindings, Listeners
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void addBindings() {
        amountTextField.textProperty().bindBidirectional(model.amount);
        volumeTextField.textProperty().bindBidirectional(model.volume);
        totalToPayTextField.textProperty().bind(model.totalToPay);
        addressTextField.amountAsCoinProperty().bind(model.dataModel.getMissingCoin());
        amountTextField.validationResultProperty().bind(model.amountValidationResult);
        priceCurrencyLabel.textProperty().bind(createStringBinding(() -> CurrencyUtil.getCounterCurrency(model.dataModel.getCurrencyCode())));
        priceAsPercentageLabel.prefWidthProperty().bind(priceCurrencyLabel.widthProperty());
        nextButton.disableProperty().bind(model.isNextButtonDisabled);
        tradeFeeInBtcLabel.textProperty().bind(model.tradeFeeInBtcWithFiat);
        tradeFeeInBsqLabel.textProperty().bind(model.tradeFeeInBsqWithFiat);
        tradeFeeDescriptionLabel.textProperty().bind(model.tradeFeeDescription);
        tradeFeeInBtcLabel.visibleProperty().bind(model.isTradeFeeVisible);
        tradeFeeInBsqLabel.visibleProperty().bind(model.isTradeFeeVisible);
        tradeFeeDescriptionLabel.visibleProperty().bind(model.isTradeFeeVisible);
        tradeFeeDescriptionLabel.managedProperty().bind(tradeFeeDescriptionLabel.visibleProperty());

        // funding
        fundingHBox.visibleProperty().bind(model.dataModel.getIsBtcWalletFunded().not().and(model.showPayFundsScreenDisplayed));
        fundingHBox.managedProperty().bind(model.dataModel.getIsBtcWalletFunded().not().and(model.showPayFundsScreenDisplayed));
        waitingForFundsLabel.textProperty().bind(model.spinnerInfoText);
        takeOfferBox.visibleProperty().bind(model.dataModel.getIsBtcWalletFunded().and(model.showPayFundsScreenDisplayed));
        takeOfferBox.managedProperty().bind(model.dataModel.getIsBtcWalletFunded().and(model.showPayFundsScreenDisplayed));
        takeOfferButton.disableProperty().bind(model.isTakeOfferButtonDisabled);
    }

    private void removeBindings() {
        amountTextField.textProperty().unbindBidirectional(model.amount);
        volumeTextField.textProperty().unbindBidirectional(model.volume);
        totalToPayTextField.textProperty().unbind();
        addressTextField.amountAsCoinProperty().unbind();
        amountTextField.validationResultProperty().unbind();
        priceCurrencyLabel.textProperty().unbind();
        priceAsPercentageLabel.prefWidthProperty().unbind();
        nextButton.disableProperty().unbind();
        tradeFeeInBtcLabel.textProperty().unbind();
        tradeFeeInBsqLabel.textProperty().unbind();
        tradeFeeDescriptionLabel.textProperty().unbind();
        tradeFeeInBtcLabel.visibleProperty().unbind();
        tradeFeeInBsqLabel.visibleProperty().unbind();
        tradeFeeDescriptionLabel.visibleProperty().unbind();
        tradeFeeDescriptionLabel.managedProperty().unbind();

        // funding
        fundingHBox.visibleProperty().unbind();
        fundingHBox.managedProperty().unbind();
        waitingForFundsLabel.textProperty().unbind();
        takeOfferBox.visibleProperty().unbind();
        takeOfferBox.managedProperty().unbind();
        takeOfferButton.disableProperty().unbind();
    }

    private void addSubscriptions() {
        errorPopupDisplayed = new SimpleBooleanProperty();
        offerWarningSubscription = EasyBind.subscribe(model.offerWarning, newValue -> {
            if (newValue != null) {
                if (offerDetailsWindowDisplayed)
                    offerDetailsWindow.hide();

                UserThread.runAfter(() -> new Popup().warning(newValue + ""\n\n"" +
                                Res.get(""takeOffer.alreadyPaidInFunds""))
                        .actionButtonTextWithGoTo(""navigation.funds.availableForWithdrawal"")
                        .onAction(() -> {
                            errorPopupDisplayed.set(true);
                            model.resetOfferWarning();
                            close();
                            navigation.navigateTo(MainView.class, FundsView.class, WithdrawalView.class);
                        })
                        .onClose(() -> {
                            errorPopupDisplayed.set(true);
                            model.resetOfferWarning();
                            close();
                        })
                        .show(), 100, TimeUnit.MILLISECONDS);
            }
        });

        errorMessageSubscription = EasyBind.subscribe(model.errorMessage, newValue -> {
            if (newValue != null) {
                new Popup().error(Res.get(""takeOffer.error.message"", model.errorMessage.get()) + ""\n\n"" +
                        Res.get(""popup.error.tryRestart""))
                        .onClose(() -> {
                            errorPopupDisplayed.set(true);
                            model.resetErrorMessage();
                            close();
                        })
                        .show();
            }
        });

        isOfferAvailableSubscription = EasyBind.subscribe(model.isOfferAvailable, isOfferAvailable -> {
            if (isOfferAvailable) {
                offerAvailabilityBusyAnimation.stop();
                offerAvailabilityBusyAnimation.setVisible(false);
                if (!DevEnv.isDaoActivated() && !model.isRange() && !model.showPayFundsScreenDisplayed.get())
                    showNextStepAfterAmountIsSet();
            }

            offerAvailabilityLabel.setVisible(!isOfferAvailable);
            offerAvailabilityLabel.setManaged(!isOfferAvailable);
        });

        isWaitingForFundsSubscription = EasyBind.subscribe(model.isWaitingForFunds, isWaitingForFunds -> {
            // temporarily disabled due to high CPU usage (per issue #4649)
            //  waitingForFundsBusyAnimation.play();
            waitingForFundsLabel.setVisible(isWaitingForFunds);
            waitingForFundsLabel.setManaged(isWaitingForFunds);
        });

        showWarningInvalidBtcDecimalPlacesSubscription = EasyBind.subscribe(model.showWarningInvalidBtcDecimalPlaces, newValue -> {
            if (newValue) {
                new Popup().warning(Res.get(""takeOffer.amountPriceBox.warning.invalidBtcDecimalPlaces"")).show();
                model.showWarningInvalidBtcDecimalPlaces.set(false);
            }
        });

        showTransactionPublishedScreenSubscription = EasyBind.subscribe(model.showTransactionPublishedScreen, newValue -> {
            if (newValue && DevEnv.isDevMode()) {
                close();
            } else if (newValue && model.getTrade() != null && !model.getTrade().hasFailed()) {
                String key = ""takeOfferSuccessInfo"";
                if (DontShowAgainLookup.showAgain(key)) {
                    new Popup().headLine(Res.get(""takeOffer.success.headline""))
                            .feedback(Res.get(""takeOffer.success.info""))
                            .actionButtonTextWithGoTo(""navigation.portfolio.pending"")
                            .dontShowAgainId(key)
                            .onAction(() -> {
                                UserThread.runAfter(
                                        () -> navigation.navigateTo(MainView.class, PortfolioView.class, PendingTradesView.class)
                                        , 100, TimeUnit.MILLISECONDS);
                                close();
                            })
                            .onClose(this::close)
                            .show();
                } else {
                    close();
                }
            }
        });

        balanceSubscription = EasyBind.subscribe(model.dataModel.getBalance(), balanceTextField::setBalance);
    }

    private void removeSubscriptions() {
        offerWarningSubscription.unsubscribe();
        errorMessageSubscription.unsubscribe();
        isOfferAvailableSubscription.unsubscribe();
        isWaitingForFundsSubscription.unsubscribe();
        showWarningInvalidBtcDecimalPlacesSubscription.unsubscribe();
        showTransactionPublishedScreenSubscription.unsubscribe();
        // noSufficientFeeSubscription.unsubscribe();
        balanceSubscription.unsubscribe();
    }

    private void addListeners() {
        amountTextField.focusedProperty().addListener(amountFocusedListener);
        model.dataModel.getShowWalletFundedNotification().addListener(getShowWalletFundedNotificationListener);
        model.isTradeFeeVisible.addListener(tradeFeeVisibleListener);
        tradeFeeInBtcToggle.selectedProperty().addListener(tradeFeeInBtcToggleListener);
        tradeFeeInBsqToggle.selectedProperty().addListener(tradeFeeInBsqToggleListener);
    }

    private void removeListeners() {
        amountTextField.focusedProperty().removeListener(amountFocusedListener);
        model.dataModel.getShowWalletFundedNotification().removeListener(getShowWalletFundedNotificationListener);
        model.isTradeFeeVisible.removeListener(tradeFeeVisibleListener);
        tradeFeeInBtcToggle.selectedProperty().removeListener(tradeFeeInBtcToggleListener);
        tradeFeeInBsqToggle.selectedProperty().removeListener(tradeFeeInBsqToggleListener);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Build UI elements
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void addScrollPane() {
        scrollPane = GUIUtil.createScrollPane();
        root.getChildren().add(scrollPane);
    }

    private void addGridPane() {
        gridPane = new GridPane();
        gridPane.getStyleClass().add(""content-pane"");
        gridPane.setPadding(new Insets(15, 15, -1, 15));
        gridPane.setHgap(5);
        gridPane.setVgap(5);
        GUIUtil.setDefaultTwoColumnConstraintsForGridPane(gridPane);
        scrollPane.setContent(gridPane);
    }

    private void addPaymentGroup() {
        paymentAccountTitledGroupBg = addTitledGroupBg(gridPane, gridRow, 1, Res.get(""takeOffer.paymentInfo""));
        GridPane.setColumnSpan(paymentAccountTitledGroupBg, 2);

        final Tuple4<ComboBox<PaymentAccount>, Label, TextField, HBox> paymentAccountTuple = addComboBoxTopLabelTextField(gridPane,
                gridRow, Res.get(""shared.selectTradingAccount""),
                Res.get(""shared.paymentMethod""), Layout.FIRST_ROW_DISTANCE);

        paymentAccountsComboBox = paymentAccountTuple.first;
        HBox.setMargin(paymentAccountsComboBox, new Insets(Layout.FLOATING_LABEL_DISTANCE, 0, 0, 0));
        paymentAccountsComboBox.setConverter(GUIUtil.getPaymentAccountsComboBoxStringConverter());
        paymentAccountsComboBox.setCellFactory(model.getPaymentAccountListCellFactory(paymentAccountsComboBox));
        paymentAccountsComboBox.setVisible(false);
        paymentAccountsComboBox.setManaged(false);
        paymentAccountsComboBox.setOnAction(e -> {
            PaymentAccount paymentAccount = paymentAccountsComboBox.getSelectionModel().getSelectedItem();
            if (paymentAccount != null) {
                maybeShowClearXchangeWarning(paymentAccount);
                maybeShowFasterPaymentsWarning(paymentAccount);
                maybeShowAccountWarning(paymentAccount, model.dataModel.isBuyOffer());
            }
            model.onPaymentAccountSelected(paymentAccount);
        });

        paymentMethodLabel = paymentAccountTuple.second;
        paymentMethodTextField = paymentAccountTuple.third;
        paymentMethodTextField.setMinWidth(250);
        paymentMethodTextField.setEditable(false);
        paymentMethodTextField.setMouseTransparent(true);
        paymentMethodTextField.setFocusTraversable(false);

        currencyTextField = new JFXTextField();
        currencyTextField.setMinWidth(250);
        currencyTextField.setEditable(false);
        currencyTextField.setMouseTransparent(true);
        currencyTextField.setFocusTraversable(false);

        final Tuple2<Label, VBox> tradeCurrencyTuple = getTopLabelWithVBox(Res.get(""shared.tradeCurrency""), currencyTextField);
        HBox.setMargin(tradeCurrencyTuple.second, new Insets(5, 0, 0, 0));

        final HBox hBox = paymentAccountTuple.fourth;
        hBox.setSpacing(30);
        hBox.setAlignment(Pos.CENTER_LEFT);
        hBox.setPadding(new Insets(10, 0, 18, 0));

        hBox.getChildren().add(tradeCurrencyTuple.second);
    }

    private void addAmountPriceGroup() {
        TitledGroupBg titledGroupBg = addTitledGroupBg(gridPane, ++gridRow, 2,
                Res.get(""takeOffer.setAmountPrice""), Layout.COMPACT_GROUP_DISTANCE);
        GridPane.setColumnSpan(titledGroupBg, 2);

        addAmountPriceFields();
        addSecondRow();
    }

    private void addOptionsGroup() {
        advancedOptionsGroup = addTitledGroupBg(gridPane, ++gridRow, 1, Res.get(""shared.advancedOptions""), Layout.COMPACT_GROUP_DISTANCE);

        advancedOptionsBox = new HBox();
        advancedOptionsBox.setSpacing(40);

        GridPane.setRowIndex(advancedOptionsBox, gridRow);
        GridPane.setColumnSpan(advancedOptionsBox, GridPane.REMAINING);
        GridPane.setColumnIndex(advancedOptionsBox, 0);
        GridPane.setHalignment(advancedOptionsBox, HPos.LEFT);
        GridPane.setMargin(advancedOptionsBox, new Insets(Layout.COMPACT_FIRST_ROW_AND_GROUP_DISTANCE, 0, 0, 0));
        gridPane.getChildren().add(advancedOptionsBox);

        Tuple2<AutoTooltipButton, HBox> buyBsqButtonBox = OfferViewUtil.createBuyBsqButtonBox(
                navigation, model.dataModel.preferences);
        buyBsqBox = buyBsqButtonBox.second;
        buyBsqBox.setManaged(false);
        buyBsqBox.setVisible(false);

        VBox tradeFeeFieldsBox = getTradeFeeFieldsBox();
        tradeFeeFieldsBox.setMinWidth(240);
        advancedOptionsBox.getChildren().addAll(tradeFeeFieldsBox, buyBsqBox);
    }

    private void addButtons() {
        Tuple3<Button, Button, HBox> tuple = add2ButtonsWithBox(gridPane, ++gridRow,
                Res.get(""shared.nextStep""), Res.get(""shared.cancel""), 15, true);

        buttonBox = tuple.third;

        nextButton = tuple.first;
        nextButton.setMaxWidth(200);
        nextButton.setDefaultButton(true);
        nextButton.setOnAction(e -> nextStepCheckMakerTx());

        cancelButton1 = tuple.second;
        cancelButton1.setMaxWidth(200);
        cancelButton1.setDefaultButton(false);
        cancelButton1.setOnAction(e -> {
            model.dataModel.swapTradeToSavings();
            close(false);
        });
    }

    private void nextStepCheckMakerTx() {
        // the tx validation check has had plenty of time to complete, but if for some reason it has not returned
        // we continue anyway since the check is not crucial.
        // note, it would be great if there was a real tri-state boolean we could use here, instead of -1, 0, and 1
        int result = model.dataModel.mempoolStatus.get();
        if (result == 0) {
            new Popup().warning(Res.get(""popup.warning.makerTxInvalid"") + model.dataModel.getMempoolStatusText())
                    .onClose(() -> {
                        cancelButton1.fire();
                    })
                    .show();
        } else {
            if (result == -1) {
                log.warn(""Fee check has not returned a result yet. We optimistically assume all is ok and continue."");
            }
            showNextStepAfterAmountIsSet();
        }
    }

    private void showNextStepAfterAmountIsSet() {
        if (DevEnv.isDaoTradingActivated())
            showFeeOption();
        else
            onShowPayFundsScreen();
    }

    private void showFeeOption() {
        boolean isPreferredFeeCurrencyBtc = model.dataModel.isPreferredFeeCurrencyBtc();
        boolean isBsqForFeeAvailable = model.dataModel.isBsqForFeeAvailable();
        if (!isPreferredFeeCurrencyBtc && !isBsqForFeeAvailable) {
            Coin takerFee = model.dataModel.getTakerFee(false);
            String missingBsq = null;
            if (takerFee != null) {
                missingBsq = Res.get(""popup.warning.insufficientBsqFundsForBtcFeePayment"",
                        bsqFormatter.formatCoinWithCode(takerFee.subtract(model.dataModel.getUsableBsqBalance())));

            } else if (model.dataModel.getUsableBsqBalance().isZero()) {
                missingBsq = Res.get(""popup.warning.noBsqFundsForBtcFeePayment"");
            }

            if (missingBsq != null) {
                new Popup().warning(missingBsq)
                        .actionButtonText(Res.get(""feeOptionWindow.useBTC""))
                        .onAction(() -> {
                            tradeFeeInBtcToggle.setSelected(true);
                            onShowPayFundsScreen();
                        })
                        .show();
            } else {
                onShowPayFundsScreen();
            }
        } else {
            onShowPayFundsScreen();
        }
    }

    private void addOfferAvailabilityLabel() {
        offerAvailabilityBusyAnimation = new BusyAnimation(false);
        offerAvailabilityLabel = new AutoTooltipLabel(Res.get(""takeOffer.fundsBox.isOfferAvailable""));
        HBox.setMargin(offerAvailabilityLabel, new Insets(6, 0, 0, 0));
        buttonBox.getChildren().addAll(offerAvailabilityBusyAnimation, offerAvailabilityLabel);
    }

    private void addFundingGroup() {
        // don't increase gridRow as we removed button when this gets visible
        payFundsTitledGroupBg = addTitledGroupBg(gridPane, gridRow, 3,
                Res.get(""takeOffer.fundsBox.title""), Layout.COMPACT_GROUP_DISTANCE);
        payFundsTitledGroupBg.getStyleClass().add(""last"");
        GridPane.setColumnSpan(payFundsTitledGroupBg, 2);
        payFundsTitledGroupBg.setVisible(false);

        totalToPayTextField = addFundsTextfield(gridPane, gridRow,
                Res.get(""shared.totalsNeeded""), Layout.COMPACT_FIRST_ROW_AND_GROUP_DISTANCE);
        totalToPayTextField.setVisible(false);

        qrCodeImageView = new ImageView();
        qrCodeImageView.setVisible(false);
        qrCodeImageView.setFitHeight(150);
        qrCodeImageView.setFitWidth(150);
        qrCodeImageView.getStyleClass().add(""qr-code"");
        Tooltip.install(qrCodeImageView, new Tooltip(Res.get(""shared.openLargeQRWindow"")));
        qrCodeImageView.setOnMouseClicked(e -> GUIUtil.showFeeInfoBeforeExecute(
                () -> UserThread.runAfter(
                        () -> new QRCodeWindow(getBitcoinURI()).show(),
                        200, TimeUnit.MILLISECONDS)));
        GridPane.setRowIndex(qrCodeImageView, gridRow);
        GridPane.setColumnIndex(qrCodeImageView, 1);
        GridPane.setRowSpan(qrCodeImageView, 3);
        GridPane.setValignment(qrCodeImageView, VPos.BOTTOM);
        GridPane.setMargin(qrCodeImageView, new Insets(Layout.FIRST_ROW_DISTANCE - 9, 0, 0, 10));
        gridPane.getChildren().add(qrCodeImageView);

        addressTextField = addAddressTextField(gridPane, ++gridRow, Res.get(""shared.tradeWalletAddress""));
        addressTextField.setVisible(false);

        balanceTextField = addBalanceTextField(gridPane, ++gridRow, Res.get(""shared.tradeWalletBalance""));
        balanceTextField.setVisible(false);

        fundingHBox = new HBox();
        fundingHBox.setVisible(false);
        fundingHBox.setManaged(false);
        fundingHBox.setSpacing(10);
        Button fundFromSavingsWalletButton = new AutoTooltipButton(Res.get(""shared.fundFromSavingsWalletButton""));
        fundFromSavingsWalletButton.setDefaultButton(true);
        fundFromSavingsWalletButton.getStyleClass().add(""action-button"");
        fundFromSavingsWalletButton.setOnAction(e -> model.fundFromSavingsWallet());
        Label label = new AutoTooltipLabel(Res.get(""shared.OR""));
        label.setPadding(new Insets(5, 0, 0, 0));
        Button fundFromExternalWalletButton = new AutoTooltipButton(Res.get(""shared.fundFromExternalWalletButton""));
        fundFromExternalWalletButton.setDefaultButton(false);
        fundFromExternalWalletButton.setOnAction(e -> GUIUtil.showFeeInfoBeforeExecute(this::openWallet));
        waitingForFundsBusyAnimation = new BusyAnimation(false);
        waitingForFundsLabel = new AutoTooltipLabel();
        waitingForFundsLabel.setPadding(new Insets(5, 0, 0, 0));
        fundingHBox.getChildren().addAll(fundFromSavingsWalletButton,
                label,
                fundFromExternalWalletButton,
                waitingForFundsBusyAnimation,
                waitingForFundsLabel);

        GridPane.setRowIndex(fundingHBox, ++gridRow);
        GridPane.setMargin(fundingHBox, new Insets(5, 0, 0, 0));
        gridPane.getChildren().add(fundingHBox);

        takeOfferBox = new HBox();
        takeOfferBox.setSpacing(10);
        GridPane.setRowIndex(takeOfferBox, gridRow);
        GridPane.setColumnSpan(takeOfferBox, 2);
        GridPane.setMargin(takeOfferBox, new Insets(5, 20, 0, 0));
        gridPane.getChildren().add(takeOfferBox);

        takeOfferButton = new AutoTooltipButton();
        takeOfferButton.setOnAction(e -> onTakeOffer());
        takeOfferButton.setMinHeight(40);
        takeOfferButton.setPadding(new Insets(0, 20, 0, 20));

        takeOfferBox.getChildren().add(takeOfferButton);
        takeOfferBox.visibleProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue) {
                fundingHBox.getChildren().remove(cancelButton2);
                takeOfferBox.getChildren().add(cancelButton2);
            } else if (!fundingHBox.getChildren().contains(cancelButton2)) {
                takeOfferBox.getChildren().remove(cancelButton2);
                fundingHBox.getChildren().add(cancelButton2);
            }
        });

        cancelButton2 = new AutoTooltipButton(Res.get(""shared.cancel""));

        fundingHBox.getChildren().add(cancelButton2);

        cancelButton2.setOnAction(e -> {
            String key = ""CreateOfferCancelAndFunded"";
            if (model.dataModel.getIsBtcWalletFunded().get() &&
                    model.dataModel.preferences.showAgain(key)) {
                new Popup().backgroundInfo(Res.get(""takeOffer.alreadyFunded.askCancel""))
                        .closeButtonText(Res.get(""shared.no""))
                        .actionButtonText(Res.get(""shared.yesCancel""))
                        .onAction(() -> {
                            model.dataModel.swapTradeToSavings();
                            close(false);
                        })
                        .dontShowAgainId(key)
                        .show();
            } else {
                close(false);
                model.dataModel.swapTradeToSavings();
            }
        });
        cancelButton2.setDefaultButton(false);
        cancelButton2.setVisible(false);
    }

    private void openWallet() {
        try {
            Utilities.openURI(URI.create(getBitcoinURI()));
        } catch (Exception ex) {
            log.warn(ex.getMessage());
            new Popup().warning(Res.get(""shared.openDefaultWalletFailed"")).show();
        }
    }

    @NotNull
    private String getBitcoinURI() {
        return GUIUtil.getBitcoinURI(model.dataModel.getAddressEntry().getAddressString(),
                model.dataModel.getMissingCoin().get(),
                model.getPaymentLabel());
    }

    private void addAmountPriceFields() {
        // amountBox
        Tuple3<HBox, InputTextField, Label> amountValueCurrencyBoxTuple = getEditableValueBox(Res.get(""takeOffer.amount.prompt""));
        amountValueCurrencyBox = amountValueCurrencyBoxTuple.first;
        amountTextField = amountValueCurrencyBoxTuple.second;
        Tuple2<Label, VBox> amountInputBoxTuple = getTradeInputBox(amountValueCurrencyBox, model.getAmountDescription());
        amountDescriptionLabel = amountInputBoxTuple.first;
        VBox amountBox = amountInputBoxTuple.second;

        // x
        xLabel = new Label();
        xIcon = getIconForLabel(MaterialDesignIcon.CLOSE, ""2em"", xLabel);
        xIcon.getStyleClass().add(""opaque-icon"");
        xLabel.getStyleClass().addAll(""opaque-icon-character"");

        // price
        Tuple3<HBox, TextField, Label> priceValueCurrencyBoxTuple = getNonEditableValueBox();
        priceValueCurrencyBox = priceValueCurrencyBoxTuple.first;
        priceTextField = priceValueCurrencyBoxTuple.second;
        priceCurrencyLabel = priceValueCurrencyBoxTuple.third;
        Tuple2<Label, VBox> priceInputBoxTuple = getTradeInputBox(priceValueCurrencyBox,
                Res.get(""takeOffer.amountPriceBox.priceDescription""));
        priceDescriptionLabel = priceInputBoxTuple.first;

        getSmallIconForLabel(MaterialDesignIcon.LOCK, priceDescriptionLabel, ""small-icon-label"");

        VBox priceBox = priceInputBoxTuple.second;

        // =
        resultLabel = new AutoTooltipLabel(""="");
        resultLabel.getStyleClass().addAll(""opaque-icon-character"");

        // volume
        Tuple3<HBox, InfoInputTextField, Label> volumeValueCurrencyBoxTuple = getNonEditableValueBoxWithInfo();
        volumeValueCurrencyBox = volumeValueCurrencyBoxTuple.first;

        volumeInfoTextField = volumeValueCurrencyBoxTuple.second;
        volumeTextField = volumeInfoTextField.getInputTextField();
        volumeCurrencyLabel = volumeValueCurrencyBoxTuple.third;
        Tuple2<Label, VBox> volumeInputBoxTuple = getTradeInputBox(volumeValueCurrencyBox, model.volumeDescriptionLabel.get());
        volumeDescriptionLabel = volumeInputBoxTuple.first;
        VBox volumeBox = volumeInputBoxTuple.second;

        firstRowHBox = new HBox();
        firstRowHBox.setSpacing(5);
        firstRowHBox.setAlignment(Pos.CENTER_LEFT);
        firstRowHBox.getChildren().addAll(amountBox, xLabel, priceBox, resultLabel, volumeBox);
        GridPane.setColumnSpan(firstRowHBox, 2);
        GridPane.setRowIndex(firstRowHBox, gridRow);
        GridPane.setMargin(firstRowHBox, new Insets(Layout.COMPACT_FIRST_ROW_AND_GROUP_DISTANCE, 10, 0, 0));
        gridPane.getChildren().add(firstRowHBox);
    }

    private void addSecondRow() {
        Tuple3<HBox, TextField, Label> priceAsPercentageTuple = getNonEditableValueBox();
        priceAsPercentageValueCurrencyBox = priceAsPercentageTuple.first;
        priceAsPercentageTextField = priceAsPercentageTuple.second;
        priceAsPercentageLabel = priceAsPercentageTuple.third;

        Tuple2<Label, VBox> priceAsPercentageInputBoxTuple = getTradeInputBox(priceAsPercentageValueCurrencyBox, """");
        priceAsPercentageDescription = priceAsPercentageInputBoxTuple.first;

        getSmallIconForLabel(MaterialDesignIcon.CHART_LINE, priceAsPercentageDescription, ""small-icon-label"");

        priceAsPercentageInputBox = priceAsPercentageInputBoxTuple.second;

        priceAsPercentageLabel.setText(""%"");

        Tuple3<HBox, TextField, Label> amountValueCurrencyBoxTuple = getNonEditableValueBox();
        amountRangeTextField = amountValueCurrencyBoxTuple.second;

        minAmountValueCurrencyBox = amountValueCurrencyBoxTuple.first;
        Tuple2<Label, VBox> amountInputBoxTuple = getTradeInputBox(minAmountValueCurrencyBox,
                Res.get(""takeOffer.amountPriceBox.amountRangeDescription""));

        amountRangeBox = amountInputBoxTuple.second;
        amountRangeBox.setVisible(false);

        fakeXLabel = new Label();
        fakeXIcon = getIconForLabel(MaterialDesignIcon.CLOSE, ""2em"", fakeXLabel);
        fakeXLabel.setVisible(false); // we just use it to get the same layout as the upper row
        fakeXLabel.getStyleClass().add(""opaque-icon-character"");

        HBox hBox = new HBox();
        hBox.setSpacing(5);
        hBox.setAlignment(Pos.CENTER_LEFT);
        hBox.getChildren().addAll(amountRangeBox, fakeXLabel, priceAsPercentageInputBox);

        GridPane.setRowIndex(hBox, ++gridRow);
        GridPane.setMargin(hBox, new Insets(0, 10, 10, 0));
        gridPane.getChildren().add(hBox);
    }

    private VBox getTradeFeeFieldsBox() {
        tradeFeeInBtcLabel = new Label();
        tradeFeeInBtcLabel.setMouseTransparent(true);
        tradeFeeInBtcLabel.setId(""trade-fee-textfield"");

        tradeFeeInBsqLabel = new Label();
        tradeFeeInBsqLabel.setMouseTransparent(true);
        tradeFeeInBsqLabel.setId(""trade-fee-textfield"");

        VBox vBox = new VBox();
        vBox.setSpacing(6);
        vBox.setMaxWidth(300);
        vBox.setAlignment(DevEnv.isDaoActivated() ? Pos.CENTER_RIGHT : Pos.CENTER_LEFT);
        vBox.getChildren().addAll(tradeFeeInBtcLabel, tradeFeeInBsqLabel);

        tradeFeeInBtcToggle = new AutoTooltipSlideToggleButton();
        tradeFeeInBtcToggle.setText(""BTC"");
        tradeFeeInBtcToggle.setPadding(new Insets(-8, 5, -10, 5));

        tradeFeeInBsqToggle = new AutoTooltipSlideToggleButton();
        tradeFeeInBsqToggle.setText(""BSQ"");
        tradeFeeInBsqToggle.setPadding(new Insets(-9, 5, -9, 5));

        VBox tradeFeeToggleButtonBox = new VBox();
        tradeFeeToggleButtonBox.getChildren().addAll(tradeFeeInBtcToggle, tradeFeeInBsqToggle);

        HBox hBox = new HBox();
        hBox.getChildren().addAll(vBox, tradeFeeToggleButtonBox);
        hBox.setMinHeight(47);
        hBox.setMaxHeight(hBox.getMinHeight());
        HBox.setHgrow(vBox, Priority.ALWAYS);
        HBox.setHgrow(tradeFeeToggleButtonBox, Priority.NEVER);

        final Tuple2<Label, VBox> tradeInputBox = getTradeInputBox(hBox, Res.get(""createOffer.tradeFee.descriptionBSQEnabled""));

        tradeFeeDescriptionLabel = tradeInputBox.first;

        return tradeInputBox.second;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Utils
    ///////////////////////////////////////////////////////////////////////////////////////////


    private void showInsufficientBsqFundsForBtcFeePaymentPopup() {
        Coin takerFee = model.dataModel.getTakerFee(false);
        String message = null;
        if (takerFee != null)
            message = Res.get(""popup.warning.insufficientBsqFundsForBtcFeePayment"",
                    bsqFormatter.formatCoinWithCode(takerFee.subtract(model.dataModel.getUsableBsqBalance())));

        else if (model.dataModel.getUsableBsqBalance().isZero())
            message = Res.get(""popup.warning.noBsqFundsForBtcFeePayment"");

        if (message != null)
            new Popup().warning(message)
                    .actionButtonTextWithGoTo(""navigation.dao.wallet.receive"")
                    .onAction(() -> navigation.navigateTo(MainView.class, DaoView.class, BsqWalletView.class, BsqReceiveView.class))
                    .show();
    }

    private void maybeShowTakeOfferFromUnsignedAccountWarning(Offer offer) {
        // warn if you are selling BTC to unsigned account (#5343)
        if (model.isSellingToAnUnsignedAccount(offer) && !takeOfferFromUnsignedAccountWarningDisplayed) {
            takeOfferFromUnsignedAccountWarningDisplayed = true;
            UserThread.runAfter(GUIUtil::showTakeOfferFromUnsignedAccountWarning, 500, TimeUnit.MILLISECONDS);
        }
    }

    private void maybeShowClearXchangeWarning(PaymentAccount paymentAccount) {
        if (paymentAccount.getPaymentMethod().getId().equals(PaymentMethod.CLEAR_X_CHANGE_ID) &&
                !clearXchangeWarningDisplayed) {
            clearXchangeWarningDisplayed = true;
            UserThread.runAfter(GUIUtil::showClearXchangeWarning, 500, TimeUnit.MILLISECONDS);
        }
    }

    private void maybeShowFasterPaymentsWarning(PaymentAccount paymentAccount) {
        if (paymentAccount.getPaymentMethod().getId().equals(PaymentMethod.FASTER_PAYMENTS_ID) &&
                ((FasterPaymentsAccount) paymentAccount).getHolderName().isEmpty() &&
                !fasterPaymentsWarningDisplayed) {
            fasterPaymentsWarningDisplayed = true;
            UserThread.runAfter(() -> GUIUtil.showFasterPaymentsWarning(navigation), 500, TimeUnit.MILLISECONDS);
        }
    }

    private void maybeShowAccountWarning(PaymentAccount paymentAccount, boolean isBuyer) {
        String msgKey = paymentAccount.getPreTradeMessage(!isBuyer);
        OfferViewUtil.showPaymentAccountWarning(msgKey, paymentAccountWarningDisplayed);
    }

    private void maybeShowCashByMailWarning(PaymentAccount paymentAccount, Offer offer) {
        if (paymentAccount.getPaymentMethod().getId().equals(PaymentMethod.CASH_BY_MAIL_ID) &&
                !cashByMailWarningDisplayed && !offer.getExtraInfo().isEmpty()) {
            cashByMailWarningDisplayed = true;
            UserThread.runAfter(() -> {
                new GenericMessageWindow()
                        .preamble(Res.get(""payment.cashByMail.tradingRestrictions""))
                        .instruction(offer.getExtraInfo())
                        .actionButtonText(Res.get(""shared.iConfirm""))
                        .closeButtonText(Res.get(""shared.close""))
                        .width(Layout.INITIAL_WINDOW_WIDTH)
                        .onClose(() -> close(false))
                        .show();
            }, 500, TimeUnit.MILLISECONDS);
        }
    }

    private Tuple2<Label, VBox> getTradeInputBox(HBox amountValueBox, String promptText) {
        Label descriptionLabel = new AutoTooltipLabel(promptText);
        descriptionLabel.setId(""input-description-label"");
        descriptionLabel.setPrefWidth(170);

        VBox box = new VBox();
        box.setPadding(new Insets(10, 0, 0, 0));
        box.setSpacing(2);
        box.getChildren().addAll(descriptionLabel, amountValueBox);
        return new Tuple2<>(descriptionLabel, box);
    }

    // As we don't use binding here we need to recreate it on mouse over to reflect the current state
    private GridPane createInfoPopover() {
        GridPane infoGridPane = new GridPane();
        infoGridPane.setHgap(5);
        infoGridPane.setVgap(5);
        infoGridPane.setPadding(new Insets(10, 10, 10, 10));

        int i = 0;
        if (model.isSeller()) {
            addPayInfoEntry(infoGridPane, i++, Res.get(""takeOffer.fundsBox.tradeAmount""), model.getTradeAmount());
        }

        addPayInfoEntry(infoGridPane, i++, Res.getWithCol(""shared.yourSecurityDeposit""), model.getSecurityDepositInfo());
        addPayInfoEntry(infoGridPane, i++, Res.get(""takeOffer.fundsBox.offerFee""), model.getTradeFee());
        addPayInfoEntry(infoGridPane, i++, Res.get(""takeOffer.fundsBox.networkFee""), model.getTxFee());
        Separator separator = new Separator();
        separator.setOrientation(Orientation.HORIZONTAL);
        separator.getStyleClass().add(""offer-separator"");
        GridPane.setConstraints(separator, 1, i++);
        infoGridPane.getChildren().add(separator);
        addPayInfoEntry(infoGridPane, i, Res.getWithCol(""shared.total""),
                model.getTotalToPayInfo());

        return infoGridPane;
    }
}",1,64 2000 777 587 2001 650 2002 60 2003 44 2004 62 123 773 657 2005 2006 59 773 657 2007 2008 59 773 657 2009 2010 59 773 657 2011 2012 59 773 657 2013 2014 59 773 2015 2016 59 773 2017 2018 59 773 2019 2020 44 2021 44 2022 59 773 2023 2024 44 2025 59 773 2026 2027 44 2028 44 2029 44 2030 44 2031 44 2032 44 2033 44 2034 44 2035 44 2036 44 2037 59 773 2038 60 2039 62 2040 59 773 2041 2042 44 2043 44 2044 44 2045 44 2046 44 2047 44 2048 44 2049 44 2050 44 2051 44 2052 44 2053 44 2054 44 2055 44 2056 44 2057 59 773 2058 2059 59 773 2060 2061 44 2062 44 2063 44 2064 44 2065 44 2066 59 773 2067 2068 59 773 2069 2070 59 773 2071 2072 59 773 2073 2074 44 2075 59 773 2076 2077 44 2078 44 2079 59 773 2080 2081 59 773 2082 2083 59 773 2084 2085 44 2086 59 773 2087 2088 59 773 2089 46 2090 2091 59 773 2092 2093 44 2094 44 2095 44 2096 44 2097 44 2098 44 2099 59 773 704 2100 61 1500 59 773 657 2101 60 2102 44 2103 62 2104 61 744 2101 60 62 40 41 59 773 570 2105 44 2106 44 2107 44 2108 44 2109 59 773 2110 2111 59 773 2112 60 2103 62 2113 44 2114 59 773 2115 2116 59 773 2117 2118 44 2119 59 773 2112 60 2103 62 2120 44 2121 44 2122 59 331 330 331 64 2123 773 2001 40 2004 2124 44 2005 2006 44 64 2125 40 2126 46 2127 41 2007 2008 44 2009 2010 44 2011 2012 44 2013 2014 41 123 818 40 2124 41 59 823 46 2006 61 2006 59 823 46 2008 61 2008 59 823 46 2010 61 2010 59 823 46 2012 61 2012 59 823 46 2014 61 2014 59 125 64 2128 775 865 2129 40 41 123 2130 40 41 59 2131 40 41 59 2132 40 41 59 2133 40 41 59 2134 40 41 59 2135 40 41 59 2136 40 41 59 2137 40 41 59 2072 46 2138 40 2124 46 2139 40 41 41 59 2113 61 40 2140 44 2141 44 2142 41 45 62 123 2124 46 2143 40 2141 44 2142 44 2059 46 2144 40 41 41 59 2059 46 2145 40 2124 46 2146 46 2147 40 41 41 59 125 59 2114 61 40 2148 44 2141 44 2142 41 45 62 123 688 40 2142 41 123 2087 2088 61 744 2087 40 41 46 2149 40 2150 46 2151 40 362 41 41 46 2152 40 2150 46 2151 40 362 44 2008 46 2153 40 2124 46 2154 46 2155 40 41 46 2151 40 41 41 41 41 46 2156 40 41 59 2088 46 2157 40 41 59 125 125 59 2120 61 40 2148 44 2141 44 2142 41 45 62 123 688 40 2142 307 2119 46 2158 40 41 41 2119 46 2159 40 2160 41 59 688 40 33 2142 307 33 2119 46 2158 40 41 41 2119 46 2159 40 2161 41 59 2162 40 2142 41 59 125 59 2121 61 40 2148 44 2141 44 2142 41 45 62 123 688 40 2142 307 2118 46 2163 40 41 41 2118 46 2164 40 2165 41 59 688 40 33 2142 307 33 2118 46 2163 40 41 41 2118 46 2164 40 2166 41 59 2167 40 33 2142 41 59 125 59 2122 61 40 2148 44 2141 44 2142 41 45 62 123 688 40 2168 46 2169 40 41 41 123 2118 46 2170 40 2142 41 59 2119 46 2170 40 2142 41 59 688 40 2124 46 2171 40 41 41 123 2037 46 2170 40 2142 41 59 2037 46 2172 40 2142 41 59 125 125 125 59 2173 46 2174 40 2059 41 59 125 773 865 2175 40 570 2176 41 123 2124 46 2177 40 2176 41 59 688 40 2178 46 2179 40 41 41 123 2054 46 2180 40 2176 63 1501 58 1500 41 59 2055 46 2180 40 2176 63 1500 58 1501 41 59 125 125 64 2128 775 865 2181 40 41 123 2182 40 41 59 2183 40 41 59 2184 40 41 59 688 40 2086 340 2185 307 33 2124 46 2186 46 2187 40 41 41 123 330 330 2050 46 2188 40 2189 41 59 2050 46 2190 40 2189 41 59 125 630 123 2050 46 2191 40 2192 41 59 2050 46 2193 40 2192 41 59 125 688 40 2085 340 2185 307 2124 46 2194 46 2187 40 41 41 123 330 330 2049 46 2195 40 2196 41 59 2049 46 2197 40 2196 41 59 125 630 123 2049 46 2198 40 2199 41 59 2049 46 2200 40 2199 41 59 125 2102 2201 61 2124 46 2202 46 2203 40 41 59 2046 46 2204 40 2201 41 59 2047 46 2204 40 2205 46 2206 40 2201 41 41 59 2048 46 2204 40 2124 46 2048 46 2187 40 41 41 59 2039 2207 61 2124 46 2208 40 41 59 688 40 2124 46 2209 40 41 46 2210 40 41 62 1501 41 123 744 2211 40 41 46 2212 40 2213 46 2187 40 362 41 41 46 2214 40 2213 46 2187 40 362 41 41 46 2215 40 362 41 46 2216 40 41 59 2040 46 2217 40 2124 46 2209 40 41 41 59 2040 46 2218 40 41 46 2219 40 2207 41 59 2124 46 2220 40 2207 41 59 2021 46 2204 40 2213 46 2187 40 362 41 41 59 125 2072 46 2221 40 2124 46 2202 46 2222 40 41 46 2187 40 41 41 59 2223 40 2124 46 2202 46 2224 40 41 41 59 2225 40 2207 41 59 2226 40 2207 41 59 2227 40 2207 44 2124 46 2202 46 2228 40 41 41 59 2229 40 2207 44 2124 46 2202 46 2224 40 41 41 59 688 40 33 2230 46 2231 40 41 307 33 2124 46 2232 40 41 41 123 2077 46 2233 40 2234 41 59 2078 46 2233 40 2234 41 59 688 40 2124 46 2235 46 2187 40 41 41 2236 40 41 59 125 570 2237 61 2124 46 2202 46 2238 40 41 59 2118 46 2239 40 2237 41 59 2119 46 2239 40 33 2237 41 59 688 40 33 2230 46 2231 40 41 41 123 2118 46 2240 40 2241 41 59 2118 46 2242 40 2241 41 59 2119 46 2240 40 2241 41 59 2119 46 2242 40 2241 41 59 2037 46 2240 40 2241 41 59 2037 46 2242 40 2241 41 59 125 688 40 33 2124 46 2243 40 41 41 123 2037 46 2244 40 2245 41 59 2037 46 2246 40 2245 41 59 125 125 64 2128 775 865 2247 40 41 123 2248 40 41 59 2249 40 41 59 2250 40 41 59 688 40 2086 340 2251 41 2086 46 2252 40 41 59 688 40 2085 340 2251 41 2085 46 2252 40 41 59 125 331 330 331 777 865 2253 40 2254 2255 41 123 2124 46 2253 40 2255 41 59 2024 46 2256 40 2255 46 2257 40 41 41 59 688 40 2124 46 2258 40 41 46 2259 40 41 323 2260 46 2261 41 123 2081 46 2262 40 362 41 59 2081 46 2263 40 2264 46 2265 40 362 44 2264 46 2265 40 362 41 41 41 59 2077 46 2262 40 362 41 59 125 630 123 2081 46 2266 40 362 41 59 2077 46 2266 40 362 41 59 2081 46 2267 40 2268 46 2269 40 362 44 2268 46 2269 40 362 41 41 41 59 125 2051 46 2270 40 2124 46 2271 40 41 41 59 570 2272 61 2124 46 2273 40 41 46 2274 40 41 62 1501 59 2040 46 2256 40 2272 41 59 2040 46 2275 40 2272 41 59 2040 46 2276 40 33 2272 41 59 2061 46 2256 40 33 2272 41 59 2061 46 2275 40 33 2272 41 59 2043 46 2256 40 33 2272 41 59 2043 46 2275 40 33 2272 41 59 688 40 33 2272 41 123 2061 46 2270 40 2124 46 2273 40 41 46 2277 40 1500 41 46 2278 40 41 41 59 125 2062 46 2270 40 2124 46 2279 46 2280 40 41 41 59 2042 46 2270 40 2124 46 2281 40 41 41 59 688 40 2124 46 2282 40 41 41 123 2066 46 2270 40 2124 46 2283 40 41 41 59 2025 46 2256 40 2284 41 59 125 630 123 2059 46 2285 40 2286 41 59 125 2063 46 2270 40 2124 46 2287 40 41 41 59 2064 46 2270 40 2124 46 2288 41 59 2070 46 2289 40 2124 46 2290 40 41 41 59 2070 46 2291 40 2124 46 2279 46 2292 40 41 46 2293 40 41 41 59 688 40 2294 46 2295 40 2255 46 2296 40 41 41 41 123 2041 2297 61 2298 46 2299 40 2300 46 2301 40 362 41 41 59 2116 46 2302 40 2297 41 59 125 688 40 2255 46 2287 40 41 323 2303 41 744 2304 40 41 46 2305 40 2306 46 2307 40 362 41 41 46 2308 40 40 41 45 62 2309 40 2310 41 41 46 2311 40 41 59 125 777 865 2312 40 2089 46 2090 2091 41 123 823 46 2091 61 2091 59 125 330 777 865 2313 40 41 123 2314 2315 61 2124 46 2316 46 2317 40 41 46 2318 40 41 59 688 40 2315 340 2319 307 2315 46 2320 40 41 307 33 2124 46 2321 46 2318 40 41 307 33 2322 46 2323 40 41 41 123 2124 46 2316 46 2324 40 41 59 125 125 777 865 2325 40 570 2326 41 123 2124 46 2327 46 2325 40 2326 41 59 125 331 330 331 773 865 2328 40 41 123 688 40 33 2124 46 2329 46 2330 40 41 41 123 792 59 125 688 40 33 2124 46 2329 46 2331 40 41 41 123 2332 40 41 59 792 59 125 688 40 2333 46 2334 40 41 41 123 2093 46 2335 40 41 59 2124 46 2328 40 40 41 45 62 123 125 41 59 792 59 125 2012 46 2328 40 40 41 45 62 2124 46 2328 40 40 41 45 62 123 2012 46 2336 40 41 59 2105 61 2337 59 125 41 41 46 2338 40 2124 46 2339 40 41 44 2124 46 2329 46 2340 40 41 46 2341 40 41 44 2124 46 2329 46 2342 41 59 2105 61 2343 59 125 773 865 2344 40 41 123 2016 46 2345 40 2015 46 2346 46 2347 41 59 2077 46 2348 40 2349 41 59 2077 46 2350 40 2349 41 59 2077 46 2351 40 2352 41 59 2078 46 2348 40 2349 41 59 2078 46 2350 40 2349 41 59 2078 46 2351 40 2352 41 59 2086 46 2353 40 41 59 2086 46 2348 40 2349 41 59 2086 46 2350 40 2349 41 59 2050 46 2348 40 2349 41 59 2050 46 2350 40 2349 41 59 2118 46 2354 40 2355 41 59 2119 46 2354 40 2355 41 59 2037 46 2348 40 2349 41 59 2037 46 2350 40 2349 41 59 704 2356 61 1504 59 704 2357 61 1503 59 2014 46 2358 40 2022 44 2356 44 40 2359 41 45 62 123 125 41 59 2356 337 2357 59 2014 46 2358 40 2033 44 2356 41 59 2124 46 2344 40 41 59 688 40 2360 46 2361 40 41 41 123 2040 46 2354 40 2355 41 59 2040 46 2362 40 2355 41 59 2040 46 2363 40 2349 41 59 125 2059 46 2354 40 2355 41 59 2059 46 2364 40 2349 41 59 2059 46 2365 40 2349 41 59 2066 46 2354 40 2355 41 59 2066 46 2364 40 2349 41 59 2066 46 2365 40 2349 41 59 2063 46 2354 40 2355 41 59 2063 46 2364 40 2349 41 59 2063 46 2365 40 2349 41 59 2064 46 2354 40 2355 41 59 2064 46 2364 40 2349 41 59 2064 46 2365 40 2349 41 59 2065 46 2354 40 2355 41 59 2065 46 2364 40 2349 41 59 2065 46 2365 40 2349 41 59 2366 40 41 59 2072 46 2367 40 2124 46 2368 46 2369 40 41 46 2370 40 41 41 59 688 40 33 2360 46 2371 40 41 41 123 2102 2372 61 362 59 744 2373 40 41 46 2374 40 2375 46 2370 40 362 41 41 46 2376 40 2375 46 2370 40 362 41 41 46 2377 40 40 41 45 62 2378 46 2379 40 362 41 41 46 2380 40 41 46 2381 40 2372 41 46 2382 40 41 59 2102 2383 61 2124 46 2384 40 41 63 2375 46 2370 40 362 44 2124 46 2385 40 41 41 58 362 59 2102 2386 61 2375 46 2370 40 362 44 2124 46 2387 40 41 44 2383 44 2124 46 2388 40 41 44 2124 46 2389 40 41 44 2124 46 2390 40 41 41 59 2372 61 362 59 744 2373 40 41 46 2391 40 2375 46 2370 40 362 41 41 46 2392 40 2386 41 46 2381 40 2372 41 46 2382 40 41 59 125 2079 46 2348 40 2355 41 59 330 330 2020 46 2348 40 2355 41 59 2068 46 2348 40 2355 41 59 2070 46 2348 40 2355 41 59 2083 46 2348 40 2355 41 59 2072 46 2348 40 2355 41 59 2068 46 2393 40 2394 46 2370 40 362 44 2124 46 2395 40 41 44 2124 46 2396 40 41 44 2124 46 2397 40 41 41 41 59 2068 46 2398 40 2399 40 41 41 59 688 40 2124 46 2368 46 2400 40 41 46 2370 40 41 41 123 688 40 2088 323 2352 41 123 2088 61 744 2087 40 41 46 2401 40 2394 46 2370 40 362 41 41 46 2402 40 2394 46 2370 40 362 44 2008 46 2403 40 2124 46 2368 46 2369 40 41 46 2370 40 41 41 41 41 46 2404 40 41 59 2088 46 2405 40 41 59 125 125 657 574 91 93 2406 61 2407 46 2408 40 2409 40 41 41 46 2410 40 1503 44 1503 41 330 46 2411 40 2412 46 2413 41 46 2414 40 41 46 2415 40 41 59 2416 2417 61 744 2416 40 744 2418 40 2406 41 41 59 2083 46 2419 40 2417 41 59 125 773 865 2420 40 41 123 2017 46 2421 40 2036 44 1501 41 59 657 2102 2422 61 362 59 657 2102 2423 61 362 59 2028 46 2424 40 41 46 2425 40 2422 41 59 2028 46 2424 40 41 46 2426 40 2423 41 59 2031 46 2424 40 41 46 2425 40 2422 41 59 2031 46 2424 40 41 46 2426 40 2423 41 59 2030 46 2424 40 41 46 2425 40 2422 41 59 2030 46 2424 40 41 46 2426 40 2423 41 59 2029 46 2424 40 41 46 2425 40 2422 41 59 2029 46 2424 40 41 46 2426 40 2423 41 59 2032 46 2424 40 41 46 2425 40 2422 41 59 2032 46 2424 40 41 46 2426 40 2423 41 59 2053 46 2424 40 41 46 2426 40 362 41 59 2056 46 2424 40 41 46 2426 40 362 41 59 2074 46 2427 40 2102 46 2428 40 362 44 2429 46 2430 46 2431 40 41 44 362 41 41 59 2075 46 2427 40 2102 46 2428 40 362 44 2429 46 2430 46 2431 40 41 44 362 41 41 59 2057 46 2424 40 41 46 2426 40 362 41 59 125 331 330 331 773 865 2432 40 41 123 2432 40 2433 41 59 125 773 865 2432 40 570 2434 41 123 2124 46 2435 46 2313 40 2434 41 59 688 40 2091 340 2436 41 2091 46 2432 40 41 59 125 331 330 331 773 865 2437 40 41 123 2059 46 2438 40 41 46 2439 40 2124 46 2440 41 59 2065 46 2438 40 41 46 2439 40 2124 46 2441 41 59 2068 46 2438 40 41 46 2442 40 2124 46 2443 41 59 2070 46 2444 40 41 46 2442 40 2124 46 2445 46 2446 40 41 41 59 2059 46 2447 40 41 46 2442 40 2124 46 2448 41 59 2044 46 2438 40 41 46 2442 40 2449 40 40 41 45 62 2450 46 2451 40 2124 46 2445 46 2452 40 41 41 41 41 59 2045 46 2453 40 41 46 2442 40 2044 46 2454 40 41 41 59 2077 46 2455 40 41 46 2442 40 2124 46 2456 41 59 2054 46 2438 40 41 46 2442 40 2124 46 2457 41 59 2055 46 2438 40 41 46 2442 40 2124 46 2458 41 59 2052 46 2438 40 41 46 2442 40 2124 46 2459 41 59 2054 46 2460 40 41 46 2442 40 2124 46 2461 41 59 2055 46 2460 40 41 46 2442 40 2124 46 2461 41 59 2052 46 2460 40 41 46 2442 40 2124 46 2461 41 59 2052 46 2462 40 41 46 2442 40 2052 46 2460 40 41 41 59 330 2027 46 2460 40 41 46 2442 40 2124 46 2445 46 2463 40 41 46 2464 40 41 46 2465 40 2124 46 2466 41 41 59 2027 46 2462 40 41 46 2442 40 2124 46 2445 46 2463 40 41 46 2464 40 41 46 2465 40 2124 46 2466 41 41 59 2049 46 2438 40 41 46 2442 40 2124 46 2467 41 59 2034 46 2460 40 41 46 2442 40 2124 46 2445 46 2463 40 41 46 2465 40 2124 46 2466 41 41 59 2034 46 2462 40 41 46 2442 40 2124 46 2445 46 2463 40 41 46 2465 40 2124 46 2466 41 41 59 2081 46 2455 40 41 46 2442 40 2124 46 2468 41 59 125 773 865 2469 40 41 123 2059 46 2470 40 41 46 2471 40 2124 46 2472 41 59 2065 46 2470 40 41 46 2471 40 2124 46 2473 41 59 2068 46 2470 40 41 46 2474 40 41 59 2070 46 2475 40 41 46 2474 40 41 59 2059 46 2476 40 41 46 2474 40 41 59 2044 46 2470 40 41 46 2474 40 41 59 2045 46 2477 40 41 46 2474 40 41 59 2077 46 2478 40 41 46 2474 40 41 59 2054 46 2470 40 41 46 2474 40 41 59 2055 46 2470 40 41 46 2474 40 41 59 2052 46 2470 40 41 46 2474 40 41 59 2054 46 2479 40 41 46 2474 40 41 59 2055 46 2479 40 41 46 2474 40 41 59 2052 46 2479 40 41 46 2474 40 41 59 2052 46 2480 40 41 46 2474 40 41 59 330 2027 46 2479 40 41 46 2474 40 41 59 2027 46 2480 40 41 46 2474 40 41 59 2049 46 2470 40 41 46 2474 40 41 59 2034 46 2479 40 41 46 2474 40 41 59 2034 46 2480 40 41 46 2474 40 41 59 2081 46 2478 40 41 46 2474 40 41 59 125 773 865 2481 40 41 123 2111 61 744 2110 40 41 59 2097 61 2482 46 2483 40 2124 46 2484 44 2485 45 62 123 688 40 2485 340 2486 41 123 688 40 2105 41 2012 46 2487 40 41 59 2488 46 2489 40 40 41 45 62 744 2490 40 41 46 2491 40 2485 43 362 43 2492 46 2493 40 362 41 41 46 2494 40 362 41 46 2495 40 40 41 45 62 123 2111 46 2496 40 2497 41 59 2124 46 2498 40 41 59 2432 40 41 59 2006 46 2499 40 2500 46 587 44 2501 46 587 44 2502 46 587 41 59 125 41 46 2313 40 40 41 45 62 123 2111 46 2503 40 2504 41 59 2124 46 2505 40 41 59 2432 40 41 59 125 41 46 2506 40 41 44 1503 44 2507 46 2508 41 59 125 125 41 59 2098 61 2482 46 2483 40 2124 46 2509 44 2485 45 62 123 688 40 2485 340 2510 41 123 744 2511 40 41 46 2512 40 2513 46 2514 40 362 44 2124 46 2509 46 2514 40 41 41 43 362 43 2513 46 2514 40 362 41 41 46 2313 40 40 41 45 62 123 2111 46 2515 40 2516 41 59 2124 46 2517 40 41 59 2432 40 41 59 125 41 46 2518 40 41 59 125 125 41 59 2099 61 2482 46 2483 40 2124 46 2519 44 2519 45 62 123 688 40 2519 41 123 2086 46 2520 40 41 59 2086 46 2521 40 2522 41 59 688 40 33 2523 46 2524 40 41 307 33 2124 46 2525 40 41 307 33 2124 46 2526 46 2527 40 41 41 2528 40 41 59 125 2050 46 2529 40 33 2519 41 59 2050 46 2530 40 33 2519 41 59 125 41 59 2096 61 2482 46 2483 40 2124 46 2531 44 2531 45 62 123 330 330 2049 46 2532 40 2531 41 59 2049 46 2533 40 2531 41 59 125 41 59 2095 61 2482 46 2483 40 2124 46 2534 44 2485 45 62 123 688 40 2485 41 123 744 2535 40 41 46 2536 40 2537 46 2538 40 362 41 41 46 2539 40 41 59 2124 46 2534 46 2540 40 2541 41 59 125 125 41 59 2094 61 2482 46 2483 40 2124 46 2542 44 2485 45 62 123 688 40 2485 307 2543 46 2544 40 41 41 123 2432 40 41 59 125 630 688 40 2485 307 2124 46 2545 40 41 340 2546 307 33 2124 46 2545 40 41 46 2547 40 41 41 123 2102 2548 61 362 59 688 40 2549 46 2550 40 2548 41 41 123 744 2551 40 41 46 2552 40 2553 46 2554 40 362 41 41 46 2555 40 2553 46 2554 40 362 41 41 46 2556 40 362 41 46 2557 40 2548 41 46 2558 40 40 41 45 62 123 2559 46 2560 40 40 41 45 62 2006 46 2561 40 2562 46 587 44 2563 46 587 44 2564 46 587 41 44 1503 44 2565 46 2566 41 59 2432 40 41 59 125 41 46 2313 40 823 58 58 2432 41 46 2567 40 41 59 125 630 123 2432 40 41 59 125 125 125 41 59 2093 61 2482 46 2483 40 2124 46 2568 46 2569 40 41 44 2072 58 58 2570 41 59 125 773 865 2571 40 41 123 2097 46 2572 40 41 59 2098 46 2572 40 41 59 2099 46 2572 40 41 59 2096 46 2572 40 41 59 2095 46 2572 40 41 59 2094 46 2572 40 41 59 330 2093 46 2572 40 41 59 125 773 865 2573 40 41 123 2059 46 2574 40 41 46 2575 40 2113 41 59 2124 46 2576 46 2577 40 41 46 2575 40 2114 41 59 2124 46 2578 46 2575 40 2122 41 59 2118 46 2579 40 41 46 2575 40 2120 41 59 2119 46 2579 40 41 46 2575 40 2121 41 59 125 773 865 2580 40 41 123 2059 46 2581 40 41 46 2582 40 2113 41 59 2124 46 2583 46 2584 40 41 46 2582 40 2114 41 59 2124 46 2585 46 2582 40 2122 41 59 2118 46 2586 40 41 46 2582 40 2120 41 59 2119 46 2586 40 41 46 2582 40 2121 41 59 125 331 330 331 773 865 2587 40 41 123 2016 61 2588 46 2589 40 41 59 2590 46 2591 40 41 46 2592 40 2016 41 59 125 773 865 2593 40 41 123 2018 61 744 2017 40 41 59 2018 46 2594 40 41 46 2595 40 362 41 59 2018 46 2596 40 744 2597 40 1503 44 1503 44 45 1501 44 1503 41 41 59 2018 46 2598 40 1502 41 59 2018 46 2599 40 1502 41 59 2600 46 2601 40 2018 41 59 2016 46 2602 40 2018 41 59 125 773 865 2603 40 41 123 2021 61 2604 40 2018 44 2100 44 1501 44 2605 46 2606 40 362 41 41 59 2017 46 2607 40 2021 44 1502 41 59 657 2608 60 2038 60 2039 62 44 2041 44 2060 44 2026 62 2609 61 2610 40 2018 44 2100 44 2605 46 2606 40 362 41 44 2605 46 2606 40 362 41 44 2611 46 2612 41 59 2040 61 2609 46 2613 59 2026 46 2614 40 2040 44 744 2615 40 2611 46 2616 44 1500 44 1500 44 1500 41 41 59 2040 46 2617 40 2618 46 2619 40 41 41 59 2040 46 2620 40 2124 46 2621 40 2040 41 41 59 2040 46 2622 40 2623 41 59 2040 46 2624 40 2623 41 59 2040 46 2625 40 2626 45 62 123 2039 2627 61 2040 46 2628 40 41 46 2629 40 41 59 688 40 2627 340 2630 41 123 2631 40 2627 41 59 2632 40 2627 41 59 2633 40 2627 44 2124 46 2634 46 2635 40 41 41 59 125 2124 46 2636 40 2627 41 59 125 41 59 2043 61 2609 46 2637 59 2061 61 2609 46 2638 59 2061 46 2639 40 1504 41 59 2061 46 2640 40 2623 41 59 2061 46 2641 40 2642 41 59 2061 46 2643 40 2623 41 59 2062 61 744 2644 40 41 59 2062 46 2639 40 1504 41 59 2062 46 2640 40 2623 41 59 2062 46 2641 40 2642 41 59 2062 46 2643 40 2623 41 59 657 2645 60 2041 44 2023 62 2646 61 2647 40 2605 46 2606 40 362 41 44 2062 41 59 2026 46 2614 40 2646 46 2637 44 744 2615 40 1502 44 1500 44 1500 44 1500 41 41 59 657 2026 2648 61 2609 46 2649 59 2648 46 2650 40 1503 41 59 2648 46 2651 40 2652 46 2653 41 59 2648 46 2654 40 744 2615 40 1502 44 1500 44 1503 44 1500 41 41 59 2648 46 2655 40 41 46 2656 40 2646 46 2637 41 59 125 773 865 2657 40 41 123 2019 2658 61 2659 40 2018 44 349 2100 44 1502 44 2660 46 2661 40 362 41 44 2662 46 2663 41 59 2017 46 2664 40 2658 44 1502 41 59 2665 40 41 59 2666 40 41 59 125 773 865 2667 40 41 123 2022 61 2668 40 2018 44 349 2100 44 1501 44 2669 46 2670 40 362 41 44 2671 46 2672 41 59 2033 61 744 2026 40 41 59 2033 46 2673 40 1503 41 59 2017 46 2674 40 2033 44 2100 41 59 2017 46 2675 40 2033 44 2017 46 2676 41 59 2017 46 2677 40 2033 44 1500 41 59 2017 46 2678 40 2033 44 2679 46 2680 41 59 2017 46 2681 40 2033 44 744 2682 40 2671 46 2683 44 1500 44 1500 44 1500 41 41 59 2018 46 2684 40 41 46 2685 40 2033 41 59 2686 60 2080 44 2026 62 2687 61 2688 46 2689 40 2006 44 2124 46 2690 46 2691 41 59 2037 61 2687 46 2692 59 2037 46 2693 40 2694 41 59 2037 46 2695 40 2694 41 59 2023 2696 61 2697 40 41 59 2696 46 2698 40 1504 41 59 2033 46 2684 40 41 46 2699 40 2696 44 2037 41 59 125 773 865 2700 40 41 123 2701 60 2076 44 2076 44 2026 62 2702 61 2703 40 2018 44 349 2100 44 2704 46 2705 40 362 41 44 2704 46 2705 40 362 41 44 1503 44 2706 41 59 2035 61 2702 46 2707 59 2077 61 2702 46 2708 59 2077 46 2709 40 1504 41 59 2077 46 2710 40 2706 41 59 2077 46 2711 40 2712 45 62 2713 40 41 41 59 2078 61 2702 46 2714 59 2078 46 2709 40 1504 41 59 2078 46 2710 40 2715 41 59 2078 46 2711 40 2712 45 62 123 2124 46 2716 46 2717 40 41 59 2432 40 2715 41 59 125 41 59 125 773 865 2718 40 41 123 330 330 330 704 2719 61 2124 46 2720 46 2721 46 2722 40 41 59 688 40 2719 323 1500 41 123 744 2723 40 41 46 2724 40 2725 46 2722 40 362 41 43 2124 46 2720 46 2726 40 41 41 46 2313 40 40 41 45 62 123 2078 46 2727 40 41 59 125 41 46 2728 40 41 59 125 630 123 688 40 2719 323 45 1501 41 123 2729 46 2730 40 362 41 59 125 2731 40 41 59 125 125 773 865 2732 40 41 123 688 40 2733 46 2734 40 41 41 2735 40 41 59 630 2344 40 41 59 125 773 865 2736 40 41 123 570 2737 61 2124 46 2738 46 2737 40 41 59 570 2739 61 2124 46 2738 46 2739 40 41 59 688 40 33 2737 307 33 2739 41 123 2740 2741 61 2124 46 2738 46 2742 40 2743 41 59 2102 2744 61 2745 59 688 40 2741 340 2745 41 123 2744 61 2746 46 2747 40 362 44 2010 46 2748 40 2741 46 2749 40 2124 46 2738 46 2750 40 41 41 41 41 59 125 630 688 40 2124 46 2738 46 2751 40 41 46 2752 40 41 41 123 2744 61 2753 46 2754 40 362 41 59 125 688 40 2744 340 2745 41 123 744 2755 40 41 46 2756 40 2744 41 46 2757 40 2758 46 2759 40 362 41 41 46 2760 40 40 41 45 62 123 2118 46 2761 40 2762 41 59 2344 40 41 59 125 41 46 2763 40 41 59 125 630 123 2344 40 41 59 125 125 630 123 2344 40 41 59 125 125 773 865 2764 40 41 123 2086 61 744 2084 40 2765 41 59 2050 61 744 2766 40 2767 46 2768 40 362 41 41 59 2026 46 2769 40 2050 44 744 2770 40 1502 44 1500 44 1500 44 1500 41 41 59 2035 46 2771 40 41 46 2772 40 2086 44 2050 41 59 125 773 865 2773 40 41 123 330 2020 61 2774 40 2018 44 2100 44 1502 44 2775 46 2776 40 362 41 44 2777 46 2778 41 59 2020 46 2779 40 41 46 2780 40 362 41 59 2017 46 2781 40 2020 44 1502 41 59 2020 46 2782 40 2783 41 59 2068 61 2784 40 2018 44 2100 44 2775 46 2776 40 362 41 44 2777 46 2785 41 59 2068 46 2782 40 2783 41 59 2083 61 744 2082 40 41 59 2083 46 2782 40 2783 41 59 2083 46 2786 40 1504 41 59 2083 46 2787 40 1504 41 59 2083 46 2779 40 41 46 2780 40 362 41 59 2788 46 2789 40 2083 44 744 2788 40 2775 46 2776 40 362 41 41 41 59 2083 46 2790 40 2791 45 62 2792 46 2793 40 40 41 45 62 2794 46 2795 40 40 41 45 62 744 2796 40 2797 40 41 41 46 2798 40 41 44 1504 44 2799 46 2800 41 41 41 59 2017 46 2801 40 2083 44 2100 41 59 2017 46 2802 40 2083 44 1501 41 59 2017 46 2803 40 2083 44 1502 41 59 2017 46 2804 40 2083 44 2805 46 2806 41 59 2017 46 2807 40 2083 44 744 2808 40 2777 46 2809 45 1502 44 1500 44 1500 44 1502 41 41 59 2018 46 2810 40 41 46 2780 40 2083 41 59 2070 61 2811 40 2018 44 349 2100 44 2775 46 2776 40 362 41 41 59 2070 46 2782 40 2783 41 59 2072 61 2812 40 2018 44 349 2100 44 2775 46 2776 40 362 41 41 59 2072 46 2782 40 2783 41 59 2027 61 744 2026 40 41 59 2027 46 2782 40 2783 41 59 2027 46 2813 40 2783 41 59 2027 46 2814 40 1502 41 59 2076 2815 61 744 2080 40 2775 46 2776 40 362 41 41 59 2815 46 2816 40 2817 41 59 2815 46 2779 40 41 46 2780 40 362 41 59 2815 46 2818 40 2791 45 62 2124 46 2819 40 41 41 59 2041 2820 61 744 2821 40 2775 46 2776 40 362 41 41 59 2820 46 2822 40 744 2808 40 1502 44 1500 44 1500 44 1500 41 41 59 2076 2823 61 744 2080 40 2775 46 2776 40 362 41 41 59 2823 46 2816 40 2783 41 59 2823 46 2818 40 2791 45 62 2792 46 2793 40 823 58 58 2824 41 41 59 2085 61 744 2084 40 2783 41 59 2049 61 744 2821 40 41 59 2049 46 2822 40 744 2808 40 1502 44 1500 44 1500 44 1500 41 41 59 2027 46 2810 40 41 46 2825 40 2815 44 2820 44 2823 44 2085 44 2049 41 59 2017 46 2801 40 2027 44 349 2100 41 59 2017 46 2807 40 2027 44 744 2808 40 1502 44 1500 44 1500 44 1500 41 41 59 2018 46 2810 40 41 46 2780 40 2027 41 59 2034 61 744 2026 40 41 59 2034 46 2814 40 1502 41 59 2017 46 2801 40 2034 44 2100 41 59 2017 46 2781 40 2034 44 1502 41 59 2017 46 2807 40 2034 44 744 2808 40 1502 44 1503 44 1500 44 1500 41 41 59 2018 46 2810 40 41 46 2780 40 2034 41 59 2081 61 744 2080 40 41 59 2081 46 2818 40 2791 45 62 2328 40 41 41 59 2081 46 2826 40 1503 41 59 2081 46 2822 40 744 2808 40 1500 44 1503 44 1500 44 1503 41 41 59 2034 46 2810 40 41 46 2780 40 2081 41 59 2034 46 2827 40 41 46 2828 40 40 2829 44 2830 44 2831 41 45 62 123 688 40 2831 41 123 2027 46 2810 40 41 46 2832 40 2079 41 59 2034 46 2810 40 41 46 2780 40 2079 41 59 125 630 688 40 33 2027 46 2810 40 41 46 2833 40 2079 41 41 123 2034 46 2810 40 41 46 2834 40 2079 41 59 2027 46 2810 40 41 46 2780 40 2079 41 59 125 125 41 59 2079 61 744 2080 40 2775 46 2776 40 362 41 41 59 2027 46 2810 40 41 46 2780 40 2079 41 59 2079 46 2818 40 2791 45 62 123 2102 2835 61 362 59 688 40 2124 46 2836 46 2837 40 41 46 2776 40 41 307 2124 46 2836 46 2838 46 2839 40 2835 41 41 123 744 2840 40 41 46 2841 40 2775 46 2776 40 362 41 41 46 2842 40 2775 46 2776 40 362 41 41 46 2843 40 2775 46 2776 40 362 41 41 46 2844 40 40 41 45 62 123 2124 46 2836 46 2845 40 41 59 2432 40 2783 41 59 125 41 46 2846 40 2835 41 46 2798 40 41 59 125 630 123 2432 40 2783 41 59 2124 46 2836 46 2847 40 41 59 125 125 41 59 2079 46 2816 40 2783 41 59 2079 46 2782 40 2783 41 59 125 773 865 2848 40 41 123 830 123 2849 46 2850 40 2851 46 2852 40 2853 40 41 41 41 59 125 580 40 2854 2855 41 123 2856 46 2857 40 2855 46 2858 40 41 41 59 744 2859 40 41 46 2860 40 2861 46 2862 40 362 41 41 46 2863 40 41 59 125 125 64 2864 773 2102 2865 40 41 123 792 2866 46 2865 40 2124 46 2867 46 2868 40 41 46 2869 40 41 44 2124 46 2867 46 2870 40 41 46 2871 40 41 44 2124 46 2872 40 41 41 59 125 773 865 2873 40 41 123 330 2874 60 2026 44 2058 44 2041 62 2875 61 2876 40 2877 46 2878 40 362 41 41 59 2028 61 2875 46 2879 59 2059 61 2875 46 2880 59 2881 60 2041 44 2023 62 2882 61 2883 40 2028 44 2124 46 2884 40 41 41 59 2042 61 2882 46 2879 59 2023 2885 61 2882 46 2880 59 330 2056 61 744 2041 40 41 59 2074 61 2886 40 2887 46 2888 44 362 44 2056 41 59 2074 46 2889 40 41 46 2890 40 362 41 59 2056 46 2889 40 41 46 2891 40 362 41 59 330 2874 60 2026 44 2060 44 2041 62 2892 61 2893 40 41 59 2029 61 2892 46 2879 59 2063 61 2892 46 2880 59 2044 61 2892 46 2894 59 2881 60 2041 44 2023 62 2895 61 2883 40 2029 44 2877 46 2878 40 362 41 41 59 2047 61 2895 46 2879 59 2896 40 2887 46 2897 44 2047 44 362 41 59 2023 2898 61 2895 46 2880 59 330 2053 61 744 2899 40 362 41 59 2053 46 2889 40 41 46 2891 40 362 41 59 330 2874 60 2026 44 2115 44 2041 62 2900 61 2901 40 41 59 2030 61 2900 46 2879 59 2116 61 2900 46 2880 59 2065 61 2116 46 2902 40 41 59 2046 61 2900 46 2894 59 2881 60 2041 44 2023 62 2903 61 2883 40 2030 44 2124 46 2048 46 2878 40 41 41 59 2048 61 2903 46 2879 59 2023 2904 61 2903 46 2880 59 2036 61 744 2026 40 41 59 2036 46 2905 40 1502 41 59 2036 46 2906 40 2907 46 2908 41 59 2036 46 2909 40 41 46 2891 40 2885 44 2056 44 2898 44 2053 44 2904 41 59 2017 46 2910 40 2036 44 1502 41 59 2017 46 2911 40 2036 44 2100 41 59 2017 46 2912 40 2036 44 744 2913 40 2914 46 2915 44 1502 44 1500 44 1500 41 41 59 2018 46 2909 40 41 46 2890 40 2036 41 59 125 773 865 2916 40 41 123 2917 60 2026 44 2060 44 2041 62 2918 61 2919 40 41 59 2031 61 2918 46 2920 59 2064 61 2918 46 2921 59 2045 61 2918 46 2922 59 2923 60 2041 44 2023 62 2924 61 2925 40 2031 44 362 41 59 2051 61 2924 46 2920 59 2926 40 2927 46 2928 44 2051 44 362 41 59 2024 61 2924 46 2921 59 2045 46 2929 40 362 41 59 2917 60 2026 44 2060 44 2041 62 2930 61 2919 40 41 59 2066 61 2930 46 2921 59 2032 61 2930 46 2920 59 2923 60 2041 44 2023 62 2931 61 2925 40 2032 44 2932 46 2933 40 362 41 41 59 2025 61 2931 46 2921 59 2025 46 2934 40 2935 41 59 2057 61 744 2041 40 41 59 2075 61 2936 40 2927 46 2937 44 362 44 2057 41 59 2057 46 2934 40 2935 41 59 330 2057 46 2938 40 41 46 2939 40 362 41 59 2026 2940 61 744 2026 40 41 59 2940 46 2941 40 1502 41 59 2940 46 2942 40 2943 46 2944 41 59 2940 46 2945 40 41 46 2946 40 2025 44 2057 44 2024 41 59 2017 46 2947 40 2940 44 349 2100 41 59 2017 46 2948 40 2940 44 744 2949 40 1500 44 1502 44 1502 44 1500 41 41 59 2018 46 2945 40 41 46 2939 40 2940 41 59 125 773 2023 2950 40 41 123 2054 61 744 2041 40 41 59 2054 46 2951 40 2952 41 59 2054 46 2953 40 362 41 59 2055 61 744 2041 40 41 59 2055 46 2951 40 2952 41 59 2055 46 2953 40 362 41 59 2023 2954 61 744 2023 40 41 59 2954 46 2955 40 1502 41 59 2954 46 2956 40 1504 41 59 2954 46 2957 40 2958 46 2959 40 41 63 2960 46 2961 58 2960 46 2962 41 59 2954 46 2963 40 41 46 2964 40 2054 44 2055 41 59 2118 61 744 2117 40 41 59 2118 46 2965 40 362 41 59 2118 46 2966 40 744 2967 40 45 1502 44 1502 44 45 1502 44 1502 41 41 59 2119 61 744 2117 40 41 59 2119 46 2965 40 362 41 59 2119 46 2966 40 744 2967 40 45 1502 44 1502 44 45 1502 44 1502 41 41 59 2023 2968 61 744 2023 40 41 59 2968 46 2963 40 41 46 2964 40 2118 44 2119 41 59 2026 2969 61 744 2026 40 41 59 2969 46 2963 40 41 46 2964 40 2954 44 2968 41 59 2969 46 2970 40 1503 41 59 2969 46 2971 40 2969 46 2972 40 41 41 59 2026 46 2973 40 2954 44 2974 46 2975 41 59 2026 46 2973 40 2968 44 2974 46 2976 41 59 657 2977 60 2041 44 2023 62 2978 61 2979 40 2969 44 2980 46 2981 40 362 41 41 59 2052 61 2978 46 2982 59 792 2978 46 2983 59 125 331 330 331 773 865 2984 40 41 123 2985 2986 61 2124 46 2987 46 2988 40 2989 41 59 2102 2990 61 2991 59 688 40 2986 340 2991 41 2990 61 2992 46 2993 40 362 44 2010 46 2994 40 2986 46 2995 40 2124 46 2987 46 2996 40 41 41 41 41 59 630 688 40 2124 46 2987 46 2996 40 41 46 2997 40 41 41 2990 61 2992 46 2993 40 362 41 59 688 40 2990 340 2991 41 744 2998 40 41 46 2999 40 2990 41 46 3000 40 362 41 46 3001 40 40 41 45 62 2006 46 3002 40 3003 46 587 44 3004 46 587 44 3005 46 587 44 3006 46 587 41 41 46 3007 40 41 59 125 773 865 3008 40 2254 2255 41 123 330 688 40 2124 46 3009 40 2255 41 307 33 2108 41 123 2108 61 3010 59 3011 46 3012 40 3013 58 58 3014 44 1504 44 3015 46 3016 41 59 125 125 773 865 3017 40 2039 3018 41 123 688 40 3018 46 3019 40 41 46 3020 40 41 46 3021 40 3022 46 3023 41 307 33 2106 41 123 2106 61 3024 59 3025 46 3026 40 3027 58 58 3028 44 1504 44 3029 46 3030 41 59 125 125 773 865 3031 40 2039 3018 41 123 688 40 3018 46 3032 40 41 46 3033 40 41 46 3034 40 3035 46 3036 41 307 40 40 3037 41 3018 41 46 3038 40 41 46 3039 40 41 307 33 2107 41 123 2107 61 3040 59 3041 46 3042 40 40 41 45 62 3043 46 3044 40 2006 41 44 1504 44 3045 46 3046 41 59 125 125 773 865 3047 40 2039 3018 44 570 3048 41 123 2102 3049 61 3018 46 3050 40 33 3048 41 59 3051 46 3052 40 3049 44 2104 41 59 125 773 865 3053 40 2039 3018 44 2254 2255 41 123 688 40 3018 46 3054 40 41 46 3055 40 41 46 3056 40 3057 46 3058 41 307 33 2109 307 33 2255 46 3059 40 41 46 3060 40 41 41 123 2109 61 3061 59 3062 46 3063 40 40 41 45 62 123 744 3064 40 41 46 3065 40 3066 46 3067 40 362 41 41 46 3068 40 2255 46 3059 40 41 41 46 3069 40 3066 46 3067 40 362 41 41 46 3070 40 3066 46 3067 40 362 41 41 46 3071 40 3072 46 3073 41 46 2313 40 40 41 45 62 2432 40 3074 41 41 46 3075 40 41 59 125 44 1504 44 3076 46 3077 41 59 125 125 773 3078 60 2041 44 2023 62 3079 40 2026 3080 44 2102 3081 41 123 2041 3082 61 744 3083 40 3081 41 59 3082 46 3084 40 362 41 59 3082 46 3085 40 1504 41 59 2023 3086 61 744 2023 40 41 59 3086 46 3087 40 744 3088 40 1502 44 1500 44 1500 44 1500 41 41 59 3086 46 3089 40 1502 41 59 3086 46 3090 40 41 46 3091 40 3082 44 3080 41 59 792 744 3078 60 62 40 3082 44 3086 41 59 125 330 773 2017 3092 40 41 123 2017 3093 61 744 2017 40 41 59 3093 46 3094 40 1502 41 59 3093 46 3095 40 1502 41 59 3093 46 3096 40 744 3097 40 1502 44 1502 44 1502 44 1502 41 41 59 704 3098 61 1500 59 688 40 2124 46 3099 40 41 41 123 3100 40 3093 44 3098 349 44 3101 46 3102 40 362 41 44 2124 46 3103 40 41 41 59 125 3104 40 3093 44 3098 349 44 3105 46 3106 40 362 41 44 2124 46 3107 40 41 41 59 3104 40 3093 44 3098 349 44 3105 46 3108 40 362 41 44 2124 46 3109 40 41 41 59 3104 40 3093 44 3098 349 44 3105 46 3108 40 362 41 44 2124 46 3110 40 41 41 59 3111 3112 61 744 3111 40 41 59 3112 46 3113 40 3114 46 3115 41 59 3112 46 3116 40 41 46 3117 40 362 41 59 2017 46 3118 40 3112 44 1501 44 3098 349 41 59 3093 46 3119 40 41 46 3117 40 3112 41 59 3104 40 3093 44 3098 44 3105 46 3106 40 362 41 44 2124 46 3120 40 41 41 59 792 3093 59 125 125 ,"{'AvgLine': 24, 'CountLine': 1224, 'CountStmt': 743, 'MaxNesting': 2, 'AvgLineCode': 21, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 652, 'MaxEssential': 4, 'SumEssential': 78, 'AvgCyclomatic': 2, 'CountLineCode': 989, 'CountStmtDecl': 138, 'MaxCyclomatic': 8, 'SumCyclomatic': 139, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 191, 'CountSemicolon': 638, 'CountDeclMethod': 44, 'CountLineCodeExe': 801, 'CountLineComment': 47, 'CountClassCoupled': 92, 'CountClassDerived': 0, 'CountLineCodeDecl': 172, 'CountDeclMethodAll': 59, 'MaxInheritanceTree': 5, 'RatioCommentToCode': '0.05', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 11, 'SumCyclomaticStrict': 162, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 4, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 139, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 37, 'CountDeclInstanceMethod': 44, 'CountDeclMethodProtected': 3, 'CountClassCoupledModified': 92, 'CountDeclInstanceVariable': 84, 'PercentLackOfCohesionModified': 85}"
4655,Java,"@EqualsAndHashCode
@Slf4j
@Getter
public abstract class DisputeAgent implements ProtectedStoragePayload, ExpirablePayload {
    public static final long TTL = TimeUnit.DAYS.toMillis(10);

    protected final NodeAddress nodeAddress;
    protected final PubKeyRing pubKeyRing;
    protected final List<String> languageCodes;
    protected final long registrationDate;
    protected final byte[] registrationPubKey;
    protected final String registrationSignature;
    @Nullable
    protected final String emailAddress;
    @Nullable
    protected final String info;

    // Should be only used in emergency case if we need to add data but do not want to break backward compatibility
    // at the P2P network storage checks. The hash of the object will be used to verify if the data is valid. Any new
    // field in a class would break that hash and therefore break the storage mechanism.
    @Nullable
    protected Map<String, String> extraDataMap;

    public DisputeAgent(NodeAddress nodeAddress,
                        PubKeyRing pubKeyRing,
                        List<String> languageCodes,
                        long registrationDate,
                        byte[] registrationPubKey,
                        String registrationSignature,
                        @Nullable String emailAddress,
                        @Nullable String info,
                        @Nullable Map<String, String> extraDataMap) {
        this.nodeAddress = nodeAddress;
        this.pubKeyRing = pubKeyRing;
        this.languageCodes = languageCodes;
        this.registrationDate = registrationDate;
        this.registrationPubKey = registrationPubKey;
        this.registrationSignature = registrationSignature;
        this.emailAddress = emailAddress;
        this.info = info;
        this.extraDataMap = ExtraDataMapValidator.getValidatedExtraDataMap(extraDataMap);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public long getTTL() {
        return TTL;
    }

    @Override
    public PublicKey getOwnerPubKey() {
        return pubKeyRing.getSignaturePubKey();
    }


    @Override
    public String toString() {
        return ""DisputeAgent{"" +
                ""\n     nodeAddress="" + nodeAddress +
                "",\n     pubKeyRing="" + pubKeyRing +
                "",\n     languageCodes="" + languageCodes +
                "",\n     registrationDate="" + registrationDate +
                "",\n     registrationPubKey="" + Utilities.bytesAsHexString(registrationPubKey) +
                "",\n     registrationSignature='"" + registrationSignature + '\'' +
                "",\n     emailAddress='"" + emailAddress + '\'' +
                "",\n     info='"" + info + '\'' +
                "",\n     extraDataMap="" + extraDataMap +
                ""\n}"";
    }
}",1,64 2000 64 2001 64 2002 777 539 587 2003 693 2004 44 2005 123 777 809 657 726 2006 61 2007 46 2008 46 2009 40 1502 41 59 775 657 2010 2011 59 775 657 2012 2013 59 775 657 2014 60 2015 62 2016 59 775 657 726 2017 59 775 657 574 91 93 2018 59 775 657 2015 2019 59 64 2020 775 657 2015 2021 59 64 2020 775 657 2015 2022 59 330 330 330 64 2020 775 2023 60 2015 44 2015 62 2024 59 777 2003 40 2010 2011 44 2012 2013 44 2014 60 2015 62 2016 44 726 2017 44 574 91 93 2018 44 2015 2019 44 64 2020 2015 2021 44 64 2020 2015 2022 44 64 2020 2023 60 2015 44 2015 62 2024 41 123 823 46 2011 61 2011 59 823 46 2013 61 2013 59 823 46 2016 61 2016 59 823 46 2017 61 2017 59 823 46 2018 61 2018 59 823 46 2019 61 2019 59 823 46 2021 61 2021 59 823 46 2022 61 2022 59 823 46 2024 61 2025 46 2026 40 2024 41 59 125 331 330 331 64 2027 777 726 2028 40 41 123 792 2006 59 125 64 2027 777 2029 2030 40 41 123 792 2013 46 2031 40 41 59 125 64 2027 777 2015 2032 40 41 123 792 362 43 362 43 2011 43 362 43 2013 43 362 43 2016 43 362 43 2017 43 362 43 2033 46 2034 40 2018 41 43 362 43 2019 43 314 43 362 43 2021 43 314 43 362 43 2022 43 314 43 362 43 2024 43 362 59 125 125 ,"{'AvgLine': 10, 'CountLine': 74, 'CountStmt': 27, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 59, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 9, 'CountSemicolon': 22, 'CountDeclMethod': 4, 'CountLineCodeExe': 23, 'CountLineComment': 6, 'CountClassCoupled': 14, 'CountClassDerived': 10, 'CountLineCodeDecl': 32, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.10', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 47, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 14, 'CountDeclInstanceVariable': 9, 'PercentLackOfCohesionModified': 47}"
2594,Java,"@RunWith(Parameterized.class)
public class OpenSetsTest {

    private final int size;

    public OpenSetsTest(int size) {
        this.size = size;
    }

    @Parameterized.Parameters
    public static Collection<Object[]> data() {
        ArrayList<Object[]> testSizes = new ArrayList<>();
        for (int size = 1; size < 20; size++) {
            testSizes.add(new Object[]{size});
        }
        for (int size = 100; size <= 1000; size += 100) {
            testSizes.add(new Object[]{size});
        }
        testSizes.add(new Object[]{5000});
        testSizes.add(new Object[]{10000});
        return testSizes;
    }

    private static void removeAndTest(int amount, IOpenSet[] test, Collection<PathNode> mustContain) {
        double[][] results = new double[test.length][amount];
        for (int i = 0; i < test.length; i++) {
            long before = System.nanoTime() / 1000000L;
            for (int j = 0; j < amount; j++) {
                PathNode pn = test[i].removeLowest();
                if (mustContain != null && !mustContain.contains(pn)) {
                    throw new IllegalStateException(mustContain + "" "" + pn);
                }
                results[i][j] = pn.combinedCost;
            }
            System.out.println(test[i].getClass() + "" "" + (System.nanoTime() / 1000000L - before));
        }
        for (int j = 0; j < amount; j++) {
            for (int i = 1; i < test.length; i++) {
                assertEquals(results[i][j], results[0][j], 0);
            }
        }
        for (int i = 0; i < amount - 1; i++) {
            assertTrue(results[0][i] < results[0][i + 1]);
        }
    }

    @Test
    public void testSize() {
        System.out.println(""Testing size "" + size);
        // Include LinkedListOpenSet even though it's not performant because I absolutely trust that it behaves properly
        // I'm really testing the heap implementations against it as the ground truth
        IOpenSet[] test = new IOpenSet[]{new BinaryHeapOpenSet(), new LinkedListOpenSet()};
        for (IOpenSet set : test) {
            assertTrue(set.isEmpty());
        }

        // generate the pathnodes that we'll be testing the sets on
        PathNode[] toInsert = new PathNode[size];
        for (int i = 0; i < size; i++) {
            // can't use an existing goal
            // because they use Baritone.settings()
            // and we can't do that because Minecraft itself isn't initted
            PathNode pn = new PathNode(0, 0, 0, new Goal() {
                @Override
                public boolean isInGoal(int x, int y, int z) {
                    return false;
                }

                @Override
                public double heuristic(int x, int y, int z) {
                    return 0;
                }
            });
            pn.combinedCost = Math.random();
            toInsert[i] = pn;
        }

        // create a list of what the first removals should be
        ArrayList<PathNode> copy = new ArrayList<>(Arrays.asList(toInsert));
        copy.sort(Comparator.comparingDouble(pn -> pn.combinedCost));
        Set<PathNode> lowestQuarter = new HashSet<>(copy.subList(0, size / 4));

        // all opensets should be empty; nothing has been inserted yet
        for (IOpenSet set : test) {
            assertTrue(set.isEmpty());
        }

        System.out.println(""Insertion"");
        for (IOpenSet set : test) {
            long before = System.nanoTime() / 1000000L;
            for (int i = 0; i < size; i++)
                set.insert(toInsert[i]);
            System.out.println(set.getClass() + "" "" + (System.nanoTime() / 1000000L - before));
            //all three take either 0 or 1ms to insert up to 10,000 nodes
            //linkedlist takes 0ms most often (because there's no array resizing or allocation there, just pointer shuffling)
        }

        // all opensets should now be full
        for (IOpenSet set : test) {
            assertFalse(set.isEmpty());
        }

        System.out.println(""Removal round 1"");
        // remove a quarter of the nodes and verify that they are indeed the size/4 lowest ones
        removeAndTest(size / 4, test, lowestQuarter);

        // none of them should be empty (sanity check)
        for (IOpenSet set : test) {
            assertFalse(set.isEmpty());
        }
        int cnt = 0;
        for (int i = 0; cnt < size / 2 && i < size; i++) {
            if (lowestQuarter.contains(toInsert[i])) { // these were already removed and can't be updated to test
                continue;
            }
            toInsert[i].combinedCost *= Math.random();
            // multiplying it by a random number between 0 and 1 is guaranteed to decrease it
            for (IOpenSet set : test) {
                // it's difficult to benchmark these individually because if you modify all at once then update then
                // it breaks the internal consistency of the heaps.
                // you have to call update every time you modify a node.
                set.update(toInsert[i]);
            }
            cnt++;
        }

        //still shouldn't be empty
        for (IOpenSet set : test) {
            assertFalse(set.isEmpty());
        }

        System.out.println(""Removal round 2"");
        // remove the remaining 3/4
        removeAndTest(size - size / 4, test, null);

        // every set should now be empty
        for (IOpenSet set : test) {
            assertTrue(set.isEmpty());
        }
    }
}",1,64 2000 40 2001 46 587 41 777 587 2002 123 773 657 704 2003 59 777 2002 40 704 2003 41 123 823 46 2003 61 2003 59 125 64 2001 46 2004 777 809 2005 60 2006 91 93 62 2007 40 41 123 2008 60 2006 91 93 62 2009 61 744 2008 60 62 40 41 59 664 40 704 2003 61 1501 59 2003 60 1503 59 2003 349 41 123 2009 46 2010 40 744 2006 91 93 123 2003 125 41 59 125 664 40 704 2003 61 1503 59 2003 329 1504 59 2003 348 1503 41 123 2009 46 2011 40 744 2006 91 93 123 2003 125 41 59 125 2009 46 2012 40 744 2006 91 93 123 1505 125 41 59 2009 46 2012 40 744 2006 91 93 123 1505 125 41 59 792 2009 59 125 773 809 865 2013 40 704 2014 44 2015 91 93 2016 44 2005 60 2017 62 2018 41 123 625 91 93 91 93 2019 61 744 625 91 2016 46 2020 93 91 2014 93 59 664 40 704 2021 61 1500 59 2021 60 2016 46 2020 59 2021 349 41 123 726 2022 61 2023 46 2024 40 41 47 1507 59 664 40 704 2025 61 1500 59 2025 60 2014 59 2025 349 41 123 2017 2026 61 2016 91 2021 93 46 2027 40 41 59 688 40 2018 340 2028 307 33 2018 46 2029 40 2026 41 41 123 825 744 2030 40 2018 43 362 43 2026 41 59 125 2019 91 2021 93 91 2025 93 61 2026 46 2031 59 125 2023 46 2032 46 2033 40 2016 91 2021 93 46 2034 40 41 43 362 43 40 2023 46 2024 40 41 47 1507 45 2022 41 41 59 125 664 40 704 2035 61 1500 59 2035 60 2014 59 2035 349 41 123 664 40 704 2021 61 1501 59 2021 60 2016 46 2020 59 2021 349 41 123 2036 40 2019 91 2021 93 91 2035 93 44 2019 91 1500 93 91 2035 93 44 1500 41 59 125 125 664 40 704 2021 61 1500 59 2021 60 2014 45 1501 59 2021 349 41 123 2037 40 2019 91 1500 93 91 2021 93 60 2019 91 1500 93 91 2021 43 1501 93 41 59 125 125 64 2038 777 865 2039 40 41 123 2040 46 2041 46 2042 40 362 43 2003 41 59 330 330 2015 91 93 2016 61 744 2015 91 93 123 744 2043 40 41 44 744 2044 40 41 125 59 664 40 2015 2045 58 2016 41 123 2046 40 2045 46 2047 40 41 41 59 125 330 2017 91 93 2048 61 744 2017 91 2003 93 59 664 40 704 2049 61 1500 59 2049 60 2003 59 2049 349 41 123 330 330 330 2017 2050 61 744 2017 40 1500 44 1500 44 1500 44 744 2051 40 41 123 64 2052 777 570 2053 40 704 2054 44 704 2055 44 704 2056 41 123 792 2057 59 125 64 2052 777 625 2058 40 704 2054 44 704 2055 44 704 2056 41 123 792 1500 59 125 125 41 59 2050 46 2059 61 2060 46 2061 40 41 59 2048 91 2049 93 61 2050 59 125 330 2062 60 2017 62 2063 61 744 2062 60 62 40 2064 46 2065 40 2048 41 41 59 2063 46 2066 40 2067 46 2068 40 2069 45 62 2069 46 2070 41 41 59 2071 60 2017 62 2072 61 744 2073 60 62 40 2063 46 2074 40 1500 44 2003 47 1502 41 41 59 330 664 40 2015 2045 58 2016 41 123 2075 40 2045 46 2076 40 41 41 59 125 2040 46 2041 46 2042 40 362 41 59 664 40 2015 2045 58 2016 41 123 726 2077 61 2040 46 2078 40 41 47 1507 59 664 40 704 2049 61 1500 59 2049 60 2003 59 2049 349 41 2045 46 2079 40 2048 91 2049 93 41 59 2040 46 2041 46 2042 40 2045 46 2080 40 41 43 362 43 40 2040 46 2078 40 41 47 1507 45 2077 41 41 59 330 330 125 330 664 40 2015 2045 58 2016 41 123 2081 40 2045 46 2082 40 41 41 59 125 2040 46 2041 46 2042 40 362 41 59 330 2013 40 2003 47 1502 44 2016 44 2072 41 59 330 664 40 2015 2045 58 2016 41 123 2083 40 2045 46 2084 40 41 41 59 125 704 2085 61 1500 59 664 40 704 2049 61 1500 59 2085 60 2003 47 1502 307 2049 60 2003 59 2049 349 41 123 688 40 2072 46 2086 40 2048 91 2049 93 41 41 123 330 605 59 125 2048 91 2049 93 46 2070 363 2087 46 2088 40 41 59 330 664 40 2015 2045 58 2016 41 123 330 330 330 2045 46 2089 40 2048 91 2049 93 41 59 125 2085 349 59 125 330 664 40 2015 2045 58 2016 41 123 2090 40 2045 46 2091 40 41 41 59 125 2040 46 2041 46 2042 40 362 41 59 330 2013 40 2003 45 2003 47 1502 44 2016 44 2092 41 59 330 664 40 2015 2045 58 2016 41 123 2093 40 2045 46 2094 40 41 41 59 125 125 125 ,"{'AvgLine': 33, 'CountLine': 141, 'CountStmt': 101, 'MaxNesting': 3, 'AvgLineCode': 25, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 71, 'MaxEssential': 3, 'SumEssential': 7, 'AvgCyclomatic': 6, 'CountLineCode': 105, 'CountStmtDecl': 37, 'MaxCyclomatic': 13, 'SumCyclomatic': 25, 'AvgLineComment': 5, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountSemicolon': 66, 'CountDeclMethod': 4, 'CountLineCodeExe': 70, 'CountLineComment': 21, 'CountClassCoupled': 12, 'CountClassDerived': 0, 'CountLineCodeDecl': 21, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.20', 'AvgCyclomaticStrict': 6, 'MaxCyclomaticStrict': 14, 'SumCyclomaticStrict': 27, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 6, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 13, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 25, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 12, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 50}"
26325,Java,"public final class InstanceManager extends GameXmlReader {

    private static final Logger LOGGER = LoggerFactory.getLogger(InstanceManager.class);
    private static final InstanceTemplate DEFAULT_TEMPLATE = new InstanceTemplate();

    private final IntMap<InstanceTemplate> instanceTemplates = new HashIntMap<>();
    private final IntMap<Instance> instanceWorlds = new CHashIntMap<>();
    private final IntMap<IntLongMap> playerInstanceTimes = new CHashIntMap<>();

    private InstanceManager() {
    }

    @Override
    protected Path getSchemaFilePath() {
         return ServerSettings.dataPackDirectory().resolve(""data/instances/instance.xsd"");
    }

    @Override
    public void load() {
        instanceTemplates.clear();
        parseDatapackDirectory(""data/instances"", true);
        LOGGER.info(""Loaded {} instance templates."", instanceTemplates.size());

        playerInstanceTimes.clear();
        restoreInstanceTimes();
        LOGGER.info(""Loaded instance reenter times for {} players."", playerInstanceTimes.size());
        releaseResources();
    }

    @Override
    public void parseDocument(Document doc, File f) {
        for(var node = doc.getFirstChild(); nonNull(node); node = node.getNextSibling()) {
            if (""instance"".equals(node.getNodeName())) {
                parseInstanceTemplate(node, f);
            }
        }
    }

    /**
     * Parse instance template from XML file.
     *
     * @param instanceNode start XML tag
     * @param file         currently parsed file
     */
    private void parseInstanceTemplate(Node instanceNode, File file) {
        var attrs = instanceNode.getAttributes();
        final int id = parseInt(attrs, ""id"");
        if (instanceTemplates.containsKey(id)) {
            LOGGER.warn(""Instance template with ID {} already exists"", id);
            return;
        }
        final InstanceTemplate template = new InstanceTemplate(id, parseString(attrs, ""name""), parseInt(attrs, ""maxWorlds"", -1));

        for(var innerNode = instanceNode.getFirstChild(); nonNull(innerNode); innerNode = innerNode.getNextSibling()) {
            switch (innerNode.getNodeName()) {
                case ""time"" -> parseTimes(template, innerNode);
                case ""misc"" -> parseMisc(template, innerNode);
                case ""rates"" -> parseRates(template, innerNode);
                case ""locations"" -> parseLocations(template, innerNode);
                case ""spawnlist"" -> parseSpawns(file, template, innerNode);
                case ""doorlist"" -> parseDoors(template, innerNode);
                case ""removeBuffs"" -> parseRemoveBuffs(template, innerNode);
                case ""reenter"" -> parseReenter(template, innerNode);
                case ""conditions"" -> parseConditions(id, template, innerNode);
            }
        }
        instanceTemplates.put(id, template);
    }

    private void parseConditions(int id, InstanceTemplate template, Node innerNode) {
        org.w3c.dom.NamedNodeMap attrs;
        final List<Condition> conditions = new ArrayList<>();
        for (Node conditionNode = innerNode.getFirstChild(); conditionNode != null; conditionNode = conditionNode.getNextSibling()) {

            if (conditionNode.getNodeName().equals(""condition"")) {
                attrs = conditionNode.getAttributes();
                final String type = parseString(attrs, ""type"");
                final boolean onlyLeader = parseBoolean(attrs, ""onlyLeader"", false);
                final boolean showMessageAndHtml = parseBoolean(attrs, ""showMessageAndHtml"", false);

                StatsSet params = null;
                for (Node f = conditionNode.getFirstChild(); f != null; f = f.getNextSibling()) {
                    if (f.getNodeName().equals(""param"")) {
                        if (params == null) {
                            params = new StatsSet();
                        }

                        params.set(parseString(f.getAttributes(), ""name""), parseString(f.getAttributes(), ""value""));
                    }
                }

                // If none parameters found then set empty StatSet
                if (params == null) {
                    params = StatsSet.EMPTY_STATSET;
                }

                // Now when everything is loaded register condition to template
                try {
                    final Class<?> clazz = Class.forName(""org.l2j.gameserver.model.instancezone.conditions.Condition"" + type);
                    final Constructor<?> constructor = clazz.getConstructor(InstanceTemplate.class, StatsSet.class, boolean.class, boolean.class);
                    conditions.add((Condition) constructor.newInstance(template, params, onlyLeader, showMessageAndHtml));
                } catch (Exception ex) {
                    LOGGER.warn(""Unknown condition type "" + type + "" for instance "" + template.getName() + "" ("" + id + "")!"");
                }
            }
        }
        template.setConditions(conditions);
    }

    private void parseReenter(InstanceTemplate template, Node innerNode) {
        org.w3c.dom.NamedNodeMap attrs;
        final InstanceReenterType type = parseEnum(innerNode.getAttributes(), InstanceReenterType.class, ""apply"", InstanceReenterType.NONE);
        final List<InstanceReenterTimeHolder> data = new ArrayList<>();
        for (Node e = innerNode.getFirstChild(); e != null; e = e.getNextSibling()) {
            if (e.getNodeName().equals(""reset"")) {
                attrs = e.getAttributes();
                final int time = parseInt(attrs, ""time"", -1);
                if (time > 0) {
                    data.add(new InstanceReenterTimeHolder(time));
                } else {
                    final DayOfWeek day = parseEnum(attrs, DayOfWeek.class, ""day"");
                    final int hour = parseInt(attrs, ""hour"", -1);
                    final int minute = parseInt(attrs, ""minute"", -1);
                    data.add(new InstanceReenterTimeHolder(day, hour, minute));
                }
            }
        }
        template.setReenterData(type, data);
    }

    private void parseRemoveBuffs(InstanceTemplate template, Node innerNode) {
        final InstanceRemoveBuffType removeBuffType = parseEnum(innerNode.getAttributes(), InstanceRemoveBuffType.class, ""type"");
        final IntSet exceptionBuffList = new HashIntSet();
        for (Node e = innerNode.getFirstChild(); e != null; e = e.getNextSibling()) {
            if (e.getNodeName().equals(""skill"")) {
                exceptionBuffList.add(parseInt(e.getAttributes(), ""id""));
            }
        }
        template.setRemoveBuff(removeBuffType, exceptionBuffList);
    }

    private void parseSpawns(File file, InstanceTemplate template, Node innerNode) {
        final List<SpawnTemplate> spawns = new ArrayList<>();
        SpawnsData.getInstance().parseSpawn(innerNode, file, spawns);
        template.addSpawns(spawns);
    }

    private void parseRates(InstanceTemplate template, Node innerNode) {
        org.w3c.dom.NamedNodeMap attrs;
        attrs = innerNode.getAttributes();
        template.setExpRate(parseFloat(attrs, ""exp"", RateSettings.xp()));
        template.setSPRate(parseFloat(attrs, ""sp"", RateSettings.sp()));
        template.setExpPartyRate(parseFloat(attrs, ""partyExp"", RateSettings.partyXp()));
        template.setSPPartyRate(parseFloat(attrs, ""partySp"", RateSettings.partySp()));
    }

    private void parseMisc(InstanceTemplate template, Node innerNode) {
        org.w3c.dom.NamedNodeMap attrs;
        attrs = innerNode.getAttributes();
        template.allowPlayerSummon(parseBoolean(attrs, ""allowPlayerSummon""));
        template.setIsPvP(parseBoolean(attrs, ""isPvP""));
    }

    private void parseTimes(InstanceTemplate template, Node innerNode) {
        org.w3c.dom.NamedNodeMap attrs;
        attrs = innerNode.getAttributes();
        template.setDuration(parseInt(attrs, ""duration"", -1));
        template.setEmptyDestroyTime(parseInt(attrs, ""empty"", -1));
        template.setEjectTime(parseInt(attrs, ""eject"", -1));
    }

    private void parseDoors(InstanceTemplate template, Node innerNode) {
        for (Node doorNode = innerNode.getFirstChild(); doorNode != null; doorNode = doorNode.getNextSibling()) {
            if (doorNode.getNodeName().equals(""door"")) {
                final StatsSet parsedSet = DoorDataManager.getInstance().parseDoor(doorNode);
                final StatsSet mergedSet = new StatsSet();
                final int doorId = parsedSet.getInt(""id"");
                final StatsSet templateSet = DoorDataManager.getInstance().getDoorTemplate(doorId);
                if (templateSet != null) {
                    mergedSet.merge(templateSet);
                } else {
                    LOGGER.warn(""Cannot find template for door: "" + doorId + "", instance: "" + template.getName() + "" ("" + template.getId() + "")"");
                }
                mergedSet.merge(parsedSet);

                try {
                    template.addDoor(doorId, new DoorTemplate(mergedSet));
                } catch (Exception e) {
                    LOGGER.warn(""Cannot initialize template for door: {}, instance: {}"", doorId, template, e);
                }
            }
        }
    }

    private void parseLocations(InstanceTemplate template, Node innerNode) {
        for(var locationsNode = innerNode.getFirstChild(); nonNull(locationsNode); locationsNode = locationsNode.getNextSibling()) {
            final InstanceTeleportType type = parseEnum(locationsNode.getAttributes(), InstanceTeleportType.class, ""type"");
            switch (locationsNode.getNodeName()) {
                case ""enter"" -> template.setEnterLocation(type, parseLocations(locationsNode));
                case ""exit"" -> {
                    if (type.equals(InstanceTeleportType.ORIGIN)) {
                        template.setExitLocation(type, null);
                    } else {
                        final List<Location> locations = parseLocations(locationsNode);
                        if (locations.isEmpty()) {
                            LOGGER.warn(""Missing exit location data for instance {}!"", template);
                        } else {
                            template.setExitLocation(type, locations);
                        }
                    }
                }
            }
        }
    }

    private List<Location> parseLocations(Node locationsNode) {
        final List<Location> locations = new ArrayList<>();
        for(var locationNode = locationsNode.getFirstChild(); nonNull(locationNode); locationNode = locationNode.getNextSibling()) {
            locations.add(parseLocation(locationNode));
        }
        return locations;
    }

    public Instance createInstance(int templateId) {
        return createInstance(templateId, null);
    }

    public Instance createInstance(int templateId, Player player) {
        var template= instanceTemplates.get(templateId);

        if(isNull(template)) {
            LOGGER.warn(""Missing template for instance with id {}!"", templateId);
            template = DEFAULT_TEMPLATE;
        }

        var id= IdFactory.getInstance().getNextId();
        var instance = new Instance(id, template);
        instanceWorlds.put(id, instance);
        instance.init(player);
        return instance;
    }

    /**
     * Get instance world with given ID.
     *
     * @param instanceId ID of instance
     * @return instance itself if found, otherwise {@code null}
     */
    public Instance getInstance(int instanceId) {
        return instanceWorlds.get(instanceId);
    }

    /**
     * Get all active instances.
     *
     * @return Collection of all instances
     */
    public Collection<Instance> getInstances() {
        return instanceWorlds.values();
    }

    /**
     * Get instance world for player.
     *
     * @param player   player who wants to get instance world
     * @param isInside when {@code true} find world where player is currently located, otherwise find world where player can enter
     * @return instance if found, otherwise {@code null}
     */
    public Instance getPlayerInstance(Player player, boolean isInside) {
        return instanceWorlds.values().stream().filter(i -> (isInside) ? i.containsPlayer(player) : i.isAllowed(player)).findFirst().orElse(null);
    }

    /**
     * Unregister instance world.<br>
     * <b><font color=red>To remove instance world properly use {@link Instance#destroy()}.</font></b>
     *
     * @param instanceId ID of instance to unregister
     */
    public void unregister(int instanceId) {
        if (instanceWorlds.containsKey(instanceId)) {
            instanceWorlds.remove(instanceId);
            IdFactory.getInstance().releaseId(instanceId);
        }
    }

    /**
     * Get instance name from file ""InstanceNames.xml""
     *
     * @param templateId template ID of instance
     * @return name of instance if found, otherwise {@code null}
     */
    public String getInstanceName(int templateId) {
        return  instanceTemplates.get(templateId).getName();
    }

    /**
     * Restore instance reenter data for all players.
     */
    private void restoreInstanceTimes() {
        getDAO(InstanceDAO.class).findAllInstancesTime(this::addInstancesTime);
    }

    private void addInstancesTime(ResultSet rs) {
        try {
            var currentTime = System.currentTimeMillis();
            while (rs.next()) {

                final long time = rs.getLong(""time"");
                if (time > currentTime) {
                    final int charId = rs.getInt(""charId"");
                    final int instanceId = rs.getInt(""instanceId"");
                    setReenterPenalty(charId, instanceId, time);
                }
            }
        } catch (Exception e) {
            LOGGER.warn(e.getMessage(), e);
        }
    }

    /**
     * Get all instance re-enter times for specified player.<br>
     * This method also removes the penalties that have already expired.
     *
     * @param player instance of player who wants to get re-enter data
     * @return map in form templateId, penaltyEndTime
     */
    public IntLongMap getAllInstanceTimes(Player player) {
        // When player don't have any instance penalty
        final var instanceTimes = playerInstanceTimes.get(player.getObjectId());
        if ((instanceTimes == null) || instanceTimes.isEmpty()) {
            return Containers.EMPTY_INT_LONG_MAP;
        }

        final IntSet invalidPenalty = new HashIntSet(instanceTimes.size());
        for (var entry : instanceTimes.entrySet()) {
            if (entry.getValue() <= System.currentTimeMillis()) {
                invalidPenalty.add(entry.getKey());
            }
        }

        if (!invalidPenalty.isEmpty()) {
            getDAO(InstanceDAO.class).deleteInstanceTime(player.getObjectId(), invalidPenalty);
        }
        return instanceTimes;
    }

    /**
     * Set re-enter penalty for specified player.<br>
     * <font color=red><b>This method store penalty into memory only. Use {@link Instance#setReenterTime} to set instance penalty properly.</b></font>
     *
     * @param objectId object ID of player
     * @param id       instance template id
     * @param time     penalty time
     */
    public void setReenterPenalty(int objectId, int id, long time) {
        playerInstanceTimes.computeIfAbsent(objectId, k -> new CHashIntLongMap()).put(id, time);
    }

    /**
     * Get re-enter time to instance (by template ID) for player.<br>
     * This method also removes penalty if expired.
     *
     * @param player player who wants to get re-enter time
     * @param id     template ID of instance
     * @return penalty end time if penalty is found, otherwise -1
     */
    public long getInstanceTime(Player player, int id) {
        // Check if exists reenter data for player
        final var playerData = playerInstanceTimes.get(player.getObjectId());
        if ((playerData == null) || !playerData.containsKey(id)) {
            return -1;
        }

        // If reenter time is higher then current, delete it
        final long time = playerData.get(id);
        if (time <= System.currentTimeMillis()) {
            deleteInstanceTime(player, id);
            return -1;
        }
        return time;
    }

    /**
     * Remove re-enter penalty for specified instance from player.
     *
     * @param player player who wants to delete penalty
     * @param id     template id of instance world
     */
    public void deleteInstanceTime(Player player, int id) {
        getDAO(PlayerDAO.class).deleteInstanceTime(player.getObjectId(), id);
        playerInstanceTimes.get(player.getObjectId()).remove(id);
    }

    /**
     * Get instance template by template ID.
     *
     * @param id template id of instance
     * @return instance template if found, otherwise {@code null}
     */
    public InstanceTemplate getInstanceTemplate(int id) {
        return instanceTemplates.get(id);
    }

    public boolean hasInstanceTemplate(int templateId) {
        return instanceTemplates.containsKey(templateId);
    }

    /**
     * Get all instances template.
     *
     * @return Collection of all instance templates
     */
    public Collection<InstanceTemplate> getInstanceTemplates() {
        return instanceTemplates.values();
    }

    /**
     * Get count of created instance worlds with same template ID.
     *
     * @param templateId template id of instance
     * @return count of created instances
     */
    public long getWorldCount(int templateId) {
        return instanceWorlds.values().stream().filter(i -> i.getTemplateId() == templateId).count();
    }

    public List<Instance> getInstances(int templateId) {
        List<Instance> instances = new ArrayList<>();
        for (Instance instance : instanceWorlds.values()) {
            if(instance.getTemplateId() == templateId) {
                instances.add(instance);
            }
        }
        return instances;
    }

    public static void init() {
        getInstance().load();
    }

    public static InstanceManager getInstance() {
        return Singleton.INSTANCE;
    }

    private static class Singleton {
        private static final InstanceManager INSTANCE = new InstanceManager();
    }
}",1,777 657 587 2000 650 2001 123 773 809 657 2002 2003 61 2004 46 2005 40 2000 46 587 41 59 773 809 657 2006 2007 61 744 2006 40 41 59 773 657 2008 60 2006 62 2009 61 744 2010 60 62 40 41 59 773 657 2008 60 2011 62 2012 61 744 2013 60 62 40 41 59 773 657 2008 60 2014 62 2015 61 744 2013 60 62 40 41 59 773 2000 40 41 123 125 64 2016 775 2017 2018 40 41 123 792 2019 46 2020 40 41 46 2021 40 362 41 59 125 64 2016 777 865 2022 40 41 123 2009 46 2023 40 41 59 2024 40 362 44 2025 41 59 2003 46 2026 40 362 44 2009 46 2027 40 41 41 59 2015 46 2023 40 41 59 2028 40 41 59 2003 46 2026 40 362 44 2015 46 2027 40 41 41 59 2029 40 41 59 125 64 2016 777 865 2030 40 2031 2032 44 2033 2034 41 123 664 40 2035 2036 61 2032 46 2037 40 41 59 2038 40 2036 41 59 2036 61 2036 46 2039 40 41 41 123 688 40 362 46 2040 40 2036 46 2041 40 41 41 41 123 2042 40 2036 44 2034 41 59 125 125 125 306 773 865 2043 40 2044 2045 44 2033 2046 41 123 2047 2048 61 2045 46 2049 40 41 59 657 704 2050 61 2051 40 2048 44 362 41 59 688 40 2009 46 2052 40 2050 41 41 123 2003 46 2053 40 362 44 2050 41 59 792 59 125 657 2006 2054 61 744 2006 40 2050 44 2055 40 2048 44 362 41 44 2051 40 2048 44 362 44 45 1501 41 41 59 664 40 2047 2056 61 2045 46 2057 40 41 59 2058 40 2056 41 59 2056 61 2056 46 2059 40 41 41 123 819 40 2056 46 2060 40 41 41 123 579 362 45 62 2061 40 2054 44 2056 41 59 579 362 45 62 2062 40 2054 44 2056 41 59 579 362 45 62 2063 40 2054 44 2056 41 59 579 362 45 62 2064 40 2054 44 2056 41 59 579 362 45 62 2065 40 2046 44 2054 44 2056 41 59 579 362 45 62 2066 40 2054 44 2056 41 59 579 362 45 62 2067 40 2054 44 2056 41 59 579 362 45 62 2068 40 2054 44 2056 41 59 579 362 45 62 2069 40 2050 44 2054 44 2056 41 59 125 125 2009 46 2070 40 2050 44 2054 41 59 125 773 865 2071 40 704 2072 44 2006 2073 44 2044 2074 41 123 2075 46 2076 46 2077 46 2078 2079 59 657 2080 60 2081 62 2082 61 744 2083 60 62 40 41 59 664 40 2044 2084 61 2074 46 2085 40 41 59 2084 340 2086 59 2084 61 2084 46 2087 40 41 41 123 688 40 2084 46 2088 40 41 46 2089 40 362 41 41 123 2079 61 2084 46 2090 40 41 59 657 2091 2092 61 2093 40 2079 44 362 41 59 657 570 2094 61 2095 40 2079 44 362 44 2096 41 59 657 570 2097 61 2095 40 2079 44 362 44 2096 41 59 2098 2099 61 2086 59 664 40 2044 2034 61 2084 46 2085 40 41 59 2034 340 2086 59 2034 61 2034 46 2087 40 41 41 123 688 40 2034 46 2088 40 41 46 2089 40 362 41 41 123 688 40 2099 323 2086 41 123 2099 61 744 2098 40 41 59 125 2099 46 2100 40 2093 40 2034 46 2090 40 41 44 362 41 44 2093 40 2034 46 2090 40 41 44 362 41 41 59 125 125 330 688 40 2099 323 2086 41 123 2099 61 2098 46 2101 59 125 330 830 123 657 2102 60 63 62 2103 61 2102 46 2104 40 362 43 2092 41 59 657 2105 60 63 62 2106 61 2103 46 2107 40 2006 46 587 44 2098 46 587 44 570 46 587 44 570 46 587 41 59 2082 46 2108 40 40 2081 41 2106 46 2109 40 2073 44 2099 44 2094 44 2097 41 41 59 125 580 40 2110 2111 41 123 2003 46 2112 40 362 43 2092 43 362 43 2073 46 2113 40 41 43 362 43 2072 43 362 41 59 125 125 125 2073 46 2114 40 2082 41 59 125 773 865 2115 40 2006 2073 44 2044 2074 41 123 2116 46 2117 46 2118 46 2119 2120 59 657 2121 2122 61 2123 40 2074 46 2124 40 41 44 2121 46 587 44 362 44 2121 46 2125 41 59 657 2126 60 2127 62 2128 61 744 2129 60 62 40 41 59 664 40 2044 2130 61 2074 46 2131 40 41 59 2130 340 2132 59 2130 61 2130 46 2133 40 41 41 123 688 40 2130 46 2134 40 41 46 2135 40 362 41 41 123 2120 61 2130 46 2124 40 41 59 657 704 2136 61 2137 40 2120 44 362 44 45 1501 41 59 688 40 2136 62 1500 41 123 2128 46 2138 40 744 2127 40 2136 41 41 59 125 630 123 657 2139 2140 61 2123 40 2120 44 2139 46 587 44 362 41 59 657 704 2141 61 2137 40 2120 44 362 44 45 1501 41 59 657 704 2142 61 2137 40 2120 44 362 44 45 1501 41 59 2128 46 2143 40 744 2127 40 2140 44 2141 44 2142 41 41 59 125 125 125 2073 46 2144 40 2122 44 2128 41 59 125 773 865 2145 40 2006 2073 44 2044 2074 41 123 657 2146 2147 61 2148 40 2074 46 2149 40 41 44 2146 46 587 44 362 41 59 657 2150 2151 61 744 2152 40 41 59 664 40 2044 2153 61 2074 46 2154 40 41 59 2153 340 2155 59 2153 61 2153 46 2156 40 41 41 123 688 40 2153 46 2157 40 41 46 2158 40 362 41 41 123 2151 46 2159 40 2160 40 2153 46 2149 40 41 44 362 41 41 59 125 125 2073 46 2161 40 2147 44 2151 41 59 125 773 865 2162 40 2033 2046 44 2006 2073 44 2044 2074 41 123 657 2163 60 2164 62 2165 61 744 2166 60 62 40 41 59 2167 46 2168 40 41 46 2169 40 2074 44 2046 44 2165 41 59 2073 46 2170 40 2165 41 59 125 773 865 2171 40 2006 2073 44 2044 2074 41 123 2172 46 2173 46 2174 46 2175 2176 59 2176 61 2074 46 2177 40 41 59 2073 46 2178 40 2179 40 2176 44 362 44 2180 46 2181 40 41 41 41 59 2073 46 2182 40 2179 40 2176 44 362 44 2180 46 2183 40 41 41 41 59 2073 46 2184 40 2179 40 2176 44 362 44 2180 46 2185 40 41 41 41 59 2073 46 2186 40 2179 40 2176 44 362 44 2180 46 2187 40 41 41 41 59 125 773 865 2188 40 2006 2073 44 2044 2074 41 123 2189 46 2190 46 2191 46 2192 2193 59 2193 61 2074 46 2194 40 41 59 2073 46 2195 40 2196 40 2193 44 362 41 41 59 2073 46 2197 40 2196 40 2193 44 362 41 41 59 125 773 865 2198 40 2006 2073 44 2044 2074 41 123 2199 46 2200 46 2201 46 2202 2203 59 2203 61 2074 46 2204 40 41 59 2073 46 2205 40 2206 40 2203 44 362 44 45 1501 41 41 59 2073 46 2207 40 2206 40 2203 44 362 44 45 1501 41 41 59 2073 46 2208 40 2206 40 2203 44 362 44 45 1501 41 41 59 125 773 865 2209 40 2006 2073 44 2044 2074 41 123 664 40 2044 2210 61 2074 46 2211 40 41 59 2210 340 2212 59 2210 61 2210 46 2213 40 41 41 123 688 40 2210 46 2214 40 41 46 2215 40 362 41 41 123 657 2216 2217 61 2218 46 2219 40 41 46 2220 40 2210 41 59 657 2216 2221 61 744 2216 40 41 59 657 704 2222 61 2217 46 2223 40 362 41 59 657 2216 2224 61 2218 46 2219 40 41 46 2225 40 2222 41 59 688 40 2224 340 2212 41 123 2221 46 2226 40 2224 41 59 125 630 123 2003 46 2227 40 362 43 2222 43 362 43 2073 46 2228 40 41 43 362 43 2073 46 2229 40 41 43 362 41 59 125 2221 46 2230 40 2217 41 59 830 123 2073 46 2231 40 2222 44 744 2232 40 2221 41 41 59 125 580 40 2233 2234 41 123 2003 46 2235 40 362 44 2222 44 2073 44 2234 41 59 125 125 125 125 773 865 2236 40 2006 2073 44 2044 2074 41 123 664 40 2237 2238 61 2074 46 2239 40 41 59 2240 40 2238 41 59 2238 61 2238 46 2241 40 41 41 123 657 2242 2243 61 2244 40 2238 46 2245 40 41 44 2242 46 587 44 362 41 59 819 40 2238 46 2246 40 41 41 123 579 362 45 62 2073 46 2247 40 2243 44 2236 40 2238 41 41 59 579 362 45 62 123 688 40 2243 46 2248 40 2242 46 2249 41 41 123 2073 46 2250 40 2243 44 2251 41 59 125 630 123 657 2252 60 2253 62 2254 61 2236 40 2238 41 59 688 40 2254 46 2255 40 41 41 123 2003 46 2256 40 362 44 2073 41 59 125 630 123 2073 46 2257 40 2243 44 2254 41 59 125 125 125 125 125 125 773 2258 60 2259 62 2236 40 2044 2260 41 123 657 2258 60 2259 62 2261 61 744 2262 60 62 40 41 59 664 40 2263 2264 61 2260 46 2265 40 41 59 2266 40 2264 41 59 2264 61 2264 46 2267 40 41 41 123 2261 46 2268 40 2269 40 2264 41 41 59 125 792 2261 59 125 777 2011 2270 40 704 2271 41 123 792 2270 40 2271 44 2272 41 59 125 777 2011 2270 40 704 2271 44 2273 2274 41 123 2275 2073 61 2009 46 2276 40 2271 41 59 688 40 2277 40 2073 41 41 123 2003 46 2278 40 362 44 2271 41 59 2073 61 2007 59 125 2275 2072 61 2279 46 2280 40 41 46 2281 40 41 59 2275 2282 61 744 2011 40 2072 44 2073 41 59 2012 46 2283 40 2072 44 2282 41 59 2282 46 2284 40 2274 41 59 792 2282 59 125 306 777 2011 2285 40 704 2286 41 123 792 2012 46 2287 40 2286 41 59 125 306 777 2288 60 2011 62 2289 40 41 123 792 2012 46 2290 40 41 59 125 306 777 2011 2291 40 2273 2274 44 570 2292 41 123 792 2012 46 2293 40 41 46 2294 40 41 46 2295 40 2296 45 62 40 2292 41 63 2296 46 2297 40 2274 41 58 2296 46 2298 40 2274 41 41 46 2299 40 41 46 2300 40 2301 41 59 125 306 777 865 2302 40 704 2286 41 123 688 40 2012 46 2303 40 2286 41 41 123 2012 46 2304 40 2286 41 59 2305 46 2285 40 41 46 2306 40 2286 41 59 125 125 306 777 2307 2308 40 704 2271 41 123 792 2009 46 2309 40 2271 41 46 2310 40 41 59 125 306 773 865 2311 40 41 123 2312 40 2313 46 587 41 46 2314 40 823 58 58 2315 41 59 125 773 865 2316 40 2317 2318 41 123 830 123 2319 2320 61 2321 46 2322 40 41 59 870 40 2318 46 2323 40 41 41 123 657 726 2324 61 2318 46 2325 40 362 41 59 688 40 2324 62 2320 41 123 657 704 2326 61 2318 46 2327 40 362 41 59 657 704 2286 61 2318 46 2327 40 362 41 59 2328 40 2326 44 2286 44 2324 41 59 125 125 125 580 40 2329 2330 41 123 2003 46 2331 40 2330 46 2332 40 41 44 2330 41 59 125 125 306 777 2014 2333 40 2273 2274 41 123 330 657 2334 2335 61 2015 46 2336 40 2274 46 2337 40 41 41 59 688 40 40 2335 323 2338 41 309 2335 46 2339 40 41 41 123 792 2340 46 2341 59 125 657 2342 2343 61 744 2344 40 2335 46 2345 40 41 41 59 664 40 2334 2346 58 2335 46 2347 40 41 41 123 688 40 2346 46 2348 40 41 329 2349 46 2350 40 41 41 123 2343 46 2351 40 2346 46 2352 40 41 41 59 125 125 688 40 33 2343 46 2339 40 41 41 123 2353 40 2354 46 587 41 46 2355 40 2274 46 2337 40 41 44 2343 41 59 125 792 2335 59 125 306 777 865 2356 40 704 2357 44 704 2072 44 726 2358 41 123 2015 46 2359 40 2357 44 2360 45 62 744 2361 40 41 41 46 2362 40 2072 44 2358 41 59 125 306 777 726 2363 40 2273 2274 44 704 2072 41 123 330 657 2364 2365 61 2015 46 2366 40 2274 46 2367 40 41 41 59 688 40 40 2365 323 2368 41 309 33 2365 46 2369 40 2072 41 41 123 792 45 1501 59 125 330 657 726 2358 61 2365 46 2366 40 2072 41 59 688 40 2358 329 2370 46 2371 40 41 41 123 2372 40 2274 44 2072 41 59 792 45 1501 59 125 792 2358 59 125 306 777 865 2373 40 2273 2274 44 704 2072 41 123 2374 40 2375 46 587 41 46 2373 40 2274 46 2376 40 41 44 2072 41 59 2015 46 2377 40 2274 46 2376 40 41 41 46 2378 40 2072 41 59 125 306 777 2006 2379 40 704 2072 41 123 792 2009 46 2380 40 2072 41 59 125 777 570 2381 40 704 2271 41 123 792 2009 46 2382 40 2271 41 59 125 306 777 2288 60 2006 62 2383 40 41 123 792 2009 46 2384 40 41 59 125 306 777 726 2385 40 704 2271 41 123 792 2012 46 2386 40 41 46 2387 40 41 46 2388 40 2389 45 62 2389 46 2390 40 41 323 2271 41 46 2391 40 41 59 125 777 2258 60 2011 62 2289 40 704 2271 41 123 2258 60 2011 62 2392 61 744 2393 60 62 40 41 59 664 40 2011 2394 58 2012 46 2395 40 41 41 123 688 40 2394 46 2396 40 41 323 2271 41 123 2392 46 2397 40 2394 41 59 125 125 792 2392 59 125 777 809 865 2398 40 41 123 2285 40 41 46 2022 40 41 59 125 777 809 2000 2285 40 41 123 792 2399 46 2400 59 125 773 809 587 2401 123 773 809 657 2000 2402 61 744 2000 40 41 59 125 125 ,"{'AvgLine': 11, 'CountLine': 454, 'CountStmt': 228, 'MaxNesting': 5, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 183, 'MaxEssential': 12, 'SumEssential': 54, 'AvgCyclomatic': 2, 'CountLineCode': 306, 'CountStmtDecl': 97, 'MaxCyclomatic': 12, 'SumCyclomatic': 87, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 52, 'CountSemicolon': 150, 'CountDeclMethod': 35, 'CountLineCodeExe': 184, 'CountLineComment': 96, 'CountClassCoupled': 43, 'CountClassDerived': 0, 'CountLineCodeDecl': 89, 'CountDeclMethodAll': 102, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.31', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 12, 'SumCyclomaticStrict': 89, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 20, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 78, 'CountDeclClassVariable': 2, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 14, 'CountDeclInstanceMethod': 33, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 43, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 75}"
2934,Java,"public class PendingTradesViewModel extends ActivatableWithDataModel<PendingTradesDataModel> implements ViewModel {

    @Getter
    @Nullable
    private Trade trade;

    interface State {
    }

    enum BuyerState implements State {
        UNDEFINED,
        STEP1,
        STEP2,
        STEP3,
        STEP4
    }

    enum SellerState implements State {
        UNDEFINED,
        STEP1,
        STEP2,
        STEP3,
        STEP4
    }

    public final CoinFormatter btcFormatter;
    private final BsqFormatter bsqFormatter;
    public final BtcAddressValidator btcAddressValidator;
    final AccountAgeWitnessService accountAgeWitnessService;
    public final P2PService p2PService;
    private final MempoolService mempoolService;
    private final ClosedTradableManager closedTradableManager;
    private final OfferUtil offerUtil;
    private final TradeUtil tradeUtil;
    public final ClockWatcher clockWatcher;
    @Getter
    private final Navigation navigation;
    @Getter
    private final User user;

    private final ObjectProperty<BuyerState> buyerState = new SimpleObjectProperty<>();
    private final ObjectProperty<SellerState> sellerState = new SimpleObjectProperty<>();
    @Getter
    private final ObjectProperty<MessageState> messageStateProperty = new SimpleObjectProperty<>(MessageState.UNDEFINED);
    private Subscription tradeStateSubscription;
    private Subscription messageStateSubscription;
    @Getter
    protected final IntegerProperty mempoolStatus = new SimpleIntegerProperty();


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, initialization
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    public PendingTradesViewModel(PendingTradesDataModel dataModel,
                                  @Named(FormattingUtils.BTC_FORMATTER_KEY) CoinFormatter btcFormatter,
                                  BsqFormatter bsqFormatter,
                                  BtcAddressValidator btcAddressValidator,
                                  P2PService p2PService,
                                  MempoolService mempoolService,
                                  ClosedTradableManager closedTradableManager,
                                  OfferUtil offerUtil,
                                  TradeUtil tradeUtil,
                                  AccountAgeWitnessService accountAgeWitnessService,
                                  ClockWatcher clockWatcher,
                                  Navigation navigation,
                                  User user) {
        super(dataModel);

        this.btcFormatter = btcFormatter;
        this.bsqFormatter = bsqFormatter;
        this.btcAddressValidator = btcAddressValidator;
        this.p2PService = p2PService;
        this.mempoolService = mempoolService;
        this.closedTradableManager = closedTradableManager;
        this.offerUtil = offerUtil;
        this.tradeUtil = tradeUtil;
        this.accountAgeWitnessService = accountAgeWitnessService;
        this.clockWatcher = clockWatcher;
        this.navigation = navigation;
        this.user = user;
    }


    @Override
    protected void deactivate() {
        if (tradeStateSubscription != null) {
            tradeStateSubscription.unsubscribe();
            tradeStateSubscription = null;
        }

        if (messageStateSubscription != null) {
            messageStateSubscription.unsubscribe();
            messageStateSubscription = null;
        }
    }

    // Don't set own listener as we need to control the order of the calls
    public void onSelectedItemChanged(PendingTradesListItem selectedItem) {
        if (tradeStateSubscription != null) {
            tradeStateSubscription.unsubscribe();
            sellerState.set(SellerState.UNDEFINED);
            buyerState.set(BuyerState.UNDEFINED);
        }

        if (messageStateSubscription != null) {
            messageStateSubscription.unsubscribe();
            messageStateProperty.set(MessageState.UNDEFINED);
        }

        if (selectedItem != null) {
            this.trade = selectedItem.getTrade();
            tradeStateSubscription = EasyBind.subscribe(trade.stateProperty(), this::onTradeStateChanged);

            messageStateSubscription = EasyBind.subscribe(trade.getProcessModel().getPaymentStartedMessageStateProperty(), this::onMessageStateChanged);
        }
    }

    public void setMessageStateProperty(MessageState messageState) {
        if (messageStateProperty.get() == MessageState.ACKNOWLEDGED) {
            log.warn(""We have already an ACKNOWLEDGED message received. "" +
                    ""We would not expect any other message after that. Received messageState={}"", messageState);
            return;
        }

        if (trade != null)
            trade.getProcessModel().setPaymentStartedMessageState(messageState);
    }

    private void onMessageStateChanged(MessageState messageState) {
        messageStateProperty.set(messageState);
    }

    public void checkTakerFeeTx(Trade trade) {
        mempoolStatus.setValue(-1);
        mempoolService.validateOfferTakerTx(trade, (txValidator -> {
            mempoolStatus.setValue(txValidator.isFail() ? 0 : 1);
            if (txValidator.isFail()) {
                String errorMessage = ""Validation of Taker Tx returned: "" + txValidator.toString();
                log.warn(errorMessage);
                // prompt user to open mediation
                if (trade.getDisputeState() == Trade.DisputeState.NO_DISPUTE) {
                    UserThread.runAfter(() -> {
                        Popup popup = new Popup();
                        popup.headLine(Res.get(""portfolio.pending.openSupportTicket.headline""))
                                .message(Res.get(""portfolio.pending.invalidTx"", errorMessage))
                                .actionButtonText(Res.get(""portfolio.pending.openSupportTicket.headline""))
                                .onAction(dataModel::onOpenSupportTicket)
                                .closeButtonText(Res.get(""shared.cancel""))
                                .onClose(popup::hide)
                                .show();
                    }, 100, TimeUnit.MILLISECONDS);
                }
            }
        }));
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    ReadOnlyObjectProperty<BuyerState> getBuyerState() {
        return buyerState;
    }

    ReadOnlyObjectProperty<SellerState> getSellerState() {
        return sellerState;
    }

    public String getPayoutAmount() {
        return dataModel.getTrade() != null
                ? btcFormatter.formatCoinWithCode(dataModel.getTrade().getPayoutAmount())
                : """";
    }

    String getMarketLabel(PendingTradesListItem item) {
        return item == null ? """" : tradeUtil.getMarketDescription(item.getTrade());
    }

    public String getRemainingTradeDurationAsWords() {
        checkNotNull(dataModel.getTrade(), ""model's trade must not be null"");
        return tradeUtil.getRemainingTradeDurationAsWords(dataModel.getTrade());
    }

    public double getRemainingTradeDurationAsPercentage() {
        checkNotNull(dataModel.getTrade(), ""model's trade must not be null"");
        return tradeUtil.getRemainingTradeDurationAsPercentage(dataModel.getTrade());
    }

    public String getDateForOpenDispute() {
        checkNotNull(dataModel.getTrade(), ""model's trade must not be null"");
        return DisplayUtils.formatDateTime(tradeUtil.getDateForOpenDispute(dataModel.getTrade()));
    }

    public boolean showWarning() {
        checkNotNull(dataModel.getTrade(), ""model's trade must not be null"");
        Date halfTradePeriodDate = tradeUtil.getHalfTradePeriodDate(dataModel.getTrade());
        return halfTradePeriodDate != null && new Date().after(halfTradePeriodDate);
    }

    public boolean showDispute() {
        return getMaxTradePeriodDate() != null && new Date().after(getMaxTradePeriodDate());
    }

    //

    String getMyRole(PendingTradesListItem item) {
        Trade trade = item.getTrade();
        Contract contract = trade.getContract();
        if (contract != null) {
            Offer offer = trade.getOffer();
            checkNotNull(offer);
            checkNotNull(offer.getCurrencyCode());
            return tradeUtil.getRole(contract.isBuyerMakerAndSellerTaker(),
                    dataModel.isMaker(offer),
                    offer.getCurrencyCode());
        } else {
            return """";
        }
    }

    String getPaymentMethod(PendingTradesListItem item) {
        return item == null ? """" : tradeUtil.getPaymentMethodNameWithCountryCode(item.getTrade());
    }

    // summary
    public String getTradeVolume() {
        return dataModel.getTrade() != null
                ? btcFormatter.formatCoinWithCode(dataModel.getTrade().getAmount())
                : """";
    }

    public String getFiatVolume() {
        return dataModel.getTrade() != null
                ? VolumeUtil.formatVolumeWithCode(dataModel.getTrade().getVolume())
                : """";
    }

    public String getTxFee() {
        if (trade != null && trade.getAmount() != null) {
            Coin txFee = dataModel.getTxFee();
            String percentage = GUIUtil.getPercentageOfTradeAmount(txFee,
                    trade.getAmount(),
                    Coin.ZERO);
            return btcFormatter.formatCoinWithCode(txFee) + percentage;
        } else {
            return """";
        }
    }

    public String getTradeFee() {
        if (trade != null && dataModel.getOffer() != null && trade.getAmount() != null) {
            checkNotNull(dataModel.getTrade());
            if (dataModel.isMaker() && dataModel.getOffer().isCurrencyForMakerFeeBtc() ||
                    !dataModel.isMaker() && dataModel.getTrade().isCurrencyForTakerFeeBtc()) {
                Coin tradeFeeInBTC = dataModel.getTradeFeeInBTC();

                Coin minTradeFee = dataModel.isMaker() ?
                        FeeService.getMinMakerFee(true) :
                        FeeService.getMinTakerFee(true);

                String percentage = GUIUtil.getPercentageOfTradeAmount(tradeFeeInBTC, trade.getAmount(),
                        minTradeFee);
                return btcFormatter.formatCoinWithCode(tradeFeeInBTC) + percentage;
            } else {
                return bsqFormatter.formatCoinWithCode(dataModel.getTradeFeeAsBsq());
            }
        } else {
            return """";
        }
    }

    public String getSecurityDeposit() {
        Offer offer = dataModel.getOffer();
        Trade trade = dataModel.getTrade();
        if (offer != null && trade != null && trade.getAmount() != null) {
            Coin securityDeposit = dataModel.isBuyer() ?
                    offer.getBuyerSecurityDeposit()
                    : offer.getSellerSecurityDeposit();

            Coin minSecurityDeposit = dataModel.isBuyer() ?
                    Restrictions.getMinBuyerSecurityDepositAsCoin() :
                    Restrictions.getMinSellerSecurityDepositAsCoin();

            String percentage = GUIUtil.getPercentageOfTradeAmount(securityDeposit,
                    trade.getAmount(),
                    minSecurityDeposit);
            return btcFormatter.formatCoinWithCode(securityDeposit) + percentage;
        } else {
            return """";
        }
    }

    public boolean isBlockChainMethod() {
        return offerUtil.isBlockChainPaymentMethod(dataModel.getOffer());
    }

    public int getNumPastTrades(Trade trade) {
        return closedTradableManager.getObservableList().stream()
                .filter(e -> {
                    if (e instanceof Trade) {
                        Trade t = (Trade) e;
                        return t.getTradingPeerNodeAddress() != null &&
                                trade.getTradingPeerNodeAddress() != null &&
                                t.getTradingPeerNodeAddress().getFullAddress().equals(trade.getTradingPeerNodeAddress().getFullAddress());
                    } else
                        return false;

                })
                .collect(Collectors.toSet())
                .size();
    }

    @Nullable
    private Date getMaxTradePeriodDate() {
        return dataModel.getTrade() != null
                ? dataModel.getTrade().getMaxTradePeriodDate()
                : null;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // States
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void onTradeStateChanged(Trade.State tradeState) {
        log.info(""UI tradeState={}, id={}"",
                tradeState,
                trade != null ? trade.getShortId() : ""trade is null"");

        switch (tradeState) {
            // #################### Phase PREPARATION
            case PREPARATION:
                sellerState.set(UNDEFINED);
                buyerState.set(BuyerState.UNDEFINED);
                break;

            // At first part maker/taker have different roles
            // taker perspective
            // #################### Phase TAKER_FEE_PAID
            case TAKER_PUBLISHED_TAKER_FEE_TX:

                // PUBLISH_DEPOSIT_TX_REQUEST
                // maker perspective
            case MAKER_SENT_PUBLISH_DEPOSIT_TX_REQUEST:
            case MAKER_SAW_ARRIVED_PUBLISH_DEPOSIT_TX_REQUEST:
            case MAKER_STORED_IN_MAILBOX_PUBLISH_DEPOSIT_TX_REQUEST:
            case MAKER_SEND_FAILED_PUBLISH_DEPOSIT_TX_REQUEST:

                // taker perspective
            case TAKER_RECEIVED_PUBLISH_DEPOSIT_TX_REQUEST:
                // We don't have a UI state for that, we still have not a ready initiated trade
                sellerState.set(UNDEFINED);
                buyerState.set(BuyerState.UNDEFINED);
                break;


            // #################### Phase DEPOSIT_PAID
            // DEPOSIT_TX_PUBLISHED_MSG
            // seller perspective
            case SELLER_PUBLISHED_DEPOSIT_TX:
                // buyer perspective
            case BUYER_RECEIVED_DEPOSIT_TX_PUBLISHED_MSG:

                // Alternatively the maker could have seen the deposit tx earlier before he received the DEPOSIT_TX_PUBLISHED_MSG
            case BUYER_SAW_DEPOSIT_TX_IN_NETWORK:
                buyerState.set(BuyerState.STEP1);
                sellerState.set(SellerState.STEP1);
                break;


            // buyer and seller step 2
            // #################### Phase DEPOSIT_CONFIRMED
            case DEPOSIT_CONFIRMED_IN_BLOCK_CHAIN:
                sellerState.set(SellerState.STEP2);
                buyerState.set(BuyerState.STEP2);
                break;

            // buyer step 3
            case BUYER_CONFIRMED_IN_UI_FIAT_PAYMENT_INITIATED: // UI action
            case BUYER_SENT_FIAT_PAYMENT_INITIATED_MSG:  // FIAT_PAYMENT_INITIATED_MSG sent
                // We don't switch the UI before we got the feedback of the msg delivery
                buyerState.set(BuyerState.STEP2);
                break;
            case BUYER_SAW_ARRIVED_FIAT_PAYMENT_INITIATED_MSG:  // FIAT_PAYMENT_INITIATED_MSG arrived
            case BUYER_STORED_IN_MAILBOX_FIAT_PAYMENT_INITIATED_MSG:  // FIAT_PAYMENT_INITIATED_MSG in mailbox
                buyerState.set(BuyerState.STEP3);
                break;
            case BUYER_SEND_FAILED_FIAT_PAYMENT_INITIATED_MSG:  // FIAT_PAYMENT_INITIATED_MSG failed
                // if failed we need to repeat sending so back to step 2
                buyerState.set(BuyerState.STEP2);
                break;

            // seller step 3
            case SELLER_RECEIVED_FIAT_PAYMENT_INITIATED_MSG: // FIAT_PAYMENT_INITIATED_MSG received
                sellerState.set(SellerState.STEP3);
                break;

            // seller step 4
            case SELLER_CONFIRMED_IN_UI_FIAT_PAYMENT_RECEIPT:   // UI action
            case SELLER_PUBLISHED_PAYOUT_TX: // payout tx broad casted
            case SELLER_SENT_PAYOUT_TX_PUBLISHED_MSG: // PAYOUT_TX_PUBLISHED_MSG sent
                sellerState.set(SellerState.STEP3);
                break;
            case SELLER_SAW_ARRIVED_PAYOUT_TX_PUBLISHED_MSG: // PAYOUT_TX_PUBLISHED_MSG arrived
            case SELLER_STORED_IN_MAILBOX_PAYOUT_TX_PUBLISHED_MSG: // PAYOUT_TX_PUBLISHED_MSG mailbox
            case SELLER_SEND_FAILED_PAYOUT_TX_PUBLISHED_MSG: // PAYOUT_TX_PUBLISHED_MSG failed -  payout tx is published, peer will see it in network so we ignore failure and complete
                sellerState.set(SellerState.STEP4);
                break;

            // buyer step 4
            case BUYER_RECEIVED_PAYOUT_TX_PUBLISHED_MSG:
                // Alternatively the maker could have seen the payout tx earlier before he received the PAYOUT_TX_PUBLISHED_MSG:
            case BUYER_SAW_PAYOUT_TX_IN_NETWORK:
                buyerState.set(BuyerState.STEP4);
                break;

            case WITHDRAW_COMPLETED:
                sellerState.set(UNDEFINED);
                buyerState.set(BuyerState.UNDEFINED);
                break;

            default:
                sellerState.set(UNDEFINED);
                buyerState.set(BuyerState.UNDEFINED);
                log.warn(""unhandled processState "" + tradeState);
                DevEnv.logErrorAndThrowIfDevMode(""unhandled processState "" + tradeState);
                break;
        }
    }
}",1,777 587 2000 650 2001 60 2002 62 693 2003 123 64 2004 64 2005 773 2006 2007 59 709 2008 123 125 640 2009 693 2008 123 2010 44 2011 44 2012 44 2013 44 2014 125 640 2015 693 2008 123 2016 44 2017 44 2018 44 2019 44 2020 125 777 657 2021 2022 59 773 657 2023 2024 59 777 657 2025 2026 59 657 2027 2028 59 777 657 2029 2030 59 773 657 2031 2032 59 773 657 2033 2034 59 773 657 2035 2036 59 773 657 2037 2038 59 777 657 2039 2040 59 64 2004 773 657 2041 2042 59 64 2004 773 657 2043 2044 59 773 657 2045 60 2009 62 2046 61 744 2047 60 62 40 41 59 773 657 2045 60 2015 62 2048 61 744 2047 60 62 40 41 59 64 2004 773 657 2045 60 2049 62 2050 61 744 2047 60 62 40 2049 46 2051 41 59 773 2052 2053 59 773 2052 2054 59 64 2004 775 657 2055 2056 61 744 2057 40 41 59 331 330 331 64 2058 777 2000 40 2002 2059 44 64 2060 40 2061 46 2062 41 2021 2022 44 2023 2024 44 2025 2026 44 2029 2030 44 2031 2032 44 2033 2034 44 2035 2036 44 2037 2038 44 2027 2028 44 2039 2040 44 2041 2042 44 2043 2044 41 123 818 40 2059 41 59 823 46 2022 61 2022 59 823 46 2024 61 2024 59 823 46 2026 61 2026 59 823 46 2030 61 2030 59 823 46 2032 61 2032 59 823 46 2034 61 2034 59 823 46 2036 61 2036 59 823 46 2038 61 2038 59 823 46 2028 61 2028 59 823 46 2040 61 2040 59 823 46 2042 61 2042 59 823 46 2044 61 2044 59 125 64 2063 775 865 2064 40 41 123 688 40 2053 340 2065 41 123 2053 46 2066 40 41 59 2053 61 2065 59 125 688 40 2054 340 2065 41 123 2054 46 2067 40 41 59 2054 61 2065 59 125 125 330 777 865 2068 40 2069 2070 41 123 688 40 2053 340 2071 41 123 2053 46 2072 40 41 59 2048 46 2073 40 2015 46 2051 41 59 2046 46 2073 40 2009 46 2051 41 59 125 688 40 2054 340 2071 41 123 2054 46 2074 40 41 59 2050 46 2075 40 2049 46 2051 41 59 125 688 40 2070 340 2071 41 123 823 46 2007 61 2070 46 2076 40 41 59 2053 61 2077 46 2078 40 2007 46 2079 40 41 44 823 58 58 2080 41 59 2054 61 2077 46 2078 40 2007 46 2081 40 41 46 2082 40 41 44 823 58 58 2083 41 59 125 125 777 865 2084 40 2049 2085 41 123 688 40 2050 46 2086 40 41 323 2049 46 2087 41 123 2088 46 2089 40 362 43 362 44 2085 41 59 792 59 125 688 40 2007 340 2090 41 2007 46 2091 40 41 46 2092 40 2085 41 59 125 773 865 2093 40 2049 2085 41 123 2050 46 2094 40 2085 41 59 125 777 865 2095 40 2006 2007 41 123 2056 46 2096 40 45 1501 41 59 2032 46 2097 40 2007 44 40 2098 45 62 123 2056 46 2096 40 2098 46 2099 40 41 63 1500 58 1501 41 59 688 40 2098 46 2099 40 41 41 123 2100 2101 61 362 43 2098 46 2102 40 41 59 2103 46 2104 40 2101 41 59 330 688 40 2007 46 2105 40 41 323 2006 46 2106 46 2107 41 123 2108 46 2109 40 40 41 45 62 123 2110 2111 61 744 2110 40 41 59 2111 46 2112 40 2113 46 2114 40 362 41 41 46 2115 40 2113 46 2114 40 362 44 2101 41 41 46 2116 40 2113 46 2114 40 362 41 41 46 2117 40 2059 58 58 2118 41 46 2119 40 2113 46 2114 40 362 41 41 46 2120 40 2111 58 58 2121 41 46 2122 40 41 59 125 44 1503 44 2123 46 2124 41 59 125 125 125 41 41 59 125 331 330 331 2125 60 2009 62 2126 40 41 123 792 2046 59 125 2125 60 2015 62 2127 40 41 123 792 2048 59 125 777 2128 2129 40 41 123 792 2059 46 2130 40 41 340 2131 63 2022 46 2132 40 2059 46 2130 40 41 46 2129 40 41 41 58 362 59 125 2128 2133 40 2069 2134 41 123 792 2134 323 2135 63 362 58 2038 46 2136 40 2134 46 2137 40 41 41 59 125 777 2128 2138 40 41 123 2139 40 2059 46 2140 40 41 44 362 41 59 792 2038 46 2138 40 2059 46 2140 40 41 41 59 125 777 625 2141 40 41 123 2142 40 2059 46 2143 40 41 44 362 41 59 792 2038 46 2141 40 2059 46 2143 40 41 41 59 125 777 2128 2144 40 41 123 2145 40 2059 46 2146 40 41 44 362 41 59 792 2147 46 2148 40 2038 46 2144 40 2059 46 2146 40 41 41 41 59 125 777 570 2149 40 41 123 2150 40 2059 46 2151 40 41 44 362 41 59 2152 2153 61 2038 46 2154 40 2059 46 2151 40 41 41 59 792 2153 340 2155 307 744 2152 40 41 46 2156 40 2153 41 59 125 777 570 2157 40 41 123 792 2158 40 41 340 2159 307 744 2160 40 41 46 2161 40 2158 40 41 41 59 125 330 2128 2162 40 2069 2134 41 123 2006 2007 61 2134 46 2163 40 41 59 2164 2165 61 2007 46 2166 40 41 59 688 40 2165 340 2167 41 123 2168 2169 61 2007 46 2170 40 41 59 2171 40 2169 41 59 2171 40 2169 46 2172 40 41 41 59 792 2038 46 2173 40 2165 46 2174 40 41 44 2059 46 2175 40 2169 41 44 2169 46 2172 40 41 41 59 125 630 123 792 362 59 125 125 2128 2176 40 2069 2134 41 123 792 2134 323 2177 63 362 58 2038 46 2178 40 2134 46 2179 40 41 41 59 125 330 777 2128 2180 40 41 123 792 2059 46 2181 40 41 340 2182 63 2022 46 2183 40 2059 46 2181 40 41 46 2184 40 41 41 58 362 59 125 777 2128 2185 40 41 123 792 2059 46 2186 40 41 340 2187 63 2188 46 2189 40 2059 46 2186 40 41 46 2190 40 41 41 58 362 59 125 777 2128 2191 40 41 123 688 40 2007 340 2192 307 2007 46 2193 40 41 340 2192 41 123 2194 2195 61 2059 46 2191 40 41 59 2128 2196 61 2197 46 2198 40 2195 44 2007 46 2193 40 41 44 2194 46 2199 41 59 792 2022 46 2200 40 2195 41 43 2196 59 125 630 123 792 362 59 125 125 777 2128 2201 40 41 123 688 40 2007 340 2202 307 2059 46 2203 40 41 340 2202 307 2007 46 2204 40 41 340 2202 41 123 2205 40 2059 46 2206 40 41 41 59 688 40 2059 46 2207 40 41 307 2059 46 2203 40 41 46 2208 40 41 309 33 2059 46 2207 40 41 307 2059 46 2206 40 41 46 2209 40 41 41 123 2210 2211 61 2059 46 2212 40 41 59 2210 2213 61 2059 46 2207 40 41 63 2214 46 2215 40 2216 41 58 2214 46 2217 40 2216 41 59 2128 2218 61 2219 46 2220 40 2211 44 2007 46 2204 40 41 44 2213 41 59 792 2022 46 2221 40 2211 41 43 2218 59 125 630 123 792 2024 46 2222 40 2059 46 2223 40 41 41 59 125 125 630 123 792 362 59 125 125 777 2128 2224 40 41 123 2225 2226 61 2059 46 2227 40 41 59 2006 2007 61 2059 46 2228 40 41 59 688 40 2226 340 2229 307 2007 340 2229 307 2007 46 2230 40 41 340 2229 41 123 2231 2232 61 2059 46 2233 40 41 63 2226 46 2234 40 41 58 2226 46 2235 40 41 59 2231 2236 61 2059 46 2233 40 41 63 2237 46 2238 40 41 58 2237 46 2239 40 41 59 2128 2240 61 2241 46 2242 40 2232 44 2007 46 2230 40 41 44 2236 41 59 792 2022 46 2243 40 2232 41 43 2240 59 125 630 123 792 362 59 125 125 777 570 2244 40 41 123 792 2036 46 2245 40 2059 46 2246 40 41 41 59 125 777 704 2247 40 2006 2007 41 123 792 2034 46 2248 40 41 46 2249 40 41 46 2250 40 2251 45 62 123 688 40 2251 702 2006 41 123 2006 2252 61 40 2006 41 2251 59 792 2252 46 2253 40 41 340 2254 307 2007 46 2253 40 41 340 2254 307 2252 46 2253 40 41 46 2255 40 41 46 2256 40 2007 46 2253 40 41 46 2255 40 41 41 59 125 630 792 2257 59 125 41 46 2258 40 2259 46 2260 40 41 41 46 2261 40 41 59 125 64 2005 773 2262 2263 40 41 123 792 2059 46 2264 40 41 340 2265 63 2059 46 2264 40 41 46 2263 40 41 58 2265 59 125 331 330 331 773 865 2266 40 2006 46 2008 2267 41 123 2268 46 2269 40 362 44 2267 44 2007 340 2270 63 2007 46 2271 40 41 58 362 41 59 819 40 2267 41 123 330 579 2272 58 2048 46 2273 40 2051 41 59 2046 46 2273 40 2009 46 2051 41 59 572 59 330 330 330 579 2274 58 330 330 579 2275 58 579 2276 58 579 2277 58 579 2278 58 330 579 2279 58 330 2048 46 2273 40 2051 41 59 2046 46 2273 40 2009 46 2051 41 59 572 59 330 330 330 579 2280 58 330 579 2281 58 330 579 2282 58 2046 46 2273 40 2009 46 2283 41 59 2048 46 2273 40 2015 46 2283 41 59 572 59 330 330 579 2284 58 2048 46 2273 40 2015 46 2285 41 59 2046 46 2273 40 2009 46 2285 41 59 572 59 330 579 2286 58 330 579 2287 58 330 330 2046 46 2273 40 2009 46 2285 41 59 572 59 579 2288 58 330 579 2289 58 330 2046 46 2273 40 2009 46 2290 41 59 572 59 579 2291 58 330 330 2046 46 2273 40 2009 46 2285 41 59 572 59 330 579 2292 58 330 2048 46 2273 40 2015 46 2290 41 59 572 59 330 579 2293 58 330 579 2294 58 330 579 2295 58 330 2048 46 2273 40 2015 46 2290 41 59 572 59 579 2296 58 330 579 2297 58 330 579 2298 58 330 2048 46 2273 40 2015 46 2299 41 59 572 59 330 579 2300 58 330 579 2301 58 2046 46 2273 40 2009 46 2299 41 59 572 59 579 2302 58 2048 46 2273 40 2051 41 59 2046 46 2273 40 2009 46 2051 41 59 572 59 613 58 2048 46 2273 40 2051 41 59 2046 46 2273 40 2009 46 2051 41 59 2268 46 2303 40 362 43 2267 41 59 2304 46 2305 40 362 43 2267 41 59 572 59 125 125 125 ,"{'AvgLine': 13, 'CountLine': 431, 'CountStmt': 185, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 139, 'MaxEssential': 3, 'SumEssential': 30, 'AvgCyclomatic': 2, 'CountLineCode': 332, 'CountStmtDecl': 66, 'MaxCyclomatic': 28, 'SumCyclomatic': 80, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 64, 'CountSemicolon': 139, 'CountDeclMethod': 26, 'CountLineCodeExe': 212, 'CountLineComment': 47, 'CountClassCoupled': 50, 'CountClassDerived': 0, 'CountLineCodeDecl': 103, 'CountDeclMethodAll': 32, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.14', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 28, 'SumCyclomaticStrict': 92, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 17, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 55, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 5, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 26, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 50, 'CountDeclInstanceVariable': 19, 'PercentLackOfCohesionModified': 90}"
2540,Java,"    private static final TypeAdapter<JsonElement> ORDERED_JSON_WRITER = new TypeAdapter<JsonElement>() {

        @Override
        public JsonElement read(JsonReader in) {
            return null;
        }

        @Override
        public void write(JsonWriter out, JsonElement value) throws IOException {
            if (value == null || value.isJsonNull()) {
                out.nullValue();
            } else if (value.isJsonPrimitive()) {
                JsonPrimitive primitive = value.getAsJsonPrimitive();
                if (primitive.isNumber()) {
                    out.value(primitive.getAsNumber());
                } else if (primitive.isBoolean()) {
                    out.value(primitive.getAsBoolean());
                } else {
                    out.value(primitive.getAsString());
                }

            } else if (value.isJsonArray()) {
                out.beginArray();
                for (JsonElement e : value.getAsJsonArray()) {
                    write(out, e);
                }
                out.endArray();

            } else if (value.isJsonObject()) {
                out.beginObject();

                List<Map.Entry<String, JsonElement>> entries = new ArrayList<>(value.getAsJsonObject().entrySet());
                entries.sort(Comparator.comparing(Map.Entry::getKey));
                for (Map.Entry<String, JsonElement> e : entries) {
                    out.name(e.getKey());
                    write(out, e.getValue());
                }
                out.endObject();

            } else {
                throw new IllegalArgumentException(""Couldn't write "" + value.getClass());
            }
        }
    };",1,773 809 657 2000 60 2001 62 2002 61 744 2000 60 2001 62 40 41 123 64 2003 777 2001 2004 40 2005 2006 41 123 792 2007 59 125 64 2003 777 865 2008 40 2009 2010 44 2001 2011 41 826 2012 123 688 40 2011 323 2013 309 2011 46 2014 40 41 41 123 2010 46 2015 40 41 59 125 630 688 40 2011 46 2016 40 41 41 123 2017 2018 61 2011 46 2019 40 41 59 688 40 2018 46 2020 40 41 41 123 2010 46 2011 40 2018 46 2021 40 41 41 59 125 630 688 40 2018 46 2022 40 41 41 123 2010 46 2011 40 2018 46 2023 40 41 41 59 125 630 123 2010 46 2011 40 2018 46 2024 40 41 41 59 125 125 630 688 40 2011 46 2025 40 41 41 123 2010 46 2026 40 41 59 664 40 2001 2027 58 2011 46 2028 40 41 41 123 2008 40 2010 44 2027 41 59 125 2010 46 2029 40 41 59 125 630 688 40 2011 46 2030 40 41 41 123 2010 46 2031 40 41 59 2032 60 2033 46 2034 60 2035 44 2001 356 2036 61 744 2037 60 62 40 2011 46 2038 40 41 46 2039 40 41 41 59 2036 46 2040 40 2041 46 2042 40 2033 46 2034 58 58 2043 41 41 59 664 40 2033 46 2034 60 2035 44 2001 62 2044 58 2036 41 123 2010 46 2045 40 2044 46 2043 40 41 41 59 2008 40 2010 44 2044 46 2046 40 41 41 59 125 2010 46 2047 40 41 59 125 630 123 825 744 2048 40 362 43 2011 46 2049 40 41 41 59 125 125 125 59 ,"{'AvgLine': 20, 'CountLine': 43, 'CountStmt': 28, 'MaxNesting': 2, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 24, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 5, 'CountLineCode': 37, 'CountStmtDecl': 6, 'MaxCyclomatic': 9, 'SumCyclomatic': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountSemicolon': 16, 'CountDeclMethod': 2, 'CountLineCodeExe': 31, 'CountLineComment': 0, 'CountClassCoupled': 10, 'CountClassDerived': 0, 'CountLineCodeDecl': 3, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 5, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 10, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2869,Java,"@Slf4j
public class Version {
    // The application versions
    // VERSION = 0.5.0 introduces proto buffer for the P2P network and local DB and is a not backward compatible update
    // Therefore all sub versions start again with 1
    // We use semantic versioning with major, minor and patch
    public static final String VERSION = ""1.8.0"";

    /**
     * Holds a list of the tagged resource files for optimizing the getData requests.
     * This must not contain each version but only those where we add new version-tagged resource files for
     * historical data stores.
     */
    public static final List<String> HISTORICAL_RESOURCE_FILE_VERSION_TAGS = Arrays.asList(""1.4.0"", ""1.5.0"", ""1.5.2"",
            ""1.5.5"", ""1.5.7"", ""1.6.0"", ""1.6.3"", ""1.6.5"", ""1.7.2"", ""1.7.4"", ""1.8.0"");

    public static int getMajorVersion(String version) {
        return getSubVersion(version, 0);
    }

    public static int getMinorVersion(String version) {
        return getSubVersion(version, 1);
    }

    public static int getPatchVersion(String version) {
        return getSubVersion(version, 2);
    }

    public static boolean isNewVersion(String newVersion) {
        return isNewVersion(newVersion, VERSION);
    }

    public static boolean isNewVersion(String newVersion, String currentVersion) {
        if (newVersion.equals(currentVersion))
            return false;
        else if (getMajorVersion(newVersion) > getMajorVersion(currentVersion))
            return true;
        else if (getMajorVersion(newVersion) < getMajorVersion(currentVersion))
            return false;
        else if (getMinorVersion(newVersion) > getMinorVersion(currentVersion))
            return true;
        else if (getMinorVersion(newVersion) < getMinorVersion(currentVersion))
            return false;
        else if (getPatchVersion(newVersion) > getPatchVersion(currentVersion))
            return true;
        else if (getPatchVersion(newVersion) < getPatchVersion(currentVersion))
            return false;
        else
            return false;
    }

    private static int getSubVersion(String version, int index) {
        final String[] split = version.split(""\\."");
        checkArgument(split.length == 3, ""Version number must be in semantic version format (contain 2 '.'). version="" + version);
        return Integer.parseInt(split[index]);
    }

    // The version no. for the objects sent over the network. A change will break the serialization of old objects.
    // If objects are used for both network and database the network version is applied.
    // VERSION = 0.5.0 -> P2P_NETWORK_VERSION = 1
    // With version 1.2.2 we change to version 2 (new trade protocol)
    public static final int P2P_NETWORK_VERSION = 1;

    // The version no. of the serialized data stored to disc. A change will break the serialization of old objects.
    // VERSION = 0.5.0 -> LOCAL_DB_VERSION = 1
    public static final int LOCAL_DB_VERSION = 1;

    // The version no. of the current protocol. The offer holds that version.
    // A taker will check the version of the offers to see if his version is compatible.
    // For the switch to version 2, offers created with the old version will become invalid and have to be canceled.
    // For the switch to version 3, offers created with the old version can be migrated to version 3 just by opening
    // the Bisq app.
    // VERSION = 0.5.0 -> TRADE_PROTOCOL_VERSION = 1
    // Version 1.2.2 -> TRADE_PROTOCOL_VERSION = 2
    // Version 1.5.0 -> TRADE_PROTOCOL_VERSION = 3
    // Version 1.7.0 -> TRADE_PROTOCOL_VERSION = 4
    public static final int TRADE_PROTOCOL_VERSION = 4;
    private static int p2pMessageVersion;

    public static final String BSQ_TX_VERSION = ""1"";

    public static int getP2PMessageVersion() {
        return p2pMessageVersion;
    }

    // The version for the crypto network (BTC_Mainnet = 0, BTC_TestNet = 1, BTC_Regtest = 2, ...)
    private static int BASE_CURRENCY_NETWORK;

    public static void setBaseCryptoNetworkId(int baseCryptoNetworkId) {
        BASE_CURRENCY_NETWORK = baseCryptoNetworkId;

        // CRYPTO_NETWORK_ID is ordinal of enum. We use for changes at NETWORK_PROTOCOL_VERSION a multiplication with 10
        // to not mix up networks:
        p2pMessageVersion = BASE_CURRENCY_NETWORK + 10 * P2P_NETWORK_VERSION;
    }

    public static int getBaseCurrencyNetwork() {
        return BASE_CURRENCY_NETWORK;
    }

    public static void printVersion() {
        log.info(""Version{"" +
                ""VERSION="" + VERSION +
                "", P2P_NETWORK_VERSION="" + P2P_NETWORK_VERSION +
                "", LOCAL_DB_VERSION="" + LOCAL_DB_VERSION +
                "", TRADE_PROTOCOL_VERSION="" + TRADE_PROTOCOL_VERSION +
                "", BASE_CURRENCY_NETWORK="" + BASE_CURRENCY_NETWORK +
                "", getP2PNetworkId()="" + getP2PMessageVersion() +
                '}');
    }

    public static final byte COMPENSATION_REQUEST = (byte) 0x01;
    public static final byte REIMBURSEMENT_REQUEST = (byte) 0x01;
    public static final byte PROPOSAL = (byte) 0x01;
    public static final byte BLIND_VOTE = (byte) 0x01;
    public static final byte VOTE_REVEAL = (byte) 0x01;
    public static final byte LOCKUP = (byte) 0x01;
    public static final byte ASSET_LISTING_FEE = (byte) 0x01;
    public static final byte PROOF_OF_BURN = (byte) 0x01;
}",1,64 2000 777 587 2001 123 330 330 330 330 777 809 657 2002 2003 61 362 59 306 777 809 657 2004 60 2002 62 2005 61 2006 46 2007 40 362 44 362 44 362 44 362 44 362 44 362 44 362 44 362 44 362 44 362 44 362 41 59 777 809 704 2008 40 2002 2009 41 123 792 2010 40 2009 44 1500 41 59 125 777 809 704 2011 40 2002 2009 41 123 792 2012 40 2009 44 1501 41 59 125 777 809 704 2013 40 2002 2009 41 123 792 2014 40 2009 44 1502 41 59 125 777 809 570 2015 40 2002 2016 41 123 792 2015 40 2016 44 2003 41 59 125 777 809 570 2015 40 2002 2016 44 2002 2017 41 123 688 40 2016 46 2018 40 2017 41 41 792 2019 59 630 688 40 2008 40 2016 41 62 2008 40 2017 41 41 792 2020 59 630 688 40 2008 40 2016 41 60 2008 40 2017 41 41 792 2019 59 630 688 40 2011 40 2016 41 62 2011 40 2017 41 41 792 2020 59 630 688 40 2011 40 2016 41 60 2011 40 2017 41 41 792 2019 59 630 688 40 2013 40 2016 41 62 2013 40 2017 41 41 792 2020 59 630 688 40 2013 40 2016 41 60 2013 40 2017 41 41 792 2019 59 630 792 2019 59 125 773 809 704 2021 40 2002 2009 44 704 2022 41 123 657 2002 91 93 2023 61 2009 46 2023 40 362 41 59 2024 40 2023 46 2025 323 1502 44 362 43 2009 41 59 792 2026 46 2027 40 2023 91 2022 93 41 59 125 330 330 330 330 777 809 657 704 2028 61 1501 59 330 330 777 809 657 704 2029 61 1501 59 330 330 330 330 330 330 330 330 330 777 809 657 704 2030 61 1502 59 773 809 704 2031 59 777 809 657 2002 2032 61 362 59 777 809 704 2033 40 41 123 792 2031 59 125 330 773 809 704 2034 59 777 809 865 2035 40 704 2036 41 123 2034 61 2036 59 330 330 2031 61 2034 43 1502 42 2028 59 125 777 809 704 2037 40 41 123 792 2034 59 125 777 809 865 2038 40 41 123 2039 46 2040 40 362 43 362 43 2003 43 362 43 2028 43 362 43 2029 43 362 43 2030 43 362 43 2034 43 362 43 2033 40 41 43 314 41 59 125 777 809 657 574 2041 61 40 574 41 1501 59 777 809 657 574 2042 61 40 574 41 1501 59 777 809 657 574 2043 61 40 574 41 1501 59 777 809 657 574 2044 61 40 574 41 1501 59 777 809 657 574 2045 61 40 574 41 1501 59 777 809 657 574 2046 61 40 574 41 1501 59 777 809 657 574 2047 61 40 574 41 1501 59 777 809 657 574 2048 61 40 574 41 1501 59 125 ,"{'AvgLine': 5, 'CountLine': 120, 'CountStmt': 54, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 28, 'MaxEssential': 8, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 75, 'CountStmtDecl': 28, 'MaxCyclomatic': 8, 'SumCyclomatic': 17, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 18, 'CountSemicolon': 36, 'CountDeclMethod': 10, 'CountLineCodeExe': 50, 'CountLineComment': 27, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 30, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.36', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 10, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 9, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 75, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 16, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 70}"
2982,Java,"@Slf4j
@AllArgsConstructor
@Singleton
public class User implements PersistedDataHost {
    private final PersistenceManager<UserPayload> persistenceManager;
    private final KeyRing keyRing;

    private ObservableSet<PaymentAccount> paymentAccountsAsObservable;
    private ObjectProperty<PaymentAccount> currentPaymentAccountProperty;

    private UserPayload userPayload = new UserPayload();
    private boolean isPaymentAccountImport = false;

    @Inject
    public User(PersistenceManager<UserPayload> persistenceManager, KeyRing keyRing) {
        this.persistenceManager = persistenceManager;
        this.keyRing = keyRing;
    }

    // for unit tests
    public User() {
        persistenceManager = null;
        keyRing = null;
    }

    @Override
    public void readPersisted(Runnable completeHandler) {
        checkNotNull(persistenceManager).readPersisted(""UserPayload"",
                persisted -> {
                    userPayload = persisted;
                    init();
                    completeHandler.run();
                },
                () -> {
                    init();
                    completeHandler.run();
                });
    }

    private void init() {
        checkNotNull(persistenceManager).initialize(userPayload, PersistenceManager.Source.PRIVATE);

        checkNotNull(userPayload.getPaymentAccounts(), ""userPayload.getPaymentAccounts() must not be null"");
        checkNotNull(userPayload.getAcceptedLanguageLocaleCodes(), ""userPayload.getAcceptedLanguageLocaleCodes() must not be null"");
        paymentAccountsAsObservable = FXCollections.observableSet(userPayload.getPaymentAccounts());
        currentPaymentAccountProperty = new SimpleObjectProperty<>(userPayload.getCurrentPaymentAccount());
        userPayload.setAccountId(String.valueOf(Math.abs(checkNotNull(keyRing).getPubKeyRing().hashCode())));

        // language setup
        if (!userPayload.getAcceptedLanguageLocaleCodes().contains(LanguageUtil.getDefaultLanguageLocaleAsCode()))
            userPayload.getAcceptedLanguageLocaleCodes().add(LanguageUtil.getDefaultLanguageLocaleAsCode());
        String english = LanguageUtil.getEnglishLanguageLocaleCode();
        if (!userPayload.getAcceptedLanguageLocaleCodes().contains(english))
            userPayload.getAcceptedLanguageLocaleCodes().add(english);

        paymentAccountsAsObservable.addListener((SetChangeListener<PaymentAccount>) change -> {
            userPayload.setPaymentAccounts(new HashSet<>(paymentAccountsAsObservable));
            requestPersistence();
        });
        currentPaymentAccountProperty.addListener((ov) -> {
            userPayload.setCurrentPaymentAccount(currentPaymentAccountProperty.get());
            requestPersistence();
        });

        // We create a default placeholder account for BSQ swaps. The account has not content, it is just used
        // so that the BsqSwap use case fits into the current domain
        addBsqSwapAccount();

        requestPersistence();
    }

    private void addBsqSwapAccount() {
        checkNotNull(userPayload.getPaymentAccounts(), ""userPayload.getPaymentAccounts() must not be null"");
        if (userPayload.getPaymentAccounts().stream()
                .anyMatch(paymentAccount -> paymentAccount instanceof BsqSwapAccount))
            return;

        var account = new BsqSwapAccount();
        account.init();
        account.setAccountName(Res.get(""BSQ_SWAP""));
        account.setSingleTradeCurrency(new CryptoCurrency(""BSQ"", ""BSQ""));
        addPaymentAccount(account);
    }

    public void requestPersistence() {
        if (persistenceManager != null)
            persistenceManager.requestPersistence();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Nullable
    public Arbitrator getAcceptedArbitratorByAddress(NodeAddress nodeAddress) {
        final List<Arbitrator> acceptedArbitrators = userPayload.getAcceptedArbitrators();
        if (acceptedArbitrators != null) {
            Optional<Arbitrator> arbitratorOptional = acceptedArbitrators.stream()
                    .filter(e -> e.getNodeAddress().equals(nodeAddress))
                    .findFirst();
            return arbitratorOptional.orElse(null);
        } else {
            return null;
        }
    }

    @Nullable
    public Mediator getAcceptedMediatorByAddress(NodeAddress nodeAddress) {
        final List<Mediator> acceptedMediators = userPayload.getAcceptedMediators();
        if (acceptedMediators != null) {
            Optional<Mediator> mediatorOptionalOptional = acceptedMediators.stream()
                    .filter(e -> e.getNodeAddress().equals(nodeAddress))
                    .findFirst();
            return mediatorOptionalOptional.orElse(null);
        } else {
            return null;
        }
    }

    @Nullable
    public RefundAgent getAcceptedRefundAgentByAddress(NodeAddress nodeAddress) {
        final List<RefundAgent> acceptedRefundAgents = userPayload.getAcceptedRefundAgents();
        if (acceptedRefundAgents != null) {
            Optional<RefundAgent> refundAgentOptional = acceptedRefundAgents.stream()
                    .filter(e -> e.getNodeAddress().equals(nodeAddress))
                    .findFirst();
            return refundAgentOptional.orElse(null);
        } else {
            return null;
        }
    }

    @Nullable
    public PaymentAccount findFirstPaymentAccountWithCurrency(TradeCurrency tradeCurrency) {
        if (userPayload.getPaymentAccounts() != null) {
            for (PaymentAccount paymentAccount : userPayload.getPaymentAccounts()) {
                for (TradeCurrency currency : paymentAccount.getTradeCurrencies()) {
                    if (currency.equals(tradeCurrency))
                        return paymentAccount;
                }
            }
            return null;
        } else {
            return null;
        }
    }

    public boolean hasPaymentAccountForCurrency(TradeCurrency tradeCurrency) {
        return findFirstPaymentAccountWithCurrency(tradeCurrency) != null;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Collection operations
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void addPaymentAccountIfNotExists(PaymentAccount paymentAccount) {
        if (!paymentAccountExists(paymentAccount)) {
            addPaymentAccount(paymentAccount);
            requestPersistence();
        }
    }

    public void addPaymentAccount(PaymentAccount paymentAccount) {
        paymentAccount.onAddToUser();

        boolean changed = paymentAccountsAsObservable.add(paymentAccount);
        setCurrentPaymentAccount(paymentAccount);
        if (changed)
            requestPersistence();
    }

    public void addImportedPaymentAccounts(Collection<PaymentAccount> paymentAccounts) {
        isPaymentAccountImport = true;

        boolean changed = paymentAccountsAsObservable.addAll(paymentAccounts);
        paymentAccounts.stream().findFirst().ifPresent(this::setCurrentPaymentAccount);
        if (changed)
            requestPersistence();

        isPaymentAccountImport = false;
    }

    public void removePaymentAccount(PaymentAccount paymentAccount) {
        boolean changed = paymentAccountsAsObservable.remove(paymentAccount);
        if (changed)
            requestPersistence();
    }

    public boolean addAcceptedArbitrator(Arbitrator arbitrator) {
        List<Arbitrator> arbitrators = userPayload.getAcceptedArbitrators();
        if (arbitrators != null && !arbitrators.contains(arbitrator) && !isMyOwnRegisteredArbitrator(arbitrator)) {
            arbitrators.add(arbitrator);
            requestPersistence();
            return true;
        } else {
            return false;
        }
    }

    public void removeAcceptedArbitrator(Arbitrator arbitrator) {
        if (userPayload.getAcceptedArbitrators() != null) {
            boolean changed = userPayload.getAcceptedArbitrators().remove(arbitrator);
            if (changed)
                requestPersistence();
        }
    }

    public void clearAcceptedArbitrators() {
        if (userPayload.getAcceptedArbitrators() != null) {
            userPayload.getAcceptedArbitrators().clear();
            requestPersistence();
        }
    }

    public boolean addAcceptedMediator(Mediator mediator) {
        List<Mediator> mediators = userPayload.getAcceptedMediators();
        if (mediators != null && !mediators.contains(mediator) && !isMyOwnRegisteredMediator(mediator)) {
            mediators.add(mediator);
            requestPersistence();
            return true;
        } else {
            return false;
        }
    }

    public void removeAcceptedMediator(Mediator mediator) {
        if (userPayload.getAcceptedMediators() != null) {
            boolean changed = userPayload.getAcceptedMediators().remove(mediator);
            if (changed)
                requestPersistence();
        }
    }

    public void clearAcceptedMediators() {
        if (userPayload.getAcceptedMediators() != null) {
            userPayload.getAcceptedMediators().clear();
            requestPersistence();
        }
    }

    public boolean addAcceptedRefundAgent(RefundAgent refundAgent) {
        List<RefundAgent> refundAgents = userPayload.getAcceptedRefundAgents();
        if (refundAgents != null && !refundAgents.contains(refundAgent) && !isMyOwnRegisteredRefundAgent(refundAgent)) {
            refundAgents.add(refundAgent);
            requestPersistence();
            return true;
        } else {
            return false;
        }
    }

    public void removeAcceptedRefundAgent(RefundAgent refundAgent) {
        if (userPayload.getAcceptedRefundAgents() != null) {
            boolean changed = userPayload.getAcceptedRefundAgents().remove(refundAgent);
            if (changed)
                requestPersistence();
        }
    }

    public void clearAcceptedRefundAgents() {
        if (userPayload.getAcceptedRefundAgents() != null) {
            userPayload.getAcceptedRefundAgents().clear();
            requestPersistence();
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Setters
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void setCurrentPaymentAccount(PaymentAccount paymentAccount) {
        currentPaymentAccountProperty.set(paymentAccount);
        requestPersistence();
    }

    public void setRegisteredArbitrator(@Nullable Arbitrator arbitrator) {
        userPayload.setRegisteredArbitrator(arbitrator);
        requestPersistence();
    }

    public void setRegisteredMediator(@Nullable Mediator mediator) {
        userPayload.setRegisteredMediator(mediator);
        requestPersistence();
    }

    public void setRegisteredRefundAgent(@Nullable RefundAgent refundAgent) {
        userPayload.setRegisteredRefundAgent(refundAgent);
        requestPersistence();
    }

    public void setDevelopersFilter(@Nullable Filter developersFilter) {
        userPayload.setDevelopersFilter(developersFilter);
        requestPersistence();
    }

    public void setDevelopersAlert(@Nullable Alert developersAlert) {
        userPayload.setDevelopersAlert(developersAlert);
        requestPersistence();
    }

    public void setDisplayedAlert(@Nullable Alert displayedAlert) {
        userPayload.setDisplayedAlert(displayedAlert);
        requestPersistence();
    }

    public void addMarketAlertFilter(MarketAlertFilter filter) {
        getMarketAlertFilters().add(filter);
        requestPersistence();
    }

    public void removeMarketAlertFilter(MarketAlertFilter filter) {
        getMarketAlertFilters().remove(filter);
        requestPersistence();
    }

    public void setPriceAlertFilter(PriceAlertFilter filter) {
        userPayload.setPriceAlertFilter(filter);
        requestPersistence();
    }

    public void removePriceAlertFilter() {
        userPayload.setPriceAlertFilter(null);
        requestPersistence();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Nullable
    public PaymentAccount getPaymentAccount(String paymentAccountId) {
        Optional<PaymentAccount> optional = userPayload.getPaymentAccounts() != null ?
                userPayload.getPaymentAccounts().stream().filter(e -> e.getId().equals(paymentAccountId)).findAny() :
                Optional.empty();
        return optional.orElse(null);
    }

    public String getAccountId() {
        return userPayload.getAccountId();
    }

    public ReadOnlyObjectProperty<PaymentAccount> currentPaymentAccountProperty() {
        return currentPaymentAccountProperty;
    }

    @Nullable
    public Set<PaymentAccount> getPaymentAccounts() {
        return userPayload.getPaymentAccounts();
    }

    public ObservableSet<PaymentAccount> getPaymentAccountsAsObservable() {
        return paymentAccountsAsObservable;
    }

    /**
     * If this user is an arbitrator it returns the registered arbitrator.
     *
     * @return The arbitrator registered for this user
     */
    @Nullable
    public Arbitrator getRegisteredArbitrator() {
        return userPayload.getRegisteredArbitrator();
    }

    @Nullable
    public Mediator getRegisteredMediator() {
        return userPayload.getRegisteredMediator();
    }

    @Nullable
    public RefundAgent getRegisteredRefundAgent() {
        return userPayload.getRegisteredRefundAgent();
    }

    @Nullable
    public List<Arbitrator> getAcceptedArbitrators() {
        return userPayload.getAcceptedArbitrators();
    }

    @Nullable
    public List<Mediator> getAcceptedMediators() {
        return userPayload.getAcceptedMediators();
    }

    @Nullable
    public List<RefundAgent> getAcceptedRefundAgents() {
        return userPayload.getAcceptedRefundAgents();
    }

    @Nullable
    public List<NodeAddress> getAcceptedArbitratorAddresses() {
        return userPayload.getAcceptedArbitrators() != null ?
                userPayload.getAcceptedArbitrators().stream().map(Arbitrator::getNodeAddress).collect(Collectors.toList()) :
                null;
    }

    @Nullable
    public List<NodeAddress> getAcceptedMediatorAddresses() {
        return userPayload.getAcceptedMediators() != null ?
                userPayload.getAcceptedMediators().stream().map(Mediator::getNodeAddress).collect(Collectors.toList()) :
                null;
    }

    @Nullable
    public List<NodeAddress> getAcceptedRefundAgentAddresses() {
        return userPayload.getAcceptedRefundAgents() != null ?
                userPayload.getAcceptedRefundAgents().stream().map(RefundAgent::getNodeAddress).collect(Collectors.toList()) :
                null;
    }

    public boolean hasAcceptedArbitrators() {
        return getAcceptedArbitrators() != null && !getAcceptedArbitrators().isEmpty();
    }

    public boolean hasAcceptedMediators() {
        return getAcceptedMediators() != null && !getAcceptedMediators().isEmpty();
    }

    public boolean hasAcceptedRefundAgents() {
        return getAcceptedRefundAgents() != null && !getAcceptedRefundAgents().isEmpty();
    }

    @Nullable
    public Filter getDevelopersFilter() {
        return userPayload.getDevelopersFilter();
    }

    @Nullable
    public Alert getDevelopersAlert() {
        return userPayload.getDevelopersAlert();
    }

    @Nullable
    public Alert getDisplayedAlert() {
        return userPayload.getDisplayedAlert();
    }

    public boolean isMyOwnRegisteredArbitrator(Arbitrator arbitrator) {
        return arbitrator.equals(userPayload.getRegisteredArbitrator());
    }

    public boolean isMyOwnRegisteredMediator(Mediator mediator) {
        return mediator.equals(userPayload.getRegisteredMediator());
    }

    public boolean isMyOwnRegisteredRefundAgent(RefundAgent refundAgent) {
        return refundAgent.equals(userPayload.getRegisteredRefundAgent());
    }

    public List<MarketAlertFilter> getMarketAlertFilters() {
        return userPayload.getMarketAlertFilters();
    }

    @Nullable
    public PriceAlertFilter getPriceAlertFilter() {
        return userPayload.getPriceAlertFilter();
    }

    public boolean isPaymentAccountImport() {
        return isPaymentAccountImport;
    }

    private boolean paymentAccountExists(PaymentAccount paymentAccount) {
        return getPaymentAccountsAsObservable().stream().anyMatch(e -> e.equals(paymentAccount));
    }

    public Cookie getCookie() {
        return userPayload.getCookie();
    }
}",1,64 2000 64 2001 64 2002 777 587 2003 693 2004 123 773 657 2005 60 2006 62 2007 59 773 657 2008 2009 59 773 2010 60 2011 62 2012 59 773 2013 60 2011 62 2014 59 773 2006 2015 61 744 2006 40 41 59 773 570 2016 61 2017 59 64 2018 777 2003 40 2005 60 2006 62 2007 44 2008 2009 41 123 823 46 2007 61 2007 59 823 46 2009 61 2009 59 125 330 777 2003 40 41 123 2007 61 2019 59 2009 61 2019 59 125 64 2020 777 865 2021 40 2022 2023 41 123 2024 40 2007 41 46 2021 40 362 44 2025 45 62 123 2015 61 2025 59 2026 40 41 59 2023 46 2027 40 41 59 125 44 40 41 45 62 123 2028 40 41 59 2023 46 2029 40 41 59 125 41 59 125 773 865 2030 40 41 123 2031 40 2007 41 46 2032 40 2015 44 2005 46 2033 46 2034 41 59 2031 40 2015 46 2035 40 41 44 362 41 59 2031 40 2015 46 2036 40 41 44 362 41 59 2012 61 2037 46 2038 40 2015 46 2035 40 41 41 59 2014 61 744 2039 60 62 40 2015 46 2040 40 41 41 59 2015 46 2041 40 2042 46 2043 40 2044 46 2045 40 2031 40 2009 41 46 2046 40 41 46 2047 40 41 41 41 41 59 330 688 40 33 2015 46 2036 40 41 46 2048 40 2049 46 2050 40 41 41 41 2015 46 2036 40 41 46 2051 40 2049 46 2050 40 41 41 59 2042 2052 61 2049 46 2053 40 41 59 688 40 33 2015 46 2036 40 41 46 2048 40 2052 41 41 2015 46 2036 40 41 46 2051 40 2052 41 59 2012 46 2054 40 40 2055 60 2011 62 41 2056 45 62 123 2015 46 2057 40 744 2058 60 62 40 2012 41 41 59 2059 40 41 59 125 41 59 2014 46 2054 40 40 2060 41 45 62 123 2015 46 2061 40 2014 46 2062 40 41 41 59 2063 40 41 59 125 41 59 330 330 2064 40 41 59 2065 40 41 59 125 773 865 2066 40 41 123 2067 40 2015 46 2068 40 41 44 362 41 59 688 40 2015 46 2068 40 41 46 2069 40 41 46 2070 40 2071 45 62 2071 702 2072 41 41 792 59 2073 2074 61 744 2072 40 41 59 2074 46 2030 40 41 59 2074 46 2075 40 2076 46 2077 40 362 41 41 59 2074 46 2078 40 744 2079 40 362 44 362 41 41 59 2080 40 2074 41 59 125 777 865 2081 40 41 123 688 40 2007 340 2082 41 2007 46 2081 40 41 59 125 331 330 331 64 2083 777 2084 2085 40 2086 2087 41 123 657 2088 60 2084 62 2089 61 2015 46 2090 40 41 59 688 40 2089 340 2091 41 123 2092 60 2084 62 2093 61 2089 46 2094 40 41 46 2095 40 2096 45 62 2096 46 2097 40 41 46 2098 40 2087 41 41 46 2099 40 41 59 792 2093 46 2100 40 2091 41 59 125 630 123 792 2091 59 125 125 64 2083 777 2101 2102 40 2086 2087 41 123 657 2103 60 2101 62 2104 61 2015 46 2105 40 41 59 688 40 2104 340 2106 41 123 2107 60 2101 62 2108 61 2104 46 2109 40 41 46 2110 40 2111 45 62 2111 46 2112 40 41 46 2113 40 2087 41 41 46 2114 40 41 59 792 2108 46 2115 40 2106 41 59 125 630 123 792 2106 59 125 125 64 2083 777 2116 2117 40 2086 2087 41 123 657 2118 60 2116 62 2119 61 2015 46 2120 40 41 59 688 40 2119 340 2121 41 123 2122 60 2116 62 2123 61 2119 46 2124 40 41 46 2125 40 2126 45 62 2126 46 2127 40 41 46 2128 40 2087 41 41 46 2129 40 41 59 792 2123 46 2130 40 2121 41 59 125 630 123 792 2121 59 125 125 64 2083 777 2011 2131 40 2132 2133 41 123 688 40 2015 46 2134 40 41 340 2135 41 123 664 40 2011 2136 58 2015 46 2134 40 41 41 123 664 40 2132 2137 58 2136 46 2138 40 41 41 123 688 40 2137 46 2139 40 2133 41 41 792 2136 59 125 125 792 2135 59 125 630 123 792 2135 59 125 125 777 570 2140 40 2132 2133 41 123 792 2131 40 2133 41 340 2141 59 125 331 330 331 777 865 2142 40 2011 2143 41 123 688 40 33 2144 40 2143 41 41 123 2145 40 2143 41 59 2081 40 41 59 125 125 777 865 2146 40 2011 2143 41 123 2143 46 2147 40 41 59 570 2148 61 2012 46 2149 40 2143 41 59 2150 40 2143 41 59 688 40 2148 41 2081 40 41 59 125 777 865 2151 40 2152 60 2011 62 2153 41 123 2016 61 2154 59 570 2155 61 2012 46 2156 40 2153 41 59 2153 46 2157 40 41 46 2158 40 41 46 2159 40 823 58 58 2160 41 59 688 40 2155 41 2081 40 41 59 2016 61 2017 59 125 777 865 2161 40 2011 2143 41 123 570 2162 61 2012 46 2163 40 2143 41 59 688 40 2162 41 2081 40 41 59 125 777 570 2164 40 2084 2165 41 123 2166 60 2084 62 2167 61 2015 46 2168 40 41 59 688 40 2167 340 2169 307 33 2167 46 2170 40 2165 41 307 33 2171 40 2165 41 41 123 2167 46 2172 40 2165 41 59 2081 40 41 59 792 2173 59 125 630 123 792 2017 59 125 125 777 865 2174 40 2084 2165 41 123 688 40 2015 46 2175 40 41 340 2176 41 123 570 2177 61 2015 46 2175 40 41 46 2178 40 2165 41 59 688 40 2177 41 2081 40 41 59 125 125 777 865 2179 40 41 123 688 40 2015 46 2180 40 41 340 2181 41 123 2015 46 2180 40 41 46 2182 40 41 59 2081 40 41 59 125 125 777 570 2183 40 2101 2184 41 123 2185 60 2101 62 2186 61 2015 46 2187 40 41 59 688 40 2186 340 2188 307 33 2186 46 2189 40 2184 41 307 33 2190 40 2184 41 41 123 2186 46 2191 40 2184 41 59 2081 40 41 59 792 2192 59 125 630 123 792 2017 59 125 125 777 865 2193 40 2101 2184 41 123 688 40 2015 46 2194 40 41 340 2195 41 123 570 2196 61 2015 46 2194 40 41 46 2197 40 2184 41 59 688 40 2196 41 2081 40 41 59 125 125 777 865 2198 40 41 123 688 40 2015 46 2199 40 41 340 2200 41 123 2015 46 2199 40 41 46 2201 40 41 59 2081 40 41 59 125 125 777 570 2202 40 2116 2203 41 123 2204 60 2116 62 2205 61 2015 46 2206 40 41 59 688 40 2205 340 2207 307 33 2205 46 2208 40 2203 41 307 33 2209 40 2203 41 41 123 2205 46 2210 40 2203 41 59 2081 40 41 59 792 2211 59 125 630 123 792 2017 59 125 125 777 865 2212 40 2116 2203 41 123 688 40 2015 46 2213 40 41 340 2214 41 123 570 2215 61 2015 46 2213 40 41 46 2216 40 2203 41 59 688 40 2215 41 2081 40 41 59 125 125 777 865 2217 40 41 123 688 40 2015 46 2218 40 41 340 2219 41 123 2015 46 2218 40 41 46 2220 40 41 59 2081 40 41 59 125 125 331 330 331 777 865 2221 40 2011 2143 41 123 2014 46 2222 40 2143 41 59 2081 40 41 59 125 777 865 2223 40 64 2083 2084 2165 41 123 2015 46 2223 40 2165 41 59 2081 40 41 59 125 777 865 2224 40 64 2083 2101 2184 41 123 2015 46 2224 40 2184 41 59 2081 40 41 59 125 777 865 2225 40 64 2083 2116 2203 41 123 2015 46 2225 40 2203 41 59 2081 40 41 59 125 777 865 2226 40 64 2083 2227 2228 41 123 2015 46 2226 40 2228 41 59 2081 40 41 59 125 777 865 2229 40 64 2083 2230 2231 41 123 2015 46 2229 40 2231 41 59 2081 40 41 59 125 777 865 2232 40 64 2083 2230 2233 41 123 2015 46 2232 40 2233 41 59 2081 40 41 59 125 777 865 2234 40 2235 2236 41 123 2237 40 41 46 2238 40 2236 41 59 2081 40 41 59 125 777 865 2239 40 2235 2236 41 123 2240 40 41 46 2241 40 2236 41 59 2081 40 41 59 125 777 865 2242 40 2243 2236 41 123 2015 46 2242 40 2236 41 59 2081 40 41 59 125 777 865 2244 40 41 123 2015 46 2242 40 2245 41 59 2081 40 41 59 125 331 330 331 64 2083 777 2011 2246 40 2247 2248 41 123 2249 60 2011 62 2250 61 2015 46 2251 40 41 340 2252 63 2015 46 2251 40 41 46 2253 40 41 46 2236 40 2254 45 62 2254 46 2255 40 41 46 2256 40 2248 41 41 46 2257 40 41 58 2249 46 2258 40 41 59 792 2250 46 2259 40 2252 41 59 125 777 2247 2260 40 41 123 792 2015 46 2260 40 41 59 125 777 2261 60 2011 62 2014 40 41 123 792 2014 59 125 64 2083 777 2262 60 2011 62 2263 40 41 123 792 2015 46 2263 40 41 59 125 777 2010 60 2011 62 2264 40 41 123 792 2012 59 125 306 64 2083 777 2084 2265 40 41 123 792 2015 46 2265 40 41 59 125 64 2083 777 2101 2266 40 41 123 792 2015 46 2266 40 41 59 125 64 2083 777 2116 2267 40 41 123 792 2015 46 2267 40 41 59 125 64 2083 777 2268 60 2084 62 2269 40 41 123 792 2015 46 2269 40 41 59 125 64 2083 777 2268 60 2101 62 2270 40 41 123 792 2015 46 2270 40 41 59 125 64 2083 777 2268 60 2116 62 2271 40 41 123 792 2015 46 2271 40 41 59 125 64 2083 777 2268 60 2086 62 2272 40 41 123 792 2015 46 2269 40 41 340 2273 63 2015 46 2269 40 41 46 2274 40 41 46 2275 40 2084 58 58 2276 41 46 2277 40 2278 46 2279 40 41 41 58 2273 59 125 64 2083 777 2268 60 2086 62 2280 40 41 123 792 2015 46 2270 40 41 340 2281 63 2015 46 2270 40 41 46 2282 40 41 46 2283 40 2101 58 58 2284 41 46 2285 40 2286 46 2287 40 41 41 58 2281 59 125 64 2083 777 2268 60 2086 62 2288 40 41 123 792 2015 46 2271 40 41 340 2289 63 2015 46 2271 40 41 46 2290 40 41 46 2291 40 2116 58 58 2292 41 46 2293 40 2294 46 2295 40 41 41 58 2289 59 125 777 570 2296 40 41 123 792 2269 40 41 340 2297 307 33 2269 40 41 46 2298 40 41 59 125 777 570 2299 40 41 123 792 2270 40 41 340 2300 307 33 2270 40 41 46 2301 40 41 59 125 777 570 2302 40 41 123 792 2271 40 41 340 2303 307 33 2271 40 41 46 2304 40 41 59 125 64 2083 777 2227 2305 40 41 123 792 2015 46 2305 40 41 59 125 64 2083 777 2230 2306 40 41 123 792 2015 46 2306 40 41 59 125 64 2083 777 2230 2307 40 41 123 792 2015 46 2307 40 41 59 125 777 570 2308 40 2084 2165 41 123 792 2165 46 2309 40 2015 46 2265 40 41 41 59 125 777 570 2310 40 2101 2184 41 123 792 2184 46 2311 40 2015 46 2266 40 41 41 59 125 777 570 2312 40 2116 2203 41 123 792 2203 46 2313 40 2015 46 2267 40 41 41 59 125 777 2268 60 2235 62 2314 40 41 123 792 2015 46 2314 40 41 59 125 64 2083 777 2243 2315 40 41 123 792 2015 46 2315 40 41 59 125 777 570 2016 40 41 123 792 2016 59 125 773 570 2316 40 2011 2143 41 123 792 2264 40 41 46 2317 40 41 46 2318 40 2319 45 62 2319 46 2320 40 2143 41 41 59 125 777 2321 2322 40 41 123 792 2015 46 2322 40 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 477, 'CountStmt': 241, 'MaxNesting': 4, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 170, 'MaxEssential': 5, 'SumEssential': 77, 'AvgCyclomatic': 1, 'CountLineCode': 371, 'CountStmtDecl': 90, 'MaxCyclomatic': 5, 'SumCyclomatic': 104, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 81, 'CountSemicolon': 148, 'CountDeclMethod': 63, 'CountLineCodeExe': 199, 'CountLineComment': 25, 'CountClassCoupled': 39, 'CountClassDerived': 0, 'CountLineCodeDecl': 116, 'CountDeclMethodAll': 63, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.07', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 113, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 60, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 104, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 63, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 39, 'CountDeclInstanceVariable': 6, 'PercentLackOfCohesionModified': 73}"
3684,Java,"@Slf4j
@Singleton
public class OfferFilterService {
    private final User user;
    private final Preferences preferences;
    private final FilterManager filterManager;
    private final AccountAgeWitnessService accountAgeWitnessService;
    private final Map<String, Boolean> insufficientCounterpartyTradeLimitCache = new HashMap<>();
    private final Map<String, Boolean> myInsufficientTradeLimitCache = new HashMap<>();

    @Inject
    public OfferFilterService(User user,
                              Preferences preferences,
                              FilterManager filterManager,
                              AccountAgeWitnessService accountAgeWitnessService) {
        this.user = user;
        this.preferences = preferences;
        this.filterManager = filterManager;
        this.accountAgeWitnessService = accountAgeWitnessService;

        if (user != null) {
            // If our accounts have changed we reset our myInsufficientTradeLimitCache as it depends on account data
            user.getPaymentAccountsAsObservable().addListener((SetChangeListener<PaymentAccount>) c ->
                    myInsufficientTradeLimitCache.clear());
        }
    }

    public enum Result {
        VALID(true),
        API_DISABLED,
        HAS_NO_PAYMENT_ACCOUNT_VALID_FOR_OFFER,
        HAS_NOT_SAME_PROTOCOL_VERSION,
        IS_IGNORED,
        IS_OFFER_BANNED,
        IS_CURRENCY_BANNED,
        IS_PAYMENT_METHOD_BANNED,
        IS_NODE_ADDRESS_BANNED,
        REQUIRE_UPDATE_TO_NEW_VERSION,
        IS_INSUFFICIENT_COUNTERPARTY_TRADE_LIMIT,
        IS_MY_INSUFFICIENT_TRADE_LIMIT,
        HIDE_BSQ_SWAPS_DUE_DAO_DEACTIVATED;

        @Getter
        private final boolean isValid;

        Result(boolean isValid) {
            this.isValid = isValid;
        }

        Result() {
            this(false);
        }
    }

    public Result canTakeOffer(Offer offer, boolean isTakerApiUser) {
        if (isTakerApiUser && filterManager.getFilter() != null && filterManager.getFilter().isDisableApi()) {
            return Result.API_DISABLED;
        }
        if (!isAnyPaymentAccountValidForOffer(offer)) {
            return Result.HAS_NO_PAYMENT_ACCOUNT_VALID_FOR_OFFER;
        }
        if (!hasSameProtocolVersion(offer)) {
            return Result.HAS_NOT_SAME_PROTOCOL_VERSION;
        }
        if (isIgnored(offer)) {
            return Result.IS_IGNORED;
        }
        if (isOfferBanned(offer)) {
            return Result.IS_OFFER_BANNED;
        }
        if (isCurrencyBanned(offer)) {
            return Result.IS_CURRENCY_BANNED;
        }
        if (isPaymentMethodBanned(offer)) {
            return Result.IS_PAYMENT_METHOD_BANNED;
        }
        if (isNodeAddressBanned(offer)) {
            return Result.IS_NODE_ADDRESS_BANNED;
        }
        if (requireUpdateToNewVersion()) {
            return Result.REQUIRE_UPDATE_TO_NEW_VERSION;
        }
        if (isInsufficientCounterpartyTradeLimit(offer)) {
            return Result.IS_INSUFFICIENT_COUNTERPARTY_TRADE_LIMIT;
        }
        if (isMyInsufficientTradeLimit(offer)) {
            return Result.IS_MY_INSUFFICIENT_TRADE_LIMIT;
        }
        if (!DevEnv.isDaoActivated() && offer.isBsqSwapOffer()) {
            return Result.HIDE_BSQ_SWAPS_DUE_DAO_DEACTIVATED;
        }

        return Result.VALID;
    }

    public boolean isAnyPaymentAccountValidForOffer(Offer offer) {
        return user.getPaymentAccounts() != null &&
                PaymentAccountUtil.isAnyPaymentAccountValidForOffer(offer, user.getPaymentAccounts());
    }

    public boolean hasSameProtocolVersion(Offer offer) {
        return offer.getProtocolVersion() == Version.TRADE_PROTOCOL_VERSION;
    }

    public boolean isIgnored(Offer offer) {
        return preferences.getIgnoreTradersList().stream()
                .anyMatch(i -> i.equals(offer.getMakerNodeAddress().getFullAddress()));
    }

    public boolean isOfferBanned(Offer offer) {
        return filterManager.isOfferIdBanned(offer.getId());
    }

    public boolean isCurrencyBanned(Offer offer) {
        return filterManager.isCurrencyBanned(offer.getCurrencyCode());
    }

    public boolean isPaymentMethodBanned(Offer offer) {
        return filterManager.isPaymentMethodBanned(offer.getPaymentMethod());
    }

    public boolean isNodeAddressBanned(Offer offer) {
        return filterManager.isNodeAddressBanned(offer.getMakerNodeAddress());
    }

    public boolean requireUpdateToNewVersion() {
        return filterManager.requireUpdateToNewVersionForTrading();
    }

    // This call is a bit expensive so we cache results
    public boolean isInsufficientCounterpartyTradeLimit(Offer offer) {
        String offerId = offer.getId();
        if (insufficientCounterpartyTradeLimitCache.containsKey(offerId)) {
            return insufficientCounterpartyTradeLimitCache.get(offerId);
        }

        boolean result = CurrencyUtil.isFiatCurrency(offer.getCurrencyCode()) &&
                !accountAgeWitnessService.verifyPeersTradeAmount(offer, offer.getAmount(),
                        errorMessage -> {
                        });
        insufficientCounterpartyTradeLimitCache.put(offerId, result);
        return result;
    }

    // This call is a bit expensive so we cache results
    public boolean isMyInsufficientTradeLimit(Offer offer) {
        String offerId = offer.getId();
        if (myInsufficientTradeLimitCache.containsKey(offerId)) {
            return myInsufficientTradeLimitCache.get(offerId);
        }

        Optional<PaymentAccount> accountOptional = PaymentAccountUtil.getMostMaturePaymentAccountForOffer(offer,
                user.getPaymentAccounts(),
                accountAgeWitnessService);
        long myTradeLimit = accountOptional
                .map(paymentAccount -> accountAgeWitnessService.getMyTradeLimit(paymentAccount,
                        offer.getCurrencyCode(), offer.getMirroredDirection()))
                .orElse(0L);
        long offerMinAmount = offer.getMinAmount().value;
        log.debug(""isInsufficientTradeLimit accountOptional={}, myTradeLimit={}, offerMinAmount={}, "",
                accountOptional.isPresent() ? accountOptional.get().getAccountName() : ""null"",
                Coin.valueOf(myTradeLimit).toFriendlyString(),
                Coin.valueOf(offerMinAmount).toFriendlyString());
        boolean result = CurrencyUtil.isFiatCurrency(offer.getCurrencyCode()) &&
                accountOptional.isPresent() &&
                myTradeLimit < offerMinAmount;
        myInsufficientTradeLimitCache.put(offerId, result);
        return result;
    }
}",1,64 2000 64 2001 777 587 2002 123 773 657 2003 2004 59 773 657 2005 2006 59 773 657 2007 2008 59 773 657 2009 2010 59 773 657 2011 60 2012 44 2013 62 2014 61 744 2015 60 62 40 41 59 773 657 2011 60 2012 44 2013 62 2016 61 744 2015 60 62 40 41 59 64 2017 777 2002 40 2003 2004 44 2005 2006 44 2007 2008 44 2009 2010 41 123 823 46 2004 61 2004 59 823 46 2006 61 2006 59 823 46 2008 61 2008 59 823 46 2010 61 2010 59 688 40 2004 340 2018 41 123 330 2004 46 2019 40 41 46 2020 40 40 2021 60 2022 62 41 2023 45 62 2016 46 2024 40 41 41 59 125 125 777 640 2025 123 2026 40 2027 41 44 2028 44 2029 44 2030 44 2031 44 2032 44 2033 44 2034 44 2035 44 2036 44 2037 44 2038 44 2039 59 64 2040 773 657 570 2041 59 2025 40 570 2041 41 123 823 46 2041 61 2041 59 125 2025 40 41 123 823 40 2042 41 59 125 125 777 2025 2043 40 2044 2045 44 570 2046 41 123 688 40 2046 307 2008 46 2047 40 41 340 2048 307 2008 46 2047 40 41 46 2049 40 41 41 123 792 2025 46 2050 59 125 688 40 33 2051 40 2045 41 41 123 792 2025 46 2052 59 125 688 40 33 2053 40 2045 41 41 123 792 2025 46 2054 59 125 688 40 2055 40 2045 41 41 123 792 2025 46 2056 59 125 688 40 2057 40 2045 41 41 123 792 2025 46 2058 59 125 688 40 2059 40 2045 41 41 123 792 2025 46 2060 59 125 688 40 2061 40 2045 41 41 123 792 2025 46 2062 59 125 688 40 2063 40 2045 41 41 123 792 2025 46 2064 59 125 688 40 2065 40 41 41 123 792 2025 46 2066 59 125 688 40 2067 40 2045 41 41 123 792 2025 46 2068 59 125 688 40 2069 40 2045 41 41 123 792 2025 46 2070 59 125 688 40 33 2071 46 2072 40 41 307 2045 46 2073 40 41 41 123 792 2025 46 2074 59 125 792 2025 46 2075 59 125 777 570 2076 40 2044 2045 41 123 792 2004 46 2077 40 41 340 2078 307 2079 46 2076 40 2045 44 2004 46 2077 40 41 41 59 125 777 570 2080 40 2044 2045 41 123 792 2045 46 2081 40 41 323 2082 46 2083 59 125 777 570 2084 40 2044 2045 41 123 792 2006 46 2085 40 41 46 2086 40 41 46 2087 40 2088 45 62 2088 46 2089 40 2045 46 2090 40 41 46 2091 40 41 41 41 59 125 777 570 2092 40 2044 2045 41 123 792 2008 46 2093 40 2045 46 2094 40 41 41 59 125 777 570 2095 40 2044 2045 41 123 792 2008 46 2095 40 2045 46 2096 40 41 41 59 125 777 570 2097 40 2044 2045 41 123 792 2008 46 2097 40 2045 46 2098 40 41 41 59 125 777 570 2099 40 2044 2045 41 123 792 2008 46 2099 40 2045 46 2100 40 41 41 59 125 777 570 2101 40 41 123 792 2008 46 2102 40 41 59 125 330 777 570 2103 40 2044 2045 41 123 2012 2104 61 2045 46 2105 40 41 59 688 40 2014 46 2106 40 2104 41 41 123 792 2014 46 2107 40 2104 41 59 125 570 2108 61 2109 46 2110 40 2045 46 2111 40 41 41 307 33 2010 46 2112 40 2045 44 2045 46 2113 40 41 44 2114 45 62 123 125 41 59 2014 46 2115 40 2104 44 2108 41 59 792 2108 59 125 330 777 570 2116 40 2044 2045 41 123 2012 2117 61 2045 46 2118 40 41 59 688 40 2016 46 2119 40 2117 41 41 123 792 2016 46 2120 40 2117 41 59 125 2121 60 2122 62 2123 61 2124 46 2125 40 2045 44 2004 46 2126 40 41 44 2010 41 59 726 2127 61 2123 46 2128 40 2129 45 62 2010 46 2130 40 2129 44 2045 46 2131 40 41 44 2045 46 2132 40 41 41 41 46 2133 40 1500 41 59 726 2134 61 2045 46 2135 40 41 46 2136 59 2137 46 2138 40 362 44 2123 46 2139 40 41 63 2123 46 2140 40 41 46 2141 40 41 58 362 44 2142 46 2143 40 2127 41 46 2144 40 41 44 2142 46 2143 40 2134 41 46 2144 40 41 41 59 570 2145 61 2146 46 2147 40 2045 46 2131 40 41 41 307 2123 46 2139 40 41 307 2127 60 2134 59 2016 46 2148 40 2117 44 2145 41 59 792 2145 59 125 125 ,"{'AvgLine': 9, 'CountLine': 170, 'CountStmt': 80, 'MaxNesting': 1, 'AvgLineCode': 9, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 59, 'MaxEssential': 13, 'SumEssential': 28, 'AvgCyclomatic': 2, 'CountLineCode': 147, 'CountStmtDecl': 30, 'MaxCyclomatic': 13, 'SumCyclomatic': 32, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 20, 'CountSemicolon': 50, 'CountDeclMethod': 12, 'CountLineCodeExe': 75, 'CountLineComment': 3, 'CountClassCoupled': 20, 'CountClassDerived': 0, 'CountLineCodeDecl': 54, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 16, 'SumCyclomaticStrict': 39, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 12, 'MaxCyclomaticModified': 13, 'PercentLackOfCohesion': 76, 'SumCyclomaticModified': 32, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 12, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 20, 'CountDeclInstanceVariable': 6, 'PercentLackOfCohesionModified': 69}"
2748,Java,"@Slf4j
public abstract class WalletService {
    protected final WalletsSetup walletsSetup;
    protected final Preferences preferences;
    protected final FeeService feeService;
    protected final NetworkParameters params;
    private final BisqWalletListener walletEventListener = new BisqWalletListener();
    private final CopyOnWriteArraySet<AddressConfidenceListener> addressConfidenceListeners = new CopyOnWriteArraySet<>();
    private final CopyOnWriteArraySet<TxConfidenceListener> txConfidenceListeners = new CopyOnWriteArraySet<>();
    private final CopyOnWriteArraySet<BalanceListener> balanceListeners = new CopyOnWriteArraySet<>();
    private final WalletChangeEventListener cacheInvalidationListener;
    private final AtomicReference<Multiset<Address>> txOutputAddressCache = new AtomicReference<>();
    private final AtomicReference<SetMultimap<Address, Transaction>> addressToMatchingTxSetCache = new AtomicReference<>();
    @Getter
    protected Wallet wallet;
    @Getter
    protected KeyParameter aesKey;
    @Getter
    protected IntegerProperty chainHeightProperty = new SimpleIntegerProperty();


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    WalletService(WalletsSetup walletsSetup,
                  Preferences preferences,
                  FeeService feeService) {
        this.walletsSetup = walletsSetup;
        this.preferences = preferences;
        this.feeService = feeService;

        params = walletsSetup.getParams();

        cacheInvalidationListener = wallet -> {
            txOutputAddressCache.set(null);
            addressToMatchingTxSetCache.set(null);
        };
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected void addListenersToWallet() {
        wallet.addCoinsReceivedEventListener(walletEventListener);
        wallet.addCoinsSentEventListener(walletEventListener);
        wallet.addReorganizeEventListener(walletEventListener);
        wallet.addTransactionConfidenceEventListener(walletEventListener);
        wallet.addChangeEventListener(Threading.SAME_THREAD, cacheInvalidationListener);
    }

    public void shutDown() {
        if (wallet != null) {
            wallet.removeCoinsReceivedEventListener(walletEventListener);
            wallet.removeCoinsSentEventListener(walletEventListener);
            wallet.removeReorganizeEventListener(walletEventListener);
            wallet.removeTransactionConfidenceEventListener(walletEventListener);
            wallet.removeChangeEventListener(cacheInvalidationListener);
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Package scope Methods
    ///////////////////////////////////////////////////////////////////////////////////////////

    void decryptWallet(@NotNull KeyParameter key) {
        wallet.decrypt(key);
        aesKey = null;
    }

    void encryptWallet(KeyCrypterScrypt keyCrypterScrypt, KeyParameter key) {
        if (this.aesKey != null) {
            log.warn(""encryptWallet called but we have a aesKey already set. "" +
                    ""We decryptWallet with the old key before we apply the new key."");
            decryptWallet(this.aesKey);
        }

        wallet.encrypt(keyCrypterScrypt, key);
        aesKey = key;
    }

    void setAesKey(KeyParameter aesKey) {
        this.aesKey = aesKey;
    }

    abstract String getWalletAsString(boolean includePrivKeys);


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Listener
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void addAddressConfidenceListener(AddressConfidenceListener listener) {
        addressConfidenceListeners.add(listener);
    }

    public void removeAddressConfidenceListener(AddressConfidenceListener listener) {
        addressConfidenceListeners.remove(listener);
    }

    public void addTxConfidenceListener(TxConfidenceListener listener) {
        txConfidenceListeners.add(listener);
    }

    public void removeTxConfidenceListener(TxConfidenceListener listener) {
        txConfidenceListeners.remove(listener);
    }

    public void addBalanceListener(BalanceListener listener) {
        balanceListeners.add(listener);
    }

    public void removeBalanceListener(BalanceListener listener) {
        balanceListeners.remove(listener);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Checks
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static void checkWalletConsistency(Wallet wallet) throws WalletException {
        try {
            checkNotNull(wallet);
            checkState(wallet.isConsistent());
        } catch (Throwable t) {
            t.printStackTrace();
            log.error(t.getMessage());
            throw new WalletException(t);
        }
    }

    public static void verifyTransaction(Transaction transaction) throws TransactionVerificationException {
        try {
            transaction.verify();
        } catch (Throwable t) {
            t.printStackTrace();
            log.error(t.getMessage());
            throw new TransactionVerificationException(t);
        }
    }

    public static void checkAllScriptSignaturesForTx(Transaction transaction) throws TransactionVerificationException {
        for (int i = 0; i < transaction.getInputs().size(); i++) {
            WalletService.checkScriptSig(transaction, transaction.getInputs().get(i), i);
        }
    }

    public static void checkScriptSig(Transaction transaction,
                                      TransactionInput input,
                                      int inputIndex) throws TransactionVerificationException {
        try {
            checkNotNull(input.getConnectedOutput(), ""input.getConnectedOutput() must not be null"");
            input.getScriptSig().correctlySpends(transaction, inputIndex, input.getWitness(), input.getValue(), input.getConnectedOutput().getScriptPubKey(), Script.ALL_VERIFY_FLAGS);
        } catch (Throwable t) {
            t.printStackTrace();
            log.error(t.getMessage());
            throw new TransactionVerificationException(t);
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Sign tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static void signTx(Wallet wallet,
                              KeyParameter aesKey,
                              Transaction tx)
            throws WalletException, TransactionVerificationException {
        for (int i = 0; i < tx.getInputs().size(); i++) {
            TransactionInput input = tx.getInput(i);
            TransactionOutput connectedOutput = input.getConnectedOutput();
            if (connectedOutput == null) {
                log.error(""connectedOutput is null"");
                continue;
            }
            if (!connectedOutput.isMine(wallet)) {
                log.error(""connectedOutput is not mine"");
                continue;
            }

            signTransactionInput(wallet, aesKey, tx, input, i);
            checkScriptSig(tx, input, i);
        }

        checkWalletConsistency(wallet);
        verifyTransaction(tx);
        printTx(""Signed Tx"", tx);
    }

    public static void signTransactionInput(Wallet wallet,
                                            KeyParameter aesKey,
                                            Transaction tx,
                                            TransactionInput txIn,
                                            int index) {
        KeyBag maybeDecryptingKeyBag = new DecryptingKeyBag(wallet, aesKey);
        if (txIn.getConnectedOutput() != null) {
            try {
                // We assume if it's already signed, it's hopefully got a SIGHASH type that will not invalidate when
                // we sign missing pieces (to check this would require either assuming any signatures are signing
                // standard output types or a way to get processed signatures out of script execution)
                txIn.getScriptSig().correctlySpends(tx, index, txIn.getWitness(), txIn.getValue(), txIn.getConnectedOutput().getScriptPubKey(), Script.ALL_VERIFY_FLAGS);
                log.warn(""Input {} already correctly spends output, assuming SIGHASH type used will be safe and skipping signing."", index);
                return;
            } catch (ScriptException e) {
                // Expected.
            }

            Script scriptPubKey = txIn.getConnectedOutput().getScriptPubKey();
            RedeemData redeemData = txIn.getConnectedRedeemData(maybeDecryptingKeyBag);
            checkNotNull(redeemData, ""Transaction exists in wallet that we cannot redeem: %s"", txIn.getOutpoint().getHash());
            txIn.setScriptSig(scriptPubKey.createEmptyInputScript(redeemData.keys.get(0), redeemData.redeemScript));

            TransactionSigner.ProposedTransaction propTx = new TransactionSigner.ProposedTransaction(tx);
            Transaction partialTx = propTx.partialTx;
            txIn = partialTx.getInput(index);
            if (txIn.getConnectedOutput() != null) {
                // If we don't have a sig we don't do the check to avoid error reports of failed sig checks
                final List<ScriptChunk> chunks = txIn.getConnectedOutput().getScriptPubKey().getChunks();
                if (!chunks.isEmpty() && chunks.get(0).data != null && chunks.get(0).data.length > 0) {
                    try {
                        // We assume if it's already signed, it's hopefully got a SIGHASH type that will not invalidate when
                        // we sign missing pieces (to check this would require either assuming any signatures are signing
                        // standard output types or a way to get processed signatures out of script execution)
                        txIn.getScriptSig().correctlySpends(tx, index, txIn.getWitness(), txIn.getValue(), txIn.getConnectedOutput().getScriptPubKey(), Script.ALL_VERIFY_FLAGS);
                        log.warn(""Input {} already correctly spends output, assuming SIGHASH type used will be safe and skipping signing."", index);
                        return;
                    } catch (ScriptException e) {
                        // Expected.
                    }
                }

                redeemData = txIn.getConnectedRedeemData(maybeDecryptingKeyBag);
                scriptPubKey = txIn.getConnectedOutput().getScriptPubKey();

                checkNotNull(redeemData, ""redeemData must not be null"");
                ECKey pubKey = redeemData.keys.get(0);
                if (pubKey instanceof DeterministicKey)
                    propTx.keyPaths.put(scriptPubKey, (((DeterministicKey) pubKey).getPath()));

                ECKey key;
                if ((key = redeemData.getFullKey()) == null) {
                    log.warn(""No local key found for input {}"", index);
                    return;
                }

                Script inputScript = txIn.getScriptSig();
                byte[] script = redeemData.redeemScript.getProgram();

                if (ScriptPattern.isP2PK(scriptPubKey) || ScriptPattern.isP2PKH(scriptPubKey)) {
                    try {
                        TransactionSignature signature = partialTx.calculateSignature(index, key, script, Transaction.SigHash.ALL, false);
                        inputScript = scriptPubKey.getScriptSigWithSignature(inputScript, signature.encodeToBitcoin(), 0);
                        txIn.setScriptSig(inputScript);
                    } catch (ECKey.KeyIsEncryptedException e1) {
                        throw e1;
                    } catch (ECKey.MissingPrivateKeyException e1) {
                        log.warn(""No private key in keypair for input {}"", index);
                    }
                } else if (ScriptPattern.isP2WPKH(scriptPubKey)) {
                    try {
                        // scriptCode is expected to have the format of a legacy P2PKH output script
                        Script scriptCode = ScriptBuilder.createP2PKHOutputScript(key);
                        Coin value = txIn.getValue();
                        TransactionSignature txSig = tx.calculateWitnessSignature(index, key, aesKey, scriptCode, value,
                                Transaction.SigHash.ALL, false);
                        txIn.setScriptSig(ScriptBuilder.createEmpty());
                        txIn.setWitness(TransactionWitness.redeemP2WPKH(txSig, key));
                    } catch (ECKey.KeyIsEncryptedException e1) {
                        log.error(e1.toString());
                        throw e1;
                    } catch (ECKey.MissingPrivateKeyException e1) {
                        log.warn(""No private key in keypair for input {}"", index);
                    }
                } else {
                    log.error(""Unexpected script type."");
                    throw new RuntimeException(""Unexpected script type."");
                }
            } else {
                log.warn(""Missing connected output, assuming input {} is already signed."", index);
            }
        } else {
            log.error(""Missing connected output, assuming already signed."");
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Dust
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static void verifyNonDustTxo(Transaction tx) {
        for (TransactionOutput txo : tx.getOutputs()) {
            Coin value = txo.getValue();
            // OpReturn outputs have value 0
            if (value.isPositive()) {
                checkArgument(Restrictions.isAboveDust(txo.getValue()),
                        ""An output value is below dust limit. Transaction="" + tx);
            }
        }

    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Broadcast tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void broadcastTx(Transaction tx, TxBroadcaster.Callback callback) {
        TxBroadcaster.broadcastTx(wallet, walletsSetup.getPeerGroup(), tx, callback);
    }

    public void broadcastTx(Transaction tx, TxBroadcaster.Callback callback, int timeOut) {
        TxBroadcaster.broadcastTx(wallet, walletsSetup.getPeerGroup(), tx, callback, timeOut);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // TransactionConfidence
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Nullable
    public TransactionConfidence getConfidenceForAddress(Address address) {
        List<TransactionConfidence> transactionConfidenceList = new ArrayList<>();
        if (wallet != null) {
            Set<Transaction> transactions = getAddressToMatchingTxSetMultiset().get(address);
            transactionConfidenceList.addAll(transactions.stream().map(tx ->
                    getTransactionConfidence(tx, address)).collect(Collectors.toList()));
        }
        return getMostRecentConfidence(transactionConfidenceList);
    }

    private SetMultimap<Address, Transaction> getAddressToMatchingTxSetMultiset() {
        return addressToMatchingTxSetCache.updateAndGet(set -> set != null ? set : computeAddressToMatchingTxSetMultimap());
    }

    private SetMultimap<Address, Transaction> computeAddressToMatchingTxSetMultimap() {
        return wallet.getTransactions(false).stream()
                .collect(ImmutableSetMultimap.flatteningToImmutableSetMultimap(
                        Function.identity(),
                        (Function<Transaction, Stream<Address>>) (
                                t -> getOutputsWithConnectedOutputs(t).stream()
                                        .map(WalletService::getAddressFromOutput)
                                        .filter(Objects::nonNull))))
                .inverse();
    }

    @Nullable
    public TransactionConfidence getConfidenceForTxId(String txId) {
        if (wallet != null) {
            Set<Transaction> transactions = wallet.getTransactions(false);
            for (Transaction tx : transactions) {
                if (tx.getTxId().toString().equals(txId))
                    return tx.getConfidence();
            }
        }
        return null;
    }

    @Nullable
    private TransactionConfidence getTransactionConfidence(Transaction tx, Address address) {
        List<TransactionConfidence> transactionConfidenceList = getOutputsWithConnectedOutputs(tx).stream()
                .filter(output -> address != null && address.equals(getAddressFromOutput(output)))
                .flatMap(o -> Stream.ofNullable(o.getParentTransaction()))
                .map(Transaction::getConfidence)
                .collect(Collectors.toList());
        return getMostRecentConfidence(transactionConfidenceList);
    }


    private List<TransactionOutput> getOutputsWithConnectedOutputs(Transaction tx) {
        List<TransactionOutput> transactionOutputs = tx.getOutputs();
        List<TransactionOutput> connectedOutputs = new ArrayList<>();

        // add all connected outputs from any inputs as well
        List<TransactionInput> transactionInputs = tx.getInputs();
        for (TransactionInput transactionInput : transactionInputs) {
            TransactionOutput transactionOutput = transactionInput.getConnectedOutput();
            if (transactionOutput != null) {
                connectedOutputs.add(transactionOutput);
            }
        }

        List<TransactionOutput> mergedOutputs = new ArrayList<>();
        mergedOutputs.addAll(transactionOutputs);
        mergedOutputs.addAll(connectedOutputs);
        return mergedOutputs;
    }

    @Nullable
    private TransactionConfidence getMostRecentConfidence(List<TransactionConfidence> transactionConfidenceList) {
        TransactionConfidence transactionConfidence = null;
        for (TransactionConfidence confidence : transactionConfidenceList) {
            if (confidence != null) {
                if (transactionConfidence == null ||
                        confidence.getConfidenceType().equals(TransactionConfidence.ConfidenceType.PENDING) ||
                        (confidence.getConfidenceType().equals(TransactionConfidence.ConfidenceType.BUILDING) &&
                                transactionConfidence.getConfidenceType().equals(
                                        TransactionConfidence.ConfidenceType.BUILDING) &&
                                confidence.getDepthInBlocks() < transactionConfidence.getDepthInBlocks())) {
                    transactionConfidence = confidence;
                }
            }
        }
        return transactionConfidence;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Balance
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Coin getAvailableBalance() {
        return wallet != null ? wallet.getBalance(Wallet.BalanceType.AVAILABLE) : Coin.ZERO;
    }

    public Coin getEstimatedBalance() {
        return wallet != null ? wallet.getBalance(Wallet.BalanceType.ESTIMATED) : Coin.ZERO;
    }

    public Coin getBalanceForAddress(Address address) {
        return wallet != null ? getBalance(wallet.calculateAllSpendCandidates(), address) : Coin.ZERO;
    }

    protected Coin getBalance(List<TransactionOutput> transactionOutputs, Address address) {
        Coin balance = Coin.ZERO;
        for (TransactionOutput output : transactionOutputs) {
            if (!isDustAttackUtxo(output)) {
                if (isOutputScriptConvertibleToAddress(output) &&
                        address != null &&
                        address.equals(getAddressFromOutput(output)))
                    balance = balance.add(output.getValue());
            }
        }
        return balance;
    }

    protected abstract boolean isDustAttackUtxo(TransactionOutput output);

    public Coin getBalance(TransactionOutput output) {
        return getBalanceForAddress(getAddressFromOutput(output));
    }

    public Coin getTxFeeForWithdrawalPerVbyte() {
        Coin fee = (preferences.isUseCustomWithdrawalTxFee()) ?
                Coin.valueOf(preferences.getWithdrawalTxFeeInVbytes()) :
                feeService.getTxFeePerVbyte();
        log.info(""tx fee = "" + fee.toFriendlyString());
        return fee;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Tx outputs
    ///////////////////////////////////////////////////////////////////////////////////////////

    public int getNumTxOutputsForAddress(Address address) {
        return getTxOutputAddressMultiset().count(address);
    }

    private Multiset<Address> getTxOutputAddressMultiset() {
        return txOutputAddressCache.updateAndGet(set -> set != null ? set : computeTxOutputAddressMultiset());
    }

    private Multiset<Address> computeTxOutputAddressMultiset() {
        return wallet.getTransactions(false).stream()
                .flatMap(t -> t.getOutputs().stream())
                .map(WalletService::getAddressFromOutput)
                .filter(Objects::nonNull)
                .collect(ImmutableMultiset.toImmutableMultiset());
    }

    public boolean isAddressUnused(Address address) {
        return getNumTxOutputsForAddress(address) == 0;
    }

    public boolean isMine(TransactionOutput transactionOutput) {
        return transactionOutput.isMine(wallet);
    }

    // BISQ issue #4039: Prevent dust outputs from being created.
    // Check the outputs of a proposed transaction.  If any are below the dust threshold,
    // add up the dust, log the details, and return the cumulative dust amount.
    public Coin getDust(Transaction proposedTransaction) {
        Coin dust = Coin.ZERO;
        for (TransactionOutput transactionOutput : proposedTransaction.getOutputs()) {
            if (transactionOutput.getValue().isLessThan(Restrictions.getMinNonDustOutput())) {
                dust = dust.add(transactionOutput.getValue());
                log.info(""Dust TXO = {}"", transactionOutput.toString());
            }
        }
        return dust;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Empty complete Wallet
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void emptyBtcWallet(String toAddress,
                               KeyParameter aesKey,
                               ResultHandler resultHandler,
                               ErrorMessageHandler errorMessageHandler)
            throws InsufficientMoneyException, AddressFormatException {
        SendRequest sendRequest = SendRequest.emptyWallet(Address.fromString(params, toAddress));
        sendRequest.fee = Coin.ZERO;
        sendRequest.feePerKb = getTxFeeForWithdrawalPerVbyte().multiply(1000);
        sendRequest.aesKey = aesKey;
        Wallet.SendResult sendResult = wallet.sendCoins(sendRequest);
        printTx(""empty btc wallet"", sendResult.tx);

        // For better redundancy in case the broadcast via BitcoinJ fails we also
        // publish the tx via mempool nodes.
        MemPoolSpaceTxBroadcaster.broadcastTx(sendResult.tx);

        Futures.addCallback(sendResult.broadcastComplete, new FutureCallback<>() {
            @Override
            public void onSuccess(Transaction result) {
                log.info(""emptyBtcWallet onSuccess Transaction="" + result);
                resultHandler.handleResult();
            }

            @Override
            public void onFailure(@NotNull Throwable t) {
                log.error(""emptyBtcWallet onFailure "" + t.toString());
                errorMessageHandler.handleErrorMessage(t.getMessage());
            }
        }, MoreExecutors.directExecutor());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Transaction getTxFromSerializedTx(byte[] tx) {
        return new Transaction(params, tx);
    }

    public NetworkParameters getParams() {
        return params;
    }

    public int getBestChainHeight() {
        final BlockChain chain = walletsSetup.getChain();
        return isWalletReady() && chain != null ? chain.getBestChainHeight() : 0;
    }

    public boolean isChainHeightSyncedWithinTolerance() {
        return walletsSetup.isChainHeightSyncedWithinTolerance();
    }

    public Transaction getClonedTransaction(Transaction tx) {
        return new Transaction(params, tx.bitcoinSerialize());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Wallet delegates to avoid direct access to wallet outside the service class
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void addChangeEventListener(WalletChangeEventListener listener) {
        wallet.addChangeEventListener(Threading.USER_THREAD, listener);
    }

    public void removeChangeEventListener(WalletChangeEventListener listener) {
        wallet.removeChangeEventListener(listener);
    }

    public void addNewBestBlockListener(NewBestBlockListener listener) {
        final BlockChain chain = walletsSetup.getChain();
        if (isWalletReady() && chain != null)
            chain.addNewBestBlockListener(listener);
    }

    public void removeNewBestBlockListener(NewBestBlockListener listener) {
        final BlockChain chain = walletsSetup.getChain();
        if (isWalletReady() && chain != null)
            chain.removeNewBestBlockListener(listener);
    }

    public boolean isWalletReady() {
        return wallet != null;
    }

    public DeterministicSeed getKeyChainSeed() {
        return wallet.getKeyChainSeed();
    }

    @Nullable
    public KeyCrypter getKeyCrypter() {
        return wallet.getKeyCrypter();
    }

    public boolean checkAESKey(KeyParameter aesKey) {
        return wallet.checkAESKey(aesKey);
    }

    @Nullable
    public DeterministicKey findKeyFromPubKey(byte[] pubKey) {
        return (DeterministicKey) wallet.findKeyFromPubKey(pubKey);
    }

    public boolean isEncrypted() {
        return wallet.isEncrypted();
    }

    public List<Transaction> getRecentTransactions(int numTransactions, boolean includeDead) {
        // Returns a list ordered by tx.getUpdateTime() desc
        return wallet.getRecentTransactions(numTransactions, includeDead);
    }

    public int getLastBlockSeenHeight() {
        return wallet.getLastBlockSeenHeight();
    }

    /**
     * Check if there are more than 20 unconfirmed transactions in the chain right now.
     *
     * @return true when queue is full
     */
    public boolean isUnconfirmedTransactionsLimitHit() {
        // For published delayed payout transactions we do not receive the tx confidence
        // so we cannot check if it is confirmed so we ignore it for that check. The check is any arbitrarily
        // using a limit of 20, so we don't need to be exact here. Should just reduce the likelihood of issues with
        // the too long chains of unconfirmed transactions.
        return getTransactions(false).stream()
                .filter(tx -> tx.getLockTime() == 0)
                .filter(Transaction::isPending)
                .count() > 20;
    }

    public Set<Transaction> getTransactions(boolean includeDead) {
        return wallet.getTransactions(includeDead);
    }

    public Coin getBalance(@SuppressWarnings(""SameParameterValue"") Wallet.BalanceType balanceType) {
        return wallet.getBalance(balanceType);
    }

    @Nullable
    public Transaction getTransaction(Sha256Hash hash) {
        return wallet.getTransaction(hash);
    }

    @Nullable
    public Transaction getTransaction(String txId) {
        if (txId == null) {
            return null;
        }
        return getTransaction(Sha256Hash.wrap(txId));
    }


    public boolean isTransactionOutputMine(TransactionOutput transactionOutput) {
        return transactionOutput.isMine(wallet);
    }

   /* public boolean isTxOutputMine(TxOutput txOutput) {
        try {
            Script script = txOutput.getScript();
            if (script.isSentToRawPubKey()) {
                byte[] pubkey = script.getPubKey();
                return wallet.isPubKeyMine(pubkey);
            }
            if (script.isPayToScriptHash()) {
                return wallet.isPayToScriptHashMine(script.getPubKeyHash());
            } else {
                byte[] pubkeyHash = script.getPubKeyHash();
                return wallet.isPubKeyHashMine(pubkeyHash);
            }
        } catch (ScriptException e) {
            // Just means we didn't understand the output of this transaction: ignore it.
            log.debug(""Could not parse tx output script: {}"", e.toString());
            return false;
        }
    }*/

    public Coin getValueSentFromMeForTransaction(Transaction transaction) throws ScriptException {
        return transaction.getValueSentFromMe(wallet);
    }

    public Coin getValueSentToMeForTransaction(Transaction transaction) throws ScriptException {
        return transaction.getValueSentToMe(wallet);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Util
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static void printTx(String tracePrefix, Transaction tx) {
        log.info(""\n"" + tracePrefix + "":\n"" + tx.toString());
    }

    public static boolean isOutputScriptConvertibleToAddress(TransactionOutput output) {
        return ScriptPattern.isP2PKH(output.getScriptPubKey()) ||
                ScriptPattern.isP2SH(output.getScriptPubKey()) ||
                ScriptPattern.isP2WH(output.getScriptPubKey());
    }

    @Nullable
    public static Address getAddressFromOutput(TransactionOutput output) {
        return isOutputScriptConvertibleToAddress(output) ?
                output.getScriptPubKey().getToAddress(Config.baseCurrencyNetworkParameters()) : null;
    }

    @Nullable
    public static String getAddressStringFromOutput(TransactionOutput output) {
        return isOutputScriptConvertibleToAddress(output) ?
                output.getScriptPubKey().getToAddress(Config.baseCurrencyNetworkParameters()).toString() : null;
    }


    /**
     * @param serializedTransaction The serialized transaction to be added to the wallet
     * @return The transaction we added to the wallet, which is different as the one we passed as argument!
     * @throws VerificationException
     */
    public static Transaction maybeAddTxToWallet(byte[] serializedTransaction,
                                                 Wallet wallet,
                                                 TransactionConfidence.Source source) throws VerificationException {
        Transaction tx = new Transaction(wallet.getParams(), serializedTransaction);
        Transaction walletTransaction = wallet.getTransaction(tx.getTxId());

        if (walletTransaction == null) {
            // We need to recreate the transaction otherwise we get a null pointer...
            tx.getConfidence(Context.get()).setSource(source);
            //wallet.maybeCommitTx(tx);
            wallet.receivePending(tx, null, true);
            return tx;
        } else {
            return walletTransaction;
        }
    }

    public static Transaction maybeAddNetworkTxToWallet(byte[] serializedTransaction,
                                                        Wallet wallet) throws VerificationException {
        return maybeAddTxToWallet(serializedTransaction, wallet, TransactionConfidence.Source.NETWORK);
    }

    public static Transaction maybeAddSelfTxToWallet(Transaction transaction,
                                                     Wallet wallet) throws VerificationException {
        return maybeAddTxToWallet(transaction, wallet, TransactionConfidence.Source.SELF);
    }

    public static Transaction maybeAddTxToWallet(Transaction transaction,
                                                 Wallet wallet,
                                                 TransactionConfidence.Source source) throws VerificationException {
        return maybeAddTxToWallet(transaction.bitcoinSerialize(), wallet, source);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // bisqWalletEventListener
    ///////////////////////////////////////////////////////////////////////////////////////////

    public class BisqWalletListener implements WalletCoinsReceivedEventListener,
            WalletCoinsSentEventListener,
            WalletReorganizeEventListener,
            TransactionConfidenceEventListener {
        @Override
        public void onCoinsReceived(Wallet wallet, Transaction tx, Coin prevBalance, Coin newBalance) {
            notifyBalanceListeners(tx);
        }

        @Override
        public void onCoinsSent(Wallet wallet, Transaction tx, Coin prevBalance, Coin newBalance) {
            notifyBalanceListeners(tx);
        }

        @Override
        public void onReorganize(Wallet wallet) {
            log.warn(""onReorganize "");
        }

        @Override
        public void onTransactionConfidenceChanged(Wallet wallet, Transaction tx) {
            for (AddressConfidenceListener addressConfidenceListener : addressConfidenceListeners) {
                TransactionConfidence confidence = getTransactionConfidence(tx, addressConfidenceListener.getAddress());
                addressConfidenceListener.onTransactionConfidenceChanged(confidence);
            }
            txConfidenceListeners.stream()
                    .filter(txConfidenceListener -> tx != null &&
                            tx.getTxId().toString() != null &&
                            txConfidenceListener != null &&
                            tx.getTxId().toString().equals(txConfidenceListener.getTxId()))
                    .forEach(txConfidenceListener ->
                            txConfidenceListener.onTransactionConfidenceChanged(tx.getConfidence()));
        }

        void notifyBalanceListeners(Transaction tx) {
            for (BalanceListener balanceListener : balanceListeners) {
                Coin balance;
                if (balanceListener.getAddress() != null)
                    balance = getBalanceForAddress(balanceListener.getAddress());
                else
                    balance = getAvailableBalance();

                balanceListener.onBalanceChanged(balance, tx);
            }
        }
    }
}{'AvgLine': 7, 'CountLine': 812, 'CountStmt': 362, 'MaxNesting': 4, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 254, 'MaxEssential': 7, 'SumEssential': 95, 'AvgCyclomatic': 1, 'CountLineCode': 571, 'CountStmtDecl': 148, 'MaxCyclomatic': 14, 'SumCyclomatic': 134, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 137, 'CountSemicolon': 228, 'CountDeclMethod': 76, 'CountLineCodeExe': 317, 'CountLineComment': 104, 'CountClassCoupled': 67, 'CountClassDerived': 2, 'CountLineCodeDecl': 182, 'CountDeclMethodAll': 76, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.18', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 17, 'SumCyclomaticStrict': 149, 'CountDeclClassMethod': 15, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 61, 'MaxCyclomaticModified': 14, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 134, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 5, 'CountDeclMethodPrivate': 7, 'CountDeclInstanceMethod': 61, 'CountDeclMethodProtected': 3, 'CountClassCoupledModified': 67, 'CountDeclInstanceVariable': 14, 'PercentLackOfCohesionModified': 92}"
27756,Java,"public final class InitialShortcutData extends GameXmlReader {
    private static final Logger LOGGER = LoggerFactory.getLogger(InitialShortcutData.class);

    private final Map<ClassId, List<Shortcut>> _initialShortcutData = new EnumMap<>(ClassId.class);
    private final List<Shortcut> _initialGlobalShortcutList = new ArrayList<>();
    private final IntMap<Macro> _macroPresets = new HashIntMap<>();

    private InitialShortcutData() {
        load();
    }

    @Override
    protected Path getSchemaFilePath() {
        return ServerSettings.dataPackDirectory().resolve(""data/xsd/initialShortcuts.xsd"");
    }

    @Override
    public void load() {
        _initialShortcutData.clear();
        _initialGlobalShortcutList.clear();

        parseDatapackFile(""data/stats/initialShortcuts.xml"");

        LOGGER.info(""Loaded {} Initial Global Shortcuts data."", _initialGlobalShortcutList.size());
        LOGGER.info(""Loaded {} Initial Shortcuts data."", _initialShortcutData.size());
        LOGGER.info(""Loaded {} Macros presets."", _macroPresets.size());
        releaseResources();
    }

    @Override
    public void parseDocument(Document doc, File f) {
        for (Node n = doc.getFirstChild(); n != null; n = n.getNextSibling()) {
            if (""list"".equals(n.getNodeName())) {
                for (Node d = n.getFirstChild(); d != null; d = d.getNextSibling()) {
                    switch (d.getNodeName()) {
                        case ""shortcuts"": {
                            parseShortcuts(d);
                            break;
                        }
                        case ""macros"": {
                            parseMacros(d);
                            break;
                        }
                    }
                }
            }
        }
    }

    private void parseShortcuts(Node d) {
        NamedNodeMap attrs = d.getAttributes();
        final Node classIdNode = attrs.getNamedItem(""classId"");
        final List<Shortcut> list = new ArrayList<>();
        for (Node c = d.getFirstChild(); c != null; c = c.getNextSibling()) {
            if (""page"".equals(c.getNodeName())) {
                attrs = c.getAttributes();
                final int pageId = parseInt(attrs, ""pageId"");
                for (Node b = c.getFirstChild(); b != null; b = b.getNextSibling()) {
                    if (""slot"".equals(b.getNodeName())) {
                        list.add(createShortcut(pageId, b));
                    }
                }
            }
        }

        if (classIdNode != null) {
            _initialShortcutData.put(ClassId.getClassId(Integer.parseInt(classIdNode.getNodeValue())), list);
        } else {
            _initialGlobalShortcutList.addAll(list);
        }
    }

    private void parseMacros(Node d) {
        for (Node c = d.getFirstChild(); c != null; c = c.getNextSibling()) {
            if (""macro"".equals(c.getNodeName())) {
                NamedNodeMap attrs = c.getAttributes();
                if (!parseBoolean(attrs, ""enabled"", true)) {
                    continue;
                }

                final int macroId = parseInt(attrs, ""macroId"");

                MacroData data = new MacroData();
                data.setId(macroId);
                data.setIcon( parseInt(attrs, ""icon""));
                data.setName(parseString(attrs, ""name""));
                data.setDescription(parseString(attrs, ""description""));
                data.setAcronym(parseString(attrs, ""acronym""));

                final List<MacroCmdData> commands = new ArrayList<>(1);
                int entry = 0;

                for (Node b = c.getFirstChild(); b != null; b = b.getNextSibling()) {
                    if (""command"".equals(b.getNodeName())) {
                        MacroCmdData cmdData = new MacroCmdData();
                        cmdData.setMacroId(macroId);
                        attrs = b.getAttributes();
                        cmdData.setType(parseEnum(attrs, MacroType.class, ""type""));
                        cmdData.setCommand(b.getTextContent());

                        setDatas(attrs, cmdData);
                        cmdData.setIndex(entry++);
                        commands.add(cmdData);
                    }
                }
                _macroPresets.put(macroId, new Macro(data, commands));
            }
        }
    }

    private void setDatas(NamedNodeMap attrs, MacroCmdData cmdData) {
        switch (cmdData.getType()) {
            case SKILL -> {
                cmdData.setData1(parseInt(attrs, ""skillId"")); // Skill ID
                cmdData.setData2(parseInt(attrs, ""skillLvl"", 0)); // Skill level
            }
            case SHORTCUT -> {
                cmdData.setData1(parseInt(attrs, ""page""));
                cmdData.setData2(parseInt(attrs, ""slot"", 0));
            }
            case ACTION -> cmdData.setData1(parseInt(attrs, ""actionId""));
            case ITEM -> cmdData.setData1(parseInt(attrs, ""itemId""));
            case DELAY -> cmdData.setData1(parseInt(attrs, ""delay""));
        }
    }

    /**
     * Parses a node an create a shortcut from it.
     *
     * @param pageId the page ID
     * @param b      the node to parse
     * @return the new shortcut
     */
    private Shortcut createShortcut(int pageId, Node b) {
        final NamedNodeMap attrs = b.getAttributes();
        final int slotId = parseInt(attrs, ""slotId"");
        final ShortcutType shortcutType = parseEnum(attrs, ShortcutType.class, ""shortcutType"");
        final int shortcutId = parseInt(attrs, ""shortcutId"");
        final int shortcutLevel = parseInt(attrs, ""shortcutLevel"", 0);
        final int characterType = parseInt(attrs, ""characterType"", 1);
        return new Shortcut(Shortcut.pageAndSlotToClientId(pageId, slotId), shortcutType, shortcutId, shortcutLevel, 0, characterType);
    }

    /**
     * Register all the available shortcuts for the given player.
     *
     * @param player the player
     */
    public void registerAllShortcuts(Player player) {
        if (isNull(player)) {
            return;
        }

        // Register global shortcuts.
        for (Shortcut shortcut : _initialGlobalShortcutList) {
            int shortcutId = shortcut.getShortcutId();
            switch (shortcut.getType()) {
                case ITEM: {
                    final Item item = player.getInventory().getItemByItemId(shortcutId);
                    if (item == null) {
                        continue;
                    }
                    shortcutId = item.getObjectId();
                    break;
                }
                case SKILL: {
                    if (!player.getSkills().containsKey(shortcutId)) {
                        continue;
                    }
                    break;
                }
                case MACRO: {
                    final Macro macro = _macroPresets.get(shortcutId);
                    if (macro == null) {
                        continue;
                    }
                    player.registerMacro(macro);
                    break;
                }
            }

            // Register shortcut
            final Shortcut newShortcut = new Shortcut(shortcut.getClientId(), shortcut.getType(), shortcutId, shortcut.getLevel(), shortcut.getSubLevel(), shortcut.getCharacterType());
            player.sendPacket(new ShortCutRegister(newShortcut));
            player.registerShortCut(newShortcut);
        }

        // Register class specific shortcuts.
        if (_initialShortcutData.containsKey(player.getClassId())) {
            for (Shortcut shortcut : _initialShortcutData.get(player.getClassId())) {
                int shortcutId = shortcut.getShortcutId();
                switch (shortcut.getType()) {
                    case ITEM: {
                        final Item item = player.getInventory().getItemByItemId(shortcutId);
                        if (item == null) {
                            continue;
                        }
                        shortcutId = item.getObjectId();
                        break;
                    }
                    case SKILL: {
                        if (!player.getSkills().containsKey(shortcut.getShortcutId())) {
                            continue;
                        }
                        break;
                    }
                    case MACRO: {
                        final Macro macro = _macroPresets.get(shortcutId);
                        if (macro == null) {
                            continue;
                        }
                        player.registerMacro(macro);
                        break;
                    }
                }
                // Register shortcut
                final Shortcut newShortcut = new Shortcut(shortcut.getClientId(), shortcut.getType(), shortcutId, shortcut.getLevel(), shortcut.getSubLevel(), shortcut.getCharacterType());
                player.registerShortCut(newShortcut);
            }
        }
    }

    public static InitialShortcutData getInstance() {
        return Singleton.INSTANCE;
    }

    private static class Singleton {
        private static final InitialShortcutData INSTANCE = new InitialShortcutData();
    }
}",1,777 657 587 2000 650 2001 123 773 809 657 2002 2003 61 2004 46 2005 40 2000 46 587 41 59 773 657 2006 60 2007 44 2008 60 2009 356 2010 61 744 2011 60 62 40 2007 46 587 41 59 773 657 2008 60 2009 62 2012 61 744 2013 60 62 40 41 59 773 657 2014 60 2015 62 2016 61 744 2017 60 62 40 41 59 773 2000 40 41 123 2018 40 41 59 125 64 2019 775 2020 2021 40 41 123 792 2022 46 2023 40 41 46 2024 40 362 41 59 125 64 2019 777 865 2025 40 41 123 2010 46 2026 40 41 59 2012 46 2026 40 41 59 2027 40 362 41 59 2003 46 2028 40 362 44 2012 46 2029 40 41 41 59 2003 46 2028 40 362 44 2010 46 2029 40 41 41 59 2003 46 2028 40 362 44 2016 46 2029 40 41 41 59 2030 40 41 59 125 64 2019 777 865 2031 40 2032 2033 44 2034 2035 41 123 664 40 2036 2037 61 2033 46 2038 40 41 59 2037 340 2039 59 2037 61 2037 46 2040 40 41 41 123 688 40 362 46 2041 40 2037 46 2042 40 41 41 41 123 664 40 2036 2043 61 2037 46 2038 40 41 59 2043 340 2039 59 2043 61 2043 46 2040 40 41 41 123 819 40 2043 46 2042 40 41 41 123 579 362 58 123 2044 40 2043 41 59 572 59 125 579 362 58 123 2045 40 2043 41 59 572 59 125 125 125 125 125 125 773 865 2046 40 2047 2048 41 123 2049 2050 61 2048 46 2051 40 41 59 657 2047 2052 61 2050 46 2053 40 362 41 59 657 2008 60 2009 62 2054 61 744 2013 60 62 40 41 59 664 40 2047 2055 61 2048 46 2056 40 41 59 2055 340 2057 59 2055 61 2055 46 2058 40 41 41 123 688 40 362 46 2059 40 2055 46 2060 40 41 41 41 123 2050 61 2055 46 2051 40 41 59 657 704 2061 61 2062 40 2050 44 362 41 59 664 40 2047 2063 61 2055 46 2056 40 41 59 2063 340 2057 59 2063 61 2063 46 2058 40 41 41 123 688 40 362 46 2059 40 2063 46 2060 40 41 41 41 123 2054 46 2064 40 2065 40 2061 44 2063 41 41 59 125 125 125 125 688 40 2052 340 2057 41 123 2010 46 2066 40 2007 46 2067 40 2068 46 2069 40 2052 46 2070 40 41 41 41 44 2054 41 59 125 630 123 2012 46 2071 40 2054 41 59 125 125 773 865 2072 40 2047 2048 41 123 664 40 2047 2073 61 2048 46 2074 40 41 59 2073 340 2075 59 2073 61 2073 46 2076 40 41 41 123 688 40 362 46 2077 40 2073 46 2078 40 41 41 41 123 2079 2080 61 2073 46 2081 40 41 59 688 40 33 2082 40 2080 44 362 44 2083 41 41 123 605 59 125 657 704 2084 61 2085 40 2080 44 362 41 59 2086 2087 61 744 2086 40 41 59 2087 46 2088 40 2084 41 59 2087 46 2089 40 2085 40 2080 44 362 41 41 59 2087 46 2090 40 2091 40 2080 44 362 41 41 59 2087 46 2092 40 2091 40 2080 44 362 41 41 59 2087 46 2093 40 2091 40 2080 44 362 41 41 59 657 2008 60 2094 62 2095 61 744 2013 60 62 40 1501 41 59 704 2096 61 1500 59 664 40 2047 2097 61 2073 46 2074 40 41 59 2097 340 2075 59 2097 61 2097 46 2076 40 41 41 123 688 40 362 46 2077 40 2097 46 2078 40 41 41 41 123 2094 2098 61 744 2094 40 41 59 2098 46 2099 40 2084 41 59 2080 61 2097 46 2081 40 41 59 2098 46 2100 40 2101 40 2080 44 2102 46 587 44 362 41 41 59 2098 46 2103 40 2097 46 2104 40 41 41 59 2105 40 2080 44 2098 41 59 2098 46 2106 40 2096 349 41 59 2095 46 2107 40 2098 41 59 125 125 2016 46 2108 40 2084 44 744 2015 40 2087 44 2095 41 41 59 125 125 125 773 865 2109 40 2110 2111 44 2112 2113 41 123 819 40 2113 46 2114 40 41 41 123 579 2115 45 62 123 2113 46 2116 40 2117 40 2111 44 362 41 41 59 330 2113 46 2118 40 2117 40 2111 44 362 44 1500 41 41 59 330 125 579 2119 45 62 123 2113 46 2120 40 2121 40 2111 44 362 41 41 59 2113 46 2122 40 2121 40 2111 44 362 44 1500 41 41 59 125 579 2123 45 62 2113 46 2124 40 2125 40 2111 44 362 41 41 59 579 2126 45 62 2113 46 2124 40 2125 40 2111 44 362 41 41 59 579 2127 45 62 2113 46 2124 40 2125 40 2111 44 362 41 41 59 125 125 306 773 2009 2128 40 704 2129 44 2047 2130 41 123 657 2110 2111 61 2130 46 2131 40 41 59 657 704 2132 61 2133 40 2111 44 362 41 59 657 2134 2135 61 2136 40 2111 44 2134 46 587 44 362 41 59 657 704 2137 61 2133 40 2111 44 362 41 59 657 704 2138 61 2133 40 2111 44 362 44 1500 41 59 657 704 2139 61 2133 40 2111 44 362 44 1501 41 59 792 744 2009 40 2009 46 2140 40 2129 44 2132 41 44 2135 44 2137 44 2138 44 1500 44 2139 41 59 125 306 777 865 2141 40 2142 2143 41 123 688 40 2144 40 2143 41 41 123 792 59 125 330 664 40 2009 2145 58 2012 41 123 704 2146 61 2145 46 2147 40 41 59 819 40 2145 46 2148 40 41 41 123 579 2149 58 123 657 2150 2151 61 2143 46 2152 40 41 46 2153 40 2146 41 59 688 40 2151 323 2154 41 123 605 59 125 2146 61 2151 46 2155 40 41 59 572 59 125 579 2156 58 123 688 40 33 2143 46 2157 40 41 46 2158 40 2146 41 41 123 605 59 125 572 59 125 579 2159 58 123 657 2015 2160 61 2016 46 2161 40 2146 41 59 688 40 2160 323 2162 41 123 605 59 125 2143 46 2163 40 2160 41 59 572 59 125 125 330 657 2009 2164 61 744 2009 40 2145 46 2165 40 41 44 2145 46 2148 40 41 44 2146 44 2145 46 2166 40 41 44 2145 46 2167 40 41 44 2145 46 2168 40 41 41 59 2143 46 2169 40 744 2170 40 2164 41 41 59 2143 46 2171 40 2164 41 59 125 330 688 40 2010 46 2172 40 2143 46 2173 40 41 41 41 123 664 40 2009 2145 58 2010 46 2174 40 2143 46 2173 40 41 41 41 123 704 2175 61 2145 46 2176 40 41 59 819 40 2145 46 2177 40 41 41 123 579 2178 58 123 657 2179 2180 61 2143 46 2181 40 41 46 2182 40 2175 41 59 688 40 2180 323 2183 41 123 605 59 125 2175 61 2180 46 2184 40 41 59 572 59 125 579 2185 58 123 688 40 33 2143 46 2186 40 41 46 2172 40 2145 46 2176 40 41 41 41 123 605 59 125 572 59 125 579 2187 58 123 657 2015 2188 61 2016 46 2174 40 2175 41 59 688 40 2188 323 2189 41 123 605 59 125 2143 46 2190 40 2188 41 59 572 59 125 125 330 657 2009 2191 61 744 2009 40 2145 46 2192 40 41 44 2145 46 2177 40 41 44 2175 44 2145 46 2193 40 41 44 2145 46 2194 40 41 44 2145 46 2195 40 41 41 59 2143 46 2196 40 2191 41 59 125 125 125 777 809 2000 2197 40 41 123 792 2198 46 2199 59 125 773 809 587 2200 123 773 809 657 2000 2201 61 744 2000 40 41 59 125 125 ,"{'AvgLine': 20, 'CountLine': 235, 'CountStmt': 139, 'MaxNesting': 4, 'AvgLineCode': 18, 'AvgEssential': 3, 'AvgLineBlank': 1, 'CountStmtExe': 124, 'MaxEssential': 17, 'SumEssential': 34, 'AvgCyclomatic': 4, 'CountLineCode': 190, 'CountStmtDecl': 49, 'MaxCyclomatic': 17, 'SumCyclomatic': 46, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 23, 'CountSemicolon': 98, 'CountDeclMethod': 10, 'CountLineCodeExe': 127, 'CountLineComment': 24, 'CountClassCoupled': 30, 'CountClassDerived': 0, 'CountLineCodeDecl': 44, 'CountDeclMethodAll': 77, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.13', 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 17, 'SumCyclomaticStrict': 46, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 3, 'CountDeclMethodPublic': 4, 'MaxCyclomaticModified': 13, 'PercentLackOfCohesion': 70, 'SumCyclomaticModified': 37, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 30, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 50}"
3219,Java,"@FxmlView
@Slf4j
public class BsqSwapCreateOfferView extends BsqSwapOfferView<BsqSwapCreateOfferViewModel> {
    private InputTextField minAmountTextField, priceTextField, volumeTextField;
    private Label miningPowLabel;
    private BusyAnimation miningPowBusyAnimation;
    private ComboBox<PaymentAccount> paymentAccountsComboBox;
    private ChangeListener<Boolean> minAmountFocusedListener, volumeFocusedListener,
            priceFocusedListener, placeOfferCompletedListener;
    private ChangeListener<String> errorMessageListener;
    private EventHandler<ActionEvent> paymentAccountsComboBoxSelectionHandler;
    private final List<Node> editOfferElements = new ArrayList<>();
    private boolean isActivated;

    @Setter
    private OfferView.OfferActionHandler offerActionHandler;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    public BsqSwapCreateOfferView(BsqSwapCreateOfferViewModel model,
                                  Navigation navigation,
                                  BsqSwapOfferDetailsWindow bsqSwapOfferDetailsWindow) {
        super(model, navigation, bsqSwapOfferDetailsWindow);
    }

    @Override
    protected void initialize() {
        super.initialize();
    }

    @Override
    protected void activate() {
        super.activate();

        if (model.dataModel.isTabSelected()) {
            doActivate();
        }
    }

    private void doActivate() {
        if (!isActivated) {
            isActivated = true;
            paymentAccountsComboBox.setPrefWidth(250);

            addListeners();
            addBindings();

            paymentAccountsComboBox.setItems(model.dataModel.getPaymentAccounts());
            paymentAccountsComboBox.getSelectionModel().select(model.dataModel.getPaymentAccount());
            onPaymentAccountsComboBoxSelected();

            String key = ""BsqSwapMakerInfo"";
            if (DontShowAgainLookup.showAgain(key)) {
                new Popup().information(Res.get(""createOffer.bsqSwap.offerVisibility"") + ""\n\n"" + Res.get(""bsqSwapOffer.feeHandling""))
                        .width(1000)
                        .closeButtonText(Res.get(""shared.iUnderstand""))
                        .dontShowAgainId(key)
                        .show();
            }
        }
    }

    @Override
    protected void deactivate() {
        super.deactivate();

        if (isActivated) {
            isActivated = false;
            removeListeners();
            removeBindings();
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void initWithData(OfferDirection direction,
                             OfferView.OfferActionHandler offerActionHandler,
                             @Nullable BsqSwapOfferPayload offerPayload) {
        this.offerActionHandler = offerActionHandler;

        model.initWithData(offerPayload != null ? offerPayload.getDirection() : direction, offerPayload);

        if (model.dataModel.isBuyOffer()) {
            actionButton.setId(""buy-button-big"");
            actionButton.updateText(Res.get(""createOffer.placeOfferButton"", Res.get(""shared.buy"")));
            volumeDescriptionLabel.setText(Res.get(""createOffer.amountPriceBox.buy.volumeDescription"", BSQ));
        } else {
            actionButton.setId(""sell-button-big"");
            actionButton.updateText(Res.get(""createOffer.placeOfferButton"", Res.get(""shared.sell"")));
            volumeDescriptionLabel.setText(Res.get(""createOffer.amountPriceBox.sell.volumeDescription"", BSQ));
        }

        String amountDescription = Res.get(""createOffer.amountPriceBox.amountDescription"",
                model.dataModel.isBuyOffer() ? Res.get(""shared.buy"") : Res.get(""shared.sell""));
        amountDescriptionLabel.setText(amountDescription);

    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // UI actions
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void onTabSelected(boolean isSelected) {
        if (isSelected && !model.dataModel.isTabSelected()) {
            doActivate();
        }

        isActivated = isSelected;
        model.dataModel.onTabSelected(isSelected);
    }

    @Override
    protected void onCancel1() {
        close();
    }

    @Override
    protected void onShowFeeInfoScreen() {
        super.onShowFeeInfoScreen();

        paymentAccountsComboBox.setDisable(true);
        paymentAccountsComboBox.setMouseTransparent(true);

        editOfferElements.forEach(node -> {
            node.setMouseTransparent(true);
            node.setFocusTraversable(false);
        });

        inputAmountTextField.setFundsStructure(model.getInputAmountDetails());
        inputAmountTextField.setContentForInfoPopOver(createInputAmountDetailsPopover());
        payoutAmountTextField.setFundsStructure(model.getPayoutAmountDetails());
        payoutAmountTextField.setContentForInfoPopOver(createPayoutAmountDetailsPopover());

        model.dataModel.getMissingFunds().addListener(missingFundsListener);
        checkForMissingFunds(model.dataModel.getMissingFunds().get());

        // We create the offer and start do the pow.
        // As the pow could take some time we do it already now and not at offer confirm.
        // We have already all data to create the offer, so no reason to delay it to later.
        model.requestNewOffer();
    }

    @Override
    protected void onAction() {
        if (!model.dataModel.canPlaceOrTakeOffer()) {
            return;
        }

        if (DevEnv.isDevMode()) {
            model.onPlaceOffer();
            requestFocus();
            return;
        }

        bsqSwapOfferDetailsWindow.onPlaceOffer(model::onPlaceOffer).show(model.dataModel.offer);
        requestFocus();
    }

    @Override
    protected void onCancel2() {
        close();
    }

    private void onPaymentAccountsComboBoxSelected() {
        PaymentAccount paymentAccount = paymentAccountsComboBox.getSelectionModel().getSelectedItem();
        // We have represented BSQ swaps as payment method and switch to a new view if a non BSQ swap account is selected
        if (paymentAccount != null && !paymentAccount.getPaymentMethod().isBsqSwap()) {
            close();

            if (offerActionHandler != null) {
                offerActionHandler.onCreateOffer(paymentAccount.getSelectedTradeCurrency(),
                        paymentAccount.getPaymentMethod());
            }
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Bindings, Listeners
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void createListeners() {
        super.createListeners();

        amountFocusedListener = (o, oldValue, newValue) -> {
            model.onFocusOutAmountTextField(oldValue, newValue);
            amountTextField.setText(model.amount.get());
        };
        minAmountFocusedListener = (o, oldValue, newValue) -> {
            model.onFocusOutMinAmountTextField(oldValue, newValue);
            minAmountTextField.setText(model.minAmount.get());
        };
        priceFocusedListener = (o, oldValue, newValue) -> {
            model.onFocusOutPriceTextField(oldValue, newValue);
            priceTextField.setText(model.price.get());
        };
        volumeFocusedListener = (o, oldValue, newValue) -> {
            model.onFocusOutVolumeTextField(oldValue, newValue);
            volumeTextField.setText(model.volume.get());
        };

        errorMessageListener = (o, oldValue, newValue) -> {
            if (newValue != null)
                UserThread.runAfter(() -> new Popup().error(Res.get(""createOffer.amountPriceBox.error.message"", model.errorMessage.get()))
                        .show(), 100, TimeUnit.MILLISECONDS);
        };

        paymentAccountsComboBoxSelectionHandler = e -> onPaymentAccountsComboBoxSelected();

        placeOfferCompletedListener = (o, oldValue, newValue) -> {
            if (DevEnv.isDevMode()) {
                close();
            } else if (newValue) {
                // We need a bit of delay to avoid issues with fade out/fade in of 2 popups
                String key = ""createBsqOfferSuccessInfo"";
                if (DontShowAgainLookup.showAgain(key)) {
                    UserThread.runAfter(() -> new Popup().headLine(Res.get(""createOffer.success.headline""))
                                    .feedback(Res.get(""createOffer.success.info""))
                                    .dontShowAgainId(key)
                                    .actionButtonTextWithGoTo(""navigation.portfolio.myOpenOffers"")
                                    .onAction(() -> {
                                        UserThread.runAfter(() ->
                                                        navigation.navigateTo(MainView.class, PortfolioView.class,
                                                                OpenOffersView.class),
                                                100, TimeUnit.MILLISECONDS);
                                        close();
                                    })
                                    .onClose(this::close)
                                    .show(),
                            100, TimeUnit.MILLISECONDS);
                } else {
                    close();
                }
            }
        };
    }

    @Override
    protected void addListeners() {
        // focus out
        amountTextField.focusedProperty().addListener(amountFocusedListener);
        minAmountTextField.focusedProperty().addListener(minAmountFocusedListener);
        priceTextField.focusedProperty().addListener(priceFocusedListener);
        volumeTextField.focusedProperty().addListener(volumeFocusedListener);

        // warnings
        model.errorMessage.addListener(errorMessageListener);

        model.placeOfferCompleted.addListener(placeOfferCompletedListener);

        // UI actions
        paymentAccountsComboBox.setOnAction(paymentAccountsComboBoxSelectionHandler);
    }

    @Override
    protected void removeListeners() {
        super.removeListeners();

        // focus out
        amountTextField.focusedProperty().removeListener(amountFocusedListener);
        minAmountTextField.focusedProperty().removeListener(minAmountFocusedListener);
        priceTextField.focusedProperty().removeListener(priceFocusedListener);
        volumeTextField.focusedProperty().removeListener(volumeFocusedListener);

        // warnings
        model.errorMessage.removeListener(errorMessageListener);

        model.placeOfferCompleted.removeListener(placeOfferCompletedListener);

        // UI actions
        paymentAccountsComboBox.setOnAction(null);
    }

    @Override
    protected void addBindings() {
        amountTextField.textProperty().bindBidirectional(model.amount);
        minAmountTextField.textProperty().bindBidirectional(model.minAmount);
        priceTextField.textProperty().bindBidirectional(model.price);
        volumeTextField.textProperty().bindBidirectional(model.volume);
        volumeTextField.promptTextProperty().bind(model.volumePromptLabel);
        inputAmountTextField.textProperty().bind(model.getInputAmount());
        payoutAmountTextField.textProperty().bind(model.getPayoutAmount());
        // Validation
        amountTextField.validationResultProperty().bind(model.amountValidationResult);
        minAmountTextField.validationResultProperty().bind(model.minAmountValidationResult);
        priceTextField.validationResultProperty().bind(model.priceValidationResult);
        volumeTextField.validationResultProperty().bind(model.volumeValidationResult);

        nextButton.disableProperty().bind(model.isNextButtonDisabled);
        actionButton.disableProperty().bind(model.isPlaceOfferButtonDisabled);
        cancelButton2.disableProperty().bind(model.cancelButtonDisabled);

        // trading account
        paymentAccountTitledGroupBg.managedProperty().bind(paymentAccountTitledGroupBg.visibleProperty());
        currencyTextFieldBox.managedProperty().bind(currencyTextFieldBox.visibleProperty());

        miningPowLabel.visibleProperty().bind(model.miningPoW);
        miningPowLabel.managedProperty().bind(model.miningPoW);
        miningPowBusyAnimation.visibleProperty().bind(model.miningPoW);
        miningPowBusyAnimation.managedProperty().bind(model.miningPoW);
        miningPowBusyAnimation.isRunningProperty().bind(model.miningPoW);
    }

    @Override
    protected void removeBindings() {
        amountTextField.textProperty().unbindBidirectional(model.amount);
        minAmountTextField.textProperty().unbindBidirectional(model.minAmount);
        priceTextField.textProperty().unbindBidirectional(model.price);
        volumeTextField.textProperty().unbindBidirectional(model.volume);
        volumeTextField.promptTextProperty().unbindBidirectional(model.volume);
        inputAmountTextField.textProperty().unbind();
        payoutAmountTextField.textProperty().unbind();

        // Validation
        amountTextField.validationResultProperty().unbind();
        minAmountTextField.validationResultProperty().unbind();
        priceTextField.validationResultProperty().unbind();
        volumeTextField.validationResultProperty().unbind();

        nextButton.disableProperty().unbind();
        actionButton.disableProperty().unbind();
        cancelButton2.disableProperty().unbind();

        // trading account
        paymentAccountTitledGroupBg.managedProperty().unbind();
        currencyTextFieldBox.managedProperty().unbind();

        miningPowLabel.visibleProperty().unbind();
        miningPowLabel.managedProperty().unbind();
        miningPowBusyAnimation.visibleProperty().unbind();
        miningPowBusyAnimation.managedProperty().unbind();
        miningPowBusyAnimation.isRunningProperty().unbind();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Build UI elements
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void addPaymentAccountGroup() {
        paymentAccountTitledGroupBg = addTitledGroupBg(gridPane, gridRow, 1, Res.get(""shared.selectTradingAccount""));
        GridPane.setColumnSpan(paymentAccountTitledGroupBg, 2);

        HBox paymentGroupBox = new HBox();
        paymentGroupBox.setAlignment(Pos.CENTER_LEFT);
        paymentGroupBox.setSpacing(12);
        paymentGroupBox.setPadding(new Insets(10, 0, 18, 0));

        Tuple3<VBox, Label, ComboBox<PaymentAccount>> paymentAccountBoxTuple = addTopLabelComboBox(
                Res.get(""shared.tradingAccount""), Res.get(""shared.selectTradingAccount""));

        Tuple3<Label, TextField, VBox> currencyTextFieldTuple = addTopLabelTextField(gridPane, gridRow,
                Res.get(""shared.currency""), BSQ, 5d);
        currencyTextFieldBox = currencyTextFieldTuple.third;

        paymentAccountVBox = paymentAccountBoxTuple.first;
        paymentGroupBox.getChildren().addAll(paymentAccountVBox, currencyTextFieldBox);

        GridPane.setRowIndex(paymentGroupBox, gridRow);
        GridPane.setColumnSpan(paymentGroupBox, 2);
        GridPane.setMargin(paymentGroupBox, new Insets(Layout.FIRST_ROW_DISTANCE, 0, 0, 0));
        gridPane.getChildren().add(paymentGroupBox);

        paymentAccountVBox.setMinWidth(800);
        paymentAccountsComboBox = paymentAccountBoxTuple.third;
        paymentAccountsComboBox.setMinWidth(paymentAccountVBox.getMinWidth());
        paymentAccountsComboBox.setPrefWidth(paymentAccountVBox.getMinWidth());
        paymentAccountsComboBox.setConverter(GUIUtil.getPaymentAccountsComboBoxStringConverter());
        paymentAccountsComboBox.setButtonCell(GUIUtil.getComboBoxButtonCell(Res.get(""shared.selectTradingAccount""),
                paymentAccountsComboBox, false));
        paymentAccountsComboBox.setCellFactory(getPaymentAccountListCellFactory(paymentAccountsComboBox));

        editOfferElements.add(paymentAccountVBox);
    }

    @Override
    protected void addAmountPriceGroup() {
        TitledGroupBg amountTitledGroupBg = addTitledGroupBg(gridPane, ++gridRow, 2,
                Res.get(""createOffer.setAmountPrice""), Layout.COMPACT_GROUP_DISTANCE);
        GridPane.setColumnSpan(amountTitledGroupBg, 2);

        addFirstRow();
        addSecondRow();
    }

    private void addFirstRow() {
        // amountBox
        Tuple3<HBox, InputTextField, Label> amountValueCurrencyBoxTuple = getEditableValueBox(Res.get(""createOffer.amount.prompt""));
        amountValueCurrencyBox = amountValueCurrencyBoxTuple.first;
        amountTextField = amountValueCurrencyBoxTuple.second;
        editOfferElements.add(amountTextField);
        Label amountBtcLabel = amountValueCurrencyBoxTuple.third;
        editOfferElements.add(amountBtcLabel);
        Tuple2<Label, VBox> amountInputBoxTuple = getTradeInputBox(amountValueCurrencyBox, """");
        amountDescriptionLabel = amountInputBoxTuple.first;
        editOfferElements.add(amountDescriptionLabel);
        VBox amountBox = amountInputBoxTuple.second;

        // x
        xLabel = new Label();
        xIcon = getIconForLabel(MaterialDesignIcon.CLOSE, ""2em"", xLabel);
        xIcon.getStyleClass().add(""opaque-icon"");
        xLabel.getStyleClass().add(""opaque-icon-character"");

        // price
        Tuple3<HBox, InputTextField, Label> priceValueCurrencyBoxTuple = getEditableValueBox(
                Res.get(""createOffer.price.prompt""));
        priceValueCurrencyBox = priceValueCurrencyBoxTuple.first;
        priceTextField = priceValueCurrencyBoxTuple.second;
        editOfferElements.add(priceTextField);
        priceCurrencyLabel = priceValueCurrencyBoxTuple.third;
        priceCurrencyLabel.setText(""BTC"");
        editOfferElements.add(priceCurrencyLabel);
        Tuple2<Label, VBox> priceInputBoxTuple = getTradeInputBox(priceValueCurrencyBox, """");
        priceDescriptionLabel = priceInputBoxTuple.first;
        priceDescriptionLabel.setText(CurrencyUtil.getPriceWithCurrencyCode(BSQ, ""shared.fixedPriceInCurForCur""));


        getSmallIconForLabel(MaterialDesignIcon.LOCK, priceDescriptionLabel, ""small-icon-label"");

        editOfferElements.add(priceDescriptionLabel);
        VBox fixedPriceBox = priceInputBoxTuple.second;

        // =
        resultLabel = new AutoTooltipLabel(""="");
        resultLabel.getStyleClass().add(""opaque-icon-character"");

        // volume
        Tuple3<HBox, InfoInputTextField, Label> volumeValueCurrencyBoxTuple = getEditableValueBoxWithInfo(Res.get(""createOffer.volume.prompt""));
        volumeValueCurrencyBox = volumeValueCurrencyBoxTuple.first;
        InfoInputTextField volumeInfoInputTextField = volumeValueCurrencyBoxTuple.second;
        volumeTextField = volumeInfoInputTextField.getInputTextField();
        editOfferElements.add(volumeTextField);
        volumeCurrencyLabel = volumeValueCurrencyBoxTuple.third;
        volumeCurrencyLabel.setText(BSQ);
        editOfferElements.add(volumeCurrencyLabel);
        Tuple2<Label, VBox> volumeInputBoxTuple = getTradeInputBox(volumeValueCurrencyBox, """");
        volumeDescriptionLabel = volumeInputBoxTuple.first;
        editOfferElements.add(volumeDescriptionLabel);
        VBox volumeBox = volumeInputBoxTuple.second;

        firstRowHBox = new HBox();
        firstRowHBox.setSpacing(5);
        firstRowHBox.setAlignment(Pos.CENTER_LEFT);
        firstRowHBox.getChildren().addAll(amountBox, xLabel, fixedPriceBox, resultLabel, volumeBox);
        GridPane.setColumnSpan(firstRowHBox, 2);
        GridPane.setRowIndex(firstRowHBox, gridRow);
        GridPane.setMargin(firstRowHBox, new Insets(Layout.COMPACT_FIRST_ROW_AND_GROUP_DISTANCE, 10, 0, 0));
        gridPane.getChildren().add(firstRowHBox);
    }

    private void addSecondRow() {
        Tuple3<HBox, InputTextField, Label> amountValueCurrencyBoxTuple = getEditableValueBox(Res.get(""createOffer.amount.prompt""));
        minAmountValueCurrencyBox = amountValueCurrencyBoxTuple.first;
        minAmountTextField = amountValueCurrencyBoxTuple.second;
        editOfferElements.add(minAmountTextField);
        Label minAmountBtcLabel = amountValueCurrencyBoxTuple.third;
        editOfferElements.add(minAmountBtcLabel);

        Tuple2<Label, VBox> amountInputBoxTuple = getTradeInputBox(minAmountValueCurrencyBox, Res.get(""createOffer.amountPriceBox.minAmountDescription""));

        secondRowHBox = new HBox();
        secondRowHBox.setSpacing(5);
        secondRowHBox.setAlignment(Pos.CENTER_LEFT);
        secondRowHBox.getChildren().add(amountInputBoxTuple.second);
        GridPane.setColumnSpan(secondRowHBox, 2);
        GridPane.setRowIndex(secondRowHBox, ++gridRow);
        GridPane.setColumnIndex(secondRowHBox, 0);
        GridPane.setMargin(secondRowHBox, new Insets(0, 10, 10, 0));
        gridPane.getChildren().add(secondRowHBox);
    }

    @Override
    protected void addNextAndCancelButtons() {
        super.addNextAndCancelButtons();

        editOfferElements.add(nextButton);
        editOfferElements.add(cancelButton1);
    }

    @Override
    protected void addFeeInfoGroup() {
        super.addFeeInfoGroup();

        miningPowBusyAnimation = new BusyAnimation(false);
        miningPowLabel = new AutoTooltipLabel(Res.get(""createOffer.bsqSwap.mintingPow""));
        HBox.setMargin(miningPowLabel, new Insets(6, 0, 0, 0));
        actionButtonBar.getChildren().addAll(miningPowBusyAnimation, miningPowLabel);
    }

    @Override
    protected void updateOfferElementsStyle() {
        super.updateOfferElementsStyle();

        GridPane.setColumnSpan(firstRowHBox, 2);
        GridPane.setColumnSpan(secondRowHBox, 1);
    }

    @Override
    protected void checkForMissingFunds(Coin missing) {
        if (missing.isPositive() && !isMissingFundsPopupOpen) {
            isMissingFundsPopupOpen = true;
            String wallet = model.dataModel.isBuyer() ? ""BSQ"" : ""BTC"";
            String warning = Res.get(""createOffer.bsqSwap.missingFunds.maker"",
                    wallet, model.getMissingFunds(missing));
            new Popup().warning(warning)
                    .onClose(() -> {
                        isMissingFundsPopupOpen = false;
                    })
                    .show();
        }
    }
}",1,64 2000 64 2001 777 587 2002 650 2003 60 2004 62 123 773 2005 2006 44 2007 44 2008 59 773 2009 2010 59 773 2011 2012 59 773 2013 60 2014 62 2015 59 773 2016 60 2017 62 2018 44 2019 44 2020 44 2021 59 773 2016 60 2022 62 2023 59 773 2024 60 2025 62 2026 59 773 657 2027 60 2028 62 2029 61 744 2030 60 62 40 41 59 773 570 2031 59 64 2032 773 2033 46 2034 2035 59 331 330 331 64 2036 777 2002 40 2004 2037 44 2038 2039 44 2040 2041 41 123 818 40 2037 44 2039 44 2041 41 59 125 64 2042 775 865 2043 40 41 123 818 46 2043 40 41 59 125 64 2042 775 865 2044 40 41 123 818 46 2044 40 41 59 688 40 2037 46 2045 46 2046 40 41 41 123 2047 40 41 59 125 125 773 865 2048 40 41 123 688 40 33 2031 41 123 2031 61 2049 59 2015 46 2050 40 1504 41 59 2051 40 41 59 2052 40 41 59 2015 46 2053 40 2037 46 2054 46 2055 40 41 41 59 2015 46 2056 40 41 46 2057 40 2037 46 2054 46 2058 40 41 41 59 2059 40 41 59 2022 2060 61 362 59 688 40 2061 46 2062 40 2060 41 41 123 744 2063 40 41 46 2064 40 2065 46 2066 40 362 41 43 362 43 2065 46 2066 40 362 41 41 46 2067 40 1504 41 46 2068 40 2065 46 2066 40 362 41 41 46 2069 40 2060 41 46 2070 40 41 59 125 125 125 64 2042 775 865 2071 40 41 123 818 46 2071 40 41 59 688 40 2031 41 123 2031 61 2072 59 2073 40 41 59 2074 40 41 59 125 125 331 330 331 777 865 2075 40 2076 2077 44 2033 46 2034 2035 44 64 2078 2079 2080 41 123 823 46 2035 61 2035 59 2037 46 2075 40 2080 340 2081 63 2080 46 2082 40 41 58 2077 44 2080 41 59 688 40 2037 46 2083 46 2084 40 41 41 123 2085 46 2086 40 362 41 59 2085 46 2087 40 2088 46 2089 40 362 44 2088 46 2089 40 362 41 41 41 59 2090 46 2091 40 2088 46 2089 40 362 44 2092 41 41 59 125 630 123 2093 46 2094 40 362 41 59 2093 46 2095 40 2096 46 2097 40 362 44 2096 46 2097 40 362 41 41 41 59 2098 46 2099 40 2096 46 2097 40 362 44 2100 41 41 59 125 2022 2101 61 2102 46 2103 40 362 44 2037 46 2083 46 2084 40 41 63 2102 46 2103 40 362 41 58 2102 46 2103 40 362 41 41 59 2104 46 2105 40 2101 41 59 125 331 330 331 64 2042 777 865 2106 40 570 2107 41 123 688 40 2107 307 33 2037 46 2108 46 2109 40 41 41 123 2048 40 41 59 125 2031 61 2107 59 2037 46 2108 46 2106 40 2107 41 59 125 64 2042 775 865 2110 40 41 123 2111 40 41 59 125 64 2042 775 865 2112 40 41 123 818 46 2112 40 41 59 2015 46 2113 40 2114 41 59 2015 46 2115 40 2114 41 59 2029 46 2116 40 2117 45 62 123 2117 46 2115 40 2114 41 59 2117 46 2118 40 2119 41 59 125 41 59 2120 46 2121 40 2037 46 2122 40 41 41 59 2120 46 2123 40 2124 40 41 41 59 2125 46 2121 40 2037 46 2126 40 41 41 59 2125 46 2123 40 2127 40 41 41 59 2037 46 2128 46 2129 40 41 46 2130 40 2131 41 59 2132 40 2037 46 2128 46 2129 40 41 46 2133 40 41 41 59 330 330 330 2037 46 2134 40 41 59 125 64 2042 775 865 2135 40 41 123 688 40 33 2037 46 2136 46 2137 40 41 41 123 792 59 125 688 40 2138 46 2139 40 41 41 123 2037 46 2140 40 41 59 2141 40 41 59 792 59 125 2041 46 2142 40 2037 58 58 2142 41 46 2143 40 2037 46 2136 46 2144 41 59 2145 40 41 59 125 64 2042 775 865 2146 40 41 123 2147 40 41 59 125 773 865 2148 40 41 123 2014 2149 61 2015 46 2150 40 41 46 2151 40 41 59 330 688 40 2149 340 2152 307 33 2149 46 2153 40 41 46 2154 40 41 41 123 2155 40 41 59 688 40 2035 340 2152 41 123 2035 46 2156 40 2149 46 2157 40 41 44 2149 46 2153 40 41 41 59 125 125 125 331 330 331 64 2042 775 865 2158 40 41 123 818 46 2158 40 41 59 2159 61 40 2160 44 2161 44 2162 41 45 62 123 2037 46 2163 40 2161 44 2162 41 59 2164 46 2165 40 2037 46 2166 46 2167 40 41 41 59 125 59 2018 61 40 2160 44 2161 44 2162 41 45 62 123 2037 46 2168 40 2161 44 2162 41 59 2006 46 2169 40 2037 46 2170 46 2171 40 41 41 59 125 59 2020 61 40 2160 44 2161 44 2162 41 45 62 123 2037 46 2172 40 2161 44 2162 41 59 2007 46 2173 40 2037 46 2174 46 2175 40 41 41 59 125 59 2019 61 40 2160 44 2161 44 2162 41 45 62 123 2037 46 2176 40 2161 44 2162 41 59 2008 46 2177 40 2037 46 2178 46 2179 40 41 41 59 125 59 2023 61 40 2160 44 2161 44 2162 41 45 62 123 688 40 2162 340 2180 41 2181 46 2182 40 40 41 45 62 744 2183 40 41 46 2184 40 2185 46 2186 40 362 44 2037 46 2187 46 2186 40 41 41 41 46 2188 40 41 44 1503 44 2189 46 2190 41 59 125 59 2026 61 2191 45 62 2148 40 41 59 2021 61 40 2160 44 2161 44 2162 41 45 62 123 688 40 2192 46 2193 40 41 41 123 2194 40 41 59 125 630 688 40 2162 41 123 330 2022 2195 61 362 59 688 40 2196 46 2197 40 2195 41 41 123 2198 46 2199 40 40 41 45 62 744 2200 40 41 46 2201 40 2202 46 2203 40 362 41 41 46 2204 40 2202 46 2203 40 362 41 41 46 2205 40 2195 41 46 2206 40 362 41 46 2135 40 40 41 45 62 123 2198 46 2199 40 40 41 45 62 2039 46 2207 40 2208 46 587 44 2209 46 587 44 2210 46 587 41 44 1503 44 2211 46 2212 41 59 2213 40 41 59 125 41 46 2214 40 823 58 58 2215 41 46 2216 40 41 44 1503 44 2217 46 2218 41 59 125 630 123 2219 40 41 59 125 125 125 59 125 64 2042 775 865 2220 40 41 123 330 2221 46 2222 40 41 46 2223 40 2224 41 59 2006 46 2222 40 41 46 2223 40 2018 41 59 2007 46 2222 40 41 46 2223 40 2020 41 59 2008 46 2222 40 41 46 2223 40 2019 41 59 330 2037 46 2225 46 2223 40 2023 41 59 2037 46 2226 46 2223 40 2021 41 59 330 2015 46 2227 40 2026 41 59 125 64 2042 775 865 2228 40 41 123 818 46 2228 40 41 59 330 2229 46 2230 40 41 46 2231 40 2232 41 59 2006 46 2230 40 41 46 2231 40 2018 41 59 2007 46 2230 40 41 46 2231 40 2020 41 59 2008 46 2230 40 41 46 2231 40 2019 41 59 330 2037 46 2233 46 2231 40 2023 41 59 2037 46 2234 46 2231 40 2021 41 59 330 2015 46 2235 40 2236 41 59 125 64 2042 775 865 2237 40 41 123 2238 46 2239 40 41 46 2240 40 2037 46 2241 41 59 2006 46 2239 40 41 46 2240 40 2037 46 2242 41 59 2007 46 2239 40 41 46 2240 40 2037 46 2243 41 59 2008 46 2239 40 41 46 2240 40 2037 46 2244 41 59 2008 46 2245 40 41 46 2246 40 2037 46 2247 41 59 2248 46 2239 40 41 46 2246 40 2037 46 2249 40 41 41 59 2250 46 2239 40 41 46 2246 40 2037 46 2251 40 41 41 59 330 2238 46 2252 40 41 46 2246 40 2037 46 2253 41 59 2006 46 2252 40 41 46 2246 40 2037 46 2254 41 59 2007 46 2252 40 41 46 2246 40 2037 46 2255 41 59 2008 46 2252 40 41 46 2246 40 2037 46 2256 41 59 2257 46 2258 40 41 46 2246 40 2037 46 2259 41 59 2260 46 2258 40 41 46 2246 40 2037 46 2261 41 59 2262 46 2258 40 41 46 2246 40 2037 46 2263 41 59 330 2264 46 2265 40 41 46 2246 40 2264 46 2266 40 41 41 59 2267 46 2265 40 41 46 2246 40 2267 46 2266 40 41 41 59 2010 46 2266 40 41 46 2246 40 2037 46 2268 41 59 2010 46 2265 40 41 46 2246 40 2037 46 2268 41 59 2012 46 2266 40 41 46 2246 40 2037 46 2268 41 59 2012 46 2265 40 41 46 2246 40 2037 46 2268 41 59 2012 46 2269 40 41 46 2246 40 2037 46 2268 41 59 125 64 2042 775 865 2270 40 41 123 2271 46 2272 40 41 46 2273 40 2037 46 2274 41 59 2006 46 2272 40 41 46 2273 40 2037 46 2275 41 59 2007 46 2272 40 41 46 2273 40 2037 46 2276 41 59 2008 46 2272 40 41 46 2273 40 2037 46 2277 41 59 2008 46 2278 40 41 46 2273 40 2037 46 2277 41 59 2279 46 2272 40 41 46 2280 40 41 59 2281 46 2272 40 41 46 2280 40 41 59 330 2271 46 2282 40 41 46 2280 40 41 59 2006 46 2282 40 41 46 2280 40 41 59 2007 46 2282 40 41 46 2280 40 41 59 2008 46 2282 40 41 46 2280 40 41 59 2283 46 2284 40 41 46 2280 40 41 59 2285 46 2284 40 41 46 2280 40 41 59 2286 46 2284 40 41 46 2280 40 41 59 330 2287 46 2288 40 41 46 2280 40 41 59 2289 46 2288 40 41 46 2280 40 41 59 2010 46 2290 40 41 46 2280 40 41 59 2010 46 2288 40 41 46 2280 40 41 59 2012 46 2290 40 41 46 2280 40 41 59 2012 46 2288 40 41 46 2280 40 41 59 2012 46 2291 40 41 46 2280 40 41 59 125 331 330 331 64 2042 775 865 2292 40 41 123 2293 61 2294 40 2295 44 2296 44 1501 44 2297 46 2298 40 362 41 41 59 2299 46 2300 40 2293 44 1502 41 59 2301 2302 61 744 2301 40 41 59 2302 46 2303 40 2304 46 2305 41 59 2302 46 2306 40 1503 41 59 2302 46 2307 40 744 2308 40 1502 44 1500 44 1503 44 1500 41 41 59 2309 60 2310 44 2009 44 2013 60 2014 356 2311 61 2312 40 2297 46 2298 40 362 41 44 2297 46 2298 40 362 41 41 59 2309 60 2009 44 2313 44 2310 62 2314 61 2315 40 2295 44 2296 44 2297 46 2298 40 362 41 44 2316 44 1502 41 59 2317 61 2314 46 2318 59 2319 61 2311 46 2320 59 2302 46 2321 40 41 46 2322 40 2319 44 2317 41 59 2299 46 2323 40 2302 44 2296 41 59 2299 46 2300 40 2302 44 1502 41 59 2299 46 2324 40 2302 44 744 2308 40 2325 46 2326 44 1500 44 1500 44 1500 41 41 59 2295 46 2321 40 41 46 2327 40 2302 41 59 2319 46 2328 40 1504 41 59 2015 61 2311 46 2318 59 2015 46 2328 40 2319 46 2329 40 41 41 59 2015 46 2330 40 2319 46 2329 40 41 41 59 2015 46 2331 40 2332 46 2333 40 41 41 59 2015 46 2334 40 2332 46 2335 40 2297 46 2298 40 362 41 44 2015 44 2336 41 41 59 2015 46 2337 40 2338 40 2015 41 41 59 2029 46 2327 40 2319 41 59 125 64 2042 775 865 2339 40 41 123 2340 2341 61 2342 40 2343 44 349 2344 44 1502 44 2345 46 2346 40 362 41 44 2347 46 2348 41 59 2349 46 2350 40 2341 44 1502 41 59 2351 40 41 59 2352 40 41 59 125 773 865 2353 40 41 123 330 2354 60 2355 44 2005 44 2009 62 2356 61 2357 40 2358 46 2359 40 362 41 41 59 2360 61 2356 46 2361 59 2362 61 2356 46 2363 59 2029 46 2364 40 2362 41 59 2009 2365 61 2356 46 2366 59 2029 46 2364 40 2365 41 59 2367 60 2009 44 2368 62 2369 61 2370 40 2360 44 362 41 59 2371 61 2369 46 2361 59 2029 46 2364 40 2371 41 59 2368 2372 61 2369 46 2363 59 330 2373 61 744 2009 40 41 59 2374 61 2375 40 2376 46 2377 44 362 44 2373 41 59 2374 46 2378 40 41 46 2364 40 362 41 59 2373 46 2378 40 41 46 2364 40 362 41 59 330 2354 60 2355 44 2005 44 2009 62 2379 61 2357 40 2358 46 2359 40 362 41 41 59 2380 61 2379 46 2361 59 2007 61 2379 46 2363 59 2029 46 2364 40 2007 41 59 2381 61 2379 46 2366 59 2381 46 2382 40 362 41 59 2029 46 2364 40 2381 41 59 2367 60 2009 44 2368 62 2383 61 2370 40 2380 44 362 41 59 2384 61 2383 46 2361 59 2384 46 2382 40 2385 46 2386 40 2387 44 362 41 41 59 2388 40 2376 46 2389 44 2384 44 362 41 59 2029 46 2364 40 2384 41 59 2368 2390 61 2383 46 2363 59 330 2391 61 744 2392 40 362 41 59 2391 46 2378 40 41 46 2364 40 362 41 59 330 2354 60 2355 44 2393 44 2009 62 2394 61 2395 40 2358 46 2359 40 362 41 41 59 2396 61 2394 46 2361 59 2393 2397 61 2394 46 2363 59 2008 61 2397 46 2398 40 41 59 2029 46 2364 40 2008 41 59 2399 61 2394 46 2366 59 2399 46 2382 40 2387 41 59 2029 46 2364 40 2399 41 59 2367 60 2009 44 2368 62 2400 61 2370 40 2396 44 362 41 59 2401 61 2400 46 2361 59 2029 46 2364 40 2401 41 59 2368 2402 61 2400 46 2363 59 2403 61 744 2355 40 41 59 2403 46 2404 40 1502 41 59 2403 46 2405 40 2406 46 2407 41 59 2403 46 2408 40 41 46 2409 40 2372 44 2373 44 2390 44 2391 44 2402 41 59 2410 46 2411 40 2403 44 1502 41 59 2410 46 2412 40 2403 44 2413 41 59 2410 46 2414 40 2403 44 744 2415 40 2416 46 2417 44 1502 44 1500 44 1500 41 41 59 2418 46 2408 40 41 46 2364 40 2403 41 59 125 773 865 2419 40 41 123 2420 60 2421 44 2005 44 2009 62 2422 61 2423 40 2424 46 2425 40 362 41 41 59 2426 61 2422 46 2427 59 2006 61 2422 46 2428 59 2029 46 2429 40 2006 41 59 2009 2430 61 2422 46 2431 59 2029 46 2429 40 2430 41 59 2432 60 2009 44 2433 62 2434 61 2435 40 2426 44 2424 46 2425 40 362 41 41 59 2436 61 744 2421 40 41 59 2436 46 2437 40 1502 41 59 2436 46 2438 40 2439 46 2440 41 59 2436 46 2441 40 41 46 2429 40 2434 46 2428 41 59 2442 46 2443 40 2436 44 1502 41 59 2442 46 2444 40 2436 44 349 2445 41 59 2442 46 2446 40 2436 44 1500 41 59 2442 46 2447 40 2436 44 744 2448 40 1500 44 1502 44 1502 44 1500 41 41 59 2449 46 2441 40 41 46 2429 40 2436 41 59 125 64 2042 775 865 2450 40 41 123 818 46 2450 40 41 59 2029 46 2451 40 2452 41 59 2029 46 2451 40 2453 41 59 125 64 2042 775 865 2454 40 41 123 818 46 2454 40 41 59 2012 61 744 2011 40 2455 41 59 2010 61 744 2456 40 2457 46 2458 40 362 41 41 59 2459 46 2460 40 2010 44 744 2461 40 1502 44 1500 44 1500 44 1500 41 41 59 2462 46 2463 40 41 46 2464 40 2012 44 2010 41 59 125 64 2042 775 865 2465 40 41 123 818 46 2465 40 41 59 2466 46 2467 40 2468 44 1502 41 59 2466 46 2467 40 2469 44 1501 41 59 125 64 2042 775 865 2470 40 2471 2472 41 123 688 40 2472 46 2473 40 41 307 33 2474 41 123 2474 61 2475 59 2022 2476 61 2037 46 2477 46 2478 40 41 63 362 58 362 59 2022 2479 61 2480 46 2481 40 362 44 2476 44 2037 46 2482 40 2472 41 41 59 744 2483 40 41 46 2479 40 2479 41 46 2484 40 40 41 45 62 123 2474 61 2485 59 125 41 46 2486 40 41 59 125 125 125 ,"{'AvgLine': 18, 'CountLine': 524, 'CountStmt': 293, 'MaxNesting': 2, 'AvgLineCode': 15, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 250, 'MaxEssential': 3, 'SumEssential': 36, 'AvgCyclomatic': 1, 'CountLineCode': 396, 'CountStmtDecl': 60, 'MaxCyclomatic': 4, 'SumCyclomatic': 52, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 93, 'CountSemicolon': 252, 'CountDeclMethod': 25, 'CountLineCodeExe': 294, 'CountLineComment': 35, 'CountClassCoupled': 55, 'CountClassDerived': 0, 'CountLineCodeDecl': 94, 'CountDeclMethodAll': 71, 'MaxInheritanceTree': 6, 'RatioCommentToCode': '0.09', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 55, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 52, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 25, 'CountDeclMethodProtected': 18, 'CountClassCoupledModified': 55, 'CountDeclInstanceVariable': 15, 'PercentLackOfCohesionModified': 71}"
26103,Java,"public abstract class ServerPacket extends WritablePacket<GameClient> {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServerPacket.class);

    private final InventorySlot[] PAPERDOLL_ORDER_AUGMENT = {
        RIGHT_HAND,
        LEFT_HAND,
        TWO_HAND
    };

    public InventorySlot[] getPaperdollOrder() {
        return InventorySlot.cachedValues();
    }

    public InventorySlot[] getPaperdollOrderAugument() {
        return PAPERDOLL_ORDER_AUGMENT;
    }

    /**
     * Sends this packet to the target player, useful for lambda operations like <br>
     * {@code World.getInstance().getPlayers().forEach(packet::sendTo)}
     *
     * @param player to send the packet
     */
    public void sendTo(Player player) {
        player.sendPacket(this);
    }

    @Override
    protected boolean write(GameClient client, WritableBuffer buffer) {
        try {
            writeImpl(client, buffer);
            return true;
        } catch (Exception e) {
            LOGGER.error(""[{}] Error writing packet {} to client {}]]"", GameServer.fullVersion, this, client, e);
        }
        return false;
    }

    public void runImpl(Player player) {
        // TODO remove this
    }

    protected void writeId(ServerPacketId packet, WritableBuffer buffer) {
        buffer.writeByte(packet.getId());
    }

    protected void writeId(ServerExPacketId exPacket, WritableBuffer buffer) {
        buffer.writeByte(0xFE);
        buffer.writeShort(exPacket.getId());
    }

    protected void writeOptionalD(int value, WritableBuffer buffer) {
        if (value >= Short.MAX_VALUE) {
            buffer.writeShort(Short.MAX_VALUE);
            buffer.writeInt(value);
        } else {
            buffer.writeShort(value);
        }
    }

    protected void writeLocation(ILocational location, WritableBuffer buffer) {
        buffer.writeInt(location.getX());
        buffer.writeInt(location.getY());
        buffer.writeInt(location.getZ());
    }

    protected abstract void writeImpl(GameClient client, WritableBuffer buffer) throws Exception;
}",1,777 539 587 2000 650 2001 60 2002 62 123 773 809 657 2003 2004 61 2005 46 2006 40 2000 46 587 41 59 773 657 2007 91 93 2008 61 123 2009 44 2010 44 2011 125 59 777 2007 91 93 2012 40 41 123 792 2007 46 2013 40 41 59 125 777 2007 91 93 2014 40 41 123 792 2008 59 125 306 777 865 2015 40 2016 2017 41 123 2017 46 2018 40 823 41 59 125 64 2019 775 570 2020 40 2002 2021 44 2022 2023 41 123 830 123 2024 40 2021 44 2023 41 59 792 2025 59 125 580 40 2026 2027 41 123 2004 46 2028 40 362 44 2029 46 2030 44 823 44 2021 44 2027 41 59 125 792 2031 59 125 777 865 2032 40 2016 2017 41 123 330 125 775 865 2033 40 2034 2035 44 2022 2023 41 123 2023 46 2036 40 2035 46 2037 40 41 41 59 125 775 865 2033 40 2038 2039 44 2022 2023 41 123 2023 46 2040 40 1504 41 59 2023 46 2041 40 2039 46 2042 40 41 41 59 125 775 865 2043 40 704 2044 44 2022 2023 41 123 688 40 2044 325 2045 46 2046 41 123 2023 46 2047 40 2045 46 2046 41 59 2023 46 2048 40 2044 41 59 125 630 123 2023 46 2049 40 2044 41 59 125 125 775 865 2050 40 2051 2052 44 2022 2023 41 123 2023 46 2053 40 2052 46 2054 40 41 41 59 2023 46 2053 40 2052 46 2055 40 41 41 59 2023 46 2053 40 2052 46 2056 40 41 41 59 125 775 539 865 2057 40 2002 2021 44 2022 2023 41 826 2058 59 125 ,"{'AvgLine': 5, 'CountLine': 73, 'CountStmt': 31, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 19, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 50, 'CountStmtDecl': 13, 'MaxCyclomatic': 2, 'SumCyclomatic': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 12, 'CountSemicolon': 19, 'CountDeclMethod': 10, 'CountLineCodeExe': 24, 'CountLineComment': 11, 'CountClassCoupled': 12, 'CountClassDerived': 503, 'CountLineCodeDecl': 17, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.22', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 88, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 6, 'CountClassCoupledModified': 12, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 88}"
4357,Java,"@Slf4j
@Data
@AllArgsConstructor
public class UserPayload implements PersistableEnvelope {
    @Nullable
    private String accountId;
    @Nullable
    private Set<PaymentAccount> paymentAccounts = new HashSet<>();
    @Nullable
    private PaymentAccount currentPaymentAccount;
    @Nullable
    private List<String> acceptedLanguageLocaleCodes = new ArrayList<>();
    @Nullable
    private Alert developersAlert;
    @Nullable
    private Alert displayedAlert;
    @Nullable
    private Filter developersFilter;
    @Nullable
    private Arbitrator registeredArbitrator;
    @Nullable
    private Mediator registeredMediator;
    @Nullable
    private List<Arbitrator> acceptedArbitrators = new ArrayList<>();
    @Nullable
    private List<Mediator> acceptedMediators = new ArrayList<>();
    @Nullable
    private PriceAlertFilter priceAlertFilter;
    @Nullable
    private List<MarketAlertFilter> marketAlertFilters = new ArrayList<>();

    // Added v1.2.0
    @Nullable
    private RefundAgent registeredRefundAgent;
    @Nullable
    private List<RefundAgent> acceptedRefundAgents = new ArrayList<>();

    // Added at 1.5.3
    // Generic map for persisting various UI states. We keep values un-typed as string to
    // provide sufficient flexibility.
    private Cookie cookie = new Cookie();

    public UserPayload() {
    }

    @Override
    public protobuf.PersistableEnvelope toProtoMessage() {
        protobuf.UserPayload.Builder builder = protobuf.UserPayload.newBuilder();
        Optional.ofNullable(accountId).ifPresent(e -> builder.setAccountId(accountId));
        Optional.ofNullable(paymentAccounts)
                .ifPresent(e -> builder.addAllPaymentAccounts(ProtoUtil.collectionToProto(paymentAccounts, protobuf.PaymentAccount.class)));
        Optional.ofNullable(currentPaymentAccount)
                .ifPresent(e -> builder.setCurrentPaymentAccount(currentPaymentAccount.toProtoMessage()));
        Optional.ofNullable(acceptedLanguageLocaleCodes)
                .ifPresent(e -> builder.addAllAcceptedLanguageLocaleCodes(acceptedLanguageLocaleCodes));
        Optional.ofNullable(developersAlert)
                .ifPresent(developersAlert -> builder.setDevelopersAlert(developersAlert.toProtoMessage().getAlert()));
        Optional.ofNullable(displayedAlert)
                .ifPresent(displayedAlert -> builder.setDisplayedAlert(displayedAlert.toProtoMessage().getAlert()));
        Optional.ofNullable(developersFilter)
                .ifPresent(developersFilter -> builder.setDevelopersFilter(developersFilter.toProtoMessage().getFilter()));
        Optional.ofNullable(registeredArbitrator)
                .ifPresent(registeredArbitrator -> builder.setRegisteredArbitrator(registeredArbitrator.toProtoMessage().getArbitrator()));
        Optional.ofNullable(registeredMediator)
                .ifPresent(registeredMediator -> builder.setRegisteredMediator(registeredMediator.toProtoMessage().getMediator()));
        Optional.ofNullable(acceptedArbitrators)
                .ifPresent(e -> builder.addAllAcceptedArbitrators(ProtoUtil.collectionToProto(acceptedArbitrators,
                        message -> ((protobuf.StoragePayload) message).getArbitrator())));
        Optional.ofNullable(acceptedMediators)
                .ifPresent(e -> builder.addAllAcceptedMediators(ProtoUtil.collectionToProto(acceptedMediators,
                        message -> ((protobuf.StoragePayload) message).getMediator())));
        Optional.ofNullable(priceAlertFilter).ifPresent(priceAlertFilter -> builder.setPriceAlertFilter(priceAlertFilter.toProtoMessage()));
        Optional.ofNullable(marketAlertFilters)
                .ifPresent(e -> builder.addAllMarketAlertFilters(ProtoUtil.collectionToProto(marketAlertFilters, protobuf.MarketAlertFilter.class)));

        Optional.ofNullable(registeredRefundAgent)
                .ifPresent(registeredRefundAgent -> builder.setRegisteredRefundAgent(registeredRefundAgent.toProtoMessage().getRefundAgent()));
        Optional.ofNullable(acceptedRefundAgents)
                .ifPresent(e -> builder.addAllAcceptedRefundAgents(ProtoUtil.collectionToProto(acceptedRefundAgents,
                        message -> ((protobuf.StoragePayload) message).getRefundAgent())));
        Optional.ofNullable(cookie).ifPresent(e -> builder.putAllCookie(cookie.toProtoMessage()));
        return protobuf.PersistableEnvelope.newBuilder().setUserPayload(builder).build();
    }

    public static UserPayload fromProto(protobuf.UserPayload proto, CoreProtoResolver coreProtoResolver) {
        return new UserPayload(
                ProtoUtil.stringOrNullFromProto(proto.getAccountId()),
                proto.getPaymentAccountsList().isEmpty() ? new HashSet<>() : new HashSet<>(proto.getPaymentAccountsList().stream()
                        .map(e -> PaymentAccount.fromProto(e, coreProtoResolver))
                        .filter(Objects::nonNull)
                        .collect(Collectors.toSet())),
                proto.hasCurrentPaymentAccount() ? PaymentAccount.fromProto(proto.getCurrentPaymentAccount(), coreProtoResolver) : null,
                proto.getAcceptedLanguageLocaleCodesList().isEmpty() ? new ArrayList<>() : new ArrayList<>(proto.getAcceptedLanguageLocaleCodesList()),
                proto.hasDevelopersAlert() ? Alert.fromProto(proto.getDevelopersAlert()) : null,
                proto.hasDisplayedAlert() ? Alert.fromProto(proto.getDisplayedAlert()) : null,
                proto.hasDevelopersFilter() ? Filter.fromProto(proto.getDevelopersFilter()) : null,
                proto.hasRegisteredArbitrator() ? Arbitrator.fromProto(proto.getRegisteredArbitrator()) : null,
                proto.hasRegisteredMediator() ? Mediator.fromProto(proto.getRegisteredMediator()) : null,
                proto.getAcceptedArbitratorsList().isEmpty() ? new ArrayList<>() : new ArrayList<>(proto.getAcceptedArbitratorsList().stream()
                        .map(Arbitrator::fromProto)
                        .collect(Collectors.toList())),
                proto.getAcceptedMediatorsList().isEmpty() ? new ArrayList<>() : new ArrayList<>(proto.getAcceptedMediatorsList().stream()
                        .map(Mediator::fromProto)
                        .collect(Collectors.toList())),
                PriceAlertFilter.fromProto(proto.getPriceAlertFilter()),
                proto.getMarketAlertFiltersList().isEmpty() ? new ArrayList<>() : new ArrayList<>(proto.getMarketAlertFiltersList().stream()
                        .map(e -> MarketAlertFilter.fromProto(e, coreProtoResolver))
                        .collect(Collectors.toSet())),
                proto.hasRegisteredRefundAgent() ? RefundAgent.fromProto(proto.getRegisteredRefundAgent()) : null,
                proto.getAcceptedRefundAgentsList().isEmpty() ? new ArrayList<>() : new ArrayList<>(proto.getAcceptedRefundAgentsList().stream()
                        .map(RefundAgent::fromProto)
                        .collect(Collectors.toList())),
                Cookie.fromProto(proto.getCookieMap())
        );
    }
}",1,64 2000 64 2001 64 2002 777 587 2003 693 2004 123 64 2005 773 2006 2007 59 64 2005 773 2008 60 2009 62 2010 61 744 2011 60 62 40 41 59 64 2005 773 2009 2012 59 64 2005 773 2013 60 2006 62 2014 61 744 2015 60 62 40 41 59 64 2005 773 2016 2017 59 64 2005 773 2016 2018 59 64 2005 773 2019 2020 59 64 2005 773 2021 2022 59 64 2005 773 2023 2024 59 64 2005 773 2013 60 2021 62 2025 61 744 2015 60 62 40 41 59 64 2005 773 2013 60 2023 62 2026 61 744 2015 60 62 40 41 59 64 2005 773 2027 2028 59 64 2005 773 2013 60 2029 62 2030 61 744 2015 60 62 40 41 59 330 64 2005 773 2031 2032 59 64 2005 773 2013 60 2031 62 2033 61 744 2015 60 62 40 41 59 330 330 330 773 2034 2035 61 744 2034 40 41 59 777 2003 40 41 123 125 64 2036 777 2037 46 2004 2038 40 41 123 2037 46 2003 46 2039 2040 61 2037 46 2003 46 2041 40 41 59 2042 46 2043 40 2007 41 46 2044 40 2045 45 62 2040 46 2046 40 2007 41 41 59 2042 46 2043 40 2010 41 46 2044 40 2045 45 62 2040 46 2047 40 2048 46 2049 40 2010 44 2037 46 2009 46 587 41 41 41 59 2042 46 2043 40 2012 41 46 2044 40 2045 45 62 2040 46 2050 40 2012 46 2038 40 41 41 41 59 2042 46 2043 40 2014 41 46 2044 40 2045 45 62 2040 46 2051 40 2014 41 41 59 2042 46 2043 40 2017 41 46 2044 40 2017 45 62 2040 46 2052 40 2017 46 2038 40 41 46 2053 40 41 41 41 59 2042 46 2043 40 2018 41 46 2044 40 2018 45 62 2040 46 2054 40 2018 46 2038 40 41 46 2053 40 41 41 41 59 2042 46 2043 40 2020 41 46 2044 40 2020 45 62 2040 46 2055 40 2020 46 2038 40 41 46 2056 40 41 41 41 59 2042 46 2043 40 2022 41 46 2044 40 2022 45 62 2040 46 2057 40 2022 46 2038 40 41 46 2058 40 41 41 41 59 2042 46 2043 40 2024 41 46 2044 40 2024 45 62 2040 46 2059 40 2024 46 2038 40 41 46 2060 40 41 41 41 59 2042 46 2043 40 2025 41 46 2044 40 2045 45 62 2040 46 2061 40 2048 46 2049 40 2025 44 2062 45 62 40 40 2037 46 2063 41 2062 41 46 2058 40 41 41 41 41 59 2042 46 2043 40 2026 41 46 2044 40 2045 45 62 2040 46 2064 40 2048 46 2049 40 2026 44 2062 45 62 40 40 2037 46 2063 41 2062 41 46 2060 40 41 41 41 41 59 2042 46 2043 40 2028 41 46 2044 40 2028 45 62 2040 46 2065 40 2028 46 2038 40 41 41 41 59 2042 46 2043 40 2030 41 46 2044 40 2045 45 62 2040 46 2066 40 2048 46 2049 40 2030 44 2037 46 2029 46 587 41 41 41 59 2042 46 2043 40 2032 41 46 2044 40 2032 45 62 2040 46 2067 40 2032 46 2038 40 41 46 2068 40 41 41 41 59 2042 46 2043 40 2033 41 46 2044 40 2045 45 62 2040 46 2069 40 2048 46 2049 40 2033 44 2062 45 62 40 40 2037 46 2063 41 2062 41 46 2068 40 41 41 41 41 59 2042 46 2043 40 2035 41 46 2044 40 2045 45 62 2040 46 2070 40 2035 46 2038 40 41 41 41 59 792 2037 46 2004 46 2041 40 41 46 2071 40 2040 41 46 2072 40 41 59 125 777 809 2003 2073 40 2037 46 2003 2074 44 2075 2076 41 123 792 744 2003 40 2077 46 2078 40 2074 46 2079 40 41 41 44 2074 46 2080 40 41 46 2081 40 41 63 744 2011 60 62 40 41 58 744 2011 60 62 40 2074 46 2080 40 41 46 2082 40 41 46 2083 40 2084 45 62 2009 46 2073 40 2084 44 2076 41 41 46 2085 40 2086 58 58 2087 41 46 2088 40 2089 46 2090 40 41 41 41 44 2074 46 2091 40 41 63 2009 46 2073 40 2074 46 2092 40 41 44 2076 41 58 2093 44 2074 46 2094 40 41 46 2081 40 41 63 744 2015 60 62 40 41 58 744 2015 60 62 40 2074 46 2094 40 41 41 44 2074 46 2095 40 41 63 2016 46 2073 40 2074 46 2096 40 41 41 58 2093 44 2074 46 2097 40 41 63 2016 46 2073 40 2074 46 2098 40 41 41 58 2093 44 2074 46 2099 40 41 63 2019 46 2073 40 2074 46 2100 40 41 41 58 2093 44 2074 46 2101 40 41 63 2021 46 2073 40 2074 46 2102 40 41 41 58 2093 44 2074 46 2103 40 41 63 2023 46 2073 40 2074 46 2104 40 41 41 58 2093 44 2074 46 2105 40 41 46 2081 40 41 63 744 2015 60 62 40 41 58 744 2015 60 62 40 2074 46 2105 40 41 46 2082 40 41 46 2083 40 2021 58 58 2073 41 46 2088 40 2089 46 2106 40 41 41 41 44 2074 46 2107 40 41 46 2081 40 41 63 744 2015 60 62 40 41 58 744 2015 60 62 40 2074 46 2107 40 41 46 2082 40 41 46 2083 40 2023 58 58 2073 41 46 2088 40 2089 46 2106 40 41 41 41 44 2027 46 2073 40 2074 46 2108 40 41 41 44 2074 46 2109 40 41 46 2081 40 41 63 744 2015 60 62 40 41 58 744 2015 60 62 40 2074 46 2109 40 41 46 2082 40 41 46 2083 40 2084 45 62 2029 46 2073 40 2084 44 2076 41 41 46 2088 40 2089 46 2090 40 41 41 41 44 2074 46 2110 40 41 63 2031 46 2073 40 2074 46 2111 40 41 41 58 2093 44 2074 46 2112 40 41 46 2081 40 41 63 744 2015 60 62 40 41 58 744 2015 60 62 40 2074 46 2112 40 41 46 2082 40 41 46 2083 40 2031 58 58 2073 41 46 2088 40 2089 46 2106 40 41 41 41 44 2034 46 2073 40 2074 46 2113 40 41 41 41 59 125 125 ,"{'AvgLine': 23, 'CountLine': 116, 'CountStmt': 39, 'MaxNesting': 0, 'AvgLineCode': 23, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 26, 'MaxEssential': 1, 'SumEssential': 21, 'AvgCyclomatic': 5, 'CountLineCode': 106, 'CountStmtDecl': 21, 'MaxCyclomatic': 14, 'SumCyclomatic': 34, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 6, 'CountSemicolon': 35, 'CountDeclMethod': 3, 'CountLineCodeExe': 70, 'CountLineComment': 4, 'CountClassCoupled': 28, 'CountClassDerived': 0, 'CountLineCodeDecl': 40, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 14, 'SumCyclomaticStrict': 34, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 5, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 14, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 34, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 28, 'CountDeclInstanceVariable': 16, 'PercentLackOfCohesionModified': 66}"
3573,Java,"public class TradeProtocolFactory {
    public static TradeProtocol getNewTradeProtocol(TradeModel tradeModel) {
        if (tradeModel instanceof BuyerAsMakerTrade) {
            return new BuyerAsMakerProtocol((BuyerAsMakerTrade) tradeModel);
        } else if (tradeModel instanceof BuyerAsTakerTrade) {
            return new BuyerAsTakerProtocol((BuyerAsTakerTrade) tradeModel);
        } else if (tradeModel instanceof SellerAsMakerTrade) {
            return new SellerAsMakerProtocol((SellerAsMakerTrade) tradeModel);
        } else if (tradeModel instanceof SellerAsTakerTrade) {
            return new SellerAsTakerProtocol((SellerAsTakerTrade) tradeModel);
        } else if (tradeModel instanceof BsqSwapBuyerAsMakerTrade) {
            return new BsqSwapBuyerAsMakerProtocol((BsqSwapBuyerAsMakerTrade) tradeModel);
        } else if (tradeModel instanceof BsqSwapBuyerAsTakerTrade) {
            return new BsqSwapBuyerAsTakerProtocol((BsqSwapBuyerAsTakerTrade) tradeModel);
        } else if (tradeModel instanceof BsqSwapSellerAsMakerTrade) {
            return new BsqSwapSellerAsMakerProtocol((BsqSwapSellerAsMakerTrade) tradeModel);
        } else if (tradeModel instanceof BsqSwapSellerAsTakerTrade) {
            return new BsqSwapSellerAsTakerProtocol((BsqSwapSellerAsTakerTrade) tradeModel);
        } else
            throw new IllegalStateException(""Trade not of expected type. Trade="" + tradeModel);
    }
}",1,777 587 2000 123 777 809 2001 2002 40 2003 2004 41 123 688 40 2004 702 2005 41 123 792 744 2006 40 40 2005 41 2004 41 59 125 630 688 40 2004 702 2007 41 123 792 744 2008 40 40 2007 41 2004 41 59 125 630 688 40 2004 702 2009 41 123 792 744 2010 40 40 2009 41 2004 41 59 125 630 688 40 2004 702 2011 41 123 792 744 2012 40 40 2011 41 2004 41 59 125 630 688 40 2004 702 2013 41 123 792 744 2014 40 40 2013 41 2004 41 59 125 630 688 40 2004 702 2015 41 123 792 744 2016 40 40 2015 41 2004 41 59 125 630 688 40 2004 702 2017 41 123 792 744 2018 40 40 2017 41 2004 41 59 125 630 688 40 2004 702 2019 41 123 792 744 2020 40 40 2019 41 2004 41 59 125 630 825 744 2021 40 362 43 2004 41 59 125 125 ,"{'AvgLine': 20, 'CountLine': 22, 'CountStmt': 19, 'MaxNesting': 1, 'AvgLineCode': 20, 'AvgEssential': 9, 'AvgLineBlank': 0, 'CountStmtExe': 17, 'MaxEssential': 9, 'SumEssential': 9, 'AvgCyclomatic': 9, 'CountLineCode': 22, 'CountStmtDecl': 2, 'MaxCyclomatic': 9, 'SumCyclomatic': 9, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 9, 'CountDeclMethod': 1, 'CountLineCodeExe': 18, 'CountLineComment': 0, 'CountClassCoupled': 19, 'CountClassDerived': 0, 'CountLineCodeDecl': 2, 'CountDeclMethodAll': 1, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 9, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 9, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 19, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2903,Java,"public abstract class MutableOfferDataModel extends OfferDataModel implements BsqBalanceListener {
    private final CreateOfferService createOfferService;
    protected final OpenOfferManager openOfferManager;
    private final BsqWalletService bsqWalletService;
    private final Preferences preferences;
    protected final User user;
    private final P2PService p2PService;
    protected final PriceFeedService priceFeedService;
    final String shortOfferId;
    private final AccountAgeWitnessService accountAgeWitnessService;
    private final FeeService feeService;
    private final CoinFormatter btcFormatter;
    private final Navigation navigation;
    private final String offerId;
    private final BalanceListener btcBalanceListener;
    private final SetChangeListener<PaymentAccount> paymentAccountsChangeListener;

    protected OfferDirection direction;
    protected TradeCurrency tradeCurrency;
    protected final StringProperty tradeCurrencyCode = new SimpleStringProperty();
    protected final BooleanProperty useMarketBasedPrice = new SimpleBooleanProperty();
    protected final ObjectProperty<Coin> amount = new SimpleObjectProperty<>();
    protected final ObjectProperty<Coin> minAmount = new SimpleObjectProperty<>();
    protected final ObjectProperty<Price> price = new SimpleObjectProperty<>();
    protected final ObjectProperty<Volume> volume = new SimpleObjectProperty<>();
    protected final ObjectProperty<Volume> minVolume = new SimpleObjectProperty<>();

    // Percentage value of buyer security deposit. E.g. 0.01 means 1% of trade amount
    protected final DoubleProperty buyerSecurityDeposit = new SimpleDoubleProperty();

    protected final ObservableList<PaymentAccount> paymentAccounts = FXCollections.observableArrayList();

    protected PaymentAccount paymentAccount;
    boolean isTabSelected;
    protected double marketPriceMargin = 0;
    private Coin txFeeFromFeeService = Coin.ZERO;
    @Getter
    private boolean marketPriceAvailable;
    private int feeTxVsize = TxFeeEstimationService.TYPICAL_TX_WITH_1_INPUT_VSIZE;
    protected boolean allowAmountUpdate = true;
    private final TradeStatisticsManager tradeStatisticsManager;

    private final Predicate<ObjectProperty<Coin>> isNonZeroAmount = (c) -> c.get() != null && !c.get().isZero();
    private final Predicate<ObjectProperty<Price>> isNonZeroPrice = (p) -> p.get() != null && !p.get().isZero();
    private final Predicate<ObjectProperty<Volume>> isNonZeroVolume = (v) -> v.get() != null && !v.get().isZero();
    @Getter
    protected long triggerPrice;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    public MutableOfferDataModel(CreateOfferService createOfferService,
                                 OpenOfferManager openOfferManager,
                                 OfferUtil offerUtil,
                                 BtcWalletService btcWalletService,
                                 BsqWalletService bsqWalletService,
                                 Preferences preferences,
                                 User user,
                                 P2PService p2PService,
                                 PriceFeedService priceFeedService,
                                 AccountAgeWitnessService accountAgeWitnessService,
                                 FeeService feeService,
                                 @Named(FormattingUtils.BTC_FORMATTER_KEY) CoinFormatter btcFormatter,
                                 TradeStatisticsManager tradeStatisticsManager,
                                 Navigation navigation) {
        super(btcWalletService, offerUtil);

        this.createOfferService = createOfferService;
        this.openOfferManager = openOfferManager;
        this.bsqWalletService = bsqWalletService;
        this.preferences = preferences;
        this.user = user;
        this.p2PService = p2PService;
        this.priceFeedService = priceFeedService;
        this.accountAgeWitnessService = accountAgeWitnessService;
        this.feeService = feeService;
        this.btcFormatter = btcFormatter;
        this.navigation = navigation;
        this.tradeStatisticsManager = tradeStatisticsManager;

        offerId = OfferUtil.getRandomOfferId();
        shortOfferId = Utilities.getShortId(offerId);
        addressEntry = btcWalletService.getOrCreateAddressEntry(offerId, AddressEntry.Context.OFFER_FUNDING);

        useMarketBasedPrice.set(preferences.isUsePercentageBasedPrice());
        buyerSecurityDeposit.set(Restrictions.getMinBuyerSecurityDepositAsPercent());

        btcBalanceListener = new BalanceListener(getAddressEntry().getAddress()) {
            @Override
            public void onBalanceChanged(Coin balance, Transaction tx) {
                updateBalance();
            }
        };

        paymentAccountsChangeListener = change -> fillPaymentAccounts();
    }

    @Override
    public void activate() {
        addListeners();

        if (isTabSelected)
            priceFeedService.setCurrencyCode(tradeCurrencyCode.get());

        updateBalance();
    }

    @Override
    protected void deactivate() {
        removeListeners();
    }

    private void addListeners() {
        btcWalletService.addBalanceListener(btcBalanceListener);
        bsqWalletService.addBsqBalanceListener(this);
        user.getPaymentAccountsAsObservable().addListener(paymentAccountsChangeListener);
    }

    private void removeListeners() {
        btcWalletService.removeBalanceListener(btcBalanceListener);
        bsqWalletService.removeBsqBalanceListener(this);
        user.getPaymentAccountsAsObservable().removeListener(paymentAccountsChangeListener);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    // called before activate()
    public boolean initWithData(OfferDirection direction, TradeCurrency tradeCurrency) {
        this.direction = direction;
        this.tradeCurrency = tradeCurrency;

        fillPaymentAccounts();

        PaymentAccount account;

        PaymentAccount lastSelectedPaymentAccount = getPreselectedPaymentAccount();
        if (lastSelectedPaymentAccount != null &&
                lastSelectedPaymentAccount.getTradeCurrencies().contains(tradeCurrency) &&
                user.getPaymentAccounts() != null &&
                user.getPaymentAccounts().stream().anyMatch(paymentAccount -> paymentAccount.getId().equals(lastSelectedPaymentAccount.getId()))) {
            account = lastSelectedPaymentAccount;
        } else {
            account = user.findFirstPaymentAccountWithCurrency(tradeCurrency);
        }

        if (account != null) {
            this.paymentAccount = account;
        } else {
            Optional<PaymentAccount> paymentAccountOptional = paymentAccounts.stream().findAny();
            if (paymentAccountOptional.isPresent()) {
                this.paymentAccount = paymentAccountOptional.get();

            } else {
                log.warn(""PaymentAccount not available. Should never get called as in offer view you should not be able to open a create offer view"");
                return false;
            }
        }

        setTradeCurrencyFromPaymentAccount(paymentAccount);
        tradeCurrencyCode.set(this.tradeCurrency.getCode());

        priceFeedService.setCurrencyCode(tradeCurrencyCode.get());

        // We request to get the actual estimated fee
        requestTxFee(null);

        // Set the default values (in rare cases if the fee request was not done yet we get the hard coded default values)
        // But offer creation happens usually after that so we should have already the value from the estimation service.
        txFeeFromFeeService = feeService.getTxFee(feeTxVsize);

        calculateVolume();
        calculateTotalToPay();
        updateBalance();
        setSuggestedSecurityDeposit(getPaymentAccount());

        return true;
    }

    protected PaymentAccount getPreselectedPaymentAccount() {
        return preferences.getSelectedPaymentAccountForCreateOffer();
    }

    void onTabSelected(boolean isSelected) {
        this.isTabSelected = isSelected;
        if (isTabSelected)
            priceFeedService.setCurrencyCode(tradeCurrencyCode.get());
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // UI actions
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected Offer createAndGetOffer() {
        return createOfferService.createAndGetOffer(offerId,
                direction,
                tradeCurrencyCode.get(),
                amount.get(),
                minAmount.get(),
                price.get(),
                txFeeFromFeeService,
                useMarketBasedPrice.get(),
                marketPriceMargin,
                buyerSecurityDeposit.get(),
                paymentAccount);
    }

    // This works only if we have already funds in the wallet
    public void updateEstimatedFeeAndTxVsize() {
        Tuple2<Coin, Integer> estimatedFeeAndTxVsize = createOfferService.getEstimatedFeeAndTxVsize(amount.get(),
                direction,
                buyerSecurityDeposit.get(),
                createOfferService.getSellerSecurityDepositAsDouble(buyerSecurityDeposit.get()));
        txFeeFromFeeService = estimatedFeeAndTxVsize.first;
        feeTxVsize = estimatedFeeAndTxVsize.second;
    }

    void onPlaceOffer(Offer offer, TransactionResultHandler resultHandler) {
        openOfferManager.placeOffer(offer,
                buyerSecurityDeposit.get(),
                useSavingsWallet,
                triggerPrice,
                resultHandler,
                log::error);
    }

    void onPaymentAccountSelected(PaymentAccount paymentAccount) {
        if (paymentAccount != null && !this.paymentAccount.equals(paymentAccount)) {
            volume.set(null);
            minVolume.set(null);
            price.set(null);
            marketPriceMargin = 0;
            preferences.setSelectedPaymentAccountForCreateOffer(paymentAccount);
            this.paymentAccount = paymentAccount;

            setTradeCurrencyFromPaymentAccount(paymentAccount);
            setSuggestedSecurityDeposit(getPaymentAccount());

            if (amount.get() != null && this.allowAmountUpdate)
                this.amount.set(Coin.valueOf(Math.min(amount.get().value, getMaxTradeLimit())));
        }
    }

    private void setSuggestedSecurityDeposit(PaymentAccount paymentAccount) {
        var minSecurityDeposit = Restrictions.getMinBuyerSecurityDepositAsPercent();
        try {
            if (getTradeCurrency() == null) {
                setBuyerSecurityDeposit(minSecurityDeposit);
                return;
            }
            // Get average historic prices over for the prior trade period equaling the lock time
            var blocksRange = Restrictions.getLockTime(paymentAccount.getPaymentMethod().isBlockchain());
            var startDate = new Date(System.currentTimeMillis() - blocksRange * 10L * 60000);
            var sortedRangeData = tradeStatisticsManager.getObservableTradeStatisticsSet().stream()
                    .filter(e -> e.getCurrency().equals(getTradeCurrency().getCode()))
                    .filter(e -> e.getDate().compareTo(startDate) >= 0)
                    .sorted(Comparator.comparing(TradeStatistics3::getDate))
                    .collect(Collectors.toList());
            var movingAverage = new MathUtils.MovingAverage(10, 0.2);
            double[] extremes = {Double.MAX_VALUE, Double.MIN_VALUE};
            sortedRangeData.forEach(e -> {
                var price = e.getTradePrice().getValue();
                movingAverage.next(price).ifPresent(val -> {
                    if (val < extremes[0]) extremes[0] = val;
                    if (val > extremes[1]) extremes[1] = val;
                });
            });
            var min = extremes[0];
            var max = extremes[1];
            if (min == 0d || max == 0d) {
                setBuyerSecurityDeposit(minSecurityDeposit);
                return;
            }
            // Suggested deposit is double the trade range over the previous lock time period, bounded by min/max deposit
            var suggestedSecurityDeposit =
                    Math.min(2 * (max - min) / max, Restrictions.getMaxBuyerSecurityDepositAsPercent());
            buyerSecurityDeposit.set(Math.max(suggestedSecurityDeposit, minSecurityDeposit));
        } catch (Throwable t) {
            log.error(t.toString());
            buyerSecurityDeposit.set(minSecurityDeposit);
        }
    }

    private void setTradeCurrencyFromPaymentAccount(PaymentAccount paymentAccount) {
        if (!paymentAccount.getTradeCurrencies().contains(tradeCurrency))
            tradeCurrency = paymentAccount.getTradeCurrency().orElse(tradeCurrency);

        checkNotNull(tradeCurrency, ""tradeCurrency must not be null"");
        tradeCurrencyCode.set(tradeCurrency.getCode());
    }

    void onCurrencySelected(TradeCurrency tradeCurrency) {
        if (tradeCurrency != null) {
            if (!this.tradeCurrency.equals(tradeCurrency)) {
                volume.set(null);
                minVolume.set(null);
                price.set(null);
                marketPriceMargin = 0;
            }

            this.tradeCurrency = tradeCurrency;
            final String code = this.tradeCurrency.getCode();
            tradeCurrencyCode.set(code);

            if (paymentAccount != null)
                paymentAccount.setSelectedTradeCurrency(tradeCurrency);

            priceFeedService.setCurrencyCode(code);

            Optional<TradeCurrency> tradeCurrencyOptional = preferences.getTradeCurrenciesAsObservable()
                    .stream().filter(e -> e.getCode().equals(code)).findAny();
            if (!tradeCurrencyOptional.isPresent()) {
                if (CurrencyUtil.isCryptoCurrency(code)) {
                    CurrencyUtil.getCryptoCurrency(code).ifPresent(preferences::addCryptoCurrency);
                } else {
                    CurrencyUtil.getFiatCurrency(code).ifPresent(preferences::addFiatCurrency);
                }
            }
        }
    }

    @Override
    public void onUpdateBalances(Coin availableBalance,
                                 Coin availableNonBsqBalance,
                                 Coin unverifiedBalance,
                                 Coin unconfirmedChangeBalance,
                                 Coin lockedForVotingBalance,
                                 Coin lockedInBondsBalance,
                                 Coin unlockingBondsBalance) {
        updateBalance();
    }

    void fundFromSavingsWallet() {
        this.useSavingsWallet = true;
        updateBalance();
        if (!isBtcWalletFunded.get()) {
            this.useSavingsWallet = false;
            updateBalance();
        }
    }

    protected void setMarketPriceMargin(double marketPriceMargin) {
        this.marketPriceMargin = marketPriceMargin;
    }

    void requestTxFee(@Nullable Runnable actionHandler) {
        feeService.requestFees(() -> {
            txFeeFromFeeService = feeService.getTxFee(feeTxVsize);
            calculateTotalToPay();
            if (actionHandler != null)
                actionHandler.run();
        });
    }

    void setPreferredCurrencyForMakerFeeBtc(boolean preferredCurrencyForMakerFeeBtc) {
        preferences.setPayFeeInBtc(preferredCurrencyForMakerFeeBtc);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    boolean isMinAmountLessOrEqualAmount() {
        //noinspection SimplifiableIfStatement
        if (minAmount.get() != null && amount.get() != null)
            return !minAmount.get().isGreaterThan(amount.get());
        return true;
    }

    OfferDirection getDirection() {
        return direction;
    }

    boolean isSellOffer() {
        return direction == OfferDirection.SELL;
    }

    boolean isBuyOffer() {
        return direction == OfferDirection.BUY;
    }

    AddressEntry getAddressEntry() {
        return addressEntry;
    }

    protected TradeCurrency getTradeCurrency() {
        return tradeCurrency;
    }

    protected PaymentAccount getPaymentAccount() {
        return paymentAccount;
    }

    protected void setUseMarketBasedPrice(boolean useMarketBasedPrice) {
        this.useMarketBasedPrice.set(useMarketBasedPrice);
        preferences.setUsePercentageBasedPrice(useMarketBasedPrice);
    }

    public ObservableList<PaymentAccount> getPaymentAccounts() {
        return paymentAccounts;
    }

    public double getMarketPriceMargin() {
        return marketPriceMargin;
    }

    boolean isMakerFeeValid() {
        return preferences.getPayFeeInBtc() || isBsqForFeeAvailable();
    }

    long getMaxTradeLimit() {
        if (paymentAccount != null) {
            return accountAgeWitnessService.getMyTradeLimit(paymentAccount, tradeCurrencyCode.get(), direction);
        } else {
            return 0;
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Utils
    ///////////////////////////////////////////////////////////////////////////////////////////

    double calculateMarketPriceManual(double marketPrice, double volumeAsDouble, double amountAsDouble) {
        double manualPriceAsDouble = offerUtil.calculateManualPrice(volumeAsDouble, amountAsDouble);
        double percentage = offerUtil.calculateMarketPriceMargin(manualPriceAsDouble, marketPrice);

        setMarketPriceMargin(percentage);

        return manualPriceAsDouble;
    }

    void calculateVolume() {
        if (isNonZeroPrice.test(price) && isNonZeroAmount.test(amount)) {
            try {
                Volume volumeByAmount = calculateVolumeForAmount(amount);

                volume.set(volumeByAmount);

                calculateMinVolume();
            } catch (Throwable t) {
                log.error(t.toString());
            }
        }

        updateBalance();
    }

    void calculateMinVolume() {
        if (isNonZeroPrice.test(price) && isNonZeroAmount.test(minAmount)) {
            try {
                Volume volumeByAmount = calculateVolumeForAmount(minAmount);

                minVolume.set(volumeByAmount);

            } catch (Throwable t) {
                log.error(t.toString());
            }
        }
    }

    private Volume calculateVolumeForAmount(ObjectProperty<Coin> minAmount) {
        Volume volumeByAmount = price.get().getVolumeByAmount(minAmount.get());

        // For HalCash we want multiple of 10 EUR
        if (isUsingHalCashAccount())
            volumeByAmount = VolumeUtil.getAdjustedVolumeForHalCash(volumeByAmount);
        else if (CurrencyUtil.isFiatCurrency(tradeCurrencyCode.get()))
            volumeByAmount = VolumeUtil.getRoundedFiatVolume(volumeByAmount);
        return volumeByAmount;
    }

    void calculateAmount() {
        if (isNonZeroPrice.test(price) && isNonZeroVolume.test(volume) && allowAmountUpdate) {
            try {
                Coin value = DisplayUtils.reduceTo4Decimals(price.get().getAmountByVolume(volume.get()), btcFormatter);
                if (isUsingHalCashAccount())
                    value = CoinUtil.getAdjustedAmountForHalCash(value, price.get(), getMaxTradeLimit());
                else if (CurrencyUtil.isFiatCurrency(tradeCurrencyCode.get()))
                    value = CoinUtil.getRoundedFiatAmount(value, price.get(), getMaxTradeLimit());

                calculateVolume();

                amount.set(value);
                calculateTotalToPay();
            } catch (Throwable t) {
                log.error(t.toString());
            }
        }
    }

    void calculateTotalToPay() {
        // Maker does not pay the mining fee for the trade txs because the mining fee might be different when maker
        // created the offer and reserved his funds, so that would not work well with dynamic fees.
        // The mining fee for the createOfferFee tx is deducted from the createOfferFee and not visible to the trader
        final Coin makerFee = getMakerFee();
        if (direction != null && amount.get() != null && makerFee != null) {
            Coin feeAndSecDeposit = getTxFee().add(getSecurityDeposit());
            if (isCurrencyForMakerFeeBtc())
                feeAndSecDeposit = feeAndSecDeposit.add(makerFee);
            Coin total = isBuyOffer() ? feeAndSecDeposit : feeAndSecDeposit.add(amount.get());
            totalToPayAsCoin.set(total);
            updateBalance();
        }
    }

    Coin getSecurityDeposit() {
        return isBuyOffer() ? getBuyerSecurityDepositAsCoin() : getSellerSecurityDepositAsCoin();
    }

    public Coin getTxFee() {
        if (isCurrencyForMakerFeeBtc()) {
            return txFeeFromFeeService;
        } else {
            // when BSQ is burnt to pay the Bisq maker fee, it has the benefit of those sats also going to the miners.
            // so that reduces the explicit mining fee for the maker transaction
            Coin makerFee = getMakerFee() != null ? getMakerFee() : Coin.ZERO;
            return txFeeFromFeeService.isGreaterThan(makerFee) ? txFeeFromFeeService.subtract(makerFee) : Coin.ZERO;
        }
    }

    void swapTradeToSavings() {
        btcWalletService.resetAddressEntriesForOpenOffer(offerId);
    }

    private void fillPaymentAccounts() {
        paymentAccounts.setAll(new HashSet<>(getUserPaymentAccounts()));
        paymentAccounts.sort(comparing(PaymentAccount::getAccountName));
    }

    private Set<PaymentAccount> getUserPaymentAccounts() {
        return Objects.requireNonNull(user.getPaymentAccounts()).stream()
                .filter(this::isNotBsqSwapOrDaoActivated)
                .collect(Collectors.toSet());
    }

    private boolean isNotBsqSwapOrDaoActivated(PaymentAccount paymentAccount) {
        return !paymentAccount.getPaymentMethod().isBsqSwap() || DevEnv.isDaoActivated();
    }

    protected void setAmount(Coin amount) {
        this.amount.set(amount);
    }

    protected void setPrice(Price price) {
        this.price.set(price);
    }

    protected void setVolume(Volume volume) {
        this.volume.set(volume);
    }

    protected void setBuyerSecurityDeposit(double value) {
        this.buyerSecurityDeposit.set(value);
    }

    void resetAddressEntry() {
        btcWalletService.resetAddressEntriesForOpenOffer(offerId);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected ReadOnlyObjectProperty<Coin> getAmount() {
        return amount;
    }

    protected ReadOnlyObjectProperty<Coin> getMinAmount() {
        return minAmount;
    }

    public ReadOnlyObjectProperty<Price> getPrice() {
        return price;
    }

    ReadOnlyObjectProperty<Volume> getVolume() {
        return volume;
    }

    ReadOnlyObjectProperty<Volume> getMinVolume() {
        return minVolume;
    }

    protected void setMinAmount(Coin minAmount) {
        this.minAmount.set(minAmount);
    }

    public ReadOnlyStringProperty getTradeCurrencyCode() {
        return tradeCurrencyCode;
    }

    public String getCurrencyCode() {
        return tradeCurrencyCode.get();
    }

    boolean isCryptoCurrency() {
        return CurrencyUtil.isCryptoCurrency(tradeCurrencyCode.get());
    }

    boolean isFiatCurrency() {
        return CurrencyUtil.isFiatCurrency(tradeCurrencyCode.get());
    }

    ReadOnlyBooleanProperty getUseMarketBasedPrice() {
        return useMarketBasedPrice;
    }

    ReadOnlyDoubleProperty getBuyerSecurityDeposit() {
        return buyerSecurityDeposit;
    }

    protected Coin getBuyerSecurityDepositAsCoin() {
        Coin percentOfAmountAsCoin = CoinUtil.getPercentOfAmountAsCoin(buyerSecurityDeposit.get(), amount.get());
        return getBoundedBuyerSecurityDepositAsCoin(percentOfAmountAsCoin);
    }

    private Coin getSellerSecurityDepositAsCoin() {
        Coin amountAsCoin = this.amount.get();
        if (amountAsCoin == null)
            amountAsCoin = Coin.ZERO;

        Coin percentOfAmountAsCoin = CoinUtil.getPercentOfAmountAsCoin(
                createOfferService.getSellerSecurityDepositAsDouble(buyerSecurityDeposit.get()), amountAsCoin);
        return getBoundedSellerSecurityDepositAsCoin(percentOfAmountAsCoin);
    }

    protected Coin getBoundedBuyerSecurityDepositAsCoin(Coin value) {
        // We need to ensure that for small amount values we don't get a too low BTC amount. We limit it with using the
        // MinBuyerSecurityDepositAsCoin from Restrictions.
        return Coin.valueOf(Math.max(Restrictions.getMinBuyerSecurityDepositAsCoin().value, value.value));
    }

    private Coin getBoundedSellerSecurityDepositAsCoin(Coin value) {
        // We need to ensure that for small amount values we don't get a too low BTC amount. We limit it with using the
        // MinSellerSecurityDepositAsCoin from Restrictions.
        return Coin.valueOf(Math.max(Restrictions.getMinSellerSecurityDepositAsCoin().value, value.value));
    }

    ReadOnlyObjectProperty<Coin> totalToPayAsCoinProperty() {
        return totalToPayAsCoin;
    }

    Coin getUsableBsqBalance() {
        return offerUtil.getUsableBsqBalance();
    }

    public void setMarketPriceAvailable(boolean marketPriceAvailable) {
        this.marketPriceAvailable = marketPriceAvailable;
    }

    public Coin getMakerFee(boolean isCurrencyForMakerFeeBtc) {
        return CoinUtil.getMakerFee(isCurrencyForMakerFeeBtc, amount.get());
    }

    public Coin getMakerFee() {
        return offerUtil.getMakerFee(amount.get());
    }

    public Coin getMakerFeeInBtc() {
        return CoinUtil.getMakerFee(true, amount.get());
    }

    public Coin getMakerFeeInBsq() {
        return CoinUtil.getMakerFee(false, amount.get());
    }

    public boolean isCurrencyForMakerFeeBtc() {
        return offerUtil.isCurrencyForMakerFeeBtc(amount.get());
    }

    boolean isPreferredFeeCurrencyBtc() {
        return preferences.isPayFeeInBtc();
    }

    boolean isBsqForFeeAvailable() {
        return offerUtil.isBsqForMakerFeeAvailable(amount.get());
    }

    boolean isAttemptToBuyBsq() {
        // When you buy an asset you actually sell BTC.
        // This is why an offer to buy BSQ is actually an offer to sell BTC for BSQ.
        return !isBuyOffer() && getTradeCurrency().getCode().equals(""BSQ"");
    }

    boolean canPlaceOffer() {
        return GUIUtil.isBootstrappedOrShowPopup(p2PService) &&
                GUIUtil.canCreateOrTakeOfferOrShowPopup(user, navigation, tradeCurrency);
    }

    public boolean isMinBuyerSecurityDeposit() {
        return !getBuyerSecurityDepositAsCoin().isGreaterThan(Restrictions.getMinBuyerSecurityDepositAsCoin());
    }

    public void setTriggerPrice(long triggerPrice) {
        this.triggerPrice = triggerPrice;
    }

    public boolean isUsingHalCashAccount() {
        return paymentAccount.hasPaymentMethodWithId(HAL_CASH_ID);
    }
}",1,777 539 587 2000 650 2001 693 2002 123 773 657 2003 2004 59 775 657 2005 2006 59 773 657 2007 2008 59 773 657 2009 2010 59 775 657 2011 2012 59 773 657 2013 2014 59 775 657 2015 2016 59 657 2017 2018 59 773 657 2019 2020 59 773 657 2021 2022 59 773 657 2023 2024 59 773 657 2025 2026 59 773 657 2017 2027 59 773 657 2028 2029 59 773 657 2030 60 2031 62 2032 59 775 2033 2034 59 775 2035 2036 59 775 657 2037 2038 61 744 2039 40 41 59 775 657 2040 2041 61 744 2042 40 41 59 775 657 2043 60 2044 62 2045 61 744 2046 60 62 40 41 59 775 657 2043 60 2044 62 2047 61 744 2046 60 62 40 41 59 775 657 2043 60 2048 62 2049 61 744 2046 60 62 40 41 59 775 657 2043 60 2050 62 2051 61 744 2046 60 62 40 41 59 775 657 2043 60 2050 62 2052 61 744 2046 60 62 40 41 59 330 775 657 2053 2054 61 744 2055 40 41 59 775 657 2056 60 2031 62 2057 61 2058 46 2059 40 41 59 775 2031 2060 59 570 2061 59 775 625 2062 61 1500 59 773 2044 2063 61 2044 46 2064 59 64 2065 773 570 2066 59 773 704 2067 61 2068 46 2069 59 775 570 2070 61 2071 59 773 657 2072 2073 59 773 657 2074 60 2043 60 2044 356 2075 61 40 2076 41 45 62 2076 46 2077 40 41 340 2078 307 33 2076 46 2077 40 41 46 2079 40 41 59 773 657 2074 60 2043 60 2048 356 2080 61 40 2081 41 45 62 2081 46 2077 40 41 340 2078 307 33 2081 46 2077 40 41 46 2079 40 41 59 773 657 2074 60 2043 60 2050 356 2082 61 40 2083 41 45 62 2083 46 2077 40 41 340 2078 307 33 2083 46 2077 40 41 46 2079 40 41 59 64 2065 775 726 2084 59 331 330 331 777 2000 40 2003 2004 44 2005 2006 44 2085 2086 44 2087 2088 44 2007 2008 44 2009 2010 44 2011 2012 44 2013 2014 44 2015 2016 44 2019 2020 44 2021 2022 44 64 2089 40 2090 46 2091 41 2023 2024 44 2072 2073 44 2025 2026 41 123 818 40 2088 44 2086 41 59 823 46 2004 61 2004 59 823 46 2006 61 2006 59 823 46 2008 61 2008 59 823 46 2010 61 2010 59 823 46 2012 61 2012 59 823 46 2014 61 2014 59 823 46 2016 61 2016 59 823 46 2020 61 2020 59 823 46 2022 61 2022 59 823 46 2024 61 2024 59 823 46 2026 61 2026 59 823 46 2073 61 2073 59 2027 61 2085 46 2092 40 41 59 2018 61 2093 46 2094 40 2027 41 59 2095 61 2088 46 2096 40 2027 44 2097 46 2098 46 2099 41 59 2041 46 2100 40 2010 46 2101 40 41 41 59 2054 46 2100 40 2102 46 2103 40 41 41 59 2029 61 744 2028 40 2104 40 41 46 2105 40 41 41 123 64 2106 777 865 2107 40 2044 2108 44 2109 2110 41 123 2111 40 41 59 125 125 59 2032 61 2112 45 62 2113 40 41 59 125 64 2114 777 865 2115 40 41 123 2116 40 41 59 688 40 2061 41 2016 46 2117 40 2038 46 2077 40 41 41 59 2118 40 41 59 125 64 2114 775 865 2119 40 41 123 2120 40 41 59 125 773 865 2121 40 41 123 2088 46 2122 40 2029 41 59 2008 46 2123 40 823 41 59 2012 46 2124 40 41 46 2125 40 2032 41 59 125 773 865 2126 40 41 123 2088 46 2127 40 2029 41 59 2008 46 2128 40 823 41 59 2012 46 2129 40 41 46 2130 40 2032 41 59 125 331 330 331 330 777 570 2131 40 2033 2034 44 2035 2036 41 123 823 46 2034 61 2034 59 823 46 2036 61 2036 59 2132 40 41 59 2031 2133 59 2031 2134 61 2135 40 41 59 688 40 2134 340 2078 307 2134 46 2136 40 41 46 2137 40 2036 41 307 2012 46 2138 40 41 340 2078 307 2012 46 2138 40 41 46 2139 40 41 46 2140 40 2060 45 62 2060 46 2141 40 41 46 2142 40 2134 46 2141 40 41 41 41 41 123 2133 61 2134 59 125 630 123 2133 61 2012 46 2143 40 2036 41 59 125 688 40 2133 340 2078 41 123 823 46 2060 61 2133 59 125 630 123 2144 60 2031 62 2145 61 2057 46 2139 40 41 46 2146 40 41 59 688 40 2145 46 2147 40 41 41 123 823 46 2060 61 2145 46 2077 40 41 59 125 630 123 2148 46 2149 40 362 41 59 792 2150 59 125 125 2151 40 2060 41 59 2038 46 2152 40 823 46 2036 46 2153 40 41 41 59 2016 46 2154 40 2038 46 2077 40 41 41 59 330 2155 40 2078 41 59 330 330 2063 61 2022 46 2156 40 2067 41 59 2157 40 41 59 2158 40 41 59 2159 40 41 59 2160 40 2161 40 41 41 59 792 2071 59 125 775 2031 2162 40 41 123 792 2010 46 2163 40 41 59 125 865 2164 40 570 2165 41 123 823 46 2061 61 2165 59 688 40 2061 41 2016 46 2166 40 2038 46 2077 40 41 41 59 125 331 330 331 775 2167 2168 40 41 123 792 2004 46 2168 40 2027 44 2034 44 2038 46 2077 40 41 44 2045 46 2077 40 41 44 2047 46 2077 40 41 44 2049 46 2077 40 41 44 2063 44 2041 46 2077 40 41 44 2062 44 2054 46 2077 40 41 44 2060 41 59 125 330 777 865 2169 40 41 123 2170 60 2044 44 2171 62 2172 61 2004 46 2173 40 2045 46 2077 40 41 44 2034 44 2054 46 2077 40 41 44 2004 46 2174 40 2054 46 2077 40 41 41 41 59 2063 61 2172 46 2175 59 2067 61 2172 46 2176 59 125 865 2177 40 2167 2178 44 2179 2180 41 123 2006 46 2181 40 2178 44 2054 46 2077 40 41 44 2182 44 2084 44 2180 44 2183 58 58 2184 41 59 125 865 2185 40 2031 2060 41 123 688 40 2060 340 2078 307 33 823 46 2060 46 2186 40 2060 41 41 123 2051 46 2187 40 2078 41 59 2052 46 2187 40 2078 41 59 2049 46 2187 40 2078 41 59 2062 61 1500 59 2010 46 2188 40 2060 41 59 823 46 2060 61 2060 59 2189 40 2060 41 59 2190 40 2191 40 41 41 59 688 40 2045 46 2077 40 41 340 2078 307 823 46 2070 41 823 46 2045 46 2187 40 2044 46 2192 40 2193 46 2194 40 2045 46 2077 40 41 46 2195 44 2196 40 41 41 41 41 59 125 125 773 865 2197 40 2031 2060 41 123 2198 2199 61 2200 46 2201 40 41 59 830 123 688 40 2202 40 41 323 2078 41 123 2203 40 2199 41 59 792 59 125 330 2198 2204 61 2200 46 2205 40 2060 46 2206 40 41 46 2207 40 41 41 59 2198 2208 61 744 2209 40 2210 46 2211 40 41 45 2204 42 1502 42 1506 41 59 2198 2212 61 2073 46 2213 40 41 46 2214 40 41 46 2215 40 2216 45 62 2216 46 2217 40 41 46 2218 40 2202 40 41 46 2219 40 41 41 41 46 2215 40 2216 45 62 2216 46 2220 40 41 46 2221 40 2208 41 325 1500 41 46 2222 40 2223 46 2224 40 2225 58 58 2220 41 41 46 2226 40 2227 46 2228 40 41 41 59 2198 2229 61 744 2230 46 2231 40 1502 44 1500 41 59 625 91 93 2232 61 123 2233 46 2234 44 2233 46 2235 125 59 2212 46 2236 40 2216 45 62 123 2198 2049 61 2216 46 2237 40 41 46 2238 40 41 59 2229 46 2239 40 2049 41 46 2240 40 2241 45 62 123 688 40 2241 60 2232 91 1500 93 41 2232 91 1500 93 61 2241 59 688 40 2241 62 2232 91 1501 93 41 2232 91 1501 93 61 2241 59 125 41 59 125 41 59 2198 2242 61 2232 91 1500 93 59 2198 2243 61 2232 91 1501 93 59 688 40 2242 323 1500 309 2243 323 1500 41 123 2244 40 2199 41 59 792 59 125 330 2198 2245 61 2246 46 2242 40 1502 42 40 2243 45 2242 41 47 2243 44 2200 46 2247 40 41 41 59 2054 46 2248 40 2246 46 2243 40 2245 44 2199 41 41 59 125 580 40 2249 2250 41 123 2251 46 2252 40 2250 46 2253 40 41 41 59 2054 46 2254 40 2199 41 59 125 125 773 865 2255 40 2031 2060 41 123 688 40 33 2060 46 2256 40 41 46 2257 40 2036 41 41 2036 61 2060 46 2258 40 41 46 2259 40 2036 41 59 2260 40 2036 44 362 41 59 2038 46 2261 40 2036 46 2262 40 41 41 59 125 865 2263 40 2035 2036 41 123 688 40 2036 340 2078 41 123 688 40 33 823 46 2036 46 2264 40 2036 41 41 123 2051 46 2265 40 2078 41 59 2052 46 2265 40 2078 41 59 2049 46 2265 40 2078 41 59 2062 61 1500 59 125 823 46 2036 61 2036 59 657 2017 2266 61 823 46 2036 46 2267 40 41 59 2038 46 2268 40 2266 41 59 688 40 2060 340 2078 41 2060 46 2269 40 2036 41 59 2016 46 2270 40 2266 41 59 2271 60 2035 62 2272 61 2010 46 2273 40 41 46 2274 40 41 46 2275 40 2276 45 62 2276 46 2267 40 41 46 2264 40 2266 41 41 46 2277 40 41 59 688 40 33 2272 46 2278 40 41 41 123 688 40 2279 46 2280 40 2266 41 41 123 2279 46 2281 40 2266 41 46 2282 40 2010 58 58 2283 41 59 125 630 123 2279 46 2284 40 2266 41 46 2285 40 2010 58 58 2286 41 59 125 125 125 125 64 2114 777 865 2287 40 2044 2288 44 2044 2289 44 2044 2290 44 2044 2291 44 2044 2292 44 2044 2293 44 2044 2294 41 123 2295 40 41 59 125 865 2296 40 41 123 823 46 2297 61 2071 59 2298 40 41 59 688 40 33 2299 46 2077 40 41 41 123 823 46 2297 61 2300 59 2298 40 41 59 125 125 775 865 2301 40 625 2062 41 123 823 46 2062 61 2062 59 125 865 2302 40 64 2303 2304 2305 41 123 2022 46 2306 40 40 41 45 62 123 2063 61 2022 46 2307 40 2067 41 59 2308 40 41 59 688 40 2305 340 2078 41 2305 46 2309 40 41 59 125 41 59 125 865 2310 40 570 2311 41 123 2010 46 2312 40 2311 41 59 125 331 330 331 570 2313 40 41 123 330 688 40 2047 46 2077 40 41 340 2078 307 2045 46 2077 40 41 340 2078 41 792 33 2047 46 2077 40 41 46 2314 40 2045 46 2077 40 41 41 59 792 2071 59 125 2033 2315 40 41 123 792 2034 59 125 570 2316 40 41 123 792 2034 323 2033 46 2317 59 125 570 2318 40 41 123 792 2034 323 2033 46 2319 59 125 2320 2321 40 41 123 792 2322 59 125 775 2035 2323 40 41 123 792 2036 59 125 775 2031 2324 40 41 123 792 2060 59 125 775 865 2325 40 570 2041 41 123 823 46 2041 46 2326 40 2041 41 59 2010 46 2327 40 2041 41 59 125 777 2056 60 2031 62 2328 40 41 123 792 2057 59 125 777 625 2329 40 41 123 792 2062 59 125 570 2330 40 41 123 792 2010 46 2331 40 41 309 2332 40 41 59 125 726 2333 40 41 123 688 40 2060 340 2078 41 123 792 2020 46 2334 40 2060 44 2038 46 2077 40 41 44 2034 41 59 125 630 123 792 1500 59 125 125 331 330 331 625 2335 40 625 2336 44 625 2337 44 625 2338 41 123 625 2339 61 2086 46 2340 40 2337 44 2338 41 59 625 2341 61 2086 46 2342 40 2339 44 2336 41 59 2301 40 2341 41 59 792 2339 59 125 865 2343 40 41 123 688 40 2080 46 2344 40 2049 41 307 2075 46 2344 40 2045 41 41 123 830 123 2050 2345 61 2346 40 2045 41 59 2051 46 2347 40 2345 41 59 2348 40 41 59 125 580 40 2349 2350 41 123 2351 46 2352 40 2350 46 2353 40 41 41 59 125 125 2354 40 41 59 125 865 2355 40 41 123 688 40 2080 46 2356 40 2049 41 307 2075 46 2356 40 2047 41 41 123 830 123 2050 2357 61 2358 40 2047 41 59 2052 46 2359 40 2357 41 59 125 580 40 2360 2361 41 123 2362 46 2363 40 2361 46 2364 40 41 41 59 125 125 125 773 2050 2365 40 2043 60 2044 62 2047 41 123 2050 2366 61 2049 46 2077 40 41 46 2367 40 2047 46 2077 40 41 41 59 330 688 40 2368 40 41 41 2366 61 2369 46 2370 40 2366 41 59 630 688 40 2371 46 2372 40 2038 46 2077 40 41 41 41 2366 61 2369 46 2373 40 2366 41 59 792 2366 59 125 865 2374 40 41 123 688 40 2080 46 2375 40 2049 41 307 2082 46 2375 40 2051 41 307 2070 41 123 830 123 2044 2376 61 2377 46 2378 40 2049 46 2077 40 41 46 2379 40 2051 46 2077 40 41 41 44 2024 41 59 688 40 2380 40 41 41 2376 61 2381 46 2382 40 2376 44 2049 46 2077 40 41 44 2333 40 41 41 59 630 688 40 2383 46 2384 40 2038 46 2077 40 41 41 41 2376 61 2381 46 2385 40 2376 44 2049 46 2077 40 41 44 2333 40 41 41 59 2343 40 41 59 2045 46 2386 40 2376 41 59 2387 40 41 59 125 580 40 2388 2389 41 123 2390 46 2391 40 2389 46 2392 40 41 41 59 125 125 125 865 2393 40 41 123 330 330 330 657 2044 2394 61 2395 40 41 59 688 40 2034 340 2078 307 2045 46 2077 40 41 340 2078 307 2394 340 2078 41 123 2044 2396 61 2397 40 41 46 2398 40 2399 40 41 41 59 688 40 2400 40 41 41 2396 61 2396 46 2398 40 2394 41 59 2044 2401 61 2318 40 41 63 2396 58 2396 46 2398 40 2045 46 2077 40 41 41 59 2402 46 2403 40 2401 41 59 2404 40 41 59 125 125 2044 2405 40 41 123 792 2318 40 41 63 2406 40 41 58 2407 40 41 59 125 777 2044 2408 40 41 123 688 40 2409 40 41 41 123 792 2063 59 125 630 123 330 330 2044 2410 61 2411 40 41 340 2078 63 2411 40 41 58 2044 46 2064 59 792 2063 46 2412 40 2410 41 63 2063 46 2413 40 2410 41 58 2044 46 2064 59 125 125 865 2414 40 41 123 2088 46 2415 40 2027 41 59 125 773 865 2416 40 41 123 2057 46 2417 40 744 2418 60 62 40 2419 40 41 41 41 59 2057 46 2420 40 2421 40 2031 58 58 2422 41 41 59 125 773 2423 60 2031 62 2424 40 41 123 792 2425 46 2426 40 2012 46 2328 40 41 41 46 2427 40 41 46 2428 40 823 58 58 2429 41 46 2430 40 2431 46 2432 40 41 41 59 125 773 570 2433 40 2031 2060 41 123 792 33 2060 46 2434 40 41 46 2435 40 41 309 2436 46 2437 40 41 59 125 775 865 2438 40 2044 2045 41 123 823 46 2045 46 2439 40 2045 41 59 125 775 865 2440 40 2048 2049 41 123 823 46 2049 46 2441 40 2049 41 59 125 775 865 2442 40 2050 2051 41 123 823 46 2051 46 2443 40 2051 41 59 125 775 865 2444 40 625 2445 41 123 823 46 2054 46 2446 40 2445 41 59 125 865 2447 40 41 123 2088 46 2448 40 2027 41 59 125 331 330 331 775 2449 60 2044 62 2450 40 41 123 792 2045 59 125 775 2449 60 2044 62 2451 40 41 123 792 2047 59 125 777 2449 60 2048 62 2452 40 41 123 792 2049 59 125 2449 60 2050 62 2453 40 41 123 792 2051 59 125 2449 60 2050 62 2454 40 41 123 792 2052 59 125 775 865 2455 40 2044 2047 41 123 823 46 2047 46 2456 40 2047 41 59 125 777 2457 2458 40 41 123 792 2038 59 125 777 2017 2459 40 41 123 792 2038 46 2077 40 41 59 125 570 2460 40 41 123 792 2461 46 2460 40 2038 46 2077 40 41 41 59 125 570 2462 40 41 123 792 2463 46 2462 40 2038 46 2077 40 41 41 59 125 2464 2465 40 41 123 792 2041 59 125 2466 2467 40 41 123 792 2054 59 125 775 2044 2468 40 41 123 2044 2469 61 2470 46 2471 40 2054 46 2077 40 41 44 2045 46 2077 40 41 41 59 792 2472 40 2469 41 59 125 773 2044 2473 40 41 123 2044 2474 61 823 46 2045 46 2077 40 41 59 688 40 2474 323 2078 41 2474 61 2044 46 2064 59 2044 2475 61 2476 46 2477 40 2004 46 2478 40 2054 46 2077 40 41 41 44 2474 41 59 792 2479 40 2475 41 59 125 775 2044 2480 40 2044 2445 41 123 330 330 792 2044 46 2481 40 2482 46 2483 40 2484 46 2485 40 41 46 2445 44 2445 46 2445 41 41 59 125 773 2044 2486 40 2044 2445 41 123 330 330 792 2044 46 2487 40 2488 46 2489 40 2490 46 2491 40 41 46 2445 44 2445 46 2445 41 41 59 125 2449 60 2044 62 2492 40 41 123 792 2493 59 125 2044 2494 40 41 123 792 2086 46 2494 40 41 59 125 777 865 2495 40 570 2066 41 123 823 46 2066 61 2066 59 125 777 2044 2496 40 570 2497 41 123 792 2498 46 2496 40 2497 44 2045 46 2077 40 41 41 59 125 777 2044 2496 40 41 123 792 2086 46 2496 40 2045 46 2077 40 41 41 59 125 777 2044 2499 40 41 123 792 2500 46 2496 40 2071 44 2045 46 2077 40 41 41 59 125 777 2044 2501 40 41 123 792 2502 46 2496 40 2503 44 2045 46 2077 40 41 41 59 125 777 570 2497 40 41 123 792 2086 46 2497 40 2045 46 2077 40 41 41 59 125 570 2504 40 41 123 792 2010 46 2505 40 41 59 125 570 2506 40 41 123 792 2086 46 2507 40 2045 46 2077 40 41 41 59 125 570 2508 40 41 123 330 330 792 33 2318 40 41 307 2323 40 41 46 2509 40 41 46 2510 40 362 41 59 125 570 2511 40 41 123 792 2512 46 2513 40 2014 41 307 2512 46 2514 40 2012 44 2026 44 2036 41 59 125 777 570 2515 40 41 123 792 33 2468 40 41 46 2516 40 2517 46 2518 40 41 41 59 125 777 865 2519 40 726 2084 41 123 823 46 2084 61 2084 59 125 777 570 2520 40 41 123 792 2060 46 2521 40 2522 41 59 125 125 ,"{'AvgLine': 6, 'CountLine': 707, 'CountStmt': 366, 'MaxNesting': 3, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 251, 'MaxEssential': 4, 'SumEssential': 92, 'AvgCyclomatic': 1, 'CountLineCode': 537, 'CountStmtDecl': 149, 'MaxCyclomatic': 6, 'SumCyclomatic': 125, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 131, 'CountSemicolon': 248, 'CountDeclMethod': 80, 'CountLineCodeExe': 305, 'CountLineComment': 39, 'CountClassCoupled': 70, 'CountClassDerived': 4, 'CountLineCodeDecl': 177, 'CountDeclMethodAll': 89, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.07', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 142, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 20, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 94, 'SumCyclomaticModified': 125, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 34, 'CountDeclMethodPrivate': 10, 'CountDeclInstanceMethod': 80, 'CountDeclMethodProtected': 16, 'CountClassCoupledModified': 70, 'CountDeclInstanceVariable': 38, 'PercentLackOfCohesionModified': 92}"
26528,Java,"public final class AuthClient extends Client<Connection<AuthClient>> {

    private static final Logger LOGGER = LoggerFactory.getLogger(AuthClient.class);

    private final long _connectionStartTime;
    private final Map<Integer,Integer> charactersOnServer = new HashMap<>();

    private AuthCrypt crypter;
    private ScrambledKeyPair _scrambledPair;
    private byte[] _blowfishKey;
    private int _sessionId;
    private SessionKey _sessionKey;

    private Account account;
    private AuthClientState state;
    private boolean isJoinedGameSever;
    private long requestedServersInfo;


    public AuthClient(Connection<AuthClient> con) {
		super(con);
		state = AuthClientState.CONNECTED;
		_connectionStartTime = System.currentTimeMillis();
		AuthController.getInstance().registerClient(this);
	}


    @Override
    public boolean decrypt(Buffer data, int offset, int size) {
        boolean decrypted;
        try  {
            decrypted = crypter.decrypt(data, offset, size);
        }
        catch (IOException e) {
            LOGGER.error(e.getMessage(), e);
            close();
            return false;
        }

        if (!decrypted) {
            LOGGER.warn(""Closing connection! Wrong checksum from client: {}"", this);
            close();
        }
        return decrypted;
    }

    @Override
    public boolean encrypt(Buffer data, int offset, int size) {
	    try {
	       return crypter.encrypt(data, offset, size);
        } catch (IOException e) {
	        LOGGER.error(e.getMessage(), e);
	        return false;
        }
    }

	public void sendPacket(AuthServerPacket lsp) {
	    writePacket(lsp);
	}

    public void close(LoginFailReason reason) {
        sendPacket(new LoginFail(reason));
	}
	
	public void close(PlayFailReason reason) {
		close(new PlayFail(reason));
	}

	public void close(AccountKicked.AccountKickedReason reason) {
        close(new AccountKicked(reason));
	}

    @Override
    public void onConnected() {
        sendPacket(new Init());
    }

	@Override
	protected void onDisconnection() {
        LOGGER.debug(""DISCONNECTED: {}"", toString());

        if(!isJoinedGameSever && nonNull(account)) {
            AuthController.getInstance().removeAuthedClient(account.getLogin());
        }
	}

    public void addCharactersOnServer(int serverId, int players) {
        charactersOnServer.put(serverId, players);
    }

    public Map<Integer, Integer> getCharactersOnServer() {
        return charactersOnServer;
    }

    public int getPlayersOnServer(int serverId) {
        return charactersOnServer.getOrDefault(serverId, 0);
    }

    public void joinGameserver() {
        isJoinedGameSever = true;
    }

    public boolean isJoinedGameSever() {
        return isJoinedGameSever;
    }

    AuthClientState getState()
    {
        return state;
    }

    public void setState(AuthClientState state) {
        this.state = state;
    }

    public byte[] getBlowfishKey() {
        return _blowfishKey;
    }

    public byte[] getScrambledModulus() {
        return _scrambledPair.getScrambledModulus();
    }

    public PrivateKey getRSAPrivateKey() {
        return _scrambledPair.getPair().getPrivate();
    }

    public Account getAccount() {
        return account;
    }

    public void setAccount(Account account) {
        this.account = account;
    }

    public int getAccessLevel() {
        return nonNull(account) ? account.getAccessLevel() : -1;
    }

    public int getLastServer() {
        return nonNull(account) ? account.getLastServer(): -1;
    }

    public int getSessionId() {
        return _sessionId;
    }

    public void setSessionKey(SessionKey sessionKey)
    {
        _sessionKey = sessionKey;
    }

    public SessionKey getSessionKey() {
        return _sessionKey;
    }

    public long getConnectionStartTime() {
        return _connectionStartTime;
    }

    public void setKeyPar(ScrambledKeyPair keyPair) {
        _scrambledPair = keyPair;
    }

    public void setBlowfishKey(byte[] blowfishKey) {
        _blowfishKey = blowfishKey;
    }

    public void setSessionId(int sessionId) {
        _sessionId = sessionId;
    }

    public void setCrypt(AuthCrypt crypt) {
        crypter =  crypt;
    }

    public void setRequestedServerInfo(long count) {
        this.requestedServersInfo = count;
    }

    public long getRequestedServersInfo() {
        return requestedServersInfo;
    }

    @Override
    public String toString() {
        String address =  getHostAddress();
        if (getState() == AUTHED_LOGIN) {
            return ""["" + getAccount().getLogin() + "" ("" + (address.equals("""") ? ""disconnect"" : address) + "")]"";
        }
        return ""["" + (address.equals("""") ? ""disconnect"" : address) + ""]"";
    }
}",1,777 657 587 2000 650 2001 60 2002 60 2000 356 123 773 809 657 2003 2004 61 2005 46 2006 40 2000 46 587 41 59 773 657 726 2007 59 773 657 2008 60 2009 44 2009 62 2010 61 744 2011 60 62 40 41 59 773 2012 2013 59 773 2014 2015 59 773 574 91 93 2016 59 773 704 2017 59 773 2018 2019 59 773 2020 2021 59 773 2022 2023 59 773 570 2024 59 773 726 2025 59 777 2000 40 2002 60 2000 62 2026 41 123 818 40 2026 41 59 2023 61 2022 46 2027 59 2007 61 2028 46 2029 40 41 59 2030 46 2031 40 41 46 2032 40 823 41 59 125 64 2033 777 570 2034 40 2035 2036 44 704 2037 44 704 2038 41 123 570 2039 59 830 123 2039 61 2013 46 2034 40 2036 44 2037 44 2038 41 59 125 580 40 2040 2041 41 123 2004 46 2042 40 2041 46 2043 40 41 44 2041 41 59 2044 40 41 59 792 2045 59 125 688 40 33 2039 41 123 2004 46 2046 40 362 44 823 41 59 2047 40 41 59 125 792 2039 59 125 64 2033 777 570 2048 40 2035 2036 44 704 2037 44 704 2038 41 123 830 123 792 2013 46 2048 40 2036 44 2037 44 2038 41 59 125 580 40 2049 2050 41 123 2004 46 2051 40 2050 46 2052 40 41 44 2050 41 59 792 2053 59 125 125 777 865 2054 40 2055 2056 41 123 2057 40 2056 41 59 125 777 865 2058 40 2059 2060 41 123 2054 40 744 2061 40 2060 41 41 59 125 777 865 2058 40 2062 2060 41 123 2058 40 744 2063 40 2060 41 41 59 125 777 865 2058 40 2064 46 2065 2060 41 123 2058 40 744 2064 40 2060 41 41 59 125 64 2033 777 865 2066 40 41 123 2054 40 744 2067 40 41 41 59 125 64 2033 775 865 2068 40 41 123 2004 46 2069 40 362 44 2070 40 41 41 59 688 40 33 2024 307 2071 40 2021 41 41 123 2072 46 2073 40 41 46 2074 40 2021 46 2075 40 41 41 59 125 125 777 865 2076 40 704 2077 44 704 2078 41 123 2010 46 2079 40 2077 44 2078 41 59 125 777 2008 60 2009 44 2009 62 2080 40 41 123 792 2010 59 125 777 704 2081 40 704 2077 41 123 792 2010 46 2082 40 2077 44 1500 41 59 125 777 865 2083 40 41 123 2024 61 2084 59 125 777 570 2024 40 41 123 792 2024 59 125 2022 2085 40 41 123 792 2023 59 125 777 865 2086 40 2022 2023 41 123 823 46 2023 61 2023 59 125 777 574 91 93 2087 40 41 123 792 2016 59 125 777 574 91 93 2088 40 41 123 792 2015 46 2088 40 41 59 125 777 2089 2090 40 41 123 792 2015 46 2091 40 41 46 2092 40 41 59 125 777 2020 2093 40 41 123 792 2021 59 125 777 865 2094 40 2020 2021 41 123 823 46 2021 61 2021 59 125 777 704 2095 40 41 123 792 2096 40 2021 41 63 2021 46 2095 40 41 58 45 1501 59 125 777 704 2097 40 41 123 792 2098 40 2021 41 63 2021 46 2097 40 41 58 45 1501 59 125 777 704 2099 40 41 123 792 2017 59 125 777 865 2100 40 2018 2101 41 123 2019 61 2101 59 125 777 2018 2102 40 41 123 792 2019 59 125 777 726 2103 40 41 123 792 2007 59 125 777 865 2104 40 2014 2105 41 123 2015 61 2105 59 125 777 865 2106 40 574 91 93 2107 41 123 2016 61 2107 59 125 777 865 2108 40 704 2109 41 123 2017 61 2109 59 125 777 865 2110 40 2012 2111 41 123 2013 61 2111 59 125 777 865 2112 40 726 2113 41 123 823 46 2025 61 2113 59 125 777 726 2114 40 41 123 792 2025 59 125 64 2033 777 2115 2116 40 41 123 2115 2117 61 2118 40 41 59 688 40 2085 40 41 323 2119 41 123 792 362 43 2093 40 41 46 2120 40 41 43 362 43 40 2117 46 2121 40 362 41 63 362 58 2117 41 43 362 59 125 792 362 43 40 2117 46 2122 40 362 41 63 362 58 2117 41 43 362 59 125 125 ,"{'AvgLine': 4, 'CountLine': 196, 'CountStmt': 101, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 55, 'MaxEssential': 1, 'SumEssential': 34, 'AvgCyclomatic': 1, 'CountLineCode': 151, 'CountStmtDecl': 49, 'MaxCyclomatic': 4, 'SumCyclomatic': 43, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 42, 'CountSemicolon': 61, 'CountDeclMethod': 34, 'CountLineCodeExe': 57, 'CountLineComment': 3, 'CountClassCoupled': 24, 'CountClassDerived': 0, 'CountLineCodeDecl': 54, 'CountDeclMethodAll': 34, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.02', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 44, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 32, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 91, 'SumCyclomaticModified': 43, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 34, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 24, 'CountDeclInstanceVariable': 11, 'PercentLackOfCohesionModified': 91}"
26130,Java,"public class Util {

    public static final String STRING_EMPTY = """";
    public static final String SPACE = "" "";
    public static final String[] STRING_ARRAY_EMPTY = new String[0];
    public static final DateTimeFormatter DEFAULT_DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(""yyyy-MM-dd HH:mm:ss"");
    public static final Predicate<String> ANY_PATTERN = Pattern.compile("".*"").asMatchPredicate();
    public static final int[] INT_ARRAY_EMPTY = new int[0];
    public static final short[] SHORT_ARRAY_EMPTY = new short[0];
    public static final byte[] BYTE_ARRAY_EMPTY = new byte[0];

    private Util() {
        // utility class
    }

    public static boolean isNullOrEmpty(final CharSequence value) {
        return isNull(value) || value.length() == 0;
    }

    public static boolean isNotEmpty(final String value) {
        return nonNull(value) && !value.isBlank();
    }

    public static <T> boolean isNotEmpty(IntMap<T> map) {
        return nonNull(map) && !map.isEmpty();
    }

    public static boolean isNullOrEmpty(final Collection<?> collection) {
        return isNull(collection) || collection.isEmpty();
    }

    public static boolean isNullOrEmpty(int[] data) {
        return isNull(data) || data.length == 0;
    }

    public static <T> boolean isNullOrEmpty(T[] array) {
        return array == null || array.length == 0;
    }

    public static <T> int zeroIfNullOrElse(T obj, ToIntFunction<T> function) {
        return isNull(obj) ? 0 : function.applyAsInt(obj);
    }

    public static <T> long zeroIfNullOrElseLong(T obj, ToLongFunction<T> function) {
        return  isNull(obj) ? 0 : function.applyAsLong(obj);
    }

    public static <T> boolean falseIfNullOrElse(T obj, Predicate<T> predicate) {
        return nonNull(obj) && predicate.test(obj);
    }

    public static <T> String emptyIfNullOrElse(T obj, Function<T, String> function) {
        return isNull(obj) ? STRING_EMPTY : function.apply(obj);
    }

    public static <T, R> R computeIfNonNull(T obj, Function<T, R> function) {
        return isNull(obj) ? null : function.apply(obj);
    }

    public static <T> void doIfNonNull(T obj, Consumer<T> action) {
        if(nonNull(obj)) {
            action.accept(obj);
        }
    }

    public static boolean contains(int[] array, int obj) {
        for (int element : array) {
            if (element == obj) {
                return true;
            }
        }
        return false;
    }

    public static <T> boolean contains(T[] array, T obj) {
        for (var element : array) {
            if(Objects.equals(element, obj)) {
                return true;
            }
        }
        return false;
    }

    public static String hash(final String value) throws NoSuchAlgorithmException {
        var md = MessageDigest.getInstance(CommonSettings.hashAlgorithm());
        byte[] raw = value.getBytes(StandardCharsets.UTF_8);
        return Base64.getEncoder().encodeToString(md.digest(raw));
    }

    public static int hashIp(String ip)  {
        final String[] rawByte = ip.split(""\\."");
        final int[] rawIp = new int[4];
        for (int i = 0; i < 4; i++) {
            rawIp[i] = Integer.parseInt(rawByte[i]);
        }

        return rawIp[0] | (rawIp[1] << 8) | (rawIp[2] << 16) | (rawIp[3] << 24);
    }

    public static boolean isDigit(String text) {
        if (isNullOrEmpty(text)) {
            return false;
        }
        for (char c : text.toCharArray()) {
            if (!Character.isDigit(c)) {
                return false;
            }
        }
        return true;
    }

    public static boolean isFloat(final String value) {
        return isNumeric(value, true);
    }

    public static boolean isInteger(final String value) {
        return isNumeric(value, false);
    }

    private static boolean isNumeric(final String value, boolean includePoint) {
        if(isNullOrEmpty(value)) {
            return false;
        }

        if(value.charAt(value.length() -1) == '.' && !includePoint) {
            return false;
        }

        var beginIndex = 0;
        if(value.charAt(0) == '-') {
            if(value.length() == 1) {
                return false;
            }
            beginIndex = 1;
        }

        return checkNumeric(value, includePoint, beginIndex);
    }

    private static boolean checkNumeric(String value, boolean includePoint, int beginIndex) {
        var points = 0;

        for(var i = beginIndex; i < value.length(); i++) {
            var character = value.charAt(i);
            final var isPoint = character == '.';
            if(isPoint) {
                if(!includePoint) {
                    return false;
                }
                points++;
            }

            if(points > 1) {
                return false;
            }

            if(!isPoint && !Character.isDigit(character)) {
                return false;
            }
        }
        return true;
    }

    public static boolean isAlphaNumeric(String text) {
        if (isNullOrEmpty(text)) {
            return false;
        }
        for (char c : text.toCharArray()) {
            if (!Character.isLetterOrDigit(c)) {
                return false;
            }
        }
        return true;
    }

    public static List<Field> fieldsOf(final Class<?> classToSearch) {
        List<Field> fields = new ArrayList<>();
        Class<?> searchClass = classToSearch;
        while (nonNull(searchClass)) {
            fields.addAll(Stream.of(searchClass.getDeclaredFields()).collect(Collectors.toList()));
            searchClass = searchClass.getSuperclass();
        }
        return fields;
    }

    public static Field findField(final Class<?> classToSearch, String fieldName) {
        Class<?> searchClass = classToSearch;
        Field field = null;
        while (nonNull(searchClass)) {
            try {
                field = searchClass.getDeclaredField(fieldName);
                break;
            } catch (NoSuchFieldException e) {
                searchClass = searchClass.getSuperclass();
            }
        }
        return field;
    }


    public static boolean isAnyNull(Object... objects) {
        for (Object object : objects) {
            if(isNull(object)) {
                return true;
            }
        }
        return false;
    }

    public static int parseNextInt(StringTokenizer st, int defaultVal) {
        if (st.hasMoreTokens()) {
            final String token = st.nextToken();
            if (isInteger(token)) {
                return Integer.parseInt(token);
            }
        }
        return defaultVal;
    }

    public static boolean isBetween(int number, int min, int max) {
        return  number >= min && number <= max;
    }

    public static boolean isNotEmpty(IntCollection collection) {
        return nonNull(collection) && collection.size() > 0;
    }

    public static LocalDateTime parseLocalDateTime(String dateTimeString) {
        if (dateTimeString.length() > 10) {
            return LocalDateTime.parse(dateTimeString, DEFAULT_DATE_TIME_FORMATTER);
        } else {
            return LocalDate.parse(dateTimeString, DateTimeFormatter.ISO_LOCAL_DATE).atStartOfDay();
        }
    }

    public static String formatDate(LocalDateTime dateTime) {
        return dateTime.format(DateTimeFormatter.ISO_DATE);
    }

    public static String formatDateTime(LocalDateTime dateTime) {
        return dateTime.format(DEFAULT_DATE_TIME_FORMATTER);
    }

    public static String formatDateTime(long epochMilli) {
        return  DEFAULT_DATE_TIME_FORMATTER.format(Instant.ofEpochMilli(epochMilli).atZone(ZoneId.systemDefault()));
    }
}",1,777 587 2000 123 777 809 657 2001 2002 61 362 59 777 809 657 2001 2003 61 362 59 777 809 657 2001 91 93 2004 61 744 2001 91 1500 93 59 777 809 657 2005 2006 61 2005 46 2007 40 362 41 59 777 809 657 2008 60 2001 62 2009 61 2010 46 2011 40 362 41 46 2012 40 41 59 777 809 657 704 91 93 2013 61 744 704 91 1500 93 59 777 809 657 803 91 93 2014 61 744 803 91 1500 93 59 777 809 657 574 91 93 2015 61 744 574 91 1500 93 59 773 2000 40 41 123 330 125 777 809 570 2016 40 657 2017 2018 41 123 792 2019 40 2018 41 309 2018 46 2020 40 41 323 1500 59 125 777 809 570 2021 40 657 2001 2018 41 123 792 2022 40 2018 41 307 33 2018 46 2023 40 41 59 125 777 809 60 2024 62 570 2021 40 2025 60 2024 62 2026 41 123 792 2027 40 2026 41 307 33 2026 46 2028 40 41 59 125 777 809 570 2016 40 657 2029 60 63 62 2030 41 123 792 2031 40 2030 41 309 2030 46 2032 40 41 59 125 777 809 570 2016 40 704 91 93 2033 41 123 792 2034 40 2033 41 309 2033 46 2035 323 1500 59 125 777 809 60 2024 62 570 2016 40 2024 91 93 2036 41 123 792 2036 323 2037 309 2036 46 2038 323 1500 59 125 777 809 60 2024 62 704 2039 40 2024 2040 44 2041 60 2024 62 2042 41 123 792 2043 40 2040 41 63 1500 58 2042 46 2044 40 2040 41 59 125 777 809 60 2024 62 726 2045 40 2024 2040 44 2046 60 2024 62 2042 41 123 792 2047 40 2040 41 63 1500 58 2042 46 2048 40 2040 41 59 125 777 809 60 2024 62 570 2049 40 2024 2040 44 2008 60 2024 62 2050 41 123 792 2051 40 2040 41 307 2050 46 2052 40 2040 41 59 125 777 809 60 2024 62 2001 2053 40 2024 2040 44 2054 60 2024 44 2001 62 2042 41 123 792 2055 40 2040 41 63 2002 58 2042 46 2056 40 2040 41 59 125 777 809 60 2024 44 2057 62 2057 2058 40 2024 2040 44 2054 60 2024 44 2057 62 2042 41 123 792 2059 40 2040 41 63 2060 58 2042 46 2061 40 2040 41 59 125 777 809 60 2024 62 865 2062 40 2024 2040 44 2063 60 2024 62 2064 41 123 688 40 2065 40 2040 41 41 123 2064 46 2066 40 2040 41 59 125 125 777 809 570 2067 40 704 91 93 2036 44 704 2040 41 123 664 40 704 2068 58 2036 41 123 688 40 2068 323 2040 41 123 792 2069 59 125 125 792 2070 59 125 777 809 60 2024 62 570 2067 40 2024 91 93 2036 44 2024 2040 41 123 664 40 2071 2072 58 2036 41 123 688 40 2073 46 2074 40 2072 44 2040 41 41 123 792 2075 59 125 125 792 2076 59 125 777 809 2001 2077 40 657 2001 2018 41 826 2078 123 2079 2080 61 2081 46 2082 40 2083 46 2084 40 41 41 59 574 91 93 2085 61 2018 46 2086 40 2087 46 2088 41 59 792 2089 46 2090 40 41 46 2091 40 2080 46 2092 40 2085 41 41 59 125 777 809 704 2093 40 2001 2094 41 123 657 2001 91 93 2095 61 2094 46 2096 40 362 41 59 657 704 91 93 2097 61 744 704 91 1502 93 59 664 40 704 2098 61 1500 59 2098 60 1502 59 2098 349 41 123 2097 91 2098 93 61 2099 46 2100 40 2095 91 2098 93 41 59 125 792 2097 91 1500 93 124 40 2097 91 1501 93 332 1502 41 124 40 2097 91 1502 93 332 1503 41 124 40 2097 91 1502 93 332 1503 41 59 125 777 809 570 2101 40 2001 2102 41 123 688 40 2016 40 2102 41 41 123 792 2103 59 125 664 40 582 2104 58 2102 46 2105 40 41 41 123 688 40 33 2106 46 2101 40 2104 41 41 123 792 2107 59 125 125 792 2108 59 125 777 809 570 2109 40 657 2001 2018 41 123 792 2110 40 2018 44 2111 41 59 125 777 809 570 2112 40 657 2001 2018 41 123 792 2113 40 2018 44 2114 41 59 125 773 809 570 2115 40 657 2001 2018 44 570 2116 41 123 688 40 2016 40 2018 41 41 123 792 2117 59 125 688 40 2018 46 2118 40 2018 46 2119 40 41 45 1501 41 323 314 307 33 2116 41 123 792 2120 59 125 2121 2122 61 1500 59 688 40 2018 46 2118 40 1500 41 323 314 41 123 688 40 2018 46 2119 40 41 323 1501 41 123 792 2123 59 125 2122 61 1501 59 125 792 2124 40 2018 44 2116 44 2122 41 59 125 773 809 570 2125 40 2001 2018 44 570 2116 44 704 2126 41 123 2127 2128 61 1500 59 664 40 2127 2129 61 2126 59 2129 60 2018 46 2130 40 41 59 2129 349 41 123 2127 2131 61 2018 46 2132 40 2129 41 59 657 2127 2133 61 2131 323 314 59 688 40 2133 41 123 688 40 33 2116 41 123 792 2134 59 125 2128 349 59 125 688 40 2128 62 1501 41 123 792 2135 59 125 688 40 33 2133 307 33 2136 46 2101 40 2131 41 41 123 792 2137 59 125 125 792 2138 59 125 777 809 570 2139 40 2001 2102 41 123 688 40 2016 40 2102 41 41 123 792 2140 59 125 664 40 582 2141 58 2102 46 2142 40 41 41 123 688 40 33 2143 46 2144 40 2141 41 41 123 792 2145 59 125 125 792 2146 59 125 777 809 2147 60 2148 62 2149 40 657 2150 60 63 62 2151 41 123 2147 60 2148 62 2152 61 744 2153 60 62 40 41 59 2150 60 63 62 2154 61 2151 59 870 40 2155 40 2154 41 41 123 2152 46 2156 40 2157 46 2158 40 2154 46 2159 40 41 41 46 2160 40 2161 46 2162 40 41 41 41 59 2154 61 2154 46 2163 40 41 59 125 792 2152 59 125 777 809 2148 2164 40 657 2150 60 63 62 2151 44 2001 2165 41 123 2150 60 63 62 2166 61 2151 59 2148 2167 61 2168 59 870 40 2169 40 2166 41 41 123 830 123 2167 61 2166 46 2170 40 2165 41 59 572 59 125 580 40 2171 2172 41 123 2166 61 2166 46 2173 40 41 59 125 125 792 2167 59 125 777 809 570 2174 40 2175 322 2176 41 123 664 40 2175 2177 58 2176 41 123 688 40 2178 40 2177 41 41 123 792 2179 59 125 125 792 2180 59 125 777 809 704 2181 40 2182 2183 44 704 2184 41 123 688 40 2183 46 2185 40 41 41 123 657 2001 2186 61 2183 46 2187 40 41 59 688 40 2112 40 2186 41 41 123 792 2188 46 2189 40 2186 41 59 125 125 792 2184 59 125 777 809 570 2190 40 704 2191 44 704 2192 44 704 2193 41 123 792 2191 325 2192 307 2191 329 2193 59 125 777 809 570 2021 40 2194 2030 41 123 792 2195 40 2030 41 307 2030 46 2196 40 41 62 1500 59 125 777 809 2197 2198 40 2001 2199 41 123 688 40 2199 46 2200 40 41 62 1502 41 123 792 2197 46 2201 40 2199 44 2006 41 59 125 630 123 792 2202 46 2203 40 2199 44 2005 46 2204 41 46 2205 40 41 59 125 125 777 809 2001 2206 40 2197 2207 41 123 792 2207 46 2208 40 2005 46 2209 41 59 125 777 809 2001 2210 40 2197 2207 41 123 792 2207 46 2211 40 2006 41 59 125 777 809 2001 2210 40 726 2212 41 123 792 2006 46 2213 40 2214 46 2215 40 2212 41 46 2216 40 2217 46 2218 40 41 41 41 59 125 125 ,"{'AvgLine': 6, 'CountLine': 250, 'CountStmt': 148, 'MaxNesting': 3, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 94, 'MaxEssential': 6, 'SumEssential': 58, 'AvgCyclomatic': 2, 'CountLineCode': 204, 'CountStmtDecl': 62, 'MaxCyclomatic': 6, 'SumCyclomatic': 66, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 42, 'CountSemicolon': 80, 'CountDeclMethod': 33, 'CountLineCodeExe': 107, 'CountLineComment': 4, 'CountClassCoupled': 28, 'CountClassDerived': 0, 'CountLineCodeDecl': 55, 'CountDeclMethodAll': 33, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 7, 'SumCyclomaticStrict': 77, 'CountDeclClassMethod': 32, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 30, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 66, 'CountDeclClassVariable': 8, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 28, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2993,Java,"public class TradeWalletService {
    private static final Logger log = LoggerFactory.getLogger(TradeWalletService.class);
    private static final Coin MIN_DELAYED_PAYOUT_TX_FEE = Coin.valueOf(1000);

    private final WalletsSetup walletsSetup;
    private final Preferences preferences;
    private final NetworkParameters params;

    @Nullable
    private Wallet wallet;
    @Nullable
    private WalletConfig walletConfig;
    @Nullable
    private KeyParameter aesKey;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, initialization
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    public TradeWalletService(WalletsSetup walletsSetup, Preferences preferences) {
        this.walletsSetup = walletsSetup;
        this.preferences = preferences;
        this.params = Config.baseCurrencyNetworkParameters();
        walletsSetup.addSetupCompletedHandler(() -> {
            walletConfig = walletsSetup.getWalletConfig();
            wallet = walletsSetup.getBtcWallet();
        });
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // AesKey
    ///////////////////////////////////////////////////////////////////////////////////////////

    void setAesKey(@Nullable KeyParameter newAesKey) {
        this.aesKey = newAesKey;
    }

    @Nullable
    public KeyParameter getAesKey() {
        return aesKey;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Trade fee
    ///////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Create a BTC trading fee transaction for the maker or taker of an offer. The first output of the tx is for the
     * fee receiver. The second output is the reserve of the trade. There is an optional third output for change.
     *
     * @param fundingAddress          the provided source of funds in case the savings wallet is not used
     * @param reservedForTradeAddress the address of the trade reserve
     * @param changeAddress           the change address to use in case of overpayment or use of the savings wallet
     * @param reservedFundsForOffer   the amount to reserve for the trade
     * @param useSavingsWallet        {@code true} to use the savings wallet, {@code false} to use the funding address
     * @param tradingFee              the amount of the trading fee
     * @param txFee                   the mining fee for this transaction
     * @param feeReceiverAddress      the address of the receiver of the trading fee
     * @param doBroadcast             {@code true} to broadcast the transaction, {@code false} otherwise
     * @param callback                an optional callback to use when broadcasting the transaction
     * @return the optionally broadcast transaction
     * @throws InsufficientMoneyException if the request could not be completed due to not enough balance
     * @throws AddressFormatException if the fee receiver base58 address doesn't parse or its checksum is invalid
     */
    public Transaction createBtcTradingFeeTx(Address fundingAddress,
                                             Address reservedForTradeAddress,
                                             Address changeAddress,
                                             Coin reservedFundsForOffer,
                                             boolean useSavingsWallet,
                                             Coin tradingFee,
                                             Coin txFee,
                                             String feeReceiverAddress,
                                             boolean doBroadcast,
                                             @Nullable TxBroadcaster.Callback callback) throws InsufficientMoneyException, AddressFormatException {
        Transaction tradingFeeTx = new Transaction(params);
        SendRequest sendRequest = null;
        try {
            tradingFeeTx.addOutput(tradingFee, Address.fromString(params, feeReceiverAddress));
            // the reserved amount we need for the trade we send to our trade reservedForTradeAddress
            tradingFeeTx.addOutput(reservedFundsForOffer, reservedForTradeAddress);

            // we allow spending of unconfirmed tx (double spend risk is low and usability would suffer if we need to
            // wait for 1 confirmation)
            // In case of double spend we will detect later in the trade process and use a ban score to penalize bad behaviour (not impl. yet)
            sendRequest = SendRequest.forTx(tradingFeeTx);
            sendRequest.shuffleOutputs = false;
            sendRequest.aesKey = aesKey;
            if (useSavingsWallet) {
                sendRequest.coinSelector = new BtcCoinSelector(walletsSetup.getAddressesByContext(AddressEntry.Context.AVAILABLE),
                        preferences.getIgnoreDustThreshold());
            } else {
                sendRequest.coinSelector = new BtcCoinSelector(fundingAddress, preferences.getIgnoreDustThreshold());
            }
            // We use a fixed fee

            sendRequest.fee = txFee;
            sendRequest.feePerKb = Coin.ZERO;
            sendRequest.ensureMinRequiredFee = false;

            // Change is optional in case of overpay or use of funds from savings wallet
            sendRequest.changeAddress = changeAddress;

            checkNotNull(wallet, ""Wallet must not be null"");
            wallet.completeTx(sendRequest);
            if (removeDust(tradingFeeTx)) {
                wallet.signTransaction(sendRequest);
            }
            WalletService.printTx(""tradingFeeTx"", tradingFeeTx);

            if (doBroadcast && callback != null) {
                broadcastTx(tradingFeeTx, callback);
            }

            return tradingFeeTx;
        } catch (Throwable t) {
            if (wallet != null && sendRequest != null && sendRequest.coinSelector != null) {
                log.error(""Balance = {}; CoinSelector = {}"", wallet.getBalance(sendRequest.coinSelector), sendRequest.coinSelector);
            }
            log.error(""createBtcTradingFeeTx failed: tradingFeeTx={}, txOutputs={}"", tradingFeeTx.toString(),
                    tradingFeeTx.getOutputs());
            throw t;
        }
    }

    public Transaction completeBsqTradingFeeTx(Transaction preparedBsqTx,
                                               Address fundingAddress,
                                               Address reservedForTradeAddress,
                                               Address changeAddress,
                                               Coin reservedFundsForOffer,
                                               boolean useSavingsWallet,
                                               Coin txFee)
            throws TransactionVerificationException, WalletException, InsufficientMoneyException, AddressFormatException {
        try {
            // preparedBsqTx has following structure:
            // inputs [1-n] BSQ inputs
            // outputs [0-1] BSQ change output
            // mining fee: burned BSQ fee

            // We add BTC mining fee. Result tx looks like:
            // inputs [1-n] BSQ inputs
            // inputs [1-n] BTC inputs
            // outputs [0-1] BSQ change output
            // outputs [1] BTC reservedForTrade output
            // outputs [0-1] BTC change output
            // mining fee: BTC mining fee + burned BSQ fee

            // In case all BSQ were burnt as fees we have no receiver output and it might be that there are no change outputs
            // We need to guarantee that min. 1 valid output is added (OP_RETURN does not count). So we use a higher input
            // for BTC to force an additional change output.

            final int preparedBsqTxInputsSize = preparedBsqTx.getInputs().size();
            final boolean hasBsqOutputs = !preparedBsqTx.getOutputs().isEmpty();

            // If there are no BSQ change outputs an output larger than the burnt BSQ amount has to be added as the first
            // output to make sure the reserved funds are in output 1, deposit tx input creation depends on the reserve
            // being output 1. The amount has to be larger than the BSQ input to make sure the inputs get burnt.
            // The BTC changeAddress is used, so it might get used for both output 0 and output 2.
            if (!hasBsqOutputs) {
                var bsqInputValue = preparedBsqTx.getInputs().stream()
                        .map(TransactionInput::getValue)
                        .reduce(Coin.valueOf(0), Coin::add);

                preparedBsqTx.addOutput(bsqInputValue.add(Coin.valueOf(1)), changeAddress);
            }
            // the reserved amount we need for the trade we send to our trade reservedForTradeAddress
            preparedBsqTx.addOutput(reservedFundsForOffer, reservedForTradeAddress);

            // we allow spending of unconfirmed tx (double spend risk is low and usability would suffer if we need to
            // wait for 1 confirmation)
            // In case of double spend we will detect later in the trade process and use a ban score to penalize bad behaviour (not impl. yet)

            SendRequest sendRequest = SendRequest.forTx(preparedBsqTx);
            sendRequest.shuffleOutputs = false;
            sendRequest.aesKey = aesKey;
            if (useSavingsWallet) {
                sendRequest.coinSelector = new BtcCoinSelector(walletsSetup.getAddressesByContext(AddressEntry.Context.AVAILABLE),
                        preferences.getIgnoreDustThreshold());
            } else {
                sendRequest.coinSelector = new BtcCoinSelector(fundingAddress, preferences.getIgnoreDustThreshold());
            }
            // We use a fixed fee
            sendRequest.fee = txFee;
            sendRequest.feePerKb = Coin.ZERO;
            sendRequest.ensureMinRequiredFee = false;

            sendRequest.signInputs = false;

            // Change is optional in case of overpay or use of funds from savings wallet
            sendRequest.changeAddress = changeAddress;

            checkNotNull(wallet, ""Wallet must not be null"");
            wallet.completeTx(sendRequest);
            Transaction resultTx = sendRequest.tx;
            removeDust(resultTx);

            // Sign all BTC inputs
            for (int i = preparedBsqTxInputsSize; i < resultTx.getInputs().size(); i++) {
                TransactionInput txIn = resultTx.getInputs().get(i);
                checkArgument(txIn.getConnectedOutput() != null &&
                                txIn.getConnectedOutput().isMine(wallet),
                        ""txIn.getConnectedOutput() is not in our wallet. That must not happen."");
                WalletService.signTransactionInput(wallet, aesKey, resultTx, txIn, i);
                WalletService.checkScriptSig(resultTx, txIn, i);
            }

            WalletService.checkWalletConsistency(wallet);
            WalletService.verifyTransaction(resultTx);

            WalletService.printTx(Res.getBaseCurrencyCode() + "" wallet: Signed tx"", resultTx);
            return resultTx;
        } catch (Throwable t) {
            log.error(""completeBsqTradingFeeTx: preparedBsqTx={}"", preparedBsqTx.toString());
            throw t;
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Deposit tx
    ///////////////////////////////////////////////////////////////////////////////////////////


    // We construct the deposit transaction in the way that the buyer is always the first entry (inputs, outputs, MS keys) and then the seller.
    // In the creation of the deposit tx the taker/maker roles are the determining roles instead of buyer/seller.
    // In the payout tx it is the buyer/seller role. We keep the buyer/seller ordering over all transactions to not get confusion with ordering,
    // which is important to follow correctly specially for the order of the MS keys.


    /**
     * The taker creates a dummy transaction to get the input(s) and optional change output for the amount and the
     * taker's address for that trade. That will be used to send to the maker for creating the deposit transaction.
     *
     * @param takeOfferFeeTx the take offer fee tx
     * @param inputAmount    amount of takers input
     * @param txFee          mining fee
     * @return a data container holding the inputs, the output value and address
     * @throws TransactionVerificationException if there was an unexpected problem with the created dummy tx
     */
    public InputsAndChangeOutput takerCreatesDepositTxInputs(Transaction takeOfferFeeTx,
                                                             Coin inputAmount,
                                                             Coin txFee)
            throws TransactionVerificationException {
        // We add the mining fee 2 times to the deposit tx:
        // 1. Will be spent when publishing the deposit tx (paid by buyer)
        // 2. Will be added to the MS amount, so when publishing the payout tx the fee is already there and the outputs are not changed by fee reduction
        // The fee for the payout will be paid by the seller.

        /*
         The tx we create has that structure:

         IN[0]  input from taker fee tx > inputAmount (including tx fee) (unsigned)
         OUT[0] dummyOutputAmount (inputAmount - tx fee)

         We are only interested in the inputs.
         We get the exact input value from the taker fee tx so we don't create a change output.
         */

        // inputAmount includes the tx fee. So we subtract the fee to get the dummyOutputAmount.
        Coin dummyOutputAmount = inputAmount.subtract(txFee);

        Transaction dummyTX = new Transaction(params);
        // The output is just used to get the right inputs and change outputs, so we use an anonymous ECKey, as it will never be used for anything.
        // We don't care about fee calculation differences between the real tx and that dummy tx as we use a static tx fee.
        TransactionOutput dummyOutput = new TransactionOutput(params, dummyTX, dummyOutputAmount, SegwitAddress.fromKey(params, new ECKey()));
        dummyTX.addOutput(dummyOutput);

        // Find the needed inputs to pay the output, optionally add 1 change output.
        // Normally only 1 input and no change output is used, but we support multiple inputs and 1 change output.
        // Our spending transaction output is from the create offer fee payment.

        // We created the take offer fee tx in the structure that the second output is for the funds for the deposit tx.
        TransactionOutput reservedForTradeOutput = takeOfferFeeTx.getOutputs().get(1);
        checkArgument(reservedForTradeOutput.getValue().equals(inputAmount),
                ""Reserve amount does not equal input amount"");
        dummyTX.addInput(reservedForTradeOutput);

        WalletService.verifyTransaction(dummyTX);

        //WalletService.printTx(""dummyTX"", dummyTX);

        List<RawTransactionInput> rawTransactionInputList = dummyTX.getInputs().stream().map(e -> {
            checkNotNull(e.getConnectedOutput(), ""e.getConnectedOutput() must not be null"");
            checkNotNull(e.getConnectedOutput().getParentTransaction(),
                    ""e.getConnectedOutput().getParentTransaction() must not be null"");
            checkNotNull(e.getValue(), ""e.getValue() must not be null"");
            return getRawInputFromTransactionInput(e);
        }).collect(Collectors.toList());


        // TODO changeOutputValue and changeOutputAddress is not used as taker spends exact amount from fee tx.
        // Change is handled already at the fee tx creation so the handling of a change output for the deposit tx
        // can be removed here. We still keep it atm as we prefer to not introduce a larger
        // refactoring. When new trade protocol gets implemented this can be cleaned.
        // The maker though can have a change output if the taker takes less as the max. offer amount!
        return new InputsAndChangeOutput(new ArrayList<>(rawTransactionInputList), 0, null);
    }

    public PreparedDepositTxAndMakerInputs sellerAsMakerCreatesDepositTx(Coin makerInputAmount,
                                                                         Coin msOutputAmount,
                                                                         List<RawTransactionInput> takerRawTransactionInputs,
                                                                         long takerChangeOutputValue,
                                                                         @Nullable String takerChangeAddressString,
                                                                         Address makerAddress,
                                                                         Address makerChangeAddress,
                                                                         byte[] buyerPubKey,
                                                                         byte[] sellerPubKey)
            throws SigningException, TransactionVerificationException, WalletException, AddressFormatException {
        return makerCreatesDepositTx(false,
                makerInputAmount,
                msOutputAmount,
                takerRawTransactionInputs,
                takerChangeOutputValue,
                takerChangeAddressString,
                makerAddress,
                makerChangeAddress,
                buyerPubKey,
                sellerPubKey);
    }

    public PreparedDepositTxAndMakerInputs buyerAsMakerCreatesAndSignsDepositTx(Coin makerInputAmount,
                                                                                Coin msOutputAmount,
                                                                                List<RawTransactionInput> takerRawTransactionInputs,
                                                                                long takerChangeOutputValue,
                                                                                @Nullable String takerChangeAddressString,
                                                                                Address makerAddress,
                                                                                Address makerChangeAddress,
                                                                                byte[] buyerPubKey,
                                                                                byte[] sellerPubKey)
            throws SigningException, TransactionVerificationException, WalletException, AddressFormatException {
        return makerCreatesDepositTx(true,
                makerInputAmount,
                msOutputAmount,
                takerRawTransactionInputs,
                takerChangeOutputValue,
                takerChangeAddressString,
                makerAddress,
                makerChangeAddress,
                buyerPubKey,
                sellerPubKey);
    }

    /**
     * The maker creates the deposit transaction using the takers input(s) and optional output and signs his input(s).
     *
     * @param makerIsBuyer              the flag indicating if we are in the maker as buyer role or the opposite
     * @param makerInputAmount          the input amount of the maker
     * @param msOutputAmount            the output amount to our MS output
     * @param takerRawTransactionInputs raw data for the connected outputs for all inputs of the taker (normally 1 input)
     * @param takerChangeOutputValue    optional taker change output value
     * @param takerChangeAddressString  optional taker change address
     * @param makerAddress              the maker's address
     * @param makerChangeAddress        the maker's change address
     * @param buyerPubKey               the public key of the buyer
     * @param sellerPubKey              the public key of the seller
     * @return a data container holding the serialized transaction and the maker raw inputs
     * @throws SigningException if there was an unexpected problem signing (one of) the input(s) from the maker's wallet
     * @throws AddressFormatException if the taker base58 change address doesn't parse or its checksum is invalid
     * @throws TransactionVerificationException if there was an unexpected problem with the deposit tx or its signature(s)
     * @throws WalletException if the maker's wallet is null or there was an error choosing deposit tx input(s) from it
     */
    private PreparedDepositTxAndMakerInputs makerCreatesDepositTx(boolean makerIsBuyer,
                                                                  Coin makerInputAmount,
                                                                  Coin msOutputAmount,
                                                                  List<RawTransactionInput> takerRawTransactionInputs,
                                                                  long takerChangeOutputValue,
                                                                  @Nullable String takerChangeAddressString,
                                                                  Address makerAddress,
                                                                  Address makerChangeAddress,
                                                                  byte[] buyerPubKey,
                                                                  byte[] sellerPubKey)
            throws SigningException, TransactionVerificationException, WalletException, AddressFormatException {
        checkArgument(!takerRawTransactionInputs.isEmpty());

        // First we construct a dummy TX to get the inputs and outputs we want to use for the real deposit tx.
        // Similar to the way we did in the createTakerDepositTxInputs method.
        Transaction dummyTx = new Transaction(params);
        TransactionOutput dummyOutput = new TransactionOutput(params, dummyTx, makerInputAmount, SegwitAddress.fromKey(params, new ECKey()));
        dummyTx.addOutput(dummyOutput);
        addAvailableInputsAndChangeOutputs(dummyTx, makerAddress, makerChangeAddress);
        // Normally we have only 1 input but we support multiple inputs if the user has paid in with several transactions.
        List<TransactionInput> makerInputs = dummyTx.getInputs();
        TransactionOutput makerOutput = null;

        // We don't support more than 1 optional change output
        checkArgument(dummyTx.getOutputs().size() < 3, ""dummyTx.getOutputs().size() >= 3"");

        // Only save change outputs, the dummy output is ignored (that's why we start with index 1)
        if (dummyTx.getOutputs().size() > 1) {
            makerOutput = dummyTx.getOutput(1);
        }

        // Now we construct the real deposit tx
        Transaction preparedDepositTx = new Transaction(params);

        ArrayList<RawTransactionInput> makerRawTransactionInputs = new ArrayList<>();
        if (makerIsBuyer) {
            // Add buyer inputs
            for (TransactionInput input : makerInputs) {
                preparedDepositTx.addInput(input);
                makerRawTransactionInputs.add(getRawInputFromTransactionInput(input));
            }

            // Add seller inputs
            // the seller's input is not signed so we attach empty script bytes
            for (RawTransactionInput rawTransactionInput : takerRawTransactionInputs)
                preparedDepositTx.addInput(getTransactionInput(preparedDepositTx, new byte[]{}, rawTransactionInput));
        } else {
            // taker is buyer role

            // Add buyer inputs
            // the seller's input is not signed so we attach empty script bytes
            for (RawTransactionInput rawTransactionInput : takerRawTransactionInputs)
                preparedDepositTx.addInput(getTransactionInput(preparedDepositTx, new byte[]{}, rawTransactionInput));

            // Add seller inputs
            for (TransactionInput input : makerInputs) {
                preparedDepositTx.addInput(input);
                makerRawTransactionInputs.add(getRawInputFromTransactionInput(input));
            }
        }


        // Add MultiSig output
        Script hashedMultiSigOutputScript = get2of2MultiSigOutputScript(buyerPubKey, sellerPubKey, false);

        // Tx fee for deposit tx will be paid by buyer.
        TransactionOutput hashedMultiSigOutput = new TransactionOutput(params, preparedDepositTx, msOutputAmount,
                hashedMultiSigOutputScript.getProgram());
        preparedDepositTx.addOutput(hashedMultiSigOutput);

        TransactionOutput takerTransactionOutput = null;
        if (takerChangeOutputValue > 0 && takerChangeAddressString != null) {
            takerTransactionOutput = new TransactionOutput(params, preparedDepositTx, Coin.valueOf(takerChangeOutputValue),
                    Address.fromString(params, takerChangeAddressString));
        }

        if (makerIsBuyer) {
            // Add optional buyer outputs
            if (makerOutput != null) {
                preparedDepositTx.addOutput(makerOutput);
            }

            // Add optional seller outputs
            if (takerTransactionOutput != null) {
                preparedDepositTx.addOutput(takerTransactionOutput);
            }
        } else {
            // taker is buyer role

            // Add optional seller outputs
            if (takerTransactionOutput != null) {
                preparedDepositTx.addOutput(takerTransactionOutput);
            }

            // Add optional buyer outputs
            if (makerOutput != null) {
                preparedDepositTx.addOutput(makerOutput);
            }
        }

        int start = makerIsBuyer ? 0 : takerRawTransactionInputs.size();
        int end = makerIsBuyer ? makerInputs.size() : preparedDepositTx.getInputs().size();
        for (int i = start; i < end; i++) {
            TransactionInput input = preparedDepositTx.getInput(i);
            signInput(preparedDepositTx, input, i);
            WalletService.checkScriptSig(preparedDepositTx, input, i);
        }

        WalletService.printTx(""makerCreatesDepositTx"", preparedDepositTx);
        WalletService.verifyTransaction(preparedDepositTx);

        return new PreparedDepositTxAndMakerInputs(makerRawTransactionInputs, preparedDepositTx.bitcoinSerialize());
    }

    /**
     * The taker signs the deposit transaction he received from the maker and publishes it.
     *
     * @param takerIsSeller             the flag indicating if we are in the taker as seller role or the opposite
     * @param makersDepositTxSerialized the prepared deposit transaction signed by the maker
     * @param msOutputAmount            the MultiSig output amount, as determined by the taker
     * @param buyerInputs               the connected outputs for all inputs of the buyer
     * @param sellerInputs              the connected outputs for all inputs of the seller
     * @param buyerPubKey               the public key of the buyer
     * @param sellerPubKey              the public key of the seller
     * @throws SigningException if (one of) the taker input(s) was of an unrecognized type for signing
     * @throws TransactionVerificationException if a non-P2WH maker-as-buyer input wasn't signed, the maker's MultiSig
     * script, contract hash or output amount doesn't match the taker's, or there was an unexpected problem with the
     * final deposit tx or its signatures
     * @throws WalletException if the taker's wallet is null or structurally inconsistent
     */
    public Transaction takerSignsDepositTx(boolean takerIsSeller,
                                           byte[] makersDepositTxSerialized,
                                           Coin msOutputAmount,
                                           List<RawTransactionInput> buyerInputs,
                                           List<RawTransactionInput> sellerInputs,
                                           byte[] buyerPubKey,
                                           byte[] sellerPubKey)
            throws SigningException, TransactionVerificationException, WalletException {
        Transaction makersDepositTx = new Transaction(params, makersDepositTxSerialized);

        checkArgument(!buyerInputs.isEmpty());
        checkArgument(!sellerInputs.isEmpty());

        // Check if maker's MultiSig script is identical to the taker's
        Script hashedMultiSigOutputScript = get2of2MultiSigOutputScript(buyerPubKey, sellerPubKey, false);
        if (!makersDepositTx.getOutput(0).getScriptPubKey().equals(hashedMultiSigOutputScript)) {
            throw new TransactionVerificationException(""Maker's hashedMultiSigOutputScript does not match taker's hashedMultiSigOutputScript"");
        }

        // Check if maker's MultiSig output value is identical to the taker's
        if (!makersDepositTx.getOutput(0).getValue().equals(msOutputAmount)) {
            throw new TransactionVerificationException(""Maker's MultiSig output amount does not match taker's MultiSig output amount"");
        }

        // The outpoints are not available from the serialized makersDepositTx, so we cannot use that tx directly, but we use it to construct a new
        // depositTx
        Transaction depositTx = new Transaction(params);

        if (takerIsSeller) {
            // Add buyer inputs and apply signature
            // We grab the signature from the makersDepositTx and apply it to the new tx input
            for (int i = 0; i < buyerInputs.size(); i++) {
                TransactionInput makersInput = makersDepositTx.getInputs().get(i);
                byte[] makersScriptSigProgram = makersInput.getScriptSig().getProgram();
                TransactionInput input = getTransactionInput(depositTx, makersScriptSigProgram, buyerInputs.get(i));
                Script scriptPubKey = checkNotNull(input.getConnectedOutput()).getScriptPubKey();
                if (makersScriptSigProgram.length == 0 && !ScriptPattern.isP2WH(scriptPubKey)) {
                    throw new TransactionVerificationException(""Non-segwit inputs from maker not signed."");
                }
                if (!TransactionWitness.EMPTY.equals(makersInput.getWitness())) {
                    input.setWitness(makersInput.getWitness());
                }
                depositTx.addInput(input);
            }

            // Add seller inputs
            for (RawTransactionInput rawTransactionInput : sellerInputs) {
                depositTx.addInput(getTransactionInput(depositTx, new byte[]{}, rawTransactionInput));
            }
        } else {
            // taker is buyer
            // Add buyer inputs and apply signature
            for (RawTransactionInput rawTransactionInput : buyerInputs) {
                depositTx.addInput(getTransactionInput(depositTx, new byte[]{}, rawTransactionInput));
            }

            // Add seller inputs
            // We grab the signature from the makersDepositTx and apply it to the new tx input
            for (int i = buyerInputs.size(), k = 0; i < makersDepositTx.getInputs().size(); i++, k++) {
                TransactionInput transactionInput = makersDepositTx.getInputs().get(i);
                // We get the deposit tx unsigned if maker is seller
                depositTx.addInput(getTransactionInput(depositTx, new byte[]{}, sellerInputs.get(k)));
            }
        }

        // Add all outputs from makersDepositTx to depositTx
        makersDepositTx.getOutputs().forEach(depositTx::addOutput);
        WalletService.printTx(""makersDepositTx"", makersDepositTx);

        // Sign inputs
        int start = takerIsSeller ? buyerInputs.size() : 0;
        int end = takerIsSeller ? depositTx.getInputs().size() : buyerInputs.size();
        for (int i = start; i < end; i++) {
            TransactionInput input = depositTx.getInput(i);
            signInput(depositTx, input, i);
            WalletService.checkScriptSig(depositTx, input, i);
        }

        WalletService.printTx(""takerSignsDepositTx"", depositTx);

        WalletService.verifyTransaction(depositTx);
        WalletService.checkWalletConsistency(wallet);

        return depositTx;
    }


    public void sellerAsMakerFinalizesDepositTx(Transaction myDepositTx,
                                                Transaction takersDepositTx,
                                                int numTakersInputs)
            throws TransactionVerificationException, AddressFormatException {

        // We add takers signature from his inputs and add it to out tx which was already signed earlier.
        for (int i = 0; i < numTakersInputs; i++) {
            TransactionInput takersInput = takersDepositTx.getInput(i);
            Script takersScriptSig = takersInput.getScriptSig();
            TransactionInput txInput = myDepositTx.getInput(i);
            txInput.setScriptSig(takersScriptSig);
            TransactionWitness witness = takersInput.getWitness();
            if (!TransactionWitness.EMPTY.equals(witness)) {
                txInput.setWitness(witness);
            }
        }

        WalletService.printTx(""sellerAsMakerFinalizesDepositTx"", myDepositTx);
        WalletService.verifyTransaction(myDepositTx);
    }


    public void sellerAddsBuyerWitnessesToDepositTx(Transaction myDepositTx,
                                                    Transaction buyersDepositTxWithWitnesses) {
        int numberInputs = myDepositTx.getInputs().size();
        for (int i = 0; i < numberInputs; i++) {
            var txInput = myDepositTx.getInput(i);
            var witnessFromBuyer = buyersDepositTxWithWitnesses.getInput(i).getWitness();

            if (TransactionWitness.EMPTY.equals(txInput.getWitness()) &&
                    !TransactionWitness.EMPTY.equals(witnessFromBuyer)) {
                txInput.setWitness(witnessFromBuyer);
            }
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Delayed payout tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Transaction createDelayedUnsignedPayoutTx(Transaction depositTx,
                                                     String donationAddressString,
                                                     Coin minerFee,
                                                     long lockTime)
            throws AddressFormatException, TransactionVerificationException {
        TransactionOutput hashedMultiSigOutput = depositTx.getOutput(0);
        Transaction delayedPayoutTx = new Transaction(params);
        delayedPayoutTx.addInput(hashedMultiSigOutput);
        applyLockTime(lockTime, delayedPayoutTx);
        Coin outputAmount = hashedMultiSigOutput.getValue().subtract(minerFee);
        delayedPayoutTx.addOutput(outputAmount, Address.fromString(params, donationAddressString));
        WalletService.printTx(""Unsigned delayedPayoutTx ToDonationAddress"", delayedPayoutTx);
        WalletService.verifyTransaction(delayedPayoutTx);
        return delayedPayoutTx;
    }

    public byte[] signDelayedPayoutTx(Transaction delayedPayoutTx,
                                      Transaction preparedDepositTx,
                                      DeterministicKey myMultiSigKeyPair,
                                      byte[] buyerPubKey,
                                      byte[] sellerPubKey)
            throws AddressFormatException, TransactionVerificationException {

        Script redeemScript = get2of2MultiSigRedeemScript(buyerPubKey, sellerPubKey);
        Sha256Hash sigHash;
        Coin delayedPayoutTxInputValue = preparedDepositTx.getOutput(0).getValue();
        sigHash = delayedPayoutTx.hashForWitnessSignature(0, redeemScript,
                delayedPayoutTxInputValue, Transaction.SigHash.ALL, false);
        checkNotNull(myMultiSigKeyPair, ""myMultiSigKeyPair must not be null"");
        if (myMultiSigKeyPair.isEncrypted()) {
            checkNotNull(aesKey);
        }

        ECKey.ECDSASignature mySignature = myMultiSigKeyPair.sign(sigHash, aesKey).toCanonicalised();
        WalletService.printTx(""delayedPayoutTx for sig creation"", delayedPayoutTx);
        WalletService.verifyTransaction(delayedPayoutTx);
        return mySignature.encodeToDER();
    }

    public Transaction finalizeUnconnectedDelayedPayoutTx(Transaction delayedPayoutTx,
                                                          byte[] buyerPubKey,
                                                          byte[] sellerPubKey,
                                                          byte[] buyerSignature,
                                                          byte[] sellerSignature,
                                                          Coin inputValue)
            throws AddressFormatException, TransactionVerificationException, SignatureDecodeException {

        Script redeemScript = get2of2MultiSigRedeemScript(buyerPubKey, sellerPubKey);
        ECKey.ECDSASignature buyerECDSASignature = ECKey.ECDSASignature.decodeFromDER(buyerSignature);
        ECKey.ECDSASignature sellerECDSASignature = ECKey.ECDSASignature.decodeFromDER(sellerSignature);
        TransactionSignature buyerTxSig = new TransactionSignature(buyerECDSASignature, Transaction.SigHash.ALL, false);
        TransactionSignature sellerTxSig = new TransactionSignature(sellerECDSASignature, Transaction.SigHash.ALL, false);
        TransactionInput input = delayedPayoutTx.getInput(0);
        input.setScriptSig(ScriptBuilder.createEmpty());
        TransactionWitness witness = TransactionWitness.redeemP2WSH(redeemScript, sellerTxSig, buyerTxSig);
        input.setWitness(witness);
        WalletService.printTx(""finalizeDelayedPayoutTx"", delayedPayoutTx);
        WalletService.verifyTransaction(delayedPayoutTx);

        if (checkNotNull(inputValue).isLessThan(delayedPayoutTx.getOutputSum().add(MIN_DELAYED_PAYOUT_TX_FEE))) {
            throw new TransactionVerificationException(""Delayed payout tx is paying less than the minimum allowed tx fee"");
        }
        Script scriptPubKey = get2of2MultiSigOutputScript(buyerPubKey, sellerPubKey, false);
        input.getScriptSig().correctlySpends(delayedPayoutTx, 0, witness, inputValue, scriptPubKey, Script.ALL_VERIFY_FLAGS);
        return delayedPayoutTx;
    }

    public Transaction finalizeDelayedPayoutTx(Transaction delayedPayoutTx,
                                               byte[] buyerPubKey,
                                               byte[] sellerPubKey,
                                               byte[] buyerSignature,
                                               byte[] sellerSignature)
            throws AddressFormatException, TransactionVerificationException, WalletException, SignatureDecodeException {

        TransactionInput input = delayedPayoutTx.getInput(0);
        finalizeUnconnectedDelayedPayoutTx(delayedPayoutTx, buyerPubKey, sellerPubKey, buyerSignature, sellerSignature, input.getValue());

        WalletService.checkWalletConsistency(wallet);
        checkNotNull(input.getConnectedOutput(), ""input.getConnectedOutput() must not be null"");
        input.verify(input.getConnectedOutput());
        return delayedPayoutTx;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Standard payout tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Seller signs payout transaction, buyer has not signed yet.
     *
     * @param depositTx                 deposit transaction
     * @param buyerPayoutAmount         payout amount for buyer
     * @param sellerPayoutAmount        payout amount for seller
     * @param buyerPayoutAddressString  address for buyer
     * @param sellerPayoutAddressString address for seller
     * @param multiSigKeyPair           DeterministicKey for MultiSig from seller
     * @param buyerPubKey               the public key of the buyer
     * @param sellerPubKey              the public key of the seller
     * @return DER encoded canonical signature
     * @throws AddressFormatException if the buyer or seller base58 address doesn't parse or its checksum is invalid
     * @throws TransactionVerificationException if there was an unexpected problem with the payout tx or its signature
     */
    public byte[] buyerSignsPayoutTx(Transaction depositTx,
                                     Coin buyerPayoutAmount,
                                     Coin sellerPayoutAmount,
                                     String buyerPayoutAddressString,
                                     String sellerPayoutAddressString,
                                     DeterministicKey multiSigKeyPair,
                                     byte[] buyerPubKey,
                                     byte[] sellerPubKey)
            throws AddressFormatException, TransactionVerificationException {
        Transaction preparedPayoutTx = createPayoutTx(depositTx, buyerPayoutAmount, sellerPayoutAmount,
                buyerPayoutAddressString, sellerPayoutAddressString);
        // MS redeemScript
        Script redeemScript = get2of2MultiSigRedeemScript(buyerPubKey, sellerPubKey);
        // MS output from prev. tx is index 0
        Sha256Hash sigHash;
        TransactionOutput hashedMultiSigOutput = depositTx.getOutput(0);
        if (ScriptPattern.isP2SH(hashedMultiSigOutput.getScriptPubKey())) {
            sigHash = preparedPayoutTx.hashForSignature(0, redeemScript, Transaction.SigHash.ALL, false);
        } else {
            Coin inputValue = hashedMultiSigOutput.getValue();
            sigHash = preparedPayoutTx.hashForWitnessSignature(0, redeemScript,
                    inputValue, Transaction.SigHash.ALL, false);
        }
        checkNotNull(multiSigKeyPair, ""multiSigKeyPair must not be null"");
        if (multiSigKeyPair.isEncrypted()) {
            checkNotNull(aesKey);
        }
        ECKey.ECDSASignature buyerSignature = multiSigKeyPair.sign(sigHash, aesKey).toCanonicalised();
        WalletService.printTx(""prepared payoutTx"", preparedPayoutTx);
        WalletService.verifyTransaction(preparedPayoutTx);
        return buyerSignature.encodeToDER();
    }


    /**
     * Seller creates and signs payout transaction and adds signature of buyer to complete the transaction.
     *
     * @param depositTx                 deposit transaction
     * @param buyerSignature            DER encoded canonical signature of buyer
     * @param buyerPayoutAmount         payout amount for buyer
     * @param sellerPayoutAmount        payout amount for seller
     * @param buyerPayoutAddressString  address for buyer
     * @param sellerPayoutAddressString address for seller
     * @param multiSigKeyPair           seller's key pair for MultiSig
     * @param buyerPubKey               the public key of the buyer
     * @param sellerPubKey              the public key of the seller
     * @return the payout transaction
     * @throws AddressFormatException if the buyer or seller base58 address doesn't parse or its checksum is invalid
     * @throws TransactionVerificationException if there was an unexpected problem with the payout tx or its signatures
     * @throws WalletException if the seller's wallet is null or structurally inconsistent
     */
    public Transaction sellerSignsAndFinalizesPayoutTx(Transaction depositTx,
                                                       byte[] buyerSignature,
                                                       Coin buyerPayoutAmount,
                                                       Coin sellerPayoutAmount,
                                                       String buyerPayoutAddressString,
                                                       String sellerPayoutAddressString,
                                                       DeterministicKey multiSigKeyPair,
                                                       byte[] buyerPubKey,
                                                       byte[] sellerPubKey)
            throws AddressFormatException, TransactionVerificationException, WalletException, SignatureDecodeException {
        Transaction payoutTx = createPayoutTx(depositTx, buyerPayoutAmount, sellerPayoutAmount, buyerPayoutAddressString, sellerPayoutAddressString);
        // MS redeemScript
        Script redeemScript = get2of2MultiSigRedeemScript(buyerPubKey, sellerPubKey);
        // MS output from prev. tx is index 0
        TransactionOutput hashedMultiSigOutput = depositTx.getOutput(0);
        boolean hashedMultiSigOutputIsLegacy = ScriptPattern.isP2SH(hashedMultiSigOutput.getScriptPubKey());
        Sha256Hash sigHash;
        if (hashedMultiSigOutputIsLegacy) {
            sigHash = payoutTx.hashForSignature(0, redeemScript, Transaction.SigHash.ALL, false);
        } else {
            Coin inputValue = hashedMultiSigOutput.getValue();
            sigHash = payoutTx.hashForWitnessSignature(0, redeemScript,
                    inputValue, Transaction.SigHash.ALL, false);
        }
        checkNotNull(multiSigKeyPair, ""multiSigKeyPair must not be null"");
        if (multiSigKeyPair.isEncrypted()) {
            checkNotNull(aesKey);
        }
        ECKey.ECDSASignature sellerSignature = multiSigKeyPair.sign(sigHash, aesKey).toCanonicalised();
        TransactionSignature buyerTxSig = new TransactionSignature(ECKey.ECDSASignature.decodeFromDER(buyerSignature),
                Transaction.SigHash.ALL, false);
        TransactionSignature sellerTxSig = new TransactionSignature(sellerSignature, Transaction.SigHash.ALL, false);
        // Take care of order of signatures. Need to be reversed here. See comment below at getMultiSigRedeemScript (seller, buyer)
        TransactionInput input = payoutTx.getInput(0);
        if (hashedMultiSigOutputIsLegacy) {
            Script inputScript = ScriptBuilder.createP2SHMultiSigInputScript(ImmutableList.of(sellerTxSig, buyerTxSig),
                    redeemScript);
            input.setScriptSig(inputScript);
        } else {
            input.setScriptSig(ScriptBuilder.createEmpty());
            input.setWitness(TransactionWitness.redeemP2WSH(redeemScript, sellerTxSig, buyerTxSig));
        }
        WalletService.printTx(""payoutTx"", payoutTx);
        WalletService.verifyTransaction(payoutTx);
        WalletService.checkWalletConsistency(wallet);
        WalletService.checkScriptSig(payoutTx, input, 0);
        checkNotNull(input.getConnectedOutput(), ""input.getConnectedOutput() must not be null"");
        input.verify(input.getConnectedOutput());
        return payoutTx;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Mediated payoutTx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public byte[] signMediatedPayoutTx(Transaction depositTx,
                                       Coin buyerPayoutAmount,
                                       Coin sellerPayoutAmount,
                                       String buyerPayoutAddressString,
                                       String sellerPayoutAddressString,
                                       DeterministicKey myMultiSigKeyPair,
                                       byte[] buyerPubKey,
                                       byte[] sellerPubKey)
            throws AddressFormatException, TransactionVerificationException {
        Transaction preparedPayoutTx = createPayoutTx(depositTx, buyerPayoutAmount, sellerPayoutAmount, buyerPayoutAddressString, sellerPayoutAddressString);
        // MS redeemScript
        Script redeemScript = get2of2MultiSigRedeemScript(buyerPubKey, sellerPubKey);
        // MS output from prev. tx is index 0
        TransactionOutput hashedMultiSigOutput = depositTx.getOutput(0);
        boolean hashedMultiSigOutputIsLegacy = ScriptPattern.isP2SH(hashedMultiSigOutput.getScriptPubKey());
        Sha256Hash sigHash;
        if (hashedMultiSigOutputIsLegacy) {
            sigHash = preparedPayoutTx.hashForSignature(0, redeemScript, Transaction.SigHash.ALL, false);
        } else {
            Coin inputValue = hashedMultiSigOutput.getValue();
            sigHash = preparedPayoutTx.hashForWitnessSignature(0, redeemScript,
                    inputValue, Transaction.SigHash.ALL, false);
        }
        checkNotNull(myMultiSigKeyPair, ""myMultiSigKeyPair must not be null"");
        if (myMultiSigKeyPair.isEncrypted()) {
            checkNotNull(aesKey);
        }
        ECKey.ECDSASignature mySignature = myMultiSigKeyPair.sign(sigHash, aesKey).toCanonicalised();
        WalletService.printTx(""prepared mediated payoutTx for sig creation"", preparedPayoutTx);
        WalletService.verifyTransaction(preparedPayoutTx);
        return mySignature.encodeToDER();
    }

    public Transaction finalizeMediatedPayoutTx(Transaction depositTx,
                                                byte[] buyerSignature,
                                                byte[] sellerSignature,
                                                Coin buyerPayoutAmount,
                                                Coin sellerPayoutAmount,
                                                String buyerPayoutAddressString,
                                                String sellerPayoutAddressString,
                                                DeterministicKey multiSigKeyPair,
                                                byte[] buyerPubKey,
                                                byte[] sellerPubKey)
            throws AddressFormatException, TransactionVerificationException, WalletException, SignatureDecodeException {
        Transaction payoutTx = createPayoutTx(depositTx, buyerPayoutAmount, sellerPayoutAmount, buyerPayoutAddressString, sellerPayoutAddressString);
        // MS redeemScript
        Script redeemScript = get2of2MultiSigRedeemScript(buyerPubKey, sellerPubKey);
        // MS output from prev. tx is index 0
        checkNotNull(multiSigKeyPair, ""multiSigKeyPair must not be null"");
        TransactionSignature buyerTxSig = new TransactionSignature(ECKey.ECDSASignature.decodeFromDER(buyerSignature),
                Transaction.SigHash.ALL, false);
        TransactionSignature sellerTxSig = new TransactionSignature(ECKey.ECDSASignature.decodeFromDER(sellerSignature),
                Transaction.SigHash.ALL, false);
        // Take care of order of signatures. Need to be reversed here. See comment below at getMultiSigRedeemScript (seller, buyer)
        TransactionOutput hashedMultiSigOutput = depositTx.getOutput(0);
        boolean hashedMultiSigOutputIsLegacy = ScriptPattern.isP2SH(hashedMultiSigOutput.getScriptPubKey());
        TransactionInput input = payoutTx.getInput(0);
        if (hashedMultiSigOutputIsLegacy) {
            Script inputScript = ScriptBuilder.createP2SHMultiSigInputScript(ImmutableList.of(sellerTxSig, buyerTxSig),
                    redeemScript);
            input.setScriptSig(inputScript);
        } else {
            input.setScriptSig(ScriptBuilder.createEmpty());
            input.setWitness(TransactionWitness.redeemP2WSH(redeemScript, sellerTxSig, buyerTxSig));
        }
        WalletService.printTx(""mediated payoutTx"", payoutTx);
        WalletService.verifyTransaction(payoutTx);
        WalletService.checkWalletConsistency(wallet);
        WalletService.checkScriptSig(payoutTx, input, 0);
        checkNotNull(input.getConnectedOutput(), ""input.getConnectedOutput() must not be null"");
        input.verify(input.getConnectedOutput());
        return payoutTx;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Arbitrated payoutTx
    ///////////////////////////////////////////////////////////////////////////////////////////

    // TODO: Once we have removed legacy arbitrator from dispute domain we can remove that method as well.
    // Atm it is still used by ArbitrationManager.

    /**
     * A trader who got the signed tx from the arbitrator finalizes the payout tx.
     *
     * @param depositTxSerialized    serialized deposit tx
     * @param arbitratorSignature    DER encoded canonical signature of arbitrator
     * @param buyerPayoutAmount      payout amount of the buyer
     * @param sellerPayoutAmount     payout amount of the seller
     * @param buyerAddressString     the address of the buyer
     * @param sellerAddressString    the address of the seller
     * @param tradersMultiSigKeyPair the key pair for the MultiSig of the trader who calls that method
     * @param buyerPubKey            the public key of the buyer
     * @param sellerPubKey           the public key of the seller
     * @param arbitratorPubKey       the public key of the arbitrator
     * @return the completed payout tx
     * @throws AddressFormatException if the buyer or seller base58 address doesn't parse or its checksum is invalid
     * @throws TransactionVerificationException if there was an unexpected problem with the payout tx or its signature
     * @throws WalletException if the trade wallet is null or structurally inconsistent
     */
    public Transaction traderSignAndFinalizeDisputedPayoutTx(byte[] depositTxSerialized,
                                                             byte[] arbitratorSignature,
                                                             Coin buyerPayoutAmount,
                                                             Coin sellerPayoutAmount,
                                                             String buyerAddressString,
                                                             String sellerAddressString,
                                                             DeterministicKey tradersMultiSigKeyPair,
                                                             byte[] buyerPubKey,
                                                             byte[] sellerPubKey,
                                                             byte[] arbitratorPubKey)
            throws AddressFormatException, TransactionVerificationException, WalletException, SignatureDecodeException {
        Transaction depositTx = new Transaction(params, depositTxSerialized);
        TransactionOutput hashedMultiSigOutput = depositTx.getOutput(0);
        Transaction payoutTx = new Transaction(params);
        payoutTx.addInput(hashedMultiSigOutput);
        if (buyerPayoutAmount.isPositive()) {
            payoutTx.addOutput(buyerPayoutAmount, Address.fromString(params, buyerAddressString));
        }
        if (sellerPayoutAmount.isPositive()) {
            payoutTx.addOutput(sellerPayoutAmount, Address.fromString(params, sellerAddressString));
        }

        // take care of sorting!
        Script redeemScript = get2of3MultiSigRedeemScript(buyerPubKey, sellerPubKey, arbitratorPubKey);
        Sha256Hash sigHash;
        boolean hashedMultiSigOutputIsLegacy = !ScriptPattern.isP2SH(hashedMultiSigOutput.getScriptPubKey());
        if (hashedMultiSigOutputIsLegacy) {
            sigHash = payoutTx.hashForSignature(0, redeemScript, Transaction.SigHash.ALL, false);
        } else {
            Coin inputValue = hashedMultiSigOutput.getValue();
            sigHash = payoutTx.hashForWitnessSignature(0, redeemScript,
                    inputValue, Transaction.SigHash.ALL, false);
        }
        checkNotNull(tradersMultiSigKeyPair, ""tradersMultiSigKeyPair must not be null"");
        if (tradersMultiSigKeyPair.isEncrypted()) {
            checkNotNull(aesKey);
        }
        ECKey.ECDSASignature tradersSignature = tradersMultiSigKeyPair.sign(sigHash, aesKey).toCanonicalised();
        TransactionSignature tradersTxSig = new TransactionSignature(tradersSignature, Transaction.SigHash.ALL, false);
        TransactionSignature arbitratorTxSig = new TransactionSignature(ECKey.ECDSASignature.decodeFromDER(arbitratorSignature),
                Transaction.SigHash.ALL, false);
        TransactionInput input = payoutTx.getInput(0);
        // Take care of order of signatures. See comment below at getMultiSigRedeemScript (sort order needed here: arbitrator, seller, buyer)
        if (hashedMultiSigOutputIsLegacy) {
            Script inputScript = ScriptBuilder.createP2SHMultiSigInputScript(
                    ImmutableList.of(arbitratorTxSig, tradersTxSig),
                    redeemScript);
            input.setScriptSig(inputScript);
        } else {
            input.setScriptSig(ScriptBuilder.createEmpty());
            input.setWitness(TransactionWitness.redeemP2WSH(redeemScript, arbitratorTxSig, tradersTxSig));
        }
        WalletService.printTx(""disputed payoutTx"", payoutTx);
        WalletService.verifyTransaction(payoutTx);
        WalletService.checkWalletConsistency(wallet);
        WalletService.checkScriptSig(payoutTx, input, 0);
        checkNotNull(input.getConnectedOutput(), ""input.getConnectedOutput() must not be null"");
        input.verify(input.getConnectedOutput());
        return payoutTx;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Emergency payoutTx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Tuple2<String, String> emergencyBuildPayoutTxFrom2of2MultiSig(String depositTxHex,
                                                                         Coin buyerPayoutAmount,
                                                                         Coin sellerPayoutAmount,
                                                                         Coin txFee,
                                                                         String buyerAddressString,
                                                                         String sellerAddressString,
                                                                         String buyerPubKeyAsHex,
                                                                         String sellerPubKeyAsHex,
                                                                         boolean hashedMultiSigOutputIsLegacy) {
        byte[] buyerPubKey = ECKey.fromPublicOnly(Utils.HEX.decode(buyerPubKeyAsHex)).getPubKey();
        byte[] sellerPubKey = ECKey.fromPublicOnly(Utils.HEX.decode(sellerPubKeyAsHex)).getPubKey();
        Script redeemScript = get2of2MultiSigRedeemScript(buyerPubKey, sellerPubKey);
        Coin msOutputValue = buyerPayoutAmount.add(sellerPayoutAmount).add(txFee);
        Transaction payoutTx = new Transaction(params);
        Sha256Hash spendTxHash = Sha256Hash.wrap(depositTxHex);
        payoutTx.addInput(new TransactionInput(params, payoutTx, new byte[]{}, new TransactionOutPoint(params, 0, spendTxHash), msOutputValue));

        if (buyerPayoutAmount.isPositive()) {
            payoutTx.addOutput(buyerPayoutAmount, Address.fromString(params, buyerAddressString));
        }
        if (sellerPayoutAmount.isPositive()) {
            payoutTx.addOutput(sellerPayoutAmount, Address.fromString(params, sellerAddressString));
        }

        String redeemScriptHex = Utils.HEX.encode(redeemScript.getProgram());
        String unsignedTxHex = Utils.HEX.encode(payoutTx.bitcoinSerialize(!hashedMultiSigOutputIsLegacy));
        return new Tuple2<>(redeemScriptHex, unsignedTxHex);
    }

    public String emergencyGenerateSignature(String rawTxHex,
                                             String redeemScriptHex,
                                             Coin inputValue,
                                             String myPrivKeyAsHex)
            throws IllegalArgumentException {
        boolean hashedMultiSigOutputIsLegacy = true;
        if (rawTxHex.startsWith(""010000000001""))
            hashedMultiSigOutputIsLegacy = false;
        byte[] payload = Utils.HEX.decode(rawTxHex);
        Transaction payoutTx = new Transaction(params, payload, null, params.getDefaultSerializer(), payload.length);
        Script redeemScript = new Script(Utils.HEX.decode(redeemScriptHex));
        Sha256Hash sigHash;
        if (hashedMultiSigOutputIsLegacy) {
            sigHash = payoutTx.hashForSignature(0, redeemScript, Transaction.SigHash.ALL, false);
        } else {
            sigHash = payoutTx.hashForWitnessSignature(0, redeemScript,
                    inputValue, Transaction.SigHash.ALL, false);
        }

        ECKey myPrivateKey = ECKey.fromPrivate(Utils.HEX.decode(myPrivKeyAsHex));
        checkNotNull(myPrivateKey, ""key must not be null"");
        ECKey.ECDSASignature myECDSASignature = myPrivateKey.sign(sigHash, aesKey).toCanonicalised();
        TransactionSignature myTxSig = new TransactionSignature(myECDSASignature, Transaction.SigHash.ALL, false);
        return Utils.HEX.encode(myTxSig.encodeToBitcoin());
    }

    public Tuple2<String, String> emergencyApplySignatureToPayoutTxFrom2of2MultiSig(String unsignedTxHex,
                                                                                    String redeemScriptHex,
                                                                                    String buyerSignatureAsHex,
                                                                                    String sellerSignatureAsHex,
                                                                                    boolean hashedMultiSigOutputIsLegacy)
            throws AddressFormatException, SignatureDecodeException {
        Transaction payoutTx = new Transaction(params, Utils.HEX.decode(unsignedTxHex));
        TransactionSignature buyerTxSig = TransactionSignature.decodeFromBitcoin(Utils.HEX.decode(buyerSignatureAsHex), true, true);
        TransactionSignature sellerTxSig = TransactionSignature.decodeFromBitcoin(Utils.HEX.decode(sellerSignatureAsHex), true, true);
        Script redeemScript = new Script(Utils.HEX.decode(redeemScriptHex));

        TransactionInput input = payoutTx.getInput(0);
        if (hashedMultiSigOutputIsLegacy) {
            Script inputScript = ScriptBuilder.createP2SHMultiSigInputScript(ImmutableList.of(sellerTxSig, buyerTxSig),
                    redeemScript);
            input.setScriptSig(inputScript);
        } else {
            input.setScriptSig(ScriptBuilder.createEmpty());
            input.setWitness(TransactionWitness.redeemP2WSH(redeemScript, sellerTxSig, buyerTxSig));
        }
        String txId = payoutTx.getTxId().toString();
        String signedTxHex = Utils.HEX.encode(payoutTx.bitcoinSerialize(!hashedMultiSigOutputIsLegacy));
        return new Tuple2<>(txId, signedTxHex);
    }

    public void emergencyPublishPayoutTxFrom2of2MultiSig(String signedTxHex, TxBroadcaster.Callback callback)
            throws AddressFormatException, TransactionVerificationException, WalletException {
        Transaction payoutTx = new Transaction(params, Utils.HEX.decode(signedTxHex));
        WalletService.printTx(""payoutTx"", payoutTx);
        WalletService.verifyTransaction(payoutTx);
        WalletService.checkWalletConsistency(wallet);
        broadcastTx(payoutTx, callback, 20);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // BsqSwap tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Transaction sellerBuildBsqSwapTx(List<RawTransactionInput> buyersBsqInputs,
                                            List<RawTransactionInput> sellersBtcInputs,
                                            Coin sellersBsqPayoutAmount,
                                            String sellersBsqPayoutAddress,
                                            @Nullable Coin buyersBsqChangeAmount,
                                            @Nullable String buyersBsqChangeAddress,
                                            Coin buyersBtcPayoutAmount,
                                            String buyersBtcPayoutAddress,
                                            @Nullable Coin sellersBtcChangeAmount,
                                            @Nullable String sellersBtcChangeAddress) throws AddressFormatException {

        Transaction transaction = new Transaction(params);
        List<TransactionInput> sellersBtcTransactionInput = sellersBtcInputs.stream()
                .map(rawInput -> getTransactionInput(transaction, new byte[]{}, rawInput))
                .collect(Collectors.toList());
        return buildBsqSwapTx(buyersBsqInputs,
                sellersBtcTransactionInput,
                sellersBsqPayoutAmount,
                sellersBsqPayoutAddress,
                buyersBsqChangeAmount,
                buyersBsqChangeAddress,
                buyersBtcPayoutAmount,
                buyersBtcPayoutAddress,
                sellersBtcChangeAmount,
                sellersBtcChangeAddress,
                transaction);
    }

    public Transaction buyerBuildBsqSwapTx(List<RawTransactionInput> buyersBsqInputs,
                                           List<TransactionInput> sellersBtcInputs,
                                           Coin sellersBsqPayoutAmount,
                                           String sellersBsqPayoutAddress,
                                           @Nullable Coin buyersBsqChangeAmount,
                                           @Nullable String buyersBsqChangeAddress,
                                           Coin buyersBtcPayoutAmount,
                                           String buyersBtcPayoutAddress,
                                           @Nullable Coin sellersBtcChangeAmount,
                                           @Nullable String sellersBtcChangeAddress) throws AddressFormatException {
        Transaction transaction = new Transaction(params);
        return buildBsqSwapTx(buyersBsqInputs,
                sellersBtcInputs,
                sellersBsqPayoutAmount,
                sellersBsqPayoutAddress,
                buyersBsqChangeAmount,
                buyersBsqChangeAddress,
                buyersBtcPayoutAmount,
                buyersBtcPayoutAddress,
                sellersBtcChangeAmount,
                sellersBtcChangeAddress,
                transaction);
    }

    private Transaction buildBsqSwapTx(List<RawTransactionInput> buyersBsqInputs,
                                       List<TransactionInput> sellersBtcInputs,
                                       Coin sellersBsqPayoutAmount,
                                       String sellersBsqPayoutAddress,
                                       @Nullable Coin buyersBsqChangeAmount,
                                       @Nullable String buyersBsqChangeAddress,
                                       Coin buyersBtcPayoutAmount,
                                       String buyersBtcPayoutAddress,
                                       @Nullable Coin sellersBtcChangeAmount,
                                       @Nullable String sellersBtcChangeAddress,
                                       Transaction transaction) throws AddressFormatException {

        buyersBsqInputs.forEach(rawInput -> transaction.addInput(getTransactionInput(transaction, new byte[]{}, rawInput)));
        sellersBtcInputs.forEach(transaction::addInput);

        transaction.addOutput(sellersBsqPayoutAmount, Address.fromString(params, sellersBsqPayoutAddress));

        if (buyersBsqChangeAmount != null && buyersBsqChangeAmount.isPositive())
            transaction.addOutput(buyersBsqChangeAmount, Address.fromString(params, Objects.requireNonNull(buyersBsqChangeAddress)));

        transaction.addOutput(buyersBtcPayoutAmount, Address.fromString(params, buyersBtcPayoutAddress));

        if (sellersBtcChangeAmount != null && sellersBtcChangeAmount.isPositive())
            transaction.addOutput(sellersBtcChangeAmount, Address.fromString(params, Objects.requireNonNull(sellersBtcChangeAddress)));

        return transaction;
    }

    public void signBsqSwapTransaction(Transaction transaction, List<TransactionInput> myInputs)
            throws SigningException {
        for (TransactionInput input : myInputs) {
            signInput(transaction, input, input.getIndex());
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Broadcast tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void broadcastTx(Transaction tx, TxBroadcaster.Callback callback) {
        checkNotNull(walletConfig);
        TxBroadcaster.broadcastTx(wallet, walletConfig.peerGroup(), tx, callback);
    }

    public void broadcastTx(Transaction tx, TxBroadcaster.Callback callback, int timeoutInSec) {
        checkNotNull(walletConfig);
        TxBroadcaster.broadcastTx(wallet, walletConfig.peerGroup(), tx, callback, timeoutInSec);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Misc
    ///////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Returns the local existing wallet transaction with the given ID, or {@code null} if missing.
     *
     * @param txId the transaction ID of the transaction we want to lookup
     */
    public Transaction getWalletTx(Sha256Hash txId) {
        checkNotNull(wallet);
        return wallet.getTransaction(txId);
    }

    public void commitTx(Transaction tx) {
        checkNotNull(wallet);
        wallet.commitTx(tx);
    }

    public Transaction getClonedTransaction(Transaction tx) {
        return new Transaction(params, tx.bitcoinSerialize());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Private methods
    ///////////////////////////////////////////////////////////////////////////////////////////

    // This method might be replace by RawTransactionInput constructor taking the TransactionInput as param.
    // As we used segwit=false for the bitcoinSerialize method here we still keep it to not risk to break anything,
    // though it very likely should be fine to replace it with the RawTransactionInput constructor call.
    @Deprecated
    private RawTransactionInput getRawInputFromTransactionInput(TransactionInput input) {
        checkNotNull(input, ""input must not be null"");
        checkNotNull(input.getConnectedOutput(), ""input.getConnectedOutput() must not be null"");
        checkNotNull(input.getConnectedOutput().getParentTransaction(),
                ""input.getConnectedOutput().getParentTransaction() must not be null"");
        checkNotNull(input.getValue(), ""input.getValue() must not be null"");

        // bitcoinSerialize(false) is used just in case the serialized tx is parsed by a bisq node still using
        // bitcoinj 0.14. This is not supposed to happen ever since Version.TRADE_PROTOCOL_VERSION was set to 3,
        // but it costs nothing to be on the safe side.
        // The serialized tx is just used to obtain its hash, so the witness data is not relevant.
        return new RawTransactionInput(input.getOutpoint().getIndex(),
                input.getConnectedOutput().getParentTransaction().bitcoinSerialize(false),
                input.getValue().value);
    }

    private TransactionInput getTransactionInput(Transaction parentTransaction,
                                                 byte[] scriptProgram,
                                                 RawTransactionInput rawTransactionInput) {
        return new TransactionInput(params,
                parentTransaction,
                scriptProgram,
                getConnectedOutPoint(rawTransactionInput),
                Coin.valueOf(rawTransactionInput.value));
    }

    private TransactionOutPoint getConnectedOutPoint(RawTransactionInput rawTransactionInput) {
        return new TransactionOutPoint(params, rawTransactionInput.index,
                new Transaction(params, rawTransactionInput.parentTransaction));
    }

    public boolean isP2WH(RawTransactionInput rawTransactionInput) {
        return ScriptPattern.isP2WH(
                checkNotNull(getConnectedOutPoint(rawTransactionInput).getConnectedOutput()).getScriptPubKey());
    }

    // TODO: Once we have removed legacy arbitrator from dispute domain we can remove that method as well.
    // Atm it is still used by traderSignAndFinalizeDisputedPayoutTx which is used by ArbitrationManager.

    // Don't use ScriptBuilder.createRedeemScript and ScriptBuilder.createP2SHOutputScript as they use a sorting
    // (Collections.sort(pubKeys, ECKey.PUBKEY_COMPARATOR);) which can lead to a non-matching list of signatures with pubKeys and the executeMultiSig does
    // not iterate all possible combinations of sig/pubKeys leading to a verification fault. That nasty bug happens just randomly as the list after sorting
    // might differ from the provided one or not.
    // Changing the while loop in executeMultiSig to fix that does not help as the reference implementation seems to behave the same (not iterating all
    // possibilities) .
    // Furthermore the executed list is reversed to the provided.
    // Best practice is to provide the list sorted by the least probable successful candidates first (arbitrator is first -> will be last in execution loop, so
    // avoiding unneeded expensive ECKey.verify calls)
    private Script get2of3MultiSigRedeemScript(byte[] buyerPubKey, byte[] sellerPubKey, byte[] arbitratorPubKey) {
        ECKey buyerKey = ECKey.fromPublicOnly(buyerPubKey);
        ECKey sellerKey = ECKey.fromPublicOnly(sellerPubKey);
        ECKey arbitratorKey = ECKey.fromPublicOnly(arbitratorPubKey);
        // Take care of sorting! Need to reverse to the order we use normally (buyer, seller, arbitrator)
        List<ECKey> keys = ImmutableList.of(arbitratorKey, sellerKey, buyerKey);
        return ScriptBuilder.createMultiSigOutputScript(2, keys);
    }

    private Script get2of2MultiSigRedeemScript(byte[] buyerPubKey, byte[] sellerPubKey) {
        ECKey buyerKey = ECKey.fromPublicOnly(buyerPubKey);
        ECKey sellerKey = ECKey.fromPublicOnly(sellerPubKey);
        // Take care of sorting! Need to reverse to the order we use normally (buyer, seller)
        List<ECKey> keys = ImmutableList.of(sellerKey, buyerKey);
        return ScriptBuilder.createMultiSigOutputScript(2, keys);
    }

    private Script get2of2MultiSigOutputScript(byte[] buyerPubKey, byte[] sellerPubKey, boolean legacy) {
        Script redeemScript = get2of2MultiSigRedeemScript(buyerPubKey, sellerPubKey);
        if (legacy) {
            return ScriptBuilder.createP2SHOutputScript(redeemScript);
        } else {
            return ScriptBuilder.createP2WSHOutputScript(redeemScript);
        }
    }

    private Transaction createPayoutTx(Transaction depositTx,
                                       Coin buyerPayoutAmount,
                                       Coin sellerPayoutAmount,
                                       String buyerAddressString,
                                       String sellerAddressString) throws AddressFormatException {
        TransactionOutput hashedMultiSigOutput = depositTx.getOutput(0);
        Transaction transaction = new Transaction(params);
        transaction.addInput(hashedMultiSigOutput);
        if (buyerPayoutAmount.isPositive()) {
            transaction.addOutput(buyerPayoutAmount, Address.fromString(params, buyerAddressString));
        }
        if (sellerPayoutAmount.isPositive()) {
            transaction.addOutput(sellerPayoutAmount, Address.fromString(params, sellerAddressString));
        }
        checkArgument(transaction.getOutputs().size() >= 1, ""We need at least one output."");
        return transaction;
    }

    private void signInput(Transaction transaction, TransactionInput input, int inputIndex) throws SigningException {
        checkNotNull(input.getConnectedOutput(), ""input.getConnectedOutput() must not be null"");
        Script scriptPubKey = input.getConnectedOutput().getScriptPubKey();
        ECKey sigKey = input.getOutpoint().getConnectedKey(wallet);
        checkNotNull(sigKey, ""signInput: sigKey must not be null. input.getOutpoint()="" +
                input.getOutpoint().toString());
        if (sigKey.isEncrypted()) {
            checkNotNull(aesKey);
        }

        if (ScriptPattern.isP2PK(scriptPubKey) || ScriptPattern.isP2PKH(scriptPubKey)) {
            Sha256Hash hash = transaction.hashForSignature(inputIndex, scriptPubKey, Transaction.SigHash.ALL, false);
            ECKey.ECDSASignature signature = sigKey.sign(hash, aesKey);
            TransactionSignature txSig = new TransactionSignature(signature, Transaction.SigHash.ALL, false);
            if (ScriptPattern.isP2PK(scriptPubKey)) {
                input.setScriptSig(ScriptBuilder.createInputScript(txSig));
            } else if (ScriptPattern.isP2PKH(scriptPubKey)) {
                input.setScriptSig(ScriptBuilder.createInputScript(txSig, sigKey));
            }
        } else if (ScriptPattern.isP2WPKH(scriptPubKey)) {
            // scriptCode is expected to have the format of a legacy P2PKH output script
            Script scriptCode = ScriptBuilder.createP2PKHOutputScript(sigKey);
            Coin value = input.getValue();
            TransactionSignature txSig = transaction.calculateWitnessSignature(inputIndex, sigKey, aesKey, scriptCode, value,
                    Transaction.SigHash.ALL, false);
            input.setScriptSig(ScriptBuilder.createEmpty());
            input.setWitness(TransactionWitness.redeemP2WPKH(txSig, sigKey));
        } else {
            throw new SigningException(""Don't know how to sign for this kind of scriptPubKey: "" + scriptPubKey);
        }
    }

    private void addAvailableInputsAndChangeOutputs(Transaction transaction,
                                                    Address address,
                                                    Address changeAddress) throws WalletException {
        SendRequest sendRequest = null;
        try {
            // Let the framework do the work to find the right inputs
            sendRequest = SendRequest.forTx(transaction);
            sendRequest.shuffleOutputs = false;
            sendRequest.aesKey = aesKey;
            // We use a fixed fee
            sendRequest.fee = Coin.ZERO;
            sendRequest.feePerKb = Coin.ZERO;
            sendRequest.ensureMinRequiredFee = false;
            // we allow spending of unconfirmed tx (double spend risk is low and usability would suffer if we need to wait for 1 confirmation)
            sendRequest.coinSelector = new BtcCoinSelector(address, preferences.getIgnoreDustThreshold());
            // We use always the same address in a trade for all transactions
            sendRequest.changeAddress = changeAddress;
            // With the usage of completeTx() we get all the work done with fee calculation, validation and coin selection.
            // We don't commit that tx to the wallet as it will be changed later and it's not signed yet.
            // So it will not change the wallet balance.
            checkNotNull(wallet, ""wallet must not be null"");
            wallet.completeTx(sendRequest);
        } catch (Throwable t) {
            if (sendRequest != null && sendRequest.tx != null) {
                log.warn(""addAvailableInputsAndChangeOutputs: sendRequest.tx={}, sendRequest.tx.getOutputs()={}"",
                        sendRequest.tx, sendRequest.tx.getOutputs());
            }

            throw new WalletException(t);
        }
    }

    private void applyLockTime(long lockTime, Transaction tx) {
        checkArgument(!tx.getInputs().isEmpty(), ""The tx must have inputs. tx={}"", tx);
        tx.getInputs().forEach(input -> input.setSequenceNumber(TransactionInput.NO_SEQUENCE - 1));
        tx.setLockTime(lockTime);
    }

    // BISQ issue #4039: prevent dust outputs from being created.
    // check all the outputs in a proposed transaction, if any are below the dust threshold
    // remove them, noting the details in the log. returns 'true' to indicate if any dust was
    // removed.
    private boolean removeDust(Transaction transaction) {
        List<TransactionOutput> originalTransactionOutputs = transaction.getOutputs();
        List<TransactionOutput> keepTransactionOutputs = new ArrayList<>();
        for (TransactionOutput transactionOutput : originalTransactionOutputs) {
            if (transactionOutput.getValue().isLessThan(Restrictions.getMinNonDustOutput())) {
                log.info(""your transaction would have contained a dust output of {}"", transactionOutput.toString());
            } else {
                keepTransactionOutputs.add(transactionOutput);
            }
        }
        // if dust was detected, keepTransactionOutputs will have fewer elements than originalTransactionOutputs
        // set the transaction outputs to what we saved in keepTransactionOutputs, thus discarding dust.
        if (keepTransactionOutputs.size() != originalTransactionOutputs.size()) {
            log.info(""dust output was detected and removed, the new output is as follows:"");
            transaction.clearOutputs();
            for (TransactionOutput transactionOutput : keepTransactionOutputs) {
                transaction.addOutput(transactionOutput);
                log.info(""{}"", transactionOutput.toString());
            }
            return true;    // dust was removed
        }
        return false;       // no action necessary
    }
}",1,777 587 2000 123 773 809 657 2001 2002 61 2003 46 2004 40 2000 46 587 41 59 773 809 657 2005 2006 61 2005 46 2007 40 1504 41 59 773 657 2008 2009 59 773 657 2010 2011 59 773 657 2012 2013 59 64 2014 773 2015 2016 59 64 2014 773 2017 2018 59 64 2014 773 2019 2020 59 331 330 331 64 2021 777 2000 40 2008 2009 44 2010 2011 41 123 823 46 2009 61 2009 59 823 46 2011 61 2011 59 823 46 2013 61 2022 46 2023 40 41 59 2009 46 2024 40 40 41 45 62 123 2018 61 2009 46 2025 40 41 59 2016 61 2009 46 2026 40 41 59 125 41 59 125 331 330 331 865 2027 40 64 2014 2019 2028 41 123 823 46 2020 61 2028 59 125 64 2014 777 2019 2029 40 41 123 792 2020 59 125 331 330 331 306 777 2030 2031 40 2032 2033 44 2032 2034 44 2032 2035 44 2005 2036 44 570 2037 44 2005 2038 44 2005 2039 44 2040 2041 44 570 2042 44 64 2014 2043 46 2044 2045 41 826 2046 44 2047 123 2030 2048 61 744 2030 40 2013 41 59 2049 2050 61 2051 59 830 123 2048 46 2052 40 2038 44 2032 46 2053 40 2013 44 2041 41 41 59 330 2048 46 2052 40 2036 44 2034 41 59 330 330 330 2050 61 2049 46 2054 40 2048 41 59 2050 46 2055 61 2056 59 2050 46 2020 61 2020 59 688 40 2037 41 123 2050 46 2057 61 744 2058 40 2009 46 2059 40 2060 46 2061 46 2062 41 44 2011 46 2063 40 41 41 59 125 630 123 2050 46 2064 61 744 2065 40 2033 44 2011 46 2066 40 41 41 59 125 330 2050 46 2067 61 2039 59 2050 46 2068 61 2005 46 2069 59 2050 46 2070 61 2056 59 330 2050 46 2035 61 2035 59 2071 40 2016 44 362 41 59 2016 46 2072 40 2050 41 59 688 40 2073 40 2048 41 41 123 2016 46 2074 40 2050 41 59 125 2075 46 2076 40 362 44 2048 41 59 688 40 2042 307 2045 340 2051 41 123 2077 40 2048 44 2045 41 59 125 792 2048 59 125 580 40 2078 2079 41 123 688 40 2016 340 2051 307 2050 340 2051 307 2050 46 2080 340 2051 41 123 2002 46 2081 40 362 44 2016 46 2082 40 2050 46 2080 41 44 2050 46 2080 41 59 125 2002 46 2083 40 362 44 2048 46 2084 40 41 44 2048 46 2085 40 41 41 59 825 2079 59 125 125 777 2030 2086 40 2030 2087 44 2032 2033 44 2032 2034 44 2032 2035 44 2005 2036 44 570 2037 44 2005 2039 41 826 2088 44 2089 44 2046 44 2047 123 830 123 330 330 330 330 330 330 330 330 330 330 330 330 330 330 657 704 2090 61 2087 46 2091 40 41 46 2092 40 41 59 657 570 2093 61 33 2087 46 2094 40 41 46 2095 40 41 59 330 330 330 330 688 40 33 2093 41 123 2096 2097 61 2087 46 2091 40 41 46 2098 40 41 46 2099 40 2100 58 58 2101 41 46 2102 40 2005 46 2007 40 1500 41 44 2005 58 58 2103 41 59 2087 46 2104 40 2097 46 2103 40 2005 46 2007 40 1501 41 41 44 2035 41 59 125 330 2087 46 2105 40 2036 44 2034 41 59 330 330 330 2106 2107 61 2106 46 2108 40 2087 41 59 2107 46 2109 61 2110 59 2107 46 2020 61 2020 59 688 40 2037 41 123 2107 46 2111 61 744 2112 40 2009 46 2113 40 2114 46 2115 46 2116 41 44 2011 46 2117 40 41 41 59 125 630 123 2107 46 2118 61 744 2119 40 2033 44 2011 46 2120 40 41 41 59 125 330 2107 46 2121 61 2039 59 2107 46 2122 61 2005 46 2123 59 2107 46 2124 61 2110 59 2107 46 2125 61 2110 59 330 2107 46 2035 61 2035 59 2126 40 2016 44 362 41 59 2016 46 2127 40 2107 41 59 2030 2128 61 2107 46 2129 59 2130 40 2128 41 59 330 664 40 704 2131 61 2090 59 2131 60 2128 46 2091 40 41 46 2092 40 41 59 2131 349 41 123 2132 2133 61 2128 46 2091 40 41 46 2134 40 2131 41 59 2135 40 2133 46 2136 40 41 340 2137 307 2133 46 2136 40 41 46 2138 40 2016 41 44 362 41 59 2139 46 2140 40 2016 44 2020 44 2128 44 2133 44 2131 41 59 2139 46 2141 40 2128 44 2133 44 2131 41 59 125 2142 46 2143 40 2016 41 59 2142 46 2144 40 2128 41 59 2142 46 2145 40 2146 46 2147 40 41 43 362 44 2128 41 59 792 2128 59 125 580 40 2148 2149 41 123 2002 46 2150 40 362 44 2087 46 2151 40 41 41 59 825 2149 59 125 125 331 330 331 330 330 330 330 306 777 2152 2153 40 2030 2154 44 2005 2155 44 2005 2039 41 826 2088 123 330 330 330 330 305 330 2005 2156 61 2155 46 2157 40 2039 41 59 2030 2158 61 744 2030 40 2013 41 59 330 330 2159 2160 61 744 2159 40 2013 44 2158 44 2156 44 2161 46 2162 40 2013 44 744 2163 40 41 41 41 59 2158 46 2164 40 2160 41 59 330 330 330 330 2159 2165 61 2154 46 2166 40 41 46 2167 40 1501 41 59 2168 40 2165 46 2169 40 41 46 2170 40 2155 41 44 362 41 59 2158 46 2171 40 2165 41 59 2172 46 2173 40 2158 41 59 330 2174 60 2175 62 2176 61 2158 46 2177 40 41 46 2178 40 41 46 2179 40 2180 45 62 123 2181 40 2180 46 2182 40 41 44 362 41 59 2181 40 2180 46 2182 40 41 46 2183 40 41 44 362 41 59 2181 40 2180 46 2169 40 41 44 362 41 59 792 2184 40 2180 41 59 125 41 46 2185 40 2186 46 2187 40 41 41 59 330 330 330 330 330 792 744 2152 40 744 2188 60 62 40 2176 41 44 1500 44 2189 41 59 125 777 2190 2191 40 2005 2192 44 2005 2193 44 2194 60 2195 62 2196 44 726 2197 44 64 2014 2040 2198 44 2032 2199 44 2032 2200 44 574 91 93 2201 44 574 91 93 2202 41 826 2203 44 2088 44 2089 44 2047 123 792 2204 40 2205 44 2192 44 2193 44 2196 44 2197 44 2198 44 2199 44 2200 44 2201 44 2202 41 59 125 777 2190 2206 40 2005 2192 44 2005 2193 44 2194 60 2195 62 2196 44 726 2197 44 64 2014 2040 2198 44 2032 2199 44 2032 2200 44 574 91 93 2201 44 574 91 93 2202 41 826 2203 44 2088 44 2089 44 2047 123 792 2207 40 2208 44 2192 44 2193 44 2196 44 2197 44 2198 44 2199 44 2200 44 2201 44 2202 41 59 125 306 773 2190 2209 40 570 2210 44 2005 2192 44 2005 2193 44 2194 60 2195 62 2196 44 726 2197 44 64 2014 2040 2198 44 2032 2199 44 2032 2200 44 574 91 93 2201 44 574 91 93 2202 41 826 2203 44 2088 44 2089 44 2047 123 2211 40 33 2196 46 2212 40 41 41 59 330 330 2030 2213 61 744 2030 40 2013 41 59 2214 2215 61 744 2214 40 2013 44 2213 44 2192 44 2216 46 2217 40 2013 44 744 2218 40 41 41 41 59 2213 46 2219 40 2215 41 59 2220 40 2213 44 2199 44 2200 41 59 330 2194 60 2221 62 2222 61 2213 46 2223 40 41 59 2214 2224 61 2225 59 330 2211 40 2213 46 2226 40 41 46 2227 40 41 60 1502 44 362 41 59 330 688 40 2213 46 2226 40 41 46 2227 40 41 62 1501 41 123 2224 61 2213 46 2228 40 1501 41 59 125 330 2030 2229 61 744 2030 40 2013 41 59 2230 60 2195 62 2231 61 744 2230 60 62 40 41 59 688 40 2210 41 123 330 664 40 2221 2232 58 2222 41 123 2229 46 2233 40 2232 41 59 2231 46 2234 40 2235 40 2232 41 41 59 125 330 330 664 40 2195 2236 58 2196 41 2229 46 2237 40 2238 40 2229 44 744 574 91 93 123 125 44 2236 41 41 59 125 630 123 330 330 330 664 40 2195 2239 58 2196 41 2229 46 2240 40 2241 40 2229 44 744 574 91 93 123 125 44 2239 41 41 59 330 664 40 2221 2242 58 2222 41 123 2229 46 2240 40 2242 41 59 2231 46 2243 40 2244 40 2242 41 41 59 125 125 330 2245 2246 61 2247 40 2201 44 2202 44 2248 41 59 330 2214 2249 61 744 2214 40 2013 44 2229 44 2193 44 2246 46 2250 40 41 41 59 2229 46 2219 40 2249 41 59 2214 2251 61 2225 59 688 40 2197 62 1500 307 2198 340 2225 41 123 2251 61 744 2214 40 2013 44 2229 44 2005 46 2007 40 2197 41 44 2032 46 2252 40 2013 44 2198 41 41 59 125 688 40 2210 41 123 330 688 40 2224 340 2225 41 123 2229 46 2219 40 2224 41 59 125 330 688 40 2251 340 2225 41 123 2229 46 2219 40 2251 41 59 125 125 630 123 330 330 688 40 2251 340 2225 41 123 2229 46 2219 40 2251 41 59 125 330 688 40 2224 340 2225 41 123 2229 46 2219 40 2224 41 59 125 125 704 2253 61 2210 63 1500 58 2196 46 2227 40 41 59 704 2254 61 2210 63 2222 46 2227 40 41 58 2229 46 2223 40 41 46 2227 40 41 59 664 40 704 2255 61 2253 59 2255 60 2254 59 2255 349 41 123 2221 2256 61 2229 46 2257 40 2255 41 59 2258 40 2229 44 2256 44 2255 41 59 2259 46 2260 40 2229 44 2256 44 2255 41 59 125 2261 46 2262 40 362 44 2229 41 59 2261 46 2263 40 2229 41 59 792 744 2190 40 2231 44 2229 46 2264 40 41 41 59 125 306 777 2030 2265 40 570 2266 44 574 91 93 2267 44 2005 2193 44 2194 60 2195 62 2268 44 2194 60 2195 62 2269 44 574 91 93 2201 44 574 91 93 2202 41 826 2203 44 2088 44 2089 123 2030 2270 61 744 2030 40 2013 44 2267 41 59 2271 40 33 2268 46 2272 40 41 41 59 2271 40 33 2269 46 2272 40 41 41 59 330 2273 2274 61 2275 40 2201 44 2202 44 2276 41 59 688 40 33 2270 46 2277 40 1500 41 46 2278 40 41 46 2279 40 2274 41 41 123 825 744 2088 40 362 41 59 125 330 688 40 33 2270 46 2277 40 1500 41 46 2280 40 41 46 2279 40 2193 41 41 123 825 744 2088 40 362 41 59 125 330 330 2030 2281 61 744 2030 40 2013 41 59 688 40 2266 41 123 330 330 664 40 704 2282 61 1500 59 2282 60 2268 46 2283 40 41 59 2282 349 41 123 2284 2285 61 2270 46 2286 40 41 46 2287 40 2282 41 59 574 91 93 2288 61 2285 46 2289 40 41 46 2290 40 41 59 2284 2291 61 2292 40 2281 44 2288 44 2268 46 2287 40 2282 41 41 59 2273 2293 61 2294 40 2291 46 2295 40 41 41 46 2278 40 41 59 688 40 2288 46 2296 323 1500 307 33 2297 46 2298 40 2293 41 41 123 825 744 2088 40 362 41 59 125 688 40 33 2299 46 2300 46 2279 40 2285 46 2301 40 41 41 41 123 2291 46 2302 40 2285 46 2301 40 41 41 59 125 2281 46 2303 40 2291 41 59 125 330 664 40 2195 2304 58 2269 41 123 2281 46 2305 40 2306 40 2281 44 744 574 91 93 123 125 44 2304 41 41 59 125 125 630 123 330 330 664 40 2195 2307 58 2268 41 123 2281 46 2308 40 2309 40 2281 44 744 574 91 93 123 125 44 2307 41 41 59 125 330 330 664 40 704 2310 61 2268 46 2311 40 41 44 2312 61 1500 59 2310 60 2270 46 2313 40 41 46 2311 40 41 59 2310 349 44 2312 349 41 123 2314 2315 61 2270 46 2313 40 41 46 2316 40 2310 41 59 330 2281 46 2317 40 2318 40 2281 44 744 574 91 93 123 125 44 2269 46 2316 40 2312 41 41 41 59 125 125 330 2270 46 2319 40 41 46 2320 40 2281 58 58 2321 41 59 2322 46 2323 40 362 44 2270 41 59 330 704 2324 61 2266 63 2268 46 2325 40 41 58 1500 59 704 2326 61 2266 63 2281 46 2327 40 41 46 2325 40 41 58 2268 46 2325 40 41 59 664 40 704 2328 61 2324 59 2328 60 2326 59 2328 349 41 123 2329 2330 61 2281 46 2331 40 2328 41 59 2332 40 2281 44 2330 44 2328 41 59 2322 46 2333 40 2281 44 2330 44 2328 41 59 125 2322 46 2323 40 362 44 2281 41 59 2322 46 2334 40 2281 41 59 2322 46 2335 40 2016 41 59 792 2281 59 125 777 865 2336 40 2030 2337 44 2030 2338 44 704 2339 41 826 2088 44 2047 123 330 664 40 704 2340 61 1500 59 2340 60 2339 59 2340 349 41 123 2341 2342 61 2338 46 2343 40 2340 41 59 2344 2345 61 2342 46 2346 40 41 59 2341 2347 61 2337 46 2343 40 2340 41 59 2347 46 2348 40 2345 41 59 2349 2350 61 2342 46 2351 40 41 59 688 40 33 2349 46 2352 46 2353 40 2350 41 41 123 2347 46 2354 40 2350 41 59 125 125 2355 46 2356 40 362 44 2337 41 59 2355 46 2357 40 2337 41 59 125 777 865 2358 40 2030 2337 44 2030 2359 41 123 704 2360 61 2337 46 2361 40 41 46 2362 40 41 59 664 40 704 2363 61 1500 59 2363 60 2360 59 2363 349 41 123 2364 2365 61 2337 46 2366 40 2363 41 59 2364 2367 61 2359 46 2366 40 2363 41 46 2368 40 41 59 688 40 2369 46 2370 46 2371 40 2365 46 2368 40 41 41 307 33 2369 46 2370 46 2371 40 2367 41 41 123 2365 46 2372 40 2367 41 59 125 125 125 331 330 331 777 2030 2373 40 2030 2374 44 2040 2375 44 2005 2376 44 726 2377 41 826 2047 44 2088 123 2378 2379 61 2374 46 2380 40 1500 41 59 2030 2381 61 744 2030 40 2013 41 59 2381 46 2382 40 2379 41 59 2383 40 2377 44 2381 41 59 2005 2384 61 2379 46 2385 40 41 46 2386 40 2376 41 59 2381 46 2387 40 2384 44 2032 46 2388 40 2013 44 2375 41 41 59 2389 46 2390 40 362 44 2381 41 59 2389 46 2391 40 2381 41 59 792 2381 59 125 777 574 91 93 2392 40 2030 2393 44 2030 2394 44 2395 2396 44 574 91 93 2201 44 574 91 93 2202 41 826 2047 44 2088 123 2397 2398 61 2399 40 2201 44 2202 41 59 2400 2401 59 2005 2402 61 2394 46 2403 40 1500 41 46 2404 40 41 59 2401 61 2393 46 2405 40 1500 44 2398 44 2402 44 2030 46 2406 46 2407 44 2408 41 59 2409 40 2396 44 362 41 59 688 40 2396 46 2410 40 41 41 123 2409 40 2020 41 59 125 2411 46 2412 2413 61 2396 46 2414 40 2401 44 2020 41 46 2415 40 41 59 2416 46 2417 40 362 44 2393 41 59 2416 46 2418 40 2393 41 59 792 2413 46 2419 40 41 59 125 777 2030 2420 40 2030 2393 44 574 91 93 2201 44 574 91 93 2202 44 574 91 93 2421 44 574 91 93 2422 44 2005 2423 41 826 2047 44 2088 44 2424 123 2425 2426 61 2427 40 2201 44 2202 41 59 2428 46 2429 2430 61 2428 46 2429 46 2431 40 2421 41 59 2428 46 2429 2432 61 2428 46 2429 46 2431 40 2422 41 59 2433 2434 61 744 2433 40 2430 44 2030 46 2435 46 2436 44 2437 41 59 2433 2438 61 744 2433 40 2432 44 2030 46 2435 46 2436 44 2437 41 59 2439 2440 61 2393 46 2441 40 1500 41 59 2440 46 2442 40 2443 46 2444 40 41 41 59 2445 2446 61 2445 46 2447 40 2426 44 2438 44 2434 41 59 2440 46 2448 40 2446 41 59 2449 46 2450 40 362 44 2393 41 59 2449 46 2451 40 2393 41 59 688 40 2452 40 2423 41 46 2453 40 2393 46 2454 40 41 46 2455 40 2006 41 41 41 123 825 744 2088 40 362 41 59 125 2425 2456 61 2457 40 2201 44 2202 44 2437 41 59 2440 46 2458 40 41 46 2459 40 2393 44 1500 44 2446 44 2423 44 2456 44 2425 46 2460 41 59 792 2393 59 125 777 2030 2461 40 2030 2393 44 574 91 93 2201 44 574 91 93 2202 44 574 91 93 2421 44 574 91 93 2422 41 826 2047 44 2088 44 2089 44 2424 123 2462 2463 61 2393 46 2464 40 1500 41 59 2420 40 2393 44 2201 44 2202 44 2421 44 2422 44 2463 46 2465 40 41 41 59 2466 46 2467 40 2016 41 59 2468 40 2463 46 2469 40 41 44 362 41 59 2463 46 2470 40 2463 46 2469 40 41 41 59 792 2393 59 125 331 330 331 306 777 574 91 93 2471 40 2030 2374 44 2005 2472 44 2005 2473 44 2040 2474 44 2040 2475 44 2395 2476 44 574 91 93 2201 44 574 91 93 2202 41 826 2047 44 2088 123 2030 2477 61 2478 40 2374 44 2472 44 2473 44 2474 44 2475 41 59 330 2479 2480 61 2481 40 2201 44 2202 41 59 330 2482 2483 59 2484 2485 61 2374 46 2486 40 1500 41 59 688 40 2487 46 2488 40 2485 46 2489 40 41 41 41 123 2483 61 2477 46 2490 40 1500 44 2480 44 2030 46 2491 46 2492 44 2493 41 59 125 630 123 2005 2423 61 2485 46 2494 40 41 59 2483 61 2477 46 2495 40 1500 44 2480 44 2423 44 2030 46 2496 46 2497 44 2498 41 59 125 2499 40 2476 44 362 41 59 688 40 2476 46 2500 40 41 41 123 2499 40 2020 41 59 125 2501 46 2502 2421 61 2476 46 2503 40 2483 44 2020 41 46 2504 40 41 59 2505 46 2506 40 362 44 2477 41 59 2505 46 2507 40 2477 41 59 792 2421 46 2508 40 41 59 125 306 777 2030 2509 40 2030 2374 44 574 91 93 2421 44 2005 2472 44 2005 2473 44 2040 2474 44 2040 2475 44 2395 2476 44 574 91 93 2201 44 574 91 93 2202 41 826 2047 44 2088 44 2089 44 2424 123 2030 2510 61 2511 40 2374 44 2472 44 2473 44 2474 44 2475 41 59 330 2512 2513 61 2514 40 2201 44 2202 41 59 330 2515 2516 61 2374 46 2517 40 1500 41 59 570 2518 61 2519 46 2520 40 2516 46 2521 40 41 41 59 2522 2523 59 688 40 2518 41 123 2523 61 2510 46 2524 40 1500 44 2513 44 2030 46 2525 46 2526 44 2527 41 59 125 630 123 2005 2423 61 2516 46 2528 40 41 59 2523 61 2510 46 2529 40 1500 44 2513 44 2423 44 2030 46 2530 46 2531 44 2532 41 59 125 2533 40 2476 44 362 41 59 688 40 2476 46 2534 40 41 41 123 2533 40 2020 41 59 125 2535 46 2536 2422 61 2476 46 2537 40 2523 44 2020 41 46 2538 40 41 59 2539 2540 61 744 2539 40 2535 46 2536 46 2541 40 2421 41 44 2030 46 2542 46 2543 44 2544 41 59 2539 2545 61 744 2539 40 2422 44 2030 46 2542 46 2543 44 2544 41 59 330 2546 2547 61 2510 46 2548 40 1500 41 59 688 40 2518 41 123 2512 2549 61 2550 46 2551 40 2552 46 2553 40 2545 44 2540 41 44 2513 41 59 2547 46 2554 40 2549 41 59 125 630 123 2547 46 2555 40 2556 46 2557 40 41 41 59 2547 46 2558 40 2559 46 2560 40 2513 44 2545 44 2540 41 41 59 125 2561 46 2562 40 362 44 2510 41 59 2561 46 2563 40 2510 41 59 2561 46 2564 40 2016 41 59 2561 46 2565 40 2510 44 2547 44 1500 41 59 2533 40 2547 46 2566 40 41 44 362 41 59 2547 46 2567 40 2547 46 2566 40 41 41 59 792 2510 59 125 331 330 331 777 574 91 93 2568 40 2030 2374 44 2005 2472 44 2005 2473 44 2040 2474 44 2040 2475 44 2395 2396 44 574 91 93 2201 44 574 91 93 2202 41 826 2047 44 2088 123 2030 2569 61 2570 40 2374 44 2472 44 2473 44 2474 44 2475 41 59 330 2571 2572 61 2573 40 2201 44 2202 41 59 330 2574 2575 61 2374 46 2576 40 1500 41 59 570 2577 61 2578 46 2579 40 2575 46 2580 40 41 41 59 2581 2582 59 688 40 2577 41 123 2582 61 2569 46 2583 40 1500 44 2572 44 2030 46 2584 46 2585 44 2586 41 59 125 630 123 2005 2423 61 2575 46 2587 40 41 59 2582 61 2569 46 2588 40 1500 44 2572 44 2423 44 2030 46 2589 46 2590 44 2591 41 59 125 2592 40 2396 44 362 41 59 688 40 2396 46 2593 40 41 41 123 2592 40 2020 41 59 125 2594 46 2595 2596 61 2396 46 2597 40 2582 44 2020 41 46 2598 40 41 59 2599 46 2600 40 362 44 2569 41 59 2599 46 2601 40 2569 41 59 792 2596 46 2602 40 41 59 125 777 2030 2603 40 2030 2374 44 574 91 93 2421 44 574 91 93 2422 44 2005 2472 44 2005 2473 44 2040 2474 44 2040 2475 44 2395 2476 44 574 91 93 2201 44 574 91 93 2202 41 826 2047 44 2088 44 2089 44 2424 123 2030 2604 61 2605 40 2374 44 2472 44 2473 44 2474 44 2475 41 59 330 2606 2607 61 2608 40 2201 44 2202 41 59 330 2609 40 2476 44 362 41 59 2610 2611 61 744 2610 40 2612 46 2613 46 2614 40 2421 41 44 2030 46 2615 46 2616 44 2617 41 59 2610 2618 61 744 2610 40 2612 46 2613 46 2614 40 2422 41 44 2030 46 2615 46 2616 44 2617 41 59 330 2619 2620 61 2374 46 2621 40 1500 41 59 570 2622 61 2623 46 2624 40 2620 46 2625 40 41 41 59 2626 2627 61 2604 46 2628 40 1500 41 59 688 40 2622 41 123 2606 2629 61 2630 46 2631 40 2632 46 2633 40 2618 44 2611 41 44 2607 41 59 2627 46 2634 40 2629 41 59 125 630 123 2627 46 2635 40 2636 46 2637 40 41 41 59 2627 46 2638 40 2639 46 2640 40 2607 44 2618 44 2611 41 41 59 125 2641 46 2642 40 362 44 2604 41 59 2641 46 2643 40 2604 41 59 2641 46 2644 40 2016 41 59 2641 46 2645 40 2604 44 2627 44 1500 41 59 2609 40 2627 46 2646 40 41 44 362 41 59 2627 46 2647 40 2627 46 2646 40 41 41 59 792 2604 59 125 331 330 331 330 330 306 777 2030 2648 40 574 91 93 2649 44 574 91 93 2650 44 2005 2472 44 2005 2473 44 2040 2651 44 2040 2652 44 2395 2653 44 574 91 93 2201 44 574 91 93 2202 44 574 91 93 2654 41 826 2047 44 2088 44 2089 44 2424 123 2030 2374 61 744 2030 40 2013 44 2649 41 59 2655 2656 61 2374 46 2657 40 1500 41 59 2030 2658 61 744 2030 40 2013 41 59 2658 46 2659 40 2656 41 59 688 40 2472 46 2660 40 41 41 123 2658 46 2661 40 2472 44 2032 46 2662 40 2013 44 2651 41 41 59 125 688 40 2473 46 2660 40 41 41 123 2658 46 2663 40 2473 44 2032 46 2664 40 2013 44 2652 41 41 59 125 330 2665 2666 61 2667 40 2201 44 2202 44 2654 41 59 2668 2669 59 570 2670 61 33 2671 46 2672 40 2656 46 2673 40 41 41 59 688 40 2670 41 123 2669 61 2658 46 2674 40 1500 44 2666 44 2030 46 2675 46 2676 44 2677 41 59 125 630 123 2005 2423 61 2656 46 2678 40 41 59 2669 61 2658 46 2679 40 1500 44 2666 44 2423 44 2030 46 2680 46 2681 44 2682 41 59 125 2683 40 2653 44 362 41 59 688 40 2653 46 2684 40 41 41 123 2683 40 2020 41 59 125 2685 46 2686 2687 61 2653 46 2688 40 2669 44 2020 41 46 2689 40 41 59 2690 2691 61 744 2690 40 2687 44 2030 46 2692 46 2693 44 2694 41 59 2690 2695 61 744 2690 40 2685 46 2686 46 2696 40 2650 41 44 2030 46 2692 46 2693 44 2694 41 59 2697 2698 61 2658 46 2699 40 1500 41 59 330 688 40 2670 41 123 2665 2700 61 2701 46 2702 40 2703 46 2704 40 2695 44 2691 41 44 2666 41 59 2698 46 2705 40 2700 41 59 125 630 123 2698 46 2706 40 2707 46 2708 40 41 41 59 2698 46 2709 40 2710 46 2711 40 2666 44 2695 44 2691 41 41 59 125 2712 46 2713 40 362 44 2658 41 59 2712 46 2714 40 2658 41 59 2712 46 2715 40 2016 41 59 2712 46 2716 40 2658 44 2698 44 1500 41 59 2683 40 2698 46 2717 40 41 44 362 41 59 2698 46 2718 40 2698 46 2717 40 41 41 59 792 2658 59 125 331 330 331 777 2719 60 2040 44 2040 62 2720 40 2040 2721 44 2005 2472 44 2005 2473 44 2005 2039 44 2040 2651 44 2040 2652 44 2040 2722 44 2040 2723 44 570 2724 41 123 574 91 93 2201 61 2725 46 2726 40 2727 46 2728 46 2729 40 2722 41 41 46 2730 40 41 59 574 91 93 2202 61 2725 46 2726 40 2727 46 2728 46 2729 40 2723 41 41 46 2730 40 41 59 2731 2732 61 2733 40 2201 44 2202 41 59 2005 2734 61 2472 46 2735 40 2473 41 46 2735 40 2039 41 59 2030 2736 61 744 2030 40 2013 41 59 2737 2738 61 2737 46 2739 40 2721 41 59 2736 46 2740 40 744 2741 40 2013 44 2736 44 744 574 91 93 123 125 44 744 2742 40 2013 44 1500 44 2738 41 44 2734 41 41 59 688 40 2472 46 2743 40 41 41 123 2736 46 2744 40 2472 44 2032 46 2745 40 2013 44 2651 41 41 59 125 688 40 2473 46 2743 40 41 41 123 2736 46 2746 40 2473 44 2032 46 2747 40 2013 44 2652 41 41 59 125 2040 2748 61 2727 46 2728 46 2749 40 2732 46 2750 40 41 41 59 2040 2751 61 2727 46 2728 46 2749 40 2736 46 2752 40 33 2724 41 41 59 792 744 2719 60 62 40 2748 44 2751 41 59 125 777 2040 2753 40 2040 2754 44 2040 2755 44 2005 2423 44 2040 2756 41 826 2757 123 570 2724 61 2758 59 688 40 2754 46 2759 40 362 41 41 2724 61 2760 59 574 91 93 2761 61 2762 46 2763 46 2764 40 2754 41 59 2030 2765 61 744 2030 40 2013 44 2761 44 2766 44 2013 46 2767 40 41 44 2761 46 2768 41 59 2769 2770 61 744 2769 40 2762 46 2763 46 2764 40 2755 41 41 59 2771 2772 59 688 40 2724 41 123 2772 61 2765 46 2773 40 1500 44 2770 44 2030 46 2774 46 2775 44 2760 41 59 125 630 123 2772 61 2765 46 2776 40 1500 44 2770 44 2423 44 2030 46 2777 46 2778 44 2760 41 59 125 2779 2780 61 2779 46 2781 40 2762 46 2763 46 2764 40 2756 41 41 59 2782 40 2780 44 362 41 59 2779 46 2783 2784 61 2780 46 2785 40 2772 44 2020 41 46 2786 40 41 59 2787 2788 61 744 2787 40 2784 44 2030 46 2789 46 2790 44 2760 41 59 792 2762 46 2763 46 2791 40 2788 46 2792 40 41 41 59 125 777 2719 60 2040 44 2040 62 2793 40 2040 2794 44 2040 2755 44 2040 2795 44 2040 2796 44 570 2724 41 826 2047 44 2424 123 2030 2797 61 744 2030 40 2013 44 2798 46 2799 46 2800 40 2794 41 41 59 2801 2802 61 2801 46 2803 40 2798 46 2799 46 2800 40 2795 41 44 2804 44 2804 41 59 2801 2805 61 2801 46 2803 40 2798 46 2799 46 2800 40 2796 41 44 2804 44 2804 41 59 2806 2807 61 744 2806 40 2798 46 2799 46 2800 40 2755 41 41 59 2808 2809 61 2797 46 2810 40 1500 41 59 688 40 2724 41 123 2806 2811 61 2812 46 2813 40 2814 46 2815 40 2805 44 2802 41 44 2807 41 59 2809 46 2816 40 2811 41 59 125 630 123 2809 46 2817 40 2818 46 2819 40 41 41 59 2809 46 2820 40 2821 46 2822 40 2807 44 2805 44 2802 41 41 59 125 2040 2823 61 2797 46 2824 40 41 46 2825 40 41 59 2040 2826 61 2798 46 2799 46 2827 40 2797 46 2828 40 33 2724 41 41 59 792 744 2719 60 62 40 2823 44 2826 41 59 125 777 865 2829 40 2040 2830 44 2043 46 2044 2045 41 826 2047 44 2088 44 2089 123 2030 2831 61 744 2030 40 2013 44 2832 46 2833 46 2834 40 2830 41 41 59 2835 46 2836 40 362 44 2831 41 59 2835 46 2837 40 2831 41 59 2835 46 2838 40 2016 41 59 2839 40 2831 44 2045 44 1503 41 59 125 331 330 331 777 2030 2840 40 2194 60 2195 62 2841 44 2194 60 2195 62 2842 44 2005 2843 44 2040 2844 44 64 2014 2005 2845 44 64 2014 2040 2846 44 2005 2847 44 2040 2848 44 64 2014 2005 2849 44 64 2014 2040 2850 41 826 2047 123 2030 2851 61 744 2030 40 2013 41 59 2194 60 2852 62 2853 61 2842 46 2854 40 41 46 2855 40 2856 45 62 2857 40 2851 44 744 574 91 93 123 125 44 2856 41 41 46 2858 40 2859 46 2860 40 41 41 59 792 2861 40 2841 44 2853 44 2843 44 2844 44 2845 44 2846 44 2847 44 2848 44 2849 44 2850 44 2851 41 59 125 777 2030 2862 40 2194 60 2195 62 2841 44 2194 60 2863 62 2842 44 2005 2843 44 2040 2844 44 64 2014 2005 2845 44 64 2014 2040 2846 44 2005 2847 44 2040 2848 44 64 2014 2005 2849 44 64 2014 2040 2850 41 826 2047 123 2030 2864 61 744 2030 40 2013 41 59 792 2865 40 2841 44 2842 44 2843 44 2844 44 2845 44 2846 44 2847 44 2848 44 2849 44 2850 44 2864 41 59 125 773 2030 2866 40 2194 60 2195 62 2841 44 2194 60 2863 62 2842 44 2005 2843 44 2040 2844 44 64 2014 2005 2845 44 64 2014 2040 2846 44 2005 2847 44 2040 2848 44 64 2014 2005 2849 44 64 2014 2040 2850 44 2030 2867 41 826 2047 123 2841 46 2868 40 2869 45 62 2867 46 2870 40 2871 40 2867 44 744 574 91 93 123 125 44 2869 41 41 41 59 2842 46 2868 40 2867 58 58 2870 41 59 2867 46 2872 40 2843 44 2032 46 2873 40 2013 44 2844 41 41 59 688 40 2845 340 2874 307 2845 46 2875 40 41 41 2867 46 2872 40 2845 44 2032 46 2873 40 2013 44 2876 46 2877 40 2846 41 41 41 59 2867 46 2872 40 2847 44 2032 46 2873 40 2013 44 2848 41 41 59 688 40 2849 340 2874 307 2849 46 2875 40 41 41 2867 46 2872 40 2849 44 2032 46 2873 40 2013 44 2876 46 2877 40 2850 41 41 41 59 792 2867 59 125 777 865 2878 40 2030 2867 44 2194 60 2863 62 2879 41 826 2203 123 664 40 2863 2880 58 2879 41 123 2881 40 2867 44 2880 44 2880 46 2882 40 41 41 59 125 125 331 330 331 777 865 2883 40 2030 2884 44 2043 46 2044 2045 41 123 2885 40 2018 41 59 2043 46 2883 40 2016 44 2018 46 2886 40 41 44 2884 44 2045 41 59 125 777 865 2883 40 2030 2884 44 2043 46 2044 2045 44 704 2887 41 123 2888 40 2018 41 59 2043 46 2883 40 2016 44 2018 46 2889 40 41 44 2884 44 2045 44 2887 41 59 125 331 330 331 306 777 2030 2890 40 2891 2892 41 123 2893 40 2016 41 59 792 2016 46 2894 40 2892 41 59 125 777 865 2895 40 2030 2884 41 123 2896 40 2016 41 59 2016 46 2895 40 2884 41 59 125 777 2030 2897 40 2030 2884 41 123 792 744 2030 40 2013 44 2884 46 2898 40 41 41 59 125 331 330 331 330 330 330 64 2899 773 2195 2900 40 2863 2901 41 123 2902 40 2901 44 362 41 59 2902 40 2901 46 2903 40 41 44 362 41 59 2902 40 2901 46 2903 40 41 46 2904 40 41 44 362 41 59 2902 40 2901 46 2905 40 41 44 362 41 59 330 330 330 330 792 744 2195 40 2901 46 2906 40 41 46 2907 40 41 44 2901 46 2903 40 41 46 2904 40 41 46 2908 40 2909 41 44 2901 46 2905 40 41 46 2910 41 59 125 773 2863 2911 40 2030 2912 44 574 91 93 2913 44 2195 2914 41 123 792 744 2863 40 2013 44 2912 44 2913 44 2915 40 2914 41 44 2005 46 2007 40 2914 46 2916 41 41 59 125 773 2917 2918 40 2195 2914 41 123 792 744 2917 40 2013 44 2914 46 2919 44 744 2030 40 2013 44 2914 46 2912 41 41 59 125 777 570 2920 40 2195 2914 41 123 792 2921 46 2920 40 2922 40 2918 40 2914 41 46 2923 40 41 41 46 2924 40 41 41 59 125 330 330 330 330 330 330 330 330 330 330 330 773 2925 2926 40 574 91 93 2201 44 574 91 93 2202 44 574 91 93 2654 41 123 2927 2928 61 2927 46 2929 40 2201 41 59 2927 2930 61 2927 46 2929 40 2202 41 59 2927 2931 61 2927 46 2929 40 2654 41 59 330 2194 60 2927 62 2932 61 2933 46 2934 40 2931 44 2930 44 2928 41 59 792 2935 46 2936 40 1502 44 2932 41 59 125 773 2925 2937 40 574 91 93 2201 44 574 91 93 2202 41 123 2938 2939 61 2938 46 2940 40 2201 41 59 2938 2941 61 2938 46 2940 40 2202 41 59 330 2194 60 2938 62 2942 61 2943 46 2944 40 2941 44 2939 41 59 792 2945 46 2946 40 1502 44 2942 41 59 125 773 2925 2947 40 574 91 93 2201 44 574 91 93 2202 44 570 2948 41 123 2925 2949 61 2937 40 2201 44 2202 41 59 688 40 2948 41 123 792 2950 46 2951 40 2949 41 59 125 630 123 792 2952 46 2953 40 2949 41 59 125 125 773 2030 2954 40 2030 2374 44 2005 2472 44 2005 2473 44 2040 2651 44 2040 2652 41 826 2047 123 2955 2956 61 2374 46 2957 40 1500 41 59 2030 2867 61 744 2030 40 2013 41 59 2867 46 2958 40 2956 41 59 688 40 2472 46 2959 40 41 41 123 2867 46 2960 40 2472 44 2032 46 2961 40 2013 44 2651 41 41 59 125 688 40 2473 46 2959 40 41 41 123 2867 46 2962 40 2473 44 2032 46 2963 40 2013 44 2652 41 41 59 125 2964 40 2867 46 2965 40 41 46 2966 40 41 325 1501 44 362 41 59 792 2867 59 125 773 865 2967 40 2030 2867 44 2863 2901 44 704 2968 41 826 2203 123 2969 40 2901 46 2970 40 41 44 362 41 59 2925 2971 61 2901 46 2970 40 41 46 2972 40 41 59 2973 2974 61 2901 46 2975 40 41 46 2976 40 2016 41 59 2969 40 2974 44 362 43 2901 46 2975 40 41 46 2977 40 41 41 59 688 40 2974 46 2978 40 41 41 123 2969 40 2020 41 59 125 688 40 2979 46 2980 40 2971 41 309 2979 46 2981 40 2971 41 41 123 2891 2982 61 2867 46 2983 40 2968 44 2971 44 2030 46 2984 46 2985 44 2986 41 59 2973 46 2987 2988 61 2974 46 2989 40 2982 44 2020 41 59 2990 2991 61 744 2990 40 2988 44 2030 46 2984 46 2985 44 2986 41 59 688 40 2979 46 2980 40 2971 41 41 123 2901 46 2992 40 2993 46 2994 40 2991 41 41 59 125 630 688 40 2979 46 2981 40 2971 41 41 123 2901 46 2995 40 2996 46 2997 40 2991 44 2974 41 41 59 125 125 630 688 40 2979 46 2998 40 2971 41 41 123 330 2925 2999 61 3000 46 3001 40 2974 41 59 2005 3002 61 2901 46 3003 40 41 59 3004 3005 61 2867 46 3006 40 2968 44 2974 44 2020 44 2999 44 3002 44 2030 46 3007 46 3008 44 3009 41 59 2901 46 3010 40 3000 46 3011 40 41 41 59 2901 46 3012 40 3013 46 3014 40 3005 44 2974 41 41 59 125 630 123 825 744 2203 40 362 43 2971 41 59 125 125 773 865 3015 40 2030 2867 44 2032 3016 44 2032 2035 41 826 2089 123 3017 3018 61 3019 59 830 123 330 3018 61 3017 46 3020 40 2867 41 59 3018 46 3021 61 3022 59 3018 46 2020 61 2020 59 330 3018 46 3023 61 2005 46 3024 59 3018 46 3025 61 2005 46 3024 59 3018 46 3026 61 3022 59 330 3018 46 3027 61 744 3028 40 3016 44 2011 46 3029 40 41 41 59 330 3018 46 2035 61 2035 59 330 330 330 3030 40 2016 44 362 41 59 2016 46 3031 40 3018 41 59 125 580 40 3032 3033 41 123 688 40 3018 340 3019 307 3018 46 2884 340 3019 41 123 2002 46 3034 40 362 44 3018 46 2884 44 3018 46 2884 46 3035 40 41 41 59 125 825 744 2089 40 3033 41 59 125 125 773 865 3036 40 726 2377 44 2030 2884 41 123 3037 40 33 2884 46 3038 40 41 46 3039 40 41 44 362 44 2884 41 59 2884 46 3038 40 41 46 3040 40 2901 45 62 2901 46 3041 40 2863 46 3042 45 1501 41 41 59 2884 46 3043 40 2377 41 59 125 330 330 330 330 773 570 3044 40 2030 2867 41 123 2194 60 3045 62 3046 61 2867 46 3047 40 41 59 2194 60 3045 62 3048 61 744 3049 60 62 40 41 59 664 40 3045 3050 58 3046 41 123 688 40 3050 46 3051 40 41 46 3052 40 3053 46 3054 40 41 41 41 123 2002 46 3055 40 362 44 3050 46 3056 40 41 41 59 125 630 123 3048 46 3057 40 3050 41 59 125 125 330 330 688 40 3048 46 3058 40 41 340 3046 46 3058 40 41 41 123 2002 46 3059 40 362 41 59 2867 46 3060 40 41 59 664 40 3045 3050 58 3048 41 123 2867 46 3061 40 3050 41 59 2002 46 3059 40 362 44 3050 46 3062 40 41 41 59 125 792 3063 59 330 125 792 3064 59 330 125 125 ,"{'AvgLine': 27, 'CountLine': 1415, 'CountStmt': 574, 'MaxNesting': 3, 'AvgLineCode': 20, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 493, 'MaxEssential': 1, 'SumEssential': 51, 'AvgCyclomatic': 2, 'CountLineCode': 950, 'CountStmtDecl': 223, 'MaxCyclomatic': 16, 'SumCyclomatic': 128, 'AvgLineComment': 5, 'CountClassBase': 1, 'CountLineBlank': 166, 'CountSemicolon': 445, 'CountDeclMethod': 46, 'CountLineCodeExe': 594, 'CountLineComment': 301, 'CountClassCoupled': 44, 'CountClassDerived': 0, 'CountLineCodeDecl': 405, 'CountDeclMethodAll': 46, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.32', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 17, 'SumCyclomaticStrict': 139, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 32, 'MaxCyclomaticModified': 16, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 128, 'CountDeclClassVariable': 2, 'CountDeclMethodDefault': 1, 'CountDeclMethodPrivate': 13, 'CountDeclInstanceMethod': 46, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 44, 'CountDeclInstanceVariable': 6, 'PercentLackOfCohesionModified': 73}"
2593,Java,"public class ToolSet {

    /**
     * A cache mapping a {@link Block} to how long it will take to break
     * with this toolset, given the optimum tool is used.
     */
    private final Map<Block, Double> breakStrengthCache;

    /**
     * My buddy leijurv owned me so we have this to not create a new lambda instance.
     */
    private final Function<Block, Double> backendCalculation;

    private final EntityPlayerSP player;

    public ToolSet(EntityPlayerSP player) {
        breakStrengthCache = new HashMap<>();
        this.player = player;

        if (Baritone.settings().considerPotionEffects.value) {
            double amplifier = potionAmplifier();
            Function<Double, Double> amplify = x -> amplifier * x;
            backendCalculation = amplify.compose(this::getBestDestructionTime);
        } else {
            backendCalculation = this::getBestDestructionTime;
        }
    }

    /**
     * Using the best tool on the hotbar, how fast we can mine this block
     *
     * @param state the blockstate to be mined
     * @return the speed of how fast we'll mine it. 1/(time in ticks)
     */
    public double getStrVsBlock(IBlockState state) {
        return breakStrengthCache.computeIfAbsent(state.getBlock(), backendCalculation);
    }

    /**
     * Evaluate the material cost of a possible tool. The priority matches the
     * listed order in the Item.ToolMaterial enum.
     *
     * @param itemStack a possibly empty ItemStack
     * @return values range from -1 to 4
     */
    private int getMaterialCost(ItemStack itemStack) {
        if (itemStack.getItem() instanceof ItemTool) {
            ItemTool tool = (ItemTool) itemStack.getItem();
            return ToolMaterial.valueOf(tool.getToolMaterialName()).ordinal();
        } else {
            return -1;
        }
    }

    public boolean hasSilkTouch(ItemStack stack) {
        return EnchantmentHelper.getEnchantmentLevel(Enchantments.SILK_TOUCH, stack) > 0;
    }

    /**
     * Calculate which tool on the hotbar is best for mining, depending on an override setting,
     * related to auto tool movement cost, it will either return current selected slot, or the best slot.
     *
     * @param b the blockstate to be mined
     * @return An int containing the index in the tools array that worked best
     */

    public int getBestSlot(Block b, boolean preferSilkTouch) {
        return getBestSlot(b, preferSilkTouch, false);
    }

    public int getBestSlot(Block b, boolean preferSilkTouch, boolean pathingCalculation) {

        /*
        If we actually want know what efficiency our held item has instead of the best one
        possible, this lets us make pathing depend on the actual tool to be used (if auto tool is disabled)
        */
        if (!Baritone.settings().autoTool.value && pathingCalculation) {
            return player.inventory.currentItem;
        }

        int best = 0;
        double highestSpeed = Double.NEGATIVE_INFINITY;
        int lowestCost = Integer.MIN_VALUE;
        boolean bestSilkTouch = false;
        IBlockState blockState = b.getDefaultState();
        for (int i = 0; i < 9; i++) {
            ItemStack itemStack = player.inventory.getStackInSlot(i);
            if (!Baritone.settings().useSwordToMine.value && itemStack.getItem() instanceof ItemSword) {
                continue;
            }
          
            if (Baritone.settings().itemSaver.value && (itemStack.getItemDamage() + Baritone.settings().itemSaverThreshold.value) >= itemStack.getMaxDamage() && itemStack.getMaxDamage() > 1) {
                continue;
            }
            double speed = calculateSpeedVsBlock(itemStack, blockState);
            boolean silkTouch = hasSilkTouch(itemStack);
            if (speed > highestSpeed) {
                highestSpeed = speed;
                best = i;
                lowestCost = getMaterialCost(itemStack);
                bestSilkTouch = silkTouch;
            } else if (speed == highestSpeed) {
                int cost = getMaterialCost(itemStack);
                if ((cost < lowestCost && (silkTouch || !bestSilkTouch)) ||
                        (preferSilkTouch && !bestSilkTouch && silkTouch)) {
                    highestSpeed = speed;
                    best = i;
                    lowestCost = cost;
                    bestSilkTouch = silkTouch;
                }
            }
        }
        return best;
    }

    /**
     * Calculate how effectively a block can be destroyed
     *
     * @param b the blockstate to be mined
     * @return A double containing the destruction ticks with the best tool
     */
    private double getBestDestructionTime(Block b) {
        ItemStack stack = player.inventory.getStackInSlot(getBestSlot(b, false, true));
        return calculateSpeedVsBlock(stack, b.getDefaultState()) * avoidanceMultiplier(b);
    }

    private double avoidanceMultiplier(Block b) {
        return Baritone.settings().blocksToAvoidBreaking.value.contains(b) ? Baritone.settings().avoidBreakingMultiplier.value : 1;
    }

    /**
     * Calculates how long would it take to mine the specified block given the best tool
     * in this toolset is used. A negative value is returned if the specified block is unbreakable.
     *
     * @param item  the item to mine it with
     * @param state the blockstate to be mined
     * @return how long it would take in ticks
     */
    public static double calculateSpeedVsBlock(ItemStack item, IBlockState state) {
        float hardness = state.getBlockHardness(null, null);
        if (hardness < 0) {
            return -1;
        }

        float speed = item.getDestroySpeed(state);
        if (speed > 1) {
            int effLevel = EnchantmentHelper.getEnchantmentLevel(Enchantments.EFFICIENCY, item);
            if (effLevel > 0 && !item.isEmpty()) {
                speed += effLevel * effLevel + 1;
            }
        }

        speed /= hardness;
        if (state.getMaterial().isToolNotRequired() || (!item.isEmpty() && item.canHarvestBlock(state))) {
            return speed / 30;
        } else {
            return speed / 100;
        }
    }

    /**
     * Calculates any modifier to breaking time based on status effects.
     *
     * @return a double to scale block breaking speed.
     */
    private double potionAmplifier() {
        double speed = 1;
        if (player.isPotionActive(MobEffects.HASTE)) {
            speed *= 1 + (player.getActivePotionEffect(MobEffects.HASTE).getAmplifier() + 1) * 0.2;
        }
        if (player.isPotionActive(MobEffects.MINING_FATIGUE)) {
            switch (player.getActivePotionEffect(MobEffects.MINING_FATIGUE).getAmplifier()) {
                case 0:
                    speed *= 0.3;
                    break;
                case 1:
                    speed *= 0.09;
                    break;
                case 2:
                    speed *= 0.0027; // you might think that 0.09*0.3 = 0.027 so that should be next, that would make too much sense. it's 0.0027.
                    break;
                default:
                    speed *= 0.00081;
                    break;
            }
        }
        return speed;
    }
}",1,777 587 2000 123 306 773 657 2001 60 2002 44 2003 62 2004 59 306 773 657 2005 60 2002 44 2003 62 2006 59 773 657 2007 2008 59 777 2000 40 2007 2008 41 123 2004 61 744 2009 60 62 40 41 59 823 46 2008 61 2008 59 688 40 2010 46 2011 40 41 46 2012 46 2013 41 123 625 2014 61 2015 40 41 59 2005 60 2003 44 2003 62 2016 61 2017 45 62 2014 42 2017 59 2006 61 2016 46 2018 40 823 58 58 2019 41 59 125 630 123 2006 61 823 58 58 2020 59 125 125 306 777 625 2021 40 2022 2023 41 123 792 2004 46 2024 40 2023 46 2025 40 41 44 2006 41 59 125 306 773 704 2026 40 2027 2028 41 123 688 40 2028 46 2029 40 41 702 2030 41 123 2030 2031 61 40 2030 41 2028 46 2029 40 41 59 792 2032 46 2033 40 2031 46 2034 40 41 41 46 2035 40 41 59 125 630 123 792 45 1501 59 125 125 777 570 2036 40 2027 2037 41 123 792 2038 46 2039 40 2040 46 2041 44 2037 41 62 1500 59 125 306 777 704 2042 40 2002 2043 44 570 2044 41 123 792 2042 40 2043 44 2044 44 2045 41 59 125 777 704 2042 40 2002 2043 44 570 2044 44 570 2046 41 123 305 688 40 33 2047 46 2048 40 41 46 2049 46 2050 307 2046 41 123 792 2008 46 2051 46 2052 59 125 704 2053 61 1500 59 625 2054 61 2003 46 2055 59 704 2056 61 2057 46 2058 59 570 2059 61 2060 59 2022 2061 61 2043 46 2062 40 41 59 664 40 704 2063 61 1500 59 2063 60 1502 59 2063 349 41 123 2027 2028 61 2008 46 2064 46 2065 40 2063 41 59 688 40 33 2047 46 2048 40 41 46 2066 46 2050 307 2028 46 2067 40 41 702 2068 41 123 605 59 125 688 40 2047 46 2048 40 41 46 2069 46 2050 307 40 2028 46 2070 40 41 43 2047 46 2048 40 41 46 2071 46 2050 41 325 2028 46 2072 40 41 307 2028 46 2072 40 41 62 1501 41 123 605 59 125 625 2073 61 2074 40 2028 44 2061 41 59 570 2075 61 2036 40 2028 41 59 688 40 2073 62 2054 41 123 2054 61 2073 59 2053 61 2063 59 2056 61 2026 40 2028 41 59 2059 61 2075 59 125 630 688 40 2073 323 2054 41 123 704 2076 61 2026 40 2028 41 59 688 40 40 2076 60 2056 307 40 2075 309 33 2059 41 41 309 40 2044 307 33 2059 307 2075 41 41 123 2054 61 2073 59 2053 61 2063 59 2056 61 2076 59 2059 61 2075 59 125 125 125 792 2053 59 125 306 773 625 2077 40 2002 2043 41 123 2027 2037 61 2008 46 2078 46 2079 40 2042 40 2043 44 2080 44 2081 41 41 59 792 2082 40 2037 44 2043 46 2083 40 41 41 42 2084 40 2043 41 59 125 773 625 2085 40 2002 2043 41 123 792 2086 46 2087 40 41 46 2088 46 2089 46 2090 40 2043 41 63 2086 46 2087 40 41 46 2091 46 2089 58 1501 59 125 306 777 809 625 2092 40 2027 2093 44 2022 2023 41 123 660 2094 61 2023 46 2095 40 2096 44 2096 41 59 688 40 2094 60 1500 41 123 792 45 1501 59 125 660 2097 61 2093 46 2098 40 2023 41 59 688 40 2097 62 1501 41 123 704 2099 61 2100 46 2101 40 2102 46 2103 44 2093 41 59 688 40 2099 62 1500 307 33 2093 46 2104 40 41 41 123 2097 348 2099 42 2099 43 1501 59 125 125 2097 316 2094 59 688 40 2023 46 2105 40 41 46 2106 40 41 309 40 33 2093 46 2107 40 41 307 2093 46 2108 40 2023 41 41 41 123 792 2097 47 1503 59 125 630 123 792 2097 47 1503 59 125 125 306 773 625 2109 40 41 123 625 2110 61 1501 59 688 40 2008 46 2111 40 2112 46 2113 41 41 123 2110 363 1501 43 40 2008 46 2114 40 2112 46 2113 41 46 2115 40 41 43 1501 41 42 1500 59 125 688 40 2008 46 2111 40 2112 46 2116 41 41 123 819 40 2008 46 2117 40 2112 46 2116 41 46 2118 40 41 41 123 579 1500 58 2110 363 1500 59 572 59 579 1501 58 2110 363 1500 59 572 59 579 1502 58 2110 363 1500 59 330 572 59 613 58 2110 363 1500 59 572 59 125 125 792 2110 59 125 125 ,"{'AvgLine': 16, 'CountLine': 194, 'CountStmt': 87, 'MaxNesting': 3, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 66, 'MaxEssential': 5, 'SumEssential': 17, 'AvgCyclomatic': 2, 'CountLineCode': 119, 'CountStmtDecl': 32, 'MaxCyclomatic': 8, 'SumCyclomatic': 30, 'AvgLineComment': 4, 'CountClassBase': 1, 'CountLineBlank': 20, 'CountSemicolon': 60, 'CountDeclMethod': 10, 'CountLineCodeExe': 79, 'CountLineComment': 56, 'CountClassCoupled': 16, 'CountClassDerived': 0, 'CountLineCodeDecl': 31, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.47', 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 17, 'SumCyclomaticStrict': 42, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 6, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 73, 'SumCyclomaticModified': 28, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 16, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 70}"
2861,Java,"@EqualsAndHashCode(callSuper = true)
@Getter
@ToString
public abstract class TradeMessage extends NetworkEnvelope implements UidMessage {
    protected final String tradeId;
    protected final String uid;

    protected TradeMessage(int messageVersion, String tradeId, String uid) {
        super(messageVersion);
        this.tradeId = tradeId;
        this.uid = uid;
    }
}",1,64 2000 40 2001 61 2002 41 64 2003 64 2004 777 539 587 2005 650 2006 693 2007 123 775 657 2008 2009 59 775 657 2008 2010 59 775 2005 40 704 2011 44 2008 2009 44 2008 2010 41 123 818 40 2011 41 59 823 46 2009 61 2009 59 823 46 2010 61 2010 59 125 125 ,"{'AvgLine': 5, 'CountLine': 13, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 1, 'CountSemicolon': 5, 'CountDeclMethod': 1, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 10, 'CountLineCodeDecl': 7, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 0}"
3503,Java,"class TradesChartsViewModel extends ActivatableViewModel {
    static final int MAX_TICKS = 90;
    private static final int TAB_INDEX = 2;

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Enum
    ///////////////////////////////////////////////////////////////////////////////////////////

    public enum TickUnit {
        YEAR,
        MONTH,
        WEEK,
        DAY,
        HOUR,
        MINUTE_10
    }

    private final TradeStatisticsManager tradeStatisticsManager;
    final Preferences preferences;
    private final PriceFeedService priceFeedService;
    private final Navigation navigation;

    private final SetChangeListener<TradeStatistics3> setChangeListener;
    final ObjectProperty<TradeCurrency> selectedTradeCurrencyProperty = new SimpleObjectProperty<>();
    final BooleanProperty showAllTradeCurrenciesProperty = new SimpleBooleanProperty(false);
    private final CurrencyList currencyListItems;
    private final CurrencyListItem showAllCurrencyListItem = new CurrencyListItem(new CryptoCurrency(GUIUtil.SHOW_ALL_FLAG, """"), -1);
    final ObservableList<TradeStatistics3> tradeStatisticsByCurrency = FXCollections.observableArrayList();
    final ObservableList<XYChart.Data<Number, Number>> priceItems = FXCollections.observableArrayList();
    final ObservableList<XYChart.Data<Number, Number>> volumeItems = FXCollections.observableArrayList();
    final ObservableList<XYChart.Data<Number, Number>> volumeInUsdItems = FXCollections.observableArrayList();
    private final Map<Long, Pair<Date, Set<TradeStatistics3>>> itemsPerInterval = new HashMap<>();

    TickUnit tickUnit;
    private int selectedTabIndex;
    final Map<TickUnit, Map<Long, Long>> usdAveragePriceMapsPerTickUnit = new HashMap<>();
    private boolean fillTradeCurrenciesOnActivateCalled;
    private volatile boolean deactivateCalled;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    TradesChartsViewModel(TradeStatisticsManager tradeStatisticsManager, Preferences preferences,
                          PriceFeedService priceFeedService, Navigation navigation) {
        this.tradeStatisticsManager = tradeStatisticsManager;
        this.preferences = preferences;
        this.priceFeedService = priceFeedService;
        this.navigation = navigation;

        setChangeListener = change -> {
            applyAsyncTradeStatisticsForCurrency(getCurrencyCode())
                    .whenComplete((result, throwable) -> {
                        if (deactivateCalled) {
                            return;
                        }
                        if (throwable != null) {
                            log.error(""Error at setChangeListener/applyAsyncTradeStatisticsForCurrency. {}"", throwable.toString());
                            return;
                        }
                        applyAsyncChartData();
                    });
            fillTradeCurrencies();
        };

        String tradeChartsScreenCurrencyCode = preferences.getTradeChartsScreenCurrencyCode();
        showAllTradeCurrenciesProperty.set(isShowAllEntry(tradeChartsScreenCurrencyCode));

        TradeCurrency tradeCurrency = CurrencyUtil.getTradeCurrency(tradeChartsScreenCurrencyCode)
                .orElse(GlobalSettings.getDefaultTradeCurrency());
        selectedTradeCurrencyProperty.set(tradeCurrency);

        tickUnit = TickUnit.values()[preferences.getTradeStatisticsTickUnitIndex()];

        currencyListItems = new CurrencyList(this.preferences);
    }

    @Override
    protected void activate() {
        long ts = System.currentTimeMillis();
        deactivateCalled = false;

        tradeStatisticsManager.getObservableTradeStatisticsSet().addListener(setChangeListener);
        if (!fillTradeCurrenciesOnActivateCalled) {
            fillTradeCurrencies();
            fillTradeCurrenciesOnActivateCalled = true;
        }
        syncPriceFeedCurrency();
        setMarketPriceFeedCurrency();

        List<CompletableFuture<Boolean>> allFutures = new ArrayList<>();
        CompletableFuture<Boolean> task1Done = new CompletableFuture<>();
        allFutures.add(task1Done);
        CompletableFuture<Boolean> task2Done = new CompletableFuture<>();
        allFutures.add(task2Done);
        CompletableFutureUtils.allOf(allFutures)
                .whenComplete((res, throwable) -> {
                    if (deactivateCalled) {
                        return;
                    }
                    if (throwable != null) {
                        log.error(throwable.toString());
                        return;
                    }
                    //Once applyAsyncUsdAveragePriceMapsPerTickUnit and applyAsyncTradeStatisticsForCurrency are
                    // both completed we call applyAsyncChartData
                    UserThread.execute(this::applyAsyncChartData);
                });

        // We call applyAsyncUsdAveragePriceMapsPerTickUnit and applyAsyncTradeStatisticsForCurrency
        // in parallel for better performance
        applyAsyncUsdAveragePriceMapsPerTickUnit(task1Done);
        applyAsyncTradeStatisticsForCurrency(getCurrencyCode(), task2Done);

        log.debug(""activate took {}"", System.currentTimeMillis() - ts);
    }

    @Override
    protected void deactivate() {
        deactivateCalled = true;
        tradeStatisticsManager.getObservableTradeStatisticsSet().removeListener(setChangeListener);

        // We want to avoid to trigger listeners in the view so we delay a bit. Deactivate on model is called before
        // deactivate on view.
        UserThread.execute(() -> {
            usdAveragePriceMapsPerTickUnit.clear();
            tradeStatisticsByCurrency.clear();
            priceItems.clear();
            volumeItems.clear();
            volumeInUsdItems.clear();
            itemsPerInterval.clear();
        });
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Async calls
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void applyAsyncUsdAveragePriceMapsPerTickUnit(CompletableFuture<Boolean> completeFuture) {
        long ts = System.currentTimeMillis();
        ChartCalculations.getUsdAveragePriceMapsPerTickUnit(tradeStatisticsManager.getObservableTradeStatisticsSet())
                .whenComplete((usdAveragePriceMapsPerTickUnit, throwable) -> {
                    if (deactivateCalled) {
                        return;
                    }
                    if (throwable != null) {
                        log.error(""Error at applyAsyncUsdAveragePriceMapsPerTickUnit. {}"", throwable.toString());
                        completeFuture.completeExceptionally(throwable);
                        return;
                    }
                    UserThread.execute(() -> {
                        this.usdAveragePriceMapsPerTickUnit.clear();
                        this.usdAveragePriceMapsPerTickUnit.putAll(usdAveragePriceMapsPerTickUnit);
                        log.debug(""applyAsyncUsdAveragePriceMapsPerTickUnit took {}"", System.currentTimeMillis() - ts);
                        completeFuture.complete(true);
                    });
                });
    }

    private CompletableFuture<Boolean> applyAsyncTradeStatisticsForCurrency(String currencyCode) {
        return applyAsyncTradeStatisticsForCurrency(currencyCode, null);
    }

    private CompletableFuture<Boolean> applyAsyncTradeStatisticsForCurrency(String currencyCode,
                                                                            @Nullable CompletableFuture<Boolean> completeFuture) {
        CompletableFuture<Boolean> future = new CompletableFuture<>();
        long ts = System.currentTimeMillis();
        ChartCalculations.getTradeStatisticsForCurrency(tradeStatisticsManager.getObservableTradeStatisticsSet(),
                currencyCode,
                showAllTradeCurrenciesProperty.get())
                .whenComplete((list, throwable) -> {
                    if (deactivateCalled) {
                        return;
                    }
                    if (throwable != null) {
                        log.error(""Error at applyAsyncTradeStatisticsForCurrency. {}"", throwable.toString());
                        if (completeFuture != null) {
                            completeFuture.completeExceptionally(throwable);
                        }
                        return;
                    }

                    UserThread.execute(() -> {
                        tradeStatisticsByCurrency.setAll(list);
                        log.debug(""applyAsyncTradeStatisticsForCurrency took {}"", System.currentTimeMillis() - ts);
                        if (completeFuture != null) {
                            completeFuture.complete(true);
                        }
                        future.complete(true);
                    });
                });
        return future;
    }

    private void applyAsyncChartData() {
        long ts = System.currentTimeMillis();
        ChartCalculations.getUpdateChartResult(new ArrayList<>(tradeStatisticsByCurrency),
                tickUnit,
                usdAveragePriceMapsPerTickUnit,
                getCurrencyCode())
                .whenComplete((updateChartResult, throwable) -> {
                    if (deactivateCalled) {
                        return;
                    }
                    if (throwable != null) {
                        log.error(""Error at applyAsyncChartData. {}"", throwable.toString());
                        return;
                    }
                    UserThread.execute(() -> {
                        itemsPerInterval.clear();
                        itemsPerInterval.putAll(updateChartResult.getItemsPerInterval());

                        priceItems.setAll(updateChartResult.getPriceItems());
                        volumeItems.setAll(updateChartResult.getVolumeItems());
                        volumeInUsdItems.setAll(updateChartResult.getVolumeInUsdItems());
                        log.debug(""applyAsyncChartData took {}"", System.currentTimeMillis() - ts);
                    });
                });
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // UI actions
    ///////////////////////////////////////////////////////////////////////////////////////////

    void onSetTradeCurrency(TradeCurrency tradeCurrency) {
        if (tradeCurrency != null) {
            String code = tradeCurrency.getCode();

            if (isEditEntry(code)) {
                navigation.navigateTo(MainView.class, SettingsView.class, PreferencesView.class);
                return;
            }

            boolean showAllEntry = isShowAllEntry(code);
            showAllTradeCurrenciesProperty.set(showAllEntry);
            if (showAllEntry) {
                priceFeedService.setCurrencyCode(GlobalSettings.getDefaultTradeCurrency().getCode());
            } else {
                selectedTradeCurrencyProperty.set(tradeCurrency);
                priceFeedService.setCurrencyCode(code);

            }
            preferences.setTradeChartsScreenCurrencyCode(code);

            applyAsyncTradeStatisticsForCurrency(getCurrencyCode())
                    .whenComplete((result, throwable) -> {
                        if (deactivateCalled) {
                            return;
                        }
                        if (throwable != null) {
                            log.error(""Error at onSetTradeCurrency/applyAsyncTradeStatisticsForCurrency. {}"", throwable.toString());
                            return;
                        }
                        applyAsyncChartData();
                    });
        }
    }

    void setTickUnit(TickUnit tickUnit) {
        this.tickUnit = tickUnit;
        preferences.setTradeStatisticsTickUnitIndex(tickUnit.ordinal());
        applyAsyncChartData();
    }

    void setSelectedTabIndex(int selectedTabIndex) {
        this.selectedTabIndex = selectedTabIndex;
        syncPriceFeedCurrency();
        setMarketPriceFeedCurrency();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    public String getCurrencyCode() {
        return selectedTradeCurrencyProperty.get().getCode();
    }

    public ObservableList<CurrencyListItem> getCurrencyListItems() {
        return currencyListItems.getObservableList();
    }

    public Optional<CurrencyListItem> getSelectedCurrencyListItem() {
        return currencyListItems.getObservableList().stream().filter(e -> e.tradeCurrency.equals(selectedTradeCurrencyProperty.get())).findAny();
    }

    long getTimeFromTickIndex(long tick) {
        return ChartCalculations.getTimeFromTickIndex(tick, itemsPerInterval);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Private
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void fillTradeCurrencies() {
        // Don't use a set as we need all entries
        List<TradeCurrency> tradeCurrencyList = tradeStatisticsManager.getObservableTradeStatisticsSet().stream()
                .flatMap(e -> CurrencyUtil.getTradeCurrency(e.getCurrency()).stream())
                .collect(Collectors.toList());
        currencyListItems.updateWithCurrencies(tradeCurrencyList, showAllCurrencyListItem);
    }

    private void setMarketPriceFeedCurrency() {
        if (selectedTabIndex == TAB_INDEX) {
            if (showAllTradeCurrenciesProperty.get())
                priceFeedService.setCurrencyCode(GlobalSettings.getDefaultTradeCurrency().getCode());
            else
                priceFeedService.setCurrencyCode(getCurrencyCode());
        }
    }

    private void syncPriceFeedCurrency() {
        if (selectedTabIndex == TAB_INDEX)
            priceFeedService.setCurrencyCode(selectedTradeCurrencyProperty.get().getCode());
    }

    private boolean isShowAllEntry(@Nullable String id) {
        return id != null && id.equals(GUIUtil.SHOW_ALL_FLAG);
    }

    private boolean isEditEntry(@Nullable String id) {
        return id != null && id.equals(GUIUtil.EDIT_FLAG);
    }
}",1,587 2000 650 2001 123 809 657 704 2002 61 1503 59 773 809 657 704 2003 61 1502 59 331 330 331 777 640 2004 123 2005 44 2006 44 2007 44 2008 44 2009 44 2010 125 773 657 2011 2012 59 657 2013 2014 59 773 657 2015 2016 59 773 657 2017 2018 59 773 657 2019 60 2020 62 2021 59 657 2022 60 2023 62 2024 61 744 2025 60 62 40 41 59 657 2026 2027 61 744 2028 40 2029 41 59 773 657 2030 2031 59 773 657 2032 2033 61 744 2032 40 744 2034 40 2035 46 2036 44 362 41 44 45 1501 41 59 657 2037 60 2020 62 2038 61 2039 46 2040 40 41 59 657 2037 60 2041 46 2042 60 2043 44 2043 356 2044 61 2039 46 2040 40 41 59 657 2037 60 2041 46 2042 60 2043 44 2043 356 2045 61 2039 46 2040 40 41 59 657 2037 60 2041 46 2042 60 2043 44 2043 356 2046 61 2039 46 2040 40 41 59 773 657 2047 60 2048 44 2049 60 2050 44 2051 60 2020 359 2052 61 744 2053 60 62 40 41 59 2004 2054 59 773 704 2055 59 657 2047 60 2004 44 2047 60 2048 44 2048 356 2056 61 744 2053 60 62 40 41 59 773 570 2057 59 773 866 570 2058 59 331 330 331 64 2059 2000 40 2011 2012 44 2013 2014 44 2015 2016 44 2017 2018 41 123 823 46 2012 61 2012 59 823 46 2014 61 2014 59 823 46 2016 61 2016 59 823 46 2018 61 2018 59 2021 61 2060 45 62 123 2061 40 2062 40 41 41 46 2063 40 40 2064 44 2065 41 45 62 123 688 40 2058 41 123 792 59 125 688 40 2065 340 2066 41 123 2067 46 2068 40 362 44 2065 46 2069 40 41 41 59 792 59 125 2070 40 41 59 125 41 59 2071 40 41 59 125 59 2072 2073 61 2014 46 2074 40 41 59 2027 46 2075 40 2076 40 2073 41 41 59 2023 2077 61 2078 46 2079 40 2073 41 46 2080 40 2081 46 2082 40 41 41 59 2024 46 2075 40 2077 41 59 2054 61 2004 46 2083 40 41 91 2014 46 2084 40 41 93 59 2031 61 744 2030 40 823 46 2014 41 59 125 64 2085 775 865 2086 40 41 123 726 2087 61 2088 46 2089 40 41 59 2058 61 2029 59 2012 46 2090 40 41 46 2091 40 2021 41 59 688 40 33 2057 41 123 2092 40 41 59 2057 61 2093 59 125 2094 40 41 59 2095 40 41 59 2096 60 2097 60 2098 356 2099 61 744 2100 60 62 40 41 59 2097 60 2098 62 2101 61 744 2097 60 62 40 41 59 2099 46 2102 40 2101 41 59 2097 60 2098 62 2103 61 744 2097 60 62 40 41 59 2099 46 2102 40 2103 41 59 2104 46 2105 40 2099 41 46 2106 40 40 2107 44 2108 41 45 62 123 688 40 2058 41 123 792 59 125 688 40 2108 340 2109 41 123 2110 46 2111 40 2108 46 2112 40 41 41 59 792 59 125 330 330 2113 46 2114 40 823 58 58 2115 41 59 125 41 59 330 330 2116 40 2101 41 59 2117 40 2118 40 41 44 2103 41 59 2119 46 2120 40 362 44 2088 46 2089 40 41 45 2087 41 59 125 64 2085 775 865 2121 40 41 123 2058 61 2122 59 2012 46 2123 40 41 46 2124 40 2021 41 59 330 330 2125 46 2126 40 40 41 45 62 123 2056 46 2127 40 41 59 2038 46 2127 40 41 59 2044 46 2127 40 41 59 2045 46 2127 40 41 59 2046 46 2127 40 41 59 2052 46 2127 40 41 59 125 41 59 125 331 330 331 773 865 2128 40 2129 60 2130 62 2131 41 123 726 2132 61 2133 46 2134 40 41 59 2135 46 2136 40 2012 46 2137 40 41 41 46 2138 40 40 2056 44 2139 41 45 62 123 688 40 2058 41 123 792 59 125 688 40 2139 340 2140 41 123 2141 46 2142 40 362 44 2139 46 2143 40 41 41 59 2131 46 2144 40 2139 41 59 792 59 125 2145 46 2146 40 40 41 45 62 123 823 46 2056 46 2147 40 41 59 823 46 2056 46 2148 40 2056 41 59 2149 46 2150 40 362 44 2133 46 2134 40 41 45 2132 41 59 2131 46 2151 40 2152 41 59 125 41 59 125 41 59 125 773 2129 60 2130 62 2153 40 2154 2155 41 123 792 2153 40 2155 44 2156 41 59 125 773 2129 60 2130 62 2153 40 2154 2155 44 64 2157 2129 60 2130 62 2131 41 123 2129 60 2130 62 2158 61 744 2129 60 62 40 41 59 726 2159 61 2160 46 2161 40 41 59 2162 46 2163 40 2012 46 2164 40 41 44 2155 44 2027 46 2165 40 41 41 46 2166 40 40 2167 44 2168 41 45 62 123 688 40 2058 41 123 792 59 125 688 40 2168 340 2169 41 123 2170 46 2171 40 362 44 2168 46 2172 40 41 41 59 688 40 2131 340 2169 41 123 2131 46 2173 40 2168 41 59 125 792 59 125 2174 46 2175 40 40 41 45 62 123 2038 46 2176 40 2167 41 59 2177 46 2178 40 362 44 2160 46 2161 40 41 45 2159 41 59 688 40 2131 340 2169 41 123 2131 46 2179 40 2180 41 59 125 2158 46 2181 40 2182 41 59 125 41 59 125 41 59 792 2158 59 125 773 865 2183 40 41 123 726 2184 61 2185 46 2186 40 41 59 2187 46 2188 40 744 2189 60 62 40 2038 41 44 2054 44 2056 44 2190 40 41 41 46 2191 40 40 2192 44 2193 41 45 62 123 688 40 2058 41 123 792 59 125 688 40 2193 340 2194 41 123 2195 46 2196 40 362 44 2193 46 2197 40 41 41 59 792 59 125 2198 46 2199 40 40 41 45 62 123 2052 46 2200 40 41 59 2052 46 2201 40 2192 46 2202 40 41 41 59 2044 46 2203 40 2192 46 2204 40 41 41 59 2045 46 2203 40 2192 46 2205 40 41 41 59 2046 46 2203 40 2192 46 2206 40 41 41 59 2207 46 2208 40 362 44 2185 46 2186 40 41 45 2184 41 59 125 41 59 125 41 59 125 331 330 331 865 2209 40 2023 2210 41 123 688 40 2210 340 2211 41 123 2154 2212 61 2210 46 2213 40 41 59 688 40 2214 40 2212 41 41 123 2018 46 2215 40 2216 46 587 44 2217 46 587 44 2218 46 587 41 59 792 59 125 570 2219 61 2220 40 2212 41 59 2027 46 2221 40 2219 41 59 688 40 2219 41 123 2016 46 2222 40 2223 46 2224 40 41 46 2213 40 41 41 59 125 630 123 2024 46 2221 40 2210 41 59 2016 46 2225 40 2212 41 59 125 2014 46 2226 40 2212 41 59 2153 40 2227 40 41 41 46 2228 40 40 2229 44 2230 41 45 62 123 688 40 2058 41 123 792 59 125 688 40 2230 340 2211 41 123 2231 46 2232 40 362 44 2230 46 2233 40 41 41 59 792 59 125 2183 40 41 59 125 41 59 125 125 865 2234 40 2004 2054 41 123 823 46 2054 61 2054 59 2014 46 2235 40 2054 46 2236 40 41 41 59 2183 40 41 59 125 865 2237 40 704 2055 41 123 823 46 2055 61 2055 59 2238 40 41 59 2239 40 41 59 125 331 330 331 777 2154 2240 40 41 123 792 2024 46 2241 40 41 46 2242 40 41 59 125 777 2037 60 2032 62 2243 40 41 123 792 2031 46 2244 40 41 59 125 777 2245 60 2032 62 2246 40 41 123 792 2031 46 2247 40 41 46 2248 40 41 46 2249 40 2250 45 62 2250 46 2210 46 2251 40 2024 46 2252 40 41 41 41 46 2253 40 41 59 125 726 2254 40 726 2255 41 123 792 2256 46 2254 40 2255 44 2052 41 59 125 331 330 331 773 865 2257 40 41 123 330 2258 60 2023 62 2259 61 2012 46 2260 40 41 46 2261 40 41 46 2262 40 2263 45 62 2264 46 2265 40 2263 46 2266 40 41 41 46 2261 40 41 41 46 2267 40 2268 46 2269 40 41 41 59 2031 46 2270 40 2259 44 2033 41 59 125 773 865 2271 40 41 123 688 40 2055 323 2003 41 123 688 40 2027 46 2272 40 41 41 2016 46 2273 40 2274 46 2275 40 41 46 2276 40 41 41 59 630 2016 46 2273 40 2240 40 41 41 59 125 125 773 865 2277 40 41 123 688 40 2055 323 2003 41 2016 46 2278 40 2024 46 2279 40 41 46 2280 40 41 41 59 125 773 570 2281 40 64 2157 2154 2282 41 123 792 2282 340 2283 307 2282 46 2284 40 2035 46 2036 41 59 125 773 570 2285 40 64 2157 2154 2282 41 123 792 2282 340 2286 307 2282 46 2287 40 2035 46 2288 41 59 125 125 ,"{'AvgLine': 13, 'CountLine': 330, 'CountStmt': 177, 'MaxNesting': 2, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 144, 'MaxEssential': 3, 'SumEssential': 40, 'AvgCyclomatic': 1, 'CountLineCode': 255, 'CountStmtDecl': 55, 'MaxCyclomatic': 4, 'SumCyclomatic': 46, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 50, 'CountSemicolon': 135, 'CountDeclMethod': 19, 'CountLineCodeExe': 173, 'CountLineComment': 25, 'CountClassCoupled': 36, 'CountClassDerived': 0, 'CountLineCodeDecl': 68, 'CountDeclMethodAll': 23, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.10', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 48, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 88, 'SumCyclomaticModified': 46, 'CountDeclClassVariable': 2, 'CountDeclMethodDefault': 5, 'CountDeclMethodPrivate': 9, 'CountDeclInstanceMethod': 19, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 36, 'CountDeclInstanceVariable': 19, 'PercentLackOfCohesionModified': 83}"
27593,Java,"public class AdminLogin implements IAdminCommandHandler
{
	private static final String[] ADMIN_COMMANDS =
	{
		""admin_server_gm_only"",
		""admin_server_all"",
		""admin_server_max_player"",
		""admin_server_list_age"",
		""admin_server_login""
	};
	
	@Override
	public boolean useAdminCommand(String command, Player activeChar)
	{
		if (command.equals(""admin_server_gm_only""))
		{
			gmOnly();
			BuilderUtil.sendSysMessage(activeChar, ""Server is now GM only"");
			showMainPage(activeChar);
		}
		else if (command.equals(""admin_server_all""))
		{
			allowToAll();
			BuilderUtil.sendSysMessage(activeChar, ""Server is not GM only anymore"");
			showMainPage(activeChar);
		}
		else if (command.startsWith(""admin_server_max_player""))
		{
			final StringTokenizer st = new StringTokenizer(command);
			if (st.countTokens() > 1)
			{
				st.nextToken();
				final String number = st.nextToken();
				try
				{
					//TODO Implement AuthServerCommunication.getInstance().setMaxPlayer(Integer.parseInt(number));
					BuilderUtil.sendSysMessage(activeChar, ""maxPlayer set to "" + number);
					showMainPage(activeChar);
				}
				catch (NumberFormatException e)
				{
					BuilderUtil.sendSysMessage(activeChar, ""Max players must be a number."");
				}
			}
			else
			{
				BuilderUtil.sendSysMessage(activeChar, ""Format is server_max_player <max>"");
			}
		}
		else if (command.startsWith(""admin_server_list_age""))
		{
			final StringTokenizer st = new StringTokenizer(command);
			if (st.countTokens() > 1)
			{
				st.nextToken();
				final String mode = st.nextToken();
				int age;
				try
				{
					age = Integer.parseInt(mode);
					if (ServerSettings.ageLimit() != age)
					{
						ServerSettings.setAgeLimit((byte) age);
						// TODO Implement AuthServerCommunication.getInstance().sendServerStatus(ServerStatus.SERVER_AGE, age);
						BuilderUtil.sendSysMessage(activeChar, ""Server Age changed to "" + age);
						showMainPage(activeChar);
					}
					else
					{
						BuilderUtil.sendSysMessage(activeChar, ""Server Age is already "" + age);
						showMainPage(activeChar);
					}
				}
				catch (NumberFormatException e)
				{
					BuilderUtil.sendSysMessage(activeChar, ""Age must be a number"");
				}
			}
			else
			{
				BuilderUtil.sendSysMessage(activeChar, ""Format is server_list_age <number>"");
			}
		}
		else if (command.equals(""admin_server_login""))
		{
			showMainPage(activeChar);
		}
		return true;
	}

	private void showMainPage(Player activeChar)
	{
		final NpcHtmlMessage html = new NpcHtmlMessage(0, 1);
		html.setFile(activeChar, ""data/html/admin/login.htm"");
		// TODO Implement html.replace(""%server_name%"", AuthServerCommunication.getInstance().getServerName());
		// TODO Implment html.replace(""%status%"", AuthServerCommunication.getInstance().getStatusString());
		html.replace(""%type%"", getServerTypeName(ServerSettings.type()));
		html.replace(""%brackets%"", String.valueOf(ServerSettings.isShowingBrackets()));
		// TODO implement html.replace(""%max_players%"", String.valueOf(AuthServerCommunication.getInstance().getMaxPlayer()));
		activeChar.sendPacket(html);
	}
	
	private String getServerTypeName(int serverType) {
		return Arrays.stream(ServerType.values()).filter(type -> (serverType & type.getMask()) != 0).map(ServerType::toString).collect(Collectors.joining("", ""));
	}

	private void allowToAll() {
		NetworkService.getInstance().gmOnlyStatus(false);
	}

	private void gmOnly() {
		NetworkService.getInstance().gmOnlyStatus(true);
	}
	
	@Override
	public String[] getAdminCommandList()
	{
		return ADMIN_COMMANDS;
	}
}",1,777 587 2000 693 2001 123 773 809 657 2002 91 93 2003 61 123 362 44 362 44 362 44 362 44 362 125 59 64 2004 777 570 2005 40 2002 2006 44 2007 2008 41 123 688 40 2006 46 2009 40 362 41 41 123 2010 40 41 59 2011 46 2012 40 2008 44 362 41 59 2013 40 2008 41 59 125 630 688 40 2006 46 2009 40 362 41 41 123 2014 40 41 59 2015 46 2016 40 2008 44 362 41 59 2017 40 2008 41 59 125 630 688 40 2006 46 2018 40 362 41 41 123 657 2019 2020 61 744 2019 40 2006 41 59 688 40 2020 46 2021 40 41 62 1501 41 123 2020 46 2022 40 41 59 657 2002 2023 61 2020 46 2022 40 41 59 830 123 330 2024 46 2025 40 2008 44 362 43 2023 41 59 2026 40 2008 41 59 125 580 40 2027 2028 41 123 2029 46 2030 40 2008 44 362 41 59 125 125 630 123 2031 46 2032 40 2008 44 362 41 59 125 125 630 688 40 2006 46 2018 40 362 41 41 123 657 2033 2034 61 744 2033 40 2006 41 59 688 40 2034 46 2035 40 41 62 1501 41 123 2034 46 2036 40 41 59 657 2002 2037 61 2034 46 2036 40 41 59 704 2038 59 830 123 2038 61 2039 46 2040 40 2037 41 59 688 40 2041 46 2042 40 41 340 2038 41 123 2041 46 2043 40 40 574 41 2038 41 59 330 2044 46 2045 40 2008 44 362 43 2038 41 59 2046 40 2008 41 59 125 630 123 2047 46 2048 40 2008 44 362 43 2038 41 59 2049 40 2008 41 59 125 125 580 40 2050 2051 41 123 2052 46 2053 40 2008 44 362 41 59 125 125 630 123 2054 46 2055 40 2008 44 362 41 59 125 125 630 688 40 2006 46 2009 40 362 41 41 123 2056 40 2008 41 59 125 792 2057 59 125 773 865 2058 40 2007 2008 41 123 657 2059 2060 61 744 2059 40 1500 44 1501 41 59 2060 46 2061 40 2008 44 362 41 59 330 330 2060 46 2062 40 362 44 2063 40 2064 46 2065 40 41 41 41 59 2060 46 2062 40 362 44 2002 46 2066 40 2064 46 2067 40 41 41 41 59 330 2008 46 2068 40 2060 41 59 125 773 2002 2069 40 704 2070 41 123 792 2071 46 2072 40 2073 46 2074 40 41 41 46 2075 40 2076 45 62 40 2070 38 2076 46 2077 40 41 41 340 1500 41 46 2078 40 2073 58 58 2079 41 46 2080 40 2081 46 2082 40 362 41 41 59 125 773 865 2083 40 41 123 2084 46 2085 40 41 46 2086 40 2087 41 59 125 773 865 2088 40 41 123 2089 46 2090 40 41 46 2091 40 2092 41 59 125 64 2004 777 2002 91 93 2093 40 41 123 792 2003 59 125 125 ,"{'AvgLine': 17, 'CountLine': 124, 'CountStmt': 54, 'MaxNesting': 4, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 45, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 2, 'CountLineCode': 109, 'CountStmtDecl': 14, 'MaxCyclomatic': 11, 'SumCyclomatic': 17, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 6, 'CountSemicolon': 37, 'CountDeclMethod': 6, 'CountLineCodeExe': 55, 'CountLineComment': 9, 'CountClassCoupled': 13, 'CountClassDerived': 0, 'CountLineCodeDecl': 21, 'CountDeclMethodAll': 6, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.08', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 11, 'SumCyclomaticStrict': 17, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 11, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 13, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
3006,Java,"public abstract class TradeModel implements Tradable, Model {
    @Getter
    protected final String uid;
    protected final Offer offer;
    @Getter
    @Setter
    @Nullable
    protected NodeAddress tradingPeerNodeAddress;
    @Getter
    @Setter
    protected long takeOfferDate;
    @Nullable
    @Getter
    protected String errorMessage;
    transient final private StringProperty errorMessageProperty = new SimpleStringProperty();


    public TradeModel(String uid, Offer offer) {
        this(uid, offer, new Date().getTime(), null, null);
    }

    public TradeModel(String uid,
                      Offer offer,
                      long takeOfferDate,
                      @Nullable NodeAddress tradingPeerNodeAddress,
                      @Nullable String errorMessage) {
        this.uid = uid;
        this.offer = offer;
        this.tradingPeerNodeAddress = tradingPeerNodeAddress;
        this.takeOfferDate = takeOfferDate;
        setErrorMessage(errorMessage);
    }

    public void initialize(Provider serviceProvider) {
    }

    public abstract boolean isCompleted();

    public abstract ProtocolModel<? extends TradePeer> getTradeProtocolModel();

    public abstract TradeState getTradeState();

    public abstract TradePhase getTradePhase();

    public abstract long getAmountAsLong();

    public abstract Coin getAmount();

    @Nullable
    public abstract Volume getVolume();

    public abstract Price getPrice();

    public abstract Coin getTxFee();

    public abstract Coin getTakerFee();

    public abstract Coin getMakerFee();


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Tradable implementation
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public Offer getOffer() {
        return offer;
    }

    @Override
    public Date getDate() {
        return new Date(takeOfferDate);
    }

    @Override
    public String getId() {
        return offer.getId();
    }

    @Override
    public String getShortId() {
        return Utilities.getShortId(getId());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Setters
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        errorMessageProperty.set(errorMessage);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    public ReadOnlyStringProperty errorMessageProperty() {
        return errorMessageProperty;
    }
}",1,777 539 587 2000 693 2001 44 2002 123 64 2003 775 657 2004 2005 59 775 657 2006 2007 59 64 2003 64 2008 64 2009 775 2010 2011 59 64 2003 64 2008 775 726 2012 59 64 2009 64 2003 775 2004 2013 59 828 657 773 2014 2015 61 744 2016 40 41 59 777 2000 40 2004 2005 44 2006 2007 41 123 823 40 2005 44 2007 44 744 2017 40 41 46 2018 40 41 44 2019 44 2019 41 59 125 777 2000 40 2004 2005 44 2006 2007 44 726 2012 44 64 2009 2010 2011 44 64 2009 2004 2013 41 123 823 46 2005 61 2005 59 823 46 2007 61 2007 59 823 46 2011 61 2011 59 823 46 2012 61 2012 59 2020 40 2013 41 59 125 777 865 2021 40 2022 2023 41 123 125 777 539 570 2024 40 41 59 777 539 2025 60 63 650 2026 62 2027 40 41 59 777 539 2028 2029 40 41 59 777 539 2030 2031 40 41 59 777 539 726 2032 40 41 59 777 539 2033 2034 40 41 59 64 2009 777 539 2035 2036 40 41 59 777 539 2037 2038 40 41 59 777 539 2033 2039 40 41 59 777 539 2033 2040 40 41 59 777 539 2033 2041 40 41 59 331 330 331 64 2042 777 2006 2043 40 41 123 792 2007 59 125 64 2042 777 2044 2045 40 41 123 792 744 2044 40 2012 41 59 125 64 2042 777 2004 2046 40 41 123 792 2007 46 2046 40 41 59 125 64 2042 777 2004 2047 40 41 123 792 2048 46 2047 40 2046 40 41 41 59 125 331 330 331 777 865 2049 40 2004 2013 41 123 823 46 2013 61 2013 59 2015 46 2050 40 2013 41 59 125 331 330 331 777 2051 2015 40 41 123 792 2015 59 125 125 ,"{'AvgLine': 4, 'CountLine': 103, 'CountStmt': 40, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 14, 'MaxEssential': 1, 'SumEssential': 9, 'AvgCyclomatic': 1, 'CountLineCode': 67, 'CountStmtDecl': 27, 'MaxCyclomatic': 1, 'SumCyclomatic': 9, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 27, 'CountSemicolon': 30, 'CountDeclMethod': 20, 'CountLineCodeExe': 14, 'CountLineComment': 9, 'CountClassCoupled': 18, 'CountClassDerived': 2, 'CountLineCodeDecl': 44, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.13', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 20, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 9, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 20, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 18, 'CountDeclInstanceVariable': 6, 'PercentLackOfCohesionModified': 64}"
3014,Java,"@Slf4j
public class FilterManager {
    private static final String BANNED_PRICE_RELAY_NODES = ""bannedPriceRelayNodes"";
    private static final String BANNED_SEED_NODES = ""bannedSeedNodes"";
    private static final String BANNED_BTC_NODES = ""bannedBtcNodes"";

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Listener
    ///////////////////////////////////////////////////////////////////////////////////////////

    public interface Listener {
        void onFilterAdded(Filter filter);
    }

    private final P2PService p2PService;
    private final KeyRing keyRing;
    private final User user;
    private final Preferences preferences;
    private final ConfigFileEditor configFileEditor;
    private final ProvidersRepository providersRepository;
    private final boolean ignoreDevMsg;
    private final ObjectProperty<Filter> filterProperty = new SimpleObjectProperty<>();
    private final List<Listener> listeners = new CopyOnWriteArrayList<>();
    private final List<String> publicKeys;
    private ECKey filterSigningKey;
    private final Set<Filter> invalidFilters = new HashSet<>();
    private Consumer<String> filterWarningHandler;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    public FilterManager(P2PService p2PService,
                         KeyRing keyRing,
                         User user,
                         Preferences preferences,
                         Config config,
                         ProvidersRepository providersRepository,
                         NetworkFilter networkFilter,
                         @Named(Config.IGNORE_DEV_MSG) boolean ignoreDevMsg,
                         @Named(Config.USE_DEV_PRIVILEGE_KEYS) boolean useDevPrivilegeKeys) {
        this.p2PService = p2PService;
        this.keyRing = keyRing;
        this.user = user;
        this.preferences = preferences;
        this.configFileEditor = new ConfigFileEditor(config.configFile);
        this.providersRepository = providersRepository;
        this.ignoreDevMsg = ignoreDevMsg;

        publicKeys = useDevPrivilegeKeys ?
                Collections.singletonList(DevEnv.DEV_PRIVILEGE_PUB_KEY) :
                List.of(""0358d47858acdc41910325fce266571540681ef83a0d6fedce312bef9810793a27"",
                        ""029340c3e7d4bb0f9e651b5f590b434fecb6175aeaa57145c7804ff05d210e534f"",
                        ""034dc7530bf66ffd9580aa98031ea9a18ac2d269f7c56c0e71eca06105b9ed69f9"");

        networkFilter.setBannedNodePredicate(this::isNodeAddressBannedFromNetwork);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void onAllServicesInitialized() {
        if (ignoreDevMsg) {
            return;
        }

        p2PService.getP2PDataStorage().getMap().values().stream()
                .map(ProtectedStorageEntry::getProtectedStoragePayload)
                .filter(protectedStoragePayload -> protectedStoragePayload instanceof Filter)
                .map(protectedStoragePayload -> (Filter) protectedStoragePayload)
                .forEach(this::onFilterAddedFromNetwork);

        // On mainNet we expect to have received a filter object, if not show a popup to the user to inform the
        // Bisq devs.
        if (Config.baseCurrencyNetwork().isMainnet() && getFilter() == null) {
            filterWarningHandler.accept(Res.get(""popup.warning.noFilter""));
        }

        p2PService.addHashSetChangedListener(new HashMapChangedListener() {
            @Override
            public void onAdded(Collection<ProtectedStorageEntry> protectedStorageEntries) {
                protectedStorageEntries.stream()
                        .filter(protectedStorageEntry -> protectedStorageEntry.getProtectedStoragePayload() instanceof Filter)
                        .forEach(protectedStorageEntry -> {
                            Filter filter = (Filter) protectedStorageEntry.getProtectedStoragePayload();
                            onFilterAddedFromNetwork(filter);
                        });
            }

            @Override
            public void onRemoved(Collection<ProtectedStorageEntry> protectedStorageEntries) {
                protectedStorageEntries.stream()
                        .filter(protectedStorageEntry -> protectedStorageEntry.getProtectedStoragePayload() instanceof Filter)
                        .forEach(protectedStorageEntry -> {
                            Filter filter = (Filter) protectedStorageEntry.getProtectedStoragePayload();
                            onFilterRemovedFromNetwork(filter);
                        });
            }
        });

        p2PService.addP2PServiceListener(new P2PServiceListener() {
            @Override
            public void onDataReceived() {
            }

            @Override
            public void onNoSeedNodeAvailable() {
            }

            @Override
            public void onNoPeersAvailable() {
            }

            @Override
            public void onUpdatedDataReceived() {
                // We should have received all data at that point and if the filters were not set we
                // clean up the persisted banned nodes in the options file as it might be that we missed the filter
                // remove message if we have not been online.
                if (filterProperty.get() == null) {
                    clearBannedNodes();
                }
            }

            @Override
            public void onTorNodeReady() {
            }

            @Override
            public void onHiddenServicePublished() {
            }

            @Override
            public void onSetupFailed(Throwable throwable) {
            }

            @Override
            public void onRequestCustomBridges() {
            }
        });
    }

    public void setFilterWarningHandler(Consumer<String> filterWarningHandler) {
        this.filterWarningHandler = filterWarningHandler;

        addListener(filter -> {
            if (filter != null && filterWarningHandler != null) {
                if (filter.getSeedNodes() != null && !filter.getSeedNodes().isEmpty()) {
                    log.info(""One of the seed nodes got banned. {}"", filter.getSeedNodes());
                    // Let's keep that more silent. Might be used in case a node is unstable and we don't want to confuse users.
                    // filterWarningHandler.accept(Res.get(""popup.warning.nodeBanned"", Res.get(""popup.warning.seed"")));
                }

                if (filter.getPriceRelayNodes() != null && !filter.getPriceRelayNodes().isEmpty()) {
                    log.info(""One of the price relay nodes got banned. {}"", filter.getPriceRelayNodes());
                    // Let's keep that more silent. Might be used in case a node is unstable and we don't want to confuse users.
                    // filterWarningHandler.accept(Res.get(""popup.warning.nodeBanned"", Res.get(""popup.warning.priceRelay"")));
                }

                if (requireUpdateToNewVersionForTrading()) {
                    filterWarningHandler.accept(Res.get(""popup.warning.mandatoryUpdate.trading""));
                }

                if (requireUpdateToNewVersionForDAO()) {
                    filterWarningHandler.accept(Res.get(""popup.warning.mandatoryUpdate.dao""));
                }
                if (filter.isDisableDao()) {
                    filterWarningHandler.accept(Res.get(""popup.warning.disable.dao""));
                }
            }
        });
    }

    public boolean isPrivilegedDevPubKeyBanned(String pubKeyAsHex) {
        Filter filter = getFilter();
        if (filter == null) {
            return false;
        }

        return filter.getBannedPrivilegedDevPubKeys().contains(pubKeyAsHex);
    }

    public boolean canAddDevFilter(String privKeyString) {
        if (privKeyString == null || privKeyString.isEmpty()) {
            return false;
        }
        if (!isValidDevPrivilegeKey(privKeyString)) {
            log.warn(""Key in invalid"");
            return false;
        }

        ECKey ecKeyFromPrivate = toECKey(privKeyString);
        String pubKeyAsHex = getPubKeyAsHex(ecKeyFromPrivate);
        if (isPrivilegedDevPubKeyBanned(pubKeyAsHex)) {
            log.warn(""Pub key is banned."");
            return false;
        }
        return true;
    }

    public String getSignerPubKeyAsHex(String privKeyString) {
        ECKey ecKey = toECKey(privKeyString);
        return getPubKeyAsHex(ecKey);
    }

    public void addDevFilter(Filter filterWithoutSig, String privKeyString) {
        setFilterSigningKey(privKeyString);
        String signatureAsBase64 = getSignature(filterWithoutSig);
        Filter filterWithSig = Filter.cloneWithSig(filterWithoutSig, signatureAsBase64);
        user.setDevelopersFilter(filterWithSig);

        p2PService.addProtectedStorageEntry(filterWithSig);

        // Cleanup potential old filters created in the past with same priv key
        invalidFilters.forEach(filter -> {
            removeInvalidFilters(filter, privKeyString);
        });
    }

    public void addToInvalidFilters(Filter filter) {
        invalidFilters.add(filter);
    }

    public void removeInvalidFilters(Filter filter, String privKeyString) {
        // We can only remove the filter if it's our own filter
        if (Arrays.equals(filter.getOwnerPubKey().getEncoded(), keyRing.getSignatureKeyPair().getPublic().getEncoded())) {
            log.info(""Remove invalid filter {}"", filter);
            setFilterSigningKey(privKeyString);
            String signatureAsBase64 = getSignature(Filter.cloneWithoutSig(filter));
            Filter filterWithSig = Filter.cloneWithSig(filter, signatureAsBase64);
            boolean result = p2PService.removeData(filterWithSig);
            if (!result) {
                log.warn(""Could not remove filter {}"", filter);
            }
        } else {
            log.info(""The invalid filter is not our own, so we cannot remove it from the network"");
        }
    }

    public boolean canRemoveDevFilter(String privKeyString) {
        if (privKeyString == null || privKeyString.isEmpty()) {
            return false;
        }

        Filter developersFilter = getDevFilter();
        if (developersFilter == null) {
            log.warn(""There is no persisted dev filter to be removed."");
            return false;
        }

        if (!isValidDevPrivilegeKey(privKeyString)) {
            log.warn(""Key in invalid."");
            return false;
        }

        ECKey ecKeyFromPrivate = toECKey(privKeyString);
        String pubKeyAsHex = getPubKeyAsHex(ecKeyFromPrivate);
        if (!developersFilter.getSignerPubKeyAsHex().equals(pubKeyAsHex)) {
            log.warn(""pubKeyAsHex derived from private key does not match filterSignerPubKey. "" +
                            ""filterSignerPubKey={}, pubKeyAsHex derived from private key={}"",
                    developersFilter.getSignerPubKeyAsHex(), pubKeyAsHex);
            return false;
        }

        if (isPrivilegedDevPubKeyBanned(pubKeyAsHex)) {
            log.warn(""Pub key is banned."");
            return false;
        }

        return true;
    }

    public void removeDevFilter(String privKeyString) {
        setFilterSigningKey(privKeyString);
        Filter filterWithSig = user.getDevelopersFilter();
        if (filterWithSig == null) {
            // Should not happen as UI button is deactivated in that case
            return;
        }

        if (p2PService.removeData(filterWithSig)) {
            user.setDevelopersFilter(null);
        } else {
            log.warn(""Removing dev filter from network failed"");
        }
    }

    public void addListener(Listener listener) {
        listeners.add(listener);
    }

    public ObjectProperty<Filter> filterProperty() {
        return filterProperty;
    }

    @Nullable
    public Filter getFilter() {
        return filterProperty.get();
    }

    @Nullable
    public Filter getDevFilter() {
        return user.getDevelopersFilter();
    }

    public PublicKey getOwnerPubKey() {
        return keyRing.getSignatureKeyPair().getPublic();
    }

    public boolean isCurrencyBanned(String currencyCode) {
        return getFilter() != null &&
                getFilter().getBannedCurrencies() != null &&
                getFilter().getBannedCurrencies().stream()
                        .anyMatch(e -> e.equals(currencyCode));
    }

    public boolean isPaymentMethodBanned(PaymentMethod paymentMethod) {
        return getFilter() != null &&
                getFilter().getBannedPaymentMethods() != null &&
                getFilter().getBannedPaymentMethods().stream()
                        .anyMatch(e -> e.equals(paymentMethod.getId()));
    }

    public boolean isOfferIdBanned(String offerId) {
        return getFilter() != null &&
                getFilter().getBannedOfferIds().stream()
                        .anyMatch(e -> e.equals(offerId));
    }

    public boolean isNodeAddressBanned(NodeAddress nodeAddress) {
        return getFilter() != null &&
                getFilter().getNodeAddressesBannedFromTrading().stream()
                        .anyMatch(e -> e.equals(nodeAddress.getFullAddress()));
    }

    public boolean isNodeAddressBannedFromNetwork(NodeAddress nodeAddress) {
        return getFilter() != null &&
                getFilter().getNodeAddressesBannedFromNetwork().stream()
                        .anyMatch(e -> e.equals(nodeAddress.getFullAddress()));
    }

    public boolean isAutoConfExplorerBanned(String address) {
        return getFilter() != null &&
                getFilter().getBannedAutoConfExplorers().stream()
                        .anyMatch(e -> e.equals(address));
    }

    public boolean requireUpdateToNewVersionForTrading() {
        if (getFilter() == null) {
            return false;
        }

        boolean requireUpdateToNewVersion = false;
        String getDisableTradeBelowVersion = getFilter().getDisableTradeBelowVersion();
        if (getDisableTradeBelowVersion != null && !getDisableTradeBelowVersion.isEmpty()) {
            requireUpdateToNewVersion = Version.isNewVersion(getDisableTradeBelowVersion);
        }

        return requireUpdateToNewVersion;
    }

    public boolean requireUpdateToNewVersionForDAO() {
        if (getFilter() == null) {
            return false;
        }

        boolean requireUpdateToNewVersion = false;
        String disableDaoBelowVersion = getFilter().getDisableDaoBelowVersion();
        if (disableDaoBelowVersion != null && !disableDaoBelowVersion.isEmpty()) {
            requireUpdateToNewVersion = Version.isNewVersion(disableDaoBelowVersion);
        }

        return requireUpdateToNewVersion;
    }

    public boolean arePeersPaymentAccountDataBanned(PaymentAccountPayload paymentAccountPayload) {
        return getFilter() != null &&
                paymentAccountPayload != null &&
                getFilter().getBannedPaymentAccounts().stream()
                        .filter(paymentAccountFilter -> paymentAccountFilter.getPaymentMethodId().equals(
                                paymentAccountPayload.getPaymentMethodId()))
                        .anyMatch(paymentAccountFilter -> {
                            try {
                                Method method = paymentAccountPayload.getClass().getMethod(paymentAccountFilter.getGetMethodName());
                                // We invoke getter methods (no args), e.g. getHolderName
                                String valueFromInvoke = (String) method.invoke(paymentAccountPayload);
                                return valueFromInvoke.equalsIgnoreCase(paymentAccountFilter.getValue());
                            } catch (Throwable e) {
                                log.error(e.getMessage());
                                return false;
                            }
                        });
    }

    public boolean isWitnessSignerPubKeyBanned(String witnessSignerPubKeyAsHex) {
        return getFilter() != null &&
                getFilter().getBannedAccountWitnessSignerPubKeys() != null &&
                getFilter().getBannedAccountWitnessSignerPubKeys().stream()
                        .anyMatch(e -> e.equals(witnessSignerPubKeyAsHex));
    }

    public boolean isProofOfWorkValid(Offer offer) {
        Filter filter = getFilter();
        if (filter == null) {
            return true;
        }
        checkArgument(offer.getBsqSwapOfferPayload().isPresent(), ""Offer payload must be BsqSwapOfferPayload"");
        ProofOfWork pow = offer.getBsqSwapOfferPayload().get().getProofOfWork();
        var service = ProofOfWorkService.forVersion(pow.getVersion());
        return service.isPresent() && getEnabledPowVersions().contains(pow.getVersion()) &&
                service.get().verify(pow, offer.getId(), offer.getOwnerNodeAddress().toString(), filter.getPowDifficulty());
    }

    public List<Integer> getEnabledPowVersions() {
        Filter filter = getFilter();
        return filter != null && !filter.getEnabledPowVersions().isEmpty() ? filter.getEnabledPowVersions() : List.of(0);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Private
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void onFilterAddedFromNetwork(Filter newFilter) {
        Filter currentFilter = getFilter();

        if (!isFilterPublicKeyInList(newFilter)) {
            if (newFilter.getSignerPubKeyAsHex() != null && !newFilter.getSignerPubKeyAsHex().isEmpty()) {
                log.warn(""isFilterPublicKeyInList failed. Filter.getSignerPubKeyAsHex={}"", newFilter.getSignerPubKeyAsHex());
            } else {
                log.info(""isFilterPublicKeyInList failed. Filter.getSignerPubKeyAsHex not set (expected case for pre v1.3.9 filter)"");
            }
            return;
        }
        if (!isSignatureValid(newFilter)) {
            log.warn(""verifySignature failed. Filter={}"", newFilter);
            return;
        }

        if (currentFilter != null) {
            if (currentFilter.getCreationDate() > newFilter.getCreationDate()) {
                log.info(""We received a new filter from the network but the creation date is older than the "" +
                        ""filter we have already. We ignore the new filter."");

                addToInvalidFilters(newFilter);
                return;
            } else {
                log.info(""We received a new filter from the network and the creation date is newer than the "" +
                        ""filter we have already. We ignore the old filter."");
                addToInvalidFilters(currentFilter);
            }

            if (isPrivilegedDevPubKeyBanned(newFilter.getSignerPubKeyAsHex())) {
                log.warn(""Pub key of filter is banned. currentFilter={}, newFilter={}"", currentFilter, newFilter);
                return;
            }
        }

        // Our new filter is newer so we apply it.
        // We do not require strict guarantees here (e.g. clocks not synced) as only trusted developers have the key
        // for deploying filters and this is only in place to avoid unintended situations of multiple filters
        // from multiple devs or if same dev publishes new filter from different app without the persisted devFilter.
        filterProperty.set(newFilter);

        // Seed nodes are requested at startup before we get the filter so we only apply the banned
        // nodes at the next startup and don't update the list in the P2P network domain.
        // We persist it to the property file which is read before any other initialisation.
        saveBannedNodes(BANNED_SEED_NODES, newFilter.getSeedNodes());
        saveBannedNodes(BANNED_BTC_NODES, newFilter.getBtcNodes());

        // Banned price relay nodes we can apply at runtime
        List<String> priceRelayNodes = newFilter.getPriceRelayNodes();
        saveBannedNodes(BANNED_PRICE_RELAY_NODES, priceRelayNodes);

        //TODO should be moved to client with listening on onFilterAdded
        providersRepository.applyBannedNodes(priceRelayNodes);

        //TODO should be moved to client with listening on onFilterAdded
        if (newFilter.isPreventPublicBtcNetwork() &&
                preferences.getBitcoinNodesOptionOrdinal() == BtcNodes.BitcoinNodesOption.PUBLIC.ordinal()) {
            preferences.setBitcoinNodesOptionOrdinal(BtcNodes.BitcoinNodesOption.PROVIDED.ordinal());
        }

        listeners.forEach(e -> e.onFilterAdded(newFilter));
    }

    private void onFilterRemovedFromNetwork(Filter filter) {
        if (!isFilterPublicKeyInList(filter)) {
            log.warn(""isFilterPublicKeyInList failed. Filter={}"", filter);
            return;
        }
        if (!isSignatureValid(filter)) {
            log.warn(""verifySignature failed. Filter={}"", filter);
            return;
        }

        // We don't check for banned filter as we want to remove a banned filter anyway.

        if (filterProperty.get() != null && !filterProperty.get().equals(filter)) {
            return;
        }

        clearBannedNodes();

        if (filter.equals(user.getDevelopersFilter())) {
            user.setDevelopersFilter(null);
        }
        filterProperty.set(null);
    }

    // Clears options files from banned nodes
    private void clearBannedNodes() {
        saveBannedNodes(BANNED_BTC_NODES, null);
        saveBannedNodes(BANNED_SEED_NODES, null);
        saveBannedNodes(BANNED_PRICE_RELAY_NODES, null);

        if (providersRepository.getBannedNodes() != null) {
            providersRepository.applyBannedNodes(null);
        }
    }

    private void saveBannedNodes(String optionName, List<String> bannedNodes) {
        if (bannedNodes != null)
            configFileEditor.setOption(optionName, String.join("","", bannedNodes));
        else
            configFileEditor.clearOption(optionName);
    }

    private boolean isValidDevPrivilegeKey(String privKeyString) {
        try {
            ECKey filterSigningKey = toECKey(privKeyString);
            String pubKeyAsHex = getPubKeyAsHex(filterSigningKey);
            return isPublicKeyInList(pubKeyAsHex);
        } catch (Throwable t) {
            return false;
        }
    }

    private void setFilterSigningKey(String privKeyString) {
        this.filterSigningKey = toECKey(privKeyString);
    }

    private String getSignature(Filter filterWithoutSig) {
        Sha256Hash hash = getSha256Hash(filterWithoutSig);
        ECKey.ECDSASignature ecdsaSignature = filterSigningKey.sign(hash);
        byte[] encodeToDER = ecdsaSignature.encodeToDER();
        return new String(Base64.encode(encodeToDER), StandardCharsets.UTF_8);
    }

    private boolean isFilterPublicKeyInList(Filter filter) {
        String signerPubKeyAsHex = filter.getSignerPubKeyAsHex();
        if (!isPublicKeyInList(signerPubKeyAsHex)) {
            log.info(""Invalid filter (expected case for pre v1.3.9 filter as we still keep that in the network "" +
                            ""but the new version does not recognize it as valid filter): "" +
                            ""signerPubKeyAsHex from filter is not part of our pub key list. "" +
                            ""signerPubKeyAsHex={}, publicKeys={}, filterCreationDate={}"",
                    signerPubKeyAsHex, publicKeys, new Date(filter.getCreationDate()));
            return false;
        }
        return true;
    }

    private boolean isPublicKeyInList(String pubKeyAsHex) {
        boolean isPublicKeyInList = publicKeys.contains(pubKeyAsHex);
        if (!isPublicKeyInList) {
            log.info(""pubKeyAsHex is not part of our pub key list (expected case for pre v1.3.9 filter). pubKeyAsHex={}, publicKeys={}"", pubKeyAsHex, publicKeys);
        }
        return isPublicKeyInList;
    }

    private boolean isSignatureValid(Filter filter) {
        try {
            Filter filterForSigVerification = Filter.cloneWithoutSig(filter);
            Sha256Hash hash = getSha256Hash(filterForSigVerification);

            checkNotNull(filter.getSignatureAsBase64(), ""filter.getSignatureAsBase64() must not be null"");
            byte[] sigData = Base64.decode(filter.getSignatureAsBase64());
            ECKey.ECDSASignature ecdsaSignature = ECKey.ECDSASignature.decodeFromDER(sigData);

            String signerPubKeyAsHex = filter.getSignerPubKeyAsHex();
            byte[] decode = HEX.decode(signerPubKeyAsHex);
            ECKey ecPubKey = ECKey.fromPublicOnly(decode);
            return ecPubKey.verify(hash, ecdsaSignature);
        } catch (Throwable e) {
            log.warn(""verifySignature failed. filter={}"", filter);
            return false;
        }
    }

    private ECKey toECKey(String privKeyString) {
        return ECKey.fromPrivate(new BigInteger(1, HEX.decode(privKeyString)));
    }

    private Sha256Hash getSha256Hash(Filter filter) {
        byte[] filterData = filter.toProtoMessage().toByteArray();
        return Sha256Hash.of(filterData);
    }

    private String getPubKeyAsHex(ECKey ecKey) {
        return HEX.encode(ecKey.getPubKey());
    }
}",1,64 2000 777 587 2001 123 773 809 657 2002 2003 61 362 59 773 809 657 2002 2004 61 362 59 773 809 657 2002 2005 61 362 59 331 330 331 777 709 2006 123 865 2007 40 2008 2009 41 59 125 773 657 2010 2011 59 773 657 2012 2013 59 773 657 2014 2015 59 773 657 2016 2017 59 773 657 2018 2019 59 773 657 2020 2021 59 773 657 570 2022 59 773 657 2023 60 2024 62 2025 61 744 2026 60 62 40 41 59 773 657 2027 60 2006 62 2028 61 744 2029 60 62 40 41 59 773 657 2027 60 2002 62 2030 59 773 2031 2032 59 773 657 2033 60 2024 62 2034 61 744 2035 60 62 40 41 59 773 2036 60 2002 62 2037 59 331 330 331 64 2038 777 2001 40 2010 2011 44 2012 2013 44 2014 2015 44 2016 2017 44 2039 2040 44 2020 2021 44 2041 2042 44 64 2043 40 2039 46 2044 41 570 2022 44 64 2043 40 2039 46 2045 41 570 2046 41 123 823 46 2011 61 2011 59 823 46 2013 61 2013 59 823 46 2015 61 2015 59 823 46 2017 61 2017 59 823 46 2019 61 744 2018 40 2040 46 2047 41 59 823 46 2021 61 2021 59 823 46 2022 61 2022 59 2030 61 2046 63 2048 46 2049 40 2050 46 2051 41 58 2027 46 2052 40 362 44 362 44 362 41 59 2042 46 2053 40 823 58 58 2054 41 59 125 331 330 331 777 865 2055 40 41 123 688 40 2022 41 123 792 59 125 2011 46 2056 40 41 46 2057 40 41 46 2058 40 41 46 2059 40 41 46 2060 40 2061 58 58 2062 41 46 2063 40 2064 45 62 2064 702 2024 41 46 2060 40 2064 45 62 40 2024 41 2064 41 46 2065 40 823 58 58 2066 41 59 330 330 688 40 2039 46 2067 40 41 46 2068 40 41 307 2069 40 41 323 2070 41 123 2037 46 2071 40 2072 46 2073 40 362 41 41 59 125 2011 46 2074 40 744 2075 40 41 123 64 2076 777 865 2077 40 2078 60 2061 62 2079 41 123 2079 46 2059 40 41 46 2063 40 2080 45 62 2080 46 2062 40 41 702 2024 41 46 2065 40 2080 45 62 123 2024 2063 61 40 2024 41 2080 46 2062 40 41 59 2066 40 2063 41 59 125 41 59 125 64 2076 777 865 2081 40 2078 60 2061 62 2079 41 123 2079 46 2059 40 41 46 2063 40 2082 45 62 2082 46 2062 40 41 702 2024 41 46 2065 40 2082 45 62 123 2024 2063 61 40 2024 41 2082 46 2062 40 41 59 2083 40 2063 41 59 125 41 59 125 125 41 59 2011 46 2084 40 744 2085 40 41 123 64 2086 777 865 2087 40 41 123 125 64 2086 777 865 2088 40 41 123 125 64 2086 777 865 2089 40 41 123 125 64 2086 777 865 2090 40 41 123 330 330 330 688 40 2025 46 2091 40 41 323 2070 41 123 2092 40 41 59 125 125 64 2086 777 865 2093 40 41 123 125 64 2086 777 865 2094 40 41 123 125 64 2086 777 865 2095 40 2096 2097 41 123 125 64 2086 777 865 2098 40 41 123 125 125 41 59 125 777 865 2099 40 2036 60 2002 62 2037 41 123 823 46 2037 61 2037 59 2100 40 2101 45 62 123 688 40 2101 340 2102 307 2037 340 2102 41 123 688 40 2101 46 2103 40 41 340 2102 307 33 2101 46 2103 40 41 46 2104 40 41 41 123 2105 46 2106 40 362 44 2101 46 2103 40 41 41 59 330 330 125 688 40 2101 46 2107 40 41 340 2102 307 33 2101 46 2107 40 41 46 2104 40 41 41 123 2108 46 2109 40 362 44 2101 46 2107 40 41 41 59 330 330 125 688 40 2110 40 41 41 123 2037 46 2111 40 2112 46 2113 40 362 41 41 59 125 688 40 2114 40 41 41 123 2037 46 2115 40 2116 46 2117 40 362 41 41 59 125 688 40 2101 46 2118 40 41 41 123 2037 46 2119 40 2120 46 2121 40 362 41 41 59 125 125 125 41 59 125 777 570 2122 40 2002 2123 41 123 2024 2124 61 2125 40 41 59 688 40 2124 323 2126 41 123 792 2127 59 125 792 2124 46 2128 40 41 46 2129 40 2123 41 59 125 777 570 2130 40 2002 2131 41 123 688 40 2131 323 2132 309 2131 46 2133 40 41 41 123 792 2134 59 125 688 40 33 2135 40 2131 41 41 123 2136 46 2137 40 362 41 59 792 2138 59 125 2031 2139 61 2140 40 2131 41 59 2002 2123 61 2141 40 2139 41 59 688 40 2122 40 2123 41 41 123 2142 46 2143 40 362 41 59 792 2144 59 125 792 2145 59 125 777 2002 2146 40 2002 2131 41 123 2031 2147 61 2148 40 2131 41 59 792 2149 40 2147 41 59 125 777 865 2150 40 2024 2151 44 2002 2131 41 123 2152 40 2131 41 59 2002 2153 61 2154 40 2151 41 59 2024 2155 61 2024 46 2156 40 2151 44 2153 41 59 2015 46 2157 40 2155 41 59 2011 46 2158 40 2155 41 59 330 2034 46 2159 40 2160 45 62 123 2161 40 2160 44 2131 41 59 125 41 59 125 777 865 2162 40 2024 2163 41 123 2034 46 2164 40 2163 41 59 125 777 865 2165 40 2024 2163 44 2002 2131 41 123 330 688 40 2166 46 2167 40 2163 46 2168 40 41 46 2169 40 41 44 2013 46 2170 40 41 46 2171 40 41 46 2169 40 41 41 41 123 2172 46 2173 40 362 44 2163 41 59 2174 40 2131 41 59 2002 2175 61 2176 40 2024 46 2177 40 2163 41 41 59 2024 2178 61 2024 46 2179 40 2163 44 2175 41 59 570 2180 61 2011 46 2181 40 2178 41 59 688 40 33 2180 41 123 2172 46 2182 40 362 44 2163 41 59 125 125 630 123 2183 46 2184 40 362 41 59 125 125 777 570 2185 40 2002 2131 41 123 688 40 2131 323 2186 309 2131 46 2187 40 41 41 123 792 2188 59 125 2024 2189 61 2190 40 41 59 688 40 2189 323 2186 41 123 2191 46 2192 40 362 41 59 792 2193 59 125 688 40 33 2194 40 2131 41 41 123 2195 46 2196 40 362 41 59 792 2197 59 125 2031 2198 61 2199 40 2131 41 59 2002 2123 61 2200 40 2198 41 59 688 40 33 2189 46 2146 40 41 46 2201 40 2123 41 41 123 2202 46 2203 40 362 43 362 44 2189 46 2146 40 41 44 2123 41 59 792 2204 59 125 688 40 2122 40 2123 41 41 123 2205 46 2206 40 362 41 59 792 2207 59 125 792 2208 59 125 777 865 2209 40 2002 2131 41 123 2210 40 2131 41 59 2024 2211 61 2015 46 2212 40 41 59 688 40 2211 323 2213 41 123 330 792 59 125 688 40 2011 46 2214 40 2211 41 41 123 2015 46 2215 40 2213 41 59 125 630 123 2216 46 2217 40 362 41 59 125 125 777 865 2218 40 2006 2219 41 123 2028 46 2220 40 2219 41 59 125 777 2023 60 2024 62 2025 40 41 123 792 2025 59 125 64 2221 777 2024 2222 40 41 123 792 2025 46 2223 40 41 59 125 64 2221 777 2024 2224 40 41 123 792 2015 46 2225 40 41 59 125 777 2226 2227 40 41 123 792 2013 46 2228 40 41 46 2229 40 41 59 125 777 570 2230 40 2002 2231 41 123 792 2222 40 41 340 2232 307 2222 40 41 46 2233 40 41 340 2232 307 2222 40 41 46 2233 40 41 46 2234 40 41 46 2235 40 2236 45 62 2236 46 2237 40 2231 41 41 59 125 777 570 2238 40 2239 2240 41 123 792 2222 40 41 340 2241 307 2222 40 41 46 2242 40 41 340 2241 307 2222 40 41 46 2242 40 41 46 2243 40 41 46 2244 40 2245 45 62 2245 46 2246 40 2240 46 2247 40 41 41 41 59 125 777 570 2248 40 2002 2249 41 123 792 2222 40 41 340 2250 307 2222 40 41 46 2251 40 41 46 2252 40 41 46 2253 40 2254 45 62 2254 46 2255 40 2249 41 41 59 125 777 570 2256 40 2257 2258 41 123 792 2222 40 41 340 2259 307 2222 40 41 46 2260 40 41 46 2261 40 41 46 2262 40 2263 45 62 2263 46 2264 40 2258 46 2265 40 41 41 41 59 125 777 570 2266 40 2257 2258 41 123 792 2222 40 41 340 2267 307 2222 40 41 46 2268 40 41 46 2269 40 41 46 2270 40 2271 45 62 2271 46 2272 40 2258 46 2273 40 41 41 41 59 125 777 570 2274 40 2002 2275 41 123 792 2222 40 41 340 2276 307 2222 40 41 46 2277 40 41 46 2278 40 41 46 2279 40 2280 45 62 2280 46 2281 40 2275 41 41 59 125 777 570 2282 40 41 123 688 40 2222 40 41 323 2283 41 123 792 2284 59 125 570 2285 61 2286 59 2002 2287 61 2222 40 41 46 2287 40 41 59 688 40 2287 340 2283 307 33 2287 46 2288 40 41 41 123 2285 61 2289 46 2290 40 2287 41 59 125 792 2285 59 125 777 570 2291 40 41 123 688 40 2222 40 41 323 2292 41 123 792 2293 59 125 570 2294 61 2295 59 2002 2296 61 2222 40 41 46 2297 40 41 59 688 40 2296 340 2292 307 33 2296 46 2298 40 41 41 123 2294 61 2299 46 2300 40 2296 41 59 125 792 2294 59 125 777 570 2301 40 2302 2303 41 123 792 2222 40 41 340 2304 307 2303 340 2304 307 2222 40 41 46 2305 40 41 46 2306 40 41 46 2163 40 2307 45 62 2307 46 2308 40 41 46 2309 40 2303 46 2308 40 41 41 41 46 2310 40 2307 45 62 123 830 123 2311 2312 61 2303 46 2313 40 41 46 2314 40 2307 46 2315 40 41 41 59 330 2002 2316 61 40 2002 41 2312 46 2317 40 2303 41 59 792 2316 46 2318 40 2307 46 2319 40 41 41 59 125 580 40 2320 2321 41 123 2322 46 2323 40 2321 46 2324 40 41 41 59 792 2325 59 125 125 41 59 125 777 570 2326 40 2002 2327 41 123 792 2222 40 41 340 2328 307 2222 40 41 46 2329 40 41 340 2328 307 2222 40 41 46 2329 40 41 46 2330 40 41 46 2331 40 2332 45 62 2332 46 2333 40 2327 41 41 59 125 777 570 2334 40 2335 2336 41 123 2024 2163 61 2222 40 41 59 688 40 2163 323 2337 41 123 792 2338 59 125 2339 40 2336 46 2340 40 41 46 2341 40 41 44 362 41 59 2342 2343 61 2336 46 2340 40 41 46 2344 40 41 46 2345 40 41 59 2346 2347 61 2348 46 2349 40 2343 46 2350 40 41 41 59 792 2347 46 2341 40 41 307 2351 40 41 46 2352 40 2343 46 2350 40 41 41 307 2347 46 2344 40 41 46 2353 40 2343 44 2336 46 2354 40 41 44 2336 46 2355 40 41 46 2356 40 41 44 2163 46 2357 40 41 41 59 125 777 2027 60 2358 62 2359 40 41 123 2024 2163 61 2222 40 41 59 792 2163 340 2360 307 33 2163 46 2359 40 41 46 2361 40 41 63 2163 46 2359 40 41 58 2027 46 2362 40 1500 41 59 125 331 330 331 773 865 2363 40 2024 2364 41 123 2024 2365 61 2222 40 41 59 688 40 33 2366 40 2364 41 41 123 688 40 2364 46 2146 40 41 340 2367 307 33 2364 46 2146 40 41 46 2368 40 41 41 123 2369 46 2370 40 362 44 2364 46 2146 40 41 41 59 125 630 123 2371 46 2372 40 362 41 59 125 792 59 125 688 40 33 2373 40 2364 41 41 123 2374 46 2375 40 362 44 2364 41 59 792 59 125 688 40 2365 340 2376 41 123 688 40 2365 46 2377 40 41 62 2364 46 2377 40 41 41 123 2378 46 2379 40 362 43 362 41 59 2162 40 2364 41 59 792 59 125 630 123 2380 46 2381 40 362 43 362 41 59 2162 40 2365 41 59 125 688 40 2122 40 2364 46 2146 40 41 41 41 123 2382 46 2383 40 362 44 2365 44 2364 41 59 792 59 125 125 330 330 330 330 2025 46 2384 40 2364 41 59 330 330 330 2385 40 2004 44 2364 46 2386 40 41 41 59 2385 40 2005 44 2364 46 2387 40 41 41 59 330 2027 60 2002 62 2388 61 2364 46 2389 40 41 59 2385 40 2003 44 2388 41 59 330 2021 46 2390 40 2388 41 59 330 688 40 2364 46 2391 40 41 307 2017 46 2392 40 41 323 2393 46 2394 46 2395 46 2396 40 41 41 123 2017 46 2397 40 2393 46 2394 46 2398 46 2396 40 41 41 59 125 2028 46 2399 40 2400 45 62 2400 46 2401 40 2364 41 41 59 125 773 865 2402 40 2024 2163 41 123 688 40 33 2403 40 2163 41 41 123 2404 46 2405 40 362 44 2163 41 59 792 59 125 688 40 33 2406 40 2163 41 41 123 2407 46 2408 40 362 44 2163 41 59 792 59 125 330 688 40 2025 46 2409 40 41 340 2410 307 33 2025 46 2409 40 41 46 2411 40 2163 41 41 123 792 59 125 2412 40 41 59 688 40 2163 46 2411 40 2015 46 2413 40 41 41 41 123 2015 46 2414 40 2410 41 59 125 2025 46 2415 40 2410 41 59 125 330 773 865 2416 40 41 123 2417 40 2005 44 2418 41 59 2417 40 2004 44 2418 41 59 2417 40 2003 44 2418 41 59 688 40 2021 46 2419 40 41 340 2418 41 123 2021 46 2420 40 2418 41 59 125 125 773 865 2421 40 2002 2422 44 2027 60 2002 62 2423 41 123 688 40 2423 340 2424 41 2019 46 2425 40 2422 44 2002 46 2426 40 362 44 2423 41 41 59 630 2019 46 2427 40 2422 41 59 125 773 570 2428 40 2002 2131 41 123 830 123 2031 2032 61 2429 40 2131 41 59 2002 2123 61 2430 40 2032 41 59 792 2431 40 2123 41 59 125 580 40 2432 2433 41 123 792 2434 59 125 125 773 865 2435 40 2002 2131 41 123 823 46 2032 61 2436 40 2131 41 59 125 773 2002 2437 40 2024 2151 41 123 2438 2439 61 2440 40 2151 41 59 2031 46 2441 2442 61 2032 46 2443 40 2439 41 59 574 91 93 2444 61 2442 46 2444 40 41 59 792 744 2002 40 2445 46 2446 40 2444 41 44 2447 46 2448 41 59 125 773 570 2449 40 2024 2163 41 123 2002 2450 61 2163 46 2146 40 41 59 688 40 33 2451 40 2450 41 41 123 2452 46 2453 40 362 43 362 43 362 43 362 44 2450 44 2030 44 744 2454 40 2163 46 2455 40 41 41 41 59 792 2456 59 125 792 2457 59 125 773 570 2458 40 2002 2123 41 123 570 2458 61 2030 46 2459 40 2123 41 59 688 40 33 2458 41 123 2460 46 2461 40 362 44 2123 44 2030 41 59 125 792 2458 59 125 773 570 2462 40 2024 2163 41 123 830 123 2024 2463 61 2024 46 2464 40 2163 41 59 2465 2466 61 2467 40 2463 41 59 2468 40 2163 46 2469 40 41 44 362 41 59 574 91 93 2470 61 2471 46 2472 40 2163 46 2469 40 41 41 59 2031 46 2473 2474 61 2031 46 2473 46 2475 40 2470 41 59 2002 2476 61 2163 46 2146 40 41 59 574 91 93 2472 61 2477 46 2472 40 2476 41 59 2031 2478 61 2031 46 2479 40 2472 41 59 792 2478 46 2480 40 2466 44 2474 41 59 125 580 40 2481 2482 41 123 2483 46 2484 40 362 44 2163 41 59 792 2485 59 125 125 773 2031 2486 40 2002 2131 41 123 792 2031 46 2487 40 744 2488 40 1501 44 2489 46 2490 40 2131 41 41 41 59 125 773 2491 2492 40 2024 2163 41 123 574 91 93 2493 61 2163 46 2494 40 41 46 2495 40 41 59 792 2491 46 2496 40 2493 41 59 125 773 2002 2497 40 2031 2498 41 123 792 2499 46 2500 40 2498 46 2501 40 41 41 59 125 125 ,"{'AvgLine': 12, 'CountLine': 608, 'CountStmt': 291, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 222, 'MaxEssential': 6, 'SumEssential': 71, 'AvgCyclomatic': 1, 'CountLineCode': 469, 'CountStmtDecl': 112, 'MaxCyclomatic': 8, 'SumCyclomatic': 101, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 99, 'CountSemicolon': 193, 'CountDeclMethod': 41, 'CountLineCodeExe': 306, 'CountLineComment': 40, 'CountClassCoupled': 47, 'CountClassDerived': 0, 'CountLineCodeDecl': 114, 'CountDeclMethodAll': 41, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 127, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 28, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 101, 'CountDeclClassVariable': 3, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 13, 'CountDeclInstanceMethod': 41, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 47, 'CountDeclInstanceVariable': 13, 'PercentLackOfCohesionModified': 85}"
3081,Java,"@Slf4j
public abstract class TradeProtocol implements DecryptedDirectMessageListener, DecryptedMailboxListener {

    @Getter
    protected final ProtocolModel<? extends TradePeer> protocolModel;
    protected final TradeModel tradeModel;
    private Timer timeoutTimer;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    public TradeProtocol(TradeModel tradeModel) {
        this.tradeModel = tradeModel;
        this.protocolModel = tradeModel.getTradeProtocolModel();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void initialize(Provider serviceProvider, TradeManager tradeManager, Offer offer) {
        protocolModel.applyTransient(serviceProvider, tradeManager, offer);
        onInitialized();
    }

    protected void onInitialized() {
        if (!tradeModel.isCompleted()) {
            protocolModel.getP2PService().addDecryptedDirectMessageListener(this);
        }

        MailboxMessageService mailboxMessageService = protocolModel.getP2PService().getMailboxMessageService();
        // We delay a bit here as the tradeModel gets updated from the wallet to update the tradeModel
        // state (deposit confirmed) and that happens after our method is called.
        // TODO To fix that in a better way we would need to change the order of some routines
        // from the TradeManager, but as we are close to a release I dont want to risk a bigger
        // change and leave that for a later PR
        UserThread.runAfter(() -> {
            mailboxMessageService.addDecryptedMailboxListener(this);
            handleMailboxCollection(mailboxMessageService.getMyDecryptedMailboxMessages());
        }, 100, TimeUnit.MILLISECONDS);
    }

    public void onWithdrawCompleted() {
        cleanup();
    }

    protected void onMailboxMessage(TradeMessage message, NodeAddress peerNodeAddress) {
        log.info(""Received {} as MailboxMessage from {} with tradeId {} and uid {}"",
                message.getClass().getSimpleName(), peerNodeAddress, message.getTradeId(), message.getUid());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // DecryptedDirectMessageListener
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void onDirectMessage(DecryptedMessageWithPubKey decryptedMessageWithPubKey, NodeAddress peer) {
        NetworkEnvelope networkEnvelope = decryptedMessageWithPubKey.getNetworkEnvelope();
        if (!isMyMessage(networkEnvelope)) {
            return;
        }

        if (!isPubKeyValid(decryptedMessageWithPubKey)) {
            return;
        }

        if (networkEnvelope instanceof TradeMessage) {
            onTradeMessage((TradeMessage) networkEnvelope, peer);
        } else if (networkEnvelope instanceof AckMessage) {
            onAckMessage((AckMessage) networkEnvelope, peer);
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // DecryptedMailboxListener
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void onMailboxMessageAdded(DecryptedMessageWithPubKey decryptedMessageWithPubKey, NodeAddress peer) {
        handleMailboxCollection(Collections.singletonList(decryptedMessageWithPubKey));
    }

    private void handleMailboxCollection(Collection<DecryptedMessageWithPubKey> collection) {
        collection.stream()
                .filter(this::isPubKeyValid)
                .map(DecryptedMessageWithPubKey::getNetworkEnvelope)
                .filter(this::isMyMessage)
                .filter(e -> e instanceof MailboxMessage)
                .map(e -> (MailboxMessage) e)
                .forEach(this::handleMailboxMessage);
    }

    private void handleMailboxMessage(MailboxMessage mailboxMessage) {
        ProtocolModel<? extends TradePeer> protocolModel = tradeModel.getTradeProtocolModel();
        if (mailboxMessage instanceof TradeMessage) {
            TradeMessage tradeMessage = (TradeMessage) mailboxMessage;
            // We only remove here if we have already completed the tradeModel.
            // Otherwise removal is done after successfully applied the task runner.
            if (tradeModel.isCompleted()) {
                protocolModel.getP2PService().getMailboxMessageService().removeMailboxMsg(mailboxMessage);
                log.info(""Remove {} from the P2P network as tradeModel is already completed."",
                        tradeMessage.getClass().getSimpleName());
                return;
            }
            onMailboxMessage(tradeMessage, mailboxMessage.getSenderNodeAddress());
        } else if (mailboxMessage instanceof AckMessage) {
            AckMessage ackMessage = (AckMessage) mailboxMessage;
            if (!tradeModel.isCompleted()) {
                // We only apply the msg if we have not already completed the tradeModel
                onAckMessage(ackMessage, mailboxMessage.getSenderNodeAddress());
            }
            // In any case we remove the msg
            protocolModel.getP2PService().getMailboxMessageService().removeMailboxMsg(ackMessage);
            log.info(""Remove {} from the P2P network."", ackMessage.getClass().getSimpleName());
        }
    }

    public void removeMailboxMessageAfterProcessing(TradeMessage tradeMessage) {
        if (tradeMessage instanceof MailboxMessage) {
            protocolModel.getP2PService().getMailboxMessageService().removeMailboxMsg((MailboxMessage) tradeMessage);
            log.info(""Remove {} from the P2P network."", tradeMessage.getClass().getSimpleName());
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Abstract
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected abstract void onTradeMessage(TradeMessage message, NodeAddress peer);


    ///////////////////////////////////////////////////////////////////////////////////////////
    // FluentProtocol
    ///////////////////////////////////////////////////////////////////////////////////////////

    // We log an error if condition is not met and call the protocol error handler
    protected FluentProtocol expect(FluentProtocol.Condition condition) {
        return new FluentProtocol(this)
                .condition(condition)
                .resultHandler(result -> {
                    if (!result.isValid()) {
                        log.warn(result.getInfo());
                        handleTaskRunnerFault(null,
                                result.name(),
                                result.getInfo());
                    }
                });
    }

    // We execute only if condition is met but do not log an error.
    protected FluentProtocol given(FluentProtocol.Condition condition) {
        return new FluentProtocol(this)
                .condition(condition);
    }

    protected FluentProtocol.Condition phase(Trade.Phase expectedPhase) {
        return new FluentProtocol.Condition(tradeModel).phase(expectedPhase);
    }

    protected FluentProtocol.Condition anyPhase(Trade.Phase... expectedPhases) {
        return new FluentProtocol.Condition(tradeModel).anyPhase(expectedPhases);
    }

    protected FluentProtocol.Condition preCondition(boolean preCondition) {
        return new FluentProtocol.Condition(tradeModel).preCondition(preCondition);
    }

    @SafeVarargs
    public final FluentProtocol.Setup tasks(Class<? extends Task<TradeModel>>... tasks) {
        return new FluentProtocol.Setup(this, tradeModel).tasks(tasks);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // ACK msg
    ///////////////////////////////////////////////////////////////////////////////////////////

    abstract protected void onAckMessage(AckMessage ackMessage, NodeAddress peer);

    protected void sendAckMessage(TradeMessage message, boolean result, @Nullable String errorMessage) {
        PubKeyRing peersPubKeyRing = protocolModel.getTradePeer().getPubKeyRing();
        if (peersPubKeyRing == null) {
            log.error(""We cannot send the ACK message as peersPubKeyRing is null"");
            return;
        }

        String tradeId = message.getTradeId();
        String sourceUid = message.getUid();
        AckMessage ackMessage = new AckMessage(protocolModel.getMyNodeAddress(),
                AckMessageSourceType.TRADE_MESSAGE,
                message.getClass().getSimpleName(),
                sourceUid,
                tradeId,
                result,
                errorMessage);
        // If there was an error during offer verification, the tradingPeerNodeAddress of the tradeModel might not be set yet.
        // We can find the peer's node address in the protocolModel's tempTradingPeerNodeAddress in that case.
        NodeAddress peer = tradeModel.getTradingPeerNodeAddress() != null ?
                tradeModel.getTradingPeerNodeAddress() :
                protocolModel.getTempTradingPeerNodeAddress();
        log.info(""Send AckMessage for {} to peer {}. tradeId={}, sourceUid={}"",
                ackMessage.getSourceMsgClassName(), peer, tradeId, sourceUid);
        protocolModel.getP2PService().getMailboxMessageService().sendEncryptedMailboxMessage(
                peer,
                peersPubKeyRing,
                ackMessage,
                new SendMailboxMessageListener() {
                    @Override
                    public void onArrived() {
                        log.info(""AckMessage for {} arrived at peer {}. tradeId={}, sourceUid={}"",
                                ackMessage.getSourceMsgClassName(), peer, tradeId, sourceUid);
                    }

                    @Override
                    public void onStoredInMailbox() {
                        log.info(""AckMessage for {} stored in mailbox for peer {}. tradeId={}, sourceUid={}"",
                                ackMessage.getSourceMsgClassName(), peer, tradeId, sourceUid);
                    }

                    @Override
                    public void onFault(String errorMessage) {
                        log.error(""AckMessage for {} failed. Peer {}. tradeId={}, sourceUid={}, errorMessage={}"",
                                ackMessage.getSourceMsgClassName(), peer, tradeId, sourceUid, errorMessage);
                    }
                }
        );
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Timeout
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected void startTimeout(long timeoutSec) {
        stopTimeout();

        timeoutTimer = UserThread.runAfter(() -> {
            log.error(""Timeout reached. TradeID={}, state={}, timeoutSec={}"",
                    tradeModel.getId(), tradeModel.getTradeState(), timeoutSec);
            tradeModel.setErrorMessage(""Timeout reached. Protocol did not complete in "" + timeoutSec + "" sec."");

            protocolModel.getTradeManager().requestPersistence();
            cleanup();
        }, timeoutSec);
    }

    protected void stopTimeout() {
        if (timeoutTimer != null) {
            timeoutTimer.stop();
            timeoutTimer = null;
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Task runner
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected void handleTaskRunnerSuccess(TradeMessage message) {
        handleTaskRunnerSuccess(message, message.getClass().getSimpleName());
    }

    protected void handleTaskRunnerSuccess(FluentProtocol.Event event) {
        handleTaskRunnerSuccess(null, event.name());
    }

    protected void handleTaskRunnerFault(TradeMessage message, String errorMessage) {
        handleTaskRunnerFault(message, message.getClass().getSimpleName(), errorMessage);
    }

    protected void handleTaskRunnerFault(FluentProtocol.Event event, String errorMessage) {
        handleTaskRunnerFault(null, event.name(), errorMessage);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Validation
    ///////////////////////////////////////////////////////////////////////////////////////////

    private boolean isPubKeyValid(DecryptedMessageWithPubKey message) {
        // We can only validate the peers pubKey if we have it already. If we are the taker we get it from the offer
        // Otherwise it depends on the state of the tradeModel protocol if we have received the peers pubKeyRing already.
        PubKeyRing peersPubKeyRing = protocolModel.getTradePeer().getPubKeyRing();
        boolean isValid = true;
        if (peersPubKeyRing != null &&
                !message.getSignaturePubKey().equals(peersPubKeyRing.getSignaturePubKey())) {
            isValid = false;
            log.error(""SignaturePubKey in message does not match the SignaturePubKey we have set for our trading peer."");
        }
        return isValid;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Private
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void handleTaskRunnerSuccess(@Nullable TradeMessage message, String source) {
        log.info(""TaskRunner successfully completed. Triggered from {}, tradeId={}"", source, tradeModel.getId());
        if (message != null) {
            sendAckMessage(message, true, null);

            // Once a taskRunner is completed we remove the mailbox message. To not remove it directly at the task
            // adds some resilience in case of minor errors, so after a restart the mailbox message can be applied
            // again.
            removeMailboxMessageAfterProcessing(message);
        }
    }

    void handleTaskRunnerFault(@Nullable TradeMessage message, String source, String errorMessage) {
        log.error(""Task runner failed with error {}. Triggered from {}"", errorMessage, source);

        if (message != null) {
            sendAckMessage(message, false, errorMessage);
        }
        cleanup();
    }

    private boolean isMyMessage(NetworkEnvelope message) {
        if (message instanceof TradeMessage) {
            TradeMessage tradeMessage = (TradeMessage) message;
            return tradeMessage.getTradeId().equals(tradeModel.getId());
        } else if (message instanceof AckMessage) {
            AckMessage ackMessage = (AckMessage) message;
            return ackMessage.getSourceType() == AckMessageSourceType.TRADE_MESSAGE &&
                    ackMessage.getSourceId().equals(tradeModel.getId());
        } else {
            return false;
        }
    }

    private void cleanup() {
        stopTimeout();
        // We do not remove the decryptedDirectMessageListener as in case of not critical failures we want allow to receive
        // follow-up messages still
    }
}",1,64 2000 777 539 587 2001 693 2002 44 2003 123 64 2004 775 657 2005 60 63 650 2006 62 2007 59 775 657 2008 2009 59 773 2010 2011 59 331 330 331 777 2001 40 2008 2009 41 123 823 46 2009 61 2009 59 823 46 2007 61 2009 46 2012 40 41 59 125 331 330 331 777 865 2013 40 2014 2015 44 2016 2017 44 2018 2019 41 123 2007 46 2020 40 2015 44 2017 44 2019 41 59 2021 40 41 59 125 775 865 2022 40 41 123 688 40 33 2009 46 2023 40 41 41 123 2007 46 2024 40 41 46 2025 40 823 41 59 125 2026 2027 61 2007 46 2028 40 41 46 2029 40 41 59 330 330 330 330 330 2030 46 2031 40 40 41 45 62 123 2027 46 2032 40 823 41 59 2033 40 2027 46 2034 40 41 41 59 125 44 1503 44 2035 46 2036 41 59 125 777 865 2037 40 41 123 2038 40 41 59 125 775 865 2039 40 2040 2041 44 2042 2043 41 123 2044 46 2045 40 362 44 2041 46 2046 40 41 46 2047 40 41 44 2043 44 2041 46 2048 40 41 44 2041 46 2049 40 41 41 59 125 331 330 331 64 2050 777 865 2051 40 2052 2053 44 2042 2054 41 123 2055 2056 61 2053 46 2057 40 41 59 688 40 33 2058 40 2056 41 41 123 792 59 125 688 40 33 2059 40 2053 41 41 123 792 59 125 688 40 2056 702 2040 41 123 2060 40 40 2040 41 2056 44 2054 41 59 125 630 688 40 2056 702 2061 41 123 2062 40 40 2061 41 2056 44 2054 41 59 125 125 331 330 331 64 2050 777 865 2063 40 2052 2053 44 2042 2054 41 123 2064 40 2065 46 2066 40 2053 41 41 59 125 773 865 2067 40 2068 60 2052 62 2069 41 123 2069 46 2070 40 41 46 2071 40 823 58 58 2072 41 46 2073 40 2052 58 58 2074 41 46 2071 40 823 58 58 2075 41 46 2071 40 2076 45 62 2076 702 2077 41 46 2073 40 2076 45 62 40 2077 41 2076 41 46 2078 40 823 58 58 2079 41 59 125 773 865 2080 40 2081 2082 41 123 2005 60 63 650 2006 62 2007 61 2009 46 2083 40 41 59 688 40 2082 702 2040 41 123 2040 2084 61 40 2040 41 2082 59 330 330 688 40 2009 46 2085 40 41 41 123 2007 46 2086 40 41 46 2087 40 41 46 2088 40 2082 41 59 2089 46 2090 40 362 44 2084 46 2091 40 41 46 2092 40 41 41 59 792 59 125 2039 40 2084 44 2082 46 2093 40 41 41 59 125 630 688 40 2082 702 2094 41 123 2094 2095 61 40 2094 41 2082 59 688 40 33 2009 46 2096 40 41 41 123 330 2097 40 2095 44 2082 46 2098 40 41 41 59 125 330 2007 46 2099 40 41 46 2100 40 41 46 2101 40 2095 41 59 2102 46 2103 40 362 44 2095 46 2104 40 41 46 2105 40 41 41 59 125 125 777 865 2106 40 2040 2107 41 123 688 40 2107 702 2081 41 123 2007 46 2108 40 41 46 2109 40 41 46 2110 40 40 2081 41 2107 41 59 2111 46 2112 40 362 44 2107 46 2113 40 41 46 2114 40 41 41 59 125 125 331 330 331 775 539 865 2115 40 2040 2041 44 2042 2054 41 59 331 330 331 330 775 2116 2117 40 2116 46 2118 2119 41 123 792 744 2116 40 823 41 46 2119 40 2119 41 46 2120 40 2121 45 62 123 688 40 33 2121 46 2122 40 41 41 123 2123 46 2124 40 2121 46 2125 40 41 41 59 2126 40 2127 44 2121 46 2128 40 41 44 2121 46 2125 40 41 41 59 125 125 41 59 125 330 775 2116 2129 40 2116 46 2118 2119 41 123 792 744 2116 40 823 41 46 2119 40 2119 41 59 125 775 2116 46 2118 2130 40 2131 46 2132 2133 41 123 792 744 2116 46 2118 40 2009 41 46 2130 40 2133 41 59 125 775 2116 46 2118 2134 40 2131 46 2132 322 2135 41 123 792 744 2116 46 2118 40 2009 41 46 2134 40 2135 41 59 125 775 2116 46 2118 2136 40 570 2136 41 123 792 744 2116 46 2118 40 2009 41 46 2136 40 2136 41 59 125 64 2137 777 657 2116 46 2138 2139 40 2140 60 63 650 2141 60 2008 356 322 2139 41 123 792 744 2116 46 2138 40 823 44 2009 41 46 2139 40 2139 41 59 125 331 330 331 539 775 865 2142 40 2143 2144 44 2042 2054 41 59 775 865 2145 40 2040 2041 44 570 2146 44 64 2147 2148 2149 41 123 2150 2151 61 2007 46 2152 40 41 46 2153 40 41 59 688 40 2151 323 2154 41 123 2155 46 2156 40 362 41 59 792 59 125 2148 2157 61 2041 46 2158 40 41 59 2148 2159 61 2041 46 2160 40 41 59 2143 2144 61 744 2143 40 2007 46 2161 40 41 44 2162 46 2163 44 2041 46 2164 40 41 46 2165 40 41 44 2159 44 2157 44 2146 44 2149 41 59 330 330 2042 2054 61 2009 46 2166 40 41 340 2154 63 2009 46 2166 40 41 58 2007 46 2167 40 41 59 2168 46 2169 40 362 44 2144 46 2170 40 41 44 2054 44 2157 44 2159 41 59 2007 46 2171 40 41 46 2172 40 41 46 2173 40 2054 44 2151 44 2144 44 744 2174 40 41 123 64 2050 777 865 2175 40 41 123 2168 46 2169 40 362 44 2144 46 2170 40 41 44 2054 44 2157 44 2159 41 59 125 64 2050 777 865 2176 40 41 123 2168 46 2169 40 362 44 2144 46 2170 40 41 44 2054 44 2157 44 2159 41 59 125 64 2050 777 865 2177 40 2148 2149 41 123 2168 46 2178 40 362 44 2144 46 2170 40 41 44 2054 44 2157 44 2159 44 2149 41 59 125 125 41 59 125 331 330 331 775 865 2179 40 726 2180 41 123 2181 40 41 59 2011 61 2182 46 2183 40 40 41 45 62 123 2184 46 2185 40 362 44 2009 46 2186 40 41 44 2009 46 2187 40 41 44 2180 41 59 2009 46 2188 40 362 43 2180 43 362 41 59 2007 46 2189 40 41 46 2190 40 41 59 2191 40 41 59 125 44 2180 41 59 125 775 865 2192 40 41 123 688 40 2011 340 2193 41 123 2011 46 2194 40 41 59 2011 61 2193 59 125 125 331 330 331 775 865 2195 40 2040 2041 41 123 2195 40 2041 44 2041 46 2196 40 41 46 2197 40 41 41 59 125 775 865 2195 40 2116 46 2198 2199 41 123 2195 40 2200 44 2199 46 2201 40 41 41 59 125 775 865 2202 40 2040 2041 44 2148 2149 41 123 2202 40 2041 44 2041 46 2203 40 41 46 2204 40 41 44 2149 41 59 125 775 865 2202 40 2116 46 2198 2199 44 2148 2149 41 123 2202 40 2205 44 2199 46 2206 40 41 44 2149 41 59 125 331 330 331 773 570 2207 40 2052 2041 41 123 330 330 2208 2209 61 2007 46 2210 40 41 46 2211 40 41 59 570 2212 61 2213 59 688 40 2209 340 2214 307 33 2041 46 2215 40 41 46 2216 40 2209 46 2215 40 41 41 41 123 2212 61 2217 59 2218 46 2219 40 362 41 59 125 792 2212 59 125 331 330 331 773 865 2195 40 64 2147 2040 2041 44 2148 2220 41 123 2221 46 2222 40 362 44 2220 44 2009 46 2223 40 41 41 59 688 40 2041 340 2224 41 123 2145 40 2041 44 2225 44 2224 41 59 330 330 330 2106 40 2041 41 59 125 125 865 2202 40 64 2147 2040 2041 44 2148 2220 44 2148 2149 41 123 2226 46 2227 40 362 44 2149 44 2220 41 59 688 40 2041 340 2228 41 123 2145 40 2041 44 2229 44 2149 41 59 125 2230 40 41 59 125 773 570 2231 40 2232 2041 41 123 688 40 2041 702 2040 41 123 2040 2107 61 40 2040 41 2041 59 792 2107 46 2233 40 41 46 2234 40 2009 46 2235 40 41 41 59 125 630 688 40 2041 702 2143 41 123 2143 2144 61 40 2143 41 2041 59 792 2144 46 2236 40 41 323 2237 46 2238 307 2144 46 2239 40 41 46 2240 40 2009 46 2241 40 41 41 59 125 630 123 792 2242 59 125 125 773 865 2243 40 41 123 2192 40 41 59 330 330 125 125 ,"{'AvgLine': 8, 'CountLine': 343, 'CountStmt': 134, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 92, 'MaxEssential': 3, 'SumEssential': 39, 'AvgCyclomatic': 1, 'CountLineCode': 227, 'CountStmtDecl': 51, 'MaxCyclomatic': 5, 'SumCyclomatic': 52, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 63, 'CountSemicolon': 84, 'CountDeclMethod': 30, 'CountLineCodeExe': 140, 'CountLineComment': 53, 'CountClassCoupled': 34, 'CountClassDerived': 2, 'CountLineCodeDecl': 55, 'CountDeclMethodAll': 30, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.23', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 54, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 7, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 78, 'SumCyclomaticModified': 52, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 1, 'CountDeclMethodPrivate': 6, 'CountDeclInstanceMethod': 30, 'CountDeclMethodProtected': 16, 'CountClassCoupledModified': 34, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 51}"
3550,Java,"@Slf4j
public class DisputeSummaryWindow extends Overlay<DisputeSummaryWindow> {
    private final CoinFormatter formatter;
    private final MediationManager mediationManager;
    private final RefundManager refundManager;
    private final TradeWalletService tradeWalletService;
    private final BtcWalletService btcWalletService;
    private final TxFeeEstimationService txFeeEstimationService;
    private final MempoolService mempoolService;
    private final DaoFacade daoFacade;
    private Dispute dispute;
    private Optional<Runnable> finalizeDisputeHandlerOptional = Optional.empty();
    private ToggleGroup tradeAmountToggleGroup, reasonToggleGroup;
    private DisputeResult disputeResult;
    private RadioButton buyerGetsTradeAmountRadioButton, sellerGetsTradeAmountRadioButton,
            buyerGetsCompensationRadioButton, sellerGetsCompensationRadioButton,
            buyerGetsTradeAmountMinusPenaltyRadioButton, sellerGetsTradeAmountMinusPenaltyRadioButton, customRadioButton;
    private RadioButton reasonWasBugRadioButton, reasonWasUsabilityIssueRadioButton,
            reasonProtocolViolationRadioButton, reasonNoReplyRadioButton, reasonWasScamRadioButton,
            reasonWasOtherRadioButton, reasonWasBankRadioButton, reasonWasOptionTradeRadioButton,
            reasonWasSellerNotRespondingRadioButton, reasonWasWrongSenderAccountRadioButton,
            reasonWasPeerWasLateRadioButton, reasonWasTradeAlreadySettledRadioButton;

    // Dispute object of other trade peer. The dispute field is the one from which we opened the close dispute window.
    private Optional<Dispute> peersDisputeOptional;
    private String role;
    private Label delayedPayoutTxStatus;
    private TextArea summaryNotesTextArea;

    private ChangeListener<Boolean> customRadioButtonSelectedListener, buyerGetsTradeAmountSelectedListener, sellerGetsTradeAmountSelectedListener;
    private ChangeListener<Toggle> reasonToggleSelectionListener;
    private InputTextField buyerPayoutAmountInputTextField, sellerPayoutAmountInputTextField, compensationOrPenalty;
    private ChangeListener<Boolean> buyerPayoutAmountListener, sellerPayoutAmountListener;
    private ChangeListener<Toggle> tradeAmountToggleGroupListener;
    private ChangeListener<String> compensationOrPenaltyListener;
    private boolean updatingUi = false;

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Public API
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    public DisputeSummaryWindow(@Named(FormattingUtils.BTC_FORMATTER_KEY) CoinFormatter formatter,
                                MediationManager mediationManager,
                                RefundManager refundManager,
                                TradeWalletService tradeWalletService,
                                BtcWalletService btcWalletService,
                                TxFeeEstimationService txFeeEstimationService,
                                MempoolService mempoolService,
                                DaoFacade daoFacade) {

        this.formatter = formatter;
        this.mediationManager = mediationManager;
        this.refundManager = refundManager;
        this.tradeWalletService = tradeWalletService;
        this.btcWalletService = btcWalletService;
        this.txFeeEstimationService = txFeeEstimationService;
        this.mempoolService = mempoolService;
        this.daoFacade = daoFacade;

        type = Type.Confirmation;
    }

    public void show(Dispute dispute) {
        this.dispute = dispute;

        rowIndex = -1;
        width = 1150;
        createGridPane();
        addContent();
        checkDelayedPayoutTransaction();
        display();

        if (DevEnv.isDevMode()) {
            UserThread.execute(() -> {
                summaryNotesTextArea.setText(""dummy result...."");
            });
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Protected
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void cleanup() {
        if (reasonToggleGroup != null)
            reasonToggleGroup.selectedToggleProperty().removeListener(reasonToggleSelectionListener);

        if (customRadioButton != null)
            customRadioButton.selectedProperty().removeListener(customRadioButtonSelectedListener);

        if (buyerGetsTradeAmountRadioButton != null)
            buyerGetsTradeAmountRadioButton.selectedProperty().removeListener(buyerGetsTradeAmountSelectedListener);

        if (sellerGetsTradeAmountRadioButton != null)
            sellerGetsTradeAmountRadioButton.selectedProperty().removeListener(sellerGetsTradeAmountSelectedListener);

        if (tradeAmountToggleGroup != null)
            tradeAmountToggleGroup.selectedToggleProperty().removeListener(tradeAmountToggleGroupListener);

        removePayoutAmountListeners();
    }

    @Override
    protected void setupKeyHandler(Scene scene) {
        if (!hideCloseButton) {
            scene.setOnKeyPressed(e -> {
                if (e.getCode() == KeyCode.ESCAPE) {
                    e.consume();
                    doClose();
                }
            });
        }
    }

    @Override
    protected void createGridPane() {
        super.createGridPane();
        gridPane.setPadding(new Insets(35, 40, 0, 40));
        gridPane.getStyleClass().add(""grid-pane"");
        gridPane.getColumnConstraints().get(0).setHalignment(HPos.LEFT);
        gridPane.setPrefWidth(width);
    }

    private void addContent() {
        Contract contract = dispute.getContract();
        if (dispute.getDisputeResultProperty().get() == null)
            disputeResult = new DisputeResult(dispute.getTradeId(), dispute.getTraderId());
        else
            disputeResult = dispute.getDisputeResultProperty().get();

        peersDisputeOptional = checkNotNull(getDisputeManager(dispute)).getDisputesAsObservableList().stream()
                .filter(d -> dispute.getTradeId().equals(d.getTradeId()) && dispute.getTraderId() != d.getTraderId())
                .findFirst();

        addInfoPane();

        addTradeAmountPayoutControls();
        addPayoutAmountTextFields();
        addReasonControls();
        applyDisputeResultToUiControls();

        boolean applyPeersDisputeResult = peersDisputeOptional.isPresent() && peersDisputeOptional.get().isClosed();
        if (applyPeersDisputeResult) {
            // If the other peers dispute has been closed we apply the result to ourselves
            DisputeResult peersDisputeResult = peersDisputeOptional.get().getDisputeResultProperty().get();
            disputeResult.setBuyerPayoutAmount(peersDisputeResult.getBuyerPayoutAmount());
            disputeResult.setSellerPayoutAmount(peersDisputeResult.getSellerPayoutAmount());
            disputeResult.setPayoutAdjustmentPercent(peersDisputeResult.getPayoutAdjustmentPercent());
            disputeResult.setPayoutSuggestion(peersDisputeResult.getPayoutSuggestion());
            disputeResult.setWinner(peersDisputeResult.getWinner());
            disputeResult.setReason(peersDisputeResult.getReason());
            disputeResult.setSummaryNotes(peersDisputeResult.summaryNotesProperty().get());

            buyerGetsTradeAmountRadioButton.setDisable(true);
            buyerGetsCompensationRadioButton.setDisable(true);
            buyerGetsTradeAmountMinusPenaltyRadioButton.setDisable(true);
            sellerGetsTradeAmountRadioButton.setDisable(true);
            sellerGetsCompensationRadioButton.setDisable(true);
            sellerGetsTradeAmountMinusPenaltyRadioButton.setDisable(true);
            customRadioButton.setDisable(true);

            buyerPayoutAmountInputTextField.setDisable(true);
            sellerPayoutAmountInputTextField.setDisable(true);
            compensationOrPenalty.setDisable(true);
            buyerPayoutAmountInputTextField.setEditable(false);
            sellerPayoutAmountInputTextField.setEditable(false);
            compensationOrPenalty.setEditable(false);

            reasonWasBugRadioButton.setDisable(true);
            reasonWasUsabilityIssueRadioButton.setDisable(true);
            reasonProtocolViolationRadioButton.setDisable(true);
            reasonNoReplyRadioButton.setDisable(true);
            reasonWasScamRadioButton.setDisable(true);
            reasonWasOtherRadioButton.setDisable(true);
            reasonWasBankRadioButton.setDisable(true);
            reasonWasOptionTradeRadioButton.setDisable(true);
            reasonWasSellerNotRespondingRadioButton.setDisable(true);
            reasonWasWrongSenderAccountRadioButton.setDisable(true);
            reasonWasPeerWasLateRadioButton.setDisable(true);
            reasonWasTradeAlreadySettledRadioButton.setDisable(true);
            applyDisputeResultToUiControls();
        }

        setReasonRadioButtonState();

        addSummaryNotes();
        addButtons(contract);
    }

    private void addInfoPane() {
        Contract contract = dispute.getContract();
        addTitledGroupBg(gridPane, ++rowIndex, 17, Res.get(""disputeSummaryWindow.title"")).getStyleClass().add(""last"");
        addConfirmationLabelTextField(gridPane, rowIndex, Res.get(""shared.tradeId""), dispute.getShortTradeId(),
                Layout.TWICE_FIRST_ROW_DISTANCE);
        addConfirmationLabelTextField(gridPane, ++rowIndex, Res.get(""disputeSummaryWindow.openDate""), DisplayUtils.formatDateTime(dispute.getOpeningDate()));
        role = dispute.getRoleString();
        addConfirmationLabelTextField(gridPane, ++rowIndex, Res.get(""disputeSummaryWindow.role""), role);
        addConfirmationLabelTextField(gridPane, ++rowIndex, Res.get(""shared.tradeAmount""),
                formatter.formatCoinWithCode(contract.getTradeAmount()));
        addConfirmationLabelTextField(gridPane, ++rowIndex, Res.get(""shared.tradePrice""),
                FormattingUtils.formatPrice(contract.getTradePrice()));
        addConfirmationLabelTextField(gridPane, ++rowIndex, Res.get(""shared.tradeVolume""),
                VolumeUtil.formatVolumeWithCode(contract.getTradeVolume()));
        String securityDeposit = Res.getWithColAndCap(""shared.buyer"") +
                "" "" +
                formatter.formatCoinWithCode(contract.getOfferPayload().getBuyerSecurityDeposit()) +
                "" / "" +
                Res.getWithColAndCap(""shared.seller"") +
                "" "" +
                formatter.formatCoinWithCode(contract.getOfferPayload().getSellerSecurityDeposit());
        addConfirmationLabelTextField(gridPane, ++rowIndex, Res.get(""shared.securityDeposit""), securityDeposit);

        boolean isMediationDispute = getDisputeManager(dispute) instanceof MediationManager;
        if (isMediationDispute) {
            if (dispute.getTradePeriodEnd().getTime() > 0) {
                String status = DisplayUtils.formatDateTime(dispute.getTradePeriodEnd());
                Label tradePeriodEnd = addConfirmationLabelLabel(gridPane, ++rowIndex, Res.get(""disputeSummaryWindow.tradePeriodEnd""), status).second;
                if (dispute.getTradePeriodEnd().toInstant().isAfter(Instant.now())) {
                    tradePeriodEnd.getStyleClass().add(""alert""); // highlight field when the trade period is still active
                }
            }
            if (dispute.getExtraDataMap() != null && dispute.getExtraDataMap().size() > 0) {
                String extraDataSummary = """";
                for (Map.Entry<String, String> entry : dispute.getExtraDataMap().entrySet()) {
                    extraDataSummary += ""["" + entry.getKey() + "":"" + entry.getValue() + ""] "";
                }
                addConfirmationLabelTextField(gridPane, ++rowIndex, Res.get(""disputeSummaryWindow.extraInfo""), extraDataSummary);
            }
        } else {
            delayedPayoutTxStatus = addConfirmationLabelLabel(gridPane, ++rowIndex, Res.get(""disputeSummaryWindow.delayedPayoutStatus""), ""Checking..."").second;
        }
    }

    private void addTradeAmountPayoutControls() {
        buyerGetsTradeAmountRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.payout.getsTradeAmount"", Res.get(""shared.buyer"")));
        buyerGetsCompensationRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.payout.getsCompensation"", Res.get(""shared.buyer"")));
        buyerGetsTradeAmountMinusPenaltyRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.payout.getsPenalty"", Res.get(""shared.buyer"")));
        sellerGetsTradeAmountRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.payout.getsTradeAmount"", Res.get(""shared.seller"")));
        sellerGetsCompensationRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.payout.getsCompensation"", Res.get(""shared.seller"")));
        sellerGetsTradeAmountMinusPenaltyRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.payout.getsPenalty"", Res.get(""shared.seller"")));
        customRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.payout.custom""));

        VBox radioButtonPane = new VBox();
        radioButtonPane.setSpacing(10);
        radioButtonPane.getChildren().addAll(buyerGetsTradeAmountRadioButton, buyerGetsCompensationRadioButton,
                buyerGetsTradeAmountMinusPenaltyRadioButton, sellerGetsTradeAmountRadioButton, sellerGetsCompensationRadioButton, sellerGetsTradeAmountMinusPenaltyRadioButton,
                customRadioButton);

        addTopLabelWithVBox(gridPane, ++rowIndex, Res.get(""disputeSummaryWindow.payout""), radioButtonPane, 0);

        tradeAmountToggleGroup = new ToggleGroup();
        buyerGetsTradeAmountRadioButton.setToggleGroup(tradeAmountToggleGroup);
        buyerGetsCompensationRadioButton.setToggleGroup(tradeAmountToggleGroup);
        buyerGetsTradeAmountMinusPenaltyRadioButton.setToggleGroup(tradeAmountToggleGroup);
        sellerGetsTradeAmountRadioButton.setToggleGroup(tradeAmountToggleGroup);
        sellerGetsCompensationRadioButton.setToggleGroup(tradeAmountToggleGroup);
        sellerGetsTradeAmountMinusPenaltyRadioButton.setToggleGroup(tradeAmountToggleGroup);
        customRadioButton.setToggleGroup(tradeAmountToggleGroup);

        tradeAmountToggleGroupListener = (observable, oldValue, newValue) -> applyUpdateFromUi(newValue);
        tradeAmountToggleGroup.selectedToggleProperty().addListener(tradeAmountToggleGroupListener);

        buyerPayoutAmountListener = (observable, oldValue, newValue) -> applyCustomAmounts(buyerPayoutAmountInputTextField, oldValue, newValue);
        sellerPayoutAmountListener = (observable, oldValue, newValue) -> applyCustomAmounts(sellerPayoutAmountInputTextField, oldValue, newValue);

        buyerGetsTradeAmountSelectedListener = (observable, oldValue, newValue) -> {
            compensationOrPenalty.setEditable(!newValue);
        };
        buyerGetsTradeAmountRadioButton.selectedProperty().addListener(buyerGetsTradeAmountSelectedListener);

        sellerGetsTradeAmountSelectedListener = (observable, oldValue, newValue) -> {
            compensationOrPenalty.setEditable(!newValue);
        };
        sellerGetsTradeAmountRadioButton.selectedProperty().addListener(sellerGetsTradeAmountSelectedListener);

        customRadioButtonSelectedListener = (observable, oldValue, newValue) -> {
            buyerPayoutAmountInputTextField.setEditable(newValue);
            sellerPayoutAmountInputTextField.setEditable(newValue);
            compensationOrPenalty.setEditable(!newValue);
            if (newValue) {
                buyerPayoutAmountInputTextField.focusedProperty().addListener(buyerPayoutAmountListener);
                sellerPayoutAmountInputTextField.focusedProperty().addListener(sellerPayoutAmountListener);
            } else {
                removePayoutAmountListeners();
            }
        };
        customRadioButton.selectedProperty().addListener(customRadioButtonSelectedListener);
    }

    private void removePayoutAmountListeners() {
        if (buyerPayoutAmountInputTextField != null && buyerPayoutAmountListener != null)
            buyerPayoutAmountInputTextField.focusedProperty().removeListener(buyerPayoutAmountListener);

        if (sellerPayoutAmountInputTextField != null && sellerPayoutAmountListener != null)
            sellerPayoutAmountInputTextField.focusedProperty().removeListener(sellerPayoutAmountListener);
    }

    private boolean isPayoutAmountValid() {
        Coin buyerAmount = ParsingUtils.parseToCoin(buyerPayoutAmountInputTextField.getText(), formatter);
        Coin sellerAmount = ParsingUtils.parseToCoin(sellerPayoutAmountInputTextField.getText(), formatter);
        Contract contract = dispute.getContract();
        Coin tradeAmount = contract.getTradeAmount();
        Offer offer = new Offer(contract.getOfferPayload());
        Coin available = tradeAmount
                .add(offer.getBuyerSecurityDeposit())
                .add(offer.getSellerSecurityDeposit());
        Coin totalAmount = buyerAmount.add(sellerAmount);

        boolean isRefundAgent = getDisputeManager(dispute) instanceof RefundManager;
        if (isRefundAgent) {
            // We allow to spend less in case of RefundAgent or even zero to both, so in that case no payout tx will
            // be made
            return totalAmount.compareTo(available) <= 0;
        } else {
            if (!totalAmount.isPositive()) {
                return false;
            }
            return totalAmount.compareTo(available) == 0;
        }
    }

    private void applyCustomAmounts(InputTextField inputTextField, boolean oldFocusValue, boolean newFocusValue) {
        // We only apply adjustments at focus out, otherwise we cannot enter certain values if we update at each
        // keystroke.
        if (!oldFocusValue || newFocusValue) {
            return;
        }

        Contract contract = dispute.getContract();
        boolean isMediationDispute = getDisputeManager(dispute) instanceof MediationManager;
        // At mediation we require a min. payout to the losing party to keep incentive for the trader to accept the
        // mediated payout. For Refund agent cases we do not have that restriction.
        Coin minRefundAtDispute = isMediationDispute ? Restrictions.getMinRefundAtMediatedDispute() : Coin.ZERO;

        Offer offer = new Offer(contract.getOfferPayload());
        Coin totalAvailable = contract.getTradeAmount()
                .add(offer.getBuyerSecurityDeposit())
                .add(offer.getSellerSecurityDeposit());
        Coin availableForPayout = totalAvailable.subtract(minRefundAtDispute);

        Coin enteredAmount = ParsingUtils.parseToCoin(inputTextField.getText(), formatter);
        if (enteredAmount.compareTo(minRefundAtDispute) < 0) {
            enteredAmount = minRefundAtDispute;
            inputTextField.setText(formatter.formatCoin(enteredAmount));
        }
        if (enteredAmount.isPositive() && !Restrictions.isAboveDust(enteredAmount)) {
            enteredAmount = Restrictions.getMinNonDustOutput();
            inputTextField.setText(formatter.formatCoin(enteredAmount));
        }
        if (enteredAmount.compareTo(availableForPayout) > 0) {
            enteredAmount = availableForPayout;
            inputTextField.setText(formatter.formatCoin(enteredAmount));
        }
        Coin counterPartAsCoin = totalAvailable.subtract(enteredAmount);
        String formattedCounterPartAmount = formatter.formatCoin(counterPartAsCoin);
        Coin buyerAmount;
        Coin sellerAmount;
        if (inputTextField == buyerPayoutAmountInputTextField) {
            buyerAmount = enteredAmount;
            sellerAmount = counterPartAsCoin;
            Coin sellerAmountFromField = ParsingUtils.parseToCoin(sellerPayoutAmountInputTextField.getText(), formatter);
            Coin totalAmountFromFields = enteredAmount.add(sellerAmountFromField);
            // RefundAgent can enter less then available
            if (isMediationDispute ||
                    totalAmountFromFields.compareTo(totalAvailable) > 0) {
                sellerPayoutAmountInputTextField.setText(formattedCounterPartAmount);
            } else {
                sellerAmount = sellerAmountFromField;
            }
        } else {
            sellerAmount = enteredAmount;
            buyerAmount = counterPartAsCoin;
            Coin buyerAmountFromField = ParsingUtils.parseToCoin(buyerPayoutAmountInputTextField.getText(), formatter);
            Coin totalAmountFromFields = enteredAmount.add(buyerAmountFromField);
            // RefundAgent can enter less then available
            if (isMediationDispute ||
                    totalAmountFromFields.compareTo(totalAvailable) > 0) {
                buyerPayoutAmountInputTextField.setText(formattedCounterPartAmount);
            } else {
                buyerAmount = buyerAmountFromField;
            }
        }

        disputeResult.setBuyerPayoutAmount(buyerAmount);
        disputeResult.setSellerPayoutAmount(sellerAmount);
        disputeResult.setWinner(buyerAmount.compareTo(sellerAmount) > 0 ?
                DisputeResult.Winner.BUYER :
                DisputeResult.Winner.SELLER);
    }

    private void addPayoutAmountTextFields() {
        buyerPayoutAmountInputTextField = new InputTextField();
        buyerPayoutAmountInputTextField.setLabelFloat(true);
        buyerPayoutAmountInputTextField.setEditable(false);
        buyerPayoutAmountInputTextField.setPromptText(Res.get(""disputeSummaryWindow.payoutAmount.buyer""));

        sellerPayoutAmountInputTextField = new InputTextField();
        sellerPayoutAmountInputTextField.setLabelFloat(true);
        sellerPayoutAmountInputTextField.setPromptText(Res.get(""disputeSummaryWindow.payoutAmount.seller""));
        sellerPayoutAmountInputTextField.setEditable(false);

        compensationOrPenalty = new InputTextField();
        compensationOrPenalty.setPromptText(""Comp|Penalty percent"");
        compensationOrPenalty.setLabelFloat(true);
        HBox hBoxPenalty = new HBox(compensationOrPenalty);
        HBox hBoxPayouts = new HBox(buyerPayoutAmountInputTextField, sellerPayoutAmountInputTextField);
        hBoxPayouts.setSpacing(15);

        VBox vBox = new VBox();
        vBox.setSpacing(25);
        vBox.getChildren().addAll(hBoxPenalty, hBoxPayouts);
        GridPane.setMargin(vBox, new Insets(80, 50, 50, 50));
        GridPane.setRowIndex(vBox, rowIndex);
        GridPane.setColumnIndex(vBox, 1);
        gridPane.getChildren().add(vBox);

        compensationOrPenaltyListener = (observable, oldValue, newValue) -> {
            applyUpdateFromUi(tradeAmountToggleGroup.selectedToggleProperty().get());
        };

        compensationOrPenalty.textProperty().addListener(compensationOrPenaltyListener);
    }

    private void addReasonControls() {
        reasonWasBugRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.BUG.name()));
        reasonWasUsabilityIssueRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.USABILITY.name()));
        reasonProtocolViolationRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.PROTOCOL_VIOLATION.name()));
        reasonNoReplyRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.NO_REPLY.name()));
        reasonWasScamRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.SCAM.name()));
        reasonWasBankRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.BANK_PROBLEMS.name()));
        reasonWasOtherRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.OTHER.name()));
        reasonWasOptionTradeRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.OPTION_TRADE.name()));
        reasonWasSellerNotRespondingRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.SELLER_NOT_RESPONDING.name()));
        reasonWasWrongSenderAccountRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.WRONG_SENDER_ACCOUNT.name()));
        reasonWasPeerWasLateRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.PEER_WAS_LATE.name()));
        reasonWasTradeAlreadySettledRadioButton = new AutoTooltipRadioButton(Res.get(""disputeSummaryWindow.reason."" + DisputeResult.Reason.TRADE_ALREADY_SETTLED.name()));

        HBox feeRadioButtonPane = new HBox();
        feeRadioButtonPane.setSpacing(20);
        // We don't show no reply and protocol violation as those should be covered by more specific ones. We still leave
        // the code to enable it if it turns out it is still requested by mediators.
        feeRadioButtonPane.getChildren().addAll(
                reasonWasTradeAlreadySettledRadioButton,
                reasonWasPeerWasLateRadioButton,
                reasonWasOptionTradeRadioButton,
                reasonWasSellerNotRespondingRadioButton,
                reasonWasWrongSenderAccountRadioButton,
                reasonWasBugRadioButton,
                reasonWasUsabilityIssueRadioButton,
                reasonWasBankRadioButton,
                reasonWasOtherRadioButton
        );

        VBox vBox = addTopLabelWithVBox(gridPane, ++rowIndex,
                Res.get(""disputeSummaryWindow.reason""),
                feeRadioButtonPane, 10).second;
        GridPane.setColumnSpan(vBox, 2);

        reasonToggleGroup = new ToggleGroup();
        reasonWasBugRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasUsabilityIssueRadioButton.setToggleGroup(reasonToggleGroup);
        reasonProtocolViolationRadioButton.setToggleGroup(reasonToggleGroup);
        reasonNoReplyRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasScamRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasOtherRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasBankRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasOptionTradeRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasSellerNotRespondingRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasWrongSenderAccountRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasPeerWasLateRadioButton.setToggleGroup(reasonToggleGroup);
        reasonWasTradeAlreadySettledRadioButton.setToggleGroup(reasonToggleGroup);

        reasonToggleSelectionListener = (observable, oldValue, newValue) -> {
            if (newValue == reasonWasBugRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.BUG);
            } else if (newValue == reasonWasUsabilityIssueRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.USABILITY);
            } else if (newValue == reasonProtocolViolationRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.PROTOCOL_VIOLATION);
            } else if (newValue == reasonNoReplyRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.NO_REPLY);
            } else if (newValue == reasonWasScamRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.SCAM);
            } else if (newValue == reasonWasBankRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.BANK_PROBLEMS);
            } else if (newValue == reasonWasOtherRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.OTHER);
            } else if (newValue == reasonWasOptionTradeRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.OPTION_TRADE);
            } else if (newValue == reasonWasSellerNotRespondingRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.SELLER_NOT_RESPONDING);
            } else if (newValue == reasonWasWrongSenderAccountRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.WRONG_SENDER_ACCOUNT);
            } else if (newValue == reasonWasTradeAlreadySettledRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.TRADE_ALREADY_SETTLED);
            } else if (newValue == reasonWasPeerWasLateRadioButton) {
                disputeResult.setReason(DisputeResult.Reason.PEER_WAS_LATE);
            }
        };
        reasonToggleGroup.selectedToggleProperty().addListener(reasonToggleSelectionListener);
    }

    private void setReasonRadioButtonState() {
        if (disputeResult.getReason() != null) {
            switch (disputeResult.getReason()) {
                case BUG:
                    reasonToggleGroup.selectToggle(reasonWasBugRadioButton);
                    break;
                case USABILITY:
                    reasonToggleGroup.selectToggle(reasonWasUsabilityIssueRadioButton);
                    break;
                case PROTOCOL_VIOLATION:
                    reasonToggleGroup.selectToggle(reasonProtocolViolationRadioButton);
                    break;
                case NO_REPLY:
                    reasonToggleGroup.selectToggle(reasonNoReplyRadioButton);
                    break;
                case SCAM:
                    reasonToggleGroup.selectToggle(reasonWasScamRadioButton);
                    break;
                case BANK_PROBLEMS:
                    reasonToggleGroup.selectToggle(reasonWasBankRadioButton);
                    break;
                case OTHER:
                    reasonToggleGroup.selectToggle(reasonWasOtherRadioButton);
                    break;
                case OPTION_TRADE:
                    reasonToggleGroup.selectToggle(reasonWasOptionTradeRadioButton);
                    break;
                case SELLER_NOT_RESPONDING:
                    reasonToggleGroup.selectToggle(reasonWasSellerNotRespondingRadioButton);
                    break;
                case WRONG_SENDER_ACCOUNT:
                    reasonToggleGroup.selectToggle(reasonWasWrongSenderAccountRadioButton);
                    break;
                case PEER_WAS_LATE:
                    reasonToggleGroup.selectToggle(reasonWasPeerWasLateRadioButton);
                    break;
                case TRADE_ALREADY_SETTLED:
                    reasonToggleGroup.selectToggle(reasonWasTradeAlreadySettledRadioButton);
                    break;
            }
        }
    }

    private void addSummaryNotes() {
        summaryNotesTextArea = new BisqTextArea();
        summaryNotesTextArea.setPromptText(Res.get(""disputeSummaryWindow.addSummaryNotes""));
        summaryNotesTextArea.setWrapText(true);

        Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, ++rowIndex,
                Res.get(""disputeSummaryWindow.summaryNotes""), summaryNotesTextArea, 0);
        GridPane.setColumnSpan(topLabelWithVBox.second, 2);

        summaryNotesTextArea.setPrefHeight(160);
        summaryNotesTextArea.textProperty().bindBidirectional(disputeResult.summaryNotesProperty());
    }

    private void addButtons(Contract contract) {
        Tuple3<Button, Button, HBox> tuple = add2ButtonsWithBox(gridPane, ++rowIndex,
                Res.get(""disputeSummaryWindow.close.button""),
                Res.get(""shared.cancel""), 15, true);
        Button closeTicketButton = tuple.first;
        closeTicketButton.disableProperty().bind(Bindings.createBooleanBinding(
                () -> tradeAmountToggleGroup.getSelectedToggle() == null
                        || summaryNotesTextArea.getText() == null
                        || summaryNotesTextArea.getText().length() == 0
                        || !isPayoutAmountValid(),
                tradeAmountToggleGroup.selectedToggleProperty(),
                summaryNotesTextArea.textProperty(),
                buyerPayoutAmountInputTextField.textProperty(),
                sellerPayoutAmountInputTextField.textProperty()));

        Button cancelButton = tuple.second;

        closeTicketButton.setOnAction(e -> {
            if (dispute.getDepositTxSerialized() == null) {
                log.warn(""dispute.getDepositTxSerialized is null"");
                return;
            }

            if (dispute.getSupportType() == SupportType.REFUND &&
                    peersDisputeOptional.isPresent() &&
                    !peersDisputeOptional.get().isClosed()) {
                showPayoutTxConfirmation(contract,
                        disputeResult,
                        () -> doCloseIfValid(closeTicketButton));
            } else {
                doCloseIfValid(closeTicketButton);
            }
        });

        cancelButton.setOnAction(e -> {
            dispute.setDisputeResult(disputeResult);
            checkNotNull(getDisputeManager(dispute)).requestPersistence();
            hide();
        });
    }

    private void showPayoutTxConfirmation(Contract contract, DisputeResult disputeResult, ResultHandler resultHandler) {
        if (dispute.isPayoutDone()) {
            new Popup().headLine(Res.get(""disputeSummaryWindow.close.alreadyPaid.headline""))
                    .confirmation(Res.get(""disputeSummaryWindow.close.alreadyPaid.text""))
                    .closeButtonText(Res.get(""shared.cancel""))
                    .show();
        }

        Coin buyerPayoutAmount = disputeResult.getBuyerPayoutAmount();
        String buyerPayoutAddressString = contract.getBuyerPayoutAddressString();
        Coin sellerPayoutAmount = disputeResult.getSellerPayoutAmount();
        String sellerPayoutAddressString = contract.getSellerPayoutAddressString();
        Coin outputAmount = buyerPayoutAmount.add(sellerPayoutAmount);
        Tuple2<Coin, Integer> feeTuple = txFeeEstimationService.getEstimatedFeeAndTxVsize(outputAmount, btcWalletService);
        Coin fee = feeTuple.first;
        Integer txVsize = feeTuple.second;
        double feePerVbyte = CoinUtil.getFeePerVbyte(fee, txVsize);
        double vkb = txVsize / 1000d;
        Coin inputAmount = outputAmount.add(fee);
        String buyerDetails = """";
        if (buyerPayoutAmount.isPositive()) {
            buyerDetails = Res.get(""disputeSummaryWindow.close.txDetails.buyer"",
                    formatter.formatCoinWithCode(buyerPayoutAmount),
                    buyerPayoutAddressString);
        }
        String sellerDetails = """";
        if (sellerPayoutAmount.isPositive()) {
            sellerDetails = Res.get(""disputeSummaryWindow.close.txDetails.seller"",
                    formatter.formatCoinWithCode(sellerPayoutAmount),
                    sellerPayoutAddressString);
        }
        if (outputAmount.isPositive()) {
            new Popup().width(900)
                    .headLine(Res.get(""disputeSummaryWindow.close.txDetails.headline""))
                    .confirmation(Res.get(""disputeSummaryWindow.close.txDetails"",
                            formatter.formatCoinWithCode(inputAmount),
                            buyerDetails,
                            sellerDetails,
                            formatter.formatCoinWithCode(fee),
                            feePerVbyte,
                            vkb))
                    .actionButtonText(Res.get(""shared.yes""))
                    .onAction(() -> {
                        doPayout(buyerPayoutAmount,
                                sellerPayoutAmount,
                                fee,
                                buyerPayoutAddressString,
                                sellerPayoutAddressString,
                                resultHandler);
                    })
                    .closeButtonText(Res.get(""shared.cancel""))
                    .show();
        } else {
            // No payout will be made
            new Popup().headLine(Res.get(""disputeSummaryWindow.close.noPayout.headline""))
                    .confirmation(Res.get(""disputeSummaryWindow.close.noPayout.text""))
                    .actionButtonText(Res.get(""shared.yes""))
                    .onAction(resultHandler::handleResult)
                    .closeButtonText(Res.get(""shared.cancel""))
                    .show();
        }
    }

    private void doPayout(Coin buyerPayoutAmount,
                          Coin sellerPayoutAmount,
                          Coin fee,
                          String buyerPayoutAddressString,
                          String sellerPayoutAddressString,
                          ResultHandler resultHandler) {
        if (dispute.isPayoutDone()) {
            log.error(""Payout already processed, returning to avoid double payout for dispute of trade {}"",
                    dispute.getTradeId());
            return;
        }
        dispute.setPayoutDone(true);
        try {
            Transaction tx = btcWalletService.createRefundPayoutTx(buyerPayoutAmount,
                    sellerPayoutAmount,
                    fee,
                    buyerPayoutAddressString,
                    sellerPayoutAddressString);
            tradeWalletService.broadcastTx(tx, new TxBroadcaster.Callback() {
                @Override
                public void onSuccess(Transaction transaction) {
                    resultHandler.handleResult();
                }

                @Override
                public void onFailure(TxBroadcastException exception) {
                    log.error(""TxBroadcastException at doPayout"", exception);
                    new Popup().error(exception.toString()).show();
                }
            });
        } catch (InsufficientMoneyException | WalletException | TransactionVerificationException e) {
            log.error(""Exception at doPayout"", e);
            new Popup().error(e.toString()).show();
        }
    }

    private void doCloseIfValid(Button closeTicketButton) {
        var disputeManager = checkNotNull(getDisputeManager(dispute));
        try {
            TradeDataValidation.validateDonationAddress(dispute.getDonationAddressOfDelayedPayoutTx(), daoFacade);
            TradeDataValidation.testIfDisputeTriesReplay(dispute, disputeManager.getDisputesAsObservableList());
            doClose(closeTicketButton);
        } catch (TradeDataValidation.AddressException exception) {
            String addressAsString = dispute.getDonationAddressOfDelayedPayoutTx();
            String tradeId = dispute.getTradeId();

            // For mediators we do not enforce that the case cannot be closed to stay flexible,
            // but for refund agents we do.
            if (disputeManager instanceof MediationManager) {
                new Popup().width(900)
                        .warning(Res.get(""support.warning.disputesWithInvalidDonationAddress"",
                                addressAsString,
                                daoFacade.getAllDonationAddresses(),
                                tradeId,
                                Res.get(""support.warning.disputesWithInvalidDonationAddress.mediator"")))
                        .onAction(() -> {
                            doClose(closeTicketButton);
                        })
                        .actionButtonText(Res.get(""shared.yes""))
                        .closeButtonText(Res.get(""shared.no""))
                        .show();
            } else {
                new Popup().width(900)
                        .warning(Res.get(""support.warning.disputesWithInvalidDonationAddress"",
                                addressAsString,
                                daoFacade.getAllDonationAddresses(),
                                tradeId,
                                Res.get(""support.warning.disputesWithInvalidDonationAddress.refundAgent"")))
                        .show();
            }
        } catch (TradeDataValidation.DisputeReplayException exception) {
            if (disputeManager instanceof MediationManager) {
                log.error(""Closing of ticket failed as mediator"", exception);
                new Popup().width(900)
                        .warning(exception.getMessage())
                        .onAction(() -> {
                            doClose(closeTicketButton);
                        })
                        .actionButtonText(Res.get(""shared.yes""))
                        .closeButtonText(Res.get(""shared.no""))
                        .show();
            } else {
                log.error(""Closing of ticket failed"", exception);
                new Popup().width(900)
                        .warning(exception.getMessage())
                        .show();
            }
        }
    }

    private void doClose(Button closeTicketButton) {
        DisputeManager<? extends DisputeList<Dispute>> disputeManager = getDisputeManager(dispute);
        if (disputeManager == null) {
            return;
        }

        boolean isRefundAgent = disputeManager instanceof RefundManager;
        disputeResult.setLoserPublisher(false); // field no longer used per pazza / leo816
        disputeResult.setCloseDate(new Date());
        dispute.setDisputeResult(disputeResult);
        dispute.setIsClosed();
        DisputeResult.Reason reason = disputeResult.getReason();

        summaryNotesTextArea.textProperty().unbindBidirectional(disputeResult.summaryNotesProperty());
        String role = isRefundAgent ? Res.get(""shared.refundAgent"") : Res.get(""shared.mediator"");
        String agentNodeAddress = checkNotNull(disputeManager.getAgentNodeAddress(dispute)).getFullAddress();
        Contract contract = dispute.getContract();
        String currencyCode = contract.getOfferPayload().getCurrencyCode();
        String amount = formatter.formatCoinWithCode(contract.getTradeAmount());
        String textToSign = Res.get(""disputeSummaryWindow.close.msg"",
                DisplayUtils.formatDateTime(disputeResult.getCloseDate()),
                role,
                agentNodeAddress,
                dispute.getShortTradeId(),
                currencyCode,
                amount,
                formatter.formatCoinWithCode(disputeResult.getBuyerPayoutAmount()),
                formatter.formatCoinWithCode(disputeResult.getSellerPayoutAmount()),
                Res.get(""disputeSummaryWindow.reason."" + reason.name()),
                disputeResult.summaryNotesProperty().get()
        );

        if (reason == DisputeResult.Reason.OPTION_TRADE &&
                dispute.getChatMessages().size() > 1 &&
                dispute.getChatMessages().get(1).isSystemMessage()) {
            textToSign += ""\n"" + dispute.getChatMessages().get(1).getMessage() + ""\n"";
        }

        String summaryText = DisputeSummaryVerification.signAndApply(disputeManager, disputeResult, textToSign);

        if (isRefundAgent) {
            summaryText += Res.get(""disputeSummaryWindow.close.nextStepsForRefundAgentArbitration"");
        } else {
            summaryText += Res.get(""disputeSummaryWindow.close.nextStepsForMediation"");
        }

        disputeManager.sendDisputeResultMessage(disputeResult, dispute, summaryText);

        if (peersDisputeOptional.isPresent() && !peersDisputeOptional.get().isClosed() && !DevEnv.isDevMode()) {
            UserThread.runAfter(() -> new Popup()
                            .attention(Res.get(""disputeSummaryWindow.close.closePeer""))
                            .show(),
                    200, TimeUnit.MILLISECONDS);
        }

        finalizeDisputeHandlerOptional.ifPresent(Runnable::run);

        disputeManager.requestPersistence();

        closeTicketButton.disableProperty().unbind();

        hide();
    }

    private DisputeManager<? extends DisputeList<Dispute>> getDisputeManager(Dispute dispute) {
        if (dispute.getSupportType() != null) {
            switch (dispute.getSupportType()) {
                case ARBITRATION:
                    return null;
                case MEDIATION:
                    return mediationManager;
                case TRADE:
                    break;
                case REFUND:
                    return refundManager;
            }
        }
        return null;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Controller
    ///////////////////////////////////////////////////////////////////////////////////////////

    private boolean isMediationDispute() {
        return getDisputeManager(dispute) instanceof MediationManager;
    }

    // called when a radio button or amount box ui control is changed
    private void applyUpdateFromUi(Toggle selectedTradeAmountToggle) {
        if (updatingUi || selectedTradeAmountToggle == null) {
            return;
        }
        applyUiControlsToDisputeResult(selectedTradeAmountToggle);
        applyDisputeResultToUiControls();
    }

    private void applyUiControlsToDisputeResult(Toggle selectedTradeAmountToggle) {
        Contract contract = dispute.getContract();
        Offer offer = new Offer(contract.getOfferPayload());
        Coin buyerSecurityDeposit = offer.getBuyerSecurityDeposit();
        Coin sellerSecurityDeposit = offer.getSellerSecurityDeposit();
        Coin tradeAmount = contract.getTradeAmount();
        Coin totalPot = tradeAmount.add(buyerSecurityDeposit).add(sellerSecurityDeposit);
        // At mediation we require a min. payout to the losing party to keep incentive for the trader to accept the
        // mediated payout. For Refund agent cases we do not have that restriction.
        Coin minRefundAtDispute = isMediationDispute() ? Restrictions.getMinRefundAtMediatedDispute() : Coin.ZERO;

        Coin penalizedPortionOfTradeAmount = Coin.ZERO;
        try {
            disputeResult.setPayoutAdjustmentPercent(compensationOrPenalty.getText().replaceAll(""[^0-9]"", """"));
            double percentPenalty = ParsingUtils.parsePercentStringToDouble(disputeResult.getPayoutAdjustmentPercent());
            penalizedPortionOfTradeAmount = Coin.valueOf((long) (contract.getTradeAmount().getValue() * percentPenalty));
        } catch (NumberFormatException | NullPointerException e) {
            log.warn(e.toString());
        }

        if (selectedTradeAmountToggle == buyerGetsTradeAmountRadioButton) {
            disputeResult.setPayoutSuggestion(DisputeResult.PayoutSuggestion.BUYER_GETS_TRADE_AMOUNT);
            disputeResult.setBuyerPayoutAmount(tradeAmount.add(buyerSecurityDeposit));
            disputeResult.setSellerPayoutAmount(sellerSecurityDeposit);
            disputeResult.setPayoutAdjustmentPercent("""");
        } else if (selectedTradeAmountToggle == sellerGetsTradeAmountRadioButton) {
            disputeResult.setPayoutSuggestion(DisputeResult.PayoutSuggestion.SELLER_GETS_TRADE_AMOUNT);
            disputeResult.setBuyerPayoutAmount(buyerSecurityDeposit);
            disputeResult.setSellerPayoutAmount(tradeAmount.add(sellerSecurityDeposit));
            disputeResult.setPayoutAdjustmentPercent("""");
        } else if (selectedTradeAmountToggle == buyerGetsTradeAmountMinusPenaltyRadioButton) {
            disputeResult.setPayoutSuggestion(DisputeResult.PayoutSuggestion.BUYER_GETS_TRADE_AMOUNT_MINUS_PENALTY);
            Coin buyerPayout = tradeAmount.add(offer.getBuyerSecurityDeposit()).subtract(penalizedPortionOfTradeAmount);
            disputeResult.setBuyerPayoutAmount(buyerPayout);
            disputeResult.setSellerPayoutAmount(totalPot.subtract(buyerPayout));
        } else if (selectedTradeAmountToggle == sellerGetsTradeAmountMinusPenaltyRadioButton) {
            disputeResult.setPayoutSuggestion(DisputeResult.PayoutSuggestion.SELLER_GETS_TRADE_AMOUNT_MINUS_PENALTY);
            Coin sellerPayout = tradeAmount.add(offer.getBuyerSecurityDeposit()).subtract(penalizedPortionOfTradeAmount);
            disputeResult.setSellerPayoutAmount(sellerPayout);
            disputeResult.setBuyerPayoutAmount(totalPot.subtract(sellerPayout));
        } else if (selectedTradeAmountToggle == buyerGetsCompensationRadioButton) {
            disputeResult.setPayoutSuggestion(DisputeResult.PayoutSuggestion.BUYER_GETS_TRADE_AMOUNT_PLUS_COMPENSATION);
            Coin buyerPayout = tradeAmount.add(offer.getBuyerSecurityDeposit()).add(penalizedPortionOfTradeAmount);
            disputeResult.setBuyerPayoutAmount(buyerPayout);
            disputeResult.setSellerPayoutAmount(totalPot.subtract(buyerPayout));
        } else if (selectedTradeAmountToggle == sellerGetsCompensationRadioButton) {
            disputeResult.setPayoutSuggestion(DisputeResult.PayoutSuggestion.SELLER_GETS_TRADE_AMOUNT_PLUS_COMPENSATION);
            Coin sellerPayout = tradeAmount.add(offer.getSellerSecurityDeposit()).add(penalizedPortionOfTradeAmount);
            disputeResult.setSellerPayoutAmount(sellerPayout);
            disputeResult.setBuyerPayoutAmount(totalPot.subtract(sellerPayout));
        } else {
            disputeResult.setPayoutSuggestion(DisputeResult.PayoutSuggestion.CUSTOM_PAYOUT);
            disputeResult.setPayoutAdjustmentPercent("""");
        }

        // enforce rule that we cannot pay out less than minRefundAtDispute
        if (disputeResult.getBuyerPayoutAmount().isLessThan(minRefundAtDispute)) {
            disputeResult.setBuyerPayoutAmount(minRefundAtDispute);
            disputeResult.setSellerPayoutAmount(totalPot.subtract(minRefundAtDispute));
        } else if (disputeResult.getSellerPayoutAmount().isLessThan(minRefundAtDispute)) {
            disputeResult.setSellerPayoutAmount(minRefundAtDispute);
            disputeResult.setBuyerPayoutAmount(totalPot.subtract(minRefundAtDispute));
        }

        // winner is the one who receives most from the multisig, or if equal, the buyer.
        // (winner is used to decide who publishes the tx)
        disputeResult.setWinner(disputeResult.getSellerPayoutAmount().isLessThan(disputeResult.getBuyerPayoutAmount()) ?
                DisputeResult.Winner.BUYER : DisputeResult.Winner.BUYER);
    }

    private void applyDisputeResultToUiControls() {
        updatingUi = true;
        buyerPayoutAmountInputTextField.setText(formatter.formatCoin(disputeResult.getBuyerPayoutAmount()));
        sellerPayoutAmountInputTextField.setText(formatter.formatCoin(disputeResult.getSellerPayoutAmount()));
        compensationOrPenalty.setText(disputeResult.getPayoutAdjustmentPercent());
        if (disputeResult.getPayoutSuggestion() == DisputeResult.PayoutSuggestion.BUYER_GETS_TRADE_AMOUNT) {
            buyerGetsTradeAmountRadioButton.setSelected(true);
        } else if (disputeResult.getPayoutSuggestion() == DisputeResult.PayoutSuggestion.SELLER_GETS_TRADE_AMOUNT) {
            sellerGetsTradeAmountRadioButton.setSelected(true);
        } else if (disputeResult.getPayoutSuggestion() == DisputeResult.PayoutSuggestion.BUYER_GETS_TRADE_AMOUNT_PLUS_COMPENSATION) {
            buyerGetsCompensationRadioButton.setSelected(true);
        } else if (disputeResult.getPayoutSuggestion() == DisputeResult.PayoutSuggestion.SELLER_GETS_TRADE_AMOUNT_PLUS_COMPENSATION) {
            sellerGetsCompensationRadioButton.setSelected(true);
        } else if (disputeResult.getPayoutSuggestion() == DisputeResult.PayoutSuggestion.BUYER_GETS_TRADE_AMOUNT_MINUS_PENALTY) {
            buyerGetsTradeAmountMinusPenaltyRadioButton.setSelected(true);
        } else if (disputeResult.getPayoutSuggestion() == DisputeResult.PayoutSuggestion.SELLER_GETS_TRADE_AMOUNT_MINUS_PENALTY) {
            sellerGetsTradeAmountMinusPenaltyRadioButton.setSelected(true);
        } else if (disputeResult.getPayoutSuggestion() == DisputeResult.PayoutSuggestion.CUSTOM_PAYOUT) {
            customRadioButton.setSelected(true);
        } else {
            // the option was not set, this will apply to older records before PayoutSuggestion was persisted
            // what it used to do was infer the option based on the payout amounts
            Contract contract = dispute.getContract();
            Offer offer = new Offer(contract.getOfferPayload());
            Coin buyerSecurityDeposit = offer.getBuyerSecurityDeposit();
            Coin sellerSecurityDeposit = offer.getSellerSecurityDeposit();
            Coin tradeAmount = contract.getTradeAmount();
            Coin totalPot = tradeAmount.add(buyerSecurityDeposit).add(sellerSecurityDeposit);
            Coin minRefundAtDispute = isMediationDispute() ? Restrictions.getMinRefundAtMediatedDispute() : Coin.ZERO;
            Coin maxPayoutAmount = totalPot.subtract(minRefundAtDispute);
            if (disputeResult.getBuyerPayoutAmount().equals(tradeAmount.add(buyerSecurityDeposit)) &&
                    disputeResult.getSellerPayoutAmount().equals(sellerSecurityDeposit)) {
                buyerGetsTradeAmountRadioButton.setSelected(true);
            } else if (disputeResult.getBuyerPayoutAmount().equals(maxPayoutAmount) &&
                    disputeResult.getSellerPayoutAmount().equals(minRefundAtDispute)) {
                buyerGetsCompensationRadioButton.setSelected(true);
            } else if (disputeResult.getSellerPayoutAmount().equals(tradeAmount.add(sellerSecurityDeposit))
                    && disputeResult.getBuyerPayoutAmount().equals(buyerSecurityDeposit)) {
                sellerGetsTradeAmountRadioButton.setSelected(true);
            } else if (disputeResult.getSellerPayoutAmount().equals(maxPayoutAmount)
                    && disputeResult.getBuyerPayoutAmount().equals(minRefundAtDispute)) {
                sellerGetsCompensationRadioButton.setSelected(true);
            } else {
                customRadioButton.setSelected(true);
            }
        }
        updatingUi = false;
    }

    private void checkDelayedPayoutTransaction() {
        if (dispute.getDelayedPayoutTxId() == null)
            return;
        mempoolService.checkTxIsConfirmed(dispute.getDelayedPayoutTxId(), (validator -> {
            long confirms = validator.parseJsonValidateTx();
            log.info(""Mempool check confirmation status of DelayedPayoutTxId returned: [{}]"", confirms);
            displayPayoutStatus(confirms);
        }));
    }

    private void displayPayoutStatus(long nConfirmStatus) {
        if (delayedPayoutTxStatus != null) {
            String status = Res.get(""confidence.unknown"");
            if (nConfirmStatus == 0)
                status = Res.get(""confidence.seen"", 1);
            else if (nConfirmStatus > 0)
                status = Res.get(""confidence.confirmed"", nConfirmStatus);
            delayedPayoutTxStatus.setText(status);
        }
    }
}",1,64 2000 777 587 2001 650 2002 60 2001 62 123 773 657 2003 2004 59 773 657 2005 2006 59 773 657 2007 2008 59 773 657 2009 2010 59 773 657 2011 2012 59 773 657 2013 2014 59 773 657 2015 2016 59 773 657 2017 2018 59 773 2019 2020 59 773 2021 60 2022 62 2023 61 2021 46 2024 40 41 59 773 2025 2026 44 2027 59 773 2028 2029 59 773 2030 2031 44 2032 44 2033 44 2034 44 2035 44 2036 44 2037 59 773 2030 2038 44 2039 44 2040 44 2041 44 2042 44 2043 44 2044 44 2045 44 2046 44 2047 44 2048 44 2049 59 330 773 2021 60 2019 62 2050 59 773 2051 2052 59 773 2053 2054 59 773 2055 2056 59 773 2057 60 2058 62 2059 44 2060 44 2061 59 773 2057 60 2062 62 2063 59 773 2064 2065 44 2066 44 2067 59 773 2057 60 2058 62 2068 44 2069 59 773 2057 60 2062 62 2070 59 773 2057 60 2051 62 2071 59 773 570 2072 61 2073 59 331 330 331 64 2074 777 2001 40 64 2075 40 2076 46 2077 41 2003 2004 44 2005 2006 44 2007 2008 44 2009 2010 44 2011 2012 44 2013 2014 44 2015 2016 44 2017 2018 41 123 823 46 2004 61 2004 59 823 46 2006 61 2006 59 823 46 2008 61 2008 59 823 46 2010 61 2010 59 823 46 2012 61 2012 59 823 46 2014 61 2014 59 823 46 2016 61 2016 59 823 46 2018 61 2018 59 2078 61 2079 46 2080 59 125 777 865 2081 40 2019 2020 41 123 823 46 2020 61 2020 59 2082 61 45 1501 59 2083 61 1505 59 2084 40 41 59 2085 40 41 59 2086 40 41 59 2087 40 41 59 688 40 2088 46 2089 40 41 41 123 2090 46 2091 40 40 41 45 62 123 2056 46 2092 40 362 41 59 125 41 59 125 125 331 330 331 64 2093 775 865 2094 40 41 123 688 40 2027 340 2095 41 2027 46 2096 40 41 46 2097 40 2063 41 59 688 40 2037 340 2095 41 2037 46 2098 40 41 46 2097 40 2059 41 59 688 40 2031 340 2095 41 2031 46 2098 40 41 46 2097 40 2060 41 59 688 40 2032 340 2095 41 2032 46 2098 40 41 46 2097 40 2061 41 59 688 40 2026 340 2095 41 2026 46 2096 40 41 46 2097 40 2070 41 59 2099 40 41 59 125 64 2093 775 865 2100 40 2101 2102 41 123 688 40 33 2103 41 123 2102 46 2104 40 2105 45 62 123 688 40 2105 46 2106 40 41 323 2107 46 2108 41 123 2105 46 2109 40 41 59 2110 40 41 59 125 125 41 59 125 125 64 2093 775 865 2111 40 41 123 818 46 2111 40 41 59 2112 46 2113 40 744 2114 40 1503 44 1503 44 1500 44 1503 41 41 59 2112 46 2115 40 41 46 2116 40 362 41 59 2112 46 2117 40 41 46 2118 40 1500 41 46 2119 40 2120 46 2121 41 59 2112 46 2122 40 2123 41 59 125 773 865 2124 40 41 123 2125 2126 61 2020 46 2127 40 41 59 688 40 2020 46 2128 40 41 46 2129 40 41 323 2130 41 2029 61 744 2028 40 2020 46 2131 40 41 44 2020 46 2132 40 41 41 59 630 2029 61 2020 46 2128 40 41 46 2129 40 41 59 2050 61 2133 40 2134 40 2020 41 41 46 2135 40 41 46 2136 40 41 46 2137 40 2138 45 62 2020 46 2131 40 41 46 2139 40 2138 46 2131 40 41 41 307 2020 46 2132 40 41 340 2138 46 2132 40 41 41 46 2140 40 41 59 2141 40 41 59 2142 40 41 59 2143 40 41 59 2144 40 41 59 2145 40 41 59 570 2146 61 2050 46 2147 40 41 307 2050 46 2129 40 41 46 2148 40 41 59 688 40 2146 41 123 330 2028 2149 61 2050 46 2129 40 41 46 2128 40 41 46 2129 40 41 59 2029 46 2150 40 2149 46 2151 40 41 41 59 2029 46 2152 40 2149 46 2153 40 41 41 59 2029 46 2154 40 2149 46 2155 40 41 41 59 2029 46 2156 40 2149 46 2157 40 41 41 59 2029 46 2158 40 2149 46 2159 40 41 41 59 2029 46 2160 40 2149 46 2161 40 41 41 59 2029 46 2162 40 2149 46 2163 40 41 46 2129 40 41 41 59 2031 46 2164 40 2165 41 59 2033 46 2164 40 2165 41 59 2035 46 2164 40 2165 41 59 2032 46 2164 40 2165 41 59 2034 46 2164 40 2165 41 59 2036 46 2164 40 2165 41 59 2037 46 2164 40 2165 41 59 2065 46 2164 40 2165 41 59 2066 46 2164 40 2165 41 59 2067 46 2164 40 2165 41 59 2065 46 2166 40 2073 41 59 2066 46 2166 40 2073 41 59 2067 46 2166 40 2073 41 59 2038 46 2164 40 2165 41 59 2039 46 2164 40 2165 41 59 2040 46 2164 40 2165 41 59 2041 46 2164 40 2165 41 59 2042 46 2164 40 2165 41 59 2043 46 2164 40 2165 41 59 2044 46 2164 40 2165 41 59 2045 46 2164 40 2165 41 59 2046 46 2164 40 2165 41 59 2047 46 2164 40 2165 41 59 2048 46 2164 40 2165 41 59 2049 46 2164 40 2165 41 59 2145 40 41 59 125 2167 40 41 59 2168 40 41 59 2169 40 2126 41 59 125 773 865 2170 40 41 123 2171 2172 61 2020 46 2173 40 41 59 2174 40 2175 44 349 2176 44 1503 44 2177 46 2178 40 362 41 41 46 2179 40 41 46 2180 40 362 41 59 2181 40 2175 44 2176 44 2177 46 2178 40 362 41 44 2020 46 2182 40 41 44 2183 46 2184 41 59 2181 40 2175 44 349 2176 44 2177 46 2178 40 362 41 44 2185 46 2186 40 2020 46 2187 40 41 41 41 59 2052 61 2020 46 2188 40 41 59 2181 40 2175 44 349 2176 44 2177 46 2178 40 362 41 44 2052 41 59 2181 40 2175 44 349 2176 44 2177 46 2178 40 362 41 44 2004 46 2189 40 2172 46 2190 40 41 41 41 59 2181 40 2175 44 349 2176 44 2177 46 2178 40 362 41 44 2076 46 2191 40 2172 46 2192 40 41 41 41 59 2181 40 2175 44 349 2176 44 2177 46 2178 40 362 41 44 2193 46 2194 40 2172 46 2195 40 41 41 41 59 2051 2196 61 2177 46 2197 40 362 41 43 362 43 2004 46 2189 40 2172 46 2198 40 41 46 2199 40 41 41 43 362 43 2177 46 2197 40 362 41 43 362 43 2004 46 2189 40 2172 46 2198 40 41 46 2200 40 41 41 59 2181 40 2175 44 349 2176 44 2177 46 2178 40 362 41 44 2196 41 59 570 2201 61 2202 40 2020 41 702 2005 59 688 40 2201 41 123 688 40 2020 46 2203 40 41 46 2204 40 41 62 1500 41 123 2051 2205 61 2185 46 2186 40 2020 46 2203 40 41 41 59 2053 2206 61 2207 40 2175 44 349 2176 44 2177 46 2178 40 362 41 44 2205 41 46 2208 59 688 40 2020 46 2203 40 41 46 2209 40 41 46 2210 40 2211 46 2212 40 41 41 41 123 2206 46 2179 40 41 46 2180 40 362 41 59 330 125 125 688 40 2020 46 2213 40 41 340 2214 307 2020 46 2213 40 41 46 2215 40 41 62 1500 41 123 2051 2216 61 362 59 664 40 2217 46 2218 60 2051 44 2051 62 2219 58 2020 46 2213 40 41 46 2220 40 41 41 123 2216 348 362 43 2219 46 2221 40 41 43 362 43 2219 46 2222 40 41 43 362 59 125 2181 40 2175 44 349 2176 44 2177 46 2178 40 362 41 44 2216 41 59 125 125 630 123 2054 61 2223 40 2175 44 349 2176 44 2177 46 2178 40 362 41 44 362 41 46 2224 59 125 125 773 865 2225 40 41 123 2031 61 744 2226 40 2227 46 2228 40 362 44 2227 46 2228 40 362 41 41 41 59 2033 61 744 2226 40 2227 46 2228 40 362 44 2227 46 2228 40 362 41 41 41 59 2035 61 744 2226 40 2227 46 2228 40 362 44 2227 46 2228 40 362 41 41 41 59 2032 61 744 2226 40 2227 46 2228 40 362 44 2227 46 2228 40 362 41 41 41 59 2034 61 744 2226 40 2227 46 2228 40 362 44 2227 46 2228 40 362 41 41 41 59 2036 61 744 2226 40 2227 46 2228 40 362 44 2227 46 2228 40 362 41 41 41 59 2037 61 744 2226 40 2227 46 2228 40 362 41 41 59 2229 2230 61 744 2229 40 41 59 2230 46 2231 40 1502 41 59 2230 46 2232 40 41 46 2233 40 2031 44 2033 44 2035 44 2032 44 2034 44 2036 44 2037 41 59 2234 40 2235 44 349 2236 44 2227 46 2228 40 362 41 44 2230 44 1500 41 59 2026 61 744 2025 40 41 59 2031 46 2237 40 2026 41 59 2033 46 2237 40 2026 41 59 2035 46 2237 40 2026 41 59 2032 46 2237 40 2026 41 59 2034 46 2237 40 2026 41 59 2036 46 2237 40 2026 41 59 2037 46 2237 40 2026 41 59 2070 61 40 2238 44 2239 44 2240 41 45 62 2241 40 2240 41 59 2026 46 2242 40 41 46 2243 40 2070 41 59 2068 61 40 2238 44 2239 44 2240 41 45 62 2244 40 2065 44 2239 44 2240 41 59 2069 61 40 2238 44 2239 44 2240 41 45 62 2244 40 2066 44 2239 44 2240 41 59 2060 61 40 2238 44 2239 44 2240 41 45 62 123 2067 46 2245 40 33 2240 41 59 125 59 2031 46 2246 40 41 46 2243 40 2060 41 59 2061 61 40 2238 44 2239 44 2240 41 45 62 123 2067 46 2247 40 33 2240 41 59 125 59 2032 46 2246 40 41 46 2243 40 2061 41 59 2059 61 40 2238 44 2239 44 2240 41 45 62 123 2065 46 2248 40 2240 41 59 2066 46 2248 40 2240 41 59 2067 46 2248 40 33 2240 41 59 688 40 2240 41 123 2065 46 2249 40 41 46 2243 40 2068 41 59 2066 46 2249 40 41 46 2243 40 2069 41 59 125 630 123 2250 40 41 59 125 125 59 2037 46 2246 40 41 46 2243 40 2059 41 59 125 773 865 2251 40 41 123 688 40 2065 340 2252 307 2068 340 2252 41 2065 46 2253 40 41 46 2254 40 2068 41 59 688 40 2066 340 2252 307 2069 340 2252 41 2066 46 2253 40 41 46 2254 40 2069 41 59 125 773 570 2255 40 41 123 2256 2257 61 2258 46 2259 40 2065 46 2260 40 41 44 2004 41 59 2256 2261 61 2258 46 2259 40 2066 46 2260 40 41 44 2004 41 59 2262 2263 61 2020 46 2264 40 41 59 2256 2265 61 2263 46 2266 40 41 59 2267 2268 61 744 2267 40 2263 46 2269 40 41 41 59 2256 2270 61 2265 46 2271 40 2268 46 2272 40 41 41 46 2271 40 2268 46 2273 40 41 41 59 2256 2274 61 2257 46 2271 40 2261 41 59 570 2275 61 2276 40 2020 41 702 2007 59 688 40 2275 41 123 330 330 792 2274 46 2277 40 2270 41 329 1500 59 125 630 123 688 40 33 2274 46 2278 40 41 41 123 792 2073 59 125 792 2274 46 2279 40 2270 41 323 1500 59 125 125 773 865 2280 40 2064 2281 44 570 2282 44 570 2283 41 123 330 330 688 40 33 2282 309 2283 41 123 792 59 125 2284 2285 61 2020 46 2286 40 41 59 570 2287 61 2288 40 2020 41 702 2005 59 330 330 2289 2290 61 2287 63 2291 46 2292 40 41 58 2289 46 2293 59 2294 2295 61 744 2294 40 2285 46 2296 40 41 41 59 2289 2297 61 2285 46 2298 40 41 46 2299 40 2295 46 2300 40 41 41 46 2299 40 2295 46 2301 40 41 41 59 2289 2302 61 2297 46 2303 40 2290 41 59 2289 2304 61 2305 46 2306 40 2281 46 2307 40 41 44 2004 41 59 688 40 2304 46 2308 40 2290 41 60 1500 41 123 2304 61 2290 59 2281 46 2309 40 2004 46 2310 40 2304 41 41 59 125 688 40 2304 46 2311 40 41 307 33 2291 46 2312 40 2304 41 41 123 2304 61 2291 46 2313 40 41 59 2281 46 2314 40 2004 46 2315 40 2304 41 41 59 125 688 40 2304 46 2308 40 2302 41 62 1500 41 123 2304 61 2302 59 2281 46 2316 40 2004 46 2317 40 2304 41 41 59 125 2289 2318 61 2297 46 2303 40 2304 41 59 2051 2319 61 2004 46 2320 40 2318 41 59 2289 2321 59 2289 2322 59 688 40 2281 323 2065 41 123 2321 61 2304 59 2322 61 2318 59 2289 2323 61 2305 46 2306 40 2066 46 2307 40 41 44 2004 41 59 2289 2324 61 2304 46 2299 40 2323 41 59 330 688 40 2287 309 2324 46 2308 40 2297 41 62 1500 41 123 2066 46 2325 40 2319 41 59 125 630 123 2322 61 2323 59 125 125 630 123 2322 61 2304 59 2321 61 2318 59 2289 2326 61 2305 46 2306 40 2065 46 2307 40 41 44 2004 41 59 2289 2327 61 2304 46 2299 40 2326 41 59 330 688 40 2287 309 2327 46 2308 40 2297 41 62 1500 41 123 2065 46 2328 40 2319 41 59 125 630 123 2321 61 2326 59 125 125 2029 46 2329 40 2321 41 59 2029 46 2330 40 2322 41 59 2029 46 2331 40 2321 46 2308 40 2322 41 62 1500 63 2028 46 2332 46 2333 58 2028 46 2332 46 2334 41 59 125 773 865 2335 40 41 123 2065 61 744 2064 40 41 59 2065 46 2336 40 2337 41 59 2065 46 2338 40 2073 41 59 2065 46 2339 40 2340 46 2341 40 362 41 41 59 2066 61 744 2064 40 41 59 2066 46 2336 40 2337 41 59 2066 46 2339 40 2340 46 2341 40 362 41 41 59 2066 46 2338 40 2073 41 59 2067 61 744 2064 40 41 59 2067 46 2339 40 362 41 59 2067 46 2336 40 2337 41 59 2342 2343 61 744 2342 40 2067 41 59 2342 2344 61 744 2342 40 2065 44 2066 41 59 2344 46 2345 40 1503 41 59 2346 2347 61 744 2346 40 41 59 2347 46 2345 40 1503 41 59 2347 46 2348 40 41 46 2349 40 2343 44 2344 41 59 2350 46 2351 40 2347 44 744 2352 40 1503 44 1503 44 1503 44 1503 41 41 59 2350 46 2353 40 2347 44 2354 41 59 2350 46 2355 40 2347 44 1501 41 59 2356 46 2348 40 41 46 2357 40 2347 41 59 2071 61 40 2358 44 2359 44 2360 41 45 62 123 2361 40 2026 46 2362 40 41 46 2341 40 41 41 59 125 59 2067 46 2363 40 41 46 2364 40 2071 41 59 125 773 865 2365 40 41 123 2038 61 744 2366 40 2367 46 2368 40 362 43 2028 46 2369 46 2370 46 2371 40 41 41 41 59 2039 61 744 2366 40 2367 46 2368 40 362 43 2028 46 2369 46 2372 46 2371 40 41 41 41 59 2040 61 744 2366 40 2367 46 2368 40 362 43 2028 46 2369 46 2373 46 2371 40 41 41 41 59 2041 61 744 2366 40 2367 46 2368 40 362 43 2028 46 2369 46 2374 46 2371 40 41 41 41 59 2042 61 744 2366 40 2367 46 2368 40 362 43 2028 46 2369 46 2375 46 2371 40 41 41 41 59 2044 61 744 2366 40 2367 46 2368 40 362 43 2028 46 2369 46 2376 46 2371 40 41 41 41 59 2043 61 744 2366 40 2367 46 2368 40 362 43 2028 46 2369 46 2377 46 2371 40 41 41 41 59 2045 61 744 2366 40 2367 46 2368 40 362 43 2028 46 2369 46 2378 46 2371 40 41 41 41 59 2046 61 744 2366 40 2367 46 2368 40 362 43 2028 46 2369 46 2379 46 2371 40 41 41 41 59 2047 61 744 2366 40 2367 46 2368 40 362 43 2028 46 2369 46 2380 46 2371 40 41 41 41 59 2048 61 744 2366 40 2367 46 2368 40 362 43 2028 46 2369 46 2381 46 2371 40 41 41 41 59 2049 61 744 2366 40 2367 46 2368 40 362 43 2028 46 2369 46 2382 46 2371 40 41 41 41 59 2383 2384 61 744 2383 40 41 59 2384 46 2385 40 1503 41 59 330 330 2384 46 2386 40 41 46 2387 40 2049 44 2048 44 2045 44 2046 44 2047 44 2038 44 2039 44 2044 44 2043 41 59 2388 2389 61 2390 40 2391 44 349 2392 44 2367 46 2368 40 362 41 44 2384 44 1502 41 46 2393 59 2394 46 2395 40 2389 44 1502 41 59 2027 61 744 2025 40 41 59 2038 46 2396 40 2027 41 59 2039 46 2396 40 2027 41 59 2040 46 2396 40 2027 41 59 2041 46 2396 40 2027 41 59 2042 46 2396 40 2027 41 59 2043 46 2396 40 2027 41 59 2044 46 2396 40 2027 41 59 2045 46 2396 40 2027 41 59 2046 46 2396 40 2027 41 59 2047 46 2396 40 2027 41 59 2048 46 2396 40 2027 41 59 2049 46 2396 40 2027 41 59 2063 61 40 2397 44 2398 44 2399 41 45 62 123 688 40 2399 323 2038 41 123 2029 46 2400 40 2028 46 2369 46 2370 41 59 125 630 688 40 2399 323 2039 41 123 2029 46 2401 40 2028 46 2369 46 2372 41 59 125 630 688 40 2399 323 2040 41 123 2029 46 2402 40 2028 46 2369 46 2373 41 59 125 630 688 40 2399 323 2041 41 123 2029 46 2403 40 2028 46 2369 46 2374 41 59 125 630 688 40 2399 323 2042 41 123 2029 46 2404 40 2028 46 2369 46 2375 41 59 125 630 688 40 2399 323 2044 41 123 2029 46 2405 40 2028 46 2369 46 2376 41 59 125 630 688 40 2399 323 2043 41 123 2029 46 2406 40 2028 46 2369 46 2377 41 59 125 630 688 40 2399 323 2045 41 123 2029 46 2407 40 2028 46 2369 46 2378 41 59 125 630 688 40 2399 323 2046 41 123 2029 46 2408 40 2028 46 2369 46 2379 41 59 125 630 688 40 2399 323 2047 41 123 2029 46 2409 40 2028 46 2369 46 2380 41 59 125 630 688 40 2399 323 2049 41 123 2029 46 2410 40 2028 46 2369 46 2382 41 59 125 630 688 40 2399 323 2048 41 123 2029 46 2411 40 2028 46 2369 46 2381 41 59 125 125 59 2027 46 2412 40 41 46 2413 40 2063 41 59 125 773 865 2414 40 41 123 688 40 2029 46 2415 40 41 340 2416 41 123 819 40 2029 46 2415 40 41 41 123 579 2417 58 2027 46 2418 40 2038 41 59 572 59 579 2419 58 2027 46 2418 40 2039 41 59 572 59 579 2420 58 2027 46 2418 40 2040 41 59 572 59 579 2421 58 2027 46 2418 40 2041 41 59 572 59 579 2422 58 2027 46 2418 40 2042 41 59 572 59 579 2423 58 2027 46 2418 40 2044 41 59 572 59 579 2424 58 2027 46 2418 40 2043 41 59 572 59 579 2425 58 2027 46 2418 40 2045 41 59 572 59 579 2426 58 2027 46 2418 40 2046 41 59 572 59 579 2427 58 2027 46 2418 40 2047 41 59 572 59 579 2428 58 2027 46 2418 40 2048 41 59 572 59 579 2429 58 2027 46 2418 40 2049 41 59 572 59 125 125 125 773 865 2430 40 41 123 2056 61 744 2431 40 41 59 2056 46 2432 40 2433 46 2434 40 362 41 41 59 2056 46 2435 40 2436 41 59 2437 60 2053 44 2438 62 2439 61 2440 40 2441 44 349 2442 44 2433 46 2434 40 362 41 44 2056 44 1500 41 59 2443 46 2444 40 2439 46 2445 44 1502 41 59 2056 46 2446 40 1504 41 59 2056 46 2447 40 41 46 2448 40 2029 46 2449 40 41 41 59 125 773 865 2450 40 2451 2452 41 123 2453 60 2454 44 2454 44 2455 62 2456 61 2457 40 2458 44 349 2459 44 2460 46 2461 40 362 41 44 2460 46 2461 40 362 41 44 1503 44 2462 41 59 2454 2463 61 2456 46 2464 59 2463 46 2465 40 41 46 2466 40 2467 46 2468 40 40 41 45 62 2026 46 2469 40 41 323 2470 309 2056 46 2471 40 41 323 2470 309 2056 46 2471 40 41 46 2472 40 41 323 1500 309 33 2255 40 41 44 2026 46 2473 40 41 44 2056 46 2474 40 41 44 2065 46 2474 40 41 44 2066 46 2474 40 41 41 41 59 2454 2475 61 2456 46 2476 59 2463 46 2477 40 2478 45 62 123 688 40 2020 46 2479 40 41 323 2470 41 123 2480 46 2481 40 362 41 59 792 59 125 688 40 2020 46 2482 40 41 323 2483 46 2484 307 2050 46 2485 40 41 307 33 2050 46 2461 40 41 46 2486 40 41 41 123 2487 40 2452 44 2029 44 40 41 45 62 2488 40 2463 41 41 59 125 630 123 2489 40 2463 41 59 125 125 41 59 2475 46 2477 40 2478 45 62 123 2020 46 2490 40 2029 41 59 2491 40 2492 40 2020 41 41 46 2493 40 41 59 2494 40 41 59 125 41 59 125 773 865 2495 40 2451 2452 44 2028 2029 44 2496 2497 41 123 688 40 2020 46 2498 40 41 41 123 744 2499 40 41 46 2500 40 2501 46 2502 40 362 41 41 46 2503 40 2501 46 2502 40 362 41 41 46 2504 40 2501 46 2502 40 362 41 41 46 2081 40 41 59 125 2505 2506 61 2029 46 2507 40 41 59 2051 2508 61 2452 46 2509 40 41 59 2505 2510 61 2029 46 2511 40 41 59 2051 2512 61 2452 46 2513 40 41 59 2505 2514 61 2506 46 2515 40 2510 41 59 2516 60 2505 44 2517 62 2518 61 2014 46 2519 40 2514 44 2012 41 59 2505 2520 61 2518 46 2521 59 2517 2522 61 2518 46 2523 59 625 2524 61 2525 46 2526 40 2520 44 2522 41 59 625 2527 61 2522 47 1504 59 2505 2528 61 2514 46 2515 40 2520 41 59 2051 2529 61 362 59 688 40 2506 46 2530 40 41 41 123 2529 61 2531 46 2532 40 362 44 2004 46 2533 40 2506 41 44 2508 41 59 125 2051 2534 61 362 59 688 40 2510 46 2530 40 41 41 123 2534 61 2535 46 2536 40 362 44 2004 46 2537 40 2510 41 44 2512 41 59 125 688 40 2514 46 2530 40 41 41 123 744 2538 40 41 46 2539 40 1504 41 46 2540 40 2541 46 2542 40 362 41 41 46 2543 40 2541 46 2542 40 362 44 2004 46 2544 40 2528 41 44 2529 44 2534 44 2004 46 2544 40 2520 41 44 2524 44 2527 41 41 46 2545 40 2541 46 2542 40 362 41 41 46 2546 40 40 41 45 62 123 2547 40 2506 44 2510 44 2520 44 2508 44 2512 44 2497 41 59 125 41 46 2548 40 2541 46 2542 40 362 41 41 46 2081 40 41 59 125 630 123 330 744 2549 40 41 46 2550 40 2551 46 2552 40 362 41 41 46 2553 40 2551 46 2552 40 362 41 41 46 2554 40 2551 46 2552 40 362 41 41 46 2555 40 2497 58 58 2556 41 46 2557 40 2551 46 2552 40 362 41 41 46 2081 40 41 59 125 125 773 865 2558 40 2559 2560 44 2559 2561 44 2559 2562 44 2051 2563 44 2051 2564 44 2496 2497 41 123 688 40 2020 46 2565 40 41 41 123 2566 46 2567 40 362 44 2020 46 2568 40 41 41 59 792 59 125 2020 46 2569 40 2570 41 59 830 123 2571 2572 61 2012 46 2573 40 2560 44 2561 44 2562 44 2563 44 2564 41 59 2010 46 2574 40 2572 44 744 2575 46 2576 40 41 123 64 2093 777 865 2577 40 2571 2578 41 123 2497 46 2579 40 41 59 125 64 2093 777 865 2580 40 2581 2582 41 123 2583 46 2584 40 362 44 2582 41 59 744 2585 40 41 46 2584 40 2582 46 2586 40 41 41 46 2081 40 41 59 125 125 41 59 125 580 40 2587 124 2588 124 2589 2590 41 123 2591 46 2592 40 362 44 2590 41 59 744 2593 40 41 46 2592 40 2590 46 2594 40 41 41 46 2081 40 41 59 125 125 773 865 2595 40 2596 2597 41 123 2598 2599 61 2600 40 2601 40 2020 41 41 59 830 123 2602 46 2603 40 2020 46 2604 40 41 44 2018 41 59 2602 46 2605 40 2020 44 2599 46 2606 40 41 41 59 2607 40 2597 41 59 125 580 40 2608 46 2609 2610 41 123 2051 2611 61 2020 46 2612 40 41 59 2051 2613 61 2020 46 2614 40 41 59 330 330 688 40 2599 702 2005 41 123 744 2615 40 41 46 2616 40 1504 41 46 2617 40 2618 46 2619 40 362 44 2611 44 2018 46 2620 40 41 44 2613 44 2618 46 2619 40 362 41 41 41 46 2621 40 40 41 45 62 123 2622 40 2597 41 59 125 41 46 2623 40 2618 46 2619 40 362 41 41 46 2624 40 2618 46 2619 40 362 41 41 46 2081 40 41 59 125 630 123 744 2625 40 41 46 2626 40 1504 41 46 2627 40 2628 46 2629 40 362 44 2611 44 2018 46 2630 40 41 44 2613 44 2628 46 2629 40 362 41 41 41 46 2081 40 41 59 125 125 580 40 2608 46 2631 2610 41 123 688 40 2599 702 2005 41 123 2632 46 2633 40 362 44 2610 41 59 744 2634 40 41 46 2635 40 1504 41 46 2636 40 2610 46 2637 40 41 41 46 2638 40 40 41 45 62 123 2639 40 2597 41 59 125 41 46 2640 40 2641 46 2642 40 362 41 41 46 2643 40 2641 46 2642 40 362 41 41 46 2081 40 41 59 125 630 123 2644 46 2645 40 362 44 2610 41 59 744 2646 40 41 46 2647 40 1504 41 46 2648 40 2610 46 2649 40 41 41 46 2081 40 41 59 125 125 125 773 865 2650 40 2596 2597 41 123 2651 60 63 650 2652 60 2019 356 2653 61 2654 40 2020 41 59 688 40 2653 323 2655 41 123 792 59 125 570 2656 61 2653 702 2007 59 2029 46 2657 40 2073 41 59 330 2029 46 2658 40 744 2659 40 41 41 59 2020 46 2660 40 2029 41 59 2020 46 2661 40 41 59 2028 46 2662 2663 61 2029 46 2664 40 41 59 2056 46 2665 40 41 46 2666 40 2029 46 2667 40 41 41 59 2051 2052 61 2656 63 2668 46 2669 40 362 41 58 2668 46 2669 40 362 41 59 2051 2670 61 2671 40 2653 46 2672 40 2020 41 41 46 2673 40 41 59 2451 2452 61 2020 46 2674 40 41 59 2051 2675 61 2452 46 2676 40 41 46 2677 40 41 59 2051 2678 61 2004 46 2679 40 2452 46 2680 40 41 41 59 2051 2681 61 2668 46 2669 40 362 44 2682 46 2683 40 2029 46 2684 40 41 41 44 2052 44 2670 44 2020 46 2685 40 41 44 2675 44 2678 44 2004 46 2679 40 2029 46 2686 40 41 41 44 2004 46 2679 40 2029 46 2687 40 41 41 44 2668 46 2669 40 362 43 2663 46 2688 40 41 41 44 2029 46 2667 40 41 46 2669 40 41 41 59 688 40 2663 323 2028 46 2662 46 2689 307 2020 46 2690 40 41 46 2691 40 41 62 1501 307 2020 46 2690 40 41 46 2669 40 1501 41 46 2692 40 41 41 123 2681 348 362 43 2020 46 2690 40 41 46 2669 40 1501 41 46 2693 40 41 43 362 59 125 2051 2694 61 2695 46 2696 40 2653 44 2029 44 2681 41 59 688 40 2656 41 123 2694 348 2668 46 2669 40 362 41 59 125 630 123 2694 348 2668 46 2669 40 362 41 59 125 2653 46 2697 40 2029 44 2020 44 2694 41 59 688 40 2050 46 2698 40 41 307 33 2050 46 2669 40 41 46 2699 40 41 307 33 2700 46 2701 40 41 41 123 2702 46 2703 40 40 41 45 62 744 2704 40 41 46 2705 40 2668 46 2669 40 362 41 41 46 2081 40 41 44 1504 44 2706 46 2707 41 59 125 2023 46 2708 40 2022 58 58 2709 41 59 2653 46 2710 40 41 59 2597 46 2711 40 41 46 2712 40 41 59 2713 40 41 59 125 773 2714 60 63 650 2715 60 2019 356 2716 40 2019 2020 41 123 688 40 2020 46 2717 40 41 340 2718 41 123 819 40 2020 46 2717 40 41 41 123 579 2719 58 792 2718 59 579 2720 58 792 2006 59 579 2721 58 572 59 579 2722 58 792 2008 59 125 125 792 2718 59 125 331 330 331 773 570 2723 40 41 123 792 2716 40 2020 41 702 2005 59 125 330 773 865 2724 40 2062 2725 41 123 688 40 2072 309 2725 323 2726 41 123 792 59 125 2727 40 2725 41 59 2728 40 41 59 125 773 865 2729 40 2062 2725 41 123 2451 2452 61 2020 46 2730 40 41 59 2731 2732 61 744 2731 40 2452 46 2733 40 41 41 59 2559 2734 61 2732 46 2735 40 41 59 2559 2736 61 2732 46 2737 40 41 59 2559 2738 61 2452 46 2739 40 41 59 2559 2740 61 2738 46 2741 40 2734 41 46 2741 40 2736 41 59 330 330 2559 2742 61 2723 40 41 63 2743 46 2744 40 41 58 2559 46 2745 59 2559 2746 61 2559 46 2745 59 830 123 2029 46 2747 40 2067 46 2748 40 41 46 2749 40 362 44 362 41 41 59 625 2750 61 2751 46 2752 40 2029 46 2753 40 41 41 59 2746 61 2559 46 2754 40 40 726 41 40 2452 46 2739 40 41 46 2755 40 41 42 2750 41 41 59 125 580 40 2756 124 2757 2758 41 123 2759 46 2760 40 2758 46 2761 40 41 41 59 125 688 40 2725 323 2031 41 123 2029 46 2762 40 2028 46 2763 46 2764 41 59 2029 46 2765 40 2738 46 2741 40 2734 41 41 59 2029 46 2766 40 2736 41 59 2029 46 2767 40 362 41 59 125 630 688 40 2725 323 2032 41 123 2029 46 2768 40 2028 46 2769 46 2770 41 59 2029 46 2771 40 2734 41 59 2029 46 2772 40 2738 46 2741 40 2736 41 41 59 2029 46 2773 40 362 41 59 125 630 688 40 2725 323 2035 41 123 2029 46 2774 40 2028 46 2775 46 2776 41 59 2559 2777 61 2738 46 2741 40 2732 46 2735 40 41 41 46 2778 40 2746 41 59 2029 46 2779 40 2777 41 59 2029 46 2780 40 2740 46 2778 40 2777 41 41 59 125 630 688 40 2725 323 2036 41 123 2029 46 2781 40 2028 46 2782 46 2783 41 59 2559 2784 61 2738 46 2741 40 2732 46 2735 40 41 41 46 2785 40 2746 41 59 2029 46 2786 40 2784 41 59 2029 46 2787 40 2740 46 2785 40 2784 41 41 59 125 630 688 40 2725 323 2033 41 123 2029 46 2788 40 2028 46 2789 46 2790 41 59 2559 2791 61 2738 46 2741 40 2732 46 2735 40 41 41 46 2741 40 2746 41 59 2029 46 2792 40 2791 41 59 2029 46 2793 40 2740 46 2794 40 2791 41 41 59 125 630 688 40 2725 323 2034 41 123 2029 46 2795 40 2028 46 2796 46 2797 41 59 2559 2798 61 2738 46 2741 40 2732 46 2737 40 41 41 46 2741 40 2746 41 59 2029 46 2799 40 2798 41 59 2029 46 2800 40 2740 46 2801 40 2798 41 41 59 125 630 123 2029 46 2802 40 2028 46 2803 46 2804 41 59 2029 46 2805 40 362 41 59 125 330 688 40 2029 46 2806 40 41 46 2807 40 2742 41 41 123 2029 46 2808 40 2742 41 59 2029 46 2809 40 2740 46 2810 40 2742 41 41 59 125 630 688 40 2029 46 2811 40 41 46 2807 40 2742 41 41 123 2029 46 2812 40 2742 41 59 2029 46 2813 40 2740 46 2814 40 2742 41 41 59 125 330 330 2029 46 2815 40 2029 46 2811 40 41 46 2807 40 2029 46 2806 40 41 41 63 2028 46 2816 46 2817 58 2028 46 2816 46 2817 41 59 125 773 865 2818 40 41 123 2072 61 2819 59 2065 46 2820 40 2004 46 2821 40 2029 46 2822 40 41 41 41 59 2066 46 2820 40 2004 46 2821 40 2029 46 2823 40 41 41 41 59 2067 46 2820 40 2029 46 2824 40 41 41 59 688 40 2029 46 2825 40 41 323 2028 46 2826 46 2827 41 123 2031 46 2828 40 2819 41 59 125 630 688 40 2029 46 2825 40 41 323 2028 46 2826 46 2829 41 123 2032 46 2830 40 2819 41 59 125 630 688 40 2029 46 2825 40 41 323 2028 46 2826 46 2831 41 123 2033 46 2832 40 2819 41 59 125 630 688 40 2029 46 2825 40 41 323 2028 46 2826 46 2833 41 123 2034 46 2834 40 2819 41 59 125 630 688 40 2029 46 2825 40 41 323 2028 46 2826 46 2835 41 123 2035 46 2836 40 2819 41 59 125 630 688 40 2029 46 2825 40 41 323 2028 46 2826 46 2837 41 123 2036 46 2838 40 2819 41 59 125 630 688 40 2029 46 2825 40 41 323 2028 46 2826 46 2839 41 123 2037 46 2840 40 2819 41 59 125 630 123 330 330 2451 2452 61 2020 46 2841 40 41 59 2842 2843 61 744 2842 40 2452 46 2844 40 41 41 59 2559 2845 61 2843 46 2846 40 41 59 2559 2847 61 2843 46 2848 40 41 59 2559 2849 61 2452 46 2850 40 41 59 2559 2851 61 2849 46 2852 40 2845 41 46 2852 40 2847 41 59 2559 2853 61 2723 40 41 63 2854 46 2855 40 41 58 2559 46 2856 59 2559 2857 61 2851 46 2858 40 2853 41 59 688 40 2029 46 2822 40 41 46 2859 40 2849 46 2852 40 2845 41 41 307 2029 46 2823 40 41 46 2859 40 2847 41 41 123 2031 46 2860 40 2819 41 59 125 630 688 40 2029 46 2822 40 41 46 2859 40 2857 41 307 2029 46 2823 40 41 46 2859 40 2853 41 41 123 2033 46 2861 40 2819 41 59 125 630 688 40 2029 46 2823 40 41 46 2859 40 2849 46 2852 40 2847 41 41 307 2029 46 2822 40 41 46 2859 40 2845 41 41 123 2032 46 2862 40 2819 41 59 125 630 688 40 2029 46 2823 40 41 46 2859 40 2857 41 307 2029 46 2822 40 41 46 2859 40 2853 41 41 123 2034 46 2863 40 2819 41 59 125 630 123 2037 46 2864 40 2819 41 59 125 125 2072 61 2073 59 125 773 865 2865 40 41 123 688 40 2020 46 2866 40 41 323 2867 41 792 59 2016 46 2868 40 2020 46 2866 40 41 44 40 2869 45 62 123 726 2870 61 2869 46 2871 40 41 59 2872 46 2873 40 362 44 2870 41 59 2874 40 2870 41 59 125 41 41 59 125 773 865 2875 40 726 2876 41 123 688 40 2054 340 2877 41 123 2051 2878 61 2879 46 2880 40 362 41 59 688 40 2876 323 1500 41 2878 61 2879 46 2880 40 362 44 1501 41 59 630 688 40 2876 62 1500 41 2878 61 2879 46 2880 40 362 44 2876 41 59 2054 46 2881 40 2878 41 59 125 125 125 ,"{'AvgLine': 33, 'CountLine': 992, 'CountStmt': 586, 'MaxNesting': 3, 'AvgLineCode': 30, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 519, 'MaxEssential': 6, 'SumEssential': 53, 'AvgCyclomatic': 4, 'CountLineCode': 861, 'CountStmtDecl': 148, 'MaxCyclomatic': 14, 'SumCyclomatic': 150, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 99, 'CountSemicolon': 472, 'CountDeclMethod': 27, 'CountLineCodeExe': 709, 'CountLineComment': 34, 'CountClassCoupled': 69, 'CountClassDerived': 0, 'CountLineCodeDecl': 176, 'CountDeclMethodAll': 96, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 17, 'SumCyclomaticStrict': 173, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 13, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 136, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 22, 'CountDeclInstanceMethod': 27, 'CountDeclMethodProtected': 3, 'CountClassCoupledModified': 69, 'CountDeclInstanceVariable': 48, 'PercentLackOfCohesionModified': 80}"
26265,Java,"public class AuthServerSettings {

    private static String gameServerListenHost;
    private static int gameServerListenPort;
    private static String hostName;
    private static int port;
    private static boolean autoCreateAccount;
    private static int authTriesBeforeBan;
    private static int authBlockAfterBan;
    private static boolean acceptNewGameServer;
    private static String usernameTemplate;
    private static int gmMinimumLevel;
    private static String authKey;

    private AuthServerSettings() {
        // helper class
    }

    public static void load(SettingsFile settingsFile) {
        gameServerListenHost = settingsFile.getString(""GameServerListenHostname"", ""*"");
        gameServerListenPort = settingsFile.getInt(""GameServerListenPort"", 9013);
        hostName = settingsFile.getString(""Hostname"", ""*"");
        port = settingsFile.getInt(""Port"", 2106);
        autoCreateAccount = settingsFile.getBoolean(""AutoCreateAccounts"", false);
        authTriesBeforeBan = settingsFile.getInt(""AuthTriesBeforeBan"", 10);
        authBlockAfterBan = settingsFile.getInt(""AuthBlockAfterBan"", 600);
        acceptNewGameServer = settingsFile.getBoolean(""AcceptNewGameServer"", false);
        usernameTemplate = settingsFile.getString(""UsernameTemplate"", ""[A-Za-z0-9_]{5,32}"");
        gmMinimumLevel = settingsFile.getInt(""GMMinLevel"", 100);
        authKey = settingsFile.getString(""AuthKey"", """");
    }

    public static String gameServerListenHost() {
        return gameServerListenHost;
    }

    public static int gameServerListenPort() {
        return gameServerListenPort;
    }

    public static String listenHost() {
        return hostName;
    }

    public static int listenPort() {
        return port;
    }

    public static boolean isAutoCreateAccount(){
        return autoCreateAccount;
    }

    public static int authTriesBeforeBan(){
        return authTriesBeforeBan;
    }

    public static int loginBlockAfterBan() {
        return authBlockAfterBan;
    }

    public static boolean acceptNewGameServerEnabled() {
        return acceptNewGameServer;
    }

    public static String usernameTemplate() {
        return usernameTemplate;
    }

    public static int gmMinimumLevel() {
        return gmMinimumLevel;
    }

    public static boolean acceptKey(String key) {
        return Util.isNullOrEmpty(authKey) || authKey.equals(key);
    }
}",1,777 587 2000 123 773 809 2001 2002 59 773 809 704 2003 59 773 809 2001 2004 59 773 809 704 2005 59 773 809 570 2006 59 773 809 704 2007 59 773 809 704 2008 59 773 809 570 2009 59 773 809 2001 2010 59 773 809 704 2011 59 773 809 2001 2012 59 773 2000 40 41 123 330 125 777 809 865 2013 40 2014 2015 41 123 2002 61 2015 46 2016 40 362 44 362 41 59 2003 61 2015 46 2017 40 362 44 1505 41 59 2004 61 2015 46 2016 40 362 44 362 41 59 2005 61 2015 46 2017 40 362 44 1505 41 59 2006 61 2015 46 2018 40 362 44 2019 41 59 2007 61 2015 46 2017 40 362 44 1502 41 59 2008 61 2015 46 2017 40 362 44 1504 41 59 2009 61 2015 46 2018 40 362 44 2019 41 59 2010 61 2015 46 2016 40 362 44 362 41 59 2011 61 2015 46 2017 40 362 44 1503 41 59 2012 61 2015 46 2016 40 362 44 362 41 59 125 777 809 2001 2002 40 41 123 792 2002 59 125 777 809 704 2003 40 41 123 792 2003 59 125 777 809 2001 2020 40 41 123 792 2004 59 125 777 809 704 2021 40 41 123 792 2005 59 125 777 809 570 2022 40 41 123 792 2006 59 125 777 809 704 2007 40 41 123 792 2007 59 125 777 809 704 2023 40 41 123 792 2008 59 125 777 809 570 2024 40 41 123 792 2009 59 125 777 809 2001 2010 40 41 123 792 2010 59 125 777 809 704 2011 40 41 123 792 2011 59 125 777 809 570 2025 40 2001 2026 41 123 792 2027 46 2028 40 2012 41 309 2012 46 2029 40 2026 41 59 125 125 ,"{'AvgLine': 3, 'CountLine': 76, 'CountStmt': 47, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 61, 'CountStmtDecl': 25, 'MaxCyclomatic': 1, 'SumCyclomatic': 13, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 14, 'CountSemicolon': 33, 'CountDeclMethod': 13, 'CountLineCodeExe': 22, 'CountLineComment': 1, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 25, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.02', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 14, 'CountDeclClassMethod': 12, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 12, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 84, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 11, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 84}"
2476,Java,"public class BlockStateInterface {

    private final Long2ObjectMap<Chunk> loadedChunks;
    private final WorldData worldData;
    protected final IBlockAccess world;
    public final BlockPos.MutableBlockPos isPassableBlockPos;
    public final IBlockAccess access;

    private Chunk prev = null;
    private CachedRegion prevCached = null;

    private final boolean useTheRealWorld;

    private static final IBlockState AIR = Blocks.AIR.getDefaultState();

    public BlockStateInterface(IPlayerContext ctx) {
        this(ctx, false);
    }

    public BlockStateInterface(IPlayerContext ctx, boolean copyLoadedChunks) {
        this(ctx.world(), (WorldData) ctx.worldData(), copyLoadedChunks);
    }

    public BlockStateInterface(World world, WorldData worldData, boolean copyLoadedChunks) {
        this.world = world;
        this.worldData = worldData;
        Long2ObjectMap<Chunk> worldLoaded = ((IChunkProviderClient) world.getChunkProvider()).loadedChunks();
        if (copyLoadedChunks) {
            this.loadedChunks = new Long2ObjectOpenHashMap<>(worldLoaded); // make a copy that we can safely access from another thread
        } else {
            this.loadedChunks = worldLoaded; // this will only be used on the main thread
        }
        this.useTheRealWorld = !Baritone.settings().pathThroughCachedOnly.value;
        if (!Minecraft.getMinecraft().isCallingFromMinecraftThread()) {
            throw new IllegalStateException();
        }
        this.isPassableBlockPos = new BlockPos.MutableBlockPos();
        this.access = new BlockStateInterfaceAccessWrapper(this);
    }

    public boolean worldContainsLoadedChunk(int blockX, int blockZ) {
        return loadedChunks.containsKey(ChunkPos.asLong(blockX >> 4, blockZ >> 4));
    }

    public static Block getBlock(IPlayerContext ctx, BlockPos pos) { // won't be called from the pathing thread because the pathing thread doesn't make a single blockpos pog
        return get(ctx, pos).getBlock();
    }

    public static IBlockState get(IPlayerContext ctx, BlockPos pos) {
        return new BlockStateInterface(ctx).get0(pos.getX(), pos.getY(), pos.getZ()); // immense iq
        // can't just do world().get because that doesn't work for out of bounds
        // and toBreak and stuff fails when the movement is instantiated out of load range but it's not able to BlockStateInterface.get what it's going to walk on
    }

    public IBlockState get0(BlockPos pos) {
        return get0(pos.getX(), pos.getY(), pos.getZ());
    }

    public IBlockState get0(int x, int y, int z) { // Mickey resigned

        // Invalid vertical position
        if (y < 0 || y >= 256) {
            return AIR;
        }

        if (useTheRealWorld) {
            Chunk cached = prev;
            // there's great cache locality in block state lookups
            // generally it's within each movement
            // if it's the same chunk as last time
            // we can just skip the mc.world.getChunk lookup
            // which is a Long2ObjectOpenHashMap.get
            // see issue #113
            if (cached != null && cached.x == x >> 4 && cached.z == z >> 4) {
                return cached.getBlockState(x, y, z);
            }
            Chunk chunk = loadedChunks.get(ChunkPos.asLong(x >> 4, z >> 4));

            if (chunk != null && chunk.isLoaded()) {
                prev = chunk;
                return chunk.getBlockState(x, y, z);
            }
        }
        // same idea here, skip the Long2ObjectOpenHashMap.get if at all possible
        // except here, it's 512x512 tiles instead of 16x16, so even better repetition
        CachedRegion cached = prevCached;
        if (cached == null || cached.getX() != x >> 9 || cached.getZ() != z >> 9) {
            if (worldData == null) {
                return AIR;
            }
            CachedRegion region = worldData.cache.getRegion(x >> 9, z >> 9);
            if (region == null) {
                return AIR;
            }
            prevCached = region;
            cached = region;
        }
        IBlockState type = cached.getBlock(x & 511, y, z & 511);
        if (type == null) {
            return AIR;
        }
        return type;
    }

    public boolean isLoaded(int x, int z) {
        Chunk prevChunk = prev;
        if (prevChunk != null && prevChunk.x == x >> 4 && prevChunk.z == z >> 4) {
            return true;
        }
        prevChunk = loadedChunks.get(ChunkPos.asLong(x >> 4, z >> 4));
        if (prevChunk != null && prevChunk.isLoaded()) {
            prev = prevChunk;
            return true;
        }
        CachedRegion prevRegion = prevCached;
        if (prevRegion != null && prevRegion.getX() == x >> 9 && prevRegion.getZ() == z >> 9) {
            return prevRegion.isCached(x & 511, z & 511);
        }
        if (worldData == null) {
            return false;
        }
        prevRegion = worldData.cache.getRegion(x >> 9, z >> 9);
        if (prevRegion == null) {
            return false;
        }
        prevCached = prevRegion;
        return prevRegion.isCached(x & 511, z & 511);
    }
}",1,777 587 2000 123 773 657 2001 60 2002 62 2003 59 773 657 2004 2005 59 775 657 2006 2007 59 777 657 2008 46 2009 2010 59 777 657 2006 2011 59 773 2002 2012 61 2013 59 773 2014 2015 61 2013 59 773 657 570 2016 59 773 809 657 2017 2018 61 2019 46 2018 46 2020 40 41 59 777 2000 40 2021 2022 41 123 823 40 2022 44 2023 41 59 125 777 2000 40 2021 2022 44 570 2024 41 123 823 40 2022 46 2007 40 41 44 40 2004 41 2022 46 2005 40 41 44 2024 41 59 125 777 2000 40 2025 2007 44 2004 2005 44 570 2024 41 123 823 46 2007 61 2007 59 823 46 2005 61 2005 59 2001 60 2002 62 2026 61 40 40 2027 41 2007 46 2028 40 41 41 46 2003 40 41 59 688 40 2024 41 123 823 46 2003 61 744 2029 60 62 40 2026 41 59 330 125 630 123 823 46 2003 61 2026 59 330 125 823 46 2016 61 33 2030 46 2031 40 41 46 2032 46 2033 59 688 40 33 2034 46 2035 40 41 46 2036 40 41 41 123 825 744 2037 40 41 59 125 823 46 2010 61 744 2008 46 2009 40 41 59 823 46 2011 61 744 2038 40 823 41 59 125 777 570 2039 40 704 2040 44 704 2041 41 123 792 2003 46 2042 40 2043 46 2044 40 2040 356 1502 44 2041 356 1502 41 41 59 125 777 809 2045 2046 40 2021 2022 44 2008 2047 41 123 330 792 2048 40 2022 44 2047 41 46 2046 40 41 59 125 777 809 2017 2049 40 2021 2022 44 2008 2047 41 123 792 744 2000 40 2022 41 46 2050 40 2047 46 2051 40 41 44 2047 46 2052 40 41 44 2047 46 2053 40 41 41 59 330 330 330 125 777 2017 2054 40 2008 2047 41 123 792 2054 40 2047 46 2055 40 41 44 2047 46 2056 40 41 44 2047 46 2057 40 41 41 59 125 777 2017 2054 40 704 2058 44 704 2059 44 704 2060 41 123 330 330 688 40 2059 60 1500 309 2059 325 1504 41 123 792 2018 59 125 688 40 2016 41 123 2002 2061 61 2012 59 330 330 330 330 330 330 688 40 2061 340 2013 307 2061 46 2058 323 2058 356 1502 307 2061 46 2060 323 2060 356 1502 41 123 792 2061 46 2062 40 2058 44 2059 44 2060 41 59 125 2002 2063 61 2003 46 2049 40 2064 46 2065 40 2058 356 1502 44 2060 356 1502 41 41 59 688 40 2063 340 2013 307 2063 46 2066 40 41 41 123 2012 61 2063 59 792 2063 46 2067 40 2058 44 2059 44 2060 41 59 125 125 330 330 2014 2068 61 2015 59 688 40 2068 323 2013 309 2068 46 2069 40 41 340 2058 356 1502 309 2068 46 2070 40 41 340 2060 356 1502 41 123 688 40 2005 323 2013 41 123 792 2018 59 125 2014 2071 61 2005 46 2072 46 2073 40 2058 356 1502 44 2060 356 1502 41 59 688 40 2071 323 2013 41 123 792 2018 59 125 2015 61 2071 59 2068 61 2071 59 125 2017 2074 61 2068 46 2046 40 2058 38 1504 44 2059 44 2060 38 1504 41 59 688 40 2074 323 2013 41 123 792 2018 59 125 792 2074 59 125 777 570 2075 40 704 2058 44 704 2060 41 123 2002 2076 61 2012 59 688 40 2076 340 2013 307 2076 46 2058 323 2058 356 1502 307 2076 46 2060 323 2060 356 1502 41 123 792 2077 59 125 2076 61 2003 46 2049 40 2078 46 2079 40 2058 356 1502 44 2060 356 1502 41 41 59 688 40 2076 340 2013 307 2076 46 2075 40 41 41 123 2012 61 2076 59 792 2080 59 125 2014 2081 61 2015 59 688 40 2081 340 2013 307 2081 46 2082 40 41 323 2058 356 1502 307 2081 46 2083 40 41 323 2060 356 1502 41 123 792 2081 46 2084 40 2058 38 1504 44 2060 38 1504 41 59 125 688 40 2005 323 2013 41 123 792 2085 59 125 2081 61 2005 46 2086 46 2087 40 2058 356 1502 44 2060 356 1502 41 59 688 40 2081 323 2013 41 123 792 2088 59 125 2015 61 2081 59 792 2081 46 2089 40 2058 38 1504 44 2060 38 1504 41 59 125 125 ,"{'AvgLine': 11, 'CountLine': 134, 'CountStmt': 76, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 54, 'MaxEssential': 9, 'SumEssential': 22, 'AvgCyclomatic': 2, 'CountLineCode': 102, 'CountStmtDecl': 27, 'MaxCyclomatic': 9, 'SumCyclomatic': 24, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountSemicolon': 51, 'CountDeclMethod': 9, 'CountLineCodeExe': 61, 'CountLineComment': 21, 'CountClassCoupled': 22, 'CountClassDerived': 0, 'CountLineCodeDecl': 27, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.21', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 15, 'SumCyclomaticStrict': 35, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 9, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 24, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 7, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 22, 'CountDeclInstanceVariable': 8, 'PercentLackOfCohesionModified': 31}"
2968,Java,"@Slf4j
public class DisputeAgentLookupMap {

    // See also: https://bisq.wiki/Finding_your_mediator
    @Nullable
    public static String getKeyBaseUserName(String fullAddress) {
        if (fullAddress.matches(""localhost(.*)"")) {
            return fullAddress; // on regtest, agent displays as localhost
        }
        switch (fullAddress) {
            case ""7hkpotiyaukuzcfy6faihjaols5r2mkysz7bm3wrhhbpbphzz3zbwyqd.onion:9999"":
                return ""leo816"";
            case ""wizbisqzd7ku25di7p2ztsajioabihlnyp5lq5av66tmu7do2dke2tid.onion:9999"":
                return ""wiz"";
            case ""apbp7ubuyezav4hy.onion:9999"":
                return ""bisq_knight"";
            case ""a56olqlmmpxrn5q34itq5g5tb5d3fg7vxekpbceq7xqvfl3cieocgsyd.onion:9999"":
                return ""huey735"";
            case ""3z5jnirlccgxzoxc6zwkcgwj66bugvqplzf6z2iyd5oxifiaorhnanqd.onion:9999"":
                return ""refundagent2"";
            case ""6c4cim7h7t3bm4bnchbf727qrhdfrfr6lhod25wjtizm2sifpkktvwad.onion:9999"":
                return ""pazza"";
            default:
                log.warn(""No user name for dispute agent with address {} found."", fullAddress);
                return Res.get(""shared.na"");
        }
    }

    public static String getKeybaseLinkForAgent(String onion) {
        // when a new mediator starts or an onion address changes, mediator name won't be known until
        // the table above is updated in the software.
        // as a stopgap measure, replace unknonwn ones with a link to the bisq team
        String agentName = getKeyBaseUserName(onion).replaceAll(Res.get(""shared.na""), ""bisq"");
        return ""https://keybase.io/"" + agentName;
    }
}",1,64 2000 777 587 2001 123 330 64 2002 777 809 2003 2004 40 2003 2005 41 123 688 40 2005 46 2006 40 362 41 41 123 792 2005 59 330 125 819 40 2005 41 123 579 362 58 792 362 59 579 362 58 792 362 59 579 362 58 792 362 59 579 362 58 792 362 59 579 362 58 792 362 59 579 362 58 792 362 59 613 58 2007 46 2008 40 362 44 2005 41 59 792 2009 46 2010 40 362 41 59 125 125 777 809 2003 2011 40 2003 2012 41 123 330 330 330 2003 2013 61 2004 40 2012 41 46 2014 40 2015 46 2016 40 362 41 44 362 41 59 792 362 43 2013 59 125 125 ,"{'AvgLine': 15, 'CountLine': 36, 'CountStmt': 16, 'MaxNesting': 1, 'AvgLineCode': 13, 'AvgEssential': 4, 'AvgLineBlank': 0, 'CountStmtExe': 13, 'MaxEssential': 8, 'SumEssential': 9, 'AvgCyclomatic': 4, 'CountLineCode': 30, 'CountStmtDecl': 4, 'MaxCyclomatic': 8, 'SumCyclomatic': 9, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 11, 'CountDeclMethod': 2, 'CountLineCodeExe': 20, 'CountLineComment': 6, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 6, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.20', 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 9, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2588,Java,"public final class MineProcess extends BaritoneProcessHelper implements IMineProcess {

    private static final int ORE_LOCATIONS_COUNT = 64;

    private BlockOptionalMetaLookup filter;
    private List<BlockPos> knownOreLocations;
    private List<BlockPos> blacklist; // inaccessible
    private Map<BlockPos, Long> anticipatedDrops;
    private BlockPos branchPoint;
    private GoalRunAway branchPointRunaway;
    private int desiredQuantity;
    private int tickCount;

    public MineProcess(Baritone baritone) {
        super(baritone);
    }

    @Override
    public boolean isActive() {
        return filter != null;
    }

    @Override
    public PathingCommand onTick(boolean calcFailed, boolean isSafeToCancel) {
        if (desiredQuantity > 0) {
            int curr = ctx.player().inventory.mainInventory.stream()
                    .filter(stack -> filter.has(stack))
                    .mapToInt(ItemStack::getCount).sum();
            System.out.println(""Currently have "" + curr + "" valid items"");
            if (curr >= desiredQuantity) {
                logDirect(""Have "" + curr + "" valid items"");
                cancel();
                return null;
            }
        }
        if (calcFailed) {
            if (!knownOreLocations.isEmpty() && Baritone.settings().blacklistClosestOnFailure.value) {
                logDirect(""Unable to find any path to "" + filter + "", blacklisting presumably unreachable closest instance..."");
                if (Baritone.settings().notificationOnMineFail.value) {
                    logNotification(""Unable to find any path to "" + filter + "", blacklisting presumably unreachable closest instance..."", true);
                }
                knownOreLocations.stream().min(Comparator.comparingDouble(ctx.player()::getDistanceSq)).ifPresent(blacklist::add);
                knownOreLocations.removeIf(blacklist::contains);
            } else {
                logDirect(""Unable to find any path to "" + filter + "", canceling mine"");
                if (Baritone.settings().notificationOnMineFail.value) {
                    logNotification(""Unable to find any path to "" + filter + "", canceling mine"", true);
                }
                cancel();
                return null;
            }
        }
        if (!Baritone.settings().allowBreak.value) {
            logDirect(""Unable to mine when allowBreak is false!"");
            cancel();
            return null;
        }
        updateLoucaSystem();
        int mineGoalUpdateInterval = Baritone.settings().mineGoalUpdateInterval.value;
        List<BlockPos> curr = new ArrayList<>(knownOreLocations);
        if (mineGoalUpdateInterval != 0 && tickCount++ % mineGoalUpdateInterval == 0) { // big brain
            CalculationContext context = new CalculationContext(baritone, true);
            Baritone.getExecutor().execute(() -> rescan(curr, context));
        }
        if (Baritone.settings().legitMine.value) {
            addNearby();
        }
        Optional<BlockPos> shaft = curr.stream()
                .filter(pos -> pos.getX() == ctx.playerFeet().getX() && pos.getZ() == ctx.playerFeet().getZ())
                .filter(pos -> pos.getY() >= ctx.playerFeet().getY())
                .filter(pos -> !(BlockStateInterface.get(ctx, pos).getBlock() instanceof BlockAir)) // after breaking a block, it takes mineGoalUpdateInterval ticks for it to actually update this list =(
                .min(Comparator.comparingDouble(ctx.player()::getDistanceSq));
        baritone.getInputOverrideHandler().clearAllKeys();
        if (shaft.isPresent() && ctx.player().onGround) {
            BlockPos pos = shaft.get();
            IBlockState state = baritone.bsi.get0(pos);
            if (!MovementHelper.avoidBreaking(baritone.bsi, pos.getX(), pos.getY(), pos.getZ(), state)) {
                Optional<Rotation> rot = RotationUtils.reachable(ctx, pos);
                if (rot.isPresent() && isSafeToCancel) {
                    baritone.getLookBehavior().updateTarget(rot.get(), true);
                    MovementHelper.switchToBestToolFor(ctx, ctx.world().getBlockState(pos));
                    if (ctx.isLookingAt(pos) || ctx.playerRotations().isReallyCloseTo(rot.get())) {
                        baritone.getInputOverrideHandler().setInputForceState(Input.CLICK_LEFT, true);
                    }
                    return new PathingCommand(null, PathingCommandType.REQUEST_PAUSE);
                }
            }
        }
        PathingCommand command = updateGoal();
        if (command == null) {
            // none in range
            // maybe say something in chat? (ahem impact)
            cancel();
            return null;
        }
        return command;
    }

    private void updateLoucaSystem() {
        Map<BlockPos, Long> copy = new HashMap<>(anticipatedDrops);
        ctx.getSelectedBlock().ifPresent(pos -> {
            if (knownOreLocations.contains(pos)) {
                copy.put(pos, System.currentTimeMillis() + Baritone.settings().mineDropLoiterDurationMSThanksLouca.value);
            }
        });
        // elaborate dance to avoid concurrentmodificationexcepption since rescan thread reads this
        // don't want to slow everything down with a gross lock do we now
        for (BlockPos pos : anticipatedDrops.keySet()) {
            if (copy.get(pos) < System.currentTimeMillis()) {
                copy.remove(pos);
            }
        }
        anticipatedDrops = copy;
    }

    @Override
    public void onLostControl() {
        mine(0, (BlockOptionalMetaLookup) null);
    }

    @Override
    public String displayName0() {
        return ""Mine "" + filter;
    }

    private PathingCommand updateGoal() {
        boolean legit = Baritone.settings().legitMine.value;
        List<BlockPos> locs = knownOreLocations;
        if (!locs.isEmpty()) {
            CalculationContext context = new CalculationContext(baritone);
            List<BlockPos> locs2 = prune(context, new ArrayList<>(locs), filter, ORE_LOCATIONS_COUNT, blacklist, droppedItemsScan());
            // can't reassign locs, gotta make a new var locs2, because we use it in a lambda right here, and variables you use in a lambda must be effectively final
            Goal goal = new GoalComposite(locs2.stream().map(loc -> coalesce(loc, locs2, context)).toArray(Goal[]::new));
            knownOreLocations = locs2;
            return new PathingCommand(goal, legit ? PathingCommandType.FORCE_REVALIDATE_GOAL_AND_PATH : PathingCommandType.REVALIDATE_GOAL_AND_PATH);
        }
        // we don't know any ore locations at the moment
        if (!legit && !Baritone.settings().exploreForBlocks.value) {
            return null;
        }
        // only when we should explore for blocks or are in legit mode we do this
        int y = Baritone.settings().legitMineYLevel.value;
        if (branchPoint == null) {
            /*if (!baritone.getPathingBehavior().isPathing() && playerFeet().y == y) {
                // cool, path is over and we are at desired y
                branchPoint = playerFeet();
                branchPointRunaway = null;
            } else {
                return new GoalYLevel(y);
            }*/
            branchPoint = ctx.playerFeet();
        }
        // TODO shaft mode, mine 1x1 shafts to either side
        // TODO also, see if the GoalRunAway with maintain Y at 11 works even from the surface
        if (branchPointRunaway == null) {
            branchPointRunaway = new GoalRunAway(1, y, branchPoint) {
                @Override
                public boolean isInGoal(int x, int y, int z) {
                    return false;
                }
                @Override
                public double heuristic() {
                    return Double.NEGATIVE_INFINITY;
                }
            };
        }
        return new PathingCommand(branchPointRunaway, PathingCommandType.REVALIDATE_GOAL_AND_PATH);
    }

    private void rescan(List<BlockPos> already, CalculationContext context) {
        if (filter == null) {
            return;
        }
        if (Baritone.settings().legitMine.value) {
            return;
        }
        List<BlockPos> dropped = droppedItemsScan();
        List<BlockPos> locs = searchWorld(context, filter, ORE_LOCATIONS_COUNT, already, blacklist, dropped);
        locs.addAll(dropped);
        if (locs.isEmpty() && !Baritone.settings().exploreForBlocks.value) {
            logDirect(""No locations for "" + filter + "" known, cancelling"");
            if (Baritone.settings().notificationOnMineFail.value) {
                logNotification(""No locations for "" + filter + "" known, cancelling"", true);
            }
            cancel();
            return;
        }
        knownOreLocations = locs;
    }

    private boolean internalMiningGoal(BlockPos pos, CalculationContext context, List<BlockPos> locs) {
        // Here, BlockStateInterface is used because the position may be in a cached chunk (the targeted block is one that is kept track of)
        if (locs.contains(pos)) {
            return true;
        }
        IBlockState state = context.bsi.get0(pos);
        if (Baritone.settings().internalMiningAirException.value && state.getBlock() instanceof BlockAir) {
            return true;
        }
        return filter.has(state) && plausibleToBreak(context, pos);
    }

    private Goal coalesce(BlockPos loc, List<BlockPos> locs, CalculationContext context) {
        boolean assumeVerticalShaftMine = !(baritone.bsi.get0(loc.up()).getBlock() instanceof BlockFalling);
        if (!Baritone.settings().forceInternalMining.value) {
            if (assumeVerticalShaftMine) {
                // we can get directly below the block
                return new GoalThreeBlocks(loc);
            } else {
                // we need to get feet or head into the block
                return new GoalTwoBlocks(loc);
            }
        }
        boolean upwardGoal = internalMiningGoal(loc.up(), context, locs);
        boolean downwardGoal = internalMiningGoal(loc.down(), context, locs);
        boolean doubleDownwardGoal = internalMiningGoal(loc.down(2), context, locs);
        if (upwardGoal == downwardGoal) { // symmetric
            if (doubleDownwardGoal && assumeVerticalShaftMine) {
                // we have a checkerboard like pattern
                // this one, and the one two below it
                // therefore it's fine to path to immediately below this one, since your feet will be in the doubleDownwardGoal
                // but only if assumeVerticalShaftMine
                return new GoalThreeBlocks(loc);
            } else {
                // this block has nothing interesting two below, but is symmetric vertically so we can get either feet or head into it
                return new GoalTwoBlocks(loc);
            }
        }
        if (upwardGoal) {
            // downwardGoal known to be false
            // ignore the gap then potential doubleDownward, because we want to path feet into this one and head into upwardGoal
            return new GoalBlock(loc);
        }
        // upwardGoal known to be false, downwardGoal known to be true
        if (doubleDownwardGoal && assumeVerticalShaftMine) {
            // this block and two below it are goals
            // path into the center of the one below, because that includes directly below this one
            return new GoalTwoBlocks(loc.down());
        }
        // upwardGoal false, downwardGoal true, doubleDownwardGoal false
        // just this block and the one immediately below, no others
        return new GoalBlock(loc.down());
    }

    private static class GoalThreeBlocks extends GoalTwoBlocks {

        public GoalThreeBlocks(BlockPos pos) {
            super(pos);
        }

        @Override
        public boolean isInGoal(int x, int y, int z) {
            return x == this.x && (y == this.y || y == this.y - 1 || y == this.y - 2) && z == this.z;
        }

        @Override
        public double heuristic(int x, int y, int z) {
            int xDiff = x - this.x;
            int yDiff = y - this.y;
            int zDiff = z - this.z;
            return GoalBlock.calculate(xDiff, yDiff < -1 ? yDiff + 2 : yDiff == -1 ? 0 : yDiff, zDiff);
        }
    }

    public List<BlockPos> droppedItemsScan() {
        if (!Baritone.settings().mineScanDroppedItems.value) {
            return Collections.emptyList();
        }
        List<BlockPos> ret = new ArrayList<>();
        for (Entity entity : ctx.world().loadedEntityList) {
            if (entity instanceof EntityItem) {
                EntityItem ei = (EntityItem) entity;
                if (filter.has(ei.getItem())) {
                    ret.add(new BlockPos(entity));
                }
            }
        }
        ret.addAll(anticipatedDrops.keySet());
        return ret;
    }

    public static List<BlockPos> searchWorld(CalculationContext ctx, BlockOptionalMetaLookup filter, int max, List<BlockPos> alreadyKnown, List<BlockPos> blacklist, List<BlockPos> dropped) {
        List<BlockPos> locs = new ArrayList<>();
        List<Block> untracked = new ArrayList<>();
        for (BlockOptionalMeta bom : filter.blocks()) {
            Block block = bom.getBlock();
            if (CachedChunk.BLOCKS_TO_KEEP_TRACK_OF.contains(block)) {
                BetterBlockPos pf = ctx.baritone.getPlayerContext().playerFeet();

                // maxRegionDistanceSq 2 means adjacent directly or adjacent diagonally; nothing further than that
                locs.addAll(ctx.worldData.getCachedWorld().getLocationsOf(
                        BlockUtils.blockToString(block),
                        Baritone.settings().maxCachedWorldScanCount.value,
                        pf.x,
                        pf.z,
                        2
                ));
            } else {
                untracked.add(block);
            }
        }

        locs = prune(ctx, locs, filter, max, blacklist, dropped);

        if (!untracked.isEmpty() || (Baritone.settings().extendCacheOnThreshold.value && locs.size() < max)) {
            locs.addAll(WorldScanner.INSTANCE.scanChunkRadius(
                    ctx.getBaritone().getPlayerContext(),
                    filter,
                    max,
                    10,
                    32
            )); // maxSearchRadius is NOT sq
        }

        locs.addAll(alreadyKnown);

        return prune(ctx, locs, filter, max, blacklist, dropped);
    }

    private void addNearby() {
        List<BlockPos> dropped = droppedItemsScan();
        knownOreLocations.addAll(dropped);
        BlockPos playerFeet = ctx.playerFeet();
        BlockStateInterface bsi = new BlockStateInterface(ctx);
        int searchDist = 10;
        double fakedBlockReachDistance = 20; // at least 10 * sqrt(3) with some extra space to account for positioning within the block
        for (int x = playerFeet.getX() - searchDist; x <= playerFeet.getX() + searchDist; x++) {
            for (int y = playerFeet.getY() - searchDist; y <= playerFeet.getY() + searchDist; y++) {
                for (int z = playerFeet.getZ() - searchDist; z <= playerFeet.getZ() + searchDist; z++) {
                    // crucial to only add blocks we can see because otherwise this
                    // is an x-ray and it'll get caught
                    if (filter.has(bsi.get0(x, y, z))) {
                        BlockPos pos = new BlockPos(x, y, z);
                        if ((Baritone.settings().legitMineIncludeDiagonals.value && knownOreLocations.stream().anyMatch(ore -> ore.distanceSq(pos) <= 2 /* sq means this is pytha dist <= sqrt(2) */)) || RotationUtils.reachable(ctx.player(), pos, fakedBlockReachDistance).isPresent()) {
                            knownOreLocations.add(pos);
                        }
                    }
                }
            }
        }
        knownOreLocations = prune(new CalculationContext(baritone), knownOreLocations, filter, ORE_LOCATIONS_COUNT, blacklist, dropped);
    }

    private static List<BlockPos> prune(CalculationContext ctx, List<BlockPos> locs2, BlockOptionalMetaLookup filter, int max, List<BlockPos> blacklist, List<BlockPos> dropped) {
        dropped.removeIf(drop -> {
            for (BlockPos pos : locs2) {
                if (pos.distanceSq(drop) <= 9 && filter.has(ctx.get(pos.getX(), pos.getY(), pos.getZ())) && MineProcess.plausibleToBreak(ctx, pos)) { // TODO maybe drop also has to be supported? no lava below?
                    return true;
                }
            }
            return false;
        });
        List<BlockPos> locs = locs2
                .stream()
                .distinct()

                // remove any that are within loaded chunks that aren't actually what we want
                .filter(pos -> !ctx.bsi.worldContainsLoadedChunk(pos.getX(), pos.getZ()) || filter.has(ctx.get(pos.getX(), pos.getY(), pos.getZ())) || dropped.contains(pos))

                // remove any that are implausible to mine (encased in bedrock, or touching lava)
                .filter(pos -> MineProcess.plausibleToBreak(ctx, pos))

                .filter(pos -> {
                    if (Baritone.settings().allowOnlyExposedOres.value) {
                        return isNextToAir(ctx, pos);
                    } else {
                        return true;
                    }
                })

                .filter(pos -> pos.getY() >= Baritone.settings().minYLevelWhileMining.value)

                .filter(pos -> !blacklist.contains(pos))

                .sorted(Comparator.comparingDouble(ctx.getBaritone().getPlayerContext().player()::getDistanceSq))
                .collect(Collectors.toList());

        if (locs.size() > max) {
            return locs.subList(0, max);
        }
        return locs;
    }

    public static boolean isNextToAir(CalculationContext ctx, BlockPos pos) {
        int radius = Baritone.settings().allowOnlyExposedOresDistance.value;
        for (int dx = -radius; dx <= radius; dx++) {
            for (int dy = -radius; dy <= radius; dy++) {
                for (int dz = -radius; dz <= radius; dz++) {
                    if (Math.abs(dx) + Math.abs(dy) + Math.abs(dz) <= radius
                            && MovementHelper.isTransparent(ctx.getBlock(pos.getX() + dx, pos.getY() + dy, pos.getZ() + dz))) {
                        return true;
                    }
                }
            }
        }
        return false;
    }


    public static boolean plausibleToBreak(CalculationContext ctx, BlockPos pos) {
        if (MovementHelper.getMiningDurationTicks(ctx, pos.getX(), pos.getY(), pos.getZ(), ctx.bsi.get0(pos), true) >= COST_INF) {
            return false;
        }

        // bedrock above and below makes it implausible, otherwise we're good
        return !(ctx.bsi.get0(pos.up()).getBlock() == Blocks.BEDROCK && ctx.bsi.get0(pos.down()).getBlock() == Blocks.BEDROCK);
    }

    @Override
    public void mineByName(int quantity, String... blocks) {
        mine(quantity, new BlockOptionalMetaLookup(blocks));
    }

    @Override
    public void mine(int quantity, BlockOptionalMetaLookup filter) {
        this.filter = filter;
        if (filter != null && !Baritone.settings().allowBreak.value) {
            logDirect(""Unable to mine when allowBreak is false!"");
            this.mine(quantity, (BlockOptionalMetaLookup) null);
            return;
        }
        this.desiredQuantity = quantity;
        this.knownOreLocations = new ArrayList<>();
        this.blacklist = new ArrayList<>();
        this.branchPoint = null;
        this.branchPointRunaway = null;
        this.anticipatedDrops = new HashMap<>();
        if (filter != null) {
            rescan(new ArrayList<>(), new CalculationContext(baritone));
        }
    }
}",1,777 657 587 2000 650 2001 693 2002 123 773 809 657 704 2003 61 1503 59 773 2004 2005 59 773 2006 60 2007 62 2008 59 773 2006 60 2007 62 2009 59 330 773 2010 60 2007 44 2011 62 2012 59 773 2007 2013 59 773 2014 2015 59 773 704 2016 59 773 704 2017 59 777 2000 40 2018 2019 41 123 818 40 2019 41 59 125 64 2020 777 570 2021 40 41 123 792 2005 340 2022 59 125 64 2020 777 2023 2024 40 570 2025 44 570 2026 41 123 688 40 2016 62 1500 41 123 704 2027 61 2028 46 2029 40 41 46 2030 46 2031 46 2032 40 41 46 2005 40 2033 45 62 2005 46 2034 40 2033 41 41 46 2035 40 2036 58 58 2037 41 46 2038 40 41 59 2039 46 2040 46 2041 40 362 43 2027 43 362 41 59 688 40 2027 325 2016 41 123 2042 40 362 43 2027 43 362 41 59 2043 40 41 59 792 2044 59 125 125 688 40 2025 41 123 688 40 33 2008 46 2045 40 41 307 2018 46 2046 40 41 46 2047 46 2048 41 123 2049 40 362 43 2005 43 362 41 59 688 40 2018 46 2046 40 41 46 2050 46 2048 41 123 2051 40 362 43 2005 43 362 44 2052 41 59 125 2008 46 2053 40 41 46 2054 40 2055 46 2056 40 2057 46 2058 40 41 58 58 2059 41 41 46 2060 40 2009 58 58 2061 41 59 2008 46 2062 40 2009 58 58 2063 41 59 125 630 123 2064 40 362 43 2005 43 362 41 59 688 40 2018 46 2046 40 41 46 2065 46 2048 41 123 2066 40 362 43 2005 43 362 44 2067 41 59 125 2068 40 41 59 792 2069 59 125 125 688 40 33 2018 46 2070 40 41 46 2071 46 2072 41 123 2073 40 362 41 59 2074 40 41 59 792 2075 59 125 2076 40 41 59 704 2077 61 2018 46 2070 40 41 46 2077 46 2072 59 2006 60 2007 62 2078 61 744 2079 60 62 40 2008 41 59 688 40 2077 340 1500 307 2017 349 37 2077 323 1500 41 123 330 2080 2081 61 744 2080 40 2019 44 2082 41 59 2018 46 2083 40 41 46 2084 40 40 41 45 62 2085 40 2078 44 2081 41 41 59 125 688 40 2018 46 2070 40 41 46 2086 46 2072 41 123 2087 40 41 59 125 2088 60 2007 62 2089 61 2078 46 2090 40 41 46 2005 40 2091 45 62 2091 46 2092 40 41 323 2093 46 2094 40 41 46 2092 40 41 307 2091 46 2095 40 41 323 2093 46 2094 40 41 46 2095 40 41 41 46 2005 40 2091 45 62 2091 46 2096 40 41 325 2093 46 2094 40 41 46 2096 40 41 41 46 2005 40 2091 45 62 33 40 2097 46 2098 40 2093 44 2091 41 46 2099 40 41 702 2100 41 41 330 46 2101 40 2102 46 2103 40 2093 46 2104 40 41 58 58 2105 41 41 59 2019 46 2106 40 41 46 2107 40 41 59 688 40 2089 46 2108 40 41 307 2093 46 2104 40 41 46 2109 41 123 2007 2091 61 2089 46 2098 40 41 59 2110 2111 61 2019 46 2112 46 2113 40 2091 41 59 688 40 33 2114 46 2115 40 2019 46 2112 44 2091 46 2092 40 41 44 2091 46 2096 40 41 44 2091 46 2095 40 41 44 2111 41 41 123 2088 60 2116 62 2117 61 2118 46 2119 40 2093 44 2091 41 59 688 40 2117 46 2108 40 41 307 2026 41 123 2019 46 2120 40 41 46 2121 40 2117 46 2098 40 41 44 2122 41 59 2114 46 2123 40 2093 44 2093 46 2124 40 41 46 2125 40 2091 41 41 59 688 40 2093 46 2126 40 2091 41 309 2093 46 2127 40 41 46 2128 40 2117 46 2098 40 41 41 41 123 2019 46 2106 40 41 46 2129 40 2130 46 2131 44 2122 41 59 125 792 744 2023 40 2132 44 2133 46 2134 41 59 125 125 125 2023 2135 61 2136 40 41 59 688 40 2135 323 2137 41 123 330 330 2138 40 41 59 792 2137 59 125 792 2135 59 125 773 865 2139 40 41 123 2010 60 2007 44 2011 62 2140 61 744 2141 60 62 40 2012 41 59 2142 46 2143 40 41 46 2144 40 2145 45 62 123 688 40 2008 46 2146 40 2145 41 41 123 2140 46 2147 40 2145 44 2148 46 2149 40 41 43 2018 46 2150 40 41 46 2151 46 2152 41 59 125 125 41 59 330 330 664 40 2007 2145 58 2012 46 2153 40 41 41 123 688 40 2140 46 2154 40 2145 41 60 2155 46 2156 40 41 41 123 2140 46 2157 40 2145 41 59 125 125 2012 61 2140 59 125 64 2020 777 865 2158 40 41 123 2159 40 1500 44 40 2004 41 2160 41 59 125 64 2020 777 2161 2162 40 41 123 792 362 43 2005 59 125 773 2023 2163 40 41 123 570 2164 61 2018 46 2165 40 41 46 2166 46 2167 59 2006 60 2007 62 2168 61 2008 59 688 40 33 2168 46 2169 40 41 41 123 2170 2171 61 744 2170 40 2019 41 59 2006 60 2007 62 2172 61 2173 40 2171 44 744 2174 60 62 40 2168 41 44 2005 44 2003 44 2009 44 2175 40 41 41 59 330 2176 2177 61 744 2178 40 2172 46 2179 40 41 46 2180 40 2181 45 62 2182 40 2181 44 2172 44 2171 41 41 46 2183 40 2176 91 93 58 58 744 41 41 59 2008 61 2172 59 792 744 2023 40 2177 44 2164 63 2184 46 2185 58 2184 46 2186 41 59 125 330 688 40 33 2164 307 33 2018 46 2165 40 41 46 2187 46 2167 41 123 792 2188 59 125 330 704 2189 61 2018 46 2165 40 41 46 2190 46 2167 59 688 40 2013 323 2191 41 123 305 2013 61 2192 46 2193 40 41 59 125 330 330 688 40 2015 323 2191 41 123 2015 61 744 2014 40 1501 44 2189 44 2013 41 123 64 2020 777 570 2194 40 704 2195 44 704 2189 44 704 2196 41 123 792 2197 59 125 64 2020 777 625 2198 40 41 123 792 2199 46 2200 59 125 125 59 125 792 744 2023 40 2015 44 2201 46 2202 41 59 125 773 865 2203 40 2006 60 2007 62 2204 44 2205 2206 41 123 688 40 2005 323 2207 41 123 792 59 125 688 40 2018 46 2208 40 41 46 2209 46 2210 41 123 792 59 125 2006 60 2007 62 2211 61 2212 40 41 59 2006 60 2007 62 2213 61 2214 40 2206 44 2005 44 2003 44 2204 44 2009 44 2211 41 59 2213 46 2215 40 2211 41 59 688 40 2213 46 2216 40 41 307 33 2018 46 2208 40 41 46 2217 46 2210 41 123 2218 40 362 43 2005 43 362 41 59 688 40 2018 46 2208 40 41 46 2219 46 2210 41 123 2220 40 362 43 2005 43 362 44 2221 41 59 125 2222 40 41 59 792 59 125 2008 61 2213 59 125 773 570 2223 40 2007 2224 44 2205 2206 44 2006 60 2007 62 2225 41 123 330 688 40 2225 46 2226 40 2224 41 41 123 792 2227 59 125 2228 2229 61 2206 46 2230 46 2231 40 2224 41 59 688 40 2018 46 2232 40 41 46 2233 46 2234 307 2229 46 2235 40 41 702 2236 41 123 792 2237 59 125 792 2005 46 2238 40 2229 41 307 2239 40 2206 44 2224 41 59 125 773 2240 2241 40 2007 2242 44 2006 60 2007 62 2225 44 2205 2206 41 123 570 2243 61 33 40 2019 46 2244 46 2245 40 2242 46 2246 40 41 41 46 2247 40 41 702 2248 41 59 688 40 33 2018 46 2249 40 41 46 2250 46 2251 41 123 688 40 2243 41 123 330 792 744 2252 40 2242 41 59 125 630 123 330 792 744 2253 40 2242 41 59 125 125 570 2254 61 2223 40 2242 46 2246 40 41 44 2206 44 2225 41 59 570 2255 61 2223 40 2242 46 2256 40 41 44 2206 44 2225 41 59 570 2257 61 2223 40 2242 46 2256 40 1502 41 44 2206 44 2225 41 59 688 40 2254 323 2255 41 123 330 688 40 2257 307 2243 41 123 330 330 330 330 792 744 2258 40 2242 41 59 125 630 123 330 792 744 2259 40 2242 41 59 125 125 688 40 2254 41 123 330 330 792 744 2260 40 2242 41 59 125 330 688 40 2257 307 2243 41 123 330 330 792 744 2261 40 2242 46 2256 40 41 41 59 125 330 330 792 744 2262 40 2242 46 2256 40 41 41 59 125 773 809 587 2263 650 2264 123 777 2263 40 2007 2224 41 123 818 40 2224 41 59 125 64 2020 777 570 2265 40 704 2266 44 704 2267 44 704 2268 41 123 792 2266 323 823 46 2266 307 40 2267 323 823 46 2267 309 2267 323 823 46 2267 45 1501 309 2267 323 823 46 2267 45 1502 41 307 2268 323 823 46 2268 59 125 64 2020 777 625 2269 40 704 2266 44 704 2267 44 704 2268 41 123 704 2270 61 2266 45 823 46 2266 59 704 2271 61 2267 45 823 46 2267 59 704 2272 61 2268 45 823 46 2268 59 792 2273 46 2274 40 2270 44 2271 60 45 1501 63 2271 43 1502 58 2271 323 45 1501 63 1500 58 2271 44 2272 41 59 125 125 777 2006 60 2007 62 2275 40 41 123 688 40 33 2018 46 2276 40 41 46 2277 46 2278 41 123 792 2279 46 2280 40 41 59 125 2006 60 2007 62 2281 61 744 2282 60 62 40 41 59 664 40 2283 2284 58 2285 46 2286 40 41 46 2287 41 123 688 40 2284 702 2288 41 123 2288 2289 61 40 2288 41 2284 59 688 40 2005 46 2290 40 2289 46 2291 40 41 41 41 123 2281 46 2292 40 744 2007 40 2284 41 41 59 125 125 125 2281 46 2293 40 2012 46 2294 40 41 41 59 792 2281 59 125 777 809 2006 60 2007 62 2295 40 2205 2296 44 2004 2005 44 704 2297 44 2006 60 2007 62 2298 44 2006 60 2007 62 2009 44 2006 60 2007 62 2299 41 123 2006 60 2007 62 2225 61 744 2300 60 62 40 41 59 2006 60 2301 62 2302 61 744 2300 60 62 40 41 59 664 40 2303 2304 58 2005 46 2305 40 41 41 123 2301 2306 61 2304 46 2307 40 41 59 688 40 2308 46 2309 46 2310 40 2306 41 41 123 2311 2312 61 2296 46 2019 46 2313 40 41 46 2314 40 41 59 330 2225 46 2315 40 2296 46 2316 46 2317 40 41 46 2318 40 2319 46 2320 40 2306 41 44 2018 46 2321 40 41 46 2322 46 2323 44 2312 46 2324 44 2312 46 2325 44 1502 41 41 59 125 630 123 2302 46 2326 40 2306 41 59 125 125 2225 61 2327 40 2296 44 2225 44 2005 44 2297 44 2009 44 2299 41 59 688 40 33 2302 46 2328 40 41 309 40 2018 46 2329 40 41 46 2330 46 2331 307 2225 46 2332 40 41 60 2297 41 41 123 2225 46 2333 40 2334 46 2335 46 2336 40 2296 46 2337 40 41 46 2338 40 41 44 2005 44 2297 44 1502 44 1503 41 41 59 330 125 2225 46 2339 40 2298 41 59 792 2327 40 2296 44 2225 44 2005 44 2297 44 2009 44 2299 41 59 125 773 865 2340 40 41 123 2006 60 2007 62 2299 61 2275 40 41 59 2008 46 2341 40 2299 41 59 2007 2342 61 2296 46 2342 40 41 59 2343 2344 61 744 2343 40 2296 41 59 704 2345 61 1502 59 625 2346 61 1503 59 330 664 40 704 2347 61 2342 46 2348 40 41 45 2345 59 2347 329 2342 46 2348 40 41 43 2345 59 2347 349 41 123 664 40 704 2349 61 2342 46 2350 40 41 45 2345 59 2349 329 2342 46 2350 40 41 43 2345 59 2349 349 41 123 664 40 704 2351 61 2342 46 2352 40 41 45 2345 59 2351 329 2342 46 2352 40 41 43 2345 59 2351 349 41 123 330 330 688 40 2005 46 2353 40 2344 46 2354 40 2347 44 2349 44 2351 41 41 41 123 2007 2224 61 744 2007 40 2347 44 2349 44 2351 41 59 688 40 40 2018 46 2355 40 41 46 2356 46 2357 307 2008 46 2358 40 41 46 2359 40 2360 45 62 2360 46 2361 40 2224 41 329 1502 305 41 41 309 2362 46 2363 40 2296 46 2364 40 41 44 2224 44 2346 41 46 2365 40 41 41 123 2008 46 2366 40 2224 41 59 125 125 125 125 125 2008 61 2367 40 744 2205 40 2019 41 44 2008 44 2005 44 2003 44 2009 44 2299 41 59 125 773 809 2006 60 2007 62 2368 40 2205 2296 44 2006 60 2007 62 2369 44 2004 2005 44 704 2297 44 2006 60 2007 62 2009 44 2006 60 2007 62 2299 41 123 2299 46 2370 40 2371 45 62 123 664 40 2007 2224 58 2369 41 123 688 40 2224 46 2372 40 2371 41 329 1502 307 2005 46 2373 40 2296 46 2374 40 2224 46 2375 40 41 44 2224 46 2376 40 41 44 2224 46 2377 40 41 41 41 307 2000 46 2378 40 2296 44 2224 41 41 123 330 792 2379 59 125 125 792 2380 59 125 41 59 2006 60 2007 62 2225 61 2369 46 2381 40 41 46 2382 40 41 330 46 2005 40 2224 45 62 33 2296 46 2383 46 2384 40 2224 46 2385 40 41 44 2224 46 2386 40 41 41 309 2005 46 2387 40 2296 46 2388 40 2224 46 2385 40 41 44 2224 46 2389 40 41 44 2224 46 2386 40 41 41 41 309 2299 46 2390 40 2224 41 41 330 46 2005 40 2224 45 62 2000 46 2391 40 2296 44 2224 41 41 46 2005 40 2224 45 62 123 688 40 2018 46 2392 40 41 46 2393 46 2394 41 123 792 2395 40 2296 44 2224 41 59 125 630 123 792 2396 59 125 125 41 46 2005 40 2224 45 62 2224 46 2389 40 41 325 2018 46 2397 40 41 46 2398 46 2399 41 46 2005 40 2224 45 62 33 2009 46 2390 40 2224 41 41 46 2400 40 2401 46 2402 40 2296 46 2403 40 41 46 2404 40 41 46 2405 40 41 58 58 2406 41 41 46 2407 40 2408 46 2409 40 41 41 59 688 40 2225 46 2410 40 41 62 2297 41 123 792 2225 46 2411 40 1500 44 2297 41 59 125 792 2225 59 125 777 809 570 2412 40 2205 2296 44 2007 2224 41 123 704 2413 61 2018 46 2414 40 41 46 2415 46 2416 59 664 40 704 2417 61 45 2413 59 2417 329 2413 59 2417 349 41 123 664 40 704 2418 61 45 2413 59 2418 329 2413 59 2418 349 41 123 664 40 704 2419 61 45 2413 59 2419 329 2413 59 2419 349 41 123 688 40 2420 46 2421 40 2417 41 43 2420 46 2421 40 2418 41 43 2420 46 2421 40 2419 41 329 2413 307 2422 46 2423 40 2296 46 2424 40 2224 46 2425 40 41 43 2417 44 2224 46 2426 40 41 43 2418 44 2224 46 2427 40 41 43 2419 41 41 41 123 792 2428 59 125 125 125 125 792 2429 59 125 777 809 570 2430 40 2205 2296 44 2007 2224 41 123 688 40 2431 46 2432 40 2296 44 2224 46 2433 40 41 44 2224 46 2434 40 41 44 2224 46 2435 40 41 44 2296 46 2436 46 2437 40 2224 41 44 2438 41 325 2439 41 123 792 2440 59 125 330 792 33 40 2296 46 2436 46 2437 40 2224 46 2441 40 41 41 46 2442 40 41 323 2443 46 2444 307 2296 46 2436 46 2437 40 2224 46 2445 40 41 41 46 2442 40 41 323 2443 46 2444 41 59 125 64 2020 777 865 2446 40 704 2447 44 2161 322 2448 41 123 2449 40 2447 44 744 2004 40 2448 41 41 59 125 64 2020 777 865 2450 40 704 2447 44 2004 2005 41 123 823 46 2005 61 2005 59 688 40 2005 340 2451 307 33 2018 46 2452 40 41 46 2453 46 2454 41 123 2455 40 362 41 59 823 46 2450 40 2447 44 40 2004 41 2451 41 59 792 59 125 823 46 2016 61 2447 59 823 46 2008 61 744 2456 60 62 40 41 59 823 46 2009 61 744 2456 60 62 40 41 59 823 46 2013 61 2451 59 823 46 2015 61 2451 59 823 46 2012 61 744 2457 60 62 40 41 59 688 40 2005 340 2451 41 123 2203 40 744 2456 60 62 40 41 44 744 2205 40 2019 41 41 59 125 125 125 ,"{'AvgLine': 21, 'CountLine': 437, 'CountStmt': 245, 'MaxNesting': 5, 'AvgLineCode': 18, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 197, 'MaxEssential': 10, 'SumEssential': 60, 'AvgCyclomatic': 3, 'CountLineCode': 357, 'CountStmtDecl': 84, 'MaxCyclomatic': 15, 'SumCyclomatic': 89, 'AvgLineComment': 2, 'CountClassBase': 2, 'CountLineBlank': 38, 'CountSemicolon': 160, 'CountDeclMethod': 18, 'CountLineCodeExe': 237, 'CountLineComment': 50, 'CountClassCoupled': 46, 'CountClassDerived': 0, 'CountLineCodeDecl': 83, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.14', 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 20, 'SumCyclomaticStrict': 112, 'CountDeclClassMethod': 4, 'AvgCyclomaticModified': 3, 'CountDeclMethodPublic': 11, 'MaxCyclomaticModified': 15, 'PercentLackOfCohesion': 79, 'SumCyclomaticModified': 89, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 7, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 46, 'CountDeclInstanceVariable': 8, 'PercentLackOfCohesionModified': 65}"
4756,Java,"@Slf4j
class TransactionAwareTrade implements TransactionAwareTradable {
    private final TradeModel tradeModel;
    private final ArbitrationManager arbitrationManager;
    private final RefundManager refundManager;
    private final BtcWalletService btcWalletService;
    private final PubKeyRing pubKeyRing;

    TransactionAwareTrade(TradeModel tradeModel,
                          ArbitrationManager arbitrationManager,
                          RefundManager refundManager,
                          BtcWalletService btcWalletService,
                          PubKeyRing pubKeyRing) {
        this.tradeModel = tradeModel;
        this.arbitrationManager = arbitrationManager;
        this.refundManager = refundManager;
        this.btcWalletService = btcWalletService;
        this.pubKeyRing = pubKeyRing;
    }

    @Override
    public boolean isRelatedToTransaction(Transaction transaction) {
        Sha256Hash hash = transaction.getTxId();
        String txId = hash.toString();

        boolean tradeRelated = false;
        if (tradeModel instanceof Trade) {
            Trade trade = (Trade) tradeModel;
            boolean isTakerOfferFeeTx = txId.equals(trade.getTakerFeeTxId());
            boolean isOfferFeeTx = isOfferFeeTx(txId);
            boolean isDepositTx = isDepositTx(hash);
            boolean isPayoutTx = isPayoutTx(hash);
            boolean isDisputedPayoutTx = isDisputedPayoutTx(txId);
            boolean isDelayedPayoutTx = transaction.getLockTime() != 0 && isDelayedPayoutTx(txId);
            boolean isRefundPayoutTx = isRefundPayoutTx(trade, txId);
            tradeRelated = isTakerOfferFeeTx ||
                    isOfferFeeTx ||
                    isDepositTx ||
                    isPayoutTx ||
                    isDisputedPayoutTx ||
                    isDelayedPayoutTx ||
                    isRefundPayoutTx;
        }
        boolean isBsqSwapTrade = isBsqSwapTrade(txId);

        return tradeRelated || isBsqSwapTrade;
    }

    private boolean isPayoutTx(Sha256Hash txId) {
        if (isBsqSwapTrade())
            return false;

        Trade trade = (Trade) tradeModel;
        return Optional.ofNullable(trade.getPayoutTx())
                .map(Transaction::getTxId)
                .map(hash -> hash.equals(txId))
                .orElse(false);
    }

    private boolean isDepositTx(Sha256Hash txId) {
        if (isBsqSwapTrade())
            return false;

        Trade trade = (Trade) tradeModel;
        return Optional.ofNullable(trade.getDepositTx())
                .map(Transaction::getTxId)
                .map(hash -> hash.equals(txId))
                .orElse(false);
    }

    private boolean isOfferFeeTx(String txId) {
        if (isBsqSwapTrade())
            return false;

        return Optional.ofNullable(tradeModel.getOffer())
                .map(Offer::getOfferFeePaymentTxId)
                .map(paymentTxId -> paymentTxId.equals(txId))
                .orElse(false);
    }

    private boolean isDisputedPayoutTx(String txId) {
        if (isBsqSwapTrade())
            return false;

        String delegateId = tradeModel.getId();
        ObservableList<Dispute> disputes = arbitrationManager.getDisputesAsObservableList();

        boolean isAnyDisputeRelatedToThis = arbitrationManager.getDisputedTradeIds().contains(tradeModel.getId());

        return isAnyDisputeRelatedToThis && disputes.stream()
                .anyMatch(dispute -> {
                    String disputePayoutTxId = dispute.getDisputePayoutTxId();
                    boolean isDisputePayoutTx = txId.equals(disputePayoutTxId);

                    String disputeTradeId = dispute.getTradeId();
                    boolean isDisputeRelatedToThis = delegateId.equals(disputeTradeId);

                    return isDisputePayoutTx && isDisputeRelatedToThis;
                });
    }

    boolean isDelayedPayoutTx(String txId) {
        if (isBsqSwapTrade())
            return false;

        Transaction transaction = btcWalletService.getTransaction(txId);
        if (transaction == null)
            return false;

        if (transaction.getLockTime() == 0)
            return false;

        if (transaction.getInputs() == null)
            return false;

        return transaction.getInputs().stream()
                .anyMatch(input -> {
                    TransactionOutput connectedOutput = input.getConnectedOutput();
                    if (connectedOutput == null) {
                        return false;
                    }
                    Transaction parentTransaction = connectedOutput.getParentTransaction();
                    if (parentTransaction == null) {
                        return false;
                    }
                    return isDepositTx(parentTransaction.getTxId());
                });
    }

    private boolean isRefundPayoutTx(Trade trade, String txId) {
        if (isBsqSwapTrade())
            return false;

        String tradeId = tradeModel.getId();
        ObservableList<Dispute> disputes = refundManager.getDisputesAsObservableList();

        boolean isAnyDisputeRelatedToThis = refundManager.getDisputedTradeIds().contains(tradeId);

        if (isAnyDisputeRelatedToThis) {
            Transaction tx = btcWalletService.getTransaction(txId);
            if (tx != null) {
                for (TransactionOutput txo : tx.getOutputs()) {
                    if (btcWalletService.isTransactionOutputMine(txo)) {
                        try {
                            Address receiverAddress = txo.getScriptPubKey().getToAddress(btcWalletService.getParams());
                            Contract contract = checkNotNull(trade.getContract());
                            String myPayoutAddressString = contract.isMyRoleBuyer(pubKeyRing) ?
                                    contract.getBuyerPayoutAddressString() :
                                    contract.getSellerPayoutAddressString();
                            if (receiverAddress != null && myPayoutAddressString.equals(receiverAddress.toString())) {
                                return true;
                            }
                        } catch (RuntimeException ignore) {
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean isBsqSwapTrade() {
        return tradeModel instanceof BsqSwapTrade;
    }

    private boolean isBsqSwapTrade(String txId) {
        if (isBsqSwapTrade()) {
            return (txId.equals(((BsqSwapTrade) tradeModel).getTxId()));
        }
        return false;
    }

    @Override
    public Tradable asTradable() {
        return tradeModel;
    }
}",1,64 2000 587 2001 693 2002 123 773 657 2003 2004 59 773 657 2005 2006 59 773 657 2007 2008 59 773 657 2009 2010 59 773 657 2011 2012 59 2001 40 2003 2004 44 2005 2006 44 2007 2008 44 2009 2010 44 2011 2012 41 123 823 46 2004 61 2004 59 823 46 2006 61 2006 59 823 46 2008 61 2008 59 823 46 2010 61 2010 59 823 46 2012 61 2012 59 125 64 2013 777 570 2014 40 2015 2016 41 123 2017 2018 61 2016 46 2019 40 41 59 2020 2021 61 2018 46 2022 40 41 59 570 2023 61 2024 59 688 40 2004 702 2025 41 123 2025 2026 61 40 2025 41 2004 59 570 2027 61 2021 46 2028 40 2026 46 2029 40 41 41 59 570 2030 61 2030 40 2021 41 59 570 2031 61 2031 40 2018 41 59 570 2032 61 2032 40 2018 41 59 570 2033 61 2033 40 2021 41 59 570 2034 61 2016 46 2035 40 41 340 1500 307 2034 40 2021 41 59 570 2036 61 2036 40 2026 44 2021 41 59 2023 61 2027 309 2030 309 2031 309 2032 309 2033 309 2034 309 2036 59 125 570 2037 61 2037 40 2021 41 59 792 2023 309 2037 59 125 773 570 2038 40 2039 2040 41 123 688 40 2041 40 41 41 792 2042 59 2043 2044 61 40 2043 41 2004 59 792 2045 46 2046 40 2044 46 2047 40 41 41 46 2048 40 2015 58 58 2049 41 46 2048 40 2050 45 62 2050 46 2051 40 2040 41 41 46 2052 40 2042 41 59 125 773 570 2053 40 2039 2040 41 123 688 40 2054 40 41 41 792 2055 59 2056 2057 61 40 2056 41 2004 59 792 2058 46 2059 40 2057 46 2060 40 41 41 46 2061 40 2015 58 58 2062 41 46 2061 40 2063 45 62 2063 46 2064 40 2040 41 41 46 2065 40 2055 41 59 125 773 570 2066 40 2067 2040 41 123 688 40 2068 40 41 41 792 2069 59 792 2070 46 2071 40 2004 46 2072 40 41 41 46 2073 40 2074 58 58 2075 41 46 2073 40 2076 45 62 2076 46 2077 40 2040 41 41 46 2078 40 2069 41 59 125 773 570 2079 40 2067 2040 41 123 688 40 2080 40 41 41 792 2081 59 2067 2082 61 2004 46 2083 40 41 59 2084 60 2085 62 2086 61 2006 46 2087 40 41 59 570 2088 61 2006 46 2089 40 41 46 2090 40 2004 46 2083 40 41 41 59 792 2088 307 2086 46 2091 40 41 46 2092 40 2093 45 62 123 2067 2094 61 2093 46 2095 40 41 59 570 2096 61 2040 46 2097 40 2094 41 59 2067 2098 61 2093 46 2099 40 41 59 570 2100 61 2082 46 2097 40 2098 41 59 792 2096 307 2100 59 125 41 59 125 570 2101 40 2067 2040 41 123 688 40 2102 40 41 41 792 2103 59 2015 2016 61 2010 46 2104 40 2040 41 59 688 40 2016 323 2105 41 792 2103 59 688 40 2016 46 2106 40 41 323 1500 41 792 2103 59 688 40 2016 46 2107 40 41 323 2105 41 792 2103 59 792 2016 46 2107 40 41 46 2108 40 41 46 2109 40 2110 45 62 123 2111 2112 61 2110 46 2113 40 41 59 688 40 2112 323 2105 41 123 792 2103 59 125 2015 2114 61 2112 46 2115 40 41 59 688 40 2114 323 2105 41 123 792 2103 59 125 792 2053 40 2114 46 2116 40 41 41 59 125 41 59 125 773 570 2117 40 2118 2119 44 2067 2040 41 123 688 40 2120 40 41 41 792 2121 59 2067 2122 61 2004 46 2123 40 41 59 2124 60 2125 62 2126 61 2008 46 2127 40 41 59 570 2128 61 2008 46 2129 40 41 46 2130 40 2122 41 59 688 40 2128 41 123 2015 2131 61 2010 46 2132 40 2040 41 59 688 40 2131 340 2133 41 123 664 40 2134 2135 58 2131 46 2136 40 41 41 123 688 40 2010 46 2137 40 2135 41 41 123 830 123 2138 2139 61 2135 46 2140 40 41 46 2141 40 2010 46 2142 40 41 41 59 2143 2144 61 2145 40 2119 46 2146 40 41 41 59 2067 2147 61 2144 46 2148 40 2012 41 63 2144 46 2149 40 41 58 2144 46 2150 40 41 59 688 40 2139 340 2133 307 2147 46 2151 40 2139 46 2152 40 41 41 41 123 792 2153 59 125 125 580 40 2154 2155 41 123 125 125 125 125 125 792 2121 59 125 773 570 2156 40 41 123 792 2004 702 2157 59 125 773 570 2156 40 2067 2040 41 123 688 40 2156 40 41 41 123 792 40 2040 46 2158 40 40 40 2159 41 2004 41 46 2160 40 41 41 41 59 125 792 2161 59 125 64 2013 777 2162 2163 40 41 123 792 2004 59 125 125 ,"{'AvgLine': 14, 'CountLine': 177, 'CountStmt': 99, 'MaxNesting': 6, 'AvgLineCode': 12, 'AvgEssential': 2, 'AvgLineBlank': 1, 'CountStmtExe': 77, 'MaxEssential': 8, 'SumEssential': 29, 'AvgCyclomatic': 2, 'CountLineCode': 149, 'CountStmtDecl': 49, 'MaxCyclomatic': 9, 'SumCyclomatic': 36, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 28, 'CountSemicolon': 67, 'CountDeclMethod': 11, 'CountLineCodeExe': 103, 'CountLineComment': 0, 'CountClassCoupled': 19, 'CountClassDerived': 0, 'CountLineCodeDecl': 56, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 47, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 65, 'SumCyclomaticModified': 36, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 2, 'CountDeclMethodPrivate': 7, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 19, 'CountDeclInstanceVariable': 5, 'PercentLackOfCohesionModified': 56}"
2965,Java,"@Slf4j
@EqualsAndHashCode
@Getter
public final class Dispute implements NetworkPayload, PersistablePayload {

    public enum State {
        NEEDS_UPGRADE,
        NEW,
        OPEN,
        REOPENED,
        CLOSED;

        public static Dispute.State fromProto(protobuf.Dispute.State state) {
            return ProtoUtil.enumFromProto(Dispute.State.class, state.name());
        }

        public static protobuf.Dispute.State toProtoMessage(Dispute.State state) {
            return protobuf.Dispute.State.valueOf(state.name());
        }
    }

    private final String tradeId;
    private final String id;
    private final int traderId;
    private final boolean disputeOpenerIsBuyer;
    private final boolean disputeOpenerIsMaker;
    // PubKeyRing of trader who opened the dispute
    private final PubKeyRing traderPubKeyRing;
    private final long tradeDate;
    private final long tradePeriodEnd;
    private final Contract contract;
    @Nullable
    private final byte[] contractHash;
    @Nullable
    private final byte[] depositTxSerialized;
    @Nullable
    private final byte[] payoutTxSerialized;
    @Nullable
    private final String depositTxId;
    @Nullable
    private final String payoutTxId;
    private final String contractAsJson;
    @Nullable
    private final String makerContractSignature;
    @Nullable
    private final String takerContractSignature;
    private final PubKeyRing agentPubKeyRing; // dispute agent
    private final boolean isSupportTicket;
    private final ObservableList<ChatMessage> chatMessages = FXCollections.observableArrayList();
    // disputeResultProperty.get is Nullable!
    private final ObjectProperty<DisputeResult> disputeResultProperty = new SimpleObjectProperty<>();
    private final long openingDate;
    @Nullable
    @Setter
    private String disputePayoutTxId;
    @Setter
    // Added v1.2.0
    private SupportType supportType;
    // Only used at refundAgent so that he knows how the mediator resolved the case
    @Setter
    @Nullable
    private String mediatorsDisputeResult;
    @Setter
    @Nullable
    private String delayedPayoutTxId;

    // Added at v1.4.0
    @Setter
    @Nullable
    private String donationAddressOfDelayedPayoutTx;
    // Added at v1.6.0
    private Dispute.State disputeState = State.NEW;

    // Should be only used in emergency case if we need to add data but do not want to break backward compatibility
    // at the P2P network storage checks. The hash of the object will be used to verify if the data is valid. Any new
    // field in a class would break that hash and therefore break the storage mechanism.
    @Nullable
    @Setter
    private Map<String, String> extraDataMap;

    // We do not persist uid, it is only used by dispute agents to guarantee an uid.
    @Setter
    @Nullable
    private transient String uid;
    @Setter
    private transient long payoutTxConfirms = -1;
    @Setter
    private transient boolean payoutDone = false;

    private transient final BooleanProperty isClosedProperty = new SimpleBooleanProperty();
    private transient final IntegerProperty badgeCountProperty = new SimpleIntegerProperty();


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Dispute(long openingDate,
                   String tradeId,
                   int traderId,
                   boolean disputeOpenerIsBuyer,
                   boolean disputeOpenerIsMaker,
                   PubKeyRing traderPubKeyRing,
                   long tradeDate,
                   long tradePeriodEnd,
                   Contract contract,
                   @Nullable byte[] contractHash,
                   @Nullable byte[] depositTxSerialized,
                   @Nullable byte[] payoutTxSerialized,
                   @Nullable String depositTxId,
                   @Nullable String payoutTxId,
                   String contractAsJson,
                   @Nullable String makerContractSignature,
                   @Nullable String takerContractSignature,
                   PubKeyRing agentPubKeyRing,
                   boolean isSupportTicket,
                   SupportType supportType) {
        this.openingDate = openingDate;
        this.tradeId = tradeId;
        this.traderId = traderId;
        this.disputeOpenerIsBuyer = disputeOpenerIsBuyer;
        this.disputeOpenerIsMaker = disputeOpenerIsMaker;
        this.traderPubKeyRing = traderPubKeyRing;
        this.tradeDate = tradeDate;
        this.tradePeriodEnd = tradePeriodEnd;
        this.contract = contract;
        this.contractHash = contractHash;
        this.depositTxSerialized = depositTxSerialized;
        this.payoutTxSerialized = payoutTxSerialized;
        this.depositTxId = depositTxId;
        this.payoutTxId = payoutTxId;
        this.contractAsJson = contractAsJson;
        this.makerContractSignature = makerContractSignature;
        this.takerContractSignature = takerContractSignature;
        this.agentPubKeyRing = agentPubKeyRing;
        this.isSupportTicket = isSupportTicket;
        this.supportType = supportType;

        id = tradeId + ""_"" + traderId;
        uid = UUID.randomUUID().toString();
        refreshAlertLevel(true);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public protobuf.Dispute toProtoMessage() {
        // Needed to avoid ConcurrentModificationException
        List<ChatMessage> clonedChatMessages = new ArrayList<>(chatMessages);
        protobuf.Dispute.Builder builder = protobuf.Dispute.newBuilder()
                .setTradeId(tradeId)
                .setTraderId(traderId)
                .setDisputeOpenerIsBuyer(disputeOpenerIsBuyer)
                .setDisputeOpenerIsMaker(disputeOpenerIsMaker)
                .setTraderPubKeyRing(traderPubKeyRing.toProtoMessage())
                .setTradeDate(tradeDate)
                .setTradePeriodEnd(tradePeriodEnd)
                .setContract(contract.toProtoMessage())
                .setContractAsJson(contractAsJson)
                .setAgentPubKeyRing(agentPubKeyRing.toProtoMessage())
                .setIsSupportTicket(isSupportTicket)
                .addAllChatMessage(clonedChatMessages.stream()
                        .map(msg -> msg.toProtoNetworkEnvelope().getChatMessage())
                        .collect(Collectors.toList()))
                .setIsClosed(this.isClosed())
                .setOpeningDate(openingDate)
                .setState(Dispute.State.toProtoMessage(disputeState))
                .setId(id);

        Optional.ofNullable(contractHash).ifPresent(e -> builder.setContractHash(ByteString.copyFrom(e)));
        Optional.ofNullable(depositTxSerialized).ifPresent(e -> builder.setDepositTxSerialized(ByteString.copyFrom(e)));
        Optional.ofNullable(payoutTxSerialized).ifPresent(e -> builder.setPayoutTxSerialized(ByteString.copyFrom(e)));
        Optional.ofNullable(depositTxId).ifPresent(builder::setDepositTxId);
        Optional.ofNullable(payoutTxId).ifPresent(builder::setPayoutTxId);
        Optional.ofNullable(disputePayoutTxId).ifPresent(builder::setDisputePayoutTxId);
        Optional.ofNullable(makerContractSignature).ifPresent(builder::setMakerContractSignature);
        Optional.ofNullable(takerContractSignature).ifPresent(builder::setTakerContractSignature);
        Optional.ofNullable(disputeResultProperty.get()).ifPresent(result -> builder.setDisputeResult(disputeResultProperty.get().toProtoMessage()));
        Optional.ofNullable(supportType).ifPresent(result -> builder.setSupportType(SupportType.toProtoMessage(supportType)));
        Optional.ofNullable(mediatorsDisputeResult).ifPresent(result -> builder.setMediatorsDisputeResult(mediatorsDisputeResult));
        Optional.ofNullable(delayedPayoutTxId).ifPresent(result -> builder.setDelayedPayoutTxId(delayedPayoutTxId));
        Optional.ofNullable(donationAddressOfDelayedPayoutTx).ifPresent(result -> builder.setDonationAddressOfDelayedPayoutTx(donationAddressOfDelayedPayoutTx));
        Optional.ofNullable(getExtraDataMap()).ifPresent(builder::putAllExtraData);
        return builder.build();
    }

    public static Dispute fromProto(protobuf.Dispute proto, CoreProtoResolver coreProtoResolver) {
        Dispute dispute = new Dispute(proto.getOpeningDate(),
                proto.getTradeId(),
                proto.getTraderId(),
                proto.getDisputeOpenerIsBuyer(),
                proto.getDisputeOpenerIsMaker(),
                PubKeyRing.fromProto(proto.getTraderPubKeyRing()),
                proto.getTradeDate(),
                proto.getTradePeriodEnd(),
                Contract.fromProto(proto.getContract(), coreProtoResolver),
                ProtoUtil.byteArrayOrNullFromProto(proto.getContractHash()),
                ProtoUtil.byteArrayOrNullFromProto(proto.getDepositTxSerialized()),
                ProtoUtil.byteArrayOrNullFromProto(proto.getPayoutTxSerialized()),
                ProtoUtil.stringOrNullFromProto(proto.getDepositTxId()),
                ProtoUtil.stringOrNullFromProto(proto.getPayoutTxId()),
                proto.getContractAsJson(),
                ProtoUtil.stringOrNullFromProto(proto.getMakerContractSignature()),
                ProtoUtil.stringOrNullFromProto(proto.getTakerContractSignature()),
                PubKeyRing.fromProto(proto.getAgentPubKeyRing()),
                proto.getIsSupportTicket(),
                SupportType.fromProto(proto.getSupportType()));

        dispute.setExtraDataMap(CollectionUtils.isEmpty(proto.getExtraDataMap()) ?
                null : ExtraDataMapValidator.getValidatedExtraDataMap(proto.getExtraDataMap()));

        dispute.chatMessages.addAll(proto.getChatMessageList().stream()
                .map(ChatMessage::fromPayloadProto)
                .collect(Collectors.toList()));

        if (proto.hasDisputeResult())
            dispute.disputeResultProperty.set(DisputeResult.fromProto(proto.getDisputeResult()));
        dispute.disputePayoutTxId = ProtoUtil.stringOrNullFromProto(proto.getDisputePayoutTxId());

        String mediatorsDisputeResult = proto.getMediatorsDisputeResult();
        if (!mediatorsDisputeResult.isEmpty()) {
            dispute.setMediatorsDisputeResult(mediatorsDisputeResult);
        }

        String delayedPayoutTxId = proto.getDelayedPayoutTxId();
        if (!delayedPayoutTxId.isEmpty()) {
            dispute.setDelayedPayoutTxId(delayedPayoutTxId);
        }

        String donationAddressOfDelayedPayoutTx = proto.getDonationAddressOfDelayedPayoutTx();
        if (!donationAddressOfDelayedPayoutTx.isEmpty()) {
            dispute.setDonationAddressOfDelayedPayoutTx(donationAddressOfDelayedPayoutTx);
        }

        if (Dispute.State.fromProto(proto.getState()) == State.NEEDS_UPGRADE) {
            // old disputes did not have a state field, so choose an appropriate state:
            dispute.setState(proto.getIsClosed() ? State.CLOSED : State.OPEN);
            if (dispute.getDisputeState() == State.CLOSED) {
                // mark chat messages as read for pre-existing CLOSED disputes
                // otherwise at upgrade, all old disputes would have 1 unread chat message
                // because currently when a dispute is closed, the last chat message is not marked read
                dispute.getChatMessages().forEach(m -> m.setWasDisplayed(true));
            }
        } else {
            dispute.setState(Dispute.State.fromProto(proto.getState()));
        }

        dispute.refreshAlertLevel(true);
        return dispute;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void addAndPersistChatMessage(ChatMessage chatMessage) {
        if (!chatMessages.contains(chatMessage)) {
            chatMessages.add(chatMessage);
        } else {
            log.error(""disputeDirectMessage already exists"");
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Setters
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void setIsClosed() {
        setState(State.CLOSED);
    }

    public void reOpen() {
        setState(State.REOPENED);
    }

    public void setState(Dispute.State disputeState) {
        this.disputeState = disputeState;
        this.isClosedProperty.set(disputeState == State.CLOSED);
    }

    public void setDisputeResult(DisputeResult disputeResult) {
        disputeResultProperty.set(disputeResult);
    }

    public void setExtraData(String key, String value) {
        if (key == null || value == null) {
            return;
        }
        if (extraDataMap == null) {
            extraDataMap = new HashMap<>();
        }
        extraDataMap.put(key, value);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    public String getShortTradeId() {
        return Utilities.getShortId(tradeId);
    }

    public ReadOnlyBooleanProperty isClosedProperty() {
        return isClosedProperty;
    }
    public ReadOnlyIntegerProperty getBadgeCountProperty() {
        return badgeCountProperty;
    }
    public ReadOnlyObjectProperty<DisputeResult> disputeResultProperty() {
        return disputeResultProperty;
    }

    public Date getTradeDate() {
        return new Date(tradeDate);
    }

    public Date getTradePeriodEnd() {
        return new Date(tradePeriodEnd);
    }

    public Date getOpeningDate() {
        return new Date(openingDate);
    }

    public boolean isNew() {
        return this.disputeState == State.NEW;
    }

    public boolean isClosed() {
        return this.disputeState == State.CLOSED;
    }

    public void refreshAlertLevel(boolean senderFlag) {
        // if the dispute is ""new"" that is 1 alert that has to be propagated upstream
        // or if there are unread messages that is 1 alert that has to be propagated upstream
        if (isNew() || unreadMessageCount(senderFlag) > 0) {
            badgeCountProperty.setValue(1);
        } else {
            badgeCountProperty.setValue(0);
        }
    }

    public long unreadMessageCount(boolean senderFlag) {
        return chatMessages.stream()
                .filter(m -> m.isSenderIsTrader() == senderFlag || m.isSystemMessage())
                .filter(m -> !m.isWasDisplayed())
                .count();
    }

    public void setDisputeSeen(boolean senderFlag) {
        if (this.disputeState == State.NEW)
            setState(State.OPEN);
        refreshAlertLevel(senderFlag);
    }

    public void setChatMessagesSeen(boolean senderFlag) {
        getChatMessages().forEach(m -> m.setWasDisplayed(true));
        refreshAlertLevel(senderFlag);
    }

    public String getRoleString() {
        if (disputeOpenerIsMaker) {
            if (disputeOpenerIsBuyer)
                return Res.get(""support.buyerOfferer"");
            else
                return Res.get(""support.sellerOfferer"");
        } else {
            if (disputeOpenerIsBuyer)
                return Res.get(""support.buyerTaker"");
            else
                return Res.get(""support.sellerTaker"");
        }
    }

    @Override
    public String toString() {
        return ""Dispute{"" +
                ""\n     tradeId='"" + tradeId + '\'' +
                "",\n     id='"" + id + '\'' +
                "",\n     uid='"" + uid + '\'' +
                "",\n     state="" + disputeState +
                "",\n     traderId="" + traderId +
                "",\n     disputeOpenerIsBuyer="" + disputeOpenerIsBuyer +
                "",\n     disputeOpenerIsMaker="" + disputeOpenerIsMaker +
                "",\n     traderPubKeyRing="" + traderPubKeyRing +
                "",\n     tradeDate="" + tradeDate +
                "",\n     tradePeriodEnd="" + tradePeriodEnd +
                "",\n     contract="" + contract +
                "",\n     contractHash="" + Utilities.bytesAsHexString(contractHash) +
                "",\n     depositTxSerialized="" + Utilities.bytesAsHexString(depositTxSerialized) +
                "",\n     payoutTxSerialized="" + Utilities.bytesAsHexString(payoutTxSerialized) +
                "",\n     depositTxId='"" + depositTxId + '\'' +
                "",\n     payoutTxId='"" + payoutTxId + '\'' +
                "",\n     contractAsJson='"" + contractAsJson + '\'' +
                "",\n     makerContractSignature='"" + makerContractSignature + '\'' +
                "",\n     takerContractSignature='"" + takerContractSignature + '\'' +
                "",\n     agentPubKeyRing="" + agentPubKeyRing +
                "",\n     isSupportTicket="" + isSupportTicket +
                "",\n     chatMessages="" + chatMessages +
                "",\n     isClosedProperty="" + isClosedProperty +
                "",\n     disputeResultProperty="" + disputeResultProperty +
                "",\n     disputePayoutTxId='"" + disputePayoutTxId + '\'' +
                "",\n     openingDate="" + openingDate +
                "",\n     supportType="" + supportType +
                "",\n     mediatorsDisputeResult='"" + mediatorsDisputeResult + '\'' +
                "",\n     delayedPayoutTxId='"" + delayedPayoutTxId + '\'' +
                "",\n     donationAddressOfDelayedPayoutTx='"" + donationAddressOfDelayedPayoutTx + '\'' +
                ""\n}"";
    }
}",1,64 2000 64 2001 64 2002 777 657 587 2003 693 2004 44 2005 123 777 640 2006 123 2007 44 2008 44 2009 44 2010 44 2011 59 777 809 2003 46 2006 2012 40 2013 46 2003 46 2006 2014 41 123 792 2015 46 2016 40 2003 46 2006 46 587 44 2014 46 2017 40 41 41 59 125 777 809 2013 46 2003 46 2006 2018 40 2003 46 2006 2014 41 123 792 2013 46 2003 46 2006 46 2019 40 2014 46 2020 40 41 41 59 125 125 773 657 2021 2022 59 773 657 2021 2023 59 773 657 704 2024 59 773 657 570 2025 59 773 657 570 2026 59 330 773 657 2027 2028 59 773 657 726 2029 59 773 657 726 2030 59 773 657 2031 2032 59 64 2033 773 657 574 91 93 2034 59 64 2033 773 657 574 91 93 2035 59 64 2033 773 657 574 91 93 2036 59 64 2033 773 657 2021 2037 59 64 2033 773 657 2021 2038 59 773 657 2021 2039 59 64 2033 773 657 2021 2040 59 64 2033 773 657 2021 2041 59 773 657 2027 2042 59 330 773 657 570 2043 59 773 657 2044 60 2045 62 2046 61 2047 46 2048 40 41 59 330 773 657 2049 60 2050 62 2051 61 744 2052 60 62 40 41 59 773 657 726 2053 59 64 2033 64 2054 773 2021 2055 59 64 2054 330 773 2056 2057 59 330 64 2054 64 2033 773 2021 2058 59 64 2054 64 2033 773 2021 2059 59 330 64 2054 64 2033 773 2021 2060 59 330 773 2003 46 2006 2061 61 2006 46 2062 59 330 330 330 64 2033 64 2054 773 2063 60 2021 44 2021 62 2064 59 330 64 2054 64 2033 773 828 2021 2065 59 64 2054 773 828 726 2066 61 45 1501 59 64 2054 773 828 570 2067 61 2068 59 773 828 657 2069 2070 61 744 2071 40 41 59 773 828 657 2072 2073 61 744 2074 40 41 59 331 330 331 777 2003 40 726 2053 44 2021 2022 44 704 2024 44 570 2025 44 570 2026 44 2027 2028 44 726 2029 44 726 2030 44 2031 2032 44 64 2033 574 91 93 2034 44 64 2033 574 91 93 2035 44 64 2033 574 91 93 2036 44 64 2033 2021 2037 44 64 2033 2021 2038 44 2021 2039 44 64 2033 2021 2040 44 64 2033 2021 2041 44 2027 2042 44 570 2043 44 2056 2057 41 123 823 46 2053 61 2053 59 823 46 2022 61 2022 59 823 46 2024 61 2024 59 823 46 2025 61 2025 59 823 46 2026 61 2026 59 823 46 2028 61 2028 59 823 46 2029 61 2029 59 823 46 2030 61 2030 59 823 46 2032 61 2032 59 823 46 2034 61 2034 59 823 46 2035 61 2035 59 823 46 2036 61 2036 59 823 46 2037 61 2037 59 823 46 2038 61 2038 59 823 46 2039 61 2039 59 823 46 2040 61 2040 59 823 46 2041 61 2041 59 823 46 2042 61 2042 59 823 46 2043 61 2043 59 823 46 2057 61 2057 59 2023 61 2022 43 362 43 2024 59 2065 61 2075 46 2076 40 41 46 2077 40 41 59 2078 40 2079 41 59 125 331 330 331 64 2080 777 2081 46 2003 2082 40 41 123 330 2083 60 2045 62 2084 61 744 2085 60 62 40 2046 41 59 2081 46 2003 46 2086 2087 61 2081 46 2003 46 2088 40 41 46 2089 40 2022 41 46 2090 40 2024 41 46 2091 40 2025 41 46 2092 40 2026 41 46 2093 40 2028 46 2082 40 41 41 46 2094 40 2029 41 46 2095 40 2030 41 46 2096 40 2032 46 2082 40 41 41 46 2097 40 2039 41 46 2098 40 2042 46 2082 40 41 41 46 2099 40 2043 41 46 2100 40 2084 46 2101 40 41 46 2102 40 2103 45 62 2103 46 2104 40 41 46 2105 40 41 41 46 2106 40 2107 46 2108 40 41 41 41 46 2109 40 823 46 2110 40 41 41 46 2111 40 2053 41 46 2112 40 2003 46 2006 46 2082 40 2061 41 41 46 2113 40 2023 41 59 2114 46 2115 40 2034 41 46 2116 40 2117 45 62 2087 46 2118 40 2119 46 2120 40 2117 41 41 41 59 2114 46 2115 40 2035 41 46 2116 40 2117 45 62 2087 46 2121 40 2119 46 2120 40 2117 41 41 41 59 2114 46 2115 40 2036 41 46 2116 40 2117 45 62 2087 46 2122 40 2119 46 2120 40 2117 41 41 41 59 2114 46 2115 40 2037 41 46 2116 40 2087 58 58 2123 41 59 2114 46 2115 40 2038 41 46 2116 40 2087 58 58 2124 41 59 2114 46 2115 40 2055 41 46 2116 40 2087 58 58 2125 41 59 2114 46 2115 40 2040 41 46 2116 40 2087 58 58 2126 41 59 2114 46 2115 40 2041 41 46 2116 40 2087 58 58 2127 41 59 2114 46 2115 40 2051 46 2128 40 41 41 46 2116 40 2129 45 62 2087 46 2130 40 2051 46 2128 40 41 46 2082 40 41 41 41 59 2114 46 2115 40 2057 41 46 2116 40 2129 45 62 2087 46 2131 40 2056 46 2082 40 2057 41 41 41 59 2114 46 2115 40 2058 41 46 2116 40 2129 45 62 2087 46 2132 40 2058 41 41 59 2114 46 2115 40 2059 41 46 2116 40 2129 45 62 2087 46 2133 40 2059 41 41 59 2114 46 2115 40 2060 41 46 2116 40 2129 45 62 2087 46 2134 40 2060 41 41 59 2114 46 2115 40 2135 40 41 41 46 2116 40 2087 58 58 2136 41 59 792 2087 46 2137 40 41 59 125 777 809 2003 2138 40 2081 46 2003 2139 44 2140 2141 41 123 2003 2142 61 744 2003 40 2139 46 2143 40 41 44 2139 46 2144 40 41 44 2139 46 2145 40 41 44 2139 46 2146 40 41 44 2139 46 2147 40 41 44 2027 46 2138 40 2139 46 2148 40 41 41 44 2139 46 2149 40 41 44 2139 46 2150 40 41 44 2031 46 2138 40 2139 46 2151 40 41 44 2141 41 44 2152 46 2153 40 2139 46 2154 40 41 41 44 2152 46 2153 40 2139 46 2155 40 41 41 44 2152 46 2153 40 2139 46 2156 40 41 41 44 2152 46 2157 40 2139 46 2158 40 41 41 44 2152 46 2157 40 2139 46 2159 40 41 41 44 2139 46 2160 40 41 44 2152 46 2157 40 2139 46 2161 40 41 41 44 2152 46 2157 40 2139 46 2162 40 41 41 44 2027 46 2138 40 2139 46 2163 40 41 41 44 2139 46 2164 40 41 44 2056 46 2138 40 2139 46 2165 40 41 41 41 59 2142 46 2166 40 2167 46 2168 40 2139 46 2169 40 41 41 63 2170 58 2171 46 2172 40 2139 46 2169 40 41 41 41 59 2142 46 2046 46 2173 40 2139 46 2174 40 41 46 2175 40 41 46 2176 40 2045 58 58 2177 41 46 2178 40 2179 46 2180 40 41 41 41 59 688 40 2139 46 2181 40 41 41 2142 46 2051 46 2182 40 2050 46 2138 40 2139 46 2183 40 41 41 41 59 2142 46 2055 61 2152 46 2157 40 2139 46 2184 40 41 41 59 2021 2058 61 2139 46 2185 40 41 59 688 40 33 2058 46 2168 40 41 41 123 2142 46 2186 40 2058 41 59 125 2021 2059 61 2139 46 2187 40 41 59 688 40 33 2059 46 2168 40 41 41 123 2142 46 2188 40 2059 41 59 125 2021 2060 61 2139 46 2189 40 41 59 688 40 33 2060 46 2168 40 41 41 123 2142 46 2190 40 2060 41 59 125 688 40 2003 46 2006 46 2138 40 2139 46 2191 40 41 41 323 2006 46 2192 41 123 330 2142 46 2193 40 2139 46 2194 40 41 63 2006 46 2195 58 2006 46 2196 41 59 688 40 2142 46 2197 40 41 323 2006 46 2195 41 123 330 330 330 2142 46 2198 40 41 46 2199 40 2200 45 62 2200 46 2201 40 2202 41 41 59 125 125 630 123 2142 46 2203 40 2003 46 2006 46 2138 40 2139 46 2191 40 41 41 41 59 125 2142 46 2204 40 2205 41 59 792 2142 59 125 331 330 331 777 865 2206 40 2045 2207 41 123 688 40 33 2046 46 2208 40 2207 41 41 123 2046 46 2209 40 2207 41 59 125 630 123 2210 46 2211 40 362 41 59 125 125 331 330 331 777 865 2212 40 41 123 2213 40 2006 46 2214 41 59 125 777 865 2215 40 41 123 2216 40 2006 46 2217 41 59 125 777 865 2218 40 2003 46 2006 2061 41 123 823 46 2061 61 2061 59 823 46 2070 46 2219 40 2061 323 2006 46 2220 41 59 125 777 865 2221 40 2050 2222 41 123 2051 46 2223 40 2222 41 59 125 777 865 2224 40 2021 2225 44 2021 2226 41 123 688 40 2225 323 2227 309 2226 323 2227 41 123 792 59 125 688 40 2064 323 2227 41 123 2064 61 744 2228 60 62 40 41 59 125 2064 46 2229 40 2225 44 2226 41 59 125 331 330 331 777 2021 2230 40 41 123 792 2231 46 2232 40 2022 41 59 125 777 2233 2070 40 41 123 792 2070 59 125 777 2234 2235 40 41 123 792 2073 59 125 777 2236 60 2050 62 2051 40 41 123 792 2051 59 125 777 2237 2238 40 41 123 792 744 2237 40 2029 41 59 125 777 2237 2239 40 41 123 792 744 2237 40 2030 41 59 125 777 2237 2240 40 41 123 792 744 2237 40 2053 41 59 125 777 570 2241 40 41 123 792 823 46 2061 323 2006 46 2062 59 125 777 570 2242 40 41 123 792 823 46 2061 323 2006 46 2243 59 125 777 865 2244 40 570 2245 41 123 330 330 688 40 2241 40 41 309 2246 40 2245 41 62 1500 41 123 2073 46 2247 40 1501 41 59 125 630 123 2073 46 2248 40 1500 41 59 125 125 777 726 2249 40 570 2245 41 123 792 2046 46 2250 40 41 46 2251 40 2252 45 62 2252 46 2253 40 41 323 2245 309 2252 46 2254 40 41 41 46 2251 40 2252 45 62 33 2252 46 2255 40 41 41 46 2256 40 41 59 125 777 865 2257 40 570 2245 41 123 688 40 823 46 2061 323 2006 46 2062 41 2218 40 2006 46 2258 41 59 2244 40 2245 41 59 125 777 865 2259 40 570 2245 41 123 2260 40 41 46 2261 40 2262 45 62 2262 46 2263 40 2264 41 41 59 2244 40 2245 41 59 125 777 2021 2265 40 41 123 688 40 2026 41 123 688 40 2025 41 792 2266 46 2267 40 362 41 59 630 792 2266 46 2267 40 362 41 59 125 630 123 688 40 2025 41 792 2268 46 2269 40 362 41 59 630 792 2268 46 2269 40 362 41 59 125 125 64 2080 777 2021 2270 40 41 123 792 362 43 362 43 2022 43 314 43 362 43 2023 43 314 43 362 43 2065 43 314 43 362 43 2061 43 362 43 2024 43 362 43 2025 43 362 43 2026 43 362 43 2028 43 362 43 2029 43 362 43 2030 43 362 43 2032 43 362 43 2271 46 2272 40 2034 41 43 362 43 2271 46 2272 40 2035 41 43 362 43 2271 46 2272 40 2036 41 43 362 43 2037 43 314 43 362 43 2038 43 314 43 362 43 2039 43 314 43 362 43 2040 43 314 43 362 43 2041 43 314 43 362 43 2042 43 362 43 2043 43 362 43 2046 43 362 43 2070 43 362 43 2051 43 362 43 2055 43 314 43 362 43 2053 43 362 43 2057 43 362 43 2058 43 314 43 362 43 2059 43 314 43 362 43 2060 43 314 43 362 59 125 125 ,"{'AvgLine': 11, 'CountLine': 415, 'CountStmt': 165, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 107, 'MaxEssential': 4, 'SumEssential': 40, 'AvgCyclomatic': 1, 'CountLineCode': 334, 'CountStmtDecl': 68, 'MaxCyclomatic': 9, 'SumCyclomatic': 53, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 49, 'CountSemicolon': 124, 'CountDeclMethod': 24, 'CountLineCodeExe': 190, 'CountLineComment': 33, 'CountClassCoupled': 41, 'CountClassDerived': 0, 'CountLineCodeDecl': 121, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.10', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 56, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 24, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 53, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 23, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 41, 'CountDeclInstanceVariable': 34, 'PercentLackOfCohesionModified': 82}"
2777,Java,"class TakeOfferDataModel extends OfferDataModel {
    private final TradeManager tradeManager;
    private final OfferBook offerBook;
    private final BsqWalletService bsqWalletService;
    private final User user;
    private final FeeService feeService;
    private final MempoolService mempoolService;
    private final FilterManager filterManager;
    final Preferences preferences;
    private final TxFeeEstimationService txFeeEstimationService;
    private final PriceFeedService priceFeedService;
    private final AccountAgeWitnessService accountAgeWitnessService;
    private final Navigation navigation;
    private final P2PService p2PService;

    private Coin txFeeFromFeeService;
    private Coin securityDeposit;
    // Coin feeFromFundingTx = Coin.NEGATIVE_SATOSHI;

    private Offer offer;

    // final BooleanProperty isFeeFromFundingTxSufficient = new SimpleBooleanProperty();
    // final BooleanProperty isMainNet = new SimpleBooleanProperty();
    private final ObjectProperty<Coin> amount = new SimpleObjectProperty<>();
    final ObjectProperty<Volume> volume = new SimpleObjectProperty<>();

    private BalanceListener balanceListener;
    private PaymentAccount paymentAccount;
    private boolean isTabSelected;
    Price tradePrice;
    // Use an average of a typical trade fee tx with 1 input, deposit tx and payout tx.
    private int feeTxVsize = 192;  // (175+233+169)/3
    private boolean freezeFee;
    private Coin txFeePerVbyteFromFeeService;
    @Getter
    protected final IntegerProperty mempoolStatus = new SimpleIntegerProperty();
    @Getter
    protected String mempoolStatusText;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////


    @Inject
    TakeOfferDataModel(TradeManager tradeManager,
                       OfferBook offerBook,
                       OfferUtil offerUtil,
                       BtcWalletService btcWalletService,
                       BsqWalletService bsqWalletService,
                       User user, FeeService feeService,
                       MempoolService mempoolService,
                       FilterManager filterManager,
                       Preferences preferences,
                       TxFeeEstimationService txFeeEstimationService,
                       PriceFeedService priceFeedService,
                       AccountAgeWitnessService accountAgeWitnessService,
                       Navigation navigation,
                       P2PService p2PService
    ) {
        super(btcWalletService, offerUtil);

        this.tradeManager = tradeManager;
        this.offerBook = offerBook;
        this.bsqWalletService = bsqWalletService;
        this.user = user;
        this.feeService = feeService;
        this.mempoolService = mempoolService;
        this.filterManager = filterManager;
        this.preferences = preferences;
        this.txFeeEstimationService = txFeeEstimationService;
        this.priceFeedService = priceFeedService;
        this.accountAgeWitnessService = accountAgeWitnessService;
        this.navigation = navigation;
        this.p2PService = p2PService;
    }

    @Override
    protected void activate() {
        // when leaving screen we reset state
        offer.setState(Offer.State.UNKNOWN);

        addListeners();

        updateBalance();

        // TODO In case that we have funded but restarted, or canceled but took again the offer we would need to
        // store locally the result when we received the funding tx(s).
        // For now we just ignore that rare case and bypass the check by setting a sufficient value
        // if (isWalletFunded.get())
        //     feeFromFundingTxProperty.set(FeePolicy.getMinRequiredFeeForFundingTx());

        if (isTabSelected)
            priceFeedService.setCurrencyCode(offer.getCurrencyCode());

        if (canTakeOffer()) {
            tradeManager.checkOfferAvailability(offer,
                    false,
                    () -> {
                    },
                    errorMessage -> new Popup().warning(errorMessage).show());
        }
    }

    @Override
    protected void deactivate() {
        removeListeners();
        if (offer != null) {
            offer.cancelAvailabilityRequest();
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    // called before activate
    void initWithData(Offer offer) {
        this.offer = offer;
        tradePrice = offer.getPrice();
        addressEntry = btcWalletService.getOrCreateAddressEntry(offer.getId(), AddressEntry.Context.OFFER_FUNDING);
        checkNotNull(addressEntry, ""addressEntry must not be null"");

        ObservableList<PaymentAccount> possiblePaymentAccounts = getPossiblePaymentAccounts();
        checkArgument(!possiblePaymentAccounts.isEmpty(), ""possiblePaymentAccounts.isEmpty()"");
        paymentAccount = getLastSelectedPaymentAccount();

        this.amount.set(Coin.valueOf(Math.min(offer.getAmount().value, getMaxTradeLimit())));

        securityDeposit = offer.getDirection() == OfferDirection.SELL ?
                getBuyerSecurityDeposit() :
                getSellerSecurityDeposit();

        // Taker pays 3 times the tx fee (taker fee, deposit, payout) because the mining fee might be different when maker created the offer
        // and reserved his funds. Taker creates at least taker fee and deposit tx at nearly the same moment. Just the payout will
        // be later and still could lead to issues if the required fee changed a lot in the meantime. using RBF and/or
        // multiple batch-signed payout tx with different fees might be an option but RBF is not supported yet in BitcoinJ
        // and batched txs would add more complexity to the trade protocol.

        // A typical trade fee tx has about 175 vbytes (if one input). The trade txs has about 169-263 vbytes.
        // We use 192 as average value.

        // trade fee tx: 175 vbytes (1 input)
        // deposit tx: 233 vbytes (1 MS output+ OP_RETURN) - 263 vbytes (1 MS output + OP_RETURN + change in case of smaller trade amount)
        // payout tx: 169 vbytes
        // disputed payout tx: 139 vbytes

        // Set the default values (in rare cases if the fee request was not done yet we get the hard coded default values)
        // But the ""take offer"" happens usually after that so we should have already the value from the estimation service.
        txFeePerVbyteFromFeeService = feeService.getTxFeePerVbyte();
        txFeeFromFeeService = getTxFeeByVsize(feeTxVsize);

        // We request to get the actual estimated fee
        log.info(""Start requestTxFee: txFeeFromFeeService={}"", txFeeFromFeeService);
        feeService.requestFees(() -> {
            if (!freezeFee) {
                txFeePerVbyteFromFeeService = feeService.getTxFeePerVbyte();
                txFeeFromFeeService = getTxFeeByVsize(feeTxVsize);
                calculateTotalToPay();
                log.info(""Completed requestTxFee: txFeeFromFeeService={}"", txFeeFromFeeService);
            } else {
                log.debug(""We received the tx fee response after we have shown the funding screen and ignore that "" +
                        ""to avoid that the total funds to pay changes due changed tx fees."");
            }
        });

        mempoolStatus.setValue(-1);
        OfferPayload offerPayload = offer.getOfferPayload().orElseThrow();
        mempoolService.validateOfferMakerTx(offerPayload, (txValidator -> {
            mempoolStatus.setValue(txValidator.isFail() ? 0 : 1);
            if (txValidator.isFail()) {
                mempoolStatusText = txValidator.toString();
                log.info(""Mempool check of OfferFeePaymentTxId returned errors: [{}]"", mempoolStatusText);
            }
        }));

        calculateVolume();
        calculateTotalToPay();

        balanceListener = new BalanceListener(addressEntry.getAddress()) {
            @Override
            public void onBalanceChanged(Coin balance, Transaction tx) {
                updateBalance();
            }
        };

        offer.resetState();

        priceFeedService.setCurrencyCode(offer.getCurrencyCode());
    }

    // We don't want that the fee gets updated anymore after we show the funding screen.
    void onShowPayFundsScreen() {
        estimateTxVsize();
        freezeFee = true;
        calculateTotalToPay();
    }

    void onTabSelected(boolean isSelected) {
        this.isTabSelected = isSelected;
        if (isTabSelected)
            priceFeedService.setCurrencyCode(offer.getCurrencyCode());
    }

    public void onClose(boolean removeOffer) {
        // We do not wait until the offer got removed by a network remove message but remove it
        // directly from the offer book. The broadcast gets now bundled and has 2 sec. delay so the
        // removal from the network is a bit slower as it has been before. To avoid that the taker gets
        // confused to see the same offer still in the offerbook we remove it manually. This removal has
        // only local effect. Other trader might see the offer for a few seconds
        // still (but cannot take it).
        if (removeOffer) {
            offerBook.removeOffer(checkNotNull(offer));
        }

        btcWalletService.resetAddressEntriesForOpenOffer(offer.getId());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // UI actions
    ///////////////////////////////////////////////////////////////////////////////////////////

    // errorMessageHandler is used only in the check availability phase. As soon we have a trade we write the error msg in the trade object as we want to
    // have it persisted as well.
    void onTakeOffer(TradeResultHandler<Trade> tradeResultHandler) {
        checkNotNull(txFeeFromFeeService, ""txFeeFromFeeService must not be null"");
        checkNotNull(getTakerFee(), ""takerFee must not be null"");

        Coin fundsNeededForTrade = getFundsNeededForTrade();
        if (isBuyOffer())
            fundsNeededForTrade = fundsNeededForTrade.add(amount.get());

        if (filterManager.isCurrencyBanned(offer.getCurrencyCode())) {
            new Popup().warning(Res.get(""offerbook.warning.currencyBanned"")).show();
        } else if (filterManager.isPaymentMethodBanned(offer.getPaymentMethod())) {
            new Popup().warning(Res.get(""offerbook.warning.paymentMethodBanned"")).show();
        } else if (filterManager.isOfferIdBanned(offer.getId())) {
            new Popup().warning(Res.get(""offerbook.warning.offerBlocked"")).show();
        } else if (filterManager.isNodeAddressBanned(offer.getMakerNodeAddress())) {
            new Popup().warning(Res.get(""offerbook.warning.nodeBlocked"")).show();
        } else if (filterManager.requireUpdateToNewVersionForTrading()) {
            new Popup().warning(Res.get(""offerbook.warning.requireUpdateToNewVersion"")).show();
        } else if (tradeManager.wasOfferAlreadyUsedInTrade(offer.getId())) {
            new Popup().warning(Res.get(""offerbook.warning.offerWasAlreadyUsedInTrade"")).show();
        } else {
            tradeManager.onTakeOffer(amount.get(),
                    txFeeFromFeeService,
                    getTakerFee(),
                    isCurrencyForTakerFeeBtc(),
                    tradePrice.getValue(),
                    fundsNeededForTrade,
                    offer,
                    paymentAccount.getId(),
                    useSavingsWallet,
                    false,
                    tradeResultHandler,
                    errorMessage -> {
                        log.warn(errorMessage);
                        new Popup().warning(errorMessage).show();
                    }
            );
        }
    }

    // This works only if have already funds in the wallet
    // TODO: There still are issues if we get funded by very small inputs which are causing higher tx fees and the
    // changed total required amount is not updated. That will cause a InsufficientMoneyException and the user need to
    // start over again. To reproduce keep adding 0.002 BTC amounts while in the funding screen.
    // It would require a listener on changed balance and a new fee estimation with a correct recalculation of the required funds.
    // Another edge case not handled correctly is: If there are many small inputs and user add a large input later the
    // fee estimation is based on the large tx with many inputs but the actual tx will get created with the large input, thus
    // leading to a smaller tx and too high fees. Simply updating the fee estimation would lead to changed required funds
    // and if funds get higher (if tx get larger) the user would get confused (adding small inputs would increase total required funds).
    // So that would require more thoughts how to deal with all those cases.
    public void estimateTxVsize() {
        int txVsize = 0;
        if (btcWalletService.getBalance(Wallet.BalanceType.AVAILABLE).isPositive()) {
            Coin fundsNeededForTrade = getFundsNeededForTrade();
            if (isBuyOffer())
                fundsNeededForTrade = fundsNeededForTrade.add(amount.get());

            // As taker we pay 3 times the fee and currently the fee is the same for all 3 txs (trade fee tx, deposit
            // tx and payout tx).
            // We should try to change that in future to have the deposit and payout tx with a fixed fee as the vsize is
            // there more deterministic.
            // The trade fee tx can be in the worst case very large if there are many inputs so if we take that tx alone
            // for the fee estimation we would overpay a lot.
            // On the other side if we have the best case of a 1 input tx fee tx then it is only 175 vbytes but the
            // other 2 txs are different (233 and 169 vbytes) and may get a lower fee/vbyte as intended.
            // We apply following model to not overpay too much but be on the safe side as well.
            // We sum the taker fee tx and the deposit tx together as it can be assumed that both be in the same block and
            // as they are dependent txs the miner will pick both if the fee in total is good enough.
            // We make sure that the fee is sufficient to meet our intended fee/vbyte for the larger deposit tx with 233 vbytes.
            Tuple2<Coin, Integer> estimatedFeeAndTxVsize = txFeeEstimationService.getEstimatedFeeAndTxVsizeForTaker(fundsNeededForTrade,
                    getTakerFee());
            txFeeFromFeeService = estimatedFeeAndTxVsize.first;
            feeTxVsize = estimatedFeeAndTxVsize.second;
        } else {
            feeTxVsize = 233;
            txFeeFromFeeService = txFeePerVbyteFromFeeService.multiply(feeTxVsize);
            log.info(""We cannot do the fee estimation because there are no funds in the wallet.\nThis is expected "" +
                            ""if the user has not funded their wallet yet.\n"" +
                            ""In that case we use an estimated tx vsize of 233 vbytes.\n"" +
                            ""txFee based on estimated vsize of {} vbytes. feeTxVsize = {} vbytes. Actual tx vsize = {} vbytes. TxFee is {} ({} sat/vbyte)"",
                    feeTxVsize, feeTxVsize, txVsize, txFeeFromFeeService.toFriendlyString(), feeService.getTxFeePerVbyte());
        }
    }

    public void onPaymentAccountSelected(PaymentAccount paymentAccount) {
        if (paymentAccount != null) {
            this.paymentAccount = paymentAccount;

            long myLimit = getMaxTradeLimit();
            this.amount.set(Coin.valueOf(Math.max(offer.getMinAmount().value, Math.min(amount.get().value, myLimit))));

            preferences.setTakeOfferSelectedPaymentAccountId(paymentAccount.getId());
        }
    }

    void fundFromSavingsWallet() {
        useSavingsWallet = true;
        updateBalance();
        if (!isBtcWalletFunded.get()) {
            this.useSavingsWallet = false;
            updateBalance();
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    OfferDirection getDirection() {
        return offer.getDirection();
    }

    public Offer getOffer() {
        return offer;
    }

    ObservableList<PaymentAccount> getPossiblePaymentAccounts() {
        Set<PaymentAccount> paymentAccounts = user.getPaymentAccounts();
        checkNotNull(paymentAccounts, ""paymentAccounts must not be null"");
        return PaymentAccountUtil.getPossiblePaymentAccounts(offer, paymentAccounts, accountAgeWitnessService);
    }

    public PaymentAccount getLastSelectedPaymentAccount() {
        ObservableList<PaymentAccount> possiblePaymentAccounts = getPossiblePaymentAccounts();
        checkArgument(!possiblePaymentAccounts.isEmpty(), ""possiblePaymentAccounts must not be empty"");
        PaymentAccount firstItem = possiblePaymentAccounts.get(0);

        String id = preferences.getTakeOfferSelectedPaymentAccountId();
        if (id == null)
            return firstItem;

        return possiblePaymentAccounts.stream()
                .filter(e -> e.getId().equals(id))
                .findAny()
                .orElse(firstItem);
    }

    long getMaxTradeLimit() {
        if (paymentAccount != null) {
            return accountAgeWitnessService.getMyTradeLimit(paymentAccount, getCurrencyCode(),
                    offer.getMirroredDirection());
        } else {
            return 0;
        }
    }

    boolean canTakeOffer() {
        return GUIUtil.canCreateOrTakeOfferOrShowPopup(user, navigation, paymentAccount.getSelectedTradeCurrency()) &&
                GUIUtil.isBootstrappedOrShowPopup(p2PService);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Bindings, listeners
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void addListeners() {
        btcWalletService.addBalanceListener(balanceListener);
    }

    private void removeListeners() {
        btcWalletService.removeBalanceListener(balanceListener);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Utils
    ///////////////////////////////////////////////////////////////////////////////////////////

    void calculateVolume() {
        if (tradePrice != null && offer != null &&
                amount.get() != null &&
                !amount.get().isZero()) {
            Volume volumeByAmount = tradePrice.getVolumeByAmount(amount.get());
            if (offer.getPaymentMethod().getId().equals(PaymentMethod.HAL_CASH_ID))
                volumeByAmount = VolumeUtil.getAdjustedVolumeForHalCash(volumeByAmount);
            else if (CurrencyUtil.isFiatCurrency(getCurrencyCode()))
                volumeByAmount = VolumeUtil.getRoundedFiatVolume(volumeByAmount);

            volume.set(volumeByAmount);

            updateBalance();
        }
    }

    void applyAmount(Coin amount) {
        this.amount.set(Coin.valueOf(Math.min(amount.value, getMaxTradeLimit())));

        calculateTotalToPay();
    }

    void calculateTotalToPay() {
        // Taker pays 2 times the tx fee because the mining fee might be different when maker created the offer
        // and reserved his funds, so that would not work well with dynamic fees.
        // The mining fee for the takeOfferFee tx is deducted from the createOfferFee and not visible to the trader
        final Coin takerFee = getTakerFee();
        if (offer != null && amount.get() != null && takerFee != null) {
            Coin feeAndSecDeposit = getTotalTxFee().add(securityDeposit);
            if (isCurrencyForTakerFeeBtc()) {
                feeAndSecDeposit = feeAndSecDeposit.add(takerFee);
            }
            if (isBuyOffer())
                totalToPayAsCoin.set(feeAndSecDeposit.add(amount.get()));
            else
                totalToPayAsCoin.set(feeAndSecDeposit);

            updateBalance();
            log.debug(""totalToPayAsCoin {}"", totalToPayAsCoin.get().toFriendlyString());
        }
    }

    boolean isBuyOffer() {
        return getDirection() == OfferDirection.BUY;
    }

    boolean isSellOffer() {
        return getDirection() == OfferDirection.SELL;
    }

    boolean isCryptoCurrency() {
        return CurrencyUtil.isCryptoCurrency(getCurrencyCode());
    }

    @Nullable
    Coin getTakerFee(boolean isCurrencyForTakerFeeBtc) {
        Coin amount = this.amount.get();
        if (amount != null) {
            // TODO write unit test for that
            Coin feePerBtc = CoinUtil.getFeePerBtc(FeeService.getTakerFeePerBtc(isCurrencyForTakerFeeBtc), amount);
            return CoinUtil.maxCoin(feePerBtc, FeeService.getMinTakerFee(isCurrencyForTakerFeeBtc));
        } else {
            return null;
        }
    }

    @Nullable
    public Coin getTakerFee() {
        return getTakerFee(isCurrencyForTakerFeeBtc());
    }

    public void swapTradeToSavings() {
        log.debug(""swapTradeToSavings, offerId={}"", offer.getId());
        btcWalletService.resetAddressEntriesForOpenOffer(offer.getId());
    }

    // We use the sum of the vsize of the trade fee and the deposit tx to get an average.
    // Miners will take the trade fee tx if the total fee of both dependent txs are good enough.
    // With that we avoid that we overpay in case that the trade fee has many inputs and we would apply that fee for the
    // other 2 txs as well. We still might overpay a bit for the payout tx.
    private int getAverageVsize(int txVsize) {
        return (txVsize + 233) / 2;
    }

    private Coin getTxFeeByVsize(int vsizeInVbytes) {
        return txFeePerVbyteFromFeeService.multiply(getAverageVsize(vsizeInVbytes));
    }

  /*  private void setFeeFromFundingTx(Coin fee) {
        feeFromFundingTx = fee;
        isFeeFromFundingTxSufficient.set(feeFromFundingTx.compareTo(FeePolicy.getMinRequiredFeeForFundingTx()) >= 0);
    }*/

    boolean isMinAmountLessOrEqualAmount() {
        //noinspection SimplifiableIfStatement
        if (offer != null && amount.get() != null)
            return !offer.getMinAmount().isGreaterThan(amount.get());
        return true;
    }

    boolean isAmountLargerThanOfferAmount() {
        //noinspection SimplifiableIfStatement
        if (amount.get() != null && offer != null)
            return amount.get().isGreaterThan(offer.getAmount());
        return true;
    }

    boolean wouldCreateDustForMaker() {
        boolean result;
        if (amount.get() != null && offer != null) {
            Coin customAmount = offer.getAmount().subtract(amount.get());
            result = customAmount.isPositive() && customAmount.isLessThan(Restrictions.getMinNonDustOutput());

            if (result)
                log.info(""would create dust for maker, customAmount={},  Restrictions.getMinNonDustOutput()={}"", customAmount, Restrictions.getMinNonDustOutput());
        } else {
            result = true;
        }
        return result;
    }

    ReadOnlyObjectProperty<Coin> getAmount() {
        return amount;
    }

    public PaymentMethod getPaymentMethod() {
        return offer.getPaymentMethod();
    }

    public String getCurrencyCode() {
        return offer.getCurrencyCode();
    }

    public String getCurrencyNameAndCode() {
        return CurrencyUtil.getNameByCode(offer.getCurrencyCode());
    }

    public Coin getTotalTxFee() {
        Coin totalTxFees = txFeeFromFeeService.add(getTxFeeForDepositTx()).add(getTxFeeForPayoutTx());
        if (isCurrencyForTakerFeeBtc()) {
            return totalTxFees;
        } else {
            // when BSQ is burnt to pay the Bisq taker fee, it has the benefit of those sats also going to the miners.
            // so that reduces the explicit mining fee for the taker transaction
            Coin takerFee = getTakerFee() != null ? getTakerFee() : Coin.ZERO;
            return totalTxFees.subtract(Coin.valueOf(Math.min(takerFee.longValue(), txFeeFromFeeService.longValue())));
        }
    }

    @NotNull
    private Coin getFundsNeededForTrade() {
        return getSecurityDeposit().add(getTxFeeForDepositTx()).add(getTxFeeForPayoutTx());
    }

    private Coin getTxFeeForDepositTx() {
        //TODO fix with new trade protocol!
        // Unfortunately we cannot change that to the correct fees as it would break backward compatibility
        // We still might find a way with offer version or app version checks so lets keep that commented out
        // code as that shows how it should be.
        return txFeeFromFeeService; //feeService.getTxFee(233);
    }

    private Coin getTxFeeForPayoutTx() {
        //TODO fix with new trade protocol!
        // Unfortunately we cannot change that to the correct fees as it would break backward compatibility
        // We still might find a way with offer version or app version checks so lets keep that commented out
        // code as that shows how it should be.
        return txFeeFromFeeService; //feeService.getTxFee(169);
    }

    public AddressEntry getAddressEntry() {
        return addressEntry;
    }

    public Coin getSecurityDeposit() {
        return securityDeposit;
    }

    public Coin getBuyerSecurityDeposit() {
        return offer.getBuyerSecurityDeposit();
    }

    public Coin getSellerSecurityDeposit() {
        return offer.getSellerSecurityDeposit();
    }

    public Coin getUsableBsqBalance() {
        // we have to keep a minimum amount of BSQ == bitcoin dust limit
        // otherwise there would be dust violations for change UTXOs
        // essentially means the minimum usable balance of BSQ is 5.46
        Coin usableBsqBalance = bsqWalletService.getAvailableBalance().subtract(Restrictions.getMinNonDustOutput());
        if (usableBsqBalance.isNegative())
            usableBsqBalance = Coin.ZERO;
        return usableBsqBalance;
    }

    public boolean isUsingHalCashAccount() {
        return paymentAccount.hasPaymentMethodWithId(HAL_CASH_ID);
    }

    public boolean isCurrencyForTakerFeeBtc() {
        return offerUtil.isCurrencyForTakerFeeBtc(amount.get());
    }

    public void setPreferredCurrencyForTakerFeeBtc(boolean isCurrencyForTakerFeeBtc) {
        preferences.setPayFeeInBtc(isCurrencyForTakerFeeBtc);
    }

    public boolean isPreferredFeeCurrencyBtc() {
        return preferences.isPayFeeInBtc();
    }

    public Coin getTakerFeeInBtc() {
        return offerUtil.getTakerFee(true, amount.get());
    }

    public Coin getTakerFeeInBsq() {
        return offerUtil.getTakerFee(false, amount.get());
    }

    boolean isTakerFeeValid() {
        return preferences.getPayFeeInBtc() || offerUtil.isBsqForTakerFeeAvailable(amount.get());
    }

    public boolean isBsqForFeeAvailable() {
        return offerUtil.isBsqForTakerFeeAvailable(amount.get());
    }

    public boolean isAttemptToBuyBsq() {
        // When you buy an asset you actually sell BTC.
        // This is why an offer to buy BSQ is actually an offer to sell BTC for BSQ.
        return !isBuyOffer() && getOffer().getCurrencyCode().equals(""BSQ"");
    }
}",1,587 2000 650 2001 123 773 657 2002 2003 59 773 657 2004 2005 59 773 657 2006 2007 59 773 657 2008 2009 59 773 657 2010 2011 59 773 657 2012 2013 59 773 657 2014 2015 59 657 2016 2017 59 773 657 2018 2019 59 773 657 2020 2021 59 773 657 2022 2023 59 773 657 2024 2025 59 773 657 2026 2027 59 773 2028 2029 59 773 2028 2030 59 330 773 2031 2032 59 330 330 773 657 2033 60 2028 62 2034 61 744 2035 60 62 40 41 59 657 2033 60 2036 62 2037 61 744 2035 60 62 40 41 59 773 2038 2039 59 773 2040 2041 59 773 570 2042 59 2043 2044 59 330 773 704 2045 61 1504 59 330 773 570 2046 59 773 2028 2047 59 64 2048 775 657 2049 2050 61 744 2051 40 41 59 64 2048 775 2052 2053 59 331 330 331 64 2054 2000 40 2002 2003 44 2004 2005 44 2055 2056 44 2057 2058 44 2006 2007 44 2008 2009 44 2010 2011 44 2012 2013 44 2014 2015 44 2016 2017 44 2018 2019 44 2020 2021 44 2022 2023 44 2024 2025 44 2026 2027 41 123 818 40 2058 44 2056 41 59 823 46 2003 61 2003 59 823 46 2005 61 2005 59 823 46 2007 61 2007 59 823 46 2009 61 2009 59 823 46 2011 61 2011 59 823 46 2013 61 2013 59 823 46 2015 61 2015 59 823 46 2017 61 2017 59 823 46 2019 61 2019 59 823 46 2021 61 2021 59 823 46 2023 61 2023 59 823 46 2025 61 2025 59 823 46 2027 61 2027 59 125 64 2059 775 865 2060 40 41 123 330 2032 46 2061 40 2031 46 2062 46 2063 41 59 2064 40 41 59 2065 40 41 59 330 330 330 330 330 688 40 2042 41 2021 46 2066 40 2032 46 2067 40 41 41 59 688 40 2068 40 41 41 123 2003 46 2069 40 2032 44 2070 44 40 41 45 62 123 125 44 2071 45 62 744 2072 40 41 46 2073 40 2071 41 46 2074 40 41 41 59 125 125 64 2059 775 865 2075 40 41 123 2076 40 41 59 688 40 2032 340 2077 41 123 2032 46 2078 40 41 59 125 125 331 330 331 330 865 2079 40 2031 2032 41 123 823 46 2032 61 2032 59 2044 61 2032 46 2080 40 41 59 2081 61 2058 46 2082 40 2032 46 2083 40 41 44 2084 46 2085 46 2086 41 59 2087 40 2081 44 362 41 59 2088 60 2040 62 2089 61 2090 40 41 59 2091 40 33 2089 46 2092 40 41 44 362 41 59 2041 61 2093 40 41 59 823 46 2034 46 2094 40 2028 46 2095 40 2096 46 2097 40 2032 46 2098 40 41 46 2099 44 2100 40 41 41 41 41 59 2030 61 2032 46 2101 40 41 323 2102 46 2103 63 2104 40 41 58 2105 40 41 59 330 330 330 330 330 330 330 330 330 330 330 330 330 2047 61 2011 46 2106 40 41 59 2029 61 2107 40 2045 41 59 330 2108 46 2109 40 362 44 2029 41 59 2011 46 2110 40 40 41 45 62 123 688 40 33 2046 41 123 2047 61 2011 46 2106 40 41 59 2029 61 2107 40 2045 41 59 2111 40 41 59 2108 46 2109 40 362 44 2029 41 59 125 630 123 2108 46 2112 40 362 43 362 41 59 125 125 41 59 2050 46 2113 40 45 1501 41 59 2114 2115 61 2032 46 2116 40 41 46 2117 40 41 59 2013 46 2118 40 2115 44 40 2119 45 62 123 2050 46 2113 40 2119 46 2120 40 41 63 1500 58 1501 41 59 688 40 2119 46 2120 40 41 41 123 2053 61 2119 46 2121 40 41 59 2108 46 2109 40 362 44 2053 41 59 125 125 41 41 59 2122 40 41 59 2123 40 41 59 2039 61 744 2038 40 2081 46 2124 40 41 41 123 64 2059 777 865 2125 40 2028 2126 44 2127 2128 41 123 2129 40 41 59 125 125 59 2032 46 2130 40 41 59 2021 46 2131 40 2032 46 2132 40 41 41 59 125 330 865 2133 40 41 123 2134 40 41 59 2046 61 2135 59 2136 40 41 59 125 865 2137 40 570 2138 41 123 823 46 2042 61 2138 59 688 40 2042 41 2021 46 2139 40 2032 46 2140 40 41 41 59 125 777 865 2141 40 570 2142 41 123 330 330 330 330 330 330 688 40 2142 41 123 2005 46 2142 40 2143 40 2032 41 41 59 125 2058 46 2144 40 2032 46 2145 40 41 41 59 125 331 330 331 330 330 865 2146 40 2147 60 2148 62 2149 41 123 2150 40 2029 44 362 41 59 2150 40 2151 40 41 44 362 41 59 2028 2152 61 2153 40 41 59 688 40 2154 40 41 41 2152 61 2152 46 2155 40 2034 46 2156 40 41 41 59 688 40 2015 46 2157 40 2032 46 2158 40 41 41 41 123 744 2159 40 41 46 2160 40 2161 46 2156 40 362 41 41 46 2162 40 41 59 125 630 688 40 2015 46 2163 40 2032 46 2164 40 41 41 41 123 744 2165 40 41 46 2166 40 2167 46 2156 40 362 41 41 46 2168 40 41 59 125 630 688 40 2015 46 2169 40 2032 46 2170 40 41 41 41 123 744 2171 40 41 46 2172 40 2173 46 2156 40 362 41 41 46 2174 40 41 59 125 630 688 40 2015 46 2175 40 2032 46 2176 40 41 41 41 123 744 2177 40 41 46 2178 40 2179 46 2156 40 362 41 41 46 2180 40 41 59 125 630 688 40 2015 46 2181 40 41 41 123 744 2182 40 41 46 2183 40 2184 46 2156 40 362 41 41 46 2185 40 41 59 125 630 688 40 2003 46 2186 40 2032 46 2170 40 41 41 41 123 744 2187 40 41 46 2188 40 2189 46 2156 40 362 41 41 46 2190 40 41 59 125 630 123 2003 46 2146 40 2034 46 2156 40 41 44 2029 44 2151 40 41 44 2191 40 41 44 2044 46 2192 40 41 44 2152 44 2032 44 2041 46 2170 40 41 44 2193 44 2194 44 2149 44 2195 45 62 123 2196 46 2197 40 2195 41 59 744 2198 40 41 46 2199 40 2195 41 46 2200 40 41 59 125 41 59 125 125 330 330 330 330 330 330 330 330 330 330 777 865 2201 40 41 123 704 2202 61 1500 59 688 40 2058 46 2203 40 2204 46 2205 46 2206 41 46 2207 40 41 41 123 2028 2208 61 2209 40 41 59 688 40 2210 40 41 41 2208 61 2208 46 2211 40 2034 46 2212 40 41 41 59 330 330 330 330 330 330 330 330 330 330 330 330 2213 60 2028 44 2214 62 2215 61 2019 46 2216 40 2208 44 2217 40 41 41 59 2029 61 2215 46 2218 59 2045 61 2215 46 2219 59 125 630 123 2045 61 1504 59 2029 61 2047 46 2220 40 2045 41 59 2221 46 2222 40 362 43 362 43 362 43 362 44 2045 44 2045 44 2202 44 2029 46 2223 40 41 44 2011 46 2224 40 41 41 59 125 125 777 865 2225 40 2040 2041 41 123 688 40 2041 340 2226 41 123 823 46 2041 61 2041 59 726 2227 61 2228 40 41 59 823 46 2034 46 2229 40 2028 46 2230 40 2231 46 2232 40 2032 46 2233 40 41 46 2234 44 2231 46 2235 40 2034 46 2236 40 41 46 2234 44 2227 41 41 41 41 59 2017 46 2237 40 2041 46 2238 40 41 41 59 125 125 865 2239 40 41 123 2240 61 2241 59 2242 40 41 59 688 40 33 2243 46 2244 40 41 41 123 823 46 2240 61 2245 59 2242 40 41 59 125 125 331 330 331 2246 2247 40 41 123 792 2032 46 2247 40 41 59 125 777 2031 2248 40 41 123 792 2032 59 125 2249 60 2040 62 2250 40 41 123 2251 60 2040 62 2252 61 2009 46 2253 40 41 59 2254 40 2252 44 362 41 59 792 2255 46 2250 40 2032 44 2252 44 2023 41 59 125 777 2040 2256 40 41 123 2249 60 2040 62 2257 61 2250 40 41 59 2258 40 33 2257 46 2259 40 41 44 362 41 59 2040 2260 61 2257 46 2261 40 1500 41 59 2052 2262 61 2017 46 2263 40 41 59 688 40 2262 323 2264 41 792 2260 59 792 2257 46 2265 40 41 46 2266 40 2267 45 62 2267 46 2268 40 41 46 2269 40 2262 41 41 46 2270 40 41 46 2271 40 2260 41 59 125 726 2272 40 41 123 688 40 2041 340 2273 41 123 792 2023 46 2274 40 2041 44 2275 40 41 44 2032 46 2276 40 41 41 59 125 630 123 792 1500 59 125 125 570 2277 40 41 123 792 2278 46 2279 40 2009 44 2025 44 2041 46 2280 40 41 41 307 2278 46 2281 40 2027 41 59 125 331 330 331 773 865 2282 40 41 123 2058 46 2283 40 2039 41 59 125 773 865 2284 40 41 123 2058 46 2285 40 2039 41 59 125 331 330 331 865 2286 40 41 123 688 40 2044 340 2287 307 2032 340 2287 307 2034 46 2288 40 41 340 2287 307 33 2034 46 2288 40 41 46 2289 40 41 41 123 2036 2290 61 2044 46 2291 40 2034 46 2288 40 41 41 59 688 40 2032 46 2292 40 41 46 2293 40 41 46 2294 40 2295 46 2296 41 41 2290 61 2297 46 2298 40 2290 41 59 630 688 40 2299 46 2300 40 2301 40 41 41 41 2290 61 2297 46 2302 40 2290 41 59 2037 46 2303 40 2290 41 59 2304 40 41 59 125 125 865 2305 40 2028 2034 41 123 823 46 2034 46 2306 40 2028 46 2307 40 2308 46 2309 40 2034 46 2310 44 2272 40 41 41 41 41 59 2311 40 41 59 125 865 2312 40 41 123 330 330 330 657 2028 2313 61 2314 40 41 59 688 40 2032 340 2315 307 2034 46 2316 40 41 340 2315 307 2313 340 2315 41 123 2028 2317 61 2318 40 41 46 2319 40 2030 41 59 688 40 2320 40 41 41 123 2317 61 2317 46 2319 40 2313 41 59 125 688 40 2321 40 41 41 2322 46 2323 40 2317 46 2319 40 2034 46 2316 40 41 41 41 59 630 2322 46 2323 40 2317 41 59 2324 40 41 59 2325 46 2326 40 362 44 2322 46 2316 40 41 46 2327 40 41 41 59 125 125 570 2328 40 41 123 792 2247 40 41 323 2246 46 2329 59 125 570 2330 40 41 123 792 2247 40 41 323 2246 46 2331 59 125 570 2332 40 41 123 792 2333 46 2332 40 2334 40 41 41 59 125 64 2335 2028 2336 40 570 2337 41 123 2028 2034 61 823 46 2034 46 2338 40 41 59 688 40 2034 340 2339 41 123 330 2028 2340 61 2341 46 2342 40 2010 46 2343 40 2337 41 44 2034 41 59 792 2341 46 2344 40 2340 44 2010 46 2345 40 2337 41 41 59 125 630 123 792 2339 59 125 125 64 2335 777 2028 2336 40 41 123 792 2336 40 2337 40 41 41 59 125 777 865 2346 40 41 123 2347 46 2348 40 362 44 2032 46 2349 40 41 41 59 2058 46 2350 40 2032 46 2349 40 41 41 59 125 330 330 330 330 773 704 2351 40 704 2352 41 123 792 40 2352 43 1504 41 47 1502 59 125 773 2028 2353 40 704 2354 41 123 792 2047 46 2355 40 2351 40 2354 41 41 59 125 305 570 2356 40 41 123 330 688 40 2032 340 2357 307 2034 46 2358 40 41 340 2357 41 792 33 2032 46 2359 40 41 46 2360 40 2034 46 2358 40 41 41 59 792 2361 59 125 570 2362 40 41 123 330 688 40 2034 46 2363 40 41 340 2364 307 2032 340 2364 41 792 2034 46 2363 40 41 46 2365 40 2032 46 2366 40 41 41 59 792 2367 59 125 570 2368 40 41 123 570 2369 59 688 40 2034 46 2370 40 41 340 2371 307 2032 340 2371 41 123 2028 2372 61 2032 46 2373 40 41 46 2374 40 2034 46 2370 40 41 41 59 2369 61 2372 46 2375 40 41 307 2372 46 2376 40 2377 46 2378 40 41 41 59 688 40 2369 41 2379 46 2380 40 362 44 2372 44 2377 46 2378 40 41 41 59 125 630 123 2369 61 2381 59 125 792 2369 59 125 2382 60 2028 62 2383 40 41 123 792 2034 59 125 777 2384 2385 40 41 123 792 2032 46 2385 40 41 59 125 777 2052 2386 40 41 123 792 2032 46 2386 40 41 59 125 777 2052 2387 40 41 123 792 2388 46 2389 40 2032 46 2386 40 41 41 59 125 777 2028 2390 40 41 123 2028 2391 61 2029 46 2392 40 2393 40 41 41 46 2392 40 2394 40 41 41 59 688 40 2337 40 41 41 123 792 2391 59 125 630 123 330 330 2028 2395 61 2336 40 41 340 2396 63 2336 40 41 58 2028 46 2397 59 792 2391 46 2398 40 2028 46 2399 40 2400 46 2401 40 2395 46 2402 40 41 44 2029 46 2402 40 41 41 41 41 59 125 125 64 2403 773 2028 2404 40 41 123 792 2405 40 41 46 2406 40 2407 40 41 41 46 2406 40 2408 40 41 41 59 125 773 2028 2409 40 41 123 330 330 330 330 792 2029 59 330 125 773 2028 2410 40 41 123 330 330 330 330 792 2029 59 330 125 777 2411 2412 40 41 123 792 2413 59 125 777 2028 2414 40 41 123 792 2030 59 125 777 2028 2415 40 41 123 792 2032 46 2415 40 41 59 125 777 2028 2416 40 41 123 792 2032 46 2416 40 41 59 125 777 2028 2417 40 41 123 330 330 330 2028 2418 61 2007 46 2419 40 41 46 2420 40 2421 46 2422 40 41 41 59 688 40 2418 46 2423 40 41 41 2418 61 2028 46 2424 59 792 2418 59 125 777 570 2425 40 41 123 792 2041 46 2426 40 2427 41 59 125 777 570 2337 40 41 123 792 2056 46 2337 40 2034 46 2428 40 41 41 59 125 777 865 2429 40 570 2337 41 123 2017 46 2430 40 2337 41 59 125 777 570 2431 40 41 123 792 2017 46 2432 40 41 59 125 777 2028 2433 40 41 123 792 2056 46 2336 40 2434 44 2034 46 2435 40 41 41 59 125 777 2028 2436 40 41 123 792 2056 46 2336 40 2437 44 2034 46 2438 40 41 41 59 125 570 2439 40 41 123 792 2017 46 2440 40 41 309 2056 46 2441 40 2034 46 2442 40 41 41 59 125 777 570 2443 40 41 123 792 2056 46 2444 40 2034 46 2445 40 41 41 59 125 777 570 2446 40 41 123 330 330 792 33 2328 40 41 307 2248 40 41 46 2386 40 41 46 2447 40 362 41 59 125 125 ,"{'AvgLine': 8, 'CountLine': 636, 'CountStmt': 284, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 201, 'MaxEssential': 1, 'SumEssential': 61, 'AvgCyclomatic': 1, 'CountLineCode': 423, 'CountStmtDecl': 105, 'MaxCyclomatic': 8, 'SumCyclomatic': 97, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 105, 'CountSemicolon': 194, 'CountDeclMethod': 55, 'CountLineCodeExe': 247, 'CountLineComment': 111, 'CountClassCoupled': 52, 'CountClassDerived': 0, 'CountLineCodeDecl': 127, 'CountDeclMethodAll': 61, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.26', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 109, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 24, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 97, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 22, 'CountDeclMethodPrivate': 7, 'CountDeclInstanceMethod': 55, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 52, 'CountDeclInstanceVariable': 27, 'PercentLackOfCohesionModified': 90}"
3018,Java,"@Slf4j
@Singleton
public class OfferUtil {

    private final AccountAgeWitnessService accountAgeWitnessService;
    private final BsqWalletService bsqWalletService;
    private final FilterManager filterManager;
    private final Preferences preferences;
    private final PriceFeedService priceFeedService;
    private final P2PService p2PService;
    private final ReferralIdService referralIdService;
    private final TradeStatisticsManager tradeStatisticsManager;

    private final Predicate<String> isValidFeePaymentCurrencyCode = (c) ->
            c.equalsIgnoreCase(""BSQ"") || c.equalsIgnoreCase(""BTC"");

    @Inject
    public OfferUtil(AccountAgeWitnessService accountAgeWitnessService,
                     BsqWalletService bsqWalletService,
                     FilterManager filterManager,
                     Preferences preferences,
                     PriceFeedService priceFeedService,
                     P2PService p2PService,
                     ReferralIdService referralIdService,
                     TradeStatisticsManager tradeStatisticsManager) {
        this.accountAgeWitnessService = accountAgeWitnessService;
        this.bsqWalletService = bsqWalletService;
        this.filterManager = filterManager;
        this.preferences = preferences;
        this.priceFeedService = priceFeedService;
        this.p2PService = p2PService;
        this.referralIdService = referralIdService;
        this.tradeStatisticsManager = tradeStatisticsManager;
    }

    public static String getRandomOfferId() {
        return Utilities.getRandomPrefix(5, 8) + ""-"" +
                UUID.randomUUID() + ""-"" +
                getStrippedVersion();
    }

    public static String getStrippedVersion() {
        return Version.VERSION.replace(""."", """");
    }

    // We add a counter at the end of the offer id signalling the number of times that offer has
    // been mutated ether due edit or due pow adjustments.
    public static String getOfferIdWithMutationCounter(String id) {
        String[] split = id.split(""-"");
        String base = id;
        int counter = 0;
        if (split.length > 7) {
            String counterString = split[7];
            int endIndex = id.length() - counterString.length() - 1;
            base = id.substring(0, endIndex);
            try {
                counter = Integer.parseInt(counterString);
            } catch (Exception ignore) {
            }
        }
        counter++;
        return base + ""-"" + counter;
    }

    public static String getVersionFromId(String id) {
        String[] split = id.split(""-"");
        return split[6];
    }

    public void maybeSetFeePaymentCurrencyPreference(String feeCurrencyCode) {
        if (!feeCurrencyCode.isEmpty()) {
            if (!isValidFeePaymentCurrencyCode.test(feeCurrencyCode))
                throw new IllegalStateException(format(""%s cannot be used to pay trade fees"",
                        feeCurrencyCode.toUpperCase()));

            if (feeCurrencyCode.equalsIgnoreCase(""BSQ"") && preferences.isPayFeeInBtc())
                preferences.setPayFeeInBtc(false);
            else if (feeCurrencyCode.equalsIgnoreCase(""BTC"") && !preferences.isPayFeeInBtc())
                preferences.setPayFeeInBtc(true);
        }
    }

    /**
     * Given the direction, is this a BUY?
     *
     * @param direction the offer direction
     * @return {@code true} for an offer to buy BTC from the taker, {@code false} for an
     * offer to sell BTC to the taker
     */
    public boolean isBuyOffer(OfferDirection direction) {
        return direction == OfferDirection.BUY;
    }

    public long getMaxTradeLimit(PaymentAccount paymentAccount,
                                 String currencyCode,
                                 OfferDirection direction) {
        return paymentAccount != null
                ? accountAgeWitnessService.getMyTradeLimit(paymentAccount, currencyCode, direction)
                : 0;
    }

    /**
     * Return true if a balance can cover a cost.
     *
     * @param cost the cost of a trade
     * @param balance a wallet balance
     * @return true if balance >= cost
     */
    public boolean isBalanceSufficient(Coin cost, Coin balance) {
        return cost != null && balance.compareTo(cost) >= 0;
    }

    /**
     * Return the wallet balance shortage for a given trade cost, or zero if there is
     * no shortage.
     *
     * @param cost the cost of a trade
     * @param balance a wallet balance
     * @return the wallet balance shortage for the given cost, else zero.
     */
    public Coin getBalanceShortage(Coin cost, Coin balance) {
        if (cost != null) {
            Coin shortage = cost.subtract(balance);
            return shortage.isNegative() ? Coin.ZERO : shortage;
        } else {
            return Coin.ZERO;
        }
    }

    /**
     * Returns the usable BSQ balance.
     *
     * @return Coin the usable BSQ balance
     */
    public Coin getUsableBsqBalance() {
        // We have to keep a minimum amount of BSQ == bitcoin dust limit, otherwise there
        // would be dust violations for change UTXOs; essentially means the minimum usable
        // balance of BSQ is 5.46.
        Coin usableBsqBalance = bsqWalletService.getAvailableBalance().subtract(getMinNonDustOutput());
        return usableBsqBalance.isNegative() ? Coin.ZERO : usableBsqBalance;
    }

    public double calculateManualPrice(double volumeAsDouble, double amountAsDouble) {
        return volumeAsDouble / amountAsDouble;
    }

    public double calculateMarketPriceMargin(double manualPrice, double marketPrice) {
        return MathUtils.roundDouble(manualPrice / marketPrice, 4);
    }

    /**
     * Returns the makerFee as Coin, this can be priced in BTC or BSQ.
     *
     * @param amount           the amount of BTC to trade
     * @return the maker fee for the given trade amount, or {@code null} if the amount
     * is {@code null}
     */
    @Nullable
    public Coin getMakerFee(@Nullable Coin amount) {
        boolean isCurrencyForMakerFeeBtc = isCurrencyForMakerFeeBtc(amount);
        return CoinUtil.getMakerFee(isCurrencyForMakerFeeBtc, amount);
    }

    public Coin getTxFeeByVsize(Coin txFeePerVbyteFromFeeService, int vsizeInVbytes) {
        return txFeePerVbyteFromFeeService.multiply(getAverageTakerFeeTxVsize(vsizeInVbytes));
    }

    // We use the sum of the size of the trade fee and the deposit tx to get an average.
    // Miners will take the trade fee tx if the total fee of both dependent txs are good
    // enough.  With that we avoid that we overpay in case that the trade fee has many
    // inputs and we would apply that fee for the other 2 txs as well. We still might
    // overpay a bit for the payout tx.
    public int getAverageTakerFeeTxVsize(int txVsize) {
        return (txVsize + 233) / 2;
    }

    /**
     * Checks if the maker fee should be paid in BTC, this can be the case due to user
     * preference or because the user doesn't have enough BSQ.
     *
     * @param amount           the amount of BTC to trade
     * @return {@code true} if BTC is preferred or the trade amount is nonnull and there
     * isn't enough BSQ for it.
     */
    public boolean isCurrencyForMakerFeeBtc(@Nullable Coin amount) {
        boolean payFeeInBtc = preferences.getPayFeeInBtc();
        boolean bsqForFeeAvailable = isBsqForMakerFeeAvailable(amount);
        return payFeeInBtc || !bsqForFeeAvailable;
    }

    /**
     * Checks if the available BSQ balance is sufficient to pay for the offer's maker fee.
     *
     * @param amount           the amount of BTC to trade
     * @return {@code true} if the balance is sufficient, {@code false} otherwise
     */
    public boolean isBsqForMakerFeeAvailable(@Nullable Coin amount) {
        Coin availableBalance = bsqWalletService.getAvailableBalance();
        Coin makerFee = CoinUtil.getMakerFee(false, amount);

        // If we don't know yet the maker fee (amount is not set) we return true,
        // otherwise we would disable BSQ fee each time we open the create offer screen
        // as there the amount is not set.
        if (makerFee == null)
            return true;

        Coin surplusFunds = availableBalance.subtract(makerFee);
        if (isDust(surplusFunds)) {
            return false; // we can't be left with dust
        }
        return !availableBalance.subtract(makerFee).isNegative();
    }


    @Nullable
    public Coin getTakerFee(boolean isCurrencyForTakerFeeBtc, @Nullable Coin amount) {
        if (amount != null) {
            Coin feePerBtc = CoinUtil.getFeePerBtc(FeeService.getTakerFeePerBtc(isCurrencyForTakerFeeBtc), amount);
            return CoinUtil.maxCoin(feePerBtc, FeeService.getMinTakerFee(isCurrencyForTakerFeeBtc));
        } else {
            return null;
        }
    }

    public boolean isCurrencyForTakerFeeBtc(Coin amount) {
        boolean payFeeInBtc = preferences.getPayFeeInBtc();
        boolean bsqForFeeAvailable = isBsqForTakerFeeAvailable(amount);
        return payFeeInBtc || !bsqForFeeAvailable;
    }

    public boolean isBsqForTakerFeeAvailable(@Nullable Coin amount) {
        Coin availableBalance = bsqWalletService.getAvailableBalance();
        Coin takerFee = getTakerFee(false, amount);

        // If we don't know yet the maker fee (amount is not set) we return true,
        // otherwise we would disable BSQ fee each time we open the create offer screen
        // as there the amount is not set.
        if (takerFee == null)
            return true;

        Coin surplusFunds = availableBalance.subtract(takerFee);
        if (isDust(surplusFunds)) {
            return false; // we can't be left with dust
        }
        return !availableBalance.subtract(takerFee).isNegative();
    }

    public boolean isBlockChainPaymentMethod(Offer offer) {
        return offer != null && offer.getPaymentMethod().isBlockchain();
    }

    public Optional<Volume> getFeeInUserFiatCurrency(Coin makerFee,
                                                     boolean isCurrencyForMakerFeeBtc,
                                                     CoinFormatter bsqFormatter) {
        String userCurrencyCode = preferences.getPreferredTradeCurrency().getCode();
        if (CurrencyUtil.isCryptoCurrency(userCurrencyCode)) {
            // In case the user has selected a altcoin as preferredTradeCurrency
            // we derive the fiat currency from the user country
            String countryCode = preferences.getUserCountry().code;
            userCurrencyCode = CurrencyUtil.getCurrencyByCountryCode(countryCode).getCode();
        }

        return getFeeInUserFiatCurrency(makerFee,
                isCurrencyForMakerFeeBtc,
                userCurrencyCode,
                bsqFormatter);
    }

    public Map<String, String> getExtraDataMap(PaymentAccount paymentAccount,
                                               String currencyCode,
                                               OfferDirection direction) {
        Map<String, String> extraDataMap = new HashMap<>();
        if (CurrencyUtil.isFiatCurrency(currencyCode)) {
            String myWitnessHashAsHex = accountAgeWitnessService
                    .getMyWitnessHashAsHex(paymentAccount.getPaymentAccountPayload());
            extraDataMap.put(ACCOUNT_AGE_WITNESS_HASH, myWitnessHashAsHex);
        }

        if (referralIdService.getOptionalReferralId().isPresent()) {
            extraDataMap.put(REFERRAL_ID, referralIdService.getOptionalReferralId().get());
        }

        if (paymentAccount instanceof F2FAccount) {
            extraDataMap.put(F2F_CITY, ((F2FAccount) paymentAccount).getCity());
            extraDataMap.put(F2F_EXTRA_INFO, ((F2FAccount) paymentAccount).getExtraInfo());
        }

        if (paymentAccount instanceof CashByMailAccount) {
            extraDataMap.put(CASH_BY_MAIL_EXTRA_INFO, ((CashByMailAccount) paymentAccount).getExtraInfo());
        }

        extraDataMap.put(CAPABILITIES, Capabilities.app.toStringList());

        if (currencyCode.equals(""XMR"") && direction == OfferDirection.SELL) {
            preferences.getAutoConfirmSettingsList().stream()
                    .filter(e -> e.getCurrencyCode().equals(""XMR""))
                    .filter(AutoConfirmSettings::isEnabled)
                    .forEach(e -> extraDataMap.put(XMR_AUTO_CONF, XMR_AUTO_CONF_ENABLED_VALUE));
        }

        return extraDataMap.isEmpty() ? null : extraDataMap;
    }

    public void validateOfferData(double buyerSecurityDeposit,
                                  PaymentAccount paymentAccount,
                                  String currencyCode,
                                  Coin makerFeeAsCoin) {
        validateBasicOfferData(paymentAccount.getPaymentMethod(), currencyCode);
        checkNotNull(makerFeeAsCoin, ""makerFee must not be null"");
        checkArgument(buyerSecurityDeposit <= getMaxBuyerSecurityDepositAsPercent(),
                ""securityDeposit must not exceed "" +
                        getMaxBuyerSecurityDepositAsPercent());
        checkArgument(buyerSecurityDeposit >= getMinBuyerSecurityDepositAsPercent(),
                ""securityDeposit must not be less than "" +
                        getMinBuyerSecurityDepositAsPercent());
    }

    public void validateBasicOfferData(PaymentMethod paymentMethod, String currencyCode) {
        checkNotNull(p2PService.getAddress(), ""Address must not be null"");
        checkArgument(!filterManager.isCurrencyBanned(currencyCode),
                Res.get(""offerbook.warning.currencyBanned""));
        checkArgument(!filterManager.isPaymentMethodBanned(paymentMethod),
                Res.get(""offerbook.warning.paymentMethodBanned""));
    }

    // Returns an edited payload: a merge of the original offerPayload and
    // editedOfferPayload fields.  Mutable fields are sourced from
    // mutableOfferPayloadFields param, e.g., payment account details, price, etc.
    // Immutable fields are sourced from the original openOffer param.
    public OfferPayload getMergedOfferPayload(OpenOffer openOffer,
                                              MutableOfferPayloadFields mutableOfferPayloadFields) {
        OfferPayload original = openOffer.getOffer().getOfferPayload().orElseThrow();
        return new OfferPayload(original.getId(),
                original.getDate(),
                original.getOwnerNodeAddress(),
                original.getPubKeyRing(),
                original.getDirection(),
                mutableOfferPayloadFields.getPrice(),
                mutableOfferPayloadFields.getMarketPriceMargin(),
                mutableOfferPayloadFields.isUseMarketBasedPrice(),
                original.getAmount(),
                original.getMinAmount(),
                mutableOfferPayloadFields.getBaseCurrencyCode(),
                mutableOfferPayloadFields.getCounterCurrencyCode(),
                original.getArbitratorNodeAddresses(),
                original.getMediatorNodeAddresses(),
                mutableOfferPayloadFields.getPaymentMethodId(),
                mutableOfferPayloadFields.getMakerPaymentAccountId(),
                original.getOfferFeePaymentTxId(),
                mutableOfferPayloadFields.getCountryCode(),
                mutableOfferPayloadFields.getAcceptedCountryCodes(),
                mutableOfferPayloadFields.getBankId(),
                mutableOfferPayloadFields.getAcceptedBankIds(),
                original.getVersionNr(),
                original.getBlockHeightAtOfferCreation(),
                original.getTxFee(),
                original.getMakerFee(),
                original.isCurrencyForMakerFeeBtc(),
                original.getBuyerSecurityDeposit(),
                original.getSellerSecurityDeposit(),
                original.getMaxTradeLimit(),
                original.getMaxTradePeriod(),
                original.isUseAutoClose(),
                original.isUseReOpenAfterAutoClose(),
                original.getLowerClosePrice(),
                original.getUpperClosePrice(),
                original.isPrivateOffer(),
                original.getHashOfChallenge(),
                mutableOfferPayloadFields.getExtraDataMap(),
                original.getProtocolVersion());
    }

    private Optional<Volume> getFeeInUserFiatCurrency(Coin makerFee,
                                                      boolean isCurrencyForMakerFeeBtc,
                                                      String userCurrencyCode,
                                                      CoinFormatter bsqFormatter) {
        MarketPrice marketPrice = priceFeedService.getMarketPrice(userCurrencyCode);
        if (marketPrice != null && makerFee != null) {
            long marketPriceAsLong = roundDoubleToLong(
                    scaleUpByPowerOf10(marketPrice.getPrice(), Fiat.SMALLEST_UNIT_EXPONENT));
            Price userCurrencyPrice = Price.valueOf(userCurrencyCode, marketPriceAsLong);

            if (isCurrencyForMakerFeeBtc) {
                return Optional.of(userCurrencyPrice.getVolumeByAmount(makerFee));
            } else {
                // We use the current market price for the fiat currency and the 30 day average BSQ price
                Tuple2<Price, Price> tuple = AveragePriceUtil.getAveragePriceTuple(preferences,
                        tradeStatisticsManager,
                        30);
                Price bsqPrice = tuple.second;
                if (bsqPrice.isPositive()) {
                    String inputValue = bsqFormatter.formatCoin(makerFee);
                    Volume makerFeeAsVolume = Volume.parse(inputValue, ""BSQ"");
                    Coin requiredBtc = bsqPrice.getAmountByVolume(makerFeeAsVolume);
                    Volume volumeByAmount = userCurrencyPrice.getVolumeByAmount(requiredBtc);
                    return Optional.of(volumeByAmount);
                } else {
                    return Optional.empty();
                }
            }
        } else {
            return Optional.empty();
        }
    }

    public static boolean isFiatOffer(Offer offer) {
        return offer.getBaseCurrencyCode().equals(""BTC"") && !offer.isBsqSwapOffer();
    }

    public static boolean isAltcoinOffer(Offer offer) {
        return offer.getCounterCurrencyCode().equals(""BTC"") && !offer.isBsqSwapOffer();
    }

    public static Optional<String> getInvalidMakerFeeTxErrorMessage(Offer offer, BtcWalletService btcWalletService) {
        String offerFeePaymentTxId = offer.getOfferFeePaymentTxId();
        if (offerFeePaymentTxId == null) {
            return Optional.empty();
        }

        Transaction makerFeeTx = btcWalletService.getTransaction(offerFeePaymentTxId);
        if (makerFeeTx == null) {
            return Optional.empty();
        }

        String errorMsg = null;
        String header = ""The offer with offer ID '"" + offer.getShortId() +
                ""' has an invalid maker fee transaction.\n\n"";
        String spendingTransaction = null;
        String extraString = ""\nYou have to remove that offer to avoid failed trades.\n"" +
                ""If this happened because of a bug please contact the Bisq developers "" +
                ""and you can request reimbursement for the lost maker fee."";
        if (makerFeeTx.getOutputs().size() > 1) {
            // Our output to fund the deposit tx is at index 1
            TransactionOutput output = makerFeeTx.getOutput(1);
            TransactionInput spentByTransactionInput = output.getSpentBy();
            if (spentByTransactionInput != null) {
                spendingTransaction = spentByTransactionInput.getConnectedTransaction() != null ?
                        spentByTransactionInput.getConnectedTransaction().toString() :
                        ""null"";
                // We this is an exceptional case we do not translate that error msg.
                errorMsg = ""The output of the maker fee tx is already spent.\n"" +
                        extraString +
                        ""\n\nTransaction input which spent the reserved funds for that offer: '"" +
                        spentByTransactionInput.getConnectedTransaction().getTxId().toString() + "":"" +
                        (spentByTransactionInput.getConnectedOutput() != null ?
                                spentByTransactionInput.getConnectedOutput().getIndex() + ""'"" :
                                ""null'"");
                log.error(""spentByTransactionInput {}"", spentByTransactionInput);
            }
        } else {
            errorMsg = ""The maker fee tx is invalid as it does not has at least 2 outputs."" + extraString +
                    ""\nMakerFeeTx="" + makerFeeTx;
        }

        if (errorMsg == null) {
            return Optional.empty();
        }

        errorMsg = header + errorMsg;
        log.error(errorMsg);
        if (spendingTransaction != null) {
            log.error(""Spending transaction: {}"", spendingTransaction);
        }

        return Optional.of(errorMsg);
    }
}",1,64 2000 64 2001 777 587 2002 123 773 657 2003 2004 59 773 657 2005 2006 59 773 657 2007 2008 59 773 657 2009 2010 59 773 657 2011 2012 59 773 657 2013 2014 59 773 657 2015 2016 59 773 657 2017 2018 59 773 657 2019 60 2020 62 2021 61 40 2022 41 45 62 2022 46 2023 40 362 41 309 2022 46 2023 40 362 41 59 64 2024 777 2002 40 2003 2004 44 2005 2006 44 2007 2008 44 2009 2010 44 2011 2012 44 2013 2014 44 2015 2016 44 2017 2018 41 123 823 46 2004 61 2004 59 823 46 2006 61 2006 59 823 46 2008 61 2008 59 823 46 2010 61 2010 59 823 46 2012 61 2012 59 823 46 2014 61 2014 59 823 46 2016 61 2016 59 823 46 2018 61 2018 59 125 777 809 2020 2025 40 41 123 792 2026 46 2027 40 1502 44 1502 41 43 362 43 2028 46 2029 40 41 43 362 43 2030 40 41 59 125 777 809 2020 2031 40 41 123 792 2032 46 2033 46 2034 40 362 44 362 41 59 125 330 330 777 809 2020 2035 40 2020 2036 41 123 2020 91 93 2037 61 2036 46 2037 40 362 41 59 2020 2038 61 2036 59 704 2039 61 1500 59 688 40 2037 46 2040 62 1502 41 123 2020 2041 61 2037 91 1502 93 59 704 2042 61 2036 46 2040 40 41 45 2041 46 2040 40 41 45 1501 59 2038 61 2036 46 2043 40 1500 44 2042 41 59 830 123 2039 61 2044 46 2045 40 2041 41 59 125 580 40 2046 2047 41 123 125 125 2039 349 59 792 2038 43 362 43 2039 59 125 777 809 2020 2048 40 2020 2036 41 123 2020 91 93 2049 61 2036 46 2049 40 362 41 59 792 2049 91 1502 93 59 125 777 865 2050 40 2020 2051 41 123 688 40 33 2051 46 2052 40 41 41 123 688 40 33 2021 46 2053 40 2051 41 41 825 744 2054 40 2055 40 362 44 2051 46 2056 40 41 41 41 59 688 40 2051 46 2023 40 362 41 307 2010 46 2057 40 41 41 2010 46 2058 40 2059 41 59 630 688 40 2051 46 2023 40 362 41 307 33 2010 46 2057 40 41 41 2010 46 2058 40 2060 41 59 125 125 306 777 570 2061 40 2062 2063 41 123 792 2063 323 2062 46 2064 59 125 777 726 2065 40 2066 2067 44 2020 2068 44 2062 2063 41 123 792 2067 340 2069 63 2004 46 2070 40 2067 44 2068 44 2063 41 58 1500 59 125 306 777 570 2071 40 2072 2073 44 2072 2074 41 123 792 2073 340 2075 307 2074 46 2076 40 2073 41 325 1500 59 125 306 777 2072 2077 40 2072 2073 44 2072 2074 41 123 688 40 2073 340 2078 41 123 2072 2079 61 2073 46 2080 40 2074 41 59 792 2079 46 2081 40 41 63 2072 46 2082 58 2079 59 125 630 123 792 2072 46 2083 59 125 125 306 777 2072 2084 40 41 123 330 330 330 2072 2085 61 2006 46 2086 40 41 46 2087 40 2088 40 41 41 59 792 2085 46 2089 40 41 63 2072 46 2090 58 2085 59 125 777 625 2091 40 625 2092 44 625 2093 41 123 792 2092 47 2093 59 125 777 625 2094 40 625 2095 44 625 2096 41 123 792 2097 46 2098 40 2095 47 2096 44 1502 41 59 125 306 64 2099 777 2072 2100 40 64 2099 2072 2101 41 123 570 2102 61 2102 40 2101 41 59 792 2103 46 2100 40 2102 44 2101 41 59 125 777 2072 2104 40 2072 2105 44 704 2106 41 123 792 2105 46 2107 40 2108 40 2106 41 41 59 125 330 330 330 330 330 777 704 2109 40 704 2110 41 123 792 40 2110 43 1504 41 47 1502 59 125 306 777 570 2111 40 64 2099 2072 2101 41 123 570 2112 61 2010 46 2113 40 41 59 570 2114 61 2115 40 2101 41 59 792 2112 309 33 2114 59 125 306 777 570 2116 40 64 2099 2072 2101 41 123 2072 2117 61 2006 46 2118 40 41 59 2072 2119 61 2120 46 2100 40 2121 44 2101 41 59 330 330 330 688 40 2119 323 2122 41 792 2123 59 2072 2124 61 2117 46 2125 40 2119 41 59 688 40 2126 40 2124 41 41 123 792 2121 59 330 125 792 33 2117 46 2125 40 2119 41 46 2127 40 41 59 125 64 2099 777 2072 2128 40 570 2129 44 64 2099 2072 2101 41 123 688 40 2101 340 2130 41 123 2072 2131 61 2132 46 2133 40 2134 46 2135 40 2129 41 44 2101 41 59 792 2132 46 2136 40 2131 44 2134 46 2137 40 2129 41 41 59 125 630 123 792 2130 59 125 125 777 570 2129 40 2072 2101 41 123 570 2138 61 2010 46 2139 40 41 59 570 2140 61 2141 40 2101 41 59 792 2138 309 33 2140 59 125 777 570 2142 40 64 2099 2072 2101 41 123 2072 2143 61 2006 46 2144 40 41 59 2072 2145 61 2128 40 2146 44 2101 41 59 330 330 330 688 40 2145 323 2147 41 792 2148 59 2072 2149 61 2143 46 2150 40 2145 41 59 688 40 2151 40 2149 41 41 123 792 2146 59 330 125 792 33 2143 46 2150 40 2145 41 46 2152 40 41 59 125 777 570 2153 40 2154 2155 41 123 792 2155 340 2156 307 2155 46 2157 40 41 46 2158 40 41 59 125 777 2159 60 2160 62 2161 40 2072 2162 44 570 2111 44 2163 2164 41 123 2020 2165 61 2010 46 2166 40 41 46 2167 40 41 59 688 40 2168 46 2169 40 2165 41 41 123 330 330 2020 2170 61 2010 46 2171 40 41 46 2172 59 2165 61 2168 46 2173 40 2170 41 46 2167 40 41 59 125 792 2161 40 2162 44 2111 44 2165 44 2164 41 59 125 777 2174 60 2020 44 2020 62 2175 40 2066 2067 44 2020 2068 44 2062 2063 41 123 2174 60 2020 44 2020 62 2176 61 744 2177 60 62 40 41 59 688 40 2178 46 2179 40 2068 41 41 123 2020 2180 61 2004 46 2181 40 2067 46 2182 40 41 41 59 2176 46 2183 40 2184 44 2180 41 59 125 688 40 2016 46 2185 40 41 46 2186 40 41 41 123 2176 46 2187 40 2188 44 2016 46 2185 40 41 46 2189 40 41 41 59 125 688 40 2067 702 2190 41 123 2176 46 2191 40 2192 44 40 40 2190 41 2067 41 46 2193 40 41 41 59 2176 46 2191 40 2194 44 40 40 2190 41 2067 41 46 2195 40 41 41 59 125 688 40 2067 702 2196 41 123 2176 46 2197 40 2198 44 40 40 2196 41 2067 41 46 2199 40 41 41 59 125 2176 46 2200 40 2201 44 2202 46 2203 46 2204 40 41 41 59 688 40 2068 46 2205 40 362 41 307 2063 323 2062 46 2206 41 123 2010 46 2207 40 41 46 2208 40 41 46 2209 40 2210 45 62 2210 46 2211 40 41 46 2205 40 362 41 41 46 2209 40 2212 58 58 2213 41 46 2214 40 2210 45 62 2176 46 2200 40 2215 44 2216 41 41 59 125 792 2176 46 2217 40 41 63 2218 58 2176 59 125 777 865 2219 40 625 2220 44 2066 2067 44 2020 2068 44 2072 2221 41 123 2222 40 2067 46 2223 40 41 44 2068 41 59 2224 40 2221 44 362 41 59 2225 40 2220 329 2226 40 41 44 362 43 2226 40 41 41 59 2225 40 2220 325 2227 40 41 44 362 43 2227 40 41 41 59 125 777 865 2228 40 2229 2230 44 2020 2068 41 123 2231 40 2014 46 2232 40 41 44 362 41 59 2233 40 33 2008 46 2234 40 2068 41 44 2235 46 2236 40 362 41 41 59 2233 40 33 2008 46 2237 40 2230 41 44 2235 46 2236 40 362 41 41 59 125 330 330 330 330 777 2238 2239 40 2240 2241 44 2242 2243 41 123 2238 2244 61 2241 46 2245 40 41 46 2246 40 41 46 2247 40 41 59 792 744 2238 40 2244 46 2248 40 41 44 2244 46 2249 40 41 44 2244 46 2250 40 41 44 2244 46 2251 40 41 44 2244 46 2252 40 41 44 2243 46 2253 40 41 44 2243 46 2254 40 41 44 2243 46 2255 40 41 44 2244 46 2256 40 41 44 2244 46 2257 40 41 44 2243 46 2258 40 41 44 2243 46 2259 40 41 44 2244 46 2260 40 41 44 2244 46 2261 40 41 44 2243 46 2262 40 41 44 2243 46 2263 40 41 44 2244 46 2264 40 41 44 2243 46 2265 40 41 44 2243 46 2266 40 41 44 2243 46 2267 40 41 44 2243 46 2268 40 41 44 2244 46 2269 40 41 44 2244 46 2270 40 41 44 2244 46 2271 40 41 44 2244 46 2100 40 41 44 2244 46 2111 40 41 44 2244 46 2272 40 41 44 2244 46 2273 40 41 44 2244 46 2065 40 41 44 2244 46 2274 40 41 44 2244 46 2275 40 41 44 2244 46 2276 40 41 44 2244 46 2277 40 41 44 2244 46 2278 40 41 44 2244 46 2279 40 41 44 2244 46 2280 40 41 44 2243 46 2175 40 41 44 2244 46 2281 40 41 41 59 125 773 2159 60 2160 62 2161 40 2072 2162 44 570 2111 44 2020 2282 44 2163 2164 41 123 2283 2096 61 2012 46 2284 40 2282 41 59 688 40 2096 340 2285 307 2162 340 2285 41 123 726 2286 61 2287 40 2288 40 2096 46 2289 40 41 44 2290 46 2291 41 41 59 2292 2293 61 2292 46 2294 40 2282 44 2286 41 59 688 40 2111 41 123 792 2159 46 2295 40 2293 46 2296 40 2162 41 41 59 125 630 123 330 2297 60 2292 44 2292 62 2298 61 2299 46 2300 40 2010 44 2018 44 1503 41 59 2292 2301 61 2298 46 2302 59 688 40 2301 46 2303 40 41 41 123 2020 2304 61 2164 46 2305 40 2162 41 59 2160 2306 61 2160 46 2307 40 2304 44 362 41 59 2072 2308 61 2301 46 2309 40 2306 41 59 2160 2310 61 2293 46 2311 40 2308 41 59 792 2159 46 2312 40 2310 41 59 125 630 123 792 2159 46 2313 40 41 59 125 125 125 630 123 792 2159 46 2314 40 41 59 125 125 777 809 570 2315 40 2154 2155 41 123 792 2155 46 2316 40 41 46 2317 40 362 41 307 33 2155 46 2318 40 41 59 125 777 809 570 2319 40 2154 2155 41 123 792 2155 46 2320 40 41 46 2321 40 362 41 307 33 2155 46 2322 40 41 59 125 777 809 2159 60 2020 62 2323 40 2154 2155 44 2324 2325 41 123 2020 2326 61 2155 46 2327 40 41 59 688 40 2326 323 2328 41 123 792 2159 46 2329 40 41 59 125 2330 2331 61 2325 46 2332 40 2326 41 59 688 40 2331 323 2328 41 123 792 2159 46 2333 40 41 59 125 2020 2334 61 2328 59 2020 2335 61 362 43 2155 46 2336 40 41 43 362 59 2020 2337 61 2328 59 2020 2338 61 362 43 362 43 362 59 688 40 2331 46 2339 40 41 46 2340 40 41 62 1501 41 123 330 2341 2342 61 2331 46 2343 40 1501 41 59 2344 2345 61 2342 46 2346 40 41 59 688 40 2345 340 2328 41 123 2337 61 2345 46 2347 40 41 340 2328 63 2345 46 2347 40 41 46 2348 40 41 58 362 59 330 2334 61 362 43 2338 43 362 43 2345 46 2347 40 41 46 2349 40 41 46 2348 40 41 43 362 43 40 2345 46 2350 40 41 340 2328 63 2345 46 2350 40 41 46 2351 40 41 43 362 58 362 41 59 2352 46 2353 40 362 44 2345 41 59 125 125 630 123 2334 61 362 43 2338 43 362 43 2331 59 125 688 40 2334 323 2328 41 123 792 2159 46 2354 40 41 59 125 2334 61 2335 43 2334 59 2355 46 2356 40 2334 41 59 688 40 2337 340 2328 41 123 2355 46 2356 40 362 44 2337 41 59 125 792 2159 46 2357 40 2334 41 59 125 125 ,"{'AvgLine': 13, 'CountLine': 470, 'CountStmt': 185, 'MaxNesting': 3, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 137, 'MaxEssential': 4, 'SumEssential': 43, 'AvgCyclomatic': 2, 'CountLineCode': 342, 'CountStmtDecl': 83, 'MaxCyclomatic': 9, 'SumCyclomatic': 66, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 52, 'CountSemicolon': 126, 'CountDeclMethod': 31, 'CountLineCodeExe': 223, 'CountLineComment': 78, 'CountClassCoupled': 50, 'CountClassDerived': 0, 'CountLineCodeDecl': 114, 'CountDeclMethodAll': 32, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.23', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 76, 'CountDeclClassMethod': 7, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 30, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 91, 'SumCyclomaticModified': 66, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 24, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 50, 'CountDeclInstanceVariable': 9, 'PercentLackOfCohesionModified': 88}"
2481,Java,"public final class CachedRegion implements ICachedRegion {

    private static final byte CHUNK_NOT_PRESENT = 0;
    private static final byte CHUNK_PRESENT = 1;

    /**
     * Magic value to detect invalid cache files, or incompatible cache files saved in an old version of Baritone
     */
    private static final int CACHED_REGION_MAGIC = 456022910;

    /**
     * All of the chunks in this region: A 32x32 array of them.
     */
    private final CachedChunk[][] chunks = new CachedChunk[32][32];

    /**
     * The region x coordinate
     */
    private final int x;

    /**
     * The region z coordinate
     */
    private final int z;

    private final int dimension;

    /**
     * Has this region been modified since its most recent load or save
     */
    private boolean hasUnsavedChanges;

    CachedRegion(int x, int z, int dimension) {
        this.x = x;
        this.z = z;
        this.hasUnsavedChanges = false;
        this.dimension = dimension;
    }

    @Override
    public final IBlockState getBlock(int x, int y, int z) {
        CachedChunk chunk = chunks[x >> 4][z >> 4];
        if (chunk != null) {
            return chunk.getBlock(x & 15, y, z & 15, dimension);
        }
        return null;
    }

    @Override
    public final boolean isCached(int x, int z) {
        return chunks[x >> 4][z >> 4] != null;
    }

    public final ArrayList<BlockPos> getLocationsOf(String block) {
        ArrayList<BlockPos> res = new ArrayList<>();
        for (int chunkX = 0; chunkX < 32; chunkX++) {
            for (int chunkZ = 0; chunkZ < 32; chunkZ++) {
                if (chunks[chunkX][chunkZ] == null) {
                    continue;
                }
                ArrayList<BlockPos> locs = chunks[chunkX][chunkZ].getAbsoluteBlocks(block);
                if (locs != null) {
                    res.addAll(locs);
                }
            }
        }
        return res;
    }

    public final synchronized void updateCachedChunk(int chunkX, int chunkZ, CachedChunk chunk) {
        this.chunks[chunkX][chunkZ] = chunk;
        hasUnsavedChanges = true;
    }


    public synchronized final void save(String directory) {
        if (!hasUnsavedChanges) {
            return;
        }
        removeExpired();
        try {
            Path path = Paths.get(directory);
            if (!Files.exists(path)) {
                Files.createDirectories(path);

            }
            System.out.println(""Saving region "" + x + "","" + z + "" to disk "" + path);
            Path regionFile = getRegionFile(path, this.x, this.z);
            if (!Files.exists(regionFile)) {
                Files.createFile(regionFile);
            }
            try (
                    FileOutputStream fileOut = new FileOutputStream(regionFile.toFile());
                    GZIPOutputStream gzipOut = new GZIPOutputStream(fileOut, 16384);
                    DataOutputStream out = new DataOutputStream(gzipOut)
            ) {
                out.writeInt(CACHED_REGION_MAGIC);
                for (int x = 0; x < 32; x++) {
                    for (int z = 0; z < 32; z++) {
                        CachedChunk chunk = this.chunks[x][z];
                        if (chunk == null) {
                            out.write(CHUNK_NOT_PRESENT);
                        } else {
                            out.write(CHUNK_PRESENT);
                            byte[] chunkBytes = chunk.toByteArray();
                            out.write(chunkBytes);
                            // Messy, but fills the empty 0s that should be trailing to fill up the space.
                            out.write(new byte[CachedChunk.SIZE_IN_BYTES - chunkBytes.length]);
                        }
                    }
                }
                for (int x = 0; x < 32; x++) {
                    for (int z = 0; z < 32; z++) {
                        if (chunks[x][z] != null) {
                            for (int i = 0; i < 256; i++) {
                                out.writeUTF(BlockUtils.blockToString(chunks[x][z].getOverview()[i].getBlock()));
                            }
                        }
                    }
                }
                for (int x = 0; x < 32; x++) {
                    for (int z = 0; z < 32; z++) {
                        if (chunks[x][z] != null) {
                            Map<String, List<BlockPos>> locs = chunks[x][z].getRelativeBlocks();
                            out.writeShort(locs.entrySet().size());
                            for (Map.Entry<String, List<BlockPos>> entry : locs.entrySet()) {
                                out.writeUTF(entry.getKey());
                                out.writeShort(entry.getValue().size());
                                for (BlockPos pos : entry.getValue()) {
                                    out.writeByte((byte) (pos.getZ() << 4 | pos.getX()));
                                    out.writeByte((byte) (pos.getY()));
                                }
                            }
                        }
                    }
                }
                for (int x = 0; x < 32; x++) {
                    for (int z = 0; z < 32; z++) {
                        if (chunks[x][z] != null) {
                            out.writeLong(chunks[x][z].cacheTimestamp);
                        }
                    }
                }
            }
            hasUnsavedChanges = false;
            System.out.println(""Saved region successfully"");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public synchronized void load(String directory) {
        try {
            Path path = Paths.get(directory);
            if (!Files.exists(path)) {
                Files.createDirectories(path);
            }

            Path regionFile = getRegionFile(path, this.x, this.z);
            if (!Files.exists(regionFile)) {
                return;
            }

            System.out.println(""Loading region "" + x + "","" + z + "" from disk "" + path);
            long start = System.nanoTime() / 1000000L;

            try (
                    FileInputStream fileIn = new FileInputStream(regionFile.toFile());
                    GZIPInputStream gzipIn = new GZIPInputStream(fileIn, 32768);
                    DataInputStream in = new DataInputStream(gzipIn)
            ) {
                int magic = in.readInt();
                if (magic != CACHED_REGION_MAGIC) {
                    // in the future, if we change the format on disk
                    // we can keep converters for the old format
                    // by switching on the magic value, and either loading it normally, or loading through a converter.
                    throw new IOException(""Bad magic value "" + magic);
                }
                boolean[][] present = new boolean[32][32];
                BitSet[][] bitSets = new BitSet[32][32];
                Map<String, List<BlockPos>>[][] location = new Map[32][32];
                IBlockState[][][] overview = new IBlockState[32][32][];
                long[][] cacheTimestamp = new long[32][32];
                for (int x = 0; x < 32; x++) {
                    for (int z = 0; z < 32; z++) {
                        int isChunkPresent = in.read();
                        switch (isChunkPresent) {
                            case CHUNK_PRESENT:
                                byte[] bytes = new byte[CachedChunk.SIZE_IN_BYTES];
                                in.readFully(bytes);
                                bitSets[x][z] = BitSet.valueOf(bytes);
                                location[x][z] = new HashMap<>();
                                overview[x][z] = new IBlockState[256];
                                present[x][z] = true;
                                break;
                            case CHUNK_NOT_PRESENT:
                                break;
                            default:
                                throw new IOException(""Malformed stream"");
                        }
                    }
                }
                for (int x = 0; x < 32; x++) {
                    for (int z = 0; z < 32; z++) {
                        if (present[x][z]) {
                            for (int i = 0; i < 256; i++) {
                                overview[x][z][i] = BlockUtils.stringToBlockRequired(in.readUTF()).getDefaultState();
                            }
                        }
                    }
                }
                for (int x = 0; x < 32; x++) {
                    for (int z = 0; z < 32; z++) {
                        if (present[x][z]) {
                            // 16 * 16 * 256 = 65536 so a short is enough
                            // ^ haha jokes on leijurv, java doesn't have unsigned types so that isn't correct
                            //   also why would you have more than 32767 special blocks in a chunk
                            // haha double jokes on you now it works for 65535 not just 32767
                            int numSpecialBlockTypes = in.readShort() & 0xffff;
                            for (int i = 0; i < numSpecialBlockTypes; i++) {
                                String blockName = in.readUTF();
                                BlockUtils.stringToBlockRequired(blockName);
                                List<BlockPos> locs = new ArrayList<>();
                                location[x][z].put(blockName, locs);
                                int numLocations = in.readShort() & 0xffff;
                                if (numLocations == 0) {
                                    // an entire chunk full of air can happen in the end
                                    numLocations = 65536;
                                }
                                for (int j = 0; j < numLocations; j++) {
                                    byte xz = in.readByte();
                                    int X = xz & 0x0f;
                                    int Z = (xz >>> 4) & 0x0f;
                                    int Y = in.readByte() & 0xff;
                                    locs.add(new BlockPos(X, Y, Z));
                                }
                            }
                        }
                    }
                }
                for (int x = 0; x < 32; x++) {
                    for (int z = 0; z < 32; z++) {
                        if (present[x][z]) {
                            cacheTimestamp[x][z] = in.readLong();
                        }
                    }
                }
                // only if the entire file was uncorrupted do we actually set the chunks
                for (int x = 0; x < 32; x++) {
                    for (int z = 0; z < 32; z++) {
                        if (present[x][z]) {
                            int regionX = this.x;
                            int regionZ = this.z;
                            int chunkX = x + 32 * regionX;
                            int chunkZ = z + 32 * regionZ;
                            this.chunks[x][z] = new CachedChunk(chunkX, chunkZ, bitSets[x][z], overview[x][z], location[x][z], cacheTimestamp[x][z]);
                        }
                    }
                }
            }
            removeExpired();
            hasUnsavedChanges = false;
            long end = System.nanoTime() / 1000000L;
            System.out.println(""Loaded region successfully in "" + (end - start) + ""ms"");
        } catch (Exception ex) { // corrupted files can cause NullPointerExceptions as well as IOExceptions
            ex.printStackTrace();
        }
    }

    public synchronized final void removeExpired() {
        long expiry = Baritone.settings().cachedChunksExpirySeconds.value;
        if (expiry < 0) {
            return;
        }
        long now = System.currentTimeMillis();
        long oldestAcceptableAge = now - expiry * 1000L;
        for (int x = 0; x < 32; x++) {
            for (int z = 0; z < 32; z++) {
                if (this.chunks[x][z] != null && this.chunks[x][z].cacheTimestamp < oldestAcceptableAge) {
                    System.out.println(""Removing chunk "" + (x + 32 * this.x) + "","" + (z + 32 * this.z) + "" because it was cached "" + (now - this.chunks[x][z].cacheTimestamp) / 1000L + "" seconds ago, and max age is "" + expiry);
                    this.chunks[x][z] = null;
                }
            }
        }
    }

    public synchronized final CachedChunk mostRecentlyModified() {
        CachedChunk recent = null;
        for (int x = 0; x < 32; x++) {
            for (int z = 0; z < 32; z++) {
                if (this.chunks[x][z] == null) {
                    continue;
                }
                if (recent == null || this.chunks[x][z].cacheTimestamp > recent.cacheTimestamp) {
                    recent = this.chunks[x][z];
                }
            }
        }
        return recent;
    }

    /**
     * @return The region x coordinate
     */
    @Override
    public final int getX() {
        return this.x;
    }

    /**
     * @return The region z coordinate
     */
    @Override
    public final int getZ() {
        return this.z;
    }

    private static Path getRegionFile(Path cacheDir, int regionX, int regionZ) {
        return Paths.get(cacheDir.toString(), ""r."" + regionX + ""."" + regionZ + "".bcr"");
    }
}",1,777 657 587 2000 693 2001 123 773 809 657 574 2002 61 1500 59 773 809 657 574 2003 61 1501 59 306 773 809 657 704 2004 61 1510 59 306 773 657 2005 91 93 91 93 2006 61 744 2005 91 1503 93 91 1503 93 59 306 773 657 704 2007 59 306 773 657 704 2008 59 773 657 704 2009 59 306 773 570 2010 59 2000 40 704 2007 44 704 2008 44 704 2009 41 123 823 46 2007 61 2007 59 823 46 2008 61 2008 59 823 46 2010 61 2011 59 823 46 2009 61 2009 59 125 64 2012 777 657 2013 2014 40 704 2007 44 704 2015 44 704 2008 41 123 2005 2016 61 2006 91 2007 356 1502 93 91 2008 356 1502 93 59 688 40 2016 340 2017 41 123 792 2016 46 2014 40 2007 38 1503 44 2015 44 2008 38 1503 44 2009 41 59 125 792 2017 59 125 64 2012 777 657 570 2018 40 704 2007 44 704 2008 41 123 792 2006 91 2007 356 1502 93 91 2008 356 1502 93 340 2019 59 125 777 657 2020 60 2021 62 2022 40 2023 2024 41 123 2020 60 2021 62 2025 61 744 2020 60 62 40 41 59 664 40 704 2026 61 1500 59 2026 60 1503 59 2026 349 41 123 664 40 704 2027 61 1500 59 2027 60 1503 59 2027 349 41 123 688 40 2006 91 2026 93 91 2027 93 323 2028 41 123 605 59 125 2020 60 2021 62 2029 61 2006 91 2026 93 91 2027 93 46 2030 40 2024 41 59 688 40 2029 340 2028 41 123 2025 46 2031 40 2029 41 59 125 125 125 792 2025 59 125 777 657 821 865 2032 40 704 2033 44 704 2034 44 2005 2035 41 123 823 46 2006 91 2033 93 91 2034 93 61 2035 59 2010 61 2036 59 125 777 821 657 865 2037 40 2023 2038 41 123 688 40 33 2010 41 123 792 59 125 2039 40 41 59 830 123 2040 2041 61 2042 46 2043 40 2038 41 59 688 40 33 2044 46 2045 40 2041 41 41 123 2044 46 2046 40 2041 41 59 125 2047 46 2048 46 2049 40 362 43 2007 43 362 43 2008 43 362 43 2041 41 59 2040 2050 61 2051 40 2041 44 823 46 2007 44 823 46 2008 41 59 688 40 33 2044 46 2045 40 2050 41 41 123 2044 46 2052 40 2050 41 59 125 830 40 2053 2054 61 744 2053 40 2050 46 2055 40 41 41 59 2056 2057 61 744 2056 40 2054 44 1506 41 59 2058 2048 61 744 2058 40 2057 41 41 123 2048 46 2059 40 2004 41 59 664 40 704 2007 61 1500 59 2007 60 1503 59 2007 349 41 123 664 40 704 2008 61 1500 59 2008 60 1503 59 2008 349 41 123 2005 2035 61 823 46 2006 91 2007 93 91 2008 93 59 688 40 2035 323 2060 41 123 2048 46 2061 40 2002 41 59 125 630 123 2048 46 2062 40 2003 41 59 574 91 93 2063 61 2035 46 2064 40 41 59 2048 46 2062 40 2063 41 59 330 2048 46 2062 40 744 574 91 2005 46 2065 45 2063 46 2066 93 41 59 125 125 125 664 40 704 2007 61 1500 59 2007 60 1503 59 2007 349 41 123 664 40 704 2008 61 1500 59 2008 60 1503 59 2008 349 41 123 688 40 2006 91 2007 93 91 2008 93 340 2067 41 123 664 40 704 2068 61 1500 59 2068 60 1504 59 2068 349 41 123 2048 46 2069 40 2070 46 2071 40 2006 91 2007 93 91 2008 93 46 2072 40 41 91 2068 93 46 2014 40 41 41 41 59 125 125 125 125 664 40 704 2007 61 1500 59 2007 60 1503 59 2007 349 41 123 664 40 704 2008 61 1500 59 2008 60 1503 59 2008 349 41 123 688 40 2006 91 2007 93 91 2008 93 340 2073 41 123 2074 60 2023 44 2075 60 2021 356 2076 61 2006 91 2007 93 91 2008 93 46 2077 40 41 59 2048 46 2078 40 2076 46 2079 40 41 46 2080 40 41 41 59 664 40 2074 46 2081 60 2023 44 2075 60 2021 356 2082 58 2076 46 2079 40 41 41 123 2048 46 2083 40 2082 46 2084 40 41 41 59 2048 46 2078 40 2082 46 2085 40 41 46 2080 40 41 41 59 664 40 2021 2086 58 2082 46 2085 40 41 41 123 2048 46 2087 40 40 574 41 40 2086 46 2088 40 41 332 1502 124 2086 46 2089 40 41 41 41 59 2048 46 2087 40 40 574 41 40 2086 46 2090 40 41 41 41 59 125 125 125 125 125 664 40 704 2007 61 1500 59 2007 60 1503 59 2007 349 41 123 664 40 704 2008 61 1500 59 2008 60 1503 59 2008 349 41 123 688 40 2006 91 2007 93 91 2008 93 340 2091 41 123 2048 46 2092 40 2006 91 2007 93 91 2008 93 46 2093 41 59 125 125 125 125 2010 61 2094 59 2047 46 2048 46 2049 40 362 41 59 125 580 40 2095 2096 41 123 2096 46 2097 40 41 59 125 125 777 821 865 2098 40 2023 2038 41 123 830 123 2099 2100 61 2101 46 2102 40 2038 41 59 688 40 33 2103 46 2104 40 2100 41 41 123 2103 46 2105 40 2100 41 59 125 2099 2106 61 2107 40 2100 44 823 46 2007 44 823 46 2008 41 59 688 40 33 2103 46 2104 40 2106 41 41 123 792 59 125 2108 46 2109 46 2110 40 362 43 2007 43 362 43 2008 43 362 43 2100 41 59 726 2111 61 2108 46 2112 40 41 47 1507 59 830 40 2113 2114 61 744 2113 40 2106 46 2115 40 41 41 59 2116 2117 61 744 2116 40 2114 44 1506 41 59 2118 2119 61 744 2118 40 2117 41 41 123 704 2120 61 2119 46 2121 40 41 59 688 40 2120 340 2004 41 123 330 330 330 825 744 2122 40 362 43 2120 41 59 125 570 91 93 91 93 2123 61 744 570 91 1503 93 91 1503 93 59 2124 91 93 91 93 2125 61 744 2124 91 1503 93 91 1503 93 59 2126 60 2023 44 2127 60 2021 356 91 93 91 93 2128 61 744 2126 91 1503 93 91 1503 93 59 2013 91 93 91 93 91 93 2129 61 744 2013 91 1503 93 91 1503 93 91 93 59 726 91 93 91 93 2130 61 744 726 91 1503 93 91 1503 93 59 664 40 704 2007 61 1500 59 2007 60 1503 59 2007 349 41 123 664 40 704 2008 61 1500 59 2008 60 1503 59 2008 349 41 123 704 2131 61 2119 46 2132 40 41 59 819 40 2131 41 123 579 2003 58 574 91 93 2133 61 744 574 91 2005 46 2134 93 59 2119 46 2135 40 2133 41 59 2125 91 2007 93 91 2008 93 61 2124 46 2136 40 2133 41 59 2128 91 2007 93 91 2008 93 61 744 2137 60 62 40 41 59 2129 91 2007 93 91 2008 93 61 744 2013 91 1504 93 59 2123 91 2007 93 91 2008 93 61 2138 59 572 59 579 2002 58 572 59 613 58 825 744 2139 40 362 41 59 125 125 125 664 40 704 2007 61 1500 59 2007 60 1503 59 2007 349 41 123 664 40 704 2008 61 1500 59 2008 60 1503 59 2008 349 41 123 688 40 2123 91 2007 93 91 2008 93 41 123 664 40 704 2140 61 1500 59 2140 60 1504 59 2140 349 41 123 2129 91 2007 93 91 2008 93 91 2140 93 61 2141 46 2142 40 2119 46 2143 40 41 41 46 2144 40 41 59 125 125 125 125 664 40 704 2007 61 1500 59 2007 60 1503 59 2007 349 41 123 664 40 704 2008 61 1500 59 2008 60 1503 59 2008 349 41 123 688 40 2123 91 2007 93 91 2008 93 41 123 330 330 330 330 704 2145 61 2119 46 2146 40 41 38 1506 59 664 40 704 2147 61 1500 59 2147 60 2145 59 2147 349 41 123 2023 2148 61 2119 46 2149 40 41 59 2150 46 2151 40 2148 41 59 2127 60 2021 62 2152 61 744 2020 60 62 40 41 59 2128 91 2007 93 91 2008 93 46 2153 40 2148 44 2152 41 59 704 2154 61 2119 46 2146 40 41 38 1506 59 688 40 2154 323 1500 41 123 330 2154 61 1506 59 125 664 40 704 2155 61 1500 59 2155 60 2154 59 2155 349 41 123 574 2156 61 2119 46 2157 40 41 59 704 2158 61 2156 38 1503 59 704 2159 61 40 2156 359 1502 41 38 1503 59 704 2160 61 2119 46 2157 40 41 38 1504 59 2152 46 2161 40 744 2021 40 2158 44 2160 44 2159 41 41 59 125 125 125 125 125 664 40 704 2007 61 1500 59 2007 60 1503 59 2007 349 41 123 664 40 704 2008 61 1500 59 2008 60 1503 59 2008 349 41 123 688 40 2123 91 2007 93 91 2008 93 41 123 2130 91 2007 93 91 2008 93 61 2119 46 2162 40 41 59 125 125 125 330 664 40 704 2007 61 1500 59 2007 60 1503 59 2007 349 41 123 664 40 704 2008 61 1500 59 2008 60 1503 59 2008 349 41 123 688 40 2123 91 2007 93 91 2008 93 41 123 704 2163 61 823 46 2007 59 704 2164 61 823 46 2008 59 704 2033 61 2007 43 1503 42 2163 59 704 2034 61 2008 43 1503 42 2164 59 823 46 2006 91 2007 93 91 2008 93 61 744 2005 40 2033 44 2034 44 2125 91 2007 93 91 2008 93 44 2129 91 2007 93 91 2008 93 44 2128 91 2007 93 91 2008 93 44 2130 91 2007 93 91 2008 93 41 59 125 125 125 125 2165 40 41 59 2010 61 2166 59 726 2167 61 2108 46 2112 40 41 47 1507 59 2108 46 2109 46 2110 40 362 43 40 2167 45 2111 41 43 362 41 59 125 580 40 2168 2169 41 123 330 2169 46 2170 40 41 59 125 125 777 821 657 865 2171 40 41 123 726 2172 61 2173 46 2174 40 41 46 2175 46 2176 59 688 40 2172 60 1500 41 123 792 59 125 726 2177 61 2178 46 2179 40 41 59 726 2180 61 2177 45 2172 42 1504 59 664 40 704 2007 61 1500 59 2007 60 1503 59 2007 349 41 123 664 40 704 2008 61 1500 59 2008 60 1503 59 2008 349 41 123 688 40 823 46 2006 91 2007 93 91 2008 93 340 2181 307 823 46 2006 91 2007 93 91 2008 93 46 2182 60 2180 41 123 2178 46 2183 46 2184 40 362 43 40 2007 43 1503 42 823 46 2007 41 43 362 43 40 2008 43 1503 42 823 46 2008 41 43 362 43 40 2177 45 823 46 2006 91 2007 93 91 2008 93 46 2182 41 47 1504 43 362 43 2172 41 59 823 46 2006 91 2007 93 91 2008 93 61 2181 59 125 125 125 125 777 821 657 2005 2185 40 41 123 2005 2186 61 2187 59 664 40 704 2007 61 1500 59 2007 60 1503 59 2007 349 41 123 664 40 704 2008 61 1500 59 2008 60 1503 59 2008 349 41 123 688 40 823 46 2006 91 2007 93 91 2008 93 323 2187 41 123 605 59 125 688 40 2186 323 2187 309 823 46 2006 91 2007 93 91 2008 93 46 2188 62 2186 46 2188 41 123 2186 61 823 46 2006 91 2007 93 91 2008 93 59 125 125 125 792 2186 59 125 306 64 2012 777 657 704 2189 40 41 123 792 823 46 2007 59 125 306 64 2012 777 657 704 2190 40 41 123 792 823 46 2008 59 125 773 809 2191 2192 40 2191 2193 44 704 2194 44 704 2195 41 123 792 2196 46 2197 40 2193 46 2198 40 41 44 362 43 2194 43 362 43 2195 43 362 41 59 125 125 ,"{'AvgLine': 23, 'CountLine': 325, 'CountStmt': 236, 'MaxNesting': 7, 'AvgLineCode': 21, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 169, 'MaxEssential': 4, 'SumEssential': 20, 'AvgCyclomatic': 5, 'CountLineCode': 266, 'CountStmtDecl': 87, 'MaxCyclomatic': 25, 'SumCyclomatic': 68, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 24, 'CountSemicolon': 164, 'CountDeclMethod': 12, 'CountLineCodeExe': 175, 'CountLineComment': 36, 'CountClassCoupled': 26, 'CountClassDerived': 0, 'CountLineCodeDecl': 61, 'CountDeclMethodAll': 12, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.14', 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 25, 'SumCyclomaticStrict': 70, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 5, 'CountDeclMethodPublic': 10, 'MaxCyclomaticModified': 24, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 67, 'CountDeclClassVariable': 3, 'CountDeclMethodDefault': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 11, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 26, 'CountDeclInstanceVariable': 5, 'PercentLackOfCohesionModified': 60}"
2746,Java,"@Slf4j
public class BsqWalletService extends WalletService implements DaoStateListener {

    public interface WalletTransactionsChangeListener {

        void onWalletTransactionsChange();
    }

    private final DaoKillSwitch daoKillSwitch;
    private final BsqCoinSelector bsqCoinSelector;
    private final NonBsqCoinSelector nonBsqCoinSelector;
    private final DaoStateService daoStateService;
    private final UnconfirmedBsqChangeOutputListService unconfirmedBsqChangeOutputListService;
    private final List<Transaction> walletTransactions = new ArrayList<>();
    private final CopyOnWriteArraySet<BsqBalanceListener> bsqBalanceListeners = new CopyOnWriteArraySet<>();
    private final List<WalletTransactionsChangeListener> walletTransactionsChangeListeners = new ArrayList<>();
    private boolean updateBsqWalletTransactionsPending;
    @Getter
    private final BsqFormatter bsqFormatter;


    // balance of non BSQ satoshis
    @Getter
    private Coin availableNonBsqBalance = Coin.ZERO;
    @Getter
    private Coin availableBalance = Coin.ZERO;
    @Getter
    private Coin unverifiedBalance = Coin.ZERO;
    @Getter
    private Coin verifiedBalance = Coin.ZERO;
    @Getter
    private Coin unconfirmedChangeBalance = Coin.ZERO;
    @Getter
    private Coin lockedForVotingBalance = Coin.ZERO;
    @Getter
    private Coin lockupBondsBalance = Coin.ZERO;
    @Getter
    private Coin unlockingBondsBalance = Coin.ZERO;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    public BsqWalletService(WalletsSetup walletsSetup,
                            BsqCoinSelector bsqCoinSelector,
                            NonBsqCoinSelector nonBsqCoinSelector,
                            DaoStateService daoStateService,
                            UnconfirmedBsqChangeOutputListService unconfirmedBsqChangeOutputListService,
                            Preferences preferences,
                            FeeService feeService,
                            DaoKillSwitch daoKillSwitch,
                            BsqFormatter bsqFormatter) {
        super(walletsSetup,
                preferences,
                feeService);

        this.bsqCoinSelector = bsqCoinSelector;
        this.nonBsqCoinSelector = nonBsqCoinSelector;
        this.daoStateService = daoStateService;
        this.unconfirmedBsqChangeOutputListService = unconfirmedBsqChangeOutputListService;
        this.daoKillSwitch = daoKillSwitch;
        this.bsqFormatter = bsqFormatter;

        nonBsqCoinSelector.setPreferences(preferences);

        walletsSetup.addSetupCompletedHandler(() -> {
            wallet = walletsSetup.getBsqWallet();
            if (wallet != null) {
                wallet.setCoinSelector(bsqCoinSelector);
                addListenersToWallet();
            }

            BlockChain chain = walletsSetup.getChain();
            if (chain != null) {
                chain.addNewBestBlockListener(block -> chainHeightProperty.set(block.getHeight()));
                chainHeightProperty.set(chain.getBestChainHeight());
            }
        });

        daoStateService.addDaoStateListener(this);
    }

    @Override
    protected void addListenersToWallet() {
        super.addListenersToWallet();

        wallet.addCoinsReceivedEventListener((wallet, tx, prevBalance, newBalance) ->
                updateBsqWalletTransactions()
        );
        wallet.addCoinsSentEventListener((wallet, tx, prevBalance, newBalance) ->
                updateBsqWalletTransactions()
        );
        wallet.addReorganizeEventListener(wallet -> {
            log.warn(""onReorganize "");
            updateBsqWalletTransactions();
            unconfirmedBsqChangeOutputListService.onReorganize();
        });
        wallet.addTransactionConfidenceEventListener((wallet, tx) -> {
            // We are only interested in updates from unconfirmed txs and confirmed txs at the
            // time when it gets into a block. Otherwise we would get called
            // updateBsqWalletTransactions for each tx as the block depth changes for all.
            if (tx != null && tx.getConfidence() != null && tx.getConfidence().getDepthInBlocks() <= 1 &&
                    daoStateService.isParseBlockChainComplete()) {
                updateBsqWalletTransactions();
            }
            unconfirmedBsqChangeOutputListService.onTransactionConfidenceChanged(tx);
        });
        wallet.addKeyChainEventListener(keys ->
                updateBsqWalletTransactions()
        );
        wallet.addScriptsChangeEventListener((wallet, scripts, isAddingScripts) ->
                updateBsqWalletTransactions()
        );
        wallet.addChangeEventListener(wallet ->
                updateBsqWalletTransactions()
        );
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // DaoStateListener
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void onParseBlockCompleteAfterBatchProcessing(Block block) {
        if (isWalletReady()) {
            wallet.getTransactions(false).forEach(unconfirmedBsqChangeOutputListService::onTransactionConfidenceChanged);
            updateBsqWalletTransactions();
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Overridden Methods
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    String getWalletAsString(boolean includePrivKeys) {
        return wallet.toString(true, includePrivKeys, this.aesKey, true, true, walletsSetup.getChain()) + ""\n\n"" +
                ""All pubKeys as hex:\n"" +
                wallet.printAllPubKeysAsHex();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Balance
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void updateBsqBalance() {
        long ts = System.currentTimeMillis();
        unverifiedBalance = Coin.valueOf(
                getTransactions(false).stream()
                        .filter(tx -> tx.getConfidence().getConfidenceType() == PENDING)
                        .mapToLong(tx -> {
                            // Sum up outputs into BSQ wallet and subtract the inputs using lockup or unlocking
                            // outputs since those inputs will be accounted for in lockupBondsBalance and
                            // unlockingBondsBalance
                            long outputs = tx.getOutputs().stream()
                                    .filter(out -> out.isMine(wallet))
                                    .filter(TransactionOutput::isAvailableForSpending)
                                    .mapToLong(out -> out.getValue().value)
                                    .sum();
                            // Account for spending of locked connectedOutputs
                            long lockedInputs = tx.getInputs().stream()
                                    .filter(in -> {
                                        TransactionOutput connectedOutput = in.getConnectedOutput();
                                        if (connectedOutput != null) {
                                            Transaction parentTransaction = connectedOutput.getParentTransaction();
                                            // TODO SQ
                                            if (parentTransaction != null/* &&
                                                    parentTransaction.getConfidence().getConfidenceType() == BUILDING*/) {
                                                TxOutputKey key = new TxOutputKey(parentTransaction.getTxId().toString(),
                                                        connectedOutput.getIndex());

                                                return (connectedOutput.isMine(wallet)
                                                        && (daoStateService.isLockupOutput(key)
                                                        || daoStateService.isUnlockingAndUnspent(key)));
                                            }
                                        }
                                        return false;
                                    })
                                    .mapToLong(in -> in.getValue() != null ? in.getValue().value : 0)
                                    .sum();
                            return outputs - lockedInputs;
                        })
                        .sum()
        );

        Set<String> confirmedTxIdSet = getTransactions(false).stream()
                .filter(tx -> tx.getConfidence().getConfidenceType() == BUILDING)
                .map(Transaction::getTxId)
                .map(Sha256Hash::toString)
                .collect(Collectors.toSet());

        lockedForVotingBalance = Coin.valueOf(daoStateService.getUnspentBlindVoteStakeTxOutputs().stream()
                .filter(txOutput -> confirmedTxIdSet.contains(txOutput.getTxId()))
                .mapToLong(TxOutput::getValue)
                .sum());

        lockupBondsBalance = Coin.valueOf(daoStateService.getLockupTxOutputs().stream()
                .filter(txOutput -> daoStateService.isUnspent(txOutput.getKey()))
                .filter(txOutput -> !daoStateService.isConfiscatedLockupTxOutput(txOutput.getTxId()))
                .filter(txOutput -> confirmedTxIdSet.contains(txOutput.getTxId()))
                .mapToLong(TxOutput::getValue)
                .sum());

        unlockingBondsBalance = Coin.valueOf(daoStateService.getUnspentUnlockingTxOutputsStream()
                .filter(txOutput -> confirmedTxIdSet.contains(txOutput.getTxId()))
                .filter(txOutput -> !daoStateService.isConfiscatedUnlockTxOutput(txOutput.getTxId()))
                .mapToLong(TxOutput::getValue)
                .sum());

        availableBalance = bsqCoinSelector.select(NetworkParameters.MAX_MONEY,
                wallet.calculateAllSpendCandidates()).valueGathered;

        if (availableBalance.isNegative())
            availableBalance = Coin.ZERO;

        unconfirmedChangeBalance = unconfirmedBsqChangeOutputListService.getBalance();

        availableNonBsqBalance = nonBsqCoinSelector.select(NetworkParameters.MAX_MONEY,
                wallet.calculateAllSpendCandidates()).valueGathered;

        verifiedBalance = availableBalance.subtract(unconfirmedChangeBalance);

        bsqBalanceListeners.forEach(e -> e.onUpdateBalances(availableBalance, availableNonBsqBalance, unverifiedBalance,
                unconfirmedChangeBalance, lockedForVotingBalance, lockupBondsBalance, unlockingBondsBalance));
        log.info(""updateBsqBalance took {} ms"", System.currentTimeMillis() - ts);
    }

    public void addBsqBalanceListener(BsqBalanceListener listener) {
        bsqBalanceListeners.add(listener);
    }

    public void removeBsqBalanceListener(BsqBalanceListener listener) {
        bsqBalanceListeners.remove(listener);
    }

    public void addWalletTransactionsChangeListener(WalletTransactionsChangeListener listener) {
        walletTransactionsChangeListeners.add(listener);
    }

    public void removeWalletTransactionsChangeListener(WalletTransactionsChangeListener listener) {
        walletTransactionsChangeListeners.remove(listener);
    }

    public List<TransactionOutput> getSpendableBsqTransactionOutputs() {
        return new ArrayList<>(bsqCoinSelector.select(NetworkParameters.MAX_MONEY,
                wallet.calculateAllSpendCandidates()).gathered);
    }

    public List<TransactionOutput> getSpendableNonBsqTransactionOutputs() {
        return new ArrayList<>(nonBsqCoinSelector.select(NetworkParameters.MAX_MONEY,
                wallet.calculateAllSpendCandidates()).gathered);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // BSQ TransactionOutputs and Transactions
    ///////////////////////////////////////////////////////////////////////////////////////////

    public List<Transaction> getClonedWalletTransactions() {
        return new ArrayList<>(walletTransactions);
    }

    public Stream<Transaction> getPendingWalletTransactionsStream() {
        return walletTransactions.stream()
                .filter(transaction -> transaction.getConfidence().getConfidenceType() == TransactionConfidence.ConfidenceType.PENDING);
    }

    private void updateBsqWalletTransactions() {
        if (daoStateService.isParseBlockChainComplete()) {
            // We get called updateBsqWalletTransactions multiple times from onWalletChanged, onTransactionConfidenceChanged
            // and from onParseBlockCompleteAfterBatchProcessing. But as updateBsqBalance is an expensive operation we do
            // not want to call it in a short interval series so we use a flag and a delay to not call it multiple times
            // in a 100 ms period.
            if (!updateBsqWalletTransactionsPending) {
                updateBsqWalletTransactionsPending = true;
                UserThread.runAfter(() -> {
                    walletTransactions.clear();
                    walletTransactions.addAll(getTransactions(false));
                    walletTransactionsChangeListeners.forEach(WalletTransactionsChangeListener::onWalletTransactionsChange);
                    updateBsqBalance();
                    updateBsqWalletTransactionsPending = false;
                }, 100, TimeUnit.MILLISECONDS);
            }
        }
    }

    private Set<Transaction> getBsqWalletTransactions() {
        return getTransactions(false).stream()
                .filter(transaction -> transaction.getConfidence().getConfidenceType() == PENDING ||
                        daoStateService.containsTx(transaction.getTxId().toString()))
                .collect(Collectors.toSet());
    }

    public Set<Transaction> getUnverifiedBsqTransactions() {
        Set<Transaction> bsqWalletTransactions = getBsqWalletTransactions();
        Set<Transaction> walletTxs = new HashSet<>(getTransactions(false));
        checkArgument(walletTxs.size() >= bsqWalletTransactions.size(),
                ""We cannot have more txsWithOutputsFoundInBsqTxo than walletTxs"");
        if (walletTxs.size() == bsqWalletTransactions.size()) {
            // As expected
            return new HashSet<>();
        } else {
            Map<String, Transaction> map = walletTxs.stream()
                    .collect(Collectors.toMap(t -> t.getTxId().toString(), Function.identity()));

            Set<String> walletTxIds = walletTxs.stream()
                    .map(Transaction::getTxId).map(Sha256Hash::toString).collect(Collectors.toSet());
            Set<String> bsqTxIds = bsqWalletTransactions.stream()
                    .map(Transaction::getTxId).map(Sha256Hash::toString).collect(Collectors.toSet());

            walletTxIds.stream()
                    .filter(bsqTxIds::contains)
                    .forEach(map::remove);
            return new HashSet<>(map.values());
        }
    }

    @Override
    public Coin getValueSentFromMeForTransaction(Transaction transaction) throws ScriptException {
        Coin result = Coin.ZERO;
        // We check all our inputs and get the connected outputs.
        for (int i = 0; i < transaction.getInputs().size(); i++) {
            TransactionInput input = transaction.getInputs().get(i);
            // We grab the connected output for that input
            TransactionOutput connectedOutput = input.getConnectedOutput();
            if (connectedOutput != null) {
                // We grab the parent tx of the connected output
                final Transaction parentTransaction = connectedOutput.getParentTransaction();
                final boolean isConfirmed = parentTransaction != null &&
                        parentTransaction.getConfidence().getConfidenceType() == TransactionConfidence.ConfidenceType.BUILDING;
                if (connectedOutput.isMineOrWatched(wallet)) {
                    if (isConfirmed) {
                        // We lookup if we have a BSQ tx matching the parent tx
                        // We cannot make that findTx call outside of the loop as the parent tx can change at each iteration
                        Optional<Tx> txOptional = daoStateService.getTx(parentTransaction.getTxId().toString());
                        if (txOptional.isPresent()) {
                            TxOutput txOutput = txOptional.get().getTxOutputs().get(connectedOutput.getIndex());
                            if (daoStateService.isBsqTxOutputType(txOutput)) {
                                //TODO check why values are not the same
                                if (txOutput.getValue() != connectedOutput.getValue().value)
                                    log.warn(""getValueSentToMeForTransaction: Value of BSQ output do not match BitcoinJ tx output. "" +
                                                    ""txOutput.getValue()={}, output.getValue().value={}, txId={}"",
                                            txOutput.getValue(), connectedOutput.getValue().value, txOptional.get().getId());

                                // If it is a valid BSQ output we add it
                                result = result.add(Coin.valueOf(txOutput.getValue()));
                            }
                        }
                    } /*else {
                        // TODO atm we don't display amounts of unconfirmed txs but that might change so we leave that code
                        // if it will be required
                        // If the tx is not confirmed yet we add the value and assume it is a valid BSQ output.
                        result = result.add(connectedOutput.getValue());
                    }*/
                }
            }
        }
        return result;
    }

    @Override
    public Coin getValueSentToMeForTransaction(Transaction transaction) throws ScriptException {
        Coin result = Coin.ZERO;
        final String txId = transaction.getTxId().toString();
        // We check if we have a matching BSQ tx. We do that call here to avoid repeated calls in the loop.
        Optional<Tx> txOptional = daoStateService.getTx(txId);
        // We check all the outputs of our tx
        for (int i = 0; i < transaction.getOutputs().size(); i++) {
            TransactionOutput output = transaction.getOutputs().get(i);
            final boolean isConfirmed = output.getParentTransaction() != null &&
                    output.getParentTransaction().getConfidence().getConfidenceType() == TransactionConfidence.ConfidenceType.BUILDING;
            if (output.isMineOrWatched(wallet)) {
                if (isConfirmed) {
                    if (txOptional.isPresent()) {
                        // The index of the BSQ tx outputs are the same like the bitcoinj tx outputs
                        TxOutput txOutput = txOptional.get().getTxOutputs().get(i);
                        if (daoStateService.isBsqTxOutputType(txOutput)) {
                            //TODO check why values are not the same
                            if (txOutput.getValue() != output.getValue().value) {
                                log.warn(""getValueSentToMeForTransaction: Value of BSQ output do not match BitcoinJ tx output. "" +
                                                ""txOutput.getValue()={}, output.getValue().value={}, txId={}"",
                                        txOutput.getValue(), output.getValue().value, txId);
                            }

                            // If it is a valid BSQ output we add it
                            result = result.add(Coin.valueOf(txOutput.getValue()));
                        }
                    }
                } /*else {
                    // TODO atm we don't display amounts of unconfirmed txs but that might change so we leave that code
                    // if it will be required
                    // If the tx is not confirmed yet we add the value and assume it is a valid BSQ output.
                    result = result.add(output.getValue());
                }*/
            }
        }
        return result;
    }

    public Optional<Transaction> isWalletTransaction(String txId) {
        return walletTransactions.stream().filter(e -> e.getTxId().toString().equals(txId)).findAny();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Sign tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Transaction signTxAndVerifyNoDustOutputs(Transaction tx)
            throws WalletException, TransactionVerificationException {
        WalletService.signTx(wallet, aesKey, tx);
        WalletService.verifyNonDustTxo(tx);
        return tx;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Commit tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void commitTx(Transaction tx, TxType txType) {
        wallet.commitTx(tx);
        //printTx(""BSQ commit Tx"", tx);

        unconfirmedBsqChangeOutputListService.onCommitTx(tx, txType, wallet);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Send BSQ with BTC fee
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Transaction getPreparedSendBsqTx(String receiverAddress, Coin receiverAmount)
            throws AddressFormatException, InsufficientBsqException, WalletException,
            TransactionVerificationException, BsqChangeBelowDustException {
        return getPreparedSendTx(receiverAddress, receiverAmount, bsqCoinSelector);
    }

    public Transaction getPreparedSendBsqTx(String receiverAddress,
                                            Coin receiverAmount,
                                            @Nullable Set<TransactionOutput> utxoCandidates)
            throws AddressFormatException, InsufficientBsqException, WalletException,
            TransactionVerificationException, BsqChangeBelowDustException {
        if (utxoCandidates != null) {
            bsqCoinSelector.setUtxoCandidates(utxoCandidates);
        }
        return getPreparedSendTx(receiverAddress, receiverAmount, bsqCoinSelector);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Send BTC (non-BSQ) with BTC fee (e.g. the issuance output from a  lost comp. request)
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Transaction getPreparedSendBtcTx(String receiverAddress, Coin receiverAmount)
            throws AddressFormatException, InsufficientBsqException, WalletException,
            TransactionVerificationException, BsqChangeBelowDustException {
        return getPreparedSendTx(receiverAddress, receiverAmount, nonBsqCoinSelector);
    }

    public Transaction getPreparedSendBtcTx(String receiverAddress,
                                            Coin receiverAmount,
                                            @Nullable Set<TransactionOutput> utxoCandidates)
            throws AddressFormatException, InsufficientBsqException, WalletException,
            TransactionVerificationException, BsqChangeBelowDustException {
        if (utxoCandidates != null) {
            nonBsqCoinSelector.setUtxoCandidates(utxoCandidates);
        }
        return getPreparedSendTx(receiverAddress, receiverAmount, nonBsqCoinSelector);
    }

    private Transaction getPreparedSendTx(String receiverAddress,
                                          Coin receiverAmount,
                                          BisqDefaultCoinSelector coinSelector)
            throws AddressFormatException, InsufficientBsqException, WalletException, TransactionVerificationException, BsqChangeBelowDustException {
        daoKillSwitch.assertDaoIsNotDisabled();
        Transaction tx = new Transaction(params);
        checkArgument(Restrictions.isAboveDust(receiverAmount),
                ""The amount is too low (dust limit)."");
        tx.addOutput(receiverAmount, Address.fromString(params, receiverAddress));
        try {
            var selection = coinSelector.select(receiverAmount, wallet.calculateAllSpendCandidates());
            var change = coinSelector.getChange(receiverAmount, selection);
            if (Restrictions.isAboveDust(change)) {
                tx.addOutput(change, getChangeAddress());
            } else if (!change.isZero()) {
                String msg = ""BSQ change output is below dust limit. outputValue="" + change.value / 100 + "" BSQ"";
                log.warn(msg);
                throw new BsqChangeBelowDustException(msg, change);
            }

            SendRequest sendRequest = SendRequest.forTx(tx);
            sendRequest.fee = Coin.ZERO;
            sendRequest.feePerKb = Coin.ZERO;
            sendRequest.ensureMinRequiredFee = false;
            sendRequest.aesKey = aesKey;
            sendRequest.shuffleOutputs = false;
            sendRequest.signInputs = false;
            sendRequest.changeAddress = getChangeAddress();
            sendRequest.coinSelector = coinSelector;
            wallet.completeTx(sendRequest);
            checkWalletConsistency(wallet);
            verifyTransaction(tx);

            return tx;
        } catch (InsufficientMoneyException e) {
            log.error(""getPreparedSendTx: tx={}"", tx.toString());
            log.error(e.toString());
            throw new InsufficientBsqException(e.missing);
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Burn fee txs
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Transaction getPreparedTradeFeeTx(Coin fee) throws InsufficientBsqException {
        daoKillSwitch.assertDaoIsNotDisabled();

        Transaction tx = new Transaction(params);
        addInputsAndChangeOutputForTx(tx, fee, bsqCoinSelector);
        return tx;
    }

    // We create a tx with Bsq inputs for the fee and optional BSQ change output.
    // As the fee amount will be missing in the output those BSQ fees are burned.
    public Transaction getPreparedProposalTx(Coin fee) throws InsufficientBsqException {
        return getPreparedTxWithMandatoryBsqChangeOutput(fee);
    }

    public Transaction getPreparedIssuanceTx(Coin fee) throws InsufficientBsqException {
        return getPreparedTxWithMandatoryBsqChangeOutput(fee);
    }

    public Transaction getPreparedProofOfBurnTx(Coin fee) throws InsufficientBsqException {
        return getPreparedTxWithMandatoryBsqChangeOutput(fee);
    }

    public Transaction getPreparedBurnFeeTxForAssetListing(Coin fee) throws InsufficientBsqException {
        return getPreparedTxWithMandatoryBsqChangeOutput(fee);
    }

    // We need to require one BSQ change output as we could otherwise not be able to distinguish between 2
    // structurally same transactions where only the BSQ fee is different. In case of asset listing fee and proof of
    // burn it is a user input, so it is not known to the parser, instead we derive the burned fee from the parser.

    // In case of proposal fee we could derive it from the params.

    // For issuance txs we also require a BSQ change output before the issuance output gets added. There was a
    // minor bug with the old version that multiple inputs would have caused an exception in case there was no
    // change output (e.g. inputs of 21 and 6 BSQ for BSQ fee of 21 BSQ would have caused that only 1 input was used
    // and then caused an error as we enforced a change output. This new version handles such cases correctly.

    // Examples for the structurally indistinguishable transactions:
    // Case 1: 10 BSQ fee to burn
    // In: 17 BSQ
    // Out: BSQ change 7 BSQ -> valid BSQ
    // Out: OpReturn
    // Miner fee: 1000 sat  (10 BSQ burned)

    // Case 2: 17 BSQ fee to burn
    // In: 17 BSQ
    // Out: burned BSQ change 7 BSQ -> BTC (7 BSQ burned)
    // Out: OpReturn
    // Miner fee: 1000 sat  (10 BSQ burned)

    private Transaction getPreparedTxWithMandatoryBsqChangeOutput(Coin fee) throws InsufficientBsqException {
        daoKillSwitch.assertDaoIsNotDisabled();

        Transaction tx = new Transaction(params);
        // We look for inputs covering out BSQ fee we want to pay.
        CoinSelection coinSelection = bsqCoinSelector.select(fee, wallet.calculateAllSpendCandidates());
        try {
            Coin change = bsqCoinSelector.getChange(fee, coinSelection);
            if (change.isZero() || Restrictions.isDust(change)) {
                // If change is zero or below dust we increase required input amount to enforce a BSQ change output.
                // All outputs after that are considered BTC and therefore would be burned BSQ if BSQ is left from what
                // we use for miner fee.

                Coin minDustThreshold = Coin.valueOf(preferences.getIgnoreDustThreshold());
                Coin increasedRequiredInput = fee.add(minDustThreshold);
                coinSelection = bsqCoinSelector.select(increasedRequiredInput, wallet.calculateAllSpendCandidates());
                change = bsqCoinSelector.getChange(fee, coinSelection);

                log.warn(""We increased required input as change output was zero or dust: New change value={}"", change);
                String info = ""Available BSQ balance="" + coinSelection.valueGathered.value / 100 + "" BSQ. "" +
                        ""Intended fee to burn="" + fee.value / 100 + "" BSQ. "" +
                        ""Please increase your balance to at least "" + (fee.value + minDustThreshold.value) / 100 + "" BSQ."";
                checkArgument(coinSelection.valueGathered.compareTo(fee) > 0,
                        ""This transaction require a change output of at least "" + minDustThreshold.value / 100 + "" BSQ (dust limit). "" +
                                info);

                checkArgument(!Restrictions.isDust(change),
                        ""This transaction would create a dust output of "" + change.value / 100 + "" BSQ. "" +
                                ""It requires a change output of at least "" + minDustThreshold.value / 100 + "" BSQ (dust limit). "" +
                                info);
            }

            coinSelection.gathered.forEach(tx::addInput);
            tx.addOutput(change, getChangeAddress());

            return tx;

        } catch (InsufficientMoneyException e) {
            log.error(""coinSelection.gathered={}"", coinSelection.gathered);
            throw new InsufficientBsqException(e.missing);
        }
    }

    private void addInputsAndChangeOutputForTx(Transaction tx,
                                               Coin fee,
                                               BsqCoinSelector bsqCoinSelector)
            throws InsufficientBsqException {
        Coin requiredInput;
        // If our fee is less then dust limit we increase it so we are sure to not get any dust output.
        if (Restrictions.isDust(fee)) {
            requiredInput = fee.add(Restrictions.getMinNonDustOutput());
        } else {
            requiredInput = fee;
        }

        CoinSelection coinSelection = bsqCoinSelector.select(requiredInput, wallet.calculateAllSpendCandidates());
        coinSelection.gathered.forEach(tx::addInput);
        try {
            Coin change = bsqCoinSelector.getChange(fee, coinSelection);
            // Change can be ZERO, then no change output is created so don't rely on a BSQ change output
            if (change.isPositive()) {
                checkArgument(Restrictions.isAboveDust(change),
                        ""The change output of "" + change.value / 100d + "" BSQ is below the min. dust value of ""
                                + Restrictions.getMinNonDustOutput().value / 100d +
                                "". At least "" + Restrictions.getMinNonDustOutput().add(fee).value / 100d +
                                "" BSQ is needed for this transaction"");
                tx.addOutput(change, getChangeAddress());
            }
        } catch (InsufficientMoneyException e) {
            log.error(tx.toString());
            throw new InsufficientBsqException(e.missing);
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // BsqSwap tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Tuple2<List<RawTransactionInput>, Coin> getBuyersBsqInputsForBsqSwapTx(Coin required)
            throws InsufficientBsqException {
        daoKillSwitch.assertDaoIsNotDisabled();
        // As unconfirmed BSQ inputs cannot be verified by the peer we can only use confirmed BSQ.
        boolean prev = bsqCoinSelector.isAllowSpendMyOwnUnconfirmedTxOutputs();
        bsqCoinSelector.setAllowSpendMyOwnUnconfirmedTxOutputs(false);
        CoinSelection coinSelection = bsqCoinSelector.select(required, wallet.calculateAllSpendCandidates());
        Coin change;
        try {
            change = bsqCoinSelector.getChange(required, coinSelection);
        } catch (InsufficientMoneyException e) {
            throw new InsufficientBsqException(e.missing);
        } finally {
            bsqCoinSelector.setAllowSpendMyOwnUnconfirmedTxOutputs(prev);
        }

        Transaction dummyTx = new Transaction(params);
        coinSelection.gathered.forEach(dummyTx::addInput);
        List<RawTransactionInput> inputs = dummyTx.getInputs().stream()
                .map(RawTransactionInput::new)
                .collect(Collectors.toList());
        return new Tuple2<>(inputs, change);
    }

    public void signBsqSwapTransaction(Transaction transaction, List<TransactionInput> myInputs)
            throws TransactionVerificationException {
        for (TransactionInput input : myInputs) {
            TransactionOutput connectedOutput = input.getConnectedOutput();
            checkNotNull(connectedOutput, ""connectedOutput must not be null"");
            checkArgument(connectedOutput.isMine(wallet), ""connectedOutput is not mine"");
            signTransactionInput(wallet, aesKey, transaction, input, input.getIndex());
            checkScriptSig(transaction, input, input.getIndex());
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Blind vote tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    // We create a tx with Bsq inputs for the fee, one output for the stake and optional one BSQ change output.
    // As the fee amount will be missing in the output those BSQ fees are burned.
    public Transaction getPreparedBlindVoteTx(Coin fee, Coin stake) throws InsufficientBsqException {
        daoKillSwitch.assertDaoIsNotDisabled();
        Transaction tx = new Transaction(params);
        tx.addOutput(new TransactionOutput(params, tx, stake, getUnusedAddress()));
        addInputsAndChangeOutputForTx(tx, fee.add(stake), bsqCoinSelector);
        //printTx(""getPreparedBlindVoteTx"", tx);
        return tx;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // MyVote reveal tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Transaction getPreparedVoteRevealTx(TxOutput stakeTxOutput) {
        daoKillSwitch.assertDaoIsNotDisabled();
        Transaction tx = new Transaction(params);
        final Coin stake = Coin.valueOf(stakeTxOutput.getValue());
        Transaction blindVoteTx = getTransaction(stakeTxOutput.getTxId());
        checkNotNull(blindVoteTx, ""blindVoteTx must not be null"");
        TransactionOutPoint outPoint = new TransactionOutPoint(params, stakeTxOutput.getIndex(), blindVoteTx);
        // Input is not signed yet so we use new byte[]{}
        tx.addInput(new TransactionInput(params, tx, new byte[]{}, outPoint, stake));
        tx.addOutput(new TransactionOutput(params, tx, stake, getUnusedAddress()));
        // printTx(""getPreparedVoteRevealTx"", tx);
        return tx;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Lockup bond tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Transaction getPreparedLockupTx(Coin lockupAmount) throws AddressFormatException, InsufficientBsqException {
        daoKillSwitch.assertDaoIsNotDisabled();
        Transaction tx = new Transaction(params);
        checkArgument(Restrictions.isAboveDust(lockupAmount), ""The amount is too low (dust limit)."");
        tx.addOutput(new TransactionOutput(params, tx, lockupAmount, getUnusedAddress()));
        addInputsAndChangeOutputForTx(tx, lockupAmount, bsqCoinSelector);
        printTx(""prepareLockupTx"", tx);
        return tx;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Unlock bond tx
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Transaction getPreparedUnlockTx(TxOutput lockupTxOutput) throws AddressFormatException {
        daoKillSwitch.assertDaoIsNotDisabled();
        Transaction tx = new Transaction(params);
        // Unlocking means spending the full value of the locked txOutput to another txOutput with the same value
        Coin amountToUnlock = Coin.valueOf(lockupTxOutput.getValue());
        checkArgument(Restrictions.isAboveDust(amountToUnlock), ""The amount is too low (dust limit)."");
        Transaction lockupTx = getTransaction(lockupTxOutput.getTxId());
        checkNotNull(lockupTx, ""lockupTx must not be null"");
        TransactionOutPoint outPoint = new TransactionOutPoint(params, lockupTxOutput.getIndex(), lockupTx);
        // Input is not signed yet so we use new byte[]{}
        tx.addInput(new TransactionInput(params, tx, new byte[]{}, outPoint, amountToUnlock));
        tx.addOutput(new TransactionOutput(params, tx, amountToUnlock, getUnusedAddress()));
        printTx(""prepareUnlockTx"", tx);
        return tx;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Addresses
    ///////////////////////////////////////////////////////////////////////////////////////////

    private Address getChangeAddress() {
        return getUnusedAddress();
    }

    public Address getUnusedAddress() {
        return wallet.getIssuedReceiveAddresses().stream()
                .filter(address -> Script.ScriptType.P2WPKH.equals(address.getOutputScriptType()))
                .filter(this::isAddressUnused)
                .findAny()
                .orElse(wallet.freshReceiveAddress());
    }

    public String getUnusedBsqAddressAsString() {
        return ""B"" + getUnusedAddress().toString();
    }

    // For BSQ we do not check for dust attack utxos as they are 5.46 BSQ and a considerable value.
    // The default 546 sat dust limit is handled in the BitcoinJ side anyway.
    @Override
    protected boolean isDustAttackUtxo(TransactionOutput output) {
        return false;
    }
}",1,64 2000 777 587 2001 650 2002 693 2003 123 777 709 2004 123 865 2005 40 41 59 125 773 657 2006 2007 59 773 657 2008 2009 59 773 657 2010 2011 59 773 657 2012 2013 59 773 657 2014 2015 59 773 657 2016 60 2017 62 2018 61 744 2019 60 62 40 41 59 773 657 2020 60 2021 62 2022 61 744 2020 60 62 40 41 59 773 657 2016 60 2004 62 2023 61 744 2019 60 62 40 41 59 773 570 2024 59 64 2025 773 657 2026 2027 59 330 64 2025 773 2028 2029 61 2028 46 2030 59 64 2025 773 2028 2031 61 2028 46 2030 59 64 2025 773 2028 2032 61 2028 46 2030 59 64 2025 773 2028 2033 61 2028 46 2030 59 64 2025 773 2028 2034 61 2028 46 2030 59 64 2025 773 2028 2035 61 2028 46 2030 59 64 2025 773 2028 2036 61 2028 46 2030 59 64 2025 773 2028 2037 61 2028 46 2030 59 331 330 331 64 2038 777 2001 40 2039 2040 44 2008 2009 44 2010 2011 44 2012 2013 44 2014 2015 44 2041 2042 44 2043 2044 44 2006 2007 44 2026 2027 41 123 818 40 2040 44 2042 44 2044 41 59 823 46 2009 61 2009 59 823 46 2011 61 2011 59 823 46 2013 61 2013 59 823 46 2015 61 2015 59 823 46 2007 61 2007 59 823 46 2027 61 2027 59 2011 46 2045 40 2042 41 59 2040 46 2046 40 40 41 45 62 123 2047 61 2040 46 2048 40 41 59 688 40 2047 340 2049 41 123 2047 46 2050 40 2009 41 59 2051 40 41 59 125 2052 2053 61 2040 46 2054 40 41 59 688 40 2053 340 2049 41 123 2053 46 2055 40 2056 45 62 2057 46 2058 40 2056 46 2059 40 41 41 41 59 2057 46 2058 40 2053 46 2060 40 41 41 59 125 125 41 59 2013 46 2061 40 823 41 59 125 64 2062 775 865 2063 40 41 123 818 46 2063 40 41 59 2064 46 2065 40 40 2064 44 2066 44 2067 44 2068 41 45 62 2069 40 41 41 59 2064 46 2070 40 40 2064 44 2066 44 2067 44 2068 41 45 62 2069 40 41 41 59 2064 46 2071 40 2064 45 62 123 2072 46 2073 40 362 41 59 2069 40 41 59 2015 46 2074 40 41 59 125 41 59 2064 46 2075 40 40 2064 44 2066 41 45 62 123 330 330 330 688 40 2066 340 2076 307 2066 46 2077 40 41 340 2076 307 2066 46 2077 40 41 46 2078 40 41 329 1501 307 2013 46 2079 40 41 41 123 2069 40 41 59 125 2015 46 2080 40 2066 41 59 125 41 59 2064 46 2081 40 2082 45 62 2069 40 41 41 59 2064 46 2083 40 40 2064 44 2084 44 2085 41 45 62 2069 40 41 41 59 2064 46 2086 40 2064 45 62 2069 40 41 41 59 125 331 330 331 64 2062 777 865 2087 40 2088 2089 41 123 688 40 2090 40 41 41 123 2091 46 2092 40 2093 41 46 2094 40 2015 58 58 2095 41 59 2096 40 41 59 125 125 331 330 331 64 2062 2097 2098 40 570 2099 41 123 792 2100 46 2101 40 2102 44 2099 44 823 46 2103 44 2102 44 2102 44 2040 46 2104 40 41 41 43 362 43 362 43 2100 46 2105 40 41 59 125 331 330 331 773 865 2106 40 41 123 726 2107 61 2108 46 2109 40 41 59 2032 61 2028 46 2110 40 2111 40 2112 41 46 2113 40 41 46 2114 40 2115 45 62 2115 46 2116 40 41 46 2117 40 41 323 2118 41 46 2119 40 2115 45 62 123 330 330 330 726 2120 61 2115 46 2121 40 41 46 2113 40 41 46 2114 40 2122 45 62 2122 46 2123 40 2124 41 41 46 2114 40 2125 58 58 2126 41 46 2119 40 2122 45 62 2122 46 2127 40 41 46 2128 41 46 2129 40 41 59 330 726 2130 61 2115 46 2131 40 41 46 2113 40 41 46 2114 40 2132 45 62 123 2125 2133 61 2132 46 2134 40 41 59 688 40 2133 340 2135 41 123 2017 2136 61 2133 46 2137 40 41 59 330 688 40 2136 340 2135 305 41 123 2138 2139 61 744 2138 40 2136 46 2140 40 41 46 2141 40 41 44 2133 46 2142 40 41 41 59 792 40 2133 46 2123 40 2124 41 307 40 2013 46 2143 40 2139 41 309 2013 46 2144 40 2139 41 41 41 59 125 125 792 2112 59 125 41 46 2119 40 2132 45 62 2132 46 2127 40 41 340 2145 63 2132 46 2127 40 41 46 2128 58 1500 41 46 2129 40 41 59 792 2120 45 2130 59 125 41 46 2146 40 41 41 59 2147 60 2097 62 2148 61 2111 40 2112 41 46 2113 40 41 46 2114 40 2115 45 62 2115 46 2116 40 41 46 2117 40 41 323 2149 41 46 2150 40 2017 58 58 2151 41 46 2150 40 2152 58 58 2153 41 46 2154 40 2155 46 2156 40 41 41 59 2035 61 2028 46 2110 40 2013 46 2157 40 41 46 2113 40 41 46 2114 40 2158 45 62 2148 46 2159 40 2158 46 2151 40 41 41 41 46 2119 40 2160 58 58 2161 41 46 2146 40 41 41 59 2036 61 2028 46 2110 40 2013 46 2162 40 41 46 2113 40 41 46 2114 40 2158 45 62 2013 46 2163 40 2158 46 2164 40 41 41 41 46 2114 40 2158 45 62 33 2013 46 2165 40 2158 46 2151 40 41 41 41 46 2114 40 2158 45 62 2148 46 2159 40 2158 46 2151 40 41 41 41 46 2119 40 2160 58 58 2161 41 46 2146 40 41 41 59 2037 61 2028 46 2110 40 2013 46 2166 40 41 46 2114 40 2158 45 62 2148 46 2159 40 2158 46 2151 40 41 41 41 46 2114 40 2158 45 62 33 2013 46 2167 40 2158 46 2151 40 41 41 41 46 2119 40 2160 58 58 2161 41 46 2146 40 41 41 59 2031 61 2009 46 2168 40 2169 46 2170 44 2171 46 2172 40 41 41 46 2173 59 688 40 2031 46 2174 40 41 41 2031 61 2028 46 2030 59 2034 61 2015 46 2175 40 41 59 2029 61 2011 46 2168 40 2169 46 2170 44 2171 46 2172 40 41 41 46 2173 59 2033 61 2031 46 2176 40 2034 41 59 2022 46 2177 40 2178 45 62 2178 46 2179 40 2031 44 2029 44 2032 44 2034 44 2035 44 2036 44 2037 41 41 59 2180 46 2181 40 362 44 2108 46 2109 40 41 45 2107 41 59 125 777 865 2182 40 2021 2183 41 123 2022 46 2184 40 2183 41 59 125 777 865 2185 40 2021 2183 41 123 2022 46 2186 40 2183 41 59 125 777 865 2187 40 2004 2183 41 123 2023 46 2188 40 2183 41 59 125 777 865 2189 40 2004 2183 41 123 2023 46 2190 40 2183 41 59 125 777 2016 60 2191 62 2192 40 41 123 792 744 2019 60 62 40 2009 46 2193 40 2194 46 2195 44 2196 46 2197 40 41 41 46 2198 41 59 125 777 2016 60 2191 62 2199 40 41 123 792 744 2019 60 62 40 2011 46 2200 40 2201 46 2202 44 2203 46 2204 40 41 41 46 2205 41 59 125 331 330 331 777 2016 60 2017 62 2206 40 41 123 792 744 2019 60 62 40 2018 41 59 125 777 2207 60 2017 62 2208 40 41 123 792 2018 46 2209 40 41 46 2210 40 2211 45 62 2211 46 2212 40 41 46 2213 40 41 323 2214 46 2215 46 2216 41 59 125 773 865 2217 40 41 123 688 40 2013 46 2218 40 41 41 123 330 330 330 330 688 40 33 2024 41 123 2024 61 2219 59 2220 46 2221 40 40 41 45 62 123 2018 46 2222 40 41 59 2018 46 2223 40 2224 40 2225 41 41 59 2023 46 2226 40 2004 58 58 2227 41 59 2106 40 41 59 2024 61 2225 59 125 44 1503 44 2228 46 2229 41 59 125 125 125 773 2230 60 2017 62 2231 40 41 123 792 2232 40 2233 41 46 2234 40 41 46 2235 40 2236 45 62 2236 46 2237 40 41 46 2238 40 41 323 2239 309 2013 46 2240 40 2236 46 2241 40 41 46 2242 40 41 41 41 46 2243 40 2244 46 2245 40 41 41 59 125 777 2230 60 2017 62 2246 40 41 123 2230 60 2017 62 2247 61 2231 40 41 59 2230 60 2017 62 2248 61 744 2249 60 62 40 2250 40 2251 41 41 59 2252 40 2248 46 2253 40 41 325 2247 46 2253 40 41 44 362 41 59 688 40 2248 46 2253 40 41 323 2247 46 2253 40 41 41 123 330 792 744 2249 60 62 40 41 59 125 630 123 2254 60 2097 44 2017 62 2255 61 2248 46 2256 40 41 46 2257 40 2258 46 2259 40 2260 45 62 2260 46 2261 40 41 46 2262 40 41 44 2263 46 2264 40 41 41 41 59 2230 60 2097 62 2265 61 2248 46 2256 40 41 46 2255 40 2017 58 58 2261 41 46 2255 40 2266 58 58 2262 41 46 2257 40 2258 46 2267 40 41 41 59 2230 60 2097 62 2268 61 2247 46 2256 40 41 46 2255 40 2017 58 58 2261 41 46 2255 40 2266 58 58 2262 41 46 2257 40 2258 46 2267 40 41 41 59 2265 46 2256 40 41 46 2269 40 2268 58 58 2270 41 46 2271 40 2255 58 58 2272 41 59 792 744 2249 60 62 40 2255 46 2273 40 41 41 59 125 125 64 2062 777 2028 2274 40 2017 2275 41 826 2276 123 2028 2277 61 2028 46 2030 59 330 664 40 704 2278 61 1500 59 2278 60 2275 46 2279 40 41 46 2280 40 41 59 2278 349 41 123 2281 2282 61 2275 46 2279 40 41 46 2283 40 2278 41 59 330 2191 2284 61 2282 46 2285 40 41 59 688 40 2284 340 2286 41 123 330 657 2017 2287 61 2284 46 2288 40 41 59 657 570 2289 61 2287 340 2286 307 2287 46 2290 40 41 46 2291 40 41 323 2292 46 2293 46 2294 59 688 40 2284 46 2295 40 2296 41 41 123 688 40 2289 41 123 330 330 2297 60 2298 62 2299 61 2013 46 2300 40 2287 46 2301 40 41 46 2302 40 41 41 59 688 40 2299 46 2303 40 41 41 123 2304 2305 61 2299 46 2283 40 41 46 2306 40 41 46 2283 40 2284 46 2307 40 41 41 59 688 40 2013 46 2308 40 2305 41 41 123 330 688 40 2305 46 2309 40 41 340 2284 46 2309 40 41 46 2310 41 2311 46 2312 40 362 43 362 44 2305 46 2309 40 41 44 2284 46 2309 40 41 46 2310 44 2299 46 2283 40 41 46 2313 40 41 41 59 330 2277 61 2277 46 2314 40 2028 46 2315 40 2305 46 2309 40 41 41 41 59 125 125 125 305 125 125 125 792 2277 59 125 64 2062 777 2028 2316 40 2017 2275 41 826 2276 123 2028 2317 61 2028 46 2030 59 657 2097 2318 61 2275 46 2319 40 41 46 2320 40 41 59 330 2321 60 2322 62 2323 61 2013 46 2324 40 2318 41 59 330 664 40 704 2325 61 1500 59 2325 60 2275 46 2326 40 41 46 2327 40 41 59 2325 349 41 123 2191 2328 61 2275 46 2326 40 41 46 2329 40 2325 41 59 657 570 2330 61 2328 46 2331 40 41 340 2332 307 2328 46 2331 40 41 46 2333 40 41 46 2334 40 41 323 2335 46 2336 46 2337 59 688 40 2328 46 2338 40 2339 41 41 123 688 40 2330 41 123 688 40 2323 46 2340 40 41 41 123 330 2341 2342 61 2323 46 2329 40 41 46 2343 40 41 46 2329 40 2325 41 59 688 40 2013 46 2344 40 2342 41 41 123 330 688 40 2342 46 2345 40 41 340 2328 46 2345 40 41 46 2346 41 123 2347 46 2348 40 362 43 362 44 2342 46 2345 40 41 44 2328 46 2345 40 41 46 2346 44 2318 41 59 125 330 2317 61 2317 46 2349 40 2028 46 2350 40 2342 46 2345 40 41 41 41 59 125 125 125 305 125 125 792 2317 59 125 777 2351 60 2017 62 2352 40 2097 2353 41 123 792 2018 46 2354 40 41 46 2355 40 2356 45 62 2356 46 2357 40 41 46 2358 40 41 46 2359 40 2353 41 41 46 2360 40 41 59 125 331 330 331 777 2017 2361 40 2017 2362 41 826 2363 44 2364 123 2002 46 2365 40 2366 44 2367 44 2362 41 59 2002 46 2368 40 2362 41 59 792 2362 59 125 331 330 331 777 865 2369 40 2017 2362 44 2370 2371 41 123 2372 46 2369 40 2362 41 59 330 2015 46 2373 40 2362 44 2371 44 2372 41 59 125 331 330 331 777 2017 2374 40 2097 2375 44 2028 2376 41 826 2377 44 2378 44 2363 44 2364 44 2379 123 792 2380 40 2375 44 2376 44 2009 41 59 125 777 2017 2374 40 2097 2375 44 2028 2376 44 64 2381 2230 60 2191 62 2382 41 826 2377 44 2378 44 2363 44 2364 44 2379 123 688 40 2382 340 2383 41 123 2009 46 2384 40 2382 41 59 125 792 2385 40 2375 44 2376 44 2009 41 59 125 331 330 331 777 2017 2386 40 2097 2375 44 2028 2376 41 826 2377 44 2378 44 2363 44 2364 44 2379 123 792 2387 40 2375 44 2376 44 2011 41 59 125 777 2017 2386 40 2097 2375 44 2028 2376 44 64 2381 2230 60 2191 62 2382 41 826 2377 44 2378 44 2363 44 2364 44 2379 123 688 40 2382 340 2388 41 123 2011 46 2389 40 2382 41 59 125 792 2390 40 2375 44 2376 44 2011 41 59 125 773 2017 2391 40 2097 2375 44 2028 2376 44 2392 2393 41 826 2377 44 2378 44 2363 44 2364 44 2379 123 2007 46 2394 40 41 59 2017 2362 61 744 2017 40 2395 41 59 2396 40 2397 46 2398 40 2376 41 44 362 41 59 2362 46 2399 40 2376 44 2400 46 2401 40 2395 44 2375 41 41 59 830 123 2402 2403 61 2393 46 2404 40 2376 44 2405 46 2406 40 41 41 59 2402 2407 61 2393 46 2408 40 2376 44 2403 41 59 688 40 2397 46 2398 40 2407 41 41 123 2362 46 2399 40 2407 44 2409 40 41 41 59 125 630 688 40 33 2407 46 2410 40 41 41 123 2097 2411 61 362 43 2407 46 2412 47 1503 43 362 59 2413 46 2414 40 2411 41 59 825 744 2379 40 2411 44 2407 41 59 125 2415 2416 61 2415 46 2417 40 2362 41 59 2416 46 2418 61 2028 46 2030 59 2416 46 2419 61 2028 46 2030 59 2416 46 2420 61 2421 59 2416 46 2422 61 2422 59 2416 46 2423 61 2421 59 2416 46 2424 61 2421 59 2416 46 2425 61 2426 40 41 59 2416 46 2393 61 2393 59 2405 46 2427 40 2416 41 59 2428 40 2405 41 59 2429 40 2362 41 59 792 2362 59 125 580 40 2430 2431 41 123 2432 46 2433 40 362 44 2362 46 2434 40 41 41 59 2432 46 2433 40 2431 46 2434 40 41 41 59 825 744 2378 40 2431 46 2435 41 59 125 125 331 330 331 777 2017 2436 40 2028 2437 41 826 2378 123 2007 46 2438 40 41 59 2017 2362 61 744 2017 40 2439 41 59 2440 40 2362 44 2437 44 2009 41 59 792 2362 59 125 330 330 777 2017 2441 40 2028 2437 41 826 2378 123 792 2442 40 2437 41 59 125 777 2017 2443 40 2028 2437 41 826 2378 123 792 2444 40 2437 41 59 125 777 2017 2445 40 2028 2437 41 826 2378 123 792 2446 40 2437 41 59 125 777 2017 2447 40 2028 2437 41 826 2378 123 792 2448 40 2437 41 59 125 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 773 2017 2449 40 2028 2437 41 826 2378 123 2007 46 2450 40 41 59 2017 2362 61 744 2017 40 2451 41 59 330 2452 2453 61 2009 46 2454 40 2437 44 2455 46 2456 40 41 41 59 830 123 2028 2457 61 2009 46 2458 40 2437 44 2453 41 59 688 40 2457 46 2459 40 41 309 2460 46 2461 40 2457 41 41 123 330 330 330 2028 2462 61 2028 46 2463 40 2042 46 2464 40 41 41 59 2028 2465 61 2437 46 2466 40 2462 41 59 2453 61 2009 46 2454 40 2465 44 2455 46 2456 40 41 41 59 2457 61 2009 46 2458 40 2437 44 2453 41 59 2467 46 2468 40 362 44 2457 41 59 2097 2469 61 362 43 2453 46 2470 46 2471 47 1503 43 362 43 362 43 2437 46 2471 47 1503 43 362 43 362 43 40 2437 46 2471 43 2462 46 2471 41 47 1503 43 362 59 2472 40 2453 46 2470 46 2473 40 2437 41 62 1500 44 362 43 2462 46 2471 47 1503 43 362 43 2469 41 59 2472 40 33 2460 46 2461 40 2457 41 44 362 43 2457 46 2471 47 1503 43 362 43 362 43 2462 46 2471 47 1503 43 362 43 2469 41 59 125 2453 46 2474 46 2475 40 2362 58 58 2476 41 59 2362 46 2477 40 2457 44 2478 40 41 41 59 792 2362 59 125 580 40 2479 2480 41 123 2481 46 2482 40 362 44 2453 46 2483 41 59 825 744 2378 40 2480 46 2484 41 59 125 125 773 865 2485 40 2017 2362 44 2028 2437 44 2008 2009 41 826 2378 123 2028 2486 59 330 688 40 2487 46 2488 40 2437 41 41 123 2486 61 2437 46 2489 40 2487 46 2490 40 41 41 59 125 630 123 2486 61 2437 59 125 2491 2492 61 2009 46 2493 40 2486 44 2494 46 2495 40 41 41 59 2492 46 2496 46 2497 40 2362 58 58 2498 41 59 830 123 2028 2499 61 2009 46 2500 40 2437 44 2492 41 59 330 688 40 2499 46 2501 40 41 41 123 2502 40 2487 46 2503 40 2499 41 44 362 43 2499 46 2504 47 1503 43 362 43 2487 46 2505 40 41 46 2504 47 1503 43 362 43 2487 46 2505 40 41 46 2506 40 2437 41 46 2504 47 1503 43 362 41 59 2362 46 2507 40 2499 44 2508 40 41 41 59 125 125 580 40 2509 2510 41 123 2511 46 2512 40 2362 46 2513 40 41 41 59 825 744 2378 40 2510 46 2514 41 59 125 125 331 330 331 777 2515 60 2016 60 2516 62 44 2028 62 2517 40 2028 2518 41 826 2378 123 2007 46 2519 40 41 59 330 570 2520 61 2009 46 2521 40 41 59 2009 46 2522 40 2523 41 59 2524 2525 61 2009 46 2526 40 2518 44 2527 46 2528 40 41 41 59 2028 2529 59 830 123 2529 61 2009 46 2530 40 2518 44 2525 41 59 125 580 40 2531 2532 41 123 825 744 2378 40 2532 46 2533 41 59 125 658 123 2009 46 2522 40 2520 41 59 125 2017 2534 61 744 2017 40 2535 41 59 2525 46 2536 46 2537 40 2534 58 58 2538 41 59 2016 60 2516 62 2539 61 2534 46 2540 40 41 46 2541 40 41 46 2542 40 2516 58 58 744 41 46 2543 40 2544 46 2545 40 41 41 59 792 744 2515 60 62 40 2539 44 2529 41 59 125 777 865 2546 40 2017 2275 44 2016 60 2547 62 2548 41 826 2364 123 664 40 2547 2549 58 2548 41 123 2191 2550 61 2549 46 2551 40 41 59 2552 40 2550 44 362 41 59 2553 40 2550 46 2554 40 2555 41 44 362 41 59 2556 40 2555 44 2557 44 2275 44 2549 44 2549 46 2558 40 41 41 59 2559 40 2275 44 2549 44 2549 46 2558 40 41 41 59 125 125 331 330 331 330 330 777 2017 2560 40 2028 2437 44 2028 2561 41 826 2378 123 2007 46 2562 40 41 59 2017 2362 61 744 2017 40 2563 41 59 2362 46 2564 40 744 2191 40 2563 44 2362 44 2561 44 2565 40 41 41 41 59 2485 40 2362 44 2437 46 2566 40 2561 41 44 2009 41 59 330 792 2362 59 125 331 330 331 777 2017 2567 40 2568 2569 41 123 2007 46 2570 40 41 59 2017 2362 61 744 2017 40 2571 41 59 657 2028 2561 61 2028 46 2572 40 2569 46 2573 40 41 41 59 2017 2574 61 2575 40 2569 46 2576 40 41 41 59 2577 40 2574 44 362 41 59 2578 2579 61 744 2578 40 2571 44 2569 46 2580 40 41 44 2574 41 59 330 2362 46 2581 40 744 2547 40 2571 44 2362 44 744 574 91 93 123 125 44 2579 44 2561 41 41 59 2362 46 2582 40 744 2191 40 2571 44 2362 44 2561 44 2583 40 41 41 41 59 330 792 2362 59 125 331 330 331 777 2017 2584 40 2028 2585 41 826 2377 44 2378 123 2007 46 2586 40 41 59 2017 2362 61 744 2017 40 2587 41 59 2588 40 2589 46 2590 40 2585 41 44 362 41 59 2362 46 2591 40 744 2191 40 2587 44 2362 44 2585 44 2592 40 41 41 41 59 2485 40 2362 44 2585 44 2009 41 59 2593 40 362 44 2362 41 59 792 2362 59 125 331 330 331 777 2017 2594 40 2568 2595 41 826 2377 123 2007 46 2596 40 41 59 2017 2362 61 744 2017 40 2597 41 59 330 2028 2598 61 2028 46 2599 40 2595 46 2600 40 41 41 59 2601 40 2602 46 2603 40 2598 41 44 362 41 59 2017 2604 61 2605 40 2595 46 2606 40 41 41 59 2607 40 2604 44 362 41 59 2608 2609 61 744 2608 40 2597 44 2595 46 2610 40 41 44 2604 41 59 330 2362 46 2611 40 744 2547 40 2597 44 2362 44 744 574 91 93 123 125 44 2609 44 2598 41 41 59 2362 46 2612 40 744 2191 40 2597 44 2362 44 2598 44 2613 40 41 41 41 59 2614 40 362 44 2362 41 59 792 2362 59 125 331 330 331 773 2615 2616 40 41 123 792 2617 40 41 59 125 777 2615 2618 40 41 123 792 2619 46 2620 40 41 46 2621 40 41 46 2622 40 2623 45 62 2624 46 2625 46 2626 46 2627 40 2623 46 2628 40 41 41 41 46 2622 40 823 58 58 2629 41 46 2630 40 41 46 2631 40 2619 46 2632 40 41 41 59 125 777 2097 2633 40 41 123 792 362 43 2618 40 41 46 2634 40 41 59 125 330 330 64 2062 775 570 2635 40 2191 2636 41 123 792 2637 59 125 125 ,"{'AvgLine': 13, 'CountLine': 784, 'CountStmt': 327, 'MaxNesting': 7, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 257, 'MaxEssential': 1, 'SumEssential': 67, 'AvgCyclomatic': 1, 'CountLineCode': 544, 'CountStmtDecl': 124, 'MaxCyclomatic': 8, 'SumCyclomatic': 100, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 118, 'CountSemicolon': 246, 'CountDeclMethod': 43, 'CountLineCodeExe': 366, 'CountLineComment': 126, 'CountClassCoupled': 46, 'CountClassDerived': 0, 'CountLineCodeDecl': 178, 'CountDeclMethodAll': 119, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.23', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 107, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 33, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 100, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 1, 'CountDeclMethodPrivate': 7, 'CountDeclInstanceMethod': 43, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 46, 'CountDeclInstanceVariable': 18, 'PercentLackOfCohesionModified': 91}"
3715,Java,"@Slf4j
class BsqSwapTakeOfferViewModel extends BsqSwapOfferViewModel<BsqSwapTakeOfferDataModel> {
    private final BtcValidator btcValidator;
    private final P2PService p2PService;

    String amountRange;
    private boolean takeOfferRequested;
    BsqSwapTrade trade;
    Offer offer;
    String price;

    final StringProperty amount = new SimpleStringProperty();
    final StringProperty volume = new SimpleStringProperty();
    final StringProperty errorMessage = new SimpleStringProperty();
    final StringProperty offerWarning = new SimpleStringProperty();

    final BooleanProperty isOfferAvailable = new SimpleBooleanProperty();
    final BooleanProperty isTakeOfferButtonDisabled = new SimpleBooleanProperty(true);
    final BooleanProperty cancelButtonDisabled = new SimpleBooleanProperty();
    final BooleanProperty isNextButtonDisabled = new SimpleBooleanProperty(true);
    final BooleanProperty showWarningInvalidBtcDecimalPlaces = new SimpleBooleanProperty();
    final BooleanProperty isTradeComplete = new SimpleBooleanProperty();
    final BooleanProperty takeOfferCompleted = new SimpleBooleanProperty();

    final ObjectProperty<InputValidator.ValidationResult> amountValidationResult = new SimpleObjectProperty<>();

    private ChangeListener<String> amountListener;
    private ChangeListener<Coin> amountAsCoinListener;
    private ChangeListener<BsqSwapTrade.State> tradeStateListener;
    private ChangeListener<String> tradeErrorListener;
    private ChangeListener<Offer.State> offerStateListener;
    private ChangeListener<String> offerErrorListener;
    private ConnectionListener connectionListener;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    BsqSwapTakeOfferViewModel(BsqSwapTakeOfferDataModel dataModel,
                              OfferUtil offerUtil,
                              BtcValidator btcValidator,
                              P2PService p2PService,
                              AccountAgeWitnessService accountAgeWitnessService,
                              Navigation navigation,
                              @Named(FormattingUtils.BTC_FORMATTER_KEY) CoinFormatter btcFormatter,
                              BsqFormatter bsqFormatter) {
        super(dataModel, btcFormatter, bsqFormatter, accountAgeWitnessService);
        this.btcValidator = btcValidator;
        this.p2PService = p2PService;

        createListeners();
    }

    @Override
    protected void activate() {
        addBindings();
        addListeners();

        amount.set(btcFormatter.formatCoin(dataModel.getBtcAmount().get()));
        isTradeComplete.set(false);

        // when getting back to an open screen we want to re-check again
        isOfferAvailable.set(false);
        checkNotNull(offer, ""offer must not be null"");

        offer.stateProperty().addListener(offerStateListener);
        applyOfferState(offer.stateProperty().get());

        updateButtonDisableState();
    }

    @Override
    protected void deactivate() {
        removeBindings();
        removeListeners();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    // called before doActivate
    void initWithData(Offer offer) {
        dataModel.initWithData(offer);
        this.offer = offer;

        amountRange = btcFormatter.formatCoin(offer.getMinAmount()) + "" - "" + btcFormatter.formatCoin(offer.getAmount());
        price = FormattingUtils.formatPrice(dataModel.getPrice().get());

        offerErrorListener = (observable, oldValue, newValue) -> {
            if (newValue != null)
                errorMessage.set(newValue);
        };
        offer.errorMessageProperty().addListener(offerErrorListener);
        errorMessage.set(offer.getErrorMessage());

        btcValidator.setMaxValue(offer.getAmount());
        btcValidator.setMaxTradeLimit(Coin.valueOf(Math.min(dataModel.getMaxTradeLimit(), offer.getAmount().value)));
        btcValidator.setMinValue(offer.getMinAmount());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // UI handler
    ///////////////////////////////////////////////////////////////////////////////////////////

    void onTakeOffer(Runnable resultHandler,
                     ErrorMessageHandler warningHandler,
                     ErrorMessageHandler errorHandler) {
        takeOfferRequested = true;
        isTradeComplete.set(false);
        dataModel.onTakeOffer(trade -> {
                    this.trade = trade;
                    trade.stateProperty().addListener(tradeStateListener);
                    onTradeState(trade.getState());
                    trade.errorMessageProperty().addListener(tradeErrorListener);
                    applyTradeErrorMessage(trade.getErrorMessage());
                    takeOfferCompleted.set(true);
                    resultHandler.run();
                },
                warningHandler,
                errorHandler);

        updateButtonDisableState();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Focus handler
    ///////////////////////////////////////////////////////////////////////////////////////////

    // On focus out we do validation and apply the data to the model
    void onFocusOutAmountTextField(boolean oldValue, boolean newValue, String userInput) {
        if (oldValue && !newValue) {
            InputValidator.ValidationResult result = isBtcInputValid(amount.get());
            amountValidationResult.set(result);
            if (result.isValid) {
                showWarningInvalidBtcDecimalPlaces.set(!DisplayUtils.hasBtcValidDecimals(userInput, btcFormatter));
                // only allow max 4 decimal places for btc values
                setAmountToModel();
                // reformat input
                amount.set(btcFormatter.formatCoin(dataModel.getBtcAmount().get()));

                calculateVolume();

                if (!dataModel.isMinAmountLessOrEqualAmount())
                    amountValidationResult.set(new InputValidator.ValidationResult(false,
                            Res.get(""takeOffer.validation.amountSmallerThanMinAmount"")));

                if (dataModel.isAmountLargerThanOfferAmount())
                    amountValidationResult.set(new InputValidator.ValidationResult(false,
                            Res.get(""takeOffer.validation.amountLargerThanOfferAmount"")));
            } else if (btcValidator.getMaxTradeLimit() != null && btcValidator.getMaxTradeLimit().value == OfferRestrictions.TOLERATED_SMALL_TRADE_AMOUNT.value) {
                if (dataModel.isBuyOffer()) {
                    new Popup().information(Res.get(""popup.warning.tradeLimitDueAccountAgeRestriction.seller"",
                            btcFormatter.formatCoinWithCode(OfferRestrictions.TOLERATED_SMALL_TRADE_AMOUNT),
                            Res.get(""offerbook.warning.newVersionAnnouncement"")))
                            .width(900)
                            .show();
                } else {
                    new Popup().information(Res.get(""popup.warning.tradeLimitDueAccountAgeRestriction.buyer"",
                            btcFormatter.formatCoinWithCode(OfferRestrictions.TOLERATED_SMALL_TRADE_AMOUNT),
                            Res.get(""offerbook.warning.newVersionAnnouncement"")))
                            .width(900)
                            .show();
                }
            }
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Bindings, listeners
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void createListeners() {
        amountListener = (ov, oldValue, newValue) -> {
            if (isBtcInputValid(newValue).isValid) {
                setAmountToModel();
                calculateVolume();
                dataModel.calculateInputAndPayout();
            }
            updateButtonDisableState();
        };
        amountAsCoinListener = (ov, oldValue, newValue) -> {
            amount.set(btcFormatter.formatCoin(newValue));
        };

        tradeStateListener = (ov, oldValue, newValue) -> onTradeState(newValue);
        tradeErrorListener = (ov, oldValue, newValue) -> applyTradeErrorMessage(newValue);
        offerStateListener = (ov, oldValue, newValue) -> applyOfferState(newValue);

        connectionListener = new ConnectionListener() {
            @Override
            public void onDisconnect(CloseConnectionReason closeConnectionReason, Connection connection) {
                if (connection.getPeersNodeAddressOptional().isPresent() &&
                        connection.getPeersNodeAddressOptional().get().equals(offer.getMakerNodeAddress())) {
                    offerWarning.set(Res.get(""takeOffer.warning.connectionToPeerLost""));
                }
            }

            @Override
            public void onConnection(Connection connection) {
            }

            @Override
            public void onError(Throwable throwable) {
            }
        };
    }

    @Override
    protected void addListeners() {
        // Bidirectional bindings are used for all input fields: amount, price, volume and minAmount
        // We do volume/amount calculation during input, so user has immediate feedback
        amount.addListener(amountListener);

        // Binding with Bindings.createObjectBinding does not work because of bi-directional binding
        dataModel.getBtcAmount().addListener(amountAsCoinListener);

        p2PService.getNetworkNode().addConnectionListener(connectionListener);
    }

    @Override
    protected void removeListeners() {
        amount.removeListener(amountListener);

        // Binding with Bindings.createObjectBinding does not work because of bi-directional binding
        dataModel.getBtcAmount().removeListener(amountAsCoinListener);

        if (offer != null) {
            offer.stateProperty().removeListener(offerStateListener);
            offer.errorMessageProperty().removeListener(offerErrorListener);
        }

        if (trade != null) {
            trade.stateProperty().removeListener(tradeStateListener);
            trade.errorMessageProperty().removeListener(tradeErrorListener);
        }
        p2PService.getNetworkNode().removeConnectionListener(connectionListener);
    }

    @Override
    protected void addBindings() {
        super.addBindings();

        volume.bind(createStringBinding(() -> VolumeUtil.formatVolume(dataModel.getVolume().get()), dataModel.getVolume()));
    }

    @Override
    protected void removeBindings() {
        super.removeBindings();

        volume.unbind();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // States
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void applyOfferState(Offer.State state) {
        offerWarning.set(null);

        // We have 2 situations handled here:
        // 1. when clicking take offer in the offerbook screen, we do the availability check
        // 2. Before actually taking the offer in the take offer screen, we check again the availability as some time might have passed in the meantime
        // So we use the takeOfferRequested flag to display different network_messages depending on the context.
        switch (state) {
            case UNKNOWN:
                break;
            case OFFER_FEE_PAID:
                // irrelevant for taker
                break;
            case AVAILABLE:
                isOfferAvailable.set(true);
                updateButtonDisableState();
                break;
            case NOT_AVAILABLE:
                if (takeOfferRequested)
                    offerWarning.set(Res.get(""takeOffer.failed.offerNotAvailable""));
                else
                    offerWarning.set(Res.get(""takeOffer.failed.offerTaken""));
                break;
            case REMOVED:
                if (!takeOfferRequested)
                    offerWarning.set(Res.get(""takeOffer.failed.offerRemoved""));

                break;
            case MAKER_OFFLINE:
                if (takeOfferRequested)
                    offerWarning.set(Res.get(""takeOffer.failed.offererNotOnline""));
                else
                    offerWarning.set(Res.get(""takeOffer.failed.offererOffline""));
                break;
            default:
                log.error(""Unhandled offer state: "" + state);
                break;
        }

        updateButtonDisableState();
    }

    void resetOfferWarning() {
        offerWarning.set(null);
    }

    private void applyTradeErrorMessage(@Nullable String errorMessage) {
        this.errorMessage.set(errorMessage);
        if (errorMessage == null) {
            return;
        }
        log.warn(errorMessage);
        trade.setState(BsqSwapTrade.State.FAILED);
    }

    private void onTradeState(BsqSwapTrade.State state) {
        switch (state) {
            case PREPARATION:
                break;
            case COMPLETED:
                isTradeComplete.set(trade.isCompleted());
                break;
            case FAILED:
                break;
        }
    }

    private void updateButtonDisableState() {
        boolean inputDataValid = isBtcInputValid(amount.get()).isValid
                && dataModel.isMinAmountLessOrEqualAmount()
                && !dataModel.isAmountLargerThanOfferAmount()
                && isOfferAvailable.get();
        isNextButtonDisabled.set(!inputDataValid);
        cancelButtonDisabled.set(takeOfferRequested);
        isTakeOfferButtonDisabled.set(takeOfferRequested || !inputDataValid);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Setters
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void calculateVolume() {
        setAmountToModel();
    }

    private void setAmountToModel() {
        if (amount.get() != null && !amount.get().isEmpty()) {
            Coin amount = DisplayUtils.parseToCoinWith4Decimals(this.amount.get(), btcFormatter);
            dataModel.applyAmount(amount);
        }
    }

    public void resetErrorMessage() {
        offer.setErrorMessage(null);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    private InputValidator.ValidationResult isBtcInputValid(String input) {
        return btcValidator.validate(input);
    }

    public boolean isRange() {
        return dataModel.getOffer().isRange();
    }

    public String getTradeFee() {
        return bsqFormatter.formatCoinWithCode(dataModel.getTradeFee());
    }
}",1,64 2000 587 2001 650 2002 60 2003 62 123 773 657 2004 2005 59 773 657 2006 2007 59 2008 2009 59 773 570 2010 59 2011 2012 59 2013 2014 59 2008 2015 59 657 2016 2017 61 744 2018 40 41 59 657 2016 2019 61 744 2018 40 41 59 657 2016 2020 61 744 2018 40 41 59 657 2016 2021 61 744 2018 40 41 59 657 2022 2023 61 744 2024 40 41 59 657 2022 2025 61 744 2024 40 2026 41 59 657 2022 2027 61 744 2024 40 41 59 657 2022 2028 61 744 2024 40 2026 41 59 657 2022 2029 61 744 2024 40 41 59 657 2022 2030 61 744 2024 40 41 59 657 2022 2031 61 744 2024 40 41 59 657 2032 60 2033 46 2034 62 2035 61 744 2036 60 62 40 41 59 773 2037 60 2008 62 2038 59 773 2037 60 2039 62 2040 59 773 2037 60 2011 46 2041 62 2042 59 773 2037 60 2008 62 2043 59 773 2037 60 2013 46 2041 62 2044 59 773 2037 60 2008 62 2045 59 773 2046 2047 59 331 330 331 64 2048 2001 40 2003 2049 44 2050 2051 44 2004 2005 44 2006 2007 44 2052 2053 44 2054 2055 44 64 2056 40 2057 46 2058 41 2059 2060 44 2061 2062 41 123 818 40 2049 44 2060 44 2062 44 2053 41 59 823 46 2005 61 2005 59 823 46 2007 61 2007 59 2063 40 41 59 125 64 2064 775 865 2065 40 41 123 2066 40 41 59 2067 40 41 59 2017 46 2068 40 2060 46 2069 40 2049 46 2070 40 41 46 2071 40 41 41 41 59 2030 46 2068 40 2072 41 59 330 2023 46 2068 40 2072 41 59 2073 40 2014 44 362 41 59 2014 46 2074 40 41 46 2075 40 2044 41 59 2076 40 2014 46 2074 40 41 46 2071 40 41 41 59 2077 40 41 59 125 64 2064 775 865 2078 40 41 123 2079 40 41 59 2080 40 41 59 125 331 330 331 330 865 2081 40 2013 2014 41 123 2049 46 2081 40 2014 41 59 823 46 2014 61 2014 59 2009 61 2060 46 2082 40 2014 46 2083 40 41 41 43 362 43 2060 46 2082 40 2014 46 2084 40 41 41 59 2015 61 2057 46 2085 40 2049 46 2086 40 41 46 2087 40 41 41 59 2045 61 40 2088 44 2089 44 2090 41 45 62 123 688 40 2090 340 2091 41 2020 46 2092 40 2090 41 59 125 59 2014 46 2093 40 41 46 2094 40 2045 41 59 2020 46 2095 40 2014 46 2096 40 41 41 59 2005 46 2097 40 2014 46 2084 40 41 41 59 2005 46 2098 40 2039 46 2099 40 2100 46 2101 40 2049 46 2102 40 41 44 2014 46 2084 40 41 46 2103 41 41 41 59 2005 46 2104 40 2014 46 2083 40 41 41 59 125 331 330 331 865 2105 40 2106 2107 44 2108 2109 44 2108 2110 41 123 2010 61 2026 59 2030 46 2111 40 2112 41 59 2049 46 2105 40 2012 45 62 123 823 46 2012 61 2012 59 2012 46 2113 40 41 46 2114 40 2042 41 59 2115 40 2012 46 2116 40 41 41 59 2012 46 2117 40 41 46 2114 40 2043 41 59 2118 40 2012 46 2119 40 41 41 59 2031 46 2111 40 2026 41 59 2107 46 2120 40 41 59 125 44 2109 44 2110 41 59 2121 40 41 59 125 331 330 331 330 865 2122 40 570 2123 44 570 2124 44 2008 2125 41 123 688 40 2123 307 33 2124 41 123 2033 46 2034 2126 61 2127 40 2017 46 2128 40 41 41 59 2035 46 2129 40 2126 41 59 688 40 2126 46 2130 41 123 2029 46 2129 40 33 2131 46 2132 40 2125 44 2060 41 41 59 330 2133 40 41 59 330 2017 46 2129 40 2060 46 2134 40 2049 46 2135 40 41 46 2128 40 41 41 41 59 2136 40 41 59 688 40 33 2049 46 2137 40 41 41 2035 46 2129 40 744 2033 46 2034 40 2138 44 2139 46 2128 40 362 41 41 41 59 688 40 2049 46 2140 40 41 41 2035 46 2129 40 744 2033 46 2034 40 2138 44 2139 46 2128 40 362 41 41 41 59 125 630 688 40 2005 46 2141 40 41 340 2142 307 2005 46 2141 40 41 46 2143 323 2144 46 2145 46 2143 41 123 688 40 2049 46 2146 40 41 41 123 744 2147 40 41 46 2148 40 2149 46 2128 40 362 44 2060 46 2150 40 2144 46 2145 41 44 2149 46 2128 40 362 41 41 41 46 2151 40 1504 41 46 2152 40 41 59 125 630 123 744 2153 40 41 46 2154 40 2155 46 2128 40 362 44 2060 46 2156 40 2144 46 2145 41 44 2155 46 2128 40 362 41 41 41 46 2157 40 1504 41 46 2158 40 41 59 125 125 125 125 331 330 331 64 2064 775 865 2159 40 41 123 2038 61 40 2160 44 2123 44 2124 41 45 62 123 688 40 2161 40 2124 41 46 2162 41 123 2163 40 41 59 2164 40 41 59 2049 46 2165 40 41 59 125 2166 40 41 59 125 59 2040 61 40 2160 44 2123 44 2124 41 45 62 123 2017 46 2167 40 2060 46 2168 40 2124 41 41 59 125 59 2042 61 40 2160 44 2123 44 2124 41 45 62 2169 40 2124 41 59 2043 61 40 2160 44 2123 44 2124 41 45 62 2170 40 2124 41 59 2044 61 40 2160 44 2123 44 2124 41 45 62 2171 40 2124 41 59 2047 61 744 2046 40 41 123 64 2064 777 865 2172 40 2173 2174 44 2175 2176 41 123 688 40 2176 46 2177 40 41 46 2178 40 41 307 2176 46 2177 40 41 46 2179 40 41 46 2180 40 2014 46 2181 40 41 41 41 123 2021 46 2182 40 2183 46 2179 40 362 41 41 59 125 125 64 2064 777 865 2184 40 2175 2176 41 123 125 64 2064 777 865 2185 40 2186 2187 41 123 125 125 59 125 64 2064 775 865 2188 40 41 123 330 330 2017 46 2189 40 2038 41 59 330 2049 46 2190 40 41 46 2189 40 2040 41 59 2007 46 2191 40 41 46 2192 40 2047 41 59 125 64 2064 775 865 2193 40 41 123 2017 46 2194 40 2038 41 59 330 2049 46 2195 40 41 46 2194 40 2040 41 59 688 40 2014 340 2196 41 123 2014 46 2197 40 41 46 2194 40 2044 41 59 2014 46 2198 40 41 46 2194 40 2045 41 59 125 688 40 2012 340 2196 41 123 2012 46 2199 40 41 46 2194 40 2042 41 59 2012 46 2200 40 41 46 2194 40 2043 41 59 125 2007 46 2201 40 41 46 2202 40 2047 41 59 125 64 2064 775 865 2203 40 41 123 818 46 2203 40 41 59 2019 46 2204 40 2205 40 40 41 45 62 2206 46 2207 40 2049 46 2208 40 41 46 2209 40 41 41 44 2049 46 2208 40 41 41 41 59 125 64 2064 775 865 2210 40 41 123 818 46 2210 40 41 59 2019 46 2211 40 41 59 125 331 330 331 773 865 2212 40 2013 46 2041 2213 41 123 2021 46 2214 40 2215 41 59 330 330 330 330 819 40 2213 41 123 579 2216 58 572 59 579 2217 58 330 572 59 579 2218 58 2023 46 2214 40 2026 41 59 2219 40 41 59 572 59 579 2220 58 688 40 2010 41 2021 46 2214 40 2221 46 2222 40 362 41 41 59 630 2021 46 2214 40 2221 46 2222 40 362 41 41 59 572 59 579 2223 58 688 40 33 2010 41 2021 46 2214 40 2221 46 2222 40 362 41 41 59 572 59 579 2224 58 688 40 2010 41 2021 46 2214 40 2221 46 2222 40 362 41 41 59 630 2021 46 2214 40 2221 46 2222 40 362 41 41 59 572 59 613 58 2225 46 2226 40 362 43 2213 41 59 572 59 125 2227 40 41 59 125 865 2228 40 41 123 2021 46 2229 40 2230 41 59 125 773 865 2231 40 64 2232 2008 2020 41 123 823 46 2020 46 2233 40 2020 41 59 688 40 2020 323 2234 41 123 792 59 125 2235 46 2236 40 2020 41 59 2012 46 2237 40 2011 46 2041 46 2238 41 59 125 773 865 2239 40 2011 46 2041 2213 41 123 819 40 2213 41 123 579 2240 58 572 59 579 2241 58 2030 46 2242 40 2012 46 2243 40 41 41 59 572 59 579 2244 58 572 59 125 125 773 865 2245 40 41 123 570 2246 61 2247 40 2017 46 2248 40 41 41 46 2249 307 2049 46 2250 40 41 307 33 2049 46 2251 40 41 307 2023 46 2248 40 41 59 2028 46 2252 40 33 2246 41 59 2027 46 2252 40 2010 41 59 2025 46 2252 40 2010 309 33 2246 41 59 125 331 330 331 773 865 2253 40 41 123 2254 40 41 59 125 773 865 2255 40 41 123 688 40 2017 46 2256 40 41 340 2257 307 33 2017 46 2256 40 41 46 2258 40 41 41 123 2039 2017 61 2259 46 2260 40 823 46 2017 46 2256 40 41 44 2060 41 59 2049 46 2261 40 2017 41 59 125 125 777 865 2262 40 41 123 2014 46 2263 40 2264 41 59 125 331 330 331 773 2033 46 2034 2265 40 2008 2266 41 123 792 2005 46 2267 40 2266 41 59 125 777 570 2268 40 41 123 792 2049 46 2269 40 41 46 2268 40 41 59 125 777 2008 2270 40 41 123 792 2062 46 2271 40 2049 46 2270 40 41 41 59 125 125 ,"{'AvgLine': 12, 'CountLine': 377, 'CountStmt': 180, 'MaxNesting': 3, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 140, 'MaxEssential': 1, 'SumEssential': 30, 'AvgCyclomatic': 2, 'CountLineCode': 272, 'CountStmtDecl': 55, 'MaxCyclomatic': 10, 'SumCyclomatic': 54, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 67, 'CountSemicolon': 136, 'CountDeclMethod': 22, 'CountLineCodeExe': 180, 'CountLineComment': 38, 'CountClassCoupled': 39, 'CountClassDerived': 0, 'CountLineCodeDecl': 71, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.14', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 61, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 89, 'SumCyclomaticModified': 47, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 5, 'CountDeclMethodPrivate': 7, 'CountDeclInstanceMethod': 22, 'CountDeclMethodProtected': 7, 'CountClassCoupledModified': 39, 'CountDeclInstanceVariable': 26, 'PercentLackOfCohesionModified': 82}"
2462,Java,"public class Baritone implements IBaritone {

    private static ThreadPoolExecutor threadPool;
    private static File dir;

    static {
        threadPool = new ThreadPoolExecutor(4, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<>());

        dir = new File(Minecraft.getMinecraft().gameDir, ""baritone"");
        if (!Files.exists(dir.toPath())) {
            try {
                Files.createDirectories(dir.toPath());
            } catch (IOException ignored) {}
        }
    }

    private GameEventHandler gameEventHandler;

    private PathingBehavior pathingBehavior;
    private LookBehavior lookBehavior;
    private MemoryBehavior memoryBehavior;
    private InventoryBehavior inventoryBehavior;
    private InputOverrideHandler inputOverrideHandler;

    private FollowProcess followProcess;
    private MineProcess mineProcess;
    private GetToBlockProcess getToBlockProcess;
    private CustomGoalProcess customGoalProcess;
    private BuilderProcess builderProcess;
    private ExploreProcess exploreProcess;
    private BackfillProcess backfillProcess;
    private FarmProcess farmProcess;

    private PathingControlManager pathingControlManager;
    private SelectionManager selectionManager;
    private CommandManager commandManager;

    private IPlayerContext playerContext;
    private WorldProvider worldProvider;

    public BlockStateInterface bsi;

    Baritone() {
        this.gameEventHandler = new GameEventHandler(this);

        // Define this before behaviors try and get it, or else it will be null and the builds will fail!
        this.playerContext = PrimaryPlayerContext.INSTANCE;

        {
            // the Behavior constructor calls baritone.registerBehavior(this) so this populates the behaviors arraylist
            pathingBehavior = new PathingBehavior(this);
            lookBehavior = new LookBehavior(this);
            memoryBehavior = new MemoryBehavior(this);
            inventoryBehavior = new InventoryBehavior(this);
            inputOverrideHandler = new InputOverrideHandler(this);
        }

        this.pathingControlManager = new PathingControlManager(this);
        {
            this.pathingControlManager.registerProcess(followProcess = new FollowProcess(this));
            this.pathingControlManager.registerProcess(mineProcess = new MineProcess(this));
            this.pathingControlManager.registerProcess(customGoalProcess = new CustomGoalProcess(this)); // very high iq
            this.pathingControlManager.registerProcess(getToBlockProcess = new GetToBlockProcess(this));
            this.pathingControlManager.registerProcess(builderProcess = new BuilderProcess(this));
            this.pathingControlManager.registerProcess(exploreProcess = new ExploreProcess(this));
            this.pathingControlManager.registerProcess(backfillProcess = new BackfillProcess(this));
            this.pathingControlManager.registerProcess(farmProcess = new FarmProcess(this));
        }

        this.worldProvider = new WorldProvider();
        this.selectionManager = new SelectionManager(this);
        this.commandManager = new CommandManager(this);
    }

    @Override
    public PathingControlManager getPathingControlManager() {
        return this.pathingControlManager;
    }

    public void registerBehavior(Behavior behavior) {
        this.gameEventHandler.registerEventListener(behavior);
    }

    @Override
    public InputOverrideHandler getInputOverrideHandler() {
        return this.inputOverrideHandler;
    }

    @Override
    public CustomGoalProcess getCustomGoalProcess() {
        return this.customGoalProcess;
    }

    @Override
    public GetToBlockProcess getGetToBlockProcess() {
        return this.getToBlockProcess;
    }

    @Override
    public IPlayerContext getPlayerContext() {
        return this.playerContext;
    }

    public MemoryBehavior getMemoryBehavior() {
        return this.memoryBehavior;
    }

    @Override
    public FollowProcess getFollowProcess() {
        return this.followProcess;
    }

    @Override
    public BuilderProcess getBuilderProcess() {
        return this.builderProcess;
    }

    public InventoryBehavior getInventoryBehavior() {
        return this.inventoryBehavior;
    }

    @Override
    public LookBehavior getLookBehavior() {
        return this.lookBehavior;
    }

    public ExploreProcess getExploreProcess() {
        return this.exploreProcess;
    }

    @Override
    public MineProcess getMineProcess() {
        return this.mineProcess;
    }

    public FarmProcess getFarmProcess() {
        return this.farmProcess;
    }

    @Override
    public PathingBehavior getPathingBehavior() {
        return this.pathingBehavior;
    }

    @Override
    public SelectionManager getSelectionManager() {
        return selectionManager;
    }

    @Override
    public WorldProvider getWorldProvider() {
        return this.worldProvider;
    }

    @Override
    public IEventBus getGameEventHandler() {
        return this.gameEventHandler;
    }

    @Override
    public CommandManager getCommandManager() {
        return this.commandManager;
    }

    @Override
    public void openClick() {
        new Thread(() -> {
            try {
                Thread.sleep(100);
                Helper.mc.addScheduledTask(() -> Helper.mc.displayGuiScreen(new GuiClick()));
            } catch (Exception ignored) {}
        }).start();
    }

    public static Settings settings() {
        return BaritoneAPI.getSettings();
    }

    public static File getDir() {
        return dir;
    }

    public static Executor getExecutor() {
        return threadPool;
    }
}",1,777 587 2000 693 2001 123 773 809 2002 2003 59 773 809 2004 2005 59 809 123 2003 61 744 2002 40 1502 44 2006 46 2007 44 1503 44 2008 46 2009 44 744 2010 60 62 40 41 41 59 2005 61 744 2004 40 2011 46 2012 40 41 46 2013 44 362 41 59 688 40 33 2014 46 2015 40 2005 46 2016 40 41 41 41 123 830 123 2014 46 2017 40 2005 46 2016 40 41 41 59 125 580 40 2018 2019 41 123 125 125 125 773 2020 2021 59 773 2022 2023 59 773 2024 2025 59 773 2026 2027 59 773 2028 2029 59 773 2030 2031 59 773 2032 2033 59 773 2034 2035 59 773 2036 2037 59 773 2038 2039 59 773 2040 2041 59 773 2042 2043 59 773 2044 2045 59 773 2046 2047 59 773 2048 2049 59 773 2050 2051 59 773 2052 2053 59 773 2054 2055 59 773 2056 2057 59 777 2058 2059 59 2000 40 41 123 823 46 2021 61 744 2020 40 823 41 59 330 823 46 2055 61 2060 46 2061 59 123 330 2023 61 744 2022 40 823 41 59 2025 61 744 2024 40 823 41 59 2027 61 744 2026 40 823 41 59 2029 61 744 2028 40 823 41 59 2031 61 744 2030 40 823 41 59 125 823 46 2049 61 744 2048 40 823 41 59 123 823 46 2049 46 2062 40 2033 61 744 2032 40 823 41 41 59 823 46 2049 46 2062 40 2035 61 744 2034 40 823 41 41 59 823 46 2049 46 2062 40 2039 61 744 2038 40 823 41 41 59 330 823 46 2049 46 2062 40 2037 61 744 2036 40 823 41 41 59 823 46 2049 46 2062 40 2041 61 744 2040 40 823 41 41 59 823 46 2049 46 2062 40 2043 61 744 2042 40 823 41 41 59 823 46 2049 46 2062 40 2045 61 744 2044 40 823 41 41 59 823 46 2049 46 2062 40 2047 61 744 2046 40 823 41 41 59 125 823 46 2057 61 744 2056 40 41 59 823 46 2051 61 744 2050 40 823 41 59 823 46 2053 61 744 2052 40 823 41 59 125 64 2063 777 2048 2064 40 41 123 792 823 46 2049 59 125 777 865 2065 40 2066 2067 41 123 823 46 2021 46 2068 40 2067 41 59 125 64 2063 777 2030 2069 40 41 123 792 823 46 2031 59 125 64 2063 777 2038 2070 40 41 123 792 823 46 2039 59 125 64 2063 777 2036 2071 40 41 123 792 823 46 2037 59 125 64 2063 777 2054 2072 40 41 123 792 823 46 2055 59 125 777 2026 2073 40 41 123 792 823 46 2027 59 125 64 2063 777 2032 2074 40 41 123 792 823 46 2033 59 125 64 2063 777 2040 2075 40 41 123 792 823 46 2041 59 125 777 2028 2076 40 41 123 792 823 46 2029 59 125 64 2063 777 2024 2077 40 41 123 792 823 46 2025 59 125 777 2042 2078 40 41 123 792 823 46 2043 59 125 64 2063 777 2034 2079 40 41 123 792 823 46 2035 59 125 777 2046 2080 40 41 123 792 823 46 2047 59 125 64 2063 777 2022 2081 40 41 123 792 823 46 2023 59 125 64 2063 777 2050 2082 40 41 123 792 2051 59 125 64 2063 777 2056 2083 40 41 123 792 823 46 2057 59 125 64 2063 777 2084 2085 40 41 123 792 823 46 2021 59 125 64 2063 777 2052 2086 40 41 123 792 823 46 2053 59 125 64 2063 777 865 2087 40 41 123 744 2088 40 40 41 45 62 123 830 123 2088 46 2089 40 1503 41 59 2090 46 2091 46 2092 40 40 41 45 62 2090 46 2091 46 2093 40 744 2094 40 41 41 41 59 125 580 40 2095 2096 41 123 125 125 41 46 2097 40 41 59 125 777 809 2098 2099 40 41 123 792 2100 46 2101 40 41 59 125 777 809 2004 2102 40 41 123 792 2005 59 125 777 809 2103 2104 40 41 123 792 2003 59 125 125 ,"{'AvgLine': 5, 'CountLine': 190, 'CountStmt': 97, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 50, 'MaxEssential': 1, 'SumEssential': 25, 'AvgCyclomatic': 1, 'CountLineCode': 147, 'CountStmtDecl': 47, 'MaxCyclomatic': 1, 'SumCyclomatic': 26, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 37, 'CountSemicolon': 69, 'CountDeclMethod': 24, 'CountLineCodeExe': 53, 'CountLineComment': 7, 'CountClassCoupled': 38, 'CountClassDerived': 0, 'CountLineCodeDecl': 63, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 26, 'CountDeclClassMethod': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 23, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 26, 'CountDeclClassVariable': 2, 'CountDeclMethodDefault': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 21, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 38, 'CountDeclInstanceVariable': 20, 'PercentLackOfCohesionModified': 92}"
3101,Java,"@Slf4j
public abstract class BsqSwapTrade extends TradeModel {

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Enums
    ///////////////////////////////////////////////////////////////////////////////////////////

    public enum State implements TradeState {
        PREPARATION,
        COMPLETED,
        FAILED;

        public static State fromProto(protobuf.BsqSwapTrade.State state) {
            return ProtoUtil.enumFromProto(State.class, state.name());
        }

        public static protobuf.BsqSwapTrade.State toProtoMessage(State state) {
            return protobuf.BsqSwapTrade.State.valueOf(state.name());
        }
    }


    private final long amountAsLong;
    @Getter
    private final long txFeePerVbyte;
    private final long makerFeeAsLong;
    @Getter
    private final long takerFeeAsLong;
    @Getter
    private final BsqSwapProtocolModel bsqSwapProtocolModel;

    @Getter
    private State state;

    @Getter
    @Nullable
    private String txId;

    @Nullable
    transient private Volume volume;
    @Nullable
    transient private Transaction transaction;
    transient final private ObjectProperty<State> stateProperty = new SimpleObjectProperty<>(state);


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, initialization
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected BsqSwapTrade(String uid,
                           Offer offer,
                           Coin amount,
                           long takeOfferDate,
                           NodeAddress tradingPeerNodeAddress,
                           long txFeePerVbyte,
                           long makerFeeAsLong,
                           long takerFeeAsLong,
                           BsqSwapProtocolModel bsqSwapProtocolModel,
                           @Nullable String errorMessage,
                           State state,
                           @Nullable String txId) {
        super(uid, offer, takeOfferDate, tradingPeerNodeAddress, errorMessage);
        this.amountAsLong = amount.value;
        this.txFeePerVbyte = txFeePerVbyte;
        this.makerFeeAsLong = makerFeeAsLong;
        this.takerFeeAsLong = takerFeeAsLong;
        this.bsqSwapProtocolModel = bsqSwapProtocolModel;
        this.state = state;
        this.txId = txId;

        stateProperty.set(state);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public Message toProtoMessage() {
        protobuf.BsqSwapTrade.Builder builder = protobuf.BsqSwapTrade.newBuilder()
                .setUid(uid)
                .setOffer(offer.toProtoMessage())
                .setAmount(amountAsLong)
                .setTakeOfferDate(takeOfferDate)
                .setMiningFeePerByte(txFeePerVbyte)
                .setMakerFee(makerFeeAsLong)
                .setTakerFee(takerFeeAsLong)
                .setBsqSwapProtocolModel(bsqSwapProtocolModel.toProtoMessage())
                .setState(State.toProtoMessage(state))
                .setPeerNodeAddress(tradingPeerNodeAddress.toProtoMessage());
        Optional.ofNullable(errorMessage).ifPresent(builder::setErrorMessage);
        Optional.ofNullable(txId).ifPresent(builder::setTxId);
        return builder.build();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Model implementation
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void onComplete() {
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // TradeModel implementation
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public ProtocolModel<BsqSwapTradePeer> getTradeProtocolModel() {
        return bsqSwapProtocolModel;
    }

    @Override
    public boolean isCompleted() {
        return state == State.COMPLETED;
    }

    @Override
    public BsqSwapTrade.State getTradeState() {
        return state;
    }

    @Override
    public TradePhase getTradePhase() {
        return state.getTradePhase();
    }

    @Override
    public long getAmountAsLong() {
        return amountAsLong;
    }

    @Override
    public Coin getAmount() {
        return Coin.valueOf(amountAsLong);
    }

    @Override
    @Nullable
    public Volume getVolume() {
        if (volume == null) {
            try {
                volume = getPrice().getVolumeByAmount(Coin.valueOf(amountAsLong));
            } catch (Throwable e) {
                log.error(e.toString());
                return null;
            }
        }
        return volume;
    }

    @Override
    public Price getPrice() {
        return Price.valueOf(offer.getCurrencyCode(), offer.getFixedPrice());
    }

    @Override
    public Coin getTxFee() {
        return Coin.valueOf(bsqSwapProtocolModel.getTxFee());
    }

    public long getMakerFeeAsLong() {
        return makerFeeAsLong;
    }

    @Override
    public Coin getTakerFee() {
        return Coin.valueOf(takerFeeAsLong);
    }

    @Override
    public Coin getMakerFee() {
        return Coin.valueOf(makerFeeAsLong);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Setters
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void setState(State state) {
        if (state.ordinal() < this.state.ordinal()) {
            String message = ""Unexpected state change to a previous state.\n"" +
                    ""Old state is: "" + this.state + "". New state is: "" + state;
            log.warn(message);
        }

        this.state = state;
        stateProperty.set(state);
    }

    public void applyTransaction(Transaction transaction) {
        this.transaction = transaction;
        txId = transaction.getTxId().toString();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    public ReadOnlyObjectProperty<State> stateProperty() {
        return stateProperty;
    }

    public boolean hasFailed() {
        return errorMessageProperty().get() != null;
    }

    public long getBsqTradeAmount() {
        Volume volume = getVolume();
        if (volume == null) {
            return 0L;
        }
        return BsqSwapCalculation.getBsqTradeAmount(volume).getValue();
    }

    @Nullable
    public Transaction getTransaction(BsqWalletService bsqWalletService) {
        if (txId == null) {
            return null;
        }
        if (transaction == null) {
            transaction = bsqWalletService.getTransaction(txId);
        }
        return transaction;
    }
}",1,64 2000 777 539 587 2001 650 2002 123 331 330 331 777 640 2003 693 2004 123 2005 44 2006 44 2007 59 777 809 2003 2008 40 2009 46 2001 46 2003 2010 41 123 792 2011 46 2012 40 2003 46 587 44 2010 46 2013 40 41 41 59 125 777 809 2009 46 2001 46 2003 2014 40 2003 2010 41 123 792 2009 46 2001 46 2003 46 2015 40 2010 46 2016 40 41 41 59 125 125 773 657 726 2017 59 64 2018 773 657 726 2019 59 773 657 726 2020 59 64 2018 773 657 726 2021 59 64 2018 773 657 2022 2023 59 64 2018 773 2003 2024 59 64 2018 64 2025 773 2026 2027 59 64 2025 828 773 2028 2029 59 64 2025 828 773 2030 2031 59 828 657 773 2032 60 2003 62 2033 61 744 2034 60 62 40 2024 41 59 331 330 331 775 2001 40 2026 2035 44 2036 2037 44 2038 2039 44 726 2040 44 2041 2042 44 726 2019 44 726 2020 44 726 2021 44 2022 2023 44 64 2025 2026 2043 44 2003 2024 44 64 2025 2026 2027 41 123 818 40 2035 44 2037 44 2040 44 2042 44 2043 41 59 823 46 2017 61 2039 46 2044 59 823 46 2019 61 2019 59 823 46 2020 61 2020 59 823 46 2021 61 2021 59 823 46 2023 61 2023 59 823 46 2024 61 2024 59 823 46 2027 61 2027 59 2033 46 2045 40 2024 41 59 125 331 330 331 64 2046 777 2047 2048 40 41 123 2049 46 2001 46 2050 2051 61 2049 46 2001 46 2052 40 41 46 2053 40 2035 41 46 2054 40 2037 46 2048 40 41 41 46 2055 40 2017 41 46 2056 40 2040 41 46 2057 40 2019 41 46 2058 40 2020 41 46 2059 40 2021 41 46 2060 40 2023 46 2048 40 41 41 46 2061 40 2003 46 2048 40 2024 41 41 46 2062 40 2042 46 2048 40 41 41 59 2063 46 2064 40 2043 41 46 2065 40 2051 58 58 2066 41 59 2063 46 2064 40 2027 41 46 2065 40 2051 58 58 2067 41 59 792 2051 46 2068 40 41 59 125 331 330 331 64 2046 777 865 2069 40 41 123 125 331 330 331 64 2046 777 2070 60 2071 62 2072 40 41 123 792 2023 59 125 64 2046 777 570 2073 40 41 123 792 2024 323 2003 46 2074 59 125 64 2046 777 2001 46 2003 2075 40 41 123 792 2024 59 125 64 2046 777 2076 2077 40 41 123 792 2024 46 2077 40 41 59 125 64 2046 777 726 2078 40 41 123 792 2017 59 125 64 2046 777 2038 2079 40 41 123 792 2038 46 2080 40 2017 41 59 125 64 2046 64 2025 777 2028 2081 40 41 123 688 40 2029 323 2082 41 123 830 123 2029 61 2083 40 41 46 2084 40 2038 46 2085 40 2017 41 41 59 125 580 40 2086 2087 41 123 2088 46 2089 40 2087 46 2090 40 41 41 59 792 2082 59 125 125 792 2029 59 125 64 2046 777 2091 2092 40 41 123 792 2091 46 2093 40 2037 46 2094 40 41 44 2037 46 2095 40 41 41 59 125 64 2046 777 2038 2096 40 41 123 792 2038 46 2097 40 2023 46 2096 40 41 41 59 125 777 726 2098 40 41 123 792 2020 59 125 64 2046 777 2038 2099 40 41 123 792 2038 46 2100 40 2021 41 59 125 64 2046 777 2038 2101 40 41 123 792 2038 46 2102 40 2020 41 59 125 331 330 331 777 865 2103 40 2003 2024 41 123 688 40 2024 46 2104 40 41 60 823 46 2024 46 2104 40 41 41 123 2026 2105 61 362 43 362 43 823 46 2024 43 362 43 2024 59 2106 46 2107 40 2105 41 59 125 823 46 2024 61 2024 59 2033 46 2108 40 2024 41 59 125 777 865 2109 40 2030 2031 41 123 823 46 2031 61 2031 59 2027 61 2031 46 2110 40 41 46 2111 40 41 59 125 331 330 331 777 2112 60 2003 62 2033 40 41 123 792 2033 59 125 777 570 2113 40 41 123 792 2114 40 41 46 2115 40 41 340 2116 59 125 777 726 2117 40 41 123 2028 2029 61 2081 40 41 59 688 40 2029 323 2118 41 123 792 1500 59 125 792 2119 46 2117 40 2029 41 46 2120 40 41 59 125 64 2025 777 2030 2121 40 2122 2123 41 123 688 40 2027 323 2124 41 123 792 2124 59 125 688 40 2031 323 2124 41 123 2031 61 2123 46 2121 40 2027 41 59 125 792 2031 59 125 125 ,"{'AvgLine': 6, 'CountLine': 231, 'CountStmt': 85, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 50, 'MaxEssential': 3, 'SumEssential': 23, 'AvgCyclomatic': 1, 'CountLineCode': 166, 'CountStmtDecl': 38, 'MaxCyclomatic': 3, 'SumCyclomatic': 27, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 44, 'CountSemicolon': 55, 'CountDeclMethod': 21, 'CountLineCodeExe': 63, 'CountLineComment': 21, 'CountClassCoupled': 24, 'CountClassDerived': 2, 'CountLineCodeDecl': 78, 'CountDeclMethodAll': 41, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.13', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 27, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 20, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 27, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 21, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 24, 'CountDeclInstanceVariable': 10, 'PercentLackOfCohesionModified': 82}"
2885,Java,"@Slf4j
@Getter
@EqualsAndHashCode
public final class Contract implements NetworkPayload {
    private final OfferPayload offerPayload;
    private final long tradeAmount;
    private final long tradePrice;
    private final String takerFeeTxID;
    private final NodeAddress buyerNodeAddress;
    private final NodeAddress sellerNodeAddress;
    private final NodeAddress mediatorNodeAddress;
    private final boolean isBuyerMakerAndSellerTaker;
    private final String makerAccountId;
    private final String takerAccountId;

    // Changed in v1.7.0: Not a final field anymore but initially set to null and later once the data is transmitted
    // set via a setter. This breaks the immutability of the contract but as there are several areas where we access
    // that data it is the less painful solution.
    @Nullable
    private PaymentAccountPayload makerPaymentAccountPayload;
    @Nullable
    private PaymentAccountPayload takerPaymentAccountPayload;

    @JsonExclude
    private final PubKeyRing makerPubKeyRing;
    @JsonExclude
    private final PubKeyRing takerPubKeyRing;
    private final String makerPayoutAddressString;
    private final String takerPayoutAddressString;
    @JsonExclude
    private final byte[] makerMultiSigPubKey;
    @JsonExclude
    private final byte[] takerMultiSigPubKey;

    // Added in v1.2.0
    private final long lockTime;
    private final NodeAddress refundAgentNodeAddress;


    // Added in v1.7.0
    @Nullable
    private final byte[] hashOfMakersPaymentAccountPayload;
    @Nullable
    private final byte[] hashOfTakersPaymentAccountPayload;
    @Nullable
    private final String makerPaymentMethodId;
    @Nullable
    private final String takerPaymentMethodId;

    public Contract(OfferPayload offerPayload,
                    long tradeAmount,
                    long tradePrice,
                    String takerFeeTxID,
                    NodeAddress buyerNodeAddress,
                    NodeAddress sellerNodeAddress,
                    NodeAddress mediatorNodeAddress,
                    boolean isBuyerMakerAndSellerTaker,
                    String makerAccountId,
                    String takerAccountId,
                    @Nullable PaymentAccountPayload makerPaymentAccountPayload,
                    @Nullable PaymentAccountPayload takerPaymentAccountPayload,
                    PubKeyRing makerPubKeyRing,
                    PubKeyRing takerPubKeyRing,
                    String makerPayoutAddressString,
                    String takerPayoutAddressString,
                    byte[] makerMultiSigPubKey,
                    byte[] takerMultiSigPubKey,
                    long lockTime,
                    NodeAddress refundAgentNodeAddress,
                    @Nullable byte[] hashOfMakersPaymentAccountPayload,
                    @Nullable byte[] hashOfTakersPaymentAccountPayload,
                    @Nullable String makerPaymentMethodId,
                    @Nullable String takerPaymentMethodId) {
        this.offerPayload = offerPayload;
        this.tradeAmount = tradeAmount;
        this.tradePrice = tradePrice;
        this.takerFeeTxID = takerFeeTxID;
        this.buyerNodeAddress = buyerNodeAddress;
        this.sellerNodeAddress = sellerNodeAddress;
        this.mediatorNodeAddress = mediatorNodeAddress;
        this.isBuyerMakerAndSellerTaker = isBuyerMakerAndSellerTaker;
        this.makerAccountId = makerAccountId;
        this.takerAccountId = takerAccountId;
        this.makerPaymentAccountPayload = makerPaymentAccountPayload;
        this.takerPaymentAccountPayload = takerPaymentAccountPayload;
        this.makerPubKeyRing = makerPubKeyRing;
        this.takerPubKeyRing = takerPubKeyRing;
        this.makerPayoutAddressString = makerPayoutAddressString;
        this.takerPayoutAddressString = takerPayoutAddressString;
        this.makerMultiSigPubKey = makerMultiSigPubKey;
        this.takerMultiSigPubKey = takerMultiSigPubKey;
        this.lockTime = lockTime;
        this.refundAgentNodeAddress = refundAgentNodeAddress;
        this.hashOfMakersPaymentAccountPayload = hashOfMakersPaymentAccountPayload;
        this.hashOfTakersPaymentAccountPayload = hashOfTakersPaymentAccountPayload;
        this.makerPaymentMethodId = makerPaymentMethodId;
        this.takerPaymentMethodId = takerPaymentMethodId;

        // Either makerPaymentAccountPayload is set or makerPaymentMethodId
        if (makerPaymentMethodId == null) {
            makerPaymentMethodId = checkNotNull(makerPaymentAccountPayload).getPaymentMethodId();
        }
        if (takerPaymentMethodId == null) {
            takerPaymentMethodId = checkNotNull(takerPaymentAccountPayload).getPaymentMethodId();
        }
        checkNotNull(makerPaymentMethodId);
        checkNotNull(takerPaymentMethodId);

        // For SEPA offers we accept also SEPA_INSTANT takers
        // Otherwise both ids need to be the same
        boolean result = (makerPaymentMethodId.equals(PaymentMethod.SEPA_ID) && takerPaymentMethodId.equals(PaymentMethod.SEPA_INSTANT_ID)) ||
                makerPaymentMethodId.equals(takerPaymentMethodId);
        checkArgument(result, ""payment methods of maker and taker must be the same.\n"" +
                ""makerPaymentMethodId="" + makerPaymentMethodId + ""\n"" +
                ""takerPaymentMethodId="" + takerPaymentMethodId);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Contract fromProto(protobuf.Contract proto, CoreProtoResolver coreProtoResolver) {
        PaymentAccountPayload makerPaymentAccountPayload = proto.hasMakerPaymentAccountPayload() ?
                coreProtoResolver.fromProto(proto.getMakerPaymentAccountPayload()) : null;
        PaymentAccountPayload takerPaymentAccountPayload = proto.hasTakerPaymentAccountPayload() ?
                coreProtoResolver.fromProto(proto.getTakerPaymentAccountPayload()) : null;
        return new Contract(OfferPayload.fromProto(proto.getOfferPayload()),
                proto.getTradeAmount(),
                proto.getTradePrice(),
                proto.getTakerFeeTxId(),
                NodeAddress.fromProto(proto.getBuyerNodeAddress()),
                NodeAddress.fromProto(proto.getSellerNodeAddress()),
                NodeAddress.fromProto(proto.getMediatorNodeAddress()),
                proto.getIsBuyerMakerAndSellerTaker(),
                proto.getMakerAccountId(),
                proto.getTakerAccountId(),
                makerPaymentAccountPayload,
                takerPaymentAccountPayload,
                PubKeyRing.fromProto(proto.getMakerPubKeyRing()),
                PubKeyRing.fromProto(proto.getTakerPubKeyRing()),
                proto.getMakerPayoutAddressString(),
                proto.getTakerPayoutAddressString(),
                proto.getMakerMultiSigPubKey().toByteArray(),
                proto.getTakerMultiSigPubKey().toByteArray(),
                proto.getLockTime(),
                NodeAddress.fromProto(proto.getRefundAgentNodeAddress()),
                ProtoUtil.byteArrayOrNullFromProto(proto.getHashOfMakersPaymentAccountPayload()),
                ProtoUtil.byteArrayOrNullFromProto(proto.getHashOfTakersPaymentAccountPayload()),
                ProtoUtil.stringOrNullFromProto(proto.getMakerPaymentMethodId()),
                ProtoUtil.stringOrNullFromProto(proto.getTakerPaymentMethodId())
        );
    }

    @Override
    public protobuf.Contract toProtoMessage() {
        protobuf.Contract.Builder builder = protobuf.Contract.newBuilder()
                .setOfferPayload(offerPayload.toProtoMessage().getOfferPayload())
                .setTradeAmount(tradeAmount)
                .setTradePrice(tradePrice)
                .setTakerFeeTxId(takerFeeTxID)
                .setBuyerNodeAddress(buyerNodeAddress.toProtoMessage())
                .setSellerNodeAddress(sellerNodeAddress.toProtoMessage())
                .setMediatorNodeAddress(mediatorNodeAddress.toProtoMessage())
                .setIsBuyerMakerAndSellerTaker(isBuyerMakerAndSellerTaker)
                .setMakerAccountId(makerAccountId)
                .setTakerAccountId(takerAccountId)
                .setMakerPubKeyRing(makerPubKeyRing.toProtoMessage())
                .setTakerPubKeyRing(takerPubKeyRing.toProtoMessage())
                .setMakerPayoutAddressString(makerPayoutAddressString)
                .setTakerPayoutAddressString(takerPayoutAddressString)
                .setMakerMultiSigPubKey(ByteString.copyFrom(makerMultiSigPubKey))
                .setTakerMultiSigPubKey(ByteString.copyFrom(takerMultiSigPubKey))
                .setLockTime(lockTime)
                .setRefundAgentNodeAddress(refundAgentNodeAddress.toProtoMessage());

        Optional.ofNullable(hashOfMakersPaymentAccountPayload)
                .ifPresent(e -> builder.setHashOfMakersPaymentAccountPayload(ByteString.copyFrom(hashOfMakersPaymentAccountPayload)));
        Optional.ofNullable(hashOfTakersPaymentAccountPayload)
                .ifPresent(e -> builder.setHashOfTakersPaymentAccountPayload(ByteString.copyFrom(hashOfTakersPaymentAccountPayload)));
        Optional.ofNullable(makerPaymentAccountPayload)
                .ifPresent(e -> builder.setMakerPaymentAccountPayload((protobuf.PaymentAccountPayload) makerPaymentAccountPayload.toProtoMessage()));
        Optional.ofNullable(takerPaymentAccountPayload)
                .ifPresent(e -> builder.setTakerPaymentAccountPayload((protobuf.PaymentAccountPayload) takerPaymentAccountPayload.toProtoMessage()));
        Optional.ofNullable(makerPaymentMethodId).ifPresent(e -> builder.setMakerPaymentMethodId(makerPaymentMethodId));
        Optional.ofNullable(takerPaymentMethodId).ifPresent(e -> builder.setTakerPaymentMethodId(takerPaymentMethodId));
        return builder.build();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public String getBuyerPayoutAddressString() {
        return isBuyerMakerAndSellerTaker ? makerPayoutAddressString : takerPayoutAddressString;
    }

    public String getSellerPayoutAddressString() {
        return isBuyerMakerAndSellerTaker ? takerPayoutAddressString : makerPayoutAddressString;
    }

    public PubKeyRing getBuyerPubKeyRing() {
        return isBuyerMakerAndSellerTaker ? makerPubKeyRing : takerPubKeyRing;
    }

    public PubKeyRing getSellerPubKeyRing() {
        return isBuyerMakerAndSellerTaker ? takerPubKeyRing : makerPubKeyRing;
    }

    public byte[] getBuyerMultiSigPubKey() {
        return isBuyerMakerAndSellerTaker ? makerMultiSigPubKey : takerMultiSigPubKey;
    }

    public byte[] getSellerMultiSigPubKey() {
        return isBuyerMakerAndSellerTaker ? takerMultiSigPubKey : makerMultiSigPubKey;
    }

    @Nullable
    public PaymentAccountPayload getBuyerPaymentAccountPayload() {
        return isBuyerMakerAndSellerTaker ? makerPaymentAccountPayload : takerPaymentAccountPayload;
    }

    @Nullable
    public PaymentAccountPayload getSellerPaymentAccountPayload() {
        return isBuyerMakerAndSellerTaker ? takerPaymentAccountPayload : makerPaymentAccountPayload;
    }

    public void setPaymentAccountPayloads(PaymentAccountPayload peersPaymentAccountPayload,
                                          PaymentAccountPayload myPaymentAccountPayload,
                                          PubKeyRing myPubKeyRing) {
        if (isMyRoleMaker(myPubKeyRing)) {
            makerPaymentAccountPayload = myPaymentAccountPayload;
            takerPaymentAccountPayload = peersPaymentAccountPayload;
        } else {
            takerPaymentAccountPayload = myPaymentAccountPayload;
            makerPaymentAccountPayload = peersPaymentAccountPayload;
        }
    }

    public byte[] getHashOfPeersPaymentAccountPayload(PubKeyRing myPubKeyRing) {
        return isMyRoleMaker(myPubKeyRing) ? hashOfTakersPaymentAccountPayload : hashOfMakersPaymentAccountPayload;
    }

    public String getPaymentMethodId() {
        // Either makerPaymentMethodId is set or available in makerPaymentAccountPayload
        return makerPaymentMethodId != null ? makerPaymentMethodId : Objects.requireNonNull(makerPaymentAccountPayload).getPaymentMethodId();
    }

    public Coin getTradeAmount() {
        return Coin.valueOf(tradeAmount);
    }

    public Volume getTradeVolume() {
        Volume volumeByAmount = getTradePrice().getVolumeByAmount(getTradeAmount());

        if (getPaymentMethodId().equals(PaymentMethod.HAL_CASH_ID))
            volumeByAmount = VolumeUtil.getAdjustedVolumeForHalCash(volumeByAmount);
        else if (CurrencyUtil.isFiatCurrency(getOfferPayload().getCurrencyCode()))
            volumeByAmount = VolumeUtil.getRoundedFiatVolume(volumeByAmount);

        return volumeByAmount;
    }

    public Price getTradePrice() {
        return Price.valueOf(offerPayload.getCurrencyCode(), tradePrice);
    }

    public NodeAddress getMyNodeAddress(PubKeyRing myPubKeyRing) {
        if (myPubKeyRing.equals(getBuyerPubKeyRing()))
            return buyerNodeAddress;
        else
            return sellerNodeAddress;
    }

    public NodeAddress getPeersNodeAddress(PubKeyRing myPubKeyRing) {
        if (myPubKeyRing.equals(getSellerPubKeyRing()))
            return buyerNodeAddress;
        else
            return sellerNodeAddress;
    }

    public PubKeyRing getPeersPubKeyRing(PubKeyRing myPubKeyRing) {
        if (myPubKeyRing.equals(getSellerPubKeyRing()))
            return getBuyerPubKeyRing();
        else
            return getSellerPubKeyRing();
    }

    public boolean isMyRoleBuyer(PubKeyRing myPubKeyRing) {
        return getBuyerPubKeyRing().equals(myPubKeyRing);
    }

    public boolean isMyRoleMaker(PubKeyRing myPubKeyRing) {
        return isBuyerMakerAndSellerTaker() == isMyRoleBuyer(myPubKeyRing);
    }

    public void printDiff(@Nullable String peersContractAsJson) {
        String json = JsonUtil.objectToJson(this);
        String diff = StringUtils.difference(json, peersContractAsJson);
        if (!diff.isEmpty()) {
            log.warn(""Diff of both contracts: \n"" + diff);
            log.warn(""\n\n------------------------------------------------------------\n""
                    + ""Contract as json\n""
                    + json
                    + ""\n------------------------------------------------------------\n"");

            log.warn(""\n\n------------------------------------------------------------\n""
                    + ""Peers contract as json\n""
                    + peersContractAsJson
                    + ""\n------------------------------------------------------------\n"");
        } else {
            log.debug(""Both contracts are the same"");
        }
    }

    @Override
    public String toString() {
        return ""Contract{"" +
                ""\n     offerPayload="" + offerPayload +
                "",\n     tradeAmount="" + tradeAmount +
                "",\n     tradePrice="" + tradePrice +
                "",\n     takerFeeTxID='"" + takerFeeTxID + '\'' +
                "",\n     buyerNodeAddress="" + buyerNodeAddress +
                "",\n     sellerNodeAddress="" + sellerNodeAddress +
                "",\n     mediatorNodeAddress="" + mediatorNodeAddress +
                "",\n     refundAgentNodeAddress="" + refundAgentNodeAddress +
                "",\n     isBuyerMakerAndSellerTaker="" + isBuyerMakerAndSellerTaker +
                "",\n     makerAccountId='"" + makerAccountId + '\'' +
                "",\n     takerAccountId='"" + takerAccountId + '\'' +
                "",\n     makerPubKeyRing="" + makerPubKeyRing +
                "",\n     takerPubKeyRing="" + takerPubKeyRing +
                "",\n     makerPayoutAddressString='"" + makerPayoutAddressString + '\'' +
                "",\n     takerPayoutAddressString='"" + takerPayoutAddressString + '\'' +
                "",\n     makerMultiSigPubKey="" + Utilities.bytesAsHexString(makerMultiSigPubKey) +
                "",\n     takerMultiSigPubKey="" + Utilities.bytesAsHexString(takerMultiSigPubKey) +
                "",\n     buyerMultiSigPubKey="" + Utilities.bytesAsHexString(getBuyerMultiSigPubKey()) +
                "",\n     sellerMultiSigPubKey="" + Utilities.bytesAsHexString(getSellerMultiSigPubKey()) +
                "",\n     lockTime="" + lockTime +
                "",\n     hashOfMakersPaymentAccountPayload="" + Utilities.bytesAsHexString(hashOfMakersPaymentAccountPayload) +
                "",\n     hashOfTakersPaymentAccountPayload="" + Utilities.bytesAsHexString(hashOfTakersPaymentAccountPayload) +
                "",\n     makerPaymentMethodId="" + makerPaymentMethodId +
                "",\n     takerPaymentMethodId="" + takerPaymentMethodId +
                ""\n}"";
    }
}",1,64 2000 64 2001 64 2002 777 657 587 2003 693 2004 123 773 657 2005 2006 59 773 657 726 2007 59 773 657 726 2008 59 773 657 2009 2010 59 773 657 2011 2012 59 773 657 2011 2013 59 773 657 2011 2014 59 773 657 570 2015 59 773 657 2009 2016 59 773 657 2009 2017 59 330 330 330 64 2018 773 2019 2020 59 64 2018 773 2019 2021 59 64 2022 773 657 2023 2024 59 64 2022 773 657 2023 2025 59 773 657 2009 2026 59 773 657 2009 2027 59 64 2022 773 657 574 91 93 2028 59 64 2022 773 657 574 91 93 2029 59 330 773 657 726 2030 59 773 657 2011 2031 59 330 64 2018 773 657 574 91 93 2032 59 64 2018 773 657 574 91 93 2033 59 64 2018 773 657 2009 2034 59 64 2018 773 657 2009 2035 59 777 2003 40 2005 2006 44 726 2007 44 726 2008 44 2009 2010 44 2011 2012 44 2011 2013 44 2011 2014 44 570 2015 44 2009 2016 44 2009 2017 44 64 2018 2019 2020 44 64 2018 2019 2021 44 2023 2024 44 2023 2025 44 2009 2026 44 2009 2027 44 574 91 93 2028 44 574 91 93 2029 44 726 2030 44 2011 2031 44 64 2018 574 91 93 2032 44 64 2018 574 91 93 2033 44 64 2018 2009 2034 44 64 2018 2009 2035 41 123 823 46 2006 61 2006 59 823 46 2007 61 2007 59 823 46 2008 61 2008 59 823 46 2010 61 2010 59 823 46 2012 61 2012 59 823 46 2013 61 2013 59 823 46 2014 61 2014 59 823 46 2015 61 2015 59 823 46 2016 61 2016 59 823 46 2017 61 2017 59 823 46 2020 61 2020 59 823 46 2021 61 2021 59 823 46 2024 61 2024 59 823 46 2025 61 2025 59 823 46 2026 61 2026 59 823 46 2027 61 2027 59 823 46 2028 61 2028 59 823 46 2029 61 2029 59 823 46 2030 61 2030 59 823 46 2031 61 2031 59 823 46 2032 61 2032 59 823 46 2033 61 2033 59 823 46 2034 61 2034 59 823 46 2035 61 2035 59 330 688 40 2034 323 2036 41 123 2034 61 2037 40 2020 41 46 2038 40 41 59 125 688 40 2035 323 2036 41 123 2035 61 2039 40 2021 41 46 2040 40 41 59 125 2041 40 2034 41 59 2041 40 2035 41 59 330 330 570 2042 61 40 2034 46 2043 40 2044 46 2045 41 307 2035 46 2043 40 2044 46 2046 41 41 309 2034 46 2043 40 2035 41 59 2047 40 2042 44 362 43 362 43 2034 43 362 43 362 43 2035 41 59 125 331 330 331 777 809 2003 2048 40 2049 46 2003 2050 44 2051 2052 41 123 2019 2020 61 2050 46 2053 40 41 63 2052 46 2048 40 2050 46 2054 40 41 41 58 2055 59 2019 2021 61 2050 46 2056 40 41 63 2052 46 2048 40 2050 46 2057 40 41 41 58 2055 59 792 744 2003 40 2005 46 2048 40 2050 46 2058 40 41 41 44 2050 46 2059 40 41 44 2050 46 2060 40 41 44 2050 46 2061 40 41 44 2011 46 2048 40 2050 46 2062 40 41 41 44 2011 46 2048 40 2050 46 2063 40 41 41 44 2011 46 2048 40 2050 46 2064 40 41 41 44 2050 46 2065 40 41 44 2050 46 2066 40 41 44 2050 46 2067 40 41 44 2020 44 2021 44 2023 46 2048 40 2050 46 2068 40 41 41 44 2023 46 2048 40 2050 46 2069 40 41 41 44 2050 46 2070 40 41 44 2050 46 2071 40 41 44 2050 46 2072 40 41 46 2073 40 41 44 2050 46 2074 40 41 46 2073 40 41 44 2050 46 2075 40 41 44 2011 46 2048 40 2050 46 2076 40 41 41 44 2077 46 2078 40 2050 46 2079 40 41 41 44 2077 46 2078 40 2050 46 2080 40 41 41 44 2077 46 2081 40 2050 46 2082 40 41 41 44 2077 46 2081 40 2050 46 2083 40 41 41 41 59 125 64 2084 777 2049 46 2003 2085 40 41 123 2049 46 2003 46 2086 2087 61 2049 46 2003 46 2088 40 41 46 2089 40 2006 46 2085 40 41 46 2090 40 41 41 46 2091 40 2007 41 46 2092 40 2008 41 46 2093 40 2010 41 46 2094 40 2012 46 2085 40 41 41 46 2095 40 2013 46 2085 40 41 41 46 2096 40 2014 46 2085 40 41 41 46 2097 40 2015 41 46 2098 40 2016 41 46 2099 40 2017 41 46 2100 40 2024 46 2085 40 41 41 46 2101 40 2025 46 2085 40 41 41 46 2102 40 2026 41 46 2103 40 2027 41 46 2104 40 2105 46 2106 40 2028 41 41 46 2107 40 2105 46 2106 40 2029 41 41 46 2108 40 2030 41 46 2109 40 2031 46 2085 40 41 41 59 2110 46 2111 40 2032 41 46 2112 40 2113 45 62 2087 46 2114 40 2105 46 2106 40 2032 41 41 41 59 2110 46 2111 40 2033 41 46 2112 40 2113 45 62 2087 46 2115 40 2105 46 2106 40 2033 41 41 41 59 2110 46 2111 40 2020 41 46 2112 40 2113 45 62 2087 46 2116 40 40 2049 46 2019 41 2020 46 2085 40 41 41 41 59 2110 46 2111 40 2021 41 46 2112 40 2113 45 62 2087 46 2117 40 40 2049 46 2019 41 2021 46 2085 40 41 41 41 59 2110 46 2111 40 2034 41 46 2112 40 2113 45 62 2087 46 2118 40 2034 41 41 59 2110 46 2111 40 2035 41 46 2112 40 2113 45 62 2087 46 2119 40 2035 41 41 59 792 2087 46 2120 40 41 59 125 331 330 331 777 2009 2121 40 41 123 792 2015 63 2026 58 2027 59 125 777 2009 2122 40 41 123 792 2015 63 2027 58 2026 59 125 777 2023 2123 40 41 123 792 2015 63 2024 58 2025 59 125 777 2023 2124 40 41 123 792 2015 63 2025 58 2024 59 125 777 574 91 93 2125 40 41 123 792 2015 63 2028 58 2029 59 125 777 574 91 93 2126 40 41 123 792 2015 63 2029 58 2028 59 125 64 2018 777 2019 2127 40 41 123 792 2015 63 2020 58 2021 59 125 64 2018 777 2019 2128 40 41 123 792 2015 63 2021 58 2020 59 125 777 865 2129 40 2019 2130 44 2019 2131 44 2023 2132 41 123 688 40 2133 40 2132 41 41 123 2020 61 2131 59 2021 61 2130 59 125 630 123 2021 61 2131 59 2020 61 2130 59 125 125 777 574 91 93 2134 40 2023 2132 41 123 792 2135 40 2132 41 63 2033 58 2032 59 125 777 2009 2136 40 41 123 330 792 2034 340 2137 63 2034 58 2138 46 2139 40 2020 41 46 2136 40 41 59 125 777 2140 2141 40 41 123 792 2140 46 2142 40 2007 41 59 125 777 2143 2144 40 41 123 2143 2145 61 2146 40 41 46 2147 40 2141 40 41 41 59 688 40 2136 40 41 46 2148 40 2149 46 2150 41 41 2145 61 2151 46 2152 40 2145 41 59 630 688 40 2153 46 2154 40 2155 40 41 46 2156 40 41 41 41 2145 61 2151 46 2157 40 2145 41 59 792 2145 59 125 777 2158 2159 40 41 123 792 2158 46 2160 40 2006 46 2161 40 41 44 2008 41 59 125 777 2011 2162 40 2023 2132 41 123 688 40 2132 46 2163 40 2123 40 41 41 41 792 2012 59 630 792 2013 59 125 777 2011 2164 40 2023 2132 41 123 688 40 2132 46 2165 40 2124 40 41 41 41 792 2012 59 630 792 2013 59 125 777 2023 2166 40 2023 2132 41 123 688 40 2132 46 2167 40 2124 40 41 41 41 792 2123 40 41 59 630 792 2124 40 41 59 125 777 570 2168 40 2023 2132 41 123 792 2123 40 41 46 2169 40 2132 41 59 125 777 570 2170 40 2023 2132 41 123 792 2015 40 41 323 2168 40 2132 41 59 125 777 865 2171 40 64 2018 2009 2172 41 123 2009 2173 61 2174 46 2175 40 823 41 59 2009 2176 61 2177 46 2178 40 2173 44 2172 41 59 688 40 33 2176 46 2179 40 41 41 123 2180 46 2181 40 362 43 2176 41 59 2180 46 2181 40 362 43 362 43 2173 43 362 41 59 2180 46 2181 40 362 43 362 43 2172 43 362 41 59 125 630 123 2182 46 2183 40 362 41 59 125 125 64 2084 777 2009 2184 40 41 123 792 362 43 362 43 2006 43 362 43 2007 43 362 43 2008 43 362 43 2010 43 314 43 362 43 2012 43 362 43 2013 43 362 43 2014 43 362 43 2031 43 362 43 2015 43 362 43 2016 43 314 43 362 43 2017 43 314 43 362 43 2024 43 362 43 2025 43 362 43 2026 43 314 43 362 43 2027 43 314 43 362 43 2185 46 2186 40 2028 41 43 362 43 2185 46 2186 40 2029 41 43 362 43 2185 46 2186 40 2125 40 41 41 43 362 43 2185 46 2186 40 2126 40 41 41 43 362 43 2030 43 362 43 2185 46 2186 40 2032 41 43 362 43 2185 46 2186 40 2033 41 43 362 43 2034 43 362 43 2035 43 362 59 125 125 ,"{'AvgLine': 10, 'CountLine': 346, 'CountStmt': 134, 'MaxNesting': 1, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 85, 'MaxEssential': 1, 'SumEssential': 30, 'AvgCyclomatic': 1, 'CountLineCode': 292, 'CountStmtDecl': 56, 'MaxCyclomatic': 3, 'SumCyclomatic': 51, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 39, 'CountSemicolon': 100, 'CountDeclMethod': 24, 'CountLineCodeExe': 172, 'CountLineComment': 15, 'CountClassCoupled': 28, 'CountClassDerived': 0, 'CountLineCodeDecl': 102, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.05', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 53, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 24, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 81, 'SumCyclomaticModified': 51, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 23, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 28, 'CountDeclInstanceVariable': 24, 'PercentLackOfCohesionModified': 72}"
2786,Java,"public class FormBuilder {
    private static final String MATERIAL_DESIGN_ICONS = ""'Material Design Icons'"";

    ///////////////////////////////////////////////////////////////////////////////////////////
    // TitledGroupBg
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static TitledGroupBg addTitledGroupBg(GridPane gridPane, int rowIndex, int rowSpan, String title) {
        return addTitledGroupBg(gridPane, rowIndex, rowSpan, title, 0);
    }

    public static TitledGroupBg addTitledGroupBg(GridPane gridPane,
                                                 int rowIndex,
                                                 int columnIndex,
                                                 int rowSpan,
                                                 String title) {
        TitledGroupBg titledGroupBg = addTitledGroupBg(gridPane, rowIndex, rowSpan, title, 0);
        GridPane.setColumnIndex(titledGroupBg, columnIndex);
        return titledGroupBg;
    }

    public static TitledGroupBg addTitledGroupBg(GridPane gridPane,
                                                 int rowIndex,
                                                 int columnIndex,
                                                 int rowSpan,
                                                 String title,
                                                 double top) {
        TitledGroupBg titledGroupBg = addTitledGroupBg(gridPane, rowIndex, rowSpan, title, top);
        GridPane.setColumnIndex(titledGroupBg, columnIndex);
        return titledGroupBg;
    }

    public static TitledGroupBg addTitledGroupBg(GridPane gridPane,
                                                 int rowIndex,
                                                 int rowSpan,
                                                 String title,
                                                 double top) {
        TitledGroupBg titledGroupBg = new TitledGroupBg();
        titledGroupBg.setText(title);
        titledGroupBg.prefWidthProperty().bind(gridPane.widthProperty());
        GridPane.setRowIndex(titledGroupBg, rowIndex);
        GridPane.setRowSpan(titledGroupBg, rowSpan);
        GridPane.setMargin(titledGroupBg, new Insets(top + 8, -10, -12, -10));
        gridPane.getChildren().add(titledGroupBg);
        return titledGroupBg;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Label addLabel(GridPane gridPane, int rowIndex, String title) {
        return addLabel(gridPane, rowIndex, title, 0);
    }

    public static Label addLabel(GridPane gridPane, int rowIndex, String title, double top) {
        Label label = new AutoTooltipLabel(title);
        GridPane.setRowIndex(label, rowIndex);
        GridPane.setMargin(label, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(label);
        return label;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label + Subtext
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple3<Label, Label, VBox> addLabelWithSubText(GridPane gridPane,
                                                                 int rowIndex,
                                                                 String title,
                                                                 String description) {
        return addLabelWithSubText(gridPane, rowIndex, title, description, 0);
    }

    public static Tuple3<Label, Label, VBox> addLabelWithSubText(GridPane gridPane,
                                                                 int rowIndex,
                                                                 String title,
                                                                 String description,
                                                                 double top) {
        Label label = new AutoTooltipLabel(title);
        Label subText = new AutoTooltipLabel(description);

        VBox vBox = new VBox();
        vBox.getChildren().setAll(label, subText);

        GridPane.setRowIndex(vBox, rowIndex);
        GridPane.setMargin(vBox, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(vBox);

        return new Tuple3<>(label, subText, vBox);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Multiline Label
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Label addMultilineLabel(GridPane gridPane, int rowIndex) {
        return addMultilineLabel(gridPane, rowIndex, 0);
    }

    public static Label addMultilineLabel(GridPane gridPane, int rowIndex, String text) {
        return addMultilineLabel(gridPane, rowIndex, text, 0);
    }

    public static Label addMultilineLabel(GridPane gridPane, int rowIndex, double top) {
        return addMultilineLabel(gridPane, rowIndex, """", top);
    }

    public static Label addMultilineLabel(GridPane gridPane, int rowIndex, String text, double top) {
        return addMultilineLabel(gridPane, rowIndex, text, top, 600);
    }

    public static Label addMultilineLabel(GridPane gridPane, int rowIndex, String text, double top, double maxWidth) {
        Label label = new AutoTooltipLabel(text);
        label.setWrapText(true);
        label.setMaxWidth(maxWidth);
        GridPane.setHalignment(label, HPos.LEFT);
        GridPane.setHgrow(label, Priority.ALWAYS);
        GridPane.setRowIndex(label, rowIndex);
        GridPane.setMargin(label, new Insets(top + Layout.FLOATING_LABEL_DISTANCE, 0, 0, 0));
        gridPane.getChildren().add(label);
        return label;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + TextField
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple3<Label, TextField, VBox> addTopLabelReadOnlyTextField(GridPane gridPane,
                                                                              int rowIndex,
                                                                              String title) {
        return addTopLabelTextField(gridPane, rowIndex, title, """", -15);
    }

    public static Tuple3<Label, TextField, VBox> addTopLabelReadOnlyTextField(GridPane gridPane,
                                                                              int rowIndex,
                                                                              int columnIndex,
                                                                              String title) {
        Tuple3<Label, TextField, VBox> tuple = addTopLabelTextField(gridPane, rowIndex, title, """", -15);
        GridPane.setColumnIndex(tuple.third, columnIndex);
        return tuple;
    }

    public static Tuple3<Label, TextField, VBox> addTopLabelReadOnlyTextField(GridPane gridPane,
                                                                              int rowIndex,
                                                                              String title,
                                                                              double top) {
        return addTopLabelTextField(gridPane, rowIndex, title, """", top - 15);
    }

    public static Tuple3<Label, TextField, VBox> addTopLabelReadOnlyTextField(GridPane gridPane,
                                                                              int rowIndex,
                                                                              String title,
                                                                              String value) {
        return addTopLabelReadOnlyTextField(gridPane, rowIndex, title, value, 0);
    }

    public static Tuple3<Label, TextField, VBox> addTopLabelReadOnlyTextField(GridPane gridPane,
                                                                              int rowIndex,
                                                                              int columnIndex,
                                                                              String title,
                                                                              String value,
                                                                              double top) {
        Tuple3<Label, TextField, VBox> tuple = addTopLabelTextField(gridPane, rowIndex, title, value, top - 15);
        GridPane.setColumnIndex(tuple.third, columnIndex);
        return tuple;
    }

    public static Tuple3<Label, TextField, VBox> addTopLabelReadOnlyTextField(GridPane gridPane,
                                                                              int rowIndex,
                                                                              int columnIndex,
                                                                              String title,
                                                                              double top) {
        Tuple3<Label, TextField, VBox> tuple = addTopLabelTextField(gridPane, rowIndex, title, """", top - 15);
        GridPane.setColumnIndex(tuple.third, columnIndex);
        return tuple;
    }

    public static Tuple3<Label, TextField, VBox> addTopLabelReadOnlyTextField(GridPane gridPane,
                                                                              int rowIndex,
                                                                              String title,
                                                                              String value,
                                                                              double top) {
        return addTopLabelTextField(gridPane, rowIndex, title, value, top - 15);
    }

    public static Tuple3<Label, TextField, VBox> addTopLabelTextField(GridPane gridPane, int rowIndex, String title) {
        return addTopLabelTextField(gridPane, rowIndex, title, """", 0);
    }

    public static Tuple3<Label, TextField, VBox> addCompactTopLabelTextField(GridPane gridPane,
                                                                             int rowIndex,
                                                                             String title,
                                                                             String value) {
        return addTopLabelTextField(gridPane, rowIndex, title, value, -Layout.FLOATING_LABEL_DISTANCE);
    }

    public static Tuple3<Label, TextField, VBox> addCompactTopLabelTextField(GridPane gridPane,
                                                                             int rowIndex,
                                                                             int colIndex,
                                                                             String title,
                                                                             String value) {
        final Tuple3<Label, TextField, VBox> labelTextFieldVBoxTuple3 = addTopLabelTextField(gridPane, rowIndex, title, value, -Layout.FLOATING_LABEL_DISTANCE);
        GridPane.setColumnIndex(labelTextFieldVBoxTuple3.third, colIndex);
        return labelTextFieldVBoxTuple3;
    }

    public static Tuple3<Label, TextField, VBox> addCompactTopLabelTextField(GridPane gridPane,
                                                                             int rowIndex,
                                                                             String title,
                                                                             String value,
                                                                             double top) {
        return addTopLabelTextField(gridPane, rowIndex, title, value, top - Layout.FLOATING_LABEL_DISTANCE);
    }

    public static Tuple3<Label, TextField, VBox> addTopLabelTextField(GridPane gridPane,
                                                                      int rowIndex,
                                                                      String title,
                                                                      String value) {
        return addTopLabelTextField(gridPane, rowIndex, title, value, 0);
    }

    public static Tuple3<Label, TextField, VBox> addTopLabelTextField(GridPane gridPane,
                                                                      int rowIndex,
                                                                      String title,
                                                                      double top) {
        return addTopLabelTextField(gridPane, rowIndex, title, """", top);
    }

    public static Tuple3<Label, TextField, VBox> addTopLabelTextField(GridPane gridPane,
                                                                      int rowIndex,
                                                                      String title,
                                                                      String value,
                                                                      double top) {
        TextField textField = new BisqTextField(value);
        textField.setEditable(false);
        textField.setFocusTraversable(false);

        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, textField, top);

        // TODO not 100% sure if that is a good idea....
        //topLabelWithVBox.first.getStyleClass().add(""jfx-text-field-top-label"");

        return new Tuple3<>(topLabelWithVBox.first, textField, topLabelWithVBox.second);
    }

    public static Tuple2<TextField, Button> addTextFieldWithEditButton(GridPane gridPane, int rowIndex, String title) {
        TextField textField = new BisqTextField();
        textField.setPromptText(title);
        textField.setEditable(false);
        textField.setFocusTraversable(false);
        textField.setPrefWidth(Layout.INITIAL_WINDOW_WIDTH);

        Button button = new AutoTooltipButton(""..."");
        button.setStyle(""-fx-min-width: 35px; -fx-pref-height: 20; -fx-padding: 3 3 3 3; -fx-border-insets: 5px;"");
        button.managedProperty().bind(button.visibleProperty());
        VBox vBoxButton = new VBox(button);
        vBoxButton.setAlignment(Pos.CENTER);
        HBox hBox2 = new HBox(textField, vBoxButton);

        Label label = getTopLabel(title);
        VBox textFieldVbox = getTopLabelVBox(0);
        textFieldVbox.getChildren().addAll(label, hBox2);

        gridPane.getChildren().add(textFieldVbox);
        GridPane.setRowIndex(textFieldVbox, rowIndex);
        GridPane.setMargin(textFieldVbox, new Insets(Layout.FLOATING_LABEL_DISTANCE, 0, 0, 0));

        return new Tuple2<>(textField, button);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Confirmation Fields
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<Label, Label> addConfirmationLabelLabel(GridPane gridPane,
                                                                 int rowIndex,
                                                                 String title1,
                                                                 String title2) {
        return addConfirmationLabelLabel(gridPane, rowIndex, title1, title2, 0);
    }

    public static Tuple2<Label, Label> addConfirmationLabelLabel(GridPane gridPane,
                                                                 int rowIndex,
                                                                 String title1,
                                                                 String title2,
                                                                 double top) {
        Label label1 = addLabel(gridPane, rowIndex, title1);
        label1.getStyleClass().add(""confirmation-label"");
        Label label2 = addLabel(gridPane, rowIndex, title2);
        label2.getStyleClass().add(""confirmation-value"");
        GridPane.setColumnIndex(label2, 1);
        GridPane.setMargin(label1, new Insets(top, 0, 0, 0));
        GridPane.setHalignment(label1, HPos.LEFT);
        GridPane.setMargin(label2, new Insets(top, 0, 0, 0));

        return new Tuple2<>(label1, label2);
    }

    public static Tuple2<Label, TextField> addConfirmationLabelTextField(GridPane gridPane,
                                                     int rowIndex,
                                                     String title1,
                                                     String title2) {
        return addConfirmationLabelTextField(gridPane, rowIndex, title1, title2, 0);
    }

    public static Tuple2<Label, TextField> addConfirmationLabelTextField(GridPane gridPane,
                                                     int rowIndex,
                                                     String title1,
                                                     String title2,
                                                     double top) {
        Label label1 = addLabel(gridPane, rowIndex, title1);
        label1.getStyleClass().add(""confirmation-label"");
        TextField label2 = new BisqTextField(title2);
        gridPane.getChildren().add(label2);
        label2.getStyleClass().add(""confirmation-text-field-as-label"");
        label2.setEditable(false);
        label2.setFocusTraversable(false);
        GridPane.setRowIndex(label2, rowIndex);
        GridPane.setColumnIndex(label2, 1);
        GridPane.setMargin(label1, new Insets(top, 0, 0, 0));
        GridPane.setHalignment(label1, HPos.LEFT);
        GridPane.setMargin(label2, new Insets(top, 0, 0, 0));
        return new Tuple2<>(label1, label2);
    }

    public static Tuple2<Label, TextFieldWithCopyIcon> addConfirmationLabelLabelWithCopyIcon(GridPane gridPane,
                                                                 int rowIndex,
                                                                 String title1,
                                                                 String title2) {
        Label label1 = addLabel(gridPane, rowIndex, title1);
        label1.getStyleClass().add(""confirmation-label"");
        TextFieldWithCopyIcon label2 = new TextFieldWithCopyIcon(""confirmation-value"");
        label2.setText(title2);
        GridPane.setRowIndex(label2, rowIndex);
        gridPane.getChildren().add(label2);
        GridPane.setColumnIndex(label2, 1);
        GridPane.setHalignment(label1, HPos.LEFT);
        return new Tuple2<>(label1, label2);
    }

    public static Tuple2<Label, TextArea> addConfirmationLabelTextArea(GridPane gridPane,
                                                                       int rowIndex,
                                                                       String title1,
                                                                       String title2,
                                                                       double top) {
        Label label = addLabel(gridPane, rowIndex, title1);
        label.getStyleClass().add(""confirmation-label"");

        TextArea textArea = addTextArea(gridPane, rowIndex, title2);
        ((JFXTextArea) textArea).setLabelFloat(false);

        GridPane.setColumnIndex(textArea, 1);
        GridPane.setMargin(label, new Insets(top, 0, 0, 0));
        GridPane.setHalignment(label, HPos.LEFT);
        GridPane.setMargin(textArea, new Insets(top, 0, 0, 0));

        return new Tuple2<>(label, textArea);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + TextFieldWithIcon
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<Label, TextFieldWithIcon> addTopLabelTextFieldWithIcon(GridPane gridPane,
                                                                                int rowIndex,
                                                                                String title,
                                                                                double top) {
        return addTopLabelTextFieldWithIcon(gridPane, rowIndex, 0, title, top);
    }

    public static Tuple2<Label, TextFieldWithIcon> addTopLabelTextFieldWithIcon(GridPane gridPane,
                                                                                int rowIndex,
                                                                                int columnIndex,
                                                                                String title,
                                                                                double top) {

        TextFieldWithIcon textFieldWithIcon = new TextFieldWithIcon();
        textFieldWithIcon.setFocusTraversable(false);

        return new Tuple2<>(addTopLabelWithVBox(gridPane, rowIndex, columnIndex, title, textFieldWithIcon, top).first, textFieldWithIcon);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    //  HyperlinkWithIcon
    ///////////////////////////////////////////////////////////////////////////////////////////


    public static HyperlinkWithIcon addHyperlinkWithIcon(GridPane gridPane, int rowIndex, String title, String url) {
        return addHyperlinkWithIcon(gridPane, rowIndex, title, url, 0);
    }

    public static HyperlinkWithIcon addHyperlinkWithIcon(GridPane gridPane,
                                                         int rowIndex,
                                                         String title,
                                                         String url,
                                                         double top) {
        HyperlinkWithIcon hyperlinkWithIcon = new ExternalHyperlink(title);
        hyperlinkWithIcon.setOnAction(e -> GUIUtil.openWebPage(url));
        GridPane.setRowIndex(hyperlinkWithIcon, rowIndex);
        GridPane.setColumnIndex(hyperlinkWithIcon, 0);
        GridPane.setMargin(hyperlinkWithIcon, new Insets(top, 0, 0, 0));
        GridPane.setHalignment(hyperlinkWithIcon, HPos.LEFT);
        gridPane.getChildren().add(hyperlinkWithIcon);
        return hyperlinkWithIcon;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + HyperlinkWithIcon
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<Label, HyperlinkWithIcon> addLabelHyperlinkWithIcon(GridPane gridPane,
                                                                             int rowIndex,
                                                                             String labelTitle,
                                                                             String title,
                                                                             String url) {
        return addLabelHyperlinkWithIcon(gridPane, rowIndex, labelTitle, title, url, 0);
    }

    public static Tuple2<Label, HyperlinkWithIcon> addLabelHyperlinkWithIcon(GridPane gridPane,
                                                                             int rowIndex,
                                                                             String labelTitle,
                                                                             String title,
                                                                             String url,
                                                                             double top) {
        Label label = addLabel(gridPane, rowIndex, labelTitle, top);

        HyperlinkWithIcon hyperlinkWithIcon = new ExternalHyperlink(title);
        hyperlinkWithIcon.setOnAction(e -> GUIUtil.openWebPage(url));
        GridPane.setRowIndex(hyperlinkWithIcon, rowIndex);
        GridPane.setMargin(hyperlinkWithIcon, new Insets(top, 0, 0, -4));
        gridPane.getChildren().add(hyperlinkWithIcon);
        return new Tuple2<>(label, hyperlinkWithIcon);
    }

    public static Tuple3<Label, HyperlinkWithIcon, VBox> addTopLabelHyperlinkWithIcon(GridPane gridPane,
                                                                                      int rowIndex,
                                                                                      int columnIndex,
                                                                                      String title,
                                                                                      String value,
                                                                                      String url,
                                                                                      double top) {
        Tuple3<Label, HyperlinkWithIcon, VBox> tuple = addTopLabelHyperlinkWithIcon(gridPane,
                rowIndex,
                title,
                value,
                url,
                top);
        GridPane.setColumnIndex(tuple.third, columnIndex);
        return tuple;
    }

    public static Tuple3<Label, HyperlinkWithIcon, VBox> addTopLabelHyperlinkWithIcon(GridPane gridPane,
                                                                                      int rowIndex,
                                                                                      String title,
                                                                                      String value,
                                                                                      String url,
                                                                                      double top) {
        HyperlinkWithIcon hyperlinkWithIcon = new ExternalHyperlink(value);
        hyperlinkWithIcon.setOnAction(e -> GUIUtil.openWebPage(url));
        hyperlinkWithIcon.getStyleClass().add(""hyperlink-with-icon"");
        GridPane.setRowIndex(hyperlinkWithIcon, rowIndex);
        Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, hyperlinkWithIcon, top - 15);
        return new Tuple3<>(topLabelWithVBox.first, hyperlinkWithIcon, topLabelWithVBox.second);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // TextArea
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static TextArea addTextArea(GridPane gridPane, int rowIndex, String prompt) {
        return addTextArea(gridPane, rowIndex, prompt, 0);
    }

    public static TextArea addTextArea(GridPane gridPane, int rowIndex, String prompt, double top) {

        JFXTextArea textArea = new BisqTextArea();
        textArea.setPromptText(prompt);
        textArea.setLabelFloat(true);
        textArea.setWrapText(true);

        GridPane.setRowIndex(textArea, rowIndex);
        GridPane.setColumnIndex(textArea, 0);
        GridPane.setMargin(textArea, new Insets(top + Layout.FLOATING_LABEL_DISTANCE, 0, 0, 0));
        gridPane.getChildren().add(textArea);

        return textArea;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + TextArea
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<Label, TextArea> addCompactTopLabelTextArea(GridPane gridPane,
                                                                     int rowIndex,
                                                                     String title,
                                                                     String prompt) {
        return addTopLabelTextArea(gridPane, rowIndex, title, prompt, -Layout.FLOATING_LABEL_DISTANCE);
    }

    public static Tuple2<Label, TextArea> addCompactTopLabelTextArea(GridPane gridPane,
                                                                     int rowIndex,
                                                                     int colIndex,
                                                                     String title,
                                                                     String prompt) {
        return addTopLabelTextArea(gridPane, rowIndex, colIndex, title, prompt, -Layout.FLOATING_LABEL_DISTANCE);
    }

    public static Tuple2<Label, TextArea> addTopLabelTextArea(GridPane gridPane,
                                                              int rowIndex,
                                                              String title,
                                                              String prompt) {
        return addTopLabelTextArea(gridPane, rowIndex, title, prompt, 0);
    }

    public static Tuple2<Label, TextArea> addTopLabelTextArea(GridPane gridPane,
                                                              int rowIndex,
                                                              int colIndex,
                                                              String title,
                                                              String prompt) {
        return addTopLabelTextArea(gridPane, rowIndex, colIndex, title, prompt, 0);
    }

    public static Tuple2<Label, TextArea> addTopLabelTextArea(GridPane gridPane,
                                                              int rowIndex,
                                                              String title,
                                                              String prompt,
                                                              double top) {

        return addTopLabelTextArea(gridPane, rowIndex, 0, title, prompt, top);
    }

    public static Tuple2<Label, TextArea> addTopLabelTextArea(GridPane gridPane, int rowIndex, int colIndex,
                                                              String title, String prompt, double top) {

        TextArea textArea = new BisqTextArea();
        textArea.setPromptText(prompt);
        textArea.setWrapText(true);

        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, textArea, top);
        GridPane.setColumnIndex(topLabelWithVBox.second, colIndex);

        return new Tuple2<>(topLabelWithVBox.first, textArea);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + DatePicker
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<Label, DatePicker> addTopLabelDatePicker(GridPane gridPane,
                                                                  int rowIndex,
                                                                  String title,
                                                                  double top) {
        return addTopLabelDatePicker(gridPane, rowIndex, 0, title, top);
    }

    public static Tuple2<Label, DatePicker> addTopLabelDatePicker(GridPane gridPane,
                                                                  int rowIndex,
                                                                  int columnIndex,
                                                                  String title,
                                                                  double top) {
        DatePicker datePicker = new JFXDatePicker();
        Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, columnIndex, title, datePicker, top);
        return new Tuple2<>(topLabelWithVBox.first, datePicker);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // 2 DatePickers
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<DatePicker, DatePicker> add2TopLabelDatePicker(GridPane gridPane,
                                                                        int rowIndex,
                                                                        int columnIndex,
                                                                        String title1,
                                                                        String title2,
                                                                        double top) {
        DatePicker datePicker1 = new JFXDatePicker();
        Tuple2<Label, VBox> topLabelWithVBox1 = getTopLabelWithVBox(title1, datePicker1);
        VBox vBox1 = topLabelWithVBox1.second;

        DatePicker datePicker2 = new JFXDatePicker();
        Tuple2<Label, VBox> topLabelWithVBox2 = getTopLabelWithVBox(title2, datePicker2);
        VBox vBox2 = topLabelWithVBox2.second;

        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);

        HBox hBox = new HBox();
        hBox.setSpacing(10);
        hBox.getChildren().addAll(spacer, vBox1, vBox2);

        GridPane.setRowIndex(hBox, rowIndex);
        GridPane.setColumnIndex(hBox, columnIndex);
        GridPane.setMargin(hBox, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(hBox);
        return new Tuple2<>(datePicker1, datePicker2);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + TxIdTextField
    ///////////////////////////////////////////////////////////////////////////////////////////

    @SuppressWarnings(""UnusedReturnValue"")
    public static Tuple2<Label, TxIdTextField> addLabelTxIdTextField(GridPane gridPane,
                                                                     int rowIndex,
                                                                     String title,
                                                                     String value) {
        return addLabelTxIdTextField(gridPane, rowIndex, title, value, 0);
    }

    public static Tuple2<Label, TxIdTextField> addLabelTxIdTextField(GridPane gridPane,
                                                                     int rowIndex,
                                                                     String title,
                                                                     String value,
                                                                     double top) {
        Label label = addLabel(gridPane, rowIndex, title, top);
        label.getStyleClass().add(""confirmation-label"");
        GridPane.setHalignment(label, HPos.LEFT);

        TxIdTextField txTextField = new TxIdTextField();
        txTextField.setup(value);
        GridPane.setRowIndex(txTextField, rowIndex);
        GridPane.setColumnIndex(txTextField, 1);
        gridPane.getChildren().add(txTextField);

        return new Tuple2<>(label, txTextField);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + ExplorerAddressTextField
    ///////////////////////////////////////////////////////////////////////////////////////////
    public static void addLabelExplorerAddressTextField(GridPane gridPane,
                                                        int rowIndex,
                                                        String title,
                                                        String address) {
        Label label = addLabel(gridPane, rowIndex, title, 0);
        label.getStyleClass().add(""confirmation-label"");
        GridPane.setHalignment(label, HPos.LEFT);

        ExplorerAddressTextField addressTextField = new ExplorerAddressTextField();
        addressTextField.setup(address);
        GridPane.setRowIndex(addressTextField, rowIndex);
        GridPane.setColumnIndex(addressTextField, 1);
        gridPane.getChildren().add(addressTextField);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + InputTextField
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static InputTextField addInputTextField(GridPane gridPane, int rowIndex, String title) {
        return addInputTextField(gridPane, rowIndex, title, 0);
    }

    public static InputTextField addInputTextField(GridPane gridPane, int rowIndex, String title, double top) {

        InputTextField inputTextField = new InputTextField();
        inputTextField.setLabelFloat(true);
        inputTextField.setPromptText(title);
        GridPane.setRowIndex(inputTextField, rowIndex);
        GridPane.setColumnIndex(inputTextField, 0);
        GridPane.setMargin(inputTextField, new Insets(top + Layout.FLOATING_LABEL_DISTANCE, 0, 0, 0));
        gridPane.getChildren().add(inputTextField);

        return inputTextField;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + InputTextField
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<Label, InputTextField> addTopLabelInputTextField(GridPane gridPane,
                                                                          int rowIndex,
                                                                          String title) {
        return addTopLabelInputTextField(gridPane, rowIndex, title, 0);
    }

    public static Tuple2<Label, InputTextField> addTopLabelInputTextField(GridPane gridPane,
                                                                          int rowIndex,
                                                                          String title,
                                                                          double top) {

        final Tuple3<Label, InputTextField, VBox> topLabelWithVBox = addTopLabelInputTextFieldWithVBox(gridPane, rowIndex, title, top);

        return new Tuple2<>(topLabelWithVBox.first, topLabelWithVBox.second);
    }

    public static Tuple3<Label, InputTextField, VBox> addTopLabelInputTextFieldWithVBox(GridPane gridPane,
                                                                                        int rowIndex,
                                                                                        String title,
                                                                                        double top) {

        InputTextField inputTextField = new InputTextField();

        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, inputTextField, top);

        return new Tuple3<>(topLabelWithVBox.first, inputTextField, topLabelWithVBox.second);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + InfoInputTextField
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<Label, InfoInputTextField> addTopLabelInfoInputTextField(GridPane gridPane,
                                                                                  int rowIndex,
                                                                                  String title) {
        return addTopLabelInfoInputTextField(gridPane, rowIndex, title, 0);
    }

    public static Tuple2<Label, InfoInputTextField> addTopLabelInfoInputTextField(GridPane gridPane,
                                                                                  int rowIndex,
                                                                                  String title,
                                                                                  double top) {

        InfoInputTextField inputTextField = new InfoInputTextField();

        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, inputTextField, top);

        return new Tuple2<>(topLabelWithVBox.first, inputTextField);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PasswordField
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static PasswordTextField addPasswordTextField(GridPane gridPane, int rowIndex, String title) {
        return addPasswordTextField(gridPane, rowIndex, title, 0);
    }

    public static PasswordTextField addPasswordTextField(GridPane gridPane, int rowIndex, String title, double top) {
        PasswordTextField passwordField = new PasswordTextField();
        passwordField.setPromptText(title);
        GridPane.setRowIndex(passwordField, rowIndex);
        GridPane.setColumnIndex(passwordField, 0);
        GridPane.setColumnSpan(passwordField, 2);
        GridPane.setMargin(passwordField, new Insets(top + 10, 0, 20, 0));
        gridPane.getChildren().add(passwordField);

        return passwordField;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + InputTextField + CheckBox
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple3<Label, InputTextField, ToggleButton> addTopLabelInputTextFieldSlideToggleButton(GridPane gridPane,
                                                                                                         int rowIndex,
                                                                                                         String title,
                                                                                                         String toggleButtonTitle) {

        InputTextField inputTextField = new InputTextField();
        ToggleButton toggleButton = new JFXToggleButton();
        toggleButton.setText(toggleButtonTitle);
        VBox.setMargin(toggleButton, new Insets(4, 0, 0, 0));

        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, inputTextField, 0);

        topLabelWithVBox.second.getChildren().add(toggleButton);

        return new Tuple3<>(topLabelWithVBox.first, inputTextField, toggleButton);
    }


    public static Tuple3<Label, InputTextField, ToggleButton> addTopLabelInputTextFieldSlideToggleButtonRight(GridPane gridPane,
                                                                                                         int rowIndex,
                                                                                                         String title,
                                                                                                         String toggleButtonTitle) {

        InputTextField inputTextField = new InputTextField();
        Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, inputTextField, 0);
        ToggleButton toggleButton = new JFXToggleButton();
        toggleButton.setText(toggleButtonTitle);
        HBox hBox = new HBox();
        hBox.getChildren().addAll(topLabelWithVBox.second, toggleButton);
        HBox.setMargin(toggleButton, new Insets(9, 0, 0, 0));
        gridPane.add(hBox, 0, rowIndex);
        GridPane.setMargin(hBox, new Insets(Layout.FLOATING_LABEL_DISTANCE, 0, 0, 0));
        return new Tuple3<>(topLabelWithVBox.first, inputTextField, toggleButton);
    }



    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + InputTextField + Button
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple3<Label, InputTextField, Button> addTopLabelInputTextFieldButton(GridPane gridPane,
                                                                                        int rowIndex,
                                                                                        String title,
                                                                                        String buttonTitle) {
        InputTextField inputTextField = new InputTextField();
        Button button = new AutoTooltipButton(buttonTitle);
        button.setDefaultButton(true);

        HBox hBox = new HBox();
        hBox.setSpacing(10);
        hBox.getChildren().addAll(inputTextField, button);
        HBox.setHgrow(inputTextField, Priority.ALWAYS);

        final Tuple2<Label, VBox> labelVBoxTuple2 = addTopLabelWithVBox(gridPane, rowIndex, title, hBox, 0);

        return new Tuple3<>(labelVBoxTuple2.first, inputTextField, button);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + TextField + Button
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple3<Label, TextField, Button> addTopLabelTextFieldButton(GridPane gridPane,
                                                                              int rowIndex,
                                                                              String title,
                                                                              String buttonTitle) {
        return addTopLabelTextFieldButton(gridPane, rowIndex, title, buttonTitle, 0);
    }

    public static Tuple3<Label, TextField, Button> addTopLabelTextFieldButton(GridPane gridPane,
                                                                              int rowIndex,
                                                                              String title,
                                                                              String buttonTitle,
                                                                              double top) {

        TextField textField = new BisqTextField();
        textField.setEditable(false);
        textField.setMouseTransparent(true);
        textField.setFocusTraversable(false);
        Button button = new AutoTooltipButton(buttonTitle);
        button.setDefaultButton(true);

        HBox hBox = new HBox();
        hBox.setSpacing(10);
        hBox.getChildren().addAll(textField, button);
        HBox.setHgrow(textField, Priority.ALWAYS);

        final Tuple2<Label, VBox> labelVBoxTuple2 = addTopLabelWithVBox(gridPane, rowIndex, title, hBox, top);

        return new Tuple3<>(labelVBoxTuple2.first, textField, button);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + InputTextField + Label  + InputTextField
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<InputTextField, InputTextField> addInputTextFieldInputTextField(GridPane gridPane,
                                                                                         int rowIndex,
                                                                                         String title1,
                                                                                         String title2) {

        InputTextField inputTextField1 = new InputTextField();
        inputTextField1.setPromptText(title1);
        inputTextField1.setLabelFloat(true);
        InputTextField inputTextField2 = new InputTextField();
        inputTextField2.setLabelFloat(true);
        inputTextField2.setPromptText(title2);

        HBox hBox = new HBox();
        hBox.setSpacing(10);
        hBox.getChildren().addAll(inputTextField1, inputTextField2);
        GridPane.setRowIndex(hBox, rowIndex);
        GridPane.setColumnIndex(hBox, 0);
        GridPane.setMargin(hBox, new Insets(Layout.FLOATING_LABEL_DISTANCE, 0, 0, 0));
        gridPane.getChildren().add(hBox);

        return new Tuple2<>(inputTextField1, inputTextField2);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + TextField + Label  + TextField
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple4<Label, TextField, Label, TextField> addCompactTopLabelTextFieldTopLabelTextField(GridPane gridPane,
                                                                                                          int rowIndex,
                                                                                                          String title1,
                                                                                                          String title2) {
        TextField textField1 = new BisqTextField();
        textField1.setEditable(false);
        textField1.setMouseTransparent(true);
        textField1.setFocusTraversable(false);

        final Tuple2<Label, VBox> topLabelWithVBox1 = getTopLabelWithVBox(title1, textField1);

        TextField textField2 = new BisqTextField();
        textField2.setEditable(false);
        textField2.setMouseTransparent(true);
        textField2.setFocusTraversable(false);

        final Tuple2<Label, VBox> topLabelWithVBox2 = getTopLabelWithVBox(title2, textField2);

        HBox hBox = new HBox();
        hBox.setSpacing(10);
        hBox.getChildren().addAll(topLabelWithVBox1.second, topLabelWithVBox2.second);
        GridPane.setRowIndex(hBox, rowIndex);
        gridPane.getChildren().add(hBox);

        return new Tuple4<>(topLabelWithVBox1.first, textField1, topLabelWithVBox2.first, textField2);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Button + CheckBox
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<Button, CheckBox> addButtonCheckBox(GridPane gridPane,
                                                             int rowIndex,
                                                             String buttonTitle,
                                                             String checkBoxTitle) {
        return addButtonCheckBox(gridPane, rowIndex, buttonTitle, checkBoxTitle, 0);
    }

    public static Tuple2<Button, CheckBox> addButtonCheckBox(GridPane gridPane,
                                                             int rowIndex,
                                                             String buttonTitle,
                                                             String checkBoxTitle,
                                                             double top) {
        final Tuple3<Button, CheckBox, HBox> tuple = addButtonCheckBoxWithBox(gridPane, rowIndex, buttonTitle, checkBoxTitle, top);
        return new Tuple2<>(tuple.first, tuple.second);
    }

    public static Tuple3<Button, CheckBox, HBox> addButtonCheckBoxWithBox(GridPane gridPane,
                                                                          int rowIndex,
                                                                          String buttonTitle,
                                                                          String checkBoxTitle,
                                                                          double top) {
        Button button = new AutoTooltipButton(buttonTitle);
        CheckBox checkBox = new AutoTooltipCheckBox(checkBoxTitle);

        HBox hBox = new HBox(20);
        hBox.setAlignment(Pos.CENTER_LEFT);
        hBox.getChildren().addAll(button, checkBox);
        GridPane.setRowIndex(hBox, rowIndex);
        hBox.setPadding(new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(hBox);

        return new Tuple3<>(button, checkBox, hBox);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // CheckBox
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static CheckBox addCheckBox(GridPane gridPane, int rowIndex, String checkBoxTitle) {
        return addCheckBox(gridPane, rowIndex, checkBoxTitle, 0);
    }

    public static CheckBox addCheckBox(GridPane gridPane, int rowIndex, String checkBoxTitle, double top) {
        return addCheckBox(gridPane, rowIndex, 0, checkBoxTitle, top);
    }

    public static CheckBox addCheckBox(GridPane gridPane,
                                       int rowIndex,
                                       int colIndex,
                                       String checkBoxTitle,
                                       double top) {
        CheckBox checkBox = new AutoTooltipCheckBox(checkBoxTitle);
        GridPane.setMargin(checkBox, new Insets(top, 0, 0, 0));
        GridPane.setRowIndex(checkBox, rowIndex);
        GridPane.setColumnIndex(checkBox, colIndex);
        gridPane.getChildren().add(checkBox);
        return checkBox;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // RadioButton
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static RadioButton addRadioButton(GridPane gridPane, int rowIndex, ToggleGroup toggleGroup, String title) {
        RadioButton radioButton = new AutoTooltipRadioButton(title);
        radioButton.setToggleGroup(toggleGroup);
        GridPane.setRowIndex(radioButton, rowIndex);
        gridPane.getChildren().add(radioButton);
        return radioButton;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + RadioButton + RadioButton
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple3<Label, RadioButton, RadioButton> addTopLabelRadioButtonRadioButton(GridPane gridPane,
                                                                                            int rowIndex,
                                                                                            ToggleGroup toggleGroup,
                                                                                            String title,
                                                                                            String radioButtonTitle1,
                                                                                            String radioButtonTitle2,
                                                                                            double top) {
        RadioButton radioButton1 = new AutoTooltipRadioButton(radioButtonTitle1);
        radioButton1.setToggleGroup(toggleGroup);
        radioButton1.setPadding(new Insets(6, 0, 0, 0));

        RadioButton radioButton2 = new AutoTooltipRadioButton(radioButtonTitle2);
        radioButton2.setToggleGroup(toggleGroup);
        radioButton2.setPadding(new Insets(6, 0, 0, 0));

        HBox hBox = new HBox();
        hBox.setSpacing(10);
        hBox.getChildren().addAll(radioButton1, radioButton2);

        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, hBox, top);

        return new Tuple3<>(topLabelWithVBox.first, radioButton1, radioButton2);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label + TextField + RadioButton + RadioButton
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple4<Label, TextField, RadioButton, RadioButton> addTopLabelTextFieldRadioButtonRadioButton(GridPane gridPane,
                                                                                                                int rowIndex,
                                                                                                                ToggleGroup toggleGroup,
                                                                                                                String title,
                                                                                                                String textFieldTitle,
                                                                                                                String radioButtonTitle1,
                                                                                                                String radioButtonTitle2,
                                                                                                                double top) {
        TextField textField = new BisqTextField();
        textField.setPromptText(textFieldTitle);

        RadioButton radioButton1 = new AutoTooltipRadioButton(radioButtonTitle1);
        radioButton1.setToggleGroup(toggleGroup);
        radioButton1.setPadding(new Insets(6, 0, 0, 0));

        RadioButton radioButton2 = new AutoTooltipRadioButton(radioButtonTitle2);
        radioButton2.setToggleGroup(toggleGroup);
        radioButton2.setPadding(new Insets(6, 0, 0, 0));

        HBox hBox = new HBox();
        hBox.setSpacing(10);
        hBox.getChildren().addAll(textField, radioButton1, radioButton2);

        final Tuple2<Label, VBox> labelVBoxTuple2 = addTopLabelWithVBox(gridPane, rowIndex, title, hBox, top);

        return new Tuple4<>(labelVBoxTuple2.first, textField, radioButton1, radioButton2);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label + CheckBox
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static CheckBox addLabelCheckBox(GridPane gridPane, int rowIndex, String title) {
        return addLabelCheckBox(gridPane, rowIndex, title, 0);
    }

    public static CheckBox addLabelCheckBox(GridPane gridPane, int rowIndex, String title, double top) {
        CheckBox checkBox = new AutoTooltipCheckBox(title);
        GridPane.setRowIndex(checkBox, rowIndex);
        GridPane.setColumnIndex(checkBox, 0);
        GridPane.setMargin(checkBox, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(checkBox);

        return checkBox;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // SlideToggleButton
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static ToggleButton addSlideToggleButton(GridPane gridPane, int rowIndex, String title) {
        return addSlideToggleButton(gridPane, rowIndex, title, 0);
    }

    public static ToggleButton addSlideToggleButton(GridPane gridPane, int rowIndex, String title, double top) {
        ToggleButton toggleButton = new AutoTooltipSlideToggleButton();
        toggleButton.setText(title);
        GridPane.setRowIndex(toggleButton, rowIndex);
        GridPane.setColumnIndex(toggleButton, 0);
        GridPane.setMargin(toggleButton, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(toggleButton);

        return toggleButton;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // ComboBox
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static <T> ComboBox<T> addComboBox(GridPane gridPane, int rowIndex, int top) {
        final JFXComboBox<T> comboBox = new JFXComboBox<>();

        GridPane.setRowIndex(comboBox, rowIndex);
        GridPane.setMargin(comboBox, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(comboBox);
        return comboBox;

    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label + ComboBox
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static <T> Tuple2<Label, ComboBox<T>> addTopLabelComboBox(GridPane gridPane,
                                                                     int rowIndex,
                                                                     String title,
                                                                     String prompt,
                                                                     int top) {
        final Tuple3<VBox, Label, ComboBox<T>> tuple3 = addTopLabelComboBox(title, prompt, 0);
        final VBox vBox = tuple3.first;

        GridPane.setRowIndex(vBox, rowIndex);
        GridPane.setMargin(vBox, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(vBox);

        return new Tuple2<>(tuple3.second, tuple3.third);
    }

    public static <T> Tuple3<VBox, Label, ComboBox<T>> addTopLabelComboBox(String title, String prompt) {
        return addTopLabelComboBox(title, prompt, 0);
    }

    public static <T> Tuple3<VBox, Label, ComboBox<T>> addTopLabelComboBox(String title, String prompt, int top) {
        Label label = getTopLabel(title);
        VBox vBox = getTopLabelVBox(top);

        final JFXComboBox<T> comboBox = new JFXComboBox<>();
        comboBox.setPromptText(prompt);

        vBox.getChildren().addAll(label, comboBox);

        return new Tuple3<>(vBox, label, comboBox);
    }

    public static <T> Tuple3<VBox, Label, AutocompleteComboBox<T>> addTopLabelAutocompleteComboBox(String title) {
        return addTopLabelAutocompleteComboBox(title, 0);
    }

    public static <T> Tuple3<VBox, Label, AutocompleteComboBox<T>> addTopLabelAutocompleteComboBox(String title,
                                                                                                   int top) {
        Label label = getTopLabel(title);
        VBox vBox = getTopLabelVBox(top);

        final AutocompleteComboBox<T> comboBox = new AutocompleteComboBox<>();

        vBox.getChildren().addAll(label, comboBox);

        return new Tuple3<>(vBox, label, comboBox);
    }

    @NotNull
    private static VBox getTopLabelVBox(int top) {
        VBox vBox = new VBox();
        vBox.setSpacing(0);
        vBox.setPadding(new Insets(top, 0, 0, 0));
        vBox.setAlignment(Pos.CENTER_LEFT);
        return vBox;
    }

    @NotNull
    private static Label getTopLabel(String title) {
        Label label = new AutoTooltipLabel(title);
        label.getStyleClass().add(""small-text"");
        return label;
    }

    public static Tuple2<Label, VBox> addTopLabelWithVBox(GridPane gridPane,
                                                          int rowIndex,
                                                          String title,
                                                          Node node,
                                                          double top) {
        return addTopLabelWithVBox(gridPane, rowIndex, 0, title, node, top);
    }

    @NotNull
    public static Tuple2<Label, VBox> addTopLabelWithVBox(GridPane gridPane,
                                                          int rowIndex,
                                                          int columnIndex,
                                                          String title,
                                                          Node node,
                                                          double top) {
        final Tuple2<Label, VBox> topLabelWithVBox = getTopLabelWithVBox(title, node);
        VBox vBox = topLabelWithVBox.second;

        GridPane.setRowIndex(vBox, rowIndex);
        GridPane.setColumnIndex(vBox, columnIndex);
        GridPane.setMargin(vBox, new Insets(top + Layout.FLOATING_LABEL_DISTANCE, 0, 0, 0));
        gridPane.getChildren().add(vBox);

        return new Tuple2<>(topLabelWithVBox.first, vBox);
    }

    @NotNull
    public static Tuple2<Label, VBox> getTopLabelWithVBox(String title, Node node) {
        Label label = getTopLabel(title);
        VBox vBox = getTopLabelVBox(0);
        vBox.getChildren().addAll(label, node);

        return new Tuple2<>(label, vBox);
    }

    public static Tuple3<Label, TextField, HBox> addTopLabelTextFieldWithHbox(GridPane gridPane,
                                                                              int rowIndex,
                                                                              String titleTextfield,
                                                                              double top) {
        HBox hBox = new HBox();
        hBox.setSpacing(10);

        TextField textField = new BisqTextField();

        final VBox topLabelVBox = getTopLabelVBox(5);
        final Label topLabel = getTopLabel(titleTextfield);
        topLabelVBox.getChildren().addAll(topLabel, textField);

        hBox.getChildren().addAll(topLabelVBox);

        GridPane.setRowIndex(hBox, rowIndex);
        GridPane.setMargin(hBox, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(hBox);

        return new Tuple3<>(topLabel, textField, hBox);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + ComboBox
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static <T> ComboBox<T> addComboBox(GridPane gridPane, int rowIndex) {
        return addComboBox(gridPane, rowIndex, null, 0);
    }

    public static <T> ComboBox<T> addComboBox(GridPane gridPane, int rowIndex, String title) {
        return addComboBox(gridPane, rowIndex, title, 0);
    }

    public static <T> ComboBox<T> addComboBox(GridPane gridPane, int rowIndex, String title, double top) {
        JFXComboBox<T> comboBox = new JFXComboBox<>();
        comboBox.setLabelFloat(true);
        comboBox.setPromptText(title);
        comboBox.setMaxWidth(Double.MAX_VALUE);

        // Default ComboBox does not show promptText after clear selection.
        // https://stackoverflow.com/questions/50569330/how-to-reset-combobox-and-display-prompttext?noredirect=1&lq=1
        comboBox.setButtonCell(getComboBoxButtonCell(title, comboBox));

        GridPane.setRowIndex(comboBox, rowIndex);
        GridPane.setColumnIndex(comboBox, 0);
        GridPane.setMargin(comboBox, new Insets(top + Layout.FLOATING_LABEL_DISTANCE, 0, 0, 0));
        gridPane.getChildren().add(comboBox);

        return comboBox;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + AutocompleteComboBox
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static <T> Tuple2<Label, ComboBox<T>> addLabelAutocompleteComboBox(GridPane gridPane,
                                                                              int rowIndex,
                                                                              String title,
                                                                              double top) {
        AutocompleteComboBox<T> comboBox = new AutocompleteComboBox<>();
        final Tuple2<Label, VBox> labelVBoxTuple2 = addTopLabelWithVBox(gridPane, rowIndex, title, comboBox, top);
        return new Tuple2<>(labelVBoxTuple2.first, comboBox);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label + TextField + AutocompleteComboBox
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static <T> Tuple4<Label, TextField, Label, ComboBox<T>> addTopLabelTextFieldAutocompleteComboBox(
            GridPane gridPane,
            int rowIndex,
            String titleTextfield,
            String titleCombobox
    ) {
        return addTopLabelTextFieldAutocompleteComboBox(gridPane, rowIndex, titleTextfield, titleCombobox, 0);
    }

    public static <T> Tuple4<Label, TextField, Label, ComboBox<T>> addTopLabelTextFieldAutocompleteComboBox(
            GridPane gridPane,
            int rowIndex,
            String titleTextfield,
            String titleCombobox,
            double top
    ) {
        HBox hBox = new HBox();
        hBox.setSpacing(10);

        final VBox topLabelVBox1 = getTopLabelVBox(5);
        final Label topLabel1 = getTopLabel(titleTextfield);
        final TextField textField = new BisqTextField();
        topLabelVBox1.getChildren().addAll(topLabel1, textField);

        final VBox topLabelVBox2 = getTopLabelVBox(5);
        final Label topLabel2 = getTopLabel(titleCombobox);
        AutocompleteComboBox<T> comboBox = new AutocompleteComboBox<>();
        comboBox.setPromptText(titleCombobox);
        comboBox.setLabelFloat(true);
        topLabelVBox2.getChildren().addAll(topLabel2, comboBox);

        hBox.getChildren().addAll(topLabelVBox1, topLabelVBox2);

        GridPane.setRowIndex(hBox, rowIndex);
        GridPane.setMargin(hBox, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(hBox);

        return new Tuple4<>(topLabel1, textField, topLabel2, comboBox);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label + ComboBox + ComboBox
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static <T, R> Tuple3<Label, ComboBox<R>, ComboBox<T>> addTopLabelComboBoxComboBox(GridPane gridPane,
                                                                                             int rowIndex,
                                                                                             String title) {
        return addTopLabelComboBoxComboBox(gridPane, rowIndex, title, 0);
    }

    public static <T, R> Tuple3<Label, ComboBox<T>, ComboBox<R>> addTopLabelComboBoxComboBox(GridPane gridPane,
                                                                                             int rowIndex,
                                                                                             String title,
                                                                                             double top) {
        HBox hBox = new HBox();
        hBox.setSpacing(10);

        ComboBox<T> comboBox1 = new JFXComboBox<>();
        ComboBox<R> comboBox2 = new JFXComboBox<>();
        hBox.getChildren().addAll(comboBox1, comboBox2);

        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, hBox, top);

        return new Tuple3<>(topLabelWithVBox.first, comboBox1, comboBox2);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label + ComboBox + TextField
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static <T> Tuple4<ComboBox<T>, Label, TextField, HBox> addComboBoxTopLabelTextField(GridPane gridPane,
                                                                                               int rowIndex,
                                                                                               String titleCombobox,
                                                                                               String titleTextfield) {
        return addComboBoxTopLabelTextField(gridPane, rowIndex, titleCombobox, titleTextfield, 0);
    }

    public static <T> Tuple4<ComboBox<T>, Label, TextField, HBox> addComboBoxTopLabelTextField(GridPane gridPane,
                                                                                               int rowIndex,
                                                                                               String titleCombobox,
                                                                                               String titleTextfield,
                                                                                               double top) {
        HBox hBox = new HBox();
        hBox.setSpacing(10);

        JFXComboBox<T> comboBox = new JFXComboBox<>();
        comboBox.setPromptText(titleCombobox);
        comboBox.setLabelFloat(true);

        TextField textField = new BisqTextField();

        final VBox topLabelVBox = getTopLabelVBox(5);
        final Label topLabel = getTopLabel(titleTextfield);
        topLabelVBox.getChildren().addAll(topLabel, textField);

        hBox.getChildren().addAll(comboBox, topLabelVBox);

        GridPane.setRowIndex(hBox, rowIndex);
        GridPane.setMargin(hBox, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(hBox);

        return new Tuple4<>(comboBox, topLabel, textField, hBox);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + ComboBox + Button
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static <T> Tuple3<Label, ComboBox<T>, Button> addLabelComboBoxButton(GridPane gridPane,
                                                                                int rowIndex,
                                                                                String title,
                                                                                String buttonTitle) {
        return addLabelComboBoxButton(gridPane, rowIndex, title, buttonTitle, 0);
    }

    public static <T> Tuple3<Label, ComboBox<T>, Button> addLabelComboBoxButton(GridPane gridPane,
                                                                                int rowIndex,
                                                                                String title,
                                                                                String buttonTitle,
                                                                                double top) {
        Label label = addLabel(gridPane, rowIndex, title, top);

        HBox hBox = new HBox();
        hBox.setSpacing(10);

        Button button = new AutoTooltipButton(buttonTitle);
        button.setDefaultButton(true);

        ComboBox<T> comboBox = new JFXComboBox<>();

        hBox.getChildren().addAll(comboBox, button);

        GridPane.setRowIndex(hBox, rowIndex);
        GridPane.setColumnIndex(hBox, 1);
        GridPane.setMargin(hBox, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(hBox);

        return new Tuple3<>(label, comboBox, button);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + ComboBox + Label
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static <T> Tuple3<Label, ComboBox<T>, TextField> addLabelComboBoxLabel(GridPane gridPane,
                                                                                  int rowIndex,
                                                                                  String title,
                                                                                  String textFieldText) {
        return addLabelComboBoxLabel(gridPane, rowIndex, title, textFieldText, 0);
    }

    public static <T> Tuple3<Label, ComboBox<T>, TextField> addLabelComboBoxLabel(GridPane gridPane,
                                                                                  int rowIndex,
                                                                                  String title,
                                                                                  String textFieldText,
                                                                                  double top) {
        Label label = addLabel(gridPane, rowIndex, title, top);

        HBox hBox = new HBox();
        hBox.setSpacing(10);

        ComboBox<T> comboBox = new JFXComboBox<>();
        TextField textField = new TextField(textFieldText);
        textField.setEditable(false);
        textField.setMouseTransparent(true);
        textField.setFocusTraversable(false);

        hBox.getChildren().addAll(comboBox, textField);
        GridPane.setRowIndex(hBox, rowIndex);
        GridPane.setColumnIndex(hBox, 1);
        GridPane.setMargin(hBox, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(hBox);

        return new Tuple3<>(label, comboBox, textField);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + TxIdTextField
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<Label, TxIdTextField> addLabelTxIdTextField(GridPane gridPane,
                                                                     int rowIndex,
                                                                     int columnIndex,
                                                                     String title) {
        return addLabelTxIdTextField(gridPane, rowIndex, columnIndex, title, 0);
    }

    public static Tuple2<Label, TxIdTextField> addLabelTxIdTextField(GridPane gridPane,
                                                                     int rowIndex,
                                                                     int columnIndex,
                                                                     String title,
                                                                     double top) {
        Label label = addLabel(gridPane, rowIndex, title, top);

        TxIdTextField txIdTextField = new TxIdTextField();
        GridPane.setRowIndex(txIdTextField, rowIndex);
        GridPane.setColumnIndex(txIdTextField, columnIndex);
        GridPane.setMargin(txIdTextField, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(txIdTextField);

        return new Tuple2<>(label, txIdTextField);
    }


    public static Tuple3<Label, TxIdTextField, VBox> addTopLabelTxIdTextField(GridPane gridPane,
                                                                              int rowIndex,
                                                                              String title,
                                                                              double top) {
        TxIdTextField textField = new TxIdTextField();
        textField.setFocusTraversable(false);

        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, textField, top);

        // TODO not 100% sure if that is a good idea....
        //topLabelWithVBox.first.getStyleClass().add(""jfx-text-field-top-label"");

        return new Tuple3<>(topLabelWithVBox.first, textField, topLabelWithVBox.second);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + TextFieldWithCopyIcon
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<Label, TextFieldWithCopyIcon> addCompactTopLabelTextFieldWithCopyIcon(GridPane gridPane,
                                                                                               int rowIndex,
                                                                                               String title,
                                                                                               String value) {
        return addTopLabelTextFieldWithCopyIcon(gridPane, rowIndex, title, value, -Layout.FLOATING_LABEL_DISTANCE);
    }

    public static Tuple2<Label, TextFieldWithCopyIcon> addCompactTopLabelTextFieldWithCopyIcon(GridPane gridPane,
                                                                                               int rowIndex,
                                                                                               int colIndex,
                                                                                               String title,
                                                                                               String value,
                                                                                               double top) {
        return addTopLabelTextFieldWithCopyIcon(gridPane, rowIndex, colIndex, title, value, top - Layout.FLOATING_LABEL_DISTANCE);
    }

    public static Tuple2<Label, TextFieldWithCopyIcon> addCompactTopLabelTextFieldWithCopyIcon(GridPane gridPane,
                                                                                               int rowIndex,
                                                                                               int colIndex,
                                                                                               String title) {
        return addTopLabelTextFieldWithCopyIcon(gridPane, rowIndex, colIndex, title, """", -Layout.FLOATING_LABEL_DISTANCE);
    }

    public static Tuple2<Label, TextFieldWithCopyIcon> addCompactTopLabelTextFieldWithCopyIcon(GridPane gridPane,
                                                                                               int rowIndex,
                                                                                               int colIndex,
                                                                                               String title,
                                                                                               String value) {
        return addTopLabelTextFieldWithCopyIcon(gridPane, rowIndex, colIndex, title, value, -Layout.FLOATING_LABEL_DISTANCE);
    }

    public static Tuple2<Label, TextFieldWithCopyIcon> addCompactTopLabelTextFieldWithCopyIcon(GridPane gridPane,
                                                                                               int rowIndex,
                                                                                               int colIndex,
                                                                                               String title,
                                                                                               String value,
                                                                                               boolean onlyCopyTextAfterDelimiter) {
        return addTopLabelTextFieldWithCopyIcon(gridPane, rowIndex, colIndex, title, value, -Layout.FLOATING_LABEL_DISTANCE, onlyCopyTextAfterDelimiter);
    }

    public static Tuple2<Label, TextFieldWithCopyIcon> addTopLabelTextFieldWithCopyIcon(GridPane gridPane,
                                                                                        int rowIndex,
                                                                                        String title,
                                                                                        String value) {
        return addTopLabelTextFieldWithCopyIcon(gridPane, rowIndex, title, value, 0);
    }

    public static Tuple2<Label, TextFieldWithCopyIcon> addTopLabelTextFieldWithCopyIcon(GridPane gridPane,
                                                                                        int rowIndex,
                                                                                        String title,
                                                                                        String value,
                                                                                        double top) {
        return addTopLabelTextFieldWithCopyIcon(gridPane, rowIndex, title, value, top, null);
    }

    public static Tuple2<Label, TextFieldWithCopyIcon> addTopLabelTextFieldWithCopyIcon(GridPane gridPane,
                                                                                        int rowIndex,
                                                                                        String title,
                                                                                        String value,
                                                                                        double top,
                                                                                        String styleClass) {
        TextFieldWithCopyIcon textFieldWithCopyIcon = new TextFieldWithCopyIcon(styleClass);
        textFieldWithCopyIcon.setText(value);

        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, textFieldWithCopyIcon, top);

        return new Tuple2<>(topLabelWithVBox.first, textFieldWithCopyIcon);
    }

    public static Tuple2<Label, TextFieldWithCopyIcon> addTopLabelTextFieldWithCopyIcon(GridPane gridPane,
                                                                                        int rowIndex,
                                                                                        int colIndex,
                                                                                        String title,
                                                                                        String value,
                                                                                        double top,
                                                                                        boolean onlyCopyTextAfterDelimiter) {

        TextFieldWithCopyIcon textFieldWithCopyIcon = new TextFieldWithCopyIcon();
        textFieldWithCopyIcon.setText(value);
        textFieldWithCopyIcon.setCopyTextAfterDelimiter(true);

        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, textFieldWithCopyIcon, top);
        topLabelWithVBox.second.setAlignment(Pos.TOP_LEFT);
        GridPane.setColumnIndex(topLabelWithVBox.second, colIndex);

        return new Tuple2<>(topLabelWithVBox.first, textFieldWithCopyIcon);
    }

    public static Tuple2<Label, TextFieldWithCopyIcon> addTopLabelTextFieldWithCopyIcon(GridPane gridPane,
                                                                                        int rowIndex,
                                                                                        int colIndex,
                                                                                        String title,
                                                                                        String value,
                                                                                        double top) {

        TextFieldWithCopyIcon textFieldWithCopyIcon = new TextFieldWithCopyIcon();
        textFieldWithCopyIcon.setText(value);

        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, textFieldWithCopyIcon, top);
        topLabelWithVBox.second.setAlignment(Pos.TOP_LEFT);
        GridPane.setColumnIndex(topLabelWithVBox.second, colIndex);

        return new Tuple2<>(topLabelWithVBox.first, textFieldWithCopyIcon);
    }

    public static Tuple2<Label, TextFieldWithCopyIcon> addConfirmationLabelTextFieldWithCopyIcon(GridPane gridPane,
                                                                                                 int rowIndex,
                                                                                                 String title,
                                                                                                 String value) {
        return addConfirmationLabelTextFieldWithCopyIcon(gridPane, rowIndex, title, value, 0);
    }

    public static Tuple2<Label, TextFieldWithCopyIcon> addConfirmationLabelTextFieldWithCopyIcon(GridPane gridPane,
                                                                                                 int rowIndex,
                                                                                                 String title,
                                                                                                 String value,
                                                                                                 double top) {
        Label label = addLabel(gridPane, rowIndex, title, top);
        label.getStyleClass().add(""confirmation-label"");
        GridPane.setHalignment(label, HPos.LEFT);

        TextFieldWithCopyIcon textFieldWithCopyIcon = new TextFieldWithCopyIcon(""confirmation-text-field-as-label"");
        textFieldWithCopyIcon.setText(value);
        GridPane.setRowIndex(textFieldWithCopyIcon, rowIndex);
        GridPane.setColumnIndex(textFieldWithCopyIcon, 1);
        GridPane.setMargin(textFieldWithCopyIcon, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(textFieldWithCopyIcon);

        return new Tuple2<>(label, textFieldWithCopyIcon);
    }
    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + AddressTextField
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static AddressTextField addAddressTextField(GridPane gridPane, int rowIndex, String title) {
        return addAddressTextField(gridPane, rowIndex, title, 0);
    }

    public static AddressTextField addAddressTextField(GridPane gridPane, int rowIndex, String title, double top) {
        AddressTextField addressTextField = new AddressTextField(title);
        GridPane.setRowIndex(addressTextField, rowIndex);
        GridPane.setColumnIndex(addressTextField, 0);
        GridPane.setMargin(addressTextField, new Insets(top + 20, 0, 0, 0));
        gridPane.getChildren().add(addressTextField);

        return addressTextField;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + FundsTextField
    ///////////////////////////////////////////////////////////////////////////////////////////
    public static FundsTextField addFundsTextfield(GridPane gridPane, int rowIndex, String text) {
        return addFundsTextfield(gridPane, rowIndex, text, 0);
    }

    public static FundsTextField addFundsTextfield(GridPane gridPane, int rowIndex, String text, double top) {

        FundsTextField fundsTextField = new FundsTextField();
        fundsTextField.getTextField().setPromptText(text);
        GridPane.setRowIndex(fundsTextField, rowIndex);
        GridPane.setColumnIndex(fundsTextField, 0);
        GridPane.setMargin(fundsTextField, new Insets(top + 20, 0, 0, 0));
        gridPane.getChildren().add(fundsTextField);

        return fundsTextField;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + InfoTextField
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple3<Label, InfoTextField, VBox> addCompactTopLabelInfoTextField(GridPane gridPane,
                                                                                     int rowIndex,
                                                                                     String labelText,
                                                                                     String fieldText) {
        return addTopLabelInfoTextField(gridPane, rowIndex, labelText, fieldText,
                -Layout.FLOATING_LABEL_DISTANCE);
    }

    public static Tuple3<Label, InfoTextField, VBox> addTopLabelInfoTextField(GridPane gridPane,
                                                                              int rowIndex,
                                                                              String labelText,
                                                                              String fieldText,
                                                                              double top) {
        InfoTextField infoTextField = new InfoTextField();
        infoTextField.setText(fieldText);

        final Tuple2<Label, VBox> labelVBoxTuple2 = addTopLabelWithVBox(gridPane, rowIndex, labelText, infoTextField, top);

        return new Tuple3<>(labelVBoxTuple2.first, infoTextField, labelVBoxTuple2.second);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + BsqAddressTextField
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple3<Label, BsqAddressTextField, VBox> addLabelBsqAddressTextField(GridPane gridPane,
                                                                                       int rowIndex,
                                                                                       String title) {
        return addLabelBsqAddressTextField(gridPane, rowIndex, title, 0);
    }

    public static Tuple3<Label, BsqAddressTextField, VBox> addLabelBsqAddressTextField(GridPane gridPane,
                                                                                       int rowIndex,
                                                                                       String title,
                                                                                       double top) {
        BsqAddressTextField addressTextField = new BsqAddressTextField();
        addressTextField.setFocusTraversable(false);

        Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, addressTextField, top - 15);

        return new Tuple3<>(topLabelWithVBox.first, addressTextField, topLabelWithVBox.second);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + BalanceTextField
    ///////////////////////////////////////////////////////////////////////////////////////////


    public static BalanceTextField addBalanceTextField(GridPane gridPane, int rowIndex, String title) {
        return addBalanceTextField(gridPane, rowIndex, title, 20);
    }

    public static BalanceTextField addBalanceTextField(GridPane gridPane, int rowIndex, String title, double top) {
        BalanceTextField balanceTextField = new BalanceTextField(title);
        GridPane.setRowIndex(balanceTextField, rowIndex);
        GridPane.setColumnIndex(balanceTextField, 0);
        GridPane.setMargin(balanceTextField, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(balanceTextField);

        return balanceTextField;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label + Button
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<Label, Button> addTopLabelButton(GridPane gridPane,
                                                          int rowIndex,
                                                          String labelText,
                                                          String buttonTitle) {
        return addTopLabelButton(gridPane, rowIndex, labelText, buttonTitle, 0);
    }

    public static Tuple2<Label, Button> addTopLabelButton(GridPane gridPane,
                                                          int rowIndex,
                                                          String labelText,
                                                          String buttonTitle,
                                                          double top) {
        Button button = new AutoTooltipButton(buttonTitle);
        button.setDefaultButton(true);

        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, labelText, button, top);

        return new Tuple2<>(topLabelWithVBox.first, button);
    }

    public static Tuple2<Label, Button> addConfirmationLabelButton(GridPane gridPane,
                                                                   int rowIndex,
                                                                   String labelText,
                                                                   String buttonTitle,
                                                                   double top) {
        Label label = addLabel(gridPane, rowIndex, labelText);
        label.getStyleClass().add(""confirmation-label"");

        Button button = new AutoTooltipButton(buttonTitle);
        button.getStyleClass().add(""confirmation-value"");
        button.setDefaultButton(true);

        GridPane.setColumnIndex(button, 1);
        GridPane.setRowIndex(button, rowIndex);
        GridPane.setMargin(label, new Insets(top, 0, 0, 0));
        GridPane.setHalignment(label, HPos.LEFT);
        GridPane.setMargin(button, new Insets(top, 0, 0, 0));

        gridPane.getChildren().add(button);

        return new Tuple2<>(label, button);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label + Button + Button
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple3<Label, Button, Button> addTopLabel2Buttons(GridPane gridPane,
                                                                    int rowIndex,
                                                                    String labelText,
                                                                    String title1,
                                                                    String title2,
                                                                    double top) {
        HBox hBox = new HBox();
        hBox.setSpacing(10);

        Button button1 = new AutoTooltipButton(title1);
        button1.setDefaultButton(true);
        button1.getStyleClass().add(""action-button"");
        button1.setDefaultButton(true);
        button1.setMaxWidth(Double.MAX_VALUE);
        HBox.setHgrow(button1, Priority.ALWAYS);

        Button button2 = new AutoTooltipButton(title2);
        button2.setMaxWidth(Double.MAX_VALUE);
        HBox.setHgrow(button2, Priority.ALWAYS);

        hBox.getChildren().addAll(button1, button2);

        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, labelText, hBox, top);

        return new Tuple3<>(topLabelWithVBox.first, button1, button2);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Button
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Button addButton(GridPane gridPane, int rowIndex, String title) {
        return addButton(gridPane, rowIndex, title, 0);
    }

    public static Button addButtonAfterGroup(GridPane gridPane, int rowIndex, String title) {
        return addButton(gridPane, rowIndex, title, 15);
    }

    public static Button addPrimaryActionButton(GridPane gridPane, int rowIndex, String title, double top) {
        return addButton(gridPane, rowIndex, title, top, true);
    }

    public static Button addPrimaryActionButtonAFterGroup(GridPane gridPane, int rowIndex, String title) {
        return addPrimaryActionButton(gridPane, rowIndex, title, 15);
    }

    public static Button addButton(GridPane gridPane, int rowIndex, String title, double top) {
        return addButton(gridPane, rowIndex, title, top, false);
    }

    public static Button addButton(GridPane gridPane, int rowIndex, String title, double top, boolean isPrimaryAction) {
        Button button = new AutoTooltipButton(title);
        if (isPrimaryAction) {
            button.setDefaultButton(true);
            button.getStyleClass().add(""action-button"");
        }

        GridPane.setRowIndex(button, rowIndex);
        GridPane.setColumnIndex(button, 0);
        gridPane.getChildren().add(button);
        GridPane.setMargin(button, new Insets(top, 0, 0, 0));
        return button;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Button + Button
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<Button, Button> add2Buttons(GridPane gridPane,
                                                     int rowIndex,
                                                     String title1,
                                                     String title2) {
        return add2Buttons(gridPane, rowIndex, title1, title2, 0);
    }

    public static Tuple2<Button, Button> add2ButtonsAfterGroup(GridPane gridPane,
                                                               int rowIndex,
                                                               String title1,
                                                               String title2) {
        return add2ButtonsAfterGroup(gridPane, rowIndex, title1, title2, true);
    }

    public static Tuple2<Button, Button> add2ButtonsAfterGroup(GridPane gridPane,
                                                               int rowIndex,
                                                               String title1,
                                                               String title2,
                                                               boolean hasPrimaryButton) {
        return add2Buttons(gridPane, rowIndex, title1, title2, 15, hasPrimaryButton);
    }

    public static Tuple2<Button, Button> add2Buttons(GridPane gridPane,
                                                     int rowIndex,
                                                     String title1,
                                                     String title2,
                                                     double top) {
        return add2Buttons(gridPane, rowIndex, title1, title2, top, true);
    }

    public static Tuple2<Button, Button> add2Buttons(GridPane gridPane, int rowIndex, String title1,
                                                     String title2, double top, boolean hasPrimaryButton) {
        final Tuple3<Button, Button, HBox> buttonButtonHBoxTuple3 = add2ButtonsWithBox(gridPane, rowIndex, title1, title2, top, hasPrimaryButton);
        return new Tuple2<>(buttonButtonHBoxTuple3.first, buttonButtonHBoxTuple3.second);
    }

    public static Tuple3<Button, Button, HBox> add2ButtonsWithBox(GridPane gridPane, int rowIndex, String title1,
                                                                  String title2, double top, boolean hasPrimaryButton) {
        HBox hBox = new HBox();
        hBox.setSpacing(10);

        Button button1 = new AutoTooltipButton(title1);

        if (hasPrimaryButton) {
            button1.getStyleClass().add(""action-button"");
            button1.setDefaultButton(true);
        }

        button1.setMaxWidth(Double.MAX_VALUE);
        HBox.setHgrow(button1, Priority.ALWAYS);

        Button button2 = new AutoTooltipButton(title2);
        button2.setMaxWidth(Double.MAX_VALUE);
        HBox.setHgrow(button2, Priority.ALWAYS);

        hBox.getChildren().addAll(button1, button2);

        GridPane.setRowIndex(hBox, rowIndex);
        GridPane.setColumnIndex(hBox, 0);
        GridPane.setMargin(hBox, new Insets(top, 10, 0, 0));
        gridPane.getChildren().add(hBox);
        return new Tuple3<>(button1, button2, hBox);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Button + Button + Button
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple3<Button, Button, Button> add3Buttons(GridPane gridPane,
                                                             int rowIndex,
                                                             String title1,
                                                             String title2,
                                                             String title3) {
        return add3Buttons(gridPane, rowIndex, title1, title2, title3, 0);
    }

    public static Tuple3<Button, Button, Button> add3ButtonsAfterGroup(GridPane gridPane,
                                                                       int rowIndex,
                                                                       String title1,
                                                                       String title2,
                                                                       String title3) {
        return add3Buttons(gridPane, rowIndex, title1, title2, title3, 15);
    }

    public static Tuple3<Button, Button, Button> add3Buttons(GridPane gridPane,
                                                             int rowIndex,
                                                             String title1,
                                                             String title2,
                                                             String title3,
                                                             double top) {
        HBox hBox = new HBox();
        hBox.setSpacing(10);
        Button button1 = new AutoTooltipButton(title1);

        button1.getStyleClass().add(""action-button"");
        button1.setDefaultButton(true);
        button1.setMaxWidth(Double.MAX_VALUE);
        HBox.setHgrow(button1, Priority.ALWAYS);

        Button button2 = new AutoTooltipButton(title2);
        button2.setMaxWidth(Double.MAX_VALUE);
        HBox.setHgrow(button2, Priority.ALWAYS);

        Button button3 = new AutoTooltipButton(title3);
        button3.setMaxWidth(Double.MAX_VALUE);
        HBox.setHgrow(button3, Priority.ALWAYS);

        hBox.getChildren().addAll(button1, button2, button3);
        GridPane.setRowIndex(hBox, rowIndex);
        GridPane.setColumnIndex(hBox, 0);
        GridPane.setMargin(hBox, new Insets(top, 10, 0, 0));
        gridPane.getChildren().add(hBox);
        return new Tuple3<>(button1, button2, button3);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Button + ProgressIndicator + Label
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple4<Button, BusyAnimation, Label, HBox> addButtonBusyAnimationLabelAfterGroup(GridPane gridPane,
                                                                                                   int rowIndex,
                                                                                                   int colIndex,
                                                                                                   String buttonTitle) {
        return addButtonBusyAnimationLabel(gridPane, rowIndex, colIndex, buttonTitle, 15);
    }

    public static Tuple4<Button, BusyAnimation, Label, HBox> addButtonBusyAnimationLabelAfterGroup(GridPane gridPane,
                                                                                                   int rowIndex,
                                                                                                   String buttonTitle) {
        return addButtonBusyAnimationLabelAfterGroup(gridPane, rowIndex, 0, buttonTitle);
    }

    public static Tuple4<Button, BusyAnimation, Label, HBox> addButtonBusyAnimationLabel(GridPane gridPane,
                                                                                         int rowIndex,
                                                                                         int colIndex,
                                                                                         String buttonTitle,
                                                                                         double top) {
        HBox hBox = new HBox();
        hBox.setSpacing(10);

        Button button = new AutoTooltipButton(buttonTitle);
        button.setDefaultButton(true);
        button.getStyleClass().add(""action-button"");

        BusyAnimation busyAnimation = new BusyAnimation(false);

        Label label = new AutoTooltipLabel();
        hBox.setAlignment(Pos.CENTER_LEFT);
        hBox.getChildren().addAll(button, busyAnimation, label);

        GridPane.setRowIndex(hBox, rowIndex);
        GridPane.setHalignment(hBox, HPos.LEFT);
        GridPane.setColumnIndex(hBox, colIndex);
        GridPane.setMargin(hBox, new Insets(top, 0, 0, 0));
        gridPane.getChildren().add(hBox);

        return new Tuple4<>(button, busyAnimation, label, hBox);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Trade: HBox, InputTextField, Label
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple3<HBox, InputTextField, Label> getEditableValueBox(String promptText) {
        InputTextField input = new InputTextField(60);
        input.setPromptText(promptText);

        Label label = new AutoTooltipLabel(Res.getBaseCurrencyCode());
        label.getStyleClass().add(""input-label"");

        HBox box = new HBox();
        HBox.setHgrow(input, Priority.ALWAYS);
        input.setMaxWidth(Double.MAX_VALUE);
        box.getStyleClass().add(""input-with-border"");
        box.getChildren().addAll(input, label);
        return new Tuple3<>(box, input, label);
    }

    public static Tuple3<HBox, InfoInputTextField, Label> getEditableValueBoxWithInfo(String promptText) {
        InfoInputTextField infoInputTextField = new InfoInputTextField(60);
        InputTextField input = infoInputTextField.getInputTextField();
        input.setPromptText(promptText);

        Label label = new AutoTooltipLabel(Res.getBaseCurrencyCode());
        label.getStyleClass().add(""input-label"");

        HBox box = new HBox();
        HBox.setHgrow(infoInputTextField, Priority.ALWAYS);
        infoInputTextField.setMaxWidth(Double.MAX_VALUE);
        box.getStyleClass().add(""input-with-border"");
        box.getChildren().addAll(infoInputTextField, label);
        return new Tuple3<>(box, infoInputTextField, label);
    }

    public static Tuple3<HBox, TextField, Label> getNonEditableValueBox() {
        final Tuple3<HBox, InputTextField, Label> editableValueBox = getEditableValueBox("""");
        final TextField textField = editableValueBox.second;

        textField.setDisable(true);

        return new Tuple3<>(editableValueBox.first, editableValueBox.second, editableValueBox.third);
    }

    public static Tuple3<HBox, InfoInputTextField, Label> getNonEditableValueBoxWithInfo() {

        final Tuple3<HBox, InfoInputTextField, Label> editableValueBoxWithInfo = getEditableValueBoxWithInfo("""");

        TextField textField = editableValueBoxWithInfo.second.getInputTextField();
        textField.setDisable(true);

        return editableValueBoxWithInfo;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Trade: Label, VBox
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<Label, VBox> getTradeInputBox(Pane amountValueBox, String descriptionText) {
        Label descriptionLabel = new AutoTooltipLabel(descriptionText);
        descriptionLabel.setId(""input-description-label"");
        descriptionLabel.setPrefWidth(190);

        VBox box = new VBox();
        box.setPadding(new Insets(10, 0, 0, 0));
        box.setSpacing(2);
        box.getChildren().addAll(descriptionLabel, amountValueBox);
        return new Tuple2<>(descriptionLabel, box);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + List
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static <T> Tuple3<Label, ListView<T>, VBox> addTopLabelListView(GridPane gridPane,
                                                                           int rowIndex,
                                                                           String title) {
        return addTopLabelListView(gridPane, rowIndex, title, 0);
    }

    public static <T> Tuple3<Label, ListView<T>, VBox> addTopLabelListView(GridPane gridPane,
                                                                           int rowIndex,
                                                                           String title,
                                                                           double top) {
        ListView<T> listView = new ListView<>();

        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, listView, top);
        return new Tuple3<>(topLabelWithVBox.first, listView, topLabelWithVBox.second);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Label  + FlowPane
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Tuple2<Label, FlowPane> addTopLabelFlowPane(GridPane gridPane,
                                                              int rowIndex,
                                                              String title,
                                                              double top) {
        return addTopLabelFlowPane(gridPane, rowIndex, title, top, 0);
    }

    public static Tuple2<Label, FlowPane> addTopLabelFlowPane(GridPane gridPane,
                                                              int rowIndex,
                                                              String title,
                                                              double top,
                                                              double bottom) {
        FlowPane flowPane = new FlowPane();
        flowPane.setPadding(new Insets(10, 10, 10, 10));
        flowPane.setVgap(10);
        flowPane.setHgap(10);
        final Tuple2<Label, VBox> topLabelWithVBox = addTopLabelWithVBox(gridPane, rowIndex, title, flowPane, top);

        GridPane.setMargin(topLabelWithVBox.second, new Insets(top + Layout.FLOATING_LABEL_DISTANCE,
                0, bottom, 0));

        return new Tuple2<>(topLabelWithVBox.first, flowPane);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Remove
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static void removeRowFromGridPane(GridPane gridPane, int gridRow) {
        removeRowsFromGridPane(gridPane, gridRow, gridRow);
    }

    public static void removeRowsFromGridPane(GridPane gridPane, int fromGridRow, int toGridRow) {
        Set<Node> nodes = new CopyOnWriteArraySet<>(gridPane.getChildren());
        nodes.stream()
                .filter(e -> GridPane.getRowIndex(e) != null && GridPane.getRowIndex(e) >= fromGridRow && GridPane.getRowIndex(e) <= toGridRow)
                .forEach(e -> gridPane.getChildren().remove(e));
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Icons
    ///////////////////////////////////////////////////////////////////////////////////////////

    public static Text getIconForLabel(GlyphIcons icon, String iconSize, Label label, String style) {
        if (icon.fontFamily().equals(MATERIAL_DESIGN_ICONS)) {
            final Text textIcon = MaterialDesignIconFactory.get().createIcon(icon, iconSize);
            textIcon.setOpacity(0.7);
            if (style != null) {
                textIcon.getStyleClass().add(style);
            }
            label.setContentDisplay(ContentDisplay.LEFT);
            label.setGraphic(textIcon);
            return textIcon;
        } else {
            throw new IllegalArgumentException(""Not supported icon type"");
        }
    }

    public static Text getIconForLabel(GlyphIcons icon, String iconSize, Label label) {
        return getIconForLabel(icon, iconSize, label, null);
    }

    public static Text getSmallIconForLabel(GlyphIcons icon, Label label, String style) {
        return getIconForLabel(icon, ""0.769em"", label, style);
    }

    public static Text getSmallIconForLabel(GlyphIcons icon, Label label) {
        return getIconForLabel(icon, ""0.769em"", label);
    }

    public static Text getRegularIconForLabel(GlyphIcons icon, Label label) {
        return getIconForLabel(icon, ""1.231em"", label);
    }

    public static Text getIcon(GlyphIcons icon) {
        return getIcon(icon, ""1.231em"");
    }

    public static Text getBigIcon(GlyphIcons icon) {
        return getIcon(icon, ""2em"");
    }

    public static Text getMediumSizeIcon(GlyphIcons icon) {
        return getIcon(icon, ""1.5em"");
    }

    public static Text getIcon(GlyphIcons icon, String iconSize) {
        Text textIcon;

        if (icon.fontFamily().equals(MATERIAL_DESIGN_ICONS)) {
            textIcon = MaterialDesignIconFactory.get().createIcon(icon, iconSize);
        } else {
            throw new IllegalArgumentException(""Not supported icon type"");
        }

        return textIcon;
    }


    public static Label getIcon(AwesomeIcon icon) {
        final Label label = new Label();
        AwesomeDude.setIcon(label, icon);
        return label;
    }

    public static Label getIconForLabel(AwesomeIcon icon, Label label, String fontSize) {
        AwesomeDude.setIcon(label, icon, fontSize);
        return label;
    }

    public static Button getIconButton(GlyphIcons icon) {
        return getIconButton(icon, ""highlight"");
    }

    public static Button getIconButton(GlyphIcons icon, String styleClass) {
        return getIconButton(icon, styleClass, ""2em"");
    }

    public static Button getRegularIconButton(GlyphIcons icon) {
        return getIconButton(icon, ""highlight"", ""1.6em"");
    }

    public static Button getRegularIconButton(GlyphIcons icon, String styleClass) {
        return getIconButton(icon, styleClass, ""1.6em"");
    }

    public static Button getIconButton(GlyphIcons icon, String styleClass, String iconSize) {
        if (icon.fontFamily().equals(MATERIAL_DESIGN_ICONS)) {
            Button iconButton = MaterialDesignIconFactory.get().createIconButton(icon,
                    """", iconSize, null, ContentDisplay.CENTER);
            iconButton.setId(""icon-button"");
            iconButton.getGraphic().getStyleClass().add(styleClass);
            iconButton.setPrefWidth(20);
            iconButton.setPrefHeight(20);
            iconButton.setPadding(new Insets(0));
            return iconButton;
        } else {
            throw new IllegalArgumentException(""Not supported icon type"");
        }
    }

    public static <T> TableView<T> addTableViewWithHeader(GridPane gridPane, int rowIndex, String headerText) {
        return addTableViewWithHeader(gridPane, rowIndex, headerText, 0, null);
    }

    public static <T> TableView<T> addTableViewWithHeader(GridPane gridPane,
                                                          int rowIndex,
                                                          String headerText,
                                                          String groupStyle) {
        return addTableViewWithHeader(gridPane, rowIndex, headerText, 0, groupStyle);
    }

    public static <T> TableView<T> addTableViewWithHeader(GridPane gridPane, int rowIndex, String headerText, int top) {
        return addTableViewWithHeader(gridPane, rowIndex, headerText, top, null);
    }

    public static <T> TableView<T> addTableViewWithHeader(GridPane gridPane,
                                                          int rowIndex,
                                                          String headerText,
                                                          int top,
                                                          String groupStyle) {
        TitledGroupBg titledGroupBg = addTitledGroupBg(gridPane, rowIndex, 1, headerText, top);

        if (groupStyle != null) titledGroupBg.getStyleClass().add(groupStyle);

        TableView<T> tableView = new TableView<>();
        GridPane.setRowIndex(tableView, rowIndex);
        GridPane.setMargin(tableView, new Insets(top + 30, -10, 5, -10));
        gridPane.getChildren().add(tableView);
        tableView.setPlaceholder(new AutoTooltipLabel(Res.get(""table.placeholder.noData"")));
        tableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        return tableView;
    }
}",1,777 587 2000 123 773 809 657 2001 2002 61 362 59 331 330 331 777 809 2003 2004 40 2005 2006 44 704 2007 44 704 2008 44 2001 2009 41 123 792 2004 40 2006 44 2007 44 2008 44 2009 44 1500 41 59 125 777 809 2003 2004 40 2005 2006 44 704 2007 44 704 2010 44 704 2008 44 2001 2009 41 123 2003 2011 61 2004 40 2006 44 2007 44 2008 44 2009 44 1500 41 59 2005 46 2012 40 2011 44 2010 41 59 792 2011 59 125 777 809 2003 2004 40 2005 2006 44 704 2007 44 704 2010 44 704 2008 44 2001 2009 44 625 2013 41 123 2003 2014 61 2004 40 2006 44 2007 44 2008 44 2009 44 2013 41 59 2005 46 2015 40 2014 44 2010 41 59 792 2014 59 125 777 809 2003 2004 40 2005 2006 44 704 2007 44 704 2008 44 2001 2009 44 625 2013 41 123 2003 2016 61 744 2003 40 41 59 2016 46 2017 40 2009 41 59 2016 46 2018 40 41 46 2019 40 2006 46 2020 40 41 41 59 2005 46 2021 40 2016 44 2007 41 59 2005 46 2022 40 2016 44 2008 41 59 2005 46 2023 40 2016 44 744 2024 40 2013 43 1502 44 45 1502 44 45 1503 44 45 1502 41 41 59 2006 46 2025 40 41 46 2026 40 2016 41 59 792 2016 59 125 331 330 331 777 809 2027 2028 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2028 40 2006 44 2007 44 2009 44 1500 41 59 125 777 809 2027 2028 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 2027 2029 61 744 2030 40 2009 41 59 2005 46 2031 40 2029 44 2007 41 59 2005 46 2032 40 2029 44 744 2033 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2034 40 41 46 2035 40 2029 41 59 792 2029 59 125 331 330 331 777 809 2036 60 2027 44 2027 44 2037 62 2038 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2039 41 123 792 2038 40 2006 44 2007 44 2009 44 2039 44 1500 41 59 125 777 809 2036 60 2027 44 2027 44 2037 62 2038 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2039 44 625 2013 41 123 2027 2040 61 744 2041 40 2009 41 59 2027 2042 61 744 2041 40 2039 41 59 2037 2043 61 744 2037 40 41 59 2043 46 2044 40 41 46 2045 40 2040 44 2042 41 59 2005 46 2046 40 2043 44 2007 41 59 2005 46 2047 40 2043 44 744 2048 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2044 40 41 46 2049 40 2043 41 59 792 744 2036 60 62 40 2040 44 2042 44 2043 41 59 125 331 330 331 777 809 2027 2050 40 2005 2006 44 704 2007 41 123 792 2050 40 2006 44 2007 44 1500 41 59 125 777 809 2027 2050 40 2005 2006 44 704 2007 44 2001 2051 41 123 792 2050 40 2006 44 2007 44 2051 44 1500 41 59 125 777 809 2027 2050 40 2005 2006 44 704 2007 44 625 2013 41 123 792 2050 40 2006 44 2007 44 362 44 2013 41 59 125 777 809 2027 2050 40 2005 2006 44 704 2007 44 2001 2051 44 625 2013 41 123 792 2050 40 2006 44 2007 44 2051 44 2013 44 1504 41 59 125 777 809 2027 2050 40 2005 2006 44 704 2007 44 2001 2051 44 625 2013 44 625 2052 41 123 2027 2053 61 744 2054 40 2051 41 59 2053 46 2055 40 2056 41 59 2053 46 2057 40 2052 41 59 2005 46 2058 40 2053 44 2059 46 2060 41 59 2005 46 2061 40 2053 44 2062 46 2063 41 59 2005 46 2064 40 2053 44 2007 41 59 2005 46 2065 40 2053 44 744 2066 40 2013 43 2067 46 2068 44 1500 44 1500 44 1500 41 41 59 2006 46 2069 40 41 46 2070 40 2053 41 59 792 2053 59 125 331 330 331 777 809 2036 60 2027 44 2071 44 2037 62 2072 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2073 40 2006 44 2007 44 2009 44 362 44 45 1503 41 59 125 777 809 2036 60 2027 44 2071 44 2037 62 2072 40 2005 2006 44 704 2007 44 704 2010 44 2001 2009 41 123 2036 60 2027 44 2071 44 2037 62 2074 61 2075 40 2006 44 2007 44 2009 44 362 44 45 1503 41 59 2005 46 2076 40 2074 46 2077 44 2010 41 59 792 2074 59 125 777 809 2036 60 2027 44 2071 44 2037 62 2072 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 792 2078 40 2006 44 2007 44 2009 44 362 44 2013 45 1503 41 59 125 777 809 2036 60 2027 44 2071 44 2037 62 2072 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 41 123 792 2072 40 2006 44 2007 44 2009 44 2079 44 1500 41 59 125 777 809 2036 60 2027 44 2071 44 2037 62 2072 40 2005 2006 44 704 2007 44 704 2010 44 2001 2009 44 2001 2079 44 625 2013 41 123 2036 60 2027 44 2071 44 2037 62 2080 61 2081 40 2006 44 2007 44 2009 44 2079 44 2013 45 1503 41 59 2005 46 2082 40 2080 46 2083 44 2010 41 59 792 2080 59 125 777 809 2036 60 2027 44 2071 44 2037 62 2072 40 2005 2006 44 704 2007 44 704 2010 44 2001 2009 44 625 2013 41 123 2036 60 2027 44 2071 44 2037 62 2084 61 2085 40 2006 44 2007 44 2009 44 362 44 2013 45 1503 41 59 2005 46 2086 40 2084 46 2087 44 2010 41 59 792 2084 59 125 777 809 2036 60 2027 44 2071 44 2037 62 2072 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 44 625 2013 41 123 792 2088 40 2006 44 2007 44 2009 44 2079 44 2013 45 1503 41 59 125 777 809 2036 60 2027 44 2071 44 2037 62 2089 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2089 40 2006 44 2007 44 2009 44 362 44 1500 41 59 125 777 809 2036 60 2027 44 2071 44 2037 62 2090 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 41 123 792 2089 40 2006 44 2007 44 2009 44 2079 44 45 2091 46 2092 41 59 125 777 809 2036 60 2027 44 2071 44 2037 62 2090 40 2005 2006 44 704 2007 44 704 2093 44 2001 2009 44 2001 2079 41 123 657 2036 60 2027 44 2071 44 2037 62 2094 61 2089 40 2006 44 2007 44 2009 44 2079 44 45 2095 46 2096 41 59 2005 46 2097 40 2094 46 2098 44 2093 41 59 792 2094 59 125 777 809 2036 60 2027 44 2071 44 2037 62 2090 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 44 625 2013 41 123 792 2089 40 2006 44 2007 44 2009 44 2079 44 2013 45 2099 46 2100 41 59 125 777 809 2036 60 2027 44 2071 44 2037 62 2089 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 41 123 792 2089 40 2006 44 2007 44 2009 44 2079 44 1500 41 59 125 777 809 2036 60 2027 44 2071 44 2037 62 2089 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 792 2089 40 2006 44 2007 44 2009 44 362 44 2013 41 59 125 777 809 2036 60 2027 44 2071 44 2037 62 2089 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 44 625 2013 41 123 2071 2101 61 744 2102 40 2079 41 59 2101 46 2103 40 2104 41 59 2101 46 2105 40 2104 41 59 657 2106 60 2027 44 2037 62 2107 61 2108 40 2006 44 2007 44 2009 44 2101 44 2013 41 59 330 330 792 744 2036 60 62 40 2107 46 2109 44 2101 44 2107 46 2110 41 59 125 777 809 2111 60 2071 44 2112 62 2113 40 2005 2006 44 704 2007 44 2001 2009 41 123 2071 2114 61 744 2115 40 41 59 2114 46 2116 40 2009 41 59 2114 46 2117 40 2118 41 59 2114 46 2119 40 2118 41 59 2114 46 2120 40 2121 46 2122 41 59 2112 2123 61 744 2124 40 362 41 59 2123 46 2125 40 362 41 59 2123 46 2126 40 41 46 2127 40 2123 46 2128 40 41 41 59 2037 2129 61 744 2037 40 2123 41 59 2129 46 2130 40 2131 46 2132 41 59 2133 2134 61 744 2133 40 2114 44 2129 41 59 2027 2135 61 2136 40 2009 41 59 2037 2137 61 2138 40 1500 41 59 2137 46 2139 40 41 46 2140 40 2135 44 2134 41 59 2006 46 2139 40 41 46 2141 40 2137 41 59 2005 46 2142 40 2137 44 2007 41 59 2005 46 2143 40 2137 44 744 2144 40 2121 46 2145 44 1500 44 1500 44 1500 41 41 59 792 744 2111 60 62 40 2114 44 2123 41 59 125 331 330 331 777 809 2111 60 2027 44 2027 62 2146 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 41 123 792 2146 40 2006 44 2007 44 2147 44 2148 44 1500 41 59 125 777 809 2111 60 2027 44 2027 62 2146 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 44 625 2013 41 123 2027 2149 61 2028 40 2006 44 2007 44 2147 41 59 2149 46 2150 40 41 46 2151 40 362 41 59 2027 2152 61 2028 40 2006 44 2007 44 2148 41 59 2152 46 2150 40 41 46 2151 40 362 41 59 2005 46 2153 40 2152 44 1501 41 59 2005 46 2154 40 2149 44 744 2155 40 2013 44 1500 44 1500 44 1500 41 41 59 2005 46 2156 40 2149 44 2157 46 2158 41 59 2005 46 2154 40 2152 44 744 2155 40 2013 44 1500 44 1500 44 1500 41 41 59 792 744 2111 60 62 40 2149 44 2152 41 59 125 777 809 2111 60 2027 44 2071 62 2159 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 41 123 792 2159 40 2006 44 2007 44 2147 44 2148 44 1500 41 59 125 777 809 2111 60 2027 44 2071 62 2159 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 44 625 2013 41 123 2027 2160 61 2028 40 2006 44 2007 44 2147 41 59 2160 46 2161 40 41 46 2162 40 362 41 59 2071 2163 61 744 2164 40 2148 41 59 2006 46 2165 40 41 46 2162 40 2163 41 59 2163 46 2161 40 41 46 2162 40 362 41 59 2163 46 2166 40 2167 41 59 2163 46 2168 40 2167 41 59 2005 46 2169 40 2163 44 2007 41 59 2005 46 2170 40 2163 44 1501 41 59 2005 46 2171 40 2160 44 744 2172 40 2013 44 1500 44 1500 44 1500 41 41 59 2005 46 2173 40 2160 44 2174 46 2175 41 59 2005 46 2171 40 2163 44 744 2172 40 2013 44 1500 44 1500 44 1500 41 41 59 792 744 2111 60 62 40 2160 44 2163 41 59 125 777 809 2111 60 2027 44 2176 62 2177 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 41 123 2027 2178 61 2028 40 2006 44 2007 44 2147 41 59 2178 46 2179 40 41 46 2180 40 362 41 59 2176 2181 61 744 2176 40 362 41 59 2181 46 2182 40 2148 41 59 2005 46 2183 40 2181 44 2007 41 59 2006 46 2184 40 41 46 2180 40 2181 41 59 2005 46 2185 40 2181 44 1501 41 59 2005 46 2186 40 2178 44 2187 46 2188 41 59 792 744 2111 60 62 40 2178 44 2181 41 59 125 777 809 2111 60 2027 44 2189 62 2190 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 44 625 2013 41 123 2027 2191 61 2028 40 2006 44 2007 44 2147 41 59 2191 46 2192 40 41 46 2193 40 362 41 59 2189 2194 61 2195 40 2006 44 2007 44 2148 41 59 40 40 2196 41 2194 41 46 2197 40 2198 41 59 2005 46 2199 40 2194 44 1501 41 59 2005 46 2200 40 2191 44 744 2201 40 2013 44 1500 44 1500 44 1500 41 41 59 2005 46 2202 40 2191 44 2203 46 2204 41 59 2005 46 2200 40 2194 44 744 2201 40 2013 44 1500 44 1500 44 1500 41 41 59 792 744 2111 60 62 40 2191 44 2194 41 59 125 331 330 331 777 809 2111 60 2027 44 2205 62 2206 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 792 2206 40 2006 44 2007 44 1500 44 2009 44 2013 41 59 125 777 809 2111 60 2027 44 2205 62 2206 40 2005 2006 44 704 2007 44 704 2010 44 2001 2009 44 625 2013 41 123 2205 2207 61 744 2205 40 41 59 2207 46 2208 40 2209 41 59 792 744 2111 60 62 40 2210 40 2006 44 2007 44 2010 44 2009 44 2207 44 2013 41 46 2211 44 2207 41 59 125 331 330 331 777 809 2212 2213 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2214 41 123 792 2213 40 2006 44 2007 44 2009 44 2214 44 1500 41 59 125 777 809 2212 2213 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2214 44 625 2013 41 123 2212 2215 61 744 2216 40 2009 41 59 2215 46 2217 40 2218 45 62 2219 46 2220 40 2214 41 41 59 2005 46 2221 40 2215 44 2007 41 59 2005 46 2222 40 2215 44 1500 41 59 2005 46 2223 40 2215 44 744 2224 40 2013 44 1500 44 1500 44 1500 41 41 59 2005 46 2225 40 2215 44 2226 46 2227 41 59 2006 46 2228 40 41 46 2229 40 2215 41 59 792 2215 59 125 331 330 331 777 809 2111 60 2027 44 2212 62 2230 40 2005 2006 44 704 2007 44 2001 2231 44 2001 2009 44 2001 2214 41 123 792 2230 40 2006 44 2007 44 2231 44 2009 44 2214 44 1500 41 59 125 777 809 2111 60 2027 44 2212 62 2230 40 2005 2006 44 704 2007 44 2001 2231 44 2001 2009 44 2001 2214 44 625 2013 41 123 2027 2232 61 2028 40 2006 44 2007 44 2231 44 2013 41 59 2212 2233 61 744 2234 40 2009 41 59 2233 46 2235 40 2236 45 62 2237 46 2238 40 2214 41 41 59 2005 46 2239 40 2233 44 2007 41 59 2005 46 2240 40 2233 44 744 2241 40 2013 44 1500 44 1500 44 45 1502 41 41 59 2006 46 2242 40 41 46 2243 40 2233 41 59 792 744 2111 60 62 40 2232 44 2233 41 59 125 777 809 2036 60 2027 44 2212 44 2037 62 2244 40 2005 2006 44 704 2007 44 704 2010 44 2001 2009 44 2001 2079 44 2001 2214 44 625 2013 41 123 2036 60 2027 44 2212 44 2037 62 2245 61 2244 40 2006 44 2007 44 2009 44 2079 44 2214 44 2013 41 59 2005 46 2246 40 2245 46 2247 44 2010 41 59 792 2245 59 125 777 809 2036 60 2027 44 2212 44 2037 62 2244 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 44 2001 2214 44 625 2013 41 123 2212 2248 61 744 2249 40 2079 41 59 2248 46 2250 40 2251 45 62 2252 46 2253 40 2214 41 41 59 2248 46 2254 40 41 46 2255 40 362 41 59 2005 46 2256 40 2248 44 2007 41 59 2111 60 2027 44 2037 62 2257 61 2258 40 2006 44 2007 44 2009 44 2248 44 2013 45 1503 41 59 792 744 2036 60 62 40 2257 46 2259 44 2248 44 2257 46 2260 41 59 125 331 330 331 777 809 2189 2261 40 2005 2006 44 704 2007 44 2001 2262 41 123 792 2261 40 2006 44 2007 44 2262 44 1500 41 59 125 777 809 2189 2261 40 2005 2006 44 704 2007 44 2001 2262 44 625 2013 41 123 2263 2264 61 744 2265 40 41 59 2264 46 2266 40 2262 41 59 2264 46 2267 40 2268 41 59 2264 46 2269 40 2268 41 59 2005 46 2270 40 2264 44 2007 41 59 2005 46 2271 40 2264 44 1500 41 59 2005 46 2272 40 2264 44 744 2273 40 2013 43 2274 46 2275 44 1500 44 1500 44 1500 41 41 59 2006 46 2276 40 41 46 2277 40 2264 41 59 792 2264 59 125 331 330 331 777 809 2111 60 2027 44 2189 62 2278 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2262 41 123 792 2279 40 2006 44 2007 44 2009 44 2262 44 45 2280 46 2281 41 59 125 777 809 2111 60 2027 44 2189 62 2278 40 2005 2006 44 704 2007 44 704 2093 44 2001 2009 44 2001 2262 41 123 792 2282 40 2006 44 2007 44 2093 44 2009 44 2262 44 45 2283 46 2284 41 59 125 777 809 2111 60 2027 44 2189 62 2285 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2262 41 123 792 2285 40 2006 44 2007 44 2009 44 2262 44 1500 41 59 125 777 809 2111 60 2027 44 2189 62 2285 40 2005 2006 44 704 2007 44 704 2093 44 2001 2009 44 2001 2262 41 123 792 2285 40 2006 44 2007 44 2093 44 2009 44 2262 44 1500 41 59 125 777 809 2111 60 2027 44 2189 62 2285 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2262 44 625 2013 41 123 792 2285 40 2006 44 2007 44 1500 44 2009 44 2262 44 2013 41 59 125 777 809 2111 60 2027 44 2189 62 2285 40 2005 2006 44 704 2007 44 704 2093 44 2001 2009 44 2001 2262 44 625 2013 41 123 2189 2286 61 744 2287 40 41 59 2286 46 2288 40 2262 41 59 2286 46 2289 40 2290 41 59 657 2111 60 2027 44 2037 62 2291 61 2292 40 2006 44 2007 44 2009 44 2286 44 2013 41 59 2005 46 2293 40 2291 46 2294 44 2093 41 59 792 744 2111 60 62 40 2291 46 2295 44 2286 41 59 125 331 330 331 777 809 2111 60 2027 44 2296 62 2297 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 792 2297 40 2006 44 2007 44 1500 44 2009 44 2013 41 59 125 777 809 2111 60 2027 44 2296 62 2297 40 2005 2006 44 704 2007 44 704 2010 44 2001 2009 44 625 2013 41 123 2296 2298 61 744 2299 40 41 59 2111 60 2027 44 2037 62 2300 61 2301 40 2006 44 2007 44 2010 44 2009 44 2298 44 2013 41 59 792 744 2111 60 62 40 2300 46 2302 44 2298 41 59 125 331 330 331 777 809 2111 60 2296 44 2296 62 2303 40 2005 2006 44 704 2007 44 704 2010 44 2001 2147 44 2001 2148 44 625 2013 41 123 2296 2304 61 744 2305 40 41 59 2111 60 2027 44 2037 62 2306 61 2307 40 2147 44 2304 41 59 2037 2308 61 2306 46 2309 59 2296 2310 61 744 2305 40 41 59 2111 60 2027 44 2037 62 2311 61 2307 40 2148 44 2310 41 59 2037 2312 61 2311 46 2309 59 2313 2314 61 744 2313 40 41 59 2315 46 2316 40 2314 44 2317 46 2318 41 59 2315 2319 61 744 2315 40 41 59 2319 46 2320 40 1502 41 59 2319 46 2321 40 41 46 2322 40 2314 44 2308 44 2312 41 59 2005 46 2323 40 2319 44 2007 41 59 2005 46 2324 40 2319 44 2010 41 59 2005 46 2325 40 2319 44 744 2326 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2321 40 41 46 2327 40 2319 41 59 792 744 2111 60 62 40 2304 44 2310 41 59 125 331 330 331 64 2328 40 362 41 777 809 2111 60 2027 44 2329 62 2330 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 41 123 792 2330 40 2006 44 2007 44 2009 44 2079 44 1500 41 59 125 777 809 2111 60 2027 44 2329 62 2330 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 44 625 2013 41 123 2027 2331 61 2028 40 2006 44 2007 44 2009 44 2013 41 59 2331 46 2332 40 41 46 2333 40 362 41 59 2005 46 2334 40 2331 44 2335 46 2336 41 59 2329 2337 61 744 2329 40 41 59 2337 46 2338 40 2079 41 59 2005 46 2339 40 2337 44 2007 41 59 2005 46 2340 40 2337 44 1501 41 59 2006 46 2341 40 41 46 2333 40 2337 41 59 792 744 2111 60 62 40 2331 44 2337 41 59 125 331 330 331 777 809 865 2342 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2343 41 123 2027 2344 61 2028 40 2006 44 2007 44 2009 44 1500 41 59 2344 46 2345 40 41 46 2346 40 362 41 59 2005 46 2347 40 2344 44 2348 46 2349 41 59 2350 2351 61 744 2350 40 41 59 2351 46 2352 40 2343 41 59 2005 46 2353 40 2351 44 2007 41 59 2005 46 2354 40 2351 44 1501 41 59 2006 46 2355 40 41 46 2346 40 2351 41 59 125 331 330 331 777 809 2356 2357 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2357 40 2006 44 2007 44 2009 44 1500 41 59 125 777 809 2356 2357 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 2356 2358 61 744 2356 40 41 59 2358 46 2359 40 2360 41 59 2358 46 2361 40 2009 41 59 2005 46 2362 40 2358 44 2007 41 59 2005 46 2363 40 2358 44 1500 41 59 2005 46 2364 40 2358 44 744 2365 40 2013 43 2366 46 2367 44 1500 44 1500 44 1500 41 41 59 2006 46 2368 40 41 46 2369 40 2358 41 59 792 2358 59 125 331 330 331 777 809 2111 60 2027 44 2356 62 2370 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2370 40 2006 44 2007 44 2009 44 1500 41 59 125 777 809 2111 60 2027 44 2356 62 2370 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 657 2036 60 2027 44 2356 44 2037 62 2371 61 2372 40 2006 44 2007 44 2009 44 2013 41 59 792 744 2111 60 62 40 2371 46 2373 44 2371 46 2374 41 59 125 777 809 2036 60 2027 44 2356 44 2037 62 2375 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 2356 2376 61 744 2356 40 41 59 657 2111 60 2027 44 2037 62 2377 61 2378 40 2006 44 2007 44 2009 44 2376 44 2013 41 59 792 744 2036 60 62 40 2377 46 2379 44 2376 44 2377 46 2380 41 59 125 331 330 331 777 809 2111 60 2027 44 2381 62 2382 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2382 40 2006 44 2007 44 2009 44 1500 41 59 125 777 809 2111 60 2027 44 2381 62 2382 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 2381 2383 61 744 2381 40 41 59 657 2111 60 2027 44 2037 62 2384 61 2385 40 2006 44 2007 44 2009 44 2383 44 2013 41 59 792 744 2111 60 62 40 2384 46 2386 44 2383 41 59 125 331 330 331 777 809 2387 2388 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2388 40 2006 44 2007 44 2009 44 1500 41 59 125 777 809 2387 2388 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 2387 2389 61 744 2387 40 41 59 2389 46 2390 40 2009 41 59 2005 46 2391 40 2389 44 2007 41 59 2005 46 2392 40 2389 44 1500 41 59 2005 46 2393 40 2389 44 1502 41 59 2005 46 2394 40 2389 44 744 2395 40 2013 43 1502 44 1500 44 1503 44 1500 41 41 59 2006 46 2396 40 41 46 2397 40 2389 41 59 792 2389 59 125 331 330 331 777 809 2036 60 2027 44 2356 44 2398 62 2399 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2400 41 123 2356 2401 61 744 2356 40 41 59 2398 2402 61 744 2403 40 41 59 2402 46 2404 40 2400 41 59 2037 46 2405 40 2402 44 744 2406 40 1502 44 1500 44 1500 44 1500 41 41 59 657 2111 60 2027 44 2037 62 2407 61 2408 40 2006 44 2007 44 2009 44 2401 44 1500 41 59 2407 46 2409 46 2410 40 41 46 2411 40 2402 41 59 792 744 2036 60 62 40 2407 46 2412 44 2401 44 2402 41 59 125 777 809 2036 60 2027 44 2356 44 2398 62 2413 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2400 41 123 2356 2414 61 744 2356 40 41 59 2111 60 2027 44 2037 62 2415 61 2416 40 2006 44 2007 44 2009 44 2414 44 1500 41 59 2398 2417 61 744 2418 40 41 59 2417 46 2419 40 2400 41 59 2420 2421 61 744 2420 40 41 59 2421 46 2422 40 41 46 2423 40 2415 46 2424 44 2417 41 59 2420 46 2425 40 2417 44 744 2426 40 1502 44 1500 44 1500 44 1500 41 41 59 2006 46 2427 40 2421 44 1500 44 2007 41 59 2005 46 2425 40 2421 44 744 2426 40 2428 46 2429 44 1500 44 1500 44 1500 41 41 59 792 744 2036 60 62 40 2415 46 2430 44 2414 44 2417 41 59 125 331 330 331 777 809 2036 60 2027 44 2356 44 2112 62 2431 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2432 41 123 2356 2433 61 744 2356 40 41 59 2112 2434 61 744 2435 40 2432 41 59 2434 46 2436 40 2437 41 59 2438 2439 61 744 2438 40 41 59 2439 46 2440 40 1502 41 59 2439 46 2441 40 41 46 2442 40 2433 44 2434 41 59 2438 46 2443 40 2433 44 2444 46 2445 41 59 657 2111 60 2027 44 2037 62 2446 61 2447 40 2006 44 2007 44 2009 44 2439 44 1500 41 59 792 744 2036 60 62 40 2446 46 2448 44 2433 44 2434 41 59 125 331 330 331 777 809 2036 60 2027 44 2071 44 2112 62 2449 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2432 41 123 792 2449 40 2006 44 2007 44 2009 44 2432 44 1500 41 59 125 777 809 2036 60 2027 44 2071 44 2112 62 2449 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2432 44 625 2013 41 123 2071 2450 61 744 2451 40 41 59 2450 46 2452 40 2453 41 59 2450 46 2454 40 2455 41 59 2450 46 2456 40 2453 41 59 2112 2457 61 744 2458 40 2432 41 59 2457 46 2459 40 2455 41 59 2460 2461 61 744 2460 40 41 59 2461 46 2462 40 1502 41 59 2461 46 2463 40 41 46 2464 40 2450 44 2457 41 59 2460 46 2465 40 2450 44 2466 46 2467 41 59 657 2111 60 2027 44 2037 62 2468 61 2469 40 2006 44 2007 44 2009 44 2461 44 2013 41 59 792 744 2036 60 62 40 2468 46 2470 44 2450 44 2457 41 59 125 331 330 331 777 809 2111 60 2356 44 2356 62 2471 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 41 123 2356 2472 61 744 2356 40 41 59 2472 46 2473 40 2147 41 59 2472 46 2474 40 2475 41 59 2356 2476 61 744 2356 40 41 59 2476 46 2474 40 2475 41 59 2476 46 2473 40 2148 41 59 2477 2478 61 744 2477 40 41 59 2478 46 2479 40 1502 41 59 2478 46 2480 40 41 46 2481 40 2472 44 2476 41 59 2005 46 2482 40 2478 44 2007 41 59 2005 46 2483 40 2478 44 1500 41 59 2005 46 2484 40 2478 44 744 2485 40 2486 46 2487 44 1500 44 1500 44 1500 41 41 59 2006 46 2480 40 41 46 2488 40 2478 41 59 792 744 2111 60 62 40 2472 44 2476 41 59 125 331 330 331 777 809 2489 60 2027 44 2071 44 2027 44 2071 62 2490 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 41 123 2071 2491 61 744 2492 40 41 59 2491 46 2493 40 2494 41 59 2491 46 2495 40 2496 41 59 2491 46 2497 40 2494 41 59 657 2111 60 2027 44 2037 62 2498 61 2499 40 2147 44 2491 41 59 2071 2500 61 744 2492 40 41 59 2500 46 2493 40 2494 41 59 2500 46 2495 40 2496 41 59 2500 46 2497 40 2494 41 59 657 2111 60 2027 44 2037 62 2501 61 2499 40 2148 44 2500 41 59 2502 2503 61 744 2502 40 41 59 2503 46 2504 40 1502 41 59 2503 46 2505 40 41 46 2506 40 2498 46 2507 44 2501 46 2507 41 59 2005 46 2508 40 2503 44 2007 41 59 2006 46 2505 40 41 46 2509 40 2503 41 59 792 744 2489 60 62 40 2498 46 2510 44 2491 44 2501 46 2510 44 2500 41 59 125 331 330 331 777 809 2111 60 2112 44 2511 62 2512 40 2005 2006 44 704 2007 44 2001 2432 44 2001 2513 41 123 792 2512 40 2006 44 2007 44 2432 44 2513 44 1500 41 59 125 777 809 2111 60 2112 44 2511 62 2512 40 2005 2006 44 704 2007 44 2001 2432 44 2001 2513 44 625 2013 41 123 657 2036 60 2112 44 2511 44 2514 62 2515 61 2516 40 2006 44 2007 44 2432 44 2513 44 2013 41 59 792 744 2111 60 62 40 2515 46 2517 44 2515 46 2518 41 59 125 777 809 2036 60 2112 44 2511 44 2519 62 2520 40 2005 2006 44 704 2007 44 2001 2432 44 2001 2513 44 625 2013 41 123 2112 2521 61 744 2522 40 2432 41 59 2511 2523 61 744 2524 40 2513 41 59 2519 2525 61 744 2519 40 1503 41 59 2525 46 2526 40 2527 46 2528 41 59 2525 46 2529 40 41 46 2530 40 2521 44 2523 41 59 2005 46 2531 40 2525 44 2007 41 59 2525 46 2532 40 744 2533 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2529 40 41 46 2534 40 2525 41 59 792 744 2036 60 62 40 2521 44 2523 44 2525 41 59 125 331 330 331 777 809 2511 2535 40 2005 2006 44 704 2007 44 2001 2513 41 123 792 2535 40 2006 44 2007 44 2513 44 1500 41 59 125 777 809 2511 2535 40 2005 2006 44 704 2007 44 2001 2513 44 625 2013 41 123 792 2535 40 2006 44 2007 44 1500 44 2513 44 2013 41 59 125 777 809 2511 2535 40 2005 2006 44 704 2007 44 704 2093 44 2001 2513 44 625 2013 41 123 2511 2536 61 744 2537 40 2513 41 59 2005 46 2538 40 2536 44 744 2539 40 2013 44 1500 44 1500 44 1500 41 41 59 2005 46 2540 40 2536 44 2007 41 59 2005 46 2541 40 2536 44 2093 41 59 2006 46 2542 40 41 46 2543 40 2536 41 59 792 2536 59 125 331 330 331 777 809 2544 2545 40 2005 2006 44 704 2007 44 2546 2547 44 2001 2009 41 123 2544 2548 61 744 2549 40 2009 41 59 2548 46 2550 40 2547 41 59 2005 46 2551 40 2548 44 2007 41 59 2006 46 2552 40 41 46 2553 40 2548 41 59 792 2548 59 125 331 330 331 777 809 2036 60 2027 44 2544 44 2544 62 2554 40 2005 2006 44 704 2007 44 2546 2547 44 2001 2009 44 2001 2555 44 2001 2556 44 625 2013 41 123 2544 2557 61 744 2558 40 2555 41 59 2557 46 2559 40 2547 41 59 2557 46 2560 40 744 2561 40 1502 44 1500 44 1500 44 1500 41 41 59 2544 2562 61 744 2558 40 2556 41 59 2562 46 2559 40 2547 41 59 2562 46 2560 40 744 2561 40 1502 44 1500 44 1500 44 1500 41 41 59 2519 2563 61 744 2519 40 41 59 2563 46 2564 40 1502 41 59 2563 46 2565 40 41 46 2566 40 2557 44 2562 41 59 657 2111 60 2027 44 2037 62 2567 61 2568 40 2006 44 2007 44 2009 44 2563 44 2013 41 59 792 744 2036 60 62 40 2567 46 2569 44 2557 44 2562 41 59 125 331 330 331 777 809 2489 60 2027 44 2071 44 2544 44 2544 62 2570 40 2005 2006 44 704 2007 44 2546 2547 44 2001 2009 44 2001 2571 44 2001 2555 44 2001 2556 44 625 2013 41 123 2071 2572 61 744 2573 40 41 59 2572 46 2574 40 2571 41 59 2544 2575 61 744 2576 40 2555 41 59 2575 46 2577 40 2547 41 59 2575 46 2578 40 744 2579 40 1502 44 1500 44 1500 44 1500 41 41 59 2544 2580 61 744 2576 40 2556 41 59 2580 46 2577 40 2547 41 59 2580 46 2578 40 744 2579 40 1502 44 1500 44 1500 44 1500 41 41 59 2519 2581 61 744 2519 40 41 59 2581 46 2582 40 1502 41 59 2581 46 2583 40 41 46 2584 40 2572 44 2575 44 2580 41 59 657 2111 60 2027 44 2037 62 2585 61 2586 40 2006 44 2007 44 2009 44 2581 44 2013 41 59 792 744 2489 60 62 40 2585 46 2587 44 2572 44 2575 44 2580 41 59 125 331 330 331 777 809 2511 2588 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2588 40 2006 44 2007 44 2009 44 1500 41 59 125 777 809 2511 2588 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 2511 2589 61 744 2590 40 2009 41 59 2005 46 2591 40 2589 44 2007 41 59 2005 46 2592 40 2589 44 1500 41 59 2005 46 2593 40 2589 44 744 2594 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2595 40 41 46 2596 40 2589 41 59 792 2589 59 125 331 330 331 777 809 2398 2597 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2597 40 2006 44 2007 44 2009 44 1500 41 59 125 777 809 2398 2597 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 2398 2598 61 744 2599 40 41 59 2598 46 2600 40 2009 41 59 2005 46 2601 40 2598 44 2007 41 59 2005 46 2602 40 2598 44 1500 41 59 2005 46 2603 40 2598 44 744 2604 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2605 40 41 46 2606 40 2598 41 59 792 2598 59 125 331 330 331 777 809 60 2607 62 2608 60 2607 62 2609 40 2005 2006 44 704 2007 44 704 2013 41 123 657 2610 60 2607 62 2611 61 744 2610 60 62 40 41 59 2005 46 2612 40 2611 44 2007 41 59 2005 46 2613 40 2611 44 744 2614 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2615 40 41 46 2616 40 2611 41 59 792 2611 59 125 331 330 331 777 809 60 2607 62 2111 60 2027 44 2608 60 2607 356 2617 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2262 44 704 2013 41 123 657 2036 60 2037 44 2027 44 2608 60 2607 356 2618 61 2617 40 2009 44 2262 44 1500 41 59 657 2037 2619 61 2618 46 2620 59 2005 46 2621 40 2619 44 2007 41 59 2005 46 2622 40 2619 44 744 2623 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2624 40 41 46 2625 40 2619 41 59 792 744 2111 60 62 40 2618 46 2626 44 2618 46 2627 41 59 125 777 809 60 2607 62 2036 60 2037 44 2027 44 2608 60 2607 356 2617 40 2001 2009 44 2001 2262 41 123 792 2617 40 2009 44 2262 44 1500 41 59 125 777 809 60 2607 62 2036 60 2037 44 2027 44 2608 60 2607 356 2617 40 2001 2009 44 2001 2262 44 704 2013 41 123 2027 2628 61 2629 40 2009 41 59 2037 2630 61 2631 40 2013 41 59 657 2632 60 2607 62 2633 61 744 2632 60 62 40 41 59 2633 46 2634 40 2262 41 59 2630 46 2635 40 41 46 2636 40 2628 44 2633 41 59 792 744 2036 60 62 40 2630 44 2628 44 2633 41 59 125 777 809 60 2607 62 2036 60 2037 44 2027 44 2637 60 2607 356 2638 40 2001 2009 41 123 792 2638 40 2009 44 1500 41 59 125 777 809 60 2607 62 2036 60 2037 44 2027 44 2637 60 2607 356 2638 40 2001 2009 44 704 2013 41 123 2027 2639 61 2640 40 2009 41 59 2037 2641 61 2642 40 2013 41 59 657 2637 60 2607 62 2643 61 744 2637 60 62 40 41 59 2641 46 2644 40 41 46 2645 40 2639 44 2643 41 59 792 744 2036 60 62 40 2641 44 2639 44 2643 41 59 125 64 2646 773 809 2037 2647 40 704 2013 41 123 2037 2648 61 744 2037 40 41 59 2648 46 2649 40 1500 41 59 2648 46 2650 40 744 2651 40 2013 44 1500 44 1500 44 1500 41 41 59 2648 46 2652 40 2653 46 2654 41 59 792 2648 59 125 64 2646 773 809 2027 2655 40 2001 2009 41 123 2027 2656 61 744 2657 40 2009 41 59 2656 46 2658 40 41 46 2659 40 362 41 59 792 2656 59 125 777 809 2111 60 2027 44 2037 62 2660 40 2005 2006 44 704 2007 44 2001 2009 44 2661 2662 44 625 2013 41 123 792 2660 40 2006 44 2007 44 1500 44 2009 44 2662 44 2013 41 59 125 64 2646 777 809 2111 60 2027 44 2037 62 2660 40 2005 2006 44 704 2007 44 704 2010 44 2001 2009 44 2661 2662 44 625 2013 41 123 657 2111 60 2027 44 2037 62 2663 61 2664 40 2009 44 2662 41 59 2037 2665 61 2663 46 2666 59 2005 46 2667 40 2665 44 2007 41 59 2005 46 2668 40 2665 44 2010 41 59 2005 46 2669 40 2665 44 744 2670 40 2013 43 2671 46 2672 44 1500 44 1500 44 1500 41 41 59 2006 46 2673 40 41 46 2674 40 2665 41 59 792 744 2111 60 62 40 2663 46 2675 44 2665 41 59 125 64 2646 777 809 2111 60 2027 44 2037 62 2676 40 2001 2009 44 2661 2662 41 123 2027 2677 61 2655 40 2009 41 59 2037 2678 61 2647 40 1500 41 59 2678 46 2679 40 41 46 2680 40 2677 44 2662 41 59 792 744 2111 60 62 40 2677 44 2678 41 59 125 777 809 2036 60 2027 44 2071 44 2519 62 2681 40 2005 2006 44 704 2007 44 2001 2682 44 625 2013 41 123 2519 2683 61 744 2519 40 41 59 2683 46 2684 40 1502 41 59 2071 2685 61 744 2686 40 41 59 657 2037 2687 61 2647 40 1502 41 59 657 2027 2688 61 2655 40 2682 41 59 2687 46 2689 40 41 46 2690 40 2688 44 2685 41 59 2683 46 2689 40 41 46 2690 40 2687 41 59 2005 46 2691 40 2683 44 2007 41 59 2005 46 2692 40 2683 44 744 2693 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2689 40 41 46 2694 40 2683 41 59 792 744 2036 60 62 40 2688 44 2685 44 2683 41 59 125 331 330 331 777 809 60 2607 62 2608 60 2607 62 2609 40 2005 2006 44 704 2007 41 123 792 2609 40 2006 44 2007 44 2695 44 1500 41 59 125 777 809 60 2607 62 2608 60 2607 62 2609 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2609 40 2006 44 2007 44 2009 44 1500 41 59 125 777 809 60 2607 62 2608 60 2607 62 2609 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 2696 60 2607 62 2697 61 744 2696 60 62 40 41 59 2697 46 2698 40 2699 41 59 2697 46 2700 40 2009 41 59 2697 46 2701 40 2702 46 2703 41 59 330 330 2697 46 2704 40 2705 40 2009 44 2697 41 41 59 2005 46 2706 40 2697 44 2007 41 59 2005 46 2707 40 2697 44 1500 41 59 2005 46 2708 40 2697 44 744 2709 40 2013 43 2710 46 2711 44 1500 44 1500 44 1500 41 41 59 2006 46 2712 40 41 46 2713 40 2697 41 59 792 2697 59 125 331 330 331 777 809 60 2607 62 2111 60 2027 44 2608 60 2607 356 2714 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 2637 60 2607 62 2715 61 744 2637 60 62 40 41 59 657 2111 60 2027 44 2037 62 2716 61 2660 40 2006 44 2007 44 2009 44 2715 44 2013 41 59 792 744 2111 60 62 40 2716 46 2717 44 2715 41 59 125 331 330 331 777 809 60 2607 62 2489 60 2027 44 2071 44 2027 44 2608 60 2607 356 2718 40 2005 2006 44 704 2007 44 2001 2682 44 2001 2719 41 123 792 2718 40 2006 44 2007 44 2682 44 2719 44 1500 41 59 125 777 809 60 2607 62 2489 60 2027 44 2071 44 2027 44 2608 60 2607 356 2718 40 2005 2006 44 704 2007 44 2001 2682 44 2001 2719 44 625 2013 41 123 2519 2720 61 744 2519 40 41 59 2720 46 2721 40 1502 41 59 657 2037 2722 61 2647 40 1502 41 59 657 2027 2723 61 2655 40 2682 41 59 657 2071 2724 61 744 2725 40 41 59 2722 46 2726 40 41 46 2727 40 2723 44 2724 41 59 657 2037 2728 61 2647 40 1502 41 59 657 2027 2729 61 2655 40 2719 41 59 2637 60 2607 62 2730 61 744 2637 60 62 40 41 59 2730 46 2731 40 2719 41 59 2730 46 2732 40 2733 41 59 2728 46 2726 40 41 46 2727 40 2729 44 2730 41 59 2720 46 2726 40 41 46 2727 40 2722 44 2728 41 59 2005 46 2734 40 2720 44 2007 41 59 2005 46 2735 40 2720 44 744 2736 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2726 40 41 46 2737 40 2720 41 59 792 744 2489 60 62 40 2723 44 2724 44 2729 44 2730 41 59 125 331 330 331 777 809 60 2607 44 2738 62 2036 60 2027 44 2608 60 2738 62 44 2608 60 2607 356 2739 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2739 40 2006 44 2007 44 2009 44 1500 41 59 125 777 809 60 2607 44 2738 62 2036 60 2027 44 2608 60 2607 62 44 2608 60 2738 356 2739 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 2519 2740 61 744 2519 40 41 59 2740 46 2741 40 1502 41 59 2608 60 2607 62 2742 61 744 2743 60 62 40 41 59 2608 60 2738 62 2744 61 744 2743 60 62 40 41 59 2740 46 2745 40 41 46 2746 40 2742 44 2744 41 59 657 2111 60 2027 44 2037 62 2747 61 2660 40 2006 44 2007 44 2009 44 2740 44 2013 41 59 792 744 2036 60 62 40 2747 46 2748 44 2742 44 2744 41 59 125 331 330 331 777 809 60 2607 62 2489 60 2608 60 2607 62 44 2027 44 2071 44 2519 62 2749 40 2005 2006 44 704 2007 44 2001 2719 44 2001 2682 41 123 792 2749 40 2006 44 2007 44 2719 44 2682 44 1500 41 59 125 777 809 60 2607 62 2489 60 2608 60 2607 62 44 2027 44 2071 44 2519 62 2749 40 2005 2006 44 704 2007 44 2001 2719 44 2001 2682 44 625 2013 41 123 2519 2750 61 744 2519 40 41 59 2750 46 2751 40 1502 41 59 2752 60 2607 62 2753 61 744 2752 60 62 40 41 59 2753 46 2754 40 2719 41 59 2753 46 2755 40 2756 41 59 2071 2757 61 744 2758 40 41 59 657 2037 2759 61 2647 40 1502 41 59 657 2027 2760 61 2655 40 2682 41 59 2759 46 2761 40 41 46 2762 40 2760 44 2757 41 59 2750 46 2761 40 41 46 2762 40 2753 44 2759 41 59 2005 46 2763 40 2750 44 2007 41 59 2005 46 2764 40 2750 44 744 2765 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2761 40 41 46 2766 40 2750 41 59 792 744 2489 60 62 40 2753 44 2760 44 2757 44 2750 41 59 125 331 330 331 777 809 60 2607 62 2036 60 2027 44 2608 60 2607 62 44 2112 62 2767 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2432 41 123 792 2767 40 2006 44 2007 44 2009 44 2432 44 1500 41 59 125 777 809 60 2607 62 2036 60 2027 44 2608 60 2607 62 44 2112 62 2767 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2432 44 625 2013 41 123 2027 2768 61 2028 40 2006 44 2007 44 2009 44 2013 41 59 2519 2769 61 744 2519 40 41 59 2769 46 2770 40 1502 41 59 2112 2771 61 744 2772 40 2432 41 59 2771 46 2773 40 2774 41 59 2608 60 2607 62 2775 61 744 2776 60 62 40 41 59 2769 46 2777 40 41 46 2778 40 2775 44 2771 41 59 2005 46 2779 40 2769 44 2007 41 59 2005 46 2780 40 2769 44 1501 41 59 2005 46 2781 40 2769 44 744 2782 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2777 40 41 46 2783 40 2769 41 59 792 744 2036 60 62 40 2768 44 2775 44 2771 41 59 125 331 330 331 777 809 60 2607 62 2036 60 2027 44 2608 60 2607 62 44 2071 62 2784 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2785 41 123 792 2784 40 2006 44 2007 44 2009 44 2785 44 1500 41 59 125 777 809 60 2607 62 2036 60 2027 44 2608 60 2607 62 44 2071 62 2784 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2785 44 625 2013 41 123 2027 2786 61 2028 40 2006 44 2007 44 2009 44 2013 41 59 2519 2787 61 744 2519 40 41 59 2787 46 2788 40 1502 41 59 2608 60 2607 62 2789 61 744 2790 60 62 40 41 59 2071 2791 61 744 2071 40 2785 41 59 2791 46 2792 40 2793 41 59 2791 46 2794 40 2795 41 59 2791 46 2796 40 2793 41 59 2787 46 2797 40 41 46 2798 40 2789 44 2791 41 59 2005 46 2799 40 2787 44 2007 41 59 2005 46 2800 40 2787 44 1501 41 59 2005 46 2801 40 2787 44 744 2802 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2797 40 41 46 2803 40 2787 41 59 792 744 2036 60 62 40 2786 44 2789 44 2791 41 59 125 331 330 331 777 809 2111 60 2027 44 2329 62 2330 40 2005 2006 44 704 2007 44 704 2010 44 2001 2009 41 123 792 2330 40 2006 44 2007 44 2010 44 2009 44 1500 41 59 125 777 809 2111 60 2027 44 2329 62 2330 40 2005 2006 44 704 2007 44 704 2010 44 2001 2009 44 625 2013 41 123 2027 2804 61 2028 40 2006 44 2007 44 2009 44 2013 41 59 2329 2805 61 744 2329 40 41 59 2005 46 2806 40 2805 44 2007 41 59 2005 46 2807 40 2805 44 2010 41 59 2005 46 2808 40 2805 44 744 2809 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2810 40 41 46 2811 40 2805 41 59 792 744 2111 60 62 40 2804 44 2805 41 59 125 777 809 2036 60 2027 44 2329 44 2037 62 2812 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 2329 2813 61 744 2329 40 41 59 2813 46 2814 40 2815 41 59 657 2111 60 2027 44 2037 62 2816 61 2660 40 2006 44 2007 44 2009 44 2813 44 2013 41 59 330 330 792 744 2036 60 62 40 2816 46 2817 44 2813 44 2816 46 2818 41 59 125 331 330 331 777 809 2111 60 2027 44 2176 62 2819 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 41 123 792 2820 40 2006 44 2007 44 2009 44 2079 44 45 2821 46 2822 41 59 125 777 809 2111 60 2027 44 2176 62 2819 40 2005 2006 44 704 2007 44 704 2093 44 2001 2009 44 2001 2079 44 625 2013 41 123 792 2823 40 2006 44 2007 44 2093 44 2009 44 2079 44 2013 45 2824 46 2825 41 59 125 777 809 2111 60 2027 44 2176 62 2819 40 2005 2006 44 704 2007 44 704 2093 44 2001 2009 41 123 792 2826 40 2006 44 2007 44 2093 44 2009 44 362 44 45 2827 46 2828 41 59 125 777 809 2111 60 2027 44 2176 62 2819 40 2005 2006 44 704 2007 44 704 2093 44 2001 2009 44 2001 2079 41 123 792 2829 40 2006 44 2007 44 2093 44 2009 44 2079 44 45 2830 46 2831 41 59 125 777 809 2111 60 2027 44 2176 62 2819 40 2005 2006 44 704 2007 44 704 2093 44 2001 2009 44 2001 2079 44 570 2832 41 123 792 2833 40 2006 44 2007 44 2093 44 2009 44 2079 44 45 2834 46 2835 44 2832 41 59 125 777 809 2111 60 2027 44 2176 62 2836 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 41 123 792 2836 40 2006 44 2007 44 2009 44 2079 44 1500 41 59 125 777 809 2111 60 2027 44 2176 62 2836 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 44 625 2013 41 123 792 2836 40 2006 44 2007 44 2009 44 2079 44 2013 44 2837 41 59 125 777 809 2111 60 2027 44 2176 62 2836 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 44 625 2013 44 2001 2838 41 123 2176 2839 61 744 2176 40 2838 41 59 2839 46 2840 40 2079 41 59 657 2111 60 2027 44 2037 62 2841 61 2660 40 2006 44 2007 44 2009 44 2839 44 2013 41 59 792 744 2111 60 62 40 2841 46 2842 44 2839 41 59 125 777 809 2111 60 2027 44 2176 62 2836 40 2005 2006 44 704 2007 44 704 2093 44 2001 2009 44 2001 2079 44 625 2013 44 570 2832 41 123 2176 2843 61 744 2176 40 41 59 2843 46 2844 40 2079 41 59 2843 46 2845 40 2846 41 59 657 2111 60 2027 44 2037 62 2847 61 2660 40 2006 44 2007 44 2009 44 2843 44 2013 41 59 2847 46 2848 46 2849 40 2850 46 2851 41 59 2005 46 2852 40 2847 46 2848 44 2093 41 59 792 744 2111 60 62 40 2847 46 2853 44 2843 41 59 125 777 809 2111 60 2027 44 2176 62 2836 40 2005 2006 44 704 2007 44 704 2093 44 2001 2009 44 2001 2079 44 625 2013 41 123 2176 2854 61 744 2176 40 41 59 2854 46 2855 40 2079 41 59 657 2111 60 2027 44 2037 62 2856 61 2660 40 2006 44 2007 44 2009 44 2854 44 2013 41 59 2856 46 2857 46 2858 40 2859 46 2860 41 59 2005 46 2861 40 2856 46 2857 44 2093 41 59 792 744 2111 60 62 40 2856 46 2862 44 2854 41 59 125 777 809 2111 60 2027 44 2176 62 2863 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 41 123 792 2863 40 2006 44 2007 44 2009 44 2079 44 1500 41 59 125 777 809 2111 60 2027 44 2176 62 2863 40 2005 2006 44 704 2007 44 2001 2009 44 2001 2079 44 625 2013 41 123 2027 2864 61 2028 40 2006 44 2007 44 2009 44 2013 41 59 2864 46 2865 40 41 46 2866 40 362 41 59 2005 46 2867 40 2864 44 2868 46 2869 41 59 2176 2870 61 744 2176 40 362 41 59 2870 46 2871 40 2079 41 59 2005 46 2872 40 2870 44 2007 41 59 2005 46 2873 40 2870 44 1501 41 59 2005 46 2874 40 2870 44 744 2875 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2876 40 41 46 2866 40 2870 41 59 792 744 2111 60 62 40 2864 44 2870 41 59 125 331 330 331 777 809 2877 2878 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2878 40 2006 44 2007 44 2009 44 1500 41 59 125 777 809 2877 2878 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 2877 2879 61 744 2877 40 2009 41 59 2005 46 2880 40 2879 44 2007 41 59 2005 46 2881 40 2879 44 1500 41 59 2005 46 2882 40 2879 44 744 2883 40 2013 43 1503 44 1500 44 1500 44 1500 41 41 59 2006 46 2884 40 41 46 2885 40 2879 41 59 792 2879 59 125 331 330 331 777 809 2886 2887 40 2005 2006 44 704 2007 44 2001 2051 41 123 792 2887 40 2006 44 2007 44 2051 44 1500 41 59 125 777 809 2886 2887 40 2005 2006 44 704 2007 44 2001 2051 44 625 2013 41 123 2886 2888 61 744 2886 40 41 59 2888 46 2889 40 41 46 2890 40 2051 41 59 2005 46 2891 40 2888 44 2007 41 59 2005 46 2892 40 2888 44 1500 41 59 2005 46 2893 40 2888 44 744 2894 40 2013 43 1503 44 1500 44 1500 44 1500 41 41 59 2006 46 2895 40 41 46 2896 40 2888 41 59 792 2888 59 125 331 330 331 777 809 2036 60 2027 44 2897 44 2037 62 2898 40 2005 2006 44 704 2007 44 2001 2899 44 2001 2900 41 123 792 2901 40 2006 44 2007 44 2899 44 2900 44 45 2902 46 2903 41 59 125 777 809 2036 60 2027 44 2897 44 2037 62 2904 40 2005 2006 44 704 2007 44 2001 2899 44 2001 2900 44 625 2013 41 123 2897 2905 61 744 2897 40 41 59 2905 46 2906 40 2900 41 59 657 2111 60 2027 44 2037 62 2907 61 2660 40 2006 44 2007 44 2899 44 2905 44 2013 41 59 792 744 2036 60 62 40 2907 46 2908 44 2905 44 2907 46 2909 41 59 125 331 330 331 777 809 2036 60 2027 44 2910 44 2037 62 2911 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2911 40 2006 44 2007 44 2009 44 1500 41 59 125 777 809 2036 60 2027 44 2910 44 2037 62 2911 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 2910 2912 61 744 2910 40 41 59 2912 46 2913 40 2914 41 59 2111 60 2027 44 2037 62 2915 61 2660 40 2006 44 2007 44 2009 44 2912 44 2013 45 1503 41 59 792 744 2036 60 62 40 2915 46 2916 44 2912 44 2915 46 2917 41 59 125 331 330 331 777 809 2918 2919 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2919 40 2006 44 2007 44 2009 44 1503 41 59 125 777 809 2918 2919 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 2918 2920 61 744 2918 40 2009 41 59 2005 46 2921 40 2920 44 2007 41 59 2005 46 2922 40 2920 44 1500 41 59 2005 46 2923 40 2920 44 744 2924 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2925 40 41 46 2926 40 2920 41 59 792 2920 59 125 331 330 331 777 809 2111 60 2027 44 2112 62 2927 40 2005 2006 44 704 2007 44 2001 2899 44 2001 2432 41 123 792 2927 40 2006 44 2007 44 2899 44 2432 44 1500 41 59 125 777 809 2111 60 2027 44 2112 62 2927 40 2005 2006 44 704 2007 44 2001 2899 44 2001 2432 44 625 2013 41 123 2112 2928 61 744 2929 40 2432 41 59 2928 46 2930 40 2931 41 59 657 2111 60 2027 44 2037 62 2932 61 2660 40 2006 44 2007 44 2899 44 2928 44 2013 41 59 792 744 2111 60 62 40 2932 46 2933 44 2928 41 59 125 777 809 2111 60 2027 44 2112 62 2934 40 2005 2006 44 704 2007 44 2001 2899 44 2001 2432 44 625 2013 41 123 2027 2935 61 2028 40 2006 44 2007 44 2899 41 59 2935 46 2936 40 41 46 2937 40 362 41 59 2112 2938 61 744 2939 40 2432 41 59 2938 46 2936 40 41 46 2937 40 362 41 59 2938 46 2940 40 2941 41 59 2005 46 2942 40 2938 44 1501 41 59 2005 46 2943 40 2938 44 2007 41 59 2005 46 2944 40 2935 44 744 2945 40 2013 44 1500 44 1500 44 1500 41 41 59 2005 46 2946 40 2935 44 2947 46 2948 41 59 2005 46 2944 40 2938 44 744 2945 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 2949 40 41 46 2937 40 2938 41 59 792 744 2111 60 62 40 2935 44 2938 41 59 125 331 330 331 777 809 2036 60 2027 44 2112 44 2112 62 2950 40 2005 2006 44 704 2007 44 2001 2899 44 2001 2147 44 2001 2148 44 625 2013 41 123 2519 2951 61 744 2519 40 41 59 2951 46 2952 40 1502 41 59 2112 2953 61 744 2954 40 2147 41 59 2953 46 2955 40 2956 41 59 2953 46 2957 40 41 46 2958 40 362 41 59 2953 46 2955 40 2956 41 59 2953 46 2959 40 2960 46 2961 41 59 2519 46 2962 40 2953 44 2963 46 2964 41 59 2112 2965 61 744 2954 40 2148 41 59 2965 46 2959 40 2960 46 2961 41 59 2519 46 2962 40 2965 44 2963 46 2964 41 59 2951 46 2966 40 41 46 2967 40 2953 44 2965 41 59 657 2111 60 2027 44 2037 62 2968 61 2660 40 2006 44 2007 44 2899 44 2951 44 2013 41 59 792 744 2036 60 62 40 2968 46 2969 44 2953 44 2965 41 59 125 331 330 331 777 809 2112 2970 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2970 40 2006 44 2007 44 2009 44 1500 41 59 125 777 809 2112 2971 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2970 40 2006 44 2007 44 2009 44 1503 41 59 125 777 809 2112 2972 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 792 2970 40 2006 44 2007 44 2009 44 2013 44 2973 41 59 125 777 809 2112 2974 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 2972 40 2006 44 2007 44 2009 44 1503 41 59 125 777 809 2112 2970 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 792 2970 40 2006 44 2007 44 2009 44 2013 44 2975 41 59 125 777 809 2112 2970 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 44 570 2976 41 123 2112 2977 61 744 2978 40 2009 41 59 688 40 2976 41 123 2977 46 2979 40 2980 41 59 2977 46 2981 40 41 46 2982 40 362 41 59 125 2005 46 2983 40 2977 44 2007 41 59 2005 46 2984 40 2977 44 1500 41 59 2006 46 2985 40 41 46 2986 40 2977 41 59 2005 46 2987 40 2977 44 744 2988 40 2013 44 1500 44 1500 44 1500 41 41 59 792 2977 59 125 331 330 331 777 809 2111 60 2112 44 2112 62 2989 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 41 123 792 2989 40 2006 44 2007 44 2147 44 2148 44 1500 41 59 125 777 809 2111 60 2112 44 2112 62 2990 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 41 123 792 2990 40 2006 44 2007 44 2147 44 2148 44 2991 41 59 125 777 809 2111 60 2112 44 2112 62 2990 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 44 570 2992 41 123 792 2989 40 2006 44 2007 44 2147 44 2148 44 1503 44 2992 41 59 125 777 809 2111 60 2112 44 2112 62 2989 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 44 625 2013 41 123 792 2989 40 2006 44 2007 44 2147 44 2148 44 2013 44 2993 41 59 125 777 809 2111 60 2112 44 2112 62 2989 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 44 625 2013 44 570 2992 41 123 657 2036 60 2112 44 2112 44 2519 62 2994 61 2995 40 2006 44 2007 44 2147 44 2148 44 2013 44 2992 41 59 792 744 2111 60 62 40 2994 46 2996 44 2994 46 2997 41 59 125 777 809 2036 60 2112 44 2112 44 2519 62 2998 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 44 625 2013 44 570 2992 41 123 2519 2999 61 744 2519 40 41 59 2999 46 3000 40 1502 41 59 2112 3001 61 744 3002 40 2147 41 59 688 40 2992 41 123 3001 46 3003 40 41 46 3004 40 362 41 59 3001 46 3005 40 3006 41 59 125 3001 46 3007 40 3008 46 3009 41 59 2519 46 3010 40 3001 44 3011 46 3012 41 59 2112 3013 61 744 3002 40 2148 41 59 3013 46 3007 40 3008 46 3009 41 59 2519 46 3010 40 3013 44 3011 46 3012 41 59 2999 46 3014 40 41 46 3015 40 3001 44 3013 41 59 2005 46 3016 40 2999 44 2007 41 59 2005 46 3017 40 2999 44 1500 41 59 2005 46 3018 40 2999 44 744 3019 40 2013 44 1502 44 1500 44 1500 41 41 59 2006 46 3014 40 41 46 3020 40 2999 41 59 792 744 2036 60 62 40 3001 44 3013 44 2999 41 59 125 331 330 331 777 809 2036 60 2112 44 2112 44 2112 62 3021 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 44 2001 3022 41 123 792 3021 40 2006 44 2007 44 2147 44 2148 44 3022 44 1500 41 59 125 777 809 2036 60 2112 44 2112 44 2112 62 3023 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 44 2001 3022 41 123 792 3021 40 2006 44 2007 44 2147 44 2148 44 3022 44 1503 41 59 125 777 809 2036 60 2112 44 2112 44 2112 62 3021 40 2005 2006 44 704 2007 44 2001 2147 44 2001 2148 44 2001 3022 44 625 2013 41 123 2519 3024 61 744 2519 40 41 59 3024 46 3025 40 1502 41 59 2112 3026 61 744 3027 40 2147 41 59 3026 46 3028 40 41 46 3029 40 362 41 59 3026 46 3030 40 3031 41 59 3026 46 3032 40 3033 46 3034 41 59 2519 46 3035 40 3026 44 3036 46 3037 41 59 2112 3038 61 744 3027 40 2148 41 59 3038 46 3032 40 3033 46 3034 41 59 2519 46 3035 40 3038 44 3036 46 3037 41 59 2112 3039 61 744 3027 40 3022 41 59 3039 46 3032 40 3033 46 3034 41 59 2519 46 3035 40 3039 44 3036 46 3037 41 59 3024 46 3040 40 41 46 3041 40 3026 44 3038 44 3039 41 59 2005 46 3042 40 3024 44 2007 41 59 2005 46 3043 40 3024 44 1500 41 59 2005 46 3044 40 3024 44 744 3045 40 2013 44 1502 44 1500 44 1500 41 41 59 2006 46 3040 40 41 46 3029 40 3024 41 59 792 744 2036 60 62 40 3026 44 3038 44 3039 41 59 125 331 330 331 777 809 2489 60 2112 44 3046 44 2027 44 2519 62 3047 40 2005 2006 44 704 2007 44 704 2093 44 2001 2432 41 123 792 3048 40 2006 44 2007 44 2093 44 2432 44 1503 41 59 125 777 809 2489 60 2112 44 3046 44 2027 44 2519 62 3047 40 2005 2006 44 704 2007 44 2001 2432 41 123 792 3047 40 2006 44 2007 44 1500 44 2432 41 59 125 777 809 2489 60 2112 44 3046 44 2027 44 2519 62 3049 40 2005 2006 44 704 2007 44 704 2093 44 2001 2432 44 625 2013 41 123 2519 3050 61 744 2519 40 41 59 3050 46 3051 40 1502 41 59 2112 3052 61 744 3053 40 2432 41 59 3052 46 3054 40 3055 41 59 3052 46 3056 40 41 46 3057 40 362 41 59 3046 3058 61 744 3046 40 3059 41 59 2027 3060 61 744 3061 40 41 59 3050 46 3062 40 3063 46 3064 41 59 3050 46 3065 40 41 46 3066 40 3052 44 3058 44 3060 41 59 2005 46 3067 40 3050 44 2007 41 59 2005 46 3068 40 3050 44 3069 46 3070 41 59 2005 46 3071 40 3050 44 2093 41 59 2005 46 3072 40 3050 44 744 3073 40 2013 44 1500 44 1500 44 1500 41 41 59 2006 46 3065 40 41 46 3057 40 3050 41 59 792 744 2489 60 62 40 3052 44 3058 44 3060 44 3050 41 59 125 331 330 331 777 809 2036 60 2519 44 2356 44 2027 62 3074 40 2001 3075 41 123 2356 3076 61 744 2356 40 1503 41 59 3076 46 3077 40 3075 41 59 2027 3078 61 744 3079 40 3080 46 3081 40 41 41 59 3078 46 3082 40 41 46 3083 40 362 41 59 2519 3084 61 744 2519 40 41 59 2519 46 3085 40 3076 44 3086 46 3087 41 59 3076 46 3088 40 3089 46 3090 41 59 3084 46 3082 40 41 46 3083 40 362 41 59 3084 46 3091 40 41 46 3092 40 3076 44 3078 41 59 792 744 2036 60 62 40 3084 44 3076 44 3078 41 59 125 777 809 2036 60 2519 44 2381 44 2027 62 3093 40 2001 3075 41 123 2381 3094 61 744 2381 40 1503 41 59 2356 3095 61 3094 46 3096 40 41 59 3095 46 3097 40 3075 41 59 2027 3098 61 744 3099 40 3100 46 3101 40 41 41 59 3098 46 3102 40 41 46 3103 40 362 41 59 2519 3104 61 744 2519 40 41 59 2519 46 3105 40 3094 44 3106 46 3107 41 59 3094 46 3108 40 3109 46 3110 41 59 3104 46 3102 40 41 46 3103 40 362 41 59 3104 46 3111 40 41 46 3112 40 3094 44 3098 41 59 792 744 2036 60 62 40 3104 44 3094 44 3098 41 59 125 777 809 2036 60 2519 44 2071 44 2027 62 3113 40 41 123 657 2036 60 2519 44 2356 44 2027 62 3114 61 3074 40 362 41 59 657 2071 3115 61 3114 46 3116 59 3115 46 3117 40 3118 41 59 792 744 2036 60 62 40 3114 46 3119 44 3114 46 3116 44 3114 46 3120 41 59 125 777 809 2036 60 2519 44 2381 44 2027 62 3121 40 41 123 657 2036 60 2519 44 2381 44 2027 62 3122 61 3093 40 362 41 59 2071 3123 61 3122 46 3124 46 3125 40 41 59 3123 46 3126 40 3127 41 59 792 3122 59 125 331 330 331 777 809 2111 60 2027 44 2037 62 3128 40 3129 3130 44 2001 3131 41 123 2027 3132 61 744 3133 40 3131 41 59 3132 46 3134 40 362 41 59 3132 46 3135 40 1504 41 59 2037 3136 61 744 2037 40 41 59 3136 46 3137 40 744 3138 40 1502 44 1500 44 1500 44 1500 41 41 59 3136 46 3139 40 1502 41 59 3136 46 3140 40 41 46 3141 40 3132 44 3130 41 59 792 744 2111 60 62 40 3132 44 3136 41 59 125 331 330 331 777 809 60 2607 62 2036 60 2027 44 3142 60 2607 62 44 2037 62 3143 40 2005 2006 44 704 2007 44 2001 2009 41 123 792 3143 40 2006 44 2007 44 2009 44 1500 41 59 125 777 809 60 2607 62 2036 60 2027 44 3142 60 2607 62 44 2037 62 3143 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 3142 60 2607 62 3144 61 744 3142 60 62 40 41 59 657 2111 60 2027 44 2037 62 3145 61 2660 40 2006 44 2007 44 2009 44 3144 44 2013 41 59 792 744 2036 60 62 40 3145 46 3146 44 3144 44 3145 46 3147 41 59 125 331 330 331 777 809 2111 60 2027 44 3148 62 3149 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 41 123 792 3149 40 2006 44 2007 44 2009 44 2013 44 1500 41 59 125 777 809 2111 60 2027 44 3148 62 3149 40 2005 2006 44 704 2007 44 2001 2009 44 625 2013 44 625 3150 41 123 3148 3151 61 744 3148 40 41 59 3151 46 3152 40 744 3153 40 1502 44 1502 44 1502 44 1502 41 41 59 3151 46 3154 40 1502 41 59 3151 46 3155 40 1502 41 59 657 2111 60 2027 44 2037 62 3156 61 2660 40 2006 44 2007 44 2009 44 3151 44 2013 41 59 2005 46 3157 40 3156 46 3158 44 744 3153 40 2013 43 3159 46 3160 44 1500 44 3150 44 1500 41 41 59 792 744 2111 60 62 40 3156 46 3161 44 3151 41 59 125 331 330 331 777 809 865 3162 40 2005 2006 44 704 3163 41 123 3164 40 2006 44 3163 44 3163 41 59 125 777 809 865 3165 40 2005 2006 44 704 3166 44 704 3167 41 123 3168 60 2661 62 3169 61 744 3170 60 62 40 2006 46 3171 40 41 41 59 3169 46 3172 40 41 46 3173 40 3174 45 62 2005 46 3175 40 3174 41 340 3176 307 2005 46 3175 40 3174 41 325 3166 307 2005 46 3175 40 3174 41 329 3167 41 46 3177 40 3174 45 62 2006 46 3171 40 41 46 3178 40 3174 41 41 59 125 331 330 331 777 809 3179 3180 40 3181 3182 44 2001 3183 44 2027 3184 44 2001 3185 41 123 688 40 3182 46 3186 40 41 46 3187 40 2002 41 41 123 657 3179 3188 61 3189 46 3190 40 41 46 3191 40 3182 44 3183 41 59 3188 46 3192 40 1500 41 59 688 40 3185 340 3193 41 123 3188 46 3194 40 41 46 3195 40 3185 41 59 125 3184 46 3196 40 3197 46 3198 41 59 3184 46 3199 40 3188 41 59 792 3188 59 125 630 123 825 744 3200 40 362 41 59 125 125 777 809 3179 3180 40 3181 3182 44 2001 3183 44 2027 3184 41 123 792 3180 40 3182 44 3183 44 3184 44 3201 41 59 125 777 809 3179 3202 40 3181 3182 44 2027 3184 44 2001 3185 41 123 792 3180 40 3182 44 362 44 3184 44 3185 41 59 125 777 809 3179 3202 40 3181 3182 44 2027 3184 41 123 792 3180 40 3182 44 362 44 3184 41 59 125 777 809 3179 3203 40 3181 3182 44 2027 3184 41 123 792 3180 40 3182 44 362 44 3184 41 59 125 777 809 3179 3204 40 3181 3182 41 123 792 3204 40 3182 44 362 41 59 125 777 809 3179 3205 40 3181 3182 41 123 792 3204 40 3182 44 362 41 59 125 777 809 3179 3206 40 3181 3182 41 123 792 3204 40 3182 44 362 41 59 125 777 809 3179 3204 40 3181 3182 44 2001 3183 41 123 3179 3207 59 688 40 3182 46 3208 40 41 46 3209 40 2002 41 41 123 3207 61 3210 46 3211 40 41 46 3212 40 3182 44 3183 41 59 125 630 123 825 744 3213 40 362 41 59 125 792 3207 59 125 777 809 2027 3204 40 3214 3182 41 123 657 2027 3184 61 744 2027 40 41 59 3215 46 3216 40 3184 44 3182 41 59 792 3184 59 125 777 809 2027 3180 40 3214 3182 44 2027 3184 44 2001 3217 41 123 3218 46 3219 40 3184 44 3182 44 3217 41 59 792 3184 59 125 777 809 2112 3220 40 3181 3182 41 123 792 3220 40 3182 44 362 41 59 125 777 809 2112 3220 40 3181 3182 44 2001 2838 41 123 792 3220 40 3182 44 2838 44 362 41 59 125 777 809 2112 3221 40 3181 3182 41 123 792 3220 40 3182 44 362 44 362 41 59 125 777 809 2112 3221 40 3181 3182 44 2001 2838 41 123 792 3220 40 3182 44 2838 44 362 41 59 125 777 809 2112 3220 40 3181 3182 44 2001 2838 44 2001 3183 41 123 688 40 3182 46 3222 40 41 46 3223 40 2002 41 41 123 2112 3224 61 3225 46 3226 40 41 46 3227 40 3182 44 362 44 3183 44 3228 44 3229 46 3230 41 59 3224 46 3231 40 362 41 59 3224 46 3232 40 41 46 3233 40 41 46 3234 40 2838 41 59 3224 46 3235 40 1503 41 59 3224 46 3236 40 1503 41 59 3224 46 3237 40 744 3238 40 1500 41 41 59 792 3224 59 125 630 123 825 744 3239 40 362 41 59 125 125 777 809 60 2607 62 3240 60 2607 62 3241 40 2005 2006 44 704 2007 44 2001 3242 41 123 792 3241 40 2006 44 2007 44 3242 44 1500 44 3243 41 59 125 777 809 60 2607 62 3240 60 2607 62 3241 40 2005 2006 44 704 2007 44 2001 3242 44 2001 3244 41 123 792 3241 40 2006 44 2007 44 3242 44 1500 44 3244 41 59 125 777 809 60 2607 62 3240 60 2607 62 3241 40 2005 2006 44 704 2007 44 2001 3242 44 704 2013 41 123 792 3241 40 2006 44 2007 44 3242 44 2013 44 3245 41 59 125 777 809 60 2607 62 3240 60 2607 62 3241 40 2005 2006 44 704 2007 44 2001 3242 44 704 2013 44 2001 3244 41 123 2003 3246 61 2004 40 2006 44 2007 44 1501 44 3242 44 2013 41 59 688 40 3244 340 3247 41 3246 46 3248 40 41 46 3249 40 3244 41 59 3240 60 2607 62 3250 61 744 3240 60 62 40 41 59 2005 46 3251 40 3250 44 2007 41 59 2005 46 3252 40 3250 44 744 3253 40 2013 43 1503 44 45 1502 44 1502 44 45 1502 41 41 59 2006 46 3254 40 41 46 3249 40 3250 41 59 3250 46 3255 40 744 3256 40 3257 46 3258 40 362 41 41 41 59 3250 46 3259 40 3240 46 3260 41 59 792 3250 59 125 125 ,"{'AvgLine': 9, 'CountLine': 2285, 'CountStmt': 998, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 801, 'MaxEssential': 1, 'SumEssential': 194, 'AvgCyclomatic': 1, 'CountLineCode': 1634, 'CountStmtDecl': 400, 'MaxCyclomatic': 3, 'SumCyclomatic': 201, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 468, 'CountSemicolon': 801, 'CountDeclMethod': 189, 'CountLineCodeExe': 819, 'CountLineComment': 183, 'CountClassCoupled': 69, 'CountClassDerived': 0, 'CountLineCodeDecl': 830, 'CountDeclMethodAll': 189, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.11', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 203, 'CountDeclClassMethod': 189, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 187, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 201, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 69, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
26125,Java,"public class ServerSettings {

    private static int serverId;

    private static byte ageLimit;
    private static boolean showBrackets;
    private static boolean isPvP;
    private static int type;
    private static int maximumOnlineUsers;
    private static Path dataPackDirectory;

    private static int scheduledPoolSize;
    private static int threadPoolSize;
    private static int[] acceptedProtocols;
    private static boolean scheduleRestart;
    private static boolean useDeadLockDetector;
    private static int deadLockDetectorInterval;
    private static boolean restartOnDeadLock;
    private static int maxPlayers;
    private static Predicate<String> playerNamePattern;
    private static Predicate<String> petNamePattern;
    private static Predicate<String> clanNamePattern;
    private static String[] scheduleRestartHours;
    private static boolean hardwareInfoEnabled;
    private static int maxPlayerPerHWID;
    private static int maxThreadPoolSize;
    private static int parallelismThreshold;

    private ServerSettings() {
        // helper class
    }

    public static void load(SettingsFile settingsFile) {
        serverId = settingsFile.getInt(""RequestServerID"", 1);
        type = ServerType.maskOf(settingsFile.getStringArray(""ServerListType""));

        maximumOnlineUsers = Math.max(1, settingsFile.getInt(""MaximumOnlineUsers"", 20));
        ageLimit = settingsFile.getByte(""ServerListAge"", (byte) 0);
        showBrackets = settingsFile.getBoolean(""ServerListBrackets"", false);
        isPvP = settingsFile.getBoolean(""PvPServer"", false);

        dataPackDirectory = Path.of(settingsFile.getString(""DatapackRoot"", "".""));

        var processors = Runtime.getRuntime().availableProcessors();

        scheduledPoolSize = determinePoolSize(settingsFile, ""ScheduledThreadPoolSize"", processors);
        threadPoolSize = determinePoolSize(settingsFile, ""ThreadPoolSize"", processors);
        maxThreadPoolSize = determinePoolSize(settingsFile, ""MaxThreadPoolSize"", threadPoolSize * 10);
        parallelismThreshold = settingsFile.getInt(""ParallelismThreshold"", 1000);
        acceptedProtocols =  settingsFile.getIntArray(""AllowedProtocolRevisions"", "";"");

        scheduleRestart = settingsFile.getBoolean(""ServerRestartScheduleEnabled"", false);
        scheduleRestartHours = settingsFile.getStringArray(""ServerRestartSchedule"");

        useDeadLockDetector = settingsFile.getBoolean(""DeadLockDetector"", true);
        deadLockDetectorInterval = settingsFile.getInt(""DeadLockCheckInterval"", 1800);
        restartOnDeadLock = settingsFile.getBoolean(""RestartOnDeadlock"", false);

        playerNamePattern = determineNamePattern(settingsFile, ""CnameTemplate"");
        petNamePattern = determineNamePattern(settingsFile, ""PetNameTemplate"");
        clanNamePattern = determineNamePattern(settingsFile, ""ClanNameTemplate"");

        maxPlayers = settingsFile.getInt(""CharMaxNumber"", 7);
        hardwareInfoEnabled = settingsFile.getBoolean(""EnableHardwareInfo"", false);
        maxPlayerPerHWID = settingsFile.getInt(""MaxPlayersPerHWID"", 0);
    }

    private static Predicate<String> determineNamePattern(SettingsFile settingsFile, String key) {
        try {
            return Pattern.compile(settingsFile.getString(key, "".*"")).asMatchPredicate();
        } catch (PatternSyntaxException e) {
            return Util.ANY_PATTERN;
        }
    }

    private static int determinePoolSize(SettingsFile settingsFile, String property, int processors) {
        var size = settingsFile.getInt(property, processors);

        if(size < 2) {
            return processors;
        }
        return size;
    }

    public static int serverId() {
        return serverId;
    }

    public static byte ageLimit() {
        return ageLimit;
    }

    public static boolean isShowingBrackets() {
        return showBrackets;
    }

    public static boolean isPvP() {
        return isPvP;
    }

    public static int type() {
        return type;
    }

    public static void setType(int value) {
        type = value;
    }

    public static int maximumOnlineUsers() {
        return maximumOnlineUsers;
    }

    public static Path dataPackDirectory() {
        return dataPackDirectory;
    }

    public static int scheduledPoolSize() {
        return scheduledPoolSize;
    }

    public static int threadPoolSize() {
        return threadPoolSize;
    }

    public static int maxThreadPoolSize() {
        return maxThreadPoolSize;
    }

    public static int parallelismThreshold() {
        return parallelismThreshold;
    }

    public static int[] acceptedProtocols() {
        return acceptedProtocols;
    }

    public static boolean scheduleRestart() {
        return scheduleRestart;
    }

    public static String[] scheduleRestartHours() {
        return scheduleRestartHours;
    }

    public static boolean useDeadLockDetector() {
        return useDeadLockDetector;
    }

    public static int deadLockDetectorInterval() {
        return deadLockDetectorInterval;
    }

    public static boolean restartOnDeadLock() {
        return restartOnDeadLock;
    }

    public static boolean acceptPlayerName(String name) {
        return playerNamePattern.test(name);
    }

    public static boolean acceptPetName(String name) {
        return petNamePattern.test(name);
    }

    public static boolean acceptClanName(String name) {
        return clanNamePattern.test(name);
    }

    public static int maxPlayersAllowed() {
        return maxPlayers;
    }

    public static boolean allowPlayersCount(int playerCount) {
        return maxPlayers <= 0 || maxPlayers >= playerCount;
    }

    public static void setAgeLimit(byte age) {
        ageLimit = age;
    }

    public static boolean isHardwareInfoEnabled() {
        return hardwareInfoEnabled;
    }

    public static int maxPlayerPerHWID() {
        return maxPlayerPerHWID;
    }
}",1,777 587 2000 123 773 809 704 2001 59 773 809 574 2002 59 773 809 570 2003 59 773 809 570 2004 59 773 809 704 2005 59 773 809 704 2006 59 773 809 2007 2008 59 773 809 704 2009 59 773 809 704 2010 59 773 809 704 91 93 2011 59 773 809 570 2012 59 773 809 570 2013 59 773 809 704 2014 59 773 809 570 2015 59 773 809 704 2016 59 773 809 2017 60 2018 62 2019 59 773 809 2017 60 2018 62 2020 59 773 809 2017 60 2018 62 2021 59 773 809 2018 91 93 2022 59 773 809 570 2023 59 773 809 704 2024 59 773 809 704 2025 59 773 809 704 2026 59 773 2000 40 41 123 330 125 777 809 865 2027 40 2028 2029 41 123 2001 61 2029 46 2030 40 362 44 1501 41 59 2005 61 2031 46 2032 40 2029 46 2033 40 362 41 41 59 2006 61 2034 46 2035 40 1501 44 2029 46 2030 40 362 44 1503 41 41 59 2002 61 2029 46 2036 40 362 44 40 574 41 1500 41 59 2003 61 2029 46 2037 40 362 44 2038 41 59 2004 61 2029 46 2037 40 362 44 2038 41 59 2008 61 2007 46 2039 40 2029 46 2040 40 362 44 362 41 41 59 2041 2042 61 2043 46 2044 40 41 46 2045 40 41 59 2009 61 2046 40 2029 44 362 44 2042 41 59 2010 61 2046 40 2029 44 362 44 2042 41 59 2025 61 2046 40 2029 44 362 44 2010 42 1502 41 59 2026 61 2029 46 2030 40 362 44 1504 41 59 2011 61 2029 46 2047 40 362 44 362 41 59 2012 61 2029 46 2037 40 362 44 2038 41 59 2022 61 2029 46 2033 40 362 41 59 2013 61 2029 46 2037 40 362 44 2048 41 59 2014 61 2029 46 2030 40 362 44 1505 41 59 2015 61 2029 46 2037 40 362 44 2038 41 59 2019 61 2049 40 2029 44 362 41 59 2020 61 2049 40 2029 44 362 41 59 2021 61 2049 40 2029 44 362 41 59 2016 61 2029 46 2030 40 362 44 1502 41 59 2023 61 2029 46 2037 40 362 44 2038 41 59 2024 61 2029 46 2030 40 362 44 1500 41 59 125 773 809 2017 60 2018 62 2050 40 2028 2029 44 2018 2051 41 123 830 123 792 2052 46 2053 40 2029 46 2054 40 2051 44 362 41 41 46 2055 40 41 59 125 580 40 2056 2057 41 123 792 2058 46 2059 59 125 125 773 809 704 2060 40 2028 2029 44 2018 2061 44 704 2062 41 123 2063 2064 61 2029 46 2065 40 2061 44 2062 41 59 688 40 2064 60 1502 41 123 792 2062 59 125 792 2064 59 125 777 809 704 2001 40 41 123 792 2001 59 125 777 809 574 2002 40 41 123 792 2002 59 125 777 809 570 2066 40 41 123 792 2003 59 125 777 809 570 2004 40 41 123 792 2004 59 125 777 809 704 2005 40 41 123 792 2005 59 125 777 809 865 2067 40 704 2068 41 123 2005 61 2068 59 125 777 809 704 2006 40 41 123 792 2006 59 125 777 809 2007 2008 40 41 123 792 2008 59 125 777 809 704 2009 40 41 123 792 2009 59 125 777 809 704 2010 40 41 123 792 2010 59 125 777 809 704 2025 40 41 123 792 2025 59 125 777 809 704 2026 40 41 123 792 2026 59 125 777 809 704 91 93 2011 40 41 123 792 2011 59 125 777 809 570 2012 40 41 123 792 2012 59 125 777 809 2018 91 93 2022 40 41 123 792 2022 59 125 777 809 570 2013 40 41 123 792 2013 59 125 777 809 704 2014 40 41 123 792 2014 59 125 777 809 570 2015 40 41 123 792 2015 59 125 777 809 570 2069 40 2018 2070 41 123 792 2019 46 2071 40 2070 41 59 125 777 809 570 2072 40 2018 2070 41 123 792 2020 46 2073 40 2070 41 59 125 777 809 570 2074 40 2018 2070 41 123 792 2021 46 2075 40 2070 41 59 125 777 809 704 2076 40 41 123 792 2016 59 125 777 809 570 2077 40 704 2078 41 123 792 2016 329 1500 309 2016 325 2078 59 125 777 809 865 2079 40 574 2080 41 123 2002 61 2080 59 125 777 809 570 2081 40 41 123 792 2023 59 125 777 809 704 2024 40 41 123 792 2024 59 125 125 ,"{'AvgLine': 4, 'CountLine': 191, 'CountStmt': 111, 'MaxNesting': 1, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 57, 'MaxEssential': 1, 'SumEssential': 30, 'AvgCyclomatic': 1, 'CountLineCode': 145, 'CountStmtDecl': 56, 'MaxCyclomatic': 2, 'SumCyclomatic': 32, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 42, 'CountSemicolon': 78, 'CountDeclMethod': 30, 'CountLineCodeExe': 58, 'CountLineComment': 4, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountLineCodeDecl': 56, 'CountDeclMethodAll': 30, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.03', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 33, 'CountDeclClassMethod': 29, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 27, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 32, 'CountDeclClassVariable': 23, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 92}"
4112,Java,"@Slf4j
public class SignedWitnessService {
    public static final long SIGNER_AGE_DAYS = 30;
    private static final long SIGNER_AGE = SIGNER_AGE_DAYS * ChronoUnit.DAYS.getDuration().toMillis();
    public static final Coin MINIMUM_TRADE_AMOUNT_FOR_SIGNING = Coin.parseCoin(""0.0025"");

    private final KeyRing keyRing;
    private final P2PService p2PService;
    private final ArbitratorManager arbitratorManager;
    private final SignedWitnessStorageService signedWitnessStorageService;
    private final User user;
    private final FilterManager filterManager;

    private final Map<P2PDataStorage.ByteArray, SignedWitness> signedWitnessMap = new HashMap<>();

    // This map keeps all SignedWitnesses with the same AccountAgeWitnessHash in a Set.
    // This avoids iterations over the signedWitnessMap for getting the set of such SignedWitnesses.
    private final Map<P2PDataStorage.ByteArray, Set<SignedWitness>> signedWitnessSetByAccountAgeWitnessHash = new HashMap<>();

    // Iterating over all SignedWitnesses and do a byte array comparison is a bit expensive and
    // it is called at filtering the offer book many times, so we use a lookup map for fast
    // access to the set of SignedWitness which match the ownerPubKey.
    private final Map<P2PDataStorage.ByteArray, Set<SignedWitness>> signedWitnessSetByOwnerPubKey = new HashMap<>();

    // The signature verification calls are rather expensive and called at filtering the offer book many times,
    // so we cache the results using the hash as key. The hash is created from the accountAgeWitnessHash and the
    // signature.
    private final Map<P2PDataStorage.ByteArray, Boolean> verifySignatureWithDSAKeyResultCache = new HashMap<>();
    private final Map<P2PDataStorage.ByteArray, Boolean> verifySignatureWithECKeyResultCache = new HashMap<>();


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    public SignedWitnessService(KeyRing keyRing,
                                P2PService p2PService,
                                ArbitratorManager arbitratorManager,
                                SignedWitnessStorageService signedWitnessStorageService,
                                AppendOnlyDataStoreService appendOnlyDataStoreService,
                                User user,
                                FilterManager filterManager) {
        this.keyRing = keyRing;
        this.p2PService = p2PService;
        this.arbitratorManager = arbitratorManager;
        this.signedWitnessStorageService = signedWitnessStorageService;
        this.user = user;
        this.filterManager = filterManager;

        // We need to add that early (before onAllServicesInitialized) as it will be used at startup.
        appendOnlyDataStoreService.addService(signedWitnessStorageService);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void onAllServicesInitialized() {
        p2PService.getP2PDataStorage().addAppendOnlyDataStoreListener(payload -> {
            if (payload instanceof SignedWitness)
                addToMap((SignedWitness) payload);
        });

        // At startup the P2PDataStorage initializes earlier, otherwise we get the listener called.
        signedWitnessStorageService.getMap().values().forEach(e -> {
            if (e instanceof SignedWitness)
                addToMap((SignedWitness) e);
        });

        if (p2PService.isBootstrapped()) {
            onBootstrapComplete();
        } else {
            p2PService.addP2PServiceListener(new BootstrapListener() {
                @Override
                public void onUpdatedDataReceived() {
                    onBootstrapComplete();
                }
            });
        }
        // TODO: Enable cleaning of signed witness list when necessary
        // cleanSignedWitnesses();
    }

    private void onBootstrapComplete() {
        if (user.getRegisteredArbitrator() != null) {
            UserThread.runAfter(this::doRepublishAllSignedWitnesses, 60);
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Collection<SignedWitness> getSignedWitnessMapValues() {
        return signedWitnessMap.values();
    }

    /**
     * List of dates as long when accountAgeWitness was signed
     *
     * Witnesses that were added but are no longer considered signed won't be shown
     */
    public List<Long> getVerifiedWitnessDateList(AccountAgeWitness accountAgeWitness) {
        if (!isSignedAccountAgeWitness(accountAgeWitness)) {
            return new ArrayList<>();
        }
        return getSignedWitnessSet(accountAgeWitness).stream()
                .filter(this::verifySignature)
                .map(SignedWitness::getDate)
                .sorted()
                .collect(Collectors.toList());
    }

    /**
     * List of dates as long when accountAgeWitness was signed
     * Not verifying that signatures are correct
     */
    public List<Long> getWitnessDateList(AccountAgeWitness accountAgeWitness) {
        // We do not validate as it would not make sense to cheat one self...
        return getSignedWitnessSet(accountAgeWitness).stream()
                .map(SignedWitness::getDate)
                .sorted()
                .collect(Collectors.toList());
    }

    public boolean isSignedByArbitrator(AccountAgeWitness accountAgeWitness) {
        return getSignedWitnessSet(accountAgeWitness).stream()
                .map(SignedWitness::isSignedByArbitrator)
                .findAny()
                .orElse(false);
    }

    public boolean isFilteredWitness(AccountAgeWitness accountAgeWitness) {
        return getSignedWitnessSet(accountAgeWitness).stream()
                .map(SignedWitness::getWitnessOwnerPubKey)
                .anyMatch(ownerPubKey -> filterManager.isWitnessSignerPubKeyBanned(Utils.HEX.encode(ownerPubKey)));
    }

    private byte[] ownerPubKey(AccountAgeWitness accountAgeWitness) {
        return getSignedWitnessSet(accountAgeWitness).stream()
                .map(SignedWitness::getWitnessOwnerPubKey)
                .findFirst()
                .orElse(null);
    }

    public String ownerPubKeyAsString(AccountAgeWitness accountAgeWitness) {
        return getSignedWitnessSet(accountAgeWitness).stream()
                .map(signedWitness -> Utils.HEX.encode(signedWitness.getWitnessOwnerPubKey()))
                .findFirst()
                .orElse("""");
    }

    @VisibleForTesting
    public Set<SignedWitness> getSignedWitnessSetByOwnerPubKey(byte[] ownerPubKey) {
        return getSignedWitnessMapValues().stream()
                .filter(e -> Arrays.equals(e.getWitnessOwnerPubKey(), ownerPubKey))
                .collect(Collectors.toSet());
    }

    public boolean publishOwnSignedWitness(SignedWitness signedWitness) {
        if (!Arrays.equals(signedWitness.getWitnessOwnerPubKey(), keyRing.getPubKeyRing().getSignaturePubKeyBytes()) ||
                !verifySigner(signedWitness)) {
            return false;
        }

        log.info(""Publish own signedWitness {}"", signedWitness);
        publishSignedWitness(signedWitness);
        return true;
    }

    // Arbitrators sign with EC key
    public void signAndPublishAccountAgeWitness(Coin tradeAmount,
                                                AccountAgeWitness accountAgeWitness,
                                                ECKey key,
                                                PublicKey peersPubKey) {
        signAndPublishAccountAgeWitness(tradeAmount, accountAgeWitness, key, peersPubKey.getEncoded(), new Date().getTime());
    }

    // Arbitrators sign with EC key
    public String signAndPublishAccountAgeWitness(AccountAgeWitness accountAgeWitness,
                                                  ECKey key,
                                                  byte[] peersPubKey,
                                                  long time) {
        var witnessPubKey = peersPubKey == null ? ownerPubKey(accountAgeWitness) : peersPubKey;
        return signAndPublishAccountAgeWitness(MINIMUM_TRADE_AMOUNT_FOR_SIGNING, accountAgeWitness, key, witnessPubKey, time);
    }

    // Arbitrators sign with EC key
    public String signTraderPubKey(ECKey key,
                                   byte[] peersPubKey,
                                   long childSignTime) {
        var time = childSignTime - SIGNER_AGE - 1;
        var dummyAccountAgeWitness = new AccountAgeWitness(Hash.getRipemd160hash(peersPubKey), time);
        return signAndPublishAccountAgeWitness(MINIMUM_TRADE_AMOUNT_FOR_SIGNING, dummyAccountAgeWitness, key, peersPubKey, time);
    }

    // Arbitrators sign with EC key
    private String signAndPublishAccountAgeWitness(Coin tradeAmount,
                                                   AccountAgeWitness accountAgeWitness,
                                                   ECKey key,
                                                   byte[] peersPubKey,
                                                   long time) {
        if (isSignedAccountAgeWitness(accountAgeWitness)) {
            var err = ""Arbitrator trying to sign already signed accountagewitness "" + accountAgeWitness.toString();
            log.warn(err);
            return err;
        }
        if (peersPubKey == null) {
            var err = ""Trying to sign accountAgeWitness "" + accountAgeWitness.toString() + ""\nwith owner pubkey=null"";
            log.warn(err);
            return err;
        }

        String accountAgeWitnessHashAsHex = Utilities.encodeToHex(accountAgeWitness.getHash());
        String signatureBase64 = key.signMessage(accountAgeWitnessHashAsHex);
        SignedWitness signedWitness = new SignedWitness(SignedWitness.VerificationMethod.ARBITRATOR,
                accountAgeWitness.getHash(),
                signatureBase64.getBytes(Charsets.UTF_8),
                key.getPubKey(),
                peersPubKey,
                time,
                tradeAmount.value);
        publishSignedWitness(signedWitness);
        log.info(""Arbitrator signed witness {}"", signedWitness.toString());
        return """";
    }

    public void selfSignAndPublishAccountAgeWitness(AccountAgeWitness accountAgeWitness) throws CryptoException {
        log.info(""Sign own accountAgeWitness {}"", accountAgeWitness);
        signAndPublishAccountAgeWitness(MINIMUM_TRADE_AMOUNT_FOR_SIGNING, accountAgeWitness,
                keyRing.getSignatureKeyPair().getPublic());
    }

    // Any peer can sign with DSA key
    public Optional<SignedWitness> signAndPublishAccountAgeWitness(Coin tradeAmount,
                                                                   AccountAgeWitness accountAgeWitness,
                                                                   PublicKey peersPubKey) throws CryptoException {
        if (isSignedAccountAgeWitness(accountAgeWitness)) {
            log.warn(""Trader trying to sign already signed accountagewitness {}"", accountAgeWitness.toString());
            return Optional.empty();
        }

        if (!isSufficientTradeAmountForSigning(tradeAmount)) {
            log.warn(""Trader tried to sign account with too little trade amount"");
            return Optional.empty();
        }

        byte[] signature = Sig.sign(keyRing.getSignatureKeyPair().getPrivate(), accountAgeWitness.getHash());
        SignedWitness signedWitness = new SignedWitness(SignedWitness.VerificationMethod.TRADE,
                accountAgeWitness.getHash(),
                signature,
                keyRing.getSignatureKeyPair().getPublic().getEncoded(),
                peersPubKey.getEncoded(),
                new Date().getTime(),
                tradeAmount.value);
        publishSignedWitness(signedWitness);
        log.info(""Trader signed witness {}"", signedWitness.toString());
        return Optional.of(signedWitness);
    }

    public boolean verifySignature(SignedWitness signedWitness) {
        if (signedWitness.isSignedByArbitrator()) {
            return verifySignatureWithECKey(signedWitness);
        } else {
            return verifySignatureWithDSAKey(signedWitness);
        }
    }

    private boolean verifySignatureWithECKey(SignedWitness signedWitness) {
        P2PDataStorage.ByteArray hash = new P2PDataStorage.ByteArray(signedWitness.getHash());
        if (verifySignatureWithECKeyResultCache.containsKey(hash)) {
            return verifySignatureWithECKeyResultCache.get(hash);
        }
        try {
            String message = Utilities.encodeToHex(signedWitness.getAccountAgeWitnessHash());
            String signatureBase64 = new String(signedWitness.getSignature(), Charsets.UTF_8);
            ECKey key = ECKey.fromPublicOnly(signedWitness.getSignerPubKey());
            if (arbitratorManager.isPublicKeyInList(Utilities.encodeToHex(key.getPubKey()))) {
                key.verifyMessage(message, signatureBase64);
                verifySignatureWithECKeyResultCache.put(hash, true);
                return true;
            } else {
                log.warn(""Provided EC key is not in list of valid arbitrators."");
                verifySignatureWithECKeyResultCache.put(hash, false);
                return false;
            }
        } catch (SignatureException e) {
            log.warn(""verifySignature signedWitness failed. signedWitness={}"", signedWitness);
            log.warn(""Caused by "", e);
            verifySignatureWithECKeyResultCache.put(hash, false);
            return false;
        }
    }

    private boolean verifySignatureWithDSAKey(SignedWitness signedWitness) {
        P2PDataStorage.ByteArray hash = new P2PDataStorage.ByteArray(signedWitness.getHash());
        if (verifySignatureWithDSAKeyResultCache.containsKey(hash)) {
            return verifySignatureWithDSAKeyResultCache.get(hash);
        }
        try {
            PublicKey signaturePubKey = Sig.getPublicKeyFromBytes(signedWitness.getSignerPubKey());
            Sig.verify(signaturePubKey, signedWitness.getAccountAgeWitnessHash(), signedWitness.getSignature());
            verifySignatureWithDSAKeyResultCache.put(hash, true);
            return true;
        } catch (CryptoException e) {
            log.warn(""verifySignature signedWitness failed. signedWitness={}"", signedWitness);
            log.warn(""Caused by "", e);
            verifySignatureWithDSAKeyResultCache.put(hash, false);
            return false;
        }
    }

    public Set<SignedWitness> getSignedWitnessSet(AccountAgeWitness accountAgeWitness) {
        P2PDataStorage.ByteArray key = new P2PDataStorage.ByteArray(accountAgeWitness.getHash());
        return signedWitnessSetByAccountAgeWitnessHash.getOrDefault(key, new HashSet<>());
    }

    // SignedWitness objects signed by arbitrators
    public Set<SignedWitness> getArbitratorsSignedWitnessSet(AccountAgeWitness accountAgeWitness) {
        return getSignedWitnessSet(accountAgeWitness).stream()
                .filter(SignedWitness::isSignedByArbitrator)
                .collect(Collectors.toSet());
    }

    // SignedWitness objects signed by any other peer
    public Set<SignedWitness> getTrustedPeerSignedWitnessSet(AccountAgeWitness accountAgeWitness) {
        return getSignedWitnessSet(accountAgeWitness).stream()
                .filter(e -> !e.isSignedByArbitrator())
                .collect(Collectors.toSet());
    }

    public Set<SignedWitness> getRootSignedWitnessSet(boolean includeSignedByArbitrator) {
        return getSignedWitnessMapValues().stream()
                .filter(witness -> getSignedWitnessSetByOwnerPubKey(witness.getSignerPubKey(), new Stack<>()).isEmpty())
                .filter(witness -> includeSignedByArbitrator ||
                        witness.getVerificationMethod() != SignedWitness.VerificationMethod.ARBITRATOR)
                .collect(Collectors.toSet());
    }

    // Find first (in time) SignedWitness per missing signer
    public Set<SignedWitness> getUnsignedSignerPubKeys() {
        var oldestUnsignedSigners = new HashMap<P2PDataStorage.ByteArray, SignedWitness>();
        getRootSignedWitnessSet(false).forEach(signedWitness ->
                oldestUnsignedSigners.compute(new P2PDataStorage.ByteArray(signedWitness.getSignerPubKey()),
                        (key, oldValue) -> oldValue == null ? signedWitness :
                                oldValue.getDate() > signedWitness.getDate() ? signedWitness : oldValue));
        return new HashSet<>(oldestUnsignedSigners.values());
    }

    // We go one level up by using the signer Key to lookup for SignedWitness objects which contain the signerKey as
    // witnessOwnerPubKey
    private Set<SignedWitness> getSignedWitnessSetByOwnerPubKey(byte[] ownerPubKey,
                                                                Stack<P2PDataStorage.ByteArray> excluded) {
        P2PDataStorage.ByteArray key = new P2PDataStorage.ByteArray(ownerPubKey);
        if (signedWitnessSetByOwnerPubKey.containsKey(key)) {
            return signedWitnessSetByOwnerPubKey.get(key).stream()
                    .filter(e -> !excluded.contains(new P2PDataStorage.ByteArray(e.getSignerPubKey())))
                    .collect(Collectors.toSet());

        } else {
            return new HashSet<>();
        }
    }

    public boolean isSignedAccountAgeWitness(AccountAgeWitness accountAgeWitness) {
        return isSignerAccountAgeWitness(accountAgeWitness, new Date().getTime() + SIGNER_AGE);
    }

    public boolean isSignerAccountAgeWitness(AccountAgeWitness accountAgeWitness) {
        return isSignerAccountAgeWitness(accountAgeWitness, new Date().getTime());
    }

    public boolean isSufficientTradeAmountForSigning(Coin tradeAmount) {
        return !tradeAmount.isLessThan(MINIMUM_TRADE_AMOUNT_FOR_SIGNING);
    }

    private boolean verifySigner(SignedWitness signedWitness) {
        return getSignedWitnessSetByOwnerPubKey(signedWitness.getWitnessOwnerPubKey(), new Stack<>()).stream()
                .anyMatch(w -> isValidSignerWitnessInternal(w, signedWitness.getDate(), new Stack<>()));
    }

    /**
     * Checks whether the accountAgeWitness has a valid signature from a peer/arbitrator and is allowed to sign
     * other accounts.
     *
     * @param accountAgeWitness accountAgeWitness
     * @param time              time of signing
     * @return true if accountAgeWitness is allowed to sign at time, false otherwise.
     */
    private boolean isSignerAccountAgeWitness(AccountAgeWitness accountAgeWitness, long time) {
        Stack<P2PDataStorage.ByteArray> excludedPubKeys = new Stack<>();
        Set<SignedWitness> signedWitnessSet = getSignedWitnessSet(accountAgeWitness);
        for (SignedWitness signedWitness : signedWitnessSet) {
            if (isValidSignerWitnessInternal(signedWitness, time, excludedPubKeys)) {
                return true;
            }
        }
        // If we have not returned in the loops or they have been empty we have not found a valid signer.
        return false;
    }

    /**
     * Helper to isValidAccountAgeWitness(accountAgeWitness)
     *
     * @param signedWitness                the signedWitness to validate
     * @param childSignedWitnessDateMillis the date the child SignedWitness was signed or current time if it is a leaf.
     * @param excludedPubKeys              stack to prevent recursive loops
     * @return true if signedWitness is valid, false otherwise.
     */
    private boolean isValidSignerWitnessInternal(SignedWitness signedWitness,
                                                 long childSignedWitnessDateMillis,
                                                 Stack<P2PDataStorage.ByteArray> excludedPubKeys) {
        if (filterManager.isWitnessSignerPubKeyBanned(Utils.HEX.encode(signedWitness.getWitnessOwnerPubKey()))) {
            return false;
        }
        if (!verifySignature(signedWitness)) {
            return false;
        }
        if (signedWitness.isSignedByArbitrator()) {
            // If signed by an arbitrator we don't have to check anything else.
            return true;
        } else {
            if (!verifyDate(signedWitness, childSignedWitnessDateMillis)) {
                return false;
            }
            if (excludedPubKeys.size() >= 2000) {
                // Prevent DoS attack: an attacker floods the SignedWitness db with a long chain that takes lots of time to verify.
                return false;
            }
            excludedPubKeys.push(new P2PDataStorage.ByteArray(signedWitness.getSignerPubKey()));
            excludedPubKeys.push(new P2PDataStorage.ByteArray(signedWitness.getWitnessOwnerPubKey()));
            // Iterate over signedWitness signers
            Set<SignedWitness> signerSignedWitnessSet = getSignedWitnessSetByOwnerPubKey(signedWitness.getSignerPubKey(), excludedPubKeys);
            for (SignedWitness signerSignedWitness : signerSignedWitnessSet) {
                if (isValidSignerWitnessInternal(signerSignedWitness, signedWitness.getDate(), excludedPubKeys)) {
                    return true;
                }
            }
            excludedPubKeys.pop();
            excludedPubKeys.pop();
        }
        // If we have not returned in the loops or they have been empty we have not found a valid signer.
        return false;
    }

    private boolean verifyDate(SignedWitness signedWitness, long childSignedWitnessDateMillis) {
        long childSignedWitnessDateMinusChargebackPeriodMillis = Instant.ofEpochMilli(
                childSignedWitnessDateMillis).minus(SIGNER_AGE, ChronoUnit.MILLIS).toEpochMilli();
        long signedWitnessDateMillis = signedWitness.getDate();
        return signedWitnessDateMillis <= childSignedWitnessDateMinusChargebackPeriodMillis;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Private
    ///////////////////////////////////////////////////////////////////////////////////////////

    @VisibleForTesting
    public void addToMap(SignedWitness signedWitness) {
        signedWitnessMap.putIfAbsent(signedWitness.getHashAsByteArray(), signedWitness);

        P2PDataStorage.ByteArray accountAgeWitnessHash = new P2PDataStorage.ByteArray(signedWitness.getAccountAgeWitnessHash());
        signedWitnessSetByAccountAgeWitnessHash.putIfAbsent(accountAgeWitnessHash, new HashSet<>());
        signedWitnessSetByAccountAgeWitnessHash.get(accountAgeWitnessHash).add(signedWitness);

        P2PDataStorage.ByteArray ownerPubKey = new P2PDataStorage.ByteArray(signedWitness.getWitnessOwnerPubKey());
        signedWitnessSetByOwnerPubKey.putIfAbsent(ownerPubKey, new HashSet<>());
        signedWitnessSetByOwnerPubKey.get(ownerPubKey).add(signedWitness);
    }

    private void publishSignedWitness(SignedWitness signedWitness) {
        if (!signedWitnessMap.containsKey(signedWitness.getHashAsByteArray())) {
            log.info(""broadcast signed witness {}"", signedWitness.toString());
            // We set reBroadcast to true to achieve better resilience.
            p2PService.addPersistableNetworkPayload(signedWitness, true);
            addToMap(signedWitness);
        }
    }

    private void doRepublishAllSignedWitnesses() {
        getSignedWitnessMapValues()
                .forEach(signedWitness -> p2PService.addPersistableNetworkPayload(signedWitness, true));
    }

    @VisibleForTesting
    public void removeSignedWitness(SignedWitness signedWitness) {
        signedWitnessMap.remove(signedWitness.getHashAsByteArray());

        P2PDataStorage.ByteArray accountAgeWitnessHash = new P2PDataStorage.ByteArray(signedWitness.getAccountAgeWitnessHash());
        if (signedWitnessSetByAccountAgeWitnessHash.containsKey(accountAgeWitnessHash)) {
            Set<SignedWitness> set = signedWitnessSetByAccountAgeWitnessHash.get(accountAgeWitnessHash);
            set.remove(signedWitness);
            if (set.isEmpty()) {
                signedWitnessSetByAccountAgeWitnessHash.remove(accountAgeWitnessHash);
            }
        }

        P2PDataStorage.ByteArray ownerPubKey = new P2PDataStorage.ByteArray(signedWitness.getWitnessOwnerPubKey());
        if (signedWitnessSetByOwnerPubKey.containsKey(ownerPubKey)) {
            Set<SignedWitness> set = signedWitnessSetByOwnerPubKey.get(ownerPubKey);
            set.remove(signedWitness);
            if (set.isEmpty()) {
                signedWitnessSetByOwnerPubKey.remove(ownerPubKey);
            }
        }
    }

    // Remove SignedWitnesses that are signed by TRADE that also have an ARBITRATOR signature
    // for the same ownerPubKey and AccountAgeWitnessHash
//    private void cleanSignedWitnesses() {
//        var orphans = getRootSignedWitnessSet(false);
//        var signedWitnessesCopy = new HashSet<>(signedWitnessMap.values());
//        signedWitnessesCopy.forEach(sw -> orphans.forEach(orphan -> {
//            if (sw.getVerificationMethod() == SignedWitness.VerificationMethod.ARBITRATOR &&
//                    Arrays.equals(sw.getWitnessOwnerPubKey(), orphan.getWitnessOwnerPubKey()) &&
//                    Arrays.equals(sw.getAccountAgeWitnessHash(), orphan.getAccountAgeWitnessHash())) {
//                signedWitnessMap.remove(orphan.getHashAsByteArray());
//                log.info(""Remove duplicate SignedWitness: {}"", orphan.toString());
//            }
//        }));
//    }
}",1,64 2000 777 587 2001 123 777 809 657 726 2002 61 1503 59 773 809 657 726 2003 61 2002 42 2004 46 2005 46 2006 40 41 46 2007 40 41 59 777 809 657 2008 2009 61 2008 46 2010 40 362 41 59 773 657 2011 2012 59 773 657 2013 2014 59 773 657 2015 2016 59 773 657 2017 2018 59 773 657 2019 2020 59 773 657 2021 2022 59 773 657 2023 60 2024 46 2025 44 2026 62 2027 61 744 2028 60 62 40 41 59 330 330 773 657 2023 60 2024 46 2025 44 2029 60 2026 356 2030 61 744 2028 60 62 40 41 59 330 330 330 773 657 2023 60 2024 46 2025 44 2029 60 2026 356 2031 61 744 2028 60 62 40 41 59 330 330 330 773 657 2023 60 2024 46 2025 44 2032 62 2033 61 744 2028 60 62 40 41 59 773 657 2023 60 2024 46 2025 44 2032 62 2034 61 744 2028 60 62 40 41 59 331 330 331 64 2035 777 2001 40 2011 2012 44 2013 2014 44 2015 2016 44 2017 2018 44 2036 2037 44 2019 2020 44 2021 2022 41 123 823 46 2012 61 2012 59 823 46 2014 61 2014 59 823 46 2016 61 2016 59 823 46 2018 61 2018 59 823 46 2020 61 2020 59 823 46 2022 61 2022 59 330 2037 46 2038 40 2018 41 59 125 331 330 331 777 865 2039 40 41 123 2014 46 2040 40 41 46 2041 40 2042 45 62 123 688 40 2042 702 2026 41 2043 40 40 2026 41 2042 41 59 125 41 59 330 2018 46 2044 40 41 46 2045 40 41 46 2046 40 2047 45 62 123 688 40 2047 702 2026 41 2048 40 40 2026 41 2047 41 59 125 41 59 688 40 2014 46 2049 40 41 41 123 2050 40 41 59 125 630 123 2014 46 2051 40 744 2052 40 41 123 64 2053 777 865 2054 40 41 123 2055 40 41 59 125 125 41 59 125 330 330 125 773 865 2056 40 41 123 688 40 2020 46 2057 40 41 340 2058 41 123 2059 46 2060 40 823 58 58 2061 44 1503 41 59 125 125 331 330 331 777 2062 60 2026 62 2063 40 41 123 792 2027 46 2064 40 41 59 125 306 777 2065 60 2066 62 2067 40 2068 2069 41 123 688 40 33 2070 40 2069 41 41 123 792 744 2071 60 62 40 41 59 125 792 2072 40 2069 41 46 2073 40 41 46 2074 40 823 58 58 2075 41 46 2076 40 2026 58 58 2077 41 46 2078 40 41 46 2079 40 2080 46 2081 40 41 41 59 125 306 777 2065 60 2066 62 2082 40 2068 2069 41 123 330 792 2083 40 2069 41 46 2084 40 41 46 2085 40 2026 58 58 2086 41 46 2087 40 41 46 2088 40 2089 46 2090 40 41 41 59 125 777 570 2091 40 2068 2069 41 123 792 2092 40 2069 41 46 2093 40 41 46 2094 40 2026 58 58 2091 41 46 2095 40 41 46 2096 40 2097 41 59 125 777 570 2098 40 2068 2069 41 123 792 2099 40 2069 41 46 2100 40 41 46 2101 40 2026 58 58 2102 41 46 2103 40 2104 45 62 2022 46 2105 40 2106 46 2107 46 2108 40 2104 41 41 41 59 125 773 574 91 93 2109 40 2068 2069 41 123 792 2110 40 2069 41 46 2111 40 41 46 2112 40 2026 58 58 2113 41 46 2114 40 41 46 2115 40 2116 41 59 125 777 2117 2118 40 2068 2069 41 123 792 2119 40 2069 41 46 2120 40 41 46 2121 40 2122 45 62 2123 46 2124 46 2125 40 2122 46 2126 40 41 41 41 46 2127 40 41 46 2128 40 362 41 59 125 64 2129 777 2029 60 2026 62 2130 40 574 91 93 2109 41 123 792 2063 40 41 46 2131 40 41 46 2132 40 2133 45 62 2134 46 2135 40 2133 46 2136 40 41 44 2109 41 41 46 2137 40 2138 46 2139 40 41 41 59 125 777 570 2140 40 2026 2141 41 123 688 40 33 2142 46 2143 40 2141 46 2144 40 41 44 2012 46 2145 40 41 46 2146 40 41 41 309 33 2147 40 2141 41 41 123 792 2148 59 125 2149 46 2150 40 362 44 2141 41 59 2151 40 2141 41 59 792 2152 59 125 330 777 865 2153 40 2008 2154 44 2068 2069 44 2155 2156 44 2157 2158 41 123 2153 40 2154 44 2069 44 2156 44 2158 46 2159 40 41 44 744 2160 40 41 46 2161 40 41 41 59 125 330 777 2117 2153 40 2068 2069 44 2155 2156 44 574 91 93 2158 44 726 2162 41 123 2163 2164 61 2158 323 2165 63 2109 40 2069 41 58 2158 59 792 2153 40 2009 44 2069 44 2156 44 2164 44 2162 41 59 125 330 777 2117 2166 40 2155 2156 44 574 91 93 2158 44 726 2167 41 123 2168 2162 61 2167 45 2003 45 1501 59 2168 2169 61 744 2068 40 2170 46 2171 40 2158 41 44 2162 41 59 792 2153 40 2009 44 2169 44 2156 44 2158 44 2162 41 59 125 330 773 2117 2153 40 2008 2154 44 2068 2069 44 2155 2156 44 574 91 93 2158 44 726 2162 41 123 688 40 2172 40 2069 41 41 123 2173 2174 61 362 43 2069 46 2175 40 41 59 2176 46 2177 40 2174 41 59 792 2174 59 125 688 40 2158 323 2178 41 123 2179 2180 61 362 43 2069 46 2181 40 41 43 362 59 2182 46 2183 40 2180 41 59 792 2180 59 125 2117 2184 61 2185 46 2186 40 2069 46 2187 40 41 41 59 2117 2188 61 2156 46 2189 40 2184 41 59 2026 2141 61 744 2026 40 2026 46 2190 46 2191 44 2069 46 2187 40 41 44 2188 46 2192 40 2193 46 2194 41 44 2156 46 2195 40 41 44 2158 44 2162 44 2154 46 2196 41 59 2197 40 2141 41 59 2198 46 2199 40 362 44 2141 46 2200 40 41 41 59 792 362 59 125 777 865 2201 40 2068 2069 41 826 2202 123 2203 46 2204 40 362 44 2069 41 59 2153 40 2009 44 2069 44 2012 46 2205 40 41 46 2206 40 41 41 59 125 330 777 2207 60 2026 62 2153 40 2008 2154 44 2068 2069 44 2157 2158 41 826 2202 123 688 40 2208 40 2069 41 41 123 2209 46 2210 40 362 44 2069 46 2211 40 41 41 59 792 2207 46 2212 40 41 59 125 688 40 33 2213 40 2154 41 41 123 2214 46 2215 40 362 41 59 792 2207 46 2216 40 41 59 125 574 91 93 2217 61 2218 46 2219 40 2012 46 2220 40 41 46 2221 40 41 44 2069 46 2222 40 41 41 59 2026 2141 61 744 2026 40 2026 46 2223 46 2224 44 2069 46 2222 40 41 44 2217 44 2012 46 2220 40 41 46 2225 40 41 46 2226 40 41 44 2158 46 2226 40 41 44 744 2227 40 41 46 2228 40 41 44 2154 46 2229 41 59 2230 40 2141 41 59 2231 46 2232 40 362 44 2141 46 2233 40 41 41 59 792 2207 46 2234 40 2141 41 59 125 777 570 2235 40 2026 2141 41 123 688 40 2141 46 2091 40 41 41 123 792 2236 40 2141 41 59 125 630 123 792 2237 40 2141 41 59 125 125 773 570 2238 40 2026 2141 41 123 2024 46 2025 2239 61 744 2024 46 2025 40 2141 46 2240 40 41 41 59 688 40 2034 46 2241 40 2239 41 41 123 792 2034 46 2242 40 2239 41 59 125 830 123 2117 2243 61 2244 46 2245 40 2141 46 2246 40 41 41 59 2117 2247 61 744 2117 40 2141 46 2248 40 41 44 2249 46 2250 41 59 2155 2156 61 2155 46 2251 40 2141 46 2252 40 41 41 59 688 40 2016 46 2253 40 2244 46 2245 40 2156 46 2254 40 41 41 41 41 123 2156 46 2255 40 2243 44 2247 41 59 2034 46 2256 40 2239 44 2257 41 59 792 2257 59 125 630 123 2258 46 2259 40 362 41 59 2034 46 2260 40 2239 44 2261 41 59 792 2261 59 125 125 580 40 2262 2263 41 123 2264 46 2265 40 362 44 2141 41 59 2264 46 2265 40 362 44 2263 41 59 2034 46 2266 40 2239 44 2267 41 59 792 2267 59 125 125 773 570 2268 40 2026 2141 41 123 2024 46 2025 2269 61 744 2024 46 2025 40 2141 46 2270 40 41 41 59 688 40 2033 46 2271 40 2269 41 41 123 792 2033 46 2272 40 2269 41 59 125 830 123 2157 2273 61 2274 46 2275 40 2141 46 2276 40 41 41 59 2274 46 2277 40 2273 44 2141 46 2278 40 41 44 2141 46 2279 40 41 41 59 2033 46 2280 40 2269 44 2281 41 59 792 2281 59 125 580 40 2202 2282 41 123 2283 46 2284 40 362 44 2141 41 59 2283 46 2284 40 362 44 2282 41 59 2033 46 2285 40 2269 44 2286 41 59 792 2286 59 125 125 777 2029 60 2026 62 2287 40 2068 2069 41 123 2024 46 2025 2156 61 744 2024 46 2025 40 2069 46 2288 40 41 41 59 792 2030 46 2289 40 2156 44 744 2290 60 62 40 41 41 59 125 330 777 2029 60 2026 62 2291 40 2068 2069 41 123 792 2287 40 2069 41 46 2292 40 41 46 2293 40 2026 58 58 2091 41 46 2294 40 2295 46 2296 40 41 41 59 125 330 777 2029 60 2026 62 2297 40 2068 2069 41 123 792 2287 40 2069 41 46 2298 40 41 46 2299 40 2300 45 62 33 2300 46 2091 40 41 41 46 2301 40 2302 46 2303 40 41 41 59 125 777 2029 60 2026 62 2304 40 570 2305 41 123 792 2063 40 41 46 2306 40 41 46 2307 40 2308 45 62 2130 40 2308 46 2309 40 41 44 744 2310 60 62 40 41 41 46 2311 40 41 41 46 2307 40 2308 45 62 2305 309 2308 46 2312 40 41 340 2026 46 2313 46 2314 41 46 2315 40 2316 46 2317 40 41 41 59 125 330 777 2029 60 2026 62 2318 40 41 123 2319 2320 61 744 2028 60 2024 46 2025 44 2026 62 40 41 59 2304 40 2321 41 46 2322 40 2141 45 62 2320 46 2323 40 744 2024 46 2025 40 2141 46 2324 40 41 41 44 40 2156 44 2325 41 45 62 2325 323 2326 63 2141 58 2325 46 2327 40 41 62 2141 46 2327 40 41 63 2141 58 2325 41 41 59 792 744 2328 60 62 40 2320 46 2329 40 41 41 59 125 330 330 773 2029 60 2026 62 2130 40 574 91 93 2109 44 2330 60 2024 46 2025 62 2331 41 123 2024 46 2025 2156 61 744 2024 46 2025 40 2109 41 59 688 40 2031 46 2332 40 2156 41 41 123 792 2031 46 2333 40 2156 41 46 2334 40 41 46 2335 40 2336 45 62 33 2331 46 2337 40 744 2024 46 2025 40 2336 46 2338 40 41 41 41 41 46 2339 40 2340 46 2341 40 41 41 59 125 630 123 792 744 2342 60 62 40 41 59 125 125 777 570 2343 40 2068 2069 41 123 792 2344 40 2069 44 744 2345 40 41 46 2346 40 41 43 2003 41 59 125 777 570 2347 40 2068 2069 41 123 792 2347 40 2069 44 744 2348 40 41 46 2349 40 41 41 59 125 777 570 2350 40 2008 2154 41 123 792 33 2154 46 2351 40 2009 41 59 125 773 570 2352 40 2026 2141 41 123 792 2130 40 2141 46 2353 40 41 44 744 2330 60 62 40 41 41 46 2354 40 41 46 2355 40 2356 45 62 2357 40 2356 44 2141 46 2358 40 41 44 744 2330 60 62 40 41 41 41 59 125 306 773 570 2347 40 2068 2069 44 726 2162 41 123 2330 60 2024 46 2025 62 2359 61 744 2330 60 62 40 41 59 2029 60 2026 62 2360 61 2287 40 2069 41 59 664 40 2026 2141 58 2360 41 123 688 40 2361 40 2141 44 2162 44 2359 41 41 123 792 2362 59 125 125 330 792 2363 59 125 306 773 570 2364 40 2026 2141 44 726 2365 44 2330 60 2024 46 2025 62 2366 41 123 688 40 2022 46 2367 40 2368 46 2369 46 2370 40 2141 46 2371 40 41 41 41 41 123 792 2372 59 125 688 40 33 2235 40 2141 41 41 123 792 2373 59 125 688 40 2141 46 2091 40 41 41 123 330 792 2374 59 125 630 123 688 40 33 2375 40 2141 44 2365 41 41 123 792 2376 59 125 688 40 2366 46 2377 40 41 325 1505 41 123 330 792 2378 59 125 2366 46 2379 40 744 2024 46 2025 40 2141 46 2380 40 41 41 41 59 2366 46 2379 40 744 2024 46 2025 40 2141 46 2371 40 41 41 41 59 330 2029 60 2026 62 2381 61 2130 40 2141 46 2380 40 41 44 2366 41 59 664 40 2026 2382 58 2381 41 123 688 40 2364 40 2382 44 2141 46 2383 40 41 44 2366 41 41 123 792 2384 59 125 125 2366 46 2385 40 41 59 2366 46 2385 40 41 59 125 330 792 2386 59 125 773 570 2387 40 2026 2141 44 726 2365 41 123 726 2388 61 2389 46 2390 40 2365 41 46 2391 40 2003 44 2004 46 2392 41 46 2393 40 41 59 726 2394 61 2141 46 2395 40 41 59 792 2394 329 2388 59 125 331 330 331 64 2129 777 865 2396 40 2026 2141 41 123 2027 46 2397 40 2141 46 2398 40 41 44 2141 41 59 2024 46 2025 2399 61 744 2024 46 2025 40 2141 46 2400 40 41 41 59 2030 46 2397 40 2399 44 744 2401 60 62 40 41 41 59 2030 46 2402 40 2399 41 46 2403 40 2141 41 59 2024 46 2025 2109 61 744 2024 46 2025 40 2141 46 2404 40 41 41 59 2031 46 2397 40 2109 44 744 2401 60 62 40 41 41 59 2031 46 2402 40 2109 41 46 2403 40 2141 41 59 125 773 865 2405 40 2026 2141 41 123 688 40 33 2027 46 2406 40 2141 46 2407 40 41 41 41 123 2408 46 2409 40 362 44 2141 46 2410 40 41 41 59 330 2014 46 2411 40 2141 44 2412 41 59 2396 40 2141 41 59 125 125 773 865 2413 40 41 123 2063 40 41 46 2414 40 2141 45 62 2014 46 2415 40 2141 44 2416 41 41 59 125 64 2129 777 865 2417 40 2026 2141 41 123 2027 46 2418 40 2141 46 2419 40 41 41 59 2024 46 2025 2420 61 744 2024 46 2025 40 2141 46 2421 40 41 41 59 688 40 2030 46 2422 40 2420 41 41 123 2029 60 2026 62 2423 61 2030 46 2424 40 2420 41 59 2423 46 2418 40 2141 41 59 688 40 2423 46 2425 40 41 41 123 2030 46 2418 40 2420 41 59 125 125 2024 46 2025 2109 61 744 2024 46 2025 40 2141 46 2426 40 41 41 59 688 40 2031 46 2422 40 2109 41 41 123 2029 60 2026 62 2427 61 2031 46 2428 40 2109 41 59 2427 46 2418 40 2141 41 59 688 40 2427 46 2429 40 41 41 123 2031 46 2418 40 2109 41 59 125 125 125 330 330 330 330 330 330 330 330 330 330 330 330 330 330 125 ,"{'AvgLine': 10, 'CountLine': 523, 'CountStmt': 225, 'MaxNesting': 3, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 175, 'MaxEssential': 8, 'SumEssential': 68, 'AvgCyclomatic': 1, 'CountLineCode': 381, 'CountStmtDecl': 86, 'MaxCyclomatic': 8, 'SumCyclomatic': 82, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 62, 'CountSemicolon': 152, 'CountDeclMethod': 38, 'CountLineCodeExe': 239, 'CountLineComment': 80, 'CountClassCoupled': 41, 'CountClassDerived': 0, 'CountLineCodeDecl': 114, 'CountDeclMethodAll': 38, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.21', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 84, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 26, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 82, 'CountDeclClassVariable': 3, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 12, 'CountDeclInstanceMethod': 38, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 41, 'CountDeclInstanceVariable': 11, 'PercentLackOfCohesionModified': 69}"
2511,Java,"public final class LookBehavior extends Behavior implements ILookBehavior {

    /**
     * Target's values are as follows:
     * <p>
     * getFirst() -> yaw
     * getSecond() -> pitch
     */
    private Rotation target;

    /**
     * Whether or not rotations are currently being forced
     */
    private boolean force;

    /**
     * The last player yaw angle. Used when free looking
     *
     * @see Settings#freeLook
     */
    private float lastYaw;

    public LookBehavior(Baritone baritone) {
        super(baritone);
    }

    @Override
    public void updateTarget(Rotation target, boolean force) {
        this.target = target;
        this.force = force || !Baritone.settings().freeLook.value;
    }

    @Override
    public void onPlayerUpdate(PlayerUpdateEvent event) {
        if (this.target == null) {
            return;
        }

        // Whether or not we're going to silently set our angles
        boolean silent = Baritone.settings().antiCheatCompatibility.value && !this.force;

        switch (event.getState()) {
            case PRE: {
                if (this.force) {
                    ctx.player().rotationYaw = this.target.getYaw();
                    float oldPitch = ctx.player().rotationPitch;
                    float desiredPitch = this.target.getPitch();
                    ctx.player().rotationPitch = desiredPitch;
                    ctx.player().rotationYaw += (Math.random() - 0.5) * Baritone.settings().randomLooking.value;
                    ctx.player().rotationPitch += (Math.random() - 0.5) * Baritone.settings().randomLooking.value;
                    if (desiredPitch == oldPitch && !Baritone.settings().freeLook.value) {
                        nudgeToLevel();
                    }
                    this.target = null;
                }
                if (silent) {
                    this.lastYaw = ctx.player().rotationYaw;
                    ctx.player().rotationYaw = this.target.getYaw();
                }
                break;
            }
            case POST: {
                if (silent) {
                    ctx.player().rotationYaw = this.lastYaw;
                    this.target = null;
                }
                break;
            }
            default:
                break;
        }
    }

    public void pig() {
        if (this.target != null) {
            ctx.player().rotationYaw = this.target.getYaw();
        }
    }

    @Override
    public void onPlayerRotationMove(RotationMoveEvent event) {
        if (this.target != null) {

            event.setYaw(this.target.getYaw());

            // If we have antiCheatCompatibility on, we're going to use the target value later in onPlayerUpdate()
            // Also the type has to be MOTION_UPDATE because that is called after JUMP
            if (!Baritone.settings().antiCheatCompatibility.value && event.getType() == RotationMoveEvent.Type.MOTION_UPDATE && !this.force) {
                this.target = null;
            }
        }
    }

    /**
     * Nudges the player's pitch to a regular level. (Between {@code -20} and {@code 10}, increments are by {@code 1})
     */
    private void nudgeToLevel() {
        if (ctx.player().rotationPitch < -20) {
            ctx.player().rotationPitch++;
        } else if (ctx.player().rotationPitch > 10) {
            ctx.player().rotationPitch--;
        }
    }
}",1,777 657 587 2000 650 2001 693 2002 123 306 773 2003 2004 59 306 773 570 2005 59 306 773 660 2006 59 777 2000 40 2007 2008 41 123 818 40 2008 41 59 125 64 2009 777 865 2010 40 2003 2004 44 570 2005 41 123 823 46 2004 61 2004 59 823 46 2005 61 2005 309 33 2007 46 2011 40 41 46 2012 46 2013 59 125 64 2009 777 865 2014 40 2015 2016 41 123 688 40 823 46 2004 323 2017 41 123 792 59 125 330 570 2018 61 2007 46 2019 40 41 46 2020 46 2021 307 33 823 46 2005 59 819 40 2016 46 2022 40 41 41 123 579 2023 58 123 688 40 823 46 2005 41 123 2024 46 2025 40 41 46 2026 61 823 46 2004 46 2027 40 41 59 660 2028 61 2024 46 2025 40 41 46 2029 59 660 2030 61 823 46 2004 46 2031 40 41 59 2024 46 2025 40 41 46 2029 61 2030 59 2024 46 2025 40 41 46 2026 348 40 2032 46 2033 40 41 45 1500 41 42 2007 46 2019 40 41 46 2034 46 2021 59 2024 46 2025 40 41 46 2029 348 40 2032 46 2033 40 41 45 1500 41 42 2007 46 2019 40 41 46 2034 46 2021 59 688 40 2030 323 2028 307 33 2007 46 2019 40 41 46 2035 46 2021 41 123 2036 40 41 59 125 823 46 2004 61 2017 59 125 688 40 2018 41 123 823 46 2006 61 2037 46 2038 40 41 46 2039 59 2037 46 2038 40 41 46 2039 61 823 46 2004 46 2040 40 41 59 125 572 59 125 579 2041 58 123 688 40 2018 41 123 2042 46 2043 40 41 46 2044 61 823 46 2006 59 823 46 2004 61 2017 59 125 572 59 125 613 58 572 59 125 125 777 865 2045 40 41 123 688 40 823 46 2004 340 2046 41 123 2047 46 2048 40 41 46 2049 61 823 46 2004 46 2050 40 41 59 125 125 64 2009 777 865 2051 40 2052 2016 41 123 688 40 823 46 2004 340 2053 41 123 2016 46 2054 40 823 46 2004 46 2055 40 41 41 59 330 330 688 40 33 2007 46 2056 40 41 46 2057 46 2058 307 2016 46 2059 40 41 323 2052 46 2060 46 2061 307 33 823 46 2005 41 123 823 46 2004 61 2053 59 125 125 125 306 773 865 2062 40 41 123 688 40 2063 46 2064 40 41 46 2065 60 45 1503 41 123 2063 46 2064 40 41 46 2065 349 59 125 630 688 40 2063 46 2064 40 41 46 2065 62 1502 41 123 2063 46 2064 40 41 46 2065 338 59 125 125 125 ,"{'AvgLine': 12, 'CountLine': 104, 'CountStmt': 46, 'MaxNesting': 3, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 36, 'MaxEssential': 1, 'SumEssential': 6, 'AvgCyclomatic': 3, 'CountLineCode': 71, 'CountStmtDecl': 13, 'MaxCyclomatic': 8, 'SumCyclomatic': 18, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 13, 'CountSemicolon': 28, 'CountDeclMethod': 6, 'CountLineCodeExe': 39, 'CountLineComment': 20, 'CountClassCoupled': 10, 'CountClassDerived': 0, 'CountLineCodeDecl': 16, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.28', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 23, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 5, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 55, 'SumCyclomaticModified': 17, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 6, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 10, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 55}"
2933,Java,"@Slf4j
public abstract class TradeSubView extends HBox {
    protected final PendingTradesViewModel model;
    protected VBox leftVBox;
    private AnchorPane contentPane;
    private TradeStepView tradeStepView;
    protected TradeStepInfo tradeStepInfo;
    private GridPane leftGridPane;
    private TitledGroupBg tradeProcessTitledGroupBg;
    private int leftGridPaneRowIndex = 0;
    Subscription viewStateSubscription;
    private PendingTradesView.ChatCallback chatCallback;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, Initialisation
    ///////////////////////////////////////////////////////////////////////////////////////////

    public TradeSubView(PendingTradesViewModel model) {
        this.model = model;

        setSpacing(Layout.PADDING_WINDOW);
        buildViews();
    }

    protected void activate() {
    }

    protected void deactivate() {
        if (viewStateSubscription != null)
            viewStateSubscription.unsubscribe();

        if (tradeStepView != null)
            tradeStepView.deactivate();

        if (tradeStepInfo != null)
            tradeStepInfo.removeItselfFrom(leftGridPane);
    }

    private void buildViews() {
        addLeftBox();
        addContentPane();

        leftGridPane = new GridPane();
        leftGridPane.setPrefWidth(340);
        leftGridPane.setHgap(Layout.GRID_GAP);
        leftGridPane.setVgap(Layout.GRID_GAP);
        VBox.setMargin(leftGridPane, new Insets(0, 10, 10, 10));
        leftVBox.getChildren().add(leftGridPane);

        leftGridPaneRowIndex = 0;
        tradeProcessTitledGroupBg = addTitledGroupBg(leftGridPane, leftGridPaneRowIndex, 1, Res.get(""portfolio.pending.tradeProcess""));
        tradeProcessTitledGroupBg.getStyleClass().add(""last"");

        addWizards();

        TitledGroupBg titledGroupBg = addTitledGroupBg(leftGridPane, leftGridPaneRowIndex, 1, """", 30);
        titledGroupBg.getStyleClass().add(""last"");
        Label label = addMultilineLabel(leftGridPane, leftGridPaneRowIndex, """", 30);
        AutoTooltipButton button = (AutoTooltipButton) addButtonAfterGroup(leftGridPane, ++leftGridPaneRowIndex, """");
        tradeStepInfo = new TradeStepInfo(titledGroupBg, label, button);
    }

    void showItem(TradeWizardItem item) {
        item.setActive();
        createAndAddTradeStepView(item.getViewClass());
    }

    protected abstract void addWizards();

    protected void onViewStateChanged(PendingTradesViewModel.State viewState) {
        tradeStepInfo.setTrade(model.getTrade());
    }

    void addWizardsToGridPane(TradeWizardItem tradeWizardItem) {
        if (leftGridPaneRowIndex == 0)
            GridPane.setMargin(tradeWizardItem, new Insets(Layout.FIRST_ROW_DISTANCE + Layout.FLOATING_LABEL_DISTANCE, 0, 0, 0));

        GridPane.setRowIndex(tradeWizardItem, leftGridPaneRowIndex++);
        leftGridPane.getChildren().add(tradeWizardItem);
        GridPane.setRowSpan(tradeProcessTitledGroupBg, leftGridPaneRowIndex);
        GridPane.setFillWidth(tradeWizardItem, true);
    }

    void addLineSeparatorToGridPane() {
        final Separator separator = new Separator(Orientation.VERTICAL);
        separator.setMinHeight(22);
        GridPane.setMargin(separator, new Insets(0, 0, 0, 13));
        GridPane.setHalignment(separator, HPos.LEFT);
        GridPane.setRowIndex(separator, leftGridPaneRowIndex++);
        leftGridPane.getChildren().add(separator);
    }

    private void createAndAddTradeStepView(Class<? extends TradeStepView> viewClass) {
        if (tradeStepView != null)
            tradeStepView.deactivate();
        try {
            tradeStepView = viewClass.getDeclaredConstructor(PendingTradesViewModel.class).newInstance(model);
            contentPane.getChildren().setAll(tradeStepView);
            tradeStepView.setTradeStepInfo(tradeStepInfo);
            ChatCallback chatCallback = trade -> {
                // call up the chain to open chat
                if (this.chatCallback != null) {
                    this.chatCallback.onOpenChat(trade);
                }
            };
            tradeStepView.setChatCallback(chatCallback);
            tradeStepView.activate();
        } catch (Exception e) {
            log.error(""Creating viewClass {} caused an error {}"", viewClass, e.getMessage());
            e.printStackTrace();
        }
    }

    private void addLeftBox() {
        leftVBox = new VBox();
        leftVBox.setSpacing(Layout.SPACING_V_BOX);
        leftVBox.setMinWidth(290);
        getChildren().add(leftVBox);
    }

    private void addContentPane() {
        contentPane = new AnchorPane();
        HBox.setHgrow(contentPane, Priority.SOMETIMES);
        getChildren().add(contentPane);
    }


    public interface ChatCallback {
        void onOpenChat(Trade trade);
    }

    public void setChatCallback(PendingTradesView.ChatCallback chatCallback) {
        this.chatCallback = chatCallback;
    }
}",1,64 2000 777 539 587 2001 650 2002 123 775 657 2003 2004 59 775 2005 2006 59 773 2007 2008 59 773 2009 2010 59 775 2011 2012 59 773 2013 2014 59 773 2015 2016 59 773 704 2017 61 1500 59 2018 2019 59 773 2020 46 2021 2022 59 331 330 331 777 2001 40 2003 2004 41 123 823 46 2004 61 2004 59 2023 40 2024 46 2025 41 59 2026 40 41 59 125 775 865 2027 40 41 123 125 775 865 2028 40 41 123 688 40 2019 340 2029 41 2019 46 2030 40 41 59 688 40 2010 340 2029 41 2010 46 2028 40 41 59 688 40 2012 340 2029 41 2012 46 2031 40 2014 41 59 125 773 865 2032 40 41 123 2033 40 41 59 2034 40 41 59 2014 61 744 2013 40 41 59 2014 46 2035 40 1504 41 59 2014 46 2036 40 2037 46 2038 41 59 2014 46 2039 40 2037 46 2038 41 59 2005 46 2040 40 2014 44 744 2041 40 1500 44 1502 44 1502 44 1502 41 41 59 2006 46 2042 40 41 46 2043 40 2014 41 59 2017 61 1500 59 2016 61 2044 40 2014 44 2017 44 1501 44 2045 46 2046 40 362 41 41 59 2016 46 2047 40 41 46 2043 40 362 41 59 2048 40 41 59 2015 2049 61 2044 40 2014 44 2017 44 1501 44 362 44 1503 41 59 2049 46 2047 40 41 46 2043 40 362 41 59 2050 2051 61 2052 40 2014 44 2017 44 362 44 1503 41 59 2053 2054 61 40 2053 41 2055 40 2014 44 349 2017 44 362 41 59 2012 61 744 2011 40 2049 44 2051 44 2054 41 59 125 865 2056 40 2057 2058 41 123 2058 46 2059 40 41 59 2060 40 2058 46 2061 40 41 41 59 125 775 539 865 2062 40 41 59 775 865 2063 40 2003 46 2064 2065 41 123 2012 46 2066 40 2004 46 2067 40 41 41 59 125 865 2068 40 2057 2069 41 123 688 40 2017 323 1500 41 2013 46 2070 40 2069 44 744 2071 40 2072 46 2073 43 2072 46 2074 44 1500 44 1500 44 1500 41 41 59 2013 46 2075 40 2069 44 2017 349 41 59 2014 46 2076 40 41 46 2077 40 2069 41 59 2013 46 2078 40 2016 44 2017 41 59 2013 46 2079 40 2069 44 2080 41 59 125 865 2081 40 41 123 657 2082 2083 61 744 2082 40 2084 46 2085 41 59 2083 46 2086 40 1503 41 59 2013 46 2087 40 2083 44 744 2088 40 1500 44 1500 44 1500 44 1503 41 41 59 2013 46 2089 40 2083 44 2090 46 2091 41 59 2013 46 2092 40 2083 44 2017 349 41 59 2014 46 2093 40 41 46 2094 40 2083 41 59 125 773 865 2095 40 2096 60 63 650 2009 62 2097 41 123 688 40 2010 340 2098 41 2010 46 2028 40 41 59 830 123 2010 61 2097 46 2099 40 2003 46 587 41 46 2100 40 2004 41 59 2008 46 2101 40 41 46 2102 40 2010 41 59 2010 46 2103 40 2012 41 59 2021 2022 61 2104 45 62 123 330 688 40 823 46 2022 340 2098 41 123 823 46 2022 46 2105 40 2104 41 59 125 125 59 2010 46 2106 40 2022 41 59 2010 46 2027 40 41 59 125 580 40 2107 2108 41 123 2109 46 2110 40 362 44 2097 44 2108 46 2111 40 41 41 59 2108 46 2112 40 41 59 125 125 773 865 2113 40 41 123 2006 61 744 2005 40 41 59 2006 46 2114 40 2115 46 2116 41 59 2006 46 2117 40 1504 41 59 2118 40 41 46 2119 40 2006 41 59 125 773 865 2120 40 41 123 2008 61 744 2007 40 41 59 2002 46 2121 40 2008 44 2122 46 2123 41 59 2124 40 41 46 2125 40 2008 41 59 125 777 709 2021 123 865 2126 40 2127 2128 41 59 125 777 865 2129 40 2020 46 2021 2022 41 123 823 46 2022 61 2022 59 125 125 ,"{'AvgLine': 8, 'CountLine': 136, 'CountStmt': 88, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 61, 'MaxEssential': 1, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 107, 'CountStmtDecl': 31, 'MaxCyclomatic': 4, 'SumCyclomatic': 20, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 25, 'CountSemicolon': 67, 'CountDeclMethod': 13, 'CountLineCodeExe': 64, 'CountLineComment': 4, 'CountClassCoupled': 25, 'CountClassDerived': 2, 'CountLineCodeDecl': 33, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.04', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 3, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 4, 'CountClassCoupledModified': 25, 'CountDeclInstanceVariable': 10, 'PercentLackOfCohesionModified': 70}"
3232,Java,"@EqualsAndHashCode
@Getter
public class TradeInfo implements Payload {

    // The client cannot see Trade or its fromProto method.  We use the
    // lighter weight TradeInfo proto wrapper instead, containing just enough fields to
    // view and interact with trades.

    // Bisq v1 trade protocol fields (some are in common with the BSQ Swap protocol).
    private final OfferInfo offer;
    private final String tradeId;
    private final String shortId;
    private final long date;
    private final String role;
    private final boolean isCurrencyForTakerFeeBtc;
    private final long txFeeAsLong;
    private final long takerFeeAsLong;
    private final String takerFeeTxId;
    private final String depositTxId;
    private final String payoutTxId;
    private final long tradeAmountAsLong;
    private final long tradePrice;
    private final long tradeVolume;
    private final String tradingPeerNodeAddress;
    private final String state;
    private final String phase;
    private final String tradePeriodState;
    private final boolean isDepositPublished;
    private final boolean isDepositConfirmed;
    private final boolean isFiatSent;
    private final boolean isFiatReceived;
    private final boolean isPayoutPublished;
    private final boolean isWithdrawn;
    private final String contractAsJson;
    private final ContractInfo contract;
    // Optional BSQ swap trade protocol details (post v1).
    private BsqSwapTradeInfo bsqSwapTradeInfo;

    public TradeInfo(TradeInfoV1Builder builder) {
        this.offer = builder.getOffer();
        this.tradeId = builder.getTradeId();
        this.shortId = builder.getShortId();
        this.date = builder.getDate();
        this.role = builder.getRole();
        this.isCurrencyForTakerFeeBtc = builder.isCurrencyForTakerFeeBtc();
        this.txFeeAsLong = builder.getTxFeeAsLong();
        this.takerFeeAsLong = builder.getTakerFeeAsLong();
        this.takerFeeTxId = builder.getTakerFeeTxId();
        this.depositTxId = builder.getDepositTxId();
        this.payoutTxId = builder.getPayoutTxId();
        this.tradeAmountAsLong = builder.getTradeAmountAsLong();
        this.tradePrice = builder.getTradePrice();
        this.tradeVolume = builder.getTradeVolume();
        this.tradingPeerNodeAddress = builder.getTradingPeerNodeAddress();
        this.state = builder.getState();
        this.phase = builder.getPhase();
        this.tradePeriodState = builder.getTradePeriodState();
        this.isDepositPublished = builder.isDepositPublished();
        this.isDepositConfirmed = builder.isDepositConfirmed();
        this.isFiatSent = builder.isFiatSent();
        this.isFiatReceived = builder.isFiatReceived();
        this.isPayoutPublished = builder.isPayoutPublished();
        this.isWithdrawn = builder.isWithdrawn();
        this.contractAsJson = builder.getContractAsJson();
        this.contract = builder.getContract();
        this.bsqSwapTradeInfo = null;
    }

    public static TradeInfo toNewTradeInfo(BsqSwapTrade trade, String role) {
        // Always called by the taker, isMyOffer=false.
        return toTradeInfo(trade, role, false, 0);
    }

    public static TradeInfo toNewTradeInfo(Trade trade) {
        // Always called by the taker, isMyOffer=false.
        return toTradeInfo(trade, null, false);
    }

    public static TradeInfo toTradeInfo(TradeModel tradeModel, String role, boolean isMyOffer) {
        if (tradeModel instanceof Trade)
            return toTradeInfo((Trade) tradeModel, role, isMyOffer);
        else if (tradeModel instanceof BsqSwapTrade)
            return toTradeInfo(tradeModel, role, isMyOffer);
        else
            throw new IllegalStateException(""unsupported trade type: "" + tradeModel.getClass().getSimpleName());
    }

    public static TradeInfo toTradeInfo(BsqSwapTrade bsqSwapTrade,
                                        String role,
                                        boolean isMyOffer,
                                        int numConfirmations) {
        OfferInfo offerInfo = isMyOffer ? toMyOfferInfo(bsqSwapTrade.getOffer()) : toOfferInfo(bsqSwapTrade.getOffer());
        TradeInfo tradeInfo = new TradeInfoV1Builder()
                .withOffer(offerInfo)
                .withTradeId(bsqSwapTrade.getId())
                .withShortId(bsqSwapTrade.getShortId())
                .withDate(bsqSwapTrade.getDate().getTime())
                .withRole(role == null ? """" : role)
                .withIsCurrencyForTakerFeeBtc(false) // BSQ Swap fees always paid in BSQ.
                .withTxFeeAsLong(bsqSwapTrade.getTxFee().value)
                .withTakerFeeAsLong(bsqSwapTrade.getTakerFeeAsLong())
                // N/A: .withTakerFeeTxId(""""), .withDepositTxId(""""), .withPayoutTxId("""")
                .withTradeAmountAsLong(bsqSwapTrade.getAmountAsLong())
                .withTradePrice(bsqSwapTrade.getPrice().getValue())
                .withTradeVolume(bsqSwapTrade.getVolume() == null ? 0 : bsqSwapTrade.getVolume().getValue())
                .withTradingPeerNodeAddress(requireNonNull(bsqSwapTrade.getTradingPeerNodeAddress().getFullAddress()))
                .withState(bsqSwapTrade.getTradeState().name())
                .withPhase(bsqSwapTrade.getTradePhase().name())
                // N/A: .withTradePeriodState(""""), .withIsDepositPublished(false), .withIsDepositConfirmed(false)
                // N/A: .withIsFiatSent(false), .withIsFiatReceived(false), .withIsPayoutPublished(false)
                // N/A: .withIsWithdrawn(false), .withContractAsJson(""""), .withContract(null)
                .build();
        tradeInfo.bsqSwapTradeInfo = toBsqSwapTradeInfo(bsqSwapTrade, isMyOffer, numConfirmations);
        return tradeInfo;
    }

    private static TradeInfo toTradeInfo(Trade trade, String role, boolean isMyOffer) {
        ContractInfo contractInfo;
        if (trade.getContract() != null) {
            Contract contract = trade.getContract();
            contractInfo = new ContractInfo(contract.getBuyerPayoutAddressString(),
                    contract.getSellerPayoutAddressString(),
                    contract.getMediatorNodeAddress().getFullAddress(),
                    contract.getRefundAgentNodeAddress().getFullAddress(),
                    contract.isBuyerMakerAndSellerTaker(),
                    contract.getMakerAccountId(),
                    contract.getTakerAccountId(),
                    toPaymentAccountPayloadInfo(contract.getMakerPaymentAccountPayload()),
                    toPaymentAccountPayloadInfo(contract.getTakerPaymentAccountPayload()),
                    contract.getMakerPayoutAddressString(),
                    contract.getTakerPayoutAddressString(),
                    contract.getLockTime());
        } else {
            contractInfo = ContractInfo.emptyContract.get();
        }

        OfferInfo offerInfo = isMyOffer ? toMyOfferInfo(trade.getOffer()) : toOfferInfo(trade.getOffer());
        return new TradeInfoV1Builder()
                .withOffer(offerInfo)
                .withTradeId(trade.getId())
                .withShortId(trade.getShortId())
                .withDate(trade.getDate().getTime())
                .withRole(role == null ? """" : role)
                .withIsCurrencyForTakerFeeBtc(trade.isCurrencyForTakerFeeBtc())
                .withTxFeeAsLong(trade.getTradeTxFeeAsLong())
                .withTakerFeeAsLong(trade.getTakerFeeAsLong())
                .withTakerFeeTxId(trade.getTakerFeeTxId())
                .withDepositTxId(trade.getDepositTxId())
                .withPayoutTxId(trade.getPayoutTxId())
                .withTradeAmountAsLong(trade.getAmountAsLong())
                .withTradePrice(trade.getPrice().getValue())
                .withTradeVolume(trade.getVolume() == null ? 0 : trade.getVolume().getValue())
                .withTradingPeerNodeAddress(requireNonNull(trade.getTradingPeerNodeAddress().getFullAddress()))
                .withState(trade.getTradeState().name())
                .withPhase(trade.getTradePhase().name())
                .withTradePeriodState(trade.getTradePeriodState().name())
                .withIsDepositPublished(trade.isDepositPublished())
                .withIsDepositConfirmed(trade.isDepositConfirmed())
                .withIsFiatSent(trade.isFiatSent())
                .withIsFiatReceived(trade.isFiatReceived())
                .withIsPayoutPublished(trade.isPayoutPublished())
                .withIsWithdrawn(trade.isWithdrawn())
                .withContractAsJson(trade.getContractAsJson())
                .withContract(contractInfo)
                .build();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public bisq.proto.grpc.TradeInfo toProtoMessage() {
        var protoBuilder =
                bisq.proto.grpc.TradeInfo.newBuilder()
                        .setOffer(offer.toProtoMessage())
                        .setTradeId(tradeId)
                        .setShortId(shortId)
                        .setDate(date)
                        .setRole(role)
                        .setIsCurrencyForTakerFeeBtc(isCurrencyForTakerFeeBtc)
                        .setTxFeeAsLong(txFeeAsLong)
                        .setTakerFeeAsLong(takerFeeAsLong)
                        .setTakerFeeTxId(takerFeeTxId == null ? """" : takerFeeTxId)
                        .setDepositTxId(depositTxId == null ? """" : depositTxId)
                        .setPayoutTxId(payoutTxId == null ? """" : payoutTxId)
                        .setTradeAmountAsLong(tradeAmountAsLong)
                        .setTradePrice(tradePrice)
                        .setTradeVolume(tradeVolume)
                        .setTradingPeerNodeAddress(tradingPeerNodeAddress)
                        .setState(state == null ? """" : state)
                        .setPhase(phase == null ? """" : phase)
                        .setTradePeriodState(tradePeriodState == null ? """" : tradePeriodState)
                        .setIsDepositPublished(isDepositPublished)
                        .setIsDepositConfirmed(isDepositConfirmed)
                        .setIsFiatSent(isFiatSent)
                        .setIsFiatReceived(isFiatReceived)
                        .setIsPayoutPublished(isPayoutPublished)
                        .setIsWithdrawn(isWithdrawn);

        if (offer.isBsqSwapOffer()) {
            protoBuilder.setBsqSwapTradeInfo(bsqSwapTradeInfo.toProtoMessage());
        } else {
            protoBuilder.setContractAsJson(contractAsJson == null ? """" : contractAsJson);
            protoBuilder.setContract(contract.toProtoMessage());
        }

        return protoBuilder.build();
    }

    public static TradeInfo fromProto(bisq.proto.grpc.TradeInfo proto) {
        var tradeInfo = new TradeInfoV1Builder()
                .withOffer(OfferInfo.fromProto(proto.getOffer()))
                .withTradeId(proto.getTradeId())
                .withShortId(proto.getShortId())
                .withDate(proto.getDate())
                .withRole(proto.getRole())
                .withIsCurrencyForTakerFeeBtc(proto.getIsCurrencyForTakerFeeBtc())
                .withTxFeeAsLong(proto.getTxFeeAsLong())
                .withTakerFeeAsLong(proto.getTakerFeeAsLong())
                .withTakerFeeTxId(proto.getTakerFeeTxId())
                .withDepositTxId(proto.getDepositTxId())
                .withPayoutTxId(proto.getPayoutTxId())
                .withTradeAmountAsLong(proto.getTradeAmountAsLong())
                .withTradePrice(proto.getTradePrice())
                .withTradeVolume(proto.getTradeVolume())
                .withTradePeriodState(proto.getTradePeriodState())
                .withState(proto.getState())
                .withPhase(proto.getPhase())
                .withTradingPeerNodeAddress(proto.getTradingPeerNodeAddress())
                .withIsDepositPublished(proto.getIsDepositPublished())
                .withIsDepositConfirmed(proto.getIsDepositConfirmed())
                .withIsFiatSent(proto.getIsFiatSent())
                .withIsFiatReceived(proto.getIsFiatReceived())
                .withIsPayoutPublished(proto.getIsPayoutPublished())
                .withIsWithdrawn(proto.getIsWithdrawn())
                .withContractAsJson(proto.getContractAsJson())
                .withContract((ContractInfo.fromProto(proto.getContract())))
                .build();

        if (proto.getOffer().getIsBsqSwapOffer())
            tradeInfo.bsqSwapTradeInfo = BsqSwapTradeInfo.fromProto(proto.getBsqSwapTradeInfo());

        return tradeInfo;
    }

    @Override
    public String toString() {
        return ""TradeInfo{"" +
                ""  tradeId='"" + tradeId + '\'' + ""\n"" +
                "", shortId='"" + shortId + '\'' + ""\n"" +
                "", date='"" + date + '\'' + ""\n"" +
                "", role='"" + role + '\'' + ""\n"" +
                "", isCurrencyForTakerFeeBtc='"" + isCurrencyForTakerFeeBtc + '\'' + ""\n"" +
                "", txFeeAsLong='"" + txFeeAsLong + '\'' + ""\n"" +
                "", takerFeeAsLong='"" + takerFeeAsLong + '\'' + ""\n"" +
                "", takerFeeTxId='"" + takerFeeTxId + '\'' + ""\n"" +
                "", depositTxId='"" + depositTxId + '\'' + ""\n"" +
                "", payoutTxId='"" + payoutTxId + '\'' + ""\n"" +
                "", tradeAmountAsLong='"" + tradeAmountAsLong + '\'' + ""\n"" +
                "", tradePrice='"" + tradePrice + '\'' + ""\n"" +
                "", tradeVolume='"" + tradeVolume + '\'' + ""\n"" +
                "", tradingPeerNodeAddress='"" + tradingPeerNodeAddress + '\'' + ""\n"" +
                "", state='"" + state + '\'' + ""\n"" +
                "", phase='"" + phase + '\'' + ""\n"" +
                "", tradePeriodState='"" + tradePeriodState + '\'' + ""\n"" +
                "", isDepositPublished="" + isDepositPublished + ""\n"" +
                "", isDepositConfirmed="" + isDepositConfirmed + ""\n"" +
                "", isFiatSent="" + isFiatSent + ""\n"" +
                "", isFiatReceived="" + isFiatReceived + ""\n"" +
                "", isPayoutPublished="" + isPayoutPublished + ""\n"" +
                "", isWithdrawn="" + isWithdrawn + ""\n"" +
                "", offer="" + offer + ""\n"" +
                "", contractAsJson="" + contractAsJson + ""\n"" +
                "", contract="" + contract + ""\n"" +
                "", bsqSwapTradeInfo="" + bsqSwapTradeInfo + ""\n"" +
                '}';
    }
}",1,64 2000 64 2001 777 587 2002 693 2003 123 330 330 330 330 773 657 2004 2005 59 773 657 2006 2007 59 773 657 2006 2008 59 773 657 726 2009 59 773 657 2006 2010 59 773 657 570 2011 59 773 657 726 2012 59 773 657 726 2013 59 773 657 2006 2014 59 773 657 2006 2015 59 773 657 2006 2016 59 773 657 726 2017 59 773 657 726 2018 59 773 657 726 2019 59 773 657 2006 2020 59 773 657 2006 2021 59 773 657 2006 2022 59 773 657 2006 2023 59 773 657 570 2024 59 773 657 570 2025 59 773 657 570 2026 59 773 657 570 2027 59 773 657 570 2028 59 773 657 570 2029 59 773 657 2006 2030 59 773 657 2031 2032 59 330 773 2033 2034 59 777 2002 40 2035 2036 41 123 823 46 2005 61 2036 46 2037 40 41 59 823 46 2007 61 2036 46 2038 40 41 59 823 46 2008 61 2036 46 2039 40 41 59 823 46 2009 61 2036 46 2040 40 41 59 823 46 2010 61 2036 46 2041 40 41 59 823 46 2011 61 2036 46 2011 40 41 59 823 46 2012 61 2036 46 2042 40 41 59 823 46 2013 61 2036 46 2043 40 41 59 823 46 2014 61 2036 46 2044 40 41 59 823 46 2015 61 2036 46 2045 40 41 59 823 46 2016 61 2036 46 2046 40 41 59 823 46 2017 61 2036 46 2047 40 41 59 823 46 2018 61 2036 46 2048 40 41 59 823 46 2019 61 2036 46 2049 40 41 59 823 46 2020 61 2036 46 2050 40 41 59 823 46 2021 61 2036 46 2051 40 41 59 823 46 2022 61 2036 46 2052 40 41 59 823 46 2023 61 2036 46 2053 40 41 59 823 46 2024 61 2036 46 2024 40 41 59 823 46 2025 61 2036 46 2025 40 41 59 823 46 2026 61 2036 46 2026 40 41 59 823 46 2027 61 2036 46 2027 40 41 59 823 46 2028 61 2036 46 2028 40 41 59 823 46 2029 61 2036 46 2029 40 41 59 823 46 2030 61 2036 46 2054 40 41 59 823 46 2032 61 2036 46 2055 40 41 59 823 46 2034 61 2056 59 125 777 809 2002 2057 40 2058 2059 44 2006 2010 41 123 330 792 2060 40 2059 44 2010 44 2061 44 1500 41 59 125 777 809 2002 2057 40 2062 2059 41 123 330 792 2063 40 2059 44 2064 44 2065 41 59 125 777 809 2002 2066 40 2067 2068 44 2006 2010 44 570 2069 41 123 688 40 2068 702 2062 41 792 2066 40 40 2062 41 2068 44 2010 44 2069 41 59 630 688 40 2068 702 2058 41 792 2066 40 2068 44 2010 44 2069 41 59 630 825 744 2070 40 362 43 2068 46 2071 40 41 46 2072 40 41 41 59 125 777 809 2002 2066 40 2058 2073 44 2006 2010 44 570 2069 44 704 2074 41 123 2004 2075 61 2069 63 2076 40 2073 46 2077 40 41 41 58 2078 40 2073 46 2077 40 41 41 59 2002 2079 61 744 2035 40 41 46 2080 40 2075 41 46 2081 40 2073 46 2082 40 41 41 46 2083 40 2073 46 2084 40 41 41 46 2085 40 2073 46 2086 40 41 46 2087 40 41 41 46 2088 40 2010 323 2089 63 362 58 2010 41 46 2090 40 2091 41 330 46 2092 40 2073 46 2093 40 41 46 2094 41 46 2095 40 2073 46 2096 40 41 41 330 46 2097 40 2073 46 2098 40 41 41 46 2099 40 2073 46 2100 40 41 46 2101 40 41 41 46 2102 40 2073 46 2103 40 41 323 2089 63 1500 58 2073 46 2103 40 41 46 2101 40 41 41 46 2104 40 2105 40 2073 46 2106 40 41 46 2107 40 41 41 41 46 2108 40 2073 46 2109 40 41 46 2110 40 41 41 46 2111 40 2073 46 2112 40 41 46 2110 40 41 41 330 330 330 46 2113 40 41 59 2079 46 2034 61 2114 40 2073 44 2069 44 2074 41 59 792 2079 59 125 773 809 2002 2066 40 2062 2059 44 2006 2010 44 570 2069 41 123 2031 2115 59 688 40 2059 46 2116 40 41 340 2117 41 123 2118 2032 61 2059 46 2116 40 41 59 2115 61 744 2031 40 2032 46 2119 40 41 44 2032 46 2120 40 41 44 2032 46 2121 40 41 46 2122 40 41 44 2032 46 2123 40 41 46 2122 40 41 44 2032 46 2124 40 41 44 2032 46 2125 40 41 44 2032 46 2126 40 41 44 2127 40 2032 46 2128 40 41 41 44 2127 40 2032 46 2129 40 41 41 44 2032 46 2130 40 41 44 2032 46 2131 40 41 44 2032 46 2132 40 41 41 59 125 630 123 2115 61 2031 46 2133 46 2134 40 41 59 125 2004 2135 61 2069 63 2136 40 2059 46 2137 40 41 41 58 2138 40 2059 46 2137 40 41 41 59 792 744 2035 40 41 46 2139 40 2135 41 46 2140 40 2059 46 2141 40 41 41 46 2142 40 2059 46 2143 40 41 41 46 2144 40 2059 46 2145 40 41 46 2146 40 41 41 46 2147 40 2010 323 2117 63 362 58 2010 41 46 2148 40 2059 46 2011 40 41 41 46 2149 40 2059 46 2150 40 41 41 46 2151 40 2059 46 2152 40 41 41 46 2153 40 2059 46 2154 40 41 41 46 2155 40 2059 46 2156 40 41 41 46 2157 40 2059 46 2158 40 41 41 46 2159 40 2059 46 2160 40 41 41 46 2161 40 2059 46 2162 40 41 46 2163 40 41 41 46 2164 40 2059 46 2165 40 41 323 2117 63 1500 58 2059 46 2165 40 41 46 2163 40 41 41 46 2166 40 2167 40 2059 46 2168 40 41 46 2169 40 41 41 41 46 2170 40 2059 46 2171 40 41 46 2172 40 41 41 46 2173 40 2059 46 2174 40 41 46 2172 40 41 41 46 2175 40 2059 46 2176 40 41 46 2172 40 41 41 46 2177 40 2059 46 2024 40 41 41 46 2178 40 2059 46 2025 40 41 41 46 2179 40 2059 46 2026 40 41 41 46 2180 40 2059 46 2027 40 41 41 46 2181 40 2059 46 2028 40 41 41 46 2182 40 2059 46 2029 40 41 41 46 2183 40 2059 46 2184 40 41 41 46 2185 40 2115 41 46 2186 40 41 59 125 331 330 331 64 2187 777 2188 46 2189 46 2190 46 2002 2191 40 41 123 2192 2193 61 2188 46 2189 46 2190 46 2002 46 2194 40 41 46 2195 40 2005 46 2191 40 41 41 46 2196 40 2007 41 46 2197 40 2008 41 46 2198 40 2009 41 46 2199 40 2010 41 46 2200 40 2011 41 46 2201 40 2012 41 46 2202 40 2013 41 46 2203 40 2014 323 2204 63 362 58 2014 41 46 2205 40 2015 323 2204 63 362 58 2015 41 46 2206 40 2016 323 2204 63 362 58 2016 41 46 2207 40 2017 41 46 2208 40 2018 41 46 2209 40 2019 41 46 2210 40 2020 41 46 2211 40 2021 323 2204 63 362 58 2021 41 46 2212 40 2022 323 2204 63 362 58 2022 41 46 2213 40 2023 323 2204 63 362 58 2023 41 46 2214 40 2024 41 46 2215 40 2025 41 46 2216 40 2026 41 46 2217 40 2027 41 46 2218 40 2028 41 46 2219 40 2029 41 59 688 40 2005 46 2220 40 41 41 123 2193 46 2221 40 2034 46 2191 40 41 41 59 125 630 123 2193 46 2222 40 2030 323 2204 63 362 58 2030 41 59 2193 46 2223 40 2032 46 2191 40 41 41 59 125 792 2193 46 2224 40 41 59 125 777 809 2002 2225 40 2188 46 2189 46 2190 46 2002 2189 41 123 2226 2227 61 744 2035 40 41 46 2228 40 2004 46 2225 40 2189 46 2229 40 41 41 41 46 2230 40 2189 46 2231 40 41 41 46 2232 40 2189 46 2233 40 41 41 46 2234 40 2189 46 2235 40 41 41 46 2236 40 2189 46 2237 40 41 41 46 2238 40 2189 46 2239 40 41 41 46 2240 40 2189 46 2241 40 41 41 46 2242 40 2189 46 2243 40 41 41 46 2244 40 2189 46 2245 40 41 41 46 2246 40 2189 46 2247 40 41 41 46 2248 40 2189 46 2249 40 41 41 46 2250 40 2189 46 2251 40 41 41 46 2252 40 2189 46 2253 40 41 41 46 2254 40 2189 46 2255 40 41 41 46 2256 40 2189 46 2257 40 41 41 46 2258 40 2189 46 2259 40 41 41 46 2260 40 2189 46 2261 40 41 41 46 2262 40 2189 46 2263 40 41 41 46 2264 40 2189 46 2265 40 41 41 46 2266 40 2189 46 2267 40 41 41 46 2268 40 2189 46 2269 40 41 41 46 2270 40 2189 46 2271 40 41 41 46 2272 40 2189 46 2273 40 41 41 46 2274 40 2189 46 2275 40 41 41 46 2276 40 2189 46 2277 40 41 41 46 2278 40 40 2031 46 2225 40 2189 46 2279 40 41 41 41 41 46 2280 40 41 59 688 40 2189 46 2229 40 41 46 2281 40 41 41 2227 46 2034 61 2033 46 2225 40 2189 46 2282 40 41 41 59 792 2227 59 125 64 2187 777 2006 2283 40 41 123 792 362 43 362 43 2007 43 314 43 362 43 362 43 2008 43 314 43 362 43 362 43 2009 43 314 43 362 43 362 43 2010 43 314 43 362 43 362 43 2011 43 314 43 362 43 362 43 2012 43 314 43 362 43 362 43 2013 43 314 43 362 43 362 43 2014 43 314 43 362 43 362 43 2015 43 314 43 362 43 362 43 2016 43 314 43 362 43 362 43 2017 43 314 43 362 43 362 43 2018 43 314 43 362 43 362 43 2019 43 314 43 362 43 362 43 2020 43 314 43 362 43 362 43 2021 43 314 43 362 43 362 43 2022 43 314 43 362 43 362 43 2023 43 314 43 362 43 362 43 2024 43 362 43 362 43 2025 43 362 43 362 43 2026 43 362 43 362 43 2027 43 362 43 362 43 2028 43 362 43 362 43 2029 43 362 43 362 43 2005 43 362 43 362 43 2030 43 362 43 362 43 2032 43 362 43 362 43 2034 43 362 43 314 59 125 125 ,"{'AvgLine': 25, 'CountLine': 279, 'CountStmt': 93, 'MaxNesting': 1, 'AvgLineCode': 24, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 55, 'MaxEssential': 3, 'SumEssential': 11, 'AvgCyclomatic': 3, 'CountLineCode': 248, 'CountStmtDecl': 44, 'MaxCyclomatic': 9, 'SumCyclomatic': 27, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 17, 'CountSemicolon': 78, 'CountDeclMethod': 9, 'CountLineCodeExe': 190, 'CountLineComment': 15, 'CountClassCoupled': 18, 'CountClassDerived': 0, 'CountLineCodeDecl': 54, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.06', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 27, 'CountDeclClassMethod': 6, 'AvgCyclomaticModified': 3, 'CountDeclMethodPublic': 8, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 65, 'SumCyclomaticModified': 27, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 18, 'CountDeclInstanceVariable': 27, 'PercentLackOfCohesionModified': 65}"
2873,Java,"public class PopOver extends PopupControl {

    private static final String DEFAULT_STYLE_CLASS = ""popover""; //$NON-NLS-1$

    private static final Duration DEFAULT_FADE_DURATION = Duration.seconds(.2);

    private double targetX;

    private double targetY;

    private final SimpleBooleanProperty animated = new SimpleBooleanProperty(true);
    private final ObjectProperty<Duration> fadeInDuration = new SimpleObjectProperty<>(DEFAULT_FADE_DURATION);
    private final ObjectProperty<Duration> fadeOutDuration = new SimpleObjectProperty<>(DEFAULT_FADE_DURATION);

    private final Logger log = LoggerFactory.getLogger(this.getClass());

    /**
     * Creates a pop over with a label as the content node.
     */
    public PopOver() {
        super();

        getStyleClass().add(DEFAULT_STYLE_CLASS);

        getRoot().getStylesheets().add(
                requireNonNull(PopOver.class.getResource(""popover.css"")).toExternalForm()); //$NON-NLS-1$

        setAnchorLocation(AnchorLocation.WINDOW_TOP_LEFT);
        setOnHiding(evt -> setDetached(false));

        /*
         * Create some initial content.
         */
        Label label = new Label(""No content set""); //$NON-NLS-1$
        label.setPrefSize(200, 200);
        label.setPadding(new Insets(4));
        setContentNode(label);

        InvalidationListener repositionListener = observable -> {
            if (isShowing() && !isDetached()) {
                show(getOwnerNode(), targetX, targetY);
                adjustWindowLocation();
            }
        };

        arrowSize.addListener(repositionListener);
        cornerRadius.addListener(repositionListener);
        arrowLocation.addListener(repositionListener);
        arrowIndent.addListener(repositionListener);
        headerAlwaysVisible.addListener(repositionListener);

        /*
         * A detached popover should of course not automatically hide itself.
         */
        detached.addListener(it -> setAutoHide(!isDetached()));

        setAutoHide(true);
    }

    /**
     * Creates a pop over with the given node as the content node.
     *
     * @param content
     *            The content shown by the pop over
     */
    public PopOver(Node content) {
        this();

        setContentNode(content);
    }

    @Override
    protected Skin<?> createDefaultSkin() {
        return new PopOverSkin(this);
    }

    private final StackPane root = new StackPane();

    /**
     * The root pane stores the content node of the popover. It is accessible
     * via this method in order to support proper styling.
     *
     * <h3>Example:</h3>
     *
     * <pre>
     * PopOver popOver = new PopOver();
     * popOver.getRoot().getStylesheets().add(...);
     * </pre>
     *
     * @return the root pane
     */
    public final StackPane getRoot() {
        return root;
    }

    // Content support.

    private final ObjectProperty<Node> contentNode = new SimpleObjectProperty<>(
            this, ""contentNode"") { //$NON-NLS-1$
        @Override
        public void setValue(Node node) {
            if (node == null) {
                throw new IllegalArgumentException(
                        ""content node can not be null""); //$NON-NLS-1$
            }
        }

    };

    /**
     * Returns the content shown by the pop over.
     *
     * @return the content node property
     */
    public final ObjectProperty<Node> contentNodeProperty() {
        return contentNode;
    }

    /**
     * Returns the value of the content property
     *
     * @return the content node
     *
     * @see #contentNodeProperty()
     */
    public final Node getContentNode() {
        return contentNodeProperty().get();
    }

    /**
     * Sets the value of the content property.
     *
     * @param content
     *            the new content node value
     *
     * @see #contentNodeProperty()
     */
    public final void setContentNode(Node content) {
        contentNodeProperty().set(content);
    }

    private final InvalidationListener hideListener = observable -> {
        if (!isDetached()) {
            hide(Duration.ZERO);
        }
    };

    private final WeakInvalidationListener weakHideListener = new WeakInvalidationListener(
            hideListener);

    private final ChangeListener<Number> xListener = (value, oldX, newX) -> {
        if (!isDetached()) {
            setAnchorX(getAnchorX() + (newX.doubleValue() - oldX.doubleValue()));
        }
    };

    private final WeakChangeListener<Number> weakXListener = new WeakChangeListener<>(
            xListener);

    private final ChangeListener<Number> yListener = (value, oldY, newY) -> {
        if (!isDetached()) {
            setAnchorY(getAnchorY() + (newY.doubleValue() - oldY.doubleValue()));
        }
    };

    private final WeakChangeListener<Number> weakYListener = new WeakChangeListener<>(
            yListener);

    private Window ownerWindow;
    private final EventHandler<WindowEvent> closePopOverOnOwnerWindowCloseLambda = event -> ownerWindowClosing();
    private final WeakEventHandler<WindowEvent> closePopOverOnOwnerWindowClose = new WeakEventHandler<>(closePopOverOnOwnerWindowCloseLambda);

    /**
     * Shows the pop over in a position relative to the edges of the given owner
     * node. The position is dependent on the arrow location. If the arrow is
     * pointing to the right then the pop over will be placed to the left of the
     * given owner. If the arrow points up then the pop over will be placed
     * below the given owner node. The arrow will slightly overlap with the
     * owner node.
     *
     * @param owner
     *            the owner of the pop over
     */
    public final void show(Node owner) {
        show(owner, 4);
    }

    /**
     * Shows the pop over in a position relative to the edges of the given owner
     * node. The position is dependent on the arrow location. If the arrow is
     * pointing to the right then the pop over will be placed to the left of the
     * given owner. If the arrow points up then the pop over will be placed
     * below the given owner node.
     *
     * @param owner
     *            the owner of the pop over
     * @param offset
     *            if negative specifies the distance to the owner node or when
     *            positive specifies the number of pixels that the arrow will
     *            overlap with the owner node (positive values are recommended)
     */
    public final void show(Node owner, double offset) {
        requireNonNull(owner);

        Bounds bounds = owner.localToScreen(owner.getBoundsInLocal());

        switch (getArrowLocation()) {
            case BOTTOM_CENTER:
            case BOTTOM_LEFT:
            case BOTTOM_RIGHT:
                show(owner, bounds.getMinX() + bounds.getWidth() / 2,
                        bounds.getMinY() + offset);
                break;
            case LEFT_BOTTOM:
            case LEFT_CENTER:
            case LEFT_TOP:
                show(owner, bounds.getMaxX() - offset,
                        bounds.getMinY() + bounds.getHeight() / 2);
                break;
            case RIGHT_BOTTOM:
            case RIGHT_CENTER:
            case RIGHT_TOP:
                show(owner, bounds.getMinX() + offset,
                        bounds.getMinY() + bounds.getHeight() / 2);
                break;
            case TOP_CENTER:
            case TOP_LEFT:
            case TOP_RIGHT:
                show(owner, bounds.getMinX() + bounds.getWidth() / 2,
                        bounds.getMinY() + bounds.getHeight() - offset);
                break;
            default:
                break;
        }
    }

    /** {@inheritDoc} */
    @Override
    public final void show(Window owner) {
        super.show(owner);
        ownerWindow = owner;

        if (isAnimated()) {
            showFadeInAnimation(getFadeInDuration());
        }

        ownerWindow.addEventFilter(WindowEvent.WINDOW_CLOSE_REQUEST,
                closePopOverOnOwnerWindowClose);
        ownerWindow.addEventFilter(WindowEvent.WINDOW_HIDING,
                closePopOverOnOwnerWindowClose);
    }

    /** {@inheritDoc} */
    @Override
    public final void show(Window ownerWindow, double anchorX, double anchorY) {
        super.show(ownerWindow, anchorX, anchorY);
        this.ownerWindow = ownerWindow;

        if (isAnimated()) {
            showFadeInAnimation(getFadeInDuration());
        }

        ownerWindow.addEventFilter(WindowEvent.WINDOW_CLOSE_REQUEST,
                closePopOverOnOwnerWindowClose);
        ownerWindow.addEventFilter(WindowEvent.WINDOW_HIDING,
                closePopOverOnOwnerWindowClose);
    }

    /**
     * Makes the pop over visible at the give location and associates it with
     * the given owner node. The x and y coordinate will be the target location
     * of the arrow of the pop over and not the location of the window.
     *
     * @param owner
     *            the owning node
     * @param x
     *            the x coordinate for the pop over arrow tip
     * @param y
     *            the y coordinate for the pop over arrow tip
     */
    @Override
    public final void show(Node owner, double x, double y) {
        show(owner, x, y, getFadeInDuration());
    }

    /**
     * Makes the pop over visible at the give location and associates it with
     * the given owner node. The x and y coordinate will be the target location
     * of the arrow of the pop over and not the location of the window.
     *
     * @param owner
     *            the owning node
     * @param x
     *            the x coordinate for the pop over arrow tip
     * @param y
     *            the y coordinate for the pop over arrow tip
     * @param fadeInDuration
     *            the time it takes for the pop over to be fully visible. This duration takes precedence over the fade-in property without setting.
     */
    public final void show(Node owner, double x, double y,
                           Duration fadeInDuration) {

        /*
         * Calling show() a second time without first closing the pop over
         * causes it to be placed at the wrong location.
         */
        if (ownerWindow != null && isShowing()) {
            super.hide();
        }

        targetX = x;
        targetY = y;

        if (owner == null) {
            throw new IllegalArgumentException(""owner can not be null""); //$NON-NLS-1$
        }

        if (fadeInDuration == null) {
            fadeInDuration = DEFAULT_FADE_DURATION;
        }

        /*
         * This is all needed because children windows do not get their x and y
         * coordinate updated when the owning window gets moved by the user.
         */
        if (ownerWindow != null) {
            ownerWindow.xProperty().removeListener(weakXListener);
            ownerWindow.yProperty().removeListener(weakYListener);
            ownerWindow.widthProperty().removeListener(weakHideListener);
            ownerWindow.heightProperty().removeListener(weakHideListener);
        }

        ownerWindow = owner.getScene().getWindow();
        ownerWindow.xProperty().addListener(weakXListener);
        ownerWindow.yProperty().addListener(weakYListener);
        ownerWindow.widthProperty().addListener(weakHideListener);
        ownerWindow.heightProperty().addListener(weakHideListener);

        setOnShown(evt -> {

            /*
             * The user clicked somewhere into the transparent background. If
             * this is the case then hide the window (when attached).
             */
            getScene().addEventHandler(MOUSE_CLICKED, mouseEvent -> {
                if (mouseEvent.getTarget().equals(getScene().getRoot())) {
                    if (!isDetached()) {
                        hide();
                    }
                }
            });

            /*
             * Move the window so that the arrow will end up pointing at the
             * target coordinates.
             */
            adjustWindowLocation();
        });

        super.show(owner, x, y);

        if (isAnimated()) {
            showFadeInAnimation(fadeInDuration);
        }

        // Bug fix - close popup when owner window is closing
        ownerWindow.addEventFilter(WindowEvent.WINDOW_CLOSE_REQUEST,
                closePopOverOnOwnerWindowClose);
        ownerWindow.addEventFilter(WindowEvent.WINDOW_HIDING,
                closePopOverOnOwnerWindowClose);
    }

    private void showFadeInAnimation(Duration fadeInDuration) {
        // Fade In
        Node skinNode = getSkin().getNode();
        skinNode.setOpacity(0);

        FadeTransition fadeIn = new FadeTransition(fadeInDuration, skinNode);
        fadeIn.setFromValue(0);
        fadeIn.setToValue(1);
        fadeIn.play();
    }

    private void ownerWindowClosing() {
        hide(Duration.ZERO);
    }

    /**
     * Hides the pop over by quickly changing its opacity to 0.
     *
     * @see #hide(Duration)
     */
    @Override
    public final void hide() {
        hide(getFadeOutDuration());
    }

    /**
     * Hides the pop over by quickly changing its opacity to 0.
     *
     * @param fadeOutDuration
     *            the duration of the fade transition that is being used to
     *            change the opacity of the pop over
     * @since 1.0
     */
    public final void hide(Duration fadeOutDuration) {
        log.info(""hide:"" + fadeOutDuration.toString());
        //We must remove EventFilter in order to prevent memory leak.
        if (ownerWindow != null) {
            ownerWindow.removeEventFilter(WindowEvent.WINDOW_CLOSE_REQUEST,
                    closePopOverOnOwnerWindowClose);
            ownerWindow.removeEventFilter(WindowEvent.WINDOW_HIDING,
                    closePopOverOnOwnerWindowClose);
        }
        if (fadeOutDuration == null) {
            fadeOutDuration = DEFAULT_FADE_DURATION;
        }

        if (isShowing()) {
            if (isAnimated()) {
                // Fade Out
                Node skinNode = getSkin().getNode();

                FadeTransition fadeOut = new FadeTransition(fadeOutDuration,
                        skinNode);
                fadeOut.setFromValue(skinNode.getOpacity());
                fadeOut.setToValue(0);
                fadeOut.setOnFinished(evt -> super.hide());
                fadeOut.play();
            } else {
                super.hide();
            }
        }
    }

    private void adjustWindowLocation() {
        Bounds bounds = PopOver.this.getSkin().getNode().getBoundsInParent();

        switch (getArrowLocation()) {
            case TOP_CENTER:
            case TOP_LEFT:
            case TOP_RIGHT:
                setAnchorX(getAnchorX() + bounds.getMinX() - computeXOffset());
                setAnchorY(getAnchorY() + bounds.getMinY() + getArrowSize());
                break;
            case LEFT_TOP:
            case LEFT_CENTER:
            case LEFT_BOTTOM:
                setAnchorX(getAnchorX() + bounds.getMinX() + getArrowSize());
                setAnchorY(getAnchorY() + bounds.getMinY() - computeYOffset());
                break;
            case BOTTOM_CENTER:
            case BOTTOM_LEFT:
            case BOTTOM_RIGHT:
                setAnchorX(getAnchorX() + bounds.getMinX() - computeXOffset());
                setAnchorY(getAnchorY() - bounds.getMinY() - bounds.getMaxY() - 1);
                break;
            case RIGHT_TOP:
            case RIGHT_BOTTOM:
            case RIGHT_CENTER:
                setAnchorX(getAnchorX() - bounds.getMinX() - bounds.getMaxX() - 1);
                setAnchorY(getAnchorY() + bounds.getMinY() - computeYOffset());
                break;
        }
    }

    private double computeXOffset() {
        switch (getArrowLocation()) {
            case TOP_LEFT:
            case BOTTOM_LEFT:
                return getCornerRadius() + getArrowIndent() + getArrowSize();
            case TOP_CENTER:
            case BOTTOM_CENTER:
                return getContentNode().prefWidth(-1) / 2;
            case TOP_RIGHT:
            case BOTTOM_RIGHT:
                return getContentNode().prefWidth(-1) - getArrowIndent()
                        - getCornerRadius() - getArrowSize();
            default:
                return 0;
        }
    }

    private double computeYOffset() {
        double prefContentHeight = getContentNode().prefHeight(-1);

        switch (getArrowLocation()) {
            case LEFT_TOP:
            case RIGHT_TOP:
                return getCornerRadius() + getArrowIndent() + getArrowSize();
            case LEFT_CENTER:
            case RIGHT_CENTER:
                return Math.max(prefContentHeight, 2 * (getCornerRadius()
                        + getArrowIndent() + getArrowSize())) / 2;
            case LEFT_BOTTOM:
            case RIGHT_BOTTOM:
                return Math.max(prefContentHeight - getCornerRadius()
                        - getArrowIndent() - getArrowSize(), getCornerRadius()
                        + getArrowIndent() + getArrowSize());
            default:
                return 0;
        }
    }

    /**
     * Detaches the pop over from the owning node. The pop over will no longer
     * display an arrow pointing at the owner node.
     */
    public final void detach() {
        if (isDetachable()) {
            setDetached(true);
        }
    }

    // always show header

    private final BooleanProperty headerAlwaysVisible = new SimpleBooleanProperty(this, ""headerAlwaysVisible""); //$NON-NLS-1$

    /**
     * Determines whether or not the {@link PopOver} header should remain visible, even while attached.
     */
    public final BooleanProperty headerAlwaysVisibleProperty() {
        return headerAlwaysVisible;
    }

    /**
     * Sets the value of the headerAlwaysVisible property.
     *
     * @param visible
     *            if true, then the header is visible even while attached
     *
     * @see #headerAlwaysVisibleProperty()
     */
    public final void setHeaderAlwaysVisible(boolean visible) {
        headerAlwaysVisible.setValue(visible);
    }

    /**
     * Returns the value of the detachable property.
     *
     * @return true if the header is visible even while attached
     *
     * @see #headerAlwaysVisibleProperty()
     */
    public final boolean isHeaderAlwaysVisible() {
        return headerAlwaysVisible.getValue();
    }

    // enable close button

    private final BooleanProperty closeButtonEnabled = new SimpleBooleanProperty(this, ""closeButtonEnabled"", true); //$NON-NLS-1$

    /**
     * Determines whether or not the header's close button should be available.
     */
    public final BooleanProperty closeButtonEnabledProperty() {
        return closeButtonEnabled;
    }

    /**
     * Sets the value of the closeButtonEnabled property.
     *
     * @param enabled
     *            if false, the pop over will not be closeable by the header's close button
     *
     * @see #closeButtonEnabledProperty()
     */
    public final void setCloseButtonEnabled(boolean enabled) {
        closeButtonEnabled.setValue(enabled);
    }

    /**
     * Returns the value of the closeButtonEnabled property.
     *
     * @return true if the header's close button is enabled
     *
     * @see #closeButtonEnabledProperty()
     */
    public final boolean isCloseButtonEnabled() {
        return closeButtonEnabled.getValue();
    }

    // detach support

    private final BooleanProperty detachable = new SimpleBooleanProperty(this,
            ""detachable"", true); //$NON-NLS-1$

    /**
     * Determines if the pop over is detachable at all.
     */
    public final BooleanProperty detachableProperty() {
        return detachable;
    }

    /**
     * Sets the value of the detachable property.
     *
     * @param detachable
     *            if true then the user can detach / tear off the pop over
     *
     * @see #detachableProperty()
     */
    public final void setDetachable(boolean detachable) {
        detachableProperty().set(detachable);
    }

    /**
     * Returns the value of the detachable property.
     *
     * @return true if the user is allowed to detach / tear off the pop over
     *
     * @see #detachableProperty()
     */
    public final boolean isDetachable() {
        return detachableProperty().get();
    }

    private final BooleanProperty detached = new SimpleBooleanProperty(this,
            ""detached"", false); //$NON-NLS-1$

    /**
     * Determines whether the pop over is detached from the owning node or not.
     * A detached pop over no longer shows an arrow pointing at the owner and
     * features its own title bar.
     *
     * @return the detached property
     */
    public final BooleanProperty detachedProperty() {
        return detached;
    }

    /**
     * Sets the value of the detached property.
     *
     * @param detached
     *            if true the pop over will change its apperance to ""detached""
     *            mode
     *
     * @see #detachedProperty()
     */
    public final void setDetached(boolean detached) {
        detachedProperty().set(detached);
    }

    /**
     * Returns the value of the detached property.
     *
     * @return true if the pop over is currently detached.
     *
     * @see #detachedProperty()
     */
    public final boolean isDetached() {
        return detachedProperty().get();
    }

    // arrow size support

    // TODO: make styleable

    private final DoubleProperty arrowSize = new SimpleDoubleProperty(this,
            ""arrowSize"", 12); //$NON-NLS-1$

    /**
     * Controls the size of the arrow. Default value is 12.
     *
     * @return the arrow size property
     */
    public final DoubleProperty arrowSizeProperty() {
        return arrowSize;
    }

    /**
     * Returns the value of the arrow size property.
     *
     * @return the arrow size property value
     *
     * @see #arrowSizeProperty()
     */
    public final double getArrowSize() {
        return arrowSizeProperty().get();
    }

    /**
     * Sets the value of the arrow size property.
     *
     * @param size
     *            the new value of the arrow size property
     *
     * @see #arrowSizeProperty()
     */
    public final void setArrowSize(double size) {
        arrowSizeProperty().set(size);
    }

    // arrow indent support

    // TODO: make styleable

    private final DoubleProperty arrowIndent = new SimpleDoubleProperty(this,
            ""arrowIndent"", 12); //$NON-NLS-1$

    /**
     * Controls the distance between the arrow and the corners of the pop over.
     * The default value is 12.
     *
     * @return the arrow indent property
     */
    public final DoubleProperty arrowIndentProperty() {
        return arrowIndent;
    }

    /**
     * Returns the value of the arrow indent property.
     *
     * @return the arrow indent value
     *
     * @see #arrowIndentProperty()
     */
    public final double getArrowIndent() {
        return arrowIndentProperty().get();
    }

    /**
     * Sets the value of the arrow indent property.
     *
     * @param size
     *            the arrow indent value
     *
     * @see #arrowIndentProperty()
     */
    public final void setArrowIndent(double size) {
        arrowIndentProperty().set(size);
    }

    // radius support

    // TODO: make styleable

    private final DoubleProperty cornerRadius = new SimpleDoubleProperty(this,
            ""cornerRadius"", 6); //$NON-NLS-1$

    /**
     * Returns the corner radius property for the pop over.
     *
     * @return the corner radius property (default is 6)
     */
    public final DoubleProperty cornerRadiusProperty() {
        return cornerRadius;
    }

    /**
     * Returns the value of the corner radius property.
     *
     * @return the corner radius
     *
     * @see #cornerRadiusProperty()
     */
    public final double getCornerRadius() {
        return cornerRadiusProperty().get();
    }

    /**
     * Sets the value of the corner radius property.
     *
     * @param radius
     *            the corner radius
     *
     * @see #cornerRadiusProperty()
     */
    public final void setCornerRadius(double radius) {
        cornerRadiusProperty().set(radius);
    }

    // Detached stage title

    private final StringProperty title = new SimpleStringProperty(this, ""title"", ""No title set""); //$NON-NLS-1$ //$NON-NLS-2$

    /**
     * Stores the title to display in the PopOver's header.
     *
     * @return the title property
     */
    public final StringProperty titleProperty() {
        return title;
    }

    /**
     * Returns the value of the title property.
     *
     * @return the detached title
     * @see #titleProperty()
     */
    public final String getTitle() {
        return titleProperty().get();
    }

    /**
     * Sets the value of the title property.
     *
     * @param title the title to use when detached
     * @see #titleProperty()
     */
    public final void setTitle(String title) {
        if (title == null) {
            throw new IllegalArgumentException(""title can not be null""); //$NON-NLS-1$
        }

        titleProperty().set(title);
    }

    private final ObjectProperty<ArrowLocation> arrowLocation = new SimpleObjectProperty<>(
            this, ""arrowLocation"", ArrowLocation.LEFT_TOP); //$NON-NLS-1$

    /**
     * Stores the preferred arrow location. This might not be the actual
     * location of the arrow if auto fix is enabled.
     *
     * @see #setAutoFix(boolean)
     *
     * @return the arrow location property
     */
    public final ObjectProperty<ArrowLocation> arrowLocationProperty() {
        return arrowLocation;
    }

    /**
     * Sets the value of the arrow location property.
     *
     * @see #arrowLocationProperty()
     *
     * @param location
     *            the requested location
     */
    public final void setArrowLocation(ArrowLocation location) {
        arrowLocationProperty().set(location);
    }

    /**
     * Returns the value of the arrow location property.
     *
     * @see #arrowLocationProperty()
     *
     * @return the preferred arrow location
     */
    public final ArrowLocation getArrowLocation() {
        return arrowLocationProperty().get();
    }

    /**
     * All possible arrow locations.
     */
    public enum ArrowLocation {
        LEFT_TOP, LEFT_CENTER, LEFT_BOTTOM, RIGHT_TOP, RIGHT_CENTER, RIGHT_BOTTOM, TOP_LEFT, TOP_CENTER, TOP_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT
    }

    /**
     * Stores the fade-in duration. This should be set before calling PopOver.show(..).
     *
     * @return the fade-in duration property
     */
    public final ObjectProperty<Duration> fadeInDurationProperty() {
        return fadeInDuration;
    }

    /**
     * Stores the fade-out duration.
     *
     * @return the fade-out duration property
     */
    public final ObjectProperty<Duration> fadeOutDurationProperty() {
        return fadeOutDuration;
    }

    /**
     * Returns the value of the fade-in duration property.
     *
     * @return the fade-in duration
     * @see #fadeInDurationProperty()
     */
    public final Duration getFadeInDuration() {
        return fadeInDurationProperty().get();
    }

    /**
     * Sets the value of the fade-in duration property. This should be set before calling PopOver.show(..).
     *
     * @param duration the requested fade-in duration
     * @see #fadeInDurationProperty()
     */
    public final void setFadeInDuration(Duration duration) {
        fadeInDurationProperty().setValue(duration);
    }

    /**
     * Returns the value of the fade-out duration property.
     *
     * @return the fade-out duration
     * @see #fadeOutDurationProperty()
     */
    public final Duration getFadeOutDuration() {
        return fadeOutDurationProperty().get();
    }

    /**
     * Sets the value of the fade-out duration property.
     *
     * @param duration the requested fade-out duration
     * @see #fadeOutDurationProperty()
     */
    public final void setFadeOutDuration(Duration duration) {
        fadeOutDurationProperty().setValue(duration);
    }

    /**
     * Stores the ""animated"" flag. If true then the PopOver will be shown / hidden with a short fade in / out animation.
     *
     * @return the ""animated"" property
     */
    public final BooleanProperty animatedProperty() {
        return animated;
    }

    /**
     * Returns the value of the ""animated"" property.
     *
     * @return true if the PopOver will be shown and hidden with a short fade animation
     * @see #animatedProperty()
     */
    public final boolean isAnimated() {
        return animatedProperty().get();
    }

    /**
     * Sets the value of the ""animated"" property.
     *
     * @param animated if true the PopOver will be shown and hidden with a short fade animation
     * @see #animatedProperty()
     */
    public final void setAnimated(boolean animated) {
        animatedProperty().set(animated);
    }
}",1,777 587 2000 650 2001 123 773 809 657 2002 2003 61 362 59 330 773 809 657 2004 2005 61 2004 46 2006 40 1500 41 59 773 625 2007 59 773 625 2008 59 773 657 2009 2010 61 744 2009 40 2011 41 59 773 657 2012 60 2004 62 2013 61 744 2014 60 62 40 2005 41 59 773 657 2012 60 2004 62 2015 61 744 2014 60 62 40 2005 41 59 773 657 2016 2017 61 2018 46 2019 40 823 46 2020 40 41 41 59 306 777 2000 40 41 123 818 40 41 59 2021 40 41 46 2022 40 2003 41 59 2023 40 41 46 2024 40 41 46 2022 40 2025 40 2000 46 587 46 2026 40 362 41 41 46 2027 40 41 41 59 330 2028 40 2029 46 2030 41 59 2031 40 2032 45 62 2033 40 2034 41 41 59 305 2035 2036 61 744 2035 40 362 41 59 330 2036 46 2037 40 1504 44 1504 41 59 2036 46 2038 40 744 2039 40 1502 41 41 59 2040 40 2036 41 59 2041 2042 61 2043 45 62 123 688 40 2044 40 41 307 33 2045 40 41 41 123 2046 40 2047 40 41 44 2007 44 2008 41 59 2048 40 41 59 125 125 59 2049 46 2050 40 2042 41 59 2051 46 2050 40 2042 41 59 2052 46 2050 40 2042 41 59 2053 46 2050 40 2042 41 59 2054 46 2050 40 2042 41 59 305 2055 46 2050 40 2056 45 62 2057 40 33 2058 40 41 41 41 59 2057 40 2011 41 59 125 306 777 2000 40 2059 2060 41 123 823 40 41 59 2061 40 2060 41 59 125 64 2062 775 2063 60 63 62 2064 40 41 123 792 744 2065 40 823 41 59 125 773 657 2066 2067 61 744 2066 40 41 59 306 777 657 2066 2068 40 41 123 792 2067 59 125 330 773 657 2012 60 2059 62 2069 61 744 2014 60 62 40 823 44 362 41 123 330 64 2062 777 865 2070 40 2059 2071 41 123 688 40 2071 323 2072 41 123 825 744 2073 40 362 41 59 330 125 125 125 59 306 777 657 2012 60 2059 62 2074 40 41 123 792 2069 59 125 306 777 657 2059 2075 40 41 123 792 2074 40 41 46 2076 40 41 59 125 306 777 657 865 2077 40 2059 2060 41 123 2074 40 41 46 2078 40 2060 41 59 125 773 657 2079 2080 61 2081 45 62 123 688 40 33 2082 40 41 41 123 2083 40 2004 46 2084 41 59 125 125 59 773 657 2085 2086 61 744 2085 40 2080 41 59 773 657 2087 60 2088 62 2089 61 40 2090 44 2091 44 2092 41 45 62 123 688 40 33 2093 40 41 41 123 2094 40 2095 40 41 43 40 2092 46 2096 40 41 45 2091 46 2096 40 41 41 41 59 125 125 59 773 657 2097 60 2088 62 2098 61 744 2097 60 62 40 2089 41 59 773 657 2087 60 2088 62 2099 61 40 2090 44 2100 44 2101 41 45 62 123 688 40 33 2102 40 41 41 123 2103 40 2104 40 41 43 40 2101 46 2105 40 41 45 2100 46 2105 40 41 41 41 59 125 125 59 773 657 2097 60 2088 62 2106 61 744 2097 60 62 40 2099 41 59 773 2107 2108 59 773 657 2109 60 2110 62 2111 61 2112 45 62 2113 40 41 59 773 657 2114 60 2110 62 2115 61 744 2114 60 62 40 2111 41 59 306 777 657 865 2116 40 2059 2117 41 123 2116 40 2117 44 1502 41 59 125 306 777 657 865 2116 40 2059 2117 44 625 2118 41 123 2119 40 2117 41 59 2120 2121 61 2117 46 2122 40 2117 46 2123 40 41 41 59 819 40 2124 40 41 41 123 579 2125 58 579 2126 58 579 2127 58 2116 40 2117 44 2121 46 2128 40 41 43 2121 46 2129 40 41 47 1502 44 2121 46 2130 40 41 43 2118 41 59 572 59 579 2131 58 579 2132 58 579 2133 58 2116 40 2117 44 2121 46 2134 40 41 45 2118 44 2121 46 2130 40 41 43 2121 46 2135 40 41 47 1502 41 59 572 59 579 2136 58 579 2137 58 579 2138 58 2116 40 2117 44 2121 46 2128 40 41 43 2118 44 2121 46 2130 40 41 43 2121 46 2135 40 41 47 1502 41 59 572 59 579 2139 58 579 2140 58 579 2141 58 2116 40 2117 44 2121 46 2128 40 41 43 2121 46 2129 40 41 47 1502 44 2121 46 2130 40 41 43 2121 46 2135 40 41 45 2118 41 59 572 59 613 58 572 59 125 125 306 64 2062 777 657 865 2116 40 2107 2117 41 123 818 46 2116 40 2117 41 59 2108 61 2117 59 688 40 2142 40 41 41 123 2143 40 2144 40 41 41 59 125 2108 46 2145 40 2110 46 2146 44 2115 41 59 2108 46 2145 40 2110 46 2147 44 2115 41 59 125 306 64 2062 777 657 865 2116 40 2107 2108 44 625 2148 44 625 2149 41 123 818 46 2116 40 2108 44 2148 44 2149 41 59 823 46 2108 61 2108 59 688 40 2150 40 41 41 123 2151 40 2152 40 41 41 59 125 2108 46 2153 40 2110 46 2154 44 2115 41 59 2108 46 2153 40 2110 46 2155 44 2115 41 59 125 306 64 2062 777 657 865 2116 40 2059 2117 44 625 2156 44 625 2157 41 123 2116 40 2117 44 2156 44 2157 44 2158 40 41 41 59 125 306 777 657 865 2116 40 2059 2117 44 625 2156 44 625 2157 44 2004 2013 41 123 305 688 40 2108 340 2159 307 2160 40 41 41 123 818 46 2161 40 41 59 125 2007 61 2156 59 2008 61 2157 59 688 40 2117 323 2159 41 123 825 744 2162 40 362 41 59 330 125 688 40 2013 323 2159 41 123 2013 61 2005 59 125 305 688 40 2108 340 2159 41 123 2108 46 2163 40 41 46 2164 40 2098 41 59 2108 46 2165 40 41 46 2164 40 2106 41 59 2108 46 2166 40 41 46 2164 40 2086 41 59 2108 46 2167 40 41 46 2164 40 2086 41 59 125 2108 61 2117 46 2168 40 41 46 2169 40 41 59 2108 46 2170 40 41 46 2171 40 2098 41 59 2108 46 2172 40 41 46 2171 40 2106 41 59 2108 46 2173 40 41 46 2171 40 2086 41 59 2108 46 2174 40 41 46 2171 40 2086 41 59 2175 40 2176 45 62 123 305 2168 40 41 46 2177 40 2178 44 2179 45 62 123 688 40 2179 46 2180 40 41 46 2181 40 2168 40 41 46 2068 40 41 41 41 123 688 40 33 2182 40 41 41 123 2183 40 41 59 125 125 125 41 59 305 2184 40 41 59 125 41 59 818 46 2116 40 2117 44 2156 44 2157 41 59 688 40 2185 40 41 41 123 2186 40 2013 41 59 125 330 2108 46 2187 40 2110 46 2188 44 2115 41 59 2108 46 2187 40 2110 46 2189 44 2115 41 59 125 773 865 2190 40 2004 2013 41 123 330 2059 2191 61 2192 40 41 46 2193 40 41 59 2191 46 2194 40 1500 41 59 2195 2196 61 744 2195 40 2013 44 2191 41 59 2196 46 2197 40 1500 41 59 2196 46 2198 40 1501 41 59 2196 46 2199 40 41 59 125 773 865 2113 40 41 123 2200 40 2004 46 2201 41 59 125 306 64 2062 777 657 865 2202 40 41 123 2202 40 2203 40 41 41 59 125 306 777 657 865 2202 40 2004 2015 41 123 2017 46 2204 40 362 43 2015 46 2205 40 41 41 59 330 688 40 2108 340 2206 41 123 2108 46 2207 40 2110 46 2208 44 2115 41 59 2108 46 2207 40 2110 46 2209 44 2115 41 59 125 688 40 2015 323 2206 41 123 2015 61 2005 59 125 688 40 2210 40 41 41 123 688 40 2211 40 41 41 123 330 2059 2212 61 2213 40 41 46 2214 40 41 59 2215 2216 61 744 2215 40 2015 44 2212 41 59 2216 46 2217 40 2212 46 2218 40 41 41 59 2216 46 2219 40 1500 41 59 2216 46 2220 40 2221 45 62 818 46 2202 40 41 41 59 2216 46 2222 40 41 59 125 630 123 818 46 2202 40 41 59 125 125 125 773 865 2223 40 41 123 2224 2225 61 2000 46 823 46 2226 40 41 46 2227 40 41 46 2228 40 41 59 819 40 2229 40 41 41 123 579 2230 58 579 2231 58 579 2232 58 2233 40 2234 40 41 43 2225 46 2235 40 41 45 2236 40 41 41 59 2237 40 2238 40 41 43 2225 46 2239 40 41 43 2240 40 41 41 59 572 59 579 2241 58 579 2242 58 579 2243 58 2233 40 2234 40 41 43 2225 46 2235 40 41 43 2240 40 41 41 59 2237 40 2238 40 41 43 2225 46 2239 40 41 45 2244 40 41 41 59 572 59 579 2245 58 579 2246 58 579 2247 58 2233 40 2234 40 41 43 2225 46 2235 40 41 45 2236 40 41 41 59 2237 40 2238 40 41 45 2225 46 2239 40 41 45 2225 46 2248 40 41 45 1501 41 59 572 59 579 2249 58 579 2250 58 579 2251 58 2233 40 2234 40 41 45 2225 46 2235 40 41 45 2225 46 2252 40 41 45 1501 41 59 2237 40 2238 40 41 43 2225 46 2239 40 41 45 2244 40 41 41 59 572 59 125 125 773 625 2253 40 41 123 819 40 2254 40 41 41 123 579 2255 58 579 2256 58 792 2257 40 41 43 2258 40 41 43 2259 40 41 59 579 2260 58 579 2261 58 792 2075 40 41 46 2262 40 45 1501 41 47 1502 59 579 2263 58 579 2264 58 792 2075 40 41 46 2262 40 45 1501 41 45 2258 40 41 45 2257 40 41 45 2259 40 41 59 613 58 792 1500 59 125 125 773 625 2265 40 41 123 625 2266 61 2075 40 41 46 2267 40 45 1501 41 59 819 40 2268 40 41 41 123 579 2269 58 579 2270 58 792 2271 40 41 43 2272 40 41 43 2273 40 41 59 579 2274 58 579 2275 58 792 2276 46 2277 40 2266 44 1502 42 40 2271 40 41 43 2272 40 41 43 2273 40 41 41 41 47 1502 59 579 2278 58 579 2279 58 792 2276 46 2277 40 2266 45 2271 40 41 45 2272 40 41 45 2273 40 41 44 2271 40 41 43 2272 40 41 43 2273 40 41 41 59 613 58 792 1500 59 125 125 306 777 657 865 2280 40 41 123 688 40 2281 40 41 41 123 2282 40 2011 41 59 125 125 330 773 657 2283 2284 61 744 2009 40 823 44 362 41 59 330 306 777 657 2283 2285 40 41 123 792 2284 59 125 306 777 657 865 2286 40 570 2287 41 123 2284 46 2288 40 2287 41 59 125 306 777 657 570 2289 40 41 123 792 2284 46 2290 40 41 59 125 330 773 657 2283 2291 61 744 2009 40 823 44 362 44 2011 41 59 330 306 777 657 2283 2292 40 41 123 792 2291 59 125 306 777 657 865 2293 40 570 2294 41 123 2291 46 2295 40 2294 41 59 125 306 777 657 570 2296 40 41 123 792 2291 46 2297 40 41 59 125 330 773 657 2283 2298 61 744 2009 40 823 44 362 44 2011 41 59 330 306 777 657 2283 2299 40 41 123 792 2298 59 125 306 777 657 865 2300 40 570 2298 41 123 2299 40 41 46 2301 40 2298 41 59 125 306 777 657 570 2302 40 41 123 792 2299 40 41 46 2303 40 41 59 125 773 657 2283 2304 61 744 2009 40 823 44 362 44 2305 41 59 330 306 777 657 2283 2306 40 41 123 792 2304 59 125 306 777 657 865 2307 40 570 2304 41 123 2306 40 41 46 2308 40 2304 41 59 125 306 777 657 570 2309 40 41 123 792 2306 40 41 46 2310 40 41 59 125 330 330 773 657 2311 2312 61 744 2313 40 823 44 362 44 1503 41 59 330 306 777 657 2311 2314 40 41 123 792 2312 59 125 306 777 657 625 2315 40 41 123 792 2314 40 41 46 2316 40 41 59 125 306 777 657 865 2317 40 625 2318 41 123 2314 40 41 46 2319 40 2318 41 59 125 330 330 773 657 2311 2320 61 744 2313 40 823 44 362 44 1503 41 59 330 306 777 657 2311 2321 40 41 123 792 2320 59 125 306 777 657 625 2322 40 41 123 792 2321 40 41 46 2323 40 41 59 125 306 777 657 865 2324 40 625 2318 41 123 2321 40 41 46 2325 40 2318 41 59 125 330 330 773 657 2311 2326 61 744 2313 40 823 44 362 44 1502 41 59 330 306 777 657 2311 2327 40 41 123 792 2326 59 125 306 777 657 625 2328 40 41 123 792 2327 40 41 46 2329 40 41 59 125 306 777 657 865 2330 40 625 2331 41 123 2327 40 41 46 2332 40 2331 41 59 125 330 773 657 2333 2334 61 744 2335 40 823 44 362 44 362 41 59 330 306 777 657 2333 2336 40 41 123 792 2334 59 125 306 777 657 2002 2337 40 41 123 792 2336 40 41 46 2338 40 41 59 125 306 777 657 865 2339 40 2002 2334 41 123 688 40 2334 323 2340 41 123 825 744 2341 40 362 41 59 330 125 2336 40 41 46 2342 40 2334 41 59 125 773 657 2012 60 2343 62 2344 61 744 2014 60 62 40 823 44 362 44 2343 46 2345 41 59 330 306 777 657 2012 60 2343 62 2346 40 41 123 792 2344 59 125 306 777 657 865 2347 40 2343 2348 41 123 2346 40 41 46 2349 40 2348 41 59 125 306 777 657 2343 2350 40 41 123 792 2346 40 41 46 2351 40 41 59 125 306 777 640 2343 123 2345 44 2352 44 2353 44 2354 44 2355 44 2356 44 2357 44 2358 44 2359 44 2360 44 2361 44 2362 125 306 777 657 2012 60 2004 62 2363 40 41 123 792 2013 59 125 306 777 657 2012 60 2004 62 2364 40 41 123 792 2015 59 125 306 777 657 2004 2365 40 41 123 792 2363 40 41 46 2366 40 41 59 125 306 777 657 865 2367 40 2004 2368 41 123 2363 40 41 46 2369 40 2368 41 59 125 306 777 657 2004 2370 40 41 123 792 2364 40 41 46 2371 40 41 59 125 306 777 657 865 2372 40 2004 2368 41 123 2364 40 41 46 2373 40 2368 41 59 125 306 777 657 2283 2374 40 41 123 792 2010 59 125 306 777 657 570 2375 40 41 123 792 2374 40 41 46 2376 40 41 59 125 306 777 657 865 2377 40 570 2010 41 123 2374 40 41 46 2378 40 2010 41 59 125 125 ,"{'AvgLine': 13, 'CountLine': 971, 'CountStmt': 266, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 197, 'MaxEssential': 1, 'SumEssential': 62, 'AvgCyclomatic': 1, 'CountLineCode': 434, 'CountStmtDecl': 97, 'MaxCyclomatic': 13, 'SumCyclomatic': 112, 'AvgLineComment': 6, 'CountClassBase': 1, 'CountLineBlank': 127, 'CountSemicolon': 182, 'CountDeclMethod': 57, 'CountLineCodeExe': 276, 'CountLineComment': 426, 'CountClassCoupled': 31, 'CountClassDerived': 0, 'CountLineCodeDecl': 118, 'CountDeclMethodAll': 61, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.98', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 13, 'SumCyclomaticStrict': 114, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 51, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 97, 'SumCyclomaticModified': 80, 'CountDeclClassVariable': 2, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 57, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 31, 'CountDeclInstanceVariable': 26, 'PercentLackOfCohesionModified': 91}"
26424,Java,"public abstract class GameXmlReader extends XmlReader {

    protected static final String ATTR_ID = ""id"";
    protected static final String ATTR_VALUE = ""value"";

    /**
     * Wrapper for {@link #parseFile(String)} method.
     *
     * @param path the relative path to the datapack root of the XML file to parse.
     */
    protected void parseDatapackFile(String path) {
        parseFile(ServerSettings.dataPackDirectory().resolve(path).toString());
    }

    /**
     * Wrapper for {@link #parseDirectory(File, boolean)}.
     *
     * @param path      the path to the directory where the XML files are
     * @param recursive parses all sub folders if there is
     * @return {@code false} if it fails to find the directory, {@code true} otherwise
     */
    protected boolean parseDatapackDirectory(String path, boolean recursive) {
        return parseDirectory(new File(ServerSettings.dataPackDirectory().toFile(), path), recursive);
    }

    protected Map<String, Object> parseParameters(Node n) {
        final Map<String, Object> parameters = new HashMap<>();
        for (Node parameters_node = n.getFirstChild(); parameters_node != null; parameters_node = parameters_node.getNextSibling()) {
            NamedNodeMap attrs = parameters_node.getAttributes();
            switch (parameters_node.getNodeName().toLowerCase()) {
                case ""param"" -> parameters.put(parseString(attrs, ""name""), parseString(attrs, ""value""));
                case ""skill"" -> parameters.put(parseString(attrs, ""name""), new SkillHolder(parseInt(attrs, ""id""), parseInt(attrs, ""level"")));
                case ""location"" -> parameters.put(parseString(attrs, ""name""), new Location(parseInt(attrs, ""x""), parseInt(attrs, ""y""), parseInt(attrs, ""z""), parseInt(attrs, ""heading"", 0)));
                case ""minions"" -> parseMinions(parameters, parameters_node);
            }
        }
        return parameters;
    }

    private void parseMinions(Map<String, Object> parameters, Node node) {
        NamedNodeMap attrs;
        final List<MinionHolder> minions = new ArrayList<>(1);
        for (Node minions_node = node.getFirstChild(); minions_node != null; minions_node = minions_node.getNextSibling()) {
            if (minions_node.getNodeName().equalsIgnoreCase(""npc"")) {
                attrs = minions_node.getAttributes();
                minions.add(new MinionHolder(parseInt(attrs, ""id""), parseInt(attrs, ""count"")));
            }
        }

        if (!minions.isEmpty()) {
            parameters.put(parseString(node.getAttributes(), ""name""), minions);
        }
    }

    public Location parseLocation(Node n) {
        final NamedNodeMap attrs = n.getAttributes();
        final int x = parseInt(attrs, ""x"");
        final int y = parseInt(attrs, ""y"");
        final int z = parseInt(attrs, ""z"");
        final int heading = parseInt(attrs, ""heading"", 0);
        return new Location(x, y, z, heading);
    }

    public ItemHolder parseItemHolder(Node n) {
        final var attrs = n.getAttributes();
        return new ItemHolder(parseInt(attrs, ""id""), parseLong(attrs, ""count""), parseInt(attrs, ""enchant"", 0));
    }

    public Skill parseSkillInfo(Node node) {
        return parseSkillInfo(node, ""id"", ""level"");
    }

    public Skill parseSkillInfo(Node node, String idAttribute, String levelAttribute) {
        var attrs = node.getAttributes();
        return SkillEngine.getInstance().getSkill(parseInt(attrs, idAttribute), parseInt(attrs, levelAttribute, 1));
    }
}",1,777 539 587 2000 650 2001 123 775 809 657 2002 2003 61 362 59 775 809 657 2002 2004 61 362 59 306 775 865 2005 40 2002 2006 41 123 2007 40 2008 46 2009 40 41 46 2010 40 2006 41 46 2011 40 41 41 59 125 306 775 570 2012 40 2002 2006 44 570 2013 41 123 792 2014 40 744 2015 40 2016 46 2017 40 41 46 2018 40 41 44 2006 41 44 2013 41 59 125 775 2019 60 2002 44 2020 62 2021 40 2022 2023 41 123 657 2019 60 2002 44 2020 62 2024 61 744 2025 60 62 40 41 59 664 40 2022 2026 61 2023 46 2027 40 41 59 2026 340 2028 59 2026 61 2026 46 2029 40 41 41 123 2030 2031 61 2026 46 2032 40 41 59 819 40 2026 46 2033 40 41 46 2034 40 41 41 123 579 362 45 62 2024 46 2035 40 2036 40 2031 44 362 41 44 2036 40 2031 44 362 41 41 59 579 362 45 62 2024 46 2035 40 2036 40 2031 44 362 41 44 744 2037 40 2038 40 2031 44 362 41 44 2038 40 2031 44 362 41 41 41 59 579 362 45 62 2024 46 2035 40 2036 40 2031 44 362 41 44 744 2039 40 2038 40 2031 44 362 41 44 2038 40 2031 44 362 41 44 2038 40 2031 44 362 41 44 2038 40 2031 44 362 44 1500 41 41 41 59 579 362 45 62 2040 40 2024 44 2026 41 59 125 125 792 2024 59 125 773 865 2041 40 2019 60 2002 44 2020 62 2042 44 2022 2043 41 123 2044 2045 59 657 2046 60 2047 62 2048 61 744 2049 60 62 40 1501 41 59 664 40 2022 2050 61 2043 46 2051 40 41 59 2050 340 2052 59 2050 61 2050 46 2053 40 41 41 123 688 40 2050 46 2054 40 41 46 2055 40 362 41 41 123 2045 61 2050 46 2056 40 41 59 2048 46 2057 40 744 2047 40 2058 40 2045 44 362 41 44 2058 40 2045 44 362 41 41 41 59 125 125 688 40 33 2048 46 2059 40 41 41 123 2042 46 2060 40 2061 40 2043 46 2062 40 41 44 362 41 44 2048 41 59 125 125 777 2063 2064 40 2022 2023 41 123 657 2065 2066 61 2023 46 2067 40 41 59 657 704 2068 61 2069 40 2066 44 362 41 59 657 704 2070 61 2069 40 2066 44 362 41 59 657 704 2071 61 2069 40 2066 44 362 41 59 657 704 2072 61 2069 40 2066 44 362 44 1500 41 59 792 744 2063 40 2068 44 2070 44 2071 44 2072 41 59 125 777 2073 2074 40 2022 2023 41 123 657 2075 2076 61 2023 46 2077 40 41 59 792 744 2073 40 2078 40 2076 44 362 41 44 2079 40 2076 44 362 41 44 2078 40 2076 44 362 44 1500 41 41 59 125 777 2080 2081 40 2022 2043 41 123 792 2081 40 2043 44 362 44 362 41 59 125 777 2080 2081 40 2022 2043 44 2002 2082 44 2002 2083 41 123 2084 2085 61 2043 46 2086 40 41 59 792 2087 46 2088 40 41 46 2089 40 2090 40 2085 44 2082 41 44 2090 40 2085 44 2083 44 1501 41 41 59 125 125 ,"{'AvgLine': 8, 'CountLine': 82, 'CountStmt': 41, 'MaxNesting': 2, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 29, 'MaxEssential': 6, 'SumEssential': 13, 'AvgCyclomatic': 2, 'CountLineCode': 55, 'CountStmtDecl': 24, 'MaxCyclomatic': 6, 'SumCyclomatic': 16, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountSemicolon': 27, 'CountDeclMethod': 8, 'CountLineCodeExe': 31, 'CountLineComment': 17, 'CountClassCoupled': 15, 'CountClassDerived': 67, 'CountLineCodeDecl': 22, 'CountDeclMethodAll': 67, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.31', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 13, 'CountDeclClassVariable': 2, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodProtected': 3, 'CountClassCoupledModified': 15, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
3023,Java,"@Slf4j
public class P2PDataStorage implements MessageListener, ConnectionListener, PersistedDataHost {
    /**
     * How many days to keep an entry before it is purged.
     */
    @VisibleForTesting
    public static final int PURGE_AGE_DAYS = 10;

    @VisibleForTesting
    public static final int CHECK_TTL_INTERVAL_SEC = 60;

    private boolean initialRequestApplied = false;

    private final Broadcaster broadcaster;
    @VisibleForTesting
    final AppendOnlyDataStoreService appendOnlyDataStoreService;
    private final ProtectedDataStoreService protectedDataStoreService;
    private final ResourceDataStoreService resourceDataStoreService;

    @Getter
    private final Map<ByteArray, ProtectedStorageEntry> map = new ConcurrentHashMap<>();
    private final Set<HashMapChangedListener> hashMapChangedListeners = new CopyOnWriteArraySet<>();
    private Timer removeExpiredEntriesTimer;

    private final PersistenceManager<SequenceNumberMap> persistenceManager;

    @VisibleForTesting
    final SequenceNumberMap sequenceNumberMap = new SequenceNumberMap();

    private final Set<AppendOnlyDataStoreListener> appendOnlyDataStoreListeners = new CopyOnWriteArraySet<>();
    private final RemovedPayloadsService removedPayloadsService;
    private final Clock clock;

    /// The maximum number of items that must exist in the SequenceNumberMap before it is scheduled for a purge
    /// which removes entries after PURGE_AGE_DAYS.
    private final int maxSequenceNumberMapSizeBeforePurge;

    // Don't convert to local variable as it might get GC'ed.
    private MonadicBinding<Boolean> readFromResourcesCompleteBinding;

    @Setter
    private Predicate<ProtectedStoragePayload> filterPredicate; //Set from FilterManager


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    public P2PDataStorage(NetworkNode networkNode,
                          Broadcaster broadcaster,
                          AppendOnlyDataStoreService appendOnlyDataStoreService,
                          ProtectedDataStoreService protectedDataStoreService,
                          ResourceDataStoreService resourceDataStoreService,
                          PersistenceManager<SequenceNumberMap> persistenceManager,
                          RemovedPayloadsService removedPayloadsService,
                          Clock clock,
                          @Named(""MAX_SEQUENCE_NUMBER_MAP_SIZE_BEFORE_PURGE"") int maxSequenceNumberBeforePurge) {
        this.broadcaster = broadcaster;
        this.appendOnlyDataStoreService = appendOnlyDataStoreService;
        this.protectedDataStoreService = protectedDataStoreService;
        this.resourceDataStoreService = resourceDataStoreService;
        this.persistenceManager = persistenceManager;
        this.removedPayloadsService = removedPayloadsService;
        this.clock = clock;
        this.maxSequenceNumberMapSizeBeforePurge = maxSequenceNumberBeforePurge;

        networkNode.addMessageListener(this);
        networkNode.addConnectionListener(this);

        this.persistenceManager.initialize(sequenceNumberMap, PersistenceManager.Source.PRIVATE_LOW_PRIO);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PersistedDataHost
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void readPersisted(Runnable completeHandler) {
        persistenceManager.readPersisted(persisted -> {
                    sequenceNumberMap.setMap(getPurgedSequenceNumberMap(persisted.getMap()));
                    completeHandler.run();
                },
                completeHandler);
    }

    // Uses synchronous execution on the userThread. Only used by tests. The async methods should be used by app code.
    @VisibleForTesting
    public void readPersistedSync() {
        SequenceNumberMap persisted = persistenceManager.getPersisted();
        if (persisted != null) {
            sequenceNumberMap.setMap(getPurgedSequenceNumberMap(persisted.getMap()));
        }
    }

    // Threading is done on the persistenceManager level
    public void readFromResources(String postFix, Runnable completeHandler) {
        BooleanProperty appendOnlyDataStoreServiceReady = new SimpleBooleanProperty();
        BooleanProperty protectedDataStoreServiceReady = new SimpleBooleanProperty();
        BooleanProperty resourceDataStoreServiceReady = new SimpleBooleanProperty();

        readFromResourcesCompleteBinding = EasyBind.combine(appendOnlyDataStoreServiceReady,
                protectedDataStoreServiceReady,
                resourceDataStoreServiceReady,
                (a, b, c) -> a && b && c);
        readFromResourcesCompleteBinding.subscribe((observable, oldValue, newValue) -> {
            if (newValue) {
                completeHandler.run();
            }
        });

        appendOnlyDataStoreService.readFromResources(postFix, () -> appendOnlyDataStoreServiceReady.set(true));
        protectedDataStoreService.readFromResources(postFix, () -> {
            map.putAll(protectedDataStoreService.getMap());
            protectedDataStoreServiceReady.set(true);
        });
        resourceDataStoreService.readFromResources(postFix, () -> resourceDataStoreServiceReady.set(true));
    }

    // Uses synchronous execution on the userThread. Only used by tests. The async methods should be used by app code.
    @VisibleForTesting
    public void readFromResourcesSync(String postFix) {
        appendOnlyDataStoreService.readFromResourcesSync(postFix);
        protectedDataStoreService.readFromResourcesSync(postFix);
        resourceDataStoreService.readFromResourcesSync(postFix);

        map.putAll(protectedDataStoreService.getMap());
    }

    // We get added mailbox message data from MailboxMessageService. We want to add those early so we can get it added
    // to our excluded keys to reduce initial data response data size.
    public void addProtectedMailboxStorageEntryToMap(ProtectedStorageEntry protectedStorageEntry) {
        ProtectedStoragePayload protectedStoragePayload = protectedStorageEntry.getProtectedStoragePayload();
        ByteArray hashOfPayload = get32ByteHashAsByteArray(protectedStoragePayload);
        map.put(hashOfPayload, protectedStorageEntry);
        //log.trace(""## addProtectedMailboxStorageEntryToMap hashOfPayload={}, map={}"", hashOfPayload, printMap());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // RequestData API
    ///////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Returns a PreliminaryGetDataRequest that can be sent to a peer node to request missing Payload data.
     */
    public PreliminaryGetDataRequest buildPreliminaryGetDataRequest(int nonce) {
        return new PreliminaryGetDataRequest(nonce, getKnownPayloadHashes());
    }

    /**
     * Returns a GetUpdatedDataRequest that can be sent to a peer node to request missing Payload data.
     */
    public GetUpdatedDataRequest buildGetUpdatedDataRequest(NodeAddress senderNodeAddress, int nonce) {
        return new GetUpdatedDataRequest(senderNodeAddress, nonce, getKnownPayloadHashes());
    }

    /**
     * Returns the set of known payload hashes. This is used in the GetData path to request missing data from peer nodes
     */
    private Set<byte[]> getKnownPayloadHashes() {
        // We collect the keys of the PersistableNetworkPayload items so we exclude them in our request.
        // PersistedStoragePayload items don't get removed, so we don't have an issue with the case that
        // an object gets removed in between PreliminaryGetDataRequest and the GetUpdatedDataRequest and we would
        // miss that event if we do not load the full set or use some delta handling.

        Map<ByteArray, PersistableNetworkPayload> mapForDataRequest = getMapForDataRequest();
        Set<byte[]> excludedKeys = getKeysAsByteSet(mapForDataRequest);
       /* log.trace(""## getKnownPayloadHashes map of PersistableNetworkPayloads={}, excludedKeys={}"",
                printPersistableNetworkPayloadMap(mapForDataRequest),
                excludedKeys.stream().map(Utilities::encodeToHex).toArray());*/

        Set<byte[]> excludedKeysFromProtectedStorageEntryMap = getKeysAsByteSet(map);
        /*log.trace(""## getKnownPayloadHashes map of ProtectedStorageEntrys={}, excludedKeys={}"",
                printMap(),
                excludedKeysFromProtectedStorageEntryMap.stream().map(Utilities::encodeToHex).toArray());*/

        excludedKeys.addAll(excludedKeysFromProtectedStorageEntryMap);
        return excludedKeys;
    }

    /**
     * Returns a GetDataResponse object that contains the Payloads known locally, but not remotely.
     */
    public GetDataResponse buildGetDataResponse(
            GetDataRequest getDataRequest,
            int maxEntriesPerType,
            AtomicBoolean wasPersistableNetworkPayloadsTruncated,
            AtomicBoolean wasProtectedStorageEntriesTruncated,
            Capabilities peerCapabilities) {

        Set<P2PDataStorage.ByteArray> excludedKeysAsByteArray =
                P2PDataStorage.ByteArray.convertBytesSetToByteArraySet(getDataRequest.getExcludedKeys());

        // Pre v 1.4.0 requests do not have set the requesters version field so it is null.
        // The methods in HistoricalDataStoreService will return all historical data in that case.
        // mapForDataResponse contains the filtered by version data from HistoricalDataStoreService as well as all other
        // maps of the remaining appendOnlyDataStoreServices.
        Map<ByteArray, PersistableNetworkPayload> mapForDataResponse = getMapForDataResponse(getDataRequest.getVersion());
        Set<PersistableNetworkPayload> filteredPersistableNetworkPayloads =
                filterKnownHashes(
                        mapForDataResponse,
                        Function.identity(),
                        excludedKeysAsByteArray,
                        peerCapabilities,
                        maxEntriesPerType,
                        wasPersistableNetworkPayloadsTruncated);
        log.info(""{} PersistableNetworkPayload entries remained after filtered by excluded keys. "" +
                        ""Original map had {} entries."",
                filteredPersistableNetworkPayloads.size(), mapForDataResponse.size());
        log.trace(""## buildGetDataResponse filteredPersistableNetworkPayloadHashes={}"",
                filteredPersistableNetworkPayloads.stream()
                        .map(e -> Utilities.encodeToHex(e.getHash()))
                        .toArray());

        Set<ProtectedStorageEntry> filteredProtectedStorageEntries =
                filterKnownHashes(
                        map,
                        ProtectedStorageEntry::getProtectedStoragePayload,
                        excludedKeysAsByteArray,
                        peerCapabilities,
                        maxEntriesPerType,
                        wasProtectedStorageEntriesTruncated);
        log.info(""{} ProtectedStorageEntry entries remained after filtered by excluded keys. "" +
                        ""Original map had {} entries."",
                filteredProtectedStorageEntries.size(), map.size());
        log.trace(""## buildGetDataResponse filteredProtectedStorageEntryHashes={}"",
                filteredProtectedStorageEntries.stream()
                        .map(e -> get32ByteHashAsByteArray((e.getProtectedStoragePayload())))
                        .toArray());

        return new GetDataResponse(
                filteredProtectedStorageEntries,
                filteredPersistableNetworkPayloads,
                getDataRequest.getNonce(),
                getDataRequest instanceof GetUpdatedDataRequest);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Utils for collecting the exclude hashes
    ///////////////////////////////////////////////////////////////////////////////////////////

    private Map<ByteArray, PersistableNetworkPayload> getMapForDataRequest() {
        Map<ByteArray, PersistableNetworkPayload> map = new HashMap<>();
        appendOnlyDataStoreService.getServices()
                .forEach(service -> {
                    Map<ByteArray, PersistableNetworkPayload> serviceMap;
                    if (service instanceof HistoricalDataStoreService) {
                        var historicalDataStoreService = (HistoricalDataStoreService<? extends PersistableNetworkPayloadStore>) service;
                        // As we add the version to our request we only use the live data. Eventually missing data will be
                        // derived from the version.
                        serviceMap = historicalDataStoreService.getMapOfLiveData();
                    } else {
                        serviceMap = service.getMap();
                    }
                    map.putAll(serviceMap);
                    log.info(""We added {} entries from {} to the excluded key set of our request"",
                            serviceMap.size(), service.getClass().getSimpleName());
                });
        return map;
    }

    public Map<ByteArray, PersistableNetworkPayload> getMapForDataResponse(String requestersVersion) {
        Map<ByteArray, PersistableNetworkPayload> map = new HashMap<>();
        appendOnlyDataStoreService.getServices()
                .forEach(service -> {
                    Map<ByteArray, PersistableNetworkPayload> serviceMap;
                    if (service instanceof HistoricalDataStoreService) {
                        var historicalDataStoreService = (HistoricalDataStoreService<? extends PersistableNetworkPayloadStore>) service;
                        serviceMap = historicalDataStoreService.getMapSinceVersion(requestersVersion);
                    } else {
                        serviceMap = service.getMap();
                    }
                    map.putAll(serviceMap);
                    log.info(""We added {} entries from {} to be filtered by excluded keys"",
                            serviceMap.size(), service.getClass().getSimpleName());
                });
        return map;
    }

    /**
     * Generic function that can be used to filter a Map<ByteArray, ProtectedStorageEntry || PersistableNetworkPayload>
     * by a given set of keys and peer capabilities.
     */
    static private <T extends NetworkPayload> Set<T> filterKnownHashes(
            Map<ByteArray, T> toFilter,
            Function<T, ? extends NetworkPayload> objToPayload,
            Set<ByteArray> knownHashes,
            Capabilities peerCapabilities,
            int maxEntries,
            AtomicBoolean outTruncated) {

        log.info(""Num knownHashes {}"", knownHashes.size());

        Set<Map.Entry<ByteArray, T>> entries = toFilter.entrySet();
        List<T> dateSortedTruncatablePayloads = entries.stream()
                .filter(entry -> entry.getValue() instanceof DateSortedTruncatablePayload)
                .filter(entry -> !knownHashes.contains(entry.getKey()))
                .map(Map.Entry::getValue)
                .filter(payload -> shouldTransmitPayloadToPeer(peerCapabilities, objToPayload.apply(payload)))
                .sorted(Comparator.comparing(payload -> ((DateSortedTruncatablePayload) payload).getDate()))
                .collect(Collectors.toList());
        log.info(""Num filtered dateSortedTruncatablePayloads {}"", dateSortedTruncatablePayloads.size());
        if (!dateSortedTruncatablePayloads.isEmpty()) {
            int maxItems = ((DateSortedTruncatablePayload) dateSortedTruncatablePayloads.get(0)).maxItems();
            if (dateSortedTruncatablePayloads.size() > maxItems) {
                int fromIndex = dateSortedTruncatablePayloads.size() - maxItems;
                int toIndex = dateSortedTruncatablePayloads.size();
                dateSortedTruncatablePayloads = dateSortedTruncatablePayloads.subList(fromIndex, toIndex);
                log.info(""Num truncated dateSortedTruncatablePayloads {}"", dateSortedTruncatablePayloads.size());
            }
        }

        List<T> filteredResults = entries.stream()
                .filter(entry -> !(entry.getValue() instanceof DateSortedTruncatablePayload))
                .filter(entry -> !knownHashes.contains(entry.getKey()))
                .map(Map.Entry::getValue)
                .filter(payload -> shouldTransmitPayloadToPeer(peerCapabilities, objToPayload.apply(payload)))
                .collect(Collectors.toList());
        log.info(""Num filtered non-dateSortedTruncatablePayloads {}"", filteredResults.size());

        // The non-dateSortedTruncatablePayloads have higher prio, so we added dateSortedTruncatablePayloads
        // after those so in case we need to truncate we first truncate the dateSortedTruncatablePayloads.
        filteredResults.addAll(dateSortedTruncatablePayloads);

        if (filteredResults.size() > maxEntries) {
            filteredResults = filteredResults.subList(0, maxEntries);
            outTruncated.set(true);
            log.info(""Num truncated filteredResults {}"", filteredResults.size());
        } else {
            log.info(""Num filteredResults {}"", filteredResults.size());
        }

        return new HashSet<>(filteredResults);
    }


    private Set<byte[]> getKeysAsByteSet(Map<ByteArray, ? extends PersistablePayload> map) {
        return map.keySet().stream()
                .map(e -> e.bytes)
                .collect(Collectors.toSet());
    }

    /**
     * Returns true if a Payload should be transmit to a peer given the peer's supported capabilities.
     */
    private static boolean shouldTransmitPayloadToPeer(Capabilities peerCapabilities, NetworkPayload payload) {

        // Sanity check to ensure this isn't used outside P2PDataStorage
        if (!(payload instanceof ProtectedStoragePayload || payload instanceof PersistableNetworkPayload))
            return false;

        // If the payload doesn't have a required capability, we should transmit it
        if (!(payload instanceof CapabilityRequiringPayload))
            return true;

        // Otherwise, only transmit the Payload if the peer supports all capabilities required by the payload
        boolean shouldTransmit = peerCapabilities.containsAll(((CapabilityRequiringPayload) payload).getRequiredCapabilities());

        if (!shouldTransmit) {
            log.debug(""We do not send the message to the peer because they do not support the required capability for that message type.\n"" +
                    ""storagePayload is: "" + Utilities.toTruncatedString(payload));
        }

        return shouldTransmit;
    }

    /**
     * Processes a GetDataResponse message and updates internal state. Does not broadcast updates to the P2P network
     * or domain listeners.
     */
    public void processGetDataResponse(GetDataResponse getDataResponse, NodeAddress sender) {
        final Set<ProtectedStorageEntry> dataSet = getDataResponse.getDataSet();
        Set<PersistableNetworkPayload> persistableNetworkPayloadSet = getDataResponse.getPersistableNetworkPayloadSet();

        long ts2 = System.currentTimeMillis();
        dataSet.forEach(e -> {
            // We don't broadcast here (last param) as we are only connected to the seed node and would be pointless
            addProtectedStorageEntry(e, sender, null, false);

        });
        log.info(""Processing {} protectedStorageEntries took {} ms."", dataSet.size(), this.clock.millis() - ts2);

        ts2 = this.clock.millis();
        persistableNetworkPayloadSet.forEach(e -> {
            if (e instanceof ProcessOncePersistableNetworkPayload) {
                // We use an optimized method as many checks are not required in that case to avoid
                // performance issues.
                // Processing 82645 items took now 61 ms compared to earlier version where it took ages (> 2min).
                // Usually we only get about a few hundred or max. a few 1000 items. 82645 is all
                // trade stats stats and all account age witness data.

                // We only apply it once from first response
                if (!initialRequestApplied) {
                    addPersistableNetworkPayloadFromInitialRequest(e);

                }
            } else {
                // We don't broadcast here as we are only connected to the seed node and would be pointless
                addPersistableNetworkPayload(e, sender, false, false, false);
            }
        });
        log.info(""Processing {} persistableNetworkPayloads took {} ms."",
                persistableNetworkPayloadSet.size(), this.clock.millis() - ts2);

        // We only process PersistableNetworkPayloads implementing ProcessOncePersistableNetworkPayload once. It can cause performance
        // issues and since the data is rarely out of sync it is not worth it to apply them from multiple peers during
        // startup.
        initialRequestApplied = true;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void shutDown() {
        if (removeExpiredEntriesTimer != null)
            removeExpiredEntriesTimer.stop();
    }

    @VisibleForTesting
    void removeExpiredEntries() {
        // The moment when an object becomes expired will not be synchronous in the network and we could
        // get add network_messages after the object has expired. To avoid repeated additions of already expired
        // object when we get it sent from new peers, we don’t remove the sequence number from the map.
        // That way an ADD message for an already expired data will fail because the sequence number
        // is equal and not larger as expected.
        ArrayList<Map.Entry<ByteArray, ProtectedStorageEntry>> toRemoveList =
                map.entrySet().stream()
                        .filter(entry -> entry.getValue().isExpired(this.clock))
                        .collect(Collectors.toCollection(ArrayList::new));

        // Batch processing can cause performance issues, so do all of the removes first, then update the listeners
        // to let them know about the removes.
        if (log.isDebugEnabled()) {
            toRemoveList.forEach(toRemoveItem -> {
                log.debug(""We found an expired data entry. We remove the protectedData:\n\t{}"",
                        Utilities.toTruncatedString(toRemoveItem.getValue()));
            });
        }
        removeFromMapAndDataStore(toRemoveList);

        if (sequenceNumberMap.size() > this.maxSequenceNumberMapSizeBeforePurge) {
            sequenceNumberMap.setMap(getPurgedSequenceNumberMap(sequenceNumberMap.getMap()));
            requestPersistence();
        }
    }

    public void onBootstrapped() {
        removeExpiredEntriesTimer = UserThread.runPeriodically(this::removeExpiredEntries, CHECK_TTL_INTERVAL_SEC);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // MessageListener implementation
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void onMessage(NetworkEnvelope networkEnvelope, Connection connection) {
        if (networkEnvelope instanceof BroadcastMessage) {
            connection.getPeersNodeAddressOptional().ifPresent(peersNodeAddress -> {
                if (networkEnvelope instanceof AddDataMessage) {
                    addProtectedStorageEntry(((AddDataMessage) networkEnvelope).getProtectedStorageEntry(), peersNodeAddress, null, true);
                } else if (networkEnvelope instanceof RemoveDataMessage) {
                    remove(((RemoveDataMessage) networkEnvelope).getProtectedStorageEntry(), peersNodeAddress);
                } else if (networkEnvelope instanceof RemoveMailboxDataMessage) {
                    remove(((RemoveMailboxDataMessage) networkEnvelope).getProtectedMailboxStorageEntry(), peersNodeAddress);
                } else if (networkEnvelope instanceof RefreshOfferMessage) {
                    refreshTTL((RefreshOfferMessage) networkEnvelope, peersNodeAddress);
                } else if (networkEnvelope instanceof AddPersistableNetworkPayloadMessage) {
                    addPersistableNetworkPayload(((AddPersistableNetworkPayloadMessage) networkEnvelope).getPersistableNetworkPayload(),
                            peersNodeAddress, true, false, true);
                }
            });
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // ConnectionListener implementation
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void onConnection(Connection connection) {
    }

    @Override
    public void onDisconnect(CloseConnectionReason closeConnectionReason, Connection connection) {
        if (closeConnectionReason.isIntended)
            return;

        if (!connection.getPeersNodeAddressOptional().isPresent())
            return;

        NodeAddress peersNodeAddress = connection.getPeersNodeAddressOptional().get();

        // Backdate all the eligible payloads based on the node that disconnected
        map.values().stream()
                .filter(protectedStorageEntry -> protectedStorageEntry.getProtectedStoragePayload() instanceof RequiresOwnerIsOnlinePayload)
                .filter(protectedStorageEntry -> ((RequiresOwnerIsOnlinePayload) protectedStorageEntry.getProtectedStoragePayload()).getOwnerNodeAddress().equals(peersNodeAddress))
                .forEach(protectedStorageEntry -> {
                    // We only set the data back by half of the TTL and remove the data only if is has
                    // expired after that back dating.
                    // We might get connection drops which are not caused by the node going offline, so
                    // we give more tolerance with that approach, giving the node the chance to
                    // refresh the TTL with a refresh message.
                    // We observed those issues during stress tests, but it might have been caused by the
                    // test set up (many nodes/connections over 1 router)
                    // TODO investigate what causes the disconnections.
                    // Usually the are: SOCKET_TIMEOUT ,TERMINATED (EOFException)
                    log.debug(""Backdating {} due to closeConnectionReason={}"", protectedStorageEntry, closeConnectionReason);
                    protectedStorageEntry.backDate();
                });
    }

    @Override
    public void onError(Throwable throwable) {

    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Client API
    ///////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Adds a PersistableNetworkPayload to the local P2P data storage. If it does not already exist locally, it will
     * be broadcast to the P2P network.
     * @param payload PersistableNetworkPayload to add to the network
     * @param sender local NodeAddress, if available
     * @param allowReBroadcast <code>true</code> if the PersistableNetworkPayload should be rebroadcast even if it
     *                         already exists locally
     * @return <code>true</code> if the PersistableNetworkPayload passes all validation and exists in the P2PDataStore
     *         on completion
     */
    public boolean addPersistableNetworkPayload(PersistableNetworkPayload payload,
                                                @Nullable NodeAddress sender,
                                                boolean allowReBroadcast) {
        return addPersistableNetworkPayload(
                payload, sender, true, allowReBroadcast, false);
    }

    private boolean addPersistableNetworkPayload(PersistableNetworkPayload payload,
                                                 @Nullable NodeAddress sender,
                                                 boolean allowBroadcast,
                                                 boolean reBroadcast,
                                                 boolean checkDate) {
        log.debug(""addPersistableNetworkPayload payload={}"", payload);

        // Payload hash size does not match expectation for that type of message.
        if (!payload.verifyHashSize()) {
            log.warn(""addPersistableNetworkPayload failed due to unexpected hash size"");
            return false;
        }

        ByteArray hashAsByteArray = new ByteArray(payload.getHash());
        boolean payloadHashAlreadyInStore = appendOnlyDataStoreService.getMap(payload).containsKey(hashAsByteArray);

        // Store already knows about this payload. Ignore it unless the caller specifically requests a republish.
        if (payloadHashAlreadyInStore && !reBroadcast) {
            log.debug(""addPersistableNetworkPayload failed due to duplicate payload"");
            return false;
        }

        // DateTolerantPayloads are only checked for tolerance from the onMessage handler (checkDate == true). If not in
        // tolerance, ignore it.
        if (checkDate && payload instanceof DateTolerantPayload && !((DateTolerantPayload) payload).isDateInTolerance((clock))) {
            log.warn(""addPersistableNetworkPayload failed due to payload time outside tolerance.\n"" +
                    ""Payload={}; now={}"", payload.toString(), new Date());
            return false;
        }

        // Add the payload and publish the state update to the appendOnlyDataStoreListeners
        boolean wasAdded = false;
        if (!payloadHashAlreadyInStore) {
            wasAdded = appendOnlyDataStoreService.put(hashAsByteArray, payload);
            if (wasAdded) {
                appendOnlyDataStoreListeners.forEach(e -> e.onAdded(payload));
            }
        }

        // Broadcast the payload if requested by caller
        if (allowBroadcast && wasAdded)
            broadcaster.broadcast(new AddPersistableNetworkPayloadMessage(payload), sender);

        return true;
    }

    // When we receive initial data we skip several checks to improve performance. We requested only missing entries so we
    // do not need to check again if the item is contained in the map, which is a bit slow as the map can be very large.
    // Overwriting an entry would be also no issue. We also skip notifying listeners as we get called before the domain
    // is ready so no listeners are set anyway. We might get called twice from a redundant call later, so listeners
    // might be added then but as we have the data already added calling them would be irrelevant as well.
    private void addPersistableNetworkPayloadFromInitialRequest(PersistableNetworkPayload payload) {
        byte[] hash = payload.getHash();
        if (payload.verifyHashSize()) {
            ByteArray hashAsByteArray = new ByteArray(hash);
            appendOnlyDataStoreService.put(hashAsByteArray, payload);
        } else {
            log.warn(""We got a hash exceeding our permitted size"");
        }
    }

    public boolean addProtectedStorageEntry(ProtectedStorageEntry protectedStorageEntry,
                                            @Nullable NodeAddress sender,
                                            @Nullable BroadcastHandler.Listener listener) {
        return addProtectedStorageEntry(protectedStorageEntry, sender, listener, true);
    }

    /**
     * Adds a ProtectedStorageEntry to the local P2P data storage and broadcast if all checks have been successful.
     *
     * @param protectedStorageEntry ProtectedStorageEntry to add to the network
     * @param sender Senders nodeAddress, if available
     * @param listener optional listener that can be used to receive events on broadcast
     * @param allowBroadcast Flag to allow broadcast
     * @return <code>true</code> if the ProtectedStorageEntry was added to the local P2P data storage
     */
    private boolean addProtectedStorageEntry(ProtectedStorageEntry protectedStorageEntry,
                                             @Nullable NodeAddress sender,
                                             @Nullable BroadcastHandler.Listener listener,
                                             boolean allowBroadcast) {
        ProtectedStoragePayload protectedStoragePayload = protectedStorageEntry.getProtectedStoragePayload();
        ByteArray hashOfPayload = get32ByteHashAsByteArray(protectedStoragePayload);

        //log.trace(""## call addProtectedStorageEntry hash={}, map={}"", hashOfPayload, printMap());

        // We do that check early as it is a very common case for returning, so we return early
        // If we have seen a more recent operation for this payload and we have a payload locally, ignore it
        ProtectedStorageEntry storedEntry = map.get(hashOfPayload);
        if (storedEntry != null && !hasSequenceNrIncreased(protectedStorageEntry.getSequenceNumber(), hashOfPayload)) {
            log.trace(""## hasSequenceNrIncreased is false. hash={}"", hashOfPayload);
            return false;
        }

        if (hasAlreadyRemovedAddOncePayload(protectedStoragePayload, hashOfPayload)) {
            log.trace(""## We have already removed that AddOncePayload by a previous removeDataMessage. "" +
                    ""We ignore that message. ProtectedStoragePayload: {}"", protectedStoragePayload.toString());
            return false;
        }

        // To avoid that expired data get stored and broadcast we check for expire date.
        if (protectedStorageEntry.isExpired(clock)) {
            String peer = sender != null ? sender.getFullAddress() : ""sender is null"";
            log.trace(""## We received an expired protectedStorageEntry from peer {}. ProtectedStoragePayload={}"",
                    peer, protectedStorageEntry.getProtectedStoragePayload().getClass().getSimpleName());
            return false;
        }

        // We want to allow add operations for equal sequence numbers if we don't have the payload locally. This is
        // the case for non-persistent Payloads that need to be reconstructed from peer and seed nodes each startup.
        MapValue sequenceNumberMapValue = sequenceNumberMap.get(hashOfPayload);
        if (sequenceNumberMapValue != null &&
                protectedStorageEntry.getSequenceNumber() < sequenceNumberMapValue.sequenceNr) {
            log.trace(""## sequenceNr too low hash={}"", hashOfPayload);
            return false;
        }

        // Verify the ProtectedStorageEntry is well formed and valid for the add operation
        if (!protectedStorageEntry.isValidForAddOperation()) {
            log.trace(""## !isValidForAddOperation hash={}"", hashOfPayload);
            return false;
        }

        // If we have already seen an Entry with the same hash, verify the metadata is equal
        if (storedEntry != null && !protectedStorageEntry.matchesRelevantPubKey(storedEntry)) {
            log.trace(""## !matchesRelevantPubKey hash={}"", hashOfPayload);
            return false;
        }

        // Test against filterPredicate set from FilterManager
        if (filterPredicate != null &&
                !filterPredicate.test(protectedStorageEntry.getProtectedStoragePayload())) {
            log.debug(""filterPredicate test failed. hashOfPayload={}"", hashOfPayload);
            return false;
        }

        // This is an updated entry. Record it and signal listeners.
        map.put(hashOfPayload, protectedStorageEntry);
        hashMapChangedListeners.forEach(e -> e.onAdded(Collections.singletonList(protectedStorageEntry)));

        // Record the updated sequence number and persist it. Higher delay so we can batch more items.
        sequenceNumberMap.put(hashOfPayload, new MapValue(protectedStorageEntry.getSequenceNumber(), this.clock.millis()));
        requestPersistence();

        //log.trace(""## ProtectedStorageEntry added to map. hash={}, map={}"", hashOfPayload, printMap());

        // Optionally, broadcast the add/update depending on the calling environment
        if (allowBroadcast) {
            broadcaster.broadcast(new AddDataMessage(protectedStorageEntry), sender, listener);
            log.trace(""## broadcasted ProtectedStorageEntry. hash={}"", hashOfPayload);
        }
        // Persist ProtectedStorageEntries carrying PersistablePayload payloads
        if (protectedStoragePayload instanceof PersistablePayload)
            protectedDataStoreService.put(hashOfPayload, protectedStorageEntry);

        return true;
    }

    /**
     * We do not do all checks as it is used for republishing existing mailbox messages from seed nodes which
     * only got stored if they had been valid when we received them.
     *
     * @param protectedMailboxStorageEntry ProtectedMailboxStorageEntry to add to the network
     * @param sender Senders nodeAddress, if available
     * @param listener optional listener that can be used to receive events on broadcast
     */
    public void republishExistingProtectedMailboxStorageEntry(ProtectedMailboxStorageEntry protectedMailboxStorageEntry,
                                                              @Nullable NodeAddress sender,
                                                              @Nullable BroadcastHandler.Listener listener) {
        ProtectedStoragePayload protectedStoragePayload = protectedMailboxStorageEntry.getProtectedStoragePayload();
        ByteArray hashOfPayload = get32ByteHashAsByteArray(protectedStoragePayload);

        //log.trace(""## call republishProtectedStorageEntry hash={}, map={}"", hashOfPayload, printMap());

        if (hasAlreadyRemovedAddOncePayload(protectedStoragePayload, hashOfPayload)) {
            log.trace(""## We have already removed that AddOncePayload by a previous removeDataMessage. "" +
                    ""We ignore that message. ProtectedStoragePayload: {}"", protectedStoragePayload.toString());
            return;
        }

        broadcaster.broadcast(new AddDataMessage(protectedMailboxStorageEntry), sender, listener);
        log.trace(""## broadcasted ProtectedStorageEntry. hash={}"", hashOfPayload);
    }

    public boolean hasAlreadyRemovedAddOncePayload(ProtectedStoragePayload protectedStoragePayload,
                                                   ByteArray hashOfPayload) {
        return protectedStoragePayload instanceof AddOncePayload && removedPayloadsService.wasRemoved(hashOfPayload);
    }

    /**
     * Updates a local RefreshOffer with TTL changes and broadcasts those changes to the network
     *
     * @param refreshTTLMessage refreshTTLMessage containing the update
     * @param sender local NodeAddress, if available
     * @return <code>true</code> if the RefreshOffer was successfully updated and changes broadcast
     */
    public boolean refreshTTL(RefreshOfferMessage refreshTTLMessage,
                              @Nullable NodeAddress sender) {

        try {
            ByteArray hashOfPayload = new ByteArray(refreshTTLMessage.getHashOfPayload());
            ProtectedStorageEntry storedData = map.get(hashOfPayload);

            if (storedData == null) {
                log.debug(""We don't have data for that refresh message in our map. That is expected if we missed the data publishing."");

                return false;
            }

            ProtectedStorageEntry storedEntry = map.get(hashOfPayload);
            ProtectedStorageEntry updatedEntry = new ProtectedStorageEntry(
                    storedEntry.getProtectedStoragePayload(),
                    storedEntry.getOwnerPubKey(),
                    refreshTTLMessage.getSequenceNumber(),
                    refreshTTLMessage.getSignature(),
                    this.clock);


            // If we have seen a more recent operation for this payload, we ignore the current one
            if (!hasSequenceNrIncreased(updatedEntry.getSequenceNumber(), hashOfPayload))
                return false;

            // Verify the updated ProtectedStorageEntry is well formed and valid for update
            if (!updatedEntry.isValidForAddOperation())
                return false;

            // Update the hash map with the updated entry
            map.put(hashOfPayload, updatedEntry);

            // Record the latest sequence number and persist it
            sequenceNumberMap.put(hashOfPayload, new MapValue(updatedEntry.getSequenceNumber(), this.clock.millis()));
            requestPersistence();

            // Always broadcast refreshes
            broadcaster.broadcast(refreshTTLMessage, sender);

        } catch (IllegalArgumentException e) {
            log.error(""refreshTTL failed, missing data: {}"", e.toString());
            e.printStackTrace();
            return false;
        }
        return true;
    }

    /**
     * Removes a ProtectedStorageEntry from the local P2P data storage. If it is successful, it will broadcast that
     * change to the P2P network.
     *
     * @param protectedStorageEntry ProtectedStorageEntry to add to the network
     * @param sender local NodeAddress, if available
     * @return <code>true</code> if the ProtectedStorageEntry was removed from the local P2P data storage and broadcast
     */
    public boolean remove(ProtectedStorageEntry protectedStorageEntry,
                          @Nullable NodeAddress sender) {
        ProtectedStoragePayload protectedStoragePayload = protectedStorageEntry.getProtectedStoragePayload();
        ByteArray hashOfPayload = get32ByteHashAsByteArray(protectedStoragePayload);

        // If we have seen a more recent operation for this payload, ignore this one
        if (!hasSequenceNrIncreased(protectedStorageEntry.getSequenceNumber(), hashOfPayload))
            return false;

        // Verify the ProtectedStorageEntry is well formed and valid for the remove operation
        if (!protectedStorageEntry.isValidForRemoveOperation())
            return false;

        // If we have already seen an Entry with the same hash, verify the metadata is the same
        ProtectedStorageEntry storedEntry = map.get(hashOfPayload);
        if (storedEntry != null && !protectedStorageEntry.matchesRelevantPubKey(storedEntry))
            return false;

        // Record the latest sequence number and persist it
        sequenceNumberMap.put(hashOfPayload, new MapValue(protectedStorageEntry.getSequenceNumber(), this.clock.millis()));
        requestPersistence();

        // Update that we have seen this AddOncePayload so the next time it is seen it fails verification
        if (protectedStoragePayload instanceof AddOncePayload) {
            removedPayloadsService.addHash(hashOfPayload);
        }

        if (storedEntry != null) {
            // Valid remove entry, do the remove and signal listeners
            removeFromMapAndDataStore(protectedStorageEntry, hashOfPayload);
        } /* else {
            // This means the RemoveData or RemoveMailboxData was seen prior to the AddData. We have already updated
            // the SequenceNumberMap appropriately so the stale Add will not pass validation, but we still want to
            // broadcast the remove to peers so they can update their state appropriately
        } */
        printData(""after remove"");

        if (protectedStorageEntry instanceof ProtectedMailboxStorageEntry) {
            broadcaster.broadcast(new RemoveMailboxDataMessage((ProtectedMailboxStorageEntry) protectedStorageEntry), sender);
        } else {
            broadcaster.broadcast(new RemoveDataMessage(protectedStorageEntry), sender);
        }

        return true;
    }

    public ProtectedStorageEntry getProtectedStorageEntry(ProtectedStoragePayload protectedStoragePayload,
                                                          KeyPair ownerStoragePubKey)
            throws CryptoException {
        ByteArray hashOfData = get32ByteHashAsByteArray(protectedStoragePayload);
        int sequenceNumber;
        if (sequenceNumberMap.containsKey(hashOfData))
            sequenceNumber = sequenceNumberMap.get(hashOfData).sequenceNr + 1;
        else
            sequenceNumber = 1;

        byte[] hashOfDataAndSeqNr = P2PDataStorage.get32ByteHash(new DataAndSeqNrPair(protectedStoragePayload, sequenceNumber));
        byte[] signature = Sig.sign(ownerStoragePubKey.getPrivate(), hashOfDataAndSeqNr);
        return new ProtectedStorageEntry(protectedStoragePayload, ownerStoragePubKey.getPublic(), sequenceNumber, signature, this.clock);
    }

    public RefreshOfferMessage getRefreshTTLMessage(ProtectedStoragePayload protectedStoragePayload,
                                                    KeyPair ownerStoragePubKey)
            throws CryptoException {
        ByteArray hashOfPayload = get32ByteHashAsByteArray(protectedStoragePayload);
        int sequenceNumber;
        if (sequenceNumberMap.containsKey(hashOfPayload))
            sequenceNumber = sequenceNumberMap.get(hashOfPayload).sequenceNr + 1;
        else
            sequenceNumber = 1;

        byte[] hashOfDataAndSeqNr = P2PDataStorage.get32ByteHash(new DataAndSeqNrPair(protectedStoragePayload, sequenceNumber));
        byte[] signature = Sig.sign(ownerStoragePubKey.getPrivate(), hashOfDataAndSeqNr);
        return new RefreshOfferMessage(hashOfDataAndSeqNr, signature, hashOfPayload.bytes, sequenceNumber);
    }

    public ProtectedMailboxStorageEntry getMailboxDataWithSignedSeqNr(MailboxStoragePayload expirableMailboxStoragePayload,
                                                                      KeyPair storageSignaturePubKey,
                                                                      PublicKey receiversPublicKey)
            throws CryptoException {
        ByteArray hashOfData = get32ByteHashAsByteArray(expirableMailboxStoragePayload);
        int sequenceNumber;
        if (sequenceNumberMap.containsKey(hashOfData))
            sequenceNumber = sequenceNumberMap.get(hashOfData).sequenceNr + 1;
        else
            sequenceNumber = 1;

        byte[] hashOfDataAndSeqNr = P2PDataStorage.get32ByteHash(new DataAndSeqNrPair(expirableMailboxStoragePayload, sequenceNumber));
        byte[] signature = Sig.sign(storageSignaturePubKey.getPrivate(), hashOfDataAndSeqNr);
        return new ProtectedMailboxStorageEntry(expirableMailboxStoragePayload,
                storageSignaturePubKey.getPublic(), sequenceNumber, signature, receiversPublicKey, this.clock);
    }

    public void addHashMapChangedListener(HashMapChangedListener hashMapChangedListener) {
        hashMapChangedListeners.add(hashMapChangedListener);
    }

    public void removeHashMapChangedListener(HashMapChangedListener hashMapChangedListener) {
        hashMapChangedListeners.remove(hashMapChangedListener);
    }

    public void addAppendOnlyDataStoreListener(AppendOnlyDataStoreListener listener) {
        appendOnlyDataStoreListeners.add(listener);
    }

    public void removeAppendOnlyDataStoreListener(AppendOnlyDataStoreListener listener) {
        appendOnlyDataStoreListeners.remove(listener);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Private
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void removeFromMapAndDataStore(ProtectedStorageEntry protectedStorageEntry, ByteArray hashOfPayload) {
        removeFromMapAndDataStore(Collections.singletonList(Maps.immutableEntry(hashOfPayload, protectedStorageEntry)));
    }

    private void removeFromMapAndDataStore(Collection<Map.Entry<ByteArray, ProtectedStorageEntry>> entriesToRemove) {
        if (entriesToRemove.isEmpty())
            return;

        List<ProtectedStorageEntry> removedProtectedStorageEntries = new ArrayList<>(entriesToRemove.size());
        entriesToRemove.forEach(entry -> {
            ByteArray hashOfPayload = entry.getKey();
            ProtectedStorageEntry protectedStorageEntry = entry.getValue();

            //log.trace(""## removeFromMapAndDataStore: hashOfPayload={}, map before remove={}"", hashOfPayload, printMap());
            map.remove(hashOfPayload);
            //log.trace(""## removeFromMapAndDataStore: map after remove={}"", printMap());

            // We inform listeners even the entry was not found in our map
            removedProtectedStorageEntries.add(protectedStorageEntry);

            ProtectedStoragePayload protectedStoragePayload = protectedStorageEntry.getProtectedStoragePayload();
            if (protectedStoragePayload instanceof PersistablePayload) {
                ProtectedStorageEntry previous = protectedDataStoreService.remove(hashOfPayload, protectedStorageEntry);
                if (previous == null)
                    log.warn(""We cannot remove the protectedStorageEntry from the protectedDataStoreService as it does not exist."");
            }
        });

        hashMapChangedListeners.forEach(e -> e.onRemoved(removedProtectedStorageEntries));
    }

    private boolean hasSequenceNrIncreased(int newSequenceNumber, ByteArray hashOfData) {
        if (sequenceNumberMap.containsKey(hashOfData)) {
            int storedSequenceNumber = sequenceNumberMap.get(hashOfData).sequenceNr;
            if (newSequenceNumber > storedSequenceNumber) {
                /*log.debug(""Sequence number has increased (>). sequenceNumber = ""
                        + newSequenceNumber + "" / storedSequenceNumber="" + storedSequenceNumber + "" / hashOfData="" + hashOfData.toString());*/
                return true;
            } else if (newSequenceNumber == storedSequenceNumber) {
                if (newSequenceNumber == 0) {
                    log.debug(""Sequence number is equal to the stored one and both are 0."" +
                            ""That is expected for network_messages which never got updated (mailbox msg)."");
                } else {
                    log.debug(""Sequence number is equal to the stored one. sequenceNumber = {} / storedSequenceNumber={}"",
                            newSequenceNumber, storedSequenceNumber);
                }
                return false;
            } else {
                log.debug(""Sequence number is invalid. sequenceNumber = {} / storedSequenceNumber={} "" +
                                ""That can happen if the data owner gets an old delayed data storage message."",
                        newSequenceNumber, storedSequenceNumber);
                return false;
            }
        } else {
            return true;
        }
    }

    private void requestPersistence() {
        persistenceManager.requestPersistence();
    }

    public static ByteArray get32ByteHashAsByteArray(NetworkPayload data) {
        return new ByteArray(P2PDataStorage.get32ByteHash(data));
    }

    // Get a new map with entries older than PURGE_AGE_DAYS purged from the given map.
    private Map<ByteArray, MapValue> getPurgedSequenceNumberMap(Map<ByteArray, MapValue> persisted) {
        Map<ByteArray, MapValue> purged = new HashMap<>();
        long maxAgeTs = this.clock.millis() - TimeUnit.DAYS.toMillis(PURGE_AGE_DAYS);
        persisted.forEach((key, value) -> {
            if (value.timeStamp > maxAgeTs)
                purged.put(key, value);
        });
        return purged;
    }

    private void printData(String info) {
        if (log.isTraceEnabled()) {
            StringBuilder sb = new StringBuilder(""\n\n------------------------------------------------------------\n"");
            sb.append(""Data set "").append(info).append("" operation"");
            // We print the items sorted by hash with the payload class name and id
            List<Tuple2<String, ProtectedStorageEntry>> tempList = map.values().stream()
                    .map(e -> new Tuple2<>(org.bitcoinj.core.Utils.HEX.encode(get32ByteHashAsByteArray(e.getProtectedStoragePayload()).bytes), e))
                    .sorted(Comparator.comparing(o -> o.first))
                    .collect(Collectors.toList());
            tempList.forEach(e -> {
                ProtectedStorageEntry storageEntry = e.second;
                ProtectedStoragePayload protectedStoragePayload = storageEntry.getProtectedStoragePayload();
                MapValue mapValue = sequenceNumberMap.get(get32ByteHashAsByteArray(protectedStoragePayload));
                sb.append(""\n"")
                        .append(""Hash="")
                        .append(e.first)
                        .append(""; Class="")
                        .append(protectedStoragePayload.getClass().getSimpleName())
                        .append(""; SequenceNumbers (Object/Stored)="")
                        .append(storageEntry.getSequenceNumber())
                        .append("" / "")
                        .append(mapValue != null ? mapValue.sequenceNr : ""null"")
                        .append(""; TimeStamp (Object/Stored)="")
                        .append(storageEntry.getCreationTimeStamp())
                        .append("" / "")
                        .append(mapValue != null ? mapValue.timeStamp : ""null"")
                        .append(""; Payload="")
                        .append(Utilities.toTruncatedString(protectedStoragePayload));
            });
            sb.append(""\n------------------------------------------------------------\n"");
            log.debug(sb.toString());
            //log.debug(""Data set "" + info + "" operation: size="" + map.values().size());
        }
    }

    private String printMap() {
        return Arrays.toString(map.entrySet().stream().map(e -> Hex.encode(e.getKey().bytes) + "": "" +
                e.getValue().getProtectedStoragePayload().getClass().getSimpleName()).toArray());
    }

    private String printPersistableNetworkPayloadMap(Map<ByteArray, PersistableNetworkPayload> map) {
        return Arrays.toString(map.entrySet().stream().map(e -> Hex.encode(e.getKey().bytes) + "": "" +
                e.getValue().getClass().getSimpleName()).toArray());
    }

    /**
     * @param data Network payload
     * @return Hash of data
     */
    public static byte[] get32ByteHash(NetworkPayload data) {
        return Hash.getSha256Hash(data.toProtoMessage().toByteArray());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Static class
    ///////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Used as container for calculating cryptographic hash of data and sequenceNumber.
     */
    @EqualsAndHashCode
    @ToString
    public static final class DataAndSeqNrPair implements NetworkPayload {
        // data are only used for calculating cryptographic hash from both values so they are kept private
        private final ProtectedStoragePayload protectedStoragePayload;
        private final int sequenceNumber;

        public DataAndSeqNrPair(ProtectedStoragePayload protectedStoragePayload, int sequenceNumber) {
            this.protectedStoragePayload = protectedStoragePayload;
            this.sequenceNumber = sequenceNumber;
        }

        // Used only for calculating hash of byte array from PB object
        @Override
        public com.google.protobuf.Message toProtoMessage() {
            return protobuf.DataAndSeqNrPair.newBuilder()
                    .setPayload((protobuf.StoragePayload) protectedStoragePayload.toProtoMessage())
                    .setSequenceNumber(sequenceNumber)
                    .build();
        }
    }


    /**
     * Used as key object in map for cryptographic hash of stored data as byte[] as primitive data type cannot be
     * used as key
     */
    @EqualsAndHashCode
    public static final class ByteArray implements PersistablePayload {
        // That object is saved to disc. We need to take care of changes to not break deserialization.
        public final byte[] bytes;

        public ByteArray(byte[] bytes) {
            this.bytes = bytes;
            verifyBytesNotEmpty();
        }

        public void verifyBytesNotEmpty() {
            if (this.bytes == null)
                throw new IllegalArgumentException(""Cannot create P2PDataStorage.ByteArray with null byte[] array argument."");

            if (this.bytes.length == 0)
                throw new IllegalArgumentException(""Cannot create P2PDataStorage.ByteArray with empty byte[] array argument."");
        }

        @Override
        public String toString() {
            return ""ByteArray{"" +
                    ""bytes as Hex="" + Hex.encode(bytes) +
                    '}';
        }

        ///////////////////////////////////////////////////////////////////////////////////////////
        // Protobuffer
        ///////////////////////////////////////////////////////////////////////////////////////////

        @Override
        public protobuf.ByteArray toProtoMessage() {
            return protobuf.ByteArray.newBuilder().setBytes(ByteString.copyFrom(bytes)).build();
        }

        public static ByteArray fromProto(protobuf.ByteArray proto) {
            return new ByteArray(proto.getBytes().toByteArray());
        }


        ///////////////////////////////////////////////////////////////////////////////////////////
        // Util
        ///////////////////////////////////////////////////////////////////////////////////////////

        public String getHex() {
            return Utilities.encodeToHex(bytes);
        }

        public static Set<P2PDataStorage.ByteArray> convertBytesSetToByteArraySet(Set<byte[]> set) {
            return set != null ?
                    set.stream()
                            .map(P2PDataStorage.ByteArray::new)
                            .collect(Collectors.toSet())
                    : new HashSet<>();
        }
    }

    /**
     * Used as value in map
     */
    @EqualsAndHashCode
    @ToString
    public static final class MapValue implements PersistablePayload {
        // That object is saved to disc. We need to take care of changes to not break deserialization.
        final public int sequenceNr;
        final public long timeStamp;

        MapValue(int sequenceNr, long timeStamp) {
            this.sequenceNr = sequenceNr;
            this.timeStamp = timeStamp;
        }

        @Override
        public protobuf.MapValue toProtoMessage() {
            return protobuf.MapValue.newBuilder().setSequenceNr(sequenceNr).setTimeStamp(timeStamp).build();
        }

        public static MapValue fromProto(protobuf.MapValue proto) {
            return new MapValue(proto.getSequenceNr(), proto.getTimeStamp());
        }
    }
}",1,64 2000 777 587 2001 693 2002 44 2003 44 2004 123 306 64 2005 777 809 657 704 2006 61 1502 59 64 2005 777 809 657 704 2007 61 1503 59 773 570 2008 61 2009 59 773 657 2010 2011 59 64 2005 657 2012 2013 59 773 657 2014 2015 59 773 657 2016 2017 59 64 2018 773 657 2019 60 2020 44 2021 62 2022 61 744 2023 60 62 40 41 59 773 657 2024 60 2025 62 2026 61 744 2027 60 62 40 41 59 773 2028 2029 59 773 657 2030 60 2031 62 2032 59 64 2005 657 2031 2033 61 744 2031 40 41 59 773 657 2024 60 2034 62 2035 61 744 2027 60 62 40 41 59 773 657 2036 2037 59 773 657 2038 2039 59 331 331 773 657 704 2040 59 330 773 2041 60 2042 62 2043 59 64 2044 773 2045 60 2046 62 2047 59 330 331 330 331 64 2048 777 2001 40 2049 2050 44 2010 2011 44 2012 2013 44 2014 2015 44 2016 2017 44 2030 60 2031 62 2032 44 2036 2037 44 2038 2039 44 64 2051 40 362 41 704 2052 41 123 823 46 2011 61 2011 59 823 46 2013 61 2013 59 823 46 2015 61 2015 59 823 46 2017 61 2017 59 823 46 2032 61 2032 59 823 46 2037 61 2037 59 823 46 2039 61 2039 59 823 46 2040 61 2052 59 2050 46 2053 40 823 41 59 2050 46 2054 40 823 41 59 823 46 2032 46 2055 40 2033 44 2030 46 2056 46 2057 41 59 125 331 330 331 64 2058 777 865 2059 40 2060 2061 41 123 2032 46 2059 40 2062 45 62 123 2033 46 2063 40 2064 40 2062 46 2065 40 41 41 41 59 2061 46 2066 40 41 59 125 44 2061 41 59 125 330 64 2005 777 865 2067 40 41 123 2031 2068 61 2032 46 2069 40 41 59 688 40 2068 340 2070 41 123 2033 46 2071 40 2072 40 2068 46 2073 40 41 41 41 59 125 125 330 777 865 2074 40 2075 2076 44 2060 2061 41 123 2077 2078 61 744 2079 40 41 59 2077 2080 61 744 2079 40 41 59 2077 2081 61 744 2079 40 41 59 2043 61 2082 46 2083 40 2078 44 2080 44 2081 44 40 2084 44 2085 44 2086 41 45 62 2084 307 2085 307 2086 41 59 2043 46 2087 40 40 2088 44 2089 44 2090 41 45 62 123 688 40 2090 41 123 2061 46 2091 40 41 59 125 125 41 59 2013 46 2074 40 2076 44 40 41 45 62 2078 46 2092 40 2093 41 41 59 2015 46 2074 40 2076 44 40 41 45 62 123 2022 46 2094 40 2015 46 2095 40 41 41 59 2080 46 2092 40 2093 41 59 125 41 59 2017 46 2074 40 2076 44 40 41 45 62 2081 46 2092 40 2093 41 41 59 125 330 64 2005 777 865 2096 40 2075 2076 41 123 2013 46 2096 40 2076 41 59 2015 46 2096 40 2076 41 59 2017 46 2096 40 2076 41 59 2022 46 2097 40 2015 46 2098 40 41 41 59 125 330 330 777 865 2099 40 2021 2100 41 123 2046 2101 61 2100 46 2102 40 41 59 2020 2103 61 2104 40 2101 41 59 2022 46 2105 40 2103 44 2100 41 59 330 125 331 330 331 306 777 2106 2107 40 704 2108 41 123 792 744 2106 40 2108 44 2109 40 41 41 59 125 306 777 2110 2111 40 2112 2113 44 704 2108 41 123 792 744 2110 40 2113 44 2108 44 2114 40 41 41 59 125 306 773 2024 60 574 91 93 62 2115 40 41 123 330 330 330 330 2019 60 2020 44 2116 62 2117 61 2118 40 41 59 2024 60 574 91 93 62 2119 61 2120 40 2117 41 59 305 2024 60 574 91 93 62 2121 61 2120 40 2022 41 59 305 2119 46 2122 40 2121 41 59 792 2119 59 125 306 777 2123 2124 40 2125 2126 44 704 2127 44 2128 2129 44 2128 2130 44 2131 2132 41 123 2024 60 2001 46 2020 62 2133 61 2001 46 2020 46 2134 40 2126 46 2135 40 41 41 59 330 330 330 330 2019 60 2020 44 2136 62 2137 61 2138 40 2126 46 2139 40 41 41 59 2024 60 2136 62 2140 61 2141 40 2137 44 2142 46 2143 40 41 44 2133 44 2132 44 2127 44 2129 41 59 2144 46 2145 40 362 43 362 44 2140 46 2146 40 41 44 2137 46 2146 40 41 41 59 2144 46 2147 40 362 44 2140 46 2148 40 41 46 2022 40 2149 45 62 2150 46 2151 40 2149 46 2152 40 41 41 41 46 2153 40 41 41 59 2024 60 2021 62 2154 61 2141 40 2022 44 2021 58 58 2155 44 2133 44 2132 44 2127 44 2130 41 59 2144 46 2145 40 362 43 362 44 2154 46 2146 40 41 44 2022 46 2146 40 41 41 59 2144 46 2147 40 362 44 2154 46 2148 40 41 46 2022 40 2149 45 62 2156 40 40 2149 46 2155 40 41 41 41 41 46 2153 40 41 41 59 792 744 2123 40 2154 44 2140 44 2126 46 2157 40 41 44 2126 702 2110 41 59 125 331 330 331 773 2019 60 2020 44 2158 62 2159 40 41 123 2019 60 2020 44 2158 62 2022 61 744 2160 60 62 40 41 59 2013 46 2161 40 41 46 2162 40 2163 45 62 123 2019 60 2020 44 2158 62 2164 59 688 40 2163 702 2165 41 123 2166 2167 61 40 2165 60 63 650 2168 62 41 2163 59 330 330 2164 61 2167 46 2169 40 41 59 125 630 123 2164 61 2163 46 2170 40 41 59 125 2022 46 2171 40 2164 41 59 2172 46 2173 40 362 44 2164 46 2174 40 41 44 2163 46 2175 40 41 46 2176 40 41 41 59 125 41 59 792 2022 59 125 777 2019 60 2020 44 2158 62 2177 40 2075 2178 41 123 2019 60 2020 44 2158 62 2022 61 744 2179 60 62 40 41 59 2013 46 2180 40 41 46 2181 40 2182 45 62 123 2019 60 2020 44 2158 62 2183 59 688 40 2182 702 2184 41 123 2185 2186 61 40 2184 60 63 650 2187 62 41 2182 59 2183 61 2186 46 2188 40 2178 41 59 125 630 123 2183 61 2182 46 2189 40 41 59 125 2022 46 2190 40 2183 41 59 2191 46 2192 40 362 44 2183 46 2193 40 41 44 2182 46 2194 40 41 46 2195 40 41 41 59 125 41 59 792 2022 59 125 306 809 773 60 2196 650 2197 62 2024 60 2196 62 2198 40 2019 60 2020 44 2196 62 2199 44 2200 60 2196 44 63 650 2197 62 2201 44 2024 60 2020 62 2202 44 2131 2132 44 704 2203 44 2128 2204 41 123 2205 46 2206 40 362 44 2202 46 2207 40 41 41 59 2024 60 2019 46 2208 60 2020 44 2196 356 2209 61 2199 46 2210 40 41 59 2211 60 2196 62 2212 61 2209 46 2213 40 41 46 2214 40 2215 45 62 2215 46 2216 40 41 702 2217 41 46 2214 40 2215 45 62 33 2202 46 2218 40 2215 46 2219 40 41 41 41 46 2022 40 2019 46 2208 58 58 2216 41 46 2214 40 2220 45 62 2221 40 2132 44 2201 46 2222 40 2220 41 41 41 46 2223 40 2224 46 2225 40 2220 45 62 40 40 2217 41 2220 41 46 2226 40 41 41 41 46 2227 40 2228 46 2229 40 41 41 59 2205 46 2206 40 362 44 2212 46 2207 40 41 41 59 688 40 33 2212 46 2230 40 41 41 123 704 2231 61 40 40 2217 41 2212 46 2232 40 1500 41 41 46 2231 40 41 59 688 40 2212 46 2207 40 41 62 2231 41 123 704 2233 61 2212 46 2207 40 41 45 2231 59 704 2234 61 2212 46 2207 40 41 59 2212 61 2212 46 2235 40 2233 44 2234 41 59 2205 46 2206 40 362 44 2212 46 2207 40 41 41 59 125 125 2211 60 2196 62 2236 61 2209 46 2213 40 41 46 2214 40 2215 45 62 33 40 2215 46 2216 40 41 702 2217 41 41 46 2214 40 2215 45 62 33 2202 46 2218 40 2215 46 2219 40 41 41 41 46 2022 40 2019 46 2208 58 58 2216 41 46 2214 40 2220 45 62 2221 40 2132 44 2201 46 2222 40 2220 41 41 41 46 2227 40 2228 46 2229 40 41 41 59 2205 46 2206 40 362 44 2236 46 2207 40 41 41 59 330 330 2236 46 2237 40 2212 41 59 688 40 2236 46 2207 40 41 62 2203 41 123 2236 61 2236 46 2238 40 1500 44 2203 41 59 2204 46 2239 40 2240 41 59 2205 46 2206 40 362 44 2236 46 2207 40 41 41 59 125 630 123 2205 46 2206 40 362 44 2236 46 2207 40 41 41 59 125 792 744 2241 60 62 40 2236 41 59 125 773 2024 60 574 91 93 62 2242 40 2019 60 2020 44 63 650 2243 62 2022 41 123 792 2022 46 2244 40 41 46 2245 40 41 46 2022 40 2246 45 62 2246 46 2247 41 46 2248 40 2249 46 2250 40 41 41 59 125 306 773 809 570 2251 40 2131 2132 44 2197 2252 41 123 330 688 40 33 40 2252 702 2046 309 2252 702 2158 41 41 792 2009 59 330 688 40 33 40 2252 702 2253 41 41 792 2254 59 330 570 2255 61 2132 46 2256 40 40 40 2253 41 2252 41 46 2257 40 41 41 59 688 40 33 2255 41 123 2258 46 2259 40 362 43 362 43 2260 46 2261 40 2252 41 41 59 125 792 2255 59 125 306 777 865 2262 40 2123 2263 44 2112 2264 41 123 657 2024 60 2021 62 2265 61 2263 46 2266 40 41 59 2024 60 2158 62 2267 61 2263 46 2268 40 41 59 726 2269 61 2270 46 2271 40 41 59 2265 46 2272 40 2273 45 62 123 330 2274 40 2273 44 2264 44 2275 44 2009 41 59 125 41 59 2276 46 2277 40 362 44 2265 46 2278 40 41 44 823 46 2039 46 2279 40 41 45 2269 41 59 2269 61 823 46 2039 46 2279 40 41 59 2267 46 2272 40 2273 45 62 123 688 40 2273 702 2280 41 123 330 330 330 330 330 330 688 40 33 2008 41 123 2281 40 2273 41 59 125 125 630 123 330 2282 40 2273 44 2264 44 2009 44 2009 44 2009 41 59 125 125 41 59 2276 46 2277 40 362 44 2267 46 2278 40 41 44 823 46 2039 46 2279 40 41 45 2269 41 59 330 330 330 2008 61 2283 59 125 331 330 331 777 865 2284 40 41 123 688 40 2029 340 2285 41 2029 46 2286 40 41 59 125 64 2005 865 2287 40 41 123 330 330 330 330 330 2288 60 2019 46 2289 60 2020 44 2021 356 2290 61 2022 46 2291 40 41 46 2292 40 41 46 2293 40 2294 45 62 2294 46 2295 40 41 46 2296 40 823 46 2039 41 41 46 2297 40 2298 46 2299 40 2288 58 58 744 41 41 59 330 330 688 40 2300 46 2301 40 41 41 123 2290 46 2302 40 2303 45 62 123 2300 46 2304 40 362 44 2305 46 2306 40 2303 46 2295 40 41 41 41 59 125 41 59 125 2307 40 2290 41 59 688 40 2033 46 2308 40 41 62 823 46 2040 41 123 2033 46 2309 40 2310 40 2033 46 2311 40 41 41 41 59 2312 40 41 59 125 125 777 865 2313 40 41 123 2029 61 2314 46 2315 40 823 58 58 2287 44 2007 41 59 125 331 330 331 64 2058 777 865 2316 40 2317 2318 44 2319 2320 41 123 688 40 2318 702 2321 41 123 2320 46 2322 40 41 46 2323 40 2324 45 62 123 688 40 2318 702 2325 41 123 2326 40 40 40 2325 41 2318 41 46 2327 40 41 44 2324 44 2328 44 2329 41 59 125 630 688 40 2318 702 2330 41 123 2331 40 40 40 2330 41 2318 41 46 2332 40 41 44 2324 41 59 125 630 688 40 2318 702 2333 41 123 2334 40 40 40 2333 41 2318 41 46 2335 40 41 44 2324 41 59 125 630 688 40 2318 702 2336 41 123 2337 40 40 2336 41 2318 44 2324 41 59 125 630 688 40 2318 702 2338 41 123 2339 40 40 40 2338 41 2318 41 46 2340 40 41 44 2324 44 2341 44 2009 44 2341 41 59 125 125 41 59 125 125 331 330 331 64 2058 777 865 2342 40 2319 2320 41 123 125 64 2058 777 865 2343 40 2344 2345 44 2319 2320 41 123 688 40 2345 46 2346 41 792 59 688 40 33 2320 46 2347 40 41 46 2348 40 41 41 792 59 2112 2349 61 2320 46 2347 40 41 46 2350 40 41 59 330 2022 46 2351 40 41 46 2352 40 41 46 2353 40 2100 45 62 2100 46 2354 40 41 702 2355 41 46 2353 40 2100 45 62 40 40 2355 41 2100 46 2354 40 41 41 46 2356 40 41 46 2357 40 2349 41 41 46 2358 40 2100 45 62 123 330 330 330 330 330 330 330 330 330 2359 46 2360 40 362 44 2100 44 2345 41 59 2100 46 2361 40 41 59 125 41 59 125 64 2058 777 865 2362 40 2363 2364 41 123 125 331 330 331 306 777 570 2365 40 2158 2252 44 64 2366 2112 2264 44 570 2367 41 123 792 2365 40 2252 44 2264 44 2368 44 2367 44 2009 41 59 125 773 570 2365 40 2158 2252 44 64 2366 2112 2264 44 570 2369 44 570 2370 44 570 2371 41 123 2372 46 2373 40 362 44 2252 41 59 330 688 40 33 2252 46 2374 40 41 41 123 2372 46 2375 40 362 41 59 792 2009 59 125 2020 2376 61 744 2020 40 2252 46 2377 40 41 41 59 570 2378 61 2013 46 2379 40 2252 41 46 2380 40 2376 41 59 330 688 40 2378 307 33 2370 41 123 2372 46 2373 40 362 41 59 792 2009 59 125 330 330 688 40 2371 307 2252 702 2381 307 33 40 40 2381 41 2252 41 46 2382 40 40 2039 41 41 41 123 2372 46 2383 40 362 43 362 44 2252 46 2384 40 41 44 744 2385 40 41 41 59 792 2009 59 125 330 570 2386 61 2009 59 688 40 33 2378 41 123 2386 61 2013 46 2387 40 2376 44 2252 41 59 688 40 2386 41 123 2035 46 2388 40 2389 45 62 2389 46 2390 40 2252 41 41 59 125 125 330 688 40 2369 307 2386 41 2011 46 2391 40 744 2392 40 2252 41 44 2264 41 59 792 2393 59 125 330 330 330 330 330 773 865 2394 40 2158 2252 41 123 574 91 93 2395 61 2252 46 2396 40 41 59 688 40 2252 46 2397 40 41 41 123 2020 2398 61 744 2020 40 2395 41 59 2013 46 2399 40 2398 44 2252 41 59 125 630 123 2400 46 2401 40 362 41 59 125 125 777 570 2402 40 2021 2100 44 64 2366 2112 2264 44 64 2366 2403 46 2404 2405 41 123 792 2402 40 2100 44 2264 44 2405 44 2406 41 59 125 306 773 570 2402 40 2021 2100 44 64 2366 2112 2264 44 64 2366 2403 46 2404 2405 44 570 2369 41 123 2046 2407 61 2100 46 2408 40 41 59 2020 2409 61 2410 40 2407 41 59 330 330 330 2021 2411 61 2022 46 2412 40 2409 41 59 688 40 2411 340 2413 307 33 2414 40 2100 46 2415 40 41 44 2409 41 41 123 2416 46 2417 40 362 44 2409 41 59 792 2009 59 125 688 40 2418 40 2407 44 2409 41 41 123 2419 46 2420 40 362 43 362 44 2407 46 2421 40 41 41 59 792 2009 59 125 330 688 40 2100 46 2422 40 2039 41 41 123 2075 2423 61 2264 340 2413 63 2264 46 2424 40 41 58 362 59 2425 46 2426 40 362 44 2423 44 2100 46 2408 40 41 46 2427 40 41 46 2428 40 41 41 59 792 2009 59 125 330 330 2429 2430 61 2033 46 2412 40 2409 41 59 688 40 2430 340 2413 307 2100 46 2415 40 41 60 2430 46 2431 41 123 2432 46 2433 40 362 44 2409 41 59 792 2009 59 125 330 688 40 33 2100 46 2434 40 41 41 123 2435 46 2436 40 362 44 2409 41 59 792 2009 59 125 330 688 40 2411 340 2413 307 33 2100 46 2437 40 2411 41 41 123 2438 46 2439 40 362 44 2409 41 59 792 2009 59 125 330 688 40 2047 340 2413 307 33 2047 46 2440 40 2100 46 2408 40 41 41 41 123 2441 46 2442 40 362 44 2409 41 59 792 2009 59 125 330 2022 46 2443 40 2409 44 2100 41 59 2026 46 2444 40 2445 45 62 2445 46 2446 40 2447 46 2448 40 2100 41 41 41 59 330 2033 46 2443 40 2409 44 744 2429 40 2100 46 2415 40 41 44 823 46 2039 46 2449 40 41 41 41 59 2450 40 41 59 330 330 688 40 2369 41 123 2011 46 2451 40 744 2452 40 2100 41 44 2264 44 2405 41 59 2453 46 2454 40 362 44 2409 41 59 125 330 688 40 2407 702 2243 41 2015 46 2443 40 2409 44 2100 41 59 792 2455 59 125 306 777 865 2456 40 2457 2458 44 64 2366 2112 2264 44 64 2366 2403 46 2404 2405 41 123 2046 2459 61 2458 46 2460 40 41 59 2020 2461 61 2462 40 2459 41 59 330 688 40 2463 40 2459 44 2461 41 41 123 2464 46 2465 40 362 43 362 44 2459 46 2466 40 41 41 59 792 59 125 2011 46 2467 40 744 2468 40 2458 41 44 2264 44 2405 41 59 2469 46 2470 40 362 44 2461 41 59 125 777 570 2471 40 2046 2472 44 2020 2473 41 123 792 2472 702 2474 307 2037 46 2475 40 2473 41 59 125 306 777 570 2476 40 2477 2478 44 64 2366 2112 2264 41 123 830 123 2020 2473 61 744 2020 40 2478 46 2479 40 41 41 59 2021 2480 61 2022 46 2481 40 2473 41 59 688 40 2480 323 2482 41 123 2483 46 2484 40 362 41 59 792 2009 59 125 2021 2485 61 2022 46 2481 40 2473 41 59 2021 2486 61 744 2021 40 2485 46 2487 40 41 44 2485 46 2488 40 41 44 2478 46 2489 40 41 44 2478 46 2490 40 41 44 823 46 2039 41 59 330 688 40 33 2491 40 2486 46 2489 40 41 44 2473 41 41 792 2009 59 330 688 40 33 2486 46 2492 40 41 41 792 2009 59 330 2022 46 2493 40 2473 44 2486 41 59 330 2033 46 2493 40 2473 44 744 2494 40 2486 46 2489 40 41 44 823 46 2039 46 2495 40 41 41 41 59 2496 40 41 59 330 2011 46 2497 40 2478 44 2264 41 59 125 580 40 2498 2499 41 123 2500 46 2501 40 362 44 2499 46 2502 40 41 41 59 2499 46 2503 40 41 59 792 2009 59 125 792 2504 59 125 306 777 570 2505 40 2021 2100 44 64 2366 2112 2264 41 123 2046 2472 61 2100 46 2506 40 41 59 2020 2473 61 2507 40 2472 41 59 330 688 40 33 2508 40 2100 46 2509 40 41 44 2473 41 41 792 2009 59 330 688 40 33 2100 46 2510 40 41 41 792 2009 59 330 2021 2511 61 2022 46 2512 40 2473 41 59 688 40 2511 340 2513 307 33 2100 46 2514 40 2511 41 41 792 2009 59 330 2033 46 2515 40 2473 44 744 2516 40 2100 46 2509 40 41 44 823 46 2039 46 2517 40 41 41 41 59 2518 40 41 59 330 688 40 2472 702 2519 41 123 2037 46 2520 40 2473 41 59 125 688 40 2511 340 2513 41 123 330 2521 40 2100 44 2473 41 59 125 305 2522 40 362 41 59 688 40 2100 702 2457 41 123 2011 46 2523 40 744 2524 40 40 2457 41 2100 41 44 2264 41 59 125 630 123 2011 46 2525 40 744 2526 40 2100 41 44 2264 41 59 125 792 2527 59 125 777 2021 2528 40 2046 2472 44 2529 2530 41 826 2531 123 2020 2532 61 2533 40 2472 41 59 704 2534 59 688 40 2033 46 2535 40 2532 41 41 2534 61 2033 46 2536 40 2532 41 46 2537 43 1501 59 630 2534 61 1501 59 574 91 93 2538 61 2001 46 2539 40 744 2540 40 2472 44 2534 41 41 59 574 91 93 2541 61 2542 46 2543 40 2530 46 2544 40 41 44 2538 41 59 792 744 2021 40 2472 44 2530 46 2545 40 41 44 2534 44 2541 44 823 46 2039 41 59 125 777 2477 2546 40 2046 2472 44 2529 2530 41 826 2531 123 2020 2473 61 2547 40 2472 41 59 704 2548 59 688 40 2033 46 2549 40 2473 41 41 2548 61 2033 46 2550 40 2473 41 46 2551 43 1501 59 630 2548 61 1501 59 574 91 93 2552 61 2001 46 2553 40 744 2554 40 2472 44 2548 41 41 59 574 91 93 2555 61 2556 46 2557 40 2530 46 2558 40 41 44 2552 41 59 792 744 2477 40 2552 44 2555 44 2473 46 2559 44 2548 41 59 125 777 2457 2560 40 2561 2562 44 2529 2563 44 2564 2565 41 826 2531 123 2020 2566 61 2567 40 2562 41 59 704 2568 59 688 40 2033 46 2569 40 2566 41 41 2568 61 2033 46 2570 40 2566 41 46 2571 43 1501 59 630 2568 61 1501 59 574 91 93 2572 61 2001 46 2573 40 744 2574 40 2562 44 2568 41 41 59 574 91 93 2575 61 2576 46 2577 40 2563 46 2578 40 41 44 2572 41 59 792 744 2457 40 2562 44 2563 46 2579 40 41 44 2568 44 2575 44 2565 44 823 46 2039 41 59 125 777 865 2580 40 2025 2581 41 123 2026 46 2582 40 2581 41 59 125 777 865 2583 40 2025 2581 41 123 2026 46 2505 40 2581 41 59 125 777 865 2584 40 2034 2405 41 123 2035 46 2585 40 2405 41 59 125 777 865 2586 40 2034 2405 41 123 2035 46 2505 40 2405 41 59 125 331 330 331 773 865 2587 40 2021 2100 44 2020 2473 41 123 2587 40 2588 46 2589 40 2590 46 2591 40 2473 44 2100 41 41 41 59 125 773 865 2587 40 2592 60 2019 46 2593 60 2020 44 2021 356 2594 41 123 688 40 2594 46 2595 40 41 41 792 59 2596 60 2021 62 2597 61 744 2598 60 62 40 2594 46 2599 40 41 41 59 2594 46 2600 40 2601 45 62 123 2020 2473 61 2601 46 2602 40 41 59 2021 2100 61 2601 46 2603 40 41 59 330 2022 46 2505 40 2473 41 59 330 330 2597 46 2604 40 2100 41 59 2046 2472 61 2100 46 2605 40 41 59 688 40 2472 702 2243 41 123 2021 2606 61 2015 46 2505 40 2473 44 2100 41 59 688 40 2606 323 2607 41 2608 46 2609 40 362 41 59 125 125 41 59 2026 46 2600 40 2610 45 62 2610 46 2611 40 2597 41 41 59 125 773 570 2612 40 704 2613 44 2020 2614 41 123 688 40 2033 46 2615 40 2614 41 41 123 704 2616 61 2033 46 2617 40 2614 41 46 2618 59 688 40 2613 62 2616 41 123 305 792 2619 59 125 630 688 40 2613 323 2616 41 123 688 40 2613 323 1500 41 123 2620 46 2621 40 362 43 362 41 59 125 630 123 2622 46 2623 40 362 44 2613 44 2616 41 59 125 792 2009 59 125 630 123 2624 46 2625 40 362 43 362 44 2613 44 2616 41 59 792 2009 59 125 125 630 123 792 2626 59 125 125 773 865 2627 40 41 123 2032 46 2627 40 41 59 125 777 809 2020 2628 40 2197 2629 41 123 792 744 2020 40 2001 46 2630 40 2629 41 41 59 125 330 773 2019 60 2020 44 2631 62 2632 40 2019 60 2020 44 2631 62 2633 41 123 2019 60 2020 44 2631 62 2634 61 744 2635 60 62 40 41 59 726 2636 61 823 46 2039 46 2637 40 41 45 2638 46 2639 46 2640 40 2006 41 59 2633 46 2641 40 40 2642 44 2643 41 45 62 123 688 40 2643 46 2644 62 2636 41 2634 46 2645 40 2642 44 2643 41 59 125 41 59 792 2634 59 125 773 865 2646 40 2075 2647 41 123 688 40 2648 46 2649 40 41 41 123 2650 2651 61 744 2650 40 362 41 59 2651 46 2652 40 362 41 46 2652 40 2647 41 46 2652 40 362 41 59 330 2653 60 2654 60 2075 44 2021 356 2655 61 2022 46 2656 40 41 46 2657 40 41 46 2022 40 2658 45 62 744 2654 60 62 40 2659 46 2660 46 2661 46 2662 46 2663 46 2664 40 2628 40 2658 46 2665 40 41 41 46 2666 41 44 2658 41 41 46 2667 40 2668 46 2669 40 2670 45 62 2670 46 2671 41 41 46 2672 40 2673 46 2674 40 41 41 59 2655 46 2675 40 2658 45 62 123 2021 2676 61 2658 46 2677 59 2046 2472 61 2676 46 2665 40 41 59 2631 2678 61 2033 46 2679 40 2628 40 2472 41 41 59 2651 46 2652 40 362 41 46 2652 40 362 41 46 2652 40 2658 46 2671 41 46 2652 40 362 41 46 2652 40 2472 46 2680 40 41 46 2681 40 41 41 46 2652 40 362 41 46 2652 40 2676 46 2682 40 41 41 46 2652 40 362 41 46 2652 40 2678 340 2683 63 2678 46 2684 58 362 41 46 2652 40 362 41 46 2652 40 2676 46 2685 40 41 41 46 2652 40 362 41 46 2652 40 2678 340 2683 63 2678 46 2686 58 362 41 46 2652 40 362 41 46 2652 40 2687 46 2688 40 2472 41 41 59 125 41 59 2651 46 2652 40 362 41 59 2648 46 2689 40 2651 46 2690 40 41 41 59 330 125 125 773 2075 2691 40 41 123 792 2692 46 2693 40 2022 46 2694 40 41 46 2695 40 41 46 2022 40 2696 45 62 2697 46 2698 40 2696 46 2699 40 41 46 2700 41 43 362 43 2696 46 2701 40 41 46 2702 40 41 46 2703 40 41 46 2704 40 41 41 46 2705 40 41 41 59 125 773 2075 2706 40 2019 60 2020 44 2158 62 2022 41 123 792 2707 46 2708 40 2022 46 2709 40 41 46 2710 40 41 46 2022 40 2711 45 62 2712 46 2713 40 2711 46 2714 40 41 46 2715 41 43 362 43 2711 46 2716 40 41 46 2717 40 41 46 2718 40 41 41 46 2719 40 41 41 59 125 306 777 809 574 91 93 2720 40 2197 2629 41 123 792 2721 46 2722 40 2629 46 2723 40 41 46 2724 40 41 41 59 125 331 330 331 306 64 2725 64 2726 777 809 657 587 2727 693 2197 123 330 773 657 2046 2472 59 773 657 704 2728 59 777 2727 40 2046 2472 44 704 2728 41 123 823 46 2472 61 2472 59 823 46 2728 61 2728 59 125 330 64 2058 777 2729 46 2730 46 2731 46 2732 2733 40 41 123 792 2731 46 2727 46 2734 40 41 46 2735 40 40 2731 46 2736 41 2472 46 2733 40 41 41 46 2737 40 2728 41 46 2738 40 41 59 125 125 306 64 2725 777 809 657 587 2020 693 2243 123 330 777 657 574 91 93 2739 59 777 2020 40 574 91 93 2739 41 123 823 46 2739 61 2739 59 2740 40 41 59 125 777 865 2741 40 41 123 688 40 823 46 2739 323 2742 41 825 744 2743 40 362 41 59 688 40 823 46 2739 46 2744 323 1500 41 825 744 2743 40 362 41 59 125 64 2058 777 2075 2745 40 41 123 792 362 43 362 43 2746 46 2747 40 2739 41 43 314 59 125 331 330 331 64 2058 777 2748 46 2020 2749 40 41 123 792 2748 46 2020 46 2750 40 41 46 2751 40 2752 46 2753 40 2739 41 41 46 2754 40 41 59 125 777 809 2020 2755 40 2748 46 2020 2756 41 123 792 744 2020 40 2756 46 2757 40 41 46 2758 40 41 41 59 125 331 330 331 777 2075 2759 40 41 123 792 2760 46 2761 40 2739 41 59 125 777 809 2024 60 2001 46 2020 62 2762 40 2024 60 574 91 93 62 2763 41 123 792 2763 340 2764 63 2763 46 2765 40 41 46 2022 40 2001 46 2020 58 58 744 41 46 2766 40 2767 46 2768 40 41 41 58 744 2769 60 62 40 41 59 125 125 306 64 2725 64 2726 777 809 657 587 2631 693 2243 123 330 657 777 704 2770 59 657 777 726 2771 59 2631 40 704 2770 44 726 2771 41 123 823 46 2770 61 2770 59 823 46 2771 61 2771 59 125 64 2058 777 2772 46 2631 2773 40 41 123 792 2772 46 2631 46 2774 40 41 46 2775 40 2770 41 46 2776 40 2771 41 46 2777 40 41 59 125 777 809 2631 2778 40 2772 46 2631 2779 41 123 792 744 2631 40 2779 46 2780 40 41 44 2779 46 2781 40 41 41 59 125 125 125 ,"{'AvgLine': 18, 'CountLine': 1154, 'CountStmt': 440, 'MaxNesting': 3, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 347, 'MaxEssential': 8, 'SumEssential': 109, 'AvgCyclomatic': 2, 'CountLineCode': 742, 'CountStmtDecl': 163, 'MaxCyclomatic': 11, 'SumCyclomatic': 150, 'AvgLineComment': 3, 'CountClassBase': 4, 'CountLineBlank': 183, 'CountSemicolon': 311, 'CountDeclMethod': 49, 'CountLineCodeExe': 481, 'CountLineComment': 231, 'CountClassCoupled': 94, 'CountClassDerived': 0, 'CountLineCodeDecl': 238, 'CountDeclMethodAll': 49, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.31', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 15, 'SumCyclomaticStrict': 163, 'CountDeclClassMethod': 4, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 32, 'MaxCyclomaticModified': 11, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 150, 'CountDeclClassVariable': 2, 'CountDeclMethodDefault': 1, 'CountDeclMethodPrivate': 16, 'CountDeclInstanceMethod': 45, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 94, 'CountDeclInstanceVariable': 16, 'PercentLackOfCohesionModified': 86}"
3448,Java,"@Slf4j
public final class TradeStatistics3 implements ProcessOncePersistableNetworkPayload, PersistableNetworkPayload,
        CapabilityRequiringPayload, DateSortedTruncatablePayload {

    @JsonExclude
    private transient static final ZoneId ZONE_ID = ZoneId.systemDefault();
    @JsonExclude
    private transient static final long STRICT_FILTER_DATE = new GregorianCalendar(2021, Calendar.NOVEMBER, 1).getTime().getTime();

    public static TradeStatistics3 from(Trade trade,
                                        @Nullable String referralId,
                                        boolean isTorNetworkNode) {
        Map<String, String> extraDataMap = new HashMap<>();
        if (referralId != null) {
            extraDataMap.put(OfferPayload.REFERRAL_ID, referralId);
        }

        NodeAddress mediatorNodeAddress = checkNotNull(trade.getMediatorNodeAddress());
        // The first 4 chars are sufficient to identify a mediator.
        // For testing with regtest/localhost we use the full address as its localhost and would result in
        // same values for multiple mediators.
        String truncatedMediatorNodeAddress = isTorNetworkNode ?
                mediatorNodeAddress.getFullAddress().substring(0, 4) :
                mediatorNodeAddress.getFullAddress();

        // RefundAgentNodeAddress can be null if converted from old version.
        String truncatedRefundAgentNodeAddress = null;
        NodeAddress refundAgentNodeAddress = trade.getRefundAgentNodeAddress();
        if (refundAgentNodeAddress != null) {
            truncatedRefundAgentNodeAddress = isTorNetworkNode ?
                    refundAgentNodeAddress.getFullAddress().substring(0, 4) :
                    refundAgentNodeAddress.getFullAddress();
        }

        Offer offer = checkNotNull(trade.getOffer());
        return new TradeStatistics3(offer.getCurrencyCode(),
                trade.getPrice().getValue(),
                trade.getAmountAsLong(),
                offer.getPaymentMethod().getId(),
                trade.getDate().getTime(),
                truncatedMediatorNodeAddress,
                truncatedRefundAgentNodeAddress,
                extraDataMap);
    }

    public static TradeStatistics3 from(BsqSwapTrade bsqSwapTrade) {
        Offer offer = checkNotNull(bsqSwapTrade.getOffer());
        return new TradeStatistics3(offer.getCurrencyCode(),
                bsqSwapTrade.getPrice().getValue(),
                bsqSwapTrade.getAmountAsLong(),
                offer.getPaymentMethod().getId(),
                bsqSwapTrade.getTakeOfferDate(),
                null,
                null,
                null,
                null);
    }

    // This enum must not change the order as we use the ordinal for storage to reduce data size.
    // The payment method string can be quite long and would consume 15% more space.
    // When we get a new payment method we can add it to the enum at the end. Old users would add it as string if not
    // recognized.
    private enum PaymentMethodMapper {
        OK_PAY,
        CASH_APP,
        VENMO,
        AUSTRALIA_PAYID, // seems there is a dev trade
        UPHOLD,
        MONEY_BEAM,
        POPMONEY,
        REVOLUT,
        PERFECT_MONEY,
        SEPA,
        SEPA_INSTANT,
        FASTER_PAYMENTS,
        NATIONAL_BANK,
        JAPAN_BANK,
        SAME_BANK,
        SPECIFIC_BANKS,
        SWISH,
        ALI_PAY,
        WECHAT_PAY,
        CLEAR_X_CHANGE,
        CHASE_QUICK_PAY,
        INTERAC_E_TRANSFER,
        US_POSTAL_MONEY_ORDER,
        CASH_DEPOSIT,
        MONEY_GRAM,
        WESTERN_UNION,
        HAL_CASH,
        F2F,
        BLOCK_CHAINS,
        PROMPT_PAY,
        ADVANCED_CASH,
        BLOCK_CHAINS_INSTANT,
        TRANSFERWISE,
        AMAZON_GIFT_CARD,
        CASH_BY_MAIL,
        CAPITUAL,
        PAYSERA,
        PAXUM,
        SWIFT,
        NEFT,
        RTGS,
        IMPS,
        UPI,
        PAYTM,
        CELPAY,
        NEQUI,
        BIZUM,
        PIX,
        MONESE,
        SATISPAY,
        VERSE,
        STRIKE,
        TIKKIE,
        TRANSFERWISE_USD,
        ACH_TRANSFER,
        DOMESTIC_WIRE_TRANSFER
    }

    @Getter
    private final String currency;
    @Getter
    private final long price;
    @Getter
    private final long amount; // BTC amount
    private final String paymentMethod;
    // As only seller is publishing it is the sellers trade date
    private final long date;

    // Old converted trade stat objects might not have it set
    @Nullable
    @JsonExclude
    @Getter
    private String mediator;
    @Nullable
    @JsonExclude
    @Getter
    private String refundAgent;

    // todo should we add referrerId as well? get added to extra map atm but not used so far

    // Hash get set in constructor from json of all the other data fields (with hash = null).
    @JsonExclude
    private final byte[] hash;
    // Should be only used in emergency case if we need to add data but do not want to break backward compatibility
    // at the P2P network storage checks. The hash of the object will be used to verify if the data is valid. Any new
    // field in a class would break that hash and therefore break the storage mechanism.
    @Nullable
    @JsonExclude
    @Getter
    private final Map<String, String> extraDataMap;

    // We cache the date object to avoid reconstructing a new Date at each getDate call.
    @JsonExclude
    private transient final Date dateObj;

    @JsonExclude
    private transient Volume volume = null; // Fiat or altcoin volume
    @JsonExclude
    private transient LocalDateTime localDateTime;

    public TradeStatistics3(String currency,
                            long price,
                            long amount,
                            String paymentMethod,
                            long date,
                            String mediator,
                            String refundAgent,
                            @Nullable Map<String, String> extraDataMap) {
        this(currency,
                price,
                amount,
                paymentMethod,
                date,
                mediator,
                refundAgent,
                extraDataMap,
                null);
    }

    // Used from conversion method where we use the hash of the TradeStatistics2 objects to avoid duplicate entries
    public TradeStatistics3(String currency,
                            long price,
                            long amount,
                            String paymentMethod,
                            long date,
                            String mediator,
                            String refundAgent,
                            @Nullable byte[] hash) {
        this(currency,
                price,
                amount,
                paymentMethod,
                date,
                mediator,
                refundAgent,
                null,
                hash);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // PROTO BUFFER
    ///////////////////////////////////////////////////////////////////////////////////////////

    @VisibleForTesting
    public TradeStatistics3(String currency,
                            long price,
                            long amount,
                            String paymentMethod,
                            long date,
                            @Nullable String mediator,
                            @Nullable String refundAgent,
                            @Nullable Map<String, String> extraDataMap,
                            @Nullable byte[] hash) {
        this.currency = currency;
        this.price = price;
        this.amount = amount;
        String tempPaymentMethod;
        try {
            tempPaymentMethod = String.valueOf(PaymentMethodMapper.valueOf(paymentMethod).ordinal());
        } catch (Throwable t) {
            tempPaymentMethod = paymentMethod;
        }
        this.paymentMethod = tempPaymentMethod;
        this.date = date;
        this.mediator = mediator;
        this.refundAgent = refundAgent;
        this.extraDataMap = ExtraDataMapValidator.getValidatedExtraDataMap(extraDataMap);

        this.hash = hash == null ? createHash() : hash;

        dateObj = new Date(date);
    }

    public byte[] createHash() {
        // We create hash from all fields excluding hash itself. We use json as simple data serialisation.
        // TradeDate is different for both peers so we ignore it for hash. ExtraDataMap is ignored as well as at
        // software updates we might have different entries which would cause a different hash.
        return Hash.getSha256Ripemd160hash(JsonUtil.objectToJson(this).getBytes(Charsets.UTF_8));
    }

    private protobuf.TradeStatistics3.Builder getBuilder() {
        protobuf.TradeStatistics3.Builder builder = protobuf.TradeStatistics3.newBuilder()
                .setCurrency(currency)
                .setPrice(price)
                .setAmount(amount)
                .setPaymentMethod(paymentMethod)
                .setDate(date)
                .setHash(ByteString.copyFrom(hash));
        Optional.ofNullable(mediator).ifPresent(builder::setMediator);
        Optional.ofNullable(refundAgent).ifPresent(builder::setRefundAgent);
        Optional.ofNullable(extraDataMap).ifPresent(builder::putAllExtraData);
        return builder;
    }

    public protobuf.TradeStatistics3 toProtoTradeStatistics3() {
        return getBuilder().build();
    }

    @Override
    public protobuf.PersistableNetworkPayload toProtoMessage() {
        return protobuf.PersistableNetworkPayload.newBuilder().setTradeStatistics3(getBuilder()).build();
    }

    public static TradeStatistics3 fromProto(protobuf.TradeStatistics3 proto) {
        return new TradeStatistics3(
                proto.getCurrency(),
                proto.getPrice(),
                proto.getAmount(),
                proto.getPaymentMethod(),
                proto.getDate(),
                ProtoUtil.stringOrNullFromProto(proto.getMediator()),
                ProtoUtil.stringOrNullFromProto(proto.getRefundAgent()),
                CollectionUtils.isEmpty(proto.getExtraDataMap()) ? null : proto.getExtraDataMap(),
                proto.getHash().toByteArray());
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public byte[] getHash() {
        return hash;
    }

    @Override
    public boolean verifyHashSize() {
        checkNotNull(hash, ""hash must not be null"");
        return hash.length == 20;
    }

    @Override
    public Capabilities getRequiredCapabilities() {
        return new Capabilities(Capability.TRADE_STATISTICS_3);
    }

    @Override
    public Date getDate() {
        return dateObj;
    }

    public LocalDateTime getLocalDateTime() {
        if (localDateTime == null) {
            localDateTime = dateObj.toInstant().atZone(ZONE_ID).toLocalDateTime();
        }
        return localDateTime;
    }

    public long getDateAsLong() {
        return date;
    }

    @Override
    public int maxItems() {
        return 3000;
    }

    public void pruneOptionalData() {
        mediator = null;
        refundAgent = null;
    }

    public String getPaymentMethodId() {
        try {
            return PaymentMethodMapper.values()[Integer.parseInt(paymentMethod)].name();
        } catch (Throwable ignore) {
            return paymentMethod;
        }
    }

    private transient Price priceObj;

    public Price getTradePrice() {
        if (priceObj == null) {
            priceObj = Price.valueOf(currency, price);
        }
        return priceObj;
    }

    public Coin getTradeAmount() {
        return Coin.valueOf(amount);
    }

    public Volume getTradeVolume() {
        if (volume == null) {
            if (getTradePrice().getMonetary() instanceof Altcoin) {
                volume = new Volume(new AltcoinExchangeRate((Altcoin) getTradePrice().getMonetary()).coinToAltcoin(getTradeAmount()));
            } else {
                Volume exactVolume = new Volume(new ExchangeRate((Fiat) getTradePrice().getMonetary()).coinToFiat(getTradeAmount()));
                volume = VolumeUtil.getRoundedFiatVolume(exactVolume);
            }
        }
        return volume;
    }

    public boolean isValid() {
        if (currency == null) {
            return false;
        }

        boolean validMaxTradeLimit = true;
        boolean currencyFound = true;
        // We had historically higher trade limits and assets which are not in the currency list anymore, so we apply
        // the filter only for data after STRICT_FILTER_DATE.
        if (date > STRICT_FILTER_DATE) {
            long maxTradeLimit = Coin.COIN.multiply(2).value;
            try {
                // We cover only active payment methods. Retired ones will not be found by getActivePaymentMethodById.
                String paymentMethodId = getPaymentMethodId();
                Optional<PaymentMethod> optionalPaymentMethod = PaymentMethod.getActivePaymentMethod(paymentMethodId);
                if (optionalPaymentMethod.isPresent()) {
                    maxTradeLimit = optionalPaymentMethod.get().getMaxTradeLimitAsCoin(currency).value;
                }
            } catch (Exception e) {
                log.warn(""Error at isValid()."", e);
            }
            validMaxTradeLimit = amount <= maxTradeLimit;

            currencyFound = CurrencyUtil.getCryptoCurrency(currency).isPresent() ||
                    CurrencyUtil.getFiatCurrency(currency).isPresent();
        }

        return amount > 0 &&
                validMaxTradeLimit &&
                price > 0 &&
                date > 0 &&
                paymentMethod != null &&
                !paymentMethod.isEmpty() &&
                !currency.isEmpty() &&
                currencyFound;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TradeStatistics3)) return false;

        TradeStatistics3 that = (TradeStatistics3) o;

        if (price != that.price) return false;
        if (amount != that.amount) return false;
        if (date != that.date) return false;
        if (currency != null ? !currency.equals(that.currency) : that.currency != null) return false;
        if (paymentMethod != null ? !paymentMethod.equals(that.paymentMethod) : that.paymentMethod != null)
            return false;
        return Arrays.equals(hash, that.hash);
    }

    @Override
    public int hashCode() {
        int result = currency != null ? currency.hashCode() : 0;
        result = 31 * result + (int) (price ^ (price >>> 32));
        result = 31 * result + (int) (amount ^ (amount >>> 32));
        result = 31 * result + (paymentMethod != null ? paymentMethod.hashCode() : 0);
        result = 31 * result + (int) (date ^ (date >>> 32));
        result = 31 * result + Arrays.hashCode(hash);
        return result;
    }

    @Override
    public String toString() {
        return ""TradeStatistics3{"" +
                ""\n     currency='"" + currency + '\'' +
                "",\n     price="" + price +
                "",\n     amount="" + amount +
                "",\n     paymentMethod='"" + paymentMethod + '\'' +
                "",\n     date="" + date +
                "",\n     mediator='"" + mediator + '\'' +
                "",\n     refundAgent='"" + refundAgent + '\'' +
                "",\n     hash="" + Utilities.bytesAsHexString(hash) +
                "",\n     extraDataMap="" + extraDataMap +
                ""\n}"";
    }
}",1,64 2000 777 657 587 2001 693 2002 44 2003 44 2004 44 2005 123 64 2006 773 828 809 657 2007 2008 61 2007 46 2009 40 41 59 64 2006 773 828 809 657 726 2010 61 744 2011 40 1505 44 2012 46 2013 44 1501 41 46 2014 40 41 46 2014 40 41 59 777 809 2001 2015 40 2016 2017 44 64 2018 2019 2020 44 570 2021 41 123 2022 60 2019 44 2019 62 2023 61 744 2024 60 62 40 41 59 688 40 2020 340 2025 41 123 2023 46 2026 40 2027 46 2028 44 2020 41 59 125 2029 2030 61 2031 40 2017 46 2032 40 41 41 59 330 330 330 2019 2033 61 2021 63 2030 46 2034 40 41 46 2035 40 1500 44 1502 41 58 2030 46 2034 40 41 59 330 2019 2036 61 2025 59 2029 2037 61 2017 46 2038 40 41 59 688 40 2037 340 2025 41 123 2036 61 2021 63 2037 46 2034 40 41 46 2035 40 1500 44 1502 41 58 2037 46 2034 40 41 59 125 2039 2040 61 2031 40 2017 46 2041 40 41 41 59 792 744 2001 40 2040 46 2042 40 41 44 2017 46 2043 40 41 46 2044 40 41 44 2017 46 2045 40 41 44 2040 46 2046 40 41 46 2047 40 41 44 2017 46 2048 40 41 46 2014 40 41 44 2033 44 2036 44 2023 41 59 125 777 809 2001 2015 40 2049 2050 41 123 2051 2052 61 2053 40 2050 46 2054 40 41 41 59 792 744 2001 40 2052 46 2055 40 41 44 2050 46 2056 40 41 46 2057 40 41 44 2050 46 2058 40 41 44 2052 46 2059 40 41 46 2060 40 41 44 2050 46 2061 40 41 44 2062 44 2062 44 2062 44 2062 41 59 125 330 330 330 330 773 640 2063 123 2064 44 2065 44 2066 44 2067 44 330 2068 44 2069 44 2070 44 2071 44 2072 44 2073 44 2074 44 2075 44 2076 44 2077 44 2078 44 2079 44 2080 44 2081 44 2082 44 2083 44 2084 44 2085 44 2086 44 2087 44 2088 44 2089 44 2090 44 2091 44 2092 44 2093 44 2094 44 2095 44 2096 44 2097 44 2098 44 2099 44 2100 44 2101 44 2102 44 2103 44 2104 44 2105 44 2106 44 2107 44 2108 44 2109 44 2110 44 2111 44 2112 44 2113 44 2114 44 2115 44 2116 44 2117 44 2118 44 2119 125 64 2120 773 657 2019 2121 59 64 2120 773 657 726 2122 59 64 2120 773 657 726 2123 59 330 773 657 2019 2124 59 330 773 657 726 2125 59 330 64 2018 64 2006 64 2120 773 2019 2126 59 64 2018 64 2006 64 2120 773 2019 2127 59 330 330 64 2006 773 657 574 91 93 2128 59 330 330 330 64 2018 64 2006 64 2120 773 657 2129 60 2019 44 2019 62 2130 59 330 64 2006 773 828 657 2131 2132 59 64 2006 773 828 2133 2134 61 2135 59 330 64 2006 773 828 2136 2137 59 777 2001 40 2019 2121 44 726 2122 44 726 2123 44 2019 2124 44 726 2125 44 2019 2126 44 2019 2127 44 64 2018 2129 60 2019 44 2019 62 2130 41 123 823 40 2121 44 2122 44 2123 44 2124 44 2125 44 2126 44 2127 44 2130 44 2135 41 59 125 330 777 2001 40 2019 2121 44 726 2122 44 726 2123 44 2019 2124 44 726 2125 44 2019 2126 44 2019 2127 44 64 2018 574 91 93 2128 41 123 823 40 2121 44 2122 44 2123 44 2124 44 2125 44 2126 44 2127 44 2135 44 2128 41 59 125 331 330 331 64 2138 777 2001 40 2019 2121 44 726 2122 44 726 2123 44 2019 2124 44 726 2125 44 64 2018 2019 2126 44 64 2018 2019 2127 44 64 2018 2129 60 2019 44 2019 62 2130 44 64 2018 574 91 93 2128 41 123 823 46 2121 61 2121 59 823 46 2122 61 2122 59 823 46 2123 61 2123 59 2019 2139 59 830 123 2139 61 2019 46 2140 40 2063 46 2140 40 2124 41 46 2141 40 41 41 59 125 580 40 2142 2143 41 123 2139 61 2124 59 125 823 46 2124 61 2139 59 823 46 2125 61 2125 59 823 46 2126 61 2126 59 823 46 2127 61 2127 59 823 46 2130 61 2144 46 2145 40 2130 41 59 823 46 2128 61 2128 323 2135 63 2146 40 41 58 2128 59 2132 61 744 2131 40 2125 41 59 125 777 574 91 93 2147 40 41 123 330 330 330 792 2148 46 2149 40 2150 46 2151 40 823 41 46 2152 40 2153 46 2154 41 41 59 125 773 2155 46 2001 46 2156 2157 40 41 123 2155 46 2001 46 2156 2158 61 2155 46 2001 46 2159 40 41 46 2160 40 2121 41 46 2161 40 2122 41 46 2162 40 2123 41 46 2163 40 2124 41 46 2164 40 2125 41 46 2165 40 2166 46 2167 40 2128 41 41 59 2168 46 2169 40 2126 41 46 2170 40 2158 58 58 2171 41 59 2168 46 2169 40 2127 41 46 2170 40 2158 58 58 2172 41 59 2168 46 2169 40 2130 41 46 2170 40 2158 58 58 2173 41 59 792 2158 59 125 777 2155 46 2001 2174 40 41 123 792 2157 40 41 46 2175 40 41 59 125 64 2176 777 2155 46 2003 2177 40 41 123 792 2155 46 2003 46 2178 40 41 46 2179 40 2157 40 41 41 46 2180 40 41 59 125 777 809 2001 2181 40 2155 46 2001 2182 41 123 792 744 2001 40 2182 46 2183 40 41 44 2182 46 2184 40 41 44 2182 46 2185 40 41 44 2182 46 2186 40 41 44 2182 46 2187 40 41 44 2188 46 2189 40 2182 46 2190 40 41 41 44 2188 46 2189 40 2182 46 2191 40 41 41 44 2192 46 2193 40 2182 46 2194 40 41 41 63 2135 58 2182 46 2194 40 41 44 2182 46 2195 40 41 46 2196 40 41 41 59 125 331 330 331 64 2176 777 574 91 93 2197 40 41 123 792 2128 59 125 64 2176 777 570 2198 40 41 123 2199 40 2128 44 362 41 59 792 2128 46 2200 323 1503 59 125 64 2176 777 2201 2202 40 41 123 792 744 2201 40 2203 46 2204 41 59 125 64 2176 777 2131 2205 40 41 123 792 2132 59 125 777 2136 2206 40 41 123 688 40 2137 323 2135 41 123 2137 61 2132 46 2207 40 41 46 2208 40 2008 41 46 2209 40 41 59 125 792 2137 59 125 777 726 2210 40 41 123 792 2125 59 125 64 2176 777 704 2211 40 41 123 792 1505 59 125 777 865 2212 40 41 123 2126 61 2135 59 2127 61 2135 59 125 777 2019 2213 40 41 123 830 123 792 2063 46 2214 40 41 91 2215 46 2216 40 2124 41 93 46 2217 40 41 59 125 580 40 2218 2219 41 123 792 2124 59 125 125 773 828 2220 2221 59 777 2220 2222 40 41 123 688 40 2221 323 2135 41 123 2221 61 2220 46 2223 40 2121 44 2122 41 59 125 792 2221 59 125 777 2224 2225 40 41 123 792 2224 46 2226 40 2123 41 59 125 777 2133 2227 40 41 123 688 40 2134 323 2135 41 123 688 40 2222 40 41 46 2228 40 41 702 2229 41 123 2134 61 744 2133 40 744 2230 40 40 2229 41 2222 40 41 46 2228 40 41 41 46 2231 40 2225 40 41 41 41 59 125 630 123 2133 2232 61 744 2133 40 744 2233 40 40 2234 41 2222 40 41 46 2228 40 41 41 46 2235 40 2225 40 41 41 41 59 2134 61 2236 46 2237 40 2232 41 59 125 125 792 2134 59 125 777 570 2238 40 41 123 688 40 2121 323 2135 41 123 792 2239 59 125 570 2240 61 2241 59 570 2242 61 2241 59 330 330 688 40 2125 62 2010 41 123 726 2243 61 2224 46 2244 46 2245 40 1502 41 46 2246 59 830 123 330 2019 2247 61 2213 40 41 59 2248 60 2249 62 2250 61 2249 46 2251 40 2247 41 59 688 40 2250 46 2252 40 41 41 123 2243 61 2250 46 2253 40 41 46 2254 40 2121 41 46 2246 59 125 125 580 40 2255 2256 41 123 2257 46 2258 40 362 44 2256 41 59 125 2240 61 2123 329 2243 59 2242 61 2259 46 2260 40 2121 41 46 2261 40 41 309 2259 46 2262 40 2121 41 46 2261 40 41 59 125 792 2123 62 1500 307 2240 307 2122 62 1500 307 2125 62 1500 307 2124 340 2135 307 33 2124 46 2263 40 41 307 33 2121 46 2263 40 41 307 2242 59 125 64 2176 777 570 2264 40 2265 2266 41 123 688 40 823 323 2266 41 792 2267 59 688 40 33 40 2266 702 2001 41 41 792 2268 59 2001 2269 61 40 2001 41 2266 59 688 40 2122 340 2269 46 2122 41 792 2268 59 688 40 2123 340 2269 46 2123 41 792 2268 59 688 40 2125 340 2269 46 2125 41 792 2268 59 688 40 2121 340 2135 63 33 2121 46 2264 40 2269 46 2121 41 58 2269 46 2121 340 2135 41 792 2268 59 688 40 2124 340 2135 63 33 2124 46 2264 40 2269 46 2124 41 58 2269 46 2124 340 2135 41 792 2268 59 792 2270 46 2264 40 2128 44 2269 46 2128 41 59 125 64 2176 777 704 2271 40 41 123 704 2272 61 2121 340 2135 63 2121 46 2271 40 41 58 1500 59 2272 61 1503 42 2272 43 40 704 41 40 2122 94 40 2122 359 1503 41 41 59 2272 61 1503 42 2272 43 40 704 41 40 2123 94 40 2123 359 1503 41 41 59 2272 61 1503 42 2272 43 40 2124 340 2135 63 2124 46 2271 40 41 58 1500 41 59 2272 61 1503 42 2272 43 40 704 41 40 2125 94 40 2125 359 1503 41 41 59 2272 61 1503 42 2272 43 2273 46 2271 40 2128 41 59 792 2272 59 125 64 2176 777 2019 2274 40 41 123 792 362 43 362 43 2121 43 314 43 362 43 2122 43 362 43 2123 43 362 43 2124 43 314 43 362 43 2125 43 362 43 2126 43 314 43 362 43 2127 43 314 43 362 43 2275 46 2276 40 2128 41 43 362 43 2130 43 362 59 125 125 ,"{'AvgLine': 11, 'CountLine': 442, 'CountStmt': 145, 'MaxNesting': 3, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 99, 'MaxEssential': 8, 'SumEssential': 33, 'AvgCyclomatic': 2, 'CountLineCode': 361, 'CountStmtDecl': 60, 'MaxCyclomatic': 10, 'SumCyclomatic': 53, 'AvgLineComment': 0, 'CountClassBase': 5, 'CountLineBlank': 48, 'CountSemicolon': 98, 'CountDeclMethod': 26, 'CountLineCodeExe': 170, 'CountLineComment': 36, 'CountClassCoupled': 48, 'CountClassDerived': 0, 'CountLineCodeDecl': 172, 'CountDeclMethodAll': 26, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.10', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 13, 'SumCyclomaticStrict': 61, 'CountDeclClassMethod': 3, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 25, 'MaxCyclomaticModified': 10, 'PercentLackOfCohesion': 82, 'SumCyclomaticModified': 53, 'CountDeclClassVariable': 2, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 23, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 48, 'CountDeclInstanceVariable': 13, 'PercentLackOfCohesionModified': 64}"
2981,Java,"@Slf4j
public abstract class DisputeAgentManager<T extends DisputeAgent> {

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Static
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected static final long REPUBLISH_MILLIS = DisputeAgent.TTL / 2;
    protected static final long RETRY_REPUBLISH_SEC = 5;
    protected static final long REPEATED_REPUBLISH_AT_STARTUP_SEC = 60;

    protected final List<String> publicKeys;

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Instance fields
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected final KeyRing keyRing;
    protected final DisputeAgentService<T> disputeAgentService;
    protected final User user;
    protected final FilterManager filterManager;
    protected final ObservableMap<NodeAddress, T> observableMap = FXCollections.observableHashMap();
    protected List<T> persistedAcceptedDisputeAgents;
    protected Timer republishTimer, retryRepublishTimer;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    public DisputeAgentManager(KeyRing keyRing,
                               DisputeAgentService<T> disputeAgentService,
                               User user,
                               FilterManager filterManager,
                               boolean useDevPrivilegeKeys) {
        this.keyRing = keyRing;
        this.disputeAgentService = disputeAgentService;
        this.user = user;
        this.filterManager = filterManager;
        publicKeys = useDevPrivilegeKeys ? Collections.singletonList(DevEnv.DEV_PRIVILEGE_PUB_KEY) : getPubKeyList();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Abstract methods
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected abstract List<String> getPubKeyList();

    protected abstract boolean isExpectedInstance(ProtectedStorageEntry data);

    protected abstract void addAcceptedDisputeAgentToUser(T disputeAgent);

    protected abstract T getRegisteredDisputeAgentFromUser();

    protected abstract void clearAcceptedDisputeAgentsAtUser();

    protected abstract List<T> getAcceptedDisputeAgentsFromUser();

    protected abstract void removeAcceptedDisputeAgentFromUser(ProtectedStorageEntry data);

    protected abstract void setRegisteredDisputeAgentAtUser(T disputeAgent);


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void onAllServicesInitialized() {
        disputeAgentService.addHashSetChangedListener(new HashMapChangedListener() {
            @Override
            public void onAdded(Collection<ProtectedStorageEntry> protectedStorageEntries) {
                protectedStorageEntries.forEach(protectedStorageEntry -> {
                    if (isExpectedInstance(protectedStorageEntry)) {
                        updateMap();
                    }
                });
            }

            @Override
            public void onRemoved(Collection<ProtectedStorageEntry> protectedStorageEntries) {
                protectedStorageEntries.forEach(protectedStorageEntry -> {
                    if (isExpectedInstance(protectedStorageEntry)) {
                        updateMap();
                        removeAcceptedDisputeAgentFromUser(protectedStorageEntry);
                    }
                });
            }
        });

        persistedAcceptedDisputeAgents = new ArrayList<>(getAcceptedDisputeAgentsFromUser());
        clearAcceptedDisputeAgentsAtUser();

        if (getRegisteredDisputeAgentFromUser() != null) {
            P2PService p2PService = disputeAgentService.getP2PService();
            if (p2PService.isBootstrapped())
                startRepublishDisputeAgent();
            else
                p2PService.addP2PServiceListener(new BootstrapListener() {
                    @Override
                    public void onUpdatedDataReceived() {
                        startRepublishDisputeAgent();
                    }
                });
        }

        filterManager.filterProperty().addListener((observable, oldValue, newValue) -> updateMap());

        updateMap();
    }

    public void shutDown() {
        stopRepublishTimer();
        stopRetryRepublishTimer();
    }

    protected void startRepublishDisputeAgent() {
        if (republishTimer == null) {
            republishTimer = UserThread.runPeriodically(this::republish, REPUBLISH_MILLIS, TimeUnit.MILLISECONDS);
            UserThread.runAfter(this::republish, REPEATED_REPUBLISH_AT_STARTUP_SEC);
            republish();
        }
    }

    public void updateMap() {
        Map<NodeAddress, T> map = disputeAgentService.getDisputeAgents();
        observableMap.clear();
        Map<NodeAddress, T> filtered = map.values().stream()
                .filter(e -> {
                    String pubKeyAsHex = Utils.HEX.encode(e.getRegistrationPubKey());
                    boolean isInPublicKeyInList = isPublicKeyInList(pubKeyAsHex);
                    if (!isInPublicKeyInList) {
                        if (DevEnv.DEV_PRIVILEGE_PUB_KEY.equals(pubKeyAsHex))
                            log.info(""We got the DEV_PRIVILEGE_PUB_KEY in our list of publicKeys. RegistrationPubKey={}, nodeAddress={}"",
                                    Utilities.bytesAsHexString(e.getRegistrationPubKey()),
                                    e.getNodeAddress().getFullAddress());
                        else
                            log.warn(""We got an disputeAgent which is not in our list of publicKeys. RegistrationPubKey={}, nodeAddress={}"",
                                    Utilities.bytesAsHexString(e.getRegistrationPubKey()),
                                    e.getNodeAddress().getFullAddress());
                    }
                    final boolean isSigValid = verifySignature(e.getPubKeyRing().getSignaturePubKey(),
                            e.getRegistrationPubKey(),
                            e.getRegistrationSignature());
                    if (!isSigValid)
                        log.warn(""Sig check for disputeAgent failed. DisputeAgent={}"", e.toString());

                    return isInPublicKeyInList && isSigValid;
                })
                .collect(Collectors.toMap(DisputeAgent::getNodeAddress, Function.identity()));

        observableMap.putAll(filtered);
        observableMap.values().forEach(this::addAcceptedDisputeAgentToUser);
    }


    public void addDisputeAgent(T disputeAgent,
                                ResultHandler resultHandler,
                                ErrorMessageHandler errorMessageHandler) {
        setRegisteredDisputeAgentAtUser(disputeAgent);
        observableMap.put(disputeAgent.getNodeAddress(), disputeAgent);
        disputeAgentService.addDisputeAgent(disputeAgent,
                () -> {
                    log.info(""DisputeAgent successfully saved in P2P network"");
                    resultHandler.handleResult();

                    if (observableMap.size() > 0)
                        UserThread.runAfter(this::updateMap, 100, TimeUnit.MILLISECONDS);
                },
                errorMessageHandler);
    }


    public void removeDisputeAgent(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) {
        T registeredDisputeAgent = getRegisteredDisputeAgentFromUser();
        if (registeredDisputeAgent != null) {
            setRegisteredDisputeAgentAtUser(null);
            observableMap.remove(registeredDisputeAgent.getNodeAddress());
            disputeAgentService.removeDisputeAgent(registeredDisputeAgent,
                    () -> {
                        log.debug(""DisputeAgent successfully removed from P2P network"");
                        resultHandler.handleResult();
                    },
                    errorMessageHandler);
        }
    }

    public ObservableMap<NodeAddress, T> getObservableMap() {
        return observableMap;
    }

    // A protected key is handed over to selected disputeAgents for registration.
    // An invited disputeAgent will sign at registration his storageSignaturePubKey with that protected key and attach the signature and pubKey to his data.
    // Other users will check the signature with the list of public keys hardcoded in the app.
    public String signStorageSignaturePubKey(ECKey key) {
        String keyToSignAsHex = Utils.HEX.encode(keyRing.getPubKeyRing().getSignaturePubKey().getEncoded());
        return key.signMessage(keyToSignAsHex);
    }

    @Nullable
    public ECKey getRegistrationKey(String privKeyBigIntString) {
        try {
            return ECKey.fromPrivate(new BigInteger(1, HEX.decode(privKeyBigIntString)));
        } catch (Throwable t) {
            return null;
        }
    }

    public boolean isPublicKeyInList(String pubKeyAsHex) {
        return publicKeys.contains(pubKeyAsHex);
    }

    public boolean isAgentAvailableForLanguage(String languageCode) {
        return observableMap.values().stream().anyMatch(agent ->
                agent.getLanguageCodes().stream().anyMatch(lc -> lc.equals(languageCode)));
    }

    public List<String> getDisputeAgentLanguages(List<NodeAddress> nodeAddresses) {
        return observableMap.values().stream()
                .filter(disputeAgent -> nodeAddresses.stream().anyMatch(nodeAddress -> nodeAddress.equals(disputeAgent.getNodeAddress())))
                .flatMap(disputeAgent -> disputeAgent.getLanguageCodes().stream())
                .distinct()
                .collect(Collectors.toList());
    }

    public Optional<T> getDisputeAgentByNodeAddress(NodeAddress nodeAddress) {
        return observableMap.containsKey(nodeAddress) ?
                Optional.of(observableMap.get(nodeAddress)) :
                Optional.empty();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // protected
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected void republish() {
        T registeredDisputeAgent = getRegisteredDisputeAgentFromUser();
        if (registeredDisputeAgent != null) {
            addDisputeAgent(registeredDisputeAgent,
                    this::updateMap,
                    errorMessage -> {
                        if (retryRepublishTimer == null)
                            retryRepublishTimer = UserThread.runPeriodically(() -> {
                                stopRetryRepublishTimer();
                                republish();
                            }, RETRY_REPUBLISH_SEC);
                    }
            );
        }
    }

    protected boolean verifySignature(PublicKey storageSignaturePubKey, byte[] registrationPubKey, String signature) {
        String keyToSignAsHex = Utils.HEX.encode(storageSignaturePubKey.getEncoded());
        try {
            ECKey key = ECKey.fromPublicOnly(registrationPubKey);
            key.verifyMessage(keyToSignAsHex, signature);
            return true;
        } catch (SignatureException e) {
            log.warn(""verifySignature failed"");
            return false;
        }
    }


    protected void stopRetryRepublishTimer() {
        if (retryRepublishTimer != null) {
            retryRepublishTimer.stop();
            retryRepublishTimer = null;
        }
    }

    protected void stopRepublishTimer() {
        if (republishTimer != null) {
            republishTimer.stop();
            republishTimer = null;
        }
    }
}",1,64 2000 777 539 587 2001 60 2002 650 2003 62 123 331 330 331 775 809 657 726 2004 61 2003 46 2005 47 1502 59 775 809 657 726 2006 61 1502 59 775 809 657 726 2007 61 1503 59 775 657 2008 60 2009 62 2010 59 331 330 331 775 657 2011 2012 59 775 657 2013 60 2002 62 2014 59 775 657 2015 2016 59 775 657 2017 2018 59 775 657 2019 60 2020 44 2002 62 2021 61 2022 46 2023 40 41 59 775 2008 60 2002 62 2024 59 775 2025 2026 44 2027 59 331 330 331 777 2001 40 2011 2012 44 2013 60 2002 62 2014 44 2015 2016 44 2017 2018 44 570 2028 41 123 823 46 2012 61 2012 59 823 46 2014 61 2014 59 823 46 2016 61 2016 59 823 46 2018 61 2018 59 2010 61 2028 63 2029 46 2030 40 2031 46 2032 41 58 2033 40 41 59 125 331 330 331 775 539 2008 60 2009 62 2034 40 41 59 775 539 570 2035 40 2036 2037 41 59 775 539 865 2038 40 2002 2039 41 59 775 539 2002 2040 40 41 59 775 539 865 2041 40 41 59 775 539 2008 60 2002 62 2042 40 41 59 775 539 865 2043 40 2036 2037 41 59 775 539 865 2044 40 2002 2039 41 59 331 330 331 777 865 2045 40 41 123 2014 46 2046 40 744 2047 40 41 123 64 2048 777 865 2049 40 2050 60 2036 62 2051 41 123 2051 46 2052 40 2053 45 62 123 688 40 2035 40 2053 41 41 123 2054 40 41 59 125 125 41 59 125 64 2048 777 865 2055 40 2050 60 2036 62 2051 41 123 2051 46 2056 40 2057 45 62 123 688 40 2035 40 2057 41 41 123 2058 40 41 59 2043 40 2057 41 59 125 125 41 59 125 125 41 59 2024 61 744 2059 60 62 40 2042 40 41 41 59 2041 40 41 59 688 40 2040 40 41 340 2060 41 123 2061 2062 61 2014 46 2063 40 41 59 688 40 2062 46 2064 40 41 41 2065 40 41 59 630 2062 46 2066 40 744 2067 40 41 123 64 2068 777 865 2069 40 41 123 2065 40 41 59 125 125 41 59 125 2018 46 2070 40 41 46 2071 40 40 2072 44 2073 44 2074 41 45 62 2075 40 41 41 59 2075 40 41 59 125 777 865 2076 40 41 123 2077 40 41 59 2078 40 41 59 125 775 865 2079 40 41 123 688 40 2026 323 2080 41 123 2026 61 2081 46 2082 40 823 58 58 2083 44 2004 44 2084 46 2085 41 59 2081 46 2086 40 823 58 58 2083 44 2007 41 59 2083 40 41 59 125 125 777 865 2087 40 41 123 2088 60 2020 44 2002 62 2089 61 2014 46 2090 40 41 59 2021 46 2091 40 41 59 2088 60 2020 44 2002 62 2092 61 2089 46 2093 40 41 46 2094 40 41 46 2095 40 2096 45 62 123 2009 2097 61 2098 46 2099 46 2100 40 2096 46 2101 40 41 41 59 570 2102 61 2103 40 2097 41 59 688 40 33 2102 41 123 688 40 2104 46 2105 46 2106 40 2097 41 41 2107 46 2108 40 362 44 2109 46 2110 40 2096 46 2101 40 41 41 44 2096 46 2111 40 41 46 2112 40 41 41 59 630 2107 46 2113 40 362 44 2109 46 2110 40 2096 46 2101 40 41 41 44 2096 46 2111 40 41 46 2112 40 41 41 59 125 657 570 2114 61 2115 40 2096 46 2116 40 41 46 2117 40 41 44 2096 46 2101 40 41 44 2096 46 2118 40 41 41 59 688 40 33 2114 41 2119 46 2120 40 362 44 2096 46 2121 40 41 41 59 792 2102 307 2114 59 125 41 46 2122 40 2123 46 2124 40 2003 58 58 2125 44 2126 46 2127 40 41 41 41 59 2021 46 2128 40 2092 41 59 2021 46 2093 40 41 46 2129 40 823 58 58 2038 41 59 125 777 865 2130 40 2002 2039 44 2131 2132 44 2133 2134 41 123 2044 40 2039 41 59 2021 46 2135 40 2039 46 2136 40 41 44 2039 41 59 2014 46 2130 40 2039 44 40 41 45 62 123 2137 46 2138 40 362 41 59 2132 46 2139 40 41 59 688 40 2021 46 2140 40 41 62 1500 41 2141 46 2142 40 823 58 58 2087 44 1503 44 2143 46 2144 41 59 125 44 2134 41 59 125 777 865 2145 40 2131 2132 44 2133 2134 41 123 2002 2146 61 2040 40 41 59 688 40 2146 340 2147 41 123 2044 40 2147 41 59 2021 46 2148 40 2146 46 2149 40 41 41 59 2014 46 2145 40 2146 44 40 41 45 62 123 2150 46 2151 40 362 41 59 2132 46 2152 40 41 59 125 44 2134 41 59 125 125 777 2019 60 2020 44 2002 62 2153 40 41 123 792 2021 59 125 330 330 330 777 2009 2154 40 2155 2156 41 123 2009 2157 61 2158 46 2159 46 2160 40 2012 46 2161 40 41 46 2162 40 41 46 2163 40 41 41 59 792 2156 46 2164 40 2157 41 59 125 64 2165 777 2155 2166 40 2009 2167 41 123 830 123 792 2155 46 2168 40 744 2169 40 1501 44 2170 46 2171 40 2167 41 41 41 59 125 580 40 2172 2173 41 123 792 2174 59 125 125 777 570 2175 40 2009 2176 41 123 792 2010 46 2177 40 2176 41 59 125 777 570 2178 40 2009 2179 41 123 792 2021 46 2180 40 41 46 2181 40 41 46 2182 40 2183 45 62 2183 46 2184 40 41 46 2181 40 41 46 2182 40 2185 45 62 2185 46 2186 40 2179 41 41 41 59 125 777 2008 60 2009 62 2187 40 2008 60 2020 62 2188 41 123 792 2021 46 2189 40 41 46 2190 40 41 46 2191 40 2039 45 62 2188 46 2190 40 41 46 2192 40 2193 45 62 2193 46 2194 40 2039 46 2195 40 41 41 41 41 46 2196 40 2039 45 62 2039 46 2197 40 41 46 2190 40 41 41 46 2198 40 41 46 2199 40 2200 46 2201 40 41 41 59 125 777 2202 60 2002 62 2203 40 2020 2204 41 123 792 2021 46 2205 40 2204 41 63 2202 46 2206 40 2021 46 2207 40 2204 41 41 58 2202 46 2208 40 41 59 125 331 330 331 775 865 2209 40 41 123 2002 2210 61 2040 40 41 59 688 40 2210 340 2211 41 123 2130 40 2210 44 823 58 58 2087 44 2212 45 62 123 688 40 2027 323 2211 41 2027 61 2213 46 2214 40 40 41 45 62 123 2215 40 41 59 2209 40 41 59 125 44 2006 41 59 125 41 59 125 125 775 570 2216 40 2217 2218 44 574 91 93 2219 44 2009 2220 41 123 2009 2221 61 2222 46 2223 46 2224 40 2218 46 2225 40 41 41 59 830 123 2155 2156 61 2155 46 2226 40 2219 41 59 2156 46 2227 40 2221 44 2220 41 59 792 2228 59 125 580 40 2229 2230 41 123 2231 46 2232 40 362 41 59 792 2233 59 125 125 775 865 2234 40 41 123 688 40 2027 340 2235 41 123 2027 46 2236 40 41 59 2027 61 2235 59 125 125 775 865 2237 40 41 123 688 40 2026 340 2238 41 123 2026 46 2239 40 41 59 2026 61 2238 59 125 125 125 ,"{'AvgLine': 10, 'CountLine': 278, 'CountStmt': 129, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 89, 'MaxEssential': 1, 'SumEssential': 26, 'AvgCyclomatic': 1, 'CountLineCode': 208, 'CountStmtDecl': 52, 'MaxCyclomatic': 3, 'SumCyclomatic': 42, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 49, 'CountSemicolon': 91, 'CountDeclMethod': 26, 'CountLineCodeExe': 132, 'CountLineComment': 21, 'CountClassCoupled': 32, 'CountClassDerived': 4, 'CountLineCodeDecl': 59, 'CountDeclMethodAll': 26, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.10', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 43, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 13, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 85, 'SumCyclomaticModified': 42, 'CountDeclClassVariable': 3, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 26, 'CountDeclMethodProtected': 13, 'CountClassCoupledModified': 32, 'CountDeclInstanceVariable': 9, 'PercentLackOfCohesionModified': 80}"
2732,Java,"public abstract class MutableOfferView<M extends MutableOfferViewModel<?>> extends ActivatableViewAndModel<AnchorPane, M> {
    protected final Navigation navigation;
    private final Preferences preferences;
    private final OfferDetailsWindow offerDetailsWindow;
    private final CoinFormatter btcFormatter;
    private final BsqFormatter bsqFormatter;

    private ScrollPane scrollPane;
    protected GridPane gridPane;
    private TitledGroupBg payFundsTitledGroupBg, setDepositTitledGroupBg, paymentTitledGroupBg;
    protected TitledGroupBg amountTitledGroupBg;
    private BusyAnimation waitingForFundsSpinner;
    private AutoTooltipButton nextButton, cancelButton1, cancelButton2, placeOfferButton;
    private Button priceTypeToggleButton;
    private InputTextField fixedPriceTextField, marketBasedPriceTextField, triggerPriceInputTextField;
    protected InputTextField amountTextField, minAmountTextField, volumeTextField, buyerSecurityDepositInputTextField;
    private TextField currencyTextField;
    private AddressTextField addressTextField;
    private BalanceTextField balanceTextField;
    private FundsTextField totalToPayTextField;
    private Label amountDescriptionLabel, priceCurrencyLabel, priceDescriptionLabel, volumeDescriptionLabel,
            waitingForFundsLabel, marketBasedPriceLabel, percentagePriceDescriptionLabel, tradeFeeDescriptionLabel,
            resultLabel, tradeFeeInBtcLabel, tradeFeeInBsqLabel, xLabel, fakeXLabel, buyerSecurityDepositLabel,
            buyerSecurityDepositPercentageLabel, triggerPriceCurrencyLabel, triggerPriceDescriptionLabel;
    protected Label amountBtcLabel, volumeCurrencyLabel, minAmountBtcLabel;
    private ComboBox<PaymentAccount> paymentAccountsComboBox;
    private ComboBox<TradeCurrency> currencyComboBox;
    private ImageView qrCodeImageView;
    private VBox currencySelection, fixedPriceBox, percentagePriceBox, currencyTextFieldBox, triggerPriceVBox;
    private HBox fundingHBox, firstRowHBox, secondRowHBox, placeOfferBox, amountValueCurrencyBox,
            priceAsPercentageValueCurrencyBox, volumeValueCurrencyBox, priceValueCurrencyBox,
            minAmountValueCurrencyBox, advancedOptionsBox, triggerPriceHBox, buyBsqBox;

    private Subscription isWaitingForFundsSubscription, balanceSubscription;
    private ChangeListener<Boolean> amountFocusedListener, minAmountFocusedListener, volumeFocusedListener,
            buyerSecurityDepositFocusedListener, priceFocusedListener, placeOfferCompletedListener,
            priceAsPercentageFocusedListener, getShowWalletFundedNotificationListener,
            tradeFeeInBtcToggleListener, tradeFeeInBsqToggleListener, tradeFeeVisibleListener,
            isMinBuyerSecurityDepositListener, triggerPriceFocusedListener;
    private ChangeListener<Coin> missingCoinListener;
    private ChangeListener<String> tradeCurrencyCodeListener, errorMessageListener,
            marketPriceMarginListener, volumeListener, buyerSecurityDepositInBTCListener;
    private ChangeListener<Number> marketPriceAvailableListener;
    private EventHandler<ActionEvent> currencyComboBoxSelectionHandler, paymentAccountsComboBoxSelectionHandler;
    private OfferView.CloseHandler closeHandler;

    protected int gridRow = 0;
    private final List<Node> editOfferElements = new ArrayList<>();
    private final HashMap<String, Boolean> paymentAccountWarningDisplayed = new HashMap<>();
    private boolean clearXchangeWarningDisplayed, fasterPaymentsWarningDisplayed, isActivated;
    private InfoInputTextField marketBasedPriceInfoInputTextField, volumeInfoInputTextField,
            buyerSecurityDepositInfoInputTextField, triggerPriceInfoInputTextField;
    private AutoTooltipSlideToggleButton tradeFeeInBtcToggle, tradeFeeInBsqToggle;
    private Text xIcon, fakeXIcon;

    @Setter
    private OfferView.OfferActionHandler offerActionHandler;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    public MutableOfferView(M model,
                            Navigation navigation,
                            Preferences preferences,
                            OfferDetailsWindow offerDetailsWindow,
                            CoinFormatter btcFormatter,
                            BsqFormatter bsqFormatter) {
        super(model);

        this.navigation = navigation;
        this.preferences = preferences;
        this.offerDetailsWindow = offerDetailsWindow;
        this.btcFormatter = btcFormatter;
        this.bsqFormatter = bsqFormatter;
    }

    @Override
    protected void initialize() {
        addScrollPane();
        addGridPane();
        addPaymentGroup();
        addAmountPriceGroup();
        addOptionsGroup();
        addFundingGroup();

        createListeners();

        balanceTextField.setFormatter(model.getBtcFormatter());

        paymentAccountsComboBox.setConverter(GUIUtil.getPaymentAccountsComboBoxStringConverter());
        paymentAccountsComboBox.setButtonCell(GUIUtil.getComboBoxButtonCell(Res.get(""shared.selectTradingAccount""),
                paymentAccountsComboBox, false));
        paymentAccountsComboBox.setCellFactory(model.getPaymentAccountListCellFactory(paymentAccountsComboBox));

        doSetFocus();
    }

    protected void doSetFocus() {
        GUIUtil.focusWhenAddedToScene(amountTextField);
    }

    @Override
    protected void activate() {
        if (model.getDataModel().isTabSelected)
            doActivate();
    }

    protected void doActivate() {
        if (!isActivated) {
            isActivated = true;
            currencyComboBox.setPrefWidth(250);
            paymentAccountsComboBox.setPrefWidth(250);

            addBindings();
            addListeners();
            addSubscriptions();

            // temporarily disabled due to high CPU usage (per issue #4649)
            // if (waitingForFundsSpinner != null)
            //     waitingForFundsSpinner.play();

            amountDescriptionLabel.setText(model.getAmountDescription());
            addressTextField.setAddress(model.getAddressAsString());
            addressTextField.setPaymentLabel(model.getPaymentLabel());

            paymentAccountsComboBox.setItems(model.getDataModel().getPaymentAccounts());
            paymentAccountsComboBox.getSelectionModel().select(model.getPaymentAccount());
            currencyComboBox.getSelectionModel().select(model.getTradeCurrency());

            onPaymentAccountsComboBoxSelected();

            balanceTextField.setTargetAmount(model.getDataModel().totalToPayAsCoinProperty().get());
            updatePriceToggle();

            boolean currencyForMakerFeeBtc = model.getDataModel().isCurrencyForMakerFeeBtc();
            tradeFeeInBtcToggle.setSelected(currencyForMakerFeeBtc);
            tradeFeeInBsqToggle.setSelected(!currencyForMakerFeeBtc);

            if (!DevEnv.isDaoActivated()) {
                tradeFeeInBtcToggle.setVisible(false);
                tradeFeeInBtcToggle.setManaged(false);
                tradeFeeInBsqToggle.setVisible(false);
                tradeFeeInBsqToggle.setManaged(false);
                buyBsqBox.setVisible(false);
                buyBsqBox.setManaged(false);
            }

            if (!model.isShowBuyBsqHint()) {
                buyBsqBox.setVisible(false);
                buyBsqBox.setManaged(false);
            }

            Label popOverLabel = OfferViewUtil.createPopOverLabel(Res.get(""createOffer.triggerPrice.tooltip""));
            triggerPriceInfoInputTextField.setContentForPopOver(popOverLabel, AwesomeIcon.SHIELD);
        }
    }

    @Override
    protected void deactivate() {
        if (isActivated) {
            isActivated = false;
            removeBindings();
            removeListeners();
            removeSubscriptions();

            // temporarily disabled due to high CPU usage (per issue #4649)
            //if (waitingForFundsSpinner != null)
            //    waitingForFundsSpinner.stop();
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void onTabSelected(boolean isSelected) {
        if (isSelected && !model.getDataModel().isTabSelected) {
            doActivate();
        } else {
            deactivate();
        }

        isActivated = isSelected;
        model.getDataModel().onTabSelected(isSelected);
    }

    public void initWithData(OfferDirection direction, TradeCurrency tradeCurrency,
                             OfferView.OfferActionHandler offerActionHandler) {
        this.offerActionHandler = offerActionHandler;

        boolean result = model.initWithData(direction, tradeCurrency);

        if (!result) {
            new Popup().headLine(Res.get(""popup.warning.noTradingAccountSetup.headline""))
                    .instruction(Res.get(""popup.warning.noTradingAccountSetup.msg""))
                    .actionButtonTextWithGoTo(""navigation.account"")
                    .onAction(() -> {
                        navigation.setReturnPath(navigation.getCurrentPath());
                        navigation.navigateTo(MainView.class, AccountView.class, FiatAccountsView.class);
                    }).show();
        }

        if (direction == OfferDirection.BUY) {
            placeOfferButton.setId(""buy-button-big"");
            placeOfferButton.updateText(Res.get(""createOffer.placeOfferButton"", Res.get(""shared.buy"")));
        } else {
            placeOfferButton.setId(""sell-button-big"");
            placeOfferButton.updateText(Res.get(""createOffer.placeOfferButton"", Res.get(""shared.sell"")));
        }

        updatePriceToggle();

        if (!model.getDataModel().isMakerFeeValid() && model.getDataModel().getMakerFee() != null)
            showInsufficientBsqFundsForBtcFeePaymentPopup();
    }

    // called from parent as the view does not get notified when the tab is closed
    public void onClose() {
        // we use model.placeOfferCompleted to not react on close which was triggered by a successful placeOffer
        if (model.getDataModel().getBalance().get().isPositive() && !model.placeOfferCompleted.get()) {
            model.getDataModel().swapTradeToSavings();
        }
    }

    public void setCloseHandler(OfferView.CloseHandler closeHandler) {
        this.closeHandler = closeHandler;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // UI actions
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void onPlaceOffer() {
        if (model.getDataModel().canPlaceOffer()) {
            if (model.getDataModel().isMakerFeeValid()) {
                Offer offer = model.createAndGetOffer();
                if (!DevEnv.isDevMode()) {
                    offerDetailsWindow.onPlaceOffer(() ->
                            model.onPlaceOffer(offer, offerDetailsWindow::hide))
                            .show(offer);
                } else {
                    balanceSubscription.unsubscribe();
                    model.onPlaceOffer(offer, () -> {
                    });
                }
            } else {
                showInsufficientBsqFundsForBtcFeePaymentPopup();
            }
        }
    }

    private void showInsufficientBsqFundsForBtcFeePaymentPopup() {
        String message = getMissingBsqForFeePaymentMessage();

        if (message != null)
            new Popup().warning(message)
                    .actionButtonTextWithGoTo(""navigation.dao.wallet.receive"")
                    .onAction(() -> navigation.navigateTo(MainView.class, DaoView.class, BsqWalletView.class, BsqReceiveView.class))
                    .show();
    }

    private String getMissingBsqForFeePaymentMessage() {
        Coin makerFee = model.getDataModel().getMakerFee(false);
        String message = null;
        if (makerFee != null) {
            message = Res.get(""popup.warning.insufficientBsqFundsForBtcFeePayment"",
                    bsqFormatter.formatCoinWithCode(makerFee.subtract(model.getDataModel().getUsableBsqBalance())));

        } else if (model.getDataModel().getUsableBsqBalance().isZero())
            message = Res.get(""popup.warning.noBsqFundsForBtcFeePayment"");

        return message;
    }

    private void onShowPayFundsScreen() {
        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);

        nextButton.setVisible(false);
        nextButton.setManaged(false);
        nextButton.setOnAction(null);
        cancelButton1.setVisible(false);
        cancelButton1.setManaged(false);
        cancelButton1.setOnAction(null);

        tradeFeeInBtcToggle.setMouseTransparent(true);
        tradeFeeInBsqToggle.setMouseTransparent(true);
        buyBsqBox.setVisible(false);
        buyBsqBox.setManaged(false);

        setDepositTitledGroupBg.setVisible(false);
        setDepositTitledGroupBg.setManaged(false);

        advancedOptionsBox.setVisible(false);
        advancedOptionsBox.setManaged(false);

        model.onShowPayFundsScreen(() -> {
            if (!DevEnv.isDevMode()) {
                String key = ""createOfferFundWalletInfo"";
                String tradeAmountText = model.isSellOffer() ?
                        Res.get(""createOffer.createOfferFundWalletInfo.tradeAmount"", model.getTradeAmount()) : """";

                String message = Res.get(""createOffer.createOfferFundWalletInfo.msg"",
                        model.getTotalToPayInfo(),
                        tradeAmountText,
                        model.getSecurityDepositInfo(),
                        model.getTradeFee(),
                        model.getTxFee()
                );
                new Popup().headLine(Res.get(""createOffer.createOfferFundWalletInfo.headline""))
                        .instruction(message)
                        .dontShowAgainId(key)
                        .show();
            }

            totalToPayTextField.setFundsStructure(model.getFundsStructure());
            totalToPayTextField.setContentForInfoPopOver(createInfoPopover());
        });

        paymentAccountsComboBox.setDisable(true);

        editOfferElements.forEach(node -> {
            node.setMouseTransparent(true);
            node.setFocusTraversable(false);
        });

        updateOfferElementsStyle();

        if (triggerPriceInputTextField.getText().isEmpty()) {
            triggerPriceVBox.setVisible(false);
        }

        balanceTextField.setTargetAmount(model.getDataModel().totalToPayAsCoinProperty().get());

        if (!DevEnv.isDevMode()) {
            String key = ""securityDepositInfo"";
            new Popup().backgroundInfo(Res.get(""popup.info.securityDepositInfo""))
                    .actionButtonText(Res.get(""shared.faq""))
                    .onAction(() -> GUIUtil.openWebPage(""https://bisq.wiki/Frequently_asked_questions#Why_does_Bisq_require_a_security_deposit_in_BTC.3F""))
                    .useIUnderstandButton()
                    .dontShowAgainId(key)
                    .show();
        }

        // temporarily disabled due to high CPU usage (per issue #4649)
        // waitingForFundsSpinner.play();

        payFundsTitledGroupBg.setVisible(true);
        totalToPayTextField.setVisible(true);
        addressTextField.setVisible(true);
        qrCodeImageView.setVisible(true);
        balanceTextField.setVisible(true);
        cancelButton2.setVisible(true);
    }

    private void updateOfferElementsStyle() {
        GridPane.setColumnSpan(firstRowHBox, 2);

        String activeInputStyle = ""input-with-border"";
        String readOnlyInputStyle = ""input-with-border-readonly"";
        amountValueCurrencyBox.getStyleClass().remove(activeInputStyle);
        amountValueCurrencyBox.getStyleClass().add(readOnlyInputStyle);
        priceAsPercentageValueCurrencyBox.getStyleClass().remove(activeInputStyle);
        priceAsPercentageValueCurrencyBox.getStyleClass().add(readOnlyInputStyle);
        volumeValueCurrencyBox.getStyleClass().remove(activeInputStyle);
        volumeValueCurrencyBox.getStyleClass().add(readOnlyInputStyle);
        priceValueCurrencyBox.getStyleClass().remove(activeInputStyle);
        priceValueCurrencyBox.getStyleClass().add(readOnlyInputStyle);
        minAmountValueCurrencyBox.getStyleClass().remove(activeInputStyle);
        minAmountValueCurrencyBox.getStyleClass().add(readOnlyInputStyle);
        triggerPriceHBox.getStyleClass().remove(activeInputStyle);
        triggerPriceHBox.getStyleClass().add(readOnlyInputStyle);

        GridPane.setColumnSpan(secondRowHBox, 1);
        priceTypeToggleButton.setVisible(false);
        HBox.setMargin(priceTypeToggleButton, new Insets(16, -14, 0, 0));

        resultLabel.getStyleClass().add(""small"");
        xLabel.getStyleClass().add(""small"");
        xIcon.setStyle(String.format(""-fx-font-family: %s; -fx-font-size: %s;"", MaterialDesignIcon.CLOSE.fontFamily(), ""1em""));
        fakeXIcon.setStyle(String.format(""-fx-font-family: %s; -fx-font-size: %s;"", MaterialDesignIcon.CLOSE.fontFamily(), ""1em""));
        fakeXLabel.getStyleClass().add(""small"");
    }

    private void maybeShowClearXchangeWarning(PaymentAccount paymentAccount) {
        if (paymentAccount.getPaymentMethod().getId().equals(PaymentMethod.CLEAR_X_CHANGE_ID) &&
                !clearXchangeWarningDisplayed) {
            clearXchangeWarningDisplayed = true;
            UserThread.runAfter(GUIUtil::showClearXchangeWarning, 500, TimeUnit.MILLISECONDS);
        }
    }

    private void maybeShowFasterPaymentsWarning(PaymentAccount paymentAccount) {
        if (paymentAccount.getPaymentMethod().getId().equals(PaymentMethod.FASTER_PAYMENTS_ID) &&
                ((FasterPaymentsAccount) paymentAccount).getHolderName().isEmpty() &&
                !fasterPaymentsWarningDisplayed) {
            fasterPaymentsWarningDisplayed = true;
            UserThread.runAfter(() -> GUIUtil.showFasterPaymentsWarning(navigation), 500, TimeUnit.MILLISECONDS);
        }
    }

    private void maybeShowAccountWarning(PaymentAccount paymentAccount, boolean isBuyer) {
        String msgKey = paymentAccount.getPreTradeMessage(isBuyer);
        OfferViewUtil.showPaymentAccountWarning(msgKey, paymentAccountWarningDisplayed);
    }

    protected void onPaymentAccountsComboBoxSelected() {
        // Temporary deactivate handler as the payment account change can populate a new currency list and causes
        // unwanted selection events (item 0)
        currencyComboBox.setOnAction(null);

        PaymentAccount paymentAccount = paymentAccountsComboBox.getSelectionModel().getSelectedItem();
        if (paymentAccount != null) {
            // We represent BSQ swaps as payment method and switch to a new view if it is selected
            if (paymentAccount.getPaymentMethod().isBsqSwap()) {
                model.dataModel.resetAddressEntry();
                close();

                if (offerActionHandler != null) {
                    offerActionHandler.onCreateOffer(paymentAccount.getSelectedTradeCurrency(),
                            paymentAccount.getPaymentMethod());
                }
                return;
            }

            maybeShowClearXchangeWarning(paymentAccount);
            maybeShowFasterPaymentsWarning(paymentAccount);
            maybeShowAccountWarning(paymentAccount, model.getDataModel().isBuyOffer());

            currencySelection.setVisible(paymentAccount.hasMultipleCurrencies());
            currencySelection.setManaged(paymentAccount.hasMultipleCurrencies());
            currencyTextFieldBox.setVisible(!paymentAccount.hasMultipleCurrencies());
            if (paymentAccount.hasMultipleCurrencies()) {
                final List<TradeCurrency> tradeCurrencies = paymentAccount.getTradeCurrencies();
                currencyComboBox.setItems(FXCollections.observableArrayList(tradeCurrencies));
                model.onPaymentAccountSelected(paymentAccount);
            } else {
                TradeCurrency singleTradeCurrency = paymentAccount.getSingleTradeCurrency();
                if (singleTradeCurrency != null)
                    currencyTextField.setText(singleTradeCurrency.getNameAndCode());
                model.onPaymentAccountSelected(paymentAccount);
                model.onCurrencySelected(model.getDataModel().getTradeCurrency());
            }
        } else {
            currencySelection.setVisible(false);
            currencySelection.setManaged(false);
            currencyTextFieldBox.setVisible(true);

            currencyTextField.setText("""");
        }

        currencyComboBox.setOnAction(currencyComboBoxSelectionHandler);

        updatePriceToggle();
    }

    private void onCurrencyComboBoxSelected() {
        model.onCurrencySelected(currencyComboBox.getSelectionModel().getSelectedItem());
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Navigation
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected void close() {
        if (closeHandler != null)
            closeHandler.close();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Bindings, Listeners
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void addBindings() {
        priceCurrencyLabel.textProperty().bind(createStringBinding(() -> CurrencyUtil.getCounterCurrency(model.tradeCurrencyCode.get()), model.tradeCurrencyCode));
        triggerPriceCurrencyLabel.textProperty().bind(createStringBinding(() ->
                CurrencyUtil.getCounterCurrency(model.tradeCurrencyCode.get()), model.tradeCurrencyCode));
        triggerPriceDescriptionLabel.textProperty().bind(model.triggerPriceDescription);
        percentagePriceDescriptionLabel.textProperty().bind(model.percentagePriceDescription);
        marketBasedPriceLabel.prefWidthProperty().bind(priceCurrencyLabel.widthProperty());
        volumeCurrencyLabel.textProperty().bind(model.tradeCurrencyCode);
        priceDescriptionLabel.textProperty().bind(createStringBinding(() -> CurrencyUtil.getPriceWithCurrencyCode(model.tradeCurrencyCode.get(), ""shared.fixedPriceInCurForCur""), model.tradeCurrencyCode));
        volumeDescriptionLabel.textProperty().bind(createStringBinding(model.volumeDescriptionLabel::get, model.tradeCurrencyCode, model.volumeDescriptionLabel));
        amountTextField.textProperty().bindBidirectional(model.amount);
        minAmountTextField.textProperty().bindBidirectional(model.minAmount);
        fixedPriceTextField.textProperty().bindBidirectional(model.price);
        triggerPriceInputTextField.textProperty().bindBidirectional(model.triggerPrice);
        marketBasedPriceTextField.textProperty().bindBidirectional(model.marketPriceMargin);
        volumeTextField.textProperty().bindBidirectional(model.volume);
        volumeTextField.promptTextProperty().bind(model.volumePromptLabel);
        totalToPayTextField.textProperty().bind(model.totalToPay);
        addressTextField.amountAsCoinProperty().bind(model.getDataModel().getMissingCoin());
        buyerSecurityDepositInputTextField.textProperty().bindBidirectional(model.buyerSecurityDeposit);
        buyerSecurityDepositLabel.textProperty().bind(model.buyerSecurityDepositLabel);
        tradeFeeInBtcLabel.textProperty().bind(model.tradeFeeInBtcWithFiat);
        tradeFeeInBsqLabel.textProperty().bind(model.tradeFeeInBsqWithFiat);
        tradeFeeDescriptionLabel.textProperty().bind(model.tradeFeeDescription);
        tradeFeeInBtcLabel.visibleProperty().bind(model.isTradeFeeVisible);
        tradeFeeInBsqLabel.visibleProperty().bind(model.isTradeFeeVisible);
        tradeFeeDescriptionLabel.visibleProperty().bind(model.isTradeFeeVisible);

        // Validation
        amountTextField.validationResultProperty().bind(model.amountValidationResult);
        minAmountTextField.validationResultProperty().bind(model.minAmountValidationResult);
        fixedPriceTextField.validationResultProperty().bind(model.priceValidationResult);
        triggerPriceInputTextField.validationResultProperty().bind(model.triggerPriceValidationResult);
        volumeTextField.validationResultProperty().bind(model.volumeValidationResult);
        buyerSecurityDepositInputTextField.validationResultProperty().bind(model.buyerSecurityDepositValidationResult);

        // funding
        fundingHBox.visibleProperty().bind(model.getDataModel().getIsBtcWalletFunded().not().and(model.showPayFundsScreenDisplayed));
        fundingHBox.managedProperty().bind(model.getDataModel().getIsBtcWalletFunded().not().and(model.showPayFundsScreenDisplayed));
        waitingForFundsLabel.textProperty().bind(model.waitingForFundsText);
        placeOfferBox.visibleProperty().bind(model.getDataModel().getIsBtcWalletFunded().and(model.showPayFundsScreenDisplayed));
        placeOfferBox.managedProperty().bind(model.getDataModel().getIsBtcWalletFunded().and(model.showPayFundsScreenDisplayed));
        placeOfferButton.disableProperty().bind(model.isPlaceOfferButtonDisabled);
        cancelButton2.disableProperty().bind(model.cancelButtonDisabled);

        // trading account
        paymentAccountsComboBox.managedProperty().bind(paymentAccountsComboBox.visibleProperty());
        paymentTitledGroupBg.managedProperty().bind(paymentTitledGroupBg.visibleProperty());
        currencyComboBox.prefWidthProperty().bind(paymentAccountsComboBox.widthProperty());
        currencyComboBox.managedProperty().bind(currencyComboBox.visibleProperty());
        currencyTextFieldBox.managedProperty().bind(currencyTextFieldBox.visibleProperty());
    }

    private void removeBindings() {
        priceCurrencyLabel.textProperty().unbind();
        triggerPriceCurrencyLabel.textProperty().unbind();
        triggerPriceDescriptionLabel.textProperty().unbind();
        percentagePriceDescriptionLabel.textProperty().unbind();
        volumeCurrencyLabel.textProperty().unbind();
        priceDescriptionLabel.textProperty().unbind();
        volumeDescriptionLabel.textProperty().unbind();
        amountTextField.textProperty().unbindBidirectional(model.amount);
        minAmountTextField.textProperty().unbindBidirectional(model.minAmount);
        fixedPriceTextField.textProperty().unbindBidirectional(model.price);
        triggerPriceInputTextField.textProperty().unbindBidirectional(model.triggerPrice);
        marketBasedPriceTextField.textProperty().unbindBidirectional(model.marketPriceMargin);
        marketBasedPriceLabel.prefWidthProperty().unbind();
        volumeTextField.textProperty().unbindBidirectional(model.volume);
        volumeTextField.promptTextProperty().unbindBidirectional(model.volume);
        totalToPayTextField.textProperty().unbind();
        addressTextField.amountAsCoinProperty().unbind();
        buyerSecurityDepositInputTextField.textProperty().unbindBidirectional(model.buyerSecurityDeposit);
        buyerSecurityDepositLabel.textProperty().unbind();
        tradeFeeInBtcLabel.textProperty().unbind();
        tradeFeeInBsqLabel.textProperty().unbind();
        tradeFeeDescriptionLabel.textProperty().unbind();
        tradeFeeInBtcLabel.visibleProperty().unbind();
        tradeFeeInBsqLabel.visibleProperty().unbind();
        tradeFeeDescriptionLabel.visibleProperty().unbind();

        // Validation
        amountTextField.validationResultProperty().unbind();
        minAmountTextField.validationResultProperty().unbind();
        fixedPriceTextField.validationResultProperty().unbind();
        triggerPriceInputTextField.validationResultProperty().unbind();
        volumeTextField.validationResultProperty().unbind();
        buyerSecurityDepositInputTextField.validationResultProperty().unbind();

        // funding
        fundingHBox.visibleProperty().unbind();
        fundingHBox.managedProperty().unbind();
        waitingForFundsLabel.textProperty().unbind();
        placeOfferBox.visibleProperty().unbind();
        placeOfferBox.managedProperty().unbind();
        placeOfferButton.disableProperty().unbind();
        cancelButton2.disableProperty().unbind();

        // trading account
        paymentTitledGroupBg.managedProperty().unbind();
        paymentAccountsComboBox.managedProperty().unbind();
        currencyComboBox.managedProperty().unbind();
        currencyComboBox.prefWidthProperty().unbind();
        currencyTextFieldBox.managedProperty().unbind();
    }

    private void addSubscriptions() {
        isWaitingForFundsSubscription = EasyBind.subscribe(model.isWaitingForFunds, isWaitingForFunds -> {

            // temporarily disabled due to high CPU usage (per issue #4649)
            //if (isWaitingForFunds) {
            //    waitingForFundsSpinner.play();
            //} else {
            //    waitingForFundsSpinner.stop();
            //}

            waitingForFundsLabel.setVisible(isWaitingForFunds);
            waitingForFundsLabel.setManaged(isWaitingForFunds);
        });

        balanceSubscription = EasyBind.subscribe(model.getDataModel().getBalance(), balanceTextField::setBalance);
    }

    private void removeSubscriptions() {
        isWaitingForFundsSubscription.unsubscribe();
        balanceSubscription.unsubscribe();
    }

    private void createListeners() {
        amountFocusedListener = (o, oldValue, newValue) -> {
            model.onFocusOutAmountTextField(oldValue, newValue);
            amountTextField.setText(model.amount.get());
        };
        minAmountFocusedListener = (o, oldValue, newValue) -> {
            model.onFocusOutMinAmountTextField(oldValue, newValue);
            minAmountTextField.setText(model.minAmount.get());
        };
        priceFocusedListener = (o, oldValue, newValue) -> {
            model.onFocusOutPriceTextField(oldValue, newValue);
            fixedPriceTextField.setText(model.price.get());
        };
        priceAsPercentageFocusedListener = (o, oldValue, newValue) -> {
            model.onFocusOutPriceAsPercentageTextField(oldValue, newValue);
            marketBasedPriceTextField.setText(model.marketPriceMargin.get());
        };
        volumeFocusedListener = (o, oldValue, newValue) -> {
            model.onFocusOutVolumeTextField(oldValue, newValue);
            volumeTextField.setText(model.volume.get());
        };
        buyerSecurityDepositFocusedListener = (o, oldValue, newValue) -> {
            model.onFocusOutBuyerSecurityDepositTextField(oldValue, newValue);
            buyerSecurityDepositInputTextField.setText(model.buyerSecurityDeposit.get());
        };

        triggerPriceFocusedListener = (o, oldValue, newValue) -> {
            model.onFocusOutTriggerPriceTextField(oldValue, newValue);
            triggerPriceInputTextField.setText(model.triggerPrice.get());
        };

        errorMessageListener = (o, oldValue, newValue) -> {
            if (newValue != null)
                UserThread.runAfter(() -> new Popup().error(Res.get(""createOffer.amountPriceBox.error.message"", model.errorMessage.get()))
                        .show(), 100, TimeUnit.MILLISECONDS);
        };

        paymentAccountsComboBoxSelectionHandler = e -> onPaymentAccountsComboBoxSelected();
        currencyComboBoxSelectionHandler = e -> onCurrencyComboBoxSelected();

        tradeCurrencyCodeListener = (observable, oldValue, newValue) -> {
            fixedPriceTextField.clear();
            marketBasedPriceTextField.clear();
            volumeTextField.clear();
            triggerPriceInputTextField.clear();
        };

        placeOfferCompletedListener = (o, oldValue, newValue) -> {
            if (DevEnv.isDevMode()) {
                close();
            } else if (newValue) {
                // We need a bit of delay to avoid issues with fade out/fade in of 2 popups
                String key = ""createOfferSuccessInfo"";
                if (DontShowAgainLookup.showAgain(key)) {
                    UserThread.runAfter(() -> new Popup().headLine(Res.get(""createOffer.success.headline""))
                                    .feedback(Res.get(""createOffer.success.info""))
                                    .dontShowAgainId(key)
                                    .actionButtonTextWithGoTo(""navigation.portfolio.myOpenOffers"")
                                    .onAction(() -> {
                                        UserThread.runAfter(() ->
                                                        navigation.navigateTo(MainView.class, PortfolioView.class,
                                                                OpenOffersView.class),
                                                100, TimeUnit.MILLISECONDS);
                                        close();
                                    })
                                    .onClose(this::close)
                                    .show(),
                            1);
                } else {
                    close();
                }
            }
        };

        marketPriceAvailableListener = (observable, oldValue, newValue) -> updatePriceToggle();

        getShowWalletFundedNotificationListener = (observable, oldValue, newValue) -> {
            if (newValue) {
                Notification walletFundedNotification = new Notification()
                        .headLine(Res.get(""notification.walletUpdate.headline""))
                        .notification(Res.get(""notification.walletUpdate.msg"", btcFormatter.formatCoinWithCode(model.getDataModel().getTotalToPayAsCoin().get())))
                        .autoClose();

                walletFundedNotification.show();
            }
        };

        buyerSecurityDepositInBTCListener = (observable, oldValue, newValue) -> {
            if (!newValue.equals("""")) {
                Label depositInBTCInfo = OfferViewUtil.createPopOverLabel(model.getSecurityDepositPopOverLabel(newValue));
                buyerSecurityDepositInfoInputTextField.setContentForInfoPopOver(depositInBTCInfo);
            } else {
                buyerSecurityDepositInfoInputTextField.setContentForInfoPopOver(null);
            }
        };

        volumeListener = (observable, oldValue, newValue) -> {
            if (!newValue.equals("""") && CurrencyUtil.isFiatCurrency(model.tradeCurrencyCode.get())) {
                Label popOverLabel = OfferViewUtil.createPopOverLabel(Res.get(""offerbook.info.roundedFiatVolume""));
                volumeInfoInputTextField.setContentForPrivacyPopOver(popOverLabel);
            } else {
                volumeInfoInputTextField.hideIcon();
            }
        };

        missingCoinListener = (observable, oldValue, newValue) -> {
            if (!newValue.toString().equals("""")) {
                final byte[] imageBytes = QRCode
                        .from(getBitcoinURI())
                        .withSize(98, 98) // code has 41 elements 8 px is border with 98 we get double scale and min. border
                        .to(ImageType.PNG)
                        .stream()
                        .toByteArray();
                Image qrImage = new Image(new ByteArrayInputStream(imageBytes));
                qrCodeImageView.setImage(qrImage);
            }
        };

        marketPriceMarginListener = (observable, oldValue, newValue) -> {
            if (marketBasedPriceInfoInputTextField != null) {
                String tooltip;
                if (newValue.equals(""0.00"")) {
                    if (model.isSellOffer()) {
                        tooltip = Res.get(""createOffer.info.sellAtMarketPrice"");
                    } else {
                        tooltip = Res.get(""createOffer.info.buyAtMarketPrice"");
                    }
                    final Label atMarketPriceLabel = OfferViewUtil.createPopOverLabel(tooltip);
                    marketBasedPriceInfoInputTextField.setContentForInfoPopOver(atMarketPriceLabel);
                } else if (newValue.contains(""-"")) {
                    if (model.isSellOffer()) {
                        tooltip = Res.get(""createOffer.warning.sellBelowMarketPrice"", newValue.substring(1));
                    } else {
                        tooltip = Res.get(""createOffer.warning.buyAboveMarketPrice"", newValue.substring(1));
                    }
                    final Label negativePercentageLabel = OfferViewUtil.createPopOverLabel(tooltip);
                    marketBasedPriceInfoInputTextField.setContentForWarningPopOver(negativePercentageLabel);
                } else if (!newValue.equals("""")) {
                    if (model.isSellOffer()) {
                        tooltip = Res.get(""createOffer.info.sellAboveMarketPrice"", newValue);
                    } else {
                        tooltip = Res.get(""createOffer.info.buyBelowMarketPrice"", newValue);
                    }
                    Label positivePercentageLabel = OfferViewUtil.createPopOverLabel(tooltip);
                    marketBasedPriceInfoInputTextField.setContentForInfoPopOver(positivePercentageLabel);
                }
            }
        };


        tradeFeeInBtcToggleListener = (observable, oldValue, newValue) -> {
            if (newValue && tradeFeeInBsqToggle.isSelected())
                tradeFeeInBsqToggle.setSelected(false);

            if (!newValue && !tradeFeeInBsqToggle.isSelected())
                tradeFeeInBsqToggle.setSelected(true);

            setIsCurrencyForMakerFeeBtc(newValue);
        };
        tradeFeeInBsqToggleListener = (observable, oldValue, newValue) -> {
            if (newValue && tradeFeeInBtcToggle.isSelected())
                tradeFeeInBtcToggle.setSelected(false);

            if (!newValue && !tradeFeeInBtcToggle.isSelected())
                tradeFeeInBtcToggle.setSelected(true);

            setIsCurrencyForMakerFeeBtc(!newValue);
        };

        tradeFeeVisibleListener = (observable, oldValue, newValue) -> {
            if (DevEnv.isDaoActivated()) {
                tradeFeeInBtcToggle.setVisible(newValue);
                tradeFeeInBsqToggle.setVisible(newValue);
                if (model.isShowBuyBsqHint()) {
                    buyBsqBox.setVisible(newValue);
                    buyBsqBox.setManaged(newValue);
                }
            }
        };

        isMinBuyerSecurityDepositListener = ((observable, oldValue, newValue) -> {
            if (newValue) {
                // show BTC
                buyerSecurityDepositPercentageLabel.setText(Res.getBaseCurrencyCode());
                buyerSecurityDepositInputTextField.setDisable(true);
            } else {
                // show %
                buyerSecurityDepositPercentageLabel.setText(""%"");
                buyerSecurityDepositInputTextField.setDisable(false);
            }
        });
    }

    private void setIsCurrencyForMakerFeeBtc(boolean isCurrencyForMakerFeeBtc) {
        model.setIsCurrencyForMakerFeeBtc(isCurrencyForMakerFeeBtc);
        if (DevEnv.isDaoActivated()) {
            tradeFeeInBtcLabel.setOpacity(isCurrencyForMakerFeeBtc ? 1 : 0.3);
            tradeFeeInBsqLabel.setOpacity(isCurrencyForMakerFeeBtc ? 0.3 : 1);
        }
    }

    protected void updatePriceToggle() {
        int marketPriceAvailableValue = model.marketPriceAvailableProperty.get();
        if (marketPriceAvailableValue > -1) {
            boolean showPriceToggle = marketPriceAvailableValue == 1 &&
                    !model.getDataModel().paymentAccount.hasPaymentMethodWithId(HAL_CASH_ID);
            percentagePriceBox.setVisible(showPriceToggle);
            priceTypeToggleButton.setVisible(showPriceToggle);
            boolean fixedPriceSelected = !model.getDataModel().getUseMarketBasedPrice().get() || !showPriceToggle;
            updatePriceToggleButtons(fixedPriceSelected);
        }
    }

    private void addListeners() {
        model.tradeCurrencyCode.addListener(tradeCurrencyCodeListener);
        model.marketPriceAvailableProperty.addListener(marketPriceAvailableListener);
        model.marketPriceMargin.addListener(marketPriceMarginListener);
        model.volume.addListener(volumeListener);
        model.getDataModel().missingCoin.addListener(missingCoinListener);
        model.isTradeFeeVisible.addListener(tradeFeeVisibleListener);
        model.buyerSecurityDepositInBTC.addListener(buyerSecurityDepositInBTCListener);
        model.isMinBuyerSecurityDeposit.addListener(isMinBuyerSecurityDepositListener);

        tradeFeeInBtcToggle.selectedProperty().addListener(tradeFeeInBtcToggleListener);
        tradeFeeInBsqToggle.selectedProperty().addListener(tradeFeeInBsqToggleListener);

        // focus out
        amountTextField.focusedProperty().addListener(amountFocusedListener);
        minAmountTextField.focusedProperty().addListener(minAmountFocusedListener);
        fixedPriceTextField.focusedProperty().addListener(priceFocusedListener);
        triggerPriceInputTextField.focusedProperty().addListener(triggerPriceFocusedListener);
        marketBasedPriceTextField.focusedProperty().addListener(priceAsPercentageFocusedListener);
        volumeTextField.focusedProperty().addListener(volumeFocusedListener);
        buyerSecurityDepositInputTextField.focusedProperty().addListener(buyerSecurityDepositFocusedListener);

        // notifications
        model.getDataModel().getShowWalletFundedNotification().addListener(getShowWalletFundedNotificationListener);

        // warnings
        model.errorMessage.addListener(errorMessageListener);
        // model.getDataModel().feeFromFundingTxProperty.addListener(feeFromFundingTxListener);

        model.placeOfferCompleted.addListener(placeOfferCompletedListener);

        // UI actions
        paymentAccountsComboBox.setOnAction(paymentAccountsComboBoxSelectionHandler);
        currencyComboBox.setOnAction(currencyComboBoxSelectionHandler);
    }

    private void removeListeners() {
        model.tradeCurrencyCode.removeListener(tradeCurrencyCodeListener);
        model.marketPriceAvailableProperty.removeListener(marketPriceAvailableListener);
        model.marketPriceMargin.removeListener(marketPriceMarginListener);
        model.volume.removeListener(volumeListener);
        model.getDataModel().missingCoin.removeListener(missingCoinListener);
        model.isTradeFeeVisible.removeListener(tradeFeeVisibleListener);
        model.buyerSecurityDepositInBTC.removeListener(buyerSecurityDepositInBTCListener);
        tradeFeeInBtcToggle.selectedProperty().removeListener(tradeFeeInBtcToggleListener);
        tradeFeeInBsqToggle.selectedProperty().removeListener(tradeFeeInBsqToggleListener);
        model.isMinBuyerSecurityDeposit.removeListener(isMinBuyerSecurityDepositListener);

        // focus out
        amountTextField.focusedProperty().removeListener(amountFocusedListener);
        minAmountTextField.focusedProperty().removeListener(minAmountFocusedListener);
        fixedPriceTextField.focusedProperty().removeListener(priceFocusedListener);
        triggerPriceInputTextField.focusedProperty().removeListener(triggerPriceFocusedListener);
        marketBasedPriceTextField.focusedProperty().removeListener(priceAsPercentageFocusedListener);
        volumeTextField.focusedProperty().removeListener(volumeFocusedListener);
        buyerSecurityDepositInputTextField.focusedProperty().removeListener(buyerSecurityDepositFocusedListener);

        // notifications
        model.getDataModel().getShowWalletFundedNotification().removeListener(getShowWalletFundedNotificationListener);

        // warnings
        model.errorMessage.removeListener(errorMessageListener);
        // model.getDataModel().feeFromFundingTxProperty.removeListener(feeFromFundingTxListener);

        model.placeOfferCompleted.removeListener(placeOfferCompletedListener);

        // UI actions
        paymentAccountsComboBox.setOnAction(null);
        currencyComboBox.setOnAction(null);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Build UI elements
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void addScrollPane() {
        scrollPane = GUIUtil.createScrollPane();
        root.getChildren().add(scrollPane);
    }

    private void addGridPane() {
        gridPane = new GridPane();
        gridPane.getStyleClass().add(""content-pane"");
        gridPane.setPadding(new Insets(30, 25, -1, 25));
        gridPane.setHgap(5);
        gridPane.setVgap(5);
        GUIUtil.setDefaultTwoColumnConstraintsForGridPane(gridPane);
        scrollPane.setContent(gridPane);
    }

    private void addPaymentGroup() {
        paymentTitledGroupBg = addTitledGroupBg(gridPane, gridRow, 1, Res.get(""shared.selectTradingAccount""));
        GridPane.setColumnSpan(paymentTitledGroupBg, 2);

        HBox paymentGroupBox = new HBox();
        paymentGroupBox.setAlignment(Pos.CENTER_LEFT);
        paymentGroupBox.setSpacing(12);
        paymentGroupBox.setPadding(new Insets(10, 0, 18, 0));

        final Tuple3<VBox, Label, ComboBox<PaymentAccount>> tradingAccountBoxTuple = addTopLabelComboBox(
                Res.get(""shared.tradingAccount""), Res.get(""shared.selectTradingAccount""));
        final Tuple3<VBox, Label, ComboBox<TradeCurrency>> currencyBoxTuple = addTopLabelComboBox(
                Res.get(""shared.currency""), Res.get(""list.currency.select""));

        currencySelection = currencyBoxTuple.first;
        paymentGroupBox.getChildren().addAll(tradingAccountBoxTuple.first, currencySelection);

        GridPane.setRowIndex(paymentGroupBox, gridRow);
        GridPane.setColumnSpan(paymentGroupBox, 2);
        GridPane.setMargin(paymentGroupBox, new Insets(Layout.FIRST_ROW_DISTANCE, 0, 0, 0));
        gridPane.getChildren().add(paymentGroupBox);

        tradingAccountBoxTuple.first.setMinWidth(800);
        paymentAccountsComboBox = tradingAccountBoxTuple.third;
        paymentAccountsComboBox.setMinWidth(tradingAccountBoxTuple.first.getMinWidth());
        paymentAccountsComboBox.setPrefWidth(tradingAccountBoxTuple.first.getMinWidth());
        editOfferElements.add(tradingAccountBoxTuple.first);

        // we display either currencyComboBox (multi currency account) or currencyTextField (single)
        currencyComboBox = currencyBoxTuple.third;
        currencyComboBox.setMaxWidth(tradingAccountBoxTuple.first.getMinWidth() / 2);
        editOfferElements.add(currencySelection);
        currencyComboBox.setConverter(new StringConverter<>() {
            @Override
            public String toString(TradeCurrency tradeCurrency) {
                return tradeCurrency.getNameAndCode();
            }

            @Override
            public TradeCurrency fromString(String s) {
                return null;
            }
        });

        final Tuple3<Label, TextField, VBox> currencyTextFieldTuple = addTopLabelTextField(gridPane, gridRow, Res.get(""shared.currency""), """", 5d);
        currencyTextField = currencyTextFieldTuple.second;
        currencyTextFieldBox = currencyTextFieldTuple.third;
        currencyTextFieldBox.setVisible(false);
        editOfferElements.add(currencyTextFieldBox);

        paymentGroupBox.getChildren().add(currencyTextFieldBox);
    }

    private void addAmountPriceGroup() {
        amountTitledGroupBg = addTitledGroupBg(gridPane, ++gridRow, 2,
                Res.get(""createOffer.setAmountPrice""), Layout.COMPACT_GROUP_DISTANCE);
        GridPane.setColumnSpan(amountTitledGroupBg, 2);

        addAmountPriceFields();
        addSecondRow();
    }

    private void addOptionsGroup() {
        setDepositTitledGroupBg = addTitledGroupBg(gridPane, ++gridRow, 1,
                Res.get(""shared.advancedOptions""), Layout.COMPACT_GROUP_DISTANCE);

        advancedOptionsBox = new HBox();
        advancedOptionsBox.setSpacing(40);

        GridPane.setRowIndex(advancedOptionsBox, gridRow);
        GridPane.setColumnSpan(advancedOptionsBox, GridPane.REMAINING);
        GridPane.setColumnIndex(advancedOptionsBox, 0);
        GridPane.setHalignment(advancedOptionsBox, HPos.LEFT);
        GridPane.setMargin(advancedOptionsBox, new Insets(Layout.COMPACT_FIRST_ROW_AND_GROUP_DISTANCE, 0, 0, 0));
        gridPane.getChildren().add(advancedOptionsBox);

        Tuple2<AutoTooltipButton, HBox> buyBsqButtonBox = OfferViewUtil.createBuyBsqButtonBox(
                navigation, preferences);
        buyBsqBox = buyBsqButtonBox.second;
        buyBsqBox.setManaged(false);
        buyBsqBox.setVisible(false);

        VBox tradeFeeFieldsBox = getTradeFeeFieldsBox();
        tradeFeeFieldsBox.setMinWidth(240);
        advancedOptionsBox.getChildren().addAll(getBuyerSecurityDepositBox(), tradeFeeFieldsBox, buyBsqBox);

        Tuple2<Button, Button> tuple = add2ButtonsAfterGroup(gridPane, ++gridRow,
                Res.get(""shared.nextStep""), Res.get(""shared.cancel""));
        nextButton = (AutoTooltipButton) tuple.first;
        nextButton.setMaxWidth(200);
        editOfferElements.add(nextButton);
        nextButton.disableProperty().bind(model.isNextButtonDisabled);
        cancelButton1 = (AutoTooltipButton) tuple.second;
        cancelButton1.setMaxWidth(200);
        editOfferElements.add(cancelButton1);
        cancelButton1.setDefaultButton(false);
        cancelButton1.setOnAction(e -> {
            close();
            model.getDataModel().swapTradeToSavings();
        });

        nextButton.setOnAction(e -> {
            if (model.isPriceInRange()) {
                if (DevEnv.isDaoTradingActivated())
                    showFeeOption();
                else
                    onShowPayFundsScreen();
            }
        });
    }

    protected void hideOptionsGroup() {
        setDepositTitledGroupBg.setVisible(false);
        setDepositTitledGroupBg.setManaged(false);
        nextButton.setVisible(false);
        nextButton.setManaged(false);
        cancelButton1.setVisible(false);
        cancelButton1.setManaged(false);
        advancedOptionsBox.setVisible(false);
        advancedOptionsBox.setManaged(false);
    }

    private void showFeeOption() {
        boolean isPreferredFeeCurrencyBtc = model.getDataModel().isPreferredFeeCurrencyBtc();
        boolean isBsqForFeeAvailable = model.getDataModel().isBsqForFeeAvailable();
        if (!isPreferredFeeCurrencyBtc && !isBsqForFeeAvailable) {
            String missingBsq = getMissingBsqForFeePaymentMessage();

            if (missingBsq != null) {
                new Popup().warning(missingBsq)
                        .actionButtonText(Res.get(""feeOptionWindow.useBTC""))
                        .onAction(() -> {
                            tradeFeeInBtcToggle.setSelected(true);
                            onShowPayFundsScreen();
                        })
                        .show();
            } else {
                onShowPayFundsScreen();
            }
        } else {
            onShowPayFundsScreen();
        }
    }

    private VBox getBuyerSecurityDepositBox() {
        Tuple3<HBox, InfoInputTextField, Label> tuple = getEditableValueBoxWithInfo(
                Res.get(""createOffer.securityDeposit.prompt""));
        buyerSecurityDepositInfoInputTextField = tuple.second;
        buyerSecurityDepositInputTextField = buyerSecurityDepositInfoInputTextField.getInputTextField();
        buyerSecurityDepositPercentageLabel = tuple.third;
        // getEditableValueBox delivers BTC, so we overwrite it with %
        buyerSecurityDepositPercentageLabel.setText(""%"");

        Tuple2<Label, VBox> tradeInputBoxTuple = getTradeInputBox(tuple.first, model.getSecurityDepositLabel());
        VBox depositBox = tradeInputBoxTuple.second;
        buyerSecurityDepositLabel = tradeInputBoxTuple.first;
        depositBox.setMaxWidth(310);

        editOfferElements.add(buyerSecurityDepositInputTextField);
        editOfferElements.add(buyerSecurityDepositPercentageLabel);

        return depositBox;
    }

    private void addFundingGroup() {
        // don't increase gridRow as we removed button when this gets visible
        payFundsTitledGroupBg = addTitledGroupBg(gridPane, gridRow, 3,
                Res.get(""createOffer.fundsBox.title""), Layout.COMPACT_GROUP_DISTANCE);
        payFundsTitledGroupBg.getStyleClass().add(""last"");
        GridPane.setColumnSpan(payFundsTitledGroupBg, 2);
        payFundsTitledGroupBg.setVisible(false);

        totalToPayTextField = addFundsTextfield(gridPane, gridRow,
                Res.get(""shared.totalsNeeded""), Layout.COMPACT_FIRST_ROW_AND_GROUP_DISTANCE);
        totalToPayTextField.setVisible(false);

        qrCodeImageView = new ImageView();
        qrCodeImageView.setVisible(false);
        qrCodeImageView.setFitHeight(150);
        qrCodeImageView.setFitWidth(150);
        qrCodeImageView.getStyleClass().add(""qr-code"");
        Tooltip.install(qrCodeImageView, new Tooltip(Res.get(""shared.openLargeQRWindow"")));
        qrCodeImageView.setOnMouseClicked(e -> GUIUtil.showFeeInfoBeforeExecute(
                () -> UserThread.runAfter(
                        () -> new QRCodeWindow(getBitcoinURI()).show(),
                        200, TimeUnit.MILLISECONDS)));
        GridPane.setRowIndex(qrCodeImageView, gridRow);
        GridPane.setColumnIndex(qrCodeImageView, 1);
        GridPane.setRowSpan(qrCodeImageView, 3);
        GridPane.setValignment(qrCodeImageView, VPos.BOTTOM);
        GridPane.setMargin(qrCodeImageView, new Insets(Layout.FIRST_ROW_DISTANCE - 9, 0, 0, 10));
        gridPane.getChildren().add(qrCodeImageView);

        addressTextField = addAddressTextField(gridPane, ++gridRow,
                Res.get(""shared.tradeWalletAddress""));
        addressTextField.setVisible(false);

        balanceTextField = addBalanceTextField(gridPane, ++gridRow,
                Res.get(""shared.tradeWalletBalance""));
        balanceTextField.setVisible(false);

        fundingHBox = new HBox();
        fundingHBox.setVisible(false);
        fundingHBox.setManaged(false);
        fundingHBox.setSpacing(10);
        Button fundFromSavingsWalletButton = new AutoTooltipButton(Res.get(""shared.fundFromSavingsWalletButton""));
        fundFromSavingsWalletButton.setDefaultButton(true);
        fundFromSavingsWalletButton.getStyleClass().add(""action-button"");
        fundFromSavingsWalletButton.setOnAction(e -> model.fundFromSavingsWallet());
        Label label = new AutoTooltipLabel(Res.get(""shared.OR""));
        label.setPadding(new Insets(5, 0, 0, 0));
        Button fundFromExternalWalletButton = new AutoTooltipButton(Res.get(""shared.fundFromExternalWalletButton""));
        fundFromExternalWalletButton.setDefaultButton(false);
        fundFromExternalWalletButton.setOnAction(e -> GUIUtil.showFeeInfoBeforeExecute(this::openWallet));
        waitingForFundsSpinner = new BusyAnimation(false);
        waitingForFundsLabel = new AutoTooltipLabel();
        waitingForFundsLabel.setPadding(new Insets(5, 0, 0, 0));

        fundingHBox.getChildren().addAll(fundFromSavingsWalletButton,
                label,
                fundFromExternalWalletButton,
                waitingForFundsSpinner,
                waitingForFundsLabel);

        GridPane.setRowIndex(fundingHBox, ++gridRow);
        GridPane.setColumnSpan(fundingHBox, 2);
        GridPane.setMargin(fundingHBox, new Insets(5, 0, 0, 0));
        gridPane.getChildren().add(fundingHBox);

        placeOfferBox = new HBox();
        placeOfferBox.setSpacing(10);
        GridPane.setRowIndex(placeOfferBox, gridRow);
        GridPane.setColumnSpan(placeOfferBox, 2);
        GridPane.setMargin(placeOfferBox, new Insets(5, 20, 0, 0));
        gridPane.getChildren().add(placeOfferBox);

        placeOfferButton = new AutoTooltipButton();
        placeOfferButton.setOnAction(e -> onPlaceOffer());
        placeOfferButton.setMinHeight(40);
        placeOfferButton.setPadding(new Insets(0, 20, 0, 20));

        placeOfferBox.getChildren().add(placeOfferButton);
        placeOfferBox.visibleProperty().addListener((observable, oldValue, newValue) -> {
            if (newValue) {
                fundingHBox.getChildren().remove(cancelButton2);
                placeOfferBox.getChildren().add(cancelButton2);
            } else if (!fundingHBox.getChildren().contains(cancelButton2)) {
                placeOfferBox.getChildren().remove(cancelButton2);
                fundingHBox.getChildren().add(cancelButton2);
            }
        });

        cancelButton2 = new AutoTooltipButton(Res.get(""shared.cancel""));

        fundingHBox.getChildren().add(cancelButton2);

        cancelButton2.setOnAction(e -> {
            String key = ""CreateOfferCancelAndFunded"";
            if (model.getDataModel().getIsBtcWalletFunded().get() &&
                    preferences.showAgain(key)) {
                new Popup().backgroundInfo(Res.get(""createOffer.warnCancelOffer""))
                        .closeButtonText(Res.get(""shared.no""))
                        .actionButtonText(Res.get(""shared.yesCancel""))
                        .onAction(() -> {
                            close();
                            model.getDataModel().swapTradeToSavings();
                        })
                        .dontShowAgainId(key)
                        .show();
            } else {
                close();
                model.getDataModel().swapTradeToSavings();
            }
        });
        cancelButton2.setDefaultButton(false);
        cancelButton2.setVisible(false);
    }

    private void openWallet() {
        try {
            Utilities.openURI(URI.create(getBitcoinURI()));
        } catch (Exception ex) {
            log.warn(ex.getMessage());
            new Popup().warning(Res.get(""shared.openDefaultWalletFailed"")).show();
        }
    }

    @NotNull
    private String getBitcoinURI() {
        return GUIUtil.getBitcoinURI(addressTextField.getAddress(), model.getDataModel().getMissingCoin().get(),
                model.getPaymentLabel());
    }

    private void addAmountPriceFields() {
        // amountBox
        Tuple3<HBox, InputTextField, Label> amountValueCurrencyBoxTuple = getEditableValueBox(Res.get(""createOffer.amount.prompt""));
        amountValueCurrencyBox = amountValueCurrencyBoxTuple.first;
        amountTextField = amountValueCurrencyBoxTuple.second;
        editOfferElements.add(amountTextField);
        amountBtcLabel = amountValueCurrencyBoxTuple.third;
        editOfferElements.add(amountBtcLabel);
        Tuple2<Label, VBox> amountInputBoxTuple = getTradeInputBox(amountValueCurrencyBox, model.getAmountDescription());
        amountDescriptionLabel = amountInputBoxTuple.first;
        editOfferElements.add(amountDescriptionLabel);
        VBox amountBox = amountInputBoxTuple.second;

        // x
        xLabel = new Label();
        xIcon = getIconForLabel(MaterialDesignIcon.CLOSE, ""2em"", xLabel);
        xIcon.getStyleClass().add(""opaque-icon"");
        xLabel.getStyleClass().add(""opaque-icon-character"");

        // price as percent
        Tuple3<HBox, InfoInputTextField, Label> priceAsPercentageTuple = getEditableValueBoxWithInfo(Res.get(""createOffer.price.prompt""));

        priceAsPercentageValueCurrencyBox = priceAsPercentageTuple.first;
        marketBasedPriceInfoInputTextField = priceAsPercentageTuple.second;
        marketBasedPriceTextField = marketBasedPriceInfoInputTextField.getInputTextField();
        editOfferElements.add(marketBasedPriceTextField);
        marketBasedPriceLabel = priceAsPercentageTuple.third;
        editOfferElements.add(marketBasedPriceLabel);
        Tuple2<Label, VBox> priceAsPercentageInputBoxTuple = getTradeInputBox(priceAsPercentageValueCurrencyBox,
                model.getPercentagePriceDescription());
        percentagePriceDescriptionLabel = priceAsPercentageInputBoxTuple.first;

        getSmallIconForLabel(MaterialDesignIcon.CHART_LINE, percentagePriceDescriptionLabel, ""small-icon-label"");

        percentagePriceBox = priceAsPercentageInputBoxTuple.second;

        // =
        resultLabel = new AutoTooltipLabel(""="");
        resultLabel.getStyleClass().add(""opaque-icon-character"");

        // volume
        Tuple3<HBox, InfoInputTextField, Label> volumeValueCurrencyBoxTuple = getEditableValueBoxWithInfo(Res.get(""createOffer.volume.prompt""));
        volumeValueCurrencyBox = volumeValueCurrencyBoxTuple.first;
        volumeInfoInputTextField = volumeValueCurrencyBoxTuple.second;
        volumeTextField = volumeInfoInputTextField.getInputTextField();
        editOfferElements.add(volumeTextField);
        volumeCurrencyLabel = volumeValueCurrencyBoxTuple.third;
        editOfferElements.add(volumeCurrencyLabel);
        Tuple2<Label, VBox> volumeInputBoxTuple = getTradeInputBox(volumeValueCurrencyBox, model.volumeDescriptionLabel.get());
        volumeDescriptionLabel = volumeInputBoxTuple.first;
        editOfferElements.add(volumeDescriptionLabel);
        VBox volumeBox = volumeInputBoxTuple.second;

        firstRowHBox = new HBox();
        firstRowHBox.setSpacing(5);
        firstRowHBox.setAlignment(Pos.CENTER_LEFT);
        firstRowHBox.getChildren().addAll(amountBox, xLabel, percentagePriceBox, resultLabel, volumeBox);
        GridPane.setColumnSpan(firstRowHBox, 2);
        GridPane.setRowIndex(firstRowHBox, gridRow);
        GridPane.setMargin(firstRowHBox, new Insets(Layout.COMPACT_FIRST_ROW_AND_GROUP_DISTANCE, 10, 0, 0));
        gridPane.getChildren().add(firstRowHBox);
    }

    private void updatePriceToggleButtons(boolean fixedPriceSelected) {
        int marketPriceAvailable = model.marketPriceAvailableProperty.get();
        fixedPriceSelected = fixedPriceSelected || (marketPriceAvailable == 0);

        if (marketPriceAvailable == 1) {
            model.getDataModel().setUseMarketBasedPrice(!fixedPriceSelected);
        }

        percentagePriceBox.setDisable(fixedPriceSelected);
        fixedPriceBox.setDisable(!fixedPriceSelected);

        if (fixedPriceSelected) {
            firstRowHBox.getChildren().remove(percentagePriceBox);
            secondRowHBox.getChildren().remove(fixedPriceBox);

            if (!firstRowHBox.getChildren().contains(fixedPriceBox))
                firstRowHBox.getChildren().add(2, fixedPriceBox);
            if (!secondRowHBox.getChildren().contains(percentagePriceBox))
                secondRowHBox.getChildren().add(2, percentagePriceBox);
        } else {
            firstRowHBox.getChildren().remove(fixedPriceBox);
            secondRowHBox.getChildren().remove(percentagePriceBox);

            if (!firstRowHBox.getChildren().contains(percentagePriceBox))
                firstRowHBox.getChildren().add(2, percentagePriceBox);
            if (!secondRowHBox.getChildren().contains(fixedPriceBox))
                secondRowHBox.getChildren().add(2, fixedPriceBox);
        }

        triggerPriceVBox.setVisible(!fixedPriceSelected);
        model.onFixPriceToggleChange(fixedPriceSelected);
    }

    private void addSecondRow() {
        // price as fiat
        Tuple3<HBox, InputTextField, Label> priceValueCurrencyBoxTuple = getEditableValueBox(
                Res.get(""createOffer.price.prompt""));
        priceValueCurrencyBox = priceValueCurrencyBoxTuple.first;
        fixedPriceTextField = priceValueCurrencyBoxTuple.second;
        editOfferElements.add(fixedPriceTextField);
        priceCurrencyLabel = priceValueCurrencyBoxTuple.third;
        editOfferElements.add(priceCurrencyLabel);
        Tuple2<Label, VBox> priceInputBoxTuple = getTradeInputBox(priceValueCurrencyBox, """");
        priceDescriptionLabel = priceInputBoxTuple.first;

        getSmallIconForLabel(MaterialDesignIcon.LOCK, priceDescriptionLabel, ""small-icon-label"");

        editOfferElements.add(priceDescriptionLabel);
        fixedPriceBox = priceInputBoxTuple.second;

        marketBasedPriceTextField.setPromptText(Res.get(""shared.enterPercentageValue""));
        marketBasedPriceLabel.setText(""%"");

        Tuple3<HBox, InputTextField, Label> amountValueCurrencyBoxTuple = getEditableValueBox(Res.get(""createOffer.amount.prompt""));
        minAmountValueCurrencyBox = amountValueCurrencyBoxTuple.first;
        minAmountTextField = amountValueCurrencyBoxTuple.second;
        editOfferElements.add(minAmountTextField);
        minAmountBtcLabel = amountValueCurrencyBoxTuple.third;
        editOfferElements.add(minAmountBtcLabel);

        Tuple2<Label, VBox> amountInputBoxTuple = getTradeInputBox(minAmountValueCurrencyBox, Res.get(""createOffer.amountPriceBox.minAmountDescription""));

        fakeXLabel = new Label();
        fakeXIcon = getIconForLabel(MaterialDesignIcon.CLOSE, ""2em"", fakeXLabel);
        fakeXLabel.getStyleClass().add(""opaque-icon-character"");
        fakeXLabel.setVisible(false); // we just use it to get the same layout as the upper row

        // Fixed/Percentage toggle
        priceTypeToggleButton = getIconButton(MaterialDesignIcon.SWAP_VERTICAL);
        editOfferElements.add(priceTypeToggleButton);
        HBox.setMargin(priceTypeToggleButton, new Insets(16, 1.5, 0, 0));
        priceTypeToggleButton.setOnAction((actionEvent) ->
                updatePriceToggleButtons(model.getDataModel().getUseMarketBasedPrice().getValue()));

        // triggerPrice
        Tuple3<HBox, InfoInputTextField, Label> triggerPriceTuple3 = getEditableValueBoxWithInfo(Res.get(""createOffer.triggerPrice.prompt""));
        triggerPriceHBox = triggerPriceTuple3.first;
        triggerPriceInfoInputTextField = triggerPriceTuple3.second;
        editOfferElements.add(triggerPriceInfoInputTextField);
        triggerPriceInputTextField = triggerPriceInfoInputTextField.getInputTextField();
        triggerPriceCurrencyLabel = triggerPriceTuple3.third;
        editOfferElements.add(triggerPriceCurrencyLabel);
        Tuple2<Label, VBox> triggerPriceTuple2 = getTradeInputBox(triggerPriceHBox, model.getTriggerPriceDescriptionLabel());
        triggerPriceDescriptionLabel = triggerPriceTuple2.first;
        triggerPriceDescriptionLabel.setPrefWidth(290);
        triggerPriceVBox = triggerPriceTuple2.second;

        secondRowHBox = new HBox();
        secondRowHBox.setSpacing(5);
        secondRowHBox.setAlignment(Pos.CENTER_LEFT);
        secondRowHBox.getChildren().addAll(amountInputBoxTuple.second, fakeXLabel, fixedPriceBox, priceTypeToggleButton, triggerPriceVBox);
        GridPane.setColumnSpan(secondRowHBox, 2);
        GridPane.setRowIndex(secondRowHBox, ++gridRow);
        GridPane.setColumnIndex(secondRowHBox, 0);
        GridPane.setMargin(secondRowHBox, new Insets(0, 10, 10, 0));
        gridPane.getChildren().add(secondRowHBox);
    }

    private VBox getTradeFeeFieldsBox() {
        tradeFeeInBtcLabel = new Label();
        tradeFeeInBtcLabel.setMouseTransparent(true);
        tradeFeeInBtcLabel.setId(""trade-fee-textfield"");

        tradeFeeInBsqLabel = new Label();
        tradeFeeInBsqLabel.setMouseTransparent(true);
        tradeFeeInBsqLabel.setId(""trade-fee-textfield"");

        VBox vBox = new VBox();
        vBox.setSpacing(6);
        vBox.setMaxWidth(300);
        vBox.setAlignment(DevEnv.isDaoActivated() ? Pos.CENTER_RIGHT : Pos.CENTER_LEFT);
        vBox.getChildren().addAll(tradeFeeInBtcLabel, tradeFeeInBsqLabel);

        tradeFeeInBtcToggle = new AutoTooltipSlideToggleButton();
        tradeFeeInBtcToggle.setText(""BTC"");
        tradeFeeInBtcToggle.setVisible(false);
        tradeFeeInBtcToggle.setPadding(new Insets(-8, 5, -10, 5));

        tradeFeeInBsqToggle = new AutoTooltipSlideToggleButton();
        tradeFeeInBsqToggle.setText(""BSQ"");
        tradeFeeInBsqToggle.setVisible(false);
        tradeFeeInBsqToggle.setPadding(new Insets(-9, 5, -9, 5));

        VBox tradeFeeToggleButtonBox = new VBox();
        tradeFeeToggleButtonBox.getChildren().addAll(tradeFeeInBtcToggle, tradeFeeInBsqToggle);

        HBox hBox = new HBox();
        hBox.getChildren().addAll(vBox, tradeFeeToggleButtonBox);
        hBox.setMinHeight(47);
        hBox.setMaxHeight(hBox.getMinHeight());
        HBox.setHgrow(vBox, Priority.ALWAYS);
        HBox.setHgrow(tradeFeeToggleButtonBox, Priority.NEVER);

        final Tuple2<Label, VBox> tradeInputBox = getTradeInputBox(hBox, Res.get(""createOffer.tradeFee.descriptionBSQEnabled""));

        tradeFeeDescriptionLabel = tradeInputBox.first;

        return tradeInputBox.second;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PayInfo
    ///////////////////////////////////////////////////////////////////////////////////////////

    private GridPane createInfoPopover() {
        GridPane infoGridPane = new GridPane();
        infoGridPane.setHgap(5);
        infoGridPane.setVgap(5);
        infoGridPane.setPadding(new Insets(10, 10, 10, 10));

        int i = 0;
        if (model.isSellOffer()) {
            addPayInfoEntry(infoGridPane, i++, Res.getWithCol(""shared.tradeAmount""), model.getTradeAmount());
        }

        addPayInfoEntry(infoGridPane, i++, Res.getWithCol(""shared.yourSecurityDeposit""), model.getSecurityDepositInfo());
        addPayInfoEntry(infoGridPane, i++, Res.getWithCol(""createOffer.fundsBox.offerFee""), model.getTradeFee());
        addPayInfoEntry(infoGridPane, i++, Res.getWithCol(""createOffer.fundsBox.networkFee""), model.getTxFee());
        Separator separator = new Separator();
        separator.setOrientation(Orientation.HORIZONTAL);
        separator.getStyleClass().add(""offer-separator"");
        GridPane.setConstraints(separator, 1, i++);
        infoGridPane.getChildren().add(separator);
        addPayInfoEntry(infoGridPane, i, Res.getWithCol(""shared.total""),
                model.getTotalToPayInfo());
        return infoGridPane;
    }
}",1,777 539 587 2000 60 2001 650 2002 60 63 356 650 2003 60 2004 44 2001 62 123 775 657 2005 2006 59 773 657 2007 2008 59 773 657 2009 2010 59 773 657 2011 2012 59 773 657 2013 2014 59 773 2015 2016 59 775 2017 2018 59 773 2019 2020 44 2021 44 2022 59 775 2019 2023 59 773 2024 2025 59 773 2026 2027 44 2028 44 2029 44 2030 59 773 2031 2032 59 773 2033 2034 44 2035 44 2036 59 775 2033 2037 44 2038 44 2039 44 2040 59 773 2041 2042 59 773 2043 2044 59 773 2045 2046 59 773 2047 2048 59 773 2049 2050 44 2051 44 2052 44 2053 44 2054 44 2055 44 2056 44 2057 44 2058 44 2059 44 2060 44 2061 44 2062 44 2063 44 2064 44 2065 44 2066 59 775 2049 2067 44 2068 44 2069 59 773 2070 60 2071 62 2072 59 773 2070 60 2073 62 2074 59 773 2075 2076 59 773 2077 2078 44 2079 44 2080 44 2081 44 2082 59 773 2083 2084 44 2085 44 2086 44 2087 44 2088 44 2089 44 2090 44 2091 44 2092 44 2093 44 2094 44 2095 59 773 2096 2097 44 2098 59 773 2099 60 2100 62 2101 44 2102 44 2103 44 2104 44 2105 44 2106 44 2107 44 2108 44 2109 44 2110 44 2111 44 2112 44 2113 59 773 2099 60 2114 62 2115 59 773 2099 60 2116 62 2117 44 2118 44 2119 44 2120 44 2121 59 773 2099 60 2122 62 2123 59 773 2124 60 2125 62 2126 44 2127 59 773 2128 46 2129 2130 59 775 704 2131 61 1500 59 773 657 2132 60 2133 62 2134 61 744 2135 60 62 40 41 59 773 657 2136 60 2116 44 2100 62 2137 61 744 2136 60 62 40 41 59 773 570 2138 44 2139 44 2140 59 773 2141 2142 44 2143 44 2144 44 2145 59 773 2146 2147 44 2148 59 773 2149 2150 44 2151 59 64 2152 773 2128 46 2153 2154 59 331 330 331 777 2000 40 2001 2155 44 2005 2006 44 2007 2008 44 2009 2010 44 2011 2012 44 2013 2014 41 123 818 40 2155 41 59 823 46 2006 61 2006 59 823 46 2008 61 2008 59 823 46 2010 61 2010 59 823 46 2012 61 2012 59 823 46 2014 61 2014 59 125 64 2156 775 865 2157 40 41 123 2158 40 41 59 2159 40 41 59 2160 40 41 59 2161 40 41 59 2162 40 41 59 2163 40 41 59 2164 40 41 59 2046 46 2165 40 2155 46 2166 40 41 41 59 2072 46 2167 40 2168 46 2169 40 41 41 59 2072 46 2170 40 2168 46 2171 40 2172 46 2173 40 362 41 44 2072 44 2174 41 41 59 2072 46 2175 40 2155 46 2176 40 2072 41 41 59 2177 40 41 59 125 775 865 2178 40 41 123 2179 46 2180 40 2037 41 59 125 64 2156 775 865 2181 40 41 123 688 40 2155 46 2182 40 41 46 2183 41 2184 40 41 59 125 775 865 2185 40 41 123 688 40 33 2140 41 123 2140 61 2186 59 2074 46 2187 40 1504 41 59 2072 46 2187 40 1504 41 59 2188 40 41 59 2189 40 41 59 2190 40 41 59 330 330 330 2050 46 2191 40 2155 46 2192 40 41 41 59 2044 46 2193 40 2155 46 2194 40 41 41 59 2044 46 2195 40 2155 46 2196 40 41 41 59 2072 46 2197 40 2155 46 2198 40 41 46 2199 40 41 41 59 2072 46 2200 40 41 46 2201 40 2155 46 2202 40 41 41 59 2074 46 2200 40 41 46 2201 40 2155 46 2203 40 41 41 59 2204 40 41 59 2046 46 2205 40 2155 46 2198 40 41 46 2206 40 41 46 2207 40 41 41 59 2208 40 41 59 570 2209 61 2155 46 2198 40 41 46 2210 40 41 59 2147 46 2211 40 2209 41 59 2148 46 2211 40 33 2209 41 59 688 40 33 2212 46 2213 40 41 41 123 2147 46 2214 40 2215 41 59 2147 46 2216 40 2215 41 59 2148 46 2214 40 2215 41 59 2148 46 2216 40 2215 41 59 2095 46 2214 40 2215 41 59 2095 46 2216 40 2215 41 59 125 688 40 33 2155 46 2217 40 41 41 123 2095 46 2218 40 2219 41 59 2095 46 2220 40 2219 41 59 125 2049 2221 61 2222 46 2223 40 2224 46 2207 40 362 41 41 59 2145 46 2225 40 2221 44 2226 46 2227 41 59 125 125 64 2156 775 865 2228 40 41 123 688 40 2140 41 123 2140 61 2229 59 2230 40 41 59 2231 40 41 59 2232 40 41 59 330 330 330 125 125 331 330 331 777 865 2233 40 570 2234 41 123 688 40 2234 307 33 2155 46 2235 40 41 46 2236 41 123 2185 40 41 59 125 630 123 2228 40 41 59 125 2140 61 2234 59 2155 46 2235 40 41 46 2233 40 2234 41 59 125 777 865 2237 40 2238 2239 44 2073 2240 44 2128 46 2153 2154 41 123 823 46 2154 61 2154 59 570 2241 61 2155 46 2237 40 2239 44 2240 41 59 688 40 33 2241 41 123 744 2242 40 41 46 2243 40 2244 46 2245 40 362 41 41 46 2246 40 2244 46 2245 40 362 41 41 46 2247 40 362 41 46 2248 40 40 41 45 62 123 2006 46 2249 40 2006 46 2250 40 41 41 59 2006 46 2251 40 2252 46 587 44 2253 46 587 44 2254 46 587 41 59 125 41 46 2255 40 41 59 125 688 40 2239 323 2238 46 2256 41 123 2030 46 2257 40 362 41 59 2030 46 2258 40 2259 46 2260 40 362 44 2259 46 2260 40 362 41 41 41 59 125 630 123 2030 46 2261 40 362 41 59 2030 46 2262 40 2263 46 2264 40 362 44 2263 46 2264 40 362 41 41 41 59 125 2265 40 41 59 688 40 33 2155 46 2266 40 41 46 2267 40 41 307 2155 46 2266 40 41 46 2268 40 41 340 2269 41 2270 40 41 59 125 330 777 865 2271 40 41 123 330 688 40 2155 46 2272 40 41 46 2273 40 41 46 2274 40 41 46 2275 40 41 307 33 2155 46 2276 46 2274 40 41 41 123 2155 46 2272 40 41 46 2277 40 41 59 125 125 777 865 2278 40 2128 46 2129 2130 41 123 823 46 2130 61 2130 59 125 331 330 331 773 865 2279 40 41 123 688 40 2155 46 2280 40 41 46 2281 40 41 41 123 688 40 2155 46 2280 40 41 46 2282 40 41 41 123 2283 2284 61 2155 46 2285 40 41 59 688 40 33 2286 46 2287 40 41 41 123 2010 46 2279 40 40 41 45 62 2155 46 2279 40 2284 44 2010 58 58 2288 41 41 46 2289 40 2284 41 59 125 630 123 2098 46 2290 40 41 59 2155 46 2279 40 2284 44 40 41 45 62 123 125 41 59 125 125 630 123 2291 40 41 59 125 125 125 773 865 2292 40 41 123 2116 2293 61 2294 40 41 59 688 40 2293 340 2295 41 744 2296 40 41 46 2297 40 2293 41 46 2298 40 362 41 46 2299 40 40 41 45 62 2006 46 2300 40 2301 46 587 44 2302 46 587 44 2303 46 587 44 2304 46 587 41 41 46 2305 40 41 59 125 773 2116 2306 40 41 123 2114 2307 61 2155 46 2308 40 41 46 2309 40 2310 41 59 2116 2311 61 2312 59 688 40 2307 340 2312 41 123 2311 61 2313 46 2314 40 362 44 2014 46 2315 40 2307 46 2316 40 2155 46 2308 40 41 46 2317 40 41 41 41 41 59 125 630 688 40 2155 46 2308 40 41 46 2318 40 41 46 2319 40 41 41 2311 61 2320 46 2321 40 362 41 59 792 2311 59 125 773 865 2322 40 41 123 2016 46 2323 40 2015 46 2324 46 2325 41 59 2027 46 2326 40 2327 41 59 2027 46 2328 40 2327 41 59 2027 46 2329 40 2330 41 59 2028 46 2326 40 2327 41 59 2028 46 2328 40 2327 41 59 2028 46 2329 40 2330 41 59 2147 46 2331 40 2332 41 59 2148 46 2331 40 2332 41 59 2095 46 2326 40 2327 41 59 2095 46 2328 40 2327 41 59 2021 46 2326 40 2327 41 59 2021 46 2328 40 2327 41 59 2093 46 2326 40 2327 41 59 2093 46 2328 40 2327 41 59 2155 46 2322 40 40 41 45 62 123 688 40 33 2333 46 2334 40 41 41 123 2116 2335 61 362 59 2116 2336 61 2155 46 2337 40 41 63 2338 46 2339 40 362 44 2155 46 2340 40 41 41 58 362 59 2116 2341 61 2338 46 2339 40 362 44 2155 46 2342 40 41 44 2336 44 2155 46 2343 40 41 44 2155 46 2344 40 41 44 2155 46 2345 40 41 41 59 744 2346 40 41 46 2347 40 2338 46 2339 40 362 41 41 46 2348 40 2341 41 46 2349 40 2335 41 46 2350 40 41 59 125 2048 46 2351 40 2155 46 2352 40 41 41 59 2048 46 2353 40 2354 40 41 41 59 125 41 59 2072 46 2355 40 2332 41 59 2134 46 2356 40 2357 45 62 123 2357 46 2331 40 2332 41 59 2357 46 2358 40 2327 41 59 125 41 59 2359 40 41 59 688 40 2036 46 2360 40 41 46 2361 40 41 41 123 2082 46 2326 40 2327 41 59 125 2046 46 2362 40 2155 46 2363 40 41 46 2364 40 41 46 2365 40 41 41 59 688 40 33 2366 46 2367 40 41 41 123 2116 2368 61 362 59 744 2369 40 41 46 2370 40 2371 46 2365 40 362 41 41 46 2372 40 2371 46 2365 40 362 41 41 46 2373 40 40 41 45 62 2374 46 2375 40 362 41 41 46 2376 40 41 46 2377 40 2368 41 46 2378 40 41 59 125 330 330 2020 46 2326 40 2332 41 59 2048 46 2326 40 2332 41 59 2044 46 2326 40 2332 41 59 2076 46 2326 40 2332 41 59 2046 46 2326 40 2332 41 59 2029 46 2326 40 2332 41 59 125 773 865 2379 40 41 123 2017 46 2380 40 2085 44 1502 41 59 2116 2381 61 362 59 2116 2382 61 362 59 2088 46 2383 40 41 46 2384 40 2381 41 59 2088 46 2383 40 41 46 2385 40 2382 41 59 2089 46 2383 40 41 46 2384 40 2381 41 59 2089 46 2383 40 41 46 2385 40 2382 41 59 2090 46 2383 40 41 46 2384 40 2381 41 59 2090 46 2383 40 41 46 2385 40 2382 41 59 2091 46 2383 40 41 46 2384 40 2381 41 59 2091 46 2383 40 41 46 2385 40 2382 41 59 2092 46 2383 40 41 46 2384 40 2381 41 59 2092 46 2383 40 41 46 2385 40 2382 41 59 2094 46 2383 40 41 46 2384 40 2381 41 59 2094 46 2383 40 41 46 2385 40 2382 41 59 2017 46 2380 40 2086 44 1501 41 59 2032 46 2386 40 2387 41 59 2083 46 2388 40 2032 44 744 2389 40 1503 44 45 1503 44 1500 44 1500 41 41 59 2058 46 2383 40 41 46 2385 40 362 41 59 2061 46 2383 40 41 46 2385 40 362 41 59 2150 46 2390 40 2116 46 2391 40 362 44 2392 46 2393 46 2394 40 41 44 362 41 41 59 2151 46 2390 40 2116 46 2391 40 362 44 2392 46 2393 46 2394 40 41 44 362 41 41 59 2062 46 2383 40 41 46 2385 40 362 41 59 125 773 865 2395 40 2071 2396 41 123 688 40 2396 46 2397 40 41 46 2398 40 41 46 2399 40 2400 46 2401 41 307 33 2138 41 123 2138 61 2402 59 2403 46 2404 40 2405 58 58 2406 44 1504 44 2407 46 2408 41 59 125 125 773 865 2409 40 2071 2396 41 123 688 40 2396 46 2410 40 41 46 2411 40 41 46 2412 40 2413 46 2414 41 307 40 40 2415 41 2396 41 46 2416 40 41 46 2417 40 41 307 33 2139 41 123 2139 61 2418 59 2419 46 2420 40 40 41 45 62 2421 46 2422 40 2006 41 44 1504 44 2423 46 2424 41 59 125 125 773 865 2425 40 2071 2396 44 570 2426 41 123 2116 2427 61 2396 46 2428 40 2426 41 59 2429 46 2430 40 2427 44 2137 41 59 125 775 865 2431 40 41 123 330 330 2074 46 2432 40 2433 41 59 2071 2396 61 2072 46 2434 40 41 46 2435 40 41 59 688 40 2396 340 2433 41 123 330 688 40 2396 46 2436 40 41 46 2437 40 41 41 123 2155 46 2438 46 2439 40 41 59 2440 40 41 59 688 40 2154 340 2433 41 123 2154 46 2441 40 2396 46 2442 40 41 44 2396 46 2436 40 41 41 59 125 792 59 125 2395 40 2396 41 59 2409 40 2396 41 59 2425 40 2396 44 2155 46 2443 40 41 46 2444 40 41 41 59 2078 46 2445 40 2396 46 2446 40 41 41 59 2078 46 2447 40 2396 46 2446 40 41 41 59 2081 46 2445 40 33 2396 46 2446 40 41 41 59 688 40 2396 46 2446 40 41 41 123 657 2132 60 2073 62 2448 61 2396 46 2449 40 41 59 2074 46 2450 40 2451 46 2452 40 2448 41 41 59 2155 46 2453 40 2396 41 59 125 630 123 2073 2454 61 2396 46 2455 40 41 59 688 40 2454 340 2433 41 2042 46 2456 40 2454 46 2457 40 41 41 59 2155 46 2458 40 2396 41 59 2155 46 2459 40 2155 46 2443 40 41 46 2460 40 41 41 59 125 125 630 123 2078 46 2461 40 2462 41 59 2078 46 2463 40 2462 41 59 2081 46 2461 40 2464 41 59 2042 46 2465 40 362 41 59 125 2074 46 2432 40 2126 41 59 2466 40 41 59 125 773 865 2467 40 41 123 2155 46 2468 40 2074 46 2469 40 41 46 2470 40 41 41 59 125 331 330 331 775 865 2471 40 41 123 688 40 2130 340 2472 41 2130 46 2471 40 41 59 125 331 330 331 773 865 2473 40 41 123 2051 46 2474 40 41 46 2475 40 2476 40 40 41 45 62 2477 46 2478 40 2155 46 2479 46 2480 40 41 41 44 2155 46 2479 41 41 59 2065 46 2474 40 41 46 2475 40 2476 40 40 41 45 62 2477 46 2478 40 2155 46 2479 46 2480 40 41 41 44 2155 46 2479 41 41 59 2066 46 2474 40 41 46 2475 40 2155 46 2481 41 59 2056 46 2474 40 41 46 2475 40 2155 46 2482 41 59 2055 46 2483 40 41 46 2475 40 2051 46 2484 40 41 41 59 2068 46 2474 40 41 46 2475 40 2155 46 2479 41 59 2052 46 2474 40 41 46 2475 40 2476 40 40 41 45 62 2477 46 2485 40 2155 46 2479 46 2480 40 41 44 362 41 44 2155 46 2479 41 41 59 2053 46 2474 40 41 46 2475 40 2476 40 2155 46 2053 58 58 2480 44 2155 46 2479 44 2155 46 2053 41 41 59 2037 46 2474 40 41 46 2486 40 2155 46 2487 41 59 2038 46 2474 40 41 46 2486 40 2155 46 2488 41 59 2034 46 2474 40 41 46 2486 40 2155 46 2489 41 59 2036 46 2474 40 41 46 2486 40 2155 46 2490 41 59 2035 46 2474 40 41 46 2486 40 2155 46 2491 41 59 2039 46 2474 40 41 46 2486 40 2155 46 2492 41 59 2039 46 2493 40 41 46 2475 40 2155 46 2494 41 59 2048 46 2474 40 41 46 2475 40 2155 46 2495 41 59 2044 46 2496 40 41 46 2475 40 2155 46 2497 40 41 46 2498 40 41 41 59 2040 46 2474 40 41 46 2486 40 2155 46 2499 41 59 2063 46 2474 40 41 46 2475 40 2155 46 2063 41 59 2059 46 2474 40 41 46 2475 40 2155 46 2500 41 59 2060 46 2474 40 41 46 2475 40 2155 46 2501 41 59 2057 46 2474 40 41 46 2475 40 2155 46 2502 41 59 2059 46 2503 40 41 46 2475 40 2155 46 2504 41 59 2060 46 2503 40 41 46 2475 40 2155 46 2504 41 59 2057 46 2503 40 41 46 2475 40 2155 46 2504 41 59 330 2037 46 2505 40 41 46 2475 40 2155 46 2506 41 59 2038 46 2505 40 41 46 2475 40 2155 46 2507 41 59 2034 46 2505 40 41 46 2475 40 2155 46 2508 41 59 2036 46 2505 40 41 46 2475 40 2155 46 2509 41 59 2039 46 2505 40 41 46 2475 40 2155 46 2510 41 59 2040 46 2505 40 41 46 2475 40 2155 46 2511 41 59 330 2084 46 2503 40 41 46 2475 40 2155 46 2497 40 41 46 2512 40 41 46 2513 40 41 46 2514 40 2155 46 2515 41 41 59 2084 46 2516 40 41 46 2475 40 2155 46 2497 40 41 46 2512 40 41 46 2513 40 41 46 2514 40 2155 46 2515 41 41 59 2054 46 2474 40 41 46 2475 40 2155 46 2517 41 59 2087 46 2503 40 41 46 2475 40 2155 46 2497 40 41 46 2512 40 41 46 2514 40 2155 46 2515 41 41 59 2087 46 2516 40 41 46 2475 40 2155 46 2497 40 41 46 2512 40 41 46 2514 40 2155 46 2515 41 41 59 2030 46 2518 40 41 46 2475 40 2155 46 2519 41 59 2029 46 2518 40 41 46 2475 40 2155 46 2520 41 59 330 2072 46 2516 40 41 46 2475 40 2072 46 2503 40 41 41 59 2022 46 2516 40 41 46 2475 40 2022 46 2503 40 41 41 59 2074 46 2483 40 41 46 2475 40 2072 46 2484 40 41 41 59 2074 46 2516 40 41 46 2475 40 2074 46 2503 40 41 41 59 2081 46 2516 40 41 46 2475 40 2081 46 2503 40 41 41 59 125 773 865 2521 40 41 123 2051 46 2522 40 41 46 2523 40 41 59 2065 46 2522 40 41 46 2523 40 41 59 2066 46 2522 40 41 46 2523 40 41 59 2056 46 2522 40 41 46 2523 40 41 59 2068 46 2522 40 41 46 2523 40 41 59 2052 46 2522 40 41 46 2523 40 41 59 2053 46 2522 40 41 46 2523 40 41 59 2037 46 2522 40 41 46 2524 40 2155 46 2525 41 59 2038 46 2522 40 41 46 2524 40 2155 46 2526 41 59 2034 46 2522 40 41 46 2524 40 2155 46 2527 41 59 2036 46 2522 40 41 46 2524 40 2155 46 2528 41 59 2035 46 2522 40 41 46 2524 40 2155 46 2529 41 59 2055 46 2530 40 41 46 2523 40 41 59 2039 46 2522 40 41 46 2524 40 2155 46 2531 41 59 2039 46 2532 40 41 46 2524 40 2155 46 2531 41 59 2048 46 2522 40 41 46 2523 40 41 59 2044 46 2533 40 41 46 2523 40 41 59 2040 46 2522 40 41 46 2524 40 2155 46 2534 41 59 2063 46 2522 40 41 46 2523 40 41 59 2059 46 2522 40 41 46 2523 40 41 59 2060 46 2522 40 41 46 2523 40 41 59 2057 46 2522 40 41 46 2523 40 41 59 2059 46 2535 40 41 46 2523 40 41 59 2060 46 2535 40 41 46 2523 40 41 59 2057 46 2535 40 41 46 2523 40 41 59 330 2037 46 2536 40 41 46 2523 40 41 59 2038 46 2536 40 41 46 2523 40 41 59 2034 46 2536 40 41 46 2523 40 41 59 2036 46 2536 40 41 46 2523 40 41 59 2039 46 2536 40 41 46 2523 40 41 59 2040 46 2536 40 41 46 2523 40 41 59 330 2084 46 2535 40 41 46 2523 40 41 59 2084 46 2537 40 41 46 2523 40 41 59 2054 46 2522 40 41 46 2523 40 41 59 2087 46 2535 40 41 46 2523 40 41 59 2087 46 2537 40 41 46 2523 40 41 59 2030 46 2538 40 41 46 2523 40 41 59 2029 46 2538 40 41 46 2523 40 41 59 330 2022 46 2537 40 41 46 2523 40 41 59 2072 46 2537 40 41 46 2523 40 41 59 2074 46 2537 40 41 46 2523 40 41 59 2074 46 2530 40 41 46 2523 40 41 59 2081 46 2537 40 41 46 2523 40 41 59 125 773 865 2539 40 41 123 2097 61 2540 46 2541 40 2155 46 2542 44 2542 45 62 123 330 330 330 330 330 330 2054 46 2543 40 2542 41 59 2054 46 2544 40 2542 41 59 125 41 59 2098 61 2540 46 2541 40 2155 46 2545 40 41 46 2546 40 41 44 2046 58 58 2547 41 59 125 773 865 2548 40 41 123 2097 46 2549 40 41 59 2098 46 2549 40 41 59 125 773 865 2550 40 41 123 2101 61 40 2551 44 2552 44 2553 41 45 62 123 2155 46 2554 40 2552 44 2553 41 59 2037 46 2555 40 2155 46 2556 46 2557 40 41 41 59 125 59 2102 61 40 2551 44 2552 44 2553 41 45 62 123 2155 46 2558 40 2552 44 2553 41 59 2038 46 2559 40 2155 46 2560 46 2561 40 41 41 59 125 59 2105 61 40 2551 44 2552 44 2553 41 45 62 123 2155 46 2562 40 2552 44 2553 41 59 2034 46 2563 40 2155 46 2564 46 2565 40 41 41 59 125 59 2107 61 40 2551 44 2552 44 2553 41 45 62 123 2155 46 2566 40 2552 44 2553 41 59 2035 46 2567 40 2155 46 2568 46 2569 40 41 41 59 125 59 2103 61 40 2551 44 2552 44 2553 41 45 62 123 2155 46 2570 40 2552 44 2553 41 59 2039 46 2571 40 2155 46 2572 46 2573 40 41 41 59 125 59 2104 61 40 2551 44 2552 44 2553 41 45 62 123 2155 46 2574 40 2552 44 2553 41 59 2040 46 2575 40 2155 46 2576 46 2577 40 41 41 59 125 59 2113 61 40 2551 44 2552 44 2553 41 45 62 123 2155 46 2578 40 2552 44 2553 41 59 2036 46 2579 40 2155 46 2580 46 2581 40 41 41 59 125 59 2118 61 40 2551 44 2552 44 2553 41 45 62 123 688 40 2553 340 2582 41 2583 46 2584 40 40 41 45 62 744 2585 40 41 46 2586 40 2587 46 2588 40 362 44 2155 46 2589 46 2588 40 41 41 41 46 2590 40 41 44 1503 44 2591 46 2592 41 59 125 59 2127 61 2593 45 62 2431 40 41 59 2126 61 2593 45 62 2467 40 41 59 2117 61 40 2594 44 2552 44 2553 41 45 62 123 2034 46 2595 40 41 59 2035 46 2595 40 41 59 2039 46 2595 40 41 59 2036 46 2595 40 41 59 125 59 2106 61 40 2551 44 2552 44 2553 41 45 62 123 688 40 2596 46 2597 40 41 41 123 2471 40 41 59 125 630 688 40 2553 41 123 330 2116 2598 61 362 59 688 40 2599 46 2600 40 2598 41 41 123 2601 46 2602 40 40 41 45 62 744 2603 40 41 46 2604 40 2605 46 2606 40 362 41 41 46 2607 40 2605 46 2606 40 362 41 41 46 2608 40 2598 41 46 2609 40 362 41 46 2610 40 40 41 45 62 123 2601 46 2602 40 40 41 45 62 2006 46 2611 40 2612 46 587 44 2613 46 587 44 2614 46 587 41 44 1503 44 2615 46 2616 41 59 2471 40 41 59 125 41 46 2271 40 823 58 58 2471 41 46 2617 40 41 44 1501 41 59 125 630 123 2471 40 41 59 125 125 125 59 2123 61 40 2594 44 2552 44 2553 41 45 62 2618 40 41 59 2108 61 40 2594 44 2552 44 2553 41 45 62 123 688 40 2553 41 123 2619 2620 61 744 2619 40 41 46 2621 40 2622 46 2623 40 362 41 41 46 2624 40 2622 46 2623 40 362 44 2012 46 2625 40 2155 46 2626 40 41 46 2627 40 41 46 2623 40 41 41 41 41 46 2628 40 41 59 2620 46 2629 40 41 59 125 125 59 2121 61 40 2594 44 2552 44 2553 41 45 62 123 688 40 33 2553 46 2630 40 362 41 41 123 2049 2631 61 2632 46 2633 40 2155 46 2634 40 2553 41 41 59 2144 46 2635 40 2631 41 59 125 630 123 2144 46 2636 40 2637 41 59 125 125 59 2120 61 40 2594 44 2552 44 2553 41 45 62 123 688 40 33 2553 46 2638 40 362 41 307 2639 46 2640 40 2155 46 2641 46 2642 40 41 41 41 123 2049 2643 61 2644 46 2645 40 2646 46 2642 40 362 41 41 59 2143 46 2647 40 2643 41 59 125 630 123 2143 46 2648 40 41 59 125 125 59 2115 61 40 2594 44 2552 44 2553 41 45 62 123 688 40 33 2553 46 2649 40 41 46 2650 40 362 41 41 123 657 574 91 93 2651 61 2652 46 2653 40 2654 40 41 41 46 2655 40 1503 44 1503 41 330 46 2656 40 2657 46 2658 41 46 2659 40 41 46 2660 40 41 59 2661 2662 61 744 2661 40 744 2663 40 2651 41 41 59 2076 46 2664 40 2662 41 59 125 125 59 2119 61 40 2594 44 2552 44 2553 41 45 62 123 688 40 2142 340 2665 41 123 2116 2666 59 688 40 2553 46 2667 40 362 41 41 123 688 40 2155 46 2668 40 41 41 123 2666 61 2669 46 2670 40 362 41 59 125 630 123 2666 61 2671 46 2672 40 362 41 59 125 657 2049 2673 61 2674 46 2675 40 2666 41 59 2142 46 2676 40 2673 41 59 125 630 688 40 2553 46 2677 40 362 41 41 123 688 40 2155 46 2678 40 41 41 123 2666 61 2679 46 2680 40 362 44 2553 46 2681 40 1501 41 41 59 125 630 123 2666 61 2682 46 2683 40 362 44 2553 46 2684 40 1501 41 41 59 125 657 2049 2685 61 2686 46 2687 40 2666 41 59 2142 46 2688 40 2685 41 59 125 630 688 40 33 2553 46 2667 40 362 41 41 123 688 40 2155 46 2689 40 41 41 123 2666 61 2690 46 2691 40 362 44 2553 41 59 125 630 123 2666 61 2692 46 2693 40 362 44 2553 41 59 125 2049 2694 61 2695 46 2696 40 2666 41 59 2142 46 2697 40 2694 41 59 125 125 125 59 2109 61 40 2594 44 2552 44 2553 41 45 62 123 688 40 2553 307 2148 46 2234 40 41 41 2148 46 2698 40 2699 41 59 688 40 33 2553 307 33 2148 46 2234 40 41 41 2148 46 2698 40 2700 41 59 2701 40 2553 41 59 125 59 2110 61 40 2594 44 2552 44 2553 41 45 62 123 688 40 2553 307 2147 46 2234 40 41 41 2147 46 2702 40 2703 41 59 688 40 33 2553 307 33 2147 46 2234 40 41 41 2147 46 2702 40 2704 41 59 2705 40 33 2553 41 59 125 59 2111 61 40 2594 44 2552 44 2553 41 45 62 123 688 40 2706 46 2707 40 41 41 123 2147 46 2708 40 2553 41 59 2148 46 2708 40 2553 41 59 688 40 2155 46 2709 40 41 41 123 2095 46 2708 40 2553 41 59 2095 46 2710 40 2553 41 59 125 125 125 59 2112 61 40 40 2594 44 2552 44 2553 41 45 62 123 688 40 2553 41 123 330 2064 46 2711 40 2712 46 2713 40 41 41 59 2040 46 2714 40 2715 41 59 125 630 123 330 2064 46 2716 40 362 41 59 2040 46 2717 40 2718 41 59 125 125 41 59 125 773 865 2719 40 570 2720 41 123 2155 46 2719 40 2720 41 59 688 40 2721 46 2722 40 41 41 123 2059 46 2723 40 2720 63 1501 58 1500 41 59 2060 46 2723 40 2720 63 1500 58 1501 41 59 125 125 775 865 2724 40 41 123 704 2725 61 2155 46 2726 46 2727 40 41 59 688 40 2725 62 45 1501 41 123 570 2728 61 2725 323 1501 307 33 2155 46 2729 40 41 46 2396 46 2730 40 2731 41 59 2080 46 2732 40 2728 41 59 2032 46 2732 40 2728 41 59 570 2733 61 33 2155 46 2729 40 41 46 2734 40 41 46 2727 40 41 309 33 2728 59 2735 40 2733 41 59 125 125 773 865 2736 40 41 123 2155 46 2737 46 2738 40 2117 41 59 2155 46 2739 46 2738 40 2123 41 59 2155 46 2740 46 2738 40 2119 41 59 2155 46 2741 46 2738 40 2120 41 59 2155 46 2742 40 41 46 2743 46 2738 40 2115 41 59 2155 46 2744 46 2738 40 2111 41 59 2155 46 2745 46 2738 40 2121 41 59 2155 46 2746 46 2738 40 2112 41 59 2147 46 2747 40 41 46 2738 40 2109 41 59 2148 46 2747 40 41 46 2738 40 2110 41 59 330 2037 46 2748 40 41 46 2738 40 2101 41 59 2038 46 2748 40 41 46 2738 40 2102 41 59 2034 46 2748 40 41 46 2738 40 2105 41 59 2036 46 2748 40 41 46 2738 40 2113 41 59 2035 46 2748 40 41 46 2738 40 2107 41 59 2039 46 2748 40 41 46 2738 40 2103 41 59 2040 46 2748 40 41 46 2738 40 2104 41 59 330 2155 46 2742 40 41 46 2749 40 41 46 2738 40 2108 41 59 330 2155 46 2750 46 2738 40 2118 41 59 330 2155 46 2751 46 2738 40 2106 41 59 330 2072 46 2752 40 2127 41 59 2074 46 2752 40 2126 41 59 125 773 865 2753 40 41 123 2155 46 2754 46 2755 40 2117 41 59 2155 46 2756 46 2755 40 2123 41 59 2155 46 2757 46 2755 40 2119 41 59 2155 46 2758 46 2755 40 2120 41 59 2155 46 2759 40 41 46 2760 46 2755 40 2115 41 59 2155 46 2761 46 2755 40 2111 41 59 2155 46 2762 46 2755 40 2121 41 59 2147 46 2763 40 41 46 2755 40 2109 41 59 2148 46 2763 40 41 46 2755 40 2110 41 59 2155 46 2764 46 2755 40 2112 41 59 330 2037 46 2765 40 41 46 2755 40 2101 41 59 2038 46 2765 40 41 46 2755 40 2102 41 59 2034 46 2765 40 41 46 2755 40 2105 41 59 2036 46 2765 40 41 46 2755 40 2113 41 59 2035 46 2765 40 41 46 2755 40 2107 41 59 2039 46 2765 40 41 46 2755 40 2103 41 59 2040 46 2765 40 41 46 2755 40 2104 41 59 330 2155 46 2759 40 41 46 2766 40 41 46 2755 40 2108 41 59 330 2155 46 2767 46 2755 40 2118 41 59 330 2155 46 2768 46 2755 40 2106 41 59 330 2072 46 2769 40 2770 41 59 2074 46 2769 40 2770 41 59 125 331 330 331 773 865 2771 40 41 123 2016 61 2772 46 2773 40 41 59 2774 46 2775 40 41 46 2776 40 2016 41 59 125 773 865 2777 40 41 123 2018 61 744 2017 40 41 59 2018 46 2778 40 41 46 2779 40 362 41 59 2018 46 2780 40 744 2781 40 1503 44 1503 44 45 1501 44 1503 41 41 59 2018 46 2782 40 1502 41 59 2018 46 2783 40 1502 41 59 2784 46 2785 40 2018 41 59 2016 46 2786 40 2018 41 59 125 773 865 2787 40 41 123 2022 61 2788 40 2018 44 2131 44 1501 44 2789 46 2790 40 362 41 41 59 2017 46 2791 40 2022 44 1502 41 59 2083 2792 61 744 2083 40 41 59 2792 46 2793 40 2794 46 2795 41 59 2792 46 2796 40 1503 41 59 2792 46 2797 40 744 2798 40 1502 44 1500 44 1503 44 1500 41 41 59 657 2799 60 2077 44 2049 44 2070 60 2071 356 2800 61 2801 40 2789 46 2790 40 362 41 44 2789 46 2790 40 362 41 41 59 657 2799 60 2077 44 2049 44 2070 60 2073 356 2802 61 2801 40 2789 46 2790 40 362 41 44 2789 46 2790 40 362 41 41 59 2078 61 2802 46 2803 59 2792 46 2804 40 41 46 2805 40 2800 46 2803 44 2078 41 59 2017 46 2806 40 2792 44 2131 41 59 2017 46 2791 40 2792 44 1502 41 59 2017 46 2807 40 2792 44 744 2798 40 2808 46 2809 44 1500 44 1500 44 1500 41 41 59 2018 46 2804 40 41 46 2810 40 2792 41 59 2800 46 2803 46 2811 40 1504 41 59 2072 61 2800 46 2812 59 2072 46 2811 40 2800 46 2803 46 2813 40 41 41 59 2072 46 2814 40 2800 46 2803 46 2813 40 41 41 59 2134 46 2810 40 2800 46 2803 41 59 330 2074 61 2802 46 2812 59 2074 46 2815 40 2800 46 2803 46 2813 40 41 47 1502 41 59 2134 46 2810 40 2078 41 59 2074 46 2816 40 744 2817 60 62 40 41 123 64 2156 777 2116 2818 40 2073 2240 41 123 792 2240 46 2819 40 41 59 125 64 2156 777 2073 2820 40 2116 2821 41 123 792 2822 59 125 125 41 59 657 2799 60 2049 44 2041 44 2077 62 2823 61 2824 40 2018 44 2131 44 2789 46 2790 40 362 41 44 362 44 1502 41 59 2042 61 2823 46 2825 59 2081 61 2823 46 2812 59 2081 46 2826 40 2827 41 59 2134 46 2810 40 2081 41 59 2792 46 2804 40 41 46 2810 40 2081 41 59 125 773 865 2828 40 41 123 2023 61 2829 40 2018 44 349 2131 44 1502 44 2830 46 2831 40 362 41 44 2832 46 2833 41 59 2017 46 2834 40 2023 44 1502 41 59 2835 40 41 59 2836 40 41 59 125 773 865 2837 40 41 123 2021 61 2838 40 2018 44 349 2131 44 1501 44 2839 46 2840 40 362 41 44 2841 46 2842 41 59 2093 61 744 2083 40 41 59 2093 46 2843 40 1503 41 59 2017 46 2844 40 2093 44 2131 41 59 2017 46 2845 40 2093 44 2017 46 2846 41 59 2017 46 2847 40 2093 44 1500 41 59 2017 46 2848 40 2093 44 2849 46 2850 41 59 2017 46 2851 40 2093 44 744 2852 40 2841 46 2853 44 1500 44 1500 44 1500 41 41 59 2018 46 2854 40 41 46 2855 40 2093 41 59 2856 60 2026 44 2083 62 2857 61 2858 46 2859 40 2006 44 2008 41 59 2095 61 2857 46 2860 59 2095 46 2861 40 2862 41 59 2095 46 2863 40 2862 41 59 2077 2864 61 2865 40 41 59 2864 46 2866 40 1504 41 59 2093 46 2854 40 41 46 2867 40 2868 40 41 44 2864 44 2095 41 59 2856 60 2031 44 2031 62 2869 61 2870 40 2018 44 349 2131 44 2839 46 2840 40 362 41 44 2839 46 2840 40 362 41 41 59 2027 61 40 2026 41 2869 46 2871 59 2027 46 2872 40 1504 41 59 2134 46 2855 40 2027 41 59 2027 46 2873 40 41 46 2874 40 2155 46 2875 41 59 2028 61 40 2026 41 2869 46 2860 59 2028 46 2872 40 1504 41 59 2134 46 2855 40 2028 41 59 2028 46 2876 40 2862 41 59 2028 46 2877 40 2878 45 62 123 2471 40 41 59 2155 46 2879 40 41 46 2880 40 41 59 125 41 59 2027 46 2877 40 2878 45 62 123 688 40 2155 46 2881 40 41 41 123 688 40 2882 46 2883 40 41 41 2884 40 41 59 630 2322 40 41 59 125 125 41 59 125 775 865 2885 40 41 123 2021 46 2886 40 2887 41 59 2021 46 2888 40 2887 41 59 2027 46 2886 40 2887 41 59 2027 46 2888 40 2887 41 59 2028 46 2886 40 2887 41 59 2028 46 2888 40 2887 41 59 2093 46 2886 40 2887 41 59 2093 46 2888 40 2887 41 59 125 773 865 2889 40 41 123 570 2890 61 2155 46 2891 40 41 46 2890 40 41 59 570 2892 61 2155 46 2891 40 41 46 2892 40 41 59 688 40 33 2890 307 33 2892 41 123 2116 2893 61 2306 40 41 59 688 40 2893 340 2894 41 123 744 2895 40 41 46 2896 40 2893 41 46 2897 40 2898 46 2899 40 362 41 41 46 2900 40 40 41 45 62 123 2147 46 2901 40 2902 41 59 2322 40 41 59 125 41 46 2903 40 41 59 125 630 123 2322 40 41 59 125 125 630 123 2322 40 41 59 125 125 773 2077 2904 40 41 123 2905 60 2083 44 2141 44 2049 62 2906 61 2907 40 2908 46 2909 40 362 41 41 59 2144 61 2906 46 2910 59 2040 61 2144 46 2911 40 41 59 2064 61 2906 46 2912 59 330 2064 46 2913 40 362 41 59 2914 60 2049 44 2077 62 2915 61 2916 40 2906 46 2917 44 2155 46 2918 40 41 41 59 2077 2919 61 2915 46 2910 59 2063 61 2915 46 2917 59 2919 46 2920 40 1504 41 59 2134 46 2921 40 2040 41 59 2134 46 2921 40 2064 41 59 792 2919 59 125 773 865 2922 40 41 123 330 2020 61 2923 40 2018 44 2131 44 1502 44 2924 46 2925 40 362 41 44 2926 46 2927 41 59 2020 46 2928 40 41 46 2929 40 362 41 59 2017 46 2930 40 2020 44 1502 41 59 2020 46 2931 40 2932 41 59 2048 61 2933 40 2018 44 2131 44 2924 46 2925 40 362 41 44 2926 46 2934 41 59 2048 46 2931 40 2932 41 59 2076 61 744 2075 40 41 59 2076 46 2931 40 2932 41 59 2076 46 2935 40 1504 41 59 2076 46 2936 40 1504 41 59 2076 46 2928 40 41 46 2929 40 362 41 59 2937 46 2938 40 2076 44 744 2937 40 2924 46 2925 40 362 41 41 41 59 2076 46 2939 40 2940 45 62 2941 46 2942 40 40 41 45 62 2943 46 2944 40 40 41 45 62 744 2945 40 2946 40 41 41 46 2947 40 41 44 1504 44 2948 46 2949 41 41 41 59 2017 46 2950 40 2076 44 2131 41 59 2017 46 2951 40 2076 44 1501 41 59 2017 46 2952 40 2076 44 1502 41 59 2017 46 2953 40 2076 44 2954 46 2955 41 59 2017 46 2956 40 2076 44 744 2957 40 2926 46 2958 45 1502 44 1500 44 1500 44 1502 41 41 59 2018 46 2959 40 41 46 2929 40 2076 41 59 2044 61 2960 40 2018 44 349 2131 44 2924 46 2925 40 362 41 41 59 2044 46 2931 40 2932 41 59 2046 61 2961 40 2018 44 349 2131 44 2924 46 2925 40 362 41 41 59 2046 46 2931 40 2932 41 59 2084 61 744 2083 40 41 59 2084 46 2931 40 2932 41 59 2084 46 2962 40 2932 41 59 2084 46 2963 40 1502 41 59 2031 2964 61 744 2026 40 2924 46 2925 40 362 41 41 59 2964 46 2965 40 2966 41 59 2964 46 2928 40 41 46 2929 40 362 41 59 2964 46 2967 40 2940 45 62 2155 46 2968 40 41 41 59 2049 2969 61 744 2970 40 2924 46 2925 40 362 41 41 59 2969 46 2971 40 744 2957 40 1502 44 1500 44 1500 44 1500 41 41 59 2031 2972 61 744 2026 40 2924 46 2925 40 362 41 41 59 2972 46 2965 40 2932 41 59 2972 46 2967 40 2940 45 62 2941 46 2942 40 823 58 58 2973 41 41 59 2025 61 744 2024 40 2932 41 59 2054 61 744 2970 40 41 59 2054 46 2971 40 744 2957 40 1502 44 1500 44 1500 44 1500 41 41 59 2084 46 2959 40 41 46 2974 40 2964 44 2969 44 2972 44 2025 44 2054 41 59 2017 46 2950 40 2084 44 349 2131 41 59 2017 46 2930 40 2084 44 1502 41 59 2017 46 2956 40 2084 44 744 2957 40 1502 44 1500 44 1500 44 1500 41 41 59 2018 46 2959 40 41 46 2929 40 2084 41 59 2087 61 744 2083 40 41 59 2087 46 2963 40 1502 41 59 2017 46 2950 40 2087 44 2131 41 59 2017 46 2930 40 2087 44 1502 41 59 2017 46 2956 40 2087 44 744 2957 40 1502 44 1503 44 1500 44 1500 41 41 59 2018 46 2959 40 41 46 2929 40 2087 41 59 2030 61 744 2026 40 41 59 2030 46 2967 40 2940 45 62 2279 40 41 41 59 2030 46 2975 40 1503 41 59 2030 46 2971 40 744 2957 40 1500 44 1503 44 1500 44 1503 41 41 59 2087 46 2959 40 41 46 2929 40 2030 41 59 2087 46 2976 40 41 46 2977 40 40 2978 44 2979 44 2980 41 45 62 123 688 40 2980 41 123 2084 46 2959 40 41 46 2981 40 2029 41 59 2087 46 2959 40 41 46 2929 40 2029 41 59 125 630 688 40 33 2084 46 2959 40 41 46 2982 40 2029 41 41 123 2087 46 2959 40 41 46 2983 40 2029 41 59 2084 46 2959 40 41 46 2929 40 2029 41 59 125 125 41 59 2029 61 744 2026 40 2924 46 2925 40 362 41 41 59 2084 46 2959 40 41 46 2929 40 2029 41 59 2029 46 2967 40 2940 45 62 123 2116 2984 61 362 59 688 40 2155 46 2985 40 41 46 2986 40 41 46 2925 40 41 307 2008 46 2987 40 2984 41 41 123 744 2988 40 41 46 2989 40 2924 46 2925 40 362 41 41 46 2990 40 2924 46 2925 40 362 41 41 46 2991 40 2924 46 2925 40 362 41 41 46 2992 40 40 41 45 62 123 2471 40 41 59 2155 46 2985 40 41 46 2993 40 41 59 125 41 46 2994 40 2984 41 46 2947 40 41 59 125 630 123 2471 40 41 59 2155 46 2985 40 41 46 2995 40 41 59 125 125 41 59 2029 46 2965 40 2932 41 59 2029 46 2931 40 2932 41 59 125 773 865 2996 40 41 123 830 123 2997 46 2998 40 2999 46 3000 40 3001 40 41 41 41 59 125 580 40 3002 3003 41 123 3004 46 3005 40 3003 46 3006 40 41 41 59 744 3007 40 41 46 3008 40 3009 46 3010 40 362 41 41 46 3011 40 41 59 125 125 64 3012 773 2116 3013 40 41 123 792 3014 46 3013 40 2044 46 3015 40 41 44 2155 46 3016 40 41 46 3017 40 41 46 3018 40 41 44 2155 46 3019 40 41 41 59 125 773 865 3020 40 41 123 330 3021 60 2083 44 2033 44 2049 62 3022 61 3023 40 3024 46 3025 40 362 41 41 59 2088 61 3022 46 3026 59 2037 61 3022 46 3027 59 2134 46 3028 40 2037 41 59 2067 61 3022 46 3029 59 2134 46 3028 40 2067 41 59 3030 60 2049 44 2077 62 3031 61 3032 40 2088 44 2155 46 3033 40 41 41 59 2050 61 3031 46 3026 59 2134 46 3028 40 2050 41 59 2077 3034 61 3031 46 3027 59 330 2061 61 744 2049 40 41 59 2150 61 3035 40 3036 46 3037 44 362 44 2061 41 59 2150 46 3038 40 41 46 3028 40 362 41 59 2061 46 3038 40 41 46 3028 40 362 41 59 330 3021 60 2083 44 2141 44 2049 62 3039 61 3040 40 3024 46 3025 40 362 41 41 59 2089 61 3039 46 3026 59 2142 61 3039 46 3027 59 2035 61 2142 46 3041 40 41 59 2134 46 3028 40 2035 41 59 2055 61 3039 46 3029 59 2134 46 3028 40 2055 41 59 3030 60 2049 44 2077 62 3042 61 3032 40 2089 44 2155 46 3043 40 41 41 59 2056 61 3042 46 3026 59 3044 40 3036 46 3045 44 2056 44 362 41 59 2080 61 3042 46 3027 59 330 2058 61 744 3046 40 362 41 59 2058 46 3038 40 41 46 3028 40 362 41 59 330 3021 60 2083 44 2141 44 2049 62 3047 61 3040 40 3024 46 3025 40 362 41 41 59 2090 61 3047 46 3026 59 2143 61 3047 46 3027 59 2039 61 2143 46 3041 40 41 59 2134 46 3028 40 2039 41 59 2068 61 3047 46 3029 59 2134 46 3028 40 2068 41 59 3030 60 2049 44 2077 62 3048 61 3032 40 2090 44 2155 46 2053 46 3025 40 41 41 59 2053 61 3048 46 3026 59 2134 46 3028 40 2053 41 59 2077 3049 61 3048 46 3027 59 2085 61 744 2083 40 41 59 2085 46 3050 40 1502 41 59 2085 46 3051 40 3052 46 3053 41 59 2085 46 3054 40 41 46 3055 40 3034 44 2061 44 2080 44 2058 44 3049 41 59 2017 46 3056 40 2085 44 1502 41 59 2017 46 3057 40 2085 44 2131 41 59 2017 46 3058 40 2085 44 744 3059 40 3060 46 3061 44 1502 44 1500 44 1500 41 41 59 2018 46 3054 40 41 46 3028 40 2085 41 59 125 773 865 3062 40 570 3063 41 123 704 3064 61 2155 46 3065 46 3066 40 41 59 3063 61 3063 309 40 3064 323 1500 41 59 688 40 3064 323 1501 41 123 2155 46 3067 40 41 46 3068 40 33 3063 41 59 125 2080 46 3069 40 3063 41 59 2079 46 3069 40 33 3063 41 59 688 40 3063 41 123 2085 46 3070 40 41 46 3071 40 2080 41 59 2086 46 3070 40 41 46 3071 40 2079 41 59 688 40 33 2085 46 3070 40 41 46 3072 40 2079 41 41 2085 46 3070 40 41 46 3073 40 1502 44 2079 41 59 688 40 33 2086 46 3070 40 41 46 3072 40 2080 41 41 2086 46 3070 40 41 46 3073 40 1502 44 2080 41 59 125 630 123 2085 46 3074 40 41 46 3075 40 2079 41 59 2086 46 3074 40 41 46 3075 40 2080 41 59 688 40 33 2085 46 3074 40 41 46 3076 40 2080 41 41 2085 46 3074 40 41 46 3077 40 1502 44 2080 41 59 688 40 33 2086 46 3074 40 41 46 3076 40 2079 41 41 2086 46 3074 40 41 46 3077 40 1502 44 2079 41 59 125 2082 46 3078 40 33 3063 41 59 2155 46 3079 40 3063 41 59 125 773 865 3080 40 41 123 330 3081 60 2083 44 2033 44 2049 62 3082 61 3083 40 3084 46 3085 40 362 41 41 59 2091 61 3082 46 3086 59 2034 61 3082 46 3087 59 2134 46 3088 40 2034 41 59 2051 61 3082 46 3089 59 2134 46 3088 40 2051 41 59 3090 60 2049 44 2077 62 3091 61 3092 40 2091 44 362 41 59 2052 61 3091 46 3086 59 3093 40 3094 46 3095 44 2052 44 362 41 59 2134 46 3088 40 2052 41 59 2079 61 3091 46 3087 59 2035 46 3096 40 3084 46 3085 40 362 41 41 59 2055 46 3097 40 362 41 59 3081 60 2083 44 2033 44 2049 62 3098 61 3083 40 3084 46 3085 40 362 41 41 59 2092 61 3098 46 3086 59 2038 61 3098 46 3087 59 2134 46 3088 40 2038 41 59 2069 61 3098 46 3089 59 2134 46 3088 40 2069 41 59 3090 60 2049 44 2077 62 3099 61 3092 40 2092 44 3084 46 3085 40 362 41 41 59 2062 61 744 2049 40 41 59 2151 61 3100 40 3094 46 3101 44 362 44 2062 41 59 2062 46 3102 40 41 46 3088 40 362 41 59 2062 46 3103 40 3104 41 59 330 330 2032 61 3105 40 3094 46 3106 41 59 2134 46 3088 40 2032 41 59 2083 46 3107 40 2032 44 744 3108 40 1503 44 1502 44 1500 44 1500 41 41 59 2032 46 3109 40 40 3110 41 45 62 3062 40 2155 46 3111 40 41 46 3112 40 41 46 3113 40 41 41 41 59 330 3081 60 2083 44 2141 44 2049 62 3114 61 3115 40 3084 46 3085 40 362 41 41 59 2094 61 3114 46 3086 59 2145 61 3114 46 3087 59 2134 46 3088 40 2145 41 59 2036 61 2145 46 3116 40 41 59 2065 61 3114 46 3089 59 2134 46 3088 40 2065 41 59 3090 60 2049 44 2077 62 3117 61 3092 40 2094 44 2155 46 3118 40 41 41 59 2066 61 3117 46 3086 59 2066 46 3119 40 1504 41 59 2082 61 3117 46 3087 59 2086 61 744 2083 40 41 59 2086 46 3120 40 1502 41 59 2086 46 3121 40 3122 46 3123 41 59 2086 46 3124 40 41 46 3125 40 3099 46 3087 44 2062 44 2079 44 2032 44 2082 41 59 2017 46 3126 40 2086 44 1502 41 59 2017 46 3127 40 2086 44 349 2131 41 59 2017 46 3128 40 2086 44 1500 41 59 2017 46 3107 40 2086 44 744 3108 40 1500 44 1502 44 1502 44 1500 41 41 59 2018 46 3124 40 41 46 3088 40 2086 41 59 125 773 2077 3129 40 41 123 2059 61 744 2049 40 41 59 2059 46 3130 40 3131 41 59 2059 46 3132 40 362 41 59 2060 61 744 2049 40 41 59 2060 46 3130 40 3131 41 59 2060 46 3132 40 362 41 59 2077 3133 61 744 2077 40 41 59 3133 46 3134 40 1502 41 59 3133 46 3135 40 1504 41 59 3133 46 3136 40 3137 46 3138 40 41 63 3139 46 3140 58 3139 46 3141 41 59 3133 46 3142 40 41 46 3143 40 2059 44 2060 41 59 2147 61 744 2146 40 41 59 2147 46 3144 40 362 41 59 2147 46 3145 40 3146 41 59 2147 46 3147 40 744 3148 40 45 1502 44 1502 44 45 1502 44 1502 41 41 59 2148 61 744 2146 40 41 59 2148 46 3144 40 362 41 59 2148 46 3145 40 3146 41 59 2148 46 3147 40 744 3148 40 45 1502 44 1502 44 45 1502 44 1502 41 41 59 2077 3149 61 744 2077 40 41 59 3149 46 3142 40 41 46 3143 40 2147 44 2148 41 59 2083 3150 61 744 2083 40 41 59 3150 46 3142 40 41 46 3143 40 3133 44 3149 41 59 3150 46 3151 40 1503 41 59 3150 46 3152 40 3150 46 3153 40 41 41 59 2083 46 3154 40 3133 44 3155 46 3156 41 59 2083 46 3154 40 3149 44 3155 46 3157 41 59 657 3158 60 2049 44 2077 62 3159 61 3160 40 3150 44 3161 46 3162 40 362 41 41 59 2057 61 3159 46 3163 59 792 3159 46 3164 59 125 331 330 331 773 2017 3165 40 41 123 2017 3166 61 744 2017 40 41 59 3166 46 3167 40 1502 41 59 3166 46 3168 40 1502 41 59 3166 46 3169 40 744 3170 40 1502 44 1502 44 1502 44 1502 41 41 59 704 3171 61 1500 59 688 40 2155 46 3172 40 41 41 123 3173 40 3166 44 3171 349 44 3174 46 3175 40 362 41 44 2155 46 3176 40 41 41 59 125 3177 40 3166 44 3171 349 44 3178 46 3179 40 362 41 44 2155 46 3180 40 41 41 59 3177 40 3166 44 3171 349 44 3178 46 3179 40 362 41 44 2155 46 3181 40 41 41 59 3177 40 3166 44 3171 349 44 3178 46 3179 40 362 41 44 2155 46 3182 40 41 41 59 3183 3184 61 744 3183 40 41 59 3184 46 3185 40 3186 46 3187 41 59 3184 46 3188 40 41 46 3189 40 362 41 59 2017 46 3190 40 3184 44 1501 44 3171 349 41 59 3166 46 3191 40 41 46 3189 40 3184 41 59 3177 40 3166 44 3171 44 3178 46 3179 40 362 41 44 2155 46 3192 40 41 41 59 792 3166 59 125 125 ,"{'AvgLine': 28, 'CountLine': 1430, 'CountStmt': 892, 'MaxNesting': 3, 'AvgLineCode': 23, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 793, 'MaxEssential': 3, 'SumEssential': 92, 'AvgCyclomatic': 1, 'CountLineCode': 1143, 'CountStmtDecl': 158, 'MaxCyclomatic': 7, 'SumCyclomatic': 160, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 217, 'CountSemicolon': 777, 'CountDeclMethod': 46, 'CountLineCodeExe': 942, 'CountLineComment': 73, 'CountClassCoupled': 87, 'CountClassDerived': 3, 'CountLineCodeDecl': 190, 'CountDeclMethodAll': 61, 'MaxInheritanceTree': 5, 'RatioCommentToCode': '0.06', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 176, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 160, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 32, 'CountDeclInstanceMethod': 46, 'CountDeclMethodProtected': 9, 'CountClassCoupledModified': 87, 'CountDeclInstanceVariable': 108, 'PercentLackOfCohesionModified': 83}"
5712,Java,"public class AccountAgeWitnessServiceTest {
    private PublicKey publicKey;
    private KeyPair keypair;
    private SignedWitnessService signedWitnessService;
    private AccountAgeWitnessService service;
    private ChargeBackRisk chargeBackRisk;
    private FilterManager filterManager;
    private File dir1;
    private File dir2;
    private File dir3;

    @Before
    public void setup() throws IOException {
        KeyRing keyRing = mock(KeyRing.class);
        setupService(keyRing);
        keypair = Sig.generateKeyPair();
        publicKey = keypair.getPublic();
        // Setup temp storage dir
        dir1 = makeDir(""temp_tests1"");
        dir2 = makeDir(""temp_tests1"");
        dir3 = makeDir(""temp_tests1"");
    }

    private void setupService(KeyRing keyRing) {
        chargeBackRisk = mock(ChargeBackRisk.class);
        AppendOnlyDataStoreService dataStoreService = mock(AppendOnlyDataStoreService.class);
        P2PService p2pService = mock(P2PService.class);
        ArbitratorManager arbitratorManager = mock(ArbitratorManager.class);
        when(arbitratorManager.isPublicKeyInList(any())).thenReturn(true);
        AppendOnlyDataStoreService appendOnlyDataStoreService = mock(AppendOnlyDataStoreService.class);
        filterManager = mock(FilterManager.class);
        signedWitnessService = new SignedWitnessService(keyRing, p2pService, arbitratorManager, null, appendOnlyDataStoreService, null, filterManager);
        service = new AccountAgeWitnessService(null, null, null, signedWitnessService, chargeBackRisk, null, dataStoreService, null, filterManager);
    }

    private File makeDir(String name) throws IOException {
        var dir = File.createTempFile(name, """");
        dir.delete();
        dir.mkdir();
        return dir;
    }

    @After
    public void tearDown() {
        // Do teardown stuff
    }

    @Ignore
    @Test
    public void testIsTradeDateAfterReleaseDate() {
        Date ageWitnessReleaseDate = new GregorianCalendar(2017, Calendar.OCTOBER, 23).getTime();
        Date tradeDate = new GregorianCalendar(2017, Calendar.NOVEMBER, 1).getTime();
        assertTrue(service.isDateAfterReleaseDate(tradeDate.getTime(), ageWitnessReleaseDate, errorMessage -> {
        }));
        tradeDate = new GregorianCalendar(2017, Calendar.OCTOBER, 23).getTime();
        assertTrue(service.isDateAfterReleaseDate(tradeDate.getTime(), ageWitnessReleaseDate, errorMessage -> {
        }));
        tradeDate = new GregorianCalendar(2017, Calendar.OCTOBER, 22, 0, 0, 1).getTime();
        assertTrue(service.isDateAfterReleaseDate(tradeDate.getTime(), ageWitnessReleaseDate, errorMessage -> {
        }));
        tradeDate = new GregorianCalendar(2017, Calendar.OCTOBER, 22).getTime();
        assertFalse(service.isDateAfterReleaseDate(tradeDate.getTime(), ageWitnessReleaseDate, errorMessage -> {
        }));
        tradeDate = new GregorianCalendar(2017, Calendar.OCTOBER, 21).getTime();
        assertFalse(service.isDateAfterReleaseDate(tradeDate.getTime(), ageWitnessReleaseDate, errorMessage -> {
        }));
    }

    @Ignore
    @Test
    public void testVerifySignatureOfNonce() throws CryptoException {
        byte[] nonce = new byte[]{0x01};
        byte[] signature = Sig.sign(keypair.getPrivate(), nonce);
        assertTrue(service.verifySignature(publicKey, nonce, signature, errorMessage -> {
        }));
        assertFalse(service.verifySignature(publicKey, nonce, new byte[]{0x02}, errorMessage -> {
        }));
        assertFalse(service.verifySignature(publicKey, new byte[]{0x03}, signature, errorMessage -> {
        }));
        assertFalse(service.verifySignature(publicKey, new byte[]{0x02}, new byte[]{0x04}, errorMessage -> {
        }));
    }

    @Test
    public void testArbitratorSignWitness() {
        KeyRing buyerKeyRing = new KeyRing(new KeyStorage(dir1));
        KeyRing sellerKeyRing = new KeyRing(new KeyStorage(dir2));

        // Setup dispute for arbitrator to sign both sides
        List<Dispute> disputes = new ArrayList<>();
        PubKeyRing buyerPubKeyRing = buyerKeyRing.getPubKeyRing();
        PubKeyRing sellerPubKeyRing = sellerKeyRing.getPubKeyRing();
        PaymentAccountPayload buyerPaymentAccountPayload = new SepaAccountPayload(PaymentMethod.SEPA_ID, ""1"", CountryUtil.getAllSepaCountries());
        PaymentAccountPayload sellerPaymentAccountPayload = new SepaAccountPayload(PaymentMethod.SEPA_ID, ""2"", CountryUtil.getAllSepaCountries());
        AccountAgeWitness buyerAccountAgeWitness = service.getNewWitness(buyerPaymentAccountPayload, buyerPubKeyRing);
        service.addToMap(buyerAccountAgeWitness);
        AccountAgeWitness sellerAccountAgeWitness = service.getNewWitness(sellerPaymentAccountPayload, sellerPubKeyRing);
        service.addToMap(sellerAccountAgeWitness);
        long now = new Date().getTime() + 1000;
        Contract contract = mock(Contract.class);
        disputes.add(new Dispute(new Date().getTime(),
                ""trade1"",
                0,
                true,
                true,
                buyerPubKeyRing,
                now - 1,
                now - 1,
                contract,
                null,
                null,
                null,
                null,
                null,
                ""contractAsJson"",
                null,
                null,
                null,
                true,
                SupportType.ARBITRATION));
        disputes.get(0).setIsClosed();
        disputes.get(0).getDisputeResultProperty().set(new DisputeResult(
                ""trade1"",
                1,
                DisputeResult.Winner.BUYER,
                DisputeResult.Reason.OTHER.ordinal(),
                true,
                true,
                true,
                ""summary"",
                null,
                null,
                100000,
                0,
                null,
                now - 1,
                false, """", UNKNOWN));

        // Filtermanager says nothing is filtered
        when(filterManager.isNodeAddressBanned(any())).thenReturn(false);
        when(filterManager.isCurrencyBanned(any())).thenReturn(false);
        when(filterManager.isPaymentMethodBanned(any())).thenReturn(false);
        when(filterManager.arePeersPaymentAccountDataBanned(any())).thenReturn(false);
        when(filterManager.isWitnessSignerPubKeyBanned(any())).thenReturn(false);

        when(chargeBackRisk.hasChargebackRisk(any(), any())).thenReturn(true);

        when(contract.getPaymentMethodId()).thenReturn(PaymentMethod.SEPA_ID);
        when(contract.getTradeAmount()).thenReturn(Coin.parseCoin(""0.01""));
        when(contract.getBuyerPubKeyRing()).thenReturn(buyerPubKeyRing);
        when(contract.getSellerPubKeyRing()).thenReturn(sellerPubKeyRing);
        when(contract.getBuyerPaymentAccountPayload()).thenReturn(buyerPaymentAccountPayload);
        when(contract.getSellerPaymentAccountPayload()).thenReturn(sellerPaymentAccountPayload);
        when(contract.getOfferPayload()).thenReturn(mock(OfferPayload.class));
        List<TraderDataItem> items = service.getTraderPaymentAccounts(now, getPaymentMethod(PaymentMethod.SEPA_ID), disputes);
        assertEquals(2, items.size());

        // Setup a mocked arbitrator key
        ECKey arbitratorKey = mock(ECKey.class);
        when(arbitratorKey.signMessage(any())).thenReturn(""1"");
        when(arbitratorKey.signMessage(any())).thenReturn(""2"");
        when(arbitratorKey.getPubKey()).thenReturn(""1"".getBytes());

        // Arbitrator signs both trader accounts
        items.forEach(item -> service.arbitratorSignAccountAgeWitness(
                item.getTradeAmount(),
                item.getAccountAgeWitness(),
                arbitratorKey,
                item.getPeersPubKey()));

        // Check that both accountAgeWitnesses are signed
        SignedWitness foundBuyerSignedWitness = signedWitnessService.getSignedWitnessSetByOwnerPubKey(
                buyerPubKeyRing.getSignaturePubKeyBytes()).stream()
                .findFirst()
                .orElse(null);
        assert foundBuyerSignedWitness != null;
        assertEquals(Utilities.bytesAsHexString(foundBuyerSignedWitness.getAccountAgeWitnessHash()),
                Utilities.bytesAsHexString(buyerAccountAgeWitness.getHash()));
        SignedWitness foundSellerSignedWitness = signedWitnessService.getSignedWitnessSetByOwnerPubKey(
                sellerPubKeyRing.getSignaturePubKeyBytes()).stream()
                .findFirst()
                .orElse(null);
        assert foundSellerSignedWitness != null;
        assertEquals(Utilities.bytesAsHexString(foundSellerSignedWitness.getAccountAgeWitnessHash()),
                Utilities.bytesAsHexString(sellerAccountAgeWitness.getHash()));
    }

    // Create a tree of signed witnesses Arb -(SWA)-> aew1 -(SW1)-> aew2 -(SW2)-> aew3
    // Delete SWA signature, none of the account age witnesses are considered signed
    // Sign a dummy AccountAgeWitness using the signerPubkey from SW1; aew2 and aew3 are not considered signed. The
    // lost SignedWitness isn't possible to recover so aew1 is still not signed, but it's pubkey is a signer.
    @Test
    public void testArbitratorSignDummyWitness() throws CryptoException {
        ECKey arbitratorKey = new ECKey();
        // Init 2 user accounts
        var user1KeyRing = new KeyRing(new KeyStorage(dir1));
        var user2KeyRing = new KeyRing(new KeyStorage(dir2));
        var user3KeyRing = new KeyRing(new KeyStorage(dir3));
        var pubKeyRing1 = user1KeyRing.getPubKeyRing();
        var pubKeyRing2 = user2KeyRing.getPubKeyRing();
        var pubKeyRing3 = user3KeyRing.getPubKeyRing();
        var account1 = new SepaAccountPayload(PaymentMethod.SEPA_ID, ""1"", CountryUtil.getAllSepaCountries());
        var account2 = new SepaAccountPayload(PaymentMethod.SEPA_ID, ""2"", CountryUtil.getAllSepaCountries());
        var account3 = new SepaAccountPayload(PaymentMethod.SEPA_ID, ""3"", CountryUtil.getAllSepaCountries());
        var aew1 = service.getNewWitness(account1, pubKeyRing1);
        var aew2 = service.getNewWitness(account2, pubKeyRing2);
        var aew3 = service.getNewWitness(account3, pubKeyRing3);
        // Backdate witness1 70 days
        aew1 = new AccountAgeWitness(aew1.getHash(), new Date().getTime() - TimeUnit.DAYS.toMillis(70));
        aew2 = new AccountAgeWitness(aew2.getHash(), new Date().getTime() - TimeUnit.DAYS.toMillis(35));
        aew3 = new AccountAgeWitness(aew3.getHash(), new Date().getTime() - TimeUnit.DAYS.toMillis(1));
        service.addToMap(aew1);
        service.addToMap(aew2);
        service.addToMap(aew3);

        // Test as user1. It's still possible to sign as arbitrator since the ECKey is passed as an argument.
        setupService(user1KeyRing);

        // Arbitrator signs user1
        service.arbitratorSignAccountAgeWitness(aew1, arbitratorKey, pubKeyRing1.getSignaturePubKeyBytes(),
                aew1.getDate());
        // user1 signs user2
        signAccountAgeWitness(aew2, pubKeyRing2.getSignaturePubKey(), aew2.getDate(), user1KeyRing);
        // user2 signs user3
        signAccountAgeWitness(aew3, pubKeyRing3.getSignaturePubKey(), aew3.getDate(), user2KeyRing);
        signedWitnessService.signAndPublishAccountAgeWitness(SignedWitnessService.MINIMUM_TRADE_AMOUNT_FOR_SIGNING, aew2,
                pubKeyRing2.getSignaturePubKey());
        assertTrue(service.accountIsSigner(aew1));
        assertTrue(service.accountIsSigner(aew2));
        assertFalse(service.accountIsSigner(aew3));
        assertTrue(signedWitnessService.isSignedAccountAgeWitness(aew3));

        // Remove SignedWitness signed by arbitrator
        @SuppressWarnings(""OptionalGetWithoutIsPresent"")
        var signedWitnessArb = signedWitnessService.getSignedWitnessMapValues().stream()
                .filter(sw -> sw.getVerificationMethod() == SignedWitness.VerificationMethod.ARBITRATOR)
                .findAny()
                .get();
        signedWitnessService.removeSignedWitness(signedWitnessArb);
        assertEquals(signedWitnessService.getSignedWitnessMapValues().size(), 2);

        // Check that no account age witness is a signer
        assertFalse(service.accountIsSigner(aew1));
        assertFalse(service.accountIsSigner(aew2));
        assertFalse(service.accountIsSigner(aew3));
        assertFalse(signedWitnessService.isSignedAccountAgeWitness(aew2));

        // Sign dummy AccountAgeWitness using signer key from SW_1
        assertEquals(signedWitnessService.getRootSignedWitnessSet(false).size(), 1);

        // TODO: move this to accountagewitnessservice
        @SuppressWarnings(""OptionalGetWithoutIsPresent"")
        var orphanedSignedWitness = signedWitnessService.getRootSignedWitnessSet(false).stream().findAny().get();
        var dummyAccountAgeWitnessHash = Hash.getRipemd160hash(orphanedSignedWitness.getSignerPubKey());
        var dummyAEW = new AccountAgeWitness(dummyAccountAgeWitnessHash,
                orphanedSignedWitness.getDate() -
                        (TimeUnit.DAYS.toMillis(SignedWitnessService.SIGNER_AGE_DAYS + 1)));
        service.arbitratorSignAccountAgeWitness(
                dummyAEW, arbitratorKey, orphanedSignedWitness.getSignerPubKey(), dummyAEW.getDate());

        assertFalse(service.accountIsSigner(aew1));
        assertTrue(service.accountIsSigner(aew2));
        assertFalse(service.accountIsSigner(aew3));
        assertTrue(signedWitnessService.isSignedAccountAgeWitness(aew2));
    }

    private void signAccountAgeWitness(AccountAgeWitness accountAgeWitness,
                                       PublicKey witnessOwnerPubKey,
                                       long time,
                                       KeyRing signerKeyRing) throws CryptoException {
        byte[] signature = Sig.sign(signerKeyRing.getSignatureKeyPair().getPrivate(), accountAgeWitness.getHash());
        SignedWitness signedWitness = new SignedWitness(SignedWitness.VerificationMethod.TRADE,
                accountAgeWitness.getHash(),
                signature,
                signerKeyRing.getSignatureKeyPair().getPublic().getEncoded(),
                witnessOwnerPubKey.getEncoded(),
                time,
                SignedWitnessService.MINIMUM_TRADE_AMOUNT_FOR_SIGNING.value);
        signedWitnessService.addToMap(signedWitness);
    }

}",1,777 587 2000 123 773 2001 2002 59 773 2003 2004 59 773 2005 2006 59 773 2007 2008 59 773 2009 2010 59 773 2011 2012 59 773 2013 2014 59 773 2013 2015 59 773 2013 2016 59 64 2017 777 865 2018 40 41 826 2019 123 2020 2021 61 2022 40 2020 46 587 41 59 2023 40 2021 41 59 2004 61 2024 46 2025 40 41 59 2002 61 2004 46 2026 40 41 59 330 2014 61 2027 40 362 41 59 2015 61 2027 40 362 41 59 2016 61 2027 40 362 41 59 125 773 865 2028 40 2029 2030 41 123 2010 61 2031 40 2009 46 587 41 59 2032 2033 61 2031 40 2032 46 587 41 59 2034 2035 61 2031 40 2034 46 587 41 59 2036 2037 61 2031 40 2036 46 587 41 59 2038 40 2037 46 2039 40 2040 40 41 41 41 46 2041 40 2042 41 59 2032 2043 61 2031 40 2032 46 587 41 59 2012 61 2031 40 2011 46 587 41 59 2006 61 744 2005 40 2030 44 2035 44 2037 44 2044 44 2043 44 2044 44 2012 41 59 2008 61 744 2007 40 2044 44 2044 44 2044 44 2006 44 2010 44 2044 44 2033 44 2044 44 2012 41 59 125 773 2013 2045 40 2046 2047 41 826 2019 123 2048 2049 61 2013 46 2050 40 2047 44 362 41 59 2049 46 2051 40 41 59 2049 46 2052 40 41 59 792 2049 59 125 64 2053 777 865 2054 40 41 123 330 125 64 2055 64 2056 777 865 2057 40 41 123 2058 2059 61 744 2060 40 1505 44 2061 46 2062 44 1503 41 46 2063 40 41 59 2058 2064 61 744 2060 40 1505 44 2061 46 2065 44 1501 41 46 2063 40 41 59 2066 40 2008 46 2067 40 2064 46 2063 40 41 44 2059 44 2068 45 62 123 125 41 41 59 2064 61 744 2060 40 1505 44 2061 46 2062 44 1503 41 46 2063 40 41 59 2066 40 2008 46 2067 40 2064 46 2063 40 41 44 2059 44 2068 45 62 123 125 41 41 59 2064 61 744 2060 40 1505 44 2061 46 2062 44 1503 44 1500 44 1500 44 1501 41 46 2063 40 41 59 2066 40 2008 46 2067 40 2064 46 2063 40 41 44 2059 44 2068 45 62 123 125 41 41 59 2064 61 744 2060 40 1505 44 2061 46 2062 44 1503 41 46 2063 40 41 59 2069 40 2008 46 2067 40 2064 46 2063 40 41 44 2059 44 2068 45 62 123 125 41 41 59 2064 61 744 2060 40 1505 44 2061 46 2062 44 1503 41 46 2063 40 41 59 2069 40 2008 46 2067 40 2064 46 2063 40 41 44 2059 44 2068 45 62 123 125 41 41 59 125 64 2055 64 2056 777 865 2070 40 41 826 2071 123 574 91 93 2072 61 744 574 91 93 123 1501 125 59 574 91 93 2073 61 2074 46 2075 40 2004 46 2076 40 41 44 2072 41 59 2077 40 2008 46 2078 40 2002 44 2072 44 2073 44 2079 45 62 123 125 41 41 59 2080 40 2008 46 2078 40 2002 44 2072 44 744 574 91 93 123 1502 125 44 2079 45 62 123 125 41 41 59 2080 40 2008 46 2078 40 2002 44 744 574 91 93 123 1502 125 44 2073 44 2079 45 62 123 125 41 41 59 2080 40 2008 46 2078 40 2002 44 744 574 91 93 123 1502 125 44 744 574 91 93 123 1502 125 44 2079 45 62 123 125 41 41 59 125 64 2056 777 865 2081 40 41 123 2029 2082 61 744 2029 40 744 2083 40 2014 41 41 59 2029 2084 61 744 2029 40 744 2083 40 2015 41 41 59 330 2085 60 2086 62 2087 61 744 2088 60 62 40 41 59 2089 2090 61 2082 46 2091 40 41 59 2089 2092 61 2084 46 2091 40 41 59 2093 2094 61 744 2095 40 2096 46 2097 44 362 44 2098 46 2099 40 41 41 59 2093 2100 61 744 2095 40 2096 46 2097 44 362 44 2098 46 2099 40 41 41 59 2101 2102 61 2008 46 2103 40 2094 44 2090 41 59 2008 46 2104 40 2102 41 59 2101 2105 61 2008 46 2103 40 2100 44 2092 41 59 2008 46 2104 40 2105 41 59 726 2106 61 744 2107 40 41 46 2108 40 41 43 1504 59 2109 2110 61 2111 40 2109 46 587 41 59 2087 46 2112 40 744 2086 40 744 2107 40 41 46 2108 40 41 44 362 44 1500 44 2113 44 2113 44 2090 44 2106 45 1501 44 2106 45 1501 44 2110 44 2114 44 2114 44 2114 44 2114 44 2114 44 362 44 2114 44 2114 44 2114 44 2113 44 2115 46 2116 41 41 59 2087 46 2117 40 1500 41 46 2118 40 41 59 2087 46 2117 40 1500 41 46 2119 40 41 46 2120 40 744 2121 40 362 44 1501 44 2121 46 2122 46 2123 44 2121 46 2124 46 2125 46 2126 40 41 44 2113 44 2113 44 2113 44 362 44 2114 44 2114 44 1506 44 1500 44 2114 44 2106 45 1501 44 2127 44 362 44 2128 41 41 59 330 2129 40 2012 46 2130 40 2131 40 41 41 41 46 2132 40 2127 41 59 2129 40 2012 46 2133 40 2131 40 41 41 41 46 2132 40 2127 41 59 2129 40 2012 46 2134 40 2131 40 41 41 41 46 2132 40 2127 41 59 2129 40 2012 46 2135 40 2131 40 41 41 41 46 2132 40 2127 41 59 2129 40 2012 46 2136 40 2131 40 41 41 41 46 2132 40 2127 41 59 2129 40 2010 46 2137 40 2131 40 41 44 2131 40 41 41 41 46 2132 40 2113 41 59 2129 40 2110 46 2138 40 41 41 46 2132 40 2096 46 2097 41 59 2129 40 2110 46 2139 40 41 41 46 2132 40 2140 46 2141 40 362 41 41 59 2129 40 2110 46 2142 40 41 41 46 2132 40 2090 41 59 2129 40 2110 46 2143 40 41 41 46 2132 40 2092 41 59 2129 40 2110 46 2144 40 41 41 46 2132 40 2094 41 59 2129 40 2110 46 2145 40 41 41 46 2132 40 2100 41 59 2129 40 2110 46 2146 40 41 41 46 2132 40 2111 40 2147 46 587 41 41 59 2085 60 2148 62 2149 61 2008 46 2150 40 2106 44 2151 40 2096 46 2097 41 44 2087 41 59 2152 40 1502 44 2149 46 2153 40 41 41 59 330 2154 2155 61 2111 40 2154 46 587 41 59 2129 40 2155 46 2156 40 2131 40 41 41 41 46 2132 40 362 41 59 2129 40 2155 46 2156 40 2131 40 41 41 41 46 2132 40 362 41 59 2129 40 2155 46 2157 40 41 41 46 2132 40 362 46 2158 40 41 41 59 330 2149 46 2159 40 2160 45 62 2008 46 2161 40 2160 46 2139 40 41 44 2160 46 2162 40 41 44 2155 44 2160 46 2163 40 41 41 41 59 330 2164 2165 61 2006 46 2166 40 2090 46 2167 40 41 41 46 2168 40 41 46 2169 40 41 46 2170 40 2114 41 59 555 2165 340 2114 59 2152 40 2171 46 2172 40 2165 46 2173 40 41 41 44 2171 46 2172 40 2102 46 2174 40 41 41 41 59 2164 2175 61 2006 46 2166 40 2092 46 2167 40 41 41 46 2168 40 41 46 2169 40 41 46 2170 40 2114 41 59 555 2175 340 2114 59 2152 40 2171 46 2172 40 2175 46 2173 40 41 41 44 2171 46 2172 40 2105 46 2174 40 41 41 41 59 125 330 330 330 330 64 2056 777 865 2176 40 41 826 2071 123 2177 2178 61 744 2177 40 41 59 330 2179 2180 61 744 2029 40 744 2181 40 2014 41 41 59 2179 2182 61 744 2029 40 744 2181 40 2015 41 41 59 2179 2183 61 744 2029 40 744 2181 40 2016 41 41 59 2179 2184 61 2180 46 2185 40 41 59 2179 2186 61 2182 46 2185 40 41 59 2179 2187 61 2183 46 2185 40 41 59 2179 2188 61 744 2189 40 2190 46 2191 44 362 44 2192 46 2193 40 41 41 59 2179 2194 61 744 2189 40 2190 46 2191 44 362 44 2192 46 2193 40 41 41 59 2179 2195 61 744 2189 40 2190 46 2191 44 362 44 2192 46 2193 40 41 41 59 2179 2196 61 2008 46 2197 40 2188 44 2184 41 59 2179 2198 61 2008 46 2197 40 2194 44 2186 41 59 2179 2199 61 2008 46 2197 40 2195 44 2187 41 59 330 2196 61 744 2200 40 2196 46 2201 40 41 44 744 2202 40 41 46 2203 40 41 45 2204 46 2205 46 2206 40 1503 41 41 59 2198 61 744 2200 40 2198 46 2201 40 41 44 744 2202 40 41 46 2203 40 41 45 2204 46 2205 46 2206 40 1503 41 41 59 2199 61 744 2200 40 2199 46 2201 40 41 44 744 2202 40 41 46 2203 40 41 45 2204 46 2205 46 2206 40 1501 41 41 59 2008 46 2207 40 2196 41 59 2008 46 2207 40 2198 41 59 2008 46 2207 40 2199 41 59 330 2028 40 2180 41 59 330 2008 46 2208 40 2196 44 2178 44 2184 46 2209 40 41 44 2196 46 2210 40 41 41 59 330 2211 40 2198 44 2186 46 2212 40 41 44 2198 46 2210 40 41 44 2180 41 59 330 2211 40 2199 44 2187 46 2212 40 41 44 2199 46 2210 40 41 44 2182 41 59 2006 46 2213 40 2005 46 2214 44 2198 44 2186 46 2212 40 41 41 59 2215 40 2008 46 2216 40 2196 41 41 59 2215 40 2008 46 2216 40 2198 41 41 59 2217 40 2008 46 2216 40 2199 41 41 59 2215 40 2006 46 2218 40 2199 41 41 59 330 64 2219 40 362 41 2179 2220 61 2006 46 2221 40 41 46 2222 40 41 46 2223 40 2224 45 62 2224 46 2225 40 41 323 2226 46 2227 46 2228 41 46 2229 40 41 46 2230 40 41 59 2006 46 2231 40 2220 41 59 2232 40 2006 46 2221 40 41 46 2233 40 41 44 1502 41 59 330 2217 40 2008 46 2216 40 2196 41 41 59 2217 40 2008 46 2216 40 2198 41 41 59 2217 40 2008 46 2216 40 2199 41 41 59 2217 40 2006 46 2218 40 2198 41 41 59 330 2232 40 2006 46 2234 40 2235 41 46 2233 40 41 44 1501 41 59 330 64 2219 40 362 41 2179 2236 61 2006 46 2234 40 2235 41 46 2222 40 41 46 2229 40 41 46 2230 40 41 59 2179 2237 61 2238 46 2239 40 2236 46 2240 40 41 41 59 2179 2241 61 744 2200 40 2237 44 2236 46 2210 40 41 45 40 2204 46 2205 46 2206 40 2005 46 2242 43 1501 41 41 41 59 2008 46 2208 40 2241 44 2178 44 2236 46 2240 40 41 44 2241 46 2210 40 41 41 59 2217 40 2008 46 2216 40 2196 41 41 59 2215 40 2008 46 2216 40 2198 41 41 59 2217 40 2008 46 2216 40 2199 41 41 59 2215 40 2006 46 2218 40 2198 41 41 59 125 773 865 2243 40 2244 2245 44 2001 2246 44 726 2247 44 2029 2248 41 826 2071 123 574 91 93 2249 61 2250 46 2251 40 2248 46 2252 40 41 46 2253 40 41 44 2245 46 2254 40 41 41 59 2255 2256 61 744 2255 40 2255 46 2257 46 2258 44 2245 46 2254 40 41 44 2249 44 2248 46 2252 40 41 46 2259 40 41 46 2260 40 41 44 2246 46 2260 40 41 44 2247 44 2005 46 2261 46 2262 41 59 2006 46 2263 40 2256 41 59 125 125 ,"{'AvgLine': 28, 'CountLine': 282, 'CountStmt': 145, 'MaxNesting': 0, 'AvgLineCode': 25, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 125, 'MaxEssential': 1, 'SumEssential': 20, 'AvgCyclomatic': 1, 'CountLineCode': 237, 'CountStmtDecl': 63, 'MaxCyclomatic': 1, 'SumCyclomatic': 20, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 24, 'CountSemicolon': 135, 'CountDeclMethod': 9, 'CountLineCodeExe': 195, 'CountLineComment': 21, 'CountClassCoupled': 46, 'CountClassDerived': 0, 'CountLineCodeDecl': 81, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 20, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 6, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 69, 'SumCyclomaticModified': 20, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 9, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 46, 'CountDeclInstanceVariable': 9, 'PercentLackOfCohesionModified': 61}"
3755,Java,"public class JapanBankData {
    /*
       Returns the main list of ~500 banks in Japan with bank codes,
       but since 90%+ of people will be using one of ~30 major banks,
       we hard-code those at the top for easier pull-down selection,
       and add their English names in parenthesis for foreigners.
    */
    public static List<String> prettyPrintBankList() // {{{
    {
        List<String> prettyList = new ArrayList<>();

        // add mega banks at the top
        for (Map.Entry<String, String> bank : megaBanksEnglish.entrySet()) {
            String bankId = bank.getKey();
            String bankNameEn = bank.getValue();
            String bankNameJa = majorBanksJapanese.get(bankId);
            if (bankNameJa == null) bankNameJa = minorBanksJapanese.get(bankId);
            prettyList.add(prettyPrintMajorBank(bankId, bankNameJa, bankNameEn));
        }

        // append the major banks next
        for (Map.Entry<String, String> bank : majorBanksJapanese.entrySet()) {
            String bankId = bank.getKey();
            String bankNameJa = bank.getValue();
            // avoid duplicates
            if (megaBanksEnglish.get(bankId) != null) continue;
            prettyList.add(prettyPrintBank(bankId, bankNameJa));
        }

        // append the minor local banks last
        for (Map.Entry<String, String> bank : minorBanksJapanese.entrySet()) {
            String bankId = bank.getKey();
            String bankNameJa = bank.getValue();
            prettyList.add(prettyPrintBank(bankId, bankNameJa));
        }

        return prettyList;
    } // }}}

    // Pretty print major banks like this: (0001) みずほ (Mizuho Bank)
    private static String prettyPrintMajorBank(String bankId, String bankNameJa, String bankNameEn) // {{{
    {
        return ID_OPEN + bankId + ID_CLOSE + SPACE +
                JA_OPEN + bankNameJa + JA_CLOSE + SPACE +
                EN_OPEN + bankNameEn + EN_CLOSE;
    } // }}}

    // Pretty print other banks like this: (9524) みずほ証券
    private static String prettyPrintBank(String bankId, String bankName) // {{{
    {
        return ID_OPEN + bankId + ID_CLOSE + SPACE +
                JA_OPEN + bankName + JA_CLOSE;
    } // }}}

    // top 30 mega banks with english
    private static final Map<String, String> megaBanksEnglish = ImmutableMap.<String, String>builder()
            // {{{ japan post office
            .put(""9900"", ""Japan Post Bank Yucho"")
            // }}}
            // {{{ japan mega-banks
            .put(""0001"", ""Mizuho Bank"")
            .put(""0005"", ""Mitsubishi UFJ Bank (MUFG)"")
            .put(""0009"", ""Sumitomo Mitsui Banking Corporation (SMBC)"")
            .put(""0010"", ""Resona Bank"")
            // }}}
            // {{{ major online banks
            .put(""0033"", ""Japan Net Bank"")
            .put(""0034"", ""Seven Bank (7-11)"")
            .put(""0035"", ""Sony Bank"")
            .put(""0036"", ""Rakuten Bank"")
            .put(""0038"", ""SBI Sumishin Net Bank"")
            .put(""0039"", ""Jibun Bank"")
            .put(""0040"", ""Aeon Bank"")
            .put(""0042"", ""Lawson Bank"")
            // }}}
            // {{{ major trust banks, etc.
            .put(""0150"", ""Suruga Bank"")
            .put(""0288"", ""Mitsubishi UFJ Trust Bank"")
            .put(""0289"", ""Mizuho Trust Bank"")
            .put(""0294"", ""Sumitomo Trust Bank"")
            .put(""0300"", ""SMBC Trust Bank (PRESTIA)"")
            .put(""0304"", ""Nomura Trust Bank"")
            .put(""0307"", ""Orix Trust Bank"")
            .put(""0310"", ""GMO Aozora Net Bank"")
            .put(""0321"", ""Japan Securities Trust Bank"")
            .put(""0397"", ""Shinsei Bank"")
            .put(""0398"", ""Aozora Bank"")
            .put(""0402"", ""JP Morgan Chase Bank"")
            .put(""0442"", ""BNY Mellon"")
            .put(""0458"", ""DBS Bank"")
            .put(""0472"", ""SBJ Shinhan Bank Japan"")
            // }}}
            .build();

    // major ~200 banks
    private static final Map<String, String> majorBanksJapanese = ImmutableMap.<String, String>builder()
            // {{{  ゆうちょ銀行 (9900)
            .put(""9900"", ""ゆうちょ銀行"")
            // }}}
            // {{{  都市銀行 (0001 ~ 0029)
            .put(""0001"", ""みずほ銀行"")
            .put(""0005"", ""三菱ＵＦＪ銀行"")
            .put(""0009"", ""三井住友銀行"")
            .put(""0010"", ""りそな銀行"")
            .put(""0017"", ""埼玉りそな銀行"")
            // }}}
            // {{{  ネット専業銀行等 (0030 ~ 0049)
            .put(""0033"", ""ジャパンネット銀行"")
            .put(""0034"", ""セブン銀行"")
            .put(""0035"", ""ソニー銀行"")
            .put(""0036"", ""楽天銀行"")
            .put(""0038"", ""住信ＳＢＩネット銀行"")
            .put(""0039"", ""じぶん銀行"")
            .put(""0040"", ""イオン銀行"")
            .put(""0041"", ""大和ネクスト銀行"")
            .put(""0042"", ""ローソン銀行"")
            // }}}
            // {{{ 協会 (0050 ~ 0099)
            .put(""0051"", ""全銀協"")
            .put(""0052"", ""横浜銀行協会"")
            .put(""0053"", ""釧路銀行協会"")
            .put(""0054"", ""札幌銀行協会"")
            .put(""0056"", ""函館銀行協会"")
            .put(""0057"", ""青森銀行協会"")
            .put(""0058"", ""秋田銀行協会"")
            .put(""0059"", ""宮城銀行協会"")
            .put(""0060"", ""福島銀行協会"")
            .put(""0061"", ""群馬銀行協会"")
            .put(""0062"", ""新潟銀行協会"")
            .put(""0063"", ""石川銀行協会"")
            .put(""0064"", ""山梨銀行協会"")
            .put(""0065"", ""長野銀行協会"")
            .put(""0066"", ""静岡銀行協会"")
            .put(""0067"", ""名古屋銀行協会"")
            .put(""0068"", ""京都銀行協会"")
            .put(""0069"", ""大阪銀行協会"")
            .put(""0070"", ""神戸銀行協会"")
            .put(""0071"", ""岡山銀行協会"")
            .put(""0072"", ""広島銀行協会"")
            .put(""0073"", ""島根銀行協会"")
            .put(""0074"", ""山口銀行協会"")
            .put(""0075"", ""香川銀行協会"")
            .put(""0076"", ""愛媛銀行協会"")
            .put(""0077"", ""高知銀行協会"")
            .put(""0078"", ""北九州銀行協会"")
            .put(""0079"", ""福岡銀行協会"")
            .put(""0080"", ""大分銀行協会"")
            .put(""0081"", ""長崎銀行協会"")
            .put(""0082"", ""熊本銀行協会"")
            .put(""0083"", ""鹿児島銀行協会"")
            .put(""0084"", ""沖縄銀行協会"")
            .put(""0090"", ""全銀ネット"")
            .put(""0095"", ""ＣＬＳＢＡＮＫ"")
            // }}}
            // {{{  地方銀行 (0116 ~ 0190)
            .put(""0116"", ""北海道銀行"")
            .put(""0117"", ""青森銀行"")
            .put(""0118"", ""みちのく銀行"")
            .put(""0119"", ""秋田銀行"")
            .put(""0120"", ""北都銀行"")
            .put(""0121"", ""荘内銀行"")
            .put(""0122"", ""山形銀行"")
            .put(""0123"", ""岩手銀行"")
            .put(""0124"", ""東北銀行"")
            .put(""0125"", ""七十七銀行"")
            .put(""0126"", ""東邦銀行"")
            .put(""0128"", ""群馬銀行"")
            .put(""0129"", ""足利銀行"")
            .put(""0130"", ""常陽銀行"")
            .put(""0131"", ""筑波銀行"")
            .put(""0133"", ""武蔵野銀行"")
            .put(""0134"", ""千葉銀行"")
            .put(""0135"", ""千葉興業銀行"")
            .put(""0137"", ""きらぼし銀行"")
            .put(""0138"", ""横浜銀行"")
            .put(""0140"", ""第四銀行"")
            .put(""0141"", ""北越銀行"")
            .put(""0142"", ""山梨中央銀行"")
            .put(""0143"", ""八十二銀行"")
            .put(""0144"", ""北陸銀行"")
            .put(""0145"", ""富山銀行"")
            .put(""0146"", ""北國銀行"")
            .put(""0147"", ""福井銀行"")
            .put(""0149"", ""静岡銀行"")
            .put(""0150"", ""スルガ銀行"")
            .put(""0151"", ""清水銀行"")
            .put(""0152"", ""大垣共立銀行"")
            .put(""0153"", ""十六銀行"")
            .put(""0154"", ""三重銀行"")
            .put(""0155"", ""百五銀行"")
            .put(""0157"", ""滋賀銀行"")
            .put(""0158"", ""京都銀行"")
            .put(""0159"", ""関西みらい銀行"")
            .put(""0161"", ""池田泉州銀行"")
            .put(""0162"", ""南都銀行"")
            .put(""0163"", ""紀陽銀行"")
            .put(""0164"", ""但馬銀行"")
            .put(""0166"", ""鳥取銀行"")
            .put(""0167"", ""山陰合同銀行"")
            .put(""0168"", ""中国銀行"")
            .put(""0169"", ""広島銀行"")
            .put(""0170"", ""山口銀行"")
            .put(""0172"", ""阿波銀行"")
            .put(""0173"", ""百十四銀行"")
            .put(""0174"", ""伊予銀行"")
            .put(""0175"", ""四国銀行"")
            .put(""0177"", ""福岡銀行"")
            .put(""0178"", ""筑邦銀行"")
            .put(""0179"", ""佐賀銀行"")
            .put(""0180"", ""十八銀行"")
            .put(""0181"", ""親和銀行"")
            .put(""0182"", ""肥後銀行"")
            .put(""0183"", ""大分銀行"")
            .put(""0184"", ""宮崎銀行"")
            .put(""0185"", ""鹿児島銀行"")
            .put(""0187"", ""琉球銀行"")
            .put(""0188"", ""沖縄銀行"")
            .put(""0190"", ""西日本シティ銀行"")
            .put(""0191"", ""北九州銀行"")
            // }}}
            // {{{  信託銀行 (0288 ~ 0326)
            .put(""0288"", ""三菱ＵＦＪ信託銀行"")
            .put(""0289"", ""みずほ信託銀行"")
            .put(""0294"", ""三井住友信託銀行"")
            .put(""0295"", ""ＢＮＹＭ信託"")
            .put(""0297"", ""日本マスタートラスト信託銀行"")
            .put(""0299"", ""ステート信託"")
            .put(""0300"", ""ＳＭＢＣ信託銀行 プレスティア"")
            .put(""0304"", ""野村信託銀行"")
            .put(""0307"", ""オリックス銀行"")
            .put(""0310"", ""ＧＭＯあおぞらネット銀行"")
            .put(""0311"", ""農中信託"")
            .put(""0320"", ""新生信託"")
            .put(""0321"", ""日証金信託"")
            .put(""0324"", ""日本トラスティサービス信託銀行"")
            .put(""0325"", ""資産管理サービス信託銀行"")
            // }}}
            // {{{  旧長期信用銀行 (0397 ~ 0398)
            .put(""0397"", ""新生銀行"")
            .put(""0398"", ""あおぞら銀行"")
            // }}}
            // {{{ foreign banks (0400 ~ 0497)
            .put(""0401"", ""シティバンク、エヌ・エイ 銀行"")
            .put(""0402"", ""ＪＰモルガン・チェース銀行"")
            .put(""0403"", ""アメリカ銀行"")
            .put(""0411"", ""香港上海銀行"")
            .put(""0413"", ""スタンチヤート"")
            .put(""0414"", ""バークレイズ"")
            .put(""0421"", ""アグリコル"")
            .put(""0423"", ""ハナ"")
            .put(""0424"", ""印度"")
            .put(""0425"", ""兆豐國際商銀"")
            .put(""0426"", ""バンコツク"")
            .put(""0429"", ""バンクネガラ"")
            .put(""0430"", ""ドイツ銀行"")
            .put(""0432"", ""ブラジル"")
            .put(""0438"", ""ユーオバシーズ"")
            .put(""0439"", ""ユービーエス"")
            .put(""0442"", ""ＢＮＹメロン"")
            .put(""0443"", ""ビー・エヌ・ピー・パリバ銀行"")
            .put(""0444"", ""チヤイニーズ"")
            .put(""0445"", ""ソシエテ"")
            .put(""0456"", ""ユバフ"")
            .put(""0458"", ""ＤＢＳ"")
            .put(""0459"", ""パキスタン"")
            .put(""0460"", ""クレデイスイス"")
            .put(""0461"", ""コメルツ銀行"")
            .put(""0463"", ""ウニクレデイト"")
            .put(""0468"", ""インドステイト"")
            .put(""0471"", ""カナダロイヤル"")
            .put(""0472"", ""ＳＢＪ銀行"")
            .put(""0477"", ""ウリイ"")
            .put(""0482"", ""アイエヌジー"")
            .put(""0484"", ""ナツトオース"")
            .put(""0485"", ""アンズバンク"")
            .put(""0487"", ""コモンウエルス"")
            .put(""0489"", ""バンクチヤイナ"")
            .put(""0495"", ""ステストリート"")
            .put(""0498"", ""中小企業"")
            // }}}
            // {{{  第二地方銀行 (0501 ~ 0597)
            .put(""0501"", ""北洋銀行"")
            .put(""0508"", ""きらやか銀行"")
            .put(""0509"", ""北日本銀行"")
            .put(""0512"", ""仙台銀行"")
            .put(""0513"", ""福島銀行"")
            .put(""0514"", ""大東銀行"")
            .put(""0516"", ""東和銀行"")
            .put(""0517"", ""栃木銀行"")
            .put(""0522"", ""京葉銀行"")
            .put(""0525"", ""東日本銀行"")
            .put(""0526"", ""東京スター銀行"")
            .put(""0530"", ""神奈川銀行"")
            .put(""0532"", ""大光銀行"")
            .put(""0533"", ""長野銀行"")
            .put(""0534"", ""富山第一銀行"")
            .put(""0537"", ""福邦銀行"")
            .put(""0538"", ""静岡中央銀行"")
            .put(""0542"", ""愛知銀行"")
            .put(""0543"", ""名古屋銀行"")
            .put(""0544"", ""中京銀行"")
            .put(""0546"", ""第三銀行"")
            .put(""0555"", ""大正銀行"")
            .put(""0562"", ""みなと銀行"")
            .put(""0565"", ""島根銀行"")
            .put(""0566"", ""トマト銀行"")
            .put(""0569"", ""もみじ銀行"")
            .put(""0570"", ""西京銀行"")
            .put(""0572"", ""徳島銀行"")
            .put(""0573"", ""香川銀行"")
            .put(""0576"", ""愛媛銀行"")
            .put(""0578"", ""高知銀行"")
            .put(""0582"", ""福岡中央銀行"")
            .put(""0583"", ""佐賀共栄銀行"")
            .put(""0585"", ""長崎銀行"")
            .put(""0587"", ""熊本銀行"")
            .put(""0590"", ""豊和銀行"")
            .put(""0591"", ""宮崎太陽銀行"")
            .put(""0594"", ""南日本銀行"")
            .put(""0596"", ""沖縄海邦銀行"")
            // }}}
            // {{{ more foreign banks (0600 ~ 0999)
            .put(""0603"", ""韓国産業"")
            .put(""0607"", ""彰化商業"")
            .put(""0608"", ""ウエルズフアゴ"")
            .put(""0611"", ""第一商業"")
            .put(""0612"", ""台湾"")
            .put(""0615"", ""交通"")
            .put(""0616"", ""メトロポリタン"")
            .put(""0617"", ""フイリピン"")
            .put(""0619"", ""中国工商"")
            .put(""0621"", ""中國信託商業"")
            .put(""0623"", ""インテーザ"")
            .put(""0624"", ""國民"")
            .put(""0625"", ""中国建設"")
            .put(""0626"", ""イタウウニ"")
            .put(""0627"", ""ＢＢＶＡ"")
            .put(""0630"", ""中国農業"")
            .put(""0631"", ""台新"")
            .put(""0632"", ""玉山"")
            .put(""0633"", ""台湾企銀"")
            .put(""0808"", ""ドイツ証券"")
            .put(""0813"", ""ソシエテ証券"")
            .put(""0821"", ""ビーピー証券"")
            .put(""0822"", ""バークレイ証券"")
            .put(""0831"", ""アグリコル証券"")
            .put(""0832"", ""ジエイピー証券"")
            .put(""0842"", ""ゴルドマン証券"")
            .put(""0845"", ""ナツトウエ証券"")
            .put(""0900"", ""日本相互証券"")
            .put(""0905"", ""東京金融取引所"")
            .put(""0909"", ""日本クリア機構"")
            .put(""0910"", ""ほふりクリア"")
            .put(""0964"", ""しんきん証券"")
            .put(""0966"", ""ＨＳＢＣ証券"")
            .put(""0968"", ""セント東短証券"")
            .put(""0971"", ""ＵＢＳ証券"")
            .put(""0972"", ""メリル日本証券"")
            // }}}
            .build();

    // minor ~280 lesser known banks
    private static final Map<String, String> minorBanksJapanese = ImmutableMap.<String, String>builder()
            // {{{  信用金庫 (1001 ~ 1996)
            .put(""1000"", ""信金中央金庫"")
            .put(""1001"", ""北海道信金"")
            .put(""1003"", ""室蘭信金"")
            .put(""1004"", ""空知信金"")
            .put(""1006"", ""苫小牧信金"")
            .put(""1008"", ""北門信金"")
            .put(""1009"", ""伊達信金"")
            .put(""1010"", ""北空知信金"")
            .put(""1011"", ""日高信金"")
            .put(""1013"", ""渡島信金"")
            .put(""1014"", ""道南うみ街信金"")
            .put(""1020"", ""旭川信金"")
            .put(""1021"", ""稚内信金"")
            .put(""1022"", ""留萌信金"")
            .put(""1024"", ""北星信金"")
            .put(""1026"", ""帯広信金"")
            .put(""1027"", ""釧路信金"")
            .put(""1028"", ""大地みらい信金"")
            .put(""1030"", ""北見信金"")
            .put(""1031"", ""網走信金"")
            .put(""1033"", ""遠軽信金"")
            .put(""1104"", ""東奥信金"")
            .put(""1105"", ""青い森信金"")
            .put(""1120"", ""秋田信金"")
            .put(""1123"", ""羽後信金"")
            .put(""1140"", ""山形信金"")
            .put(""1141"", ""米沢信金"")
            .put(""1142"", ""鶴岡信金"")
            .put(""1143"", ""新庄信金"")
            .put(""1150"", ""盛岡信金"")
            .put(""1152"", ""宮古信金"")
            .put(""1153"", ""一関信金"")
            .put(""1154"", ""北上信金"")
            .put(""1155"", ""花巻信金"")
            .put(""1156"", ""水沢信金"")
            .put(""1170"", ""杜の都信金"")
            .put(""1171"", ""宮城第一信金"")
            .put(""1172"", ""石巻信金"")
            .put(""1174"", ""仙南信金"")
            .put(""1181"", ""会津信金"")
            .put(""1182"", ""郡山信金"")
            .put(""1184"", ""白河信金"")
            .put(""1185"", ""須賀川信金"")
            .put(""1186"", ""ひまわり信金"")
            .put(""1188"", ""あぶくま信金"")
            .put(""1189"", ""二本松信金"")
            .put(""1190"", ""福島信金"")
            .put(""1203"", ""高崎信金"")
            .put(""1204"", ""桐生信金"")
            .put(""1206"", ""アイオー信金"")
            .put(""1208"", ""利根郡信金"")
            .put(""1209"", ""館林信金"")
            .put(""1210"", ""北群馬信金"")
            .put(""1211"", ""しののめ信金"")
            .put(""1221"", ""足利小山信金"")
            .put(""1222"", ""栃木信金"")
            .put(""1223"", ""鹿沼相互信金"")
            .put(""1224"", ""佐野信金"")
            .put(""1225"", ""大田原信金"")
            .put(""1227"", ""烏山信金"")
            .put(""1240"", ""水戸信金"")
            .put(""1242"", ""結城信金"")
            .put(""1250"", ""埼玉県信金"")
            .put(""1251"", ""川口信金"")
            .put(""1252"", ""青木信金"")
            .put(""1253"", ""飯能信金"")
            .put(""1260"", ""千葉信金"")
            .put(""1261"", ""銚子信金"")
            .put(""1262"", ""東京ベイ信金"")
            .put(""1264"", ""館山信金"")
            .put(""1267"", ""佐原信金"")
            .put(""1280"", ""横浜信金"")
            .put(""1281"", ""かながわ信金"")
            .put(""1282"", ""湘南信金"")
            .put(""1283"", ""川崎信金"")
            .put(""1286"", ""平塚信金"")
            .put(""1288"", ""さがみ信金"")
            .put(""1289"", ""中栄信金"")
            .put(""1290"", ""中南信金"")
            .put(""1303"", ""朝日信金"")
            .put(""1305"", ""興産信金"")
            .put(""1310"", ""さわやか信金"")
            .put(""1311"", ""東京シテイ信金"")
            .put(""1319"", ""芝信金"")
            .put(""1320"", ""東京東信金"")
            .put(""1321"", ""東栄信金"")
            .put(""1323"", ""亀有信金"")
            .put(""1326"", ""小松川信金"")
            .put(""1327"", ""足立成和信金"")
            .put(""1333"", ""東京三協信金"")
            .put(""1336"", ""西京信金"")
            .put(""1341"", ""西武信金"")
            .put(""1344"", ""城南信金"")
            .put(""1345"", ""東京）昭和信金"")
            .put(""1346"", ""目黒信金"")
            .put(""1348"", ""世田谷信金"")
            .put(""1349"", ""東京信金"")
            .put(""1351"", ""城北信金"")
            .put(""1352"", ""滝野川信金"")
            .put(""1356"", ""巣鴨信金"")
            .put(""1358"", ""青梅信金"")
            .put(""1360"", ""多摩信金"")
            .put(""1370"", ""新潟信金"")
            .put(""1371"", ""長岡信金"")
            .put(""1373"", ""三条信金"")
            .put(""1374"", ""新発田信金"")
            .put(""1375"", ""柏崎信金"")
            .put(""1376"", ""上越信金"")
            .put(""1377"", ""新井信金"")
            .put(""1379"", ""村上信金"")
            .put(""1380"", ""加茂信金"")
            .put(""1385"", ""甲府信金"")
            .put(""1386"", ""山梨信金"")
            .put(""1390"", ""長野信金"")
            .put(""1391"", ""松本信金"")
            .put(""1392"", ""上田信金"")
            .put(""1393"", ""諏訪信金"")
            .put(""1394"", ""飯田信金"")
            .put(""1396"", ""アルプス信金"")
            .put(""1401"", ""富山信金"")
            .put(""1402"", ""高岡信金"")
            .put(""1405"", ""にいかわ信金"")
            .put(""1406"", ""氷見伏木信金"")
            .put(""1412"", ""砺波信金"")
            .put(""1413"", ""石動信金"")
            .put(""1440"", ""金沢信金"")
            .put(""1442"", ""のと共栄信金"")
            .put(""1444"", ""北陸信金"")
            .put(""1445"", ""鶴来信金"")
            .put(""1448"", ""興能信金"")
            .put(""1470"", ""福井信金"")
            .put(""1471"", ""敦賀信金"")
            .put(""1473"", ""小浜信金"")
            .put(""1475"", ""越前信金"")
            .put(""1501"", ""しず焼津信金"")
            .put(""1502"", ""静清信金"")
            .put(""1503"", ""浜松磐田信金"")
            .put(""1505"", ""沼津信金"")
            .put(""1506"", ""三島信金"")
            .put(""1507"", ""富士宮信金"")
            .put(""1513"", ""島田掛川信金"")
            .put(""1515"", ""静岡）富士信金"")
            .put(""1517"", ""遠州信金"")
            .put(""1530"", ""岐阜信金"")
            .put(""1531"", ""大垣西濃信金"")
            .put(""1532"", ""高山信金"")
            .put(""1533"", ""東濃信金"")
            .put(""1534"", ""関信金"")
            .put(""1538"", ""八幡信金"")
            .put(""1550"", ""愛知信金"")
            .put(""1551"", ""豊橋信金"")
            .put(""1552"", ""岡崎信金"")
            .put(""1553"", ""いちい信金"")
            .put(""1554"", ""瀬戸信金"")
            .put(""1555"", ""半田信金"")
            .put(""1556"", ""知多信金"")
            .put(""1557"", ""豊川信金"")
            .put(""1559"", ""豊田信金"")
            .put(""1560"", ""碧海信金"")
            .put(""1561"", ""西尾信金"")
            .put(""1562"", ""蒲郡信金"")
            .put(""1563"", ""尾西信金"")
            .put(""1565"", ""中日信金"")
            .put(""1566"", ""東春信金"")
            .put(""1580"", ""津信金"")
            .put(""1581"", ""北伊勢上野信金"")
            .put(""1583"", ""桑名三重信金"")
            .put(""1585"", ""紀北信金"")
            .put(""1602"", ""滋賀中央信金"")
            .put(""1603"", ""長浜信金"")
            .put(""1604"", ""湖東信金"")
            .put(""1610"", ""京都信金"")
            .put(""1611"", ""京都中央信金"")
            .put(""1620"", ""京都北都信金"")
            .put(""1630"", ""大阪信金"")
            .put(""1633"", ""大阪厚生信金"")
            .put(""1635"", ""大阪シテイ信金"")
            .put(""1636"", ""大阪商工信金"")
            .put(""1643"", ""永和信金"")
            .put(""1645"", ""北おおさか信金"")
            .put(""1656"", ""枚方信金"")
            .put(""1666"", ""奈良信金"")
            .put(""1667"", ""大和信金"")
            .put(""1668"", ""奈良中央信金"")
            .put(""1671"", ""新宮信金"")
            .put(""1674"", ""きのくに信金"")
            .put(""1680"", ""神戸信金"")
            .put(""1685"", ""姫路信金"")
            .put(""1686"", ""播州信金"")
            .put(""1687"", ""兵庫信金"")
            .put(""1688"", ""尼崎信金"")
            .put(""1689"", ""日新信金"")
            .put(""1691"", ""淡路信金"")
            .put(""1692"", ""但馬信金"")
            .put(""1694"", ""西兵庫信金"")
            .put(""1695"", ""中兵庫信金"")
            .put(""1696"", ""但陽信金"")
            .put(""1701"", ""鳥取信金"")
            .put(""1702"", ""米子信金"")
            .put(""1703"", ""倉吉信金"")
            .put(""1710"", ""しまね信金"")
            .put(""1711"", ""日本海信金"")
            .put(""1712"", ""島根中央信金"")
            .put(""1732"", ""おかやま信金"")
            .put(""1734"", ""水島信金"")
            .put(""1735"", ""津山信金"")
            .put(""1738"", ""玉島信金"")
            .put(""1740"", ""備北信金"")
            .put(""1741"", ""吉備信金"")
            .put(""1742"", ""日生信金"")
            .put(""1743"", ""備前信金"")
            .put(""1750"", ""広島信金"")
            .put(""1752"", ""呉信金"")
            .put(""1756"", ""しまなみ信金"")
            .put(""1758"", ""広島みどり信金"")
            .put(""1780"", ""萩山口信金"")
            .put(""1781"", ""西中国信金"")
            .put(""1789"", ""東山口信金"")
            .put(""1801"", ""徳島信金"")
            .put(""1803"", ""阿南信金"")
            .put(""1830"", ""高松信金"")
            .put(""1833"", ""観音寺信金"")
            .put(""1860"", ""愛媛信金"")
            .put(""1862"", ""宇和島信金"")
            .put(""1864"", ""東予信金"")
            .put(""1866"", ""川之江信金"")
            .put(""1880"", ""幡多信金"")
            .put(""1881"", ""高知信金"")
            .put(""1901"", ""福岡信金"")
            .put(""1903"", ""福岡ひびき信金"")
            .put(""1908"", ""大牟田柳川信金"")
            .put(""1909"", ""筑後信金"")
            .put(""1910"", ""飯塚信金"")
            .put(""1917"", ""大川信金"")
            .put(""1920"", ""遠賀信金"")
            .put(""1930"", ""唐津信金"")
            .put(""1931"", ""佐賀信金"")
            .put(""1933"", ""九州ひぜん信金"")
            .put(""1942"", ""たちばな信金"")
            .put(""1951"", ""熊本信金"")
            .put(""1952"", ""熊本第一信金"")
            .put(""1954"", ""熊本中央信金"")
            .put(""1960"", ""大分信金"")
            .put(""1962"", ""大分みらい信金"")
            .put(""1980"", ""宮崎都城信金"")
            .put(""1985"", ""高鍋信金"")
            .put(""1990"", ""鹿児島信金"")
            .put(""1991"", ""鹿児島相互信金"")
            .put(""1993"", ""奄美大島信金"")
            .put(""1996"", ""コザ信金"")
            // }}}
            // {{{  信用組合 (2011 ~ 2895)
            .put(""2004"", ""商工組合中央金庫"")
            .put(""2010"", ""全国信用協同組合連合会"")
            .put(""2213"", ""整理回収機構"")
            // }}}
            // {{{  労働金庫 (2951 ~ 2997)
            .put(""2950"", ""労働金庫連合会"")
            // }}}
            // {{{  農林中央金庫 (3000)
            .put(""3000"", ""農林中央金庫"")
            // }}}
            // {{{  信用農業協同組合連合会 (3001 ~ 3046)
            .put(""3001"", ""北海道信用農業協同組合連合会"")
            .put(""3003"", ""岩手県信用農業協同組合連合会"")
            .put(""3008"", ""茨城県信用農業協同組合連合会"")
            .put(""3011"", ""埼玉県信用農業協同組合連合会"")
            .put(""3013"", ""東京都信用農業協同組合連合会"")
            .put(""3014"", ""神奈川県信用農業協同組合連合会"")
            .put(""3015"", ""山梨県信用農業協同組合連合会"")
            .put(""3016"", ""長野県信用農業協同組合連合会"")
            .put(""3017"", ""新潟県信用農業協同組合連合会"")
            .put(""3019"", ""石川県信用農業協同組合連合会"")
            .put(""3020"", ""岐阜県信用農業協同組合連合会"")
            .put(""3021"", ""静岡県信用農業協同組合連合会"")
            .put(""3022"", ""愛知県信用農業協同組合連合会"")
            .put(""3023"", ""三重県信用農業協同組合連合会"")
            .put(""3024"", ""福井県信用農業協同組合連合会"")
            .put(""3025"", ""滋賀県信用農業協同組合連合会"")
            .put(""3026"", ""京都府信用農業協同組合連合会"")
            .put(""3027"", ""大阪府信用農業協同組合連合会"")
            .put(""3028"", ""兵庫県信用農業協同組合連合会"")
            .put(""3030"", ""和歌山県信用農業協同組合連合会"")
            .put(""3031"", ""鳥取県信用農業協同組合連合会"")
            .put(""3034"", ""広島県信用農業協同組合連合会"")
            .put(""3035"", ""山口県信用農業協同組合連合会"")
            .put(""3036"", ""徳島県信用農業協同組合連合会"")
            .put(""3037"", ""香川県信用農業協同組合連合会"")
            .put(""3038"", ""愛媛県信用農業協同組合連合会"")
            .put(""3039"", ""高知県信用農業協同組合連合会"")
            .put(""3040"", ""福岡県信用農業協同組合連合会"")
            .put(""3041"", ""佐賀県信用農業協同組合連合会"")
            .put(""3044"", ""大分県信用農業協同組合連合会"")
            .put(""3045"", ""宮崎県信用農業協同組合連合会"")
            .put(""3046"", ""鹿児島県信用農業協同組合連合会"")
            // }}}
            // {{{ ""JA Bank"" agricultural cooperative associations (3056 ~ 9375)
            // REMOVED: the farmers should use a real bank if they want to sell bitcoin
            // }}}
            // {{{  信用漁業協同組合連合会 (9450 ~ 9496)
            .put(""9450"", ""北海道信用漁業協同組合連合会"")
            .put(""9451"", ""青森県信用漁業協同組合連合会"")
            .put(""9452"", ""岩手県信用漁業協同組合連合会"")
            .put(""9453"", ""宮城県漁業協同組合"")
            .put(""9456"", ""福島県信用漁業協同組合連合会"")
            .put(""9457"", ""茨城県信用漁業協同組合連合会"")
            .put(""9461"", ""千葉県信用漁業協同組合連合会"")
            .put(""9462"", ""東京都信用漁業協同組合連合会"")
            .put(""9466"", ""新潟県信用漁業協同組合連合会"")
            .put(""9467"", ""富山県信用漁業協同組合連合会"")
            .put(""9468"", ""石川県信用漁業協同組合連合会"")
            .put(""9470"", ""静岡県信用漁業協同組合連合会"")
            .put(""9471"", ""愛知県信用漁業協同組合連合会"")
            .put(""9472"", ""三重県信用漁業協同組合連合会"")
            .put(""9473"", ""福井県信用漁業協同組合連合会"")
            .put(""9475"", ""京都府信用漁業協同組合連合会"")
            .put(""9477"", ""なぎさ信用漁業協同組合連合会"")
            .put(""9480"", ""鳥取県信用漁業協同組合連合会"")
            .put(""9481"", ""ＪＦしまね漁業協同組合"")
            .put(""9483"", ""広島県信用漁業協同組合連合会"")
            .put(""9484"", ""山口県漁業協同組合"")
            .put(""9485"", ""徳島県信用漁業協同組合連合会"")
            .put(""9486"", ""香川県信用漁業協同組合連合会"")
            .put(""9487"", ""愛媛県信用漁業協同組合連合会"")
            .put(""9488"", ""高知県信用漁業協同組合連合会"")
            .put(""9489"", ""福岡県信用漁業協同組合連合会"")
            .put(""9490"", ""佐賀県信用漁業協同組合連合会"")
            .put(""9491"", ""長崎県信用漁業協同組合連合会"")
            .put(""9493"", ""大分県漁業協同組合"")
            .put(""9494"", ""宮崎県信用漁業協同組合連合会"")
            .put(""9495"", ""鹿児島県信用漁業協同組合連合会"")
            .put(""9496"", ""沖縄県信用漁業協同組合連合会"")
            // }}}
            // {{{ securities firms
            .put(""9500"", ""東京短資"")
            .put(""9501"", ""セントラル短資"")
            .put(""9507"", ""上田八木短資"")
            .put(""9510"", ""日本証券金融"")
            .put(""9520"", ""野村証券"")
            .put(""9521"", ""日興証券"")
            .put(""9523"", ""大和証券"")
            .put(""9524"", ""みずほ証券"")
            .put(""9528"", ""岡三証券"")
            .put(""9530"", ""岩井コスモ証券"")
            .put(""9532"", ""三菱ＵＦＪ証券"")
            .put(""9534"", ""丸三証券"")
            .put(""9535"", ""東洋証券"")
            .put(""9537"", ""水戸証券"")
            .put(""9539"", ""東海東京証券"")
            .put(""9542"", ""むさし証券"")
            .put(""9545"", ""いちよし証券"")
            .put(""9573"", ""極東証券"")
            .put(""9574"", ""立花証券"")
            .put(""9579"", ""光世証券"")
            .put(""9584"", ""ちばぎん証券"")
            .put(""9589"", ""シテイ証券"")
            .put(""9594"", ""ＣＳ証券"")
            .put(""9595"", ""スタンレー証券"")
            .put(""9930"", ""日本政策投資"")
            .put(""9932"", ""政策金融公庫"")
            .put(""9933"", ""国際協力"")
            .put(""9945"", ""預金保険機構"")
            // }}}
            .build();

    private final static String ID_OPEN = """";
    private final static String ID_CLOSE = """";
    private final static String JA_OPEN = """";
    private final static String JA_CLOSE = """";
    private final static String EN_OPEN = """";
    private final static String EN_CLOSE = """";
    public final static String SPACE = "" "";

    // don't localize these strings into all languages,
    // all we want is either Japanese or English here.
    public static String getString(String id) {
        boolean ja = GUIUtil.getUserLanguage().equals(""ja"");

        switch (id) {
            case ""bank"":
                if (ja) return ""銀行名 ・金融機関名"";
                return ""Bank or Financial Institution"";
            case ""bank.select"":
                if (ja) return ""金融機関 ・銀行検索 (名称入力検索)"";
                return ""Search for Bank or Financial Institution"";
            case ""bank.code"":
                if (ja) return ""銀行コード"";
                return ""Zengin Bank Code"";
            case ""bank.name"":
                if (ja) return ""金融機関名 ・銀行名"";
                return ""Financial Institution / Bank Name"";

            case ""branch"":
                if (ja) return ""支店名"";
                return ""Bank Branch"";
            case ""branch.code"":
                if (ja) return ""支店コード"";
                return ""Zengin Branch Code"";
            case ""branch.code.validation.error"":
                if (ja) return ""入力は3桁の支店コードでなければなりません"";
                return ""Input must be a 3 digit branch code"";
            case ""branch.name"":
                if (ja) return ""支店名"";
                return ""Bank Branch Name"";

            case ""account"":
                if (ja) return ""銀行口座"";
                return ""Bank Account"";

            case ""account.type"":
                if (ja) return ""口座科目"";
                return ""Bank Account Type"";
            case ""account.type.select"":
                if (ja) return ""口座科目"";
                return ""Select Account Type"";
            // displayed while creating account
            case ""account.type.futsu"":
                if (ja) return ""普通"";
                return ""FUTSUU (ordinary) account"";
            case ""account.type.touza"":
                if (ja) return ""当座"";
                return ""TOUZA (checking) account"";
            case ""account.type.chochiku"":
                if (ja) return ""貯金"";
                return ""CHOCHIKU (special) account"";
            // used when saving account info
            case ""account.type.futsu.ja"":
                return ""普通"";
            case ""account.type.touza.ja"":
                return ""当座"";
            case ""account.type.chochiku.ja"":
                return ""貯金"";

            case ""account.number"":
                if (ja) return ""口座番号"";
                return ""Bank Account Number"";
            case ""account.number.validation.error"":
                if (ja) return ""入力は4〜8桁の口座番号でなければなりません"";
                return ""Input must be 4 ~ 8 digit account number"";
            case ""account.name"":
                if (ja) return ""口座名義"";
                return ""Bank Account Name"";

            // for japanese-only input fields
            case ""japanese.validation.error"":
                if (ja) return ""入力は漢字、ひらがな、またはカタカナでなければなりません"";
                return ""Input must be Kanji, Hiragana, or Katakana"";
            case ""japanese.validation.regex"":
                // epic regex to only match Japanese input
                return ""["" + // match any of these characters:
                        // ""Ａ-ｚ"" + // full-width alphabet
                        // ""０-９"" + // full-width numerals
                        ""一-龯"" + // common Japanese kanji (0x4e00 ~ 0x9faf)
                        ""々"" + // kanji iteration mark (0x3005)
                        ""〇"" + // kanji number zero (0x3007)
                        ""ぁ-ゞ"" + // hiragana (0x3041 ~ 0x309e)
                        ""ァ-・"" + // full-width katakana (0x30a1 ~ 0x30fb)
                        ""ｧ-ﾝﾞﾟ"" + // half-width katakana
                        ""ヽヾ゛゜ー"" + // 0x30fd, 0x30fe, 0x309b, 0x309c, 0x30fc
                        ""　"" + // full-width space
                        "" "" + // half-width space
                        ""]+""; // for any length
        }

        return ""null"";
    }
}",1,777 587 2000 123 305 777 809 2001 60 2002 62 2003 40 41 330 123 2001 60 2002 62 2004 61 744 2005 60 62 40 41 59 330 664 40 2006 46 2007 60 2002 44 2002 62 2008 58 2009 46 2010 40 41 41 123 2002 2011 61 2008 46 2012 40 41 59 2002 2013 61 2008 46 2014 40 41 59 2002 2015 61 2016 46 2017 40 2011 41 59 688 40 2015 323 2018 41 2015 61 2019 46 2017 40 2011 41 59 2004 46 2020 40 2021 40 2011 44 2015 44 2013 41 41 59 125 330 664 40 2006 46 2007 60 2002 44 2002 62 2008 58 2022 46 2010 40 41 41 123 2002 2023 61 2008 46 2024 40 41 59 2002 2025 61 2008 46 2026 40 41 59 330 688 40 2009 46 2027 40 2023 41 340 2028 41 605 59 2004 46 2029 40 2030 40 2023 44 2025 41 41 59 125 330 664 40 2006 46 2007 60 2002 44 2002 62 2008 58 2031 46 2010 40 41 41 123 2002 2032 61 2008 46 2033 40 41 59 2002 2034 61 2008 46 2035 40 41 59 2004 46 2036 40 2037 40 2032 44 2034 41 41 59 125 792 2004 59 125 330 330 773 809 2002 2038 40 2002 2039 44 2002 2040 44 2002 2041 41 330 123 792 2042 43 2039 43 2043 43 2044 43 2045 43 2040 43 2046 43 2044 43 2047 43 2041 43 2048 59 125 330 330 773 809 2002 2049 40 2002 2039 44 2002 2050 41 330 123 792 2051 43 2039 43 2052 43 2053 43 2054 43 2050 43 2055 59 125 330 330 773 809 657 2056 60 2002 44 2002 62 2057 61 2058 46 60 2002 44 2002 62 2059 40 41 330 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 46 2061 40 41 59 330 773 809 657 2056 60 2002 44 2002 62 2062 61 2058 46 60 2002 44 2002 62 2059 40 41 330 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 46 2061 40 41 59 330 773 809 657 2056 60 2002 44 2002 62 2063 61 2058 46 60 2002 44 2002 62 2059 40 41 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 330 330 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 330 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 46 2060 40 362 44 362 41 330 46 2061 40 41 59 773 657 809 2002 2064 61 362 59 773 657 809 2002 2065 61 362 59 773 657 809 2002 2066 61 362 59 773 657 809 2002 2067 61 362 59 773 657 809 2002 2068 61 362 59 773 657 809 2002 2069 61 362 59 777 657 809 2002 2070 61 362 59 330 330 777 809 2002 2071 40 2002 2072 41 123 570 2073 61 2074 46 2075 40 41 46 2076 40 362 41 59 819 40 2072 41 123 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 330 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 330 579 362 58 792 362 59 579 362 58 792 362 59 579 362 58 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 688 40 2073 41 792 362 59 792 362 59 330 579 362 58 688 40 2073 41 792 362 59 792 362 59 579 362 58 330 792 362 43 330 330 330 362 43 330 362 43 330 362 43 330 362 43 330 362 43 330 362 43 330 362 43 330 362 43 330 362 43 330 362 59 330 125 792 362 59 125 125 ,"{'AvgLine': 33, 'CountLine': 831, 'CountStmt': 100, 'MaxNesting': 2, 'AvgLineCode': 28, 'AvgEssential': 11, 'AvgLineBlank': 2, 'CountStmtExe': 85, 'MaxEssential': 41, 'SumEssential': 46, 'AvgCyclomatic': 12, 'CountLineCode': 745, 'CountStmtDecl': 27, 'MaxCyclomatic': 41, 'SumCyclomatic': 49, 'AvgLineComment': 6, 'CountClassBase': 1, 'CountLineBlank': 18, 'CountSemicolon': 68, 'CountDeclMethod': 4, 'CountLineCodeExe': 728, 'CountLineComment': 85, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 27, 'CountDeclMethodAll': 4, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.11', 'AvgCyclomaticStrict': 12, 'MaxCyclomaticStrict': 41, 'SumCyclomaticStrict': 49, 'CountDeclClassMethod': 4, 'AvgCyclomaticModified': 7, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 20, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 28, 'CountDeclClassVariable': 10, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 7, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
3328,Java,"public class CreateMakerFeeTx extends Task<PlaceOfferModel> {
    private static final Logger log = LoggerFactory.getLogger(CreateMakerFeeTx.class);

    @SuppressWarnings({""unused""})
    public CreateMakerFeeTx(TaskRunner<PlaceOfferModel> taskHandler, PlaceOfferModel model) {
        super(taskHandler, model);
    }

    @Override
    protected void run() {
        Offer offer = model.getOffer();

        try {
            runInterceptHook();

            String id = offer.getId();
            BtcWalletService walletService = model.getWalletService();

            Address fundingAddress = walletService.getOrCreateAddressEntry(id, AddressEntry.Context.OFFER_FUNDING).getAddress();
            Address reservedForTradeAddress = walletService.getOrCreateAddressEntry(id, AddressEntry.Context.RESERVED_FOR_TRADE).getAddress();
            Address changeAddress = walletService.getFreshAddressEntry().getAddress();

            TradeWalletService tradeWalletService = model.getTradeWalletService();

            String feeReceiver = FeeReceiverSelector.getAddress(model.getFilterManager());

            if (offer.isCurrencyForMakerFeeBtc()) {
                tradeWalletService.createBtcTradingFeeTx(
                        fundingAddress,
                        reservedForTradeAddress,
                        changeAddress,
                        model.getReservedFundsForOffer(),
                        model.isUseSavingsWallet(),
                        offer.getMakerFee(),
                        offer.getTxFee(),
                        feeReceiver,
                        true,
                        new TxBroadcaster.Callback() {
                            @Override
                            public void onSuccess(Transaction transaction) {
                                // we delay one render frame to be sure we don't get called before the method call has
                                // returned (tradeFeeTx would be null in that case)
                                UserThread.execute(() -> {
                                    if (!completed) {
                                        offer.setOfferFeePaymentTxId(transaction.getTxId().toString());
                                        model.setTransaction(transaction);
                                        walletService.swapTradeEntryToAvailableEntry(id, AddressEntry.Context.OFFER_FUNDING);

                                        model.getOffer().setState(Offer.State.OFFER_FEE_PAID);

                                        complete();
                                    } else {
                                        log.warn(""We got the onSuccess callback called after the timeout has been triggered a complete()."");
                                    }
                                });
                            }

                            @Override
                            public void onFailure(TxBroadcastException exception) {
                                if (!completed) {
                                    failed(exception);
                                } else {
                                    log.warn(""We got the onFailure callback called after the timeout has been triggered a complete()."");
                                }
                            }
                        });
            } else {
                BsqWalletService bsqWalletService = model.getBsqWalletService();
                Transaction preparedBurnFeeTx = model.getBsqWalletService().getPreparedTradeFeeTx(offer.getMakerFee());
                Transaction txWithBsqFee = tradeWalletService.completeBsqTradingFeeTx(preparedBurnFeeTx,
                        fundingAddress,
                        reservedForTradeAddress,
                        changeAddress,
                        model.getReservedFundsForOffer(),
                        model.isUseSavingsWallet(),
                        offer.getTxFee());

                Transaction signedTx = model.getBsqWalletService().signTxAndVerifyNoDustOutputs(txWithBsqFee);
                WalletService.checkAllScriptSignaturesForTx(signedTx);
                bsqWalletService.commitTx(signedTx, TxType.PAY_TRADE_FEE);
                // We need to create another instance, otherwise the tx would trigger an invalid state exception
                // if it gets committed 2 times
                tradeWalletService.commitTx(tradeWalletService.getClonedTransaction(signedTx));

                // We use a short timeout as there are issues with BSQ txs. See comment in TxBroadcaster
                bsqWalletService.broadcastTx(signedTx, new TxBroadcaster.Callback() {
                            @Override
                            public void onSuccess(@Nullable Transaction transaction) {
                                if (transaction != null) {
                                    offer.setOfferFeePaymentTxId(transaction.getTxId().toString());
                                    model.setTransaction(transaction);
                                    log.debug(""onSuccess, offerId={}, OFFER_FUNDING"", id);
                                    walletService.swapTradeEntryToAvailableEntry(id, AddressEntry.Context.OFFER_FUNDING);

                                    log.debug(""Successfully sent tx with id "" + transaction.getTxId().toString());
                                    model.getOffer().setState(Offer.State.OFFER_FEE_PAID);

                                    complete();
                                }
                            }

                            @Override
                            public void onFailure(TxBroadcastException exception) {
                                log.error(exception.toString());
                                exception.printStackTrace();
                                offer.setErrorMessage(""An error occurred.\n"" +
                                        ""Error message:\n""
                                        + exception.getMessage());
                                failed(exception);
                            }
                        },
                        1);
            }
        } catch (Throwable t) {
            if (t instanceof DaoDisabledException) {
                offer.setErrorMessage(""You cannot pay the trade fee in BSQ at the moment because the DAO features have been "" +
                        ""disabled due technical problems. Please use the BTC fee option until the issues are resolved. "" +
                        ""For more information please visit the Bisq Forum."");
            } else {
                offer.setErrorMessage(""An error occurred.\n"" +
                        ""Error message:\n""
                        + t.getMessage());
            }

            failed(t);
        }
    }
}",1,777 587 2000 650 2001 60 2002 62 123 773 809 657 2003 2004 61 2005 46 2006 40 2000 46 587 41 59 64 2007 40 123 362 125 41 777 2000 40 2008 60 2002 62 2009 44 2002 2010 41 123 818 40 2009 44 2010 41 59 125 64 2011 775 865 2012 40 41 123 2013 2014 61 2010 46 2015 40 41 59 830 123 2016 40 41 59 2017 2018 61 2014 46 2019 40 41 59 2020 2021 61 2010 46 2022 40 41 59 2023 2024 61 2021 46 2025 40 2018 44 2026 46 2027 46 2028 41 46 2029 40 41 59 2023 2030 61 2021 46 2025 40 2018 44 2026 46 2027 46 2031 41 46 2029 40 41 59 2023 2032 61 2021 46 2033 40 41 46 2029 40 41 59 2034 2035 61 2010 46 2036 40 41 59 2017 2037 61 2038 46 2029 40 2010 46 2039 40 41 41 59 688 40 2014 46 2040 40 41 41 123 2035 46 2041 40 2024 44 2030 44 2032 44 2010 46 2042 40 41 44 2010 46 2043 40 41 44 2014 46 2044 40 41 44 2014 46 2045 40 41 44 2037 44 2046 44 744 2047 46 2048 40 41 123 64 2011 777 865 2049 40 2050 2051 41 123 330 330 2052 46 2053 40 40 41 45 62 123 688 40 33 2054 41 123 2014 46 2055 40 2051 46 2056 40 41 46 2057 40 41 41 59 2010 46 2058 40 2051 41 59 2021 46 2059 40 2018 44 2026 46 2027 46 2028 41 59 2010 46 2015 40 41 46 2060 40 2013 46 2061 46 2062 41 59 2063 40 41 59 125 630 123 2004 46 2064 40 362 41 59 125 125 41 59 125 64 2011 777 865 2065 40 2066 2067 41 123 688 40 33 2068 41 123 2069 40 2067 41 59 125 630 123 2004 46 2070 40 362 41 59 125 125 125 41 59 125 630 123 2071 2072 61 2010 46 2073 40 41 59 2074 2075 61 2010 46 2073 40 41 46 2076 40 2014 46 2077 40 41 41 59 2074 2078 61 2035 46 2079 40 2075 44 2024 44 2030 44 2032 44 2010 46 2080 40 41 44 2010 46 2081 40 41 44 2014 46 2082 40 41 41 59 2074 2083 61 2010 46 2073 40 41 46 2084 40 2078 41 59 2085 46 2086 40 2083 41 59 2072 46 2087 40 2083 44 2088 46 2089 41 59 330 330 2035 46 2087 40 2035 46 2090 40 2083 41 41 59 330 2072 46 2091 40 2083 44 744 2092 46 2093 40 41 123 64 2011 777 865 2094 40 64 2095 2074 2096 41 123 688 40 2096 340 2097 41 123 2014 46 2098 40 2096 46 2099 40 41 46 2100 40 41 41 59 2010 46 2101 40 2096 41 59 2004 46 2102 40 362 44 2018 41 59 2021 46 2103 40 2018 44 2026 46 2027 46 2028 41 59 2004 46 2102 40 362 43 2096 46 2099 40 41 46 2100 40 41 41 59 2010 46 2015 40 41 46 2104 40 2013 46 2105 46 2106 41 59 2107 40 41 59 125 125 64 2011 777 865 2108 40 2109 2110 41 123 2004 46 2111 40 2110 46 2112 40 41 41 59 2110 46 2113 40 41 59 2014 46 2114 40 362 43 362 43 2110 46 2115 40 41 41 59 2116 40 2110 41 59 125 125 44 1501 41 59 125 125 580 40 2117 2118 41 123 688 40 2118 702 2119 41 123 2014 46 2120 40 362 43 362 43 362 41 59 125 630 123 2014 46 2121 40 362 43 362 43 2118 46 2122 40 41 41 59 125 2123 40 2118 41 59 125 125 125 ,"{'AvgLine': 61, 'CountLine': 128, 'CountStmt': 56, 'MaxNesting': 2, 'AvgLineCode': 51, 'AvgEssential': 1, 'AvgLineBlank': 7, 'CountStmtExe': 49, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 2, 'CountLineCode': 106, 'CountStmtDecl': 20, 'MaxCyclomatic': 4, 'SumCyclomatic': 5, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 17, 'CountSemicolon': 43, 'CountDeclMethod': 2, 'CountLineCodeExe': 88, 'CountLineComment': 5, 'CountClassCoupled': 20, 'CountClassDerived': 0, 'CountLineCodeDecl': 19, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.05', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 20, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
5508,Java,"@Slf4j
@Singleton
public final class ArbitrationManager extends DisputeManager<ArbitrationDisputeList> {

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    public ArbitrationManager(P2PService p2PService,
                              TradeWalletService tradeWalletService,
                              BtcWalletService walletService,
                              WalletsSetup walletsSetup,
                              TradeManager tradeManager,
                              ClosedTradableManager closedTradableManager,
                              OpenOfferManager openOfferManager,
                              DaoFacade daoFacade,
                              KeyRing keyRing,
                              ArbitrationDisputeListService arbitrationDisputeListService,
                              Config config,
                              PriceFeedService priceFeedService) {
        super(p2PService, tradeWalletService, walletService, walletsSetup, tradeManager, closedTradableManager,
                openOfferManager, daoFacade, keyRing, arbitrationDisputeListService, config, priceFeedService);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Implement template methods
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public SupportType getSupportType() {
        return SupportType.ARBITRATION;
    }

    @Override
    public void onSupportMessage(SupportMessage message) {
        if (canProcessMessage(message)) {
            log.info(""Received {} with tradeId {} and uid {}"",
                    message.getClass().getSimpleName(), message.getTradeId(), message.getUid());

            if (message instanceof OpenNewDisputeMessage) {
                onOpenNewDisputeMessage((OpenNewDisputeMessage) message);
            } else if (message instanceof PeerOpenedDisputeMessage) {
                onPeerOpenedDisputeMessage((PeerOpenedDisputeMessage) message);
            } else if (message instanceof ChatMessage) {
                onChatMessage((ChatMessage) message);
            } else if (message instanceof DisputeResultMessage) {
                onDisputeResultMessage((DisputeResultMessage) message);
            } else if (message instanceof PeerPublishedDisputePayoutTxMessage) {
                onDisputedPayoutTxMessage((PeerPublishedDisputePayoutTxMessage) message);
            } else {
                log.warn(""Unsupported message at dispatchMessage. message={}"", message);
            }
        }
    }

    @Nullable
    @Override
    public NodeAddress getAgentNodeAddress(Dispute dispute) {
        return null;
    }

    @Override
    protected Trade.DisputeState getDisputeStateStartedByPeer() {
        return Trade.DisputeState.DISPUTE_STARTED_BY_PEER;
    }

    @Override
    protected AckMessageSourceType getAckMessageSourceType() {
        return AckMessageSourceType.ARBITRATION_MESSAGE;
    }

    @Override
    public void cleanupDisputes() {
        disputeListService.cleanupDisputes(tradeId -> tradeManager.closeDisputedTrade(tradeId, Trade.DisputeState.DISPUTE_CLOSED));
    }

    @Override
    protected String getDisputeInfo(Dispute dispute) {
        String role = Res.get(""shared.arbitrator"").toLowerCase();
        String link = ""https://bisq.wiki/Arbitrator#Arbitrator_versus_Legacy_Arbitrator"";
        return Res.get(""support.initialInfo"", role, """", role, link);        // Arbitration is not used anymore
    }

    @Override
    protected String getDisputeIntroForPeer(String disputeInfo) {
        return Res.get(""support.peerOpenedDispute"", disputeInfo, Version.VERSION);
    }

    @Override
    protected String getDisputeIntroForDisputeCreator(String disputeInfo) {
        return Res.get(""support.youOpenedDispute"", disputeInfo, Version.VERSION);
    }

    @Override
    protected void addPriceInfoMessage(Dispute dispute, int counter) {
        // Arbitrator is not used anymore.
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Message handler
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    // We get that message at both peers. The dispute object is in context of the trader
    public void onDisputeResultMessage(DisputeResultMessage disputeResultMessage) {
        DisputeResult disputeResult = disputeResultMessage.getDisputeResult();
        ChatMessage chatMessage = disputeResult.getChatMessage();
        checkNotNull(chatMessage, ""chatMessage must not be null"");
        if (Arrays.equals(disputeResult.getArbitratorPubKey(),
                btcWalletService.getArbitratorAddressEntry().getPubKey())) {
            log.error(""Arbitrator received disputeResultMessage. That must never happen."");
            return;
        }

        String tradeId = disputeResult.getTradeId();
        Optional<Dispute> disputeOptional = findDispute(disputeResult);
        String uid = disputeResultMessage.getUid();
        if (!disputeOptional.isPresent()) {
            log.warn(""We got a dispute result msg but we don't have a matching dispute. "" +
                    ""That might happen when we get the disputeResultMessage before the dispute was created. "" +
                    ""We try again after 2 sec. to apply the disputeResultMessage. TradeId = "" + tradeId);
            if (!delayMsgMap.containsKey(uid)) {
                // We delay 2 sec. to be sure the comm. msg gets added first
                Timer timer = UserThread.runAfter(() -> onDisputeResultMessage(disputeResultMessage), 2);
                delayMsgMap.put(uid, timer);
            } else {
                log.warn(""We got a dispute result msg after we already repeated to apply the message after a delay. "" +
                        ""That should never happen. TradeId = "" + tradeId);
            }
            return;
        }

        Dispute dispute = disputeOptional.get();
        cleanupRetryMap(uid);
        if (!dispute.getChatMessages().contains(chatMessage)) {
            dispute.addAndPersistChatMessage(chatMessage);
        } else {
            log.warn(""We got a dispute mail msg what we have already stored. TradeId = "" + chatMessage.getTradeId());
        }
        dispute.setIsClosed();

        if (dispute.disputeResultProperty().get() != null) {
            log.warn(""We already got a dispute result. That should only happen if a dispute needs to be closed "" +
                    ""again because the first close did not succeed. TradeId = "" + tradeId);
        }

        dispute.setDisputeResult(disputeResult);
        Optional<Trade> tradeOptional = tradeManager.getTradeById(tradeId);
        String errorMessage = null;
        boolean success = false;
        try {
            // We need to avoid publishing the tx from both traders as it would create problems with zero confirmation withdrawals
            // There would be different transactions if both sign and publish (signers: once buyer+arb, once seller+arb)
            // The tx publisher is the winner or in case both get 50% the buyer, as the buyer has more inventive to publish the tx as he receives
            // more BTC as he has deposited
            Contract contract = dispute.getContract();

            boolean isBuyer = pubKeyRing.equals(contract.getBuyerPubKeyRing());
            DisputeResult.Winner publisher = disputeResult.getWinner();

            // Sometimes the user who receives the trade amount is never online, so we might want to
            // let the loser publish the tx. When the winner comes online he gets his funds as it was published by the other peer.
            // Default isLoserPublisher is set to false
            if (disputeResult.isLoserPublisher()) {
                // we invert the logic
                if (publisher == DisputeResult.Winner.BUYER)
                    publisher = DisputeResult.Winner.SELLER;
                else if (publisher == DisputeResult.Winner.SELLER)
                    publisher = DisputeResult.Winner.BUYER;
            }

            if ((isBuyer && publisher == DisputeResult.Winner.BUYER)
                    || (!isBuyer && publisher == DisputeResult.Winner.SELLER)) {

                Transaction payoutTx = null;
                if (tradeOptional.isPresent()) {
                    payoutTx = tradeOptional.get().getPayoutTx();
                } else {
                    Optional<Tradable> tradableOptional = closedTradableManager.getTradableById(tradeId);
                    if (tradableOptional.isPresent() && tradableOptional.get() instanceof Trade) {
                        payoutTx = ((Trade) tradableOptional.get()).getPayoutTx();
                    }
                }

                if (payoutTx == null) {
                    if (dispute.getDepositTxSerialized() != null) {
                        byte[] multiSigPubKey = isBuyer ? contract.getBuyerMultiSigPubKey() : contract.getSellerMultiSigPubKey();
                        DeterministicKey multiSigKeyPair = btcWalletService.getMultiSigKeyPair(tradeId, multiSigPubKey);
                        Transaction signedDisputedPayoutTx = tradeWalletService.traderSignAndFinalizeDisputedPayoutTx(
                                dispute.getDepositTxSerialized(),
                                disputeResult.getArbitratorSignature(),
                                disputeResult.getBuyerPayoutAmount(),
                                disputeResult.getSellerPayoutAmount(),
                                contract.getBuyerPayoutAddressString(),
                                contract.getSellerPayoutAddressString(),
                                multiSigKeyPair,
                                contract.getBuyerMultiSigPubKey(),
                                contract.getSellerMultiSigPubKey(),
                                disputeResult.getArbitratorPubKey()
                        );
                        Transaction committedDisputedPayoutTx = WalletService.maybeAddSelfTxToWallet(signedDisputedPayoutTx, btcWalletService.getWallet());
                        tradeWalletService.broadcastTx(committedDisputedPayoutTx, new TxBroadcaster.Callback() {
                            @Override
                            public void onSuccess(Transaction transaction) {
                                // after successful publish we send peer the tx
                                dispute.setDisputePayoutTxId(transaction.getTxId().toString());
                                sendPeerPublishedPayoutTxMessage(transaction, dispute, contract);
                                updateTradeOrOpenOfferManager(tradeId);
                            }

                            @Override
                            public void onFailure(TxBroadcastException exception) {
                                log.error(exception.getMessage());
                            }
                        }, 15);

                        success = true;
                    } else {
                        errorMessage = ""DepositTx is null. TradeId = "" + tradeId;
                        log.warn(errorMessage);
                        success = false;
                    }
                } else {
                    log.warn(""We already got a payout tx. That might be the case if the other peer did not get the "" +
                            ""payout tx and opened a dispute. TradeId = "" + tradeId);
                    dispute.setDisputePayoutTxId(payoutTx.getTxId().toString());
                    sendPeerPublishedPayoutTxMessage(payoutTx, dispute, contract);

                    success = true;
                }
            } else {
                log.trace(""We don't publish the tx as we are not the winning party."");
                // Clean up tangling trades
                if (dispute.disputeResultProperty().get() != null && dispute.isClosed()) {
                    updateTradeOrOpenOfferManager(tradeId);
                }

                success = true;
            }
        } catch (TransactionVerificationException e) {
            errorMessage = ""Error at traderSignAndFinalizeDisputedPayoutTx "" + e.toString();
            log.error(errorMessage, e);
            success = false;

            // We prefer to close the dispute in that case. If there was no deposit tx and a random tx was used
            // we get a TransactionVerificationException. No reason to keep that dispute open...
            updateTradeOrOpenOfferManager(tradeId);

            throw new RuntimeException(errorMessage);
        } catch (AddressFormatException | WalletException | SignatureDecodeException e) {
            errorMessage = ""Error at traderSignAndFinalizeDisputedPayoutTx "" + e.toString();
            log.error(errorMessage, e);
            success = false;
            throw new RuntimeException(errorMessage);
        } finally {
            // We use the chatMessage as we only persist those not the disputeResultMessage.
            // If we would use the disputeResultMessage we could not lookup for the msg when we receive the AckMessage.
            sendAckMessage(chatMessage, dispute.getAgentPubKeyRing(), success, errorMessage);
        }

        requestPersistence();
    }

    // Losing trader or in case of 50/50 the seller gets the tx sent from the winner or buyer
    private void onDisputedPayoutTxMessage(PeerPublishedDisputePayoutTxMessage peerPublishedDisputePayoutTxMessage) {
        String uid = peerPublishedDisputePayoutTxMessage.getUid();
        String tradeId = peerPublishedDisputePayoutTxMessage.getTradeId();
        Optional<Dispute> disputeOptional = findOwnDispute(tradeId);
        if (!disputeOptional.isPresent()) {
            log.debug(""We got a peerPublishedPayoutTxMessage but we don't have a matching dispute. TradeId = "" + tradeId);
            if (!delayMsgMap.containsKey(uid)) {
                // We delay 3 sec. to be sure the close msg gets added first
                Timer timer = UserThread.runAfter(() -> onDisputedPayoutTxMessage(peerPublishedDisputePayoutTxMessage), 3);
                delayMsgMap.put(uid, timer);
            } else {
                log.warn(""We got a peerPublishedPayoutTxMessage after we already repeated to apply the message after a delay. "" +
                        ""That should never happen. TradeId = "" + tradeId);
            }
            return;
        }

        Dispute dispute = disputeOptional.get();
        Contract contract = dispute.getContract();
        boolean isBuyer = pubKeyRing.equals(contract.getBuyerPubKeyRing());
        PubKeyRing peersPubKeyRing = isBuyer ? contract.getSellerPubKeyRing() : contract.getBuyerPubKeyRing();

        cleanupRetryMap(uid);

        Transaction committedDisputePayoutTx = WalletService.maybeAddNetworkTxToWallet(peerPublishedDisputePayoutTxMessage.getTransaction(), btcWalletService.getWallet());

        dispute.setDisputePayoutTxId(committedDisputePayoutTx.getTxId().toString());
        BtcWalletService.printTx(""Disputed payoutTx received from peer"", committedDisputePayoutTx);

        // We can only send the ack msg if we have the peersPubKeyRing which requires the dispute
        sendAckMessage(peerPublishedDisputePayoutTxMessage, peersPubKeyRing, true, null);
        requestPersistence();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Send messages
    ///////////////////////////////////////////////////////////////////////////////////////////

    // winner (or buyer in case of 50/50) sends tx to other peer
    private void sendPeerPublishedPayoutTxMessage(Transaction transaction, Dispute dispute, Contract contract) {
        PubKeyRing peersPubKeyRing = dispute.isDisputeOpenerIsBuyer() ? contract.getSellerPubKeyRing() : contract.getBuyerPubKeyRing();
        NodeAddress peersNodeAddress = dispute.isDisputeOpenerIsBuyer() ? contract.getSellerNodeAddress() : contract.getBuyerNodeAddress();
        log.trace(""sendPeerPublishedPayoutTxMessage to peerAddress {}"", peersNodeAddress);
        PeerPublishedDisputePayoutTxMessage message = new PeerPublishedDisputePayoutTxMessage(transaction.bitcoinSerialize(),
                dispute.getTradeId(),
                p2PService.getAddress(),
                UUID.randomUUID().toString(),
                getSupportType());
        log.info(""Send {} to peer {}. tradeId={}, uid={}"",
                message.getClass().getSimpleName(), peersNodeAddress, message.getTradeId(), message.getUid());
        mailboxMessageService.sendEncryptedMailboxMessage(peersNodeAddress,
                peersPubKeyRing,
                message,
                new SendMailboxMessageListener() {
                    @Override
                    public void onArrived() {
                        log.info(""{} arrived at peer {}. tradeId={}, uid={}"",
                                message.getClass().getSimpleName(), peersNodeAddress, message.getTradeId(), message.getUid());
                    }

                    @Override
                    public void onStoredInMailbox() {
                        log.info(""{} stored in mailbox for peer {}. tradeId={}, uid={}"",
                                message.getClass().getSimpleName(), peersNodeAddress, message.getTradeId(), message.getUid());
                    }

                    @Override
                    public void onFault(String errorMessage) {
                        log.error(""{} failed: Peer {}. tradeId={}, uid={}, errorMessage={}"",
                                message.getClass().getSimpleName(), peersNodeAddress, message.getTradeId(), message.getUid(), errorMessage);
                    }
                }
        );
    }

    private void updateTradeOrOpenOfferManager(String tradeId) {
        // set state after payout as we call swapTradeEntryToAvailableEntry
        if (tradeManager.getTradeById(tradeId).isPresent()) {
            tradeManager.closeDisputedTrade(tradeId, Trade.DisputeState.DISPUTE_CLOSED);
        } else {
            Optional<OpenOffer> openOfferOptional = openOfferManager.getOpenOfferById(tradeId);
            openOfferOptional.ifPresent(openOffer -> openOfferManager.closeOpenOffer(openOffer.getOffer()));
        }
    }
}",1,64 2000 64 2001 777 657 587 2002 650 2003 60 2004 62 123 331 330 331 64 2005 777 2002 40 2006 2007 44 2008 2009 44 2010 2011 44 2012 2013 44 2014 2015 44 2016 2017 44 2018 2019 44 2020 2021 44 2022 2023 44 2024 2025 44 2026 2027 44 2028 2029 41 123 818 40 2007 44 2009 44 2011 44 2013 44 2015 44 2017 44 2019 44 2021 44 2023 44 2025 44 2027 44 2029 41 59 125 331 330 331 64 2030 777 2031 2032 40 41 123 792 2031 46 2033 59 125 64 2030 777 865 2034 40 2035 2036 41 123 688 40 2037 40 2036 41 41 123 2038 46 2039 40 362 44 2036 46 2040 40 41 46 2041 40 41 44 2036 46 2042 40 41 44 2036 46 2043 40 41 41 59 688 40 2036 702 2044 41 123 2045 40 40 2044 41 2036 41 59 125 630 688 40 2036 702 2046 41 123 2047 40 40 2046 41 2036 41 59 125 630 688 40 2036 702 2048 41 123 2049 40 40 2048 41 2036 41 59 125 630 688 40 2036 702 2050 41 123 2051 40 40 2050 41 2036 41 59 125 630 688 40 2036 702 2052 41 123 2053 40 40 2052 41 2036 41 59 125 630 123 2038 46 2054 40 362 44 2036 41 59 125 125 125 64 2055 64 2030 777 2056 2057 40 2058 2059 41 123 792 2060 59 125 64 2030 775 2061 46 2062 2063 40 41 123 792 2061 46 2062 46 2064 59 125 64 2030 775 2065 2066 40 41 123 792 2065 46 2067 59 125 64 2030 777 865 2068 40 41 123 2069 46 2068 40 2070 45 62 2015 46 2071 40 2070 44 2061 46 2062 46 2072 41 41 59 125 64 2030 775 2073 2074 40 2058 2059 41 123 2073 2075 61 2076 46 2077 40 362 41 46 2078 40 41 59 2073 2079 61 362 59 792 2076 46 2077 40 362 44 2075 44 362 44 2075 44 2079 41 59 330 125 64 2030 775 2073 2080 40 2073 2081 41 123 792 2082 46 2083 40 362 44 2081 44 2084 46 2085 41 59 125 64 2030 775 2073 2086 40 2073 2081 41 123 792 2087 46 2088 40 362 44 2081 44 2089 46 2090 41 59 125 64 2030 775 865 2091 40 2058 2059 44 704 2092 41 123 330 125 331 330 331 64 2030 330 777 865 2093 40 2094 2095 41 123 2096 2097 61 2095 46 2098 40 41 59 2099 2100 61 2097 46 2101 40 41 59 2102 40 2100 44 362 41 59 688 40 2103 46 2104 40 2097 46 2105 40 41 44 2106 46 2107 40 41 46 2108 40 41 41 41 123 2109 46 2110 40 362 41 59 792 59 125 2073 2111 61 2097 46 2112 40 41 59 2113 60 2058 62 2114 61 2115 40 2097 41 59 2073 2116 61 2095 46 2117 40 41 59 688 40 33 2114 46 2118 40 41 41 123 2119 46 2120 40 362 43 362 43 362 43 2111 41 59 688 40 33 2121 46 2122 40 2116 41 41 123 330 2123 2124 61 2125 46 2126 40 40 41 45 62 2093 40 2095 41 44 1502 41 59 2121 46 2127 40 2116 44 2124 41 59 125 630 123 2119 46 2120 40 362 43 362 43 2111 41 59 125 792 59 125 2058 2059 61 2114 46 2128 40 41 59 2129 40 2116 41 59 688 40 33 2059 46 2130 40 41 46 2131 40 2100 41 41 123 2059 46 2132 40 2100 41 59 125 630 123 2133 46 2134 40 362 43 2100 46 2112 40 41 41 59 125 2059 46 2135 40 41 59 688 40 2059 46 2136 40 41 46 2128 40 41 340 2137 41 123 2138 46 2139 40 362 43 362 43 2111 41 59 125 2059 46 2140 40 2097 41 59 2113 60 2061 62 2141 61 2015 46 2142 40 2111 41 59 2073 2143 61 2137 59 570 2144 61 2145 59 830 123 330 330 330 330 2146 2147 61 2059 46 2148 40 41 59 570 2149 61 2150 46 2104 40 2147 46 2151 40 41 41 59 2096 46 2152 2153 61 2097 46 2154 40 41 59 330 330 330 688 40 2097 46 2155 40 41 41 123 330 688 40 2153 323 2096 46 2152 46 2156 41 2153 61 2096 46 2152 46 2157 59 630 688 40 2153 323 2096 46 2152 46 2157 41 2153 61 2096 46 2152 46 2156 59 125 688 40 40 2149 307 2153 323 2096 46 2152 46 2158 41 309 40 33 2149 307 2153 323 2096 46 2152 46 2159 41 41 123 2160 2161 61 2137 59 688 40 2141 46 2118 40 41 41 123 2161 61 2141 46 2128 40 41 46 2162 40 41 59 125 630 123 2113 60 2163 62 2164 61 2017 46 2165 40 2111 41 59 688 40 2164 46 2118 40 41 307 2164 46 2128 40 41 702 2061 41 123 2161 61 40 40 2061 41 2164 46 2128 40 41 41 46 2166 40 41 59 125 125 688 40 2161 323 2137 41 123 688 40 2059 46 2167 40 41 340 2137 41 123 574 91 93 2168 61 2149 63 2147 46 2169 40 41 58 2147 46 2170 40 41 59 2171 2172 61 2106 46 2173 40 2111 44 2168 41 59 2160 2174 61 2009 46 2175 40 2059 46 2167 40 41 44 2097 46 2176 40 41 44 2097 46 2177 40 41 44 2097 46 2178 40 41 44 2147 46 2179 40 41 44 2147 46 2180 40 41 44 2172 44 2147 46 2169 40 41 44 2147 46 2170 40 41 44 2097 46 2105 40 41 41 59 2160 2181 61 2182 46 2183 40 2174 44 2106 46 2184 40 41 41 59 2009 46 2185 40 2181 44 744 2186 46 2187 40 41 123 64 2030 777 865 2188 40 2160 2189 41 123 330 2059 46 2190 40 2189 46 2191 40 41 46 2192 40 41 41 59 2193 40 2189 44 2059 44 2147 41 59 2194 40 2111 41 59 125 64 2030 777 865 2195 40 2196 2197 41 123 2198 46 2199 40 2197 46 2200 40 41 41 59 125 125 44 1503 41 59 2144 61 2201 59 125 630 123 2143 61 362 43 2111 59 2202 46 2203 40 2143 41 59 2144 61 2145 59 125 125 630 123 2204 46 2205 40 362 43 362 43 2111 41 59 2059 46 2206 40 2161 46 2207 40 41 46 2208 40 41 41 59 2209 40 2161 44 2059 44 2147 41 59 2144 61 2210 59 125 125 630 123 2211 46 2212 40 362 41 59 330 688 40 2059 46 2136 40 41 46 2128 40 41 340 2137 307 2059 46 2213 40 41 41 123 2214 40 2111 41 59 125 2144 61 2215 59 125 125 580 40 2216 2217 41 123 2143 61 362 43 2217 46 2218 40 41 59 2219 46 2220 40 2143 44 2217 41 59 2144 61 2145 59 330 330 2221 40 2111 41 59 825 744 2222 40 2143 41 59 125 580 40 2223 124 2224 124 2225 2217 41 123 2143 61 362 43 2217 46 2226 40 41 59 2227 46 2228 40 2143 44 2217 41 59 2144 61 2145 59 825 744 2229 40 2143 41 59 125 658 123 330 330 2230 40 2100 44 2059 46 2231 40 41 44 2144 44 2143 41 59 125 2232 40 41 59 125 330 773 865 2233 40 2234 2235 41 123 2073 2236 61 2235 46 2237 40 41 59 2073 2238 61 2235 46 2239 40 41 59 2240 60 2058 62 2241 61 2242 40 2238 41 59 688 40 33 2241 46 2243 40 41 41 123 2244 46 2245 40 362 43 2238 41 59 688 40 33 2246 46 2247 40 2236 41 41 123 330 2248 2249 61 2250 46 2251 40 40 41 45 62 2233 40 2235 41 44 1502 41 59 2246 46 2252 40 2236 44 2249 41 59 125 630 123 2244 46 2253 40 362 43 362 43 2238 41 59 125 792 59 125 2058 2059 61 2241 46 2254 40 41 59 2255 2256 61 2059 46 2257 40 41 59 570 2258 61 2259 46 2260 40 2256 46 2261 40 41 41 59 2262 2263 61 2258 63 2256 46 2264 40 41 58 2256 46 2261 40 41 59 2265 40 2236 41 59 2266 2267 61 2268 46 2269 40 2235 46 2270 40 41 44 2271 46 2272 40 41 41 59 2059 46 2273 40 2267 46 2274 40 41 46 2275 40 41 41 59 2010 46 2276 40 362 44 2267 41 59 330 2277 40 2235 44 2263 44 2278 44 2279 41 59 2280 40 41 59 125 331 330 331 330 773 865 2281 40 2282 2283 44 2058 2059 44 2284 2285 41 123 2286 2287 61 2059 46 2288 40 41 63 2285 46 2289 40 41 58 2285 46 2290 40 41 59 2056 2291 61 2059 46 2288 40 41 63 2285 46 2292 40 41 58 2285 46 2293 40 41 59 2294 46 2295 40 362 44 2291 41 59 2234 2036 61 744 2234 40 2283 46 2296 40 41 44 2059 46 2297 40 41 44 2007 46 2298 40 41 44 2299 46 2300 40 41 46 2301 40 41 44 2032 40 41 41 59 2294 46 2302 40 362 44 2036 46 2303 40 41 46 2304 40 41 44 2291 44 2036 46 2297 40 41 44 2036 46 2305 40 41 41 59 2306 46 2307 40 2291 44 2287 44 2036 44 744 2308 40 41 123 64 2030 777 865 2309 40 41 123 2294 46 2302 40 362 44 2036 46 2303 40 41 46 2304 40 41 44 2291 44 2036 46 2297 40 41 44 2036 46 2305 40 41 41 59 125 64 2030 777 865 2310 40 41 123 2294 46 2302 40 362 44 2036 46 2303 40 41 46 2304 40 41 44 2291 44 2036 46 2297 40 41 44 2036 46 2305 40 41 41 59 125 64 2030 777 865 2311 40 2073 2312 41 123 2294 46 2313 40 362 44 2036 46 2303 40 41 46 2304 40 41 44 2291 44 2036 46 2297 40 41 44 2036 46 2305 40 41 44 2312 41 59 125 125 41 59 125 773 865 2314 40 2073 2315 41 123 330 688 40 2015 46 2316 40 2315 41 46 2317 40 41 41 123 2015 46 2318 40 2315 44 2061 46 2062 46 2319 41 59 125 630 123 2320 60 2321 62 2322 61 2019 46 2323 40 2315 41 59 2322 46 2324 40 2325 45 62 2019 46 2326 40 2325 46 2327 40 41 41 41 59 125 125 125 ,"{'AvgLine': 20, 'CountLine': 352, 'CountStmt': 156, 'MaxNesting': 2, 'AvgLineCode': 17, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 131, 'MaxEssential': 3, 'SumEssential': 21, 'AvgCyclomatic': 2, 'CountLineCode': 273, 'CountStmtDecl': 55, 'MaxCyclomatic': 18, 'SumCyclomatic': 48, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 45, 'CountSemicolon': 111, 'CountDeclMethod': 15, 'CountLineCodeExe': 191, 'CountLineComment': 36, 'CountClassCoupled': 49, 'CountClassDerived': 0, 'CountLineCodeDecl': 78, 'CountDeclMethodAll': 77, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.13', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 23, 'SumCyclomaticStrict': 53, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 6, 'MaxCyclomaticModified': 18, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 48, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 15, 'CountDeclMethodProtected': 6, 'CountClassCoupledModified': 49, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
3175,Java,"@Slf4j
public abstract class MutableOfferViewModel<M extends MutableOfferDataModel> extends ActivatableWithDataModel<M> {
    private final BtcValidator btcValidator;
    private final BsqValidator bsqValidator;
    protected final SecurityDepositValidator securityDepositValidator;
    protected final PriceFeedService priceFeedService;
    private final AccountAgeWitnessService accountAgeWitnessService;
    private final Navigation navigation;
    private final Preferences preferences;
    protected final CoinFormatter btcFormatter;
    private final BsqFormatter bsqFormatter;
    private final FiatVolumeValidator fiatVolumeValidator;
    private final FiatPriceValidator fiatPriceValidator;
    private final AltcoinValidator altcoinValidator;
    protected final OfferUtil offerUtil;

    private String amountDescription;
    private String addressAsString;
    private final String paymentLabel;
    private boolean createOfferRequested;

    public final StringProperty amount = new SimpleStringProperty();
    public final StringProperty minAmount = new SimpleStringProperty();
    protected final StringProperty buyerSecurityDeposit = new SimpleStringProperty();
    final StringProperty buyerSecurityDepositInBTC = new SimpleStringProperty();
    final StringProperty buyerSecurityDepositLabel = new SimpleStringProperty();

    // Price in the viewModel is always dependent on fiat/altcoin: Fiat/BTC, for altcoins we use inverted price.
    // The domain (dataModel) uses always the same price model (otherCurrencyBTC)
    // If we would change the price representation in the domain we would not be backward compatible
    public final StringProperty price = new SimpleStringProperty();
    public final StringProperty triggerPrice = new SimpleStringProperty("""");
    final StringProperty tradeFee = new SimpleStringProperty();
    final StringProperty tradeFeeInBtcWithFiat = new SimpleStringProperty();
    final StringProperty tradeFeeInBsqWithFiat = new SimpleStringProperty();
    final StringProperty tradeFeeCurrencyCode = new SimpleStringProperty();
    final StringProperty tradeFeeDescription = new SimpleStringProperty();
    final BooleanProperty isTradeFeeVisible = new SimpleBooleanProperty(false);

    // Positive % value means always a better price form the maker's perspective:
    // Buyer (with fiat): lower price as market
    // Buyer (with altcoin): higher (display) price as market (display price is inverted)
    public final StringProperty marketPriceMargin = new SimpleStringProperty();
    public final StringProperty volume = new SimpleStringProperty();
    final StringProperty volumeDescriptionLabel = new SimpleStringProperty();
    final StringProperty volumePromptLabel = new SimpleStringProperty();
    final StringProperty tradeAmount = new SimpleStringProperty();
    final StringProperty totalToPay = new SimpleStringProperty();
    final StringProperty errorMessage = new SimpleStringProperty();
    final StringProperty tradeCurrencyCode = new SimpleStringProperty();
    final StringProperty waitingForFundsText = new SimpleStringProperty("""");
    final StringProperty triggerPriceDescription = new SimpleStringProperty("""");
    final StringProperty percentagePriceDescription = new SimpleStringProperty("""");

    final BooleanProperty isPlaceOfferButtonDisabled = new SimpleBooleanProperty(true);
    final BooleanProperty cancelButtonDisabled = new SimpleBooleanProperty();
    public final BooleanProperty isNextButtonDisabled = new SimpleBooleanProperty(true);
    final BooleanProperty placeOfferCompleted = new SimpleBooleanProperty();
    final BooleanProperty showPayFundsScreenDisplayed = new SimpleBooleanProperty();
    private final BooleanProperty showTransactionPublishedScreen = new SimpleBooleanProperty();
    final BooleanProperty isWaitingForFunds = new SimpleBooleanProperty();
    final BooleanProperty isMinBuyerSecurityDeposit = new SimpleBooleanProperty();

    final ObjectProperty<InputValidator.ValidationResult> amountValidationResult = new SimpleObjectProperty<>();
    final ObjectProperty<InputValidator.ValidationResult> minAmountValidationResult = new SimpleObjectProperty<>();
    final ObjectProperty<InputValidator.ValidationResult> priceValidationResult = new SimpleObjectProperty<>();
    final ObjectProperty<InputValidator.ValidationResult> triggerPriceValidationResult = new SimpleObjectProperty<>(new InputValidator.ValidationResult(true));
    final ObjectProperty<InputValidator.ValidationResult> volumeValidationResult = new SimpleObjectProperty<>();
    final ObjectProperty<InputValidator.ValidationResult> buyerSecurityDepositValidationResult = new SimpleObjectProperty<>();

    private ChangeListener<String> amountStringListener;
    private ChangeListener<String> minAmountStringListener;
    private ChangeListener<String> priceStringListener, marketPriceMarginStringListener;
    private ChangeListener<String> volumeStringListener;
    private ChangeListener<String> securityDepositStringListener;

    private ChangeListener<Coin> amountAsCoinListener;
    private ChangeListener<Coin> minAmountAsCoinListener;
    private ChangeListener<Price> priceListener;
    private ChangeListener<Volume> volumeListener;
    private ChangeListener<Number> securityDepositAsDoubleListener;

    private ChangeListener<Boolean> isWalletFundedListener;
    private ChangeListener<String> errorMessageListener;
    protected Offer offer;
    private Timer timeoutTimer;
    private boolean inputIsMarketBasedPrice;
    private ChangeListener<Boolean> useMarketBasedPriceListener;
    private boolean ignorePriceStringListener, ignoreVolumeStringListener, ignoreAmountStringListener, ignoreSecurityDepositStringListener;
    private MarketPrice marketPrice;
    final IntegerProperty marketPriceAvailableProperty = new SimpleIntegerProperty(-1);
    private ChangeListener<Number> currenciesUpdateListener;
    protected boolean syncMinAmountWithAmount = true;
    private boolean makeOfferFromUnsignedAccountWarningDisplayed;

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    public MutableOfferViewModel(M dataModel,
                                 FiatVolumeValidator fiatVolumeValidator,
                                 FiatPriceValidator fiatPriceValidator,
                                 AltcoinValidator altcoinValidator,
                                 BtcValidator btcValidator,
                                 BsqValidator bsqValidator,
                                 SecurityDepositValidator securityDepositValidator,
                                 PriceFeedService priceFeedService,
                                 AccountAgeWitnessService accountAgeWitnessService,
                                 Navigation navigation,
                                 Preferences preferences,
                                 @Named(FormattingUtils.BTC_FORMATTER_KEY) CoinFormatter btcFormatter,
                                 BsqFormatter bsqFormatter,
                                 OfferUtil offerUtil) {
        super(dataModel);

        this.fiatVolumeValidator = fiatVolumeValidator;
        this.fiatPriceValidator = fiatPriceValidator;
        this.altcoinValidator = altcoinValidator;
        this.btcValidator = btcValidator;
        this.bsqValidator = bsqValidator;
        this.securityDepositValidator = securityDepositValidator;
        this.priceFeedService = priceFeedService;
        this.accountAgeWitnessService = accountAgeWitnessService;
        this.navigation = navigation;
        this.preferences = preferences;
        this.btcFormatter = btcFormatter;
        this.bsqFormatter = bsqFormatter;
        this.offerUtil = offerUtil;

        paymentLabel = Res.get(""createOffer.fundsBox.paymentLabel"", dataModel.shortOfferId);

        if (dataModel.getAddressEntry() != null) {
            addressAsString = dataModel.getAddressEntry().getAddressString();
        }
        createListeners();
    }

    @Override
    public void activate() {
        if (DevEnv.isDevMode()) {
            UserThread.runAfter(() -> {
                amount.set(""0.001"");
                price.set(""210000"");
                minAmount.set(amount.get());
                onFocusOutPriceAsPercentageTextField(true, false);
                applyMakerFee();
                setAmountToModel();
                setMinAmountToModel();
                setPriceToModel();
                dataModel.calculateVolume();
                dataModel.calculateTotalToPay();
                updateButtonDisableState();
                updateSpinnerInfo();
            }, 100, TimeUnit.MILLISECONDS);
        }

        addBindings();
        addListeners();

        updateButtonDisableState();

        updateMarketPriceAvailable();
    }

    @Override
    protected void deactivate() {
        removeBindings();
        removeListeners();
        stopTimeoutTimer();
    }

    private void addBindings() {
        if (dataModel.getDirection() == OfferDirection.BUY) {
            volumeDescriptionLabel.bind(createStringBinding(
                    () -> Res.get(""createOffer.amountPriceBox.buy.volumeDescription"", dataModel.getTradeCurrencyCode().get()),
                    dataModel.getTradeCurrencyCode()));
        } else {
            volumeDescriptionLabel.bind(createStringBinding(
                    () -> Res.get(""createOffer.amountPriceBox.sell.volumeDescription"", dataModel.getTradeCurrencyCode().get()),
                    dataModel.getTradeCurrencyCode()));
        }
        volumePromptLabel.bind(createStringBinding(
                () -> Res.get(""createOffer.volume.prompt"", dataModel.getTradeCurrencyCode().get()),
                dataModel.getTradeCurrencyCode()));

        totalToPay.bind(createStringBinding(() -> btcFormatter.formatCoinWithCode(dataModel.totalToPayAsCoinProperty().get()),
                dataModel.totalToPayAsCoinProperty()));

        tradeAmount.bind(createStringBinding(() -> btcFormatter.formatCoinWithCode(dataModel.getAmount().get()),
                dataModel.getAmount()));

        tradeCurrencyCode.bind(dataModel.getTradeCurrencyCode());

        triggerPriceDescription.bind(createStringBinding(this::getTriggerPriceDescriptionLabel,
                dataModel.getTradeCurrencyCode()));
        percentagePriceDescription.bind(createStringBinding(this::getPercentagePriceDescription,
                dataModel.getTradeCurrencyCode()));
    }

    private void removeBindings() {
        totalToPay.unbind();
        tradeAmount.unbind();
        tradeCurrencyCode.unbind();
        volumeDescriptionLabel.unbind();
        volumePromptLabel.unbind();
        triggerPriceDescription.unbind();
        percentagePriceDescription.unbind();
    }

    private void createListeners() {
        amountStringListener = (ov, oldValue, newValue) -> {
            if (!ignoreAmountStringListener) {
                if (isBtcInputValid(newValue).isValid) {
                    setAmountToModel();
                    dataModel.calculateVolume();
                    dataModel.calculateTotalToPay();
                }
                updateBuyerSecurityDeposit();
                updateButtonDisableState();
            }
        };
        minAmountStringListener = (ov, oldValue, newValue) -> {
            if (isBtcInputValid(newValue).isValid)
                setMinAmountToModel();
            updateButtonDisableState();
        };
        priceStringListener = (ov, oldValue, newValue) -> {
            updateMarketPriceAvailable();
            final String currencyCode = dataModel.getTradeCurrencyCode().get();
            if (!ignorePriceStringListener) {
                if (isPriceInputValid(newValue).isValid) {
                    setPriceToModel();
                    dataModel.calculateVolume();
                    dataModel.calculateTotalToPay();

                    if (!inputIsMarketBasedPrice) {
                        if (marketPrice != null && marketPrice.isRecentExternalPriceAvailable()) {
                            double marketPriceAsDouble = marketPrice.getPrice();
                            try {
                                double priceAsDouble = ParsingUtils.parseNumberStringToDouble(price.get());
                                double relation = priceAsDouble / marketPriceAsDouble;
                                final OfferDirection compareDirection = CurrencyUtil.isCryptoCurrency(currencyCode) ?
                                        OfferDirection.SELL :
                                        OfferDirection.BUY;
                                double percentage = dataModel.getDirection() == compareDirection ? 1 - relation : relation - 1;
                                percentage = MathUtils.roundDouble(percentage, 4);
                                dataModel.setMarketPriceMargin(percentage);
                                marketPriceMargin.set(FormattingUtils.formatToPercent(percentage));
                                applyMakerFee();
                            } catch (NumberFormatException t) {
                                marketPriceMargin.set("""");
                                new Popup().warning(Res.get(""validation.NaN"")).show();
                            }
                        } else {
                            log.debug(""We don't have a market price. We use the static price instead."");
                        }
                    }
                }
            }
            updateButtonDisableState();
        };
        marketPriceMarginStringListener = (ov, oldValue, newValue) -> {
            if (inputIsMarketBasedPrice) {
                try {
                    if (!newValue.isEmpty() && !newValue.equals(""-"")) {
                        double percentage = ParsingUtils.parsePercentStringToDouble(newValue);
                        if (percentage >= 1 || percentage <= -1) {
                            new Popup().warning(Res.get(""popup.warning.tooLargePercentageValue"") + ""\n"" +
                                            Res.get(""popup.warning.examplePercentageValue""))
                                    .show();
                        } else {
                            final String currencyCode = dataModel.getTradeCurrencyCode().get();
                            MarketPrice marketPrice = priceFeedService.getMarketPrice(currencyCode);
                            if (marketPrice != null && marketPrice.isRecentExternalPriceAvailable()) {
                                percentage = MathUtils.roundDouble(percentage, 4);
                                double marketPriceAsDouble = marketPrice.getPrice();
                                final boolean isCryptoCurrency = CurrencyUtil.isCryptoCurrency(currencyCode);
                                final OfferDirection compareDirection = isCryptoCurrency ?
                                        OfferDirection.SELL :
                                        OfferDirection.BUY;
                                double factor = dataModel.getDirection() == compareDirection ?
                                        1 - percentage :
                                        1 + percentage;
                                double targetPrice = marketPriceAsDouble * factor;
                                int precision = isCryptoCurrency ?
                                        Altcoin.SMALLEST_UNIT_EXPONENT : Fiat.SMALLEST_UNIT_EXPONENT;
                                // protect from triggering unwanted updates
                                ignorePriceStringListener = true;
                                price.set(FormattingUtils.formatRoundedDoubleWithPrecision(targetPrice, precision));
                                ignorePriceStringListener = false;
                                setPriceToModel();
                                dataModel.setMarketPriceMargin(percentage);
                                dataModel.calculateVolume();
                                dataModel.calculateTotalToPay();
                                updateButtonDisableState();
                                applyMakerFee();
                            } else {
                                marketPriceMargin.set("""");
                                String id = ""showNoPriceFeedAvailablePopup"";
                                if (preferences.showAgain(id)) {
                                    new Popup().warning(Res.get(""popup.warning.noPriceFeedAvailable""))
                                            .dontShowAgainId(id)
                                            .show();
                                }
                            }
                        }
                    }
                } catch (NumberFormatException t) {
                    log.error(t.toString());
                    t.printStackTrace();
                    new Popup().warning(Res.get(""validation.NaN"")).show();
                } catch (Throwable t) {
                    log.error(t.toString());
                    t.printStackTrace();
                    new Popup().warning(Res.get(""validation.inputError"", t.toString())).show();
                }
            }
        };
        useMarketBasedPriceListener = (observable, oldValue, newValue) -> {
            if (newValue)
                priceValidationResult.set(new InputValidator.ValidationResult(true));
        };

        volumeStringListener = (ov, oldValue, newValue) -> {
            if (!ignoreVolumeStringListener) {
                if (isVolumeInputValid(newValue).isValid) {
                    setVolumeToModel();
                    setPriceToModel();
                    dataModel.calculateAmount();
                    dataModel.calculateTotalToPay();
                }
                updateButtonDisableState();
            }
        };
        securityDepositStringListener = (ov, oldValue, newValue) -> {
            if (!ignoreSecurityDepositStringListener) {
                if (securityDepositValidator.validate(newValue).isValid) {
                    setBuyerSecurityDepositToModel();
                    dataModel.calculateTotalToPay();
                }
                updateButtonDisableState();
            }
        };


        amountAsCoinListener = (ov, oldValue, newValue) -> {
            if (newValue != null) {
                amount.set(btcFormatter.formatCoin(newValue));
                buyerSecurityDepositInBTC.set(btcFormatter.formatCoinWithCode(dataModel.getBuyerSecurityDepositAsCoin()));
            } else {
                amount.set("""");
                buyerSecurityDepositInBTC.set("""");
            }

            applyMakerFee();
        };
        minAmountAsCoinListener = (ov, oldValue, newValue) -> {
            if (newValue != null)
                minAmount.set(btcFormatter.formatCoin(newValue));
            else
                minAmount.set("""");
        };
        priceListener = (ov, oldValue, newValue) -> {
            ignorePriceStringListener = true;
            if (newValue != null)
                price.set(FormattingUtils.formatPrice(newValue));
            else
                price.set("""");

            ignorePriceStringListener = false;
            applyMakerFee();
        };
        volumeListener = (ov, oldValue, newValue) -> {
            ignoreVolumeStringListener = true;
            if (newValue != null)
                volume.set(VolumeUtil.formatVolume(newValue));
            else
                volume.set("""");

            ignoreVolumeStringListener = false;
            applyMakerFee();
        };

        securityDepositAsDoubleListener = (ov, oldValue, newValue) -> {
            if (newValue != null) {
                buyerSecurityDeposit.set(FormattingUtils.formatToPercent((double) newValue));
                if (dataModel.getAmount().get() != null) {
                    buyerSecurityDepositInBTC.set(btcFormatter.formatCoinWithCode(dataModel.getBuyerSecurityDepositAsCoin()));
                }
                updateBuyerSecurityDeposit();
            } else {
                buyerSecurityDeposit.set("""");
                buyerSecurityDepositInBTC.set("""");
            }
        };

        isWalletFundedListener = (ov, oldValue, newValue) -> updateButtonDisableState();

        currenciesUpdateListener = (observable, oldValue, newValue) -> {
            updateMarketPriceAvailable();
            updateButtonDisableState();
        };
    }

    private void applyMakerFee() {
        tradeFeeCurrencyCode.set(dataModel.isCurrencyForMakerFeeBtc() ? Res.getBaseCurrencyCode() : ""BSQ"");
        tradeFeeDescription.set(DevEnv.isDaoActivated() ? Res.get(""createOffer.tradeFee.descriptionBSQEnabled"") :
                Res.get(""createOffer.tradeFee.descriptionBTCOnly""));

        Coin makerFeeAsCoin = dataModel.getMakerFee();
        if (makerFeeAsCoin == null) {
            return;
        }

        isTradeFeeVisible.setValue(true);
        tradeFee.set(getFormatterForMakerFee().formatCoin(makerFeeAsCoin));
        tradeFeeInBtcWithFiat.set(OfferViewModelUtil.getTradeFeeWithFiatEquivalent(offerUtil,
                dataModel.getMakerFeeInBtc(),
                true,
                btcFormatter));
        tradeFeeInBsqWithFiat.set(OfferViewModelUtil.getTradeFeeWithFiatEquivalent(offerUtil,
                dataModel.getMakerFeeInBsq(),
                false,
                bsqFormatter));
    }


    private void updateMarketPriceAvailable() {
        marketPrice = priceFeedService.getMarketPrice(dataModel.getTradeCurrencyCode().get());
        marketPriceAvailableProperty.set(marketPrice == null || !marketPrice.isExternallyProvidedPrice() ? 0 : 1);
        dataModel.setMarketPriceAvailable(marketPrice != null && marketPrice.isExternallyProvidedPrice());
    }

    private void addListeners() {
        // Bidirectional bindings are used for all input fields: amount, price, volume and minAmount
        // We do volume/amount calculation during input, so user has immediate feedback
        amount.addListener(amountStringListener);
        minAmount.addListener(minAmountStringListener);
        price.addListener(priceStringListener);
        marketPriceMargin.addListener(marketPriceMarginStringListener);
        dataModel.getUseMarketBasedPrice().addListener(useMarketBasedPriceListener);
        volume.addListener(volumeStringListener);
        buyerSecurityDeposit.addListener(securityDepositStringListener);

        // Binding with Bindings.createObjectBinding does not work because of bi-directional binding
        dataModel.getAmount().addListener(amountAsCoinListener);
        dataModel.getMinAmount().addListener(minAmountAsCoinListener);
        dataModel.getPrice().addListener(priceListener);
        dataModel.getVolume().addListener(volumeListener);
        dataModel.getBuyerSecurityDeposit().addListener(securityDepositAsDoubleListener);

        // dataModel.feeFromFundingTxProperty.addListener(feeFromFundingTxListener);
        dataModel.getIsBtcWalletFunded().addListener(isWalletFundedListener);

        priceFeedService.updateCounterProperty().addListener(currenciesUpdateListener);
    }

    private void removeListeners() {
        amount.removeListener(amountStringListener);
        minAmount.removeListener(minAmountStringListener);
        price.removeListener(priceStringListener);
        marketPriceMargin.removeListener(marketPriceMarginStringListener);
        dataModel.getUseMarketBasedPrice().removeListener(useMarketBasedPriceListener);
        volume.removeListener(volumeStringListener);
        buyerSecurityDeposit.removeListener(securityDepositStringListener);

        // Binding with Bindings.createObjectBinding does not work because of bi-directional binding
        dataModel.getAmount().removeListener(amountAsCoinListener);
        dataModel.getMinAmount().removeListener(minAmountAsCoinListener);
        dataModel.getPrice().removeListener(priceListener);
        dataModel.getVolume().removeListener(volumeListener);
        dataModel.getBuyerSecurityDeposit().removeListener(securityDepositAsDoubleListener);

        //dataModel.feeFromFundingTxProperty.removeListener(feeFromFundingTxListener);
        dataModel.getIsBtcWalletFunded().removeListener(isWalletFundedListener);

        if (offer != null && errorMessageListener != null)
            offer.getErrorMessageProperty().removeListener(errorMessageListener);

        priceFeedService.updateCounterProperty().removeListener(currenciesUpdateListener);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    boolean initWithData(OfferDirection direction, TradeCurrency tradeCurrency) {
        boolean result = dataModel.initWithData(direction, tradeCurrency);
        if (dataModel.paymentAccount != null)
            btcValidator.setMaxValue(dataModel.paymentAccount.getPaymentMethod().getMaxTradeLimitAsCoin(dataModel.getTradeCurrencyCode().get()));
        btcValidator.setMaxTradeLimit(Coin.valueOf(dataModel.getMaxTradeLimit()));
        btcValidator.setMinValue(Restrictions.getMinTradeAmount());

        final boolean isBuy = dataModel.getDirection() == OfferDirection.BUY;
        amountDescription = Res.get(""createOffer.amountPriceBox.amountDescription"",
                isBuy ? Res.get(""shared.buy"") : Res.get(""shared.sell""));

        securityDepositValidator.setPaymentAccount(dataModel.paymentAccount);
        validateAndSetBuyerSecurityDepositToModel();
        buyerSecurityDeposit.set(FormattingUtils.formatToPercent(dataModel.getBuyerSecurityDeposit().get()));
        buyerSecurityDepositLabel.set(getSecurityDepositLabel());

        applyMakerFee();
        return result;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // UI actions
    ///////////////////////////////////////////////////////////////////////////////////////////

    void onPlaceOffer(Offer offer, Runnable resultHandler) {
        errorMessage.set(null);
        createOfferRequested = true;

        if (timeoutTimer == null) {
            timeoutTimer = UserThread.runAfter(() -> {
                stopTimeoutTimer();
                createOfferRequested = false;
                errorMessage.set(Res.get(""createOffer.timeoutAtPublishing""));

                updateButtonDisableState();
                updateSpinnerInfo();

                resultHandler.run();
            }, 60);
        }
        errorMessageListener = (observable, oldValue, newValue) -> {
            if (newValue != null) {
                stopTimeoutTimer();
                createOfferRequested = false;
                if (offer.getState() == Offer.State.OFFER_FEE_PAID)
                    errorMessage.set(newValue + Res.get(""createOffer.errorInfo""));
                else
                    errorMessage.set(newValue);

                updateButtonDisableState();
                updateSpinnerInfo();

                resultHandler.run();
            }
        };

        offer.errorMessageProperty().addListener(errorMessageListener);

        dataModel.onPlaceOffer(offer, transaction -> {
            stopTimeoutTimer();
            resultHandler.run();
            placeOfferCompleted.set(true);
            errorMessage.set(null);
        });

        updateButtonDisableState();
        updateSpinnerInfo();
    }

    public void onPaymentAccountSelected(PaymentAccount paymentAccount) {
        dataModel.onPaymentAccountSelected(paymentAccount);
        if (amount.get() != null)
            amountValidationResult.set(isBtcInputValid(amount.get()));

        btcValidator.setMaxValue(dataModel.paymentAccount.getPaymentMethod().getMaxTradeLimitAsCoin(dataModel.getTradeCurrencyCode().get()));
        btcValidator.setMaxTradeLimit(Coin.valueOf(dataModel.getMaxTradeLimit()));
        maybeShowMakeOfferToUnsignedAccountWarning();

        securityDepositValidator.setPaymentAccount(paymentAccount);
    }

    public void onCurrencySelected(TradeCurrency tradeCurrency) {
        dataModel.onCurrencySelected(tradeCurrency);

        marketPrice = priceFeedService.getMarketPrice(dataModel.getTradeCurrencyCode().get());
        marketPriceAvailableProperty.set(marketPrice == null || !marketPrice.isExternallyProvidedPrice() ? 0 : 1);
        updateButtonDisableState();
    }

    void onShowPayFundsScreen(Runnable actionHandler) {
        dataModel.updateEstimatedFeeAndTxVsize();
        dataModel.requestTxFee(actionHandler);
        showPayFundsScreenDisplayed.set(true);
        updateSpinnerInfo();
    }

    void fundFromSavingsWallet() {
        dataModel.fundFromSavingsWallet();
        if (dataModel.getIsBtcWalletFunded().get()) {
            updateButtonDisableState();
        } else {
            new Popup().warning(Res.get(""shared.notEnoughFunds"",
                            btcFormatter.formatCoinWithCode(dataModel.totalToPayAsCoinProperty().get()),
                            btcFormatter.formatCoinWithCode(dataModel.getTotalAvailableBalance())))
                    .actionButtonTextWithGoTo(""navigation.funds.depositFunds"")
                    .onAction(() -> navigation.navigateTo(MainView.class, FundsView.class, DepositView.class))
                    .show();
        }

    }

    public void setIsCurrencyForMakerFeeBtc(boolean isCurrencyForMakerFeeBtc) {
        dataModel.setPreferredCurrencyForMakerFeeBtc(isCurrencyForMakerFeeBtc);
        applyMakerFee();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Handle focus
    ///////////////////////////////////////////////////////////////////////////////////////////

    // On focus out we do validation and apply the data to the model
    void onFocusOutAmountTextField(boolean oldValue, boolean newValue) {
        if (oldValue && !newValue) {
            InputValidator.ValidationResult result = isBtcInputValid(amount.get());
            amountValidationResult.set(result);
            if (result.isValid) {
                setAmountToModel();
                ignoreAmountStringListener = true;
                amount.set(btcFormatter.formatCoin(dataModel.getAmount().get()));
                ignoreAmountStringListener = false;
                dataModel.calculateVolume();

                if (!dataModel.isMinAmountLessOrEqualAmount())
                    minAmount.set(amount.get());
                else
                    amountValidationResult.set(result);

                if (minAmount.get() != null)
                    minAmountValidationResult.set(isBtcInputValid(minAmount.get()));
            } else if (amount.get() != null && btcValidator.getMaxTradeLimit() != null && btcValidator.getMaxTradeLimit().value == OfferRestrictions.TOLERATED_SMALL_TRADE_AMOUNT.value) {
                amount.set(btcFormatter.formatCoin(btcValidator.getMaxTradeLimit()));
                new Popup().information(Res.get(""popup.warning.tradeLimitDueAccountAgeRestriction.buyer"",
                                btcFormatter.formatCoinWithCode(OfferRestrictions.TOLERATED_SMALL_TRADE_AMOUNT),
                                Res.get(""offerbook.warning.newVersionAnnouncement"")))
                        .width(900)
                        .show();
            }
            // We want to trigger a recalculation of the volume
            UserThread.execute(() -> {
                onFocusOutVolumeTextField(true, false);
                onFocusOutMinAmountTextField(true, false);
            });

            if (marketPriceMargin.get() == null && amount.get() != null && volume.get() != null) {
                updateMarketPriceToManual();
            }
        }
    }

    public void onFocusOutMinAmountTextField(boolean oldValue, boolean newValue) {
        if (oldValue && !newValue) {
            InputValidator.ValidationResult result = isBtcInputValid(minAmount.get());
            minAmountValidationResult.set(result);
            if (result.isValid) {
                Coin minAmountAsCoin = dataModel.getMinAmount().get();
                syncMinAmountWithAmount = minAmountAsCoin != null && minAmountAsCoin.equals(dataModel.getAmount().get());
                setMinAmountToModel();

                dataModel.calculateMinVolume();

                if (dataModel.getMinVolume().get() != null) {
                    InputValidator.ValidationResult minVolumeResult = isVolumeInputValid(
                            VolumeUtil.formatVolume(dataModel.getMinVolume().get()));

                    volumeValidationResult.set(minVolumeResult);

                    updateButtonDisableState();
                }

                this.minAmount.set(btcFormatter.formatCoin(minAmountAsCoin));

                if (!dataModel.isMinAmountLessOrEqualAmount()) {
                    this.amount.set(this.minAmount.get());
                } else {
                    minAmountValidationResult.set(result);
                    if (this.amount.get() != null)
                        amountValidationResult.set(isBtcInputValid(this.amount.get()));
                }
            } else {
                syncMinAmountWithAmount = true;
            }

            maybeShowMakeOfferToUnsignedAccountWarning();
        }
    }

    void onFocusOutTriggerPriceTextField(boolean oldValue, boolean newValue) {
        if (oldValue && !newValue) {
            onTriggerPriceTextFieldChanged();
        }
    }

    public void onTriggerPriceTextFieldChanged() {
        String triggerPriceAsString = triggerPrice.get();

        // Error field does not update if there was an error and then another different error
        // if not reset here. Not clear why...
        triggerPriceValidationResult.set(new InputValidator.ValidationResult(true));

        if (dataModel.getPrice().get() == null) // fix NPE @ bisq/issues/5166
            return;
        InputValidator.ValidationResult result = PriceUtil.isTriggerPriceValid(triggerPriceAsString,
                dataModel.getPrice().get(),
                dataModel.isSellOffer(),
                dataModel.isFiatCurrency());
        triggerPriceValidationResult.set(result);
        updateButtonDisableState();
        if (result.isValid) {
            // In case of 0 or empty string we set the string to empty string and data value to 0
            long triggerPriceAsLong = PriceUtil.getMarketPriceAsLong(triggerPriceAsString, dataModel.getCurrencyCode());
            dataModel.setTriggerPrice(triggerPriceAsLong);
            if (dataModel.getTriggerPrice() == 0) {
                triggerPrice.set("""");
            } else {
                triggerPrice.set(PriceUtil.formatMarketPrice(dataModel.getTriggerPrice(), dataModel.getCurrencyCode()));
            }
        }
    }

    void onFixPriceToggleChange(boolean fixedPriceSelected) {
        updateButtonDisableState();
        if (!fixedPriceSelected) {
            onTriggerPriceTextFieldChanged();
        }
    }

    void onFocusOutPriceTextField(boolean oldValue, boolean newValue) {
        if (oldValue && !newValue) {
            InputValidator.ValidationResult result = isPriceInputValid(price.get());
            priceValidationResult.set(result);
            if (result.isValid) {
                setPriceToModel();
                ignorePriceStringListener = true;
                if (dataModel.getPrice().get() != null)
                    price.set(FormattingUtils.formatPrice(dataModel.getPrice().get()));
                ignorePriceStringListener = false;
                dataModel.calculateVolume();
                dataModel.calculateAmount();
                applyMakerFee();
            }

            // We want to trigger a recalculation of the volume and minAmount
            UserThread.execute(() -> {
                onFocusOutVolumeTextField(true, false);
                triggerFocusOutOnAmountFields();
            });
        }
    }

    public void triggerFocusOutOnAmountFields() {
        onFocusOutAmountTextField(true, false);
        onFocusOutMinAmountTextField(true, false);
    }

    public void onFocusOutPriceAsPercentageTextField(boolean oldValue, boolean newValue) {
        inputIsMarketBasedPrice = !oldValue && newValue;
        if (oldValue && !newValue) {
            if (marketPriceMargin.get() == null) {
                // field wasn't set manually
                inputIsMarketBasedPrice = true;
            }
            marketPriceMargin.set(FormattingUtils.formatRoundedDoubleWithPrecision(dataModel.getMarketPriceMargin() * 100, 2));
        }

        // We want to trigger a recalculation of the volume, as well as update trigger price validation
        UserThread.execute(() -> {
            onFocusOutVolumeTextField(true, false);
            onTriggerPriceTextFieldChanged();
        });
    }

    void onFocusOutVolumeTextField(boolean oldValue, boolean newValue) {
        if (oldValue && !newValue) {
            InputValidator.ValidationResult result = isVolumeInputValid(volume.get());
            volumeValidationResult.set(result);
            if (result.isValid) {
                setVolumeToModel();
                ignoreVolumeStringListener = true;

                Volume volume = dataModel.getVolume().get();
                if (volume != null) {
                    // For HalCash we want multiple of 10 EUR
                    if (dataModel.isUsingHalCashAccount())
                        volume = VolumeUtil.getAdjustedVolumeForHalCash(volume);
                    else if (CurrencyUtil.isFiatCurrency(tradeCurrencyCode.get()))
                        volume = VolumeUtil.getRoundedFiatVolume(volume);

                    this.volume.set(VolumeUtil.formatVolume(volume));
                }

                ignoreVolumeStringListener = false;

                dataModel.calculateAmount();

                if (!dataModel.isMinAmountLessOrEqualAmount()) {
                    minAmount.set(amount.getValue());
                } else {
                    if (amount.get() != null)
                        amountValidationResult.set(isBtcInputValid(amount.get()));

                    // We only check minAmountValidationResult if amountValidationResult is valid, otherwise we would get
                    // triggered a close of the popup when the minAmountValidationResult is applied
                    if (amountValidationResult.getValue() != null && amountValidationResult.getValue().isValid && minAmount.get() != null)
                        minAmountValidationResult.set(isBtcInputValid(minAmount.get()));
                }
            }

            if (marketPriceMargin.get() == null && amount.get() != null && volume.get() != null) {
                updateMarketPriceToManual();
            }
        }
    }

    void onFocusOutBuyerSecurityDepositTextField(boolean oldValue, boolean newValue) {
        if (oldValue && !newValue) {
            InputValidator.ValidationResult result = securityDepositValidator.validate(buyerSecurityDeposit.get());
            buyerSecurityDepositValidationResult.set(result);
            if (result.isValid) {
                double defaultSecurityDeposit = Restrictions.getDefaultBuyerSecurityDepositAsPercent();
                String key = ""buyerSecurityDepositIsLowerAsDefault"";
                double depositAsDouble = ParsingUtils.parsePercentStringToDouble(buyerSecurityDeposit.get());
                if (preferences.showAgain(key) && depositAsDouble < defaultSecurityDeposit) {
                    String postfix = dataModel.isBuyOffer() ?
                            Res.get(""createOffer.tooLowSecDeposit.makerIsBuyer"") :
                            Res.get(""createOffer.tooLowSecDeposit.makerIsSeller"");
                    new Popup()
                            .warning(Res.get(""createOffer.tooLowSecDeposit.warning"",
                                    FormattingUtils.formatToPercentWithSymbol(defaultSecurityDeposit)) + ""\n\n"" + postfix)
                            .width(800)
                            .actionButtonText(Res.get(""createOffer.resetToDefault""))
                            .onAction(() -> {
                                dataModel.setBuyerSecurityDeposit(defaultSecurityDeposit);
                                ignoreSecurityDepositStringListener = true;
                                buyerSecurityDeposit.set(FormattingUtils.formatToPercent(dataModel.getBuyerSecurityDeposit().get()));
                                ignoreSecurityDepositStringListener = false;
                            })
                            .closeButtonText(Res.get(""createOffer.useLowerValue""))
                            .onClose(this::applyBuyerSecurityDepositOnFocusOut)
                            .dontShowAgainId(key)
                            .show();
                } else {
                    applyBuyerSecurityDepositOnFocusOut();
                }
            }
        }
    }

    private void applyBuyerSecurityDepositOnFocusOut() {
        setBuyerSecurityDepositToModel();
        ignoreSecurityDepositStringListener = true;
        buyerSecurityDeposit.set(FormattingUtils.formatToPercent(dataModel.getBuyerSecurityDeposit().get()));
        ignoreSecurityDepositStringListener = false;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    public boolean isPriceInRange() {
        if (marketPriceMargin.get() != null && !marketPriceMargin.get().isEmpty()) {
            if (Math.abs(ParsingUtils.parsePercentStringToDouble(marketPriceMargin.get())) > preferences.getMaxPriceDistanceInPercent()) {
                displayPriceOutOfRangePopup();
                return false;
            } else {
                return true;
            }
        } else {
            return true;
        }
    }

    private void displayPriceOutOfRangePopup() {
        Popup popup = new Popup();
        popup.warning(Res.get(""createOffer.priceOutSideOfDeviation"",
                        FormattingUtils.formatToPercentWithSymbol(preferences.getMaxPriceDistanceInPercent())))
                .actionButtonText(Res.get(""createOffer.changePrice""))
                .onAction(popup::hide)
                .closeButtonTextWithGoTo(""navigation.settings.preferences"")
                .onClose(() -> navigation.navigateTo(MainView.class, SettingsView.class, PreferencesView.class))
                .show();
    }

    CoinFormatter getBtcFormatter() {
        return btcFormatter;
    }

    public boolean isSellOffer() {
        return dataModel.getDirection() == OfferDirection.SELL;
    }

    public TradeCurrency getTradeCurrency() {
        return dataModel.getTradeCurrency();
    }

    public String getTradeAmount() {
        return OfferViewModelUtil.getTradeFeeWithFiatEquivalent(offerUtil,
                dataModel.getAmount().get(),
                true,
                btcFormatter);
    }

    public String getSecurityDepositLabel() {
        return Preferences.USE_SYMMETRIC_SECURITY_DEPOSIT ? Res.get(""createOffer.setDepositForBothTraders"") :
                dataModel.isBuyOffer() ? Res.get(""createOffer.setDepositAsBuyer"") : Res.get(""createOffer.setDeposit"");
    }

    public String getSecurityDepositPopOverLabel(String depositInBTC) {
        return dataModel.isBuyOffer() ? Res.get(""createOffer.securityDepositInfoAsBuyer"", depositInBTC) :
                Res.get(""createOffer.securityDepositInfo"", depositInBTC);
    }

    public String getSecurityDepositInfo() {
        return OfferViewModelUtil.getTradeFeeWithFiatEquivalentAndPercentage(offerUtil,
                dataModel.getSecurityDeposit(),
                dataModel.getAmount().get(),
                true,
                btcFormatter,
                Restrictions.getMinBuyerSecurityDepositAsCoin()
        );
    }

    public String getSecurityDepositWithCode() {
        return btcFormatter.formatCoinWithCode(dataModel.getSecurityDeposit());
    }


    public String getTradeFee() {
        if (dataModel.isCurrencyForMakerFeeBtc()) {
            return OfferViewModelUtil.getTradeFeeWithFiatEquivalentAndPercentage(offerUtil,
                    dataModel.getMakerFeeInBtc(),
                    dataModel.getAmount().get(),
                    true,
                    btcFormatter,
                    FeeService.getMinMakerFee(dataModel.isCurrencyForMakerFeeBtc()));
        } else {
            // For BSQ we use the fiat equivalent only. Calculating the % value would require to
            // calculate the BTC value of the BSQ fee and use that...
            return OfferViewModelUtil.getTradeFeeWithFiatEquivalent(offerUtil,
                    dataModel.getMakerFeeInBsq(),
                    false,
                    bsqFormatter);
        }
    }

    public String getMakerFeePercentage() {
        final Coin makerFeeAsCoin = dataModel.getMakerFee();
        if (dataModel.isCurrencyForMakerFeeBtc())
            return GUIUtil.getPercentage(makerFeeAsCoin, dataModel.getAmount().get());
        else
            return Res.get(""dao.paidWithBsq"");
    }

    public String getTotalToPayInfo() {
        if (dataModel.isCurrencyForMakerFeeBtc()) {
            return OfferViewModelUtil.getTradeFeeWithFiatEquivalent(offerUtil,
                    dataModel.totalToPayAsCoin.get(),
                    true,
                    btcFormatter);
        } else {
            return OfferViewModelUtil.getTradeFeeWithFiatEquivalent(offerUtil,
                    dataModel.totalToPayAsCoin.get(),
                    true,
                    btcFormatter) + "" + "" + getTradeFee();
        }
    }

    public String getFundsStructure() {
        String fundsStructure;
        if (dataModel.isCurrencyForMakerFeeBtc()) {
            fundsStructure = Res.get(""createOffer.fundsBox.fundsStructure"",
                    getSecurityDepositWithCode(), getMakerFeePercentage(), getTxFeePercentage());
        } else {
            fundsStructure = Res.get(""createOffer.fundsBox.fundsStructure.BSQ"",
                    getSecurityDepositWithCode(), getTxFeePercentage(), bsqFormatter.formatCoinWithCode(dataModel.getMakerFee()));
        }
        return fundsStructure;
    }

    public String getTxFee() {
        return OfferViewModelUtil.getTradeFeeWithFiatEquivalentAndPercentage(offerUtil,
                dataModel.getTxFee(),
                dataModel.getAmount().get(),
                true,
                btcFormatter,
                Coin.ZERO
        );
    }

    public String getTxFeePercentage() {
        Coin txFeeAsCoin = dataModel.getTxFee();
        return GUIUtil.getPercentage(txFeeAsCoin, dataModel.getAmount().get());
    }

    public PaymentAccount getPaymentAccount() {
        return dataModel.getPaymentAccount();
    }

    public String getAmountDescription() {
        return amountDescription;
    }

    public String getAddressAsString() {
        return addressAsString;
    }

    public String getPaymentLabel() {
        return paymentLabel;
    }

    public Offer createAndGetOffer() {
        offer = dataModel.createAndGetOffer();
        return offer;
    }

    public Callback<ListView<PaymentAccount>, ListCell<PaymentAccount>> getPaymentAccountListCellFactory(
            ComboBox<PaymentAccount> paymentAccountsComboBox) {
        return GUIUtil.getPaymentAccountListCellFactory(paymentAccountsComboBox, accountAgeWitnessService);
    }

    public M getDataModel() {
        return dataModel;
    }

    String getTriggerPriceDescriptionLabel() {
        String details;
        if (dataModel.isBuyOffer()) {
            details = dataModel.isCryptoCurrency() ?
                    Res.get(""account.notifications.marketAlert.message.msg.below"") :
                    Res.get(""account.notifications.marketAlert.message.msg.above"");
        } else {
            details = dataModel.isCryptoCurrency() ?
                    Res.get(""account.notifications.marketAlert.message.msg.above"") :
                    Res.get(""account.notifications.marketAlert.message.msg.below"");
        }
        return Res.get(""createOffer.triggerPrice.label"", details);
    }

    String getPercentagePriceDescription() {
        if (dataModel.isBuyOffer()) {
            return dataModel.isCryptoCurrency() ?
                    Res.get(""shared.aboveInPercent"") :
                    Res.get(""shared.belowInPercent"");
        } else {
            return dataModel.isCryptoCurrency() ?
                    Res.get(""shared.belowInPercent"") :
                    Res.get(""shared.aboveInPercent"");
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Utils
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void setAmountToModel() {
        if (amount.get() != null && !amount.get().isEmpty()) {
            Coin amount = DisplayUtils.parseToCoinWith4Decimals(this.amount.get(), btcFormatter);

            long maxTradeLimit = dataModel.getMaxTradeLimit();
            Price price = dataModel.getPrice().get();
            if (price != null && price.isPositive()) {
                if (dataModel.isUsingHalCashAccount())
                    amount = CoinUtil.getAdjustedAmountForHalCash(amount, price, maxTradeLimit);
                else if (CurrencyUtil.isFiatCurrency(tradeCurrencyCode.get()))
                    amount = CoinUtil.getRoundedFiatAmount(amount, price, maxTradeLimit);
            }
            dataModel.setAmount(amount);
            if (syncMinAmountWithAmount ||
                    dataModel.getMinAmount().get() == null ||
                    dataModel.getMinAmount().get().equals(Coin.ZERO)) {
                minAmount.set(this.amount.get());
                setMinAmountToModel();
            }
        } else {
            dataModel.setAmount(null);
        }
    }

    private void setMinAmountToModel() {
        if (minAmount.get() != null && !minAmount.get().isEmpty()) {
            Coin minAmount = DisplayUtils.parseToCoinWith4Decimals(this.minAmount.get(), btcFormatter);

            Price price = dataModel.getPrice().get();
            long maxTradeLimit = dataModel.getMaxTradeLimit();
            if (price != null && price.isPositive()) {
                if (dataModel.isUsingHalCashAccount())
                    minAmount = CoinUtil.getAdjustedAmountForHalCash(minAmount, price, maxTradeLimit);
                else if (CurrencyUtil.isFiatCurrency(tradeCurrencyCode.get()))
                    minAmount = CoinUtil.getRoundedFiatAmount(minAmount, price, maxTradeLimit);
            }

            dataModel.setMinAmount(minAmount);
        } else {
            dataModel.setMinAmount(null);
        }
    }

    private void setPriceToModel() {
        if (price.get() != null && !price.get().isEmpty()) {
            try {
                dataModel.setPrice(Price.parse(dataModel.getTradeCurrencyCode().get(), this.price.get()));
            } catch (Throwable t) {
                log.debug(t.getMessage());
            }
        } else {
            dataModel.setPrice(null);
        }
    }

    private void setVolumeToModel() {
        if (volume.get() != null && !volume.get().isEmpty()) {
            try {
                dataModel.setVolume(Volume.parse(volume.get(), dataModel.getTradeCurrencyCode().get()));
            } catch (Throwable t) {
                log.debug(t.getMessage());
            }
        } else {
            dataModel.setVolume(null);
        }
    }

    private void setBuyerSecurityDepositToModel() {
        if (buyerSecurityDeposit.get() != null && !buyerSecurityDeposit.get().isEmpty()) {
            dataModel.setBuyerSecurityDeposit(ParsingUtils.parsePercentStringToDouble(buyerSecurityDeposit.get()));
        } else {
            dataModel.setBuyerSecurityDeposit(Restrictions.getDefaultBuyerSecurityDepositAsPercent());
        }
    }

    private void validateAndSetBuyerSecurityDepositToModel() {
        // If the security deposit in the model is not valid percent
        String value = FormattingUtils.formatToPercent(dataModel.getBuyerSecurityDeposit().get());
        if (!securityDepositValidator.validate(value).isValid) {
            dataModel.setBuyerSecurityDeposit(Restrictions.getDefaultBuyerSecurityDepositAsPercent());
        }
    }

    private void maybeShowMakeOfferToUnsignedAccountWarning() {
        if (!makeOfferFromUnsignedAccountWarningDisplayed &&
                dataModel.getDirection() == OfferDirection.SELL &&
                PaymentMethod.hasChargebackRisk(dataModel.getPaymentAccount().getPaymentMethod(), dataModel.getTradeCurrency().getCode())) {
            Coin checkAmount = dataModel.getMinAmount().get() == null ? dataModel.getAmount().get() : dataModel.getMinAmount().get();
            if (checkAmount != null && !checkAmount.isGreaterThan(OfferRestrictions.TOLERATED_SMALL_TRADE_AMOUNT)) {
                makeOfferFromUnsignedAccountWarningDisplayed = true;
                GUIUtil.showMakeOfferToUnsignedAccountWarning();
            }
        }
    }

    private InputValidator.ValidationResult isBtcInputValid(String input) {
        return btcValidator.validate(input);
    }

    private InputValidator.ValidationResult isPriceInputValid(String input) {
        return getPriceValidator().validate(input);
    }

    private InputValidator.ValidationResult isVolumeInputValid(String input) {
        return getVolumeValidator().validate(input);
    }

    private MonetaryValidator getPriceValidator() {
        return CurrencyUtil.isCryptoCurrency(getTradeCurrency().getCode()) ? altcoinValidator : fiatPriceValidator;
    }

    private MonetaryValidator getVolumeValidator() {
        final String code = getTradeCurrency().getCode();
        if (CurrencyUtil.isCryptoCurrency(code)) {
            return code.equals(""BSQ"") ? bsqValidator : altcoinValidator;
        } else {
            return fiatVolumeValidator;
        }
    }

    private void updateSpinnerInfo() {
        if (!showPayFundsScreenDisplayed.get() ||
                errorMessage.get() != null ||
                showTransactionPublishedScreen.get()) {
            waitingForFundsText.set("""");
        } else if (dataModel.getIsBtcWalletFunded().get()) {
            waitingForFundsText.set("""");
        } else {
            waitingForFundsText.set(Res.get(""shared.waitingForFunds""));
        }

        isWaitingForFunds.set(!waitingForFundsText.get().isEmpty());
    }

    private void updateBuyerSecurityDeposit() {
        isMinBuyerSecurityDeposit.set(dataModel.isMinBuyerSecurityDeposit());

        if (dataModel.isMinBuyerSecurityDeposit()) {
            buyerSecurityDepositLabel.set(Res.get(""createOffer.minSecurityDepositUsed""));
            buyerSecurityDeposit.set(btcFormatter.formatCoin(Restrictions.getMinBuyerSecurityDepositAsCoin()));
        } else {
            buyerSecurityDepositLabel.set(getSecurityDepositLabel());
            buyerSecurityDeposit.set(FormattingUtils.formatToPercent(dataModel.getBuyerSecurityDeposit().get()));
        }
    }

    void updateButtonDisableState() {
        boolean inputDataValid = isBtcInputValid(amount.get()).isValid &&
                isBtcInputValid(minAmount.get()).isValid &&
                isPriceInputValid(price.get()).isValid &&
                dataModel.getPrice().get() != null &&
                dataModel.getPrice().get().getValue() != 0 &&
                isVolumeInputValid(volume.get()).isValid &&
                isVolumeInputValid(VolumeUtil.formatVolume(dataModel.getMinVolume().get())).isValid &&
                dataModel.isMinAmountLessOrEqualAmount();

        if (dataModel.useMarketBasedPrice.get() && dataModel.isMarketPriceAvailable()) {
            inputDataValid = inputDataValid && triggerPriceValidationResult.get().isValid;
        }

        // validating the percentage deposit value only makes sense if it is actually used
        if (!dataModel.isMinBuyerSecurityDeposit()) {
            inputDataValid = inputDataValid && securityDepositValidator.validate(buyerSecurityDeposit.get()).isValid;
        }

        isNextButtonDisabled.set(!inputDataValid);
        isPlaceOfferButtonDisabled.set(createOfferRequested || !inputDataValid || !dataModel.getIsBtcWalletFunded().get());
    }

    private void stopTimeoutTimer() {
        if (timeoutTimer != null) {
            timeoutTimer.stop();
            timeoutTimer = null;
        }
    }

    private CoinFormatter getFormatterForMakerFee() {
        return dataModel.isCurrencyForMakerFeeBtc() ? btcFormatter : bsqFormatter;
    }

    private void updateMarketPriceToManual() {
        final String currencyCode = dataModel.getTradeCurrencyCode().get();
        MarketPrice marketPrice = priceFeedService.getMarketPrice(currencyCode);
        if (marketPrice != null && marketPrice.isRecentExternalPriceAvailable()) {
            double marketPriceAsDouble = marketPrice.getPrice();
            double amountAsDouble = ParsingUtils.parseNumberStringToDouble(amount.get());
            double volumeAsDouble = ParsingUtils.parseNumberStringToDouble(volume.get());
            double manualPriceAsDouble = dataModel.calculateMarketPriceManual(marketPriceAsDouble, volumeAsDouble, amountAsDouble);

            final boolean isCryptoCurrency = CurrencyUtil.isCryptoCurrency(currencyCode);
            int precision = isCryptoCurrency ?
                    Altcoin.SMALLEST_UNIT_EXPONENT : Fiat.SMALLEST_UNIT_EXPONENT;
            price.set(FormattingUtils.formatRoundedDoubleWithPrecision(manualPriceAsDouble, precision));
            setPriceToModel();
            dataModel.calculateTotalToPay();
            updateButtonDisableState();
            applyMakerFee();
        } else {
            marketPriceMargin.set("""");
            String id = ""showNoPriceFeedAvailablePopup"";
            if (preferences.showAgain(id)) {
                new Popup().warning(Res.get(""popup.warning.noPriceFeedAvailable""))
                        .dontShowAgainId(id)
                        .show();
            }
        }
    }

    public boolean isShowBuyBsqHint() {
        return !dataModel.isBsqForFeeAvailable() && !dataModel.isAttemptToBuyBsq();
    }
}",1,64 2000 777 539 587 2001 60 2002 650 2003 62 650 2004 60 2002 62 123 773 657 2005 2006 59 773 657 2007 2008 59 775 657 2009 2010 59 775 657 2011 2012 59 773 657 2013 2014 59 773 657 2015 2016 59 773 657 2017 2018 59 775 657 2019 2020 59 773 657 2021 2022 59 773 657 2023 2024 59 773 657 2025 2026 59 773 657 2027 2028 59 775 657 2029 2030 59 773 2031 2032 59 773 2031 2033 59 773 657 2031 2034 59 773 570 2035 59 777 657 2036 2037 61 744 2038 40 41 59 777 657 2036 2039 61 744 2038 40 41 59 775 657 2036 2040 61 744 2038 40 41 59 657 2036 2041 61 744 2038 40 41 59 657 2036 2042 61 744 2038 40 41 59 330 330 330 777 657 2036 2043 61 744 2038 40 41 59 777 657 2036 2044 61 744 2038 40 362 41 59 657 2036 2045 61 744 2038 40 41 59 657 2036 2046 61 744 2038 40 41 59 657 2036 2047 61 744 2038 40 41 59 657 2036 2048 61 744 2038 40 41 59 657 2036 2049 61 744 2038 40 41 59 657 2050 2051 61 744 2052 40 2053 41 59 330 330 330 777 657 2036 2054 61 744 2038 40 41 59 777 657 2036 2055 61 744 2038 40 41 59 657 2036 2056 61 744 2038 40 41 59 657 2036 2057 61 744 2038 40 41 59 657 2036 2058 61 744 2038 40 41 59 657 2036 2059 61 744 2038 40 41 59 657 2036 2060 61 744 2038 40 41 59 657 2036 2061 61 744 2038 40 41 59 657 2036 2062 61 744 2038 40 362 41 59 657 2036 2063 61 744 2038 40 362 41 59 657 2036 2064 61 744 2038 40 362 41 59 657 2050 2065 61 744 2052 40 2066 41 59 657 2050 2067 61 744 2052 40 41 59 777 657 2050 2068 61 744 2052 40 2066 41 59 657 2050 2069 61 744 2052 40 41 59 657 2050 2070 61 744 2052 40 41 59 773 657 2050 2071 61 744 2052 40 41 59 657 2050 2072 61 744 2052 40 41 59 657 2050 2073 61 744 2052 40 41 59 657 2074 60 2075 46 2076 62 2077 61 744 2078 60 62 40 41 59 657 2074 60 2075 46 2076 62 2079 61 744 2078 60 62 40 41 59 657 2074 60 2075 46 2076 62 2080 61 744 2078 60 62 40 41 59 657 2074 60 2075 46 2076 62 2081 61 744 2078 60 62 40 744 2075 46 2076 40 2066 41 41 59 657 2074 60 2075 46 2076 62 2082 61 744 2078 60 62 40 41 59 657 2074 60 2075 46 2076 62 2083 61 744 2078 60 62 40 41 59 773 2084 60 2031 62 2085 59 773 2084 60 2031 62 2086 59 773 2084 60 2031 62 2087 44 2088 59 773 2084 60 2031 62 2089 59 773 2084 60 2031 62 2090 59 773 2084 60 2091 62 2092 59 773 2084 60 2091 62 2093 59 773 2084 60 2094 62 2095 59 773 2084 60 2096 62 2097 59 773 2084 60 2098 62 2099 59 773 2084 60 2100 62 2101 59 773 2084 60 2031 62 2102 59 775 2103 2104 59 773 2105 2106 59 773 570 2107 59 773 2084 60 2100 62 2108 59 773 570 2109 44 2110 44 2111 44 2112 59 773 2113 2114 59 657 2115 2116 61 744 2117 40 45 1501 41 59 773 2084 60 2098 62 2118 59 775 570 2119 61 2066 59 773 570 2120 59 331 330 331 777 2001 40 2002 2121 44 2023 2024 44 2025 2026 44 2027 2028 44 2005 2006 44 2007 2008 44 2009 2010 44 2011 2012 44 2013 2014 44 2015 2016 44 2017 2018 44 64 2122 40 2123 46 2124 41 2019 2020 44 2021 2022 44 2029 2030 41 123 818 40 2121 41 59 823 46 2024 61 2024 59 823 46 2026 61 2026 59 823 46 2028 61 2028 59 823 46 2006 61 2006 59 823 46 2008 61 2008 59 823 46 2010 61 2010 59 823 46 2012 61 2012 59 823 46 2014 61 2014 59 823 46 2016 61 2016 59 823 46 2018 61 2018 59 823 46 2020 61 2020 59 823 46 2022 61 2022 59 823 46 2030 61 2030 59 2034 61 2125 46 2126 40 362 44 2121 46 2127 41 59 688 40 2121 46 2128 40 41 340 2129 41 123 2033 61 2121 46 2128 40 41 46 2130 40 41 59 125 2131 40 41 59 125 64 2132 777 865 2133 40 41 123 688 40 2134 46 2135 40 41 41 123 2136 46 2137 40 40 41 45 62 123 2037 46 2138 40 362 41 59 2043 46 2138 40 362 41 59 2039 46 2138 40 2037 46 2139 40 41 41 59 2140 40 2066 44 2053 41 59 2141 40 41 59 2142 40 41 59 2143 40 41 59 2144 40 41 59 2121 46 2145 40 41 59 2121 46 2146 40 41 59 2147 40 41 59 2148 40 41 59 125 44 1503 44 2149 46 2150 41 59 125 2151 40 41 59 2152 40 41 59 2153 40 41 59 2154 40 41 59 125 64 2132 775 865 2155 40 41 123 2156 40 41 59 2157 40 41 59 2158 40 41 59 125 773 865 2159 40 41 123 688 40 2121 46 2160 40 41 323 2161 46 2162 41 123 2056 46 2163 40 2164 40 40 41 45 62 2165 46 2166 40 362 44 2121 46 2167 40 41 46 2166 40 41 41 44 2121 46 2167 40 41 41 41 59 125 630 123 2056 46 2168 40 2169 40 40 41 45 62 2170 46 2171 40 362 44 2121 46 2172 40 41 46 2171 40 41 41 44 2121 46 2172 40 41 41 41 59 125 2057 46 2173 40 2174 40 40 41 45 62 2175 46 2176 40 362 44 2121 46 2177 40 41 46 2176 40 41 41 44 2121 46 2177 40 41 41 41 59 2059 46 2173 40 2174 40 40 41 45 62 2020 46 2178 40 2121 46 2179 40 41 46 2176 40 41 41 44 2121 46 2179 40 41 41 41 59 2058 46 2173 40 2174 40 40 41 45 62 2020 46 2178 40 2121 46 2180 40 41 46 2176 40 41 41 44 2121 46 2180 40 41 41 41 59 2061 46 2173 40 2121 46 2177 40 41 41 59 2063 46 2173 40 2174 40 823 58 58 2181 44 2121 46 2177 40 41 41 41 59 2064 46 2173 40 2174 40 823 58 58 2182 44 2121 46 2177 40 41 41 41 59 125 773 865 2183 40 41 123 2059 46 2184 40 41 59 2058 46 2184 40 41 59 2061 46 2184 40 41 59 2056 46 2184 40 41 59 2057 46 2184 40 41 59 2063 46 2184 40 41 59 2064 46 2184 40 41 59 125 773 865 2185 40 41 123 2085 61 40 2186 44 2187 44 2188 41 45 62 123 688 40 33 2111 41 123 688 40 2189 40 2188 41 46 2190 41 123 2191 40 41 59 2121 46 2192 40 41 59 2121 46 2193 40 41 59 125 2194 40 41 59 2195 40 41 59 125 125 59 2086 61 40 2186 44 2187 44 2188 41 45 62 123 688 40 2196 40 2188 41 46 2197 41 2198 40 41 59 2199 40 41 59 125 59 2087 61 40 2186 44 2187 44 2188 41 45 62 123 2200 40 41 59 657 2031 2201 61 2121 46 2202 40 41 46 2203 40 41 59 688 40 33 2109 41 123 688 40 2204 40 2188 41 46 2205 41 123 2206 40 41 59 2121 46 2207 40 41 59 2121 46 2208 40 41 59 688 40 33 2107 41 123 688 40 2114 340 2209 307 2114 46 2210 40 41 41 123 625 2211 61 2114 46 2212 40 41 59 830 123 625 2213 61 2214 46 2215 40 2043 46 2203 40 41 41 59 625 2216 61 2213 47 2211 59 657 2217 2218 61 2219 46 2220 40 2201 41 63 2217 46 2221 58 2217 46 2222 59 625 2223 61 2121 46 2224 40 41 323 2218 63 1501 45 2216 58 2216 45 1501 59 2223 61 2225 46 2226 40 2223 44 1502 41 59 2121 46 2227 40 2223 41 59 2054 46 2228 40 2123 46 2229 40 2223 41 41 59 2230 40 41 59 125 580 40 2231 2232 41 123 2054 46 2233 40 362 41 59 744 2234 40 41 46 2235 40 2236 46 2203 40 362 41 41 46 2237 40 41 59 125 125 630 123 2238 46 2239 40 362 41 59 125 125 125 125 2240 40 41 59 125 59 2088 61 40 2186 44 2187 44 2188 41 45 62 123 688 40 2107 41 123 830 123 688 40 33 2188 46 2241 40 41 307 33 2188 46 2242 40 362 41 41 123 625 2243 61 2244 46 2245 40 2188 41 59 688 40 2243 325 1501 309 2243 329 45 1501 41 123 744 2246 40 41 46 2247 40 2248 46 2249 40 362 41 43 362 43 2248 46 2249 40 362 41 41 46 2250 40 41 59 125 630 123 657 2031 2251 61 2121 46 2252 40 41 46 2253 40 41 59 2113 2114 61 2012 46 2254 40 2251 41 59 688 40 2114 340 2255 307 2114 46 2256 40 41 41 123 2243 61 2257 46 2258 40 2243 44 1502 41 59 625 2259 61 2114 46 2260 40 41 59 657 570 2261 61 2262 46 2261 40 2251 41 59 657 2263 2264 61 2261 63 2263 46 2265 58 2263 46 2266 59 625 2267 61 2121 46 2268 40 41 323 2264 63 1501 45 2243 58 1501 43 2243 59 625 2269 61 2259 42 2267 59 704 2270 61 2261 63 2271 46 2272 58 2273 46 2272 59 330 2109 61 2066 59 2043 46 2274 40 2123 46 2275 40 2269 44 2270 41 41 59 2109 61 2053 59 2276 40 41 59 2121 46 2277 40 2243 41 59 2121 46 2278 40 41 59 2121 46 2279 40 41 59 2280 40 41 59 2281 40 41 59 125 630 123 2054 46 2282 40 362 41 59 2031 2283 61 362 59 688 40 2018 46 2284 40 2283 41 41 123 744 2285 40 41 46 2286 40 2287 46 2253 40 362 41 41 46 2288 40 2283 41 46 2289 40 41 59 125 125 125 125 125 580 40 2290 2291 41 123 2292 46 2293 40 2291 46 2294 40 41 41 59 2291 46 2295 40 41 59 744 2296 40 41 46 2297 40 2298 46 2299 40 362 41 41 46 2300 40 41 59 125 580 40 2301 2291 41 123 2302 46 2303 40 2291 46 2304 40 41 41 59 2291 46 2305 40 41 59 744 2306 40 41 46 2307 40 2308 46 2309 40 362 44 2291 46 2304 40 41 41 41 46 2310 40 41 59 125 125 125 59 2108 61 40 2311 44 2187 44 2188 41 45 62 123 688 40 2188 41 2080 46 2312 40 744 2075 46 2076 40 2066 41 41 59 125 59 2089 61 40 2186 44 2187 44 2188 41 45 62 123 688 40 33 2110 41 123 688 40 2313 40 2188 41 46 2314 41 123 2315 40 41 59 2316 40 41 59 2121 46 2317 40 41 59 2121 46 2318 40 41 59 125 2319 40 41 59 125 125 59 2090 61 40 2186 44 2187 44 2188 41 45 62 123 688 40 33 2112 41 123 688 40 2010 46 2320 40 2188 41 46 2321 41 123 2322 40 41 59 2121 46 2323 40 41 59 125 2324 40 41 59 125 125 59 2092 61 40 2186 44 2187 44 2188 41 45 62 123 688 40 2188 340 2325 41 123 2037 46 2326 40 2020 46 2327 40 2188 41 41 59 2041 46 2326 40 2020 46 2328 40 2121 46 2329 40 41 41 41 59 125 630 123 2037 46 2330 40 362 41 59 2041 46 2330 40 362 41 59 125 2331 40 41 59 125 59 2093 61 40 2186 44 2187 44 2188 41 45 62 123 688 40 2188 340 2332 41 2039 46 2333 40 2020 46 2334 40 2188 41 41 59 630 2039 46 2333 40 362 41 59 125 59 2095 61 40 2186 44 2187 44 2188 41 45 62 123 2109 61 2066 59 688 40 2188 340 2335 41 2043 46 2336 40 2123 46 2337 40 2188 41 41 59 630 2043 46 2336 40 362 41 59 2109 61 2053 59 2338 40 41 59 125 59 2097 61 40 2186 44 2187 44 2188 41 45 62 123 2110 61 2066 59 688 40 2188 340 2339 41 2055 46 2340 40 2341 46 2342 40 2188 41 41 59 630 2055 46 2340 40 362 41 59 2110 61 2053 59 2343 40 41 59 125 59 2099 61 40 2186 44 2187 44 2188 41 45 62 123 688 40 2188 340 2344 41 123 2040 46 2345 40 2123 46 2346 40 40 625 41 2188 41 41 59 688 40 2121 46 2347 40 41 46 2348 40 41 340 2344 41 123 2041 46 2345 40 2020 46 2349 40 2121 46 2350 40 41 41 41 59 125 2351 40 41 59 125 630 123 2040 46 2352 40 362 41 59 2041 46 2352 40 362 41 59 125 125 59 2101 61 40 2186 44 2187 44 2188 41 45 62 2353 40 41 59 2118 61 40 2311 44 2187 44 2188 41 45 62 123 2354 40 41 59 2353 40 41 59 125 59 125 773 865 2355 40 41 123 2048 46 2356 40 2121 46 2357 40 41 63 2358 46 2359 40 41 58 362 41 59 2049 46 2356 40 2360 46 2361 40 41 63 2358 46 2362 40 362 41 58 2358 46 2362 40 362 41 41 59 2091 2363 61 2121 46 2364 40 41 59 688 40 2363 323 2365 41 123 792 59 125 2051 46 2366 40 2066 41 59 2045 46 2356 40 2367 40 41 46 2368 40 2363 41 41 59 2046 46 2356 40 2369 46 2370 40 2030 44 2121 46 2371 40 41 44 2066 44 2020 41 41 59 2047 46 2356 40 2369 46 2370 40 2030 44 2121 46 2372 40 41 44 2053 44 2022 41 41 59 125 773 865 2373 40 41 123 2114 61 2012 46 2374 40 2121 46 2375 40 41 46 2376 40 41 41 59 2116 46 2377 40 2114 323 2378 309 33 2114 46 2379 40 41 63 1500 58 1501 41 59 2121 46 2380 40 2114 340 2378 307 2114 46 2379 40 41 41 59 125 773 865 2381 40 41 123 330 330 2037 46 2382 40 2085 41 59 2039 46 2382 40 2086 41 59 2043 46 2382 40 2087 41 59 2054 46 2382 40 2088 41 59 2121 46 2383 40 41 46 2382 40 2108 41 59 2055 46 2382 40 2089 41 59 2040 46 2382 40 2090 41 59 330 2121 46 2384 40 41 46 2382 40 2092 41 59 2121 46 2385 40 41 46 2382 40 2093 41 59 2121 46 2386 40 41 46 2382 40 2095 41 59 2121 46 2387 40 41 46 2382 40 2097 41 59 2121 46 2388 40 41 46 2382 40 2099 41 59 330 2121 46 2389 40 41 46 2382 40 2101 41 59 2012 46 2390 40 41 46 2382 40 2118 41 59 125 773 865 2391 40 41 123 2037 46 2392 40 2085 41 59 2039 46 2392 40 2086 41 59 2043 46 2392 40 2087 41 59 2054 46 2392 40 2088 41 59 2121 46 2393 40 41 46 2392 40 2108 41 59 2055 46 2392 40 2089 41 59 2040 46 2392 40 2090 41 59 330 2121 46 2394 40 41 46 2392 40 2092 41 59 2121 46 2395 40 41 46 2392 40 2093 41 59 2121 46 2396 40 41 46 2392 40 2095 41 59 2121 46 2397 40 41 46 2392 40 2097 41 59 2121 46 2398 40 41 46 2392 40 2099 41 59 330 2121 46 2399 40 41 46 2392 40 2101 41 59 688 40 2104 340 2400 307 2102 340 2400 41 2104 46 2401 40 41 46 2392 40 2102 41 59 2012 46 2402 40 41 46 2392 40 2118 41 59 125 331 330 331 570 2403 40 2404 2405 44 2406 2407 41 123 570 2408 61 2121 46 2403 40 2405 44 2407 41 59 688 40 2121 46 2409 340 2410 41 2006 46 2411 40 2121 46 2409 46 2412 40 41 46 2413 40 2121 46 2414 40 41 46 2415 40 41 41 41 59 2006 46 2416 40 2091 46 2417 40 2121 46 2418 40 41 41 41 59 2006 46 2419 40 2420 46 2421 40 41 41 59 657 570 2422 61 2121 46 2423 40 41 323 2404 46 2424 59 2032 61 2425 46 2415 40 362 44 2422 63 2425 46 2415 40 362 41 58 2425 46 2415 40 362 41 41 59 2010 46 2426 40 2121 46 2409 41 59 2427 40 41 59 2040 46 2428 40 2123 46 2429 40 2121 46 2430 40 41 46 2415 40 41 41 41 59 2042 46 2428 40 2431 40 41 41 59 2355 40 41 59 792 2408 59 125 331 330 331 865 2432 40 2103 2104 44 2433 2434 41 123 2060 46 2435 40 2436 41 59 2035 61 2066 59 688 40 2106 323 2436 41 123 2106 61 2437 46 2438 40 40 41 45 62 123 2439 40 41 59 2035 61 2053 59 2060 46 2435 40 2440 46 2441 40 362 41 41 59 2442 40 41 59 2443 40 41 59 2434 46 2444 40 41 59 125 44 1503 41 59 125 2102 61 40 2445 44 2446 44 2447 41 45 62 123 688 40 2447 340 2436 41 123 2448 40 41 59 2035 61 2053 59 688 40 2104 46 2449 40 41 323 2103 46 2450 46 2451 41 2060 46 2435 40 2447 43 2452 46 2453 40 362 41 41 59 630 2060 46 2435 40 2447 41 59 2454 40 41 59 2455 40 41 59 2434 46 2456 40 41 59 125 125 59 2104 46 2457 40 41 46 2458 40 2102 41 59 2121 46 2432 40 2104 44 2459 45 62 123 2460 40 41 59 2434 46 2461 40 41 59 2069 46 2435 40 2066 41 59 2060 46 2435 40 2436 41 59 125 41 59 2462 40 41 59 2463 40 41 59 125 777 865 2464 40 2465 2466 41 123 2121 46 2464 40 2466 41 59 688 40 2037 46 2467 40 41 340 2468 41 2077 46 2469 40 2470 40 2037 46 2467 40 41 41 41 59 2006 46 2471 40 2121 46 2466 46 2472 40 41 46 2473 40 2121 46 2474 40 41 46 2467 40 41 41 41 59 2006 46 2475 40 2091 46 2476 40 2121 46 2477 40 41 41 41 59 2478 40 41 59 2010 46 2479 40 2466 41 59 125 777 865 2480 40 2406 2407 41 123 2121 46 2480 40 2407 41 59 2114 61 2012 46 2481 40 2121 46 2482 40 41 46 2483 40 41 41 59 2116 46 2484 40 2114 323 2485 309 33 2114 46 2486 40 41 63 1500 58 1501 41 59 2487 40 41 59 125 865 2488 40 2433 2489 41 123 2121 46 2490 40 41 59 2121 46 2491 40 2489 41 59 2070 46 2492 40 2066 41 59 2493 40 41 59 125 865 2494 40 41 123 2121 46 2494 40 41 59 688 40 2121 46 2495 40 41 46 2496 40 41 41 123 2497 40 41 59 125 630 123 744 2498 40 41 46 2499 40 2500 46 2496 40 362 44 2020 46 2501 40 2121 46 2502 40 41 46 2496 40 41 41 44 2020 46 2501 40 2121 46 2503 40 41 41 41 41 46 2504 40 362 41 46 2505 40 40 41 45 62 2016 46 2506 40 2507 46 587 44 2508 46 587 44 2509 46 587 41 41 46 2510 40 41 59 125 125 777 865 2511 40 570 2512 41 123 2121 46 2513 40 2512 41 59 2355 40 41 59 125 331 330 331 330 865 2514 40 570 2515 44 570 2516 41 123 688 40 2515 307 33 2516 41 123 2075 46 2076 2517 61 2518 40 2037 46 2519 40 41 41 59 2077 46 2520 40 2517 41 59 688 40 2517 46 2521 41 123 2522 40 41 59 2111 61 2066 59 2037 46 2520 40 2020 46 2523 40 2121 46 2524 40 41 46 2519 40 41 41 41 59 2111 61 2053 59 2121 46 2525 40 41 59 688 40 33 2121 46 2526 40 41 41 2039 46 2520 40 2037 46 2519 40 41 41 59 630 2077 46 2520 40 2517 41 59 688 40 2039 46 2519 40 41 340 2527 41 2079 46 2520 40 2518 40 2039 46 2519 40 41 41 41 59 125 630 688 40 2037 46 2519 40 41 340 2528 307 2006 46 2529 40 41 340 2528 307 2006 46 2529 40 41 46 2530 323 2531 46 2532 46 2530 41 123 2037 46 2520 40 2020 46 2533 40 2006 46 2529 40 41 41 41 59 744 2534 40 41 46 2535 40 2536 46 2519 40 362 44 2020 46 2537 40 2531 46 2532 41 44 2536 46 2519 40 362 41 41 41 46 2538 40 1504 41 46 2539 40 41 59 125 330 2540 46 2541 40 40 41 45 62 123 2542 40 2066 44 2053 41 59 2543 40 2066 44 2053 41 59 125 41 59 688 40 2054 46 2519 40 41 323 2528 307 2037 46 2519 40 41 340 2528 307 2055 46 2519 40 41 340 2528 41 123 2544 40 41 59 125 125 125 777 865 2545 40 570 2515 44 570 2516 41 123 688 40 2515 307 33 2516 41 123 2075 46 2076 2546 61 2547 40 2039 46 2548 40 41 41 59 2079 46 2549 40 2546 41 59 688 40 2546 46 2550 41 123 2091 2551 61 2121 46 2552 40 41 46 2548 40 41 59 2119 61 2551 340 2553 307 2551 46 2554 40 2121 46 2555 40 41 46 2548 40 41 41 59 2556 40 41 59 2121 46 2557 40 41 59 688 40 2121 46 2558 40 41 46 2548 40 41 340 2553 41 123 2075 46 2076 2559 61 2560 40 2561 46 2562 40 2121 46 2558 40 41 46 2548 40 41 41 41 59 2082 46 2549 40 2559 41 59 2563 40 41 59 125 823 46 2039 46 2549 40 2020 46 2564 40 2551 41 41 59 688 40 33 2121 46 2565 40 41 41 123 823 46 2037 46 2549 40 823 46 2039 46 2548 40 41 41 59 125 630 123 2079 46 2549 40 2546 41 59 688 40 823 46 2037 46 2548 40 41 340 2553 41 2077 46 2549 40 2547 40 823 46 2037 46 2548 40 41 41 41 59 125 125 630 123 2119 61 2066 59 125 2566 40 41 59 125 125 865 2567 40 570 2515 44 570 2516 41 123 688 40 2515 307 33 2516 41 123 2568 40 41 59 125 125 777 865 2569 40 41 123 2031 2570 61 2044 46 2571 40 41 59 330 330 2081 46 2572 40 744 2075 46 2076 40 2066 41 41 59 688 40 2121 46 2573 40 41 46 2571 40 41 323 2574 41 330 792 59 2075 46 2076 2575 61 2576 46 2577 40 2570 44 2121 46 2573 40 41 46 2571 40 41 44 2121 46 2578 40 41 44 2121 46 2579 40 41 41 59 2081 46 2572 40 2575 41 59 2580 40 41 59 688 40 2575 46 2581 41 123 330 726 2582 61 2576 46 2583 40 2570 44 2121 46 2584 40 41 41 59 2121 46 2585 40 2582 41 59 688 40 2121 46 2586 40 41 323 1500 41 123 2044 46 2572 40 362 41 59 125 630 123 2044 46 2572 40 2576 46 2587 40 2121 46 2586 40 41 44 2121 46 2584 40 41 41 41 59 125 125 125 865 2588 40 570 2589 41 123 2590 40 41 59 688 40 33 2589 41 123 2569 40 41 59 125 125 865 2591 40 570 2515 44 570 2516 41 123 688 40 2515 307 33 2516 41 123 2075 46 2076 2592 61 2593 40 2043 46 2594 40 41 41 59 2080 46 2595 40 2592 41 59 688 40 2592 46 2596 41 123 2597 40 41 59 2109 61 2066 59 688 40 2121 46 2598 40 41 46 2594 40 41 340 2599 41 2043 46 2595 40 2123 46 2600 40 2121 46 2598 40 41 46 2594 40 41 41 41 59 2109 61 2053 59 2121 46 2601 40 41 59 2121 46 2602 40 41 59 2355 40 41 59 125 330 2603 46 2604 40 40 41 45 62 123 2605 40 2066 44 2053 41 59 2606 40 41 59 125 41 59 125 125 777 865 2607 40 41 123 2514 40 2066 44 2053 41 59 2545 40 2066 44 2053 41 59 125 777 865 2608 40 570 2515 44 570 2516 41 123 2107 61 33 2515 307 2516 59 688 40 2515 307 33 2516 41 123 688 40 2054 46 2609 40 41 323 2610 41 123 330 2107 61 2066 59 125 2054 46 2611 40 2123 46 2612 40 2121 46 2613 40 41 42 1503 44 1502 41 41 59 125 330 2614 46 2615 40 40 41 45 62 123 2616 40 2066 44 2053 41 59 2569 40 41 59 125 41 59 125 865 2617 40 570 2515 44 570 2516 41 123 688 40 2515 307 33 2516 41 123 2075 46 2076 2618 61 2619 40 2055 46 2620 40 41 41 59 2082 46 2621 40 2618 41 59 688 40 2618 46 2622 41 123 2623 40 41 59 2110 61 2066 59 2096 2055 61 2121 46 2624 40 41 46 2620 40 41 59 688 40 2055 340 2625 41 123 330 688 40 2121 46 2626 40 41 41 2055 61 2627 46 2628 40 2055 41 59 630 688 40 2629 46 2630 40 2061 46 2620 40 41 41 41 2055 61 2627 46 2631 40 2055 41 59 823 46 2055 46 2621 40 2627 46 2632 40 2055 41 41 59 125 2110 61 2053 59 2121 46 2633 40 41 59 688 40 33 2121 46 2634 40 41 41 123 2039 46 2621 40 2037 46 2635 40 41 41 59 125 630 123 688 40 2037 46 2620 40 41 340 2625 41 2077 46 2621 40 2636 40 2037 46 2620 40 41 41 41 59 330 330 688 40 2077 46 2637 40 41 340 2625 307 2077 46 2637 40 41 46 2622 307 2039 46 2620 40 41 340 2625 41 2079 46 2621 40 2636 40 2039 46 2620 40 41 41 41 59 125 125 688 40 2054 46 2620 40 41 323 2638 307 2037 46 2620 40 41 340 2638 307 2055 46 2620 40 41 340 2638 41 123 2639 40 41 59 125 125 125 865 2640 40 570 2515 44 570 2516 41 123 688 40 2515 307 33 2516 41 123 2075 46 2076 2641 61 2010 46 2642 40 2040 46 2643 40 41 41 59 2083 46 2644 40 2641 41 59 688 40 2641 46 2645 41 123 625 2646 61 2647 46 2648 40 41 59 2031 2649 61 362 59 625 2650 61 2651 46 2652 40 2040 46 2643 40 41 41 59 688 40 2018 46 2653 40 2649 41 307 2650 60 2646 41 123 2031 2654 61 2121 46 2655 40 41 63 2656 46 2643 40 362 41 58 2656 46 2643 40 362 41 59 744 2657 40 41 46 2658 40 2656 46 2643 40 362 44 2123 46 2659 40 2646 41 41 43 362 43 2654 41 46 2660 40 1504 41 46 2661 40 2656 46 2643 40 362 41 41 46 2662 40 40 41 45 62 123 2121 46 2663 40 2646 41 59 2112 61 2066 59 2040 46 2644 40 2123 46 2664 40 2121 46 2665 40 41 46 2643 40 41 41 41 59 2112 61 2053 59 125 41 46 2666 40 2656 46 2643 40 362 41 41 46 2667 40 823 58 58 2668 41 46 2669 40 2649 41 46 2670 40 41 59 125 630 123 2671 40 41 59 125 125 125 125 773 865 2672 40 41 123 2673 40 41 59 2112 61 2066 59 2040 46 2674 40 2123 46 2675 40 2121 46 2676 40 41 46 2677 40 41 41 41 59 2112 61 2053 59 125 331 330 331 777 570 2678 40 41 123 688 40 2054 46 2679 40 41 340 2680 307 33 2054 46 2679 40 41 46 2681 40 41 41 123 688 40 2682 46 2683 40 2684 46 2685 40 2054 46 2679 40 41 41 41 62 2018 46 2686 40 41 41 123 2687 40 41 59 792 2053 59 125 630 123 792 2066 59 125 125 630 123 792 2066 59 125 125 773 865 2688 40 41 123 2689 2690 61 744 2689 40 41 59 2690 46 2691 40 2692 46 2693 40 362 44 2123 46 2694 40 2018 46 2695 40 41 41 41 41 46 2696 40 2692 46 2693 40 362 41 41 46 2697 40 2690 58 58 2698 41 46 2699 40 362 41 46 2700 40 40 41 45 62 2016 46 2701 40 2702 46 587 44 2703 46 587 44 2704 46 587 41 41 46 2705 40 41 59 125 2019 2706 40 41 123 792 2020 59 125 777 570 2707 40 41 123 792 2121 46 2708 40 41 323 2404 46 2709 59 125 777 2406 2710 40 41 123 792 2121 46 2710 40 41 59 125 777 2031 2711 40 41 123 792 2712 46 2713 40 2030 44 2121 46 2714 40 41 46 2715 40 41 44 2066 44 2020 41 59 125 777 2031 2716 40 41 123 792 2017 46 2717 63 2718 46 2719 40 362 41 58 2121 46 2720 40 41 63 2718 46 2719 40 362 41 58 2718 46 2719 40 362 41 59 125 777 2031 2721 40 2031 2722 41 123 792 2121 46 2723 40 41 63 2724 46 2725 40 362 44 2722 41 58 2724 46 2725 40 362 44 2722 41 59 125 777 2031 2726 40 41 123 792 2727 46 2728 40 2030 44 2121 46 2729 40 41 44 2121 46 2730 40 41 46 2731 40 41 44 2066 44 2020 44 2732 46 2733 40 41 41 59 125 777 2031 2734 40 41 123 792 2020 46 2735 40 2121 46 2736 40 41 41 59 125 777 2031 2737 40 41 123 688 40 2121 46 2512 40 41 41 123 792 2738 46 2739 40 2030 44 2121 46 2740 40 41 44 2121 46 2741 40 41 46 2742 40 41 44 2066 44 2020 44 2743 46 2744 40 2121 46 2512 40 41 41 41 59 125 630 123 330 330 792 2745 46 2746 40 2030 44 2121 46 2747 40 41 44 2053 44 2022 41 59 125 125 777 2031 2748 40 41 123 657 2091 2749 61 2121 46 2750 40 41 59 688 40 2121 46 2512 40 41 41 792 2751 46 2752 40 2749 44 2121 46 2753 40 41 46 2754 40 41 41 59 630 792 2755 46 2754 40 362 41 59 125 777 2031 2756 40 41 123 688 40 2121 46 2512 40 41 41 123 792 2757 46 2758 40 2030 44 2121 46 2759 46 2760 40 41 44 2066 44 2020 41 59 125 630 123 792 2761 46 2762 40 2030 44 2121 46 2763 46 2764 40 41 44 2066 44 2020 41 43 362 43 2737 40 41 59 125 125 777 2031 2765 40 41 123 2031 2766 59 688 40 2121 46 2512 40 41 41 123 2766 61 2767 46 2768 40 362 44 2734 40 41 44 2748 40 41 44 2769 40 41 41 59 125 630 123 2766 61 2770 46 2771 40 362 44 2734 40 41 44 2772 40 41 44 2022 46 2773 40 2121 46 2774 40 41 41 41 59 125 792 2766 59 125 777 2031 2775 40 41 123 792 2776 46 2777 40 2030 44 2121 46 2775 40 41 44 2121 46 2778 40 41 46 2779 40 41 44 2066 44 2020 44 2091 46 2780 41 59 125 777 2031 2781 40 41 123 2091 2782 61 2121 46 2775 40 41 59 792 2783 46 2784 40 2782 44 2121 46 2785 40 41 46 2786 40 41 41 59 125 777 2465 2787 40 41 123 792 2121 46 2787 40 41 59 125 777 2031 2788 40 41 123 792 2032 59 125 777 2031 2789 40 41 123 792 2033 59 125 777 2031 2790 40 41 123 792 2034 59 125 777 2103 2791 40 41 123 2104 61 2121 46 2791 40 41 59 792 2104 59 125 777 2792 60 2793 60 2465 62 44 2794 60 2465 356 2795 40 2796 60 2465 62 2797 41 123 792 2798 46 2795 40 2797 44 2014 41 59 125 777 2002 2799 40 41 123 792 2121 59 125 2031 2800 40 41 123 2031 2801 59 688 40 2121 46 2802 40 41 41 123 2801 61 2121 46 2803 40 41 63 2804 46 2805 40 362 41 58 2804 46 2805 40 362 41 59 125 630 123 2801 61 2121 46 2806 40 41 63 2807 46 2808 40 362 41 58 2807 46 2808 40 362 41 59 125 792 2809 46 2810 40 362 44 2801 41 59 125 2031 2811 40 41 123 688 40 2121 46 2812 40 41 41 123 792 2121 46 2813 40 41 63 2814 46 2815 40 362 41 58 2814 46 2815 40 362 41 59 125 630 123 792 2121 46 2816 40 41 63 2817 46 2818 40 362 41 58 2817 46 2818 40 362 41 59 125 125 331 330 331 773 865 2819 40 41 123 688 40 2037 46 2820 40 41 340 2821 307 33 2037 46 2820 40 41 46 2822 40 41 41 123 2091 2037 61 2823 46 2824 40 823 46 2037 46 2820 40 41 44 2020 41 59 726 2825 61 2121 46 2826 40 41 59 2094 2043 61 2121 46 2827 40 41 46 2820 40 41 59 688 40 2043 340 2821 307 2043 46 2828 40 41 41 123 688 40 2121 46 2829 40 41 41 2037 61 2830 46 2831 40 2037 44 2043 44 2825 41 59 630 688 40 2832 46 2833 40 2061 46 2820 40 41 41 41 2037 61 2830 46 2834 40 2037 44 2043 44 2825 41 59 125 2121 46 2835 40 2037 41 59 688 40 2119 309 2121 46 2836 40 41 46 2820 40 41 323 2821 309 2121 46 2836 40 41 46 2820 40 41 46 2837 40 2091 46 2838 41 41 123 2039 46 2839 40 823 46 2037 46 2820 40 41 41 59 2840 40 41 59 125 125 630 123 2121 46 2841 40 2821 41 59 125 125 773 865 2842 40 41 123 688 40 2039 46 2843 40 41 340 2844 307 33 2039 46 2843 40 41 46 2845 40 41 41 123 2091 2039 61 2846 46 2847 40 823 46 2039 46 2843 40 41 44 2020 41 59 2094 2043 61 2121 46 2848 40 41 46 2843 40 41 59 726 2849 61 2121 46 2850 40 41 59 688 40 2043 340 2844 307 2043 46 2851 40 41 41 123 688 40 2121 46 2852 40 41 41 2039 61 2853 46 2854 40 2039 44 2043 44 2849 41 59 630 688 40 2855 46 2856 40 2061 46 2843 40 41 41 41 2039 61 2853 46 2857 40 2039 44 2043 44 2849 41 59 125 2121 46 2858 40 2039 41 59 125 630 123 2121 46 2859 40 2844 41 59 125 125 773 865 2860 40 41 123 688 40 2043 46 2861 40 41 340 2862 307 33 2043 46 2861 40 41 46 2863 40 41 41 123 830 123 2121 46 2864 40 2094 46 2865 40 2121 46 2866 40 41 46 2861 40 41 44 823 46 2043 46 2861 40 41 41 41 59 125 580 40 2867 2868 41 123 2869 46 2870 40 2868 46 2871 40 41 41 59 125 125 630 123 2121 46 2872 40 2862 41 59 125 125 773 865 2873 40 41 123 688 40 2055 46 2874 40 41 340 2875 307 33 2055 46 2874 40 41 46 2876 40 41 41 123 830 123 2121 46 2877 40 2096 46 2878 40 2055 46 2874 40 41 44 2121 46 2879 40 41 46 2874 40 41 41 41 59 125 580 40 2880 2881 41 123 2882 46 2883 40 2881 46 2884 40 41 41 59 125 125 630 123 2121 46 2885 40 2875 41 59 125 125 773 865 2886 40 41 123 688 40 2040 46 2887 40 41 340 2888 307 33 2040 46 2887 40 41 46 2889 40 41 41 123 2121 46 2890 40 2891 46 2892 40 2040 46 2887 40 41 41 41 59 125 630 123 2121 46 2893 40 2894 46 2895 40 41 41 59 125 125 773 865 2896 40 41 123 330 2031 2897 61 2123 46 2898 40 2121 46 2899 40 41 46 2900 40 41 41 59 688 40 33 2010 46 2901 40 2897 41 46 2902 41 123 2121 46 2903 40 2904 46 2905 40 41 41 59 125 125 773 865 2906 40 41 123 688 40 33 2120 307 2121 46 2907 40 41 323 2404 46 2908 307 2909 46 2910 40 2121 46 2787 40 41 46 2911 40 41 44 2121 46 2710 40 41 46 2912 40 41 41 41 123 2091 2913 61 2121 46 2914 40 41 46 2915 40 41 323 2916 63 2121 46 2917 40 41 46 2915 40 41 58 2121 46 2914 40 41 46 2915 40 41 59 688 40 2913 340 2916 307 33 2913 46 2918 40 2919 46 2920 41 41 123 2120 61 2066 59 2921 46 2922 40 41 59 125 125 125 773 2075 46 2076 2923 40 2031 2924 41 123 792 2006 46 2925 40 2924 41 59 125 773 2075 46 2076 2926 40 2031 2924 41 123 792 2927 40 41 46 2928 40 2924 41 59 125 773 2075 46 2076 2929 40 2031 2924 41 123 792 2930 40 41 46 2931 40 2924 41 59 125 773 2932 2933 40 41 123 792 2934 46 2935 40 2710 40 41 46 2936 40 41 41 63 2028 58 2026 59 125 773 2932 2937 40 41 123 657 2031 2938 61 2710 40 41 46 2939 40 41 59 688 40 2940 46 2941 40 2938 41 41 123 792 2938 46 2942 40 362 41 63 2008 58 2028 59 125 630 123 792 2024 59 125 125 773 865 2943 40 41 123 688 40 33 2070 46 2944 40 41 309 2060 46 2944 40 41 340 2945 309 2071 46 2944 40 41 41 123 2062 46 2946 40 362 41 59 125 630 688 40 2121 46 2947 40 41 46 2944 40 41 41 123 2062 46 2948 40 362 41 59 125 630 123 2062 46 2949 40 2950 46 2944 40 362 41 41 59 125 2072 46 2951 40 33 2062 46 2944 40 41 46 2952 40 41 41 59 125 773 865 2953 40 41 123 2073 46 2954 40 2121 46 2073 40 41 41 59 688 40 2121 46 2073 40 41 41 123 2042 46 2954 40 2955 46 2956 40 362 41 41 59 2040 46 2954 40 2020 46 2957 40 2958 46 2959 40 41 41 41 59 125 630 123 2042 46 2954 40 2716 40 41 41 59 2040 46 2954 40 2123 46 2960 40 2121 46 2961 40 41 46 2962 40 41 41 41 59 125 125 865 2963 40 41 123 570 2964 61 2923 40 2037 46 2965 40 41 41 46 2966 307 2923 40 2039 46 2965 40 41 41 46 2966 307 2926 40 2043 46 2965 40 41 41 46 2966 307 2121 46 2967 40 41 46 2965 40 41 340 2968 307 2121 46 2967 40 41 46 2965 40 41 46 2969 40 41 340 1500 307 2929 40 2055 46 2965 40 41 41 46 2966 307 2929 40 2970 46 2971 40 2121 46 2972 40 41 46 2965 40 41 41 41 46 2966 307 2121 46 2973 40 41 59 688 40 2121 46 2974 46 2965 40 41 307 2121 46 2975 40 41 41 123 2964 61 2964 307 2081 46 2965 40 41 46 2966 59 125 330 688 40 33 2121 46 2073 40 41 41 123 2964 61 2964 307 2010 46 2976 40 2040 46 2965 40 41 41 46 2966 59 125 2068 46 2977 40 33 2964 41 59 2065 46 2977 40 2035 309 33 2964 309 33 2121 46 2978 40 41 46 2965 40 41 41 59 125 773 865 2979 40 41 123 688 40 2106 340 2980 41 123 2106 46 2981 40 41 59 2106 61 2980 59 125 125 773 2019 2982 40 41 123 792 2121 46 2512 40 41 63 2020 58 2022 59 125 773 865 2983 40 41 123 657 2031 2984 61 2121 46 2985 40 41 46 2986 40 41 59 2113 2114 61 2012 46 2987 40 2984 41 59 688 40 2114 340 2988 307 2114 46 2989 40 41 41 123 625 2990 61 2114 46 2991 40 41 59 625 2992 61 2993 46 2994 40 2037 46 2986 40 41 41 59 625 2995 61 2993 46 2994 40 2055 46 2986 40 41 41 59 625 2996 61 2121 46 2997 40 2990 44 2995 44 2992 41 59 657 570 2998 61 2999 46 2998 40 2984 41 59 704 3000 61 2998 63 3001 46 3002 58 3003 46 3002 59 2043 46 3004 40 2123 46 3005 40 2996 44 3000 41 41 59 2860 40 41 59 2121 46 3006 40 41 59 2963 40 41 59 2355 40 41 59 125 630 123 2054 46 3007 40 362 41 59 2031 3008 61 362 59 688 40 2018 46 3009 40 3008 41 41 123 744 3010 40 41 46 3011 40 3012 46 2986 40 362 41 41 46 3013 40 3008 41 46 3014 40 41 59 125 125 125 777 570 3015 40 41 123 792 33 2121 46 3016 40 41 307 33 2121 46 3017 40 41 59 125 125 ,"{'AvgLine': 14, 'CountLine': 1264, 'CountStmt': 708, 'MaxNesting': 6, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 587, 'MaxEssential': 3, 'SumEssential': 103, 'AvgCyclomatic': 2, 'CountLineCode': 1052, 'CountStmtDecl': 208, 'MaxCyclomatic': 10, 'SumCyclomatic': 228, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 166, 'CountSemicolon': 532, 'CountDeclMethod': 72, 'CountLineCodeExe': 772, 'CountLineComment': 47, 'CountClassCoupled': 72, 'CountClassDerived': 4, 'CountLineCodeDecl': 234, 'CountDeclMethodAll': 78, 'MaxInheritanceTree': 3, 'RatioCommentToCode': '0.04', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 15, 'SumCyclomaticStrict': 283, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 31, 'MaxCyclomaticModified': 10, 'PercentLackOfCohesion': 96, 'SumCyclomaticModified': 228, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 14, 'CountDeclMethodPrivate': 26, 'CountDeclInstanceMethod': 72, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 72, 'CountDeclInstanceVariable': 81, 'PercentLackOfCohesionModified': 90}"
3221,Java,"@Slf4j
class BsqSwapCreateOfferViewModel extends BsqSwapOfferViewModel<BsqSwapCreateOfferDataModel> implements ViewModel {
    private final BtcValidator btcValidator;
    private final BsqValidator bsqValidator;

    private final AltcoinValidator altcoinValidator;

    private boolean createOfferRequested;
    public final StringProperty amount = new SimpleStringProperty();
    public final StringProperty minAmount = new SimpleStringProperty();
    public final StringProperty price = new SimpleStringProperty();
    final StringProperty tradeFee = new SimpleStringProperty();
    public final StringProperty volume = new SimpleStringProperty();
    final StringProperty volumePromptLabel = new SimpleStringProperty();
    final StringProperty errorMessage = new SimpleStringProperty();

    final BooleanProperty isPlaceOfferButtonDisabled = new SimpleBooleanProperty(true);
    final BooleanProperty cancelButtonDisabled = new SimpleBooleanProperty();
    public final BooleanProperty isNextButtonDisabled = new SimpleBooleanProperty(true);
    final BooleanProperty placeOfferCompleted = new SimpleBooleanProperty();
    final BooleanProperty miningPoW = new SimpleBooleanProperty();

    final ObjectProperty<InputValidator.ValidationResult> amountValidationResult = new SimpleObjectProperty<>();
    final ObjectProperty<InputValidator.ValidationResult> minAmountValidationResult = new SimpleObjectProperty<>();
    final ObjectProperty<InputValidator.ValidationResult> priceValidationResult = new SimpleObjectProperty<>();
    final ObjectProperty<InputValidator.ValidationResult> volumeValidationResult = new SimpleObjectProperty<>();

    private ChangeListener<String> amountStringListener;
    private ChangeListener<String> minAmountStringListener;
    private ChangeListener<String> volumeStringListener;

    private ChangeListener<Coin> amountAsCoinListener;
    private ChangeListener<Coin> minAmountAsCoinListener;
    private ChangeListener<Price> priceListener;
    private ChangeListener<Volume> volumeListener;

    private ChangeListener<String> errorMessageListener;
    private Timer timeoutTimer;
    private boolean ignoreVolumeStringListener, ignoreAmountStringListener;
    private boolean syncMinAmountWithAmount = true;
    private Timer miningPowTimer;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    BsqSwapCreateOfferViewModel(BsqSwapCreateOfferDataModel dataModel,
                                AltcoinValidator altcoinValidator,
                                BtcValidator btcValidator,
                                BsqValidator bsqValidator,
                                AccountAgeWitnessService accountAgeWitnessService,
                                @Named(FormattingUtils.BTC_FORMATTER_KEY) CoinFormatter btcFormatter,
                                BsqFormatter bsqFormatter) {
        super(dataModel, btcFormatter, bsqFormatter, accountAgeWitnessService);

        this.altcoinValidator = altcoinValidator;
        this.btcValidator = btcValidator;
        this.bsqValidator = bsqValidator;
    }

    @Override
    protected void activate() {
        if (DevEnv.isDevMode()) {
            UserThread.runAfter(() -> {
                amount.set(""0.001"");
                price.set(""0.00002"");
                minAmount.set(amount.get());
                applyTradeFee();
                setAmountToModel();
                setMinAmountToModel();
                setPriceToModel();
                dataModel.calculateVolume();
                dataModel.calculateInputAndPayout();
                updateButtonDisableState();
            }, 100, TimeUnit.MILLISECONDS);
        }

        addBindings();
        addListeners();

        maybeInitializeWithData();

        updateButtonDisableState();
    }

    @Override
    protected void deactivate() {
        removeBindings();
        removeListeners();
        stopTimeoutTimer();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    void initWithData(OfferDirection direction, @Nullable BsqSwapOfferPayload offerPayload) {
        dataModel.initWithData(direction, offerPayload);

        btcValidator.setMaxValue(PaymentMethod.BSQ_SWAP.getMaxTradeLimitAsCoin(BSQ));
        btcValidator.setMaxTradeLimit(Coin.valueOf(dataModel.getMaxTradeLimit()));
        btcValidator.setMinValue(Restrictions.getMinTradeAmount());

        applyTradeFee();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // UI handler
    ///////////////////////////////////////////////////////////////////////////////////////////

    void requestNewOffer() {
        // We delay display a bit as pow is mostly very low so it would show flicker quickly
        miningPowTimer = UserThread.runAfter(() -> {
            miningPoW.set(true);
            updateButtonDisableState();
        }, 200, TimeUnit.MILLISECONDS);


        dataModel.requestNewOffer(offer -> {
            if (miningPowTimer != null) {
                miningPowTimer.stop();
            }
            miningPoW.set(false);
            updateButtonDisableState();
        });
    }

    void onPlaceOffer() {
        errorMessage.set(null);
        createOfferRequested = true;

        if (timeoutTimer == null) {
            timeoutTimer = UserThread.runAfter(() -> {
                stopTimeoutTimer();
                createOfferRequested = false;
                errorMessage.set(Res.get(""createOffer.timeoutAtPublishing""));

                updateButtonDisableState();
            }, 60);
        }
        errorMessageListener = (observable, oldValue, newValue) -> {
            if (newValue != null) {
                stopTimeoutTimer();
                createOfferRequested = false;
                errorMessage.set(newValue);

                updateButtonDisableState();
            }
        };

        dataModel.offer.errorMessageProperty().addListener(errorMessageListener);

        dataModel.onPlaceOffer(() -> {
            stopTimeoutTimer();
            placeOfferCompleted.set(true);
            errorMessage.set(null);
        });

        updateButtonDisableState();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Focus
    ///////////////////////////////////////////////////////////////////////////////////////////

    // On focus out we do validation and apply the data to the model
    void onFocusOutAmountTextField(boolean oldValue, boolean newValue) {
        if (oldValue && !newValue) {
            InputValidator.ValidationResult result = isBtcInputValid(amount.get());
            amountValidationResult.set(result);
            if (result.isValid) {
                setAmountToModel();
                ignoreAmountStringListener = true;
                amount.set(btcFormatter.formatCoin(dataModel.getBtcAmount().get()));
                ignoreAmountStringListener = false;
                dataModel.calculateVolume();

                if (!dataModel.isMinAmountLessOrEqualAmount())
                    minAmount.set(amount.get());
                else
                    amountValidationResult.set(result);

                if (minAmount.get() != null)
                    minAmountValidationResult.set(isBtcInputValid(minAmount.get()));
            } else if (amount.get() != null && btcValidator.getMaxTradeLimit() != null && btcValidator.getMaxTradeLimit().value == OfferRestrictions.TOLERATED_SMALL_TRADE_AMOUNT.value) {
                amount.set(btcFormatter.formatCoin(btcValidator.getMaxTradeLimit()));
                new Popup().information(Res.get(""popup.warning.tradeLimitDueAccountAgeRestriction.buyer"",
                        btcFormatter.formatCoinWithCode(OfferRestrictions.TOLERATED_SMALL_TRADE_AMOUNT),
                        Res.get(""offerbook.warning.newVersionAnnouncement"")))
                        .width(900)
                        .show();
            }
            // We want to trigger a recalculation of the volume
            UserThread.execute(() -> {
                onFocusOutVolumeTextField(true, false);
                onFocusOutMinAmountTextField(true, false);
            });
        }
    }

    void onFocusOutMinAmountTextField(boolean oldValue, boolean newValue) {
        if (oldValue && !newValue) {
            InputValidator.ValidationResult result = isBtcInputValid(minAmount.get());
            minAmountValidationResult.set(result);
            if (result.isValid) {
                Coin minAmountAsCoin = dataModel.getMinAmount().get();
                syncMinAmountWithAmount = minAmountAsCoin != null &&
                        minAmountAsCoin.equals(dataModel.getBtcAmount().get());
                setMinAmountToModel();

                dataModel.calculateMinVolume();

                if (dataModel.getMinVolume().get() != null) {
                    InputValidator.ValidationResult minVolumeResult = isVolumeInputValid(
                            VolumeUtil.formatVolume(dataModel.getMinVolume().get()));

                    volumeValidationResult.set(minVolumeResult);

                    updateButtonDisableState();
                }

                this.minAmount.set(btcFormatter.formatCoin(minAmountAsCoin));

                if (!dataModel.isMinAmountLessOrEqualAmount()) {
                    this.amount.set(this.minAmount.get());
                } else {
                    minAmountValidationResult.set(result);
                    if (this.amount.get() != null)
                        amountValidationResult.set(isBtcInputValid(this.amount.get()));
                }
            } else {
                syncMinAmountWithAmount = true;
            }
        }
    }

    void onFocusOutPriceTextField(boolean oldValue, boolean newValue) {
        if (oldValue && !newValue) {
            InputValidator.ValidationResult result = isPriceInputValid(price.get());
            priceValidationResult.set(result);
            if (result.isValid) {
                setPriceToModel();
                if (dataModel.getPrice().get() != null)
                    price.set(FormattingUtils.formatPrice(dataModel.getPrice().get()));
                dataModel.calculateVolume();
                dataModel.calculateAmount();
                applyTradeFee();
            }

            // We want to trigger a recalculation of the volume and minAmount
            UserThread.execute(() -> {
                onFocusOutVolumeTextField(true, false);
                triggerFocusOutOnAmountFields();
            });
        }
    }

    void triggerFocusOutOnAmountFields() {
        onFocusOutAmountTextField(true, false);
        onFocusOutMinAmountTextField(true, false);
    }

    void onFocusOutVolumeTextField(boolean oldValue, boolean newValue) {
        if (oldValue && !newValue) {
            InputValidator.ValidationResult result = isVolumeInputValid(volume.get());
            volumeValidationResult.set(result);
            if (result.isValid) {
                setVolumeToModel();
                ignoreVolumeStringListener = true;

                Volume volume = dataModel.getVolume().get();
                if (volume != null) {
                    this.volume.set(VolumeUtil.formatVolume(volume));
                }

                ignoreVolumeStringListener = false;

                dataModel.calculateAmount();

                if (!dataModel.isMinAmountLessOrEqualAmount()) {
                    minAmount.set(amount.getValue());
                } else {
                    if (amount.get() != null)
                        amountValidationResult.set(isBtcInputValid(amount.get()));

                    // We only check minAmountValidationResult if amountValidationResult is valid, otherwise we would get
                    // triggered a close of the popup when the minAmountValidationResult is applied
                    if (amountValidationResult.getValue() != null && amountValidationResult.getValue().isValid && minAmount.get() != null)
                        minAmountValidationResult.set(isBtcInputValid(minAmount.get()));
                }
            }
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    private InputValidator.ValidationResult isBtcInputValid(String input) {
        return btcValidator.validate(input);
    }

    private InputValidator.ValidationResult isPriceInputValid(String input) {
        return altcoinValidator.validate(input);
    }

    private InputValidator.ValidationResult isVolumeInputValid(String input) {
        return bsqValidator.validate(input);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Setters
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void applyTradeFee() {
        tradeFee.set(getTradeFee());
    }

    private void setAmountToModel() {
        if (amount.get() != null && !amount.get().isEmpty()) {
            Coin amount = DisplayUtils.parseToCoinWith4Decimals(this.amount.get(), btcFormatter);
            dataModel.setBtcAmount(amount);
            if (syncMinAmountWithAmount ||
                    dataModel.getMinAmount().get() == null ||
                    dataModel.getMinAmount().get().equals(Coin.ZERO)) {
                minAmount.set(this.amount.get());
                setMinAmountToModel();
            }
        } else {
            dataModel.setBtcAmount(null);
        }
    }

    private void setMinAmountToModel() {
        if (minAmount.get() != null && !minAmount.get().isEmpty()) {
            Coin minAmount = DisplayUtils.parseToCoinWith4Decimals(this.minAmount.get(), btcFormatter);
            dataModel.setMinAmount(minAmount);
        } else {
            dataModel.setMinAmount(null);
        }
    }

    private void setPriceToModel() {
        if (price.get() != null && !price.get().isEmpty()) {
            try {
                dataModel.setPrice(Price.parse(BSQ, this.price.get()));
            } catch (Throwable t) {
                log.debug(t.getMessage());
            }
        } else {
            dataModel.setPrice(null);
        }
    }

    private void setVolumeToModel() {
        if (volume.get() != null && !volume.get().isEmpty()) {
            try {
                dataModel.setVolume(Volume.parse(volume.get(), BSQ));
            } catch (Throwable t) {
                log.debug(t.getMessage());
            }
        } else {
            dataModel.setVolume(null);
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Bindings
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void addBindings() {
        super.addBindings();

        volumePromptLabel.set(Res.get(""createOffer.volume.prompt"", BSQ));
    }

    @Override
    protected void removeBindings() {
        super.removeBindings();

        volumePromptLabel.unbind();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Listeners
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    protected void createListeners() {
        amountStringListener = (ov, oldValue, newValue) -> {
            if (!ignoreAmountStringListener) {
                if (isBtcInputValid(newValue).isValid) {
                    setAmountToModel();
                    dataModel.calculateVolume();
                    dataModel.calculateInputAndPayout();
                }
                updateButtonDisableState();
            }
        };
        minAmountStringListener = (ov, oldValue, newValue) -> {
            if (isBtcInputValid(newValue).isValid)
                setMinAmountToModel();
            updateButtonDisableState();
        };
        volumeStringListener = (ov, oldValue, newValue) -> {
            if (!ignoreVolumeStringListener) {
                if (isVolumeInputValid(newValue).isValid) {
                    setVolumeToModel();
                    setPriceToModel();
                    dataModel.calculateAmount();
                    dataModel.calculateInputAndPayout();
                }
                updateButtonDisableState();
            }
        };

        amountAsCoinListener = (ov, oldValue, newValue) -> {
            if (newValue != null) {
                amount.set(btcFormatter.formatCoin(newValue));
            } else {
                amount.set("""");
            }

            applyTradeFee();
        };
        minAmountAsCoinListener = (ov, oldValue, newValue) -> {
            if (newValue != null)
                minAmount.set(btcFormatter.formatCoin(newValue));
            else
                minAmount.set("""");
        };
        priceListener = (ov, oldValue, newValue) -> {
            if (newValue != null)
                price.set(FormattingUtils.formatPrice(newValue));
            else
                price.set("""");

            applyTradeFee();
        };
        volumeListener = (ov, oldValue, newValue) -> {
            ignoreVolumeStringListener = true;
            if (newValue != null)
                volume.set(VolumeUtil.formatVolume(newValue));
            else
                volume.set("""");

            ignoreVolumeStringListener = false;
            applyTradeFee();
        };
    }

    @Override
    protected void addListeners() {
        // Bidirectional bindings are used for all input fields: amount, price, volume and minAmount
        // We do volume/amount calculation during input, so user has immediate feedback
        amount.addListener(amountStringListener);
        minAmount.addListener(minAmountStringListener);
        volume.addListener(volumeStringListener);

        // Binding with Bindings.createObjectBinding does not work because of bi-directional binding
        dataModel.getBtcAmount().addListener(amountAsCoinListener);
        dataModel.getMinAmount().addListener(minAmountAsCoinListener);
        dataModel.getPrice().addListener(priceListener);
        dataModel.getVolume().addListener(volumeListener);
    }

    @Override
    protected void removeListeners() {
        amount.removeListener(amountStringListener);
        minAmount.removeListener(minAmountStringListener);
        volume.removeListener(volumeStringListener);

        // Binding with Bindings.createObjectBinding does not work because of bi-directional binding
        dataModel.getBtcAmount().removeListener(amountAsCoinListener);
        dataModel.getMinAmount().removeListener(minAmountAsCoinListener);
        dataModel.getPrice().removeListener(priceListener);
        dataModel.getVolume().removeListener(volumeListener);

        if (dataModel.offer != null && errorMessageListener != null)
            dataModel.offer.getErrorMessageProperty().removeListener(errorMessageListener);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Utils
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void updateButtonDisableState() {
        boolean inputDataValid = isBtcInputValid(amount.get()).isValid &&
                isBtcInputValid(minAmount.get()).isValid &&
                isPriceInputValid(price.get()).isValid &&
                dataModel.getPrice().get() != null &&
                dataModel.getPrice().get().getValue() != 0 &&
                isVolumeInputValid(volume.get()).isValid &&
                isVolumeInputValid(VolumeUtil.formatVolume(dataModel.getMinVolume().get())).isValid &&
                dataModel.isMinAmountLessOrEqualAmount();

        isNextButtonDisabled.set(!inputDataValid);
        cancelButtonDisabled.set(createOfferRequested);
        isPlaceOfferButtonDisabled.set(createOfferRequested || !inputDataValid || miningPoW.get());
    }

    private void maybeInitializeWithData() {
        ObjectProperty<Coin> btcMinAmount = dataModel.getMinAmount();
        if (btcMinAmount.get() != null) {
            minAmountAsCoinListener.changed(btcMinAmount, null, btcMinAmount.get());
        }

        ObjectProperty<Coin> btcAmount = dataModel.getBtcAmount();

        if (btcAmount.get() != null && btcMinAmount.get() != null) {
            syncMinAmountWithAmount = btcMinAmount.get().equals(dataModel.getBtcAmount().get());
        }

        if (btcAmount.get() != null) {
            amountAsCoinListener.changed(btcAmount, null, btcAmount.get());
        }

        ObjectProperty<Price> price = dataModel.getPrice();
        if (price.get() != null) {
            priceListener.changed(price, null, price.get());
        }

        ObjectProperty<Volume> volume = dataModel.getVolume();
        if (volume.get() != null) {
            volumeListener.changed(volume, null, volume.get());
        }
    }

    private void stopTimeoutTimer() {
        if (timeoutTimer != null) {
            timeoutTimer.stop();
            timeoutTimer = null;
        }
    }
}",1,64 2000 587 2001 650 2002 60 2003 62 693 2004 123 773 657 2005 2006 59 773 657 2007 2008 59 773 657 2009 2010 59 773 570 2011 59 777 657 2012 2013 61 744 2014 40 41 59 777 657 2012 2015 61 744 2014 40 41 59 777 657 2012 2016 61 744 2014 40 41 59 657 2012 2017 61 744 2014 40 41 59 777 657 2012 2018 61 744 2014 40 41 59 657 2012 2019 61 744 2014 40 41 59 657 2012 2020 61 744 2014 40 41 59 657 2021 2022 61 744 2023 40 2024 41 59 657 2021 2025 61 744 2023 40 41 59 777 657 2021 2026 61 744 2023 40 2024 41 59 657 2021 2027 61 744 2023 40 41 59 657 2021 2028 61 744 2023 40 41 59 657 2029 60 2030 46 2031 62 2032 61 744 2033 60 62 40 41 59 657 2029 60 2030 46 2031 62 2034 61 744 2033 60 62 40 41 59 657 2029 60 2030 46 2031 62 2035 61 744 2033 60 62 40 41 59 657 2029 60 2030 46 2031 62 2036 61 744 2033 60 62 40 41 59 773 2037 60 2038 62 2039 59 773 2037 60 2038 62 2040 59 773 2037 60 2038 62 2041 59 773 2037 60 2042 62 2043 59 773 2037 60 2042 62 2044 59 773 2037 60 2045 62 2046 59 773 2037 60 2047 62 2048 59 773 2037 60 2038 62 2049 59 773 2050 2051 59 773 570 2052 44 2053 59 773 570 2054 61 2024 59 773 2050 2055 59 331 330 331 64 2056 2001 40 2003 2057 44 2009 2010 44 2005 2006 44 2007 2008 44 2058 2059 44 64 2060 40 2061 46 2062 41 2063 2064 44 2065 2066 41 123 818 40 2057 44 2064 44 2066 44 2059 41 59 823 46 2010 61 2010 59 823 46 2006 61 2006 59 823 46 2008 61 2008 59 125 64 2067 775 865 2068 40 41 123 688 40 2069 46 2070 40 41 41 123 2071 46 2072 40 40 41 45 62 123 2013 46 2073 40 362 41 59 2016 46 2073 40 362 41 59 2015 46 2073 40 2013 46 2074 40 41 41 59 2075 40 41 59 2076 40 41 59 2077 40 41 59 2078 40 41 59 2057 46 2079 40 41 59 2057 46 2080 40 41 59 2081 40 41 59 125 44 1503 44 2082 46 2083 41 59 125 2084 40 41 59 2085 40 41 59 2086 40 41 59 2087 40 41 59 125 64 2067 775 865 2088 40 41 123 2089 40 41 59 2090 40 41 59 2091 40 41 59 125 331 330 331 865 2092 40 2093 2094 44 64 2095 2096 2097 41 123 2057 46 2092 40 2094 44 2097 41 59 2006 46 2098 40 2099 46 2100 46 2101 40 2102 41 41 59 2006 46 2103 40 2042 46 2104 40 2057 46 2105 40 41 41 41 59 2006 46 2106 40 2107 46 2108 40 41 41 59 2109 40 41 59 125 331 330 331 865 2110 40 41 123 330 2055 61 2111 46 2112 40 40 41 45 62 123 2028 46 2113 40 2024 41 59 2114 40 41 59 125 44 1504 44 2115 46 2116 41 59 2057 46 2110 40 2117 45 62 123 688 40 2055 340 2118 41 123 2055 46 2119 40 41 59 125 2028 46 2120 40 2121 41 59 2122 40 41 59 125 41 59 125 865 2123 40 41 123 2020 46 2124 40 2125 41 59 2011 61 2024 59 688 40 2051 323 2125 41 123 2051 61 2126 46 2127 40 40 41 45 62 123 2128 40 41 59 2011 61 2129 59 2020 46 2124 40 2130 46 2131 40 362 41 41 59 2132 40 41 59 125 44 1503 41 59 125 2049 61 40 2133 44 2134 44 2135 41 45 62 123 688 40 2135 340 2125 41 123 2136 40 41 59 2011 61 2137 59 2020 46 2124 40 2135 41 59 2138 40 41 59 125 125 59 2057 46 2139 46 2140 40 41 46 2141 40 2049 41 59 2057 46 2123 40 40 41 45 62 123 2142 40 41 59 2027 46 2124 40 2024 41 59 2020 46 2124 40 2125 41 59 125 41 59 2143 40 41 59 125 331 330 331 330 865 2144 40 570 2145 44 570 2146 41 123 688 40 2145 307 33 2146 41 123 2030 46 2031 2147 61 2148 40 2013 46 2149 40 41 41 59 2032 46 2150 40 2147 41 59 688 40 2147 46 2151 41 123 2152 40 41 59 2053 61 2024 59 2013 46 2150 40 2064 46 2153 40 2057 46 2154 40 41 46 2149 40 41 41 41 59 2053 61 2155 59 2057 46 2156 40 41 59 688 40 33 2057 46 2157 40 41 41 2015 46 2150 40 2013 46 2149 40 41 41 59 630 2032 46 2150 40 2147 41 59 688 40 2015 46 2149 40 41 340 2158 41 2034 46 2150 40 2148 40 2015 46 2149 40 41 41 41 59 125 630 688 40 2013 46 2149 40 41 340 2159 307 2006 46 2160 40 41 340 2159 307 2006 46 2160 40 41 46 2161 323 2162 46 2163 46 2161 41 123 2013 46 2150 40 2064 46 2164 40 2006 46 2160 40 41 41 41 59 744 2165 40 41 46 2166 40 2167 46 2149 40 362 44 2064 46 2168 40 2162 46 2163 41 44 2167 46 2149 40 362 41 41 41 46 2169 40 1504 41 46 2170 40 41 59 125 330 2171 46 2172 40 40 41 45 62 123 2173 40 2024 44 2174 41 59 2175 40 2024 44 2174 41 59 125 41 59 125 125 865 2176 40 570 2145 44 570 2146 41 123 688 40 2145 307 33 2146 41 123 2030 46 2031 2177 61 2178 40 2015 46 2179 40 41 41 59 2034 46 2180 40 2177 41 59 688 40 2177 46 2181 41 123 2042 2182 61 2057 46 2183 40 41 46 2179 40 41 59 2054 61 2182 340 2184 307 2182 46 2185 40 2057 46 2186 40 41 46 2179 40 41 41 59 2187 40 41 59 2057 46 2188 40 41 59 688 40 2057 46 2189 40 41 46 2179 40 41 340 2184 41 123 2030 46 2031 2190 61 2191 40 2192 46 2193 40 2057 46 2189 40 41 46 2179 40 41 41 41 59 2036 46 2180 40 2190 41 59 2194 40 41 59 125 823 46 2015 46 2180 40 2064 46 2195 40 2182 41 41 59 688 40 33 2057 46 2196 40 41 41 123 823 46 2013 46 2180 40 823 46 2015 46 2179 40 41 41 59 125 630 123 2034 46 2180 40 2177 41 59 688 40 823 46 2013 46 2179 40 41 340 2184 41 2032 46 2180 40 2178 40 823 46 2013 46 2179 40 41 41 41 59 125 125 630 123 2054 61 2024 59 125 125 125 865 2197 40 570 2145 44 570 2146 41 123 688 40 2145 307 33 2146 41 123 2030 46 2031 2198 61 2199 40 2016 46 2200 40 41 41 59 2035 46 2201 40 2198 41 59 688 40 2198 46 2202 41 123 2203 40 41 59 688 40 2057 46 2204 40 41 46 2200 40 41 340 2205 41 2016 46 2201 40 2061 46 2206 40 2057 46 2204 40 41 46 2200 40 41 41 41 59 2057 46 2207 40 41 59 2057 46 2208 40 41 59 2209 40 41 59 125 330 2210 46 2211 40 40 41 45 62 123 2212 40 2024 44 2213 41 59 2214 40 41 59 125 41 59 125 125 865 2215 40 41 123 2144 40 2024 44 2216 41 59 2176 40 2024 44 2216 41 59 125 865 2217 40 570 2145 44 570 2146 41 123 688 40 2145 307 33 2146 41 123 2030 46 2031 2218 61 2219 40 2018 46 2220 40 41 41 59 2036 46 2221 40 2218 41 59 688 40 2218 46 2222 41 123 2223 40 41 59 2052 61 2024 59 2047 2018 61 2057 46 2224 40 41 46 2220 40 41 59 688 40 2018 340 2225 41 123 823 46 2018 46 2221 40 2226 46 2227 40 2018 41 41 59 125 2052 61 2228 59 2057 46 2229 40 41 59 688 40 33 2057 46 2230 40 41 41 123 2015 46 2221 40 2013 46 2231 40 41 41 59 125 630 123 688 40 2013 46 2220 40 41 340 2225 41 2032 46 2221 40 2232 40 2013 46 2220 40 41 41 41 59 330 330 688 40 2032 46 2233 40 41 340 2225 307 2032 46 2233 40 41 46 2222 307 2015 46 2220 40 41 340 2225 41 2034 46 2221 40 2232 40 2015 46 2220 40 41 41 41 59 125 125 125 125 331 330 331 773 2030 46 2031 2234 40 2038 2235 41 123 792 2006 46 2236 40 2235 41 59 125 773 2030 46 2031 2237 40 2038 2235 41 123 792 2010 46 2238 40 2235 41 59 125 773 2030 46 2031 2239 40 2038 2235 41 123 792 2008 46 2240 40 2235 41 59 125 331 330 331 773 865 2241 40 41 123 2017 46 2242 40 2243 40 41 41 59 125 773 865 2244 40 41 123 688 40 2013 46 2245 40 41 340 2246 307 33 2013 46 2245 40 41 46 2247 40 41 41 123 2042 2013 61 2248 46 2249 40 823 46 2013 46 2245 40 41 44 2064 41 59 2057 46 2250 40 2013 41 59 688 40 2054 309 2057 46 2251 40 41 46 2245 40 41 323 2246 309 2057 46 2251 40 41 46 2245 40 41 46 2252 40 2042 46 2253 41 41 123 2015 46 2254 40 823 46 2013 46 2245 40 41 41 59 2255 40 41 59 125 125 630 123 2057 46 2256 40 2246 41 59 125 125 773 865 2257 40 41 123 688 40 2015 46 2258 40 41 340 2259 307 33 2015 46 2258 40 41 46 2260 40 41 41 123 2042 2015 61 2261 46 2262 40 823 46 2015 46 2258 40 41 44 2064 41 59 2057 46 2263 40 2015 41 59 125 630 123 2057 46 2264 40 2259 41 59 125 125 773 865 2265 40 41 123 688 40 2016 46 2266 40 41 340 2267 307 33 2016 46 2266 40 41 46 2268 40 41 41 123 830 123 2057 46 2269 40 2045 46 2270 40 2271 44 823 46 2016 46 2266 40 41 41 41 59 125 580 40 2272 2273 41 123 2274 46 2275 40 2273 46 2276 40 41 41 59 125 125 630 123 2057 46 2277 40 2267 41 59 125 125 773 865 2278 40 41 123 688 40 2018 46 2279 40 41 340 2280 307 33 2018 46 2279 40 41 46 2281 40 41 41 123 830 123 2057 46 2282 40 2047 46 2283 40 2018 46 2279 40 41 44 2284 41 41 59 125 580 40 2285 2286 41 123 2287 46 2288 40 2286 46 2289 40 41 41 59 125 125 630 123 2057 46 2290 40 2280 41 59 125 125 331 330 331 64 2067 775 865 2291 40 41 123 818 46 2291 40 41 59 2019 46 2292 40 2293 46 2294 40 362 44 2295 41 41 59 125 64 2067 775 865 2296 40 41 123 818 46 2296 40 41 59 2019 46 2297 40 41 59 125 331 330 331 64 2067 775 865 2298 40 41 123 2039 61 40 2299 44 2145 44 2146 41 45 62 123 688 40 33 2053 41 123 688 40 2234 40 2146 41 46 2300 41 123 2244 40 41 59 2057 46 2301 40 41 59 2057 46 2302 40 41 59 125 2303 40 41 59 125 125 59 2040 61 40 2299 44 2145 44 2146 41 45 62 123 688 40 2234 40 2146 41 46 2304 41 2257 40 41 59 2305 40 41 59 125 59 2041 61 40 2299 44 2145 44 2146 41 45 62 123 688 40 33 2052 41 123 688 40 2239 40 2146 41 46 2306 41 123 2278 40 41 59 2265 40 41 59 2057 46 2307 40 41 59 2057 46 2308 40 41 59 125 2309 40 41 59 125 125 59 2043 61 40 2299 44 2145 44 2146 41 45 62 123 688 40 2146 340 2310 41 123 2013 46 2311 40 2064 46 2312 40 2146 41 41 59 125 630 123 2013 46 2313 40 362 41 59 125 2241 40 41 59 125 59 2044 61 40 2299 44 2145 44 2146 41 45 62 123 688 40 2146 340 2314 41 2015 46 2315 40 2064 46 2316 40 2146 41 41 59 630 2015 46 2315 40 362 41 59 125 59 2046 61 40 2299 44 2145 44 2146 41 45 62 123 688 40 2146 340 2317 41 2016 46 2318 40 2061 46 2319 40 2146 41 41 59 630 2016 46 2318 40 362 41 59 2241 40 41 59 125 59 2048 61 40 2299 44 2145 44 2146 41 45 62 123 2052 61 2024 59 688 40 2146 340 2320 41 2018 46 2321 40 2322 46 2323 40 2146 41 41 59 630 2018 46 2321 40 362 41 59 2052 61 2324 59 2241 40 41 59 125 59 125 64 2067 775 865 2325 40 41 123 330 330 2013 46 2326 40 2039 41 59 2015 46 2326 40 2040 41 59 2018 46 2326 40 2041 41 59 330 2057 46 2327 40 41 46 2326 40 2043 41 59 2057 46 2328 40 41 46 2326 40 2044 41 59 2057 46 2329 40 41 46 2326 40 2046 41 59 2057 46 2330 40 41 46 2326 40 2048 41 59 125 64 2067 775 865 2331 40 41 123 2013 46 2332 40 2039 41 59 2015 46 2332 40 2040 41 59 2018 46 2332 40 2041 41 59 330 2057 46 2333 40 41 46 2332 40 2043 41 59 2057 46 2334 40 41 46 2332 40 2044 41 59 2057 46 2335 40 41 46 2332 40 2046 41 59 2057 46 2336 40 41 46 2332 40 2048 41 59 688 40 2057 46 2337 340 2338 307 2049 340 2338 41 2057 46 2337 46 2339 40 41 46 2332 40 2049 41 59 125 331 330 331 773 865 2340 40 41 123 570 2341 61 2234 40 2013 46 2342 40 41 41 46 2343 307 2234 40 2015 46 2342 40 41 41 46 2343 307 2237 40 2016 46 2342 40 41 41 46 2343 307 2057 46 2344 40 41 46 2342 40 41 340 2345 307 2057 46 2344 40 41 46 2342 40 41 46 2346 40 41 340 1500 307 2239 40 2018 46 2342 40 41 41 46 2343 307 2239 40 2347 46 2348 40 2057 46 2349 40 41 46 2342 40 41 41 41 46 2343 307 2057 46 2350 40 41 59 2026 46 2351 40 33 2341 41 59 2025 46 2351 40 2011 41 59 2022 46 2351 40 2011 309 33 2341 309 2028 46 2342 40 41 41 59 125 773 865 2352 40 41 123 2029 60 2042 62 2353 61 2057 46 2354 40 41 59 688 40 2353 46 2355 40 41 340 2356 41 123 2044 46 2357 40 2353 44 2356 44 2353 46 2355 40 41 41 59 125 2029 60 2042 62 2358 61 2057 46 2359 40 41 59 688 40 2358 46 2355 40 41 340 2356 307 2353 46 2355 40 41 340 2356 41 123 2054 61 2353 46 2355 40 41 46 2360 40 2057 46 2359 40 41 46 2355 40 41 41 59 125 688 40 2358 46 2355 40 41 340 2356 41 123 2043 46 2361 40 2358 44 2356 44 2358 46 2355 40 41 41 59 125 2029 60 2045 62 2016 61 2057 46 2362 40 41 59 688 40 2016 46 2355 40 41 340 2356 41 123 2046 46 2363 40 2016 44 2356 44 2016 46 2355 40 41 41 59 125 2029 60 2047 62 2018 61 2057 46 2364 40 41 59 688 40 2018 46 2355 40 41 340 2356 41 123 2048 46 2365 40 2018 44 2356 44 2018 46 2355 40 41 41 59 125 125 773 865 2366 40 41 123 688 40 2051 340 2367 41 123 2051 46 2368 40 41 59 2051 61 2367 59 125 125 125 ,"{'AvgLine': 15, 'CountLine': 546, 'CountStmt': 293, 'MaxNesting': 4, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 249, 'MaxEssential': 1, 'SumEssential': 42, 'AvgCyclomatic': 2, 'CountLineCode': 414, 'CountStmtDecl': 74, 'MaxCyclomatic': 7, 'SumCyclomatic': 88, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 95, 'CountSemicolon': 219, 'CountDeclMethod': 27, 'CountLineCodeExe': 294, 'CountLineComment': 37, 'CountClassCoupled': 43, 'CountClassDerived': 0, 'CountLineCodeDecl': 91, 'CountDeclMethodAll': 44, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.09', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 114, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 0, 'MaxCyclomaticModified': 7, 'PercentLackOfCohesion': 90, 'SumCyclomaticModified': 88, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 9, 'CountDeclMethodPrivate': 11, 'CountDeclInstanceMethod': 27, 'CountDeclMethodProtected': 7, 'CountClassCoupledModified': 43, 'CountDeclInstanceVariable': 33, 'PercentLackOfCohesionModified': 81}"
28075,Java,"public final class GeoUtils {

    private static Color getDirectionColor(int x, int y, int z, int nswe) {
        if ((GeoEngine.getInstance().getNsweNearest(x, y, z) & nswe) == nswe) {
            return Color.GREEN;
        }
        return Color.RED;
    }

    public static void debugGrid(Player player) {
        final int geoRadius = 20;
        final int blocksPerPacket = 40;

        int iBlock = blocksPerPacket;
        int iPacket = 0;

        ExServerPrimitive exsp = null;
        final int playerGx = GeoEngine.getGeoX(player.getX());
        final int playerGy = GeoEngine.getGeoY(player.getY());
        for (int dx = -geoRadius; dx <= geoRadius; ++dx) {
            for (int dy = -geoRadius; dy <= geoRadius; ++dy) {
                if (iBlock >= blocksPerPacket) {
                    iBlock = 0;
                    if (exsp != null) {
                        ++iPacket;
                        player.sendPacket(exsp);
                    }
                    exsp = new ExServerPrimitive(""DebugGrid_"" + iPacket, player.getX(), player.getY(), -16000);
                }

                final int gx = playerGx + dx;
                final int gy = playerGy + dy;

                final int x = GeoEngine.getWorldX(gx);
                final int y = GeoEngine.getWorldY(gy);
                final int z = GeoEngine.getInstance().getHeightNearest(gx, gy, player.getZ());

                // north arrow
                Color col = getDirectionColor(gx, gy, z, GeoStructure.CELL_FLAG_N);
                exsp.addLine(col, x - 1, y - 7, z, x + 1, y - 7, z);
                exsp.addLine(col, x - 2, y - 6, z, x + 2, y - 6, z);
                exsp.addLine(col, x - 3, y - 5, z, x + 3, y - 5, z);
                exsp.addLine(col, x - 4, y - 4, z, x + 4, y - 4, z);

                // east arrow
                col = getDirectionColor(gx, gy, z, GeoStructure.CELL_FLAG_E);
                exsp.addLine(col, x + 7, y - 1, z, x + 7, y + 1, z);
                exsp.addLine(col, x + 6, y - 2, z, x + 6, y + 2, z);
                exsp.addLine(col, x + 5, y - 3, z, x + 5, y + 3, z);
                exsp.addLine(col, x + 4, y - 4, z, x + 4, y + 4, z);

                // south arrow
                col = getDirectionColor(gx, gy, z, GeoStructure.CELL_FLAG_S);
                exsp.addLine(col, x - 1, y + 7, z, x + 1, y + 7, z);
                exsp.addLine(col, x - 2, y + 6, z, x + 2, y + 6, z);
                exsp.addLine(col, x - 3, y + 5, z, x + 3, y + 5, z);
                exsp.addLine(col, x - 4, y + 4, z, x + 4, y + 4, z);

                col = getDirectionColor(gx, gy, z, GeoStructure.CELL_FLAG_W);
                exsp.addLine(col, x - 7, y - 1, z, x - 7, y + 1, z);
                exsp.addLine(col, x - 6, y - 2, z, x - 6, y + 2, z);
                exsp.addLine(col, x - 5, y - 3, z, x - 5, y + 3, z);
                exsp.addLine(col, x - 4, y - 4, z, x - 4, y + 4, z);

                ++iBlock;
            }
        }

        player.sendPacket(exsp);
    }

    /**
     * difference between x values: never above 1<br>
     * difference between y values: never above 1
     */
    public static int computeNswe(int lastX, int lastY, int x, int y) {
        if (x > lastX) // east
        {
            if (y > lastY) {
                return GeoStructure.CELL_FLAG_SE; // Direction.SOUTH_EAST;
            } else if (y < lastY) {
                return GeoStructure.CELL_FLAG_NE; // Direction.NORTH_EAST;
            } else {
                return GeoStructure.CELL_FLAG_E; // Direction.EAST;
            }
        } else if (x < lastX) // west
        {
            if (y > lastY) {
                return GeoStructure.CELL_FLAG_SW; // Direction.SOUTH_WEST;
            } else if (y < lastY) {
                return GeoStructure.CELL_FLAG_NW; // Direction.NORTH_WEST;
            } else {
                return GeoStructure.CELL_FLAG_W; // Direction.WEST;
            }
        } else
        // unchanged x
        {
            if (y > lastY) {
                return GeoStructure.CELL_FLAG_S; // Direction.SOUTH;
            } else if (y < lastY) {
                return GeoStructure.CELL_FLAG_N; // Direction.NORTH;
            } else {
                throw new RuntimeException();
            }
        }
    }
}",1,777 657 587 2000 123 773 809 2001 2002 40 704 2003 44 704 2004 44 704 2005 44 704 2006 41 123 688 40 40 2007 46 2008 40 41 46 2009 40 2003 44 2004 44 2005 41 38 2006 41 323 2006 41 123 792 2001 46 2010 59 125 792 2001 46 2011 59 125 777 809 865 2012 40 2013 2014 41 123 657 704 2015 61 1503 59 657 704 2016 61 1503 59 704 2017 61 2016 59 704 2018 61 1500 59 2019 2020 61 2021 59 657 704 2022 61 2023 46 2024 40 2014 46 2025 40 41 41 59 657 704 2026 61 2023 46 2027 40 2014 46 2028 40 41 41 59 664 40 704 2029 61 45 2015 59 2029 329 2015 59 349 2029 41 123 664 40 704 2030 61 45 2015 59 2030 329 2015 59 349 2030 41 123 688 40 2017 325 2016 41 123 2017 61 1500 59 688 40 2020 340 2021 41 123 349 2018 59 2014 46 2031 40 2020 41 59 125 2020 61 744 2019 40 362 43 2018 44 2014 46 2025 40 41 44 2014 46 2028 40 41 44 45 1506 41 59 125 657 704 2032 61 2022 43 2029 59 657 704 2033 61 2026 43 2030 59 657 704 2003 61 2023 46 2034 40 2032 41 59 657 704 2004 61 2023 46 2035 40 2033 41 59 657 704 2005 61 2023 46 2036 40 41 46 2037 40 2032 44 2033 44 2014 46 2038 40 41 41 59 330 2001 2039 61 2002 40 2032 44 2033 44 2005 44 2040 46 2041 41 59 2020 46 2042 40 2039 44 2003 45 1501 44 2004 45 1502 44 2005 44 2003 43 1501 44 2004 45 1502 44 2005 41 59 2020 46 2042 40 2039 44 2003 45 1502 44 2004 45 1502 44 2005 44 2003 43 1502 44 2004 45 1502 44 2005 41 59 2020 46 2042 40 2039 44 2003 45 1502 44 2004 45 1502 44 2005 44 2003 43 1502 44 2004 45 1502 44 2005 41 59 2020 46 2042 40 2039 44 2003 45 1502 44 2004 45 1502 44 2005 44 2003 43 1502 44 2004 45 1502 44 2005 41 59 330 2039 61 2002 40 2032 44 2033 44 2005 44 2040 46 2043 41 59 2020 46 2042 40 2039 44 2003 43 1502 44 2004 45 1501 44 2005 44 2003 43 1502 44 2004 43 1501 44 2005 41 59 2020 46 2042 40 2039 44 2003 43 1502 44 2004 45 1502 44 2005 44 2003 43 1502 44 2004 43 1502 44 2005 41 59 2020 46 2042 40 2039 44 2003 43 1502 44 2004 45 1502 44 2005 44 2003 43 1502 44 2004 43 1502 44 2005 41 59 2020 46 2042 40 2039 44 2003 43 1502 44 2004 45 1502 44 2005 44 2003 43 1502 44 2004 43 1502 44 2005 41 59 330 2039 61 2002 40 2032 44 2033 44 2005 44 2040 46 2044 41 59 2020 46 2042 40 2039 44 2003 45 1501 44 2004 43 1502 44 2005 44 2003 43 1501 44 2004 43 1502 44 2005 41 59 2020 46 2042 40 2039 44 2003 45 1502 44 2004 43 1502 44 2005 44 2003 43 1502 44 2004 43 1502 44 2005 41 59 2020 46 2042 40 2039 44 2003 45 1502 44 2004 43 1502 44 2005 44 2003 43 1502 44 2004 43 1502 44 2005 41 59 2020 46 2042 40 2039 44 2003 45 1502 44 2004 43 1502 44 2005 44 2003 43 1502 44 2004 43 1502 44 2005 41 59 2039 61 2002 40 2032 44 2033 44 2005 44 2040 46 2045 41 59 2020 46 2042 40 2039 44 2003 45 1502 44 2004 45 1501 44 2005 44 2003 45 1502 44 2004 43 1501 44 2005 41 59 2020 46 2042 40 2039 44 2003 45 1502 44 2004 45 1502 44 2005 44 2003 45 1502 44 2004 43 1502 44 2005 41 59 2020 46 2042 40 2039 44 2003 45 1502 44 2004 45 1502 44 2005 44 2003 45 1502 44 2004 43 1502 44 2005 41 59 2020 46 2042 40 2039 44 2003 45 1502 44 2004 45 1502 44 2005 44 2003 45 1502 44 2004 43 1502 44 2005 41 59 349 2017 59 125 125 2014 46 2046 40 2020 41 59 125 306 777 809 704 2047 40 704 2048 44 704 2049 44 704 2003 44 704 2004 41 123 688 40 2003 62 2048 41 330 123 688 40 2004 62 2049 41 123 792 2050 46 2051 59 330 125 630 688 40 2004 60 2049 41 123 792 2052 46 2053 59 330 125 630 123 792 2054 46 2055 59 330 125 125 630 688 40 2003 60 2048 41 330 123 688 40 2004 62 2049 41 123 792 2056 46 2057 59 330 125 630 688 40 2004 60 2049 41 123 792 2058 46 2059 59 330 125 630 123 792 2060 46 2061 59 330 125 125 630 330 123 688 40 2004 62 2049 41 123 792 2062 46 2063 59 330 125 630 688 40 2004 60 2049 41 123 792 2064 46 2065 59 330 125 630 123 825 744 2066 40 41 59 125 125 125 125 ,"{'AvgLine': 34, 'CountLine': 109, 'CountStmt': 70, 'MaxNesting': 4, 'AvgLineCode': 28, 'AvgEssential': 3, 'AvgLineBlank': 3, 'CountStmtExe': 57, 'MaxEssential': 9, 'SumEssential': 11, 'AvgCyclomatic': 5, 'CountLineCode': 85, 'CountStmtDecl': 19, 'MaxCyclomatic': 9, 'SumCyclomatic': 16, 'AvgLineComment': 6, 'CountClassBase': 1, 'CountLineBlank': 13, 'CountSemicolon': 53, 'CountDeclMethod': 3, 'CountLineCodeExe': 66, 'CountLineComment': 21, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountLineCodeDecl': 17, 'CountDeclMethodAll': 3, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.25', 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 16, 'CountDeclClassMethod': 3, 'AvgCyclomaticModified': 5, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 16, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 7, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
5241,Java,"public class TradeCurrencyMakers {

    public static final Property<TradeCurrency, String> currencyCode = new Property<>();
    public static final Property<TradeCurrency, String> currencyName = new Property<>();

    public static final Instantiator<bisq.core.locale.CryptoCurrency> CryptoCurrency = lookup ->
            new CryptoCurrency(lookup.valueOf(currencyCode, ""BTC""), lookup.valueOf(currencyName, ""Bitcoin""));

    public static final Instantiator<bisq.core.locale.FiatCurrency> FiatCurrency = lookup ->
            new FiatCurrency(lookup.valueOf(currencyCode, ""EUR""));

    public static final CryptoCurrency bitcoin = make(a(CryptoCurrency));
    public static final FiatCurrency euro = make(a(FiatCurrency));
    public static final FiatCurrency usd = make(a(FiatCurrency).but(with(currencyCode, ""USD"")));
}",1,777 587 2000 123 777 809 657 2001 60 2002 44 2003 62 2004 61 744 2001 60 62 40 41 59 777 809 657 2001 60 2002 44 2003 62 2005 61 744 2001 60 62 40 41 59 777 809 657 2006 60 2007 46 2008 46 2009 46 2010 62 2010 61 2011 45 62 744 2010 40 2011 46 2012 40 2004 44 362 41 44 2011 46 2012 40 2005 44 362 41 41 59 777 809 657 2006 60 2007 46 2008 46 2009 46 2013 62 2013 61 2011 45 62 744 2013 40 2011 46 2012 40 2004 44 362 41 41 59 777 809 657 2010 2014 61 2015 40 2016 40 2010 41 41 59 777 809 657 2013 2017 61 2015 40 2016 40 2013 41 41 59 777 809 657 2013 2018 61 2015 40 2016 40 2013 41 46 2019 40 2020 40 2004 44 362 41 41 41 59 125 ,"{'AvgLine': 0, 'CountLine': 15, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 0, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 0, 'SumEssential': 0, 'AvgCyclomatic': 0, 'CountLineCode': 11, 'CountStmtDecl': 8, 'MaxCyclomatic': 0, 'SumCyclomatic': 0, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 4, 'CountSemicolon': 7, 'CountDeclMethod': 0, 'CountLineCodeExe': 9, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountLineCodeDecl': 10, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 0, 'MaxCyclomaticStrict': 0, 'SumCyclomaticStrict': 0, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 0, 'CountDeclMethodPublic': 0, 'MaxCyclomaticModified': 0, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 0, 'CountDeclClassVariable': 7, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
5363,Java,"@FxmlView
public class ClosedTradesView extends ActivatableViewAndModel<VBox, ClosedTradesViewModel> {
    private final boolean useDevPrivilegeKeys;

    private enum ColumnNames {
        TRADE_ID(Res.get(""shared.tradeId"")),
        DATE(Res.get(""shared.dateTime"")),
        MARKET(Res.get(""shared.market"")),
        PRICE(Res.get(""shared.price"")),
        DEVIATION(Res.get(""shared.deviation"")),
        AMOUNT(Res.get(""shared.amountWithCur"", Res.getBaseCurrencyCode())),
        VOLUME(Res.get(""shared.amount"")),
        VOLUME_CURRENCY(Res.get(""shared.currency"")),
        TX_FEE(Res.get(""shared.txFee"")),
        TRADE_FEE_BTC(Res.get(""shared.tradeFee"") + "" BTC""),
        TRADE_FEE_BSQ(Res.get(""shared.tradeFee"") + "" BSQ""),
        BUYER_SEC(Res.get(""shared.buyerSecurityDeposit"")),
        SELLER_SEC(Res.get(""shared.sellerSecurityDeposit"")),
        OFFER_TYPE(Res.get(""shared.offerType"")),
        STATUS(Res.get(""shared.state""));

        private final String text;

        ColumnNames(String text) {
            this.text = text;
        }

        @Override
        public String toString() {
            return text;
        }
    }

    @FXML
    TableView<Tradable> tableView;
    @FXML
    TableColumn<Tradable, Tradable> priceColumn, deviationColumn, amountColumn, volumeColumn,
            txFeeColumn, tradeFeeColumn, buyerSecurityDepositColumn, sellerSecurityDepositColumn,
            marketColumn, directionColumn, dateColumn, tradeIdColumn, stateColumn,
            duplicateColumn, avatarColumn;
    @FXML
    HBox searchBox;
    @FXML
    AutoTooltipLabel filterLabel;
    @FXML
    InputTextField filterTextField;
    @FXML
    Pane searchBoxSpacer;
    @FXML
    AutoTooltipButton exportButton, summaryButton;
    @FXML
    Label numItems;
    @FXML
    Region footerSpacer;

    private final OfferDetailsWindow offerDetailsWindow;
    private final BsqTradeDetailsWindow bsqTradeDetailsWindow;
    private final Navigation navigation;
    private final KeyRing keyRing;
    private final Preferences preferences;
    private final TradeDetailsWindow tradeDetailsWindow;
    private final PrivateNotificationManager privateNotificationManager;
    private SortedList<Tradable> sortedList;
    private FilteredList<Tradable> filteredList;
    private ChangeListener<String> filterTextFieldListener;
    private ChangeListener<Number> widthListener;

    @Inject
    public ClosedTradesView(ClosedTradesViewModel model,
                            OfferDetailsWindow offerDetailsWindow,
                            BsqTradeDetailsWindow bsqTradeDetailsWindow,
                            Navigation navigation,
                            KeyRing keyRing,
                            Preferences preferences,
                            TradeDetailsWindow tradeDetailsWindow,
                            PrivateNotificationManager privateNotificationManager,
                            @Named(Config.USE_DEV_PRIVILEGE_KEYS) boolean useDevPrivilegeKeys) {
        super(model);
        this.offerDetailsWindow = offerDetailsWindow;
        this.bsqTradeDetailsWindow = bsqTradeDetailsWindow;
        this.navigation = navigation;
        this.keyRing = keyRing;
        this.preferences = preferences;
        this.tradeDetailsWindow = tradeDetailsWindow;
        this.privateNotificationManager = privateNotificationManager;
        this.useDevPrivilegeKeys = useDevPrivilegeKeys;
    }

    @Override
    public void initialize() {
        widthListener = (observable, oldValue, newValue) -> onWidthChange((double) newValue);
        txFeeColumn.setGraphic(new AutoTooltipLabel(ColumnNames.TX_FEE.toString()));
        tradeFeeColumn.setGraphic(new AutoTooltipLabel(ColumnNames.TRADE_FEE_BTC.toString().replace("" BTC"", """")));
        buyerSecurityDepositColumn.setGraphic(new AutoTooltipLabel(ColumnNames.BUYER_SEC.toString()));
        sellerSecurityDepositColumn.setGraphic(new AutoTooltipLabel(ColumnNames.SELLER_SEC.toString()));
        priceColumn.setGraphic(new AutoTooltipLabel(ColumnNames.PRICE.toString()));
        deviationColumn.setGraphic(new AutoTooltipTableColumn<>(ColumnNames.DEVIATION.toString(),
                Res.get(""portfolio.closedTrades.deviation.help"")).getGraphic());
        amountColumn.setGraphic(new AutoTooltipLabel(ColumnNames.AMOUNT.toString()));
        volumeColumn.setGraphic(new AutoTooltipLabel(ColumnNames.VOLUME.toString()));
        marketColumn.setGraphic(new AutoTooltipLabel(ColumnNames.MARKET.toString()));
        directionColumn.setGraphic(new AutoTooltipLabel(ColumnNames.OFFER_TYPE.toString()));
        dateColumn.setGraphic(new AutoTooltipLabel(ColumnNames.DATE.toString()));
        tradeIdColumn.setGraphic(new AutoTooltipLabel(ColumnNames.TRADE_ID.toString()));
        stateColumn.setGraphic(new AutoTooltipLabel(ColumnNames.STATUS.toString()));
        duplicateColumn.setGraphic(new AutoTooltipLabel(""""));
        avatarColumn.setText("""");

        tableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        tableView.setPlaceholder(new AutoTooltipLabel(Res.get(""table.placeholder.noItems"", Res.get(""shared.trades""))));

        setTradeIdColumnCellFactory();
        setDirectionColumnCellFactory();
        setAmountColumnCellFactory();
        setTxFeeColumnCellFactory();
        setTradeFeeColumnCellFactory();
        setBuyerSecurityDepositColumnCellFactory();
        setSellerSecurityDepositColumnCellFactory();
        setPriceColumnCellFactory();
        setDeviationColumnCellFactory();
        setVolumeColumnCellFactory();
        setDateColumnCellFactory();
        setMarketColumnCellFactory();
        setStateColumnCellFactory();
        setDuplicateColumnCellFactory();
        setAvatarColumnCellFactory();

        tradeIdColumn.setComparator(Comparator.comparing(Tradable::getId));
        dateColumn.setComparator(Comparator.comparing(Tradable::getDate));
        directionColumn.setComparator(Comparator.comparing(o -> o.getOffer().getDirection()));
        marketColumn.setComparator(Comparator.comparing(model::getMarketLabel));
        priceColumn.setComparator(Comparator.comparing(model::getPrice, Comparator.nullsFirst(Comparator.naturalOrder())));
        deviationColumn.setComparator(Comparator.comparing(o ->
                        o.getOffer().isUseMarketBasedPrice() ? o.getOffer().getMarketPriceMargin() : 1,
                Comparator.nullsFirst(Comparator.naturalOrder())));
        volumeColumn.setComparator(nullsFirstComparingAsTrade(TradeModel::getVolume));
        amountColumn.setComparator(Comparator.comparing(model::getAmount, Comparator.nullsFirst(Comparator.naturalOrder())));
        avatarColumn.setComparator(Comparator.comparing(
                model.dataModel::getNumPastTrades,
                Comparator.nullsFirst(Comparator.naturalOrder())
        ));
        txFeeColumn.setComparator(nullsFirstComparing(o ->
                o instanceof TradeModel ? ((TradeModel) o).getTxFee() : o.getOffer().getTxFee()
        ));
        txFeeColumn.setComparator(Comparator.comparing(model::getTxFee, Comparator.nullsFirst(Comparator.naturalOrder())));

        //
        tradeFeeColumn.setComparator(Comparator.comparing(item -> {
            String tradeFee = model.getTradeFee(item, true);
            // We want to separate BSQ and BTC fees so we use a prefix
            if (item.getOffer().isCurrencyForMakerFeeBtc()) {
                return ""BTC"" + tradeFee;
            } else {
                return ""BSQ"" + tradeFee;
            }
        }, Comparator.nullsFirst(Comparator.naturalOrder())));
        buyerSecurityDepositColumn.setComparator(nullsFirstComparing(o ->
                o.getOffer() != null ? o.getOffer().getBuyerSecurityDeposit() : null
        ));
        sellerSecurityDepositColumn.setComparator(nullsFirstComparing(o ->
                o.getOffer() != null ? o.getOffer().getSellerSecurityDeposit() : null
        ));
        stateColumn.setComparator(Comparator.comparing(model::getState));

        dateColumn.setSortType(TableColumn.SortType.DESCENDING);
        tableView.getSortOrder().add(dateColumn);

        tableView.setRowFactory(
                tableView -> {
                    TableRow<Tradable> row = new TableRow<>();
                    ContextMenu rowMenu = new ContextMenu();
                    MenuItem duplicateItem = new MenuItem(Res.get(""portfolio.context.offerLikeThis""));
                    duplicateItem.setOnAction((ActionEvent event) -> onDuplicateOffer(row.getItem().getOffer()));
                    rowMenu.getItems().add(duplicateItem);
                    row.contextMenuProperty().bind(
                            Bindings.when(Bindings.isNotNull(row.itemProperty()))
                                    .then(rowMenu)
                                    .otherwise((ContextMenu) null));
                    return row;
                });

        filterLabel.setText(Res.get(""shared.filter""));
        HBox.setMargin(filterLabel, new Insets(5, 0, 0, 10));
        filterTextFieldListener = (observable, oldValue, newValue) -> applyFilteredListPredicate(filterTextField.getText());
        searchBox.setSpacing(5);
        HBox.setHgrow(searchBoxSpacer, Priority.ALWAYS);

        numItems.setId(""num-offers"");
        numItems.setPadding(new Insets(-5, 0, 0, 10));
        HBox.setHgrow(footerSpacer, Priority.ALWAYS);
        HBox.setMargin(exportButton, new Insets(0, 10, 0, 0));
        exportButton.updateText(Res.get(""shared.exportCSV""));
        summaryButton.updateText(Res.get(""shared.summary""));
    }

    @Override
    protected void activate() {
        filteredList = new FilteredList<>(model.dataModel.getList());

        sortedList = new SortedList<>(filteredList);
        sortedList.comparatorProperty().bind(tableView.comparatorProperty());

        tableView.setItems(sortedList);

        numItems.setText(Res.get(""shared.numItemsLabel"", sortedList.size()));
        exportButton.setOnAction(event -> {
            CSVEntryConverter<Tradable> headerConverter = item -> {
                String[] columns = new String[ColumnNames.values().length];
                for (ColumnNames m : ColumnNames.values()) {
                    columns[m.ordinal()] = m.toString();
                }
                return columns;
            };
            CSVEntryConverter<Tradable> contentConverter = item -> {
                String[] columns = new String[ColumnNames.values().length];
                columns[ColumnNames.TRADE_ID.ordinal()] = model.getTradeId(item);
                columns[ColumnNames.DATE.ordinal()] = model.getDate(item);
                columns[ColumnNames.MARKET.ordinal()] = model.getMarketLabel(item);
                columns[ColumnNames.PRICE.ordinal()] = model.getPrice(item);
                columns[ColumnNames.DEVIATION.ordinal()] = model.getPriceDeviation(item);
                columns[ColumnNames.AMOUNT.ordinal()] = model.getAmount(item);
                columns[ColumnNames.VOLUME.ordinal()] = model.getVolume(item, false);
                columns[ColumnNames.VOLUME_CURRENCY.ordinal()] = model.getVolumeCurrency(item);
                columns[ColumnNames.TX_FEE.ordinal()] = model.getTxFee(item);
                if (model.dataModel.isCurrencyForTradeFeeBtc(item)) {
                    columns[ColumnNames.TRADE_FEE_BTC.ordinal()] = model.getTradeFee(item, false);
                    columns[ColumnNames.TRADE_FEE_BSQ.ordinal()] = """";
                } else {
                    columns[ColumnNames.TRADE_FEE_BTC.ordinal()] = """";
                    columns[ColumnNames.TRADE_FEE_BSQ.ordinal()] = model.getTradeFee(item, false);
                }
                columns[ColumnNames.BUYER_SEC.ordinal()] = model.getBuyerSecurityDeposit(item);
                columns[ColumnNames.SELLER_SEC.ordinal()] = model.getSellerSecurityDeposit(item);
                columns[ColumnNames.OFFER_TYPE.ordinal()] = model.getDirectionLabel(item);
                columns[ColumnNames.STATUS.ordinal()] = model.getState(item);
                return columns;
            };

            GUIUtil.exportCSV(""tradeHistory.csv"", headerConverter, contentConverter,
                    getDummyTradable(), sortedList, (Stage) root.getScene().getWindow());
        });

        summaryButton.setOnAction(event -> new ClosedTradesSummaryWindow(model).show());

        filterTextField.textProperty().addListener(filterTextFieldListener);
        applyFilteredListPredicate(filterTextField.getText());
        root.widthProperty().addListener(widthListener);
        onWidthChange(root.getWidth());
    }

    @Override
    protected void deactivate() {
        sortedList.comparatorProperty().unbind();
        exportButton.setOnAction(null);
        summaryButton.setOnAction(null);

        filterTextField.textProperty().removeListener(filterTextFieldListener);
        root.widthProperty().removeListener(widthListener);
    }

    private static <T extends Comparable<T>> Comparator<Tradable> nullsFirstComparing(Function<Tradable, T> keyExtractor) {
        return Comparator.comparing(
                o -> o != null ? keyExtractor.apply(o) : null,
                Comparator.nullsFirst(Comparator.naturalOrder())
        );
    }

    private static <T extends Comparable<T>> Comparator<Tradable> nullsFirstComparingAsTrade(Function<TradeModel, T> keyExtractor) {
        return Comparator.comparing(
                o -> o instanceof TradeModel ? keyExtractor.apply((TradeModel) o) : null,
                Comparator.nullsFirst(Comparator.naturalOrder())
        );
    }

    private void onWidthChange(double width) {
        txFeeColumn.setVisible(width > 1200);
        tradeFeeColumn.setVisible(width > 1300);
        buyerSecurityDepositColumn.setVisible(width > 1400);
        sellerSecurityDepositColumn.setVisible(width > 1500);
    }

    private void applyFilteredListPredicate(String filterString) {
        filteredList.setPredicate(tradable -> {
            if (filterString.isEmpty())
                return true;

            Offer offer = tradable.getOffer();
            if (offer.getId().contains(filterString)) {
                return true;
            }
            if (model.getDate(tradable).contains(filterString)) {
                return true;
            }
            if (model.getMarketLabel(tradable).contains(filterString)) {
                return true;
            }
            if (model.getPrice(tradable).contains(filterString)) {
                return true;
            }
            if (model.getPriceDeviation(tradable).contains(filterString)) {
                return true;
            }

            if (model.getVolume(tradable, true).contains(filterString)) {
                return true;
            }
            if (model.getAmount(tradable).contains(filterString)) {
                return true;
            }
            if (model.getTradeFee(tradable, true).contains(filterString)) {
                return true;
            }
            if (model.getTxFee(tradable).contains(filterString)) {
                return true;
            }
            if (model.getBuyerSecurityDeposit(tradable).contains(filterString)) {
                return true;
            }
            if (model.getSellerSecurityDeposit(tradable).contains(filterString)) {
                return true;
            }
            if (model.getState(tradable).contains(filterString)) {
                return true;
            }
            if (model.getDirectionLabel(tradable).contains(filterString)) {
                return true;
            }
            if (offer.getPaymentMethod().getDisplayString().contains(filterString)) {
                return true;
            }
            if (offer.getOfferFeePaymentTxId() != null &&
                    offer.getOfferFeePaymentTxId().contains(filterString)) {
                return true;
            }

            if (tradable instanceof BsqSwapTrade) {
                BsqSwapTrade bsqSwapTrade = (BsqSwapTrade) tradable;
                if (bsqSwapTrade.getTxId() != null && bsqSwapTrade.getTxId().contains(filterString)) {
                    return true;
                }
                if (bsqSwapTrade.getTradingPeerNodeAddress().getFullAddress().contains(filterString)) {
                    return true;
                }
            }

            if (tradable instanceof Trade) {
                Trade trade = (Trade) tradable;
                if (trade.getTakerFeeTxId() != null && trade.getTakerFeeTxId().contains(filterString)) {
                    return true;
                }
                if (trade.getDepositTxId() != null && trade.getDepositTxId().contains(filterString)) {
                    return true;
                }
                if (trade.getPayoutTxId() != null && trade.getPayoutTxId().contains(filterString)) {
                    return true;
                }

                Contract contract = trade.getContract();
                boolean isBuyerOnion = false;
                boolean isSellerOnion = false;
                boolean matchesBuyersPaymentAccountData = false;
                boolean matchesSellersPaymentAccountData = false;
                if (contract != null) {
                    isBuyerOnion = contract.getBuyerNodeAddress().getFullAddress().contains(filterString);
                    isSellerOnion = contract.getSellerNodeAddress().getFullAddress().contains(filterString);
                    matchesBuyersPaymentAccountData = contract.getBuyerPaymentAccountPayload() != null &&
                            contract.getBuyerPaymentAccountPayload().getPaymentDetails().contains(filterString);
                    matchesSellersPaymentAccountData = contract.getSellerPaymentAccountPayload() != null &&
                            contract.getSellerPaymentAccountPayload().getPaymentDetails().contains(filterString);
                }
                return isBuyerOnion || isSellerOnion ||
                        matchesBuyersPaymentAccountData || matchesSellersPaymentAccountData;
            } else {
                return false;
            }
        });
    }

    private void setTradeIdColumnCellFactory() {
        tradeIdColumn.getStyleClass().add(""first-column"");
        tradeIdColumn.setCellValueFactory((offerListItem) -> new ReadOnlyObjectWrapper<>(offerListItem.getValue()));
        tradeIdColumn.setCellFactory(
                new Callback<>() {

                    @Override
                    public TableCell<Tradable, Tradable> call(TableColumn<Tradable,
                            Tradable> column) {
                        return new TableCell<>() {
                            private HyperlinkWithIcon field;

                            @Override
                            public void updateItem(final Tradable tradable, boolean empty) {
                                super.updateItem(tradable, empty);
                                if (tradable != null && !empty) {
                                    field = new HyperlinkWithIcon(model.getTradeId(tradable));
                                    field.setOnAction(event -> {
                                        if (tradable instanceof Trade) {
                                            tradeDetailsWindow.show((Trade) tradable);
                                        } else if (tradable instanceof BsqSwapTrade) {
                                            bsqTradeDetailsWindow.show((BsqSwapTrade) tradable);
                                        } else if (tradable instanceof OpenOffer) {
                                            offerDetailsWindow.show(tradable.getOffer());
                                        }
                                    });
                                    field.setTooltip(new Tooltip(Res.get(""tooltip.openPopupForDetails"")));
                                    setGraphic(field);
                                } else {
                                    setGraphic(null);
                                    if (field != null)
                                        field.setOnAction(null);
                                }
                            }
                        };
                    }
                });
    }

    private void setDateColumnCellFactory() {
        dateColumn.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));
        dateColumn.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Tradable, Tradable> call(
                            TableColumn<Tradable, Tradable> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Tradable item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null)
                                    setGraphic(new AutoTooltipLabel(model.getDate(item)));
                                else
                                    setGraphic(null);
                            }
                        };
                    }
                });
    }

    private void setMarketColumnCellFactory() {
        marketColumn.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));
        marketColumn.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Tradable, Tradable> call(
                            TableColumn<Tradable, Tradable> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Tradable item, boolean empty) {
                                super.updateItem(item, empty);
                                setGraphic(new AutoTooltipLabel(model.getMarketLabel(item)));
                            }
                        };
                    }
                });
    }

    private void setStateColumnCellFactory() {
        stateColumn.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));
        stateColumn.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Tradable, Tradable> call(
                            TableColumn<Tradable, Tradable> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Tradable item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null)
                                    setGraphic(new AutoTooltipLabel(model.getState(item)));
                                else
                                    setGraphic(null);
                            }
                        };
                    }
                });
    }

    private void setDuplicateColumnCellFactory() {
        duplicateColumn.getStyleClass().add(""avatar-column"");
        duplicateColumn.setCellValueFactory((offerListItem) -> new ReadOnlyObjectWrapper<>(offerListItem.getValue()));
        duplicateColumn.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Tradable, Tradable> call(TableColumn<Tradable, Tradable> column) {
                        return new TableCell<>() {
                            Button button;

                            @Override
                            public void updateItem(final Tradable item, boolean empty) {
                                super.updateItem(item, empty);

                                if (item != null && !empty && isMyOfferAsMaker(item.getOffer().getOfferPayloadBase())) {
                                    if (button == null) {
                                        button = getRegularIconButton(MaterialDesignIcon.CONTENT_COPY);
                                        button.setTooltip(new Tooltip(Res.get(""shared.duplicateOffer"")));
                                        setGraphic(button);
                                    }
                                    button.setOnAction(event -> onDuplicateOffer(item.getOffer()));
                                } else {
                                    setGraphic(null);
                                    if (button != null) {
                                        button.setOnAction(null);
                                        button = null;
                                    }
                                }
                            }
                        };
                    }
                });
    }

    @SuppressWarnings(""UnusedReturnValue"")
    private TableColumn<Tradable, Tradable> setAvatarColumnCellFactory() {
        avatarColumn.getStyleClass().addAll(""last-column"", ""avatar-column"");
        avatarColumn.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));
        avatarColumn.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Tradable, Tradable> call(TableColumn<Tradable, Tradable> column) {
                        return new TableCell<>() {

                            @Override
                            public void updateItem(final Tradable item, boolean empty) {
                                super.updateItem(item, empty);

                                if (!empty && item instanceof TradeModel) {
                                    TradeModel tradeModel = (TradeModel) item;
                                    int numPastTrades = model.dataModel.getNumPastTrades(tradeModel);
                                    NodeAddress tradingPeerNodeAddress = tradeModel.getTradingPeerNodeAddress();
                                    String role = Res.get(""peerInfoIcon.tooltip.tradePeer"");
                                    Node peerInfoIcon = new PeerInfoIconTrading(tradingPeerNodeAddress,
                                            role,
                                            numPastTrades,
                                            privateNotificationManager,
                                            tradeModel,
                                            preferences,
                                            model.dataModel.accountAgeWitnessService,
                                            useDevPrivilegeKeys);
                                    setPadding(new Insets(1, 15, 0, 0));
                                    setGraphic(peerInfoIcon);
                                } else {
                                    setGraphic(null);
                                }
                            }
                        };
                    }
                });
        return avatarColumn;
    }

    private void setAmountColumnCellFactory() {
        amountColumn.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));
        amountColumn.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Tradable, Tradable> call(
                            TableColumn<Tradable, Tradable> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Tradable item, boolean empty) {
                                super.updateItem(item, empty);
                                setGraphic(new AutoTooltipLabel(model.getAmount(item)));
                            }
                        };
                    }
                });
    }

    private void setPriceColumnCellFactory() {
        priceColumn.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));
        priceColumn.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Tradable, Tradable> call(
                            TableColumn<Tradable, Tradable> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Tradable item, boolean empty) {
                                super.updateItem(item, empty);
                                setGraphic(new AutoTooltipLabel(model.getPrice(item)));
                            }
                        };
                    }
                });
    }

    private void setDeviationColumnCellFactory() {
        deviationColumn.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));
        deviationColumn.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Tradable, Tradable> call(
                            TableColumn<Tradable, Tradable> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Tradable item, boolean empty) {
                                super.updateItem(item, empty);
                                setGraphic(new AutoTooltipLabel(model.getPriceDeviation(item)));
                            }
                        };
                    }
                });
    }

    private void setVolumeColumnCellFactory() {
        volumeColumn.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));
        volumeColumn.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Tradable, Tradable> call(
                            TableColumn<Tradable, Tradable> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Tradable item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null)
                                    setGraphic(new AutoTooltipLabel(model.getVolume(item, true)));
                                else
                                    setGraphic(null);
                            }
                        };
                    }
                });
    }

    private void setDirectionColumnCellFactory() {
        directionColumn.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));
        directionColumn.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Tradable, Tradable> call(
                            TableColumn<Tradable, Tradable> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Tradable item, boolean empty) {
                                super.updateItem(item, empty);
                                setGraphic(new AutoTooltipLabel(model.getDirectionLabel(item)));
                            }
                        };
                    }
                });
    }

    private void setTxFeeColumnCellFactory() {
        txFeeColumn.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));
        txFeeColumn.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Tradable, Tradable> call(
                            TableColumn<Tradable, Tradable> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Tradable item, boolean empty) {
                                super.updateItem(item, empty);
                                setGraphic(new AutoTooltipLabel(model.getTxFee(item)));
                            }
                        };
                    }
                });
    }

    private void setTradeFeeColumnCellFactory() {
        tradeFeeColumn.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));
        tradeFeeColumn.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Tradable, Tradable> call(
                            TableColumn<Tradable, Tradable> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Tradable item, boolean empty) {
                                super.updateItem(item, empty);
                                setGraphic(new AutoTooltipLabel(model.getTradeFee(item, true)));
                            }
                        };
                    }
                });
    }

    private void setBuyerSecurityDepositColumnCellFactory() {
        buyerSecurityDepositColumn.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));
        buyerSecurityDepositColumn.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Tradable, Tradable> call(
                            TableColumn<Tradable, Tradable> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Tradable item, boolean empty) {
                                super.updateItem(item, empty);
                                setGraphic(new AutoTooltipLabel(model.getBuyerSecurityDeposit(item)));
                            }
                        };
                    }
                });
    }

    private void setSellerSecurityDepositColumnCellFactory() {
        sellerSecurityDepositColumn.setCellValueFactory((offer) -> new ReadOnlyObjectWrapper<>(offer.getValue()));
        sellerSecurityDepositColumn.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Tradable, Tradable> call(
                            TableColumn<Tradable, Tradable> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Tradable item, boolean empty) {
                                super.updateItem(item, empty);
                                setGraphic(new AutoTooltipLabel(model.getSellerSecurityDeposit(item)));
                            }
                        };
                    }
                });
    }

    private void onDuplicateOffer(Offer offer) {
        try {
            OfferPayloadBase offerPayloadBase = offer.getOfferPayloadBase();
            if (isMyOfferAsMaker(offerPayloadBase)) {
                PortfolioUtil.duplicateOffer(navigation, offerPayloadBase);
            } else {
                new Popup().warning(Res.get(""portfolio.context.notYourOffer"")).show();
            }
        } catch (NullPointerException e) {
            log.warn(""Unable to get offerPayload - {}"", e.toString());
        }
    }

    private boolean isMyOfferAsMaker(OfferPayloadBase offerPayloadBase) {
        return offerPayloadBase.getPubKeyRing().equals(keyRing.getPubKeyRing());
    }

    private Tradable getDummyTradable() {
        return new Tradable() {
            @Override
            public Offer getOffer() {
                return null;
            }

            @Override
            public Date getDate() {
                return null;
            }

            @Override
            public String getId() {
                return null;
            }

            @Override
            public String getShortId() {
                return null;
            }

            @Override
            public Message toProtoMessage() {
                return null;
            }
        };
    }
}",1,64 2000 777 587 2001 650 2002 60 2003 44 2004 62 123 773 657 570 2005 59 773 640 2006 123 2007 40 2008 46 2009 40 362 41 41 44 2010 40 2008 46 2009 40 362 41 41 44 2011 40 2008 46 2009 40 362 41 41 44 2012 40 2008 46 2009 40 362 41 41 44 2013 40 2008 46 2009 40 362 41 41 44 2014 40 2008 46 2009 40 362 44 2008 46 2015 40 41 41 41 44 2016 40 2008 46 2009 40 362 41 41 44 2017 40 2008 46 2009 40 362 41 41 44 2018 40 2008 46 2009 40 362 41 41 44 2019 40 2008 46 2009 40 362 41 43 362 41 44 2020 40 2008 46 2009 40 362 41 43 362 41 44 2021 40 2008 46 2009 40 362 41 41 44 2022 40 2008 46 2009 40 362 41 41 44 2023 40 2008 46 2009 40 362 41 41 44 2024 40 2008 46 2009 40 362 41 41 59 773 657 2025 2026 59 2006 40 2025 2026 41 123 823 46 2026 61 2026 59 125 64 2027 777 2025 2028 40 41 123 792 2026 59 125 125 64 2029 2030 60 2031 62 2032 59 64 2029 2033 60 2031 44 2031 62 2034 44 2035 44 2036 44 2037 44 2038 44 2039 44 2040 44 2041 44 2042 44 2043 44 2044 44 2045 44 2046 44 2047 44 2048 59 64 2029 2049 2050 59 64 2029 2051 2052 59 64 2029 2053 2054 59 64 2029 2055 2056 59 64 2029 2057 2058 44 2059 59 64 2029 2060 2061 59 64 2029 2062 2063 59 773 657 2064 2065 59 773 657 2066 2067 59 773 657 2068 2069 59 773 657 2070 2071 59 773 657 2072 2073 59 773 657 2074 2075 59 773 657 2076 2077 59 773 2078 60 2031 62 2079 59 773 2080 60 2031 62 2081 59 773 2082 60 2083 62 2084 59 773 2082 60 2085 62 2086 59 64 2087 777 2001 40 2004 2088 44 2064 2065 44 2066 2067 44 2068 2069 44 2070 2071 44 2072 2073 44 2074 2075 44 2076 2077 44 64 2089 40 2090 46 2091 41 570 2005 41 123 818 40 2088 41 59 823 46 2065 61 2065 59 823 46 2067 61 2067 59 823 46 2069 61 2069 59 823 46 2071 61 2071 59 823 46 2073 61 2073 59 823 46 2075 61 2075 59 823 46 2077 61 2077 59 823 46 2005 61 2005 59 125 64 2092 777 865 2093 40 41 123 2086 61 40 2094 44 2095 44 2096 41 45 62 2097 40 40 625 41 2096 41 59 2038 46 2098 40 744 2051 40 2006 46 2099 46 2100 40 41 41 41 59 2039 46 2098 40 744 2051 40 2006 46 2101 46 2100 40 41 46 2102 40 362 44 362 41 41 41 59 2040 46 2098 40 744 2051 40 2006 46 2103 46 2100 40 41 41 41 59 2041 46 2098 40 744 2051 40 2006 46 2104 46 2100 40 41 41 41 59 2034 46 2098 40 744 2051 40 2006 46 2105 46 2100 40 41 41 41 59 2035 46 2098 40 744 2106 60 62 40 2006 46 2107 46 2100 40 41 44 2108 46 2109 40 362 41 41 46 2110 40 41 41 59 2036 46 2098 40 744 2051 40 2006 46 2111 46 2100 40 41 41 41 59 2037 46 2098 40 744 2051 40 2006 46 2112 46 2100 40 41 41 41 59 2042 46 2098 40 744 2051 40 2006 46 2113 46 2100 40 41 41 41 59 2043 46 2098 40 744 2051 40 2006 46 2114 46 2100 40 41 41 41 59 2044 46 2098 40 744 2051 40 2006 46 2115 46 2100 40 41 41 41 59 2045 46 2098 40 744 2051 40 2006 46 2116 46 2100 40 41 41 41 59 2046 46 2098 40 744 2051 40 2006 46 2117 46 2100 40 41 41 41 59 2047 46 2098 40 744 2051 40 362 41 41 59 2048 46 2118 40 362 41 59 2032 46 2119 40 2030 46 2120 41 59 2032 46 2121 40 744 2051 40 2108 46 2109 40 362 44 2108 46 2109 40 362 41 41 41 41 59 2122 40 41 59 2123 40 41 59 2124 40 41 59 2125 40 41 59 2126 40 41 59 2127 40 41 59 2128 40 41 59 2129 40 41 59 2130 40 41 59 2131 40 41 59 2132 40 41 59 2133 40 41 59 2134 40 41 59 2135 40 41 59 2136 40 41 59 2045 46 2137 40 2138 46 2139 40 2031 58 58 2140 41 41 59 2044 46 2137 40 2138 46 2139 40 2031 58 58 2141 41 41 59 2043 46 2137 40 2138 46 2139 40 2142 45 62 2142 46 2143 40 41 46 2144 40 41 41 41 59 2042 46 2137 40 2138 46 2139 40 2088 58 58 2145 41 41 59 2034 46 2137 40 2138 46 2139 40 2088 58 58 2146 44 2138 46 2147 40 2138 46 2148 40 41 41 41 41 59 2035 46 2137 40 2138 46 2139 40 2142 45 62 2142 46 2143 40 41 46 2149 40 41 63 2142 46 2143 40 41 46 2150 40 41 58 1501 44 2138 46 2147 40 2138 46 2148 40 41 41 41 41 59 2037 46 2137 40 2151 40 2152 58 58 2153 41 41 59 2036 46 2137 40 2138 46 2139 40 2088 58 58 2154 44 2138 46 2147 40 2138 46 2148 40 41 41 41 41 59 2048 46 2137 40 2138 46 2139 40 2088 46 2155 58 58 2156 44 2138 46 2147 40 2138 46 2148 40 41 41 41 41 59 2038 46 2137 40 2157 40 2142 45 62 2142 702 2152 63 40 40 2152 41 2142 41 46 2158 40 41 58 2142 46 2143 40 41 46 2158 40 41 41 41 59 2038 46 2137 40 2138 46 2139 40 2088 58 58 2158 44 2138 46 2147 40 2138 46 2148 40 41 41 41 41 59 330 2039 46 2137 40 2138 46 2139 40 2159 45 62 123 2083 2160 61 2088 46 2161 40 2159 44 2162 41 59 330 688 40 2159 46 2143 40 41 46 2163 40 41 41 123 792 362 43 2160 59 125 630 123 792 362 43 2160 59 125 125 44 2138 46 2147 40 2138 46 2148 40 41 41 41 41 59 2040 46 2137 40 2157 40 2142 45 62 2142 46 2143 40 41 340 2164 63 2142 46 2143 40 41 46 2165 40 41 58 2164 41 41 59 2041 46 2137 40 2157 40 2142 45 62 2142 46 2143 40 41 340 2164 63 2142 46 2143 40 41 46 2166 40 41 58 2164 41 41 59 2046 46 2137 40 2138 46 2139 40 2088 58 58 2167 41 41 59 2044 46 2168 40 2033 46 2169 46 2170 41 59 2032 46 2171 40 41 46 2172 40 2044 41 59 2032 46 2173 40 2032 45 62 123 2174 60 2031 62 2175 61 744 2174 60 62 40 41 59 2176 2177 61 744 2176 40 41 59 2178 2179 61 744 2178 40 2108 46 2109 40 362 41 41 59 2179 46 2180 40 40 2181 2182 41 45 62 2183 40 2175 46 2184 40 41 46 2143 40 41 41 41 59 2177 46 2185 40 41 46 2172 40 2179 41 59 2175 46 2186 40 41 46 2187 40 2188 46 2189 40 2188 46 2190 40 2175 46 2191 40 41 41 41 46 2192 40 2177 41 46 2193 40 40 2176 41 2164 41 41 59 792 2175 59 125 41 59 2052 46 2118 40 2108 46 2109 40 362 41 41 59 2049 46 2194 40 2052 44 744 2195 40 1502 44 1500 44 1500 44 1502 41 41 59 2084 61 40 2094 44 2095 44 2096 41 45 62 2196 40 2054 46 2197 40 41 41 59 2050 46 2198 40 1502 41 59 2049 46 2199 40 2056 44 2200 46 2201 41 59 2061 46 2202 40 362 41 59 2061 46 2203 40 744 2195 40 45 1502 44 1500 44 1500 44 1502 41 41 59 2049 46 2199 40 2063 44 2200 46 2201 41 59 2049 46 2194 40 2058 44 744 2195 40 1500 44 1502 44 1500 44 1500 41 41 59 2058 46 2204 40 2108 46 2109 40 362 41 41 59 2059 46 2204 40 2108 46 2109 40 362 41 41 59 125 64 2092 775 865 2205 40 41 123 2081 61 744 2080 60 62 40 2088 46 2206 46 2207 40 41 41 59 2079 61 744 2078 60 62 40 2081 41 59 2079 46 2208 40 41 46 2209 40 2032 46 2208 40 41 41 59 2032 46 2210 40 2079 41 59 2061 46 2211 40 2212 46 2213 40 362 44 2079 46 2214 40 41 41 41 59 2058 46 2215 40 2216 45 62 123 2217 60 2031 62 2218 61 2219 45 62 123 2083 91 93 2220 61 744 2083 91 2006 46 2221 40 41 46 2222 93 59 664 40 2006 2223 58 2006 46 2221 40 41 41 123 2220 91 2223 46 2224 40 41 93 61 2223 46 2225 40 41 59 125 792 2220 59 125 59 2217 60 2031 62 2226 61 2219 45 62 123 2083 91 93 2227 61 744 2083 91 2006 46 2228 40 41 46 2229 93 59 2227 91 2006 46 2230 46 2231 40 41 93 61 2088 46 2232 40 2219 41 59 2227 91 2006 46 2233 46 2231 40 41 93 61 2088 46 2234 40 2219 41 59 2227 91 2006 46 2235 46 2231 40 41 93 61 2088 46 2236 40 2219 41 59 2227 91 2006 46 2237 46 2231 40 41 93 61 2088 46 2238 40 2219 41 59 2227 91 2006 46 2239 46 2231 40 41 93 61 2088 46 2240 40 2219 41 59 2227 91 2006 46 2241 46 2231 40 41 93 61 2088 46 2242 40 2219 41 59 2227 91 2006 46 2243 46 2231 40 41 93 61 2088 46 2244 40 2219 44 2245 41 59 2227 91 2006 46 2246 46 2231 40 41 93 61 2088 46 2247 40 2219 41 59 2227 91 2006 46 2248 46 2231 40 41 93 61 2088 46 2249 40 2219 41 59 688 40 2088 46 2206 46 2250 40 2219 41 41 123 2227 91 2006 46 2251 46 2231 40 41 93 61 2088 46 2252 40 2219 44 2245 41 59 2227 91 2006 46 2253 46 2231 40 41 93 61 362 59 125 630 123 2227 91 2006 46 2254 46 2231 40 41 93 61 362 59 2227 91 2006 46 2255 46 2231 40 41 93 61 2088 46 2256 40 2219 44 2245 41 59 125 2227 91 2006 46 2257 46 2231 40 41 93 61 2088 46 2258 40 2219 41 59 2227 91 2006 46 2259 46 2231 40 41 93 61 2088 46 2260 40 2219 41 59 2227 91 2006 46 2261 46 2231 40 41 93 61 2088 46 2262 40 2219 41 59 2227 91 2006 46 2263 46 2231 40 41 93 61 2088 46 2264 40 2219 41 59 792 2227 59 125 59 2265 46 2266 40 362 44 2218 44 2226 44 2267 40 41 44 2079 44 40 2268 41 2269 46 2270 40 41 46 2271 40 41 41 59 125 41 59 2059 46 2215 40 2216 45 62 744 2272 40 2088 41 46 2273 40 41 41 59 2054 46 2274 40 41 46 2275 40 2084 41 59 2276 40 2054 46 2277 40 41 41 59 2278 46 2279 40 41 46 2275 40 2086 41 59 2280 40 2278 46 2281 40 41 41 59 125 64 2092 775 865 2282 40 41 123 2079 46 2283 40 41 46 2284 40 41 59 2058 46 2285 40 2286 41 59 2059 46 2285 40 2286 41 59 2054 46 2287 40 41 46 2288 40 2084 41 59 2289 46 2290 40 41 46 2288 40 2086 41 59 125 773 809 60 2291 650 2292 60 2291 356 2293 60 2031 62 2294 40 2295 60 2031 44 2291 62 2296 41 123 792 2293 46 2297 40 2298 45 62 2298 340 2299 63 2296 46 2300 40 2298 41 58 2299 44 2293 46 2301 40 2293 46 2302 40 41 41 41 59 125 773 809 60 2291 650 2292 60 2291 356 2293 60 2031 62 2303 40 2295 60 2304 44 2291 62 2296 41 123 792 2293 46 2305 40 2306 45 62 2306 702 2304 63 2296 46 2307 40 40 2304 41 2306 41 58 2308 44 2293 46 2309 40 2293 46 2310 40 41 41 41 59 125 773 865 2311 40 625 2312 41 123 2038 46 2313 40 2312 62 1505 41 59 2039 46 2313 40 2312 62 1505 41 59 2040 46 2313 40 2312 62 1505 41 59 2041 46 2313 40 2312 62 1505 41 59 125 773 865 2314 40 2083 2315 41 123 2081 46 2316 40 2317 45 62 123 688 40 2315 46 2318 40 41 41 792 2319 59 2320 2321 61 2317 46 2322 40 41 59 688 40 2321 46 2323 40 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2088 46 2325 40 2317 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2088 46 2326 40 2317 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2088 46 2327 40 2317 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2088 46 2328 40 2317 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2088 46 2329 40 2317 44 2319 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2088 46 2330 40 2317 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2088 46 2331 40 2317 44 2319 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2088 46 2332 40 2317 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2088 46 2333 40 2317 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2088 46 2334 40 2317 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2088 46 2335 40 2317 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2088 46 2336 40 2317 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2321 46 2337 40 41 46 2338 40 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2321 46 2339 40 41 340 2340 307 2321 46 2339 40 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2317 702 2341 41 123 2341 2342 61 40 2341 41 2317 59 688 40 2342 46 2343 40 41 340 2340 307 2342 46 2343 40 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2342 46 2344 40 41 46 2345 40 41 46 2324 40 2315 41 41 123 792 2319 59 125 125 688 40 2317 702 2346 41 123 2346 2347 61 40 2346 41 2317 59 688 40 2347 46 2348 40 41 340 2340 307 2347 46 2348 40 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2347 46 2349 40 41 340 2340 307 2347 46 2349 40 41 46 2324 40 2315 41 41 123 792 2319 59 125 688 40 2347 46 2350 40 41 340 2340 307 2347 46 2350 40 41 46 2324 40 2315 41 41 123 792 2319 59 125 2351 2352 61 2347 46 2353 40 41 59 570 2354 61 2355 59 570 2356 61 2355 59 570 2357 61 2355 59 570 2358 61 2355 59 688 40 2352 340 2340 41 123 2354 61 2352 46 2359 40 41 46 2360 40 41 46 2324 40 2315 41 59 2356 61 2352 46 2361 40 41 46 2360 40 41 46 2324 40 2315 41 59 2357 61 2352 46 2362 40 41 340 2340 307 2352 46 2362 40 41 46 2363 40 41 46 2324 40 2315 41 59 2358 61 2352 46 2364 40 41 340 2340 307 2352 46 2364 40 41 46 2363 40 41 46 2324 40 2315 41 59 125 792 2354 309 2356 309 2357 309 2358 59 125 630 123 792 2365 59 125 125 41 59 125 773 865 2366 40 41 123 2045 46 2367 40 41 46 2368 40 362 41 59 2045 46 2369 40 40 2370 41 45 62 744 2371 60 62 40 2370 46 2372 40 41 41 41 59 2045 46 2373 40 744 2374 60 62 40 41 123 64 2092 777 2375 60 2031 44 2031 62 2376 40 2033 60 2031 44 2031 62 2377 41 123 792 744 2375 60 62 40 41 123 773 2378 2379 59 64 2092 777 865 2380 40 657 2031 2381 44 570 2382 41 123 818 46 2380 40 2381 44 2382 41 59 688 40 2381 340 2383 307 33 2382 41 123 2379 61 744 2378 40 2088 46 2384 40 2381 41 41 59 2379 46 2385 40 2386 45 62 123 688 40 2381 702 2387 41 123 2075 46 2388 40 40 2387 41 2381 41 59 125 630 688 40 2381 702 2389 41 123 2067 46 2390 40 40 2389 41 2381 41 59 125 630 688 40 2381 702 2391 41 123 2065 46 2392 40 2381 46 2393 40 41 41 59 125 125 41 59 2379 46 2394 40 744 2395 40 2396 46 2397 40 362 41 41 41 59 2398 40 2379 41 59 125 630 123 2399 40 2383 41 59 688 40 2379 340 2383 41 2379 46 2400 40 2383 41 59 125 125 125 59 125 125 41 59 125 773 865 2401 40 41 123 2044 46 2402 40 40 2403 41 45 62 744 2404 60 62 40 2403 46 2405 40 41 41 41 59 2044 46 2406 40 744 2407 60 62 40 41 123 64 2092 777 2408 60 2031 44 2031 62 2409 40 2033 60 2031 44 2031 62 2410 41 123 792 744 2408 60 62 40 41 123 64 2092 777 865 2411 40 657 2031 2412 44 570 2413 41 123 818 46 2411 40 2412 44 2413 41 59 688 40 2412 340 2414 41 2415 40 744 2051 40 2088 46 2416 40 2412 41 41 41 59 630 2415 40 2414 41 59 125 125 59 125 125 41 59 125 773 865 2417 40 41 123 2042 46 2418 40 40 2419 41 45 62 744 2420 60 62 40 2419 46 2421 40 41 41 41 59 2042 46 2422 40 744 2423 60 62 40 41 123 64 2092 777 2424 60 2031 44 2031 62 2425 40 2033 60 2031 44 2031 62 2426 41 123 792 744 2424 60 62 40 41 123 64 2092 777 865 2427 40 657 2031 2428 44 570 2429 41 123 818 46 2427 40 2428 44 2429 41 59 2430 40 744 2051 40 2088 46 2431 40 2428 41 41 41 59 125 125 59 125 125 41 59 125 773 865 2432 40 41 123 2046 46 2433 40 40 2434 41 45 62 744 2435 60 62 40 2434 46 2436 40 41 41 41 59 2046 46 2437 40 744 2438 60 62 40 41 123 64 2092 777 2439 60 2031 44 2031 62 2440 40 2033 60 2031 44 2031 62 2441 41 123 792 744 2439 60 62 40 41 123 64 2092 777 865 2442 40 657 2031 2443 44 570 2444 41 123 818 46 2442 40 2443 44 2444 41 59 688 40 2443 340 2445 41 2446 40 744 2051 40 2088 46 2447 40 2443 41 41 41 59 630 2446 40 2445 41 59 125 125 59 125 125 41 59 125 773 865 2448 40 41 123 2047 46 2449 40 41 46 2450 40 362 41 59 2047 46 2451 40 40 2452 41 45 62 744 2453 60 62 40 2452 46 2454 40 41 41 41 59 2047 46 2455 40 744 2456 60 62 40 41 123 64 2092 777 2457 60 2031 44 2031 62 2458 40 2033 60 2031 44 2031 62 2459 41 123 792 744 2457 60 62 40 41 123 2460 2461 59 64 2092 777 865 2462 40 657 2031 2463 44 570 2464 41 123 818 46 2462 40 2463 44 2464 41 59 688 40 2463 340 2465 307 33 2464 307 2466 40 2463 46 2467 40 41 46 2468 40 41 41 41 123 688 40 2461 323 2465 41 123 2461 61 2469 40 2470 46 2471 41 59 2461 46 2472 40 744 2473 40 2474 46 2475 40 362 41 41 41 59 2476 40 2461 41 59 125 2461 46 2477 40 2478 45 62 2479 40 2463 46 2467 40 41 41 41 59 125 630 123 2480 40 2465 41 59 688 40 2461 340 2465 41 123 2461 46 2481 40 2465 41 59 2461 61 2465 59 125 125 125 125 59 125 125 41 59 125 64 2482 40 362 41 773 2033 60 2031 44 2031 62 2483 40 41 123 2048 46 2484 40 41 46 2485 40 362 44 362 41 59 2048 46 2486 40 40 2487 41 45 62 744 2488 60 62 40 2487 46 2489 40 41 41 41 59 2048 46 2490 40 744 2491 60 62 40 41 123 64 2092 777 2492 60 2031 44 2031 62 2493 40 2033 60 2031 44 2031 62 2494 41 123 792 744 2492 60 62 40 41 123 64 2092 777 865 2495 40 657 2031 2496 44 570 2497 41 123 818 46 2495 40 2496 44 2497 41 59 688 40 33 2497 307 2496 702 2304 41 123 2304 2498 61 40 2304 41 2496 59 704 2499 61 2088 46 2500 46 2501 40 2498 41 59 2502 2503 61 2498 46 2504 40 41 59 2083 2505 61 2506 46 2507 40 362 41 59 2508 2509 61 744 2510 40 2503 44 2505 44 2499 44 2077 44 2498 44 2073 44 2088 46 2500 46 2511 44 2005 41 59 2512 40 744 2513 40 1501 44 1503 44 1500 44 1500 41 41 59 2514 40 2509 41 59 125 630 123 2515 40 2516 41 59 125 125 125 59 125 125 41 59 792 2048 59 125 773 865 2517 40 41 123 2036 46 2518 40 40 2519 41 45 62 744 2520 60 62 40 2519 46 2521 40 41 41 41 59 2036 46 2522 40 744 2523 60 62 40 41 123 64 2092 777 2524 60 2031 44 2031 62 2525 40 2033 60 2031 44 2031 62 2526 41 123 792 744 2524 60 62 40 41 123 64 2092 777 865 2527 40 657 2031 2528 44 570 2529 41 123 818 46 2527 40 2528 44 2529 41 59 2530 40 744 2051 40 2088 46 2531 40 2528 41 41 41 59 125 125 59 125 125 41 59 125 773 865 2532 40 41 123 2034 46 2533 40 40 2534 41 45 62 744 2535 60 62 40 2534 46 2536 40 41 41 41 59 2034 46 2537 40 744 2538 60 62 40 41 123 64 2092 777 2539 60 2031 44 2031 62 2540 40 2033 60 2031 44 2031 62 2541 41 123 792 744 2539 60 62 40 41 123 64 2092 777 865 2542 40 657 2031 2543 44 570 2544 41 123 818 46 2542 40 2543 44 2544 41 59 2545 40 744 2051 40 2088 46 2546 40 2543 41 41 41 59 125 125 59 125 125 41 59 125 773 865 2547 40 41 123 2035 46 2548 40 40 2549 41 45 62 744 2550 60 62 40 2549 46 2551 40 41 41 41 59 2035 46 2552 40 744 2553 60 62 40 41 123 64 2092 777 2554 60 2031 44 2031 62 2555 40 2033 60 2031 44 2031 62 2556 41 123 792 744 2554 60 62 40 41 123 64 2092 777 865 2557 40 657 2031 2558 44 570 2559 41 123 818 46 2557 40 2558 44 2559 41 59 2560 40 744 2051 40 2088 46 2561 40 2558 41 41 41 59 125 125 59 125 125 41 59 125 773 865 2562 40 41 123 2037 46 2563 40 40 2564 41 45 62 744 2565 60 62 40 2564 46 2566 40 41 41 41 59 2037 46 2567 40 744 2568 60 62 40 41 123 64 2092 777 2569 60 2031 44 2031 62 2570 40 2033 60 2031 44 2031 62 2571 41 123 792 744 2569 60 62 40 41 123 64 2092 777 865 2572 40 657 2031 2573 44 570 2574 41 123 818 46 2572 40 2573 44 2574 41 59 688 40 2573 340 2575 41 2576 40 744 2051 40 2088 46 2577 40 2573 44 2578 41 41 41 59 630 2576 40 2575 41 59 125 125 59 125 125 41 59 125 773 865 2579 40 41 123 2043 46 2580 40 40 2581 41 45 62 744 2582 60 62 40 2581 46 2583 40 41 41 41 59 2043 46 2584 40 744 2585 60 62 40 41 123 64 2092 777 2586 60 2031 44 2031 62 2587 40 2033 60 2031 44 2031 62 2588 41 123 792 744 2586 60 62 40 41 123 64 2092 777 865 2589 40 657 2031 2590 44 570 2591 41 123 818 46 2589 40 2590 44 2591 41 59 2592 40 744 2051 40 2088 46 2593 40 2590 41 41 41 59 125 125 59 125 125 41 59 125 773 865 2594 40 41 123 2038 46 2595 40 40 2596 41 45 62 744 2597 60 62 40 2596 46 2598 40 41 41 41 59 2038 46 2599 40 744 2600 60 62 40 41 123 64 2092 777 2601 60 2031 44 2031 62 2602 40 2033 60 2031 44 2031 62 2603 41 123 792 744 2601 60 62 40 41 123 64 2092 777 865 2604 40 657 2031 2605 44 570 2606 41 123 818 46 2604 40 2605 44 2606 41 59 2607 40 744 2051 40 2088 46 2608 40 2605 41 41 41 59 125 125 59 125 125 41 59 125 773 865 2609 40 41 123 2039 46 2610 40 40 2611 41 45 62 744 2612 60 62 40 2611 46 2613 40 41 41 41 59 2039 46 2614 40 744 2615 60 62 40 41 123 64 2092 777 2616 60 2031 44 2031 62 2617 40 2033 60 2031 44 2031 62 2618 41 123 792 744 2616 60 62 40 41 123 64 2092 777 865 2619 40 657 2031 2620 44 570 2621 41 123 818 46 2619 40 2620 44 2621 41 59 2622 40 744 2051 40 2088 46 2623 40 2620 44 2624 41 41 41 59 125 125 59 125 125 41 59 125 773 865 2625 40 41 123 2040 46 2626 40 40 2627 41 45 62 744 2628 60 62 40 2627 46 2629 40 41 41 41 59 2040 46 2630 40 744 2631 60 62 40 41 123 64 2092 777 2632 60 2031 44 2031 62 2633 40 2033 60 2031 44 2031 62 2634 41 123 792 744 2632 60 62 40 41 123 64 2092 777 865 2635 40 657 2031 2636 44 570 2637 41 123 818 46 2635 40 2636 44 2637 41 59 2638 40 744 2051 40 2088 46 2639 40 2636 41 41 41 59 125 125 59 125 125 41 59 125 773 865 2640 40 41 123 2041 46 2641 40 40 2642 41 45 62 744 2643 60 62 40 2642 46 2644 40 41 41 41 59 2041 46 2645 40 744 2646 60 62 40 41 123 64 2092 777 2647 60 2031 44 2031 62 2648 40 2033 60 2031 44 2031 62 2649 41 123 792 744 2647 60 62 40 41 123 64 2092 777 865 2650 40 657 2031 2651 44 570 2652 41 123 818 46 2650 40 2651 44 2652 41 59 2653 40 744 2051 40 2088 46 2654 40 2651 41 41 41 59 125 125 59 125 125 41 59 125 773 865 2655 40 2656 2657 41 123 830 123 2658 2659 61 2657 46 2660 40 41 59 688 40 2661 40 2659 41 41 123 2662 46 2663 40 2069 44 2659 41 59 125 630 123 744 2664 40 41 46 2665 40 2666 46 2667 40 362 41 41 46 2668 40 41 59 125 125 580 40 2669 2670 41 123 2671 46 2672 40 362 44 2670 46 2673 40 41 41 59 125 125 773 570 2674 40 2675 2676 41 123 792 2676 46 2677 40 41 46 2678 40 2071 46 2677 40 41 41 59 125 773 2031 2679 40 41 123 792 744 2031 40 41 123 64 2092 777 2656 2680 40 41 123 792 2681 59 125 64 2092 777 2682 2683 40 41 123 792 2684 59 125 64 2092 777 2083 2685 40 41 123 792 2686 59 125 64 2092 777 2083 2687 40 41 123 792 2688 59 125 64 2092 777 2689 2690 40 41 123 792 2691 59 125 125 59 125 125 ,"{'AvgLine': 25, 'CountLine': 761, 'CountStmt': 411, 'MaxNesting': 2, 'AvgLineCode': 24, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 312, 'MaxEssential': 1, 'SumEssential': 78, 'AvgCyclomatic': 1, 'CountLineCode': 697, 'CountStmtDecl': 112, 'MaxCyclomatic': 3, 'SumCyclomatic': 88, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 62, 'CountSemicolon': 305, 'CountDeclMethod': 26, 'CountLineCodeExe': 502, 'CountLineComment': 2, 'CountClassCoupled': 60, 'CountClassDerived': 0, 'CountLineCodeDecl': 119, 'CountDeclMethodAll': 41, 'MaxInheritanceTree': 5, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 98, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 88, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 22, 'CountDeclInstanceMethod': 24, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 60, 'CountDeclInstanceVariable': 36, 'PercentLackOfCohesionModified': 91}"
3213,Java,"public class PendingTradesDataModel extends ActivatableDataModel {
    @Getter
    public final TradeManager tradeManager;
    public final BtcWalletService btcWalletService;
    public final MediationManager mediationManager;
    public final RefundManager refundManager;
    private final P2PService p2PService;
    private final WalletsSetup walletsSetup;
    @Getter
    private final AccountAgeWitnessService accountAgeWitnessService;
    public final DaoFacade daoFacade;
    public final Navigation navigation;
    public final WalletPasswordWindow walletPasswordWindow;
    private final NotificationCenter notificationCenter;
    private final OfferUtil offerUtil;

    final ObservableList<PendingTradesListItem> list = FXCollections.observableArrayList();
    private final ListChangeListener<Trade> tradesListChangeListener;
    private boolean isMaker;

    final ObjectProperty<PendingTradesListItem> selectedItemProperty = new SimpleObjectProperty<>();
    public final StringProperty txId = new SimpleStringProperty();

    @Getter
    private final TraderChatManager traderChatManager;
    public final Preferences preferences;
    private boolean activated;
    private ChangeListener<Trade.State> tradeStateChangeListener;
    private Trade selectedTrade;
    @Getter
    private final PubKeyRing pubKeyRing;

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, initialization
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    public PendingTradesDataModel(TradeManager tradeManager,
                                  BtcWalletService btcWalletService,
                                  PubKeyRing pubKeyRing,
                                  MediationManager mediationManager,
                                  RefundManager refundManager,
                                  TraderChatManager traderChatManager,
                                  Preferences preferences,
                                  P2PService p2PService,
                                  WalletsSetup walletsSetup,
                                  AccountAgeWitnessService accountAgeWitnessService,
                                  DaoFacade daoFacade,
                                  Navigation navigation,
                                  WalletPasswordWindow walletPasswordWindow,
                                  NotificationCenter notificationCenter,
                                  OfferUtil offerUtil) {
        this.tradeManager = tradeManager;
        this.btcWalletService = btcWalletService;
        this.pubKeyRing = pubKeyRing;
        this.mediationManager = mediationManager;
        this.refundManager = refundManager;
        this.traderChatManager = traderChatManager;
        this.preferences = preferences;
        this.p2PService = p2PService;
        this.walletsSetup = walletsSetup;
        this.accountAgeWitnessService = accountAgeWitnessService;
        this.daoFacade = daoFacade;
        this.navigation = navigation;
        this.walletPasswordWindow = walletPasswordWindow;
        this.notificationCenter = notificationCenter;
        this.offerUtil = offerUtil;

        tradesListChangeListener = change -> onListChanged();
        notificationCenter.setSelectItemByTradeIdConsumer(this::selectItemByTradeId);
    }

    @Override
    protected void activate() {
        tradeManager.getObservableList().addListener(tradesListChangeListener);
        onListChanged();
        if (selectedItemProperty.get() != null)
            notificationCenter.setSelectedTradeId(selectedItemProperty.get().getTrade().getId());

        activated = true;
    }

    @Override
    protected void deactivate() {
        tradeManager.getObservableList().removeListener(tradesListChangeListener);
        notificationCenter.setSelectedTradeId(null);
        activated = false;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // UI actions
    ///////////////////////////////////////////////////////////////////////////////////////////

    void onSelectItem(PendingTradesListItem item) {
        doSelectItem(item);
    }

    public void onPaymentStarted(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) {
        Trade trade = getTrade();
        checkNotNull(trade, ""trade must not be null"");
        checkArgument(trade instanceof BuyerTrade, ""Check failed: trade instanceof BuyerTrade. Was: "" + trade.getClass().getSimpleName());
        ((BuyerProtocol) tradeManager.getTradeProtocol(trade)).onPaymentStarted(resultHandler, errorMessageHandler);
    }

    public void onFiatPaymentReceived(ResultHandler resultHandler, ErrorMessageHandler errorMessageHandler) {
        Trade trade = getTrade();
        checkNotNull(trade, ""trade must not be null"");
        checkArgument(trade instanceof SellerTrade, ""Trade must be instance of SellerTrade"");
        ((SellerProtocol) tradeManager.getTradeProtocol(trade)).onPaymentReceived(resultHandler, errorMessageHandler);
    }

    public void onWithdrawRequest(String toAddress,
                                  Coin amount,
                                  Coin fee,
                                  KeyParameter aesKey,
                                  @Nullable String memo,
                                  ResultHandler resultHandler,
                                  FaultHandler faultHandler) {
        checkNotNull(getTrade(), ""trade must not be null"");

        if (toAddress != null && toAddress.length() > 0) {
            tradeManager.onWithdrawRequest(
                    toAddress,
                    amount,
                    fee,
                    aesKey,
                    getTrade(),
                    memo,
                    () -> {
                        resultHandler.handleResult();
                        selectBestItem();
                    },
                    (errorMessage, throwable) -> {
                        log.error(errorMessage);
                        faultHandler.handleFault(errorMessage, throwable);
                    });
        } else {
            faultHandler.handleFault(Res.get(""portfolio.pending.noReceiverAddressDefined""), null);
        }
    }

    public void onOpenDispute() {
        tryOpenDispute(false);
    }

    public void onOpenSupportTicket() {
        tryOpenDispute(true);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Nullable
    public Trade getTrade() {
        return selectedItemProperty.get() != null ? selectedItemProperty.get().getTrade() : null;
    }

    @Nullable
    Offer getOffer() {
        return getTrade() != null ? getTrade().getOffer() : null;
    }

    private boolean isBuyOffer() {
        return getOffer() != null && offerUtil.isBuyOffer(getOffer().getDirection());
    }

    boolean isBuyer() {
        return (isMaker(getOffer()) && isBuyOffer())
                || (!isMaker(getOffer()) && !isBuyOffer());
    }

    boolean isMaker(Offer offer) {
        return tradeManager.isMyOffer(offer);
    }

    public boolean isMaker() {
        return isMaker;
    }

    Coin getTradeFeeInBTC() {
        Trade trade = getTrade();
        if (trade != null) {
            Offer offer = trade.getOffer();
            if (isMaker()) {
                if (offer != null) {
                    if (offer.isCurrencyForMakerFeeBtc())
                        return offer.getMakerFee();
                    else
                        return Coin.ZERO;// getTradeFeeAsBsq is used for BSQ
                } else {
                    log.error(""offer is null"");
                    return Coin.ZERO;
                }
            } else {
                if (trade.isCurrencyForTakerFeeBtc())
                    return trade.getTakerFee();
                else
                    return Coin.ZERO; // getTradeFeeAsBsq is used for BSQ
            }
        } else {
            log.error(""Trade is null at getTotalFees"");
            return Coin.ZERO;
        }
    }

    Coin getTxFee() {
        Trade trade = getTrade();
        if (trade != null) {
            if (isMaker()) {
                Offer offer = trade.getOffer();
                if (offer != null) {
                    if (offer.isCurrencyForMakerFeeBtc())
                        return offer.getTxFee();
                    else
                        return offer.getTxFee().subtract(offer.getMakerFee()); // BSQ will be used as part of the miner fee
                } else {
                    log.error(""offer is null"");
                    return Coin.ZERO;
                }
            } else {
                if (trade.isCurrencyForTakerFeeBtc())
                    return trade.getTradeTxFee().multiply(3);
                else
                    return trade.getTradeTxFee().multiply(3).subtract(trade.getTakerFee()); // BSQ will be used as part of the miner fee
            }
        } else {
            log.error(""Trade is null at getTotalFees"");
            return Coin.ZERO;
        }
    }

    Coin getTradeFeeAsBsq() {
        Trade trade = getTrade();
        if (trade != null) {
            if (isMaker()) {
                Offer offer = trade.getOffer();
                if (offer != null) {
                    if (offer.isCurrencyForMakerFeeBtc()) {
                        return Coin.ZERO; // getTradeFeeInBTC is used for BTC
                    } else {
                        return offer.getMakerFee();
                    }
                } else {
                    log.error(""offer is null"");
                    return Coin.ZERO;
                }
            } else {
                if (trade.isCurrencyForTakerFeeBtc())
                    return Coin.ZERO; // getTradeFeeInBTC is used for BTC
                else
                    return trade.getTakerFee();
            }
        } else {
            log.error(""Trade is null at getTotalFees"");
            return Coin.ZERO;
        }
    }

    @Nullable
    public PaymentAccountPayload getSellersPaymentAccountPayload() {
        if (getTrade() != null && getTrade().getContract() != null)
            return getTrade().getContract().getSellerPaymentAccountPayload();
        else
            return null;
    }

    @Nullable
    public PaymentAccountPayload getBuyersPaymentAccountPayload() {
        if (getTrade() != null && getTrade().getContract() != null)
            return getTrade().getContract().getBuyerPaymentAccountPayload();
        else
            return null;
    }

    public String getReference() {
        return getOffer() != null ? getOffer().getShortId() : """";
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Private
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void onListChanged() {
        list.clear();
        list.addAll(tradeManager.getObservableList().stream()
                .map(PendingTradesListItem::new)
                .collect(Collectors.toList()));

        // we sort by date, earliest first
        list.sort((o1, o2) -> o2.getTrade().getDate().compareTo(o1.getTrade().getDate()));

        selectBestItem();
    }

    private void selectBestItem() {
        if (list.size() == 1)
            doSelectItem(list.get(0));
        else if (list.size() > 1 && (selectedItemProperty.get() == null || !list.contains(selectedItemProperty.get())))
            doSelectItem(list.get(0));
        else if (list.size() == 0)
            doSelectItem(null);
    }

    private void selectItemByTradeId(String tradeId) {
        if (activated) {
            list.stream().filter(e -> e.getTrade().getId().equals(tradeId)).findAny().ifPresent(this::doSelectItem);
        }
    }

    private void doSelectItem(@Nullable PendingTradesListItem item) {
        if (selectedTrade != null)
            selectedTrade.stateProperty().removeListener(tradeStateChangeListener);

        if (item != null) {
            selectedTrade = item.getTrade();
            if (selectedTrade == null) {
                log.error(""selectedTrade is null"");
                return;
            }

            Transaction depositTx = selectedTrade.getDepositTx();
            String tradeId = selectedTrade.getId();
            tradeStateChangeListener = (observable, oldValue, newValue) -> {
                if (depositTx != null) {
                    txId.set(depositTx.getTxId().toString());
                    notificationCenter.setSelectedTradeId(tradeId);
                    selectedTrade.stateProperty().removeListener(tradeStateChangeListener);
                } else {
                    txId.set("""");
                }
            };
            selectedTrade.stateProperty().addListener(tradeStateChangeListener);

            Offer offer = selectedTrade.getOffer();
            if (offer == null) {
                log.error(""offer is null"");
                return;
            }

            isMaker = tradeManager.isMyOffer(offer);
            if (depositTx != null) {
                txId.set(depositTx.getTxId().toString());
            } else {
                txId.set("""");
            }
            notificationCenter.setSelectedTradeId(tradeId);
        } else {
            selectedTrade = null;
            txId.set("""");
            notificationCenter.setSelectedTradeId(null);
        }
        selectedItemProperty.set(item);
    }

    private void tryOpenDispute(boolean isSupportTicket) {
        Trade trade = getTrade();
        if (trade == null) {
            log.error(""Trade is null"");
            return;
        }

        doOpenDispute(isSupportTicket, trade.getDepositTx());
    }

    private void doOpenDispute(boolean isSupportTicket, Transaction depositTx) {
        // We do not support opening a dispute if the deposit tx is null. Traders have to use the support channel at keybase
        // in such cases. The mediators or arbitrators could not help anyway with a payout in such cases.
        if (depositTx == null) {
            log.error(""Deposit tx must not be null"");
            new Popup().instruction(Res.get(""portfolio.pending.error.depositTxNull"")).show();
            return;
        }
        String depositTxId = depositTx.getTxId().toString();

        Trade trade = getTrade();
        if (trade == null) {
            log.warn(""trade is null at doOpenDispute"");
            return;
        }

        Offer offer = trade.getOffer();
        if (offer == null) {
            log.warn(""offer is null at doOpenDispute"");
            return;
        }

        if (!GUIUtil.isBootstrappedOrShowPopup(p2PService)) {
            return;
        }

        byte[] payoutTxSerialized = null;
        String payoutTxHashAsString = null;
        Transaction payoutTx = trade.getPayoutTx();
        if (payoutTx != null) {
            payoutTxSerialized = payoutTx.bitcoinSerialize();
            payoutTxHashAsString = payoutTx.getTxId().toString();
        }
        Trade.DisputeState disputeState = trade.getDisputeState();
        DisputeManager<? extends DisputeList<Dispute>> disputeManager;
        long lockTime = trade.getDelayedPayoutTx() == null ? trade.getLockTime() : trade.getDelayedPayoutTx().getLockTime();
        long remainingLockTime = lockTime - btcWalletService.getBestChainHeight();
        // In case we re-open a dispute we allow Trade.DisputeState.MEDIATION_REQUESTED
        boolean useMediation = disputeState == Trade.DisputeState.NO_DISPUTE ||
                (disputeState == Trade.DisputeState.MEDIATION_REQUESTED && remainingLockTime > 0);
        // In case we re-open a dispute we allow Trade.DisputeState.REFUND_REQUESTED
        boolean useRefundAgent = disputeState == Trade.DisputeState.MEDIATION_CLOSED ||
                disputeState == Trade.DisputeState.REFUND_REQUESTED || remainingLockTime <= 0;

        AtomicReference<String> donationAddressString = new AtomicReference<>("""");
        Transaction delayedPayoutTx = trade.getDelayedPayoutTx();
        try {
            TradeDataValidation.validateDelayedPayoutTx(trade,
                    delayedPayoutTx,
                    daoFacade,
                    btcWalletService,
                    donationAddressString::set);
        } catch (TradeDataValidation.ValidationException e) {
            // The peer sent us an invalid donation address. We do not return here as we don't want to break
            // mediation/arbitration and log only the issue. The dispute agent will run validation as well and will get
            // a popup displayed to react.
            log.error(""DelayedPayoutTxValidation failed. {}"", e.toString());

            if (useRefundAgent) {
                // We don't allow to continue and publish payout tx and open refund agent case.
                // In case it was caused by some bug we want to prevent a wrong payout. In case its a scam attempt we
                // want to protect the refund agent.
                return;
            }
        }

        ResultHandler resultHandler;
        if (useMediation) {
            // If no dispute state set we start with mediation
            resultHandler = () -> navigation.navigateTo(MainView.class, SupportView.class, MediationClientView.class);
            disputeManager = mediationManager;
            PubKeyRing mediatorPubKeyRing = trade.getMediatorPubKeyRing();
            checkNotNull(mediatorPubKeyRing, ""mediatorPubKeyRing must not be null"");
            byte[] depositTxSerialized = depositTx.bitcoinSerialize();
            Dispute dispute = new Dispute(new Date().getTime(),
                    trade.getId(),
                    pubKeyRing.hashCode(), // traderId
                    (offer.getDirection() == OfferDirection.BUY) == isMaker,
                    isMaker,
                    pubKeyRing,
                    trade.getDate().getTime(),
                    trade.getMaxTradePeriodDate().getTime(),
                    trade.getContract(),
                    trade.getContractHash(),
                    depositTxSerialized,
                    payoutTxSerialized,
                    depositTxId,
                    payoutTxHashAsString,
                    trade.getContractAsJson(),
                    trade.getMakerContractSignature(),
                    trade.getTakerContractSignature(),
                    mediatorPubKeyRing,
                    isSupportTicket,
                    SupportType.MEDIATION);
            dispute.setExtraData(""counterCurrencyTxId"", trade.getCounterCurrencyTxId());
            dispute.setExtraData(""counterCurrencyExtraData"", trade.getCounterCurrencyExtraData());

            dispute.setDonationAddressOfDelayedPayoutTx(donationAddressString.get());
            if (delayedPayoutTx != null) {
                dispute.setDelayedPayoutTxId(delayedPayoutTx.getTxId().toString());
            }

            trade.setDisputeState(Trade.DisputeState.MEDIATION_REQUESTED);
            sendOpenDisputeMessage(disputeManager, resultHandler, dispute);
            tradeManager.requestPersistence();
        } else if (useRefundAgent) {
            resultHandler = () -> navigation.navigateTo(MainView.class, SupportView.class, RefundClientView.class);

            if (delayedPayoutTx == null) {
                log.error(""Delayed payout tx is missing"");
                return;
            }

            // We only require for refund agent a confirmed deposit tx. For mediation we tolerate a unconfirmed tx as
            // no harm can be done to the mediator (refund agent who would accept a invalid deposit tx might reimburse
            // the traders but the funds never have been spent).
            TransactionConfidence confidenceForTxId = btcWalletService.getConfidenceForTxId(depositTxId);
            if (confidenceForTxId == null || confidenceForTxId.getConfidenceType() != TransactionConfidence.ConfidenceType.BUILDING) {
                log.error(""Confidence for deposit tx must be BUILDING, confidenceForTxId={}"", confidenceForTxId);
                new Popup().instruction(Res.get(""portfolio.pending.error.depositTxNotConfirmed"")).show();
                return;
            }

            if (remainingLockTime > 0) {
                new Popup().instruction(Res.get(""portfolio.pending.timeLockNotOver"",
                        FormattingUtils.getDateFromBlockHeight(remainingLockTime), remainingLockTime))
                        .show();
                return;
            }

            disputeManager = refundManager;
            PubKeyRing refundAgentPubKeyRing = trade.getRefundAgentPubKeyRing();
            checkNotNull(refundAgentPubKeyRing, ""refundAgentPubKeyRing must not be null"");
            byte[] depositTxSerialized = depositTx.bitcoinSerialize();
            String depositTxHashAsString = depositTx.getTxId().toString();
            Dispute dispute = new Dispute(new Date().getTime(),
                    trade.getId(),
                    pubKeyRing.hashCode(), // traderId
                    (offer.getDirection() == OfferDirection.BUY) == isMaker,
                    isMaker,
                    pubKeyRing,
                    trade.getDate().getTime(),
                    trade.getMaxTradePeriodDate().getTime(),
                    trade.getContract(),
                    trade.getContractHash(),
                    depositTxSerialized,
                    payoutTxSerialized,
                    depositTxHashAsString,
                    payoutTxHashAsString,
                    trade.getContractAsJson(),
                    trade.getMakerContractSignature(),
                    trade.getTakerContractSignature(),
                    refundAgentPubKeyRing,
                    isSupportTicket,
                    SupportType.REFUND);
            dispute.setExtraData(""counterCurrencyTxId"", trade.getCounterCurrencyTxId());
            dispute.setExtraData(""counterCurrencyExtraData"", trade.getCounterCurrencyExtraData());

            String tradeId = dispute.getTradeId();
            mediationManager.findDispute(tradeId)
                    .ifPresent(mediatorsDispute -> {
                        DisputeResult mediatorsDisputeResult = mediatorsDispute.getDisputeResultProperty().get();
                        ChatMessage mediatorsResultMessage = mediatorsDisputeResult == null ? null : mediatorsDisputeResult.getChatMessage();
                        if (mediatorsResultMessage != null) {
                            String mediatorAddress = Res.get(""support.mediatorsAddress"",
                                    mediatorsDispute.getContract().getRefundAgentNodeAddress().getFullAddress());
                            String message = mediatorAddress + ""\n\n"" + mediatorsResultMessage.getMessage();
                            dispute.setMediatorsDisputeResult(message);
                        }
                    });

            dispute.setDonationAddressOfDelayedPayoutTx(donationAddressString.get());
            dispute.setDelayedPayoutTxId(delayedPayoutTx.getTxId().toString());
            trade.setDisputeState(Trade.DisputeState.REFUND_REQUESTED);

            ((DisputeProtocol) tradeManager.getTradeProtocol(trade)).onPublishDelayedPayoutTx(() -> {
                        log.info(""DelayedPayoutTx published and message sent to peer"");
                        sendOpenDisputeMessage(disputeManager, resultHandler, dispute);
                    },
                    errorMessage -> new Popup().error(errorMessage).show());
        } else {
            log.warn(""Invalid dispute state {}"", disputeState.name());
        }
        tradeManager.requestPersistence();
    }

    public boolean isReadyForTxBroadcast() {
        return GUIUtil.isReadyForTxBroadcastOrShowPopup(p2PService, walletsSetup);
    }

    public boolean isBootstrappedOrShowPopup() {
        return GUIUtil.isBootstrappedOrShowPopup(p2PService);
    }

    public void onMoveInvalidTradeToFailedTrades(Trade trade) {
        tradeManager.onMoveInvalidTradeToFailedTrades(trade);
    }

    public boolean isSignWitnessTrade() {
        return accountAgeWitnessService.isSignWitnessTrade(selectedTrade);
    }

    private void sendOpenDisputeMessage(DisputeManager<? extends DisputeList<Dispute>> disputeManager,
                                        ResultHandler resultHandler,
                                        Dispute dispute) {
        disputeManager.sendOpenNewDisputeMessage(dispute,
                false,
                resultHandler,
                (errorMessage, throwable) -> {
                    if ((throwable instanceof DisputeAlreadyOpenException)) {
                        errorMessage += ""\n\n"" + Res.get(""portfolio.pending.openAgainDispute.msg"");
                        new Popup().warning(errorMessage)
                                .actionButtonText(Res.get(""portfolio.pending.openAgainDispute.button""))
                                .onAction(() -> disputeManager.sendOpenNewDisputeMessage(dispute,
                                        true,
                                        resultHandler,
                                        (e, t) -> log.error(e)))
                                .closeButtonText(Res.get(""shared.cancel""))
                                .show();
                    } else {
                        new Popup().warning(errorMessage).show();
                    }
                });
    }
}",1,777 587 2000 650 2001 123 64 2002 777 657 2003 2004 59 777 657 2005 2006 59 777 657 2007 2008 59 777 657 2009 2010 59 773 657 2011 2012 59 773 657 2013 2014 59 64 2002 773 657 2015 2016 59 777 657 2017 2018 59 777 657 2019 2020 59 777 657 2021 2022 59 773 657 2023 2024 59 773 657 2025 2026 59 657 2027 60 2028 62 2029 61 2030 46 2031 40 41 59 773 657 2032 60 2033 62 2034 59 773 570 2035 59 657 2036 60 2028 62 2037 61 744 2038 60 62 40 41 59 777 657 2039 2040 61 744 2041 40 41 59 64 2002 773 657 2042 2043 59 777 657 2044 2045 59 773 570 2046 59 773 2047 60 2033 46 2048 62 2049 59 773 2033 2050 59 64 2002 773 657 2051 2052 59 331 330 331 64 2053 777 2000 40 2003 2004 44 2005 2006 44 2051 2052 44 2007 2008 44 2009 2010 44 2042 2043 44 2044 2045 44 2011 2012 44 2013 2014 44 2015 2016 44 2017 2018 44 2019 2020 44 2021 2022 44 2023 2024 44 2025 2026 41 123 823 46 2004 61 2004 59 823 46 2006 61 2006 59 823 46 2052 61 2052 59 823 46 2008 61 2008 59 823 46 2010 61 2010 59 823 46 2043 61 2043 59 823 46 2045 61 2045 59 823 46 2012 61 2012 59 823 46 2014 61 2014 59 823 46 2016 61 2016 59 823 46 2018 61 2018 59 823 46 2020 61 2020 59 823 46 2022 61 2022 59 823 46 2024 61 2024 59 823 46 2026 61 2026 59 2034 61 2054 45 62 2055 40 41 59 2024 46 2056 40 823 58 58 2057 41 59 125 64 2058 775 865 2059 40 41 123 2004 46 2060 40 41 46 2061 40 2034 41 59 2062 40 41 59 688 40 2037 46 2063 40 41 340 2064 41 2024 46 2065 40 2037 46 2063 40 41 46 2066 40 41 46 2067 40 41 41 59 2046 61 2068 59 125 64 2058 775 865 2069 40 41 123 2004 46 2070 40 41 46 2071 40 2034 41 59 2024 46 2072 40 2073 41 59 2046 61 2074 59 125 331 330 331 865 2075 40 2028 2076 41 123 2077 40 2076 41 59 125 777 865 2078 40 2079 2080 44 2081 2082 41 123 2033 2083 61 2084 40 41 59 2085 40 2083 44 362 41 59 2086 40 2083 702 2087 44 362 43 2083 46 2088 40 41 46 2089 40 41 41 59 40 40 2090 41 2004 46 2091 40 2083 41 41 46 2078 40 2080 44 2082 41 59 125 777 865 2092 40 2079 2080 44 2081 2082 41 123 2033 2093 61 2094 40 41 59 2095 40 2093 44 362 41 59 2096 40 2093 702 2097 44 362 41 59 40 40 2098 41 2004 46 2099 40 2093 41 41 46 2100 40 2080 44 2082 41 59 125 777 865 2101 40 2102 2103 44 2104 2105 44 2104 2106 44 2107 2108 44 64 2109 2102 2110 44 2079 2080 44 2111 2112 41 123 2113 40 2114 40 41 44 362 41 59 688 40 2103 340 2115 307 2103 46 2116 40 41 62 1500 41 123 2004 46 2101 40 2103 44 2105 44 2106 44 2108 44 2114 40 41 44 2110 44 40 41 45 62 123 2080 46 2117 40 41 59 2118 40 41 59 125 44 40 2119 44 2120 41 45 62 123 2121 46 2122 40 2119 41 59 2112 46 2123 40 2119 44 2120 41 59 125 41 59 125 630 123 2112 46 2124 40 2125 46 2126 40 362 41 44 2115 41 59 125 125 777 865 2127 40 41 123 2128 40 2129 41 59 125 777 865 2130 40 41 123 2131 40 2132 41 59 125 331 330 331 64 2109 777 2033 2133 40 41 123 792 2037 46 2134 40 41 340 2135 63 2037 46 2134 40 41 46 2133 40 41 58 2135 59 125 64 2109 2136 2137 40 41 123 792 2133 40 41 340 2138 63 2133 40 41 46 2137 40 41 58 2138 59 125 773 570 2139 40 41 123 792 2137 40 41 340 2140 307 2026 46 2139 40 2137 40 41 46 2141 40 41 41 59 125 570 2142 40 41 123 792 40 2035 40 2137 40 41 41 307 2139 40 41 41 309 40 33 2035 40 2137 40 41 41 307 33 2139 40 41 41 59 125 570 2035 40 2136 2143 41 123 792 2004 46 2144 40 2143 41 59 125 777 570 2035 40 41 123 792 2035 59 125 2104 2145 40 41 123 2033 2146 61 2133 40 41 59 688 40 2146 340 2147 41 123 2136 2143 61 2146 46 2137 40 41 59 688 40 2035 40 41 41 123 688 40 2143 340 2147 41 123 688 40 2143 46 2148 40 41 41 792 2143 46 2149 40 41 59 630 792 2104 46 2150 59 330 125 630 123 2151 46 2152 40 362 41 59 792 2104 46 2153 59 125 125 630 123 688 40 2146 46 2154 40 41 41 792 2146 46 2155 40 41 59 630 792 2104 46 2156 59 330 125 125 630 123 2157 46 2158 40 362 41 59 792 2104 46 2159 59 125 125 2104 2160 40 41 123 2033 2161 61 2133 40 41 59 688 40 2161 340 2162 41 123 688 40 2035 40 41 41 123 2136 2143 61 2161 46 2137 40 41 59 688 40 2143 340 2162 41 123 688 40 2143 46 2163 40 41 41 792 2143 46 2160 40 41 59 630 792 2143 46 2160 40 41 46 2164 40 2143 46 2165 40 41 41 59 330 125 630 123 2166 46 2167 40 362 41 59 792 2104 46 2168 59 125 125 630 123 688 40 2161 46 2169 40 41 41 792 2161 46 2170 40 41 46 2171 40 1502 41 59 630 792 2161 46 2170 40 41 46 2171 40 1502 41 46 2172 40 2161 46 2173 40 41 41 59 330 125 125 630 123 2174 46 2175 40 362 41 59 792 2104 46 2176 59 125 125 2104 2177 40 41 123 2033 2178 61 2133 40 41 59 688 40 2178 340 2179 41 123 688 40 2035 40 41 41 123 2136 2143 61 2178 46 2137 40 41 59 688 40 2143 340 2179 41 123 688 40 2143 46 2180 40 41 41 123 792 2104 46 2181 59 330 125 630 123 792 2143 46 2182 40 41 59 125 125 630 123 2183 46 2184 40 362 41 59 792 2104 46 2185 59 125 125 630 123 688 40 2178 46 2186 40 41 41 792 2104 46 2187 59 330 630 792 2178 46 2188 40 41 59 125 125 630 123 2189 46 2190 40 362 41 59 792 2104 46 2191 59 125 125 64 2109 777 2192 2193 40 41 123 688 40 2133 40 41 340 2194 307 2133 40 41 46 2195 40 41 340 2194 41 792 2133 40 41 46 2195 40 41 46 2196 40 41 59 630 792 2194 59 125 64 2109 777 2192 2197 40 41 123 688 40 2133 40 41 340 2198 307 2133 40 41 46 2199 40 41 340 2198 41 792 2133 40 41 46 2199 40 41 46 2200 40 41 59 630 792 2198 59 125 777 2102 2201 40 41 123 792 2137 40 41 340 2202 63 2137 40 41 46 2203 40 41 58 362 59 125 331 330 331 773 865 2204 40 41 123 2029 46 2205 40 41 59 2029 46 2206 40 2004 46 2207 40 41 46 2208 40 41 46 2209 40 2028 58 58 744 41 46 2210 40 2211 46 2212 40 41 41 41 59 330 2029 46 2213 40 40 2214 44 2215 41 45 62 2215 46 2133 40 41 46 2216 40 41 46 2217 40 2214 46 2133 40 41 46 2216 40 41 41 41 59 2218 40 41 59 125 773 865 2219 40 41 123 688 40 2029 46 2220 40 41 323 1501 41 2221 40 2029 46 2222 40 1500 41 41 59 630 688 40 2029 46 2220 40 41 62 1501 307 40 2037 46 2222 40 41 323 2223 309 33 2029 46 2224 40 2037 46 2222 40 41 41 41 41 2221 40 2029 46 2222 40 1500 41 41 59 630 688 40 2029 46 2220 40 41 323 1500 41 2221 40 2223 41 59 125 773 865 2225 40 2102 2226 41 123 688 40 2046 41 123 2029 46 2227 40 41 46 2228 40 2229 45 62 2229 46 2133 40 41 46 2230 40 41 46 2231 40 2226 41 41 46 2232 40 41 46 2233 40 823 58 58 2234 41 59 125 125 773 865 2235 40 64 2109 2028 2076 41 123 688 40 2050 340 2236 41 2050 46 2237 40 41 46 2238 40 2049 41 59 688 40 2076 340 2236 41 123 2050 61 2076 46 2133 40 41 59 688 40 2050 323 2236 41 123 2239 46 2240 40 362 41 59 792 59 125 2241 2242 61 2050 46 2243 40 41 59 2102 2226 61 2050 46 2244 40 41 59 2049 61 40 2245 44 2246 44 2247 41 45 62 123 688 40 2242 340 2236 41 123 2040 46 2248 40 2242 46 2249 40 41 46 2250 40 41 41 59 2024 46 2251 40 2226 41 59 2050 46 2237 40 41 46 2238 40 2049 41 59 125 630 123 2040 46 2252 40 362 41 59 125 125 59 2050 46 2237 40 41 46 2253 40 2049 41 59 2136 2143 61 2050 46 2137 40 41 59 688 40 2143 323 2236 41 123 2254 46 2255 40 362 41 59 792 59 125 2035 61 2004 46 2256 40 2143 41 59 688 40 2242 340 2236 41 123 2040 46 2257 40 2242 46 2258 40 41 46 2259 40 41 41 59 125 630 123 2040 46 2260 40 362 41 59 125 2024 46 2261 40 2226 41 59 125 630 123 2050 61 2236 59 2040 46 2262 40 362 41 59 2024 46 2263 40 2236 41 59 125 2037 46 2264 40 2076 41 59 125 773 865 2265 40 570 2266 41 123 2033 2267 61 2133 40 41 59 688 40 2267 323 2268 41 123 2269 46 2270 40 362 41 59 792 59 125 2271 40 2266 44 2267 46 2272 40 41 41 59 125 773 865 2273 40 570 2266 44 2274 2275 41 123 330 330 688 40 2275 323 2276 41 123 2277 46 2278 40 362 41 59 744 2279 40 41 46 2280 40 2281 46 2282 40 362 41 41 46 2283 40 41 59 792 59 125 2102 2284 61 2275 46 2285 40 41 46 2286 40 41 59 2033 2287 61 2133 40 41 59 688 40 2287 323 2276 41 123 2288 46 2289 40 362 41 59 792 59 125 2136 2143 61 2287 46 2137 40 41 59 688 40 2143 323 2276 41 123 2290 46 2291 40 362 41 59 792 59 125 688 40 33 2292 46 2293 40 2012 41 41 123 792 59 125 574 91 93 2294 61 2276 59 2102 2295 61 2276 59 2274 2296 61 2287 46 2297 40 41 59 688 40 2296 340 2276 41 123 2294 61 2296 46 2298 40 41 59 2295 61 2296 46 2285 40 41 46 2286 40 41 59 125 2033 46 2299 2300 61 2287 46 2301 40 41 59 2302 60 63 650 2303 60 2304 356 2305 59 726 2306 61 2287 46 2307 40 41 323 2276 63 2287 46 2308 40 41 58 2287 46 2307 40 41 46 2308 40 41 59 726 2309 61 2306 45 2006 46 2310 40 41 59 330 570 2311 61 2300 323 2033 46 2299 46 2312 309 40 2300 323 2033 46 2299 46 2313 307 2309 62 1500 41 59 330 570 2314 61 2300 323 2033 46 2299 46 2315 309 2300 323 2033 46 2299 46 2316 309 2309 329 1500 59 2317 60 2102 62 2318 61 744 2317 60 62 40 362 41 59 2274 2319 61 2287 46 2307 40 41 59 830 123 2320 46 2321 40 2287 44 2319 44 2018 44 2006 44 2318 58 58 2322 41 59 125 580 40 2323 46 2324 2325 41 123 330 330 330 2326 46 2327 40 362 44 2325 46 2286 40 41 41 59 688 40 2314 41 123 330 330 330 792 59 125 125 2079 2080 59 688 40 2311 41 123 330 2080 61 40 41 45 62 2020 46 2328 40 2329 46 587 44 2330 46 587 44 2331 46 587 41 59 2305 61 2008 59 2051 2332 61 2287 46 2333 40 41 59 2334 40 2332 44 362 41 59 574 91 93 2335 61 2275 46 2336 40 41 59 2304 2337 61 744 2304 40 744 2338 40 41 46 2339 40 41 44 2287 46 2340 40 41 44 2052 46 2341 40 41 44 330 40 2143 46 2342 40 41 323 2343 46 2344 41 323 2035 44 2035 44 2052 44 2287 46 2345 40 41 46 2339 40 41 44 2287 46 2346 40 41 46 2339 40 41 44 2287 46 2347 40 41 44 2287 46 2348 40 41 44 2335 44 2294 44 2284 44 2295 44 2287 46 2349 40 41 44 2287 46 2350 40 41 44 2287 46 2351 40 41 44 2332 44 2266 44 2352 46 2353 41 59 2337 46 2354 40 362 44 2287 46 2355 40 41 41 59 2337 46 2354 40 362 44 2287 46 2356 40 41 41 59 2337 46 2357 40 2318 46 2358 40 41 41 59 688 40 2319 340 2276 41 123 2337 46 2359 40 2319 46 2285 40 41 46 2286 40 41 41 59 125 2287 46 2360 40 2033 46 2299 46 2313 41 59 2361 40 2305 44 2080 44 2337 41 59 2004 46 2362 40 41 59 125 630 688 40 2314 41 123 2080 61 40 41 45 62 2020 46 2363 40 2364 46 587 44 2365 46 587 44 2366 46 587 41 59 688 40 2319 323 2276 41 123 2367 46 2368 40 362 41 59 792 59 125 330 330 330 2369 2370 61 2006 46 2371 40 2284 41 59 688 40 2370 323 2276 309 2370 46 2372 40 41 340 2369 46 2373 46 2374 41 123 2375 46 2376 40 362 44 2370 41 59 744 2377 40 41 46 2378 40 2379 46 2380 40 362 41 41 46 2381 40 41 59 792 59 125 688 40 2309 62 1500 41 123 744 2382 40 41 46 2383 40 2384 46 2385 40 362 44 2386 46 2387 40 2309 41 44 2309 41 41 46 2388 40 41 59 792 59 125 2305 61 2010 59 2051 2389 61 2287 46 2390 40 41 59 2391 40 2389 44 362 41 59 574 91 93 2392 61 2275 46 2393 40 41 59 2102 2394 61 2275 46 2285 40 41 46 2286 40 41 59 2304 2395 61 744 2304 40 744 2396 40 41 46 2397 40 41 44 2287 46 2398 40 41 44 2052 46 2399 40 41 44 330 40 2143 46 2400 40 41 323 2401 46 2402 41 323 2035 44 2035 44 2052 44 2287 46 2403 40 41 46 2397 40 41 44 2287 46 2404 40 41 46 2397 40 41 44 2287 46 2405 40 41 44 2287 46 2406 40 41 44 2392 44 2294 44 2394 44 2295 44 2287 46 2407 40 41 44 2287 46 2408 40 41 44 2287 46 2409 40 41 44 2389 44 2266 44 2410 46 2411 41 59 2395 46 2412 40 362 44 2287 46 2413 40 41 41 59 2395 46 2412 40 362 44 2287 46 2414 40 41 41 59 2102 2226 61 2395 46 2415 40 41 59 2008 46 2416 40 2226 41 46 2417 40 2418 45 62 123 2419 2420 61 2418 46 2421 40 41 46 2422 40 41 59 2423 2424 61 2420 323 2276 63 2276 58 2420 46 2425 40 41 59 688 40 2424 340 2276 41 123 2102 2426 61 2427 46 2422 40 362 44 2418 46 2405 40 41 46 2428 40 41 46 2429 40 41 41 59 2102 2430 61 2426 43 362 43 2424 46 2431 40 41 59 2395 46 2432 40 2430 41 59 125 125 41 59 2395 46 2433 40 2318 46 2434 40 41 41 59 2395 46 2435 40 2319 46 2285 40 41 46 2286 40 41 41 59 2287 46 2436 40 2033 46 2299 46 2316 41 59 40 40 2437 41 2004 46 2438 40 2287 41 41 46 2439 40 40 41 45 62 123 2440 46 2441 40 362 41 59 2442 40 2305 44 2080 44 2395 41 59 125 44 2443 45 62 744 2444 40 41 46 2445 40 2443 41 46 2446 40 41 41 59 125 630 123 2447 46 2448 40 362 44 2300 46 2449 40 41 41 59 125 2004 46 2450 40 41 59 125 777 570 2451 40 41 123 792 2452 46 2453 40 2012 44 2014 41 59 125 777 570 2454 40 41 123 792 2455 46 2454 40 2012 41 59 125 777 865 2456 40 2033 2457 41 123 2004 46 2456 40 2457 41 59 125 777 570 2458 40 41 123 792 2016 46 2458 40 2050 41 59 125 773 865 2459 40 2460 60 63 650 2461 60 2462 356 2463 44 2079 2080 44 2462 2464 41 123 2463 46 2465 40 2464 44 2466 44 2080 44 40 2467 44 2468 41 45 62 123 688 40 40 2468 702 2469 41 41 123 2467 348 362 43 2470 46 2471 40 362 41 59 744 2472 40 41 46 2473 40 2467 41 46 2474 40 2470 46 2471 40 362 41 41 46 2475 40 40 41 45 62 2463 46 2465 40 2464 44 2476 44 2080 44 40 2477 44 2478 41 45 62 2479 46 2480 40 2477 41 41 41 46 2481 40 2470 46 2471 40 362 41 41 46 2482 40 41 59 125 630 123 744 2483 40 41 46 2484 40 2467 41 46 2485 40 41 59 125 125 41 59 125 125 ,"{'AvgLine': 15, 'CountLine': 591, 'CountStmt': 300, 'MaxNesting': 4, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 241, 'MaxEssential': 12, 'SumEssential': 73, 'AvgCyclomatic': 2, 'CountLineCode': 498, 'CountStmtDecl': 96, 'MaxCyclomatic': 15, 'SumCyclomatic': 94, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 66, 'CountSemicolon': 222, 'CountDeclMethod': 32, 'CountLineCodeExe': 345, 'CountLineComment': 35, 'CountClassCoupled': 66, 'CountClassDerived': 0, 'CountLineCodeDecl': 134, 'CountDeclMethodAll': 36, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.07', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 20, 'SumCyclomaticStrict': 108, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 15, 'MaxCyclomaticModified': 15, 'PercentLackOfCohesion': 91, 'SumCyclomaticModified': 94, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 7, 'CountDeclMethodPrivate': 8, 'CountDeclInstanceMethod': 32, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 66, 'CountDeclInstanceVariable': 23, 'PercentLackOfCohesionModified': 80}"
2689,Java,"public class MovementParkour extends Movement {

    private static final BetterBlockPos[] EMPTY = new BetterBlockPos[]{};

    private final EnumFacing direction;
    private final int dist;
    private final boolean ascend;

    private MovementParkour(IBaritone baritone, BetterBlockPos src, int dist, EnumFacing dir, boolean ascend) {
        super(baritone, src, src.offset(dir, dist).up(ascend ? 1 : 0), EMPTY, src.offset(dir, dist).down(ascend ? 0 : 1));
        this.direction = dir;
        this.dist = dist;
        this.ascend = ascend;
    }

    public static MovementParkour cost(CalculationContext context, BetterBlockPos src, EnumFacing direction) {
        MutableMoveResult res = new MutableMoveResult();
        cost(context, src.x, src.y, src.z, direction, res);
        int dist = Math.abs(res.x - src.x) + Math.abs(res.z - src.z);
        return new MovementParkour(context.getBaritone(), src, dist, direction, res.y > src.y);
    }

    public static void cost(CalculationContext context, int x, int y, int z, EnumFacing dir, MutableMoveResult res) {
        if (!context.allowParkour) {
            return;
        }
        if (y == 256 && !context.allowJumpAt256) {
            return;
        }

        int xDiff = dir.getXOffset();
        int zDiff = dir.getZOffset();
        if (!MovementHelper.fullyPassable(context, x + xDiff, y, z + zDiff)) {
            // most common case at the top -- the adjacent block isn't air
            return;
        }
        IBlockState adj = context.get(x + xDiff, y - 1, z + zDiff);
        if (MovementHelper.canWalkOn(context.bsi, x + xDiff, y - 1, z + zDiff, adj)) { // don't parkour if we could just traverse (for now)
            // second most common case -- we could just traverse not parkour
            return;
        }
        if (MovementHelper.avoidWalkingInto(adj.getBlock()) && adj.getBlock() != Blocks.WATER && adj.getBlock() != Blocks.FLOWING_WATER) { // magma sucks
            return;
        }
        if (!MovementHelper.fullyPassable(context, x + xDiff, y + 1, z + zDiff)) {
            return;
        }
        if (!MovementHelper.fullyPassable(context, x + xDiff, y + 2, z + zDiff)) {
            return;
        }
        if (!MovementHelper.fullyPassable(context, x, y + 2, z)) {
            return;
        }
        IBlockState standingOn = context.get(x, y - 1, z);
        if (standingOn.getBlock() == Blocks.VINE || standingOn.getBlock() == Blocks.LADDER || standingOn.getBlock() instanceof BlockStairs || MovementHelper.isBottomSlab(standingOn) || standingOn.getBlock() instanceof BlockLiquid) {
            return;
        }
        int maxJump;
        if (standingOn.getBlock() == Blocks.SOUL_SAND) {
            maxJump = 2; // 1 block gap
        } else {
            if (context.canSprint) {
                maxJump = 4;
            } else {
                maxJump = 3;
            }
        }
        
        // check parkour jumps from smallest to largest for obstacles/walls and landing positions
        int verifiedMaxJump = 1; // i - 1 (when i = 2)
        for (int i = 2; i <= maxJump; i++) {
            int destX = x + xDiff * i;
            int destZ = z + zDiff * i;
            
            // check head/feet
            if (!MovementHelper.fullyPassable(context, destX, y + 1, destZ)) {
                break;
            }
            if (!MovementHelper.fullyPassable(context, destX, y + 2, destZ)) {
                break;
            }
            
            // check for ascend landing position
            IBlockState destInto = context.bsi.get0(destX, y, destZ);
            if (!MovementHelper.fullyPassable(context.bsi.access, context.bsi.isPassableBlockPos.setPos(destX, y, destZ), destInto)) {
                if (i <= 3 && context.allowParkourAscend && context.canSprint && MovementHelper.canWalkOn(context.bsi, destX, y, destZ, destInto) && checkOvershootSafety(context.bsi, destX + xDiff, y + 1, destZ + zDiff)) {
                    res.x = destX;
                    res.y = y + 1;
                    res.z = destZ;
                    res.cost = i * SPRINT_ONE_BLOCK_COST + context.jumpPenalty;
                    return;
                }
                break;
            }
            
            // check for flat landing position
            IBlockState landingOn = context.bsi.get0(destX, y - 1, destZ);
            // farmland needs to be canWalkOn otherwise farm can never work at all, but we want to specifically disallow ending a jump on farmland haha
            if (landingOn.getBlock() != Blocks.FARMLAND && MovementHelper.canWalkOn(context.bsi, destX, y - 1, destZ, landingOn)) {
                if (checkOvershootSafety(context.bsi, destX + xDiff, y, destZ + zDiff)) {
                    res.x = destX;
                    res.y = y;
                    res.z = destZ;
                    res.cost = costFromJumpDistance(i) + context.jumpPenalty;
                    return;
                }
                break;
            }
            
            if (!MovementHelper.fullyPassable(context, destX, y + 3, destZ)) {
                break;
            }
            
            verifiedMaxJump = i;
        }
        
        // parkour place starts here
        if (!context.allowParkourPlace) {
            return;
        }
        // check parkour jumps from largest to smallest for positions to place blocks
        for (int i = verifiedMaxJump; i > 1; i--) {
            int destX = x + i * xDiff;
            int destZ = z + i * zDiff;
            IBlockState toReplace = context.get(destX, y - 1, destZ);
            double placeCost = context.costOfPlacingAt(destX, y - 1, destZ, toReplace);
            if (placeCost >= COST_INF) {
                continue;
            }
            if (!MovementHelper.isReplaceable(destX, y - 1, destZ, toReplace, context.bsi)) {
                continue;
            }
            if (!checkOvershootSafety(context.bsi, destX + xDiff, y, destZ + zDiff)) {
                continue;
            }
            for (int j = 0; j < 5; j++) {
                int againstX = destX + HORIZONTALS_BUT_ALSO_DOWN_____SO_EVERY_DIRECTION_EXCEPT_UP[j].getXOffset();
                int againstY = y - 1 + HORIZONTALS_BUT_ALSO_DOWN_____SO_EVERY_DIRECTION_EXCEPT_UP[j].getYOffset();
                int againstZ = destZ + HORIZONTALS_BUT_ALSO_DOWN_____SO_EVERY_DIRECTION_EXCEPT_UP[j].getZOffset();
                if (againstX == destX - xDiff && againstZ == destZ - zDiff) { // we can't turn around that fast
                    continue;
                }
                if (MovementHelper.canPlaceAgainst(context.bsi, againstX, againstY, againstZ)) {
                    res.x = destX;
                    res.y = y;
                    res.z = destZ;
                    res.cost = costFromJumpDistance(i) + placeCost + context.jumpPenalty;
                    return;
                }
            }
        }
    }

    private static boolean checkOvershootSafety(BlockStateInterface bsi, int x, int y, int z) {
        // we're going to walk into these two blocks after the landing of the parkour anyway, so make sure they aren't avoidWalkingInto
        return !MovementHelper.avoidWalkingInto(bsi.get0(x, y, z).getBlock()) && !MovementHelper.avoidWalkingInto(bsi.get0(x, y + 1, z).getBlock());
    }

    private static double costFromJumpDistance(int dist) {
        switch (dist) {
            case 2:
                return WALK_ONE_BLOCK_COST * 2; // IDK LOL
            case 3:
                return WALK_ONE_BLOCK_COST * 3;
            case 4:
                return SPRINT_ONE_BLOCK_COST * 4;
            default:
                throw new IllegalStateException(""LOL "" + dist);
        }
    }


    @Override
    public double calculateCost(CalculationContext context) {
        MutableMoveResult res = new MutableMoveResult();
        cost(context, src.x, src.y, src.z, direction, res);
        if (res.x != dest.x || res.y != dest.y || res.z != dest.z) {
            return COST_INF;
        }
        return res.cost;
    }

    @Override
    protected Set<BetterBlockPos> calculateValidPositions() {
        Set<BetterBlockPos> set = new HashSet<>();
        for (int i = 0; i <= dist; i++) {
            for (int y = 0; y < 2; y++) {
                set.add(src.offset(direction, i).up(y));
            }
        }
        return set;
    }

    @Override
    public boolean safeToCancel(MovementState state) {
        // once this movement is instantiated, the state is default to PREPPING
        // but once it's ticked for the first time it changes to RUNNING
        // since we don't really know anything about momentum, it suffices to say Parkour can only be canceled on the 0th tick
        return state.getStatus() != MovementStatus.RUNNING;
    }

    @Override
    public MovementState updateState(MovementState state) {
        super.updateState(state);
        if (state.getStatus() != MovementStatus.RUNNING) {
            return state;
        }
        if (ctx.playerFeet().y < src.y) {
            // we have fallen
            logDebug(""sorry"");
            return state.setStatus(MovementStatus.UNREACHABLE);
        }
        if (dist >= 4 || ascend) {
            state.setInput(Input.SPRINT, true);
        }
        MovementHelper.moveTowards(ctx, state, dest);
        if (ctx.playerFeet().equals(dest)) {
            Block d = BlockStateInterface.getBlock(ctx, dest);
            if (d == Blocks.VINE || d == Blocks.LADDER) {
                // it physically hurt me to add support for parkour jumping onto a vine
                // but i did it anyway
                return state.setStatus(MovementStatus.SUCCESS);
            }
            if (ctx.player().posY - ctx.playerFeet().getY() < 0.094) { // lilypads
                state.setStatus(MovementStatus.SUCCESS);
            }
        } else if (!ctx.playerFeet().equals(src)) {
            if (ctx.playerFeet().equals(src.offset(direction)) || ctx.player().posY - src.y > 0.0001) {
                if (!MovementHelper.canWalkOn(ctx, dest.down()) && !ctx.player().onGround && MovementHelper.attemptToPlaceABlock(state, baritone, dest.down(), true, false) == PlaceResult.READY_TO_PLACE) {
                    // go in the opposite order to check DOWN before all horizontals -- down is preferable because you don't have to look to the side while in midair, which could mess up the trajectory
                    state.setInput(Input.CLICK_RIGHT, true);
                }
                // prevent jumping too late by checking for ascend
                if (dist == 3 && !ascend) { // this is a 2 block gap, dest = src + direction * 3
                    double xDiff = (src.x + 0.5) - ctx.player().posX;
                    double zDiff = (src.z + 0.5) - ctx.player().posZ;
                    double distFromStart = Math.max(Math.abs(xDiff), Math.abs(zDiff));
                    if (distFromStart < 0.7) {
                        return state;
                    }
                }

                state.setInput(Input.JUMP, true);
            } else if (!ctx.playerFeet().equals(dest.offset(direction, -1))) {
                state.setInput(Input.SPRINT, false);
                if (ctx.playerFeet().equals(src.offset(direction, -1))) {
                    MovementHelper.moveTowards(ctx, state, src);
                } else {
                    MovementHelper.moveTowards(ctx, state, src.offset(direction, -1));
                }
            }
        }
        return state;
    }
}",1,777 587 2000 650 2001 123 773 809 657 2002 91 93 2003 61 744 2002 91 93 123 125 59 773 657 2004 2005 59 773 657 704 2006 59 773 657 570 2007 59 773 2000 40 2008 2009 44 2002 2010 44 704 2006 44 2004 2011 44 570 2007 41 123 818 40 2009 44 2010 44 2010 46 2012 40 2011 44 2006 41 46 2013 40 2007 63 1501 58 1500 41 44 2003 44 2010 46 2012 40 2011 44 2006 41 46 2014 40 2007 63 1500 58 1501 41 41 59 823 46 2005 61 2011 59 823 46 2006 61 2006 59 823 46 2007 61 2007 59 125 777 809 2000 2015 40 2016 2017 44 2002 2010 44 2004 2005 41 123 2018 2019 61 744 2018 40 41 59 2015 40 2017 44 2010 46 2020 44 2010 46 2021 44 2010 46 2022 44 2005 44 2019 41 59 704 2006 61 2023 46 2024 40 2019 46 2020 45 2010 46 2020 41 43 2023 46 2024 40 2019 46 2022 45 2010 46 2022 41 59 792 744 2000 40 2017 46 2025 40 41 44 2010 44 2006 44 2005 44 2019 46 2021 62 2010 46 2021 41 59 125 777 809 865 2015 40 2016 2017 44 704 2026 44 704 2027 44 704 2028 44 2004 2011 44 2029 2030 41 123 688 40 33 2017 46 2031 41 123 792 59 125 688 40 2027 323 1504 307 33 2017 46 2032 41 123 792 59 125 704 2033 61 2011 46 2034 40 41 59 704 2035 61 2011 46 2036 40 41 59 688 40 33 2037 46 2038 40 2017 44 2026 43 2033 44 2027 44 2028 43 2035 41 41 123 330 792 59 125 2039 2040 61 2017 46 2041 40 2026 43 2033 44 2027 45 1501 44 2028 43 2035 41 59 688 40 2037 46 2042 40 2017 46 2043 44 2026 43 2033 44 2027 45 1501 44 2028 43 2035 44 2040 41 41 123 330 330 792 59 125 688 40 2037 46 2044 40 2040 46 2045 40 41 41 307 2040 46 2045 40 41 340 2046 46 2047 307 2040 46 2045 40 41 340 2046 46 2048 41 123 330 792 59 125 688 40 33 2037 46 2038 40 2017 44 2026 43 2033 44 2027 43 1501 44 2028 43 2035 41 41 123 792 59 125 688 40 33 2037 46 2038 40 2017 44 2026 43 2033 44 2027 43 1502 44 2028 43 2035 41 41 123 792 59 125 688 40 33 2037 46 2038 40 2017 44 2026 44 2027 43 1502 44 2028 41 41 123 792 59 125 2039 2049 61 2017 46 2041 40 2026 44 2027 45 1501 44 2028 41 59 688 40 2049 46 2045 40 41 323 2046 46 2050 309 2049 46 2045 40 41 323 2046 46 2051 309 2049 46 2045 40 41 702 2052 309 2037 46 2053 40 2049 41 309 2049 46 2045 40 41 702 2054 41 123 792 59 125 704 2055 59 688 40 2049 46 2045 40 41 323 2046 46 2056 41 123 2055 61 1502 59 330 125 630 123 688 40 2017 46 2057 41 123 2055 61 1502 59 125 630 123 2055 61 1502 59 125 125 330 704 2058 61 1501 59 330 664 40 704 2059 61 1502 59 2059 329 2055 59 2059 349 41 123 704 2060 61 2026 43 2033 42 2059 59 704 2061 61 2028 43 2035 42 2059 59 330 688 40 33 2037 46 2038 40 2017 44 2060 44 2027 43 1501 44 2061 41 41 123 572 59 125 688 40 33 2037 46 2038 40 2017 44 2060 44 2027 43 1502 44 2061 41 41 123 572 59 125 330 2039 2062 61 2017 46 2043 46 2063 40 2060 44 2027 44 2061 41 59 688 40 33 2037 46 2038 40 2017 46 2043 46 2064 44 2017 46 2043 46 2065 46 2066 40 2060 44 2027 44 2061 41 44 2062 41 41 123 688 40 2059 329 1502 307 2017 46 2067 307 2017 46 2068 307 2037 46 2042 40 2017 46 2043 44 2060 44 2027 44 2061 44 2062 41 307 2069 40 2017 46 2043 44 2060 43 2033 44 2027 43 1501 44 2061 43 2035 41 41 123 2030 46 2026 61 2060 59 2030 46 2027 61 2027 43 1501 59 2030 46 2028 61 2061 59 2030 46 2015 61 2059 42 2070 43 2017 46 2071 59 792 59 125 572 59 125 330 2039 2072 61 2017 46 2043 46 2063 40 2060 44 2027 45 1501 44 2061 41 59 330 688 40 2072 46 2045 40 41 340 2046 46 2073 307 2037 46 2042 40 2017 46 2043 44 2060 44 2027 45 1501 44 2061 44 2072 41 41 123 688 40 2074 40 2017 46 2043 44 2060 43 2033 44 2027 44 2061 43 2035 41 41 123 2030 46 2026 61 2060 59 2030 46 2027 61 2027 59 2030 46 2028 61 2061 59 2030 46 2015 61 2075 40 2059 41 43 2017 46 2076 59 792 59 125 572 59 125 688 40 33 2037 46 2038 40 2017 44 2060 44 2027 43 1502 44 2061 41 41 123 572 59 125 2058 61 2059 59 125 330 688 40 33 2017 46 2077 41 123 792 59 125 330 664 40 704 2059 61 2058 59 2059 62 1501 59 2059 338 41 123 704 2078 61 2026 43 2059 42 2033 59 704 2079 61 2028 43 2059 42 2035 59 2039 2080 61 2017 46 2041 40 2078 44 2027 45 1501 44 2079 41 59 625 2081 61 2017 46 2082 40 2078 44 2027 45 1501 44 2079 44 2080 41 59 688 40 2081 325 2083 41 123 605 59 125 688 40 33 2037 46 2084 40 2078 44 2027 45 1501 44 2079 44 2080 44 2017 46 2043 41 41 123 605 59 125 688 40 33 2085 40 2017 46 2043 44 2078 43 2033 44 2027 44 2079 43 2035 41 41 123 605 59 125 664 40 704 2086 61 1500 59 2086 60 1502 59 2086 349 41 123 704 2087 61 2078 43 2088 91 2086 93 46 2034 40 41 59 704 2089 61 2027 45 1501 43 2088 91 2086 93 46 2090 40 41 59 704 2091 61 2079 43 2088 91 2086 93 46 2036 40 41 59 688 40 2087 323 2078 45 2033 307 2091 323 2079 45 2035 41 123 330 605 59 125 688 40 2037 46 2092 40 2017 46 2043 44 2087 44 2089 44 2091 41 41 123 2030 46 2026 61 2078 59 2030 46 2027 61 2027 59 2030 46 2028 61 2079 59 2030 46 2015 61 2093 40 2059 41 43 2081 43 2017 46 2094 59 792 59 125 125 125 125 773 809 570 2095 40 2096 2097 44 704 2026 44 704 2027 44 704 2028 41 123 330 792 33 2098 46 2099 40 2097 46 2100 40 2026 44 2027 44 2028 41 46 2101 40 41 41 307 33 2098 46 2099 40 2097 46 2100 40 2026 44 2027 43 1501 44 2028 41 46 2101 40 41 41 59 125 773 809 625 2102 40 704 2006 41 123 819 40 2006 41 123 579 1502 58 792 2103 42 1502 59 330 579 1502 58 792 2103 42 1502 59 579 1502 58 792 2104 42 1502 59 613 58 825 744 2105 40 362 43 2006 41 59 125 125 64 2106 777 625 2107 40 2016 2017 41 123 2029 2030 61 744 2029 40 41 59 2015 40 2017 44 2010 46 2026 44 2010 46 2027 44 2010 46 2028 44 2005 44 2030 41 59 688 40 2030 46 2026 340 2108 46 2026 309 2030 46 2027 340 2108 46 2027 309 2030 46 2028 340 2108 46 2028 41 123 792 2109 59 125 792 2030 46 2015 59 125 64 2106 775 2110 60 2002 62 2111 40 41 123 2110 60 2002 62 2112 61 744 2113 60 62 40 41 59 664 40 704 2114 61 1500 59 2114 329 2006 59 2114 349 41 123 664 40 704 2027 61 1500 59 2027 60 1502 59 2027 349 41 123 2112 46 2115 40 2010 46 2116 40 2005 44 2114 41 46 2117 40 2027 41 41 59 125 125 792 2112 59 125 64 2106 777 570 2118 40 2119 2120 41 123 330 330 330 792 2120 46 2121 40 41 340 2122 46 2123 59 125 64 2106 777 2119 2124 40 2119 2120 41 123 818 46 2124 40 2120 41 59 688 40 2120 46 2125 40 41 340 2126 46 2127 41 123 792 2120 59 125 688 40 2128 46 2129 40 41 46 2027 60 2010 46 2027 41 123 330 2130 40 362 41 59 792 2120 46 2131 40 2126 46 2132 41 59 125 688 40 2006 325 1502 309 2007 41 123 2120 46 2133 40 2134 46 2135 44 2136 41 59 125 2137 46 2138 40 2128 44 2120 44 2139 41 59 688 40 2128 46 2129 40 41 46 2140 40 2139 41 41 123 2141 2142 61 2096 46 2143 40 2128 44 2139 41 59 688 40 2142 323 2144 46 2145 309 2142 323 2144 46 2146 41 123 330 330 792 2120 46 2147 40 2126 46 2148 41 59 125 688 40 2128 46 2149 40 41 46 2150 45 2128 46 2129 40 41 46 2151 40 41 60 1500 41 123 330 2120 46 2152 40 2126 46 2153 41 59 125 125 630 688 40 33 2128 46 2129 40 41 46 2140 40 2010 41 41 123 688 40 2128 46 2129 40 41 46 2140 40 2010 46 2154 40 2005 41 41 309 2128 46 2155 40 41 46 2156 45 2010 46 2027 62 1500 41 123 688 40 33 2137 46 2157 40 2128 44 2139 46 2158 40 41 41 307 33 2128 46 2155 40 41 46 2159 307 2137 46 2160 40 2120 44 2009 44 2139 46 2158 40 41 44 2161 44 2162 41 323 2163 46 2164 41 123 330 2120 46 2165 40 2166 46 2167 44 2161 41 59 125 330 688 40 2006 323 1502 307 33 2007 41 123 330 625 2168 61 40 2010 46 2026 43 1500 41 45 2128 46 2155 40 41 46 2169 59 625 2170 61 40 2010 46 2028 43 1500 41 45 2128 46 2155 40 41 46 2171 59 625 2172 61 2173 46 2174 40 2173 46 2175 40 2168 41 44 2173 46 2175 40 2170 41 41 59 688 40 2172 60 1500 41 123 792 2120 59 125 125 2120 46 2176 40 2177 46 2178 44 2161 41 59 125 630 688 40 33 2128 46 2129 40 41 46 2140 40 2139 46 2154 40 2005 44 45 1501 41 41 41 123 2120 46 2179 40 2180 46 2181 44 2182 41 59 688 40 2128 46 2129 40 41 46 2140 40 2010 46 2154 40 2005 44 45 1501 41 41 41 123 2137 46 2138 40 2128 44 2120 44 2010 41 59 125 630 123 2137 46 2138 40 2128 44 2120 44 2010 46 2154 40 2005 44 45 1501 41 41 59 125 125 125 792 2120 59 125 125 ,"{'AvgLine': 26, 'CountLine': 255, 'CountStmt': 163, 'MaxNesting': 4, 'AvgLineCode': 23, 'AvgEssential': 4, 'AvgLineBlank': 1, 'CountStmtExe': 138, 'MaxEssential': 26, 'SumEssential': 42, 'AvgCyclomatic': 6, 'CountLineCode': 216, 'CountStmtDecl': 44, 'MaxCyclomatic': 28, 'SumCyclomatic': 57, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountSemicolon': 109, 'CountDeclMethod': 9, 'CountLineCodeExe': 146, 'CountLineComment': 26, 'CountClassCoupled': 20, 'CountClassDerived': 0, 'CountLineCodeDecl': 43, 'CountDeclMethodAll': 35, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.12', 'AvgCyclomaticStrict': 8, 'MaxCyclomaticStrict': 41, 'SumCyclomaticStrict': 79, 'CountDeclClassMethod': 4, 'AvgCyclomaticModified': 6, 'CountDeclMethodPublic': 5, 'MaxCyclomaticModified': 28, 'PercentLackOfCohesion': 66, 'SumCyclomaticModified': 55, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 5, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 20, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 55}"
4652,Java,"@Slf4j
class TxOutputParser {
    private static final int ACTIVATE_HARD_FORK_1_HEIGHT_MAINNET = 605000;
    private static final int ACTIVATE_HARD_FORK_1_HEIGHT_TESTNET = 1583054;
    private static final int ACTIVATE_HARD_FORK_1_HEIGHT_REGTEST = 1;

    private final DaoStateService daoStateService;
    // Setters
    @Getter
    @Setter
    private long availableInputValue = 0;
    @Setter
    private int unlockBlockHeight;
    @Setter
    @Getter
    private Optional<TxOutput> optionalSpentLockupTxOutput = Optional.empty();

    // Getters
    @Getter
    private boolean bsqOutputFound;
    @Getter
    private Optional<OpReturnType> optionalOpReturnType = Optional.empty();
    @Getter
    private Optional<TempTxOutput> optionalIssuanceCandidate = Optional.empty();
    @Getter
    private Optional<TempTxOutput> optionalBlindVoteLockStakeOutput = Optional.empty();
    @Getter
    private Optional<TempTxOutput> optionalVoteRevealUnlockStakeOutput = Optional.empty();
    @Getter
    private Optional<TempTxOutput> optionalLockupOutput = Optional.empty();
    private Optional<Integer> optionalOpReturnIndex = Optional.empty();

    // Private
    private int lockTime;
    private final List<TempTxOutput> utxoCandidates = new ArrayList<>();
    private boolean prohibitMoreBsqOutputs = false;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    TxOutputParser(DaoStateService daoStateService) {
        this.daoStateService = daoStateService;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // API
    ///////////////////////////////////////////////////////////////////////////////////////////

    void processOpReturnOutput(TempTxOutput tempTxOutput) {
        byte[] opReturnData = tempTxOutput.getOpReturnData();
        checkNotNull(opReturnData, ""opReturnData must not be null"");
        TxOutputType txOutputType = OpReturnParser.getTxOutputType(tempTxOutput);
        tempTxOutput.setTxOutputType(txOutputType);

        optionalOpReturnType = getMappedOpReturnType(txOutputType);

        optionalOpReturnType.ifPresent(e -> optionalOpReturnIndex = Optional.of(tempTxOutput.getIndex()));

        // If we have a LOCKUP opReturn output we save the lockTime to apply it later to the LOCKUP output.
        // We keep that data in that other output as it makes parsing of the UNLOCK tx easier.
        optionalOpReturnType.filter(opReturnType -> opReturnType == OpReturnType.LOCKUP)
                .ifPresent(opReturnType -> lockTime = BondConsensus.getLockTime(opReturnData));
    }

    void processTxOutput(TempTxOutput tempTxOutput) {
        // We don not expect here an opReturn output as we do not get called on the last output. Any opReturn at
        // another output index is invalid.
        if (tempTxOutput.isOpReturnOutput()) {
            tempTxOutput.setTxOutputType(TxOutputType.INVALID_OUTPUT);
            return;
        }

        if (!daoStateService.isConfiscatedOutput(tempTxOutput.getKey())) {
            long txOutputValue = tempTxOutput.getValue();
            int index = tempTxOutput.getIndex();
            if (isUnlockBondTx(tempTxOutput.getValue(), index)) {
                // We need to handle UNLOCK transactions separately as they don't follow the pattern on spending BSQ
                // The LOCKUP BSQ is burnt unless the output exactly matches the input, that would cause the
                // output to not be BSQ output at all
                handleUnlockBondTx(tempTxOutput);
            } else if (isBtcOutputOfBurnFeeTx(tempTxOutput)) {
                // In case we have the opReturn for a burn fee tx all outputs after 1st output are considered BTC
                handleBtcOutput(tempTxOutput, index);
            } else if (isHardForkActivated(tempTxOutput) && isIssuanceCandidateTxOutput(tempTxOutput)) {
                // After the hard fork activation we fix a bug with a transaction which would have interpreted the
                // issuance output as BSQ if the availableInputValue was >= issuance amount.
                // Such a tx was never created but as we don't know if it will happen before activation date we cannot
                // enforce the bug fix which represents a rule change before the activation date.
                handleIssuanceCandidateOutput(tempTxOutput);
            } else if (availableInputValue > 0 && availableInputValue >= txOutputValue) {
                if (isHardForkActivated(tempTxOutput) && prohibitMoreBsqOutputs) {
                    handleBtcOutput(tempTxOutput, index);
                } else {
                    handleBsqOutput(tempTxOutput, index, txOutputValue);
                }
            } else {
                handleBtcOutput(tempTxOutput, index);
            }
        } else {
            log.warn(""TxOutput {} is confiscated "", tempTxOutput.getKey());
            // We only burn that output
            availableInputValue -= tempTxOutput.getValue();

            // We must not set prohibitMoreBsqOutputs at confiscation transactions as optional
            // BSQ change output (output 2) must not be confiscated.
            tempTxOutput.setTxOutputType(TxOutputType.BTC_OUTPUT);
        }
    }

    void commitUTXOCandidates() {
        utxoCandidates.forEach(output -> daoStateService.addUnspentTxOutput(TxOutput.fromTempOutput(output)));
    }

    /**
     * This sets all outputs to BTC_OUTPUT and doesn't add any txOutputs to the unspentTxOutput map in daoStateService
     */
    void invalidateUTXOCandidates() {
        // We do not need to apply prohibitMoreBsqOutputs as all spendable outputs are set to BTC_OUTPUT anyway.
        utxoCandidates.forEach(output -> output.setTxOutputType(TxOutputType.BTC_OUTPUT));
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Private
    ///////////////////////////////////////////////////////////////////////////////////////////

    /**
     * Whether a transaction is a valid unlock bond transaction or not.
     *
     * @param txOutputValue The value of the current output, in satoshis.
     * @param index         The index of the output.
     * @return True if the transaction is an unlock transaction, false otherwise.
     */
    private boolean isUnlockBondTx(long txOutputValue, int index) {
        // We require that the input value is exact the available value and the output value
        return index == 0 &&
                availableInputValue == txOutputValue &&
                optionalSpentLockupTxOutput.isPresent() &&
                optionalSpentLockupTxOutput.get().getValue() == txOutputValue;
    }

    private void handleUnlockBondTx(TempTxOutput txOutput) {
        checkArgument(optionalSpentLockupTxOutput.isPresent(), ""optionalSpentLockupTxOutput must be present"");
        availableInputValue -= optionalSpentLockupTxOutput.get().getValue();

        txOutput.setTxOutputType(TxOutputType.UNLOCK_OUTPUT);
        txOutput.setUnlockBlockHeight(unlockBlockHeight);
        utxoCandidates.add(txOutput);

        bsqOutputFound = true;

        // We do not permit more BSQ outputs after the unlock txo as we don't expect additional BSQ outputs.
        prohibitMoreBsqOutputs = true;
    }

    private boolean isBtcOutputOfBurnFeeTx(TempTxOutput tempTxOutput) {
        if (optionalOpReturnType.isPresent()) {
            int index = tempTxOutput.getIndex();
            switch (optionalOpReturnType.get()) {
                case UNDEFINED:
                    break;
                case PROPOSAL:
                    if (isHardForkActivated(tempTxOutput)) {
                        // We enforce a mandatory BSQ change output.
                        // We need that as similar to ASSET_LISTING_FEE and PROOF_OF_BURN
                        // we could not distinguish between 2 structurally same transactions otherwise (only way here
                        // would be to check the proposal fee as that is known from the params).
                        return index >= 1;
                    }
                    break;
                case COMPENSATION_REQUEST:
                    break;
                case REIMBURSEMENT_REQUEST:
                    break;
                case BLIND_VOTE:
                    if (isHardForkActivated(tempTxOutput)) {
                        // After the hard fork activation we fix a bug with a transaction which would have interpreted the
                        // burned vote fee output as BSQ if the vote fee was >= miner fee.
                        // Such a tx was never created but as we don't know if it will happen before activation date we cannot
                        // enforce the bug fix which represents a rule change before the activation date.

                        // If it is the vote stake output we return false.
                        if (index == 0) {
                            return false;
                        }

                        // There must be a vote fee left
                        if (availableInputValue <= 0) {
                            return false;
                        }

                        // Burned BSQ output is last output before opReturn.
                        // We could have also a BSQ change output as last output before opReturn but that will
                        // be detected at blindVoteFee check.
                        // We always have the BSQ change before the burned BSQ output if both are present.
                        checkArgument(optionalOpReturnIndex.isPresent());
                        if (index != optionalOpReturnIndex.get() - 1) {
                            return false;
                        }

                        // Without checking the fee we would not be able to distinguish between 2 structurally same transactions, one
                        // where the output is burned BSQ and one where it is a BSQ change output.
                        long blindVoteFee = daoStateService.getParamValueAsCoin(Param.BLIND_VOTE_FEE, tempTxOutput.getBlockHeight()).value;
                        return availableInputValue == blindVoteFee;
                    }
                    break;
                case VOTE_REVEAL:
                    break;
                case LOCKUP:
                    break;
                case ASSET_LISTING_FEE:
                case PROOF_OF_BURN:
                    // Asset listing fee and proof of burn tx are structurally the same.

                    // We need to require one BSQ change output as we could otherwise not be able to distinguish between 2
                    // structurally same transactions where only the BSQ fee is different. In case of asset listing fee and proof of
                    // burn it is a user input, so it is not known to the parser, instead we derive the burned fee from the parser.
                    // In case of proposal fee we could derive it from the params.

                    // Case 1: 10 BSQ fee to burn
                    // In: 17 BSQ
                    // Out: BSQ change 7 BSQ -> valid BSQ
                    // Out: OpReturn
                    // Miner fee: 1000 sat  (10 BSQ burned)


                    // Case 2: 17 BSQ fee to burn
                    // In: 17 BSQ
                    // Out: burned BSQ change 7 BSQ -> BTC (7 BSQ burned)
                    // Out: OpReturn
                    // Miner fee: 1000 sat  (10 BSQ burned)
                    return index >= 1;
            }
        }
        return false;
    }

    private boolean isIssuanceCandidateTxOutput(TempTxOutput tempTxOutput) {
        // If we have BSQ left as fee and we are at the second output we interpret it as a compensation request output.
        return availableInputValue > 0 &&
                tempTxOutput.getIndex() == 1 &&
                optionalOpReturnType.isPresent() &&
                (optionalOpReturnType.get() == OpReturnType.COMPENSATION_REQUEST ||
                        optionalOpReturnType.get() == OpReturnType.REIMBURSEMENT_REQUEST);
    }

    private void handleIssuanceCandidateOutput(TempTxOutput tempTxOutput) {
        // We do not permit more BSQ outputs after the issuance candidate.
        prohibitMoreBsqOutputs = true;

        // We store the candidate but we don't apply the TxOutputType yet as we need to verify the fee after all
        // outputs are parsed and check the phase. The TxParser will do that....
        optionalIssuanceCandidate = Optional.of(tempTxOutput);
    }

    private void handleBsqOutput(TempTxOutput txOutput, int index, long txOutputValue) {
        // Update the input balance.
        availableInputValue -= txOutputValue;

        boolean isFirstOutput = index == 0;

        OpReturnType opReturnTypeCandidate = null;
        if (optionalOpReturnType.isPresent())
            opReturnTypeCandidate = optionalOpReturnType.get();

        TxOutputType txOutputType;
        if (isFirstOutput && opReturnTypeCandidate == OpReturnType.BLIND_VOTE) {
            txOutputType = TxOutputType.BLIND_VOTE_LOCK_STAKE_OUTPUT;
            optionalBlindVoteLockStakeOutput = Optional.of(txOutput);
        } else if (isFirstOutput && opReturnTypeCandidate == OpReturnType.VOTE_REVEAL) {
            txOutputType = TxOutputType.VOTE_REVEAL_UNLOCK_STAKE_OUTPUT;
            optionalVoteRevealUnlockStakeOutput = Optional.of(txOutput);

            // We do not permit more BSQ outputs after the VOTE_REVEAL_UNLOCK_STAKE_OUTPUT.
            prohibitMoreBsqOutputs = true;
        } else if (isFirstOutput && opReturnTypeCandidate == OpReturnType.LOCKUP) {
            txOutputType = TxOutputType.LOCKUP_OUTPUT;

            // We store the lockTime in the output which will be used as input for a unlock tx.
            // That makes parsing of that data easier as if we would need to access it from the opReturn output of
            // that tx.
            txOutput.setLockTime(lockTime);
            optionalLockupOutput = Optional.of(txOutput);
        } else {
            txOutputType = TxOutputType.BSQ_OUTPUT;
        }
        txOutput.setTxOutputType(txOutputType);
        utxoCandidates.add(txOutput);

        bsqOutputFound = true;
    }

    private void handleBtcOutput(TempTxOutput txOutput, int index) {
        if (isHardForkActivated(txOutput)) {
            txOutput.setTxOutputType(TxOutputType.BTC_OUTPUT);

            // For regular transactions we don't permit BSQ outputs after a BTC output was detected.
            prohibitMoreBsqOutputs = true;
        } else {
            // If we have BSQ left as fee and we are at the second output it might be a compensation request output.
            // We store the candidate but we don't apply the TxOutputType yet as we need to verify the fee after all
            // outputs are parsed and check the phase. The TxParser will do that....
            if (availableInputValue > 0 &&
                    index == 1 &&
                    optionalOpReturnType.isPresent() &&
                    (optionalOpReturnType.get() == OpReturnType.COMPENSATION_REQUEST ||
                            optionalOpReturnType.get() == OpReturnType.REIMBURSEMENT_REQUEST)) {
                optionalIssuanceCandidate = Optional.of(txOutput);

                // We do not permit more BSQ outputs after the issuance candidate.
                prohibitMoreBsqOutputs = true;
            } else {
                txOutput.setTxOutputType(TxOutputType.BTC_OUTPUT);

                // For regular transactions we don't permit BSQ outputs after a BTC output was detected.
                prohibitMoreBsqOutputs = true;
            }
        }
    }

    private boolean isHardForkActivated(TempTxOutput tempTxOutput) {
        return tempTxOutput.getBlockHeight() >= getActivateHardFork1Height();
    }

    private int getActivateHardFork1Height() {
        return Config.baseCurrencyNetwork().isMainnet() ? ACTIVATE_HARD_FORK_1_HEIGHT_MAINNET :
                Config.baseCurrencyNetwork().isTestnet() ? ACTIVATE_HARD_FORK_1_HEIGHT_TESTNET :
                        ACTIVATE_HARD_FORK_1_HEIGHT_REGTEST;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Static
    ///////////////////////////////////////////////////////////////////////////////////////////

    @SuppressWarnings(""WeakerAccess"")
    @VisibleForTesting
    static Optional<OpReturnType> getMappedOpReturnType(TxOutputType outputType) {
        switch (outputType) {
            case PROPOSAL_OP_RETURN_OUTPUT:
                return Optional.of(OpReturnType.PROPOSAL);
            case COMP_REQ_OP_RETURN_OUTPUT:
                return Optional.of(OpReturnType.COMPENSATION_REQUEST);
            case REIMBURSEMENT_OP_RETURN_OUTPUT:
                return Optional.of(OpReturnType.REIMBURSEMENT_REQUEST);
            case BLIND_VOTE_OP_RETURN_OUTPUT:
                return Optional.of(OpReturnType.BLIND_VOTE);
            case VOTE_REVEAL_OP_RETURN_OUTPUT:
                return Optional.of(OpReturnType.VOTE_REVEAL);
            case LOCKUP_OP_RETURN_OUTPUT:
                return Optional.of(OpReturnType.LOCKUP);
            case ASSET_LISTING_FEE_OP_RETURN_OUTPUT:
                return Optional.of(OpReturnType.ASSET_LISTING_FEE);
            case PROOF_OF_BURN_OP_RETURN_OUTPUT:
                return Optional.of(OpReturnType.PROOF_OF_BURN);
            default:
                return Optional.empty();
        }
    }
}",1,64 2000 587 2001 123 773 809 657 704 2002 61 1507 59 773 809 657 704 2003 61 1508 59 773 809 657 704 2004 61 1501 59 773 657 2005 2006 59 330 64 2007 64 2008 773 726 2009 61 1500 59 64 2008 773 704 2010 59 64 2008 64 2007 773 2011 60 2012 62 2013 61 2011 46 2014 40 41 59 330 64 2007 773 570 2015 59 64 2007 773 2011 60 2016 62 2017 61 2011 46 2014 40 41 59 64 2007 773 2011 60 2018 62 2019 61 2011 46 2014 40 41 59 64 2007 773 2011 60 2018 62 2020 61 2011 46 2014 40 41 59 64 2007 773 2011 60 2018 62 2021 61 2011 46 2014 40 41 59 64 2007 773 2011 60 2018 62 2022 61 2011 46 2014 40 41 59 773 2011 60 2023 62 2024 61 2011 46 2014 40 41 59 330 773 704 2025 59 773 657 2026 60 2018 62 2027 61 744 2028 60 62 40 41 59 773 570 2029 61 2030 59 331 330 331 2001 40 2005 2006 41 123 823 46 2006 61 2006 59 125 331 330 331 865 2031 40 2018 2032 41 123 574 91 93 2033 61 2032 46 2034 40 41 59 2035 40 2033 44 362 41 59 2036 2037 61 2038 46 2039 40 2032 41 59 2032 46 2040 40 2037 41 59 2017 61 2041 40 2037 41 59 2017 46 2042 40 2043 45 62 2024 61 2011 46 2044 40 2032 46 2045 40 41 41 41 59 330 330 2017 46 2046 40 2047 45 62 2047 323 2016 46 2048 41 46 2042 40 2047 45 62 2025 61 2049 46 2050 40 2033 41 41 59 125 865 2051 40 2018 2032 41 123 330 330 688 40 2032 46 2052 40 41 41 123 2032 46 2053 40 2054 46 2055 41 59 792 59 125 688 40 33 2006 46 2056 40 2032 46 2057 40 41 41 41 123 726 2058 61 2032 46 2059 40 41 59 704 2060 61 2032 46 2061 40 41 59 688 40 2062 40 2032 46 2059 40 41 44 2060 41 41 123 330 330 330 2063 40 2032 41 59 125 630 688 40 2064 40 2032 41 41 123 330 2065 40 2032 44 2060 41 59 125 630 688 40 2066 40 2032 41 307 2067 40 2032 41 41 123 330 330 330 330 2068 40 2032 41 59 125 630 688 40 2009 62 1500 307 2009 325 2058 41 123 688 40 2066 40 2032 41 307 2029 41 123 2069 40 2032 44 2060 41 59 125 630 123 2070 40 2032 44 2060 44 2058 41 59 125 125 630 123 2071 40 2032 44 2060 41 59 125 125 630 123 2072 46 2073 40 362 44 2032 46 2057 40 41 41 59 330 2009 337 2032 46 2074 40 41 59 330 330 2032 46 2075 40 2076 46 2077 41 59 125 125 865 2078 40 41 123 2027 46 2079 40 2080 45 62 2006 46 2081 40 2012 46 2082 40 2080 41 41 41 59 125 306 865 2083 40 41 123 330 2027 46 2084 40 2085 45 62 2085 46 2086 40 2087 46 2088 41 41 59 125 331 330 331 306 773 570 2089 40 726 2090 44 704 2091 41 123 330 792 2091 323 1500 307 2009 323 2090 307 2013 46 2092 40 41 307 2013 46 2093 40 41 46 2094 40 41 323 2090 59 125 773 865 2095 40 2018 2096 41 123 2097 40 2013 46 2098 40 41 44 362 41 59 2009 337 2013 46 2099 40 41 46 2100 40 41 59 2096 46 2101 40 2102 46 2103 41 59 2096 46 2104 40 2010 41 59 2027 46 2105 40 2096 41 59 2015 61 2106 59 330 2029 61 2106 59 125 773 570 2107 40 2018 2032 41 123 688 40 2017 46 2108 40 41 41 123 704 2091 61 2032 46 2109 40 41 59 819 40 2017 46 2110 40 41 41 123 579 2111 58 572 59 579 2112 58 688 40 2113 40 2032 41 41 123 330 330 330 330 792 2091 325 1501 59 125 572 59 579 2114 58 572 59 579 2115 58 572 59 579 2116 58 688 40 2113 40 2032 41 41 123 330 330 330 330 330 688 40 2091 323 1500 41 123 792 2030 59 125 330 688 40 2009 329 1500 41 123 792 2030 59 125 330 330 330 330 2117 40 2024 46 2108 40 41 41 59 688 40 2091 340 2024 46 2110 40 41 45 1501 41 123 792 2030 59 125 330 330 726 2118 61 2006 46 2119 40 2120 46 2121 44 2032 46 2122 40 41 41 46 2123 59 792 2009 323 2118 59 125 572 59 579 2124 58 572 59 579 2125 58 572 59 579 2126 58 579 2127 58 330 330 330 330 330 330 330 330 330 330 330 330 330 330 330 792 2091 325 1501 59 125 125 792 2030 59 125 773 570 2128 40 2018 2032 41 123 330 792 2009 62 1500 307 2032 46 2129 40 41 323 1501 307 2017 46 2130 40 41 307 40 2017 46 2131 40 41 323 2016 46 2132 309 2017 46 2131 40 41 323 2016 46 2133 41 59 125 773 865 2134 40 2018 2032 41 123 330 2029 61 2135 59 330 330 2019 61 2011 46 2136 40 2032 41 59 125 773 865 2137 40 2018 2096 44 704 2091 44 726 2090 41 123 330 2009 337 2090 59 570 2138 61 2091 323 1500 59 2016 2139 61 2140 59 688 40 2017 46 2141 40 41 41 2139 61 2017 46 2142 40 41 59 2143 2144 59 688 40 2138 307 2139 323 2016 46 2145 41 123 2144 61 2143 46 2146 59 2020 61 2011 46 2147 40 2096 41 59 125 630 688 40 2138 307 2139 323 2016 46 2148 41 123 2144 61 2143 46 2149 59 2021 61 2011 46 2150 40 2096 41 59 330 2029 61 2151 59 125 630 688 40 2138 307 2139 323 2016 46 2152 41 123 2144 61 2143 46 2153 59 330 330 330 2096 46 2154 40 2025 41 59 2022 61 2011 46 2155 40 2096 41 59 125 630 123 2144 61 2143 46 2156 59 125 2096 46 2157 40 2144 41 59 2027 46 2158 40 2096 41 59 2015 61 2159 59 125 773 865 2160 40 2018 2096 44 704 2091 41 123 688 40 2161 40 2096 41 41 123 2096 46 2162 40 2163 46 2164 41 59 330 2029 61 2165 59 125 630 123 330 330 330 688 40 2009 62 1500 307 2091 323 1501 307 2017 46 2166 40 41 307 40 2017 46 2167 40 41 323 2016 46 2168 309 2017 46 2167 40 41 323 2016 46 2169 41 41 123 2019 61 2011 46 2170 40 2096 41 59 330 2029 61 2171 59 125 630 123 2096 46 2172 40 2173 46 2174 41 59 330 2029 61 2175 59 125 125 125 773 570 2176 40 2018 2032 41 123 792 2032 46 2177 40 41 325 2178 40 41 59 125 773 704 2179 40 41 123 792 2180 46 2181 40 41 46 2182 40 41 63 2002 58 2180 46 2181 40 41 46 2183 40 41 63 2003 58 2004 59 125 331 330 331 64 2184 40 362 41 64 2185 809 2011 60 2016 62 2186 40 2187 2188 41 123 819 40 2188 41 123 579 2189 58 792 2011 46 2190 40 2016 46 2191 41 59 579 2192 58 792 2011 46 2190 40 2016 46 2193 41 59 579 2194 58 792 2011 46 2190 40 2016 46 2195 41 59 579 2196 58 792 2011 46 2190 40 2016 46 2197 41 59 579 2198 58 792 2011 46 2190 40 2016 46 2199 41 59 579 2200 58 792 2011 46 2190 40 2016 46 2201 41 59 579 2202 58 792 2011 46 2190 40 2016 46 2203 41 59 579 2204 58 792 2011 46 2190 40 2016 46 2205 41 59 613 58 792 2011 46 2014 40 41 59 125 125 125 ,"{'AvgLine': 19, 'CountLine': 409, 'CountStmt': 139, 'MaxNesting': 4, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 111, 'MaxEssential': 15, 'SumEssential': 34, 'AvgCyclomatic': 3, 'CountLineCode': 222, 'CountStmtDecl': 42, 'MaxCyclomatic': 16, 'SumCyclomatic': 58, 'AvgLineComment': 4, 'CountClassBase': 1, 'CountLineBlank': 52, 'CountSemicolon': 102, 'CountDeclMethod': 15, 'CountLineCodeExe': 156, 'CountLineComment': 135, 'CountClassCoupled': 19, 'CountClassDerived': 0, 'CountLineCodeDecl': 56, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.61', 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 16, 'SumCyclomaticStrict': 75, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 0, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 82, 'SumCyclomaticModified': 43, 'CountDeclClassVariable': 3, 'CountDeclMethodDefault': 6, 'CountDeclMethodPrivate': 9, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 19, 'CountDeclInstanceVariable': 14, 'PercentLackOfCohesionModified': 77}"
2793,Java,"@Slf4j
public class GUIUtil {
    public final static String SHOW_ALL_FLAG = ""list.currency.showAll""; // Used for accessing the i18n resource
    public final static String EDIT_FLAG = ""list.currency.editList""; // Used for accessing the i18n resource

    public final static String OPEN_WEB_PAGE_KEY = ""warnOpenURLWhenTorEnabled"";

    public final static int FIAT_DECIMALS_WITH_ZEROS = 0;
    public final static int FIAT_PRICE_DECIMALS_WITH_ZEROS = 3;
    public final static int ALTCOINS_DECIMALS_WITH_ZEROS = 7;
    public final static int AMOUNT_DECIMALS_WITH_ZEROS = 3;
    public final static int AMOUNT_DECIMALS = 4;

    private static FeeService feeService;
    private static Preferences preferences;

    public static void setFeeService(FeeService feeService) {
        GUIUtil.feeService = feeService;
    }

    public static void setPreferences(Preferences preferences) {
        GUIUtil.preferences = preferences;
    }

    public static String getUserLanguage() {
        return preferences.getUserLanguage();
    }

    public static double getScrollbarWidth(Node scrollablePane) {
        Node node = scrollablePane.lookup("".scroll-bar"");
        if (node instanceof ScrollBar) {
            final ScrollBar bar = (ScrollBar) node;
            if (bar.getOrientation().equals(Orientation.VERTICAL))
                return bar.getWidth();
        }
        return 0;
    }

    public static void focusWhenAddedToScene(Node node) {
        node.sceneProperty().addListener((observable, oldValue, newValue) -> {
            if (null != newValue) {
                node.requestFocus();
            }
        });
    }

    public static void showFeeInfoBeforeExecute(Runnable runnable) {
        String key = ""miningFeeInfo"";
        if (!DevEnv.isDevMode() && DontShowAgainLookup.showAgain(key)) {
            new Popup().attention(Res.get(""guiUtil.miningFeeInfo"", String.valueOf(GUIUtil.feeService.getTxFeePerVbyte().value)))
                    .onClose(runnable)
                    .useIUnderstandButton()
                    .show();
            DontShowAgainLookup.dontShowAgain(key, true);
        } else {
            runnable.run();
        }
    }

    public static void exportAccounts(ArrayList<PaymentAccount> accounts,
                                      String fileName,
                                      Preferences preferences,
                                      Stage stage,
                                      PersistenceProtoResolver persistenceProtoResolver,
                                      CorruptedStorageFileHandler corruptedStorageFileHandler) {
        if (!accounts.isEmpty()) {
            String directory = getDirectoryFromChooser(preferences, stage);
            if (!directory.isEmpty()) {
                PersistenceManager<PersistableEnvelope> persistenceManager = new PersistenceManager<>(new File(directory), persistenceProtoResolver, corruptedStorageFileHandler);
                PaymentAccountList paymentAccounts = new PaymentAccountList(accounts);
                persistenceManager.initialize(paymentAccounts, fileName, PersistenceManager.Source.PRIVATE_LOW_PRIO);
                persistenceManager.persistNow(() -> {
                    persistenceManager.shutdown();
                    new Popup().feedback(Res.get(""guiUtil.accountExport.savedToPath"",
                                    Paths.get(directory, fileName).toAbsolutePath()))
                            .show();
                });
            }
        } else {
            new Popup().warning(Res.get(""guiUtil.accountExport.noAccountSetup"")).show();
        }
    }

    public static void importAccounts(User user,
                                      String fileName,
                                      Preferences preferences,
                                      Stage stage,
                                      PersistenceProtoResolver persistenceProtoResolver,
                                      CorruptedStorageFileHandler corruptedStorageFileHandler) {
        FileChooser fileChooser = new FileChooser();
        File initDir = new File(preferences.getDirectoryChooserPath());
        if (initDir.isDirectory()) {
            fileChooser.setInitialDirectory(initDir);
        }
        fileChooser.setTitle(Res.get(""guiUtil.accountExport.selectPath"", fileName));
        File file = fileChooser.showOpenDialog(stage.getOwner());
        if (file != null) {
            String path = file.getAbsolutePath();
            if (Paths.get(path).getFileName().toString().equals(fileName)) {
                String directory = Paths.get(path).getParent().toString();
                preferences.setDirectoryChooserPath(directory);
                PersistenceManager<PaymentAccountList> persistenceManager = new PersistenceManager<>(new File(directory), persistenceProtoResolver, corruptedStorageFileHandler);
                persistenceManager.readPersisted(fileName, persisted -> {
                            StringBuilder msg = new StringBuilder();
                            HashSet<PaymentAccount> paymentAccounts = new HashSet<>();
                            persisted.getList().forEach(paymentAccount -> {
                                String id = paymentAccount.getId();
                                if (user.getPaymentAccount(id) == null) {
                                    paymentAccounts.add(paymentAccount);
                                    msg.append(Res.get(""guiUtil.accountExport.tradingAccount"", id));
                                } else {
                                    msg.append(Res.get(""guiUtil.accountImport.noImport"", id));
                                }
                            });
                            user.addImportedPaymentAccounts(paymentAccounts);
                            new Popup().feedback(Res.get(""guiUtil.accountImport.imported"", path, msg)).show();
                        },
                        () -> {
                            new Popup().warning(Res.get(""guiUtil.accountImport.noAccountsFound"", path, fileName)).show();
                        });
            } else {
                /* =============================================================================
                 * TEMP CODE TO ALLOW USERS RECOVERY OF ACCOUNTS FROM BACKED-UP USER PAYLOAD.
                 * typical location of backed-up user payload: ~/.local/share/Bisq/btc_mainnet/db/backup/backups_UserPayload
                 * TODO: remove this once issue #5613 has been resolved (est. 2021-Q4)
                 * =============================================================================
                 */
                String chosenFile = Paths.get(path).getFileName().toString();
                String matchingRegex = ""[0-9]{13}_UserPayload"";
                if (chosenFile.matches(matchingRegex)) {
                    String directory = Paths.get(path).getParent().toString();
                    preferences.setDirectoryChooserPath(directory);
                    PersistenceManager<UserPayload> persistenceManager = new PersistenceManager<>(new File(directory), persistenceProtoResolver, corruptedStorageFileHandler);
                    persistenceManager.readPersisted(chosenFile, persisted -> {
                                StringBuilder msg = new StringBuilder();
                                HashSet<PaymentAccount> paymentAccounts = new HashSet<>();
                                persisted.getPaymentAccounts().forEach(paymentAccount -> {
                                    String id = paymentAccount.getId();
                                    if (user.getPaymentAccount(id) == null) {
                                        paymentAccounts.add(paymentAccount);
                                        msg.append(Res.get(""guiUtil.accountExport.tradingAccount"", id));
                                    } else {
                                        msg.append(Res.get(""guiUtil.accountImport.noImport"", id));
                                    }
                                });
                                user.addImportedPaymentAccounts(paymentAccounts);
                                new Popup().feedback(Res.get(""guiUtil.accountImport.imported"", path, msg)).show();
                            },
                            () -> {
                                new Popup().warning(Res.get(""guiUtil.accountImport.noAccountsFound"", path, chosenFile)).show();
                            });

                } else {
                    log.error(""The selected file is not the expected file for import. The expected file name is: {} or {}"", fileName, matchingRegex);
                }
            }
        }
    }


    public static <T> void exportCSV(String fileName, CSVEntryConverter<T> headerConverter,
                                     CSVEntryConverter<T> contentConverter, T emptyItem,
                                     List<T> list, Stage stage) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setInitialFileName(fileName);
        File file = fileChooser.showSaveDialog(stage);
        if (file != null) {
            try (OutputStreamWriter outputStreamWriter = new OutputStreamWriter(new FileOutputStream(file, false), Charsets.UTF_8)) {
                CSVWriter<T> headerWriter = new CSVWriterBuilder<T>(outputStreamWriter)
                        .strategy(CSVStrategy.UK_DEFAULT)
                        .entryConverter(headerConverter)
                        .build();
                headerWriter.write(emptyItem);

                CSVWriter<T> contentWriter = new CSVWriterBuilder<T>(outputStreamWriter)
                        .strategy(CSVStrategy.UK_DEFAULT)
                        .entryConverter(contentConverter)
                        .build();
                contentWriter.writeAll(list);
            } catch (RuntimeException | IOException e) {
                e.printStackTrace();
                log.error(e.getMessage());
                new Popup().error(Res.get(""guiUtil.accountExport.exportFailed"", e.getMessage())).show();
            }
        }
    }

    public static void exportJSON(String fileName, JsonElement data, Stage stage) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setInitialFileName(fileName);
        File file = fileChooser.showSaveDialog(stage);
        if (file != null) {
            try (OutputStreamWriter outputStreamWriter = new OutputStreamWriter(new FileOutputStream(file, false), Charsets.UTF_8)) {
                Gson gson = new GsonBuilder().setPrettyPrinting().create();
                outputStreamWriter.write(gson.toJson(data));
            } catch (RuntimeException | IOException e) {
                e.printStackTrace();
                log.error(e.getMessage());
                new Popup().error(Res.get(""guiUtil.accountExport.exportFailed"", e.getMessage()));
            }
        }
    }

    private static String getDirectoryFromChooser(Preferences preferences, Stage stage) {
        DirectoryChooser directoryChooser = new DirectoryChooser();
        File initDir = new File(preferences.getDirectoryChooserPath());
        if (initDir.isDirectory()) {
            directoryChooser.setInitialDirectory(initDir);
        }
        directoryChooser.setTitle(Res.get(""guiUtil.accountExport.selectExportPath""));
        File dir = directoryChooser.showDialog(stage);
        if (dir != null) {
            String directory = dir.getAbsolutePath();
            preferences.setDirectoryChooserPath(directory);
            return directory;
        } else {
            return """";
        }
    }

    public static Callback<ListView<CurrencyListItem>, ListCell<CurrencyListItem>> getCurrencyListItemCellFactory(String postFixSingle,
                                                                                                                  String postFixMulti,
                                                                                                                  Preferences preferences) {
        return p -> new ListCell<>() {
            @Override
            protected void updateItem(CurrencyListItem item, boolean empty) {
                super.updateItem(item, empty);

                if (item != null && !empty) {

                    String code = item.tradeCurrency.getCode();

                    HBox box = new HBox();
                    box.setSpacing(20);
                    Label currencyType = new AutoTooltipLabel(
                            CurrencyUtil.isFiatCurrency(code) ? Res.get(""shared.fiat"") : Res.get(""shared.crypto""));

                    currencyType.getStyleClass().add(""currency-label-small"");
                    Label currency = new AutoTooltipLabel(code);
                    currency.getStyleClass().add(""currency-label"");
                    Label offers = new AutoTooltipLabel(item.tradeCurrency.getName());
                    offers.getStyleClass().add(""currency-label"");

                    box.getChildren().addAll(currencyType, currency, offers);

                    switch (code) {
                        case GUIUtil.SHOW_ALL_FLAG:
                            currencyType.setText(Res.get(""shared.all""));
                            currency.setText(Res.get(""list.currency.showAll""));
                            break;
                        case GUIUtil.EDIT_FLAG:
                            currencyType.setText(Res.get(""shared.edit""));
                            currency.setText(Res.get(""list.currency.editList""));
                            break;
                        default:
                            if (preferences.isSortMarketCurrenciesNumerically()) {
                                offers.setText(offers.getText() + "" ("" + item.numTrades + "" "" +
                                        (item.numTrades == 1 ? postFixSingle : postFixMulti) + "")"");
                            }
                    }

                    setGraphic(box);

                } else {
                    setGraphic(null);
                }
            }
        };
    }

    public static ListCell<TradeCurrency> getTradeCurrencyButtonCell(String postFixSingle,
                                                                     String postFixMulti,
                                                                     Map<String, Integer> offerCounts) {
        return new ListCell<>() {

            @Override
            protected void updateItem(TradeCurrency item, boolean empty) {
                super.updateItem(item, empty);

                if (item != null && !empty) {
                    String code = item.getCode();

                    AnchorPane pane = new AnchorPane();
                    Label currency = new AutoTooltipLabel(code + "" - "" + item.getName());
                    currency.getStyleClass().add(""currency-label-selected"");
                    AnchorPane.setLeftAnchor(currency, 0.0);
                    pane.getChildren().add(currency);

                    Optional<Integer> offerCountOptional = Optional.ofNullable(offerCounts.get(code));

                    switch (code) {
                        case GUIUtil.SHOW_ALL_FLAG:
                            currency.setText(Res.get(""list.currency.showAll""));
                            break;
                        case GUIUtil.EDIT_FLAG:
                            currency.setText(Res.get(""list.currency.editList""));
                            break;
                        default:
                            if (offerCountOptional.isPresent()) {
                                Label numberOfOffers = new AutoTooltipLabel(offerCountOptional.get() + "" "" +
                                        (offerCountOptional.get() == 1 ? postFixSingle : postFixMulti));
                                numberOfOffers.getStyleClass().add(""offer-label-small"");
                                AnchorPane.setRightAnchor(numberOfOffers, 0.0);
                                AnchorPane.setBottomAnchor(numberOfOffers, 2.0);
                                pane.getChildren().add(numberOfOffers);
                            }
                    }

                    setGraphic(pane);
                    setText("""");
                } else {
                    setGraphic(null);
                    setText("""");
                }
            }
        };
    }

    public static StringConverter<TradeCurrency> getTradeCurrencyConverter(String postFixSingle,
                                                                           String postFixMulti,
                                                                           Map<String, Integer> offerCounts) {
        return new StringConverter<>() {
            @Override
            public String toString(TradeCurrency tradeCurrency) {
                String code = tradeCurrency.getCode();
                Optional<Integer> offerCountOptional = Optional.ofNullable(offerCounts.get(code));
                final String displayString;
                displayString = offerCountOptional
                        .map(offerCount -> CurrencyUtil.getNameAndCode(code)
                                + "" - "" + offerCount + "" "" + (offerCount == 1 ? postFixSingle : postFixMulti))
                        .orElseGet(() -> CurrencyUtil.getNameAndCode(code));
                // http://boschista.deviantart.com/journal/Cool-ASCII-Symbols-214218618
                if (code.equals(GUIUtil.SHOW_ALL_FLAG))
                    return ""▶ "" + Res.get(""list.currency.showAll"");
                else if (code.equals(GUIUtil.EDIT_FLAG))
                    return ""▼ "" + Res.get(""list.currency.editList"");
                return tradeCurrency.getDisplayPrefix() + displayString;
            }

            @Override
            public TradeCurrency fromString(String s) {
                return null;
            }
        };
    }

    public static Callback<ListView<TradeCurrency>, ListCell<TradeCurrency>> getTradeCurrencyCellFactory(String postFixSingle,
                                                                                                         String postFixMulti,
                                                                                                         Map<String, Integer> offerCounts) {
        return p -> new ListCell<>() {
            @Override
            protected void updateItem(TradeCurrency item, boolean empty) {
                super.updateItem(item, empty);

                if (item != null && !empty) {

                    String code = item.getCode();

                    HBox box = new HBox();
                    box.setSpacing(20);
                    Label currencyType = new AutoTooltipLabel(
                            CurrencyUtil.isFiatCurrency(item.getCode()) ? Res.get(""shared.fiat"") : Res.get(""shared.crypto""));

                    currencyType.getStyleClass().add(""currency-label-small"");
                    Label currency = new AutoTooltipLabel(item.getCode());
                    currency.getStyleClass().add(""currency-label"");
                    Label offers = new AutoTooltipLabel(item.getName());
                    offers.getStyleClass().add(""currency-label"");

                    box.getChildren().addAll(currencyType, currency, offers);

                    Optional<Integer> offerCountOptional = Optional.ofNullable(offerCounts.get(code));

                    switch (code) {
                        case GUIUtil.SHOW_ALL_FLAG:
                            currencyType.setText(Res.get(""shared.all""));
                            currency.setText(Res.get(""list.currency.showAll""));
                            break;
                        case GUIUtil.EDIT_FLAG:
                            currencyType.setText(Res.get(""shared.edit""));
                            currency.setText(Res.get(""list.currency.editList""));
                            break;
                        default:
                            offerCountOptional.ifPresent(numOffer -> offers.setText(offers.getText() + "" ("" + numOffer + "" "" +
                                    (numOffer == 1 ? postFixSingle : postFixMulti) + "")""));
                    }

                    setGraphic(box);

                } else {
                    setGraphic(null);
                }
            }
        };
    }

    public static ListCell<PaymentMethod> getPaymentMethodButtonCell() {
        return new ListCell<>() {

            @Override
            protected void updateItem(PaymentMethod item, boolean empty) {
                super.updateItem(item, empty);

                if (item != null && !empty) {
                    String id = item.getId();

                    this.getStyleClass().add(""currency-label-selected"");

                    if (id.equals(GUIUtil.SHOW_ALL_FLAG)) {
                        setText(Res.get(""list.currency.showAll""));
                    } else {
                        setText(Res.get(id));
                    }
                } else {
                    setText("""");
                }
            }
        };
    }

    public static Callback<ListView<PaymentMethod>, ListCell<PaymentMethod>> getPaymentMethodCellFactory() {
        return p -> new ListCell<>() {
            @Override
            protected void updateItem(PaymentMethod method, boolean empty) {
                super.updateItem(method, empty);

                if (method != null && !empty) {
                    String id = method.getId();

                    HBox box = new HBox();
                    box.setSpacing(20);
                    Label paymentType = new AutoTooltipLabel(
                            method.isAltcoin() ? Res.get(""shared.crypto"") : Res.get(""shared.fiat""));

                    paymentType.getStyleClass().add(""currency-label-small"");
                    Label paymentMethod = new AutoTooltipLabel(Res.get(id));
                    paymentMethod.getStyleClass().add(""currency-label"");
                    box.getChildren().addAll(paymentType, paymentMethod);

                    if (id.equals(GUIUtil.SHOW_ALL_FLAG)) {
                        paymentType.setText(Res.get(""shared.all""));
                        paymentMethod.setText(Res.get(""list.currency.showAll""));
                    }

                    setGraphic(box);

                } else {
                    setGraphic(null);
                }
            }
        };
    }

    public static void updateConfidence(TransactionConfidence confidence,
                                        Tooltip tooltip,
                                        TxConfidenceIndicator txConfidenceIndicator) {
        if (confidence != null) {
            switch (confidence.getConfidenceType()) {
                case UNKNOWN:
                    tooltip.setText(Res.get(""confidence.unknown""));
                    txConfidenceIndicator.setProgress(0);
                    break;
                case PENDING:
                    tooltip.setText(Res.get(""confidence.seen"", confidence.numBroadcastPeers()));
                    txConfidenceIndicator.setProgress(-1.0);
                    break;
                case BUILDING:
                    tooltip.setText(Res.get(""confidence.confirmed"", confidence.getDepthInBlocks()));
                    txConfidenceIndicator.setProgress(Math.min(1, (double) confidence.getDepthInBlocks() / 6.0));
                    break;
                case DEAD:
                    tooltip.setText(Res.get(""confidence.invalid""));
                    txConfidenceIndicator.setProgress(0);
                    break;
            }

            txConfidenceIndicator.setPrefSize(24, 24);
        }
    }


    public static void openWebPage(String target) {
        openWebPage(target, true, null);
    }

    public static void openWebPage(String target, boolean useReferrer) {
        openWebPage(target, useReferrer, null);
    }

    public static void openWebPageNoPopup(String target) {
        doOpenWebPage(target);
    }

    public static void openWebPage(String target, boolean useReferrer, Runnable closeHandler) {

        if (useReferrer && target.contains(""bisq.network"")) {
            // add utm parameters
            target = appendURI(target, ""utm_source=desktop-client&utm_medium=in-app-link&utm_campaign=language_"" +
                    preferences.getUserLanguage());
        }

        if (DontShowAgainLookup.showAgain(OPEN_WEB_PAGE_KEY)) {
            final String finalTarget = target;
            new Popup().information(Res.get(""guiUtil.openWebBrowser.warning"", target))
                    .actionButtonText(Res.get(""guiUtil.openWebBrowser.doOpen""))
                    .onAction(() -> {
                        DontShowAgainLookup.dontShowAgain(OPEN_WEB_PAGE_KEY, true);
                        doOpenWebPage(finalTarget);
                    })
                    .closeButtonText(Res.get(""guiUtil.openWebBrowser.copyUrl""))
                    .onClose(() -> {
                        Utilities.copyToClipboard(finalTarget);
                        if (closeHandler != null) {
                            closeHandler.run();
                        }
                    })
                    .show();
        } else {
            if (closeHandler != null) {
                closeHandler.run();
            }

            doOpenWebPage(target);
        }
    }

    private static String appendURI(String uri, String appendQuery) {
        try {
            final URI oldURI = new URI(uri);

            String newQuery = oldURI.getQuery();

            if (newQuery == null) {
                newQuery = appendQuery;
            } else {
                newQuery += ""&"" + appendQuery;
            }

            URI newURI = new URI(oldURI.getScheme(), oldURI.getAuthority(), oldURI.getPath(),
                    newQuery, oldURI.getFragment());

            return newURI.toString();
        } catch (URISyntaxException e) {
            e.printStackTrace();
            log.error(e.getMessage());

            return uri;
        }
    }

    private static void doOpenWebPage(String target) {
        try {
            Utilities.openURI(new URI(target));
        } catch (Exception e) {
            e.printStackTrace();
            log.error(e.getMessage());
        }
    }

    public static String getPercentageOfTradeAmount(Coin fee, Coin tradeAmount, Coin minFee) {
        String result = "" ("" + getPercentage(fee, tradeAmount) +
                "" "" + Res.get(""guiUtil.ofTradeAmount"") + "")"";

        if (!fee.isGreaterThan(minFee)) {
            result = "" "" + Res.get(""guiUtil.requiredMinimum"");
        }

        return result;
    }

    public static String getPercentage(Coin part, Coin total) {
        return FormattingUtils.formatToPercentWithSymbol((double) part.value / (double) total.value);
    }

    public static <T> T getParentOfType(Node node, Class<T> t) {
        Node parent = node.getParent();
        while (parent != null) {
            if (parent.getClass().isAssignableFrom(t)) {
                break;
            } else {
                parent = parent.getParent();
            }
        }
        return t.cast(parent);
    }

    public static void showTakeOfferFromUnsignedAccountWarning() {
        String key = ""confirmTakeOfferFromUnsignedAccount"";
        new Popup().warning(Res.get(""payment.takeOfferFromUnsignedAccount.warning""))
                .width(900)
                .closeButtonText(Res.get(""shared.iConfirm""))
                .dontShowAgainId(key)
                .show();
    }

    public static void showMakeOfferToUnsignedAccountWarning() {
        String key = ""confirmMakeOfferToUnsignedAccount"";
        new Popup().warning(Res.get(""payment.makeOfferToUnsignedAccount.warning""))
                .width(900)
                .closeButtonText(Res.get(""shared.iConfirm""))
                .dontShowAgainId(key)
                .show();
    }

    public static void showClearXchangeWarning() {
        String key = ""confirmClearXchangeRequirements"";
        final String currencyName = Config.baseCurrencyNetwork().getCurrencyName();
        new Popup().information(Res.get(""payment.clearXchange.info"", currencyName, currencyName))
                .width(900)
                .closeButtonText(Res.get(""shared.iConfirm""))
                .dontShowAgainId(key)
                .show();
    }

    public static void showFasterPaymentsWarning(Navigation navigation) {
        String key = ""recreateFasterPaymentsAccount"";
        String currencyName = Config.baseCurrencyNetwork().getCurrencyName();
        new Popup().information(Res.get(""payment.fasterPayments.newRequirements.info"", currencyName))
                .width(900)
                .actionButtonTextWithGoTo(""navigation.account"")
                .onAction(() -> {
                    navigation.setReturnPath(navigation.getCurrentPath());
                    navigation.navigateTo(MainView.class, AccountView.class, FiatAccountsView.class);
                })
                .dontShowAgainId(key)
                .show();
    }

    public static String getBitcoinURI(String address, Coin amount, String label) {
        return address != null ?
                BitcoinURI.convertToBitcoinURI(Address.fromString(Config.baseCurrencyNetworkParameters(),
                        address), amount, label, null) :
                """";
    }

    public static boolean isBootstrappedOrShowPopup(P2PService p2PService) {
        if (!p2PService.isBootstrapped()) {
            new Popup().information(Res.get(""popup.warning.notFullyConnected"")).show();
            return false;
        }

        return true;
    }

    public static void showDaoNeedsResyncPopup(Navigation navigation) {
        String key = ""showDaoNeedsResyncPopup"";
        if (DontShowAgainLookup.showAgain(key)) {
            UserThread.runAfter(() -> new Popup().warning(Res.get(""popup.warning.daoNeedsResync""))
                    .dontShowAgainId(key)
                    .actionButtonTextWithGoTo(""navigation.dao.networkMonitor"")
                    .onAction(() -> {
                        navigation.navigateTo(MainView.class, DaoView.class, MonitorView.class, DaoStateMonitorView.class);
                    })
                    .show(), 5, TimeUnit.SECONDS);
        }
    }

    public static boolean isReadyForTxBroadcastOrShowPopup(P2PService p2PService, WalletsSetup walletsSetup) {
        if (!GUIUtil.isBootstrappedOrShowPopup(p2PService)) {
            return false;
        }

        if (!walletsSetup.hasSufficientPeersForBroadcast()) {
            new Popup().information(Res.get(""popup.warning.notSufficientConnectionsToBtcNetwork"", walletsSetup.getMinBroadcastConnections())).show();
            return false;
        }

        if (!walletsSetup.isDownloadComplete()) {
            new Popup().information(Res.get(""popup.warning.downloadNotComplete"")).show();
            return false;
        }

        return true;
    }

    public static boolean isChainHeightSyncedWithinToleranceOrShowPopup(WalletsSetup walletsSetup) {
        if (!walletsSetup.isChainHeightSyncedWithinTolerance()) {
            new Popup().information(Res.get(""popup.warning.chainNotSynced"")).show();
            return false;
        }

        return true;
    }

    public static boolean canCreateOrTakeOfferOrShowPopup(User user, Navigation navigation, @Nullable TradeCurrency currency) {
        if (currency != null && currency.getCode().equals(""BSQ"")) {
            return true;
        }

        if (!user.hasAcceptedRefundAgents()) {
            new Popup().warning(Res.get(""popup.warning.noArbitratorsAvailable"")).show();
            return false;
        }

        if (!user.hasAcceptedMediators()) {
            new Popup().warning(Res.get(""popup.warning.noMediatorsAvailable"")).show();
            return false;
        }

        if (user.currentPaymentAccountProperty().get() == null) {
            new Popup().headLine(Res.get(""popup.warning.noTradingAccountSetup.headline""))
                    .instruction(Res.get(""popup.warning.noTradingAccountSetup.msg""))
                    .actionButtonTextWithGoTo(""navigation.account"")
                    .onAction(() -> {
                        navigation.setReturnPath(navigation.getCurrentPath());
                        navigation.navigateTo(MainView.class, AccountView.class, FiatAccountsView.class);
                    }).show();
            return false;
        }

        return true;
    }

    public static void showWantToBurnBTCPopup(Coin miningFee, Coin amount, CoinFormatter btcFormatter) {
        new Popup().warning(Res.get(""popup.warning.burnBTC"", btcFormatter.formatCoinWithCode(miningFee),
                btcFormatter.formatCoinWithCode(amount))).show();
    }

    public static void requestFocus(Node node) {
        UserThread.execute(node::requestFocus);
    }

    public static void reSyncSPVChain(Preferences preferences) {
        try {
            new Popup().information(Res.get(""settings.net.reSyncSPVSuccess""))
                    .useShutDownButton()
                    .actionButtonText(Res.get(""shared.shutDown""))
                    .onAction(() -> {
                        BisqSetup.setResyncSpvSemaphore(true);
                        UserThread.runAfter(BisqApp.getShutDownHandler(), 100, TimeUnit.MILLISECONDS);
                    })
                    .closeButtonText(Res.get(""shared.cancel""))
                    .show();
        } catch (Throwable t) {
            new Popup().error(Res.get(""settings.net.reSyncSPVFailed"", t)).show();
        }
    }

    public static void showSelectableTextModal(String title, String text) {
        TextArea textArea = new BisqTextArea();
        textArea.setText(text);
        textArea.setEditable(false);
        textArea.setWrapText(true);
        textArea.setPrefSize(800, 600);

        Scene scene = new Scene(textArea);
        Stage stage = new Stage();
        if (null != title) {
            stage.setTitle(title);
        }
        stage.setScene(scene);
        stage.initModality(Modality.NONE);
        stage.initStyle(StageStyle.UTILITY);
        stage.show();
    }

    public static StringConverter<PaymentAccount> getPaymentAccountsComboBoxStringConverter() {
        return new StringConverter<>() {
            @Override
            public String toString(PaymentAccount paymentAccount) {
                if (paymentAccount.hasMultipleCurrencies()) {
                    return paymentAccount.getAccountName() + "" ("" + Res.get(paymentAccount.getPaymentMethod().getId()) + "")"";
                } else {
                    TradeCurrency singleTradeCurrency = paymentAccount.getSingleTradeCurrency();
                    String prefix = singleTradeCurrency != null ? singleTradeCurrency.getCode() + "", "" : """";
                    return paymentAccount.getAccountName() + "" ("" + prefix +
                            Res.get(paymentAccount.getPaymentMethod().getId()) + "")"";
                }
            }

            @Override
            public PaymentAccount fromString(String s) {
                return null;
            }
        };
    }

    public static Callback<ListView<PaymentAccount>, ListCell<PaymentAccount>> getPaymentAccountListCellFactory(
            ComboBox<PaymentAccount> paymentAccountsComboBox,
            AccountAgeWitnessService accountAgeWitnessService) {
        return p -> new ListCell<>() {
            @Override
            protected void updateItem(PaymentAccount item, boolean empty) {
                super.updateItem(item, empty);

                if (item != null && !empty) {

                    boolean needsSigning = PaymentMethod.hasChargebackRisk(item.getPaymentMethod(),
                            item.getTradeCurrencies());

                    InfoAutoTooltipLabel label = new InfoAutoTooltipLabel(
                            paymentAccountsComboBox.getConverter().toString(item),
                            ContentDisplay.RIGHT);

                    if (needsSigning) {
                        AccountAgeWitness myWitness = accountAgeWitnessService.getMyWitness(
                                item.paymentAccountPayload);
                        AccountAgeWitnessService.SignState signState =
                                accountAgeWitnessService.getSignState(myWitness);
                        String info = StringUtils.capitalize(signState.getDisplayString());

                        MaterialDesignIcon icon = getIconForSignState(signState);

                        label.setIcon(icon, info);
                    }
                    setGraphic(label);
                } else {
                    setGraphic(null);
                }
            }
        };
    }

    public static void removeChildrenFromGridPaneRows(GridPane gridPane, int start, int end) {
        Map<Integer, List<Node>> childByRowMap = new HashMap<>();
        gridPane.getChildren().forEach(child -> {
            final Integer rowIndex = GridPane.getRowIndex(child);
            childByRowMap.computeIfAbsent(rowIndex, key -> new ArrayList<>());
            childByRowMap.get(rowIndex).add(child);
        });

        for (int i = Math.min(start, childByRowMap.size()); i < Math.min(end + 1, childByRowMap.size()); i++) {
            List<Node> nodes = childByRowMap.get(i);
            if (nodes != null) {
                nodes.stream()
                        .filter(Objects::nonNull)
                        .filter(node -> gridPane.getChildren().contains(node))
                        .forEach(node -> gridPane.getChildren().remove(node));
            }
        }
    }

    public static void showBsqFeeInfoPopup(Coin fee,
                                           Coin miningFee,
                                           Coin btcForIssuance,
                                           int txVsize,
                                           BsqFormatter bsqFormatter,
                                           CoinFormatter btcFormatter,
                                           String type,
                                           Runnable actionHandler) {
        String confirmationMessage;

        if (btcForIssuance != null) {
            confirmationMessage = Res.get(""dao.feeTx.issuanceProposal.confirm.details"",
                    StringUtils.capitalize(type),
                    bsqFormatter.formatCoinWithCode(fee),
                    bsqFormatter.formatBTCWithCode(btcForIssuance),
                    100,
                    btcFormatter.formatCoinWithCode(miningFee),
                    CoinUtil.getFeePerVbyte(miningFee, txVsize),
                    txVsize / 1000d,
                    type);
        } else {
            confirmationMessage = Res.get(""dao.feeTx.confirm.details"",
                    StringUtils.capitalize(type),
                    bsqFormatter.formatCoinWithCode(fee),
                    btcFormatter.formatCoinWithCode(miningFee),
                    CoinUtil.getFeePerVbyte(miningFee, txVsize),
                    txVsize / 1000d,
                    type);
        }
        new Popup().headLine(Res.get(""dao.feeTx.confirm"", type))
                .confirmation(confirmationMessage)
                .actionButtonText(Res.get(""shared.yes""))
                .onAction(actionHandler)
                .closeButtonText(Res.get(""shared.cancel""))
                .show();
    }

    public static void showBsqFeeInfoPopup(Coin fee, Coin miningFee, int txVsize, BsqFormatter bsqFormatter,
                                           CoinFormatter btcFormatter, String type,
                                           Runnable actionHandler) {
        showBsqFeeInfoPopup(fee, miningFee, null, txVsize, bsqFormatter, btcFormatter, type, actionHandler);
    }

    public static void setFitToRowsForTableView(TableView<?> tableView,
                                                int rowHeight,
                                                int headerHeight,
                                                int minNumRows,
                                                int maxNumRows) {
        int size = tableView.getItems().size();
        int minHeight = rowHeight * minNumRows + headerHeight;
        int maxHeight = rowHeight * maxNumRows + headerHeight;
        checkArgument(maxHeight >= minHeight, ""maxHeight cannot be smaller as minHeight"");
        int height = Math.min(maxHeight, Math.max(minHeight, size * rowHeight + headerHeight));

        tableView.setPrefHeight(-1);
        tableView.setVisible(false);
        // We need to delay the setter to the next render frame as otherwise views don' get updated in some cases
        // Not 100% clear what causes that issue, but seems the requestLayout method is not called otherwise.
        // We still need to set the height immediately, otherwise some views render an incorrect layout.
        tableView.setPrefHeight(height);

        UserThread.execute(() -> {
            tableView.setPrefHeight(height);
            tableView.setVisible(true);
        });
    }

    public static Tuple2<ComboBox<TradeCurrency>, Integer> addRegionCountryTradeCurrencyComboBoxes(GridPane gridPane,
                                                                                                   int gridRow,
                                                                                                   Consumer<Country> onCountrySelectedHandler,
                                                                                                   Consumer<TradeCurrency> onTradeCurrencySelectedHandler) {
        gridRow = addRegionCountry(gridPane, gridRow, onCountrySelectedHandler);

        ComboBox<TradeCurrency> currencyComboBox = FormBuilder.addComboBox(gridPane, ++gridRow,
                Res.get(""shared.currency""));
        currencyComboBox.setPromptText(Res.get(""list.currency.select""));
        currencyComboBox.setItems(FXCollections.observableArrayList(CurrencyUtil.getAllSortedFiatCurrencies()));

        currencyComboBox.setConverter(new StringConverter<>() {
            @Override
            public String toString(TradeCurrency currency) {
                return currency.getNameAndCode();
            }

            @Override
            public TradeCurrency fromString(String string) {
                return null;
            }
        });
        currencyComboBox.setDisable(true);

        currencyComboBox.setOnAction(e ->
                onTradeCurrencySelectedHandler.accept(currencyComboBox.getSelectionModel().getSelectedItem()));

        return new Tuple2<>(currencyComboBox, gridRow);
    }

    public static int addRegionCountry(GridPane gridPane,
                                       int gridRow,
                                       Consumer<Country> onCountrySelectedHandler) {
        Tuple3<Label, ComboBox<bisq.core.locale.Region>, ComboBox<Country>> tuple3 = addTopLabelComboBoxComboBox(gridPane, ++gridRow, Res.get(""payment.country""));

        ComboBox<bisq.core.locale.Region> regionComboBox = tuple3.second;
        regionComboBox.setPromptText(Res.get(""payment.select.region""));
        regionComboBox.setConverter(new StringConverter<>() {
            @Override
            public String toString(bisq.core.locale.Region region) {
                return region.name;
            }

            @Override
            public bisq.core.locale.Region fromString(String s) {
                return null;
            }
        });
        regionComboBox.setItems(FXCollections.observableArrayList(CountryUtil.getAllRegions()));

        ComboBox<Country> countryComboBox = tuple3.third;
        countryComboBox.setVisibleRowCount(15);
        countryComboBox.setDisable(true);
        countryComboBox.setPromptText(Res.get(""payment.select.country""));
        countryComboBox.setConverter(new StringConverter<>() {
            @Override
            public String toString(Country country) {
                return country.name + "" ("" + country.code + "")"";
            }

            @Override
            public Country fromString(String s) {
                return null;
            }
        });

        regionComboBox.setOnAction(e -> {
            bisq.core.locale.Region selectedItem = regionComboBox.getSelectionModel().getSelectedItem();
            if (selectedItem != null) {
                countryComboBox.setDisable(false);
                countryComboBox.setItems(FXCollections.observableArrayList(CountryUtil.getAllCountriesForRegion(selectedItem)));
            }
        });

        countryComboBox.setOnAction(e ->
                onCountrySelectedHandler.accept(countryComboBox.getSelectionModel().getSelectedItem()));

        return gridRow;
    }

    @NotNull
    public static <T> ListCell<T> getComboBoxButtonCell(String title, ComboBox<T> comboBox) {
        return getComboBoxButtonCell(title, comboBox, true);
    }

    @NotNull
    public static <T> ListCell<T> getComboBoxButtonCell(String title,
                                                        ComboBox<T> comboBox,
                                                        Boolean hideOriginalPrompt) {
        return new ListCell<>() {
            @Override
            protected void updateItem(T item, boolean empty) {
                super.updateItem(item, empty);

                // See https://github.com/jfoenixadmin/JFoenix/issues/610
                if (hideOriginalPrompt)
                    this.setVisible(item != null || !empty);

                if (empty || item == null) {
                    setText(title);
                } else {
                    setText(comboBox.getConverter().toString(item));
                }
            }
        };
    }

    public static void openTxInBsqBlockExplorer(String txId, Preferences preferences) {
        if (txId != null)
            GUIUtil.openWebPage(preferences.getBsqBlockChainExplorer().txUrl + txId, false);
    }

    public static String getBsqInUsd(Price bsqPrice,
                                     Coin bsqAmount,
                                     PriceFeedService priceFeedService,
                                     BsqFormatter bsqFormatter) {
        MarketPrice usdMarketPrice = priceFeedService.getMarketPrice(""USD"");
        if (usdMarketPrice == null) {
            return Res.get(""shared.na"");
        }
        long usdMarketPriceAsLong = MathUtils.roundDoubleToLong(MathUtils.scaleUpByPowerOf10(usdMarketPrice.getPrice(),
                Fiat.SMALLEST_UNIT_EXPONENT));
        Price usdPrice = Price.valueOf(""USD"", usdMarketPriceAsLong);
        String bsqAmountAsString = bsqFormatter.formatCoin(bsqAmount);
        Volume bsqAmountAsVolume = Volume.parse(bsqAmountAsString, ""BSQ"");
        Coin requiredBtc = bsqPrice.getAmountByVolume(bsqAmountAsVolume);
        Volume volumeByAmount = usdPrice.getVolumeByAmount(requiredBtc);
        return VolumeUtil.formatAverageVolumeWithCode(volumeByAmount);
    }

    public static MaterialDesignIcon getIconForSignState(AccountAgeWitnessService.SignState state) {
        if (state.equals(AccountAgeWitnessService.SignState.PEER_INITIAL)) {
            return MaterialDesignIcon.CLOCK;
        }

        return (state.equals(AccountAgeWitnessService.SignState.ARBITRATOR) ||
                state.equals(AccountAgeWitnessService.SignState.PEER_SIGNER)) ?
                MaterialDesignIcon.APPROVAL : MaterialDesignIcon.ALERT_CIRCLE_OUTLINE;
    }

    public static String getProofResultAsString(@Nullable AssetTxProofResult result) {
        if (result == null) {
            return """";
        }
        String key = ""portfolio.pending.autoConf.state."" + result.name();
        switch (result) {
            case UNDEFINED:
                return """";
            case FEATURE_DISABLED:
                return Res.get(key, result.getDetails());
            case TRADE_LIMIT_EXCEEDED:
                return Res.get(key);
            case INVALID_DATA:
                return Res.get(key, result.getDetails());
            case PAYOUT_TX_ALREADY_PUBLISHED:
            case DISPUTE_OPENED:
            case REQUESTS_STARTED:
                return Res.get(key);
            case PENDING:
                return Res.get(key, result.getNumSuccessResults(), result.getNumRequiredSuccessResults(), result.getDetails());
            case COMPLETED:
            case ERROR:
            case FAILED:
                return Res.get(key);
            default:
                return result.name();
        }
    }

    public static ScrollPane createScrollPane() {
        ScrollPane scrollPane = new ScrollPane();
        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
        scrollPane.setFitToWidth(true);
        scrollPane.setFitToHeight(true);
        AnchorPane.setLeftAnchor(scrollPane, 0d);
        AnchorPane.setTopAnchor(scrollPane, 0d);
        AnchorPane.setRightAnchor(scrollPane, 0d);
        AnchorPane.setBottomAnchor(scrollPane, 0d);
        return scrollPane;
    }

    public static void setDefaultTwoColumnConstraintsForGridPane(GridPane gridPane) {
        ColumnConstraints columnConstraints1 = new ColumnConstraints();
        columnConstraints1.setHalignment(HPos.RIGHT);
        columnConstraints1.setHgrow(Priority.NEVER);
        columnConstraints1.setMinWidth(200);
        ColumnConstraints columnConstraints2 = new ColumnConstraints();
        columnConstraints2.setHgrow(Priority.ALWAYS);
        gridPane.getColumnConstraints().addAll(columnConstraints1, columnConstraints2);
    }

}",1,64 2000 777 587 2001 123 777 657 809 2002 2003 61 362 59 330 777 657 809 2002 2004 61 362 59 330 777 657 809 2002 2005 61 362 59 777 657 809 704 2006 61 1500 59 777 657 809 704 2007 61 1502 59 777 657 809 704 2008 61 1502 59 777 657 809 704 2009 61 1502 59 777 657 809 704 2010 61 1502 59 773 809 2011 2012 59 773 809 2013 2014 59 777 809 865 2015 40 2011 2012 41 123 2001 46 2012 61 2012 59 125 777 809 865 2016 40 2013 2014 41 123 2001 46 2014 61 2014 59 125 777 809 2002 2017 40 41 123 792 2014 46 2017 40 41 59 125 777 809 625 2018 40 2019 2020 41 123 2019 2021 61 2020 46 2022 40 362 41 59 688 40 2021 702 2023 41 123 657 2023 2024 61 40 2023 41 2021 59 688 40 2024 46 2025 40 41 46 2026 40 2027 46 2028 41 41 792 2024 46 2029 40 41 59 125 792 1500 59 125 777 809 865 2030 40 2019 2031 41 123 2031 46 2032 40 41 46 2033 40 40 2034 44 2035 44 2036 41 45 62 123 688 40 2037 340 2036 41 123 2031 46 2038 40 41 59 125 125 41 59 125 777 809 865 2039 40 2040 2041 41 123 2002 2042 61 362 59 688 40 33 2043 46 2044 40 41 307 2045 46 2046 40 2042 41 41 123 744 2047 40 41 46 2048 40 2049 46 2050 40 362 44 2002 46 2051 40 2001 46 2012 46 2052 40 41 46 2053 41 41 41 46 2054 40 2041 41 46 2055 40 41 46 2056 40 41 59 2045 46 2057 40 2042 44 2058 41 59 125 630 123 2041 46 2059 40 41 59 125 125 777 809 865 2060 40 2061 60 2062 62 2063 44 2002 2064 44 2013 2014 44 2065 2066 44 2067 2068 44 2069 2070 41 123 688 40 33 2063 46 2071 40 41 41 123 2002 2072 61 2073 40 2014 44 2066 41 59 688 40 33 2072 46 2071 40 41 41 123 2074 60 2075 62 2076 61 744 2074 60 62 40 744 2077 40 2072 41 44 2068 44 2070 41 59 2078 2079 61 744 2078 40 2063 41 59 2076 46 2080 40 2079 44 2064 44 2074 46 2081 46 2082 41 59 2076 46 2083 40 40 41 45 62 123 2076 46 2084 40 41 59 744 2085 40 41 46 2086 40 2087 46 2088 40 362 44 2089 46 2088 40 2072 44 2064 41 46 2090 40 41 41 41 46 2091 40 41 59 125 41 59 125 125 630 123 744 2092 40 41 46 2093 40 2094 46 2095 40 362 41 41 46 2096 40 41 59 125 125 777 809 865 2097 40 2098 2099 44 2002 2064 44 2013 2014 44 2065 2066 44 2067 2068 44 2069 2070 41 123 2100 2101 61 744 2100 40 41 59 2102 2103 61 744 2102 40 2014 46 2104 40 41 41 59 688 40 2103 46 2105 40 41 41 123 2101 46 2106 40 2103 41 59 125 2101 46 2107 40 2108 46 2109 40 362 44 2064 41 41 59 2102 2110 61 2101 46 2111 40 2066 46 2112 40 41 41 59 688 40 2110 340 2113 41 123 2002 2114 61 2110 46 2115 40 41 59 688 40 2116 46 2109 40 2114 41 46 2117 40 41 46 2118 40 41 46 2119 40 2064 41 41 123 2002 2120 61 2116 46 2109 40 2114 41 46 2121 40 41 46 2118 40 41 59 2014 46 2122 40 2120 41 59 2123 60 2124 62 2125 61 744 2123 60 62 40 744 2102 40 2120 41 44 2068 44 2070 41 59 2125 46 2126 40 2064 44 2127 45 62 123 2128 2129 61 744 2128 40 41 59 2130 60 2062 62 2131 61 744 2130 60 62 40 41 59 2127 46 2132 40 41 46 2133 40 2134 45 62 123 2002 2135 61 2134 46 2136 40 41 59 688 40 2099 46 2137 40 2135 41 323 2113 41 123 2131 46 2138 40 2134 41 59 2129 46 2139 40 2108 46 2109 40 362 44 2135 41 41 59 125 630 123 2129 46 2140 40 2108 46 2109 40 362 44 2135 41 41 59 125 125 41 59 2099 46 2141 40 2131 41 59 744 2142 40 41 46 2143 40 2108 46 2109 40 362 44 2114 44 2129 41 41 46 2144 40 41 59 125 44 40 41 45 62 123 744 2145 40 41 46 2146 40 2108 46 2109 40 362 44 2114 44 2064 41 41 46 2147 40 41 59 125 41 59 125 630 123 305 2002 2148 61 2116 46 2109 40 2114 41 46 2117 40 41 46 2118 40 41 59 2002 2149 61 362 59 688 40 2148 46 2150 40 2149 41 41 123 2002 2151 61 2116 46 2109 40 2114 41 46 2152 40 41 46 2118 40 41 59 2014 46 2153 40 2151 41 59 2154 60 2155 62 2156 61 744 2154 60 62 40 744 2102 40 2151 41 44 2068 44 2070 41 59 2156 46 2157 40 2148 44 2158 45 62 123 2159 2160 61 744 2159 40 41 59 2161 60 2062 62 2162 61 744 2161 60 62 40 41 59 2158 46 2163 40 41 46 2164 40 2165 45 62 123 2002 2166 61 2165 46 2167 40 41 59 688 40 2099 46 2168 40 2166 41 323 2113 41 123 2162 46 2169 40 2165 41 59 2160 46 2170 40 2108 46 2109 40 362 44 2166 41 41 59 125 630 123 2160 46 2171 40 2108 46 2109 40 362 44 2166 41 41 59 125 125 41 59 2099 46 2172 40 2162 41 59 744 2173 40 41 46 2174 40 2108 46 2109 40 362 44 2114 44 2160 41 41 46 2175 40 41 59 125 44 40 41 45 62 123 744 2176 40 41 46 2177 40 2108 46 2109 40 362 44 2114 44 2148 41 41 46 2178 40 41 59 125 41 59 125 630 123 2179 46 2180 40 362 44 2064 44 2149 41 59 125 125 125 125 777 809 60 2181 62 865 2182 40 2002 2064 44 2183 60 2181 62 2184 44 2183 60 2181 62 2185 44 2181 2186 44 2187 60 2181 62 2188 44 2065 2066 41 123 2189 2190 61 744 2189 40 41 59 2190 46 2191 40 2064 41 59 2192 2193 61 2190 46 2194 40 2066 41 59 688 40 2193 340 2195 41 123 830 40 2196 2197 61 744 2196 40 744 2198 40 2193 44 2199 41 44 2200 46 2201 41 41 123 2202 60 2181 62 2203 61 744 2204 60 2181 62 40 2197 41 46 2205 40 2206 46 2207 41 46 2208 40 2184 41 46 2209 40 41 59 2203 46 2210 40 2186 41 59 2202 60 2181 62 2211 61 744 2204 60 2181 62 40 2197 41 46 2205 40 2206 46 2207 41 46 2208 40 2185 41 46 2209 40 41 59 2211 46 2212 40 2188 41 59 125 580 40 2213 124 2214 2215 41 123 2215 46 2216 40 41 59 2217 46 2218 40 2215 46 2219 40 41 41 59 744 2220 40 41 46 2218 40 2221 46 2222 40 362 44 2215 46 2219 40 41 41 41 46 2223 40 41 59 125 125 125 777 809 865 2224 40 2002 2064 44 2225 2226 44 2065 2066 41 123 2227 2228 61 744 2227 40 41 59 2228 46 2229 40 2064 41 59 2230 2231 61 2228 46 2232 40 2066 41 59 688 40 2231 340 2233 41 123 830 40 2234 2235 61 744 2234 40 744 2236 40 2231 44 2237 41 44 2238 46 2239 41 41 123 2240 2241 61 744 2242 40 41 46 2243 40 41 46 2244 40 41 59 2235 46 2245 40 2241 46 2246 40 2226 41 41 59 125 580 40 2247 124 2248 2249 41 123 2249 46 2250 40 41 59 2251 46 2252 40 2249 46 2253 40 41 41 59 744 2254 40 41 46 2252 40 2255 46 2256 40 362 44 2249 46 2253 40 41 41 41 59 125 125 125 773 809 2002 2257 40 2013 2014 44 2065 2066 41 123 2258 2259 61 744 2258 40 41 59 2260 2261 61 744 2260 40 2014 46 2262 40 41 41 59 688 40 2261 46 2263 40 41 41 123 2259 46 2264 40 2261 41 59 125 2259 46 2265 40 2266 46 2267 40 362 41 41 59 2260 2268 61 2259 46 2269 40 2066 41 59 688 40 2268 340 2270 41 123 2002 2271 61 2268 46 2272 40 41 59 2014 46 2273 40 2271 41 59 792 2271 59 125 630 123 792 362 59 125 125 777 809 2274 60 2275 60 2276 62 44 2277 60 2276 356 2278 40 2002 2279 44 2002 2280 44 2013 2014 41 123 792 2281 45 62 744 2277 60 62 40 41 123 64 2282 775 865 2283 40 2276 2284 44 570 2285 41 123 818 46 2283 40 2284 44 2285 41 59 688 40 2284 340 2286 307 33 2285 41 123 2002 2287 61 2284 46 2288 46 2289 40 41 59 2290 2291 61 744 2290 40 41 59 2291 46 2292 40 1503 41 59 2293 2294 61 744 2295 40 2296 46 2297 40 2287 41 63 2298 46 2299 40 362 41 58 2298 46 2299 40 362 41 41 59 2294 46 2300 40 41 46 2301 40 362 41 59 2293 2302 61 744 2295 40 2287 41 59 2302 46 2300 40 41 46 2301 40 362 41 59 2293 2303 61 744 2295 40 2284 46 2288 46 2304 40 41 41 59 2303 46 2300 40 41 46 2301 40 362 41 59 2291 46 2305 40 41 46 2306 40 2294 44 2302 44 2303 41 59 819 40 2287 41 123 579 2001 46 2003 58 2294 46 2307 40 2298 46 2299 40 362 41 41 59 2302 46 2307 40 2298 46 2299 40 362 41 41 59 572 59 579 2001 46 2004 58 2294 46 2307 40 2298 46 2299 40 362 41 41 59 2302 46 2307 40 2298 46 2299 40 362 41 41 59 572 59 613 58 688 40 2014 46 2308 40 41 41 123 2303 46 2307 40 2303 46 2309 40 41 43 362 43 2284 46 2310 43 362 43 40 2284 46 2310 323 1501 63 2279 58 2280 41 43 362 41 59 125 125 2311 40 2291 41 59 125 630 123 2312 40 2286 41 59 125 125 125 59 125 777 809 2277 60 2313 62 2314 40 2002 2279 44 2002 2280 44 2315 60 2002 44 2316 62 2317 41 123 792 744 2277 60 62 40 41 123 64 2318 775 865 2319 40 2313 2320 44 570 2321 41 123 818 46 2319 40 2320 44 2321 41 59 688 40 2320 340 2322 307 33 2321 41 123 2002 2323 61 2320 46 2324 40 41 59 2325 2326 61 744 2325 40 41 59 2327 2328 61 744 2329 40 2323 43 362 43 2320 46 2330 40 41 41 59 2328 46 2331 40 41 46 2332 40 362 41 59 2325 46 2333 40 2328 44 1500 41 59 2326 46 2334 40 41 46 2332 40 2328 41 59 2335 60 2316 62 2336 61 2335 46 2337 40 2317 46 2338 40 2323 41 41 59 819 40 2323 41 123 579 2001 46 2003 58 2328 46 2339 40 2340 46 2338 40 362 41 41 59 572 59 579 2001 46 2004 58 2328 46 2339 40 2340 46 2338 40 362 41 41 59 572 59 613 58 688 40 2336 46 2341 40 41 41 123 2327 2342 61 744 2329 40 2336 46 2338 40 41 43 362 43 40 2336 46 2338 40 41 323 1501 63 2279 58 2280 41 41 59 2342 46 2331 40 41 46 2332 40 362 41 59 2325 46 2343 40 2342 44 1500 41 59 2325 46 2344 40 2342 44 1502 41 59 2326 46 2334 40 41 46 2332 40 2342 41 59 125 125 2345 40 2326 41 59 2346 40 362 41 59 125 630 123 2347 40 2322 41 59 2348 40 362 41 59 125 125 125 59 125 777 809 2349 60 2313 62 2350 40 2002 2279 44 2002 2280 44 2315 60 2002 44 2316 62 2317 41 123 792 744 2349 60 62 40 41 123 64 2351 777 2002 2352 40 2313 2353 41 123 2002 2354 61 2353 46 2355 40 41 59 2356 60 2316 62 2357 61 2356 46 2358 40 2317 46 2359 40 2354 41 41 59 657 2002 2360 59 2360 61 2357 46 2361 40 2362 45 62 2363 46 2364 40 2354 41 43 362 43 2362 43 362 43 40 2362 323 1501 63 2279 58 2280 41 41 46 2365 40 40 41 45 62 2363 46 2364 40 2354 41 41 59 330 688 40 2354 46 2366 40 2001 46 2003 41 41 792 362 43 2367 46 2359 40 362 41 59 630 688 40 2354 46 2366 40 2001 46 2004 41 41 792 362 43 2367 46 2359 40 362 41 59 792 2353 46 2368 40 41 43 2360 59 125 64 2351 777 2313 2369 40 2002 2370 41 123 792 2371 59 125 125 59 125 777 809 2274 60 2275 60 2313 62 44 2277 60 2313 356 2372 40 2002 2279 44 2002 2280 44 2315 60 2002 44 2316 62 2317 41 123 792 2373 45 62 744 2277 60 62 40 41 123 64 2374 775 865 2375 40 2313 2376 44 570 2377 41 123 818 46 2375 40 2376 44 2377 41 59 688 40 2376 340 2378 307 33 2377 41 123 2002 2379 61 2376 46 2380 40 41 59 2381 2382 61 744 2381 40 41 59 2382 46 2383 40 1503 41 59 2384 2385 61 744 2386 40 2387 46 2388 40 2376 46 2380 40 41 41 63 2389 46 2390 40 362 41 58 2389 46 2390 40 362 41 41 59 2385 46 2391 40 41 46 2392 40 362 41 59 2384 2393 61 744 2386 40 2376 46 2380 40 41 41 59 2393 46 2391 40 41 46 2392 40 362 41 59 2384 2394 61 744 2386 40 2376 46 2395 40 41 41 59 2394 46 2391 40 41 46 2392 40 362 41 59 2382 46 2396 40 41 46 2397 40 2385 44 2393 44 2394 41 59 2398 60 2316 62 2399 61 2398 46 2400 40 2317 46 2390 40 2379 41 41 59 819 40 2379 41 123 579 2001 46 2003 58 2385 46 2401 40 2389 46 2390 40 362 41 41 59 2393 46 2401 40 2389 46 2390 40 362 41 41 59 572 59 579 2001 46 2004 58 2385 46 2401 40 2389 46 2390 40 362 41 41 59 2393 46 2401 40 2389 46 2390 40 362 41 41 59 572 59 613 58 2399 46 2402 40 2403 45 62 2394 46 2401 40 2394 46 2404 40 41 43 362 43 2403 43 362 43 40 2403 323 1501 63 2279 58 2280 41 43 362 41 41 59 125 2405 40 2382 41 59 125 630 123 2406 40 2378 41 59 125 125 125 59 125 777 809 2277 60 2407 62 2408 40 41 123 792 744 2277 60 62 40 41 123 64 2409 775 865 2410 40 2407 2411 44 570 2412 41 123 818 46 2410 40 2411 44 2412 41 59 688 40 2411 340 2413 307 33 2412 41 123 2002 2414 61 2411 46 2415 40 41 59 823 46 2416 40 41 46 2417 40 362 41 59 688 40 2414 46 2418 40 2001 46 2003 41 41 123 2419 40 2420 46 2421 40 362 41 41 59 125 630 123 2422 40 2423 46 2424 40 2414 41 41 59 125 125 630 123 2425 40 362 41 59 125 125 125 59 125 777 809 2274 60 2275 60 2407 62 44 2277 60 2407 356 2426 40 41 123 792 2427 45 62 744 2277 60 62 40 41 123 64 2428 775 865 2429 40 2407 2430 44 570 2431 41 123 818 46 2429 40 2430 44 2431 41 59 688 40 2430 340 2432 307 33 2431 41 123 2002 2433 61 2430 46 2434 40 41 59 2435 2436 61 744 2435 40 41 59 2436 46 2437 40 1503 41 59 2438 2439 61 744 2440 40 2430 46 2441 40 41 63 2442 46 2443 40 362 41 58 2442 46 2443 40 362 41 41 59 2439 46 2444 40 41 46 2445 40 362 41 59 2438 2446 61 744 2440 40 2442 46 2443 40 2433 41 41 59 2446 46 2444 40 41 46 2445 40 362 41 59 2436 46 2447 40 41 46 2448 40 2439 44 2446 41 59 688 40 2433 46 2449 40 2001 46 2003 41 41 123 2439 46 2450 40 2442 46 2443 40 362 41 41 59 2446 46 2450 40 2442 46 2443 40 362 41 41 59 125 2451 40 2436 41 59 125 630 123 2452 40 2432 41 59 125 125 125 59 125 777 809 865 2453 40 2454 2455 44 2456 2457 44 2458 2459 41 123 688 40 2455 340 2460 41 123 819 40 2455 46 2461 40 41 41 123 579 2462 58 2457 46 2463 40 2464 46 2465 40 362 41 41 59 2459 46 2466 40 1500 41 59 572 59 579 2467 58 2457 46 2463 40 2464 46 2465 40 362 44 2455 46 2468 40 41 41 41 59 2459 46 2466 40 45 1501 41 59 572 59 579 2469 58 2457 46 2463 40 2464 46 2465 40 362 44 2455 46 2470 40 41 41 41 59 2459 46 2466 40 2471 46 2472 40 1501 44 40 625 41 2455 46 2470 40 41 47 1502 41 41 59 572 59 579 2473 58 2457 46 2463 40 2464 46 2465 40 362 41 41 59 2459 46 2466 40 1500 41 59 572 59 125 2459 46 2474 40 1503 44 1503 41 59 125 125 777 809 865 2475 40 2002 2476 41 123 2475 40 2476 44 2477 44 2478 41 59 125 777 809 865 2475 40 2002 2476 44 570 2479 41 123 2475 40 2476 44 2479 44 2480 41 59 125 777 809 865 2481 40 2002 2476 41 123 2482 40 2476 41 59 125 777 809 865 2475 40 2002 2476 44 570 2479 44 2040 2483 41 123 688 40 2479 307 2476 46 2484 40 362 41 41 123 330 2476 61 2485 40 2476 44 362 43 2014 46 2017 40 41 41 59 125 688 40 2486 46 2487 40 2005 41 41 123 657 2002 2488 61 2476 59 744 2489 40 41 46 2490 40 2491 46 2492 40 362 44 2476 41 41 46 2493 40 2491 46 2492 40 362 41 41 46 2494 40 40 41 45 62 123 2486 46 2495 40 2005 44 2496 41 59 2497 40 2488 41 59 125 41 46 2498 40 2491 46 2492 40 362 41 41 46 2499 40 40 41 45 62 123 2500 46 2501 40 2488 41 59 688 40 2483 340 2502 41 123 2483 46 2503 40 41 59 125 125 41 46 2504 40 41 59 125 630 123 688 40 2483 340 2505 41 123 2483 46 2506 40 41 59 125 2507 40 2476 41 59 125 125 773 809 2002 2508 40 2002 2509 44 2002 2510 41 123 830 123 657 2511 2512 61 744 2511 40 2509 41 59 2002 2513 61 2512 46 2514 40 41 59 688 40 2513 323 2515 41 123 2513 61 2510 59 125 630 123 2513 348 362 43 2510 59 125 2511 2516 61 744 2511 40 2512 46 2517 40 41 44 2512 46 2518 40 41 44 2512 46 2519 40 41 44 2513 44 2512 46 2520 40 41 41 59 792 2516 46 2521 40 41 59 125 580 40 2522 2523 41 123 2523 46 2524 40 41 59 2525 46 2526 40 2523 46 2527 40 41 41 59 792 2509 59 125 125 773 809 865 2528 40 2002 2476 41 123 830 123 2529 46 2530 40 744 2531 40 2476 41 41 59 125 580 40 2532 2533 41 123 2533 46 2534 40 41 59 2535 46 2536 40 2533 46 2537 40 41 41 59 125 125 777 809 2002 2538 40 2539 2540 44 2539 2541 44 2539 2542 41 123 2002 2543 61 362 43 2544 40 2540 44 2541 41 43 362 43 2545 46 2546 40 362 41 43 362 59 688 40 33 2540 46 2547 40 2542 41 41 123 2543 61 362 43 2545 46 2546 40 362 41 59 125 792 2543 59 125 777 809 2002 2548 40 2539 2549 44 2539 2550 41 123 792 2551 46 2552 40 40 625 41 2549 46 2553 47 40 625 41 2550 46 2553 41 59 125 777 809 60 2181 62 2181 2554 40 2019 2031 44 2555 60 2181 62 2556 41 123 2019 2557 61 2031 46 2558 40 41 59 870 40 2557 340 2559 41 123 688 40 2557 46 2560 40 41 46 2561 40 2556 41 41 123 572 59 125 630 123 2557 61 2557 46 2558 40 41 59 125 125 792 2556 46 2562 40 2557 41 59 125 777 809 865 2563 40 41 123 2002 2564 61 362 59 744 2565 40 41 46 2566 40 2567 46 2568 40 362 41 41 46 2569 40 1504 41 46 2570 40 2567 46 2568 40 362 41 41 46 2571 40 2564 41 46 2572 40 41 59 125 777 809 865 2573 40 41 123 2002 2574 61 362 59 744 2575 40 41 46 2576 40 2577 46 2578 40 362 41 41 46 2579 40 1504 41 46 2580 40 2577 46 2578 40 362 41 41 46 2581 40 2574 41 46 2582 40 41 59 125 777 809 865 2583 40 41 123 2002 2584 61 362 59 657 2002 2585 61 2586 46 2587 40 41 46 2588 40 41 59 744 2589 40 41 46 2590 40 2591 46 2592 40 362 44 2585 44 2585 41 41 46 2593 40 1504 41 46 2594 40 2591 46 2592 40 362 41 41 46 2595 40 2584 41 46 2596 40 41 59 125 777 809 865 2597 40 2598 2599 41 123 2002 2600 61 362 59 2002 2601 61 2602 46 2603 40 41 46 2604 40 41 59 744 2605 40 41 46 2606 40 2607 46 2608 40 362 44 2601 41 41 46 2609 40 1504 41 46 2610 40 362 41 46 2611 40 40 41 45 62 123 2599 46 2612 40 2599 46 2613 40 41 41 59 2599 46 2614 40 2615 46 587 44 2616 46 587 44 2617 46 587 41 59 125 41 46 2618 40 2600 41 46 2619 40 41 59 125 777 809 2002 2620 40 2002 2621 44 2539 2622 44 2002 2623 41 123 792 2621 340 2624 63 2625 46 2626 40 2627 46 2628 40 2629 46 2630 40 41 44 2621 41 44 2622 44 2623 44 2624 41 58 362 59 125 777 809 570 2631 40 2632 2633 41 123 688 40 33 2633 46 2634 40 41 41 123 744 2635 40 41 46 2636 40 2637 46 2638 40 362 41 41 46 2639 40 41 59 792 2640 59 125 792 2641 59 125 777 809 865 2642 40 2598 2599 41 123 2002 2643 61 362 59 688 40 2644 46 2645 40 2643 41 41 123 2646 46 2647 40 40 41 45 62 744 2648 40 41 46 2649 40 2650 46 2651 40 362 41 41 46 2652 40 2643 41 46 2653 40 362 41 46 2654 40 40 41 45 62 123 2599 46 2655 40 2656 46 587 44 2657 46 587 44 2658 46 587 44 2659 46 587 41 59 125 41 46 2660 40 41 44 1502 44 2661 46 2662 41 59 125 125 777 809 570 2663 40 2632 2633 44 2664 2665 41 123 688 40 33 2001 46 2631 40 2633 41 41 123 792 2666 59 125 688 40 33 2665 46 2667 40 41 41 123 744 2668 40 41 46 2669 40 2670 46 2671 40 362 44 2665 46 2672 40 41 41 41 46 2673 40 41 59 792 2674 59 125 688 40 33 2665 46 2675 40 41 41 123 744 2676 40 41 46 2677 40 2678 46 2679 40 362 41 41 46 2680 40 41 59 792 2681 59 125 792 2682 59 125 777 809 570 2683 40 2664 2665 41 123 688 40 33 2665 46 2684 40 41 41 123 744 2685 40 41 46 2686 40 2687 46 2688 40 362 41 41 46 2689 40 41 59 792 2690 59 125 792 2691 59 125 777 809 570 2692 40 2098 2099 44 2598 2599 44 64 2693 2313 2694 41 123 688 40 2694 340 2695 307 2694 46 2696 40 41 46 2697 40 362 41 41 123 792 2698 59 125 688 40 33 2099 46 2699 40 41 41 123 744 2700 40 41 46 2701 40 2702 46 2703 40 362 41 41 46 2704 40 41 59 792 2705 59 125 688 40 33 2099 46 2706 40 41 41 123 744 2707 40 41 46 2708 40 2709 46 2710 40 362 41 41 46 2711 40 41 59 792 2712 59 125 688 40 2099 46 2713 40 41 46 2714 40 41 323 2695 41 123 744 2715 40 41 46 2716 40 2717 46 2714 40 362 41 41 46 2718 40 2717 46 2714 40 362 41 41 46 2719 40 362 41 46 2720 40 40 41 45 62 123 2599 46 2721 40 2599 46 2722 40 41 41 59 2599 46 2723 40 2724 46 587 44 2725 46 587 44 2726 46 587 41 59 125 41 46 2727 40 41 59 792 2728 59 125 792 2729 59 125 777 809 865 2730 40 2539 2731 44 2539 2622 44 2732 2733 41 123 744 2734 40 41 46 2735 40 2736 46 2737 40 362 44 2733 46 2738 40 2731 41 44 2733 46 2738 40 2622 41 41 41 46 2739 40 41 59 125 777 809 865 2740 40 2019 2031 41 123 2741 46 2742 40 2031 58 58 2740 41 59 125 777 809 865 2743 40 2013 2014 41 123 830 123 744 2744 40 41 46 2745 40 2746 46 2747 40 362 41 41 46 2748 40 41 46 2749 40 2746 46 2747 40 362 41 41 46 2750 40 40 41 45 62 123 2751 46 2752 40 2753 41 59 2754 46 2755 40 2756 46 2757 40 41 44 1503 44 2758 46 2759 41 59 125 41 46 2760 40 2746 46 2747 40 362 41 41 46 2761 40 41 59 125 580 40 2762 2556 41 123 744 2763 40 41 46 2764 40 2765 46 2766 40 362 44 2556 41 41 46 2767 40 41 59 125 125 777 809 865 2768 40 2002 2769 44 2002 2770 41 123 2771 2772 61 744 2773 40 41 59 2772 46 2774 40 2770 41 59 2772 46 2775 40 2776 41 59 2772 46 2777 40 2778 41 59 2772 46 2779 40 1504 44 1504 41 59 2780 2781 61 744 2780 40 2772 41 59 2065 2066 61 744 2065 40 41 59 688 40 2782 340 2769 41 123 2066 46 2783 40 2769 41 59 125 2066 46 2784 40 2781 41 59 2066 46 2785 40 2786 46 2787 41 59 2066 46 2788 40 2789 46 2790 41 59 2066 46 2791 40 41 59 125 777 809 2349 60 2062 62 2792 40 41 123 792 744 2349 60 62 40 41 123 64 2793 777 2002 2794 40 2062 2795 41 123 688 40 2795 46 2796 40 41 41 123 792 2795 46 2797 40 41 43 362 43 2798 46 2799 40 2795 46 2800 40 41 46 2801 40 41 41 43 362 59 125 630 123 2313 2802 61 2795 46 2803 40 41 59 2002 2804 61 2802 340 2805 63 2802 46 2806 40 41 43 362 58 362 59 792 2795 46 2807 40 41 43 362 43 2804 43 2808 46 2809 40 2795 46 2810 40 41 46 2811 40 41 41 43 362 59 125 125 64 2793 777 2062 2812 40 2002 2813 41 123 792 2814 59 125 125 59 125 777 809 2274 60 2275 60 2062 62 44 2277 60 2062 356 2815 40 2816 60 2062 62 2817 44 2818 2819 41 123 792 2820 45 62 744 2277 60 62 40 41 123 64 2821 775 865 2822 40 2062 2823 44 570 2824 41 123 818 46 2822 40 2823 44 2824 41 59 688 40 2823 340 2825 307 33 2824 41 123 570 2826 61 2407 46 2827 40 2823 46 2828 40 41 44 2823 46 2829 40 41 41 59 2830 2623 61 744 2830 40 2817 46 2831 40 41 46 2832 40 2823 41 44 2833 46 2834 41 59 688 40 2826 41 123 2835 2836 61 2819 46 2837 40 2823 46 2838 41 59 2818 46 2839 2840 61 2819 46 2841 40 2836 41 59 2002 2842 61 2843 46 2844 40 2840 46 2845 40 41 41 59 2846 2847 61 2848 40 2840 41 59 2623 46 2849 40 2847 44 2842 41 59 125 2850 40 2623 41 59 125 630 123 2851 40 2825 41 59 125 125 125 59 125 777 809 865 2852 40 2853 2854 44 704 2855 44 704 2856 41 123 2315 60 2316 44 2187 60 2019 356 2857 61 744 2858 60 62 40 41 59 2854 46 2859 40 41 46 2860 40 2861 45 62 123 657 2316 2862 61 2853 46 2863 40 2861 41 59 2857 46 2864 40 2862 44 2865 45 62 744 2061 60 62 40 41 41 59 2857 46 2866 40 2862 41 46 2867 40 2861 41 59 125 41 59 664 40 704 2868 61 2869 46 2870 40 2855 44 2857 46 2871 40 41 41 59 2868 60 2869 46 2870 40 2856 43 1501 44 2857 46 2871 40 41 41 59 2868 349 41 123 2187 60 2019 62 2872 61 2857 46 2873 40 2868 41 59 688 40 2872 340 2874 41 123 2872 46 2875 40 41 46 2876 40 2877 58 58 2878 41 46 2876 40 2031 45 62 2854 46 2859 40 41 46 2879 40 2031 41 41 46 2860 40 2031 45 62 2854 46 2859 40 41 46 2880 40 2031 41 41 59 125 125 125 777 809 865 2881 40 2539 2540 44 2539 2731 44 2539 2882 44 704 2883 44 2884 2885 44 2732 2733 44 2002 2886 44 2040 2887 41 123 2002 2888 59 688 40 2882 340 2889 41 123 2888 61 2890 46 2891 40 362 44 2892 46 2893 40 2886 41 44 2885 46 2894 40 2540 41 44 2885 46 2895 40 2882 41 44 1503 44 2733 46 2894 40 2731 41 44 2896 46 2897 40 2731 44 2883 41 44 2883 47 1504 44 2886 41 59 125 630 123 2888 61 2898 46 2899 40 362 44 2900 46 2901 40 2886 41 44 2885 46 2902 40 2540 41 44 2733 46 2902 40 2731 41 44 2903 46 2904 40 2731 44 2883 41 44 2883 47 1504 44 2886 41 59 125 744 2905 40 41 46 2906 40 2907 46 2908 40 362 44 2886 41 41 46 2909 40 2888 41 46 2910 40 2907 46 2908 40 362 41 41 46 2911 40 2887 41 46 2912 40 2907 46 2908 40 362 41 41 46 2913 40 41 59 125 777 809 865 2881 40 2539 2540 44 2539 2731 44 704 2883 44 2884 2885 44 2732 2733 44 2002 2886 44 2040 2887 41 123 2881 40 2540 44 2731 44 2914 44 2883 44 2885 44 2733 44 2886 44 2887 41 59 125 777 809 865 2915 40 2916 60 63 62 2917 44 704 2918 44 704 2919 44 704 2920 44 704 2921 41 123 704 2922 61 2917 46 2923 40 41 46 2922 40 41 59 704 2924 61 2918 42 2920 43 2919 59 704 2925 61 2918 42 2921 43 2919 59 2926 40 2925 325 2924 44 362 41 59 704 2927 61 2928 46 2929 40 2925 44 2928 46 2930 40 2924 44 2922 42 2918 43 2919 41 41 59 2917 46 2931 40 45 1501 41 59 2917 46 2932 40 2933 41 59 330 330 330 2917 46 2931 40 2927 41 59 2934 46 2935 40 40 41 45 62 123 2917 46 2931 40 2927 41 59 2917 46 2932 40 2936 41 59 125 41 59 125 777 809 2937 60 2816 60 2313 62 44 2316 62 2938 40 2853 2854 44 704 2939 44 2940 60 2941 62 2942 44 2940 60 2313 62 2943 41 123 2939 61 2944 40 2854 44 2939 44 2942 41 59 2816 60 2313 62 2945 61 2946 46 2947 40 2854 44 349 2939 44 2948 46 2949 40 362 41 41 59 2945 46 2950 40 2948 46 2949 40 362 41 41 59 2945 46 2951 40 2952 46 2953 40 2954 46 2955 40 41 41 41 59 2945 46 2956 40 744 2349 60 62 40 41 123 64 2957 777 2002 2958 40 2313 2694 41 123 792 2694 46 2959 40 41 59 125 64 2957 777 2313 2960 40 2002 2961 41 123 792 2962 59 125 125 41 59 2945 46 2963 40 2964 41 59 2945 46 2965 40 2966 45 62 2943 46 2967 40 2945 46 2968 40 41 46 2969 40 41 41 41 59 792 744 2937 60 62 40 2945 44 2939 41 59 125 777 809 704 2970 40 2853 2854 44 704 2939 44 2940 60 2941 62 2942 41 123 2971 60 2972 44 2816 60 2973 46 2974 46 2975 46 2976 62 44 2816 60 2941 356 2977 61 2978 40 2854 44 349 2939 44 2979 46 2980 40 362 41 41 59 2816 60 2973 46 2974 46 2975 46 2976 62 2981 61 2977 46 2982 59 2981 46 2983 40 2979 46 2980 40 362 41 41 59 2981 46 2984 40 744 2349 60 62 40 41 123 64 2985 777 2002 2986 40 2973 46 2974 46 2975 46 2976 2987 41 123 792 2987 46 2988 59 125 64 2985 777 2973 46 2974 46 2975 46 2976 2989 40 2002 2990 41 123 792 2991 59 125 125 41 59 2981 46 2992 40 2993 46 2994 40 2995 46 2996 40 41 41 41 59 2816 60 2941 62 2997 61 2977 46 2998 59 2997 46 2999 40 1503 41 59 2997 46 3000 40 3001 41 59 2997 46 2983 40 2979 46 2980 40 362 41 41 59 2997 46 2984 40 744 2349 60 62 40 41 123 64 3002 777 2002 3003 40 2941 3004 41 123 792 3004 46 3005 43 362 43 3004 46 3006 43 362 59 125 64 3002 777 2941 3007 40 2002 3008 41 123 792 3009 59 125 125 41 59 2981 46 3010 40 3011 45 62 123 2973 46 2974 46 2975 46 2976 3012 61 2981 46 3013 40 41 46 3014 40 41 59 688 40 3012 340 3015 41 123 2997 46 3000 40 3016 41 59 2997 46 2992 40 2993 46 2994 40 2995 46 3017 40 3012 41 41 41 59 125 125 41 59 2997 46 3010 40 3011 45 62 2942 46 3018 40 2997 46 3019 40 41 46 3020 40 41 41 41 59 792 2939 59 125 64 3021 777 809 60 2181 62 2277 60 2181 62 3022 40 2002 2769 44 2816 60 2181 62 3023 41 123 792 3022 40 2769 44 3023 44 3024 41 59 125 64 3021 777 809 60 2181 62 2277 60 2181 62 3022 40 2002 2769 44 2816 60 2181 62 3023 44 3025 3026 41 123 792 744 2277 60 62 40 41 123 64 3027 775 865 3028 40 2181 3029 44 570 3030 41 123 818 46 3028 40 3029 44 3030 41 59 330 688 40 3026 41 823 46 3031 40 3029 340 3032 309 33 3030 41 59 688 40 3030 309 3029 323 3032 41 123 3033 40 2769 41 59 125 630 123 3034 40 3023 46 3035 40 41 46 3036 40 3029 41 41 59 125 125 125 59 125 777 809 865 3037 40 2002 3038 44 2013 2014 41 123 688 40 3038 340 3039 41 2001 46 2475 40 2014 46 3040 40 41 46 3041 43 3038 44 3042 41 59 125 777 809 2002 3043 40 3044 3045 44 2539 3046 44 3047 3048 44 2884 2885 41 123 3049 3050 61 3048 46 3051 40 362 41 59 688 40 3050 323 3052 41 123 792 3053 46 3054 40 362 41 59 125 726 3055 61 3056 46 3057 40 3056 46 3058 40 3050 46 3059 40 41 44 3060 46 3061 41 41 59 3044 3062 61 3044 46 3063 40 362 44 3055 41 59 2002 3064 61 2885 46 3065 40 3046 41 59 3066 3067 61 3066 46 3068 40 3064 44 362 41 59 2539 3069 61 3045 46 3070 40 3067 41 59 3066 3071 61 3062 46 3072 40 3069 41 59 792 3073 46 3074 40 3071 41 59 125 777 809 3075 3076 40 2818 46 3077 3078 41 123 688 40 3078 46 3079 40 2818 46 3077 46 3080 41 41 123 792 3075 46 3081 59 125 792 40 3078 46 3079 40 2818 46 3077 46 3082 41 309 3078 46 3079 40 2818 46 3077 46 3083 41 41 63 3075 46 3084 58 3075 46 3085 59 125 777 809 2002 3086 40 64 2693 3087 3088 41 123 688 40 3088 323 3089 41 123 792 362 59 125 2002 3090 61 362 43 3088 46 3091 40 41 59 819 40 3088 41 123 579 3092 58 792 362 59 579 3093 58 792 3094 46 3095 40 3090 44 3088 46 3096 40 41 41 59 579 3097 58 792 3094 46 3095 40 3090 41 59 579 3098 58 792 3094 46 3095 40 3090 44 3088 46 3096 40 41 41 59 579 3099 58 579 3100 58 579 3101 58 792 3094 46 3095 40 3090 41 59 579 3102 58 792 3094 46 3095 40 3090 44 3088 46 3103 40 41 44 3088 46 3104 40 41 44 3088 46 3096 40 41 41 59 579 3105 58 579 3106 58 579 3107 58 792 3094 46 3095 40 3090 41 59 613 58 792 3088 46 3091 40 41 59 125 125 777 809 3108 3109 40 41 123 3108 3110 61 744 3108 40 41 59 3110 46 3111 40 3108 46 3112 46 3113 41 59 3110 46 3114 40 3108 46 3112 46 3113 41 59 3110 46 3115 40 3116 41 59 3110 46 3117 40 3116 41 59 3118 46 3119 40 3110 44 1500 41 59 3118 46 3120 40 3110 44 1500 41 59 3118 46 3121 40 3110 44 1500 41 59 3118 46 3122 40 3110 44 1500 41 59 792 3110 59 125 777 809 865 3123 40 2853 2854 41 123 3124 3125 61 744 3124 40 41 59 3125 46 3126 40 3127 46 3128 41 59 3125 46 3129 40 3130 46 3131 41 59 3125 46 3132 40 1504 41 59 3124 3133 61 744 3124 40 41 59 3133 46 3129 40 3130 46 3134 41 59 2854 46 3135 40 41 46 3136 40 3125 44 3133 41 59 125 125 ,"{'AvgLine': 17, 'CountLine': 1092, 'CountStmt': 553, 'MaxNesting': 4, 'AvgLineCode': 16, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 453, 'MaxEssential': 9, 'SumEssential': 99, 'AvgCyclomatic': 2, 'CountLineCode': 934, 'CountStmtDecl': 191, 'MaxCyclomatic': 13, 'SumCyclomatic': 144, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 146, 'CountSemicolon': 408, 'CountDeclMethod': 57, 'CountLineCodeExe': 681, 'CountLineComment': 14, 'CountClassCoupled': 111, 'CountClassDerived': 0, 'CountLineCodeDecl': 237, 'CountDeclMethodAll': 57, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.01', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 13, 'SumCyclomaticStrict': 148, 'CountDeclClassMethod': 57, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 54, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 131, 'CountDeclClassVariable': 10, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 111, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 92}"
2970,Java,"public class TradeManager implements PersistedDataHost, DecryptedDirectMessageListener {
    private static final Logger log = LoggerFactory.getLogger(TradeManager.class);

    private final User user;
    @Getter
    private final KeyRing keyRing;
    private final BtcWalletService btcWalletService;
    private final BsqWalletService bsqWalletService;
    private final OpenOfferManager openOfferManager;
    private final ClosedTradableManager closedTradableManager;
    private final BsqSwapTradeManager bsqSwapTradeManager;
    private final FailedTradesManager failedTradesManager;
    private final P2PService p2PService;
    private final PriceFeedService priceFeedService;
    private final TradeStatisticsManager tradeStatisticsManager;
    private final TradeUtil tradeUtil;
    @Getter
    private final ArbitratorManager arbitratorManager;
    private final MediatorManager mediatorManager;
    private final Provider provider;
    private final ClockWatcher clockWatcher;

    private final Map<String, TradeProtocol> tradeProtocolByTradeId = new HashMap<>();
    private final PersistenceManager<TradableList<Trade>> persistenceManager;
    private final TradableList<Trade> tradableList = new TradableList<>();
    @Getter
    private final BooleanProperty persistedTradesInitialized = new SimpleBooleanProperty();
    @Setter
    @Nullable
    private ErrorMessageHandler takeOfferRequestErrorMessageHandler;
    @Getter
    private final LongProperty numPendingTrades = new SimpleLongProperty();
    private final ReferralIdService referralIdService;
    private final DumpDelayedPayoutTx dumpDelayedPayoutTx;
    @Getter
    private final boolean allowFaultyDelayedTxs;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Inject
    public TradeManager(User user,
                        KeyRing keyRing,
                        BtcWalletService btcWalletService,
                        BsqWalletService bsqWalletService,
                        OpenOfferManager openOfferManager,
                        ClosedTradableManager closedTradableManager,
                        BsqSwapTradeManager bsqSwapTradeManager,
                        FailedTradesManager failedTradesManager,
                        P2PService p2PService,
                        PriceFeedService priceFeedService,
                        TradeStatisticsManager tradeStatisticsManager,
                        TradeUtil tradeUtil,
                        ArbitratorManager arbitratorManager,
                        MediatorManager mediatorManager,
                        Provider provider,
                        ClockWatcher clockWatcher,
                        PersistenceManager<TradableList<Trade>> persistenceManager,
                        ReferralIdService referralIdService,
                        DumpDelayedPayoutTx dumpDelayedPayoutTx,
                        @Named(Config.ALLOW_FAULTY_DELAYED_TXS) boolean allowFaultyDelayedTxs) {
        this.user = user;
        this.keyRing = keyRing;
        this.btcWalletService = btcWalletService;
        this.bsqWalletService = bsqWalletService;
        this.openOfferManager = openOfferManager;
        this.closedTradableManager = closedTradableManager;
        this.bsqSwapTradeManager = bsqSwapTradeManager;
        this.failedTradesManager = failedTradesManager;
        this.p2PService = p2PService;
        this.priceFeedService = priceFeedService;
        this.tradeStatisticsManager = tradeStatisticsManager;
        this.tradeUtil = tradeUtil;
        this.arbitratorManager = arbitratorManager;
        this.mediatorManager = mediatorManager;
        this.provider = provider;
        this.clockWatcher = clockWatcher;
        this.referralIdService = referralIdService;
        this.dumpDelayedPayoutTx = dumpDelayedPayoutTx;
        this.allowFaultyDelayedTxs = allowFaultyDelayedTxs;
        this.persistenceManager = persistenceManager;

        this.persistenceManager.initialize(tradableList, ""PendingTrades"", PersistenceManager.Source.PRIVATE);

        p2PService.addDecryptedDirectMessageListener(this);

        failedTradesManager.setUnFailTradeCallback(this::unFailTrade);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // PersistedDataHost
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void readPersisted(Runnable completeHandler) {
        persistenceManager.readPersisted(persisted -> {
                    tradableList.setAll(persisted.getList());
                    tradableList.stream()
                            .filter(trade -> trade.getOffer() != null)
                            .forEach(trade -> trade.getOffer().setPriceFeedService(priceFeedService));
                    dumpDelayedPayoutTx.maybeDumpDelayedPayoutTxs(tradableList, ""delayed_payout_txs_pending"");
                    completeHandler.run();
                },
                completeHandler);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // DecryptedDirectMessageListener
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void onDirectMessage(DecryptedMessageWithPubKey message, NodeAddress peer) {
        NetworkEnvelope networkEnvelope = message.getNetworkEnvelope();
        if (networkEnvelope instanceof InputsForDepositTxRequest) {
            handleTakeOfferRequest(peer, (InputsForDepositTxRequest) networkEnvelope);
        } else if (networkEnvelope instanceof BsqSwapRequest) {
            handleBsqSwapRequest(peer, (BsqSwapRequest) networkEnvelope);
        }
    }

    // The maker received a TakeOfferRequest
    private void handleTakeOfferRequest(NodeAddress peer, InputsForDepositTxRequest inputsForDepositTxRequest) {
        log.info(""Received inputsForDepositTxRequest from {} with tradeId {} and uid {}"",
                peer, inputsForDepositTxRequest.getTradeId(), inputsForDepositTxRequest.getUid());

        try {
            Validator.nonEmptyStringOf(inputsForDepositTxRequest.getTradeId());
        } catch (Throwable t) {
            log.warn(""Invalid inputsForDepositTxRequest "" + inputsForDepositTxRequest.toString());
            return;
        }

        Optional<OpenOffer> openOfferOptional = openOfferManager.getOpenOfferById(inputsForDepositTxRequest.getTradeId());
        if (!openOfferOptional.isPresent()) {
            return;
        }

        OpenOffer openOffer = openOfferOptional.get();
        if (openOffer.getState() != OpenOffer.State.AVAILABLE) {
            return;
        }

        Offer offer = openOffer.getOffer();
        openOfferManager.reserveOpenOffer(openOffer);
        Trade trade;
        if (offer.isBuyOffer()) {
            trade = new BuyerAsMakerTrade(offer,
                    Coin.valueOf(inputsForDepositTxRequest.getTxFee()),
                    Coin.valueOf(inputsForDepositTxRequest.getTakerFee()),
                    inputsForDepositTxRequest.isCurrencyForTakerFeeBtc(),
                    openOffer.getArbitratorNodeAddress(),
                    openOffer.getMediatorNodeAddress(),
                    openOffer.getRefundAgentNodeAddress(),
                    btcWalletService,
                    getNewProcessModel(offer),
                    UUID.randomUUID().toString());
        } else {
            trade = new SellerAsMakerTrade(offer,
                    Coin.valueOf(inputsForDepositTxRequest.getTxFee()),
                    Coin.valueOf(inputsForDepositTxRequest.getTakerFee()),
                    inputsForDepositTxRequest.isCurrencyForTakerFeeBtc(),
                    openOffer.getArbitratorNodeAddress(),
                    openOffer.getMediatorNodeAddress(),
                    openOffer.getRefundAgentNodeAddress(),
                    btcWalletService,
                    getNewProcessModel(offer),
                    UUID.randomUUID().toString());
        }

        TradeProtocol tradeProtocol = createTradeProtocol(trade);

        initTradeAndProtocol(trade, tradeProtocol);

        ((MakerProtocol) tradeProtocol).handleTakeOfferRequest(inputsForDepositTxRequest, peer, errorMessage -> {
            if (takeOfferRequestErrorMessageHandler != null)
                takeOfferRequestErrorMessageHandler.handleErrorMessage(errorMessage);
        });

        requestPersistence();
    }


    private void handleBsqSwapRequest(NodeAddress peer, BsqSwapRequest request) {
        if (!BsqSwapTakeOfferRequestVerification.isValid(openOfferManager, provider.getFeeService(), keyRing, peer, request)) {
            return;
        }

        Optional<OpenOffer> openOfferOptional = openOfferManager.getOpenOfferById(request.getTradeId());
        checkArgument(openOfferOptional.isPresent());
        OpenOffer openOffer = openOfferOptional.get();
        Offer offer = openOffer.getOffer();
        openOfferManager.reserveOpenOffer(openOffer);

        BsqSwapTrade bsqSwapTrade;
        Coin amount = Coin.valueOf(request.getTradeAmount());
        BsqSwapProtocolModel bsqSwapProtocolModel = new BsqSwapProtocolModel(keyRing.getPubKeyRing());
        if (request instanceof BuyersBsqSwapRequest) {
            checkArgument(!offer.isBuyOffer(),
                    ""offer is expected to be a sell offer at handleBsqSwapRequest"");
            bsqSwapTrade = new BsqSwapSellerAsMakerTrade(
                    offer,
                    amount,
                    request.getTradeDate(),
                    request.getSenderNodeAddress(),
                    request.getTxFeePerVbyte(),
                    request.getMakerFee(),
                    request.getTakerFee(),
                    bsqSwapProtocolModel);
        } else {
            checkArgument(request instanceof SellersBsqSwapRequest);
            checkArgument(offer.isBuyOffer(),
                    ""offer is expected to be a buy offer at handleBsqSwapRequest"");
            bsqSwapTrade = new BsqSwapBuyerAsMakerTrade(
                    offer,
                    amount,
                    request.getTradeDate(),
                    request.getSenderNodeAddress(),
                    request.getTxFeePerVbyte(),
                    request.getMakerFee(),
                    request.getTakerFee(),
                    bsqSwapProtocolModel);
        }

        TradeProtocol tradeProtocol = createTradeProtocol(bsqSwapTrade);
        initTradeAndProtocol(bsqSwapTrade, tradeProtocol);

        ((BsqSwapMakerProtocol) tradeProtocol).handleTakeOfferRequest(request,
                peer,
                errorMessage -> {
                    if (takeOfferRequestErrorMessageHandler != null)
                        takeOfferRequestErrorMessageHandler.handleErrorMessage(errorMessage);
                });

        requestPersistence();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void onAllServicesInitialized() {
        if (p2PService.isBootstrapped()) {
            initPersistedTrades();
        } else {
            p2PService.addP2PServiceListener(new BootstrapListener() {
                @Override
                public void onUpdatedDataReceived() {
                    initPersistedTrades();
                }
            });
        }

        getObservableList().addListener((ListChangeListener<Trade>) change -> onTradesChanged());
        onTradesChanged();

        btcWalletService.getAddressEntriesForAvailableBalanceStream()
                .filter(addressEntry -> addressEntry.getOfferId() != null)
                .forEach(addressEntry -> {
                    log.warn(""Swapping pending OFFER_FUNDING entries at startup. offerId={}"", addressEntry.getOfferId());
                    btcWalletService.swapTradeEntryToAvailableEntry(addressEntry.getOfferId(), AddressEntry.Context.OFFER_FUNDING);
                });
    }

    public TradeProtocol getTradeProtocol(TradeModel trade) {
        String uid = trade.getUid();
        if (tradeProtocolByTradeId.containsKey(uid)) {
            return tradeProtocolByTradeId.get(uid);
        } else {
            TradeProtocol tradeProtocol = TradeProtocolFactory.getNewTradeProtocol(trade);
            TradeProtocol prev = tradeProtocolByTradeId.put(uid, tradeProtocol);
            if (prev != null) {
                log.error(""We had already an entry with uid {}"", trade.getUid());
            }

            return tradeProtocol;
        }
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Init pending trade
    ///////////////////////////////////////////////////////////////////////////////////////////

    private void initPersistedTrades() {
        Set<Trade> toRemove = new HashSet<>();
        tradableList.forEach(tradeModel -> {
            boolean valid = initPersistedTrade(tradeModel);
            if (!valid) {
                toRemove.add(tradeModel);
            }
        });
        toRemove.forEach(tradableList::remove);
        if (!toRemove.isEmpty()) {
            requestPersistence();
        }

        persistedTradesInitialized.set(true);

        // We do not include failed trades as they should not be counted anyway in the trade statistics
        Set<TradeModel> allTrades = new HashSet<>(closedTradableManager.getClosedTrades());
        allTrades.addAll(bsqSwapTradeManager.getBsqSwapTrades());
        allTrades.addAll(tradableList.getList());
        String referralId = referralIdService.getOptionalReferralId().orElse(null);
        boolean isTorNetworkNode = p2PService.getNetworkNode() instanceof TorNetworkNode;
        tradeStatisticsManager.maybeRepublishTradeStatistics(allTrades, referralId, isTorNetworkNode);
    }

    private boolean initPersistedTrade(TradeModel tradeModel) {
        if (tradeModel instanceof BsqSwapTrade && !tradeModel.isCompleted()) {
            // We do not keep pending or failed BsqSwap trades in our list and
            // do not process them at restart.
            // We remove the trade from the list after iterations in initPersistedTrades
            return false;
        }
        initTradeAndProtocol(tradeModel, getTradeProtocol(tradeModel));

        if (tradeModel instanceof Trade) {
            ((Trade) tradeModel).updateDepositTxFromWallet();
        }
        requestPersistence();
        return true;
    }

    private void initTradeAndProtocol(TradeModel tradeModel, TradeProtocol tradeProtocol) {
        tradeProtocol.initialize(provider, this, tradeModel.getOffer());
        tradeModel.initialize(provider);
        requestPersistence();
    }

    public void requestPersistence() {
        persistenceManager.requestPersistence();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Take offer
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void checkOfferAvailability(Offer offer,
                                       boolean isTakerApiUser,
                                       ResultHandler resultHandler,
                                       ErrorMessageHandler errorMessageHandler) {
        if (btcWalletService.isUnconfirmedTransactionsLimitHit() ||
                bsqWalletService.isUnconfirmedTransactionsLimitHit()) {
            String errorMessage = Res.get(""shared.unconfirmedTransactionsLimitReached"");
            errorMessageHandler.handleErrorMessage(errorMessage);
            log.warn(errorMessage);
            return;
        }

        offer.checkOfferAvailability(getOfferAvailabilityModel(offer, isTakerApiUser), resultHandler, errorMessageHandler);
    }

    // First we check if offer is still available then we create the trade with the protocol
    public void onTakeOffer(Coin amount,
                            Coin txFee,
                            Coin takerFee,
                            boolean isCurrencyForTakerFeeBtc,
                            long tradePrice,
                            Coin fundsNeededForTrade,
                            Offer offer,
                            String paymentAccountId,
                            boolean useSavingsWallet,
                            boolean isTakerApiUser,
                            TradeResultHandler<Trade> tradeResultHandler,
                            ErrorMessageHandler errorMessageHandler) {

        checkArgument(!wasOfferAlreadyUsedInTrade(offer.getId()));

        OfferAvailabilityModel model = getOfferAvailabilityModel(offer, isTakerApiUser);
        offer.checkOfferAvailability(model,
                () -> {
                    if (offer.getState() == Offer.State.AVAILABLE) {
                        Trade trade;
                        if (offer.isBuyOffer()) {
                            trade = new SellerAsTakerTrade(offer,
                                    amount,
                                    txFee,
                                    takerFee,
                                    isCurrencyForTakerFeeBtc,
                                    tradePrice,
                                    model.getPeerNodeAddress(),
                                    model.getSelectedArbitrator(),
                                    model.getSelectedMediator(),
                                    model.getSelectedRefundAgent(),
                                    btcWalletService,
                                    getNewProcessModel(offer),
                                    UUID.randomUUID().toString());
                        } else {
                            trade = new BuyerAsTakerTrade(offer,
                                    amount,
                                    txFee,
                                    takerFee,
                                    isCurrencyForTakerFeeBtc,
                                    tradePrice,
                                    model.getPeerNodeAddress(),
                                    model.getSelectedArbitrator(),
                                    model.getSelectedMediator(),
                                    model.getSelectedRefundAgent(),
                                    btcWalletService,
                                    getNewProcessModel(offer),
                                    UUID.randomUUID().toString());
                        }
                        trade.getProcessModel().setUseSavingsWallet(useSavingsWallet);
                        trade.getProcessModel().setFundsNeededForTradeAsLong(fundsNeededForTrade.value);
                        trade.setTakerPaymentAccountId(paymentAccountId);

                        TradeProtocol tradeProtocol = createTradeProtocol(trade);

                        initTradeAndProtocol(trade, tradeProtocol);

                        ((TakerProtocol) tradeProtocol).onTakeOffer();
                        tradeResultHandler.handleResult(trade);
                        requestPersistence();
                    }
                },
                errorMessageHandler);

        requestPersistence();
    }

    public void onTakeBsqSwapOffer(Offer offer,
                                   Coin amount,
                                   long txFeePerVbyte,
                                   long makerFee,
                                   long takerFee,
                                   boolean isTakerApiUser,
                                   TradeResultHandler<BsqSwapTrade> tradeResultHandler,
                                   ErrorMessageHandler errorMessageHandler) {

        checkArgument(!wasOfferAlreadyUsedInTrade(offer.getId()));

        OfferAvailabilityModel model = getOfferAvailabilityModel(offer, isTakerApiUser);
        offer.checkOfferAvailability(model,
                () -> {
                    if (offer.getState() == Offer.State.AVAILABLE) {
                        BsqSwapTrade bsqSwapTrade;
                        NodeAddress peerNodeAddress = model.getPeerNodeAddress();
                        BsqSwapProtocolModel bsqSwapProtocolModel = new BsqSwapProtocolModel(keyRing.getPubKeyRing());
                        if (offer.isBuyOffer()) {
                            bsqSwapTrade = new BsqSwapSellerAsTakerTrade(
                                    offer,
                                    amount,
                                    peerNodeAddress,
                                    txFeePerVbyte,
                                    makerFee,
                                    takerFee,
                                    bsqSwapProtocolModel);
                        } else {
                            bsqSwapTrade = new BsqSwapBuyerAsTakerTrade(
                                    offer,
                                    amount,
                                    peerNodeAddress,
                                    txFeePerVbyte,
                                    makerFee,
                                    takerFee,
                                    bsqSwapProtocolModel);
                        }

                        TradeProtocol tradeProtocol = createTradeProtocol(bsqSwapTrade);

                        initTradeAndProtocol(bsqSwapTrade, tradeProtocol);

                        ((TakerProtocol) tradeProtocol).onTakeOffer();
                        tradeResultHandler.handleResult(bsqSwapTrade);
                        requestPersistence();
                    }
                },
                errorMessageHandler);

        requestPersistence();
    }

    private TradeProtocol createTradeProtocol(TradeModel tradeModel) {
        TradeProtocol tradeProtocol = TradeProtocolFactory.getNewTradeProtocol(tradeModel);
        TradeProtocol prev = tradeProtocolByTradeId.put(tradeModel.getUid(), tradeProtocol);
        if (prev != null) {
            log.error(""We had already an entry with uid {}"", tradeModel.getUid());
        }
        if (tradeModel instanceof Trade) {
            tradableList.add((Trade) tradeModel);
        }

        // For BsqTrades we only store the trade at completion

        return tradeProtocol;
    }

    private ProcessModel getNewProcessModel(Offer offer) {
        return new ProcessModel(checkNotNull(offer).getId(),
                provider.getUser().getAccountId(),
                provider.getKeyRing().getPubKeyRing());
    }

    private OfferAvailabilityModel getOfferAvailabilityModel(Offer offer, boolean isTakerApiUser) {
        return new OfferAvailabilityModel(
                offer,
                keyRing.getPubKeyRing(),
                p2PService,
                user,
                mediatorManager,
                tradeStatisticsManager,
                isTakerApiUser);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Complete trade
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void onWithdrawRequest(String toAddress,
                                  Coin amount,
                                  Coin fee,
                                  KeyParameter aesKey,
                                  Trade trade,
                                  @Nullable String memo,
                                  ResultHandler resultHandler,
                                  FaultHandler faultHandler) {
        String fromAddress = btcWalletService.getOrCreateAddressEntry(trade.getId(),
                AddressEntry.Context.TRADE_PAYOUT).getAddressString();
        FutureCallback<Transaction> callback = new FutureCallback<>() {
            @Override
            public void onSuccess(@javax.annotation.Nullable Transaction transaction) {
                if (transaction != null) {
                    log.debug(""onWithdraw onSuccess tx ID:"" + transaction.getTxId().toString());
                    onTradeCompleted(trade);
                    trade.setState(Trade.State.WITHDRAW_COMPLETED);
                    getTradeProtocol(trade).onWithdrawCompleted();
                    requestPersistence();
                    resultHandler.handleResult();
                }
            }

            @Override
            public void onFailure(@NotNull Throwable t) {
                t.printStackTrace();
                log.error(t.getMessage());
                faultHandler.handleFault(""An exception occurred at requestWithdraw (onFailure)."", t);
            }
        };
        try {
            btcWalletService.sendFunds(fromAddress, toAddress, amount, fee, aesKey,
                    AddressEntry.Context.TRADE_PAYOUT, memo, callback);
        } catch (AddressFormatException | InsufficientMoneyException | AddressEntryException e) {
            e.printStackTrace();
            log.error(e.getMessage());
            faultHandler.handleFault(""An exception occurred at requestWithdraw."", e);
        }
    }

    // If trade was completed (closed without fault but might be closed by a dispute) we move it to the closed trades
    public void onTradeCompleted(Trade trade) {
        removeTrade(trade);
        closedTradableManager.add(trade);

        // TODO The address entry should have been removed already. Check and if its the case remove that.
        btcWalletService.resetAddressEntriesForPendingTrade(trade.getId());
        requestPersistence();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Dispute
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void closeDisputedTrade(String tradeId, Trade.DisputeState disputeState) {
        getTradeById(tradeId).ifPresent(trade -> {
            trade.setDisputeState(disputeState);
            onTradeCompleted(trade);
            btcWalletService.swapTradeEntryToAvailableEntry(trade.getId(), AddressEntry.Context.TRADE_PAYOUT);
            requestPersistence();
        });
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Trade period state
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void applyTradePeriodState() {
        updateTradePeriodState();
        clockWatcher.addListener(new ClockWatcher.Listener() {
            @Override
            public void onSecondTick() {
            }

            @Override
            public void onMinuteTick() {
                updateTradePeriodState();
            }
        });
    }

    private void updateTradePeriodState() {
        getObservableList().forEach(trade -> {
            if (!trade.isPayoutPublished()) {
                Date maxTradePeriodDate = trade.getMaxTradePeriodDate();
                Date halfTradePeriodDate = trade.getHalfTradePeriodDate();
                if (maxTradePeriodDate != null && halfTradePeriodDate != null) {
                    Date now = new Date();
                    if (now.after(maxTradePeriodDate)) {
                        trade.setTradePeriodState(Trade.TradePeriodState.TRADE_PERIOD_OVER);
                        requestPersistence();
                    } else if (now.after(halfTradePeriodDate)) {
                        trade.setTradePeriodState(Trade.TradePeriodState.SECOND_HALF);
                        requestPersistence();
                    }
                }
            }
        });
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Failed trade handling
    ///////////////////////////////////////////////////////////////////////////////////////////

    // If trade is in already in critical state (if taker role: taker fee; both roles: after deposit published)
    // we move the trade to failedTradesManager
    public void onMoveInvalidTradeToFailedTrades(Trade trade) {
        removeTrade(trade);
        failedTradesManager.add(trade);
    }

    public void addFailedTradeToPendingTrades(Trade trade) {
        if (!trade.isInitialized()) {
            initPersistedTrade(trade);
        }
        addTrade(trade);
    }

    public Stream<Trade> getTradesStreamWithFundsLockedIn() {
        return getObservableList().stream().filter(Trade::isFundsLockedIn);
    }

    public Set<String> getSetOfFailedOrClosedTradeIdsFromLockedInFunds() throws TradeTxException {
        AtomicReference<TradeTxException> tradeTxException = new AtomicReference<>();
        Set<String> tradesIdSet = getTradesStreamWithFundsLockedIn()
                .filter(Trade::hasFailed)
                .map(Trade::getId)
                .collect(Collectors.toSet());
        tradesIdSet.addAll(failedTradesManager.getTradesStreamWithFundsLockedIn()
                .filter(trade -> trade.getDepositTx() != null)
                .map(trade -> {
                    log.warn(""We found a failed trade with locked up funds. "" +
                            ""That should never happen. trade ID="" + trade.getId());
                    return trade.getId();
                })
                .collect(Collectors.toSet()));
        tradesIdSet.addAll(closedTradableManager.getTradesStreamWithFundsLockedIn()
                .map(trade -> {
                    Transaction depositTx = trade.getDepositTx();
                    if (depositTx != null) {
                        TransactionConfidence confidence = btcWalletService.getConfidenceForTxId(depositTx.getTxId().toString());
                        if (confidence != null && confidence.getConfidenceType() != TransactionConfidence.ConfidenceType.BUILDING) {
                            tradeTxException.set(new TradeTxException(Res.get(""error.closedTradeWithUnconfirmedDepositTx"", trade.getShortId())));
                        } else {
                            log.warn(""We found a closed trade with locked up funds. "" +
                                    ""That should never happen. trade ID="" + trade.getId());
                        }
                    } else {
                        tradeTxException.set(new TradeTxException(Res.get(""error.closedTradeWithNoDepositTx"", trade.getShortId())));
                    }
                    return trade.getId();
                })
                .collect(Collectors.toSet()));

        if (tradeTxException.get() != null)
            throw tradeTxException.get();

        return tradesIdSet;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // BsqSwapTradeManager delegates
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void onBsqSwapTradeCompleted(BsqSwapTrade bsqSwapTrade) {
        bsqSwapTradeManager.onTradeCompleted(bsqSwapTrade);
    }

    public Optional<BsqSwapTrade> findBsqSwapTradeById(String tradeId) {
        return bsqSwapTradeManager.findBsqSwapTradeById(tradeId);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Getters, Utils
    ///////////////////////////////////////////////////////////////////////////////////////////

    public ObservableList<Trade> getObservableList() {
        return tradableList.getObservableList();
    }

    public BooleanProperty persistedTradesInitializedProperty() {
        return persistedTradesInitialized;
    }

    public boolean isMyOffer(Offer offer) {
        return offer.isMyOffer(keyRing);
    }

    public boolean wasOfferAlreadyUsedInTrade(String offerId) {
        Stream<Tradable> combinedStream = Stream.concat(getPendingAndBsqSwapTrades(),
                failedTradesManager.getObservableList().stream());

        combinedStream = Stream.concat(combinedStream,
                closedTradableManager.getObservableList().stream());

        return combinedStream.anyMatch(t -> t.getOffer().getId().equals(offerId));
    }

    public boolean isBuyer(Offer offer) {
        // If I am the maker, we use the OfferDirection, otherwise the mirrored direction
        if (isMyOffer(offer))
            return offer.isBuyOffer();
        else
            return offer.getDirection() == OfferDirection.SELL;
    }

    public Optional<TradeModel> getTradeModelById(String tradeId) {
        return getPendingAndBsqSwapTrades()
                .filter(tradeModel -> tradeModel.getId().equals(tradeId))
                .findFirst();
    }

    public Optional<Trade> getTradeById(String tradeId) {
        return getTradeModelById(tradeId)
                .filter(tradeModel -> tradeModel instanceof Trade)
                .map(tradeModel -> (Trade) tradeModel);
    }

    private void removeTrade(Trade trade) {
        if (tradableList.remove(trade)) {
            requestPersistence();
        }
    }

    private void addTrade(Trade trade) {
        if (tradableList.add(trade)) {
            requestPersistence();
        }
    }

    private Stream<TradeModel> getPendingAndBsqSwapTrades() {
        return Stream.concat(tradableList.stream(),
                bsqSwapTradeManager.getObservableList().stream());
    }

    // TODO Remove once tradableList is refactored to a final field
    //  (part of the persistence refactor PR)
    private void onTradesChanged() {
        this.numPendingTrades.set(getObservableList().size());
    }

    // If trade still has funds locked up it might come back from failed trades
    // Aborts unfailing if the address entries needed are not available
    private boolean unFailTrade(Trade trade) {
        if (!recoverAddresses(trade)) {
            log.warn(""Failed to recover address during unFail trade"");
            return false;
        }

        initPersistedTrade(trade);

        if (!tradableList.contains(trade)) {
            tradableList.add(trade);
        }
        return true;
    }

    // The trade is added to pending trades if the associated address entries are AVAILABLE and
    // the relevant entries are changed, otherwise it's not added and no address entries are changed
    private boolean recoverAddresses(Trade trade) {
        // Find addresses associated with this trade.
        var entries = tradeUtil.getAvailableAddresses(trade);
        if (entries == null)
            return false;

        btcWalletService.recoverAddressEntry(trade.getId(), entries.first,
                AddressEntry.Context.MULTI_SIG);
        btcWalletService.recoverAddressEntry(trade.getId(), entries.second,
                AddressEntry.Context.TRADE_PAYOUT);
        return true;
    }
}",1,777 587 2000 693 2001 44 2002 123 773 809 657 2003 2004 61 2005 46 2006 40 2000 46 587 41 59 773 657 2007 2008 59 64 2009 773 657 2010 2011 59 773 657 2012 2013 59 773 657 2014 2015 59 773 657 2016 2017 59 773 657 2018 2019 59 773 657 2020 2021 59 773 657 2022 2023 59 773 657 2024 2025 59 773 657 2026 2027 59 773 657 2028 2029 59 773 657 2030 2031 59 64 2009 773 657 2032 2033 59 773 657 2034 2035 59 773 657 2036 2037 59 773 657 2038 2039 59 773 657 2040 60 2041 44 2042 62 2043 61 744 2044 60 62 40 41 59 773 657 2045 60 2046 60 2047 356 2048 59 773 657 2046 60 2047 62 2049 61 744 2046 60 62 40 41 59 64 2009 773 657 2050 2051 61 744 2052 40 41 59 64 2053 64 2054 773 2055 2056 59 64 2009 773 657 2057 2058 61 744 2059 40 41 59 773 657 2060 2061 59 773 657 2062 2063 59 64 2009 773 657 570 2064 59 331 330 331 64 2065 777 2000 40 2007 2008 44 2010 2011 44 2012 2013 44 2014 2015 44 2016 2017 44 2018 2019 44 2020 2021 44 2022 2023 44 2024 2025 44 2026 2027 44 2028 2029 44 2030 2031 44 2032 2033 44 2034 2035 44 2036 2037 44 2038 2039 44 2045 60 2046 60 2047 356 2048 44 2060 2061 44 2062 2063 44 64 2066 40 2067 46 2068 41 570 2064 41 123 823 46 2008 61 2008 59 823 46 2011 61 2011 59 823 46 2013 61 2013 59 823 46 2015 61 2015 59 823 46 2017 61 2017 59 823 46 2019 61 2019 59 823 46 2021 61 2021 59 823 46 2023 61 2023 59 823 46 2025 61 2025 59 823 46 2027 61 2027 59 823 46 2029 61 2029 59 823 46 2031 61 2031 59 823 46 2033 61 2033 59 823 46 2035 61 2035 59 823 46 2037 61 2037 59 823 46 2039 61 2039 59 823 46 2061 61 2061 59 823 46 2063 61 2063 59 823 46 2064 61 2064 59 823 46 2048 61 2048 59 823 46 2048 46 2069 40 2049 44 362 44 2045 46 2070 46 2071 41 59 2025 46 2072 40 823 41 59 2023 46 2073 40 823 58 58 2074 41 59 125 331 330 331 64 2075 777 865 2076 40 2077 2078 41 123 2048 46 2076 40 2079 45 62 123 2049 46 2080 40 2079 46 2081 40 41 41 59 2049 46 2082 40 41 46 2083 40 2084 45 62 2084 46 2085 40 41 340 2086 41 46 2087 40 2084 45 62 2084 46 2085 40 41 46 2088 40 2027 41 41 59 2063 46 2089 40 2049 44 362 41 59 2078 46 2090 40 41 59 125 44 2078 41 59 125 331 330 331 64 2075 777 865 2091 40 2092 2093 44 2094 2095 41 123 2096 2097 61 2093 46 2098 40 41 59 688 40 2097 702 2099 41 123 2100 40 2095 44 40 2099 41 2097 41 59 125 630 688 40 2097 702 2101 41 123 2102 40 2095 44 40 2101 41 2097 41 59 125 125 330 773 865 2103 40 2094 2095 44 2104 2105 41 123 2004 46 2106 40 362 44 2095 44 2105 46 2107 40 41 44 2105 46 2108 40 41 41 59 830 123 2109 46 2110 40 2105 46 2107 40 41 41 59 125 580 40 2111 2112 41 123 2004 46 2113 40 362 43 2105 46 2114 40 41 41 59 792 59 125 2115 60 2116 62 2117 61 2017 46 2118 40 2105 46 2107 40 41 41 59 688 40 33 2117 46 2119 40 41 41 123 792 59 125 2116 2120 61 2117 46 2121 40 41 59 688 40 2120 46 2122 40 41 340 2116 46 2123 46 2124 41 123 792 59 125 2125 2126 61 2120 46 2127 40 41 59 2017 46 2128 40 2120 41 59 2047 2129 59 688 40 2126 46 2130 40 41 41 123 2129 61 744 2131 40 2126 44 2132 46 2133 40 2105 46 2134 40 41 41 44 2132 46 2133 40 2105 46 2135 40 41 41 44 2105 46 2136 40 41 44 2120 46 2137 40 41 44 2120 46 2138 40 41 44 2120 46 2139 40 41 44 2013 44 2140 40 2126 41 44 2141 46 2142 40 41 46 2143 40 41 41 59 125 630 123 2129 61 744 2144 40 2126 44 2145 46 2146 40 2105 46 2147 40 41 41 44 2145 46 2146 40 2105 46 2148 40 41 41 44 2105 46 2149 40 41 44 2120 46 2150 40 41 44 2120 46 2151 40 41 44 2120 46 2152 40 41 44 2013 44 2153 40 2126 41 44 2154 46 2155 40 41 46 2156 40 41 41 59 125 2042 2157 61 2158 40 2129 41 59 2159 40 2129 44 2157 41 59 40 40 2160 41 2157 41 46 2103 40 2105 44 2095 44 2161 45 62 123 688 40 2056 340 2162 41 2056 46 2163 40 2161 41 59 125 41 59 2164 40 41 59 125 773 865 2165 40 2094 2095 44 2166 2167 41 123 688 40 33 2168 46 2169 40 2017 44 2037 46 2170 40 41 44 2011 44 2095 44 2167 41 41 123 792 59 125 2171 60 2172 62 2173 61 2017 46 2174 40 2167 46 2175 40 41 41 59 2176 40 2173 46 2177 40 41 41 59 2172 2178 61 2173 46 2179 40 41 59 2180 2181 61 2178 46 2182 40 41 59 2017 46 2183 40 2178 41 59 2184 2185 59 2186 2187 61 2186 46 2188 40 2167 46 2189 40 41 41 59 2190 2191 61 744 2190 40 2011 46 2192 40 41 41 59 688 40 2167 702 2193 41 123 2176 40 33 2181 46 2194 40 41 44 362 41 59 2185 61 744 2195 40 2181 44 2187 44 2167 46 2196 40 41 44 2167 46 2197 40 41 44 2167 46 2198 40 41 44 2167 46 2199 40 41 44 2167 46 2200 40 41 44 2191 41 59 125 630 123 2176 40 2167 702 2201 41 59 2176 40 2181 46 2202 40 41 44 362 41 59 2185 61 744 2203 40 2181 44 2187 44 2167 46 2204 40 41 44 2167 46 2205 40 41 44 2167 46 2206 40 41 44 2167 46 2207 40 41 44 2167 46 2208 40 41 44 2191 41 59 125 2042 2209 61 2210 40 2185 41 59 2211 40 2185 44 2209 41 59 40 40 2212 41 2209 41 46 2103 40 2167 44 2095 44 2213 45 62 123 688 40 2056 340 2214 41 2056 46 2215 40 2213 41 59 125 41 59 2216 40 41 59 125 331 330 331 777 865 2217 40 41 123 688 40 2025 46 2218 40 41 41 123 2219 40 41 59 125 630 123 2025 46 2220 40 744 2221 40 41 123 64 2075 777 865 2222 40 41 123 2223 40 41 59 125 125 41 59 125 2224 40 41 46 2225 40 40 2226 60 2047 62 41 2227 45 62 2228 40 41 41 59 2228 40 41 59 2013 46 2229 40 41 46 2230 40 2231 45 62 2231 46 2232 40 41 340 2233 41 46 2234 40 2231 45 62 123 2004 46 2235 40 362 44 2231 46 2232 40 41 41 59 2013 46 2236 40 2231 46 2232 40 41 44 2237 46 2238 46 2239 41 59 125 41 59 125 777 2042 2240 40 2241 2242 41 123 2041 2243 61 2242 46 2244 40 41 59 688 40 2043 46 2245 40 2243 41 41 123 792 2043 46 2246 40 2243 41 59 125 630 123 2042 2247 61 2248 46 2249 40 2242 41 59 2042 2250 61 2043 46 2251 40 2243 44 2247 41 59 688 40 2250 340 2252 41 123 2004 46 2253 40 362 44 2242 46 2244 40 41 41 59 125 792 2247 59 125 125 331 330 331 773 865 2254 40 41 123 2255 60 2047 62 2256 61 744 2257 60 62 40 41 59 2049 46 2258 40 2259 45 62 123 570 2260 61 2261 40 2259 41 59 688 40 33 2260 41 123 2256 46 2262 40 2259 41 59 125 125 41 59 2256 46 2258 40 2049 58 58 2263 41 59 688 40 33 2256 46 2264 40 41 41 123 2265 40 41 59 125 2051 46 2266 40 2267 41 59 330 2255 60 2241 62 2268 61 744 2257 60 62 40 2019 46 2269 40 41 41 59 2268 46 2270 40 2021 46 2271 40 41 41 59 2268 46 2270 40 2049 46 2272 40 41 41 59 2041 2273 61 2061 46 2274 40 41 46 2275 40 2276 41 59 570 2277 61 2025 46 2278 40 41 702 2279 59 2029 46 2280 40 2268 44 2273 44 2277 41 59 125 773 570 2281 40 2241 2282 41 123 688 40 2282 702 2283 307 33 2282 46 2284 40 41 41 123 330 330 330 792 2285 59 125 2286 40 2282 44 2240 40 2282 41 41 59 688 40 2282 702 2047 41 123 40 40 2047 41 2282 41 46 2287 40 41 59 125 2288 40 41 59 792 2289 59 125 773 865 2290 40 2241 2282 44 2042 2291 41 123 2291 46 2292 40 2037 44 823 44 2282 46 2293 40 41 41 59 2282 46 2292 40 2037 41 59 2294 40 41 59 125 777 865 2295 40 41 123 2048 46 2295 40 41 59 125 331 330 331 777 865 2296 40 2297 2298 44 570 2299 44 2300 2301 44 2055 2302 41 123 688 40 2013 46 2303 40 41 309 2015 46 2303 40 41 41 123 2041 2304 61 2305 46 2306 40 362 41 59 2302 46 2307 40 2304 41 59 2004 46 2308 40 2304 41 59 792 59 125 2298 46 2296 40 2309 40 2298 44 2299 41 44 2301 44 2302 41 59 125 330 777 865 2310 40 2311 2312 44 2311 2313 44 2311 2314 44 570 2315 44 726 2316 44 2311 2317 44 2297 2298 44 2041 2318 44 570 2319 44 570 2299 44 2320 60 2047 62 2321 44 2055 2302 41 123 2322 40 33 2323 40 2298 46 2324 40 41 41 41 59 2325 2326 61 2327 40 2298 44 2299 41 59 2298 46 2296 40 2326 44 40 41 45 62 123 688 40 2298 46 2328 40 41 323 2297 46 2329 46 2330 41 123 2047 2242 59 688 40 2298 46 2331 40 41 41 123 2242 61 744 2332 40 2298 44 2312 44 2313 44 2314 44 2315 44 2316 44 2326 46 2333 40 41 44 2326 46 2334 40 41 44 2326 46 2335 40 41 44 2326 46 2336 40 41 44 2013 44 2337 40 2298 41 44 2338 46 2339 40 41 46 2340 40 41 41 59 125 630 123 2242 61 744 2341 40 2298 44 2312 44 2313 44 2314 44 2315 44 2316 44 2326 46 2342 40 41 44 2326 46 2343 40 41 44 2326 46 2344 40 41 44 2326 46 2345 40 41 44 2013 44 2346 40 2298 41 44 2347 46 2348 40 41 46 2349 40 41 41 59 125 2242 46 2350 40 41 46 2351 40 2319 41 59 2242 46 2350 40 41 46 2352 40 2317 46 2353 41 59 2242 46 2354 40 2318 41 59 2042 2291 61 2355 40 2242 41 59 2290 40 2242 44 2291 41 59 40 40 2356 41 2291 41 46 2310 40 41 59 2321 46 2357 40 2242 41 59 2295 40 41 59 125 125 44 2302 41 59 2295 40 41 59 125 777 865 2358 40 2297 2298 44 2311 2312 44 726 2359 44 726 2360 44 726 2314 44 570 2299 44 2320 60 2361 62 2321 44 2055 2302 41 123 2362 40 33 2363 40 2298 46 2364 40 41 41 41 59 2365 2366 61 2367 40 2298 44 2299 41 59 2298 46 2296 40 2366 44 40 41 45 62 123 688 40 2298 46 2368 40 41 323 2297 46 2369 46 2370 41 123 2361 2371 59 2094 2372 61 2366 46 2373 40 41 59 2374 2375 61 744 2374 40 2011 46 2376 40 41 41 59 688 40 2298 46 2377 40 41 41 123 2371 61 744 2378 40 2298 44 2312 44 2372 44 2359 44 2360 44 2314 44 2375 41 59 125 630 123 2371 61 744 2379 40 2298 44 2312 44 2372 44 2359 44 2360 44 2314 44 2375 41 59 125 2042 2291 61 2380 40 2371 41 59 2290 40 2371 44 2291 41 59 40 40 2381 41 2291 41 46 2310 40 41 59 2321 46 2382 40 2371 41 59 2295 40 41 59 125 125 44 2302 41 59 2295 40 41 59 125 773 2042 2383 40 2241 2282 41 123 2042 2291 61 2384 46 2385 40 2282 41 59 2042 2386 61 2043 46 2387 40 2282 46 2388 40 41 44 2291 41 59 688 40 2386 340 2389 41 123 2004 46 2390 40 362 44 2282 46 2388 40 41 41 59 125 688 40 2282 702 2047 41 123 2049 46 2391 40 40 2047 41 2282 41 59 125 330 792 2291 59 125 773 2392 2393 40 2297 2298 41 123 792 744 2392 40 2394 40 2298 41 46 2395 40 41 44 2037 46 2396 40 41 46 2397 40 41 44 2037 46 2398 40 41 46 2399 40 41 41 59 125 773 2400 2401 40 2297 2298 44 570 2299 41 123 792 744 2400 40 2298 44 2011 46 2402 40 41 44 2025 44 2008 44 2035 44 2029 44 2299 41 59 125 331 330 331 777 865 2403 40 2041 2404 44 2311 2312 44 2311 2405 44 2406 2407 44 2047 2242 44 64 2054 2041 2408 44 2300 2301 44 2409 2410 41 123 2041 2411 61 2013 46 2412 40 2242 46 2413 40 41 44 2414 46 2415 46 2416 41 46 2417 40 41 59 2418 60 2419 62 2420 61 744 2418 60 62 40 41 123 64 2075 777 865 2421 40 64 2422 46 2423 46 2054 2419 2424 41 123 688 40 2424 340 2425 41 123 2004 46 2426 40 362 43 2424 46 2427 40 41 46 2428 40 41 41 59 2429 40 2242 41 59 2242 46 2430 40 2047 46 2431 46 2432 41 59 2240 40 2242 41 46 2433 40 41 59 2295 40 41 59 2301 46 2434 40 41 59 125 125 64 2075 777 865 2435 40 64 2436 2437 2438 41 123 2438 46 2439 40 41 59 2004 46 2440 40 2438 46 2441 40 41 41 59 2410 46 2442 40 362 44 2438 41 59 125 125 59 830 123 2013 46 2443 40 2411 44 2404 44 2312 44 2405 44 2407 44 2414 46 2415 46 2416 44 2408 44 2420 41 59 125 580 40 2444 124 2445 124 2446 2447 41 123 2447 46 2448 40 41 59 2004 46 2449 40 2447 46 2450 40 41 41 59 2410 46 2451 40 362 44 2447 41 59 125 125 330 777 865 2452 40 2047 2242 41 123 2453 40 2242 41 59 2019 46 2454 40 2242 41 59 330 2013 46 2455 40 2242 46 2456 40 41 41 59 2295 40 41 59 125 331 330 331 777 865 2457 40 2041 2458 44 2047 46 2459 2460 41 123 2461 40 2458 41 46 2462 40 2242 45 62 123 2242 46 2463 40 2460 41 59 2452 40 2242 41 59 2013 46 2464 40 2242 46 2465 40 41 44 2466 46 2467 46 2468 41 59 2295 40 41 59 125 41 59 125 331 330 331 777 865 2469 40 41 123 2470 40 41 59 2039 46 2471 40 744 2038 46 2472 40 41 123 64 2075 777 865 2473 40 41 123 125 64 2075 777 865 2474 40 41 123 2470 40 41 59 125 125 41 59 125 773 865 2475 40 41 123 2476 40 41 46 2477 40 2242 45 62 123 688 40 33 2242 46 2478 40 41 41 123 2479 2480 61 2242 46 2481 40 41 59 2479 2482 61 2242 46 2483 40 41 59 688 40 2480 340 2484 307 2482 340 2484 41 123 2479 2485 61 744 2479 40 41 59 688 40 2485 46 2486 40 2480 41 41 123 2242 46 2487 40 2047 46 2488 46 2489 41 59 2295 40 41 59 125 630 688 40 2485 46 2486 40 2482 41 41 123 2242 46 2490 40 2047 46 2491 46 2492 41 59 2295 40 41 59 125 125 125 125 41 59 125 331 330 331 330 330 777 865 2493 40 2047 2242 41 123 2494 40 2242 41 59 2023 46 2495 40 2242 41 59 125 777 865 2496 40 2047 2242 41 123 688 40 33 2242 46 2497 40 41 41 123 2281 40 2242 41 59 125 2498 40 2242 41 59 125 777 2499 60 2047 62 2500 40 41 123 792 2501 40 41 46 2502 40 41 46 2503 40 2047 58 58 2504 41 59 125 777 2505 60 2041 62 2506 40 41 826 2507 123 2508 60 2507 62 2509 61 744 2508 60 62 40 41 59 2505 60 2041 62 2510 61 2500 40 41 46 2511 40 2047 58 58 2512 41 46 2513 40 2047 58 58 2514 41 46 2515 40 2516 46 2517 40 41 41 59 2510 46 2518 40 2023 46 2500 40 41 46 2511 40 2242 45 62 2242 46 2519 40 41 340 2520 41 46 2513 40 2242 45 62 123 2004 46 2521 40 362 43 362 43 2242 46 2514 40 41 41 59 792 2242 46 2514 40 41 59 125 41 46 2515 40 2516 46 2517 40 41 41 41 59 2510 46 2518 40 2019 46 2500 40 41 46 2513 40 2242 45 62 123 2522 2523 61 2242 46 2519 40 41 59 688 40 2523 340 2520 41 123 2524 2525 61 2013 46 2526 40 2523 46 2527 40 41 46 2528 40 41 41 59 688 40 2525 340 2520 307 2525 46 2529 40 41 340 2524 46 2530 46 2531 41 123 2509 46 2532 40 744 2507 40 2533 46 2534 40 362 44 2242 46 2535 40 41 41 41 41 59 125 630 123 2004 46 2536 40 362 43 362 43 2242 46 2514 40 41 41 59 125 125 630 123 2509 46 2537 40 744 2507 40 2538 46 2539 40 362 44 2242 46 2540 40 41 41 41 41 59 125 792 2242 46 2514 40 41 59 125 41 46 2515 40 2516 46 2517 40 41 41 41 59 688 40 2509 46 2541 40 41 340 2520 41 825 2509 46 2541 40 41 59 792 2510 59 125 331 330 331 777 865 2542 40 2361 2543 41 123 2021 46 2452 40 2543 41 59 125 777 2544 60 2361 62 2545 40 2041 2458 41 123 792 2021 46 2545 40 2458 41 59 125 331 330 331 777 2546 60 2047 62 2547 40 41 123 792 2049 46 2547 40 41 59 125 777 2050 2548 40 41 123 792 2051 59 125 777 570 2549 40 2297 2298 41 123 792 2298 46 2549 40 2011 41 59 125 777 570 2550 40 2041 2551 41 123 2499 60 2552 62 2553 61 2499 46 2554 40 2555 40 41 44 2023 46 2547 40 41 46 2556 40 41 41 59 2553 61 2499 46 2554 40 2553 44 2019 46 2547 40 41 46 2556 40 41 41 59 792 2553 46 2557 40 2558 45 62 2558 46 2559 40 41 46 2560 40 41 46 2561 40 2551 41 41 59 125 777 570 2562 40 2297 2298 41 123 330 688 40 2549 40 2298 41 41 792 2298 46 2563 40 41 59 630 792 2298 46 2564 40 41 323 2565 46 2566 59 125 777 2544 60 2241 62 2567 40 2041 2458 41 123 792 2568 40 41 46 2569 40 2282 45 62 2282 46 2570 40 41 46 2571 40 2458 41 41 46 2572 40 41 59 125 777 2544 60 2047 62 2573 40 2041 2458 41 123 792 2567 40 2458 41 46 2574 40 2282 45 62 2282 702 2047 41 46 2575 40 2282 45 62 40 2047 41 2282 41 59 125 773 865 2576 40 2047 2242 41 123 688 40 2049 46 2577 40 2242 41 41 123 2295 40 41 59 125 125 773 865 2578 40 2047 2242 41 123 688 40 2049 46 2579 40 2242 41 41 123 2295 40 41 59 125 125 773 2499 60 2241 62 2580 40 41 123 792 2499 46 2581 40 2049 46 2582 40 41 44 2021 46 2547 40 41 46 2582 40 41 41 59 125 330 330 773 865 2583 40 41 123 823 46 2058 46 2584 40 2547 40 41 46 2585 40 41 41 59 125 330 330 773 570 2586 40 2047 2242 41 123 688 40 33 2587 40 2242 41 41 123 2004 46 2588 40 362 41 59 792 2589 59 125 2281 40 2242 41 59 688 40 33 2049 46 2590 40 2242 41 41 123 2049 46 2591 40 2242 41 59 125 792 2592 59 125 330 330 773 570 2593 40 2047 2242 41 123 330 2594 2595 61 2031 46 2596 40 2242 41 59 688 40 2595 323 2597 41 792 2598 59 2013 46 2599 40 2242 46 2600 40 41 44 2595 46 2601 44 2602 46 2603 46 2604 41 59 2013 46 2599 40 2242 46 2600 40 41 44 2595 46 2605 44 2602 46 2603 46 2606 41 59 792 2607 59 125 125 ,"{'AvgLine': 15, 'CountLine': 792, 'CountStmt': 338, 'MaxNesting': 3, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 266, 'MaxEssential': 4, 'SumEssential': 62, 'AvgCyclomatic': 1, 'CountLineCode': 622, 'CountStmtDecl': 116, 'MaxCyclomatic': 5, 'SumCyclomatic': 98, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 115, 'CountSemicolon': 251, 'CountDeclMethod': 41, 'CountLineCodeExe': 417, 'CountLineComment': 55, 'CountClassCoupled': 101, 'CountClassDerived': 0, 'CountLineCodeDecl': 172, 'CountDeclMethodAll': 41, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 102, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 26, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 98, 'CountDeclClassVariable': 1, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 15, 'CountDeclInstanceMethod': 41, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 101, 'CountDeclInstanceVariable': 25, 'PercentLackOfCohesionModified': 85}"
2940,Java,"public abstract class DisputeView extends ActivatableView<VBox, Void> implements PeerInfoIcon.notify {
    public enum FilterResult {
        NO_MATCH(""No Match""),
        NO_FILTER(""No filter text""),
        OPEN_DISPUTES(""Open disputes""),
        TRADE_ID(""Trade ID""),
        OPENING_DATE(""Opening date""),
        BUYER_NODE_ADDRESS(""Buyer node address""),
        SELLER_NODE_ADDRESS(""Seller node address""),
        BUYER_ACCOUNT_DETAILS(""Buyer account details""),
        SELLER_ACCOUNT_DETAILS(""Seller account details""),
        DEPOSIT_TX(""Deposit tx ID""),
        PAYOUT_TX(""Payout tx ID""),
        DEL_PAYOUT_TX(""Delayed payout tx ID""),
        RESULT_MESSAGE(""Result message""),
        REASON(""Reason""),
        JSON(""Contract as json"");

        // Used in tooltip at search string to show where the match was found
        @Getter
        private final String displayString;

        FilterResult(String displayString) {

            this.displayString = displayString;
        }
    }

    protected final DisputeManager<? extends DisputeList<Dispute>> disputeManager;
    protected final KeyRing keyRing;
    private final P2PService p2PService;
    private final TradeManager tradeManager;
    protected final CoinFormatter formatter;
    protected final Preferences preferences;
    protected final DisputeSummaryWindow disputeSummaryWindow;
    private final PrivateNotificationManager privateNotificationManager;
    private final ContractWindow contractWindow;
    private final TradeDetailsWindow tradeDetailsWindow;

    private final AccountAgeWitnessService accountAgeWitnessService;
    private final MediatorManager mediatorManager;
    private final RefundAgentManager refundAgentManager;
    protected final DaoFacade daoFacade;
    private final boolean useDevPrivilegeKeys;

    protected TableView<Dispute> tableView;
    private SortedList<Dispute> sortedList;

    @Getter
    protected Dispute selectedDispute;

    private Subscription selectedDisputeSubscription;
    protected FilteredList<Dispute> filteredList;
    protected InputTextField filterTextField;
    private ChangeListener<String> filterTextFieldListener;
    protected AutoTooltipButton sigCheckButton, reOpenButton, closeButton, sendPrivateNotificationButton, reportButton, fullReportButton;
    private final Map<String, ListChangeListener<ChatMessage>> disputeChatMessagesListeners = new HashMap<>();
    @Nullable
    private ListChangeListener<Dispute> disputesListener; // Only set in mediation cases
    protected Label alertIconLabel;
    protected TableColumn<Dispute, Dispute> stateColumn;
    private Map<String, ListChangeListener<ChatMessage>> listenerByDispute = new HashMap<>();
    private Map<String, Button> chatButtonByDispute = new HashMap<>();
    private Map<String, JFXBadge> chatBadgeByDispute = new HashMap<>();
    private Map<String, JFXBadge> newBadgeByDispute = new HashMap<>();
    private Map<String, PeerInfoIconDispute> avatarMap = new HashMap<>();
    protected DisputeChatPopup chatPopup;


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor, lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    public DisputeView(DisputeManager<? extends DisputeList<Dispute>> disputeManager,
                       KeyRing keyRing,
                       P2PService p2PService,
                       TradeManager tradeManager,
                       CoinFormatter formatter,
                       Preferences preferences,
                       DisputeSummaryWindow disputeSummaryWindow,
                       PrivateNotificationManager privateNotificationManager,
                       ContractWindow contractWindow,
                       TradeDetailsWindow tradeDetailsWindow,
                       AccountAgeWitnessService accountAgeWitnessService,
                       MediatorManager mediatorManager,
                       RefundAgentManager refundAgentManager,
                       DaoFacade daoFacade,
                       boolean useDevPrivilegeKeys) {
        this.disputeManager = disputeManager;
        this.keyRing = keyRing;
        this.p2PService = p2PService;
        this.tradeManager = tradeManager;
        this.formatter = formatter;
        this.preferences = preferences;
        this.disputeSummaryWindow = disputeSummaryWindow;
        this.privateNotificationManager = privateNotificationManager;
        this.contractWindow = contractWindow;
        this.tradeDetailsWindow = tradeDetailsWindow;
        this.accountAgeWitnessService = accountAgeWitnessService;
        this.mediatorManager = mediatorManager;
        this.refundAgentManager = refundAgentManager;
        this.daoFacade = daoFacade;
        this.useDevPrivilegeKeys = useDevPrivilegeKeys;
        DisputeChatPopup.ChatCallback chatCallback = this::handleOnProcessDispute;
        chatPopup = new DisputeChatPopup(disputeManager, formatter, preferences, chatCallback);
    }

    @Override
    public void initialize() {
        Label label = new AutoTooltipLabel(Res.get(""support.filter""));
        HBox.setMargin(label, new Insets(5, 0, 0, 0));
        HBox.setHgrow(label, Priority.NEVER);

        filterTextField = new InputTextField();
        filterTextField.setPromptText(Res.get(""support.filter.prompt""));
        Tooltip tooltip = new Tooltip();
        tooltip.setShowDelay(Duration.millis(100));
        tooltip.setShowDuration(Duration.seconds(10));
        filterTextField.setTooltip(tooltip);
        filterTextFieldListener = (observable, oldValue, newValue) -> applyFilteredListPredicate(filterTextField.getText());
        HBox.setHgrow(filterTextField, Priority.ALWAYS);

        alertIconLabel = new Label();
        Text icon = getIconForLabel(MaterialDesignIcon.ALERT_CIRCLE_OUTLINE, ""2em"", alertIconLabel);
        icon.getStyleClass().add(""alert-icon"");
        HBox.setMargin(alertIconLabel, new Insets(4, 0, 0, 10));
        alertIconLabel.setMouseTransparent(false);
        alertIconLabel.setVisible(false);
        alertIconLabel.setManaged(false);

        reOpenButton = new AutoTooltipButton(Res.get(""support.reOpenButton.label""));
        reOpenButton.setDisable(true);
        reOpenButton.setVisible(false);
        reOpenButton.setManaged(false);
        HBox.setHgrow(reOpenButton, Priority.NEVER);
        reOpenButton.setOnAction(e -> {
            reOpenDisputeFromButton();
        });

        closeButton = new AutoTooltipButton(Res.get(""support.closeTicket""));
        closeButton.setDisable(true);
        closeButton.setVisible(false);
        closeButton.setManaged(false);
        HBox.setHgrow(closeButton, Priority.NEVER);
        closeButton.setOnAction(e -> {
            closeDisputeFromButton();
        });

        sendPrivateNotificationButton = new AutoTooltipButton(Res.get(""support.sendNotificationButton.label""));
        sendPrivateNotificationButton.setDisable(true);
        sendPrivateNotificationButton.setVisible(false);
        sendPrivateNotificationButton.setManaged(false);
        HBox.setHgrow(sendPrivateNotificationButton, Priority.NEVER);
        sendPrivateNotificationButton.setOnAction(e -> {
            sendPrivateNotification();
        });

        reportButton = new AutoTooltipButton(Res.get(""support.reportButton.label""));
        reportButton.setVisible(false);
        reportButton.setManaged(false);
        HBox.setHgrow(reportButton, Priority.NEVER);
        reportButton.setOnAction(e -> {
            showCompactReport();
        });

        fullReportButton = new AutoTooltipButton(Res.get(""support.fullReportButton.label""));
        fullReportButton.setVisible(false);
        fullReportButton.setManaged(false);
        HBox.setHgrow(fullReportButton, Priority.NEVER);
        fullReportButton.setOnAction(e -> {
            showFullReport();
        });

        sigCheckButton = new AutoTooltipButton(Res.get(""support.sigCheck.button""));
        HBox.setHgrow(sigCheckButton, Priority.NEVER);
        sigCheckButton.setOnAction(e -> {
            new VerifyDisputeResultSignatureWindow(mediatorManager, refundAgentManager).show();
        });

        Pane spacer = new Pane();
        HBox.setHgrow(spacer, Priority.ALWAYS);

        HBox filterBox = new HBox();
        filterBox.setSpacing(5);
        filterBox.getChildren().addAll(label,
                filterTextField,
                alertIconLabel,
                spacer,
                reOpenButton,
                closeButton,
                sendPrivateNotificationButton,
                reportButton,
                fullReportButton,
                sigCheckButton);
        VBox.setVgrow(filterBox, Priority.NEVER);

        tableView = new TableView<>();
        VBox.setVgrow(tableView, Priority.SOMETIMES);
        tableView.setMinHeight(150);

        root.getChildren().addAll(filterBox, tableView);

        setupTable();
    }

    @Override
    protected void activate() {
        filterTextField.textProperty().addListener(filterTextFieldListener);

        ObservableList<Dispute> disputesAsObservableList = disputeManager.getDisputesAsObservableList();
        filteredList = new FilteredList<>(disputesAsObservableList);
        applyFilteredListPredicate(filterTextField.getText());

        sortedList = new SortedList<>(filteredList);
        sortedList.comparatorProperty().bind(tableView.comparatorProperty());
        tableView.setItems(sortedList);

        // double-click on a row opens chat window
        tableView.setRowFactory( tv -> {
            TableRow<Dispute> row = new TableRow<>();
            row.setOnMouseClicked(event -> {
                if (event.getClickCount() == 2 && (!row.isEmpty())) {
                    openChat(row.getItem());
                }
            });
            return row;
        });

        selectedDisputeSubscription = EasyBind.subscribe(tableView.getSelectionModel().selectedItemProperty(), this::onSelectDispute);

        Dispute selectedItem = tableView.getSelectionModel().getSelectedItem();
        if (selectedItem != null)
            tableView.getSelectionModel().select(selectedItem);
        else if (sortedList.size() > 0)
            tableView.getSelectionModel().select(0);

        GUIUtil.requestFocus(tableView);
    }

    @Override
    protected void deactivate() {
        filterTextField.textProperty().removeListener(filterTextFieldListener);
        sortedList.comparatorProperty().unbind();
        selectedDisputeSubscription.unsubscribe();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Protected
    ///////////////////////////////////////////////////////////////////////////////////////////

    // Reopen feature is only use in mediation from both mediator and traders
    protected void setupReOpenDisputeListener() {
        disputesListener = c -> {
            c.next();
            if (c.wasAdded()) {
                onDisputesAdded(c.getAddedSubList());
            } else if (c.wasRemoved()) {
                onDisputesRemoved(c.getRemoved());
            }
        };
    }

    // Reopen feature is only use in mediation from both mediator and traders
    protected void activateReOpenDisputeListener() {
        // Register listeners on all disputes for potential re-opening
        onDisputesAdded(disputeManager.getDisputesAsObservableList());
        disputeManager.getDisputesAsObservableList().addListener(disputesListener);

        disputeManager.getDisputesAsObservableList().forEach(dispute -> {
            if (dispute.isClosed()) {
                ObservableList<ChatMessage> chatMessages = dispute.getChatMessages();
                // If last message is not a result message we re-open as we might have received a new message from the
                // trader/mediator/arbitrator who has reopened the case
                if (!chatMessages.isEmpty() && !chatMessages.get(chatMessages.size() - 1).isResultMessage(dispute)) {
                    onSelectDispute(dispute);
                    reOpenDispute();
                }
            }
        });
    }

    // Reopen feature is only use in mediation from both mediator and traders
    protected void deactivateReOpenDisputeListener() {
        onDisputesRemoved(disputeManager.getDisputesAsObservableList());
        disputeManager.getDisputesAsObservableList().removeListener(disputesListener);
    }

    protected abstract SupportType getType();

    protected abstract DisputeSession getConcreteDisputeChatSession(Dispute dispute);

    protected abstract boolean senderFlag();    // implemented in the agent / client views

    protected void applyFilteredListPredicate(String filterString) {
        AtomicReference<FilterResult> filterResult = new AtomicReference<>(FilterResult.NO_FILTER);
        filteredList.setPredicate(dispute -> {
            filterResult.set(getFilterResult(dispute, filterString));
            return filterResult.get() != FilterResult.NO_MATCH;
        });

        if (filterResult.get() == FilterResult.NO_MATCH) {
            filterTextField.getTooltip().setText(""No matches found"");
        } else if (filterResult.get() == FilterResult.NO_FILTER) {
            filterTextField.getTooltip().setText(""No filter applied"");
        } else if (filterResult.get() == FilterResult.OPEN_DISPUTES) {
            filterTextField.getTooltip().setText(""Show all open disputes"");
        } else {
            filterTextField.getTooltip().setText(""Data matching filter string: "" + filterResult.get().getDisplayString());
        }
    }

    protected FilterResult getFilterResult(Dispute dispute, String filterTerm) {
        String filter = filterTerm.toLowerCase();
        if (filter.isEmpty()) {
            return FilterResult.NO_FILTER;
        }

        // For open filter we do not want to continue further as json data would cause a match
        if (filter.equalsIgnoreCase(""open"")) {
            return !dispute.isClosed() ? FilterResult.OPEN_DISPUTES : FilterResult.NO_MATCH;
        }

        if (dispute.getTradeId().toLowerCase().contains(filter)) {
            return FilterResult.TRADE_ID;
        }

        if (DisplayUtils.formatDate(dispute.getOpeningDate()).toLowerCase().contains(filter)) {
            return FilterResult.OPENING_DATE;
        }

        if (dispute.getContract().getBuyerNodeAddress().getFullAddress().contains(filter)) {
            return FilterResult.BUYER_NODE_ADDRESS;
        }

        if (dispute.getContract().getSellerNodeAddress().getFullAddress().contains(filter)) {
            return FilterResult.SELLER_NODE_ADDRESS;
        }

        if (dispute.getContract().getBuyerPaymentAccountPayload() != null &&
                dispute.getContract().getBuyerPaymentAccountPayload().getPaymentDetails().toLowerCase().contains(filter)) {
            return FilterResult.BUYER_ACCOUNT_DETAILS;
        }

        if (dispute.getContract().getSellerPaymentAccountPayload() != null &&
                dispute.getContract().getSellerPaymentAccountPayload().getPaymentDetails().toLowerCase().contains(filter)) {
            return FilterResult.SELLER_ACCOUNT_DETAILS;
        }

        if (dispute.getDepositTxId() != null && dispute.getDepositTxId().contains(filter)) {
            return FilterResult.DEPOSIT_TX;
        }
        if (dispute.getPayoutTxId() != null && dispute.getPayoutTxId().contains(filter)) {
            return FilterResult.PAYOUT_TX;
        }

        if (dispute.getDelayedPayoutTxId() != null && dispute.getDelayedPayoutTxId().contains(filter)) {
            return FilterResult.DEL_PAYOUT_TX;
        }

        DisputeResult disputeResult = dispute.getDisputeResultProperty().get();
        if (disputeResult != null) {
            ChatMessage chatMessage = disputeResult.getChatMessage();
            if (chatMessage != null && chatMessage.getMessage().toLowerCase().contains(filter)) {
                return FilterResult.RESULT_MESSAGE;
            }

            if (disputeResult.getReason().name().toLowerCase().contains(filter)) {
                return FilterResult.REASON;
            }
        }

        if (dispute.getContractAsJson().toLowerCase().contains(filter)) {
            return FilterResult.JSON;
        }

        return FilterResult.NO_MATCH;
    }

    // a derived version in the ClientView for users pops up an ""Are you sure"" box first.
    // this version includes the sending of an automatic message to the user, see addMediationReOpenedMessage
    protected void reOpenDisputeFromButton() {
        if (reOpenDispute()) {
            disputeManager.addMediationReOpenedMessage(selectedDispute, false);
        }
    }

    // only applicable to traders
    // only allow them to close the dispute if the trade is paid out
    // the reason for having this is that sometimes traders end up with closed disputes that are not ""closed"" @pazza
    protected void closeDisputeFromButton() {
        Optional<Trade> tradeOptional = disputeManager.findTrade(selectedDispute);
        if (tradeOptional.isPresent() && tradeOptional.get().getPayoutTxId() != null && tradeOptional.get().getPayoutTxId().length() > 0) {
            selectedDispute.setIsClosed();
            disputeManager.requestPersistence();
            onSelectDispute(selectedDispute);
        } else {
            new Popup().warning(Res.get(""support.warning.traderCloseOwnDisputeWarning"")).show();
        }
    }

    protected void handleOnProcessDispute(Dispute dispute) {
        // overridden by clients that use it (dispute agents)
    }

    protected boolean reOpenDispute() {
        if (selectedDispute != null &&
                selectedDispute.isClosed() &&
                isNodeAddressOk(selectedDispute,
                        !disputeManager.isTrader(selectedDispute))) {
            selectedDispute.reOpen();
            handleOnProcessDispute(selectedDispute);
            disputeManager.requestPersistence();
            onSelectDispute(selectedDispute);
            return true;
        } else {
            new Popup().warning(Res.get(""support.reOpenByTrader.failed"")).show();
            return false;
        }
    }

    private boolean isNodeAddressOk(Dispute dispute, boolean isMediator) {
        NodeAddress disputeNodeAddress = isMediator ? dispute.getContract().getMediatorNodeAddress() :
                dispute.getContract().getMyNodeAddress(keyRing.getPubKeyRing());

        if (OfferRestrictions.requiresNodeAddressUpdate() && !Utils.isV3Address(disputeNodeAddress.getHostName())) {
            return false;
        }

        return Objects.equals(p2PService.getNetworkNode().getNodeAddress(), disputeNodeAddress);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // UI actions
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected void onOpenContract(Dispute dispute) {
        dispute.setDisputeSeen(senderFlag());
        contractWindow.show(dispute);
    }

    private void onSelectDispute(Dispute dispute) {
        if (dispute == null) {
            selectedDispute = null;
        } else if (selectedDispute != dispute) {
            selectedDispute = dispute;
        }

        reOpenButton.setDisable(selectedDispute == null || !selectedDispute.isClosed());
        closeButton.setDisable(selectedDispute == null || selectedDispute.isClosed());
        sendPrivateNotificationButton.setDisable(selectedDispute == null);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Private
    ///////////////////////////////////////////////////////////////////////////////////////////

    // Reopen feature is only use in mediation from both mediator and traders
    private void onDisputesAdded(List<? extends Dispute> addedDisputes) {
        addedDisputes.forEach(dispute -> {
            ListChangeListener<ChatMessage> listener = c -> {
                c.next();
                if (c.wasAdded()) {
                    c.getAddedSubList().forEach(chatMessage -> {
                        if (dispute.isClosed()) {
                            if (chatMessage.isResultMessage(dispute)) {
                                onSelectDispute(null);
                            } else {
                                onSelectDispute(dispute);
                                reOpenDispute();
                            }
                        }
                    });
                }
                // We never remove chat messages so no remove listener
            };
            dispute.getChatMessages().addListener(listener);
            disputeChatMessagesListeners.put(dispute.getId(), listener);
        });
    }

    // Reopen feature is only use in mediation from both mediator and traders
    private void onDisputesRemoved(List<? extends Dispute> removedDisputes) {
        removedDisputes.forEach(dispute -> {
            String id = dispute.getId();
            if (disputeChatMessagesListeners.containsKey(id)) {
                ListChangeListener<ChatMessage> listener = disputeChatMessagesListeners.get(id);
                dispute.getChatMessages().removeListener(listener);
                disputeChatMessagesListeners.remove(id);
            }
        });
    }

    private void sendPrivateNotification() {
        if (selectedDispute != null) {
            PubKeyRing pubKeyRing = selectedDispute.getTraderPubKeyRing();
            NodeAddress nodeAddress;
            Contract contract = selectedDispute.getContract();
            if (pubKeyRing.equals(contract.getBuyerPubKeyRing())) {
                nodeAddress = contract.getBuyerNodeAddress();
            } else {
                nodeAddress = contract.getSellerNodeAddress();
            }

            new SendPrivateNotificationWindow(
                    privateNotificationManager,
                    pubKeyRing,
                    nodeAddress,
                    useDevPrivilegeKeys
            ).show();
        }
    }

    private void showCompactReport() {
        Map<String, List<Dispute>> map = new HashMap<>();
        Map<String, List<Dispute>> disputesByReason = new HashMap<>();
        disputeManager.getDisputesAsObservableList().forEach(dispute -> {
            String tradeId = dispute.getTradeId();
            List<Dispute> list;
            if (!map.containsKey(tradeId))
                map.put(tradeId, new ArrayList<>());

            list = map.get(tradeId);
            list.add(dispute);
        });

        List<List<Dispute>> allDisputes = new ArrayList<>();
        map.forEach((key, value) -> allDisputes.add(value));
        allDisputes.sort(Comparator.comparing(o -> !o.isEmpty() ? o.get(0).getOpeningDate() : new Date(0)));
        StringBuilder stringBuilder = new StringBuilder();
        StringBuilder csvStringBuilder = new StringBuilder();
        csvStringBuilder.append(""Dispute nr"").append("";"")
                .append(""Closed during cycle"").append("";"")
                .append(""Status"").append("";"")
                .append(""Trade date"").append("";"")
                .append(""Trade ID"").append("";"")
                .append(""Offer version"").append("";"")
                .append(""Opening date"").append("";"")
                .append(""Close date"").append("";"")
                .append(""Duration"").append("";"")
                .append(""Currency"").append("";"")
                .append(""Trade amount"").append("";"")
                .append(""Payment method"").append("";"")
                .append(""Buyer account details"").append("";"")
                .append(""Seller account details"").append("";"")
                .append(""Buyer address"").append("";"")
                .append(""Seller address"").append("";"")
                .append(""Buyer security deposit"").append("";"")
                .append(""Seller security deposit"").append("";"")
                .append(""Dispute opened by"").append("";"")
                .append(""Payout to buyer"").append("";"")
                .append(""Payout to seller"").append("";"")
                .append(""Winner"").append("";"")
                .append(""Reason"").append("";"")
                .append(""Summary notes"").append("";"")
                .append(""Summary notes (other trader)"");

        Map<Integer, Date> blockStartDateByCycleIndex = daoFacade.getBlockStartDateByCycleIndex();

        SimpleDateFormat dateFormatter = new SimpleDateFormat(""yyyy MM dd HH:mm:ss"");
        AtomicInteger disputeIndex = new AtomicInteger();
        allDisputes.forEach(disputesPerTrade -> {
            if (disputesPerTrade.size() > 0) {
                Dispute firstDispute = disputesPerTrade.get(0);
                Date openingDate = firstDispute.getOpeningDate();
                Contract contract = firstDispute.getContract();
                String buyersRole = contract.isBuyerMakerAndSellerTaker() ? ""Buyer as maker"" : ""Buyer as taker"";
                String sellersRole = contract.isBuyerMakerAndSellerTaker() ? ""Seller as taker"" : ""Seller as maker"";
                String opener = firstDispute.isDisputeOpenerIsBuyer() ? buyersRole : sellersRole;
                DisputeResult disputeResult = firstDispute.getDisputeResultProperty().get();
                String winner = disputeResult != null &&
                        disputeResult.getWinner() == DisputeResult.Winner.BUYER ? ""Buyer"" : ""Seller"";
                String buyerPayoutAmount = disputeResult != null ? disputeResult.getBuyerPayoutAmount().toFriendlyString() : """";
                String sellerPayoutAmount = disputeResult != null ? disputeResult.getSellerPayoutAmount().toFriendlyString() : """";

                int index = disputeIndex.incrementAndGet();
                String tradeDateString = dateFormatter.format(firstDispute.getTradeDate());
                String openingDateString = dateFormatter.format(openingDate);

                // Index we display starts with 1 not with 0
                int cycleIndex = 0;
                if (disputeResult != null) {
                    Date closeDate = disputeResult.getCloseDate();
                    cycleIndex = blockStartDateByCycleIndex.entrySet().stream()
                            .filter(e -> e.getValue().after(closeDate))
                            .findFirst()
                            .map(Map.Entry::getKey)
                            .orElse(0);
                }
                stringBuilder.append(""\n"").append(""Dispute nr.: "").append(index).append(""\n"");

                if (cycleIndex > 0) {
                    stringBuilder.append(""Closed during cycle: "").append(cycleIndex).append(""\n"");
                }
                stringBuilder.append(""Trade date: "").append(tradeDateString)
                        .append(""\n"")
                        .append(""Opening date: "").append(openingDateString)
                        .append(""\n"");
                String tradeId = firstDispute.getTradeId();
                csvStringBuilder.append(""\n"").append(index).append("";"");
                if (cycleIndex > 0) {
                    csvStringBuilder.append(cycleIndex).append("";"");
                } else {
                    csvStringBuilder.append("";"");
                }
                csvStringBuilder.append(firstDispute.isClosed() ? ""Closed"" : ""Open"").append("";"")
                        .append(tradeDateString).append("";"")
                        .append(firstDispute.getShortTradeId()).append("";"")
                        .append(tradeId, tradeId.length() - 3, tradeId.length()).append("";"")
                        .append(openingDateString).append("";"");

                String summaryNotes = """";
                if (disputeResult != null) {
                    Date closeDate = disputeResult.getCloseDate();
                    long duration = closeDate.getTime() - openingDate.getTime();

                    String closeDateString = dateFormatter.format(closeDate);
                    String durationAsWords = FormattingUtils.formatDurationAsWords(duration);
                    stringBuilder.append(""Close date: "").append(closeDateString).append(""\n"")
                            .append(""Dispute duration: "").append(durationAsWords).append(""\n"");
                    csvStringBuilder.append(closeDateString).append("";"")
                            .append(durationAsWords).append("";"");
                } else {
                    csvStringBuilder.append("";"").append("";"");
                }

                String paymentMethod = Res.get(contract.getPaymentMethodId());
                String currency = CurrencyUtil.getNameAndCode(contract.getOfferPayload().getCurrencyCode());
                String tradeAmount = contract.getTradeAmount().toFriendlyString();
                String buyerDeposit = Coin.valueOf(contract.getOfferPayload().getBuyerSecurityDeposit()).toFriendlyString();
                String sellerDeposit = Coin.valueOf(contract.getOfferPayload().getSellerSecurityDeposit()).toFriendlyString();
                stringBuilder.append(""Payment method: "")
                        .append(paymentMethod)
                        .append(""\n"")
                        .append(""Currency: "")
                        .append(currency)
                        .append(""\n"")
                        .append(""Trade amount: "")
                        .append(tradeAmount)
                        .append(""\n"")
                        .append(""Buyer/seller security deposit: "")
                        .append(buyerDeposit)
                        .append(""/"")
                        .append(sellerDeposit)
                        .append(""\n"")
                        .append(""Dispute opened by: "")
                        .append(opener)
                        .append(""\n"")
                        .append(""Payout to buyer/seller (winner): "")
                        .append(buyerPayoutAmount).append(""/"")
                        .append(sellerPayoutAmount).append("" ("")
                        .append(winner)
                        .append("")\n"");

                String buyerPaymentAccountPayload = Utilities.toTruncatedString(
                        contract.getBuyerPaymentAccountPayload() != null ? contract.getBuyerPaymentAccountPayload().getPaymentDetails().
                                replace(""\n"", "" "").replace("";"", ""."") : ""NA"", 100);
                String sellerPaymentAccountPayload = Utilities.toTruncatedString(
                        contract.getSellerPaymentAccountPayload() != null ? contract.getSellerPaymentAccountPayload().getPaymentDetails()
                                .replace(""\n"", "" "").replace("";"", ""."") : ""NA"", 100);
                String buyerNodeAddress = contract.getBuyerNodeAddress().getFullAddress();
                String sellerNodeAddress = contract.getSellerNodeAddress().getFullAddress();
                csvStringBuilder.append(currency).append("";"")
                        .append(tradeAmount.replace("" BTC"", """")).append("";"")
                        .append(paymentMethod).append("";"")
                        .append(buyerPaymentAccountPayload).append("";"")
                        .append(sellerPaymentAccountPayload).append("";"")
                        .append(buyerNodeAddress.replace("".onion:9999"", """")).append("";"")
                        .append(sellerNodeAddress.replace("".onion:9999"", """")).append("";"")
                        .append(buyerDeposit.replace("" BTC"", """")).append("";"")
                        .append(sellerDeposit.replace("" BTC"", """")).append("";"")
                        .append(opener).append("";"")
                        .append(buyerPayoutAmount.replace("" BTC"", """")).append("";"")
                        .append(sellerPayoutAmount.replace("" BTC"", """")).append("";"")
                        .append(winner).append("";"");

                if (disputeResult != null) {
                    DisputeResult.Reason reason = disputeResult.getReason();
                    if (firstDispute.disputeResultProperty().get().getReason() != null) {
                        disputesByReason.putIfAbsent(reason.name(), new ArrayList<>());
                        disputesByReason.get(reason.name()).add(firstDispute);
                        stringBuilder.append(""Reason: "")
                                .append(reason.name())
                                .append(""\n"");

                        csvStringBuilder.append(reason.name()).append("";"");
                    } else {
                        csvStringBuilder.append("";"");
                    }

                    summaryNotes = disputeResult.getSummaryNotesProperty().get();
                    stringBuilder.append(""Summary notes: "").append(summaryNotes).append(""\n"");

                    csvStringBuilder.append(summaryNotes).append("";"");
                } else {
                    csvStringBuilder.append("";"");
                }

                // We might have a different summary notes at second trader. Only if it
                // is different we show it.
                if (disputesPerTrade.size() > 1) {
                    Dispute dispute1 = disputesPerTrade.get(1);
                    DisputeResult disputeResult1 = dispute1.getDisputeResultProperty().get();
                    if (disputeResult1 != null) {
                        String summaryNotes1 = disputeResult1.getSummaryNotesProperty().get();
                        if (!summaryNotes1.equals(summaryNotes)) {
                            stringBuilder.append(""Summary notes (different message to other trader was used): "").append(summaryNotes1).append(""\n"");

                            csvStringBuilder.append(summaryNotes1).append("";"");
                        } else {
                            csvStringBuilder.append("";"");
                        }
                    }
                }
            }
        });
        stringBuilder.append(""\n"").append(""Summary of reasons for disputes: "").append(""\n"");
        disputesByReason.forEach((k, v) -> {
            stringBuilder.append(k).append("": "").append(v.size()).append(""\n"");
        });

        String message = stringBuilder.toString();
        new Popup().headLine(""Report for "" + allDisputes.size() + "" disputes"")
                .maxMessageLength(500)
                .information(message)
                .width(1200)
                .actionButtonText(""Copy to clipboard"")
                .onAction(() -> Utilities.copyToClipboard(message))
                .secondaryActionButtonText(""Copy as csv data"")
                .onSecondaryAction(() -> Utilities.copyToClipboard(csvStringBuilder.toString()))
                .show();
    }

    private void showFullReport() {
        Map<String, List<Dispute>> map = new HashMap<>();
        disputeManager.getDisputesAsObservableList().forEach(dispute -> {
            String tradeId = dispute.getTradeId();
            List<Dispute> list;
            if (!map.containsKey(tradeId))
                map.put(tradeId, new ArrayList<>());

            list = map.get(tradeId);
            list.add(dispute);
        });
        List<List<Dispute>> disputeGroups = new ArrayList<>();
        map.forEach((key, value) -> disputeGroups.add(value));
        disputeGroups.sort(Comparator.comparing(o -> !o.isEmpty() ? o.get(0).getOpeningDate() : new Date(0)));
        StringBuilder stringBuilder = new StringBuilder();

        // We don't translate that as it is not intended for the public
        disputeGroups.forEach(disputeGroup -> {
            Dispute dispute0 = disputeGroup.get(0);
            stringBuilder.append(""##########################################################################################/\n"")
                    .append(""## Trade ID: "")
                    .append(dispute0.getTradeId())
                    .append(""\n"")
                    .append(""## Date: "")
                    .append(DisplayUtils.formatDateTime(dispute0.getOpeningDate()))
                    .append(""\n"")
                    .append(""## Is support ticket: "")
                    .append(dispute0.isSupportTicket())
                    .append(""\n"");
            if (dispute0.disputeResultProperty().get() != null && dispute0.disputeResultProperty().get().getReason() != null) {
                stringBuilder.append(""## Reason: "")
                        .append(dispute0.disputeResultProperty().get().getReason())
                        .append(""\n"");
            }
            stringBuilder.append(""##########################################################################################/\n"")
                    .append(""\n"");
            disputeGroup.forEach(dispute -> {
                stringBuilder
                        .append(""*******************************************************************************************\n"")
                        .append(""** Trader's ID: "")
                        .append(dispute.getTraderId())
                        .append(""\n*******************************************************************************************\n"")
                        .append(""\n"");
                dispute.getChatMessages().forEach(m -> {
                    String role = m.isSenderIsTrader() ? "">> Trader's msg: "" : ""<< Arbitrator's msg: "";
                    stringBuilder.append(role)
                            .append(m.getMessage())
                            .append(""\n"");
                });
                stringBuilder.append(""\n"");
            });
            stringBuilder.append(""\n"");
        });
        String message = stringBuilder.toString();
        // We don't translate that as it is not intended for the public
        new Popup().headLine(""Detailed text dump for "" + disputeGroups.size() + "" disputes"")
                .maxMessageLength(1000)
                .information(message)
                .width(1200)
                .actionButtonText(""Copy to clipboard"")
                .onAction(() -> Utilities.copyToClipboard(message))
                .show();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Table
    ///////////////////////////////////////////////////////////////////////////////////////////

    protected void setupTable() {
        tableView.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
        Label placeholder = new AutoTooltipLabel(Res.get(""support.noTickets""));
        placeholder.setWrapText(true);
        tableView.setPlaceholder(placeholder);
        tableView.getSelectionModel().clearSelection();

        tableView.getColumns().add(getContractColumn());
        maybeAddProcessColumnsForAgent();   // agent view prefers action buttons on the left

        TableColumn<Dispute, Dispute> dateColumn = getDateColumn();
        tableView.getColumns().add(dateColumn);

        TableColumn<Dispute, Dispute> tradeIdColumn = getTradeIdColumn();
        tableView.getColumns().add(tradeIdColumn);

        TableColumn<Dispute, Dispute> buyerOnionAddressColumn = getBuyerOnionAddressColumn();
        tableView.getColumns().add(buyerOnionAddressColumn);

        TableColumn<Dispute, Dispute> sellerOnionAddressColumn = getSellerOnionAddressColumn();
        tableView.getColumns().add(sellerOnionAddressColumn);

        TableColumn<Dispute, Dispute> marketColumn = getMarketColumn();
        tableView.getColumns().add(marketColumn);

        tableView.getColumns().add(getRoleColumn());

        maybeAddAgentColumn();

        stateColumn = getStateColumn();
        tableView.getColumns().add(stateColumn);

        // client view has the chat button to the right
        maybeAddChatColumnForClient();

        tradeIdColumn.setComparator(Comparator.comparing(Dispute::getTradeId));
        dateColumn.setComparator(Comparator.comparing(Dispute::getOpeningDate));
        buyerOnionAddressColumn.setComparator(Comparator.comparing(this::getBuyerOnionAddressColumnLabel));
        sellerOnionAddressColumn.setComparator(Comparator.comparing(this::getSellerOnionAddressColumnLabel));
        marketColumn.setComparator((o1, o2) -> CurrencyUtil.getCurrencyPair(o1.getContract().getOfferPayload().getCurrencyCode()).compareTo(o2.getContract().getOfferPayload().getCurrencyCode()));

        dateColumn.setSortType(TableColumn.SortType.DESCENDING);
        tableView.getSortOrder().add(dateColumn);
    }

    protected void maybeAddProcessColumnsForAgent() {
        // Only relevant client views will impl it
    }

    protected void maybeAddChatColumnForClient() {
        // Only relevant client views will impl it
    }

    protected void maybeAddAgentColumn() {
        // Only relevant client views will impl it
    }

    // Relevant client views will override that
    protected NodeAddress getAgentNodeAddress(Contract contract) {
        return null;
    }

    private TableColumn<Dispute, Dispute> getContractColumn() {
        TableColumn<Dispute, Dispute> column = new AutoTooltipTableColumn<>(Res.get(""shared.details"")) {
            {
                setMaxWidth(80);
                setMinWidth(65);
                getStyleClass().addAll(""first-column"", ""avatar-column"");
                setSortable(false);
            }
        };
        column.setCellValueFactory((dispute) -> new ReadOnlyObjectWrapper<>(dispute.getValue()));
        column.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Dispute, Dispute> call(TableColumn<Dispute, Dispute> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    Button button = getRegularIconButton(MaterialDesignIcon.INFORMATION_OUTLINE);
                                    JFXBadge badge = new JFXBadge(new Label(""""), Pos.BASELINE_RIGHT);
                                    badge.setPosition(Pos.TOP_RIGHT);
                                    badge.setVisible(item.isNew());
                                    badge.setText(""New"");
                                    badge.getStyleClass().add(""new"");
                                    newBadgeByDispute.put(item.getId(), badge);
                                    HBox hBox = new HBox(button, badge);
                                    setGraphic(hBox);
                                    button.setOnAction(e -> {
                                        tableView.getSelectionModel().select(this.getIndex());
                                        onOpenContract(item);
                                        item.setDisputeSeen(senderFlag());
                                        badge.setVisible(item.isNew());
                                    });
                                } else {
                                    setGraphic(null);
                                }
                            }
                        };
                    }
                });
        return column;
    }

    protected TableColumn<Dispute, Dispute> getProcessColumn() {
        TableColumn<Dispute, Dispute> column = new AutoTooltipTableColumn<>(Res.get(""support.process"")) {
            {
                setMaxWidth(50);
                setMinWidth(50);
                getStyleClass().addAll(""avatar-column"");
                setSortable(false);
            }
        };
        column.setCellValueFactory((dispute) -> new ReadOnlyObjectWrapper<>(dispute.getValue()));
        column.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Dispute, Dispute> call(TableColumn<Dispute, Dispute> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    Button button = getRegularIconButton(MaterialDesignIcon.GAVEL);
                                    button.setOnAction(e -> {
                                        tableView.getSelectionModel().select(this.getIndex());
                                        handleOnProcessDispute(item);
                                        item.setDisputeSeen(senderFlag());
                                        newBadgeByDispute.get(item.getId()).setVisible(item.isNew());
                                    });
                                    HBox hBox = new HBox(button);
                                    hBox.setAlignment(Pos.CENTER);
                                    setGraphic(hBox);
                                } else {
                                    setGraphic(null);
                                }
                            }
                        };
                    }
                });
        return column;
    }

    protected TableColumn<Dispute, Dispute> getChatColumn() {
        TableColumn<Dispute, Dispute> column = new AutoTooltipTableColumn<>(Res.get(""support.chat"")) {
            {
                setMaxWidth(40);
                setMinWidth(40);
                getStyleClass().addAll(""avatar-column"");
                setSortable(false);
            }
        };
        column.setCellValueFactory((dispute) -> new ReadOnlyObjectWrapper<>(dispute.getValue()));
        column.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Dispute, Dispute> call(TableColumn<Dispute, Dispute> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    String id = item.getId();
                                    Button button;
                                    if (!chatButtonByDispute.containsKey(id)) {
                                        button = FormBuilder.getIconButton(MaterialDesignIcon.COMMENT_MULTIPLE_OUTLINE);
                                        chatButtonByDispute.put(id, button);
                                        button.setTooltip(new Tooltip(Res.get(""tradeChat.openChat"")));
                                    } else {
                                        button = chatButtonByDispute.get(id);
                                    }
                                    JFXBadge chatBadge;
                                    if (!chatBadgeByDispute.containsKey(id)) {
                                        chatBadge = new JFXBadge(button);
                                        chatBadgeByDispute.put(id, chatBadge);
                                        chatBadge.setPosition(Pos.TOP_RIGHT);
                                    } else {
                                        chatBadge = chatBadgeByDispute.get(id);
                                    }
                                    button.setOnAction(e -> {
                                        tableView.getSelectionModel().select(this.getIndex());
                                        openChat(item);
                                    });
                                    if (!listenerByDispute.containsKey(id)) {
                                        ListChangeListener<ChatMessage> listener = c -> updateChatMessageCount(item, chatBadge);
                                        listenerByDispute.put(id, listener);
                                        item.getChatMessages().addListener(listener);
                                    }
                                    updateChatMessageCount(item, chatBadge);
                                    setGraphic(chatBadge);
                                } else {
                                    setGraphic(null);
                                }
                            }
                        };
                    }
                });
        return column;
    }

    private TableColumn<Dispute, Dispute> getDateColumn() {
        TableColumn<Dispute, Dispute> column = new AutoTooltipTableColumn<>(Res.get(""shared.date"")) {
            {
                setMinWidth(180);
            }
        };
        column.setCellValueFactory((dispute) -> new ReadOnlyObjectWrapper<>(dispute.getValue()));
        column.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Dispute, Dispute> call(TableColumn<Dispute, Dispute> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty)
                                    setText(DisplayUtils.formatDateTime(item.getOpeningDate()));
                                else
                                    setText("""");
                            }
                        };
                    }
                });
        return column;
    }

    private TableColumn<Dispute, Dispute> getTradeIdColumn() {
        TableColumn<Dispute, Dispute> column = new AutoTooltipTableColumn<>(Res.get(""shared.tradeId"")) {
            {
                setMinWidth(110);
            }
        };
        column.setCellValueFactory((dispute) -> new ReadOnlyObjectWrapper<>(dispute.getValue()));
        column.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Dispute, Dispute> call(TableColumn<Dispute, Dispute> column) {
                        return new TableCell<>() {
                            private HyperlinkWithIcon field;

                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);

                                if (item != null && !empty) {
                                    Optional<Trade> tradeOptional = tradeManager.getTradeById(item.getTradeId());
                                    if (tradeOptional.isPresent()) {
                                        field = new HyperlinkWithIcon(item.getShortTradeId());
                                        field.setMouseTransparent(false);
                                        field.setTooltip(new Tooltip(Res.get(""tooltip.openPopupForDetails"")));
                                        field.setOnAction(event -> tradeDetailsWindow.show(tradeOptional.get()));
                                    } else {
                                        setText(item.getShortTradeId());
                                    }
                                    setGraphic(field);
                                } else {
                                    setGraphic(null);
                                    setText("""");
                                    if (field != null)
                                        field.setOnAction(null);
                                }
                            }
                        };
                    }
                });
        return column;
    }

    private TableColumn<Dispute, Dispute> getBuyerOnionAddressColumn() {
        TableColumn<Dispute, Dispute> column = new AutoTooltipTableColumn<>(Res.get(""support.buyerAddress"")) {
            {
                setMinWidth(160);
            }
        };
        column.setCellValueFactory((dispute) -> new ReadOnlyObjectWrapper<>(dispute.getValue()));
        column.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Dispute, Dispute> call(TableColumn<Dispute, Dispute> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    setText(getBuyerOnionAddressColumnLabel(item));
                                    PeerInfoIconDispute peerInfoIconDispute = findOrCreateAvatar(tableRowProperty().get().getIndex(), item.getContract(), true);
                                    setGraphic(peerInfoIconDispute);
                                } else {
                                    setText("""");
                                    setGraphic(null);
                                }
                            }
                        };
                    }
                });
        return column;
    }

    private TableColumn<Dispute, Dispute> getSellerOnionAddressColumn() {
        TableColumn<Dispute, Dispute> column = new AutoTooltipTableColumn<>(Res.get(""support.sellerAddress"")) {
            {
                setMinWidth(160);
            }
        };
        column.setCellValueFactory((dispute) -> new ReadOnlyObjectWrapper<>(dispute.getValue()));
        column.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Dispute, Dispute> call(TableColumn<Dispute, Dispute> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    setText(getSellerOnionAddressColumnLabel(item));
                                    PeerInfoIconDispute peerInfoIconDispute = findOrCreateAvatar(tableRowProperty().get().getIndex(), item.getContract(), false);
                                    setGraphic(peerInfoIconDispute);
                                } else {
                                    setText("""");
                                    setGraphic(null);
                                }
                            }
                        };
                    }
                });
        return column;
    }


    private String getBuyerOnionAddressColumnLabel(Dispute item) {
        Contract contract = item.getContract();
        if (contract != null) {
            NodeAddress buyerNodeAddress = contract.getBuyerNodeAddress();
            if (buyerNodeAddress != null) {
                String nrOfDisputes = disputeManager.getNrOfDisputes(true, contract);
                long accountAge = accountAgeWitnessService.getAccountAge(contract.getBuyerPaymentAccountPayload(), contract.getBuyerPubKeyRing());
                String age = DisplayUtils.formatAccountAge(accountAge);
                String postFix = CurrencyUtil.isFiatCurrency(item.getContract().getOfferPayload().getCurrencyCode()) ? "" / "" + age : """";
                return buyerNodeAddress.getHostNameForDisplay() + "" ("" + nrOfDisputes + postFix + "")"";
            } else
                return Res.get(""shared.na"");
        } else {
            return Res.get(""shared.na"");
        }
    }

    private String getSellerOnionAddressColumnLabel(Dispute item) {
        Contract contract = item.getContract();
        if (contract != null) {
            NodeAddress sellerNodeAddress = contract.getSellerNodeAddress();
            if (sellerNodeAddress != null) {
                String nrOfDisputes = disputeManager.getNrOfDisputes(false, contract);
                long accountAge = accountAgeWitnessService.getAccountAge(contract.getSellerPaymentAccountPayload(), contract.getSellerPubKeyRing());
                String age = DisplayUtils.formatAccountAge(accountAge);
                String postFix = CurrencyUtil.isFiatCurrency(item.getContract().getOfferPayload().getCurrencyCode()) ? "" / "" + age : """";
                return sellerNodeAddress.getHostNameForDisplay() + "" ("" + nrOfDisputes + postFix + "")"";
            } else
                return Res.get(""shared.na"");
        } else {
            return Res.get(""shared.na"");
        }
    }

    private TableColumn<Dispute, Dispute> getMarketColumn() {
        TableColumn<Dispute, Dispute> column = new AutoTooltipTableColumn<>(Res.get(""shared.market"")) {
            {
                setMinWidth(80);
            }
        };
        column.setCellValueFactory((dispute) -> new ReadOnlyObjectWrapper<>(dispute.getValue()));
        column.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Dispute, Dispute> call(TableColumn<Dispute, Dispute> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty)
                                    setText(CurrencyUtil.getCurrencyPair(item.getContract().getOfferPayload().getCurrencyCode()));
                                else
                                    setText("""");
                            }
                        };
                    }
                });
        return column;
    }

    private TableColumn<Dispute, Dispute> getRoleColumn() {
        TableColumn<Dispute, Dispute> column = new AutoTooltipTableColumn<>(Res.get(""support.role"")) {
            {
                setMinWidth(130);
            }
        };
        column.setCellValueFactory((dispute) -> new ReadOnlyObjectWrapper<>(dispute.getValue()));
        column.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Dispute, Dispute> call(TableColumn<Dispute, Dispute> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    setText(item.getRoleString());
                                } else {
                                    setText("""");
                                }
                            }
                        };
                    }
                });
        return column;
    }

    protected TableColumn<Dispute, Dispute> getAgentColumn() {
        TableColumn<Dispute, Dispute> column = new AutoTooltipTableColumn<>(Res.get(""support.agent"")) {
            {
                setMinWidth(70);
            }
        };
        column.setCellValueFactory((dispute) -> new ReadOnlyObjectWrapper<>(dispute.getValue()));
        column.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Dispute, Dispute> call(TableColumn<Dispute, Dispute> column) {
                        return new TableCell<>() {
                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    NodeAddress agentNodeAddress = getAgentNodeAddress(item.getContract());
                                    if (agentNodeAddress == null) {
                                        setText(Res.get(""shared.na""));
                                        return;
                                    }

                                    String keyBaseUserName = DisputeAgentLookupMap.getKeyBaseUserName(agentNodeAddress.getFullAddress());
                                    setText(keyBaseUserName);
                                } else {
                                    setText("""");
                                }
                            }
                        };
                    }
                });
        return column;
    }

    private TableColumn<Dispute, Dispute> getStateColumn() {
        TableColumn<Dispute, Dispute> column = new AutoTooltipTableColumn<>(Res.get(""support.state"")) {
            {
                setMinWidth(50);
            }
        };
        column.getStyleClass().add(""last-column"");
        column.setCellValueFactory((dispute) -> new ReadOnlyObjectWrapper<>(dispute.getValue()));
        column.setCellFactory(
                new Callback<>() {
                    @Override
                    public TableCell<Dispute, Dispute> call(TableColumn<Dispute, Dispute> column) {
                        return new TableCell<>() {


                            ReadOnlyBooleanProperty closedProperty;
                            ChangeListener<Boolean> listener;

                            @Override
                            public void updateItem(final Dispute item, boolean empty) {
                                super.updateItem(item, empty);
                                if (item != null && !empty) {
                                    if (closedProperty != null) {
                                        closedProperty.removeListener(listener);
                                    }

                                    listener = (observable, oldValue, newValue) -> {
                                        setText(newValue ? Res.get(""support.closed"") : Res.get(""support.open""));
                                        if (getTableRow() != null)
                                            getTableRow().setOpacity(newValue && item.getBadgeCountProperty().get() == 0 ? 0.4 : 1);
                                        if (item.isClosed() && item == chatPopup.getSelectedDispute())
                                            chatPopup.closeChat(); // close the chat popup when the associated ticket is closed
                                    };
                                    closedProperty = item.isClosedProperty();
                                    closedProperty.addListener(listener);
                                    boolean isClosed = item.isClosed();
                                    setText(isClosed ? Res.get(""support.closed"") : Res.get(""support.open""));
                                    if (getTableRow() != null)
                                        getTableRow().setOpacity(isClosed && item.getBadgeCountProperty().get() == 0  ? 0.4 : 1);
                                } else {
                                    if (closedProperty != null) {
                                        closedProperty.removeListener(listener);
                                        closedProperty = null;
                                    }
                                    setText("""");
                                }
                            }
                        };
                    }
                });
        return column;
    }

    private void openChat(Dispute dispute) {
        chatPopup.openChat(dispute, getConcreteDisputeChatSession(dispute), getCounterpartyName());
        dispute.setDisputeSeen(senderFlag());
        newBadgeByDispute.get(dispute.getId()).setVisible(dispute.isNew());
        updateChatMessageCount(dispute, chatBadgeByDispute.get(dispute.getId()));
    }

    private void updateChatMessageCount(Dispute dispute, JFXBadge chatBadge) {
        if (chatBadge == null)
            return;
        // when the chat popup is active, we do not display new message count indicator for that item
        if (chatPopup.isChatShown() && selectedDispute != null && dispute.getId().equals(selectedDispute.getId())) {
            chatBadge.setText("""");
            chatBadge.setEnabled(false);
            chatBadge.refreshBadge();
            // have to UserThread.execute or the new message will be sent to peer as ""read""
            UserThread.execute(() -> dispute.setChatMessagesSeen(senderFlag()));
            return;
        }

        if (dispute.unreadMessageCount(senderFlag()) > 0) {
            chatBadge.setText(String.valueOf(dispute.unreadMessageCount(senderFlag())));
            chatBadge.setEnabled(true);
        } else {
            chatBadge.setText("""");
            chatBadge.setEnabled(false);
        }
        chatBadge.refreshBadge();
        dispute.refreshAlertLevel(senderFlag());
    }

    private String getCounterpartyName() {
        if (senderFlag()) {
            return Res.get(""offerbook.trader"");
        } else {
            return (disputeManager instanceof MediationManager) ? Res.get(""shared.mediator"") : Res.get(""shared.refundAgent"");
        }
    }

    private PeerInfoIconDispute findOrCreateAvatar(Integer tableRowId, Contract contract, boolean isBuyer) {
        NodeAddress nodeAddress = isBuyer ? contract.getBuyerNodeAddress() : contract.getSellerNodeAddress();
        String key = tableRowId + nodeAddress.getHostNameWithoutPostFix() + (isBuyer ? ""BUYER"" : ""SELLER"");
        Long accountAge = isBuyer ?
                accountAgeWitnessService.getAccountAge(contract.getBuyerPaymentAccountPayload(), contract.getBuyerPubKeyRing()) :
                accountAgeWitnessService.getAccountAge(contract.getSellerPaymentAccountPayload(), contract.getSellerPubKeyRing());
        PeerInfoIconDispute peerInfoIcon = new PeerInfoIconDispute(
                nodeAddress,
                disputeManager.getNrOfDisputes(isBuyer, contract),
                accountAge,
                preferences);
        peerInfoIcon.setCallback(this);
        avatarMap.put(key, peerInfoIcon);
        return peerInfoIcon;
    }

    @Override
    public void avatarTagUpdated() {
        // callback from one avatar letting us know that the user updated the tag text.
        // we update all avatars, as some could be sharing the same tag
        log.info(""Updating avatar tags, the avatarMap size is {}"", avatarMap.size());
        avatarMap.forEach((key, avatarIcon) -> {
            avatarIcon.refreshTag();
        });
    }

}",1,777 539 587 2000 650 2001 60 2002 44 2003 62 693 2004 46 2005 123 777 640 2006 123 2007 40 362 41 44 2008 40 362 41 44 2009 40 362 41 44 2010 40 362 41 44 2011 40 362 41 44 2012 40 362 41 44 2013 40 362 41 44 2014 40 362 41 44 2015 40 362 41 44 2016 40 362 41 44 2017 40 362 41 44 2018 40 362 41 44 2019 40 362 41 44 2020 40 362 41 44 2021 40 362 41 59 330 64 2022 773 657 2023 2024 59 2006 40 2023 2024 41 123 823 46 2024 61 2024 59 125 125 775 657 2025 60 63 650 2026 60 2027 356 2028 59 775 657 2029 2030 59 773 657 2031 2032 59 773 657 2033 2034 59 775 657 2035 2036 59 775 657 2037 2038 59 775 657 2039 2040 59 773 657 2041 2042 59 773 657 2043 2044 59 773 657 2045 2046 59 773 657 2047 2048 59 773 657 2049 2050 59 773 657 2051 2052 59 775 657 2053 2054 59 773 657 570 2055 59 775 2056 60 2027 62 2057 59 773 2058 60 2027 62 2059 59 64 2060 775 2027 2061 59 773 2062 2063 59 775 2064 60 2027 62 2065 59 775 2066 2067 59 773 2068 60 2069 62 2070 59 775 2071 2072 44 2073 44 2074 44 2075 44 2076 44 2077 59 773 657 2078 60 2069 44 2079 60 2080 356 2081 61 744 2082 60 62 40 41 59 64 2083 773 2079 60 2027 62 2084 59 330 775 2085 2086 59 775 2087 60 2027 44 2027 62 2088 59 773 2078 60 2069 44 2079 60 2080 356 2089 61 744 2082 60 62 40 41 59 773 2078 60 2069 44 2090 62 2091 61 744 2082 60 62 40 41 59 773 2078 60 2069 44 2092 62 2093 61 744 2082 60 62 40 41 59 773 2078 60 2069 44 2092 62 2094 61 744 2082 60 62 40 41 59 773 2078 60 2069 44 2095 62 2096 61 744 2082 60 62 40 41 59 775 2097 2098 59 331 330 331 777 2000 40 2025 60 63 650 2026 60 2027 356 2028 44 2029 2030 44 2031 2032 44 2033 2034 44 2035 2036 44 2037 2038 44 2039 2040 44 2041 2042 44 2043 2044 44 2045 2046 44 2047 2048 44 2049 2050 44 2051 2052 44 2053 2054 44 570 2055 41 123 823 46 2028 61 2028 59 823 46 2030 61 2030 59 823 46 2032 61 2032 59 823 46 2034 61 2034 59 823 46 2036 61 2036 59 823 46 2038 61 2038 59 823 46 2040 61 2040 59 823 46 2042 61 2042 59 823 46 2044 61 2044 59 823 46 2046 61 2046 59 823 46 2048 61 2048 59 823 46 2050 61 2050 59 823 46 2052 61 2052 59 823 46 2054 61 2054 59 823 46 2055 61 2055 59 2097 46 2099 2100 61 823 58 58 2101 59 2098 61 744 2097 40 2028 44 2036 44 2038 44 2100 41 59 125 64 2102 777 865 2103 40 41 123 2085 2104 61 744 2105 40 2106 46 2107 40 362 41 41 59 2108 46 2109 40 2104 44 744 2110 40 1502 44 1500 44 1500 44 1500 41 41 59 2108 46 2111 40 2104 44 2112 46 2113 41 59 2067 61 744 2066 40 41 59 2067 46 2114 40 2106 46 2107 40 362 41 41 59 2115 2116 61 744 2115 40 41 59 2116 46 2117 40 2118 46 2119 40 1503 41 41 59 2116 46 2120 40 2118 46 2121 40 1502 41 41 59 2067 46 2122 40 2116 41 59 2070 61 40 2123 44 2124 44 2125 41 45 62 2126 40 2067 46 2127 40 41 41 59 2108 46 2111 40 2067 44 2112 46 2128 41 59 2086 61 744 2085 40 41 59 2129 2130 61 2131 40 2132 46 2133 44 362 44 2086 41 59 2130 46 2134 40 41 46 2135 40 362 41 59 2108 46 2109 40 2086 44 744 2110 40 1502 44 1500 44 1500 44 1502 41 41 59 2086 46 2136 40 2137 41 59 2086 46 2138 40 2137 41 59 2086 46 2139 40 2137 41 59 2073 61 744 2071 40 2106 46 2107 40 362 41 41 59 2073 46 2140 40 2141 41 59 2073 46 2138 40 2137 41 59 2073 46 2139 40 2137 41 59 2108 46 2111 40 2073 44 2112 46 2113 41 59 2073 46 2142 40 2143 45 62 123 2144 40 41 59 125 41 59 2074 61 744 2071 40 2106 46 2107 40 362 41 41 59 2074 46 2140 40 2141 41 59 2074 46 2138 40 2137 41 59 2074 46 2139 40 2137 41 59 2108 46 2111 40 2074 44 2112 46 2113 41 59 2074 46 2142 40 2143 45 62 123 2145 40 41 59 125 41 59 2075 61 744 2071 40 2106 46 2107 40 362 41 41 59 2075 46 2140 40 2141 41 59 2075 46 2138 40 2137 41 59 2075 46 2139 40 2137 41 59 2108 46 2111 40 2075 44 2112 46 2113 41 59 2075 46 2142 40 2143 45 62 123 2146 40 41 59 125 41 59 2076 61 744 2071 40 2106 46 2107 40 362 41 41 59 2076 46 2138 40 2137 41 59 2076 46 2139 40 2137 41 59 2108 46 2111 40 2076 44 2112 46 2113 41 59 2076 46 2142 40 2143 45 62 123 2147 40 41 59 125 41 59 2077 61 744 2071 40 2106 46 2107 40 362 41 41 59 2077 46 2138 40 2137 41 59 2077 46 2139 40 2137 41 59 2108 46 2111 40 2077 44 2112 46 2113 41 59 2077 46 2142 40 2143 45 62 123 2148 40 41 59 125 41 59 2072 61 744 2071 40 2106 46 2107 40 362 41 41 59 2108 46 2111 40 2072 44 2112 46 2113 41 59 2072 46 2142 40 2143 45 62 123 744 2149 40 2050 44 2052 41 46 2150 40 41 59 125 41 59 2151 2152 61 744 2151 40 41 59 2108 46 2111 40 2152 44 2112 46 2128 41 59 2108 2153 61 744 2108 40 41 59 2153 46 2154 40 1502 41 59 2153 46 2155 40 41 46 2156 40 2104 44 2067 44 2086 44 2152 44 2073 44 2074 44 2075 44 2076 44 2077 44 2072 41 59 2002 46 2157 40 2153 44 2112 46 2113 41 59 2057 61 744 2056 60 62 40 41 59 2002 46 2157 40 2057 44 2112 46 2158 41 59 2057 46 2159 40 1504 41 59 2160 46 2155 40 41 46 2156 40 2153 44 2057 41 59 2161 40 41 59 125 64 2102 775 865 2162 40 41 123 2067 46 2163 40 41 46 2164 40 2070 41 59 2165 60 2027 62 2166 61 2028 46 2167 40 41 59 2065 61 744 2064 60 62 40 2166 41 59 2168 40 2067 46 2169 40 41 41 59 2059 61 744 2058 60 62 40 2065 41 59 2059 46 2170 40 41 46 2171 40 2057 46 2170 40 41 41 59 2057 46 2172 40 2059 41 59 330 2057 46 2173 40 2174 45 62 123 2175 60 2027 62 2176 61 744 2175 60 62 40 41 59 2176 46 2177 40 2178 45 62 123 688 40 2178 46 2179 40 41 323 1502 307 40 33 2176 46 2180 40 41 41 41 123 2181 40 2176 46 2182 40 41 41 59 125 125 41 59 792 2176 59 125 41 59 2063 61 2183 46 2184 40 2057 46 2185 40 41 46 2186 40 41 44 823 58 58 2187 41 59 2027 2188 61 2057 46 2185 40 41 46 2189 40 41 59 688 40 2188 340 2190 41 2057 46 2185 40 41 46 2191 40 2188 41 59 630 688 40 2059 46 2192 40 41 62 1500 41 2057 46 2185 40 41 46 2191 40 1500 41 59 2193 46 2194 40 2057 41 59 125 64 2102 775 865 2195 40 41 123 2067 46 2196 40 41 46 2197 40 2070 41 59 2059 46 2198 40 41 46 2199 40 41 59 2063 46 2200 40 41 59 125 331 330 331 330 775 865 2201 40 41 123 2084 61 2202 45 62 123 2202 46 2203 40 41 59 688 40 2202 46 2204 40 41 41 123 2205 40 2202 46 2206 40 41 41 59 125 630 688 40 2202 46 2207 40 41 41 123 2208 40 2202 46 2209 40 41 41 59 125 125 59 125 330 775 865 2210 40 41 123 330 2211 40 2028 46 2212 40 41 41 59 2028 46 2212 40 41 46 2213 40 2084 41 59 2028 46 2212 40 41 46 2214 40 2215 45 62 123 688 40 2215 46 2216 40 41 41 123 2217 60 2080 62 2218 61 2215 46 2219 40 41 59 330 330 688 40 33 2218 46 2220 40 41 307 33 2218 46 2221 40 2218 46 2222 40 41 45 1501 41 46 2223 40 2215 41 41 123 2224 40 2215 41 59 2225 40 41 59 125 125 125 41 59 125 330 775 865 2226 40 41 123 2227 40 2028 46 2228 40 41 41 59 2028 46 2228 40 41 46 2229 40 2084 41 59 125 775 539 2230 2231 40 41 59 775 539 2232 2233 40 2027 2234 41 59 775 539 570 2235 40 41 59 330 775 865 2236 40 2069 2237 41 123 2238 60 2006 62 2239 61 744 2238 60 62 40 2006 46 2240 41 59 2065 46 2241 40 2234 45 62 123 2239 46 2242 40 2243 40 2234 44 2237 41 41 59 792 2239 46 2244 40 41 340 2006 46 2245 59 125 41 59 688 40 2239 46 2246 40 41 323 2006 46 2247 41 123 2067 46 2248 40 41 46 2249 40 362 41 59 125 630 688 40 2239 46 2246 40 41 323 2006 46 2240 41 123 2067 46 2250 40 41 46 2251 40 362 41 59 125 630 688 40 2239 46 2246 40 41 323 2006 46 2252 41 123 2067 46 2253 40 41 46 2254 40 362 41 59 125 630 123 2067 46 2255 40 41 46 2256 40 362 43 2239 46 2246 40 41 46 2257 40 41 41 59 125 125 775 2006 2258 40 2027 2234 44 2069 2259 41 123 2069 2260 61 2259 46 2261 40 41 59 688 40 2260 46 2262 40 41 41 123 792 2006 46 2263 59 125 330 688 40 2260 46 2264 40 362 41 41 123 792 33 2234 46 2265 40 41 63 2006 46 2266 58 2006 46 2267 59 125 688 40 2234 46 2268 40 41 46 2261 40 41 46 2269 40 2260 41 41 123 792 2006 46 2270 59 125 688 40 2271 46 2272 40 2234 46 2273 40 41 41 46 2261 40 41 46 2269 40 2260 41 41 123 792 2006 46 2274 59 125 688 40 2234 46 2275 40 41 46 2276 40 41 46 2277 40 41 46 2269 40 2260 41 41 123 792 2006 46 2278 59 125 688 40 2234 46 2275 40 41 46 2279 40 41 46 2277 40 41 46 2269 40 2260 41 41 123 792 2006 46 2280 59 125 688 40 2234 46 2275 40 41 46 2281 40 41 340 2282 307 2234 46 2275 40 41 46 2281 40 41 46 2283 40 41 46 2261 40 41 46 2269 40 2260 41 41 123 792 2006 46 2284 59 125 688 40 2234 46 2275 40 41 46 2285 40 41 340 2282 307 2234 46 2275 40 41 46 2285 40 41 46 2283 40 41 46 2261 40 41 46 2269 40 2260 41 41 123 792 2006 46 2286 59 125 688 40 2234 46 2287 40 41 340 2282 307 2234 46 2287 40 41 46 2269 40 2260 41 41 123 792 2006 46 2288 59 125 688 40 2234 46 2289 40 41 340 2282 307 2234 46 2289 40 41 46 2269 40 2260 41 41 123 792 2006 46 2290 59 125 688 40 2234 46 2291 40 41 340 2282 307 2234 46 2291 40 41 46 2269 40 2260 41 41 123 792 2006 46 2292 59 125 2293 2294 61 2234 46 2295 40 41 46 2296 40 41 59 688 40 2294 340 2282 41 123 2080 2297 61 2294 46 2298 40 41 59 688 40 2297 340 2282 307 2297 46 2299 40 41 46 2261 40 41 46 2269 40 2260 41 41 123 792 2006 46 2300 59 125 688 40 2294 46 2301 40 41 46 2302 40 41 46 2261 40 41 46 2269 40 2260 41 41 123 792 2006 46 2303 59 125 125 688 40 2234 46 2304 40 41 46 2261 40 41 46 2269 40 2260 41 41 123 792 2006 46 2305 59 125 792 2006 46 2306 59 125 330 330 775 865 2307 40 41 123 688 40 2308 40 41 41 123 2028 46 2309 40 2061 44 2310 41 59 125 125 330 330 330 775 865 2311 40 41 123 2312 60 2313 62 2314 61 2028 46 2315 40 2061 41 59 688 40 2314 46 2316 40 41 307 2314 46 2317 40 41 46 2318 40 41 340 2319 307 2314 46 2317 40 41 46 2318 40 41 46 2320 40 41 62 1500 41 123 2061 46 2321 40 41 59 2028 46 2322 40 41 59 2323 40 2061 41 59 125 630 123 744 2324 40 41 46 2325 40 2326 46 2317 40 362 41 41 46 2327 40 41 59 125 125 775 865 2328 40 2027 2234 41 123 330 125 775 570 2329 40 41 123 688 40 2061 340 2330 307 2061 46 2331 40 41 307 2332 40 2061 44 33 2028 46 2333 40 2061 41 41 41 123 2061 46 2334 40 41 59 2328 40 2061 41 59 2028 46 2335 40 41 59 2336 40 2061 41 59 792 2337 59 125 630 123 744 2338 40 41 46 2339 40 2340 46 2341 40 362 41 41 46 2342 40 41 59 792 2343 59 125 125 773 570 2344 40 2027 2234 44 570 2345 41 123 2346 2347 61 2345 63 2234 46 2348 40 41 46 2349 40 41 58 2234 46 2348 40 41 46 2350 40 2030 46 2351 40 41 41 59 688 40 2352 46 2353 40 41 307 33 2354 46 2355 40 2347 46 2356 40 41 41 41 123 792 2357 59 125 792 2358 46 2359 40 2032 46 2360 40 41 46 2361 40 41 44 2347 41 59 125 331 330 331 775 865 2362 40 2027 2234 41 123 2234 46 2363 40 2235 40 41 41 59 2044 46 2364 40 2234 41 59 125 773 865 2365 40 2027 2234 41 123 688 40 2234 323 2366 41 123 2061 61 2366 59 125 630 688 40 2061 340 2234 41 123 2061 61 2234 59 125 2073 46 2367 40 2061 323 2366 309 33 2061 46 2368 40 41 41 59 2074 46 2367 40 2061 323 2366 309 2061 46 2368 40 41 41 59 2075 46 2367 40 2061 323 2366 41 59 125 331 330 331 330 773 865 2369 40 2370 60 63 650 2027 62 2371 41 123 2371 46 2372 40 2234 45 62 123 2079 60 2080 62 2373 61 2374 45 62 123 2374 46 2375 40 41 59 688 40 2374 46 2376 40 41 41 123 2374 46 2377 40 41 46 2372 40 2378 45 62 123 688 40 2234 46 2379 40 41 41 123 688 40 2378 46 2380 40 2234 41 41 123 2365 40 2381 41 59 125 630 123 2365 40 2234 41 59 2329 40 41 59 125 125 125 41 59 125 330 125 59 2234 46 2382 40 41 46 2383 40 2373 41 59 2081 46 2384 40 2234 46 2385 40 41 44 2373 41 59 125 41 59 125 330 773 865 2386 40 2370 60 63 650 2027 62 2387 41 123 2387 46 2388 40 2234 45 62 123 2069 2389 61 2234 46 2390 40 41 59 688 40 2081 46 2391 40 2389 41 41 123 2079 60 2080 62 2392 61 2081 46 2393 40 2389 41 59 2234 46 2394 40 41 46 2395 40 2392 41 59 2081 46 2396 40 2389 41 59 125 125 41 59 125 773 865 2397 40 41 123 688 40 2061 340 2398 41 123 2399 2400 61 2061 46 2401 40 41 59 2402 2403 59 2404 2405 61 2061 46 2406 40 41 59 688 40 2400 46 2407 40 2405 46 2408 40 41 41 41 123 2403 61 2405 46 2409 40 41 59 125 630 123 2403 61 2405 46 2410 40 41 59 125 744 2411 40 2042 44 2400 44 2403 44 2055 41 46 2412 40 41 59 125 125 773 865 2413 40 41 123 2078 60 2069 44 2370 60 2027 356 2414 61 744 2082 60 62 40 41 59 2078 60 2069 44 2370 60 2027 356 2415 61 744 2082 60 62 40 41 59 2028 46 2416 40 41 46 2417 40 2234 45 62 123 2069 2418 61 2234 46 2419 40 41 59 2370 60 2027 62 2420 59 688 40 33 2414 46 2421 40 2418 41 41 2414 46 2422 40 2418 44 744 2423 60 62 40 41 41 59 2420 61 2414 46 2424 40 2418 41 59 2420 46 2425 40 2234 41 59 125 41 59 2370 60 2370 60 2027 356 2426 61 744 2427 60 62 40 41 59 2414 46 2417 40 40 2428 44 2429 41 45 62 2426 46 2430 40 2429 41 41 59 2426 46 2431 40 2432 46 2433 40 2434 45 62 33 2434 46 2435 40 41 63 2434 46 2436 40 1500 41 46 2437 40 41 58 744 2438 40 1500 41 41 41 59 2439 2440 61 744 2439 40 41 59 2439 2441 61 744 2439 40 41 59 2441 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 59 2078 60 2443 44 2438 62 2444 61 2054 46 2445 40 41 59 2446 2447 61 744 2446 40 362 41 59 2448 2449 61 744 2448 40 41 59 2426 46 2417 40 2450 45 62 123 688 40 2450 46 2451 40 41 62 1500 41 123 2027 2452 61 2450 46 2436 40 1500 41 59 2438 2453 61 2452 46 2437 40 41 59 2454 2455 61 2452 46 2456 40 41 59 2069 2457 61 2455 46 2458 40 41 63 362 58 362 59 2069 2459 61 2455 46 2458 40 41 63 362 58 362 59 2069 2460 61 2452 46 2461 40 41 63 2457 58 2459 59 2462 2463 61 2452 46 2464 40 41 46 2436 40 41 59 2069 2465 61 2463 340 2466 307 2463 46 2467 40 41 323 2462 46 2468 46 2469 63 362 58 362 59 2069 2470 61 2463 340 2466 63 2463 46 2471 40 41 46 2472 40 41 58 362 59 2069 2473 61 2463 340 2466 63 2463 46 2474 40 41 46 2472 40 41 58 362 59 704 2475 61 2449 46 2476 40 41 59 2069 2477 61 2447 46 2478 40 2452 46 2479 40 41 41 59 2069 2480 61 2447 46 2478 40 2453 41 59 330 704 2481 61 1500 59 688 40 2463 340 2466 41 123 2438 2482 61 2463 46 2483 40 41 59 2481 61 2444 46 2484 40 41 46 2485 40 41 46 2486 40 2487 45 62 2487 46 2488 40 41 46 2489 40 2482 41 41 46 2490 40 41 46 2414 40 2078 46 2491 58 58 2492 41 46 2493 40 1500 41 59 125 2440 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 2475 41 46 2442 40 362 41 59 688 40 2481 62 1500 41 123 2440 46 2442 40 362 41 46 2442 40 2481 41 46 2442 40 362 41 59 125 2440 46 2442 40 362 41 46 2442 40 2477 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 2480 41 46 2442 40 362 41 59 2069 2494 61 2452 46 2495 40 41 59 2441 46 2442 40 362 41 46 2442 40 2475 41 46 2442 40 362 41 59 688 40 2481 62 1500 41 123 2441 46 2442 40 2481 41 46 2442 40 362 41 59 125 630 123 2441 46 2442 40 362 41 59 125 2441 46 2442 40 2452 46 2496 40 41 63 362 58 362 41 46 2442 40 362 41 46 2442 40 2477 41 46 2442 40 362 41 46 2442 40 2452 46 2497 40 41 41 46 2442 40 362 41 46 2442 40 2494 44 2494 46 2498 40 41 45 1502 44 2494 46 2498 40 41 41 46 2442 40 362 41 46 2442 40 2480 41 46 2442 40 362 41 59 2069 2499 61 362 59 688 40 2463 340 2466 41 123 2438 2500 61 2463 46 2501 40 41 59 726 2502 61 2500 46 2503 40 41 45 2453 46 2503 40 41 59 2069 2504 61 2447 46 2478 40 2500 41 59 2069 2505 61 2506 46 2507 40 2502 41 59 2440 46 2442 40 362 41 46 2442 40 2504 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 2505 41 46 2442 40 362 41 59 2441 46 2442 40 2504 41 46 2442 40 362 41 46 2442 40 2505 41 46 2442 40 362 41 59 125 630 123 2441 46 2442 40 362 41 46 2442 40 362 41 59 125 2069 2508 61 2509 46 2436 40 2455 46 2510 40 41 41 59 2069 2511 61 2512 46 2513 40 2455 46 2514 40 41 46 2515 40 41 41 59 2069 2516 61 2455 46 2517 40 41 46 2472 40 41 59 2069 2518 61 2519 46 2520 40 2455 46 2514 40 41 46 2521 40 41 41 46 2472 40 41 59 2069 2522 61 2519 46 2520 40 2455 46 2514 40 41 46 2523 40 41 41 46 2472 40 41 59 2440 46 2442 40 362 41 46 2442 40 2508 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 2511 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 2516 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 2518 41 46 2442 40 362 41 46 2442 40 2522 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 2460 41 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 2470 41 46 2442 40 362 41 46 2442 40 2473 41 46 2442 40 362 41 46 2442 40 2465 41 46 2442 40 362 41 59 2069 2524 61 2525 46 2526 40 2455 46 2527 40 41 340 2466 63 2455 46 2527 40 41 46 2528 40 41 46 2529 40 362 44 362 41 46 2529 40 362 44 362 41 58 362 44 1503 41 59 2069 2530 61 2525 46 2526 40 2455 46 2531 40 41 340 2466 63 2455 46 2531 40 41 46 2528 40 41 46 2529 40 362 44 362 41 46 2529 40 362 44 362 41 58 362 44 1503 41 59 2069 2532 61 2455 46 2533 40 41 46 2534 40 41 59 2069 2535 61 2455 46 2536 40 41 46 2534 40 41 59 2441 46 2442 40 2511 41 46 2442 40 362 41 46 2442 40 2516 46 2529 40 362 44 362 41 41 46 2442 40 362 41 46 2442 40 2508 41 46 2442 40 362 41 46 2442 40 2524 41 46 2442 40 362 41 46 2442 40 2530 41 46 2442 40 362 41 46 2442 40 2532 46 2529 40 362 44 362 41 41 46 2442 40 362 41 46 2442 40 2535 46 2529 40 362 44 362 41 41 46 2442 40 362 41 46 2442 40 2518 46 2529 40 362 44 362 41 41 46 2442 40 362 41 46 2442 40 2522 46 2529 40 362 44 362 41 41 46 2442 40 362 41 46 2442 40 2460 41 46 2442 40 362 41 46 2442 40 2470 46 2529 40 362 44 362 41 41 46 2442 40 362 41 46 2442 40 2473 46 2529 40 362 44 362 41 41 46 2442 40 362 41 46 2442 40 2465 41 46 2442 40 362 41 59 688 40 2463 340 2466 41 123 2462 46 2537 2538 61 2463 46 2539 40 41 59 688 40 2452 46 2540 40 41 46 2436 40 41 46 2539 40 41 340 2466 41 123 2415 46 2541 40 2538 46 2542 40 41 44 744 2427 60 62 40 41 41 59 2415 46 2436 40 2538 46 2542 40 41 41 46 2430 40 2452 41 59 2440 46 2442 40 362 41 46 2442 40 2538 46 2542 40 41 41 46 2442 40 362 41 59 2441 46 2442 40 2538 46 2542 40 41 41 46 2442 40 362 41 59 125 630 123 2441 46 2442 40 362 41 59 125 2499 61 2463 46 2543 40 41 46 2436 40 41 59 2440 46 2442 40 362 41 46 2442 40 2499 41 46 2442 40 362 41 59 2441 46 2442 40 2499 41 46 2442 40 362 41 59 125 630 123 2441 46 2442 40 362 41 59 125 330 330 688 40 2450 46 2451 40 41 62 1501 41 123 2027 2544 61 2450 46 2436 40 1501 41 59 2462 2545 61 2544 46 2464 40 41 46 2436 40 41 59 688 40 2545 340 2466 41 123 2069 2546 61 2545 46 2547 40 41 46 2436 40 41 59 688 40 33 2546 46 2548 40 2499 41 41 123 2440 46 2442 40 362 41 46 2442 40 2546 41 46 2442 40 362 41 59 2441 46 2442 40 2546 41 46 2442 40 362 41 59 125 630 123 2441 46 2442 40 362 41 59 125 125 125 125 125 41 59 2440 46 2442 40 362 41 46 2442 40 362 41 46 2442 40 362 41 59 2415 46 2417 40 40 2549 44 2550 41 45 62 123 2440 46 2442 40 2549 41 46 2442 40 362 41 46 2442 40 2550 46 2551 40 41 41 46 2442 40 362 41 59 125 41 59 2069 2552 61 2440 46 2553 40 41 59 744 2554 40 41 46 2555 40 362 43 2426 46 2556 40 41 43 362 41 46 2557 40 1504 41 46 2558 40 2552 41 46 2559 40 1505 41 46 2560 40 362 41 46 2561 40 40 41 45 62 2562 46 2563 40 2552 41 41 46 2564 40 362 41 46 2565 40 40 41 45 62 2562 46 2563 40 2441 46 2553 40 41 41 41 46 2566 40 41 59 125 773 865 2567 40 41 123 2078 60 2069 44 2370 60 2027 356 2568 61 744 2082 60 62 40 41 59 2028 46 2569 40 41 46 2570 40 2234 45 62 123 2069 2571 61 2234 46 2572 40 41 59 2370 60 2027 62 2573 59 688 40 33 2568 46 2574 40 2571 41 41 2568 46 2575 40 2571 44 744 2576 60 62 40 41 41 59 2573 61 2568 46 2577 40 2571 41 59 2573 46 2578 40 2234 41 59 125 41 59 2370 60 2370 60 2027 356 2579 61 744 2580 60 62 40 41 59 2568 46 2570 40 40 2581 44 2582 41 45 62 2579 46 2583 40 2582 41 41 59 2579 46 2584 40 2585 46 2586 40 2587 45 62 33 2587 46 2588 40 41 63 2587 46 2589 40 1500 41 46 2590 40 41 58 744 2591 40 1500 41 41 41 59 2592 2593 61 744 2592 40 41 59 330 2579 46 2570 40 2594 45 62 123 2027 2595 61 2594 46 2589 40 1500 41 59 2593 46 2596 40 362 41 46 2596 40 362 41 46 2596 40 2595 46 2597 40 41 41 46 2596 40 362 41 46 2596 40 362 41 46 2596 40 2598 46 2599 40 2595 46 2590 40 41 41 41 46 2596 40 362 41 46 2596 40 362 41 46 2596 40 2595 46 2600 40 41 41 46 2596 40 362 41 59 688 40 2595 46 2601 40 41 46 2589 40 41 340 2602 307 2595 46 2601 40 41 46 2589 40 41 46 2603 40 41 340 2602 41 123 2593 46 2596 40 362 41 46 2596 40 2595 46 2601 40 41 46 2589 40 41 46 2603 40 41 41 46 2596 40 362 41 59 125 2593 46 2596 40 362 41 46 2596 40 362 41 59 2594 46 2570 40 2234 45 62 123 2593 46 2596 40 362 41 46 2596 40 362 41 46 2596 40 2234 46 2604 40 41 41 46 2596 40 362 41 46 2596 40 362 41 59 2234 46 2605 40 41 46 2570 40 2606 45 62 123 2069 2607 61 2606 46 2608 40 41 63 362 58 362 59 2593 46 2596 40 2607 41 46 2596 40 2606 46 2609 40 41 41 46 2596 40 362 41 59 125 41 59 2593 46 2596 40 362 41 59 125 41 59 2593 46 2596 40 362 41 59 125 41 59 2069 2610 61 2593 46 2611 40 41 59 330 744 2612 40 41 46 2613 40 362 43 2579 46 2614 40 41 43 362 41 46 2615 40 1504 41 46 2616 40 2610 41 46 2617 40 1505 41 46 2618 40 362 41 46 2619 40 40 41 45 62 2620 46 2621 40 2610 41 41 46 2622 40 41 59 125 331 330 331 775 865 2623 40 41 123 2057 46 2624 40 2056 46 2625 41 59 2085 2626 61 744 2627 40 2628 46 2629 40 362 41 41 59 2626 46 2630 40 2631 41 59 2057 46 2632 40 2626 41 59 2057 46 2633 40 41 46 2634 40 41 59 2057 46 2635 40 41 46 2636 40 2637 40 41 41 59 2638 40 41 59 330 2087 60 2027 44 2027 62 2639 61 2640 40 41 59 2057 46 2635 40 41 46 2636 40 2639 41 59 2087 60 2027 44 2027 62 2641 61 2642 40 41 59 2057 46 2635 40 41 46 2636 40 2641 41 59 2087 60 2027 44 2027 62 2643 61 2644 40 41 59 2057 46 2635 40 41 46 2636 40 2643 41 59 2087 60 2027 44 2027 62 2645 61 2646 40 41 59 2057 46 2635 40 41 46 2636 40 2645 41 59 2087 60 2027 44 2027 62 2647 61 2648 40 41 59 2057 46 2635 40 41 46 2636 40 2647 41 59 2057 46 2635 40 41 46 2636 40 2649 40 41 41 59 2650 40 41 59 2088 61 2651 40 41 59 2057 46 2635 40 41 46 2636 40 2088 41 59 330 2652 40 41 59 2641 46 2653 40 2654 46 2655 40 2027 58 58 2656 41 41 59 2639 46 2653 40 2654 46 2655 40 2027 58 58 2657 41 41 59 2643 46 2653 40 2654 46 2655 40 823 58 58 2658 41 41 59 2645 46 2653 40 2654 46 2655 40 823 58 58 2659 41 41 59 2647 46 2653 40 40 2660 44 2661 41 45 62 2662 46 2663 40 2660 46 2664 40 41 46 2665 40 41 46 2666 40 41 41 46 2667 40 2661 46 2664 40 41 46 2665 40 41 46 2666 40 41 41 41 59 2639 46 2668 40 2087 46 2669 46 2670 41 59 2057 46 2671 40 41 46 2636 40 2639 41 59 125 775 865 2672 40 41 123 330 125 775 865 2673 40 41 123 330 125 775 865 2674 40 41 123 330 125 330 775 2675 2676 40 2677 2678 41 123 792 2679 59 125 773 2087 60 2027 44 2027 62 2680 40 41 123 2087 60 2027 44 2027 62 2681 61 744 2682 60 62 40 2683 46 2684 40 362 41 41 123 123 2685 40 1503 41 59 2686 40 1503 41 59 2687 40 41 46 2688 40 362 44 362 41 59 2689 40 2690 41 59 125 125 59 2681 46 2691 40 40 2234 41 45 62 744 2692 60 62 40 2234 46 2693 40 41 41 41 59 2681 46 2694 40 744 2695 60 62 40 41 123 64 2102 777 2696 60 2027 44 2027 62 2697 40 2087 60 2027 44 2027 62 2681 41 123 792 744 2696 60 62 40 41 123 64 2102 777 865 2698 40 657 2027 2699 44 570 2700 41 123 818 46 2698 40 2699 44 2700 41 59 688 40 2699 340 2701 307 33 2700 41 123 2090 2702 61 2703 40 2704 46 2705 41 59 2092 2706 61 744 2092 40 744 2085 40 362 41 44 2707 46 2708 41 59 2706 46 2709 40 2707 46 2710 41 59 2706 46 2711 40 2699 46 2712 40 41 41 59 2706 46 2713 40 362 41 59 2706 46 2714 40 41 46 2715 40 362 41 59 2094 46 2716 40 2699 46 2717 40 41 44 2706 41 59 2718 2719 61 744 2718 40 2702 44 2706 41 59 2720 40 2719 41 59 2702 46 2721 40 2722 45 62 123 2057 46 2723 40 41 46 2724 40 823 46 2725 40 41 41 59 2362 40 2699 41 59 2699 46 2726 40 2235 40 41 41 59 2706 46 2711 40 2699 46 2712 40 41 41 59 125 41 59 125 630 123 2727 40 2701 41 59 125 125 125 59 125 125 41 59 792 2681 59 125 775 2087 60 2027 44 2027 62 2728 40 41 123 2087 60 2027 44 2027 62 2729 61 744 2730 60 62 40 2731 46 2732 40 362 41 41 123 123 2733 40 1503 41 59 2734 40 1503 41 59 2735 40 41 46 2736 40 362 41 59 2737 40 2738 41 59 125 125 59 2729 46 2739 40 40 2234 41 45 62 744 2740 60 62 40 2234 46 2741 40 41 41 41 59 2729 46 2742 40 744 2743 60 62 40 41 123 64 2102 777 2744 60 2027 44 2027 62 2745 40 2087 60 2027 44 2027 62 2729 41 123 792 744 2744 60 62 40 41 123 64 2102 777 865 2746 40 657 2027 2747 44 570 2748 41 123 818 46 2746 40 2747 44 2748 41 59 688 40 2747 340 2749 307 33 2748 41 123 2090 2750 61 2751 40 2752 46 2753 41 59 2750 46 2754 40 2755 45 62 123 2057 46 2756 40 41 46 2757 40 823 46 2758 40 41 41 59 2328 40 2747 41 59 2747 46 2759 40 2235 40 41 41 59 2094 46 2732 40 2747 46 2760 40 41 41 46 2761 40 2747 46 2762 40 41 41 59 125 41 59 2763 2764 61 744 2763 40 2750 41 59 2764 46 2765 40 2766 46 2767 41 59 2768 40 2764 41 59 125 630 123 2769 40 2749 41 59 125 125 125 59 125 125 41 59 792 2729 59 125 775 2087 60 2027 44 2027 62 2770 40 41 123 2087 60 2027 44 2027 62 2771 61 744 2772 60 62 40 2773 46 2774 40 362 41 41 123 123 2775 40 1503 41 59 2776 40 1503 41 59 2777 40 41 46 2778 40 362 41 59 2779 40 2780 41 59 125 125 59 2771 46 2781 40 40 2234 41 45 62 744 2782 60 62 40 2234 46 2783 40 41 41 41 59 2771 46 2784 40 744 2785 60 62 40 41 123 64 2102 777 2786 60 2027 44 2027 62 2787 40 2087 60 2027 44 2027 62 2771 41 123 792 744 2786 60 62 40 41 123 64 2102 777 865 2788 40 657 2027 2789 44 570 2790 41 123 818 46 2788 40 2789 44 2790 41 59 688 40 2789 340 2791 307 33 2790 41 123 2069 2792 61 2789 46 2793 40 41 59 2090 2794 59 688 40 33 2091 46 2795 40 2792 41 41 123 2794 61 2796 46 2797 40 2798 46 2799 41 59 2091 46 2800 40 2792 44 2794 41 59 2794 46 2801 40 744 2802 40 2773 46 2774 40 362 41 41 41 59 125 630 123 2794 61 2091 46 2774 40 2792 41 59 125 2092 2803 59 688 40 33 2093 46 2795 40 2792 41 41 123 2803 61 744 2092 40 2794 41 59 2093 46 2804 40 2792 44 2803 41 59 2803 46 2805 40 2806 46 2807 41 59 125 630 123 2803 61 2093 46 2774 40 2792 41 59 125 2794 46 2808 40 2809 45 62 123 2057 46 2810 40 41 46 2811 40 823 46 2812 40 41 41 59 2813 40 2789 41 59 125 41 59 688 40 33 2089 46 2795 40 2792 41 41 123 2079 60 2080 62 2814 61 2815 45 62 2816 40 2789 44 2803 41 59 2089 46 2817 40 2792 44 2814 41 59 2789 46 2818 40 41 46 2819 40 2814 41 59 125 2820 40 2789 44 2803 41 59 2821 40 2803 41 59 125 630 123 2822 40 2791 41 59 125 125 125 59 125 125 41 59 792 2771 59 125 773 2087 60 2027 44 2027 62 2823 40 41 123 2087 60 2027 44 2027 62 2824 61 744 2825 60 62 40 2826 46 2827 40 362 41 41 123 123 2828 40 1504 41 59 125 125 59 2824 46 2829 40 40 2234 41 45 62 744 2830 60 62 40 2234 46 2831 40 41 41 41 59 2824 46 2832 40 744 2833 60 62 40 41 123 64 2102 777 2834 60 2027 44 2027 62 2835 40 2087 60 2027 44 2027 62 2824 41 123 792 744 2834 60 62 40 41 123 64 2102 777 865 2836 40 657 2027 2837 44 570 2838 41 123 818 46 2836 40 2837 44 2838 41 59 688 40 2837 340 2839 307 33 2838 41 2840 40 2841 46 2842 40 2837 46 2843 40 41 41 41 59 630 2840 40 362 41 59 125 125 59 125 125 41 59 792 2824 59 125 773 2087 60 2027 44 2027 62 2844 40 41 123 2087 60 2027 44 2027 62 2845 61 744 2846 60 62 40 2847 46 2848 40 362 41 41 123 123 2849 40 1504 41 59 125 125 59 2845 46 2850 40 40 2234 41 45 62 744 2851 60 62 40 2234 46 2852 40 41 41 41 59 2845 46 2853 40 744 2854 60 62 40 41 123 64 2102 777 2855 60 2027 44 2027 62 2856 40 2087 60 2027 44 2027 62 2845 41 123 792 744 2855 60 62 40 41 123 773 2857 2858 59 64 2102 777 865 2859 40 657 2027 2860 44 570 2861 41 123 818 46 2859 40 2860 44 2861 41 59 688 40 2860 340 2862 307 33 2861 41 123 2863 60 2864 62 2865 61 2034 46 2866 40 2860 46 2867 40 41 41 59 688 40 2865 46 2868 40 41 41 123 2858 61 744 2857 40 2860 46 2869 40 41 41 59 2858 46 2870 40 2871 41 59 2858 46 2872 40 744 2873 40 2847 46 2848 40 362 41 41 41 59 2858 46 2874 40 2875 45 62 2046 46 2876 40 2865 46 2848 40 41 41 41 59 125 630 123 2877 40 2860 46 2878 40 41 41 59 125 2879 40 2858 41 59 125 630 123 2880 40 2862 41 59 2881 40 362 41 59 688 40 2858 340 2862 41 2858 46 2882 40 2862 41 59 125 125 125 59 125 125 41 59 792 2845 59 125 773 2087 60 2027 44 2027 62 2883 40 41 123 2087 60 2027 44 2027 62 2884 61 744 2885 60 62 40 2886 46 2887 40 362 41 41 123 123 2888 40 1504 41 59 125 125 59 2884 46 2889 40 40 2234 41 45 62 744 2890 60 62 40 2234 46 2891 40 41 41 41 59 2884 46 2892 40 744 2893 60 62 40 41 123 64 2102 777 2894 60 2027 44 2027 62 2895 40 2087 60 2027 44 2027 62 2884 41 123 792 744 2894 60 62 40 41 123 64 2102 777 865 2896 40 657 2027 2897 44 570 2898 41 123 818 46 2896 40 2897 44 2898 41 59 688 40 2897 340 2899 307 33 2898 41 123 2900 40 2901 40 2897 41 41 59 2095 2902 61 2903 40 2904 40 41 46 2887 40 41 46 2905 40 41 44 2897 46 2906 40 41 44 2907 41 59 2908 40 2902 41 59 125 630 123 2909 40 362 41 59 2910 40 2899 41 59 125 125 125 59 125 125 41 59 792 2884 59 125 773 2087 60 2027 44 2027 62 2911 40 41 123 2087 60 2027 44 2027 62 2912 61 744 2913 60 62 40 2914 46 2915 40 362 41 41 123 123 2916 40 1504 41 59 125 125 59 2912 46 2917 40 40 2234 41 45 62 744 2918 60 62 40 2234 46 2919 40 41 41 41 59 2912 46 2920 40 744 2921 60 62 40 41 123 64 2102 777 2922 60 2027 44 2027 62 2923 40 2087 60 2027 44 2027 62 2912 41 123 792 744 2922 60 62 40 41 123 64 2102 777 865 2924 40 657 2027 2925 44 570 2926 41 123 818 46 2924 40 2925 44 2926 41 59 688 40 2925 340 2927 307 33 2926 41 123 2928 40 2929 40 2925 41 41 59 2095 2930 61 2931 40 2932 40 41 46 2915 40 41 46 2933 40 41 44 2925 46 2934 40 41 44 2935 41 59 2936 40 2930 41 59 125 630 123 2937 40 362 41 59 2938 40 2927 41 59 125 125 125 59 125 125 41 59 792 2912 59 125 773 2069 2939 40 2027 2940 41 123 2677 2678 61 2940 46 2941 40 41 59 688 40 2678 340 2942 41 123 2675 2943 61 2678 46 2944 40 41 59 688 40 2943 340 2942 41 123 2069 2945 61 2028 46 2946 40 2947 44 2678 41 59 726 2948 61 2048 46 2949 40 2678 46 2950 40 41 44 2678 46 2951 40 41 41 59 2069 2952 61 2953 46 2954 40 2948 41 59 2069 2955 61 2956 46 2957 40 2940 46 2941 40 41 46 2958 40 41 46 2959 40 41 41 63 362 43 2952 58 362 59 792 2943 46 2960 40 41 43 362 43 2945 43 2955 43 362 59 125 630 792 2961 46 2962 40 362 41 59 125 630 123 792 2963 46 2964 40 362 41 59 125 125 773 2069 2965 40 2027 2940 41 123 2677 2678 61 2940 46 2966 40 41 59 688 40 2678 340 2967 41 123 2675 2968 61 2678 46 2969 40 41 59 688 40 2968 340 2967 41 123 2069 2970 61 2028 46 2971 40 2972 44 2678 41 59 726 2973 61 2048 46 2974 40 2678 46 2975 40 41 44 2678 46 2976 40 41 41 59 2069 2977 61 2978 46 2979 40 2973 41 59 2069 2980 61 2981 46 2982 40 2940 46 2966 40 41 46 2983 40 41 46 2984 40 41 41 63 362 43 2977 58 362 59 792 2968 46 2985 40 41 43 362 43 2970 43 2980 43 362 59 125 630 792 2986 46 2987 40 362 41 59 125 630 123 792 2988 46 2989 40 362 41 59 125 125 773 2087 60 2027 44 2027 62 2990 40 41 123 2087 60 2027 44 2027 62 2991 61 744 2992 60 62 40 2993 46 2994 40 362 41 41 123 123 2995 40 1503 41 59 125 125 59 2991 46 2996 40 40 2234 41 45 62 744 2997 60 62 40 2234 46 2998 40 41 41 41 59 2991 46 2999 40 744 3000 60 62 40 41 123 64 2102 777 3001 60 2027 44 2027 62 3002 40 2087 60 2027 44 2027 62 2991 41 123 792 744 3001 60 62 40 41 123 64 2102 777 865 3003 40 657 2027 2940 44 570 3004 41 123 818 46 3003 40 2940 44 3004 41 59 688 40 2940 340 3005 307 33 3004 41 3006 40 3007 46 3008 40 2940 46 3009 40 41 46 3010 40 41 46 3011 40 41 41 41 59 630 3006 40 362 41 59 125 125 59 125 125 41 59 792 2991 59 125 773 2087 60 2027 44 2027 62 3012 40 41 123 2087 60 2027 44 2027 62 3013 61 744 3014 60 62 40 3015 46 3016 40 362 41 41 123 123 3017 40 1504 41 59 125 125 59 3013 46 3018 40 40 2234 41 45 62 744 3019 60 62 40 2234 46 3020 40 41 41 41 59 3013 46 3021 40 744 3022 60 62 40 41 123 64 2102 777 3023 60 2027 44 2027 62 3024 40 2087 60 2027 44 2027 62 3013 41 123 792 744 3023 60 62 40 41 123 64 2102 777 865 3025 40 657 2027 2940 44 570 3026 41 123 818 46 3025 40 2940 44 3026 41 59 688 40 2940 340 3027 307 33 3026 41 123 3028 40 2940 46 3029 40 41 41 59 125 630 123 3030 40 362 41 59 125 125 125 59 125 125 41 59 792 3013 59 125 775 2087 60 2027 44 2027 62 3031 40 41 123 2087 60 2027 44 2027 62 3032 61 744 3033 60 62 40 3034 46 3035 40 362 41 41 123 123 3036 40 1503 41 59 125 125 59 3032 46 3037 40 40 2234 41 45 62 744 3038 60 62 40 2234 46 3039 40 41 41 41 59 3032 46 3040 40 744 3041 60 62 40 41 123 64 2102 777 3042 60 2027 44 2027 62 3043 40 2087 60 2027 44 2027 62 3032 41 123 792 744 3042 60 62 40 41 123 64 2102 777 865 3044 40 657 2027 2940 44 570 3045 41 123 818 46 3044 40 2940 44 3045 41 59 688 40 2940 340 3046 307 33 3045 41 123 2675 3047 61 2676 40 2940 46 3048 40 41 41 59 688 40 3047 323 3046 41 123 3049 40 3034 46 3035 40 362 41 41 59 792 59 125 2069 3050 61 3051 46 3052 40 3047 46 3053 40 41 41 59 3054 40 3050 41 59 125 630 123 3055 40 362 41 59 125 125 125 59 125 125 41 59 792 3032 59 125 773 2087 60 2027 44 2027 62 3056 40 41 123 2087 60 2027 44 2027 62 3057 61 744 3058 60 62 40 3059 46 3060 40 362 41 41 123 123 3061 40 1503 41 59 125 125 59 3057 46 3062 40 41 46 3063 40 362 41 59 3057 46 3064 40 40 2234 41 45 62 744 3065 60 62 40 2234 46 3066 40 41 41 41 59 3057 46 3067 40 744 3068 60 62 40 41 123 64 2102 777 3069 60 2027 44 2027 62 3070 40 2087 60 2027 44 2027 62 3057 41 123 792 744 3069 60 62 40 41 123 3071 3072 59 2068 60 3073 62 3074 59 64 2102 777 865 3075 40 657 2027 2940 44 570 3076 41 123 818 46 3075 40 2940 44 3076 41 59 688 40 2940 340 3077 307 33 3076 41 123 688 40 3072 340 3077 41 123 3072 46 3078 40 3074 41 59 125 3074 61 40 3079 44 3080 44 3081 41 45 62 123 3082 40 3081 63 3059 46 3060 40 362 41 58 3059 46 3060 40 362 41 41 59 688 40 3083 40 41 340 3077 41 3083 40 41 46 3084 40 3081 307 2940 46 3085 40 41 46 3060 40 41 323 1500 63 1500 58 1501 41 59 688 40 2940 46 3086 40 41 307 2940 323 2098 46 3087 40 41 41 2098 46 3088 40 41 59 330 125 59 3072 61 2940 46 3089 40 41 59 3072 46 3090 40 3074 41 59 570 3091 61 2940 46 3091 40 41 59 3092 40 3091 63 3059 46 3060 40 362 41 58 3059 46 3060 40 362 41 41 59 688 40 3093 40 41 340 3077 41 3093 40 41 46 3094 40 3091 307 2940 46 3095 40 41 46 3060 40 41 323 1500 63 1500 58 1501 41 59 125 630 123 688 40 3072 340 3077 41 123 3072 46 3096 40 3074 41 59 3072 61 3077 59 125 3097 40 362 41 59 125 125 125 59 125 125 41 59 792 3057 59 125 773 865 3098 40 2027 2234 41 123 2098 46 3098 40 2234 44 2233 40 2234 41 44 3099 40 41 41 59 2234 46 3100 40 2235 40 41 41 59 2094 46 3101 40 2234 46 3102 40 41 41 46 3103 40 2234 46 3104 40 41 41 59 3105 40 2234 44 2093 46 3101 40 2234 46 3102 40 41 41 41 59 125 773 865 3106 40 2027 2234 44 2092 3107 41 123 688 40 3107 323 3108 41 792 59 330 688 40 2098 46 3109 40 41 307 2061 340 3108 307 2234 46 3110 40 41 46 3111 40 2061 46 3110 40 41 41 41 123 3107 46 3112 40 362 41 59 3107 46 3113 40 3114 41 59 3107 46 3115 40 41 59 330 3116 46 3117 40 40 41 45 62 2234 46 3118 40 2235 40 41 41 41 59 792 59 125 688 40 2234 46 3119 40 2235 40 41 41 62 1500 41 123 3107 46 3120 40 2069 46 3121 40 2234 46 3119 40 2235 40 41 41 41 41 59 3107 46 3122 40 3123 41 59 125 630 123 3107 46 3124 40 362 41 59 3107 46 3125 40 3126 41 59 125 3107 46 3127 40 41 59 2234 46 3128 40 2235 40 41 41 59 125 773 2069 3129 40 41 123 688 40 2235 40 41 41 123 792 3130 46 3131 40 362 41 59 125 630 123 792 40 2028 702 3132 41 63 3133 46 3134 40 362 41 58 3133 46 3134 40 362 41 59 125 125 773 2095 3135 40 3136 3137 44 2677 2678 44 570 3138 41 123 2675 3139 61 3138 63 2678 46 3140 40 41 58 2678 46 3141 40 41 59 2069 3142 61 3137 43 3139 46 3143 40 41 43 40 3138 63 362 58 362 41 59 3144 3145 61 3138 63 2048 46 3146 40 2678 46 3147 40 41 44 2678 46 3148 40 41 41 58 2048 46 3146 40 2678 46 3149 40 41 44 2678 46 3150 40 41 41 59 2095 3151 61 744 2095 40 3139 44 2028 46 3152 40 3138 44 2678 41 44 3145 44 2038 41 59 3151 46 3153 40 823 41 59 2096 46 3154 40 3142 44 3151 41 59 792 3151 59 125 64 2102 777 865 3155 40 41 123 330 330 3156 46 3157 40 362 44 2096 46 3158 40 41 41 59 2096 46 3159 40 40 3160 44 3161 41 45 62 123 3161 46 3162 40 41 59 125 41 59 125 125 ,"{'AvgLine': 27, 'CountLine': 1375, 'CountStmt': 734, 'MaxNesting': 4, 'AvgLineCode': 25, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 621, 'MaxEssential': 16, 'SumEssential': 104, 'AvgCyclomatic': 2, 'CountLineCode': 1183, 'CountStmtDecl': 232, 'MaxCyclomatic': 17, 'SumCyclomatic': 156, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 145, 'CountSemicolon': 586, 'CountDeclMethod': 47, 'CountLineCodeExe': 898, 'CountLineComment': 51, 'CountClassCoupled': 87, 'CountClassDerived': 2, 'CountLineCodeDecl': 261, 'CountDeclMethodAll': 60, 'MaxInheritanceTree': 4, 'RatioCommentToCode': '0.04', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 23, 'SumCyclomaticStrict': 174, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 3, 'MaxCyclomaticModified': 17, 'PercentLackOfCohesion': 95, 'SumCyclomaticModified': 156, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 21, 'CountDeclInstanceMethod': 47, 'CountDeclMethodProtected': 23, 'CountClassCoupledModified': 87, 'CountDeclInstanceVariable': 38, 'PercentLackOfCohesionModified': 93}"
2605,Java,"public class PathingControlManager implements IPathingControlManager {

    private final Baritone baritone;
    private final HashSet<IBaritoneProcess> processes; // unGh
    private final List<IBaritoneProcess> active;
    private IBaritoneProcess inControlLastTick;
    private IBaritoneProcess inControlThisTick;
    private PathingCommand command;

    public PathingControlManager(Baritone baritone) {
        this.baritone = baritone;
        this.processes = new HashSet<>();
        this.active = new ArrayList<>();
        baritone.getGameEventHandler().registerEventListener(new AbstractGameEventListener() { // needs to be after all behavior ticks
            @Override
            public void onTick(TickEvent event) {
                if (event.getType() == TickEvent.Type.IN) {
                    postTick();
                }
            }
        });
    }

    @Override
    public void registerProcess(IBaritoneProcess process) {
        process.onLostControl(); // make sure it's reset
        processes.add(process);
    }

    public void cancelEverything() { // called by PathingBehavior on TickEvent Type OUT
        inControlLastTick = null;
        inControlThisTick = null;
        command = null;
        active.clear();
        for (IBaritoneProcess proc : processes) {
            proc.onLostControl();
            if (proc.isActive() && !proc.isTemporary()) { // it's okay only for a temporary thing (like combat pause) to maintain control even if you say to cancel
                throw new IllegalStateException(proc.displayName());
            }
        }
    }

    @Override
    public Optional<IBaritoneProcess> mostRecentInControl() {
        return Optional.ofNullable(inControlThisTick);
    }

    @Override
    public Optional<PathingCommand> mostRecentCommand() {
        return Optional.ofNullable(command);
    }

    public void preTick() {
        inControlLastTick = inControlThisTick;
        inControlThisTick = null;
        PathingBehavior p = baritone.getPathingBehavior();
        command = executeProcesses();
        if (command == null) {
            p.cancelSegmentIfSafe();
            p.secretInternalSetGoal(null);
            return;
        }
        if (!Objects.equals(inControlThisTick, inControlLastTick) && command.commandType != PathingCommandType.REQUEST_PAUSE && inControlLastTick != null && !inControlLastTick.isTemporary()) {
            // if control has changed from a real process to another real process, and the new process wants to do something
            p.cancelSegmentIfSafe();
            // get rid of the in progress stuff from the last process
        }
        switch (command.commandType) {
            case REQUEST_PAUSE:
                p.requestPause();
                break;
            case CANCEL_AND_SET_GOAL:
                p.secretInternalSetGoal(command.goal);
                p.cancelSegmentIfSafe();
                break;
            case FORCE_REVALIDATE_GOAL_AND_PATH:
                if (!p.isPathing() && !p.getInProgress().isPresent()) {
                    p.secretInternalSetGoalAndPath(command);
                }
                break;
            case REVALIDATE_GOAL_AND_PATH:
                if (!p.isPathing() && !p.getInProgress().isPresent()) {
                    p.secretInternalSetGoalAndPath(command);
                }
                break;
            case SET_GOAL_AND_PATH:
                // now this i can do
                if (command.goal != null) {
                    baritone.getPathingBehavior().secretInternalSetGoalAndPath(command);
                }
                break;
            default:
                throw new IllegalStateException();
        }
    }

    private void postTick() {
        // if we did this in pretick, it would suck
        // we use the time between ticks as calculation time
        // therefore, we only cancel and recalculate after the tick for the current path has executed
        // ""it would suck"" means it would actually execute a path every other tick
        if (command == null) {
            return;
        }
        PathingBehavior p = baritone.getPathingBehavior();
        switch (command.commandType) {
            case FORCE_REVALIDATE_GOAL_AND_PATH:
                if (command.goal == null || forceRevalidate(command.goal) || revalidateGoal(command.goal)) {
                    // pwnage
                    p.softCancelIfSafe();
                }
                p.secretInternalSetGoalAndPath(command);
                break;
            case REVALIDATE_GOAL_AND_PATH:
                if (Baritone.settings().cancelOnGoalInvalidation.value && (command.goal == null || revalidateGoal(command.goal))) {
                    p.softCancelIfSafe();
                }
                p.secretInternalSetGoalAndPath(command);
                break;
            default:
        }
    }

    public boolean forceRevalidate(Goal newGoal) {
        PathExecutor current = baritone.getPathingBehavior().getCurrent();
        if (current != null) {
            if (newGoal.isInGoal(current.getPath().getDest())) {
                return false;
            }
            return !newGoal.toString().equals(current.getPath().getGoal().toString());
        }
        return false;
    }

    public boolean revalidateGoal(Goal newGoal) {
        PathExecutor current = baritone.getPathingBehavior().getCurrent();
        if (current != null) {
            Goal intended = current.getPath().getGoal();
            BlockPos end = current.getPath().getDest();
            if (intended.isInGoal(end) && !newGoal.isInGoal(end)) {
                // this path used to end in the goal
                // but the goal has changed, so there's no reason to continue...
                return true;
            }
        }
        return false;
    }


    public PathingCommand executeProcesses() {
        for (IBaritoneProcess process : processes) {
            if (process.isActive()) {
                if (!active.contains(process)) {
                    // put a newly active process at the very front of the queue
                    active.add(0, process);
                }
            } else {
                active.remove(process);
            }
        }
        // ties are broken by which was added to the beginning of the list first
        active.sort(Comparator.comparingDouble(IBaritoneProcess::priority).reversed());

        Iterator<IBaritoneProcess> iterator = active.iterator();
        while (iterator.hasNext()) {
            IBaritoneProcess proc = iterator.next();

            PathingCommand exec = proc.onTick(Objects.equals(proc, inControlLastTick) && baritone.getPathingBehavior().calcFailedLastTick(), baritone.getPathingBehavior().isSafeToCancel());
            if (exec == null) {
                if (proc.isActive()) {
                    throw new IllegalStateException(proc.displayName() + "" actively returned null PathingCommand"");
                }
                // no need to call onLostControl; they are reporting inactive.
            } else if (exec.commandType != PathingCommandType.DEFER) {
                inControlThisTick = proc;
                if (!proc.isTemporary()) {
                    iterator.forEachRemaining(IBaritoneProcess::onLostControl);
                }
                return exec;
            }
        }
        return null;
    }
}",1,777 587 2000 693 2001 123 773 657 2002 2003 59 773 657 2004 60 2005 62 2006 59 330 773 657 2007 60 2005 62 2008 59 773 2005 2009 59 773 2005 2010 59 773 2011 2012 59 777 2000 40 2002 2003 41 123 823 46 2003 61 2003 59 823 46 2006 61 744 2004 60 62 40 41 59 823 46 2008 61 744 2013 60 62 40 41 59 2003 46 2014 40 41 46 2015 40 744 2016 40 41 123 330 64 2017 777 865 2018 40 2019 2020 41 123 688 40 2020 46 2021 40 41 323 2019 46 2022 46 2023 41 123 2024 40 41 59 125 125 125 41 59 125 64 2025 777 865 2026 40 2005 2027 41 123 2027 46 2028 40 41 59 330 2006 46 2029 40 2027 41 59 125 777 865 2030 40 41 123 330 2009 61 2031 59 2010 61 2031 59 2012 61 2031 59 2008 46 2032 40 41 59 664 40 2005 2033 58 2006 41 123 2033 46 2034 40 41 59 688 40 2033 46 2035 40 41 307 33 2033 46 2036 40 41 41 123 330 825 744 2037 40 2033 46 2038 40 41 41 59 125 125 125 64 2025 777 2039 60 2005 62 2040 40 41 123 792 2039 46 2041 40 2010 41 59 125 64 2025 777 2039 60 2011 62 2042 40 41 123 792 2039 46 2043 40 2012 41 59 125 777 865 2044 40 41 123 2009 61 2010 59 2010 61 2045 59 2046 2047 61 2003 46 2048 40 41 59 2012 61 2049 40 41 59 688 40 2012 323 2045 41 123 2047 46 2050 40 41 59 2047 46 2051 40 2045 41 59 792 59 125 688 40 33 2052 46 2053 40 2010 44 2009 41 307 2012 46 2054 340 2055 46 2056 307 2009 340 2045 307 33 2009 46 2057 40 41 41 123 330 2047 46 2058 40 41 59 330 125 819 40 2012 46 2054 41 123 579 2056 58 2047 46 2059 40 41 59 572 59 579 2060 58 2047 46 2061 40 2012 46 2062 41 59 2047 46 2063 40 41 59 572 59 579 2064 58 688 40 33 2047 46 2065 40 41 307 33 2047 46 2066 40 41 46 2067 40 41 41 123 2047 46 2068 40 2012 41 59 125 572 59 579 2069 58 688 40 33 2047 46 2065 40 41 307 33 2047 46 2066 40 41 46 2067 40 41 41 123 2047 46 2070 40 2012 41 59 125 572 59 579 2071 58 330 688 40 2012 46 2062 340 2045 41 123 2003 46 2048 40 41 46 2072 40 2012 41 59 125 572 59 613 58 825 744 2073 40 41 59 125 125 773 865 2074 40 41 123 330 330 330 330 688 40 2012 323 2075 41 123 792 59 125 2076 2077 61 2003 46 2078 40 41 59 819 40 2012 46 2079 41 123 579 2080 58 688 40 2012 46 2081 323 2075 309 2082 40 2012 46 2081 41 309 2083 40 2012 46 2081 41 41 123 330 2077 46 2084 40 41 59 125 2077 46 2085 40 2012 41 59 572 59 579 2086 58 688 40 2002 46 2087 40 41 46 2088 46 2089 307 40 2012 46 2081 323 2075 309 2083 40 2012 46 2081 41 41 41 123 2077 46 2090 40 41 59 125 2077 46 2085 40 2012 41 59 572 59 613 58 125 125 777 570 2091 40 2092 2093 41 123 2094 2095 61 2003 46 2096 40 41 46 2097 40 41 59 688 40 2095 340 2098 41 123 688 40 2093 46 2099 40 2095 46 2100 40 41 46 2101 40 41 41 41 123 792 2102 59 125 792 33 2093 46 2103 40 41 46 2104 40 2095 46 2100 40 41 46 2105 40 41 46 2103 40 41 41 59 125 792 2106 59 125 777 570 2107 40 2092 2093 41 123 2108 2109 61 2003 46 2110 40 41 46 2111 40 41 59 688 40 2109 340 2112 41 123 2092 2113 61 2109 46 2114 40 41 46 2115 40 41 59 2116 2117 61 2109 46 2114 40 41 46 2118 40 41 59 688 40 2113 46 2119 40 2117 41 307 33 2093 46 2119 40 2117 41 41 123 330 330 792 2120 59 125 125 792 2121 59 125 777 2011 2122 40 41 123 664 40 2005 2027 58 2006 41 123 688 40 2027 46 2123 40 41 41 123 688 40 33 2008 46 2124 40 2027 41 41 123 330 2008 46 2125 40 1500 44 2027 41 59 125 125 630 123 2008 46 2126 40 2027 41 59 125 125 330 2008 46 2127 40 2128 46 2129 40 2005 58 58 2130 41 46 2131 40 41 41 59 2132 60 2005 62 2133 61 2008 46 2133 40 41 59 870 40 2133 46 2134 40 41 41 123 2005 2135 61 2133 46 2136 40 41 59 2011 2137 61 2135 46 2138 40 2139 46 2140 40 2135 44 2009 41 307 2003 46 2141 40 41 46 2142 40 41 44 2003 46 2141 40 41 46 2143 40 41 41 59 688 40 2137 323 2144 41 123 688 40 2135 46 2145 40 41 41 123 825 744 2146 40 2135 46 2147 40 41 43 362 41 59 125 330 125 630 688 40 2137 46 2148 340 2149 46 2150 41 123 2010 61 2135 59 688 40 33 2135 46 2151 40 41 41 123 2133 46 2152 40 2005 58 58 2153 41 59 125 792 2137 59 125 125 792 2154 59 125 125 ,"{'AvgLine': 16, 'CountLine': 184, 'CountStmt': 108, 'MaxNesting': 3, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 88, 'MaxEssential': 4, 'SumEssential': 17, 'AvgCyclomatic': 3, 'CountLineCode': 157, 'CountStmtDecl': 29, 'MaxCyclomatic': 11, 'SumCyclomatic': 39, 'AvgLineComment': 1, 'CountClassBase': 2, 'CountLineBlank': 14, 'CountSemicolon': 69, 'CountDeclMethod': 10, 'CountLineCodeExe': 101, 'CountLineComment': 18, 'CountClassCoupled': 19, 'CountClassDerived': 0, 'CountLineCodeDecl': 29, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.11', 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 16, 'SumCyclomaticStrict': 51, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodPublic': 9, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 60, 'SumCyclomaticModified': 34, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 10, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 19, 'CountDeclInstanceVariable': 6, 'PercentLackOfCohesionModified': 56}"
26579,Java,"public class TimeUtil
{
	private static int findIndexOfNonDigit(CharSequence text)
	{
		for (int i = 0; i < text.length(); i++)
		{
			if (Character.isDigit(text.charAt(i)))
			{
				continue;
			}
			return i;
		}
		return -1;
	}
	
	/**
	 * Parses patterns like:
	 * <ul>
	 * <li>1min or 10mins</li>
	 * <li>1day or 10days</li>
	 * <li>1week or 4weeks</li>
	 * <li>1month or 12months</li>
	 * <li>1year or 5years</li>
	 * </ul>
	 * @param datePattern
	 * @return {@link Duration} object converted by the date pattern specified.
	 * @throws IllegalStateException when malformed pattern specified.
	 */
	public static Duration parseDuration(String datePattern)
	{
		final int index = findIndexOfNonDigit(datePattern);
		if (index == -1)
		{
			throw new IllegalStateException(""Incorrect time format given: "" + datePattern);
		}
		try
		{
			final int val = Integer.parseInt(datePattern.substring(0, index));
			final String type = datePattern.substring(index);
			final ChronoUnit unit;
			switch (type.toLowerCase())
			{
				case ""sec"":
				case ""secs"":
				{
					unit = ChronoUnit.SECONDS;
					break;
				}
				case ""min"":
				case ""mins"":
				{
					unit = ChronoUnit.MINUTES;
					break;
				}
				case ""hour"":
				case ""hours"":
				{
					unit = ChronoUnit.HOURS;
					break;
				}
				case ""day"":
				case ""days"":
				{
					unit = ChronoUnit.DAYS;
					break;
				}
				case ""week"":
				case ""weeks"":
				{
					unit = ChronoUnit.WEEKS;
					break;
				}
				case ""month"":
				case ""months"":
				{
					unit = ChronoUnit.MONTHS;
					break;
				}
				case ""year"":
				case ""years"":
				{
					unit = ChronoUnit.YEARS;
					break;
				}
				default:
				{
					unit = ChronoUnit.valueOf(type);
					if (unit == null)
					{
						throw new IllegalStateException(""Incorrect format: "" + type + "" !!"");
					}
				}
			}
			return Duration.of(val, unit);
		}
		catch (Exception e)
		{
			throw new IllegalStateException(""Incorrect time format given: "" + datePattern + "" val: "" + datePattern.substring(0, index));
		}
	}
}",1,777 587 2000 123 773 809 704 2001 40 2002 2003 41 123 664 40 704 2004 61 1500 59 2004 60 2003 46 2005 40 41 59 2004 349 41 123 688 40 2006 46 2007 40 2003 46 2008 40 2004 41 41 41 123 605 59 125 792 2004 59 125 792 45 1501 59 125 306 777 809 2009 2010 40 2011 2012 41 123 657 704 2013 61 2001 40 2012 41 59 688 40 2013 323 45 1501 41 123 825 744 2014 40 362 43 2012 41 59 125 830 123 657 704 2015 61 2016 46 2017 40 2012 46 2018 40 1500 44 2013 41 41 59 657 2011 2019 61 2012 46 2018 40 2013 41 59 657 2020 2021 59 819 40 2019 46 2022 40 41 41 123 579 362 58 579 362 58 123 2021 61 2020 46 2023 59 572 59 125 579 362 58 579 362 58 123 2021 61 2020 46 2024 59 572 59 125 579 362 58 579 362 58 123 2021 61 2020 46 2025 59 572 59 125 579 362 58 579 362 58 123 2021 61 2020 46 2026 59 572 59 125 579 362 58 579 362 58 123 2021 61 2020 46 2027 59 572 59 125 579 362 58 579 362 58 123 2021 61 2020 46 2028 59 572 59 125 579 362 58 579 362 58 123 2021 61 2020 46 2029 59 572 59 125 613 58 123 2021 61 2020 46 2030 40 2019 41 59 688 40 2021 323 2031 41 123 825 744 2032 40 362 43 2019 43 362 41 59 125 125 125 792 2009 46 2033 40 2015 44 2021 41 59 125 580 40 2034 2035 41 123 825 744 2036 40 362 43 2012 43 362 43 2012 46 2037 40 1500 44 2013 41 41 59 125 125 125 ,"{'AvgLine': 48, 'CountLine': 104, 'CountStmt': 37, 'MaxNesting': 3, 'AvgLineCode': 42, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 32, 'MaxEssential': 3, 'SumEssential': 4, 'AvgCyclomatic': 10, 'CountLineCode': 87, 'CountStmtDecl': 8, 'MaxCyclomatic': 18, 'SumCyclomatic': 21, 'AvgLineComment': 6, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 28, 'CountDeclMethod': 2, 'CountLineCodeExe': 47, 'CountLineComment': 16, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountLineCodeDecl': 7, 'CountDeclMethodAll': 2, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.18', 'AvgCyclomaticStrict': 10, 'MaxCyclomaticStrict': 18, 'SumCyclomaticStrict': 21, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 4, 'CountDeclMethodPublic': 1, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
3586,Java,"@Slf4j
@Singleton
public class TradeUtil {

    // TODO change non-state dependent instance methods to static methods.

    private final BtcWalletService btcWalletService;
    private final KeyRing keyRing;

    @Inject
    public TradeUtil(BtcWalletService btcWalletService, KeyRing keyRing) {
        this.btcWalletService = btcWalletService;
        this.keyRing = keyRing;
    }

    /**
     * Returns <MULTI_SIG, TRADE_PAYOUT> if and only if both are AVAILABLE,
     * otherwise null.
     * @param trade the trade being queried for MULTI_SIG, TRADE_PAYOUT addresses
     * @return Tuple2 tuple containing MULTI_SIG, TRADE_PAYOUT addresses for trade
     */
    public Tuple2<String, String> getAvailableAddresses(Trade trade) {
        var addresses = getTradeAddresses(trade);
        if (addresses == null)
            return null;

        if (btcWalletService.getAvailableAddressEntries().stream()
                .noneMatch(e -> Objects.equals(e.getAddressString(), addresses.first)))
            return null;

        if (btcWalletService.getAvailableAddressEntries().stream()
                .noneMatch(e -> Objects.equals(e.getAddressString(), addresses.second)))
            return null;

        return new Tuple2<>(addresses.first, addresses.second);
    }

    /**
     * Returns <MULTI_SIG, TRADE_PAYOUT> addresses as strings if they're known by the
     * wallet.
     * @param trade the trade being queried for MULTI_SIG, TRADE_PAYOUT addresses
     * @return Tuple2 tuple containing MULTI_SIG, TRADE_PAYOUT addresses for trade
     */
    public Tuple2<String, String> getTradeAddresses(Trade trade) {
        var contract = trade.getContract();
        if (contract == null)
            return null;

        // Get multisig address
        var isMyRoleBuyer = contract.isMyRoleBuyer(keyRing.getPubKeyRing());
        var multiSigPubKey = isMyRoleBuyer
                ? contract.getBuyerMultiSigPubKey()
                : contract.getSellerMultiSigPubKey();
        if (multiSigPubKey == null)
            return null;

        var multiSigPubKeyString = Utilities.bytesAsHexString(multiSigPubKey);
        var multiSigAddress = btcWalletService.getAddressEntryListAsImmutableList().stream()
                .filter(e -> e.getKeyPair().getPublicKeyAsHex().equals(multiSigPubKeyString))
                .findAny()
                .orElse(null);
        if (multiSigAddress == null)
            return null;

        // Get payout address
        var payoutAddress = isMyRoleBuyer
                ? contract.getBuyerPayoutAddressString()
                : contract.getSellerPayoutAddressString();
        var payoutAddressEntry = btcWalletService.getAddressEntryListAsImmutableList().stream()
                .filter(e -> Objects.equals(e.getAddressString(), payoutAddress))
                .findAny()
                .orElse(null);
        if (payoutAddressEntry == null)
            return null;

        return new Tuple2<>(multiSigAddress.getAddressString(), payoutAddress);
    }

    public long getRemainingTradeDuration(Trade trade) {
        return trade.getMaxTradePeriodDate() != null
                ? trade.getMaxTradePeriodDate().getTime() - new Date().getTime()
                : getMaxTradePeriod(trade);
    }

    public long getMaxTradePeriod(Trade trade) {
        return trade.getOffer() != null
                ? trade.getOffer().getPaymentMethod().getMaxTradePeriod()
                : 0;
    }

    public double getRemainingTradeDurationAsPercentage(Trade trade) {
        long maxPeriod = getMaxTradePeriod(trade);
        long remaining = getRemainingTradeDuration(trade);
        if (maxPeriod != 0) {
            return 1 - (double) remaining / (double) maxPeriod;
        } else
            return 0;
    }

    public String getRemainingTradeDurationAsWords(Trade trade) {
        return formatDurationAsWords(Math.max(0, getRemainingTradeDuration(trade)));
    }

    @Nullable
    public Date getHalfTradePeriodDate(Trade trade) {
        return trade != null ? trade.getHalfTradePeriodDate() : null;
    }

    public Date getDateForOpenDispute(Trade trade) {
        return new Date(new Date().getTime() + getRemainingTradeDuration(trade));
    }

    public String getMarketDescription(Trade trade) {
        if (trade == null)
            return """";

        checkNotNull(trade.getOffer());
        checkNotNull(trade.getOffer().getCurrencyCode());
        return getCurrencyPair(trade.getOffer().getCurrencyCode());
    }

    public String getPaymentMethodNameWithCountryCode(Trade trade) {
        if (trade == null)
            return """";

        Offer offer = trade.getOffer();
        checkNotNull(offer);
        checkNotNull(offer.getPaymentMethod());
        return offer.getPaymentMethodNameWithCountryCode();
    }

    /**
     * Returns a string describing a trader's role for a given trade.
     * @param trade Trade
     * @return String describing a trader's role for a given trade
     */
    public String getRole(Trade trade) {
        Contract contract = trade.getContract();
        if (contract == null)
            throw new IllegalStateException(format(""could not get role because no contract was found for trade '%s'"",
                    trade.getShortId()));

        Offer offer = trade.getOffer();
        if (offer == null)
            throw new IllegalStateException(format(""could not get role because no offer was found for trade '%s'"",
                    trade.getShortId()));

        return getRole(contract.isBuyerMakerAndSellerTaker(),
                offer.isMyOffer(keyRing),
                offer.getCurrencyCode());
    }

    /**
     * Returns a string describing a trader's role for a given bsq swap.
     * @param trade BsqSwapTrade
     * @return String describing a trader's role for a given bsq swap
     */
    public String getRole(BsqSwapTrade trade) {
        Offer offer = trade.getOffer();
        if (offer == null)
            throw new IllegalStateException(
                    format(""could not get role because no offer was found for bsq swap '%s'"",
                            trade.getShortId()));

        KeyRing keyRing = trade.getBsqSwapProtocolModel().getKeyRing();
        return getRole(offer.isBuyOffer(),
                offer.isMyOffer(keyRing),
                offer.getCurrencyCode());
    }

    /**
     * Returns a string describing a trader's role.
     *
     * @param isBuyerMakerAndSellerTaker boolean
     * @param isMaker boolean
     * @param currencyCode String
     * @return String describing a trader's role
     */
    public String getRole(boolean isBuyerMakerAndSellerTaker, boolean isMaker, String currencyCode) {
        if (isFiatCurrency(currencyCode)) {
            String baseCurrencyCode = Res.getBaseCurrencyCode();
            if (isBuyerMakerAndSellerTaker)
                return isMaker
                        ? Res.get(""formatter.asMaker"", baseCurrencyCode, Res.get(""shared.buyer""))
                        : Res.get(""formatter.asTaker"", baseCurrencyCode, Res.get(""shared.seller""));
            else
                return isMaker
                        ? Res.get(""formatter.asMaker"", baseCurrencyCode, Res.get(""shared.seller""))
                        : Res.get(""formatter.asTaker"", baseCurrencyCode, Res.get(""shared.buyer""));
        } else {
            if (isBuyerMakerAndSellerTaker)
                return isMaker
                        ? Res.get(""formatter.asMaker"", currencyCode, Res.get(""shared.seller""))
                        : Res.get(""formatter.asTaker"", currencyCode, Res.get(""shared.buyer""));
            else
                return isMaker
                        ? Res.get(""formatter.asMaker"", currencyCode, Res.get(""shared.buyer""))
                        : Res.get(""formatter.asTaker"", currencyCode, Res.get(""shared.seller""));
        }
    }

    public static void applyFilter(TradeModel tradeModel,
                                   FilterManager filterManager,
                                   NodeAddress nodeAddress,
                                   @Nullable PaymentAccountPayload paymentAccountPayload,
                                   ResultHandler complete,
                                   ErrorMessageHandler failed) {
        if (filterManager.isNodeAddressBanned(nodeAddress)) {
            failed.handleErrorMessage(""Other trader is banned by their node address.\n"" +
                    ""tradingPeerNodeAddress="" + nodeAddress);
        } else if (filterManager.isOfferIdBanned(tradeModel.getId())) {
            failed.handleErrorMessage(""Offer ID is banned.\n"" + ""Offer ID="" + tradeModel.getId());
        } else if (tradeModel.getOffer() != null &&
                filterManager.isCurrencyBanned(tradeModel.getOffer().getCurrencyCode())) {
            failed.handleErrorMessage(""Currency is banned.\n"" +
                    ""Currency code="" + tradeModel.getOffer().getCurrencyCode());
        } else if (filterManager.isPaymentMethodBanned(checkNotNull(tradeModel.getOffer()).getPaymentMethod())) {
            failed.handleErrorMessage(""Payment method is banned.\n"" +
                    ""Payment method="" + tradeModel.getOffer().getPaymentMethod().getId());
        } else if (paymentAccountPayload != null && filterManager.arePeersPaymentAccountDataBanned(paymentAccountPayload)) {
            failed.handleErrorMessage(""Other trader is banned by their trading account data.\n"" +
                    ""paymentAccountPayload="" + paymentAccountPayload.getPaymentDetails());
        } else if (filterManager.requireUpdateToNewVersionForTrading()) {
            failed.handleErrorMessage(""Your version of Bisq is not compatible for trading anymore. "" +
                    ""Please update to the latest Bisq version at https://bisq.network/downloads."");
        } else {
            complete.handleResult();
        }
    }
}",1,64 2000 64 2001 777 587 2002 123 330 773 657 2003 2004 59 773 657 2005 2006 59 64 2007 777 2002 40 2003 2004 44 2005 2006 41 123 823 46 2004 61 2004 59 823 46 2006 61 2006 59 125 306 777 2008 60 2009 44 2009 62 2010 40 2011 2012 41 123 2013 2014 61 2015 40 2012 41 59 688 40 2014 323 2016 41 792 2016 59 688 40 2004 46 2017 40 41 46 2018 40 41 46 2019 40 2020 45 62 2021 46 2022 40 2020 46 2023 40 41 44 2014 46 2024 41 41 41 792 2016 59 688 40 2004 46 2017 40 41 46 2018 40 41 46 2019 40 2020 45 62 2021 46 2022 40 2020 46 2023 40 41 44 2014 46 2025 41 41 41 792 2016 59 792 744 2008 60 62 40 2014 46 2024 44 2014 46 2025 41 59 125 306 777 2008 60 2009 44 2009 62 2026 40 2011 2012 41 123 2027 2028 61 2012 46 2029 40 41 59 688 40 2028 323 2030 41 792 2030 59 330 2027 2031 61 2028 46 2031 40 2006 46 2032 40 41 41 59 2027 2033 61 2031 63 2028 46 2034 40 41 58 2028 46 2035 40 41 59 688 40 2033 323 2030 41 792 2030 59 2027 2036 61 2037 46 2038 40 2033 41 59 2027 2039 61 2004 46 2040 40 41 46 2041 40 41 46 2042 40 2043 45 62 2043 46 2044 40 41 46 2045 40 41 46 2046 40 2036 41 41 46 2047 40 41 46 2048 40 2030 41 59 688 40 2039 323 2030 41 792 2030 59 330 2027 2049 61 2031 63 2028 46 2050 40 41 58 2028 46 2051 40 41 59 2027 2052 61 2004 46 2040 40 41 46 2041 40 41 46 2042 40 2043 45 62 2053 46 2046 40 2043 46 2054 40 41 44 2049 41 41 46 2047 40 41 46 2048 40 2030 41 59 688 40 2052 323 2030 41 792 2030 59 792 744 2008 60 62 40 2039 46 2054 40 41 44 2049 41 59 125 777 726 2055 40 2011 2012 41 123 792 2012 46 2056 40 41 340 2057 63 2012 46 2056 40 41 46 2058 40 41 45 744 2059 40 41 46 2058 40 41 58 2060 40 2012 41 59 125 777 726 2061 40 2011 2012 41 123 792 2012 46 2062 40 41 340 2063 63 2012 46 2062 40 41 46 2064 40 41 46 2061 40 41 58 1500 59 125 777 625 2065 40 2011 2012 41 123 726 2066 61 2061 40 2012 41 59 726 2067 61 2055 40 2012 41 59 688 40 2066 340 1500 41 123 792 1501 45 40 625 41 2067 47 40 625 41 2066 59 125 630 792 1500 59 125 777 2009 2068 40 2011 2012 41 123 792 2069 40 2070 46 2071 40 1500 44 2055 40 2012 41 41 41 59 125 64 2072 777 2073 2074 40 2011 2012 41 123 792 2012 340 2075 63 2012 46 2074 40 41 58 2075 59 125 777 2073 2076 40 2011 2012 41 123 792 744 2073 40 744 2073 40 41 46 2077 40 41 43 2055 40 2012 41 41 59 125 777 2009 2078 40 2011 2012 41 123 688 40 2012 323 2079 41 792 362 59 2080 40 2012 46 2081 40 41 41 59 2080 40 2012 46 2081 40 41 46 2082 40 41 41 59 792 2083 40 2012 46 2081 40 41 46 2082 40 41 41 59 125 777 2009 2084 40 2011 2012 41 123 688 40 2012 323 2085 41 792 362 59 2086 2087 61 2012 46 2088 40 41 59 2089 40 2087 41 59 2089 40 2087 46 2090 40 41 41 59 792 2087 46 2084 40 41 59 125 306 777 2009 2091 40 2011 2012 41 123 2092 2093 61 2012 46 2094 40 41 59 688 40 2093 323 2095 41 825 744 2096 40 2097 40 362 44 2012 46 2098 40 41 41 41 59 2099 2100 61 2012 46 2101 40 41 59 688 40 2100 323 2095 41 825 744 2096 40 2097 40 362 44 2012 46 2098 40 41 41 41 59 792 2091 40 2093 46 2102 40 41 44 2100 46 2103 40 2006 41 44 2100 46 2104 40 41 41 59 125 306 777 2009 2091 40 2105 2012 41 123 2106 2107 61 2012 46 2108 40 41 59 688 40 2107 323 2109 41 825 744 2110 40 2111 40 362 44 2012 46 2112 40 41 41 41 59 2005 2006 61 2012 46 2113 40 41 46 2114 40 41 59 792 2091 40 2107 46 2115 40 41 44 2107 46 2116 40 2006 41 44 2107 46 2117 40 41 41 59 125 306 777 2009 2091 40 570 2118 44 570 2119 44 2009 2120 41 123 688 40 2121 40 2120 41 41 123 2009 2122 61 2123 46 2124 40 41 59 688 40 2118 41 792 2119 63 2123 46 2125 40 362 44 2122 44 2123 46 2125 40 362 41 41 58 2123 46 2125 40 362 44 2122 44 2123 46 2125 40 362 41 41 59 630 792 2119 63 2123 46 2125 40 362 44 2122 44 2123 46 2125 40 362 41 41 58 2123 46 2125 40 362 44 2122 44 2123 46 2125 40 362 41 41 59 125 630 123 688 40 2118 41 792 2119 63 2126 46 2127 40 362 44 2120 44 2126 46 2127 40 362 41 41 58 2126 46 2127 40 362 44 2120 44 2126 46 2127 40 362 41 41 59 630 792 2119 63 2126 46 2127 40 362 44 2120 44 2126 46 2127 40 362 41 41 58 2126 46 2127 40 362 44 2120 44 2126 46 2127 40 362 41 41 59 125 125 777 809 865 2128 40 2129 2130 44 2131 2132 44 2133 2134 44 64 2072 2135 2136 44 2137 2138 44 2139 2140 41 123 688 40 2132 46 2141 40 2134 41 41 123 2140 46 2142 40 362 43 362 43 2134 41 59 125 630 688 40 2132 46 2143 40 2130 46 2144 40 41 41 41 123 2140 46 2145 40 362 43 362 43 2130 46 2144 40 41 41 59 125 630 688 40 2130 46 2146 40 41 340 2147 307 2132 46 2148 40 2130 46 2146 40 41 46 2149 40 41 41 41 123 2140 46 2150 40 362 43 362 43 2130 46 2146 40 41 46 2149 40 41 41 59 125 630 688 40 2132 46 2151 40 2152 40 2130 46 2146 40 41 41 46 2153 40 41 41 41 123 2140 46 2154 40 362 43 362 43 2130 46 2146 40 41 46 2153 40 41 46 2144 40 41 41 59 125 630 688 40 2136 340 2147 307 2132 46 2155 40 2136 41 41 123 2140 46 2156 40 362 43 362 43 2136 46 2157 40 41 41 59 125 630 688 40 2132 46 2158 40 41 41 123 2140 46 2159 40 362 43 362 41 59 125 630 123 2138 46 2160 40 41 59 125 125 125 ,"{'AvgLine': 13, 'CountLine': 233, 'CountStmt': 98, 'MaxNesting': 2, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 80, 'MaxEssential': 5, 'SumEssential': 29, 'AvgCyclomatic': 3, 'CountLineCode': 168, 'CountStmtDecl': 34, 'MaxCyclomatic': 8, 'SumCyclomatic': 50, 'AvgLineComment': 2, 'CountClassBase': 1, 'CountLineBlank': 29, 'CountSemicolon': 60, 'CountDeclMethod': 15, 'CountLineCodeExe': 123, 'CountLineComment': 37, 'CountClassCoupled': 25, 'CountClassDerived': 0, 'CountLineCodeDecl': 47, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.22', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 52, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 3, 'CountDeclMethodPublic': 15, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 80, 'SumCyclomaticModified': 50, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 25, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 76}"
26156,Java,"public final class MathUtil {

    private MathUtil() {
    }


    public static double mul(double oldValue, double value) {
        return oldValue * value;
    }

    public static double div(double oldValue, double value) {
        return oldValue / value;
    }

    /**
     * @param numToTest : The number to test.
     * @param min       : The minimum limit.
     * @param max       : The maximum limit.
     * @return the number or one of the limit (mininum / maximum).
     */
    public static int limit(int numToTest, int min, int max) {
        return (numToTest > max) ? max : Math.max(numToTest, min);
    }

    public static boolean isInsideRadius2D(ILocational object, ILocational other, int radius) {
        return calculateDistanceSq2D(object, other) <= radius * radius;
    }

    public static boolean isInsideRadius2D(ILocational object, int x, int y, int radius) {
        return calculateDistanceSq2D(object.getX(), object.getY(), x, y) <= radius * radius;
    }

    public static  double calculateDistanceSq2D(ILocational object, ILocational other) {
        return calculateDistanceSq2D(object.getX(), object.getY(), other.getX(), other.getY());
    }

    public static double calculateDistanceSq2D(int x1, int y1, int x2, int y2) {
        return Math.pow(x1 - x2, 2)  + Math.pow(y1 - y2, 2);
    }

    public static double calculateDistance2D(ILocational loc, ILocational other) {
        return calculateDistance2D(loc.getX(), loc.getY(), other.getX(), other.getY());
    }

    public static double calculateDistance2D(int x1, int y1, int x2, int y2) {
        return Math.hypot(x1 - x2, y1 - y2);
    }

    public static double calculateDistance3D(ILocational object, ILocational other) {
        return calculateDistance3D(object.getX(), object.getY(), object.getZ(), other.getX(), other.getY(), other.getZ());
    }

    public static double calculateDistance3D(int x1, int y1, int z1, int x2, int y2, int z2) {
        return Math.sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2) + pow(z1 - z2, 2));
    }

    public static double calculateDistanceSq3D(int x1, int y1, int z1, int x2, int y2, int z2) {
        return Math.pow(x1 -x2, 2) + Math.pow(y1 - y2, 2)  + Math.pow(z1 - z2, 2);
    }

    public static double calculateDistanceSq3D(ILocational object, ILocational other) {
        return calculateDistanceSq3D(object.getX(), object.getY(), object.getZ(), other.getX(), other.getY(), other.getZ());
    }

    public static boolean isInsideRadius3D(ILocational object, ILocational other, int range) {
        return calculateDistanceSq3D(object, other) <= range * range;
    }

    public static boolean isInsideRadius3D(ILocational object, int x, int y, int z, int range) {
        return calculateDistanceSq3D(object.getX(), object.getY(), object.getZ(), x, y, z) <= range * range;
    }

    public static boolean isInsideRadius3D(int originX, int originY, int originZ, int targetX, int targetY, int targetZ, int range) {
        return calculateDistanceSq3D(originX, originY, originZ, targetX, targetY, targetZ) <= range * range;
    }

    public static int calculateHeadingFrom(ILocational from, ILocational to) {
        return calculateHeadingFrom(from.getX(), from.getY(), to.getX(), to.getY());
    }

    public static int calculateHeadingFrom(int fromX, int fromY, int toX, int toY) {
        double angleTarget = Math.toDegrees(Math.atan2(toY - fromY, toX - fromX));
        if (angleTarget < 0) {
            angleTarget += 360;
        }
        return (int) (angleTarget * 182.044444444);
    }

    public static int calculateHeadingFrom(double dx, double dy) {
        double angleTarget = Math.toDegrees(Math.atan2(dy, dx));
        if (angleTarget < 0) {
            angleTarget += 360;
        }
        return (int) (angleTarget * 182.044444444);
    }

    public static double convertHeadingToDegree(int clientHeading) {
        return clientHeading / 182.044444444;
    }

    public static double calculateAngleFrom(ILocational from, ILocational to) {
        return calculateAngleFrom(from.getX(), from.getY(), to.getX(), to.getY());
    }

    public static double calculateAngleFrom(int fromX, int fromY, int toX, int toY) {
        double angleTarget = Math.toDegrees(Math.atan2(toY - fromY, toX - fromX));
        if (angleTarget < 0) {
            angleTarget += 360;
        }
        return angleTarget;
    }

    public static ILocational calculateOffsetLocation(ILocational reference, int offset, int minDistance) {
        int newX = Rnd.get(minDistance << 1, offset << 1);
        int newY = Rnd.get(newX, offset << 1);
        newY = (int) Math.sqrt((double) (newY * newY) - (newX * newX));
        if (newX > (offset + minDistance)) {
            newX = (reference.getX() + newX) - offset;
        } else {
            newX = (reference.getX() - newX) + minDistance;
        }
        if (newY > (offset + minDistance)) {
            newY = (reference.getY() + newY) - offset;
        } else {
            newY = (reference.getY() - newY) + minDistance;
        }
        return new Location(newX, newY, reference.getZ());
    }

    public static boolean checkAddOverFlow(long x, long y) {
        long r = x + y;
        return ((x ^ r) & (y ^ r)) < 0;
    }

    public static boolean checkMulOverFlow(long value, long mul, long max) {
        return max / mul < value;
    }

}",1,777 657 587 2000 123 773 2000 40 41 123 125 777 809 625 2001 40 625 2002 44 625 2003 41 123 792 2002 42 2003 59 125 777 809 625 2004 40 625 2002 44 625 2003 41 123 792 2002 47 2003 59 125 306 777 809 704 2005 40 704 2006 44 704 2007 44 704 2008 41 123 792 40 2006 62 2008 41 63 2008 58 2009 46 2008 40 2006 44 2007 41 59 125 777 809 570 2010 40 2011 2012 44 2011 2013 44 704 2014 41 123 792 2015 40 2012 44 2013 41 329 2014 42 2014 59 125 777 809 570 2010 40 2011 2012 44 704 2016 44 704 2017 44 704 2014 41 123 792 2018 40 2012 46 2019 40 41 44 2012 46 2020 40 41 44 2016 44 2017 41 329 2014 42 2014 59 125 777 809 625 2021 40 2011 2012 44 2011 2013 41 123 792 2021 40 2012 46 2022 40 41 44 2012 46 2023 40 41 44 2013 46 2022 40 41 44 2013 46 2023 40 41 41 59 125 777 809 625 2021 40 704 2024 44 704 2025 44 704 2026 44 704 2027 41 123 792 2028 46 2029 40 2024 45 2026 44 1502 41 43 2028 46 2029 40 2025 45 2027 44 1502 41 59 125 777 809 625 2030 40 2011 2031 44 2011 2013 41 123 792 2030 40 2031 46 2032 40 41 44 2031 46 2033 40 41 44 2013 46 2032 40 41 44 2013 46 2033 40 41 41 59 125 777 809 625 2030 40 704 2024 44 704 2025 44 704 2026 44 704 2027 41 123 792 2034 46 2035 40 2024 45 2026 44 2025 45 2027 41 59 125 777 809 625 2036 40 2011 2012 44 2011 2013 41 123 792 2036 40 2012 46 2037 40 41 44 2012 46 2038 40 41 44 2012 46 2039 40 41 44 2013 46 2037 40 41 44 2013 46 2038 40 41 44 2013 46 2039 40 41 41 59 125 777 809 625 2036 40 704 2024 44 704 2025 44 704 2040 44 704 2026 44 704 2027 44 704 2041 41 123 792 2042 46 2043 40 2044 40 2024 45 2026 44 1502 41 43 2044 40 2025 45 2027 44 1502 41 43 2044 40 2040 45 2041 44 1502 41 41 59 125 777 809 625 2045 40 704 2024 44 704 2025 44 704 2040 44 704 2026 44 704 2027 44 704 2041 41 123 792 2046 46 2047 40 2024 45 2026 44 1502 41 43 2046 46 2047 40 2025 45 2027 44 1502 41 43 2046 46 2047 40 2040 45 2041 44 1502 41 59 125 777 809 625 2045 40 2011 2012 44 2011 2013 41 123 792 2045 40 2012 46 2048 40 41 44 2012 46 2049 40 41 44 2012 46 2050 40 41 44 2013 46 2048 40 41 44 2013 46 2049 40 41 44 2013 46 2050 40 41 41 59 125 777 809 570 2051 40 2011 2012 44 2011 2013 44 704 2052 41 123 792 2045 40 2012 44 2013 41 329 2052 42 2052 59 125 777 809 570 2051 40 2011 2012 44 704 2016 44 704 2017 44 704 2053 44 704 2052 41 123 792 2045 40 2012 46 2054 40 41 44 2012 46 2055 40 41 44 2012 46 2056 40 41 44 2016 44 2017 44 2053 41 329 2052 42 2052 59 125 777 809 570 2051 40 704 2057 44 704 2058 44 704 2059 44 704 2060 44 704 2061 44 704 2062 44 704 2052 41 123 792 2045 40 2057 44 2058 44 2059 44 2060 44 2061 44 2062 41 329 2052 42 2052 59 125 777 809 704 2063 40 2011 2064 44 2011 2065 41 123 792 2063 40 2064 46 2066 40 41 44 2064 46 2067 40 41 44 2065 46 2066 40 41 44 2065 46 2067 40 41 41 59 125 777 809 704 2063 40 704 2068 44 704 2069 44 704 2070 44 704 2071 41 123 625 2072 61 2073 46 2074 40 2073 46 2075 40 2071 45 2069 44 2070 45 2068 41 41 59 688 40 2072 60 1500 41 123 2072 348 1504 59 125 792 40 704 41 40 2072 42 1504 41 59 125 777 809 704 2063 40 625 2076 44 625 2077 41 123 625 2078 61 2079 46 2080 40 2079 46 2081 40 2077 44 2076 41 41 59 688 40 2078 60 1500 41 123 2078 348 1504 59 125 792 40 704 41 40 2078 42 1504 41 59 125 777 809 625 2082 40 704 2083 41 123 792 2083 47 1504 59 125 777 809 625 2084 40 2011 2064 44 2011 2065 41 123 792 2084 40 2064 46 2085 40 41 44 2064 46 2086 40 41 44 2065 46 2085 40 41 44 2065 46 2086 40 41 41 59 125 777 809 625 2084 40 704 2068 44 704 2069 44 704 2070 44 704 2071 41 123 625 2087 61 2088 46 2089 40 2088 46 2090 40 2071 45 2069 44 2070 45 2068 41 41 59 688 40 2087 60 1500 41 123 2087 348 1504 59 125 792 2087 59 125 777 809 2011 2091 40 2011 2092 44 704 2093 44 704 2094 41 123 704 2095 61 2096 46 2097 40 2094 332 1501 44 2093 332 1501 41 59 704 2098 61 2096 46 2097 40 2095 44 2093 332 1501 41 59 2098 61 40 704 41 2099 46 2100 40 40 625 41 40 2098 42 2098 41 45 40 2095 42 2095 41 41 59 688 40 2095 62 40 2093 43 2094 41 41 123 2095 61 40 2092 46 2101 40 41 43 2095 41 45 2093 59 125 630 123 2095 61 40 2092 46 2102 40 41 45 2095 41 43 2094 59 125 688 40 2098 62 40 2093 43 2094 41 41 123 2098 61 40 2092 46 2103 40 41 43 2098 41 45 2093 59 125 630 123 2098 61 40 2092 46 2104 40 41 45 2098 41 43 2094 59 125 792 744 2105 40 2095 44 2098 44 2092 46 2106 40 41 41 59 125 777 809 570 2107 40 726 2016 44 726 2017 41 123 726 2108 61 2016 43 2017 59 792 40 40 2016 94 2108 41 38 40 2017 94 2108 41 41 60 1500 59 125 777 809 570 2109 40 726 2003 44 726 2001 44 726 2008 41 123 792 2008 47 2001 60 2003 59 125 125 ,"{'AvgLine': 4, 'CountLine': 143, 'CountStmt': 71, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 43, 'MaxEssential': 1, 'SumEssential': 26, 'AvgCyclomatic': 1, 'CountLineCode': 105, 'CountStmtDecl': 33, 'MaxCyclomatic': 3, 'SumCyclomatic': 32, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 28, 'CountSemicolon': 39, 'CountDeclMethod': 26, 'CountLineCodeExe': 46, 'CountLineComment': 10, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountLineCodeDecl': 33, 'CountDeclMethodAll': 26, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.10', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 32, 'CountDeclClassMethod': 25, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 25, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 32, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0}"
2966,Java,"@Slf4j
public class AccountAgeWitnessService {
    private static final Date RELEASE = Utilities.getUTCDate(2017, GregorianCalendar.NOVEMBER, 11);
    private static final long SAFE_ACCOUNT_AGE_DATE = Utilities.getUTCDate(2019, GregorianCalendar.MARCH, 1).getTime();

    public enum AccountAge {
        UNVERIFIED,
        LESS_ONE_MONTH,
        ONE_TO_TWO_MONTHS,
        TWO_MONTHS_OR_MORE
    }

    public enum SignState {
        UNSIGNED(Res.get(""offerbook.timeSinceSigning.notSigned"")),
        ARBITRATOR(Res.get(""offerbook.timeSinceSigning.info.arbitrator"")),
        PEER_INITIAL(Res.get(""offerbook.timeSinceSigning.info.peer"")),
        PEER_LIMIT_LIFTED(Res.get(""offerbook.timeSinceSigning.info.peerLimitLifted"")),
        PEER_SIGNER(Res.get(""offerbook.timeSinceSigning.info.signer"")),
        BANNED(Res.get(""offerbook.timeSinceSigning.info.banned""));

        private String displayString;
        private String hash = """";
        private long daysUntilLimitLifted = 0;

        SignState(String displayString) {
            this.displayString = displayString;
        }

        public SignState addHash(String hash) {
            this.hash = hash;
            return this;
        }

        public SignState setDaysUntilLimitLifted(long days) {
            this.daysUntilLimitLifted = days;
            return this;
        }

        public String getDisplayString() {
            if (!hash.isEmpty()) { // Only showing in DEBUG mode
                return displayString + "" "" + hash;
            }
            return String.format(displayString, daysUntilLimitLifted);
        }

        public boolean isLimitLifted() {
            return this == PEER_LIMIT_LIFTED || this == PEER_SIGNER || this == ARBITRATOR;
        }

    }

    private final KeyRing keyRing;
    private final P2PService p2PService;
    private final User user;
    private final SignedWitnessService signedWitnessService;
    private final ChargeBackRisk chargeBackRisk;
    private final AccountAgeWitnessStorageService accountAgeWitnessStorageService;
    private final Clock clock;
    private final FilterManager filterManager;
    @Getter
    private final AccountAgeWitnessUtils accountAgeWitnessUtils;

    private final Map<P2PDataStorage.ByteArray, AccountAgeWitness> accountAgeWitnessMap = new HashMap<>();

    // The accountAgeWitnessMap is very large (70k items) and access is a bit expensive. We usually only access less
    // than 100 items, those who have offers online. So we use a cache for a fast lookup and only if
    // not found there we use the accountAgeWitnessMap and put then the new item into our cache.
    private final Map<P2PDataStorage.ByteArray, AccountAgeWitness> accountAgeWitnessCache = new ConcurrentHashMap<>();


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ///////////////////////////////////////////////////////////////////////////////////////////


    @Inject
    public AccountAgeWitnessService(KeyRing keyRing,
                                    P2PService p2PService,
                                    User user,
                                    SignedWitnessService signedWitnessService,
                                    ChargeBackRisk chargeBackRisk,
                                    AccountAgeWitnessStorageService accountAgeWitnessStorageService,
                                    AppendOnlyDataStoreService appendOnlyDataStoreService,
                                    Clock clock,
                                    FilterManager filterManager) {
        this.keyRing = keyRing;
        this.p2PService = p2PService;
        this.user = user;
        this.signedWitnessService = signedWitnessService;
        this.chargeBackRisk = chargeBackRisk;
        this.accountAgeWitnessStorageService = accountAgeWitnessStorageService;
        this.clock = clock;
        this.filterManager = filterManager;

        accountAgeWitnessUtils = new AccountAgeWitnessUtils(
                this,
                signedWitnessService,
                keyRing);

        // We need to add that early (before onAllServicesInitialized) as it will be used at startup.
        appendOnlyDataStoreService.addService(accountAgeWitnessStorageService);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Lifecycle
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void onAllServicesInitialized() {
        p2PService.getP2PDataStorage().addAppendOnlyDataStoreListener(payload -> {
            if (payload instanceof AccountAgeWitness)
                addToMap((AccountAgeWitness) payload);
        });

        // At startup the P2PDataStorage initializes earlier, otherwise we get the listener called.
        accountAgeWitnessStorageService.getMapOfAllData().values().stream()
                .filter(e -> e instanceof AccountAgeWitness)
                .map(e -> (AccountAgeWitness) e)
                .forEach(this::addToMap);

        if (p2PService.isBootstrapped()) {
            onBootStrapped();
        } else {
            p2PService.addP2PServiceListener(new BootstrapListener() {
                @Override
                public void onUpdatedDataReceived() {
                    onBootStrapped();
                }
            });
        }
    }

    private void onBootStrapped() {
        republishAllFiatAccounts();
        signAndPublishSameNameAccounts();
    }


    // At startup we re-publish the witness data of all fiat accounts to ensure we got our data well distributed.
    private void republishAllFiatAccounts() {
        if (user.getPaymentAccounts() != null)
            user.getPaymentAccounts().stream()
                    .filter(account -> !(account instanceof AssetAccount))
                    .forEach(account -> {
                        AccountAgeWitness myWitness = getMyWitness(account.getPaymentAccountPayload());
                        // We only publish if the date of our witness is inside the date tolerance.
                        // It would be rejected otherwise from the peers.
                        if (myWitness.isDateInTolerance(clock)) {
                            // We delay with a random interval of 20-60 sec to ensure to be better connected and don't
                            // stress the P2P network with publishing all at once at startup time.
                            int delayInSec = 20 + new Random().nextInt(40);
                            UserThread.runAfter(() ->
                                    p2PService.addPersistableNetworkPayload(myWitness, true), delayInSec);
                        }
                    });
    }

    @VisibleForTesting
    public void addToMap(AccountAgeWitness accountAgeWitness) {
        accountAgeWitnessMap.putIfAbsent(accountAgeWitness.getHashAsByteArray(), accountAgeWitness);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Generic
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void publishMyAccountAgeWitness(PaymentAccountPayload paymentAccountPayload) {
        AccountAgeWitness accountAgeWitness = getMyWitness(paymentAccountPayload);
        P2PDataStorage.ByteArray hash = accountAgeWitness.getHashAsByteArray();

        // We use first our fast lookup cache. If its in accountAgeWitnessCache it is also in accountAgeWitnessMap
        // and we do not publish.
        if (accountAgeWitnessCache.containsKey(hash)) {
            return;
        }

        if (!accountAgeWitnessMap.containsKey(hash)) {
            p2PService.addPersistableNetworkPayload(accountAgeWitness, false);
        }
    }

    public byte[] getPeerAccountAgeWitnessHash(Trade trade) {
        return findTradePeerWitness(trade)
                .map(AccountAgeWitness::getHash)
                .orElse(null);
    }

    byte[] getAccountInputDataWithSalt(PaymentAccountPayload paymentAccountPayload) {
        return Utilities.concatenateByteArrays(paymentAccountPayload.getAgeWitnessInputData(),
                paymentAccountPayload.getSalt());
    }

    @VisibleForTesting
    public AccountAgeWitness getNewWitness(PaymentAccountPayload paymentAccountPayload, PubKeyRing pubKeyRing) {
        byte[] accountInputDataWithSalt = getAccountInputDataWithSalt(paymentAccountPayload);
        byte[] hash = Hash.getSha256Ripemd160hash(Utilities.concatenateByteArrays(accountInputDataWithSalt,
                pubKeyRing.getSignaturePubKeyBytes()));
        return new AccountAgeWitness(hash, new Date().getTime());
    }

    Optional<AccountAgeWitness> findWitness(PaymentAccountPayload paymentAccountPayload,
                                            PubKeyRing pubKeyRing) {
        if (paymentAccountPayload == null) {
            return Optional.empty();
        }

        byte[] accountInputDataWithSalt = getAccountInputDataWithSalt(paymentAccountPayload);
        byte[] hash = Hash.getSha256Ripemd160hash(Utilities.concatenateByteArrays(accountInputDataWithSalt,
                pubKeyRing.getSignaturePubKeyBytes()));

        return getWitnessByHash(hash);
    }

    public Optional<AccountAgeWitness> findWitness(Offer offer) {
        final Optional<String> accountAgeWitnessHash = offer.getAccountAgeWitnessHashAsHex();
        return accountAgeWitnessHash.isPresent() ?
                getWitnessByHashAsHex(accountAgeWitnessHash.get()) :
                Optional.empty();
    }

    private Optional<AccountAgeWitness> findTradePeerWitness(Trade trade) {
        TradingPeer tradingPeer = trade.getProcessModel().getTradePeer();
        return (tradingPeer == null ||
                tradingPeer.getPaymentAccountPayload() == null ||
                tradingPeer.getPubKeyRing() == null) ?
                Optional.empty() :
                findWitness(tradingPeer.getPaymentAccountPayload(), tradingPeer.getPubKeyRing());
    }

    private Optional<AccountAgeWitness> getWitnessByHash(byte[] hash) {
        P2PDataStorage.ByteArray hashAsByteArray = new P2PDataStorage.ByteArray(hash);

        // First we look up in our fast lookup cache
        if (accountAgeWitnessCache.containsKey(hashAsByteArray)) {
            return Optional.of(accountAgeWitnessCache.get(hashAsByteArray));
        }

        if (accountAgeWitnessMap.containsKey(hashAsByteArray)) {
            AccountAgeWitness accountAgeWitness = accountAgeWitnessMap.get(hashAsByteArray);

            // We add it to our fast lookup cache
            accountAgeWitnessCache.put(hashAsByteArray, accountAgeWitness);

            return Optional.of(accountAgeWitness);
        }

        return Optional.empty();
    }

    private Optional<AccountAgeWitness> getWitnessByHashAsHex(String hashAsHex) {
        return getWitnessByHash(Utilities.decodeFromHex(hashAsHex));
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Witness age
    ///////////////////////////////////////////////////////////////////////////////////////////

    public long getAccountAge(AccountAgeWitness accountAgeWitness, Date now) {
        log.debug(""getAccountAge now={}, accountAgeWitness.getDate()={}"", now.getTime(), accountAgeWitness.getDate());
        return now.getTime() - accountAgeWitness.getDate();
    }

    // Return -1 if no witness found
    public long getAccountAge(PaymentAccountPayload paymentAccountPayload, PubKeyRing pubKeyRing) {
        return findWitness(paymentAccountPayload, pubKeyRing)
                .map(accountAgeWitness -> getAccountAge(accountAgeWitness, new Date()))
                .orElse(-1L);
    }

    public long getAccountAge(Offer offer) {
        return findWitness(offer)
                .map(accountAgeWitness -> getAccountAge(accountAgeWitness, new Date()))
                .orElse(-1L);
    }

    public long getAccountAge(Trade trade) {
        return findTradePeerWitness(trade)
                .map(accountAgeWitness -> getAccountAge(accountAgeWitness, new Date()))
                .orElse(-1L);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Signed age
    ///////////////////////////////////////////////////////////////////////////////////////////

    // Return -1 if not signed
    public long getWitnessSignAge(AccountAgeWitness accountAgeWitness, Date now) {
        List<Long> dates = signedWitnessService.getVerifiedWitnessDateList(accountAgeWitness);
        if (dates.isEmpty()) {
            return -1L;
        } else {
            return now.getTime() - dates.get(0);
        }
    }

    // Return -1 if not signed
    public long getWitnessSignAge(Offer offer, Date now) {
        return findWitness(offer)
                .map(witness -> getWitnessSignAge(witness, now))
                .orElse(-1L);
    }

    public long getWitnessSignAge(Trade trade, Date now) {
        return findTradePeerWitness(trade)
                .map(witness -> getWitnessSignAge(witness, now))
                .orElse(-1L);
    }

    public AccountAge getPeersAccountAgeCategory(long peersAccountAge) {
        return getAccountAgeCategory(peersAccountAge);
    }

    private AccountAge getAccountAgeCategory(long accountAge) {
        if (accountAge < 0) {
            return AccountAge.UNVERIFIED;
        } else if (accountAge < TimeUnit.DAYS.toMillis(30)) {
            return AccountAge.LESS_ONE_MONTH;
        } else if (accountAge < TimeUnit.DAYS.toMillis(60)) {
            return AccountAge.ONE_TO_TWO_MONTHS;
        } else {
            return AccountAge.TWO_MONTHS_OR_MORE;
        }
    }

    // Get trade limit based on a time schedule
    // Buying of BTC with a payment method that has chargeback risk will use a low trade limit schedule
    // All selling and all other fiat payment methods use the normal trade limit schedule
    // Non fiat always has max limit
    // Account types that can get signed will use time since signing, other methods use time since account age creation
    // when measuring account age
    private long getTradeLimit(Coin maxTradeLimit,
                               String currencyCode,
                               AccountAgeWitness accountAgeWitness,
                               AccountAge accountAgeCategory,
                               OfferDirection direction,
                               PaymentMethod paymentMethod) {
        if (CurrencyUtil.isCryptoCurrency(currencyCode) ||
                !PaymentMethod.hasChargebackRisk(paymentMethod, currencyCode) ||
                direction == OfferDirection.SELL) {
            return maxTradeLimit.value;
        }

        long limit = OfferRestrictions.TOLERATED_SMALL_TRADE_AMOUNT.value;
        var factor = signedBuyFactor(accountAgeCategory);
        if (factor > 0) {
            limit = MathUtils.roundDoubleToLong((double) maxTradeLimit.value * factor);
        }

        log.debug(""limit={}, factor={}, accountAgeWitnessHash={}"",
                Coin.valueOf(limit).toFriendlyString(),
                factor,
                Utilities.bytesAsHexString(accountAgeWitness.getHash()));
        return limit;
    }

    private double signedBuyFactor(AccountAge accountAgeCategory) {
        switch (accountAgeCategory) {
            case TWO_MONTHS_OR_MORE:
                return 1;
            case ONE_TO_TWO_MONTHS:
                return 0.5;
            case LESS_ONE_MONTH:
            case UNVERIFIED:
            default:
                return 0;
        }
    }

    private double normalFactor() {
        return 1;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Trade limit exceptions
    ///////////////////////////////////////////////////////////////////////////////////////////

    private boolean isImmature(AccountAgeWitness accountAgeWitness) {
        return accountAgeWitness.getDate() > SAFE_ACCOUNT_AGE_DATE;
    }

    public boolean myHasTradeLimitException(PaymentAccount myPaymentAccount) {
        return hasTradeLimitException(getMyWitness(myPaymentAccount.getPaymentAccountPayload()));
    }

    // There are no trade limits on accounts that
    // - are mature
    // - were signed by an arbitrator
    private boolean hasTradeLimitException(AccountAgeWitness accountAgeWitness) {
        return !isImmature(accountAgeWitness) || signedWitnessService.isSignedByArbitrator(accountAgeWitness);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // My witness
    ///////////////////////////////////////////////////////////////////////////////////////////

    public AccountAgeWitness getMyWitness(PaymentAccountPayload paymentAccountPayload) {
        final Optional<AccountAgeWitness> accountAgeWitnessOptional =
                findWitness(paymentAccountPayload, keyRing.getPubKeyRing());
        return accountAgeWitnessOptional.orElseGet(() -> getNewWitness(paymentAccountPayload, keyRing.getPubKeyRing()));
    }

    private byte[] getMyWitnessHash(PaymentAccountPayload paymentAccountPayload) {
        return getMyWitness(paymentAccountPayload).getHash();
    }

    public String getMyWitnessHashAsHex(PaymentAccountPayload paymentAccountPayload) {
        return Utilities.bytesAsHexString(getMyWitnessHash(paymentAccountPayload));
    }

    public long getMyAccountAge(PaymentAccountPayload paymentAccountPayload) {
        return getAccountAge(getMyWitness(paymentAccountPayload), new Date());
    }

    public long getMyTradeLimit(PaymentAccount paymentAccount, String currencyCode, OfferDirection direction) {
        if (paymentAccount == null)
            return 0;

        AccountAgeWitness accountAgeWitness = getMyWitness(paymentAccount.getPaymentAccountPayload());
        Coin maxTradeLimit = paymentAccount.getPaymentMethod().getMaxTradeLimitAsCoin(currencyCode);
        if (hasTradeLimitException(accountAgeWitness)) {
            return maxTradeLimit.value;
        }
        final long accountSignAge = getWitnessSignAge(accountAgeWitness, new Date());
        AccountAge accountAgeCategory = getAccountAgeCategory(accountSignAge);

        return getTradeLimit(maxTradeLimit,
                currencyCode,
                accountAgeWitness,
                accountAgeCategory,
                direction,
                paymentAccount.getPaymentMethod());
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Verification
    ///////////////////////////////////////////////////////////////////////////////////////////

    public boolean verifyAccountAgeWitness(Trade trade,
                                           PaymentAccountPayload peersPaymentAccountPayload,
                                           Date peersCurrentDate,
                                           PubKeyRing peersPubKeyRing,
                                           byte[] nonce,
                                           byte[] signature,
                                           ErrorMessageHandler errorMessageHandler) {
        final Optional<AccountAgeWitness> accountAgeWitnessOptional =
                findWitness(peersPaymentAccountPayload, peersPubKeyRing);
        // If we don't find a stored witness data we create a new dummy object which makes is easier to reuse the
        // below validation methods. This peersWitness object is not used beside for validation. Some of the
        // validation calls are pointless in the case we create a new Witness ourselves but the verifyPeersTradeLimit
        // need still be called, so we leave also the rest for sake of simplicity.
        AccountAgeWitness peersWitness;
        if (accountAgeWitnessOptional.isPresent()) {
            peersWitness = accountAgeWitnessOptional.get();
        } else {
            peersWitness = getNewWitness(peersPaymentAccountPayload, peersPubKeyRing);
            log.warn(""We did not find the peers witness data. That is expected with peers using an older version."");
        }

        // Check if date in witness is not older than the release date of that feature (was added in v0.6)
        if (!isDateAfterReleaseDate(peersWitness.getDate(), RELEASE, errorMessageHandler))
            return false;

        // Check if peer current date is in tolerance range
        if (!verifyPeersCurrentDate(peersCurrentDate, errorMessageHandler))
            return false;

        final byte[] peersAccountInputDataWithSalt = Utilities.concatenateByteArrays(
                peersPaymentAccountPayload.getAgeWitnessInputData(), peersPaymentAccountPayload.getSalt());
        byte[] hash = Hash.getSha256Ripemd160hash(Utilities.concatenateByteArrays(peersAccountInputDataWithSalt,
                peersPubKeyRing.getSignaturePubKeyBytes()));

        // Check if the hash in the witness data matches the hash derived from the data provided by the peer
        final byte[] peersWitnessHash = peersWitness.getHash();
        if (!verifyWitnessHash(peersWitnessHash, hash, errorMessageHandler))
            return false;

        // Check if the peers trade limit is not less than the trade amount
        if (!verifyPeersTradeLimit(trade.getOffer(), trade.getAmount(), peersWitness, peersCurrentDate,
                errorMessageHandler)) {
            log.error(""verifyPeersTradeLimit failed: peersPaymentAccountPayload {}"", peersPaymentAccountPayload);
            return false;
        }
        // Check if the signature is correct
        return verifySignature(peersPubKeyRing.getSignaturePubKey(), nonce, signature, errorMessageHandler);
    }

    public boolean verifyPeersTradeAmount(Offer offer,
                                          Coin tradeAmount,
                                          ErrorMessageHandler errorMessageHandler) {
        checkNotNull(offer);

        // In case we don't find the witness we check if the trade amount is above the
        // TOLERATED_SMALL_TRADE_AMOUNT (0.01 BTC) and only in that case return false.
        return findWitness(offer)
                .map(witness -> verifyPeersTradeLimit(offer, tradeAmount, witness, new Date(), errorMessageHandler))
                .orElse(isToleratedSmalleAmount(tradeAmount));
    }

    private boolean isToleratedSmalleAmount(Coin tradeAmount) {
        return tradeAmount.value <= OfferRestrictions.TOLERATED_SMALL_TRADE_AMOUNT.value;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Package scope verification subroutines
    ///////////////////////////////////////////////////////////////////////////////////////////

    boolean isDateAfterReleaseDate(long witnessDateAsLong,
                                   Date ageWitnessReleaseDate,
                                   ErrorMessageHandler errorMessageHandler) {
        // Release date minus 1 day as tolerance for not synced clocks
        Date releaseDateWithTolerance = new Date(ageWitnessReleaseDate.getTime() - TimeUnit.DAYS.toMillis(1));
        final Date witnessDate = new Date(witnessDateAsLong);
        final boolean result = witnessDate.after(releaseDateWithTolerance);
        if (!result) {
            final String msg = ""Witness date is set earlier than release date of ageWitness feature. "" +
                    ""ageWitnessReleaseDate="" + ageWitnessReleaseDate + "", witnessDate="" + witnessDate;
            log.warn(msg);
            errorMessageHandler.handleErrorMessage(msg);
        }
        return result;
    }

    private boolean verifyPeersCurrentDate(Date peersCurrentDate, ErrorMessageHandler errorMessageHandler) {
        boolean result = Math.abs(peersCurrentDate.getTime() - new Date().getTime()) <= TimeUnit.DAYS.toMillis(1);
        if (!result) {
            String msg = ""Peers current date is further than 1 day off to our current date. "" +
                    ""PeersCurrentDate="" + peersCurrentDate + ""; myCurrentDate="" + new Date();
            log.warn(msg);
            errorMessageHandler.handleErrorMessage(msg);
        }
        return result;
    }

    private boolean verifyWitnessHash(byte[] witnessHash,
                                      byte[] hash,
                                      ErrorMessageHandler errorMessageHandler) {
        final boolean result = Arrays.equals(witnessHash, hash);
        if (!result) {
            final String msg = ""witnessHash is not matching peers hash. "" +
                    ""witnessHash="" + Utilities.bytesAsHexString(witnessHash) + "", hash="" + Utilities.bytesAsHexString(hash);
            log.warn(msg);
            errorMessageHandler.handleErrorMessage(msg);
        }
        return result;
    }

    private boolean verifyPeersTradeLimit(Offer offer,
                                          Coin tradeAmount,
                                          AccountAgeWitness peersWitness,
                                          Date peersCurrentDate,
                                          ErrorMessageHandler errorMessageHandler) {
        checkNotNull(offer);
        final String currencyCode = offer.getCurrencyCode();
        final Coin defaultMaxTradeLimit = offer.getPaymentMethod().getMaxTradeLimitAsCoin(currencyCode);
        long peersCurrentTradeLimit = defaultMaxTradeLimit.value;
        if (!hasTradeLimitException(peersWitness)) {
            final long accountSignAge = getWitnessSignAge(peersWitness, peersCurrentDate);
            AccountAge accountAgeCategory = getPeersAccountAgeCategory(accountSignAge);
            OfferDirection direction = offer.isMyOffer(keyRing) ?
                    offer.getMirroredDirection() : offer.getDirection();
            peersCurrentTradeLimit = getTradeLimit(defaultMaxTradeLimit, currencyCode, peersWitness,
                    accountAgeCategory, direction, offer.getPaymentMethod());
        }
        // Makers current trade limit cannot be smaller than that in the offer
        boolean result = tradeAmount.value <= peersCurrentTradeLimit;
        if (!result) {
            String msg = ""The peers trade limit is less than the traded amount.\n"" +
                    ""tradeAmount="" + tradeAmount.toFriendlyString() +
                    ""\nPeers trade limit="" + Coin.valueOf(peersCurrentTradeLimit).toFriendlyString() +
                    ""\nOffer ID="" + offer.getShortId() +
                    ""\nPaymentMethod="" + offer.getPaymentMethod().getId() +
                    ""\nCurrencyCode="" + offer.getCurrencyCode();
            log.warn(msg);
            errorMessageHandler.handleErrorMessage(msg);
        }
        return result;
    }

    boolean verifySignature(PublicKey peersPublicKey,
                            byte[] nonce,
                            byte[] signature,
                            ErrorMessageHandler errorMessageHandler) {
        boolean result;
        try {
            result = Sig.verify(peersPublicKey, nonce, signature);
        } catch (CryptoException e) {
            log.warn(e.toString());
            result = false;
        }
        if (!result) {
            final String msg = ""Signature of nonce is not correct. "" +
                    ""peersPublicKey="" + peersPublicKey + "", nonce(hex)="" + Utilities.bytesAsHexString(nonce) +
                    "", signature="" + Utilities.bytesAsHexString(signature);
            log.warn(msg);
            errorMessageHandler.handleErrorMessage(msg);
        }
        return result;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Witness signing
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void arbitratorSignAccountAgeWitness(Coin tradeAmount,
                                                AccountAgeWitness accountAgeWitness,
                                                ECKey key,
                                                PublicKey peersPubKey) {
        signedWitnessService.signAndPublishAccountAgeWitness(tradeAmount, accountAgeWitness, key, peersPubKey);
    }

    public String arbitratorSignOrphanWitness(AccountAgeWitness accountAgeWitness,
                                              ECKey ecKey,
                                              long time) {
        // TODO Is not found signedWitness considered an error case?
        //  Previous code version was throwing an exception in case no signedWitness was found...

        // signAndPublishAccountAgeWitness returns an empty string in success case and error otherwise
        return signedWitnessService.getSignedWitnessSet(accountAgeWitness).stream()
                .findAny()
                .map(SignedWitness::getWitnessOwnerPubKey)
                .map(witnessOwnerPubKey ->
                        signedWitnessService.signAndPublishAccountAgeWitness(accountAgeWitness, ecKey,
                                witnessOwnerPubKey, time)
                )
                .orElse(""No signedWitness found"");
    }

    public String arbitratorSignOrphanPubKey(ECKey key,
                                             byte[] peersPubKey,
                                             long childSignTime) {
        return signedWitnessService.signTraderPubKey(key, peersPubKey, childSignTime);
    }

    public void arbitratorSignAccountAgeWitness(AccountAgeWitness accountAgeWitness,
                                                ECKey key,
                                                byte[] tradersPubKey,
                                                long time) {
        signedWitnessService.signAndPublishAccountAgeWitness(accountAgeWitness, key, tradersPubKey, time);
    }

    public Optional<SignedWitness> traderSignAndPublishPeersAccountAgeWitness(Trade trade) {
        AccountAgeWitness peersWitness = findTradePeerWitness(trade).orElse(null);
        Coin tradeAmount = trade.getAmount();
        checkNotNull(trade.getProcessModel().getTradePeer().getPubKeyRing(), ""Peer must have a keyring"");
        PublicKey peersPubKey = trade.getProcessModel().getTradePeer().getPubKeyRing().getSignaturePubKey();
        checkNotNull(peersWitness, ""Not able to find peers witness, unable to sign for trade {}"",
                trade.toString());
        checkNotNull(tradeAmount, ""Trade amount must not be null"");
        checkNotNull(peersPubKey, ""Peers pub key must not be null"");

        try {
            return signedWitnessService.signAndPublishAccountAgeWitness(tradeAmount, peersWitness, peersPubKey);
        } catch (CryptoException e) {
            log.warn(""Trader failed to sign witness, exception {}"", e.toString());
        }
        return Optional.empty();
    }

    public boolean publishOwnSignedWitness(SignedWitness signedWitness) {
        return signedWitnessService.publishOwnSignedWitness(signedWitness);
    }

    // Arbitrator signing
    public List<TraderDataItem> getTraderPaymentAccounts(long safeDate,
                                                         PaymentMethod paymentMethod,
                                                         List<Dispute> disputes) {
        return disputes.stream()
                .filter(dispute -> dispute.getContract().getPaymentMethodId().equals(paymentMethod.getId()))
                .filter(this::isNotFiltered)
                .filter(this::hasChargebackRisk)
                .filter(this::isBuyerWinner)
                .flatMap(this::getTraderData)
                .filter(Objects::nonNull)
                .filter(traderDataItem ->
                        !signedWitnessService.isSignedAccountAgeWitness(traderDataItem.getAccountAgeWitness()))
                .filter(traderDataItem -> traderDataItem.getAccountAgeWitness().getDate() < safeDate)
                .distinct()
                .collect(Collectors.toList());
    }

    private boolean isNotFiltered(Dispute dispute) {
        boolean isFiltered = filterManager.isNodeAddressBanned(dispute.getContract().getBuyerNodeAddress()) ||
                filterManager.isNodeAddressBanned(dispute.getContract().getSellerNodeAddress()) ||
                filterManager.isCurrencyBanned(dispute.getContract().getOfferPayload().getCurrencyCode()) ||
                filterManager.isPaymentMethodBanned(
                        PaymentMethod.getPaymentMethod(dispute.getContract().getPaymentMethodId())) ||
                filterManager.arePeersPaymentAccountDataBanned(dispute.getContract().getBuyerPaymentAccountPayload()) ||
                filterManager.arePeersPaymentAccountDataBanned(
                        dispute.getContract().getSellerPaymentAccountPayload()) ||
                filterManager.isWitnessSignerPubKeyBanned(
                        Utils.HEX.encode(dispute.getContract().getBuyerPubKeyRing().getSignaturePubKeyBytes())) ||
                filterManager.isWitnessSignerPubKeyBanned(
                        Utils.HEX.encode(dispute.getContract().getSellerPubKeyRing().getSignaturePubKeyBytes()));
        return !isFiltered;
    }

    @VisibleForTesting
    public boolean hasChargebackRisk(Dispute dispute) {
        return chargeBackRisk.hasChargebackRisk(dispute.getContract().getPaymentMethodId(),
                dispute.getContract().getOfferPayload().getCurrencyCode());
    }

    private boolean isBuyerWinner(Dispute dispute) {
        if (!dispute.isClosed() || dispute.getDisputeResultProperty() == null)
            return false;
        return dispute.getDisputeResultProperty().get().getWinner() == DisputeResult.Winner.BUYER;
    }

    private Stream<TraderDataItem> getTraderData(Dispute dispute) {
        Coin tradeAmount = dispute.getContract().getTradeAmount();

        PubKeyRing buyerPubKeyRing = dispute.getContract().getBuyerPubKeyRing();
        PubKeyRing sellerPubKeyRing = dispute.getContract().getSellerPubKeyRing();

        PaymentAccountPayload buyerPaymentAccountPaload = dispute.getContract().getBuyerPaymentAccountPayload();
        PaymentAccountPayload sellerPaymentAccountPaload = dispute.getContract().getSellerPaymentAccountPayload();

        TraderDataItem buyerData = findWitness(buyerPaymentAccountPaload, buyerPubKeyRing)
                .map(witness -> new TraderDataItem(
                        buyerPaymentAccountPaload,
                        witness,
                        tradeAmount,
                        buyerPubKeyRing.getSignaturePubKey()))
                .orElse(null);
        TraderDataItem sellerData = findWitness(sellerPaymentAccountPaload, sellerPubKeyRing)
                .map(witness -> new TraderDataItem(
                        sellerPaymentAccountPaload,
                        witness,
                        tradeAmount,
                        sellerPubKeyRing.getSignaturePubKey()))
                .orElse(null);
        return Stream.of(buyerData, sellerData);
    }

    public boolean hasSignedWitness(Offer offer) {
        return findWitness(offer)
                .map(signedWitnessService::isSignedAccountAgeWitness)
                .orElse(false);
    }

    public boolean peerHasSignedWitness(Trade trade) {
        return findTradePeerWitness(trade)
                .map(signedWitnessService::isSignedAccountAgeWitness)
                .orElse(false);
    }

    public boolean accountIsSigner(AccountAgeWitness accountAgeWitness) {
        return signedWitnessService.isSignerAccountAgeWitness(accountAgeWitness);
    }

    public boolean tradeAmountIsSufficient(Coin tradeAmount) {
        return signedWitnessService.isSufficientTradeAmountForSigning(tradeAmount);
    }

    public SignState getSignState(Offer offer) {
        return findWitness(offer)
                .map(this::getSignState)
                .orElse(SignState.UNSIGNED);
    }

    public SignState getSignState(Trade trade) {
        return findTradePeerWitness(trade)
                .map(this::getSignState)
                .orElse(SignState.UNSIGNED);
    }

    public SignState getSignState(AccountAgeWitness accountAgeWitness) {
        // Add hash to sign state info when running in debug mode
        String hash = log.isDebugEnabled() ? Utilities.bytesAsHexString(accountAgeWitness.getHash()) + ""\n"" +
                signedWitnessService.ownerPubKeyAsString(accountAgeWitness) : """";
        if (signedWitnessService.isFilteredWitness(accountAgeWitness)) {
            return SignState.BANNED.addHash(hash);
        }
        if (signedWitnessService.isSignedByArbitrator(accountAgeWitness)) {
            return SignState.ARBITRATOR.addHash(hash);
        } else {
            final long accountSignAge = getWitnessSignAge(accountAgeWitness, new Date());
            switch (getAccountAgeCategory(accountSignAge)) {
                case TWO_MONTHS_OR_MORE:
                case ONE_TO_TWO_MONTHS:
                    return SignState.PEER_SIGNER.addHash(hash);
                case LESS_ONE_MONTH:
                    return SignState.PEER_INITIAL.addHash(hash)
                            .setDaysUntilLimitLifted(30 - TimeUnit.MILLISECONDS.toDays(accountSignAge));
                case UNVERIFIED:
                default:
                    return SignState.UNSIGNED.addHash(hash);
            }
        }
    }

    public Set<AccountAgeWitness> getOrphanSignedWitnesses() {
        return signedWitnessService.getRootSignedWitnessSet(false).stream()
                .map(signedWitness -> getWitnessByHash(signedWitness.getAccountAgeWitnessHash()).orElse(null))
                .filter(Objects::nonNull)
                .collect(Collectors.toSet());
    }

    public void signAndPublishSameNameAccounts() {
        // Collect accounts that have ownerId to sign unsigned accounts with the same ownderId
        var signerAccounts = Objects.requireNonNull(user.getPaymentAccounts()).stream()
                .filter(account -> account.getOwnerId() != null &&
                        accountIsSigner(getMyWitness(account.getPaymentAccountPayload())))
                .collect(Collectors.toSet());
        var unsignedAccounts = user.getPaymentAccounts().stream()
                .filter(account -> account.getOwnerId() != null &&
                        !signedWitnessService.isSignedAccountAgeWitness(
                                getMyWitness(account.getPaymentAccountPayload())))
                .collect(Collectors.toSet());

        signerAccounts.forEach(signer -> unsignedAccounts.forEach(unsigned -> {
            if (signer.getOwnerId().equals(unsigned.getOwnerId())) {
                try {
                    signedWitnessService.selfSignAndPublishAccountAgeWitness(
                            getMyWitness(unsigned.getPaymentAccountPayload()));
                } catch (CryptoException e) {
                    log.warn(""Self signing failed, exception {}"", e.toString());
                }
            }
        }));
    }

    public Set<SignedWitness> getUnsignedSignerPubKeys() {
        return signedWitnessService.getUnsignedSignerPubKeys();
    }

    public boolean isSignWitnessTrade(Trade trade) {
        checkNotNull(trade, ""trade must not be null"");
        checkNotNull(trade.getOffer(), ""offer must not be null"");
        Contract contract = checkNotNull(trade.getContract());
        PaymentAccountPayload sellerPaymentAccountPayload = contract.getSellerPaymentAccountPayload();
        AccountAgeWitness myWitness = getMyWitness(sellerPaymentAccountPayload);

        getAccountAgeWitnessUtils().witnessDebugLog(trade, myWitness);

        return accountIsSigner(myWitness) &&
                !peerHasSignedWitness(trade) &&
                tradeAmountIsSufficient(trade.getAmount());
    }

    public String getSignInfoFromAccount(PaymentAccount paymentAccount) {
        var pubKey = keyRing.getSignatureKeyPair().getPublic();
        var witness = getMyWitness(paymentAccount.getPaymentAccountPayload());
        return Utilities.bytesAsHexString(witness.getHash()) + "","" + Utilities.bytesAsHexString(pubKey.getEncoded());
    }

    public Tuple2<AccountAgeWitness, byte[]> getSignInfoFromString(String signInfo) {
        var parts = signInfo.split("","");
        if (parts.length != 2) {
            return null;
        }
        byte[] pubKeyHash;
        Optional<AccountAgeWitness> accountAgeWitness;
        try {
            var accountAgeWitnessHash = Utilities.decodeFromHex(parts[0]);
            pubKeyHash = Utilities.decodeFromHex(parts[1]);
            accountAgeWitness = getWitnessByHash(accountAgeWitnessHash);
            return accountAgeWitness
                    .map(ageWitness -> new Tuple2<>(ageWitness, pubKeyHash))
                    .orElse(null);
        } catch (Exception e) {
            return null;
        }
    }
}{'AvgLine': 10, 'CountLine': 867, 'CountStmt': 349, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 254, 'MaxEssential': 5, 'SumEssential': 106, 'AvgCyclomatic': 1, 'CountLineCode': 667, 'CountStmtDecl': 158, 'MaxCyclomatic': 8, 'SumCyclomatic': 136, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 125, 'CountSemicolon': 235, 'CountDeclMethod': 66, 'CountLineCodeExe': 410, 'CountLineComment': 76, 'CountClassCoupled': 66, 'CountClassDerived': 0, 'CountLineCodeDecl': 236, 'CountDeclMethodAll': 66, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.11', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 153, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 43, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 94, 'SumCyclomaticModified': 130, 'CountDeclClassVariable': 2, 'CountDeclMethodDefault': 4, 'CountDeclMethodPrivate': 19, 'CountDeclInstanceMethod': 66, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 66, 'CountDeclInstanceVariable': 11, 'PercentLackOfCohesionModified': 84}"
2644,Java,"public abstract class AbstractNodeCostSearch implements IPathFinder, Helper {

    protected final int startX;
    protected final int startY;
    protected final int startZ;

    protected final Goal goal;

    private final CalculationContext context;

    /**
     * @see <a href=""https://github.com/cabaletta/baritone/issues/107"">Issue #107</a>
     */
    private final Long2ObjectOpenHashMap<PathNode> map;

    protected PathNode startNode;

    protected PathNode mostRecentConsidered;

    protected final PathNode[] bestSoFar = new PathNode[COEFFICIENTS.length];

    private volatile boolean isFinished;

    protected boolean cancelRequested;

    /**
     * This is really complicated and hard to explain. I wrote a comment in the old version of MineBot but it was so
     * long it was easier as a Google Doc (because I could insert charts).
     *
     * @see <a href=""https://docs.google.com/document/d/1WVHHXKXFdCR1Oz__KtK8sFqyvSwJN_H4lftkHFgmzlc/edit"">here</a>
     */
    protected static final double[] COEFFICIENTS = {1.5, 2, 2.5, 3, 4, 5, 10};

    /**
     * If a path goes less than 5 blocks and doesn't make it to its goal, it's not worth considering.
     */
    protected static final double MIN_DIST_PATH = 5;

    /**
     * there are floating point errors caused by random combinations of traverse and diagonal over a flat area
     * that means that sometimes there's a cost improvement of like 10 ^ -16
     * it's not worth the time to update the costs, decrease-key the heap, potentially repropagate, etc
     * <p>
     * who cares about a hundredth of a tick? that's half a millisecond for crying out loud!
     */
    protected static final double MIN_IMPROVEMENT = 0.01;

    AbstractNodeCostSearch(int startX, int startY, int startZ, Goal goal, CalculationContext context) {
        this.startX = startX;
        this.startY = startY;
        this.startZ = startZ;
        this.goal = goal;
        this.context = context;
        this.map = new Long2ObjectOpenHashMap<>(Baritone.settings().pathingMapDefaultSize.value, Baritone.settings().pathingMapLoadFactor.value);
    }

    public void cancel() {
        cancelRequested = true;
    }

    @Override
    public synchronized PathCalculationResult calculate(long primaryTimeout, long failureTimeout) {
        if (isFinished) {
            throw new IllegalStateException(""Path finder cannot be reused!"");
        }
        cancelRequested = false;
        try {
            IPath path = calculate0(primaryTimeout, failureTimeout).map(IPath::postProcess).orElse(null);
            if (cancelRequested) {
                return new PathCalculationResult(PathCalculationResult.Type.CANCELLATION);
            }
            if (path == null) {
                return new PathCalculationResult(PathCalculationResult.Type.FAILURE);
            }
            int previousLength = path.length();
            path = path.cutoffAtLoadedChunks(context.bsi);
            if (path.length() < previousLength) {
                Helper.HELPER.logDebug(""Cutting off path at edge of loaded chunks"");
                Helper.HELPER.logDebug(""Length decreased by "" + (previousLength - path.length()));
            } else {
                Helper.HELPER.logDebug(""Path ends within loaded chunks"");
            }
            previousLength = path.length();
            path = path.staticCutoff(goal);
            if (path.length() < previousLength) {
                Helper.HELPER.logDebug(""Static cutoff "" + previousLength + "" to "" + path.length());
            }
            if (goal.isInGoal(path.getDest())) {
                return new PathCalculationResult(PathCalculationResult.Type.SUCCESS_TO_GOAL, path);
            } else {
                return new PathCalculationResult(PathCalculationResult.Type.SUCCESS_SEGMENT, path);
            }
        } catch (Exception e) {
            Helper.HELPER.logDirect(""Pathing exception: "" + e);
            e.printStackTrace();
            return new PathCalculationResult(PathCalculationResult.Type.EXCEPTION);
        } finally {
            // this is run regardless of what exception may or may not be raised by calculate0
            isFinished = true;
        }
    }

    protected abstract Optional<IPath> calculate0(long primaryTimeout, long failureTimeout);

    /**
     * Determines the distance squared from the specified node to the start
     * node. Intended for use in distance comparison, rather than anything that
     * considers the real distance value, hence the ""sq"".
     *
     * @param n A node
     * @return The distance, squared
     */
    protected double getDistFromStartSq(PathNode n) {
        int xDiff = n.x - startX;
        int yDiff = n.y - startY;
        int zDiff = n.z - startZ;
        return xDiff * xDiff + yDiff * yDiff + zDiff * zDiff;
    }

    /**
     * Attempts to search the block position hashCode long to {@link PathNode} map
     * for the node mapped to the specified pos. If no node is found,
     * a new node is created.
     *
     * @param x        The x position of the node
     * @param y        The y position of the node
     * @param z        The z position of the node
     * @param hashCode The hash code of the node, provided by {@link BetterBlockPos#longHash(int, int, int)}
     * @return The associated node
     * @see <a href=""https://github.com/cabaletta/baritone/issues/107"">Issue #107</a>
     */

    protected PathNode getNodeAtPosition(int x, int y, int z, long hashCode) {
        PathNode node = map.get(hashCode);
        if (node == null) {
            node = new PathNode(x, y, z, goal);
            map.put(hashCode, node);
        }
        return node;
    }

    @Override
    public Optional<IPath> pathToMostRecentNodeConsidered() {
        return Optional.ofNullable(mostRecentConsidered).map(node -> new Path(startNode, node, 0, goal, context));
    }

    @Override
    public Optional<IPath> bestPathSoFar() {
        return bestSoFar(false, 0);
    }

    protected Optional<IPath> bestSoFar(boolean logInfo, int numNodes) {
        if (startNode == null) {
            return Optional.empty();
        }
        double bestDist = 0;
        for (int i = 0; i < COEFFICIENTS.length; i++) {
            if (bestSoFar[i] == null) {
                continue;
            }
            double dist = getDistFromStartSq(bestSoFar[i]);
            if (dist > bestDist) {
                bestDist = dist;
            }
            if (dist > MIN_DIST_PATH * MIN_DIST_PATH) { // square the comparison since distFromStartSq is squared
                if (logInfo) {
                    if (COEFFICIENTS[i] >= 3) {
                        System.out.println(""Warning: cost coefficient is greater than three! Probably means that"");
                        System.out.println(""the path I found is pretty terrible (like sneak-bridging for dozens of blocks)"");
                        System.out.println(""But I'm going to do it anyway, because yolo"");
                    }
                    System.out.println(""Path goes for "" + Math.sqrt(dist) + "" blocks"");
                    logDebug(""A* cost coefficient "" + COEFFICIENTS[i]);
                }
                return Optional.of(new Path(startNode, bestSoFar[i], numNodes, goal, context));
            }
        }
        // instead of returning bestSoFar[0], be less misleading
        // if it actually won't find any path, don't make them think it will by rendering a dark blue that will never actually happen
        if (logInfo) {
            logDebug(""Even with a cost coefficient of "" + COEFFICIENTS[COEFFICIENTS.length - 1] + "", I couldn't get more than "" + Math.sqrt(bestDist) + "" blocks"");
            logDebug(""No path found =("");
            logNotification(""No path found =("", true);
        }
        return Optional.empty();
    }

    @Override
    public final boolean isFinished() {
        return isFinished;
    }

    @Override
    public final Goal getGoal() {
        return goal;
    }

    public BetterBlockPos getStart() {
        return new BetterBlockPos(startX, startY, startZ);
    }

    protected int mapSize() {
        return map.size();
    }
}",1,777 539 587 2000 693 2001 44 2002 123 775 657 704 2003 59 775 657 704 2004 59 775 657 704 2005 59 775 657 2006 2007 59 773 657 2008 2009 59 306 773 657 2010 60 2011 62 2012 59 775 2011 2013 59 775 2011 2014 59 775 657 2011 91 93 2015 61 744 2011 91 2016 46 2017 93 59 773 866 570 2018 59 775 570 2019 59 306 775 809 657 625 91 93 2016 61 123 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 125 59 306 775 809 657 625 2020 61 1502 59 306 775 809 657 625 2021 61 1500 59 2000 40 704 2003 44 704 2004 44 704 2005 44 2006 2007 44 2008 2009 41 123 823 46 2003 61 2003 59 823 46 2004 61 2004 59 823 46 2005 61 2005 59 823 46 2007 61 2007 59 823 46 2009 61 2009 59 823 46 2012 61 744 2010 60 62 40 2022 46 2023 40 41 46 2024 46 2025 44 2022 46 2023 40 41 46 2026 46 2025 41 59 125 777 865 2027 40 41 123 2019 61 2028 59 125 64 2029 777 821 2030 2031 40 726 2032 44 726 2033 41 123 688 40 2018 41 123 825 744 2034 40 362 41 59 125 2019 61 2035 59 830 123 2036 2037 61 2038 40 2032 44 2033 41 46 2012 40 2036 58 58 2039 41 46 2040 40 2041 41 59 688 40 2019 41 123 792 744 2030 40 2030 46 2042 46 2043 41 59 125 688 40 2037 323 2041 41 123 792 744 2030 40 2030 46 2044 46 2045 41 59 125 704 2046 61 2037 46 2017 40 41 59 2037 61 2037 46 2047 40 2009 46 2048 41 59 688 40 2037 46 2017 40 41 60 2046 41 123 2002 46 2049 46 2050 40 362 41 59 2002 46 2049 46 2050 40 362 43 40 2046 45 2037 46 2017 40 41 41 41 59 125 630 123 2002 46 2051 46 2052 40 362 41 59 125 2046 61 2037 46 2017 40 41 59 2037 61 2037 46 2053 40 2007 41 59 688 40 2037 46 2017 40 41 60 2046 41 123 2002 46 2054 46 2055 40 362 43 2046 43 362 43 2037 46 2017 40 41 41 59 125 688 40 2007 46 2056 40 2037 46 2057 40 41 41 41 123 792 744 2030 40 2030 46 2058 46 2059 44 2037 41 59 125 630 123 792 744 2030 40 2030 46 2060 46 2061 44 2037 41 59 125 125 580 40 2062 2063 41 123 2002 46 2064 46 2065 40 362 43 2063 41 59 2063 46 2066 40 41 59 792 744 2030 40 2030 46 2067 46 2068 41 59 125 658 123 330 2018 61 2069 59 125 125 775 539 2070 60 2071 62 2072 40 726 2032 44 726 2033 41 59 306 775 625 2073 40 2011 2074 41 123 704 2075 61 2074 46 2076 45 2003 59 704 2077 61 2074 46 2078 45 2004 59 704 2079 61 2074 46 2080 45 2005 59 792 2075 42 2075 43 2077 42 2077 43 2079 42 2079 59 125 306 775 2011 2081 40 704 2082 44 704 2083 44 704 2084 44 726 2085 41 123 2011 2086 61 2012 46 2087 40 2085 41 59 688 40 2086 323 2088 41 123 2086 61 744 2011 40 2082 44 2083 44 2084 44 2007 41 59 2012 46 2089 40 2085 44 2086 41 59 125 792 2086 59 125 64 2029 777 2070 60 2071 62 2090 40 41 123 792 2070 46 2091 40 2014 41 46 2012 40 2092 45 62 744 2093 40 2013 44 2092 44 1500 44 2007 44 2009 41 41 59 125 64 2029 777 2070 60 2071 62 2094 40 41 123 792 2015 40 2095 44 1500 41 59 125 775 2070 60 2071 62 2015 40 570 2096 44 704 2097 41 123 688 40 2013 323 2098 41 123 792 2070 46 2099 40 41 59 125 625 2100 61 1500 59 664 40 704 2101 61 1500 59 2101 60 2016 46 2017 59 2101 349 41 123 688 40 2015 91 2101 93 323 2098 41 123 605 59 125 625 2102 61 2073 40 2015 91 2101 93 41 59 688 40 2102 62 2100 41 123 2100 61 2102 59 125 688 40 2102 62 2020 42 2020 41 123 330 688 40 2096 41 123 688 40 2016 91 2101 93 325 1502 41 123 2103 46 2104 46 2105 40 362 41 59 2103 46 2104 46 2105 40 362 41 59 2103 46 2104 46 2105 40 362 41 59 125 2106 46 2107 46 2108 40 362 43 2109 46 2110 40 2102 41 43 362 41 59 2111 40 362 43 2016 91 2101 93 41 59 125 792 2070 46 2112 40 744 2113 40 2013 44 2015 91 2101 93 44 2097 44 2007 44 2009 41 41 59 125 125 330 330 688 40 2096 41 123 2114 40 362 43 2016 91 2016 46 2017 45 1501 93 43 362 43 2115 46 2116 40 2100 41 43 362 41 59 2114 40 362 41 59 2117 40 362 44 2118 41 59 125 792 2070 46 2119 40 41 59 125 64 2029 777 657 570 2018 40 41 123 792 2018 59 125 64 2029 777 657 2006 2120 40 41 123 792 2007 59 125 777 2121 2122 40 41 123 792 744 2121 40 2003 44 2004 44 2005 41 59 125 775 704 2123 40 41 123 792 2012 46 2124 40 41 59 125 125 ,"{'AvgLine': 11, 'CountLine': 210, 'CountStmt': 101, 'MaxNesting': 4, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 68, 'MaxEssential': 5, 'SumEssential': 21, 'AvgCyclomatic': 2, 'CountLineCode': 137, 'CountStmtDecl': 37, 'MaxCyclomatic': 9, 'SumCyclomatic': 29, 'AvgLineComment': 2, 'CountClassBase': 3, 'CountLineBlank': 26, 'CountSemicolon': 72, 'CountDeclMethod': 13, 'CountLineCodeExe': 79, 'CountLineComment': 48, 'CountClassCoupled': 16, 'CountClassDerived': 1, 'CountLineCodeDecl': 41, 'CountDeclMethodAll': 13, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.35', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 29, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 7, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 79, 'SumCyclomaticModified': 29, 'CountDeclClassVariable': 3, 'CountDeclMethodDefault': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 13, 'CountDeclMethodProtected': 5, 'CountClassCoupledModified': 16, 'CountDeclInstanceVariable': 11, 'PercentLackOfCohesionModified': 71}"
2976,Java,"@Slf4j
public class DaoFacade implements DaoSetupService {
    private final ProposalListPresentation proposalListPresentation;
    private final ProposalService proposalService;
    private final BallotListService ballotListService;
    private final BallotListPresentation ballotListPresentation;
    private final MyProposalListService myProposalListService;
    private final DaoStateService daoStateService;
    private final DaoStateMonitoringService daoStateMonitoringService;
    private final PeriodService periodService;
    private final CycleService cycleService;
    private final MyBlindVoteListService myBlindVoteListService;
    private final MyVoteListService myVoteListService;
    private final CompensationProposalFactory compensationProposalFactory;
    private final ReimbursementProposalFactory reimbursementProposalFactory;
    private final ChangeParamProposalFactory changeParamProposalFactory;
    private final ConfiscateBondProposalFactory confiscateBondProposalFactory;
    private final RoleProposalFactory roleProposalFactory;
    private final GenericProposalFactory genericProposalFactory;
    private final RemoveAssetProposalFactory removeAssetProposalFactory;
    private final BondedRolesRepository bondedRolesRepository;
    private final BondedReputationRepository bondedReputationRepository;
    private final MyBondedReputationRepository myBondedReputationRepository;
    private final LockupTxService lockupTxService;
    private final UnlockTxService unlockTxService;
    private final DaoStateStorageService daoStateStorageService;

    private final ObjectProperty<DaoPhase.Phase> phaseProperty = new SimpleObjectProperty<>(DaoPhase.Phase.UNDEFINED);

    @Inject
    public DaoFacade(MyProposalListService myProposalListService,
                     ProposalListPresentation proposalListPresentation,
                     ProposalService proposalService,
                     BallotListService ballotListService,
                     BallotListPresentation ballotListPresentation,
                     DaoStateService daoStateService,
                     DaoStateMonitoringService daoStateMonitoringService,
                     PeriodService periodService,
                     CycleService cycleService,
                     MyBlindVoteListService myBlindVoteListService,
                     MyVoteListService myVoteListService,
                     CompensationProposalFactory compensationProposalFactory,
                     ReimbursementProposalFactory reimbursementProposalFactory,
                     ChangeParamProposalFactory changeParamProposalFactory,
                     ConfiscateBondProposalFactory confiscateBondProposalFactory,
                     RoleProposalFactory roleProposalFactory,
                     GenericProposalFactory genericProposalFactory,
                     RemoveAssetProposalFactory removeAssetProposalFactory,
                     BondedRolesRepository bondedRolesRepository,
                     BondedReputationRepository bondedReputationRepository,
                     MyBondedReputationRepository myBondedReputationRepository,
                     LockupTxService lockupTxService,
                     UnlockTxService unlockTxService,
                     DaoStateStorageService daoStateStorageService) {
        this.proposalListPresentation = proposalListPresentation;
        this.proposalService = proposalService;
        this.ballotListService = ballotListService;
        this.ballotListPresentation = ballotListPresentation;
        this.myProposalListService = myProposalListService;
        this.daoStateService = daoStateService;
        this.daoStateMonitoringService = daoStateMonitoringService;
        this.periodService = periodService;
        this.cycleService = cycleService;
        this.myBlindVoteListService = myBlindVoteListService;
        this.myVoteListService = myVoteListService;
        this.compensationProposalFactory = compensationProposalFactory;
        this.reimbursementProposalFactory = reimbursementProposalFactory;
        this.changeParamProposalFactory = changeParamProposalFactory;
        this.confiscateBondProposalFactory = confiscateBondProposalFactory;
        this.roleProposalFactory = roleProposalFactory;
        this.genericProposalFactory = genericProposalFactory;
        this.removeAssetProposalFactory = removeAssetProposalFactory;
        this.bondedRolesRepository = bondedRolesRepository;
        this.bondedReputationRepository = bondedReputationRepository;
        this.myBondedReputationRepository = myBondedReputationRepository;
        this.lockupTxService = lockupTxService;
        this.unlockTxService = unlockTxService;
        this.daoStateStorageService = daoStateStorageService;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // DaoSetupService
    ///////////////////////////////////////////////////////////////////////////////////////////

    @Override
    public void addListeners() {
        daoStateService.addDaoStateListener(new DaoStateListener() {
            @Override
            public void onNewBlockHeight(int blockHeight) {
                if (blockHeight > 0 && periodService.getCurrentCycle() != null)
                    periodService.getCurrentCycle().getPhaseForHeight(blockHeight).ifPresent(phaseProperty::set);
            }
        });
    }

    @Override
    public void start() {
    }


    public void addBsqStateListener(DaoStateListener listener) {
        daoStateService.addDaoStateListener(listener);
    }

    public void removeBsqStateListener(DaoStateListener listener) {
        daoStateService.removeDaoStateListener(listener);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    //
    // Phase: Proposal
    //
    ///////////////////////////////////////////////////////////////////////////////////////////


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Use case: Present lists
    ///////////////////////////////////////////////////////////////////////////////////////////

    public ObservableList<Proposal> getActiveOrMyUnconfirmedProposals() {
        return proposalListPresentation.getActiveOrMyUnconfirmedProposals();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Use case: Create proposal
    ///////////////////////////////////////////////////////////////////////////////////////////

    // Creation of Proposal and proposalTransaction
    public ProposalWithTransaction getCompensationProposalWithTransaction(String name,
                                                                          String link,
                                                                          Coin requestedBsq)
            throws ProposalValidationException, InsufficientMoneyException, TxException {
        return compensationProposalFactory.createProposalWithTransaction(name,
                link,
                requestedBsq);
    }

    public ProposalWithTransaction getReimbursementProposalWithTransaction(String name,
                                                                           String link,
                                                                           Coin requestedBsq)
            throws ProposalValidationException, InsufficientMoneyException, TxException {
        return reimbursementProposalFactory.createProposalWithTransaction(name,
                link,
                requestedBsq);
    }

    public ProposalWithTransaction getParamProposalWithTransaction(String name,
                                                                   String link,
                                                                   Param param,
                                                                   String paramValue)
            throws ProposalValidationException, InsufficientMoneyException, TxException {
        return changeParamProposalFactory.createProposalWithTransaction(name,
                link,
                param,
                paramValue);
    }

    public ProposalWithTransaction getConfiscateBondProposalWithTransaction(String name,
                                                                            String link,
                                                                            String lockupTxId)
            throws ProposalValidationException, InsufficientMoneyException, TxException {
        return confiscateBondProposalFactory.createProposalWithTransaction(name,
                link,
                lockupTxId);
    }

    public ProposalWithTransaction getBondedRoleProposalWithTransaction(Role role)
            throws ProposalValidationException, InsufficientMoneyException, TxException {
        return roleProposalFactory.createProposalWithTransaction(role);
    }

    public ProposalWithTransaction getGenericProposalWithTransaction(String name,
                                                                     String link)
            throws ProposalValidationException, InsufficientMoneyException, TxException {
        return genericProposalFactory.createProposalWithTransaction(name, link);
    }

    public ProposalWithTransaction getRemoveAssetProposalWithTransaction(String name,
                                                                         String link,
                                                                         Asset asset)
            throws ProposalValidationException, InsufficientMoneyException, TxException {
        return removeAssetProposalFactory.createProposalWithTransaction(name, link, asset);
    }

    public ObservableList<BondedRole> getBondedRoles() {
        return bondedRolesRepository.getBonds();
    }

    public List<BondedRole> getAcceptedBondedRoles() {
        return bondedRolesRepository.getAcceptedBonds();
    }

    // Show fee
    public Coin getProposalFee(int chainHeight) {
        return ProposalConsensus.getFee(daoStateService, chainHeight);
    }

    // Publish proposal tx, proposal payload and persist it to myProposalList
    public void publishMyProposal(Proposal proposal, Transaction transaction, ResultHandler resultHandler,
                                  ErrorMessageHandler errorMessageHandler) {
        myProposalListService.publishTxAndPayload(proposal, transaction, resultHandler, errorMessageHandler);
    }

    // Check if it is my proposal
    public boolean isMyProposal(Proposal proposal) {
        return myProposalListService.isMine(proposal);
    }

    // Remove my proposal
    public boolean removeMyProposal(Proposal proposal) {
        return myProposalListService.remove(proposal);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    //
    // Phase: Blind Vote
    //
    ///////////////////////////////////////////////////////////////////////////////////////////


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Use case: Present lists
    ///////////////////////////////////////////////////////////////////////////////////////////

    public ObservableList<Ballot> getAllBallots() {
        return ballotListPresentation.getAllBallots();
    }

    public List<Ballot> getAllValidBallots() {
        return ballotListPresentation.getAllValidBallots();
    }

    public FilteredList<Ballot> getBallotsOfCycle() {
        return ballotListPresentation.getBallotsOfCycle();
    }

    public Tuple2<Long, Long> getMeritAndStakeForProposal(String proposalTxId) {
        return myVoteListService.getMeritAndStakeForProposal(proposalTxId, myBlindVoteListService);
    }

    public long getAvailableMerit() {
        return myBlindVoteListService.getCurrentlyAvailableMerit();
    }

    public List<MyVote> getMyVoteListForCycle() {
        return myVoteListService.getMyVoteListForCycle();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Use case: Vote
    ///////////////////////////////////////////////////////////////////////////////////////////

    // Vote on ballot
    public void setVote(Ballot ballot, @Nullable Vote vote) {
        ballotListService.setVote(ballot, vote);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Use case: Create blindVote
    ///////////////////////////////////////////////////////////////////////////////////////////

    // When creating blind vote we present fee
    public Coin getBlindVoteFeeForCycle() {
        return BlindVoteConsensus.getFee(daoStateService, daoStateService.getChainHeight());
    }

    public Tuple2<Coin, Integer> getBlindVoteMiningFeeAndTxVsize(Coin stake)
            throws WalletException, InsufficientMoneyException, TransactionVerificationException {
        return myBlindVoteListService.getMiningFeeAndTxVsize(stake);
    }

    // Publish blindVote tx and broadcast blindVote to p2p network and store to blindVoteList.
    public void publishBlindVote(Coin stake, ResultHandler resultHandler, ExceptionHandler exceptionHandler) {
        myBlindVoteListService.publishBlindVote(stake, resultHandler, exceptionHandler);
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    //
    // Generic
    //
    ///////////////////////////////////////////////////////////////////////////////////////////


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Use case: Presentation of phases
    ///////////////////////////////////////////////////////////////////////////////////////////

    // Because last block in request and voting phases must not be used for making a tx as it will get confirmed in the
    // next block which would be already the next phase we hide that last block to the user and add it to the break.
    public int getFirstBlockOfPhaseForDisplay(int height, DaoPhase.Phase phase) {
        int firstBlock = periodService.getFirstBlockOfPhase(height, phase);
        switch (phase) {
            case UNDEFINED:
                break;
            case PROPOSAL:
                break;
            case BREAK1:
                firstBlock--;
                break;
            case BLIND_VOTE:
                break;
            case BREAK2:
                firstBlock--;
                break;
            case VOTE_REVEAL:
                break;
            case BREAK3:
                firstBlock--;
                break;
            case RESULT:
                break;
        }
        return firstBlock;
    }

    public Map<Integer, Date> getBlockStartDateByCycleIndex() {
        return periodService.getCycles().stream().collect(Collectors.toMap(
                cycleService::getCycleIndex,
                cycle -> new Date(daoStateService.getBlockTimeAtBlockHeight(cycle.getHeightOfFirstBlock()))
        ));
    }

    // Because last block in request and voting phases must not be used for making a tx as it will get confirmed in the
    // next block which would be already the next phase we hide that last block to the user and add it to the break.
    public int getLastBlockOfPhaseForDisplay(int height, DaoPhase.Phase phase) {
        int lastBlock = periodService.getLastBlockOfPhase(height, phase);
        switch (phase) {
            case UNDEFINED:
                break;
            case PROPOSAL:
                lastBlock--;
                break;
            case BREAK1:
                break;
            case BLIND_VOTE:
                lastBlock--;
                break;
            case BREAK2:
                break;
            case VOTE_REVEAL:
                lastBlock--;
                break;
            case BREAK3:
                break;
            case RESULT:
                break;
        }
        return lastBlock;
    }

    // Because last block in request and voting phases must not be used for making a tx as it will get confirmed in the
    // next block which would be already the next phase we hide that last block to the user and add it to the break.
    public int getDurationForPhaseForDisplay(DaoPhase.Phase phase) {
        int duration = periodService.getDurationForPhase(phase, daoStateService.getChainHeight());
        switch (phase) {
            case UNDEFINED:
                break;
            case PROPOSAL:
                duration--;
                break;
            case BREAK1:
                duration++;
                break;
            case BLIND_VOTE:
                duration--;
                break;
            case BREAK2:
                duration++;
                break;
            case VOTE_REVEAL:
                duration--;
                break;
            case BREAK3:
                duration++;
                break;
            case RESULT:
                break;
        }
        return duration;
    }

    public int getCurrentCycleDuration() {
        Cycle currentCycle = periodService.getCurrentCycle();
        return currentCycle != null ? currentCycle.getDuration() : 0;
    }

    // listeners for phase change
    public ReadOnlyObjectProperty<DaoPhase.Phase> phaseProperty() {
        return phaseProperty;
    }

    public int getChainHeight() {
        return daoStateService.getChainHeight();
    }

    public Optional<Block> getBlockAtChainHeight() {
        return getBlockAtHeight(getChainHeight());
    }

    public Optional<Block> getBlockAtHeight(int chainHeight) {
        return daoStateService.getBlockAtHeight(chainHeight);
    }

    public boolean isInConflictWithSeedNode() {
        return daoStateMonitoringService.isInConflictWithSeedNode();
    }

    ///////////////////////////////////////////////////////////////////////////////////////////
    // Use case: Bonding
    ///////////////////////////////////////////////////////////////////////////////////////////

    public void publishLockupTx(Coin lockupAmount, int lockTime, LockupReason lockupReason, byte[] hash,
                                Consumer<String> resultHandler, ExceptionHandler exceptionHandler) {
        lockupTxService.publishLockupTx(lockupAmount, lockTime, lockupReason, hash, resultHandler, exceptionHandler);
    }

    public Tuple2<Coin, Integer> getLockupTxMiningFeeAndTxVsize(Coin lockupAmount,
                                                                int lockTime,
                                                                LockupReason lockupReason,
                                                                byte[] hash)
            throws InsufficientMoneyException, IOException, TransactionVerificationException, WalletException {
        return lockupTxService.getMiningFeeAndTxVsize(lockupAmount, lockTime, lockupReason, hash);
    }

    public void publishUnlockTx(String lockupTxId, Consumer<String> resultHandler,
                                ExceptionHandler exceptionHandler) {
        unlockTxService.publishUnlockTx(lockupTxId, resultHandler, exceptionHandler);
    }

    public Tuple2<Coin, Integer> getUnlockTxMiningFeeAndTxVsize(String lockupTxId)
            throws InsufficientMoneyException, TransactionVerificationException, WalletException {
        return unlockTxService.getMiningFeeAndTxVsize(lockupTxId);
    }

    public long getTotalLockupAmount() {
        return daoStateService.getTotalLockupAmount();
    }

    public long getTotalAmountOfUnLockingTxOutputs() {
        return daoStateService.getTotalAmountOfUnLockingTxOutputs();
    }

    public long getTotalAmountOfUnLockedTxOutputs() {
        return daoStateService.getTotalAmountOfUnLockedTxOutputs();
    }

    public long getTotalAmountOfConfiscatedTxOutputs() {
        return daoStateService.getTotalAmountOfConfiscatedTxOutputs();
    }

    public long getTotalAmountOfInvalidatedBsq() {
        return daoStateService.getTotalAmountOfInvalidatedBsq();
    }

    // Contains burned fee and invalidated bsq due invalid txs
    public long getTotalAmountOfBurntBsq() {
        return daoStateService.getTotalAmountOfBurntBsq();
    }

    public List<Tx> getInvalidTxs() {
        return daoStateService.getInvalidTxs();
    }

    public List<Tx> getIrregularTxs() {
        return daoStateService.getIrregularTxs();
    }

    public long getTotalAmountOfUnspentTxOutputs() {
        // Does not consider confiscated outputs (they stay as utxo)
        return daoStateService.getUnspentTxOutputMap().values().stream().mapToLong(BaseTxOutput::getValue).sum();
    }

    public Optional<Integer> getLockTime(String txId) {
        return daoStateService.getLockTime(txId);
    }


    public List<Bond> getAllBonds() {
        List<Bond> bonds = new ArrayList<>(bondedReputationRepository.getBonds());
        bonds.addAll(bondedRolesRepository.getBonds());
        return bonds;
    }

    public List<Bond> getAllActiveBonds() {
        List<Bond> bonds = new ArrayList<>(bondedReputationRepository.getActiveBonds());
        bonds.addAll(bondedRolesRepository.getActiveBonds());
        return bonds;
    }

    public ObservableList<MyBondedReputation> getMyBondedReputations() {
        return myBondedReputationRepository.getMyBondedReputations();
    }


    ///////////////////////////////////////////////////////////////////////////////////////////
    // Use case: Present transaction related state
    ///////////////////////////////////////////////////////////////////////////////////////////

    public Optional<Tx> getTx(String txId) {
        return daoStateService.getTx(txId);
    }

    public int getGenesisBlockHeight() {
        return daoStateService.getGenesisBlockHeight();
    }

    public String getGenesisTxId() {
        return daoStateService.getGenesisTxId();
    }

    public Coin getGenesisTotalSupply() {
        return daoStateService.getGenesisTotalSupply();
    }

    public int getNumIssuanceTransactions(IssuanceType issuanceType) {
        return daoStateService.getIssuanceSetForType(issuanceType).size();
    }

    public Set<Tx> getBurntFeeTxs() {
        return daoStateService.getBurntFeeTxs();
    }

    public Set<TxOutput> getUnspentTxOutputs() {
        return daoStateService.getUnspentTxOutputs();
    }

    public boolean isTxOutputSpendable(TxOutputKey txOutputKey) {
        return daoStateService.isTxOutputSpendable(txOutputKey);
    }

    public long getUnspentTxOutputValue(TxOutputKey key) {
        return daoStateService.getUnspentTxOutputValue(key);
    }

    public int getNumTxs() {
        return daoStateService.getNumTxs();
    }

    public Optional<TxOutput> getLockupTxOutput(String txId) {
        return daoStateService.getLockupTxOutput(txId);
    }

    public long getTotalIssuedAmount(IssuanceType issuanceType) {
        return daoStateService.getTotalIssuedAmount(issuanceType);
    }

    public long getBlockTime(int issuanceBlockHeight) {
        return daoStateService.getBlockTime(issuanceBlockHeight);
    }

    public int getIssuanceBlockHeight(String txId) {
        return daoStateService.getIssuanceBlockHeight(txId);
    }

    public boolean isIssuanceTx(String txId, IssuanceType issuanceType) {
        return daoStateService.isIssuanceTx(txId, issuanceType);
    }

    public boolean hasTxBurntFee(String hashAsString) {
        return daoStateService.hasTxBurntFee(hashAsString);
    }

    public Optional<TxType> getOptionalTxType(String txId) {
        return daoStateService.getOptionalTxType(txId);
    }

    public TxType getTxType(String txId) {
        return daoStateService.getTx(txId).map(Tx::getTxType).orElse(TxType.UNDEFINED_TX_TYPE);
    }

    public boolean isInPhaseButNotLastBlock(DaoPhase.Phase phase) {
        return periodService.isInPhaseButNotLastBlock(phase);
    }

    public boolean isTxInCorrectCycle(int txHeight, int chainHeight) {
        return periodService.isTxInCorrectCycle(txHeight, chainHeight);
    }

    public boolean isTxInCorrectCycle(String txId, int chainHeight) {
        return periodService.isTxInCorrectCycle(txId, chainHeight);
    }

    public Coin getMinCompensationRequestAmount() {
        return CompensationConsensus.getMinCompensationRequestAmount(daoStateService, periodService.getChainHeight());
    }

    public Coin getMaxCompensationRequestAmount() {
        return CompensationConsensus.getMaxCompensationRequestAmount(daoStateService, periodService.getChainHeight());
    }

    public Coin getMinReimbursementRequestAmount() {
        return ReimbursementConsensus.getMinReimbursementRequestAmount(daoStateService, periodService.getChainHeight());
    }

    public Coin getMaxReimbursementRequestAmount() {
        return ReimbursementConsensus.getMaxReimbursementRequestAmount(daoStateService, periodService.getChainHeight());
    }

    public String getParamValue(Param param) {
        return getParamValue(param, periodService.getChainHeight());
    }

    public String getParamValue(Param param, int blockHeight) {
        return daoStateService.getParamValue(param, blockHeight);
    }

    public void resyncDaoStateFromGenesis(Runnable resultHandler) {
        daoStateStorageService.resyncDaoStateFromGenesis(resultHandler);
    }

    public void resyncDaoStateFromResources(File storageDir) throws IOException {
        daoStateStorageService.resyncDaoStateFromResources(storageDir);
    }

    public boolean isMyRole(Role role) {
        return bondedRolesRepository.isMyRole(role);
    }

    public Optional<Bond> getBondByLockupTxId(String lockupTxId) {
        return getAllBonds().stream().filter(e -> lockupTxId.equals(e.getLockupTxId())).findAny();
    }

    public double getRequiredThreshold(Proposal proposal) {
        return proposalService.getRequiredThreshold(proposal);
    }

    public Coin getRequiredQuorum(Proposal proposal) {
        return proposalService.getRequiredQuorum(proposal);
    }

    public long getRequiredBond(Optional<RoleProposal> roleProposal) {
        Optional<BondedRoleType> bondedRoleType = roleProposal.map(e -> e.getRole().getBondedRoleType());
        checkArgument(bondedRoleType.isPresent(), ""bondedRoleType must be present"");
        int height = roleProposal.flatMap(p -> daoStateService.getTx(p.getTxId()))
                .map(BaseTx::getBlockHeight)
                .orElse(daoStateService.getChainHeight());
        long requiredBondUnit = roleProposal.map(RoleProposal::getRequiredBondUnit)
                .orElse(bondedRoleType.get().getRequiredBondUnit());
        long baseFactor = daoStateService.getParamValueAsCoin(Param.BONDED_ROLE_FACTOR, height).value;
        return requiredBondUnit * baseFactor;
    }

    public long getRequiredBond(RoleProposal roleProposal) {
        return getRequiredBond(Optional.of(roleProposal));
    }

    public long getRequiredBond(BondedRoleType bondedRoleType) {
        int height = daoStateService.getChainHeight();
        long requiredBondUnit = bondedRoleType.getRequiredBondUnit();
        long baseFactor = daoStateService.getParamValueAsCoin(Param.BONDED_ROLE_FACTOR, height).value;
        return requiredBondUnit * baseFactor;
    }

    public Set<String> getAllPastParamValues(Param param) {
        Set<String> set = new HashSet<>();
        periodService.getCycles().forEach(cycle -> {
            set.add(getParamValue(param, cycle.getHeightOfFirstBlock()));
        });
        return set;
    }

    public Set<String> getAllDonationAddresses() {
        // We support any of the past addresses as well as in case the peer has not enabled the DAO or is out of sync we
        // do not want to break validation.
        Set<String> allPastParamValues = getAllPastParamValues(Param.RECIPIENT_BTC_ADDRESS);

        // If Dao is deactivated we need to add the default address as getAllPastParamValues will not return us any.
        if (allPastParamValues.isEmpty()) {
            allPastParamValues.add(Param.RECIPIENT_BTC_ADDRESS.getDefaultValue());
        }

        if (Config.baseCurrencyNetwork().isMainnet()) {
            // If Dao is deactivated we need to add the past addresses used as well.
            // This list need to be updated once a new address gets defined.
            allPastParamValues.add(DelayedPayoutAddressProvider.BM2019_ADDRESS);
            allPastParamValues.add(DelayedPayoutAddressProvider.BM2_ADDRESS);
            allPastParamValues.add(DelayedPayoutAddressProvider.BM3_ADDRESS);
        }

        return allPastParamValues;
    }

    public boolean isParseBlockChainComplete() {
        return daoStateService.isParseBlockChainComplete();
    }
}",1,64 2000 777 587 2001 693 2002 123 773 657 2003 2004 59 773 657 2005 2006 59 773 657 2007 2008 59 773 657 2009 2010 59 773 657 2011 2012 59 773 657 2013 2014 59 773 657 2015 2016 59 773 657 2017 2018 59 773 657 2019 2020 59 773 657 2021 2022 59 773 657 2023 2024 59 773 657 2025 2026 59 773 657 2027 2028 59 773 657 2029 2030 59 773 657 2031 2032 59 773 657 2033 2034 59 773 657 2035 2036 59 773 657 2037 2038 59 773 657 2039 2040 59 773 657 2041 2042 59 773 657 2043 2044 59 773 657 2045 2046 59 773 657 2047 2048 59 773 657 2049 2050 59 773 657 2051 60 2052 46 2053 62 2054 61 744 2055 60 62 40 2052 46 2053 46 2056 41 59 64 2057 777 2001 40 2011 2012 44 2003 2004 44 2005 2006 44 2007 2008 44 2009 2010 44 2013 2014 44 2015 2016 44 2017 2018 44 2019 2020 44 2021 2022 44 2023 2024 44 2025 2026 44 2027 2028 44 2029 2030 44 2031 2032 44 2033 2034 44 2035 2036 44 2037 2038 44 2039 2040 44 2041 2042 44 2043 2044 44 2045 2046 44 2047 2048 44 2049 2050 41 123 823 46 2004 61 2004 59 823 46 2006 61 2006 59 823 46 2008 61 2008 59 823 46 2010 61 2010 59 823 46 2012 61 2012 59 823 46 2014 61 2014 59 823 46 2016 61 2016 59 823 46 2018 61 2018 59 823 46 2020 61 2020 59 823 46 2022 61 2022 59 823 46 2024 61 2024 59 823 46 2026 61 2026 59 823 46 2028 61 2028 59 823 46 2030 61 2030 59 823 46 2032 61 2032 59 823 46 2034 61 2034 59 823 46 2036 61 2036 59 823 46 2038 61 2038 59 823 46 2040 61 2040 59 823 46 2042 61 2042 59 823 46 2044 61 2044 59 823 46 2046 61 2046 59 823 46 2048 61 2048 59 823 46 2050 61 2050 59 125 331 330 331 64 2058 777 865 2059 40 41 123 2014 46 2060 40 744 2061 40 41 123 64 2058 777 865 2062 40 704 2063 41 123 688 40 2063 62 1500 307 2018 46 2064 40 41 340 2065 41 2018 46 2064 40 41 46 2066 40 2063 41 46 2067 40 2054 58 58 2068 41 59 125 125 41 59 125 64 2058 777 865 2069 40 41 123 125 777 865 2070 40 2071 2072 41 123 2014 46 2073 40 2072 41 59 125 777 865 2074 40 2071 2072 41 123 2014 46 2075 40 2072 41 59 125 331 330 330 330 331 331 330 331 777 2076 60 2077 62 2078 40 41 123 792 2004 46 2078 40 41 59 125 331 330 331 330 777 2079 2080 40 2081 2082 44 2081 2083 44 2084 2085 41 826 2086 44 2087 44 2088 123 792 2026 46 2089 40 2082 44 2083 44 2085 41 59 125 777 2079 2090 40 2081 2082 44 2081 2083 44 2084 2085 41 826 2086 44 2087 44 2088 123 792 2028 46 2091 40 2082 44 2083 44 2085 41 59 125 777 2079 2092 40 2081 2082 44 2081 2083 44 2093 2094 44 2081 2095 41 826 2086 44 2087 44 2088 123 792 2030 46 2096 40 2082 44 2083 44 2094 44 2095 41 59 125 777 2079 2097 40 2081 2082 44 2081 2083 44 2081 2098 41 826 2086 44 2087 44 2088 123 792 2032 46 2099 40 2082 44 2083 44 2098 41 59 125 777 2079 2100 40 2101 2102 41 826 2086 44 2087 44 2088 123 792 2034 46 2103 40 2102 41 59 125 777 2079 2104 40 2081 2082 44 2081 2083 41 826 2086 44 2087 44 2088 123 792 2036 46 2105 40 2082 44 2083 41 59 125 777 2079 2106 40 2081 2082 44 2081 2083 44 2107 2108 41 826 2086 44 2087 44 2088 123 792 2038 46 2109 40 2082 44 2083 44 2108 41 59 125 777 2076 60 2110 62 2111 40 41 123 792 2040 46 2112 40 41 59 125 777 2113 60 2110 62 2114 40 41 123 792 2040 46 2115 40 41 59 125 330 777 2084 2116 40 704 2117 41 123 792 2118 46 2119 40 2014 44 2117 41 59 125 330 777 865 2120 40 2077 2121 44 2122 2123 44 2124 2125 44 2126 2127 41 123 2012 46 2128 40 2121 44 2123 44 2125 44 2127 41 59 125 330 777 570 2129 40 2077 2121 41 123 792 2012 46 2130 40 2121 41 59 125 330 777 570 2131 40 2077 2121 41 123 792 2012 46 2132 40 2121 41 59 125 331 330 330 330 331 331 330 331 777 2076 60 2133 62 2134 40 41 123 792 2010 46 2134 40 41 59 125 777 2113 60 2133 62 2135 40 41 123 792 2010 46 2135 40 41 59 125 777 2136 60 2133 62 2137 40 41 123 792 2010 46 2137 40 41 59 125 777 2138 60 2139 44 2139 62 2140 40 2081 2141 41 123 792 2024 46 2140 40 2141 44 2022 41 59 125 777 726 2142 40 41 123 792 2022 46 2143 40 41 59 125 777 2113 60 2144 62 2145 40 41 123 792 2024 46 2145 40 41 59 125 331 330 331 330 777 865 2146 40 2133 2147 44 64 2148 2149 2150 41 123 2008 46 2146 40 2147 44 2150 41 59 125 331 330 331 330 777 2084 2151 40 41 123 792 2152 46 2153 40 2014 44 2014 46 2154 40 41 41 59 125 777 2138 60 2084 44 2155 62 2156 40 2084 2157 41 826 2158 44 2087 44 2159 123 792 2022 46 2160 40 2157 41 59 125 330 777 865 2161 40 2084 2157 44 2124 2125 44 2162 2163 41 123 2022 46 2161 40 2157 44 2125 44 2163 41 59 125 331 330 330 330 331 331 330 331 330 330 777 704 2164 40 704 2165 44 2052 46 2053 2166 41 123 704 2167 61 2018 46 2168 40 2165 44 2166 41 59 819 40 2166 41 123 579 2056 58 572 59 579 2169 58 572 59 579 2170 58 2167 338 59 572 59 579 2171 58 572 59 579 2172 58 2167 338 59 572 59 579 2173 58 572 59 579 2174 58 2167 338 59 572 59 579 2175 58 572 59 125 792 2167 59 125 777 2176 60 2155 44 2177 62 2178 40 41 123 792 2018 46 2179 40 41 46 2180 40 41 46 2181 40 2182 46 2183 40 2020 58 58 2184 44 2185 45 62 744 2177 40 2014 46 2186 40 2185 46 2187 40 41 41 41 41 41 59 125 330 330 777 704 2188 40 704 2165 44 2052 46 2053 2166 41 123 704 2189 61 2018 46 2190 40 2165 44 2166 41 59 819 40 2166 41 123 579 2056 58 572 59 579 2191 58 2189 338 59 572 59 579 2192 58 572 59 579 2193 58 2189 338 59 572 59 579 2194 58 572 59 579 2195 58 2189 338 59 572 59 579 2196 58 572 59 579 2197 58 572 59 125 792 2189 59 125 330 330 777 704 2198 40 2052 46 2053 2166 41 123 704 2199 61 2018 46 2200 40 2166 44 2014 46 2201 40 41 41 59 819 40 2166 41 123 579 2056 58 572 59 579 2202 58 2199 338 59 572 59 579 2203 58 2199 349 59 572 59 579 2204 58 2199 338 59 572 59 579 2205 58 2199 349 59 572 59 579 2206 58 2199 338 59 572 59 579 2207 58 2199 349 59 572 59 579 2208 58 572 59 125 792 2199 59 125 777 704 2209 40 41 123 2210 2211 61 2018 46 2212 40 41 59 792 2211 340 2213 63 2211 46 2214 40 41 58 1500 59 125 330 777 2215 60 2052 46 2053 62 2054 40 41 123 792 2054 59 125 777 704 2216 40 41 123 792 2014 46 2216 40 41 59 125 777 2217 60 2218 62 2219 40 41 123 792 2220 40 2216 40 41 41 59 125 777 2217 60 2218 62 2221 40 704 2117 41 123 792 2014 46 2221 40 2117 41 59 125 777 570 2222 40 41 123 792 2016 46 2222 40 41 59 125 331 330 331 777 865 2223 40 2084 2224 44 704 2225 44 2226 2227 44 574 91 93 2228 44 2229 60 2081 62 2125 44 2162 2163 41 123 2046 46 2223 40 2224 44 2225 44 2227 44 2228 44 2125 44 2163 41 59 125 777 2138 60 2084 44 2155 62 2230 40 2084 2224 44 704 2225 44 2226 2227 44 574 91 93 2228 41 826 2087 44 2231 44 2159 44 2158 123 792 2046 46 2232 40 2224 44 2225 44 2227 44 2228 41 59 125 777 865 2233 40 2081 2098 44 2229 60 2081 62 2125 44 2162 2163 41 123 2048 46 2233 40 2098 44 2125 44 2163 41 59 125 777 2138 60 2084 44 2155 62 2234 40 2081 2098 41 826 2087 44 2159 44 2158 123 792 2048 46 2235 40 2098 41 59 125 777 726 2236 40 41 123 792 2014 46 2236 40 41 59 125 777 726 2237 40 41 123 792 2014 46 2237 40 41 59 125 777 726 2238 40 41 123 792 2014 46 2238 40 41 59 125 777 726 2239 40 41 123 792 2014 46 2239 40 41 59 125 777 726 2240 40 41 123 792 2014 46 2240 40 41 59 125 330 777 726 2241 40 41 123 792 2014 46 2241 40 41 59 125 777 2113 60 2242 62 2243 40 41 123 792 2014 46 2243 40 41 59 125 777 2113 60 2242 62 2244 40 41 123 792 2014 46 2244 40 41 59 125 777 726 2245 40 41 123 330 792 2014 46 2246 40 41 46 2247 40 41 46 2248 40 41 46 2249 40 2250 58 58 2251 41 46 2252 40 41 59 125 777 2217 60 2155 62 2253 40 2081 2254 41 123 792 2014 46 2253 40 2254 41 59 125 777 2113 60 2255 62 2256 40 41 123 2113 60 2255 62 2257 61 744 2258 60 62 40 2042 46 2259 40 41 41 59 2257 46 2260 40 2040 46 2259 40 41 41 59 792 2257 59 125 777 2113 60 2255 62 2261 40 41 123 2113 60 2255 62 2262 61 744 2263 60 62 40 2042 46 2264 40 41 41 59 2262 46 2265 40 2040 46 2264 40 41 41 59 792 2262 59 125 777 2076 60 2266 62 2267 40 41 123 792 2044 46 2267 40 41 59 125 331 330 331 777 2217 60 2242 62 2268 40 2081 2254 41 123 792 2014 46 2268 40 2254 41 59 125 777 704 2269 40 41 123 792 2014 46 2269 40 41 59 125 777 2081 2270 40 41 123 792 2014 46 2270 40 41 59 125 777 2084 2271 40 41 123 792 2014 46 2271 40 41 59 125 777 704 2272 40 2273 2274 41 123 792 2014 46 2275 40 2274 41 46 2276 40 41 59 125 777 2277 60 2242 62 2278 40 41 123 792 2014 46 2278 40 41 59 125 777 2277 60 2279 62 2280 40 41 123 792 2014 46 2280 40 41 59 125 777 570 2281 40 2282 2283 41 123 792 2014 46 2281 40 2283 41 59 125 777 726 2284 40 2282 2285 41 123 792 2014 46 2284 40 2285 41 59 125 777 704 2286 40 41 123 792 2014 46 2286 40 41 59 125 777 2217 60 2279 62 2287 40 2081 2254 41 123 792 2014 46 2287 40 2254 41 59 125 777 726 2288 40 2273 2274 41 123 792 2014 46 2288 40 2274 41 59 125 777 726 2289 40 704 2290 41 123 792 2014 46 2289 40 2290 41 59 125 777 704 2291 40 2081 2254 41 123 792 2014 46 2291 40 2254 41 59 125 777 570 2292 40 2081 2254 44 2273 2274 41 123 792 2014 46 2292 40 2254 44 2274 41 59 125 777 570 2293 40 2081 2294 41 123 792 2014 46 2293 40 2294 41 59 125 777 2217 60 2295 62 2296 40 2081 2254 41 123 792 2014 46 2296 40 2254 41 59 125 777 2295 2297 40 2081 2254 41 123 792 2014 46 2268 40 2254 41 46 2298 40 2242 58 58 2297 41 46 2299 40 2295 46 2300 41 59 125 777 570 2301 40 2052 46 2053 2166 41 123 792 2018 46 2301 40 2166 41 59 125 777 570 2302 40 704 2303 44 704 2117 41 123 792 2018 46 2302 40 2303 44 2117 41 59 125 777 570 2302 40 2081 2254 44 704 2117 41 123 792 2018 46 2302 40 2254 44 2117 41 59 125 777 2084 2304 40 41 123 792 2305 46 2304 40 2014 44 2018 46 2216 40 41 41 59 125 777 2084 2306 40 41 123 792 2307 46 2306 40 2014 44 2018 46 2216 40 41 41 59 125 777 2084 2308 40 41 123 792 2309 46 2308 40 2014 44 2018 46 2216 40 41 41 59 125 777 2084 2310 40 41 123 792 2311 46 2310 40 2014 44 2018 46 2216 40 41 41 59 125 777 2081 2312 40 2093 2094 41 123 792 2312 40 2094 44 2018 46 2216 40 41 41 59 125 777 2081 2312 40 2093 2094 44 704 2313 41 123 792 2014 46 2312 40 2094 44 2313 41 59 125 777 865 2314 40 2315 2125 41 123 2050 46 2314 40 2125 41 59 125 777 865 2316 40 2317 2318 41 826 2231 123 2050 46 2316 40 2318 41 59 125 777 570 2319 40 2101 2102 41 123 792 2040 46 2319 40 2102 41 59 125 777 2217 60 2255 62 2320 40 2081 2098 41 123 792 2256 40 41 46 2321 40 41 46 2322 40 2323 45 62 2098 46 2324 40 2323 46 2325 40 41 41 41 46 2326 40 41 59 125 777 625 2327 40 2077 2121 41 123 792 2006 46 2327 40 2121 41 59 125 777 2084 2328 40 2077 2121 41 123 792 2006 46 2328 40 2121 41 59 125 777 726 2329 40 2217 60 2330 62 2331 41 123 2217 60 2332 62 2333 61 2331 46 2334 40 2335 45 62 2335 46 2336 40 41 46 2337 40 41 41 59 2338 40 2333 46 2339 40 41 44 362 41 59 704 2165 61 2331 46 2340 40 2341 45 62 2014 46 2268 40 2341 46 2342 40 41 41 41 46 2334 40 2343 58 58 2344 41 46 2345 40 2014 46 2216 40 41 41 59 726 2346 61 2331 46 2334 40 2330 58 58 2347 41 46 2345 40 2333 46 2348 40 41 46 2347 40 41 41 59 726 2349 61 2014 46 2350 40 2093 46 2351 44 2165 41 46 2352 59 792 2346 42 2349 59 125 777 726 2329 40 2330 2331 41 123 792 2329 40 2217 46 2353 40 2331 41 41 59 125 777 726 2329 40 2354 2355 41 123 704 2165 61 2014 46 2216 40 41 59 726 2356 61 2355 46 2357 40 41 59 726 2358 61 2014 46 2359 40 2093 46 2360 44 2165 41 46 2361 59 792 2356 42 2358 59 125 777 2277 60 2081 62 2362 40 2093 2094 41 123 2277 60 2081 62 2363 61 744 2364 60 62 40 41 59 2018 46 2365 40 41 46 2366 40 2367 45 62 123 2363 46 2368 40 2312 40 2094 44 2367 46 2369 40 41 41 41 59 125 41 59 792 2363 59 125 777 2277 60 2081 62 2370 40 41 123 330 330 2277 60 2081 62 2371 61 2362 40 2093 46 2372 41 59 330 688 40 2371 46 2373 40 41 41 123 2371 46 2374 40 2093 46 2372 46 2375 40 41 41 59 125 688 40 2376 46 2377 40 41 46 2378 40 41 41 123 330 330 2371 46 2379 40 2380 46 2381 41 59 2371 46 2379 40 2380 46 2382 41 59 2371 46 2379 40 2380 46 2383 41 59 125 792 2371 59 125 777 570 2384 40 41 123 792 2014 46 2384 40 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 697, 'CountStmt': 306, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 185, 'MaxEssential': 1, 'SumEssential': 100, 'AvgCyclomatic': 1, 'CountLineCode': 505, 'CountStmtDecl': 137, 'MaxCyclomatic': 9, 'SumCyclomatic': 127, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 124, 'CountSemicolon': 203, 'CountDeclMethod': 95, 'CountLineCodeExe': 228, 'CountLineComment': 68, 'CountClassCoupled': 82, 'CountClassDerived': 0, 'CountLineCodeDecl': 193, 'CountDeclMethodAll': 95, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.13', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 127, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 95, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 94, 'SumCyclomaticModified': 106, 'CountDeclClassVariable': 0, 'CountDeclMethodDefault': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 95, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 82, 'CountDeclInstanceVariable': 25, 'PercentLackOfCohesionModified': 94}"
