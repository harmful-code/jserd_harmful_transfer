id,language,text,smell,tokens,metrics
80059,C#,"    public class UT_NetworkAddressWithTime
    {
        [TestMethod]
        public void SizeAndEndPoint_Get()
        {
            var test = new NetworkAddressWithTime() { Capabilities = new NodeCapability[0], Address = IPAddress.Any, Timestamp = 1 };
            test.Size.Should().Be(21);

            Assert.AreEqual(test.EndPoint.Port, 0);

            test = NetworkAddressWithTime.Create(IPAddress.Any, 1, new NodeCapability[] { new ServerCapability(NodeCapabilityType.TcpServer, 22) });
            test.Size.Should().Be(24);

            Assert.AreEqual(test.EndPoint.Port, 22);
        }

        [TestMethod]
        public void DeserializeAndSerialize()
        {
            var test = NetworkAddressWithTime.Create(IPAddress.Any, 1, new NodeCapability[] { new ServerCapability(NodeCapabilityType.TcpServer, 22) });
            var clone = test.ToArray().AsSerializable<NetworkAddressWithTime>();

            CollectionAssert.AreEqual(test.Capabilities.ToByteArray(), clone.Capabilities.ToByteArray());
            Assert.AreEqual(test.EndPoint.ToString(), clone.EndPoint.ToString());
            Assert.AreEqual(test.Timestamp, clone.Timestamp);
            Assert.AreEqual(test.Address, clone.Address);

            Assert.ThrowsException<FormatException>(() => NetworkAddressWithTime.Create(IPAddress.Any, 1,
                new NodeCapability[] {
                    new ServerCapability(NodeCapabilityType.TcpServer, 22) ,
                    new ServerCapability(NodeCapabilityType.TcpServer, 22)
                }).ToArray().AsSerializable<NetworkAddressWithTime>());
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 41 123 2006 61 744 2007 91 1500 93 44 2008 61 2009 46 2010 44 2011 61 1501 125 59 2004 46 2012 46 2013 40 41 46 2014 40 1503 41 59 2015 46 2016 40 2004 46 2017 46 2018 44 1500 41 59 2004 61 2005 46 2019 40 2020 46 2021 44 1501 44 744 2022 91 93 123 744 2023 40 2024 46 2025 44 1503 41 125 41 59 2004 46 2012 46 2013 40 41 46 2014 40 1503 41 59 2015 46 2016 40 2004 46 2017 46 2018 44 1503 41 59 125 91 2001 93 777 865 2026 40 41 123 2027 2028 61 2029 46 2030 40 2031 46 2032 44 1501 44 744 2033 91 93 123 744 2034 40 2035 46 2036 44 1503 41 125 41 59 2027 2037 61 2028 46 2038 40 41 46 2039 60 2029 62 40 41 59 2040 46 2041 40 2028 46 2042 46 2043 40 41 44 2037 46 2042 46 2043 40 41 41 59 2044 46 2041 40 2028 46 2045 46 2046 40 41 44 2037 46 2045 46 2046 40 41 41 59 2044 46 2041 40 2028 46 2047 44 2037 46 2047 41 59 2044 46 2041 40 2028 46 2048 44 2037 46 2048 41 59 2044 46 2049 60 2050 62 40 40 41 328 2029 46 2030 40 2031 46 2032 44 1501 44 744 2033 91 93 123 744 2051 40 2052 46 2053 44 1503 41 44 744 2051 40 2052 46 2053 44 1503 41 125 41 46 2038 40 41 46 2039 60 2029 62 40 41 41 59 125 125 ,"{'AvgLine': 14, 'CountLine': 34, 'CountStmt': 16, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 13, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 28, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 6, 'CountSemicolon': 13, 'CountDeclMethod': 2, 'CountLineCodeExe': 17, 'CountLineComment': 0, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80000,C#,"    internal class ReflectionCacheAttribute : Attribute
    {
        /// <summary>
        /// Type
        /// </summary>
        public Type Type { get; }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name=""type"">Type</param>
        public ReflectionCacheAttribute(Type type)
        {
            Type = type;
        }
    }",0,710 587 2000 58 2001 123 331 777 2002 2002 123 2003 59 125 331 777 2000 40 2002 2004 41 123 2002 61 2004 59 125 125 ,"{'AvgLine': 2, 'CountLine': 16, 'CountStmt': 5, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 2, 'CountDeclMethod': 2, 'CountLineCodeExe': 1, 'CountLineComment': 7, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.88', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 0, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79853,C#,"        public class NeoAccountState : AccountState
        {
            /// <summary>
            /// The height of the block where the balance changed last time.
            /// </summary>
            public uint BalanceHeight;

            /// <summary>
            /// The voting target of the account. This field can be <see langword=""null""/>.
            /// </summary>
            public ECPoint VoteTo;

            public override void FromStackItem(StackItem stackItem)
            {
                base.FromStackItem(stackItem);
                Struct @struct = (Struct)stackItem;
                BalanceHeight = (uint)@struct[1].GetInteger();
                VoteTo = @struct[2].IsNull ? null : @struct[2].GetSpan().AsSerializable<ECPoint>();
            }

            public override StackItem ToStackItem(ReferenceCounter referenceCounter)
            {
                Struct @struct = (Struct)base.ToStackItem(referenceCounter);
                @struct.Add(BalanceHeight);
                @struct.Add(VoteTo?.ToArray() ?? StackItem.Null);
                return @struct;
            }
        }",0,777 587 2000 58 2001 123 331 777 842 2002 59 331 777 2003 2004 59 777 763 865 2005 40 2006 2007 41 123 563 46 2005 40 2007 41 59 2008 64 816 61 40 2008 41 2007 59 2002 61 40 842 41 64 816 91 1501 93 46 2009 40 41 59 2004 61 64 816 91 1502 93 46 2010 63 752 58 64 816 91 1502 93 46 2011 40 41 46 2012 60 2003 62 40 41 59 125 777 763 2006 2013 40 2014 2015 41 123 2016 64 816 61 40 2016 41 563 46 2013 40 2015 41 59 64 816 46 2017 40 2002 41 59 64 816 46 2017 40 2004 346 2018 40 41 343 2006 46 2019 41 59 792 64 816 59 125 125 ,"{'AvgLine': 7, 'CountLine': 28, 'CountStmt': 13, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 7, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 19, 'CountStmtDecl': 7, 'MaxCyclomatic': 2, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 10, 'CountDeclMethod': 2, 'CountLineCodeExe': 13, 'CountLineComment': 6, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.32', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79936,C#,"    public class UT_HashIndexState
    {
        HashIndexState origin;

        [TestInitialize]
        public void Initialize()
        {
            origin = new HashIndexState
            {
                Hash = UInt256.Zero,
                Index = 10
            };
        }

        [TestMethod]
        public void TestDeserialize()
        {
            using MemoryStream ms = new MemoryStream(1024);
            using BinaryReader reader = new BinaryReader(ms);

            var data = BinarySerializer.Serialize(((IInteroperable)origin).ToStackItem(null), 1024);
            ms.Write(data);
            ms.Seek(0, SeekOrigin.Begin);

            HashIndexState dest = new HashIndexState();
            ((IInteroperable)dest).FromStackItem(BinarySerializer.Deserialize(reader, ExecutionEngineLimits.Default, null));

            dest.Hash.Should().Be(origin.Hash);
            dest.Index.Should().Be(origin.Index);
        }
    }",0,777 587 2000 123 2001 2002 59 91 2003 93 777 865 2004 40 41 123 2002 61 744 2001 123 2005 61 2006 46 2007 44 2008 61 1502 125 59 125 91 2009 93 777 865 2010 40 41 123 860 2011 2012 61 744 2011 40 1505 41 59 860 2013 2014 61 744 2013 40 2012 41 59 2015 2016 61 2017 46 2018 40 40 40 2019 41 2002 41 46 2020 40 752 41 44 1505 41 59 2012 46 2021 40 2016 41 59 2012 46 2022 40 1500 44 2023 46 2024 41 59 2001 2025 61 744 2001 40 41 59 40 40 2019 41 2025 41 46 2026 40 2017 46 2027 40 2014 44 2028 46 2029 44 752 41 41 59 2025 46 2030 46 2031 40 41 46 2032 40 2002 46 2030 41 59 2025 46 2033 46 2031 40 41 46 2032 40 2002 46 2033 41 59 125 125 ,"{'AvgLine': 11, 'CountLine': 31, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 26, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 5, 'CountSemicolon': 11, 'CountDeclMethod': 2, 'CountLineCodeExe': 13, 'CountLineComment': 0, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 9, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 9, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80043,C#,"    public class UT_Cache
    {
        MyCache cache;
        readonly int max_capacity = 4;

        [TestInitialize]
        public void Init()
        {
            cache = new MyCache(max_capacity);
        }

        [TestMethod]
        public void TestCount()
        {
            cache.Count.Should().Be(0);

            cache.Add(""hello"");
            cache.Add(""world"");
            cache.Count.Should().Be(2);

            cache.Remove(""hello"");
            cache.Count.Should().Be(1);
        }

        [TestMethod]
        public void TestIsReadOnly()
        {
            cache.IsReadOnly.Should().BeFalse();
        }

        [TestMethod]
        public void TestAddAndAddInternal()
        {
            cache.Add(""hello"");
            cache.Contains(""hello"").Should().BeTrue();
            cache.Contains(""world"").Should().BeFalse();
            cache.Add(""hello"");
            cache.Count.Should().Be(1);
        }

        [TestMethod]
        public void TestAddRange()
        {
            string[] range = { ""hello"", ""world"" };
            cache.AddRange(range);
            cache.Count.Should().Be(2);
            cache.Contains(""hello"").Should().BeTrue();
            cache.Contains(""world"").Should().BeTrue();
            cache.Contains(""non exist string"").Should().BeFalse();
        }

        [TestMethod]
        public void TestClear()
        {
            cache.Add(""hello"");
            cache.Add(""world"");
            cache.Count.Should().Be(2);
            cache.Clear();
            cache.Count.Should().Be(0);
        }

        [TestMethod]
        public void TestContainsKey()
        {
            cache.Add(""hello"");
            cache.Contains(""hello"").Should().BeTrue();
            cache.Contains(""world"").Should().BeFalse();
        }

        [TestMethod]
        public void TestContainsValue()
        {
            cache.Add(""hello"");
            cache.Contains(""hello"".GetHashCode()).Should().BeTrue();
            cache.Contains(""world"".GetHashCode()).Should().BeFalse();
        }

        [TestMethod]
        public void TestCopyTo()
        {
            cache.Add(""hello"");
            cache.Add(""world"");
            string[] temp = new string[2];

            Action action = () => cache.CopyTo(null, 1);
            action.Should().Throw<ArgumentNullException>();

            action = () => cache.CopyTo(temp, -1);
            action.Should().Throw<ArgumentOutOfRangeException>();

            action = () => cache.CopyTo(temp, 1);
            action.Should().Throw<ArgumentException>();

            cache.CopyTo(temp, 0);
            temp[0].Should().Be(""hello"");
            temp[1].Should().Be(""world"");
        }

        [TestMethod]
        public void TestRemoveKey()
        {
            cache.Add(""hello"");
            cache.Remove(""hello"".GetHashCode()).Should().BeTrue();
            cache.Remove(""world"".GetHashCode()).Should().BeFalse();
            cache.Contains(""hello"").Should().BeFalse();
        }

        [TestMethod]
        public void TestRemoveDisposableKey()
        {
            var entry = new CacheDisposableEntry() { Key = 1 };
            var dcache = new MyDisposableCache(100)
            {
                entry
            };

            entry.IsDisposed.Should().BeFalse();
            dcache.Remove(entry.Key).Should().BeTrue();
            dcache.Remove(entry.Key).Should().BeFalse();
            entry.IsDisposed.Should().BeTrue();
        }

        [TestMethod]
        public void TestRemoveValue()
        {
            cache.Add(""hello"");
            cache.Remove(""hello"").Should().BeTrue();
            cache.Remove(""world"").Should().BeFalse();
            cache.Contains(""hello"").Should().BeFalse();
        }

        [TestMethod]
        public void TestTryGet()
        {
            cache.Add(""hello"");
            cache.TryGet(""hello"".GetHashCode(), out string output).Should().BeTrue();
            output.Should().Be(""hello"");
            cache.TryGet(""world"".GetHashCode(), out string output2).Should().BeFalse();
            output2.Should().NotBe(""world"");
            output2.Should().BeNull();
        }

        [TestMethod]
        public void TestArrayIndexAccess()
        {
            cache.Add(""hello"");
            cache.Add(""world"");
            cache[""hello"".GetHashCode()].Should().Be(""hello"");
            cache[""world"".GetHashCode()].Should().Be(""world"");

            Action action = () =>
            {
                string temp = cache[""non exist string"".GetHashCode()];
            };
            action.Should().Throw<KeyNotFoundException>();
        }

        [TestMethod]
        public void TestGetEnumerator()
        {
            cache.Add(""hello"");
            cache.Add(""world"");
            int i = 0;
            foreach (string item in cache)
            {
                if (i == 0) item.Should().Be(""hello"");
                if (i == 1) item.Should().Be(""world"");
                i++;
            }
            i.Should().Be(2);
            cache.MyGetEnumerator().Should().NotBeNull();
        }

        [TestMethod]
        public void TestOverMaxCapacity()
        {
            int i = 1;
            for (; i <= max_capacity; i++)
            {
                cache.Add(i.ToString());
            }
            cache.Add(i.ToString());    // The first one will be deleted 
            cache.Count.Should().Be(max_capacity);
            cache.Contains((max_capacity + 1).ToString()).Should().BeTrue();
        }

        [TestMethod]
        public void TestDispose()
        {
            cache.Add(""hello"");
            cache.Add(""world"");
            cache.Dispose();

            Action action = () =>
            {
                int count = cache.Count;
            };
            action.Should().Throw<ObjectDisposedException>();
        }
    }",0,777 587 2000 123 2001 2002 59 780 704 2003 61 1502 59 91 2004 93 777 865 2005 40 41 123 2002 61 744 2001 40 2003 41 59 125 91 2006 93 777 865 2007 40 41 123 2002 46 2008 46 2009 40 41 46 2010 40 1500 41 59 2002 46 2011 40 362 41 59 2002 46 2011 40 362 41 59 2002 46 2008 46 2009 40 41 46 2010 40 1502 41 59 2002 46 2012 40 362 41 59 2002 46 2008 46 2009 40 41 46 2010 40 1501 41 59 125 91 2006 93 777 865 2013 40 41 123 2002 46 2014 46 2015 40 41 46 2016 40 41 59 125 91 2006 93 777 865 2017 40 41 123 2002 46 2018 40 362 41 59 2002 46 2019 40 362 41 46 2020 40 41 46 2021 40 41 59 2002 46 2019 40 362 41 46 2020 40 41 46 2022 40 41 59 2002 46 2018 40 362 41 59 2002 46 2023 46 2020 40 41 46 2024 40 1501 41 59 125 91 2006 93 777 865 2025 40 41 123 815 91 93 2026 61 123 362 44 362 125 59 2002 46 2027 40 2026 41 59 2002 46 2028 46 2029 40 41 46 2030 40 1502 41 59 2002 46 2031 40 362 41 46 2029 40 41 46 2032 40 41 59 2002 46 2031 40 362 41 46 2029 40 41 46 2032 40 41 59 2002 46 2031 40 362 41 46 2029 40 41 46 2033 40 41 59 125 91 2006 93 777 865 2034 40 41 123 2002 46 2035 40 362 41 59 2002 46 2035 40 362 41 59 2002 46 2036 46 2037 40 41 46 2038 40 1502 41 59 2002 46 2039 40 41 59 2002 46 2036 46 2037 40 41 46 2038 40 1500 41 59 125 91 2006 93 777 865 2040 40 41 123 2002 46 2041 40 362 41 59 2002 46 2042 40 362 41 46 2043 40 41 46 2044 40 41 59 2002 46 2042 40 362 41 46 2043 40 41 46 2045 40 41 59 125 91 2006 93 777 865 2046 40 41 123 2002 46 2047 40 362 41 59 2002 46 2048 40 362 46 2049 40 41 41 46 2050 40 41 46 2051 40 41 59 2002 46 2048 40 362 46 2049 40 41 41 46 2050 40 41 46 2052 40 41 59 125 91 2006 93 777 865 2053 40 41 123 2002 46 2054 40 362 41 59 2002 46 2054 40 362 41 59 815 91 93 2055 61 744 815 91 1502 93 59 2056 2057 61 40 41 328 2002 46 2058 40 752 44 1501 41 59 2057 46 2059 40 41 46 2060 60 2061 62 40 41 59 2057 61 40 41 328 2002 46 2058 40 2055 44 45 1501 41 59 2057 46 2059 40 41 46 2060 60 2062 62 40 41 59 2057 61 40 41 328 2002 46 2058 40 2055 44 1501 41 59 2057 46 2059 40 41 46 2060 60 2063 62 40 41 59 2002 46 2058 40 2055 44 1500 41 59 2055 91 1500 93 46 2059 40 41 46 2064 40 362 41 59 2055 91 1501 93 46 2059 40 41 46 2064 40 362 41 59 125 91 2006 93 777 865 2065 40 41 123 2002 46 2066 40 362 41 59 2002 46 2067 40 362 46 2068 40 41 41 46 2069 40 41 46 2070 40 41 59 2002 46 2067 40 362 46 2068 40 41 41 46 2069 40 41 46 2071 40 41 59 2002 46 2072 40 362 41 46 2069 40 41 46 2071 40 41 59 125 91 2006 93 777 865 2073 40 41 123 2074 2075 61 744 2076 40 41 123 2077 61 1501 125 59 2074 2078 61 744 2079 40 1503 41 123 2075 125 59 2075 46 2080 46 2081 40 41 46 2082 40 41 59 2078 46 2083 40 2075 46 2084 41 46 2081 40 41 46 2085 40 41 59 2078 46 2083 40 2075 46 2084 41 46 2081 40 41 46 2082 40 41 59 2075 46 2080 46 2081 40 41 46 2085 40 41 59 125 91 2006 93 777 865 2086 40 41 123 2002 46 2087 40 362 41 59 2002 46 2088 40 362 41 46 2089 40 41 46 2090 40 41 59 2002 46 2088 40 362 41 46 2089 40 41 46 2091 40 41 59 2002 46 2092 40 362 41 46 2089 40 41 46 2091 40 41 59 125 91 2006 93 777 865 2093 40 41 123 2002 46 2094 40 362 41 59 2002 46 2095 40 362 46 2096 40 41 44 762 815 2097 41 46 2098 40 41 46 2099 40 41 59 2097 46 2098 40 41 46 2100 40 362 41 59 2002 46 2095 40 362 46 2096 40 41 44 762 815 2101 41 46 2098 40 41 46 2102 40 41 59 2101 46 2098 40 41 46 2103 40 362 41 59 2101 46 2098 40 41 46 2104 40 41 59 125 91 2006 93 777 865 2105 40 41 123 2002 46 2106 40 362 41 59 2002 46 2106 40 362 41 59 2002 91 362 46 2107 40 41 93 46 2108 40 41 46 2109 40 362 41 59 2002 91 362 46 2107 40 41 93 46 2108 40 41 46 2109 40 362 41 59 2110 2111 61 40 41 328 123 815 2112 61 2002 91 362 46 2107 40 41 93 59 125 59 2111 46 2108 40 41 46 2113 60 2114 62 40 41 59 125 91 2006 93 777 865 2115 40 41 123 2002 46 2116 40 362 41 59 2002 46 2116 40 362 41 59 704 2117 61 1500 59 665 40 815 2118 696 2002 41 123 688 40 2117 323 1500 41 2118 46 2119 40 41 46 2120 40 362 41 59 688 40 2117 323 1501 41 2118 46 2119 40 41 46 2120 40 362 41 59 2117 349 59 125 2117 46 2121 40 41 46 2122 40 1502 41 59 2002 46 2123 40 41 46 2121 40 41 46 2124 40 41 59 125 91 2006 93 777 865 2125 40 41 123 704 2126 61 1501 59 664 40 59 2126 329 2003 59 2126 349 41 123 2002 46 2127 40 2126 46 2128 40 41 41 59 125 2002 46 2129 40 2126 46 2130 40 41 41 59 330 2002 46 2131 46 2132 40 41 46 2133 40 2003 41 59 2002 46 2134 40 40 2003 43 1501 41 46 2130 40 41 41 46 2132 40 41 46 2135 40 41 59 125 91 2006 93 777 865 2136 40 41 123 2002 46 2137 40 362 41 59 2002 46 2137 40 362 41 59 2002 46 2138 40 41 59 2139 2140 61 40 41 328 123 704 2141 61 2002 46 2142 59 125 59 2140 46 2143 40 41 46 2144 60 2145 62 40 41 59 125 125 ,"{'AvgLine': 9, 'CountLine': 200, 'CountStmt': 113, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 85, 'MaxEssential': 1, 'SumEssential': 22, 'AvgCyclomatic': 1, 'CountLineCode': 174, 'CountStmtDecl': 31, 'MaxCyclomatic': 4, 'SumCyclomatic': 26, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 26, 'CountSemicolon': 92, 'CountDeclMethod': 17, 'CountLineCodeExe': 92, 'CountLineComment': 1, 'CountClassCoupled': 10, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 51, 'CountLineInactive': 0, 'CountDeclMethodAll': 23, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 26, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 17, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 47, 'SumCyclomaticModified': 26, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 17, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 47, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80053,C#,"    public class UT_Helper
    {
        private KeyPair _key;

        [TestInitialize]
        public void Init()
        {
            var pk = new byte[32];
            new Random().NextBytes(pk);
            _key = new KeyPair(pk);
        }

        [TestMethod]
        public void TestGetContractHash()
        {
            var nef = new NefFile()
            {
                Compiler = ""test"",
                Source = string.Empty,
                Tokens = Array.Empty<MethodToken>(),
                Script = new byte[] { 1, 2, 3 }
            };
            nef.CheckSum = NefFile.ComputeChecksum(nef);

            Assert.AreEqual(""0x9b9628e4f1611af90e761eea8cc21372380c74b6"", Neo.SmartContract.Helper.GetContractHash(UInt160.Zero, nef.CheckSum, """").ToString());
            Assert.AreEqual(""0x66eec404d86b918d084e62a29ac9990e3b6f4286"", Neo.SmartContract.Helper.GetContractHash(UInt160.Parse(""0xa400ff00ff00ff00ff00ff00ff00ff00ff00ff01""), nef.CheckSum, """").ToString());
        }

        [TestMethod]
        public void TestIsMultiSigContract()
        {
            var case1 = new byte[]
            {
                0, 2, 12, 33, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
                221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 12, 33, 255, 255, 255, 255,
                255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
                255, 255, 255, 255, 255, 255, 255, 255, 0,
            };
            Assert.IsFalse(case1.IsMultiSigContract());

            var case2 = new byte[]
            {
                18, 12, 33, 2, 111, 240, 59, 148, 146, 65, 206, 29, 173, 212, 53, 25, 230, 150, 14, 10, 133, 180, 26,
                105, 160, 92, 50, 129, 3, 170, 43, 206, 21, 148, 202, 22, 12, 33, 2, 111, 240, 59, 148, 146, 65, 206,
                29, 173, 212, 53, 25, 230, 150, 14, 10, 133, 180, 26, 105, 160, 92, 50, 129, 3, 170, 43, 206, 21, 148,
                202, 22, 18
            };
            Assert.IsFalse(case2.IsMultiSigContract());
        }

        [TestMethod]
        public void TestSignatureContractCost()
        {
            var contract = Contract.CreateSignatureContract(_key.PublicKey);

            var tx = TestUtils.CreateRandomHashTransaction();
            tx.Signers[0].Account = contract.ScriptHash;

            using ScriptBuilder invocationScript = new();
            invocationScript.EmitPush(Neo.Wallets.Helper.Sign(tx, _key, ProtocolSettings.Default.Network));
            tx.Witnesses = new Witness[] { new Witness() { InvocationScript = invocationScript.ToArray(), VerificationScript = contract.Script } };

            using var engine = ApplicationEngine.Create(TriggerType.Verification, tx, null, null, ProtocolSettings.Default);
            engine.LoadScript(contract.Script);
            engine.LoadScript(new Script(invocationScript.ToArray(), true), configureState: p => p.CallFlags = CallFlags.None);
            Assert.AreEqual(VMState.HALT, engine.Execute());
            Assert.IsTrue(engine.ResultStack.Pop().GetBoolean());

            Assert.AreEqual(Neo.SmartContract.Helper.SignatureContractCost() * PolicyContract.DefaultExecFeeFactor, engine.GasConsumed);
        }

        [TestMethod]
        public void TestMultiSignatureContractCost()
        {
            var contract = Contract.CreateMultiSigContract(1, new ECPoint[] { _key.PublicKey });

            var tx = TestUtils.CreateRandomHashTransaction();
            tx.Signers[0].Account = contract.ScriptHash;

            using ScriptBuilder invocationScript = new();
            invocationScript.EmitPush(Neo.Wallets.Helper.Sign(tx, _key, ProtocolSettings.Default.Network));

            using var engine = ApplicationEngine.Create(TriggerType.Verification, tx, null, null, ProtocolSettings.Default);
            engine.LoadScript(contract.Script);
            engine.LoadScript(new Script(invocationScript.ToArray(), true), configureState: p => p.CallFlags = CallFlags.None);
            Assert.AreEqual(VMState.HALT, engine.Execute());
            Assert.IsTrue(engine.ResultStack.Pop().GetBoolean());

            Assert.AreEqual(Neo.SmartContract.Helper.MultiSignatureContractCost(1, 1) * PolicyContract.DefaultExecFeeFactor, engine.GasConsumed);
        }
    }",0,777 587 2000 123 773 2001 2002 59 91 2003 93 777 865 2004 40 41 123 2005 2006 61 744 574 91 1503 93 59 744 2007 40 41 46 2008 40 2006 41 59 2002 61 744 2001 40 2006 41 59 125 91 2009 93 777 865 2010 40 41 123 2011 2012 61 744 2013 40 41 123 2014 61 362 44 2015 61 815 46 2016 44 2017 61 2018 46 2016 60 2019 62 40 41 44 2020 61 744 574 91 93 123 1501 44 1502 44 1502 125 125 59 2012 46 2021 61 2013 46 2022 40 2012 41 59 2023 46 2024 40 362 44 2025 46 2026 46 2027 46 2028 40 2029 46 2030 44 2012 46 2021 44 362 41 46 2031 40 41 41 59 2023 46 2024 40 362 44 2025 46 2026 46 2027 46 2028 40 2029 46 2032 40 362 41 44 2012 46 2021 44 362 41 46 2031 40 41 41 59 125 91 2009 93 777 865 2033 40 41 123 2034 2035 61 744 574 91 93 123 1500 44 1502 44 1503 44 1503 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1503 44 1503 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1504 44 1500 44 125 59 2036 46 2037 40 2035 46 2038 40 41 41 59 2034 2039 61 744 574 91 93 123 1503 44 1503 44 1503 44 1502 44 1504 44 1504 44 1503 44 1504 44 1504 44 1503 44 1504 44 1503 44 1504 44 1504 44 1503 44 1503 44 1504 44 1504 44 1503 44 1502 44 1504 44 1504 44 1503 44 1504 44 1504 44 1503 44 1503 44 1504 44 1502 44 1504 44 1503 44 1504 44 1503 44 1504 44 1504 44 1503 44 1503 44 1503 44 1502 44 1504 44 1504 44 1503 44 1504 44 1504 44 1503 44 1504 44 1503 44 1504 44 1504 44 1503 44 1503 44 1504 44 1504 44 1503 44 1502 44 1504 44 1504 44 1503 44 1504 44 1504 44 1503 44 1503 44 1504 44 1502 44 1504 44 1503 44 1504 44 1503 44 1504 44 1504 44 1503 44 1503 125 59 2036 46 2037 40 2039 46 2038 40 41 41 59 125 91 2009 93 777 865 2040 40 41 123 2041 2042 61 2043 46 2044 40 2002 46 2045 41 59 2041 2046 61 2047 46 2048 40 41 59 2046 46 2049 91 1500 93 46 2050 61 2042 46 2051 59 860 2052 2053 61 744 40 41 59 2053 46 2054 40 2055 46 2056 46 2057 46 2058 40 2046 44 2002 44 2059 46 2060 46 2061 41 41 59 2046 46 2062 61 744 2063 91 93 123 744 2063 40 41 123 2064 61 2053 46 2065 40 41 44 2066 61 2042 46 2067 125 125 59 860 2041 2068 61 2069 46 2070 40 2071 46 2072 44 2046 44 752 44 752 44 2059 46 2060 41 59 2068 46 2073 40 2042 46 2074 41 59 2068 46 2073 40 744 2074 40 2053 46 2075 40 41 44 829 41 44 2076 58 2077 328 2077 46 2078 61 2078 46 2079 41 59 2080 46 2081 40 2082 46 2083 44 2068 46 2084 40 41 41 59 2080 46 2085 40 2068 46 2086 46 2087 40 41 46 2088 40 41 41 59 2080 46 2081 40 2055 46 2089 46 2057 46 2090 40 41 42 2091 46 2092 44 2068 46 2093 41 59 125 91 2009 93 777 865 2094 40 41 123 2095 2096 61 2097 46 2098 40 1501 44 744 2099 91 93 123 2002 46 2100 125 41 59 2095 2101 61 2102 46 2103 40 41 59 2101 46 2104 91 1500 93 46 2105 61 2096 46 2106 59 860 2107 2108 61 744 40 41 59 2108 46 2109 40 2110 46 2111 46 2112 46 2113 40 2101 44 2002 44 2114 46 2115 46 2116 41 41 59 860 2095 2117 61 2118 46 2119 40 2120 46 2121 44 2101 44 752 44 752 44 2114 46 2115 41 59 2117 46 2122 40 2096 46 2123 41 59 2117 46 2122 40 744 2123 40 2108 46 2124 40 41 44 829 41 44 2125 58 2126 328 2126 46 2127 61 2127 46 2128 41 59 2129 46 2130 40 2131 46 2132 44 2117 46 2133 40 41 41 59 2129 46 2134 40 2117 46 2135 46 2136 40 41 46 2137 40 41 41 59 2129 46 2130 40 2110 46 2138 46 2112 46 2139 40 1501 44 1501 41 42 2140 46 2141 44 2117 46 2142 41 59 125 125 ,"{'AvgLine': 15, 'CountLine': 91, 'CountStmt': 37, 'MaxNesting': 0, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 27, 'MaxEssential': 1, 'SumEssential': 7, 'AvgCyclomatic': 1, 'CountLineCode': 76, 'CountStmtDecl': 15, 'MaxCyclomatic': 1, 'SumCyclomatic': 7, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 15, 'CountSemicolon': 35, 'CountDeclMethod': 5, 'CountLineCodeExe': 46, 'CountLineComment': 0, 'CountClassCoupled': 22, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 23, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 7, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 5, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 40, 'SumCyclomaticModified': 7, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 5, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 20, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 40, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79978,C#,"    internal class MemorySnapshot : ISnapshot
    {
        private readonly ConcurrentDictionary<byte[], byte[]> innerData;
        private readonly ImmutableDictionary<byte[], byte[]> immutableData;
        private readonly ConcurrentDictionary<byte[], byte[]> writeBatch;

        public MemorySnapshot(ConcurrentDictionary<byte[], byte[]> innerData)
        {
            this.innerData = innerData;
            this.immutableData = innerData.ToImmutableDictionary(ByteArrayEqualityComparer.Default);
            this.writeBatch = new ConcurrentDictionary<byte[], byte[]>(ByteArrayEqualityComparer.Default);
        }

        public void Commit()
        {
            foreach (var pair in writeBatch)
                if (pair.Value is null)
                    innerData.TryRemove(pair.Key, out _);
                else
                    innerData[pair.Key] = pair.Value;
        }

        public void Delete(byte[] key)
        {
            writeBatch[key.EnsureNotNull()] = null;
        }

        public void Dispose()
        {
        }

        public void Put(byte[] key, byte[] value)
        {
            writeBatch[key.EnsureNotNull()] = value;
        }

        public IEnumerable<(byte[] Key, byte[] Value)> Seek(byte[] keyOrPrefix, SeekDirection direction = SeekDirection.Forward)
        {
            ByteArrayComparer comparer = direction == SeekDirection.Forward ? ByteArrayComparer.Default : ByteArrayComparer.Reverse;
            IEnumerable<KeyValuePair<byte[], byte[]>> records = immutableData;
            if (keyOrPrefix?.Length > 0)
                records = records.Where(p => comparer.Compare(p.Key, keyOrPrefix) >= 0);
            records = records.OrderBy(p => p.Key, comparer);
            return records.Select(p => (p.Key, p.Value));
        }

        public byte[] TryGet(byte[] key)
        {
            immutableData.TryGetValue(key.EnsureNotNull(), out byte[] value);
            return value;
        }

        public bool Contains(byte[] key)
        {
            return innerData.ContainsKey(key.EnsureNotNull());
        }
    }",0,710 587 2000 58 2001 123 773 780 2002 60 574 91 93 44 574 91 93 62 2003 59 773 780 2004 60 574 91 93 44 574 91 93 62 2005 59 773 780 2002 60 574 91 93 44 574 91 93 62 2006 59 777 2000 40 2002 60 574 91 93 44 574 91 93 62 2003 41 123 823 46 2003 61 2003 59 823 46 2005 61 2003 46 2007 40 2008 46 2009 41 59 823 46 2006 61 744 2002 60 574 91 93 44 574 91 93 62 40 2008 46 2009 41 59 125 777 865 2010 40 41 123 665 40 2011 2012 696 2006 41 688 40 2012 46 2013 712 752 41 2003 46 2014 40 2012 46 2015 44 762 2016 41 59 630 2003 91 2012 46 2015 93 61 2012 46 2013 59 125 777 865 2017 40 574 91 93 2018 41 123 2006 91 2018 46 2019 40 41 93 61 752 59 125 777 865 2020 40 41 123 125 777 865 2021 40 574 91 93 2018 44 574 91 93 2022 41 123 2006 91 2018 46 2023 40 41 93 61 2022 59 125 777 2024 60 40 574 91 93 2025 44 574 91 93 2026 41 62 2027 40 574 91 93 2028 44 2029 2030 61 2029 46 2031 41 123 2032 2033 61 2030 323 2029 46 2031 63 2032 46 2034 58 2032 46 2035 59 2024 60 2036 60 574 91 93 44 574 91 93 355 2037 61 2005 59 688 40 2028 346 2038 62 1500 41 2037 61 2037 46 2039 40 2040 328 2033 46 2041 40 2040 46 2025 44 2028 41 325 1500 41 59 2037 61 2037 46 2042 40 2040 328 2040 46 2025 44 2033 41 59 792 2037 46 2043 40 2040 328 40 2040 46 2025 44 2040 46 2026 41 41 59 125 777 574 91 93 2044 40 574 91 93 2018 41 123 2005 46 2045 40 2018 46 2046 40 41 44 762 574 91 93 2022 41 59 792 2022 59 125 777 569 2047 40 574 91 93 2018 41 123 792 2003 46 2048 40 2018 46 2049 40 41 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 57, 'CountStmt': 30, 'MaxNesting': 2, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 16, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 49, 'CountStmtDecl': 14, 'MaxCyclomatic': 3, 'SumCyclomatic': 15, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 8, 'CountSemicolon': 18, 'CountDeclMethod': 8, 'CountLineCodeExe': 19, 'CountLineComment': 0, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 3, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 8, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 3, 'PercentLackOfCohesion': 58, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 58, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79894,C#,"    internal abstract class Cache<TKey, TValue> : ICollection<TValue>, IDisposable
    {
        protected class CacheItem
        {
            public readonly TKey Key;
            public readonly TValue Value;
            public readonly DateTime Time;

            public CacheItem(TKey key, TValue value)
            {
                this.Key = key;
                this.Value = value;
                this.Time = TimeProvider.Current.UtcNow;
            }
        }

        protected readonly ReaderWriterLockSlim RwSyncRootLock = new(LockRecursionPolicy.SupportsRecursion);
        protected readonly Dictionary<TKey, CacheItem> InnerDictionary;
        private readonly int max_capacity;

        public TValue this[TKey key]
        {
            get
            {
                RwSyncRootLock.EnterReadLock();
                try
                {
                    if (!InnerDictionary.TryGetValue(key, out CacheItem item)) throw new KeyNotFoundException();
                    OnAccess(item);
                    return item.Value;
                }
                finally
                {
                    RwSyncRootLock.ExitReadLock();
                }
            }
        }

        public int Count
        {
            get
            {
                RwSyncRootLock.EnterReadLock();
                try
                {
                    return InnerDictionary.Count;
                }
                finally
                {
                    RwSyncRootLock.ExitReadLock();
                }
            }
        }

        public bool IsReadOnly => false;

        public Cache(int max_capacity, IEqualityComparer<TKey> comparer = null)
        {
            this.max_capacity = max_capacity;
            this.InnerDictionary = new Dictionary<TKey, CacheItem>(comparer);
        }

        public void Add(TValue item)
        {
            TKey key = GetKeyForItem(item);
            RwSyncRootLock.EnterWriteLock();
            try
            {
                AddInternal(key, item);
            }
            finally
            {
                RwSyncRootLock.ExitWriteLock();
            }
        }

        private void AddInternal(TKey key, TValue item)
        {
            if (InnerDictionary.TryGetValue(key, out CacheItem cacheItem))
            {
                OnAccess(cacheItem);
            }
            else
            {
                if (InnerDictionary.Count >= max_capacity)
                {
                    //TODO: Perform a performance test on the PLINQ query to determine which algorithm is better here (parallel or not)
                    foreach (CacheItem item_del in InnerDictionary.Values.AsParallel().OrderBy(p => p.Time).Take(InnerDictionary.Count - max_capacity + 1))
                    {
                        RemoveInternal(item_del);
                    }
                }
                InnerDictionary.Add(key, new CacheItem(key, item));
            }
        }

        public void AddRange(IEnumerable<TValue> items)
        {
            RwSyncRootLock.EnterWriteLock();
            try
            {
                foreach (TValue item in items)
                {
                    TKey key = GetKeyForItem(item);
                    AddInternal(key, item);
                }
            }
            finally
            {
                RwSyncRootLock.ExitWriteLock();
            }
        }

        public void Clear()
        {
            RwSyncRootLock.EnterWriteLock();
            try
            {
                foreach (CacheItem item_del in InnerDictionary.Values.ToArray())
                {
                    RemoveInternal(item_del);
                }
            }
            finally
            {
                RwSyncRootLock.ExitWriteLock();
            }
        }

        public bool Contains(TKey key)
        {
            RwSyncRootLock.EnterReadLock();
            try
            {
                if (!InnerDictionary.TryGetValue(key, out CacheItem cacheItem)) return false;
                OnAccess(cacheItem);
                return true;
            }
            finally
            {
                RwSyncRootLock.ExitReadLock();
            }
        }

        public bool Contains(TValue item)
        {
            return Contains(GetKeyForItem(item));
        }

        public void CopyTo(TValue[] array, int arrayIndex)
        {
            if (array == null) throw new ArgumentNullException();
            if (arrayIndex < 0) throw new ArgumentOutOfRangeException();
            if (arrayIndex + InnerDictionary.Count > array.Length) throw new ArgumentException();
            foreach (TValue item in this)
            {
                array[arrayIndex++] = item;
            }
        }

        public void Dispose()
        {
            Clear();
            RwSyncRootLock.Dispose();
        }

        public IEnumerator<TValue> GetEnumerator()
        {
            RwSyncRootLock.EnterReadLock();
            try
            {
                foreach (TValue item in InnerDictionary.Values.Select(p => p.Value))
                {
                    yield return item;
                }
            }
            finally
            {
                RwSyncRootLock.ExitReadLock();
            }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        protected abstract TKey GetKeyForItem(TValue item);

        public bool Remove(TKey key)
        {
            RwSyncRootLock.EnterWriteLock();
            try
            {
                if (!InnerDictionary.TryGetValue(key, out CacheItem cacheItem)) return false;
                RemoveInternal(cacheItem);
                return true;
            }
            finally
            {
                RwSyncRootLock.ExitWriteLock();
            }
        }

        protected abstract void OnAccess(CacheItem item);

        public bool Remove(TValue item)
        {
            return Remove(GetKeyForItem(item));
        }

        private void RemoveInternal(CacheItem item)
        {
            InnerDictionary.Remove(item.Key);
            if (item.Value is IDisposable disposable)
            {
                disposable.Dispose();
            }
        }

        public bool TryGet(TKey key, out TValue item)
        {
            RwSyncRootLock.EnterReadLock();
            try
            {
                if (InnerDictionary.TryGetValue(key, out CacheItem cacheItem))
                {
                    OnAccess(cacheItem);
                    item = cacheItem.Value;
                    return true;
                }
            }
            finally
            {
                RwSyncRootLock.ExitReadLock();
            }
            item = default;
            return false;
        }
    }",0,710 539 587 2000 60 2001 44 2002 62 58 2003 60 2002 62 44 2004 123 775 587 2005 123 777 780 2001 2006 59 777 780 2002 2007 59 777 780 2008 2009 59 777 2005 40 2001 2010 44 2002 2011 41 123 823 46 2006 61 2010 59 823 46 2007 61 2011 59 823 46 2009 61 2012 46 2013 46 2014 59 125 125 775 780 2015 2016 61 744 40 2017 46 2018 41 59 775 780 2019 60 2001 44 2005 62 2020 59 773 780 704 2021 59 777 2002 823 91 2001 2022 93 123 2023 123 2016 46 2024 40 41 59 830 123 688 40 33 2020 46 2025 40 2022 44 762 2005 2026 41 41 825 744 2027 40 41 59 2028 40 2026 41 59 792 2026 46 2029 59 125 658 123 2016 46 2030 40 41 59 125 125 125 777 704 2031 123 2032 123 2016 46 2033 40 41 59 830 123 792 2020 46 2031 59 125 658 123 2016 46 2034 40 41 59 125 125 125 777 569 2035 328 655 59 777 2000 40 704 2021 44 2036 60 2001 62 2037 61 752 41 123 823 46 2021 61 2021 59 823 46 2020 61 744 2019 60 2001 44 2005 62 40 2037 41 59 125 777 865 2038 40 2002 2039 41 123 2001 2022 61 2040 40 2039 41 59 2016 46 2041 40 41 59 830 123 2042 40 2022 44 2039 41 59 125 658 123 2016 46 2043 40 41 59 125 125 773 865 2044 40 2001 2022 44 2002 2039 41 123 688 40 2020 46 2045 40 2022 44 762 2005 2046 41 41 123 2047 40 2046 41 59 125 630 123 688 40 2020 46 2031 325 2021 41 123 330 665 40 2005 2048 696 2020 46 2049 46 2050 40 41 46 2051 40 2052 328 2052 46 2053 41 46 2054 40 2020 46 2031 45 2021 43 1501 41 41 123 2055 40 2048 41 59 125 125 2020 46 2038 40 2022 44 744 2005 40 2022 44 2039 41 41 59 125 125 777 865 2056 40 2057 60 2002 62 2058 41 123 2016 46 2059 40 41 59 830 123 665 40 2002 2039 696 2058 41 123 2001 2022 61 2060 40 2039 41 59 2044 40 2022 44 2039 41 59 125 125 658 123 2016 46 2061 40 41 59 125 125 777 865 2062 40 41 123 2016 46 2063 40 41 59 830 123 665 40 2005 2064 696 2020 46 2065 46 2066 40 41 41 123 2067 40 2064 41 59 125 125 658 123 2016 46 2068 40 41 59 125 125 777 569 2069 40 2001 2022 41 123 2016 46 2070 40 41 59 830 123 688 40 33 2020 46 2071 40 2022 44 762 2005 2072 41 41 792 655 59 2073 40 2072 41 59 792 829 59 125 658 123 2016 46 2074 40 41 59 125 125 777 569 2069 40 2002 2039 41 123 792 2069 40 2075 40 2039 41 41 59 125 777 865 2076 40 2002 91 93 2077 44 704 2078 41 123 688 40 2077 323 752 41 825 744 2079 40 41 59 688 40 2078 60 1500 41 825 744 2080 40 41 59 688 40 2078 43 2020 46 2031 62 2077 46 2081 41 825 744 2082 40 41 59 665 40 2002 2039 696 823 41 123 2077 91 2078 349 93 61 2039 59 125 125 777 865 2083 40 41 123 2062 40 41 59 2016 46 2083 40 41 59 125 777 2084 60 2002 62 2085 40 41 123 2016 46 2086 40 41 59 830 123 665 40 2002 2039 696 2020 46 2087 46 2088 40 2089 328 2089 46 2090 41 41 123 2091 792 2039 59 125 125 658 123 2016 46 2092 40 41 59 125 125 2084 2057 46 2085 40 41 123 792 2085 40 41 59 125 775 539 2001 2093 40 2002 2039 41 59 777 569 2094 40 2001 2022 41 123 2016 46 2095 40 41 59 830 123 688 40 33 2020 46 2096 40 2022 44 762 2005 2097 41 41 792 655 59 2098 40 2097 41 59 792 829 59 125 658 123 2016 46 2099 40 41 59 125 125 775 539 865 2100 40 2005 2039 41 59 777 569 2094 40 2002 2039 41 123 792 2094 40 2093 40 2039 41 41 59 125 773 865 2101 40 2005 2039 41 123 2020 46 2094 40 2039 46 2102 41 59 688 40 2039 46 2103 712 2004 2104 41 123 2104 46 2083 40 41 59 125 125 777 569 2105 40 2001 2022 44 762 2002 2039 41 123 2016 46 2106 40 41 59 830 123 688 40 2020 46 2107 40 2022 44 762 2005 2108 41 41 123 2100 40 2108 41 59 2039 61 2108 46 2109 59 792 829 59 125 125 658 123 2016 46 2110 40 41 59 125 2039 61 613 59 792 655 59 125 125 ,"{'AvgLine': 10, 'CountLine': 240, 'CountStmt': 113, 'MaxNesting': 3, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 82, 'MaxEssential': 4, 'SumEssential': 20, 'AvgCyclomatic': 1, 'CountLineCode': 217, 'CountStmtDecl': 33, 'MaxCyclomatic': 5, 'SumCyclomatic': 31, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 22, 'CountSemicolon': 67, 'CountDeclMethod': 20, 'CountLineCodeExe': 87, 'CountLineComment': 1, 'CountClassCoupled': 14, 'CountClassDerived': 3, 'CountDeclProperty': 2, 'CountLineCodeDecl': 33, 'CountLineInactive': 0, 'CountDeclMethodAll': 26, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 31, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 15, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 57, 'SumCyclomaticModified': 31, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 19, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 37, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 2, 'CountDeclInstanceVariableProtectedInternal': 0}"
79828,C#,"    public class ContractState : IInteroperable
    {
        /// <summary>
        /// The id of the contract.
        /// </summary>
        public int Id;

        /// <summary>
        /// Indicates the number of times the contract has been updated.
        /// </summary>
        public ushort UpdateCounter;

        /// <summary>
        /// The hash of the contract.
        /// </summary>
        public UInt160 Hash;

        /// <summary>
        /// The nef of the contract.
        /// </summary>
        public NefFile Nef;

        /// <summary>
        /// The manifest of the contract.
        /// </summary>
        public ContractManifest Manifest;

        /// <summary>
        /// The script of the contract.
        /// </summary>
        public byte[] Script => Nef.Script;

        void IInteroperable.FromStackItem(StackItem stackItem)
        {
            Array array = (Array)stackItem;
            Id = (int)array[0].GetInteger();
            UpdateCounter = (ushort)array[1].GetInteger();
            Hash = new UInt160(array[2].GetSpan());
            Nef = array[3].GetSpan().AsSerializable<NefFile>();
            Manifest = array[4].ToInteroperable<ContractManifest>();
        }

        /// <summary>
        /// Determines whether the current contract has the permission to call the specified contract.
        /// </summary>
        /// <param name=""targetContract"">The contract to be called.</param>
        /// <param name=""targetMethod"">The method to be called.</param>
        /// <returns><see langword=""true""/> if the contract allows to be called; otherwise, <see langword=""false""/>.</returns>
        public bool CanCall(ContractState targetContract, string targetMethod)
        {
            return Manifest.Permissions.Any(u => u.IsAllowed(targetContract, targetMethod));
        }

        /// <summary>
        /// Converts the contract to a JSON object.
        /// </summary>
        /// <returns>The contract represented by a JSON object.</returns>
        public JObject ToJson()
        {
            return new JObject
            {
                [""id""] = Id,
                [""updatecounter""] = UpdateCounter,
                [""hash""] = Hash.ToString(),
                [""nef""] = Nef.ToJson(),
                [""manifest""] = Manifest.ToJson()
            };
        }

        public StackItem ToStackItem(ReferenceCounter referenceCounter)
        {
            return new Array(referenceCounter, new StackItem[] { Id, (int)UpdateCounter, Hash.ToArray(), Nef.ToArray(), Manifest.ToStackItem(referenceCounter) });
        }
    }",0,777 587 2000 58 2001 123 331 777 704 2002 59 331 777 859 2003 59 331 777 2004 2005 59 331 777 2006 2007 59 331 777 2008 2009 59 331 777 574 91 93 2010 328 2007 46 2010 59 865 2001 46 2011 40 2012 2013 41 123 2014 2015 61 40 2014 41 2013 59 2002 61 40 704 41 2015 91 1500 93 46 2016 40 41 59 2003 61 40 859 41 2015 91 1501 93 46 2016 40 41 59 2005 61 744 2004 40 2015 91 1502 93 46 2017 40 41 41 59 2007 61 2015 91 1502 93 46 2017 40 41 46 2018 60 2006 62 40 41 59 2009 61 2015 91 1502 93 46 2019 60 2008 62 40 41 59 125 331 777 569 2020 40 2000 2021 44 815 2022 41 123 792 2009 46 2023 46 2024 40 2025 328 2025 46 2026 40 2021 44 2022 41 41 59 125 331 777 2027 2028 40 41 123 792 744 2027 123 91 362 93 61 2002 44 91 362 93 61 2003 44 91 362 93 61 2005 46 2029 40 41 44 91 362 93 61 2007 46 2028 40 41 44 91 362 93 61 2009 46 2028 40 41 125 59 125 777 2012 2030 40 2031 2032 41 123 792 744 2033 40 2032 44 744 2012 91 93 123 2002 44 40 704 41 2003 44 2005 46 2034 40 41 44 2007 46 2034 40 41 44 2009 46 2030 40 2032 41 125 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 74, 'CountStmt': 20, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 8, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 37, 'CountStmtDecl': 12, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 9, 'CountSemicolon': 15, 'CountDeclMethod': 5, 'CountLineCodeExe': 15, 'CountLineComment': 28, 'CountClassCoupled': 13, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.76', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 4, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 31, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 5, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 5, 'PercentLackOfCohesionModified': 31, 'CountDeclInstanceVariablePublic': 5, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80055,C#,"    public class UT_Key
    {
        [TestMethod]
        public void TestGenerator()
        {
            Key key = new Key();
            Assert.IsNotNull(key);
        }

        [TestMethod]
        public void TestSetAndGetName()
        {
            Key key = new Key
            {
                Name = ""AAA""
            };
            Assert.AreEqual(""AAA"", key.Name);
        }

        [TestMethod]
        public void TestSetAndGetValue()
        {
            Key key = new Key
            {
                Value = new byte[] { 0x01 }
            };
            Assert.AreEqual(Encoding.Default.GetString(new byte[] { 0x01 }), Encoding.Default.GetString(key.Value));
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2003 40 41 59 2005 46 2006 40 2004 41 59 125 91 2001 93 777 865 2007 40 41 123 2008 2009 61 744 2008 123 2010 61 362 125 59 2011 46 2012 40 362 44 2009 46 2013 41 59 125 91 2001 93 777 865 2014 40 41 123 2015 2016 61 744 2015 123 2017 61 744 574 91 93 123 1501 125 125 59 2018 46 2019 40 2020 46 2021 46 2022 40 744 574 91 93 123 1501 125 41 44 2020 46 2021 46 2022 40 2016 46 2023 41 41 59 125 125 ,"{'AvgLine': 7, 'CountLine': 29, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 27, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 6, 'CountDeclMethod': 3, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'CountClassCoupled': 4, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 12, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79780,C#,"    class ContractTask<T> : ContractTask
    {
        protected override ContractTaskAwaiter<T> CreateAwaiter() => new();

        public override ContractTaskAwaiter<T> GetAwaiter() => (ContractTaskAwaiter<T>)base.GetAwaiter();

        public override object GetResult() => GetAwaiter().GetResult();
    }",0,587 2000 60 2001 62 58 2000 123 775 763 2002 60 2001 62 2003 40 41 328 744 40 41 59 777 763 2002 60 2001 62 2004 40 41 328 40 2002 60 2001 62 41 563 46 2004 40 41 59 777 763 755 2005 40 41 328 2004 40 41 46 2005 40 41 59 125 ,"{'AvgLine': 1, 'CountLine': 8, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 3, 'CountDeclMethod': 3, 'CountLineCodeExe': 4, 'CountLineComment': 0, 'CountClassCoupled': 1, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 15, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 1, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79846,C#,"    internal class OrderedDictionary<TKey, TValue> : IDictionary<TKey, TValue>
    {
        private class TItem
        {
            public TKey Key;
            public TValue Value;
        }

        private class InternalCollection : KeyedCollection<TKey, TItem>
        {
            protected override TKey GetKeyForItem(TItem item)
            {
                return item.Key;
            }
        }

        private readonly InternalCollection collection = new();

        public int Count => collection.Count;
        public bool IsReadOnly => false;
        public ICollection<TKey> Keys => collection.Select(p => p.Key).ToArray();
        public ICollection<TValue> Values => collection.Select(p => p.Value).ToArray();

        public TValue this[TKey key]
        {
            get
            {
                return collection[key].Value;
            }
            set
            {
                if (collection.TryGetValue(key, out var entry))
                    entry.Value = value;
                else
                    Add(key, value);
            }
        }

        public TValue this[int index]
        {
            get
            {
                return collection[index].Value;
            }
        }

        public void Add(TKey key, TValue value)
        {
            collection.Add(new TItem
            {
                Key = key,
                Value = value
            });
        }

        public bool ContainsKey(TKey key)
        {
            return collection.Contains(key);
        }

        public bool Remove(TKey key)
        {
            return collection.Remove(key);
        }

        public bool TryGetValue(TKey key, out TValue value)
        {
            if (collection.TryGetValue(key, out var entry))
            {
                value = entry.Value;
                return true;
            }
            value = default;
            return false;
        }

        void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> item)
        {
            Add(item.Key, item.Value);
        }

        public void Clear()
        {
            collection.Clear();
        }

        bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> item)
        {
            return collection.Contains(item.Key);
        }

        void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
        {
            for (int i = 0; i < collection.Count; i++)
                array[i + arrayIndex] = new KeyValuePair<TKey, TValue>(collection[i].Key, collection[i].Value);
        }

        bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> item)
        {
            return collection.Remove(item.Key);
        }

        IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
        {
            return collection.Select(p => new KeyValuePair<TKey, TValue>(p.Key, p.Value)).GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return collection.Select(p => new KeyValuePair<TKey, TValue>(p.Key, p.Value)).GetEnumerator();
        }
    }",0,710 587 2000 60 2001 44 2002 62 58 2003 60 2001 44 2002 62 123 773 587 2004 123 777 2001 2005 59 777 2002 2006 59 125 773 587 2007 58 2008 60 2001 44 2004 62 123 775 763 2001 2009 40 2004 2010 41 123 792 2010 46 2011 59 125 125 773 780 2007 2012 61 744 40 41 59 777 704 2013 328 2012 46 2013 59 777 569 2014 328 655 59 777 2015 60 2001 62 2016 328 2012 46 2017 40 2018 328 2018 46 2019 41 46 2020 40 41 59 777 2015 60 2002 62 2021 328 2012 46 2017 40 2018 328 2018 46 2022 41 46 2020 40 41 59 777 2002 823 91 2001 2023 93 123 2024 123 792 2012 91 2023 93 46 2022 59 125 2025 123 688 40 2012 46 2026 40 2023 44 762 2027 2028 41 41 2028 46 2022 61 2029 59 630 2030 40 2023 44 2029 41 59 125 125 777 2002 823 91 704 2031 93 123 2032 123 792 2012 91 2031 93 46 2022 59 125 125 777 865 2033 40 2001 2023 44 2002 2034 41 123 2012 46 2033 40 744 2004 123 2019 61 2023 44 2022 61 2034 125 41 59 125 777 569 2035 40 2001 2023 41 123 792 2012 46 2036 40 2023 41 59 125 777 569 2037 40 2001 2023 41 123 792 2012 46 2037 40 2023 41 59 125 777 569 2038 40 2001 2023 44 762 2002 2034 41 123 688 40 2012 46 2038 40 2023 44 762 2039 2040 41 41 123 2034 61 2040 46 2022 59 792 829 59 125 2034 61 613 59 792 655 59 125 865 2015 60 2041 60 2001 44 2002 355 46 2033 40 2041 60 2001 44 2002 62 2042 41 123 2033 40 2042 46 2019 44 2042 46 2022 41 59 125 777 865 2043 40 41 123 2012 46 2043 40 41 59 125 569 2015 60 2041 60 2001 44 2002 355 46 2044 40 2041 60 2001 44 2002 62 2042 41 123 792 2012 46 2044 40 2042 46 2019 41 59 125 865 2015 60 2041 60 2001 44 2002 355 46 2045 40 2041 60 2001 44 2002 62 91 93 2046 44 704 2047 41 123 664 40 704 2048 61 1500 59 2048 60 2012 46 2013 59 2048 349 41 2046 91 2048 43 2047 93 61 744 2041 60 2001 44 2002 62 40 2012 91 2048 93 46 2019 44 2012 91 2048 93 46 2022 41 59 125 569 2015 60 2041 60 2001 44 2002 355 46 2037 40 2041 60 2001 44 2002 62 2042 41 123 792 2012 46 2037 40 2042 46 2019 41 59 125 2049 60 2041 60 2001 44 2002 355 2050 60 2041 60 2001 44 2002 355 46 2051 40 41 123 792 2012 46 2017 40 2018 328 744 2041 60 2001 44 2002 62 40 2018 46 2019 44 2018 46 2022 41 41 46 2051 40 41 59 125 2049 2050 46 2051 40 41 123 792 2012 46 2017 40 2018 328 744 2041 60 2001 44 2002 62 40 2018 46 2019 44 2018 46 2022 41 41 46 2051 40 41 59 125 125 ,"{'AvgLine': 3, 'CountLine': 112, 'CountStmt': 51, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 23, 'MaxEssential': 1, 'SumEssential': 13, 'AvgCyclomatic': 1, 'CountLineCode': 96, 'CountStmtDecl': 28, 'MaxCyclomatic': 2, 'SumCyclomatic': 15, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 16, 'CountSemicolon': 28, 'CountDeclMethod': 18, 'CountLineCodeExe': 27, 'CountLineComment': 0, 'CountClassCoupled': 11, 'CountClassDerived': 0, 'CountDeclProperty': 4, 'CountLineCodeDecl': 27, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 15, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 12, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 11, 'SumCyclomaticModified': 15, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 6, 'CountDeclInstanceMethod': 15, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 5, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79941,C#,"    public class UT_TaskSession
    {
        [TestMethod]
        public void CreateTest()
        {
            var ses = new TaskSession(new VersionPayload() { Capabilities = new NodeCapability[] { new FullNodeCapability(123) } });

            Assert.IsFalse(ses.HasTooManyTasks);
            Assert.AreEqual((uint)123, ses.LastBlockIndex);
            Assert.AreEqual(0, ses.IndexTasks.Count);
            Assert.IsTrue(ses.IsFullNode);

            ses = new TaskSession(new VersionPayload() { Capabilities = Array.Empty<NodeCapability>() });

            Assert.IsFalse(ses.HasTooManyTasks);
            Assert.AreEqual((uint)0, ses.LastBlockIndex);
            Assert.AreEqual(0, ses.IndexTasks.Count);
            Assert.IsFalse(ses.IsFullNode);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 744 2006 40 41 123 2007 61 744 2008 91 93 123 744 2009 40 1504 41 125 125 41 59 2010 46 2011 40 2004 46 2012 41 59 2010 46 2013 40 40 842 41 1504 44 2004 46 2014 41 59 2010 46 2013 40 1500 44 2004 46 2015 46 2016 41 59 2010 46 2017 40 2004 46 2018 41 59 2004 61 744 2005 40 744 2006 40 41 123 2019 61 2020 46 2021 60 2022 62 40 41 125 41 59 2010 46 2011 40 2004 46 2012 41 59 2010 46 2013 40 40 842 41 1500 44 2004 46 2014 41 59 2010 46 2013 40 1500 44 2004 46 2015 46 2016 41 59 2010 46 2011 40 2004 46 2018 41 59 125 125 ,"{'AvgLine': 16, 'CountLine': 20, 'CountStmt': 12, 'MaxNesting': 0, 'AvgLineCode': 13, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 10, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 10, 'CountDeclMethod': 1, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79742,C#,"    public class SnapshotCache : DataCache, IDisposable
    {
        private readonly IReadOnlyStore store;
        private readonly ISnapshot snapshot;

        /// <summary>
        /// Initializes a new instance of the <see cref=""SnapshotCache""/> class.
        /// </summary>
        /// <param name=""store"">An <see cref=""IReadOnlyStore""/> to create a readonly cache; or an <see cref=""ISnapshot""/> to create a snapshot cache.</param>
        public SnapshotCache(IReadOnlyStore store)
        {
            this.store = store;
            this.snapshot = store as ISnapshot;
        }

        protected override void AddInternal(StorageKey key, StorageItem value)
        {
            snapshot?.Put(key.ToArray(), value.ToArray());
        }

        protected override void DeleteInternal(StorageKey key)
        {
            snapshot?.Delete(key.ToArray());
        }

        public override void Commit()
        {
            base.Commit();
            snapshot.Commit();
        }

        protected override bool ContainsInternal(StorageKey key)
        {
            return store.Contains(key.ToArray());
        }

        public void Dispose()
        {
            snapshot?.Dispose();
        }

        protected override StorageItem GetInternal(StorageKey key)
        {
            return store.TryGet(key.ToArray()).AsSerializable<StorageItem>();
        }

        protected override IEnumerable<(StorageKey, StorageItem)> SeekInternal(byte[] keyOrPrefix, SeekDirection direction)
        {
            return store.Seek(keyOrPrefix, direction).Select(p => (p.Key.AsSerializable<StorageKey>(), p.Value.AsSerializable<StorageItem>()));
        }

        protected override StorageItem TryGetInternal(StorageKey key)
        {
            return store.TryGet(key.ToArray())?.AsSerializable<StorageItem>();
        }

        protected override void UpdateInternal(StorageKey key, StorageItem value)
        {
            snapshot?.Put(key.ToArray(), value.ToArray());
        }
    }",0,777 587 2000 58 2001 44 2002 123 773 780 2003 2004 59 773 780 2005 2006 59 331 777 2000 40 2003 2004 41 123 823 46 2004 61 2004 59 823 46 2006 61 2004 552 2005 59 125 775 763 865 2007 40 2008 2009 44 2010 2011 41 123 2006 346 2012 40 2009 46 2013 40 41 44 2011 46 2013 40 41 41 59 125 775 763 865 2014 40 2008 2009 41 123 2006 346 2015 40 2009 46 2016 40 41 41 59 125 777 763 865 2017 40 41 123 563 46 2017 40 41 59 2006 46 2017 40 41 59 125 775 763 569 2018 40 2008 2009 41 123 792 2004 46 2019 40 2009 46 2020 40 41 41 59 125 777 865 2021 40 41 123 2006 346 2021 40 41 59 125 775 763 2010 2022 40 2008 2009 41 123 792 2004 46 2023 40 2009 46 2024 40 41 41 46 2025 60 2010 62 40 41 59 125 775 763 2026 60 40 2008 44 2010 41 62 2027 40 574 91 93 2028 44 2029 2030 41 123 792 2004 46 2031 40 2028 44 2030 41 46 2032 40 2033 328 40 2033 46 2034 46 2035 60 2008 62 40 41 44 2033 46 2036 46 2035 60 2010 62 40 41 41 41 59 125 775 763 2010 2037 40 2008 2009 41 123 792 2004 46 2038 40 2009 46 2039 40 41 41 346 2040 60 2010 62 40 41 59 125 775 763 865 2041 40 2008 2009 44 2010 2011 41 123 2006 346 2042 40 2009 46 2043 40 41 44 2011 46 2043 40 41 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 61, 'CountStmt': 25, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 12, 'MaxEssential': 1, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 47, 'CountStmtDecl': 13, 'MaxCyclomatic': 1, 'SumCyclomatic': 11, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 10, 'CountSemicolon': 14, 'CountDeclMethod': 10, 'CountLineCodeExe': 12, 'CountLineComment': 4, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 36, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 44, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 10, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 7, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 44, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79959,C#,"    internal abstract class FIFOCache<TKey, TValue> : Cache<TKey, TValue>
    {
        public FIFOCache(int max_capacity, IEqualityComparer<TKey> comparer = null)
            : base(max_capacity, comparer)
        {
        }

        protected override void OnAccess(CacheItem item)
        {
        }
    }",0,710 539 587 2000 60 2001 44 2002 62 58 2003 60 2001 44 2002 62 123 777 2000 40 704 2004 44 2005 60 2001 62 2006 61 752 41 58 563 40 2004 44 2006 41 123 125 775 763 865 2007 40 2008 2009 41 123 125 125 ,"{'AvgLine': 3, 'CountLine': 11, 'CountStmt': 3, 'MaxNesting': 0, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 10, 'CountStmtDecl': 3, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 0, 'CountDeclMethod': 2, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'CountClassCoupled': 3, 'CountClassDerived': 2, 'CountDeclProperty': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 28, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79768,C#,"    public class UT_ServerCapability
    {
        [TestMethod]
        public void Size_Get()
        {
            var test = new ServerCapability(NodeCapabilityType.TcpServer) { Port = 1 };
            test.Size.Should().Be(3);

            test = new ServerCapability(NodeCapabilityType.WsServer) { Port = 2 };
            test.Size.Should().Be(3);
        }

        [TestMethod]
        public void DeserializeAndSerialize()
        {
            var test = new ServerCapability(NodeCapabilityType.WsServer) { Port = 2 };
            var buffer = test.ToArray();

            using var br = new BinaryReader(new MemoryStream(buffer));
            var clone = (ServerCapability)ServerCapability.DeserializeFrom(br);

            Assert.AreEqual(test.Port, clone.Port);
            Assert.AreEqual(test.Type, clone.Type);

            clone = new ServerCapability(NodeCapabilityType.WsServer, 123);
            br.BaseStream.Seek(0, SeekOrigin.Begin);
            ((ISerializable)clone).Deserialize(br);

            Assert.AreEqual(test.Port, clone.Port);
            Assert.AreEqual(test.Type, clone.Type);

            clone = new ServerCapability(NodeCapabilityType.TcpServer, 123);

            br.BaseStream.Seek(0, SeekOrigin.Begin);
            Assert.ThrowsException<FormatException>(() => ((ISerializable)clone).Deserialize(br));
            Assert.ThrowsException<ArgumentException>(() => new ServerCapability(NodeCapabilityType.FullNode));

            // Wrog type
            br.BaseStream.Seek(0, SeekOrigin.Begin);
            br.BaseStream.WriteByte(0xFF);
            br.BaseStream.Seek(0, SeekOrigin.Begin);
            Assert.ThrowsException<FormatException>(() => ServerCapability.DeserializeFrom(br));
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 2006 46 2007 41 123 2008 61 1501 125 59 2004 46 2009 46 2010 40 41 46 2011 40 1502 41 59 2004 61 744 2005 40 2006 46 2012 41 123 2013 61 1502 125 59 2004 46 2009 46 2010 40 41 46 2011 40 1502 41 59 125 91 2001 93 777 865 2014 40 41 123 2015 2016 61 744 2017 40 2018 46 2019 41 123 2020 61 1502 125 59 2015 2021 61 2016 46 2022 40 41 59 860 2015 2023 61 744 2024 40 744 2025 40 2021 41 41 59 2015 2026 61 40 2017 41 2017 46 2027 40 2023 41 59 2028 46 2029 40 2016 46 2030 44 2026 46 2030 41 59 2028 46 2029 40 2016 46 2031 44 2026 46 2031 41 59 2026 61 744 2017 40 2018 46 2019 44 1504 41 59 2023 46 2032 46 2033 40 1500 44 2034 46 2035 41 59 40 40 2036 41 2026 41 46 2037 40 2023 41 59 2028 46 2029 40 2016 46 2030 44 2026 46 2030 41 59 2028 46 2029 40 2016 46 2031 44 2026 46 2031 41 59 2026 61 744 2017 40 2018 46 2038 44 1504 41 59 2023 46 2032 46 2033 40 1500 44 2034 46 2035 41 59 2028 46 2039 60 2040 62 40 40 41 328 40 40 2036 41 2026 41 46 2037 40 2023 41 41 59 2028 46 2039 60 2041 62 40 40 41 328 744 2017 40 2018 46 2042 41 41 59 330 2023 46 2032 46 2033 40 1500 44 2034 46 2035 41 59 2023 46 2032 46 2043 40 1504 41 59 2023 46 2032 46 2033 40 1500 44 2034 46 2035 41 59 2028 46 2039 60 2040 62 40 40 41 328 2017 46 2027 40 2023 41 41 59 125 125 ,"{'AvgLine': 19, 'CountLine': 44, 'CountStmt': 25, 'MaxNesting': 0, 'AvgLineCode': 14, 'AvgEssential': 1, 'AvgLineBlank': 4, 'CountStmtExe': 22, 'MaxEssential': 1, 'SumEssential': 5, 'AvgCyclomatic': 1, 'CountLineCode': 34, 'CountStmtDecl': 7, 'MaxCyclomatic': 1, 'SumCyclomatic': 5, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountSemicolon': 23, 'CountDeclMethod': 2, 'CountLineCodeExe': 23, 'CountLineComment': 1, 'CountClassCoupled': 9, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 10, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 5, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 5, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 8, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79782,C#,"    class ContractTaskAwaiter<T> : ContractTaskAwaiter
    {
        private T result;

        public new T GetResult()
        {
            base.GetResult();
            return result;
        }

        public void SetResult(T result)
        {
            this.result = result;
            RunContinuation();
        }

        public override void SetResult(ApplicationEngine engine)
        {
            SetResult((T)engine.Convert(engine.Pop(), new InteropParameterDescriptor(typeof(T))));
        }
    }",0,587 2000 60 2001 62 58 2000 123 773 2001 2002 59 777 744 2001 2003 40 41 123 563 46 2003 40 41 59 792 2002 59 125 777 865 2004 40 2001 2002 41 123 823 46 2002 61 2002 59 2005 40 41 59 125 777 763 865 2004 40 2006 2007 41 123 2004 40 40 2001 41 2007 46 2008 40 2007 46 2009 40 41 44 744 2010 40 836 40 2001 41 41 41 41 59 125 125 ,"{'AvgLine': 4, 'CountLine': 21, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 5, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 18, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 6, 'CountDeclMethod': 3, 'CountLineCodeExe': 10, 'CountLineComment': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 0, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 33, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79881,C#,"    public class UT_LogEventArgs
    {
        [TestMethod]
        public void TestGeneratorAndGet()
        {
            IVerifiable container = new Header();
            UInt160 scripthash = UInt160.Zero;
            string message = ""lalala"";
            LogEventArgs logEventArgs = new LogEventArgs(container, scripthash, message);
            Assert.IsNotNull(logEventArgs);
            Assert.AreEqual(container, logEventArgs.ScriptContainer);
            Assert.AreEqual(scripthash, logEventArgs.ScriptHash);
            Assert.AreEqual(message, logEventArgs.Message);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 2005 40 41 59 2006 2007 61 2006 46 2008 59 815 2009 61 362 59 2010 2011 61 744 2010 40 2004 44 2007 44 2009 41 59 2012 46 2013 40 2011 41 59 2012 46 2014 40 2004 44 2011 46 2015 41 59 2012 46 2014 40 2007 44 2011 46 2016 41 59 2012 46 2014 40 2009 44 2011 46 2017 41 59 125 125 ,"{'AvgLine': 11, 'CountLine': 15, 'CountStmt': 10, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 6, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 15, 'CountStmtDecl': 6, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 8, 'CountDeclMethod': 1, 'CountLineCodeExe': 8, 'CountLineComment': 0, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 7, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79803,C#,"    public class CalledByEntryCondition : WitnessCondition
    {
        public override WitnessConditionType Type => WitnessConditionType.CalledByEntry;

        protected override void DeserializeWithoutType(BinaryReader reader, int maxNestDepth)
        {
        }

        public override bool Match(ApplicationEngine engine)
        {
            return engine.CallingScriptHash is null || engine.CallingScriptHash == engine.EntryScriptHash;
        }

        protected override void SerializeWithoutType(BinaryWriter writer)
        {
        }
    }",0,777 587 2000 58 2001 123 777 763 2002 2003 328 2002 46 2004 59 775 763 865 2005 40 2006 2007 44 704 2008 41 123 125 777 763 569 2009 40 2010 2011 41 123 792 2011 46 2012 712 752 309 2011 46 2012 323 2011 46 2013 59 125 775 763 865 2014 40 2015 2016 41 123 125 125 ,"{'AvgLine': 2, 'CountLine': 17, 'CountStmt': 6, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 1, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 14, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 3, 'CountSemicolon': 2, 'CountDeclMethod': 4, 'CountLineCodeExe': 1, 'CountLineComment': 0, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79788,C#,"    public class FilterAddPayload : ISerializable
    {
        /// <summary>
        /// The items to be added.
        /// </summary>
        public byte[] Data;

        public int Size => Data.GetVarSize();

        void ISerializable.Deserialize(BinaryReader reader)
        {
            Data = reader.ReadVarBytes(520);
        }

        void ISerializable.Serialize(BinaryWriter writer)
        {
            writer.WriteVarBytes(Data);
        }
    }",0,777 587 2000 58 2001 123 331 777 574 91 93 2002 59 777 704 2003 328 2002 46 2004 40 41 59 865 2001 46 2005 40 2006 2007 41 123 2002 61 2007 46 2008 40 1504 41 59 125 865 2001 46 2009 40 2010 2011 41 123 2011 46 2012 40 2002 41 59 125 125 ,"{'AvgLine': 2, 'CountLine': 19, 'CountStmt': 7, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 2, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 3, 'CountSemicolon': 4, 'CountDeclMethod': 3, 'CountLineCodeExe': 2, 'CountLineComment': 3, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 9, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.23', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79921,C#,"        protected class CacheItem
        {
            public readonly TKey Key;
            public readonly TValue Value;
            public readonly DateTime Time;

            public CacheItem(TKey key, TValue value)
            {
                this.Key = key;
                this.Value = value;
                this.Time = TimeProvider.Current.UtcNow;
            }
        }",0,775 587 2000 123 777 780 2001 2002 59 777 780 2003 2004 59 777 780 2005 2006 59 777 2000 40 2001 2007 44 2003 2008 41 123 823 46 2002 61 2007 59 823 46 2004 61 2008 59 823 46 2006 61 2009 46 2010 46 2011 59 125 125 ,"{'AvgLine': 6, 'CountLine': 13, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 12, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 6, 'CountDeclMethod': 1, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79773,C#,"        internal class Logger : ReceiveActor
        {
            public Logger()
            {
                Receive<InitializeLogger>(_ => Sender.Tell(new LoggerInitialized()));
                Receive<LogEvent>(e => Log(e.LogSource, (LogLevel)e.LogLevel(), e.Message));
            }
        }",0,710 587 2000 58 2001 123 777 2000 40 41 123 2002 60 2003 62 40 2004 328 2005 46 2006 40 744 2007 40 41 41 41 59 2002 60 2008 62 40 2009 328 2010 40 2009 46 2011 44 40 2012 41 2009 46 2012 40 41 44 2009 46 2013 41 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 8, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 8, 'CountStmtDecl': 2, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 2, 'CountDeclMethod': 1, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'CountClassCoupled': 2, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 2, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79981,C#,"    internal class TestIMemoryPoolTxObserverPlugin : Plugin, IMemoryPoolTxObserverPlugin
    {
        protected override void Configure() { }
        public void TransactionAdded(NeoSystem system, Transaction tx) { }
        public void TransactionsRemoved(NeoSystem system, MemoryPoolTxRemovalReason reason, IEnumerable<Transaction> transactions) { }
    }",0,710 587 2000 58 2001 44 2002 123 775 763 865 2003 40 41 123 125 777 865 2004 40 2005 2006 44 2007 2008 41 123 125 777 865 2009 40 2005 2006 44 2010 2011 44 2012 60 2007 62 2013 41 123 125 125 ,"{'AvgLine': 1, 'CountLine': 6, 'CountStmt': 4, 'MaxNesting': 0, 'AvgLineCode': 1, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 0, 'MaxEssential': 1, 'SumEssential': 3, 'AvgCyclomatic': 1, 'CountLineCode': 6, 'CountStmtDecl': 4, 'MaxCyclomatic': 1, 'SumCyclomatic': 3, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 0, 'CountSemicolon': 0, 'CountDeclMethod': 3, 'CountLineCodeExe': 0, 'CountLineComment': 0, 'CountClassCoupled': 3, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 4, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 3, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 3, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 3, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79799,C#,"    public class NefFile : ISerializable
    {
        /// <summary>
        /// NEO Executable Format 3 (NEF3)
        /// </summary>
        private const uint Magic = 0x3346454E;

        /// <summary>
        /// The name and version of the compiler that generated this nef file.
        /// </summary>
        public string Compiler { get; set; }

        /// <summary>
        /// The url of the source files.
        /// </summary>
        public string Source { get; set; }

        /// <summary>
        /// The methods that to be called statically.
        /// </summary>
        public MethodToken[] Tokens { get; set; }

        /// <summary>
        /// The script of the contract.
        /// </summary>
        public byte[] Script { get; set; }

        /// <summary>
        /// The checksum of the nef file.
        /// </summary>
        public uint CheckSum { get; set; }

        /// <summary>
        /// The maximum length of the script.
        /// </summary>
        public const int MaxScriptLength = 512 * 1024;

        private const int HeaderSize =
            sizeof(uint) +  // Magic
            64;             // Compiler

        public int Size =>
            HeaderSize +            // Header
            Source.GetVarSize() +   // Source
            1 +                     // Reserve
            Tokens.GetVarSize() +   // Tokens
            2 +                     // Reserve
            Script.GetVarSize() +   // Script
            sizeof(uint);           // Checksum

        public void Serialize(BinaryWriter writer)
        {
            SerializeHeader(writer);
            writer.WriteVarString(Source);
            writer.Write((byte)0);
            writer.Write(Tokens);
            writer.Write((short)0);
            writer.WriteVarBytes(Script ?? Array.Empty<byte>());
            writer.Write(CheckSum);
        }

        private void SerializeHeader(BinaryWriter writer)
        {
            writer.Write(Magic);
            writer.WriteFixedString(Compiler, 64);
        }

        public void Deserialize(BinaryReader reader)
        {
            if (reader.ReadUInt32() != Magic) throw new FormatException(""Wrong magic"");
            Compiler = reader.ReadFixedString(64);
            Source = reader.ReadVarString(256);
            if (reader.ReadByte() != 0) throw new FormatException(""Reserved bytes must be 0"");
            Tokens = reader.ReadSerializableArray<MethodToken>(128);
            if (reader.ReadUInt16() != 0) throw new FormatException(""Reserved bytes must be 0"");
            Script = reader.ReadVarBytes(MaxScriptLength);
            if (Script.Length == 0) throw new ArgumentException($""Script can't be empty"");
            CheckSum = reader.ReadUInt32();
            if (CheckSum != ComputeChecksum(this)) throw new FormatException(""CRC verification fail"");
        }

        /// <summary>
        /// Computes the checksum for the specified nef file.
        /// </summary>
        /// <param name=""file"">The specified nef file.</param>
        /// <returns>The checksum of the nef file.</returns>
        public static uint ComputeChecksum(NefFile file)
        {
            return BinaryPrimitives.ReadUInt32LittleEndian(Crypto.Hash256(file.ToArray().AsSpan(..^sizeof(uint))));
        }

        /// <summary>
        /// Converts the nef file to a JSON object.
        /// </summary>
        /// <returns>The nef file represented by a JSON object.</returns>
        public JObject ToJson()
        {
            return new JObject
            {
                [""magic""] = Magic,
                [""compiler""] = Compiler,
                [""source""] = Source,
                [""tokens""] = new JArray(Tokens.Select(p => p.ToJson())),
                [""script""] = Convert.ToBase64String(Script),
                [""checksum""] = CheckSum
            };
        }
    }",0,777 587 2000 58 2001 123 331 773 601 842 2002 61 1510 59 331 777 815 2003 123 2004 59 2005 59 125 331 777 815 2006 123 2007 59 2008 59 125 331 777 2009 91 93 2010 123 2011 59 2012 59 125 331 777 574 91 93 2013 123 2014 59 2015 59 125 331 777 842 2016 123 2017 59 2018 59 125 331 777 601 704 2019 61 1504 42 1505 59 773 601 704 2020 61 805 40 842 41 43 330 1503 59 330 777 704 2021 328 2020 43 330 2006 46 2022 40 41 43 330 1501 43 330 2010 46 2022 40 41 43 330 1502 43 330 2013 46 2022 40 41 43 330 805 40 842 41 59 330 777 865 2023 40 2024 2025 41 123 2026 40 2025 41 59 2025 46 2027 40 2006 41 59 2025 46 2028 40 40 574 41 1500 41 59 2025 46 2028 40 2010 41 59 2025 46 2028 40 40 803 41 1500 41 59 2025 46 2029 40 2013 343 2030 46 2031 60 574 62 40 41 41 59 2025 46 2028 40 2016 41 59 125 773 865 2032 40 2024 2025 41 123 2025 46 2033 40 2002 41 59 2025 46 2034 40 2003 44 1503 41 59 125 777 865 2035 40 2036 2037 41 123 688 40 2037 46 2038 40 41 340 2002 41 825 744 2039 40 362 41 59 2003 61 2037 46 2040 40 1503 41 59 2006 61 2037 46 2041 40 1504 41 59 688 40 2037 46 2042 40 41 340 1500 41 825 744 2039 40 362 41 59 2010 61 2037 46 2043 60 2009 62 40 1504 41 59 688 40 2037 46 2044 40 41 340 1500 41 825 744 2039 40 362 41 59 2013 61 2037 46 2045 40 2019 41 59 688 40 2013 46 2046 323 1500 41 825 744 2047 40 36 362 41 59 2016 61 2037 46 2038 40 41 59 688 40 2016 340 2048 40 823 41 41 825 744 2039 40 362 41 59 125 331 777 809 842 2049 40 2000 2050 41 123 792 2051 46 2052 40 2053 46 2054 40 2050 46 2055 40 41 46 2056 40 46 46 94 805 40 842 41 41 41 41 59 125 331 777 2057 2058 40 41 123 792 744 2057 123 91 362 93 61 2002 44 91 362 93 61 2003 44 91 362 93 61 2006 44 91 362 93 61 744 2059 40 2010 46 2060 40 2061 328 2061 46 2058 40 41 41 41 44 91 362 93 61 2062 46 2063 40 2013 41 44 91 362 93 61 2016 125 59 125 125 ,"{'AvgLine': 2, 'CountLine': 108, 'CountStmt': 51, 'MaxNesting': 1, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 26, 'MaxEssential': 6, 'SumEssential': 11, 'AvgCyclomatic': 1, 'CountLineCode': 65, 'CountStmtDecl': 25, 'MaxCyclomatic': 6, 'SumCyclomatic': 11, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 13, 'CountSemicolon': 35, 'CountDeclMethod': 16, 'CountLineCodeExe': 28, 'CountLineComment': 39, 'CountClassCoupled': 15, 'CountClassDerived': 0, 'CountDeclProperty': 6, 'CountLineCodeDecl': 24, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.60', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 6, 'SumCyclomaticStrict': 11, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 15, 'CountDeclPropertyAuto': 5, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 40, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 3, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 15, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 9, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 36, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79952,C#,"    public class UT_OpCodePrices
    {
        [TestMethod]
        public void AllOpcodePriceAreSet()
        {
            foreach (OpCode opcode in Enum.GetValues(typeof(OpCode)))
                Assert.IsTrue(ApplicationEngine.OpCodePrices.ContainsKey(opcode), opcode.ToString());
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 665 40 2003 2004 696 2005 46 2006 40 836 40 2003 41 41 41 2007 46 2008 40 2009 46 2010 46 2011 40 2004 41 44 2004 46 2012 40 41 41 59 125 125 ,"{'AvgLine': 5, 'CountLine': 9, 'CountStmt': 4, 'MaxNesting': 1, 'AvgLineCode': 5, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 2, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 2, 'CountLineCode': 9, 'CountStmtDecl': 2, 'MaxCyclomatic': 2, 'SumCyclomatic': 2, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 0, 'CountSemicolon': 1, 'CountDeclMethod': 1, 'CountLineCodeExe': 2, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 3, 'CountLineInactive': 0, 'CountDeclMethodAll': 7, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 2, 'SumCyclomaticStrict': 2, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 2, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 2, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 1, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79835,C#,"    internal abstract class PriorityMailbox : MailboxType, IProducesMessageQueue<PriorityMessageQueue>
    {
        public PriorityMailbox(Akka.Actor.Settings settings, Config config)
            : base(settings, config)
        {
        }

        public override IMessageQueue Create(IActorRef owner, ActorSystem system)
        {
            return new PriorityMessageQueue(ShallDrop, IsHighPriority);
        }

        internal protected virtual bool IsHighPriority(object message) => false;
        internal protected virtual bool ShallDrop(object message, IEnumerable queue) => false;
    }",0,710 539 587 2000 58 2001 44 2002 60 2003 62 123 777 2000 40 2004 46 2005 46 2006 2007 44 2008 2009 41 58 563 40 2007 44 2009 41 123 125 777 763 2010 2011 40 2012 2013 44 2014 2015 41 123 792 744 2003 40 2016 44 2017 41 59 125 710 775 864 569 2018 40 755 2019 41 328 655 59 710 775 864 569 2020 40 755 2019 44 2021 2022 41 328 655 59 125 ,"{'AvgLine': 2, 'CountLine': 15, 'CountStmt': 8, 'MaxNesting': 0, 'AvgLineCode': 2, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 4, 'AvgCyclomatic': 1, 'CountLineCode': 13, 'CountStmtDecl': 5, 'MaxCyclomatic': 1, 'SumCyclomatic': 4, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 2, 'CountSemicolon': 3, 'CountDeclMethod': 4, 'CountLineCodeExe': 3, 'CountLineComment': 0, 'CountClassCoupled': 8, 'CountClassDerived': 3, 'CountDeclProperty': 0, 'CountLineCodeDecl': 5, 'CountLineInactive': 0, 'CountDeclMethodAll': 10, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 4, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 4, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 4, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 2, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79767,C#,"    internal class TaskSession
    {
        public Dictionary<UInt256, DateTime> InvTasks { get; } = new Dictionary<UInt256, DateTime>();
        public Dictionary<uint, DateTime> IndexTasks { get; } = new Dictionary<uint, DateTime>();
        public HashSet<UInt256> AvailableTasks { get; } = new HashSet<UInt256>();
        public Dictionary<uint, Block> ReceivedBlock { get; } = new Dictionary<uint, Block>();
        public bool HasTooManyTasks => InvTasks.Count + IndexTasks.Count >= 100;
        public bool IsFullNode { get; }
        public uint LastBlockIndex { get; set; }
        public bool MempoolSent { get; set; }

        public TaskSession(VersionPayload version)
        {
            var fullNode = version.Capabilities.OfType<FullNodeCapability>().FirstOrDefault();
            this.IsFullNode = fullNode != null;
            this.LastBlockIndex = fullNode?.StartHeight ?? 0;
        }
    }",0,710 587 2000 123 777 2001 60 2002 44 2003 62 2004 123 2005 59 125 61 744 2001 60 2002 44 2003 62 40 41 59 777 2001 60 842 44 2003 62 2006 123 2007 59 125 61 744 2001 60 842 44 2003 62 40 41 59 777 2008 60 2002 62 2009 123 2010 59 125 61 744 2008 60 2002 62 40 41 59 777 2001 60 842 44 2011 62 2012 123 2013 59 125 61 744 2001 60 842 44 2011 62 40 41 59 777 569 2014 328 2004 46 2015 43 2006 46 2015 325 1503 59 777 569 2016 123 2017 59 125 777 842 2018 123 2019 59 2020 59 125 777 569 2021 123 2022 59 2023 59 125 777 2000 40 2024 2025 41 123 2026 2027 61 2025 46 2028 46 2029 60 2030 62 40 41 46 2031 40 41 59 823 46 2016 61 2027 340 752 59 823 46 2018 61 2027 346 2032 343 1500 59 125 125 ,"{'AvgLine': 0, 'CountLine': 18, 'CountStmt': 22, 'MaxNesting': 0, 'AvgLineCode': 0, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 3, 'MaxEssential': 1, 'SumEssential': 1, 'AvgCyclomatic': 1, 'CountLineCode': 17, 'CountStmtDecl': 20, 'MaxCyclomatic': 1, 'SumCyclomatic': 1, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 1, 'CountSemicolon': 17, 'CountDeclMethod': 11, 'CountLineCodeExe': 7, 'CountLineComment': 0, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountDeclProperty': 8, 'CountLineCodeDecl': 11, 'CountLineInactive': 0, 'CountDeclMethodAll': 17, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 1, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 11, 'CountDeclPropertyAuto': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 71, 'SumCyclomaticModified': 1, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 11, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 6, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 71, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79840,C#,"    public class UT_Helper
    {
        [TestMethod]
        public void GetSignData()
        {
            TestVerifiable verifiable = new();
            byte[] res = verifiable.GetSignData(ProtocolSettings.Default.Network);
            res.ToHexString().Should().Be(""4e454f3350b51da6bb366be3ea50140cda45ba7df575287c0371000b2037ed3898ff8bf5"");
        }

        [TestMethod]
        public void Sign()
        {
            TestVerifiable verifiable = new();
            byte[] res = verifiable.Sign(new KeyPair(TestUtils.GetByteArray(32, 0x42)), ProtocolSettings.Default.Network);
            res.Length.Should().Be(64);
        }

        [TestMethod]
        public void ToScriptHash()
        {
            byte[] testByteArray = TestUtils.GetByteArray(64, 0x42);
            UInt160 res = testByteArray.ToScriptHash();
            res.Should().Be(UInt160.Parse(""2d3b96ae1bcc5a585e075e3b81920210dec16302""));
        }

        [TestMethod]
        public void TestGetLowestSetBit()
        {
            var big1 = new BigInteger(0);
            big1.GetLowestSetBit().Should().Be(-1);

            var big2 = new BigInteger(512);
            big2.GetLowestSetBit().Should().Be(9);

            var big3 = new BigInteger(int.MinValue);
            big3.GetLowestSetBit().Should().Be(31);

            var big4 = new BigInteger(long.MinValue);
            big4.GetLowestSetBit().Should().Be(63);
        }

        [TestMethod]
        public void TestHexToBytes()
        {
            string nullStr = null;
            _ = nullStr.HexToBytes().ToHexString().Should().Be(Array.Empty<byte>().ToHexString());
            string emptyStr = """";
            emptyStr.HexToBytes().ToHexString().Should().Be(Array.Empty<byte>().ToHexString());
            string str1 = ""hab"";
            Action action = () => str1.HexToBytes();
            action.Should().Throw<FormatException>();
            string str2 = ""0102"";
            byte[] bytes = str2.HexToBytes();
            bytes.ToHexString().Should().Be(new byte[] { 0x01, 0x02 }.ToHexString());
        }

        [TestMethod]
        public void TestRemoveHashsetDictionary()
        {
            var a = new HashSet<int>
            {
                1,
                2,
                3
            };

            var b = new Dictionary<int, object>
            {
                [2] = null
            };

            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 1, 3 }, a.ToArray());

            b[4] = null;
            b[5] = null;
            b[1] = null;
            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 3 }, a.ToArray());
        }

        [TestMethod]
        public void TestRemoveHashsetSet()
        {
            var a = new HashSet<int>
            {
                1,
                2,
                3
            };

            var b = new SortedSet<int>()
            {
                2
            };

            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 1, 3 }, a.ToArray());

            b.Add(4);
            b.Add(5);
            b.Add(1);
            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 3 }, a.ToArray());
        }

        [TestMethod]
        public void TestRemoveHashsetHashSetCache()
        {
            var a = new HashSet<int>
            {
                1,
                2,
                3
            };

            var b = new HashSetCache<int>(10)
            {
                2
            };

            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 1, 3 }, a.ToArray());

            b.Add(4);
            b.Add(5);
            b.Add(1);
            a.Remove(b);

            CollectionAssert.AreEqual(new int[] { 3 }, a.ToArray());
        }

        [TestMethod]
        public void TestToHexString()
        {
            byte[] nullStr = null;
            Assert.ThrowsException<NullReferenceException>(() => nullStr.ToHexString());
            byte[] empty = Array.Empty<byte>();
            empty.ToHexString().Should().Be("""");
            empty.ToHexString(false).Should().Be("""");
            empty.ToHexString(true).Should().Be("""");

            byte[] str1 = new byte[] { (byte)'n', (byte)'e', (byte)'o' };
            str1.ToHexString().Should().Be(""6e656f"");
            str1.ToHexString(false).Should().Be(""6e656f"");
            str1.ToHexString(true).Should().Be(""6f656e"");
        }

        [TestMethod]
        public void TestGetVersion()
        {
            // assembly without version

            var asm = AppDomain.CurrentDomain.GetAssemblies()
                .Where(u => u.FullName == ""Anonymously Hosted DynamicMethods Assembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"")
                .FirstOrDefault();
            string version = asm?.GetVersion() ?? """";
            version.Should().Be(""0.0.0"");
        }

        [TestMethod]
        public void TestToByteArrayStandard()
        {
            BigInteger number = BigInteger.Zero;
            Assert.AreEqual("""", number.ToByteArrayStandard().ToHexString());

            number = BigInteger.One;
            Assert.AreEqual(""01"", number.ToByteArrayStandard().ToHexString());
        }

        [TestMethod]
        public void TestNextBigIntegerForRandom()
        {
            Random ran = new();
            Action action1 = () => ran.NextBigInteger(-1);
            action1.Should().Throw<ArgumentException>();

            ran.NextBigInteger(0).Should().Be(0);
            ran.NextBigInteger(8).Should().NotBeNull();
            ran.NextBigInteger(9).Should().NotBeNull();
        }

        [TestMethod]
        public void TestUnmapForIPAddress()
        {
            var addr = new IPAddress(new byte[] { 127, 0, 0, 1 });
            addr.Unmap().Should().Be(addr);

            var addr2 = addr.MapToIPv6();
            addr2.Unmap().Should().Be(addr);
        }

        [TestMethod]
        public void TestUnmapForIPEndPoin()
        {
            var addr = new IPAddress(new byte[] { 127, 0, 0, 1 });
            var endPoint = new IPEndPoint(addr, 8888);
            endPoint.Unmap().Should().Be(endPoint);

            var addr2 = addr.MapToIPv6();
            var endPoint2 = new IPEndPoint(addr2, 8888);
            endPoint2.Unmap().Should().Be(endPoint);
        }
    }",0,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 40 41 59 574 91 93 2005 61 2004 46 2002 40 2006 46 2007 46 2008 41 59 2005 46 2009 40 41 46 2010 40 41 46 2011 40 362 41 59 125 91 2001 93 777 865 2012 40 41 123 2013 2014 61 744 40 41 59 574 91 93 2015 61 2014 46 2012 40 744 2016 40 2017 46 2018 40 1503 44 1503 41 41 44 2019 46 2020 46 2021 41 59 2015 46 2022 46 2023 40 41 46 2024 40 1503 41 59 125 91 2001 93 777 865 2025 40 41 123 574 91 93 2026 61 2027 46 2028 40 1503 44 1503 41 59 2029 2030 61 2026 46 2025 40 41 59 2030 46 2031 40 41 46 2032 40 2029 46 2033 40 362 41 41 59 125 91 2001 93 777 865 2034 40 41 123 2035 2036 61 744 2037 40 1500 41 59 2036 46 2038 40 41 46 2039 40 41 46 2040 40 45 1501 41 59 2035 2041 61 744 2037 40 1504 41 59 2041 46 2038 40 41 46 2039 40 41 46 2040 40 1502 41 59 2035 2042 61 744 2037 40 704 46 2043 41 59 2042 46 2038 40 41 46 2039 40 41 46 2040 40 1503 41 59 2035 2044 61 744 2037 40 726 46 2043 41 59 2044 46 2038 40 41 46 2039 40 41 46 2040 40 1503 41 59 125 91 2001 93 777 865 2045 40 41 123 815 2046 61 752 59 2047 61 2046 46 2048 40 41 46 2049 40 41 46 2050 40 41 46 2051 40 2052 46 2053 60 574 62 40 41 46 2049 40 41 41 59 815 2054 61 362 59 2054 46 2048 40 41 46 2049 40 41 46 2050 40 41 46 2051 40 2052 46 2053 60 574 62 40 41 46 2049 40 41 41 59 815 2055 61 362 59 2056 2057 61 40 41 328 2055 46 2048 40 41 59 2057 46 2050 40 41 46 2058 60 2059 62 40 41 59 815 2060 61 362 59 574 91 93 2061 61 2060 46 2048 40 41 59 2061 46 2049 40 41 46 2050 40 41 46 2051 40 744 574 91 93 123 1501 44 1502 125 46 2049 40 41 41 59 125 91 2001 93 777 865 2062 40 41 123 2063 2064 61 744 2065 60 704 62 123 1501 44 1502 44 1502 125 59 2063 2066 61 744 2067 60 704 44 755 62 123 91 1502 93 61 752 125 59 2064 46 2068 40 2066 41 59 2069 46 2070 40 744 704 91 93 123 1501 44 1502 125 44 2064 46 2071 40 41 41 59 2066 91 1502 93 61 752 59 2066 91 1502 93 61 752 59 2066 91 1501 93 61 752 59 2064 46 2068 40 2066 41 59 2069 46 2070 40 744 704 91 93 123 1502 125 44 2064 46 2071 40 41 41 59 125 91 2001 93 777 865 2072 40 41 123 2073 2074 61 744 2075 60 704 62 123 1501 44 1502 44 1502 125 59 2073 2076 61 744 2077 60 704 62 40 41 123 1502 125 59 2074 46 2078 40 2076 41 59 2079 46 2080 40 744 704 91 93 123 1501 44 1502 125 44 2074 46 2081 40 41 41 59 2076 46 2082 40 1502 41 59 2076 46 2082 40 1502 41 59 2076 46 2082 40 1501 41 59 2074 46 2078 40 2076 41 59 2079 46 2080 40 744 704 91 93 123 1502 125 44 2074 46 2081 40 41 41 59 125 91 2001 93 777 865 2083 40 41 123 2084 2085 61 744 2086 60 704 62 123 1501 44 1502 44 1502 125 59 2084 2087 61 744 2088 60 704 62 40 1502 41 123 1502 125 59 2085 46 2089 40 2087 41 59 2090 46 2091 40 744 704 91 93 123 1501 44 1502 125 44 2085 46 2092 40 41 41 59 2087 46 2093 40 1502 41 59 2087 46 2093 40 1502 41 59 2087 46 2093 40 1501 41 59 2085 46 2089 40 2087 41 59 2090 46 2091 40 744 704 91 93 123 1502 125 44 2085 46 2092 40 41 41 59 125 91 2001 93 777 865 2094 40 41 123 574 91 93 2095 61 752 59 2096 46 2097 60 2098 62 40 40 41 328 2095 46 2099 40 41 41 59 574 91 93 2100 61 2101 46 2102 60 574 62 40 41 59 2100 46 2099 40 41 46 2103 40 41 46 2104 40 362 41 59 2100 46 2099 40 655 41 46 2103 40 41 46 2104 40 362 41 59 2100 46 2099 40 829 41 46 2103 40 41 46 2104 40 362 41 59 574 91 93 2105 61 744 574 91 93 123 40 574 41 314 44 40 574 41 314 44 40 574 41 314 125 59 2105 46 2099 40 41 46 2103 40 41 46 2104 40 362 41 59 2105 46 2099 40 655 41 46 2103 40 41 46 2104 40 362 41 59 2105 46 2099 40 829 41 46 2103 40 41 46 2104 40 362 41 59 125 91 2001 93 777 865 2106 40 41 123 330 2107 2108 61 2109 46 2110 46 2111 40 41 46 2112 40 2113 328 2113 46 2114 323 362 41 46 2115 40 41 59 815 2116 61 2108 346 2117 40 41 343 362 59 2116 46 2118 40 41 46 2119 40 362 41 59 125 91 2001 93 777 865 2120 40 41 123 2121 2122 61 2121 46 2123 59 2124 46 2125 40 362 44 2122 46 2126 40 41 46 2127 40 41 41 59 2122 61 2121 46 2128 59 2124 46 2125 40 362 44 2122 46 2126 40 41 46 2127 40 41 41 59 125 91 2001 93 777 865 2129 40 41 123 2130 2131 61 744 40 41 59 2132 2133 61 40 41 328 2131 46 2134 40 45 1501 41 59 2133 46 2135 40 41 46 2136 60 2137 62 40 41 59 2131 46 2134 40 1500 41 46 2135 40 41 46 2138 40 1500 41 59 2131 46 2134 40 1502 41 46 2135 40 41 46 2139 40 41 59 2131 46 2134 40 1502 41 46 2135 40 41 46 2139 40 41 59 125 91 2001 93 777 865 2140 40 41 123 2141 2142 61 744 2143 40 744 574 91 93 123 1504 44 1500 44 1500 44 1501 125 41 59 2142 46 2144 40 41 46 2145 40 41 46 2146 40 2142 41 59 2141 2147 61 2142 46 2148 40 41 59 2147 46 2144 40 41 46 2145 40 41 46 2146 40 2142 41 59 125 91 2001 93 777 865 2149 40 41 123 2150 2151 61 744 2152 40 744 574 91 93 123 1504 44 1500 44 1500 44 1501 125 41 59 2150 2153 61 744 2154 40 2151 44 1505 41 59 2153 46 2155 40 41 46 2156 40 41 46 2157 40 2153 41 59 2150 2158 61 2151 46 2159 40 41 59 2150 2160 61 744 2154 40 2158 44 1505 41 59 2160 46 2155 40 41 46 2156 40 41 46 2157 40 2153 41 59 125 125 ,"{'AvgLine': 12, 'CountLine': 210, 'CountStmt': 102, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 75, 'MaxEssential': 1, 'SumEssential': 18, 'AvgCyclomatic': 1, 'CountLineCode': 172, 'CountStmtDecl': 51, 'MaxCyclomatic': 1, 'SumCyclomatic': 18, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 37, 'CountSemicolon': 87, 'CountDeclMethod': 14, 'CountLineCodeExe': 101, 'CountLineComment': 1, 'CountClassCoupled': 24, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 72, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.01', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 18, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 14, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 18, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 14, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 20, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79792,C#,"    public sealed class ContractManagement : NativeContract
    {
        private const byte Prefix_MinimumDeploymentFee = 20;
        private const byte Prefix_NextAvailableId = 15;
        private const byte Prefix_Contract = 8;

        internal ContractManagement()
        {
            var events = new List<ContractEventDescriptor>(Manifest.Abi.Events)
            {
                new ContractEventDescriptor
                {
                    Name = ""Deploy"",
                    Parameters = new ContractParameterDefinition[]
                    {
                        new ContractParameterDefinition()
                        {
                            Name = ""Hash"",
                            Type = ContractParameterType.Hash160
                        }
                    }
                },
                new ContractEventDescriptor
                {
                    Name = ""Update"",
                    Parameters = new ContractParameterDefinition[]
                    {
                        new ContractParameterDefinition()
                        {
                            Name = ""Hash"",
                            Type = ContractParameterType.Hash160
                        }
                    }
                },
                new ContractEventDescriptor
                {
                    Name = ""Destroy"",
                    Parameters = new ContractParameterDefinition[]
                    {
                        new ContractParameterDefinition()
                        {
                            Name = ""Hash"",
                            Type = ContractParameterType.Hash160
                        }
                    }
                }
            };

            Manifest.Abi.Events = events.ToArray();
        }

        private int GetNextAvailableId(DataCache snapshot)
        {
            StorageItem item = snapshot.GetAndChange(CreateStorageKey(Prefix_NextAvailableId));
            int value = (int)(BigInteger)item;
            item.Add(1);
            return value;
        }

        internal override ContractTask Initialize(ApplicationEngine engine)
        {
            engine.Snapshot.Add(CreateStorageKey(Prefix_MinimumDeploymentFee), new StorageItem(10_00000000));
            engine.Snapshot.Add(CreateStorageKey(Prefix_NextAvailableId), new StorageItem(1));
            return ContractTask.CompletedTask;
        }

        private async ContractTask OnDeploy(ApplicationEngine engine, ContractState contract, StackItem data, bool update)
        {
            ContractMethodDescriptor md = contract.Manifest.Abi.GetMethod(""_deploy"", 2);
            if (md is not null)
                await engine.CallFromNativeContract(Hash, contract.Hash, md.Name, data, update);
            engine.SendNotification(Hash, update ? ""Update"" : ""Deploy"", new VM.Types.Array { contract.Hash.ToArray() });
        }

        internal override async ContractTask OnPersist(ApplicationEngine engine)
        {
            foreach (NativeContract contract in Contracts)
            {
                uint[] updates = engine.ProtocolSettings.NativeUpdateHistory[contract.Name];
                if (updates.Length == 0 || updates[0] != engine.PersistingBlock.Index)
                    continue;
                engine.Snapshot.Add(CreateStorageKey(Prefix_Contract).Add(contract.Hash), new StorageItem(new ContractState
                {
                    Id = contract.Id,
                    Nef = contract.Nef,
                    Hash = contract.Hash,
                    Manifest = contract.Manifest
                }));
                await contract.Initialize(engine);
            }
        }

        [ContractMethod(CpuFee = 1 << 15, RequiredCallFlags = CallFlags.ReadStates)]
        private long GetMinimumDeploymentFee(DataCache snapshot)
        {
            return (long)(BigInteger)snapshot[CreateStorageKey(Prefix_MinimumDeploymentFee)];
        }

        [ContractMethod(CpuFee = 1 << 15, RequiredCallFlags = CallFlags.States)]
        private void SetMinimumDeploymentFee(ApplicationEngine engine, BigInteger value)
        {
            if (value < 0) throw new ArgumentOutOfRangeException(nameof(value));
            if (!CheckCommittee(engine)) throw new InvalidOperationException();
            engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_MinimumDeploymentFee)).Set(value);
        }

        /// <summary>
        /// Gets the deployed contract with the specified hash.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""hash"">The hash of the deployed contract.</param>
        /// <returns>The deployed contract.</returns>
        [ContractMethod(CpuFee = 1 << 15, RequiredCallFlags = CallFlags.ReadStates)]
        public ContractState GetContract(DataCache snapshot, UInt160 hash)
        {
            return snapshot.TryGet(CreateStorageKey(Prefix_Contract).Add(hash))?.GetInteroperable<ContractState>();
        }

        /// <summary>
        /// Gets all deployed contracts.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <returns>The deployed contracts.</returns>
        public IEnumerable<ContractState> ListContracts(DataCache snapshot)
        {
            byte[] listContractsPrefix = CreateStorageKey(Prefix_Contract).ToArray();
            return snapshot.Find(listContractsPrefix).Select(kvp => kvp.Value.GetInteroperable<ContractState>());
        }

        [ContractMethod(RequiredCallFlags = CallFlags.States | CallFlags.AllowNotify)]
        private ContractTask<ContractState> Deploy(ApplicationEngine engine, byte[] nefFile, byte[] manifest)
        {
            return Deploy(engine, nefFile, manifest, StackItem.Null);
        }

        [ContractMethod(RequiredCallFlags = CallFlags.States | CallFlags.AllowNotify)]
        private async ContractTask<ContractState> Deploy(ApplicationEngine engine, byte[] nefFile, byte[] manifest, StackItem data)
        {
            if (engine.ScriptContainer is not Transaction tx)
                throw new InvalidOperationException();
            if (nefFile.Length == 0)
                throw new ArgumentException($""Invalid NefFile Length: {nefFile.Length}"");
            if (manifest.Length == 0)
                throw new ArgumentException($""Invalid Manifest Length: {manifest.Length}"");

            engine.AddGas(Math.Max(
                engine.StoragePrice * (nefFile.Length + manifest.Length),
                GetMinimumDeploymentFee(engine.Snapshot)
                ));

            NefFile nef = nefFile.AsSerializable<NefFile>();
            ContractManifest parsedManifest = ContractManifest.Parse(manifest);
            Helper.Check(nef.Script, parsedManifest.Abi);
            UInt160 hash = Helper.GetContractHash(tx.Sender, nef.CheckSum, parsedManifest.Name);
            StorageKey key = CreateStorageKey(Prefix_Contract).Add(hash);
            if (engine.Snapshot.Contains(key))
                throw new InvalidOperationException($""Contract Already Exists: {hash}"");
            ContractState contract = new()
            {
                Id = GetNextAvailableId(engine.Snapshot),
                UpdateCounter = 0,
                Nef = nef,
                Hash = hash,
                Manifest = parsedManifest
            };

            if (!contract.Manifest.IsValid(hash)) throw new InvalidOperationException($""Invalid Manifest Hash: {hash}"");

            engine.Snapshot.Add(key, new StorageItem(contract));

            await OnDeploy(engine, contract, data, false);

            return contract;
        }

        [ContractMethod(RequiredCallFlags = CallFlags.States | CallFlags.AllowNotify)]
        private ContractTask Update(ApplicationEngine engine, byte[] nefFile, byte[] manifest)
        {
            return Update(engine, nefFile, manifest, StackItem.Null);
        }

        [ContractMethod(RequiredCallFlags = CallFlags.States | CallFlags.AllowNotify)]
        private ContractTask Update(ApplicationEngine engine, byte[] nefFile, byte[] manifest, StackItem data)
        {
            if (nefFile is null && manifest is null) throw new ArgumentException();

            engine.AddGas(engine.StoragePrice * ((nefFile?.Length ?? 0) + (manifest?.Length ?? 0)));

            var contract = engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_Contract).Add(engine.CallingScriptHash))?.GetInteroperable<ContractState>();
            if (contract is null) throw new InvalidOperationException($""Updating Contract Does Not Exist: {engine.CallingScriptHash}"");

            if (nefFile != null)
            {
                if (nefFile.Length == 0)
                    throw new ArgumentException($""Invalid NefFile Length: {nefFile.Length}"");

                // Update nef
                contract.Nef = nefFile.AsSerializable<NefFile>();
            }
            if (manifest != null)
            {
                if (manifest.Length == 0)
                    throw new ArgumentException($""Invalid Manifest Length: {manifest.Length}"");
                ContractManifest manifest_new = ContractManifest.Parse(manifest);
                if (manifest_new.Name != contract.Manifest.Name)
                    throw new InvalidOperationException(""The name of the contract can't be changed."");
                if (!manifest_new.IsValid(contract.Hash))
                    throw new InvalidOperationException($""Invalid Manifest Hash: {contract.Hash}"");
                contract.Manifest = manifest_new;
            }
            Helper.Check(contract.Nef.Script, contract.Manifest.Abi);
            contract.UpdateCounter++; // Increase update counter
            return OnDeploy(engine, contract, data, true);
        }

        [ContractMethod(CpuFee = 1 << 15, RequiredCallFlags = CallFlags.States | CallFlags.AllowNotify)]
        private void Destroy(ApplicationEngine engine)
        {
            UInt160 hash = engine.CallingScriptHash;
            StorageKey ckey = CreateStorageKey(Prefix_Contract).Add(hash);
            ContractState contract = engine.Snapshot.TryGet(ckey)?.GetInteroperable<ContractState>();
            if (contract is null) return;
            engine.Snapshot.Delete(ckey);
            foreach (var (key, _) in engine.Snapshot.Find(StorageKey.CreateSearchPrefix(contract.Id, ReadOnlySpan<byte>.Empty)))
                engine.Snapshot.Delete(key);
            engine.SendNotification(Hash, ""Destroy"", new VM.Types.Array { hash.ToArray() });
        }
    }",1,777 798 587 2000 58 2001 123 773 601 574 2002 61 1503 59 773 601 574 2003 61 1503 59 773 601 574 2004 61 1502 59 710 2000 40 41 123 2005 2006 61 744 2007 60 2008 62 40 2009 46 2010 46 2011 41 123 744 2008 123 2012 61 362 44 2013 61 744 2014 91 93 123 744 2014 40 41 123 2012 61 362 44 2015 61 2016 46 2017 125 125 125 44 744 2008 123 2018 61 362 44 2019 61 744 2020 91 93 123 744 2020 40 41 123 2018 61 362 44 2021 61 2022 46 2023 125 125 125 44 744 2008 123 2024 61 362 44 2025 61 744 2026 91 93 123 744 2026 40 41 123 2024 61 362 44 2027 61 2028 46 2029 125 125 125 125 59 2009 46 2010 46 2011 61 2006 46 2030 40 41 59 125 773 704 2031 40 2032 2033 41 123 2034 2035 61 2033 46 2036 40 2037 40 2003 41 41 59 704 2038 61 40 704 41 40 2039 41 2035 59 2035 46 2040 40 1501 41 59 792 2038 59 125 710 763 2041 2042 40 2043 2044 41 123 2044 46 2045 46 2046 40 2047 40 2002 41 44 744 2048 40 1502 41 41 59 2044 46 2045 46 2046 40 2047 40 2003 41 44 744 2048 40 1501 41 41 59 792 2041 46 2049 59 125 773 2050 2041 2051 40 2043 2044 44 2052 2053 44 2054 2055 44 569 2056 41 123 2057 2058 61 2053 46 2059 46 2060 46 2061 40 362 44 1502 41 59 688 40 2058 712 2062 752 41 2063 2044 46 2064 40 2065 44 2053 46 2065 44 2058 46 2066 44 2055 44 2056 41 59 2044 46 2067 40 2065 44 2056 63 362 58 362 44 744 2068 46 2069 46 2070 123 2053 46 2065 46 2071 40 41 125 41 59 125 710 763 2050 2041 2072 40 2043 2044 41 123 665 40 2001 2053 696 2073 41 123 842 91 93 2074 61 2044 46 2075 46 2076 91 2053 46 2077 93 59 688 40 2074 46 2078 323 1500 309 2074 91 1500 93 340 2044 46 2079 46 2080 41 605 59 2044 46 2081 46 2082 40 2083 40 2004 41 46 2082 40 2053 46 2084 41 44 744 2085 40 744 2052 123 2086 61 2053 46 2086 44 2087 61 2053 46 2087 44 2084 61 2053 46 2084 44 2088 61 2053 46 2088 125 41 41 59 2089 2053 46 2042 40 2044 41 59 125 125 91 2090 40 2091 61 1501 332 1503 44 2092 61 2093 46 2094 41 93 773 726 2095 40 2032 2033 41 123 792 40 726 41 40 2096 41 2033 91 2097 40 2002 41 93 59 125 91 2090 40 2091 61 1501 332 1503 44 2092 61 2093 46 2098 41 93 773 865 2099 40 2043 2044 44 2100 2101 41 123 688 40 2101 60 1500 41 825 744 2102 40 2103 40 2101 41 41 59 688 40 33 2104 40 2044 41 41 825 744 2105 40 41 59 2044 46 2106 46 2107 40 2108 40 2002 41 41 46 2109 40 2101 41 59 125 331 91 2090 40 2091 61 1501 332 1503 44 2092 61 2093 46 2094 41 93 777 2052 2110 40 2032 2033 44 2111 2112 41 123 792 2033 46 2113 40 2114 40 2004 41 46 2115 40 2112 41 41 346 2116 60 2052 62 40 41 59 125 331 777 2117 60 2052 62 2118 40 2032 2033 41 123 574 91 93 2119 61 2120 40 2004 41 46 2121 40 41 59 792 2033 46 2122 40 2119 41 46 2123 40 2124 328 2124 46 2125 46 2126 60 2052 62 40 41 41 59 125 91 2090 40 2092 61 2093 46 2098 124 2093 46 2127 41 93 773 2041 60 2052 62 2128 40 2043 2044 44 574 91 93 2129 44 574 91 93 2130 41 123 792 2128 40 2044 44 2129 44 2130 44 2054 46 2131 41 59 125 91 2090 40 2092 61 2093 46 2098 124 2093 46 2127 41 93 773 2050 2041 60 2052 62 2128 40 2043 2044 44 574 91 93 2129 44 574 91 93 2130 44 2054 2055 41 123 688 40 2044 46 2132 712 2133 2134 2135 41 825 744 2136 40 41 59 688 40 2129 46 2137 323 1500 41 825 744 2138 40 36 362 41 59 688 40 2130 46 2137 323 1500 41 825 744 2138 40 36 362 41 59 2044 46 2139 40 2140 46 2141 40 2044 46 2142 42 40 2129 46 2137 43 2130 46 2137 41 44 2095 40 2044 46 2143 41 41 41 59 2144 2145 61 2129 46 2146 60 2144 62 40 41 59 2147 2148 61 2147 46 2149 40 2130 41 59 2150 46 2151 40 2145 46 2152 44 2148 46 2153 41 59 2111 2112 61 2150 46 2154 40 2135 46 2155 44 2145 46 2156 44 2148 46 2157 41 59 2158 2159 61 2160 40 2004 41 46 2161 40 2112 41 59 688 40 2044 46 2143 46 2162 40 2159 41 41 825 744 2136 40 36 362 41 59 2052 2053 61 744 40 41 123 2163 61 2031 40 2044 46 2143 41 44 2164 61 1500 44 2165 61 2145 44 2166 61 2112 44 2167 61 2148 125 59 688 40 33 2053 46 2168 46 2169 40 2112 41 41 825 744 2136 40 36 362 41 59 2044 46 2143 46 2161 40 2159 44 744 2170 40 2053 41 41 59 2171 2051 40 2044 44 2053 44 2055 44 655 41 59 792 2053 59 125 91 2090 40 2092 61 2093 46 2098 124 2093 46 2127 41 93 773 2041 2172 40 2043 2044 44 574 91 93 2129 44 574 91 93 2130 41 123 792 2172 40 2044 44 2129 44 2130 44 2054 46 2173 41 59 125 91 2090 40 2092 61 2093 46 2098 124 2093 46 2127 41 93 773 2041 2172 40 2043 2044 44 574 91 93 2129 44 574 91 93 2130 44 2054 2055 41 123 688 40 2129 712 752 307 2130 712 752 41 825 744 2174 40 41 59 2044 46 2175 40 2044 46 2176 42 40 40 2129 346 2177 343 1500 41 43 40 2130 346 2177 343 1500 41 41 41 59 2178 2053 61 2044 46 2179 46 2180 40 2181 40 2004 41 46 2182 40 2044 46 2183 41 41 346 2184 60 2052 62 40 41 59 688 40 2053 712 752 41 825 744 2185 40 36 362 41 59 688 40 2129 340 752 41 123 688 40 2129 46 2177 323 1500 41 825 744 2174 40 36 362 41 59 330 2053 46 2186 61 2129 46 2187 60 2188 62 40 41 59 125 688 40 2130 340 752 41 123 688 40 2130 46 2177 323 1500 41 825 744 2174 40 36 362 41 59 2189 2190 61 2189 46 2191 40 2130 41 59 688 40 2190 46 2192 340 2053 46 2193 46 2192 41 825 744 2185 40 362 41 59 688 40 33 2190 46 2194 40 2053 46 2195 41 41 825 744 2185 40 36 362 41 59 2053 46 2193 61 2190 59 125 2196 46 2197 40 2053 46 2198 46 2199 44 2053 46 2200 46 2201 41 59 2053 46 2202 349 59 330 792 2051 40 2044 44 2053 44 2055 44 829 41 59 125 91 2090 40 2091 61 1501 332 1503 44 2092 61 2093 46 2098 124 2093 46 2127 41 93 773 865 2203 40 2043 2044 41 123 2111 2112 61 2044 46 2204 59 2205 2206 61 2207 40 2004 41 46 2208 40 2112 41 59 2052 2053 61 2044 46 2209 46 2210 40 2206 41 346 2211 60 2052 62 40 41 59 688 40 2053 712 752 41 792 59 2044 46 2209 46 2212 40 2206 41 59 665 40 2213 40 2214 44 2215 41 696 2044 46 2209 46 2216 40 2205 46 2217 40 2053 46 2218 44 2219 60 574 62 46 2220 41 41 41 2044 46 2209 46 2212 40 2214 41 59 2044 46 2221 40 2222 44 362 44 744 2223 46 2224 46 2225 123 2112 46 2226 40 41 125 41 59 125 125 ,"{'AvgLine': 13, 'CountLine': 228, 'CountStmt': 99, 'MaxNesting': 2, 'AvgLineCode': 12, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 77, 'MaxEssential': 9, 'SumEssential': 32, 'AvgCyclomatic': 2, 'CountLineCode': 191, 'CountStmtDecl': 34, 'MaxCyclomatic': 9, 'SumCyclomatic': 36, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 25, 'CountSemicolon': 64, 'CountDeclMethod': 14, 'CountLineCodeExe': 108, 'CountLineComment': 13, 'CountClassCoupled': 35, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 44, 'CountLineInactive': 0, 'CountDeclMethodAll': 44, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.07', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 38, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 36, 'CountDeclClassVariable': 3, 'CountDeclMethodPrivate': 9, 'CountDeclInstanceMethod': 14, 'CountDeclMethodInternal': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 26, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79821,C#,"    public class UserWallet : Wallet
    {
        private readonly object db_lock = new();
        private readonly byte[] iv;
        private readonly byte[] salt;
        private readonly byte[] masterKey;
        private readonly ScryptParameters scrypt;
        private readonly Dictionary<UInt160, UserWalletAccount> accounts;

        public override string Name => GetFileNameWithoutExtension(Path);

        public override Version Version
        {
            get
            {
                byte[] buffer = LoadStoredData(""Version"");
                if (buffer == null || buffer.Length < 16) return new Version(0, 0);
                int major = BinaryPrimitives.ReadInt32LittleEndian(buffer);
                int minor = BinaryPrimitives.ReadInt32LittleEndian(buffer.AsSpan(4));
                int build = BinaryPrimitives.ReadInt32LittleEndian(buffer.AsSpan(8));
                int revision = BinaryPrimitives.ReadInt32LittleEndian(buffer.AsSpan(12));
                return new Version(major, minor, build, revision);
            }
        }

        private UserWallet(string path, byte[] passwordKey, ProtocolSettings settings) : base(path, settings)
        {
            this.salt = LoadStoredData(""Salt"");
            byte[] passwordHash = LoadStoredData(""PasswordHash"");
            if (passwordHash != null && !passwordHash.SequenceEqual(passwordKey.Concat(salt).ToArray().Sha256()))
                throw new CryptographicException();
            this.iv = LoadStoredData(""IV"");
            this.masterKey = Decrypt(LoadStoredData(""MasterKey""), passwordKey, iv);
            this.scrypt = new ScryptParameters
                (
                BinaryPrimitives.ReadInt32LittleEndian(LoadStoredData(""ScryptN"")),
                BinaryPrimitives.ReadInt32LittleEndian(LoadStoredData(""ScryptR"")),
                BinaryPrimitives.ReadInt32LittleEndian(LoadStoredData(""ScryptP""))
                );
            this.accounts = LoadAccounts();
        }

        private UserWallet(string path, byte[] passwordKey, ProtocolSettings settings, ScryptParameters scrypt) : base(path, settings)
        {
            this.iv = new byte[16];
            this.salt = new byte[20];
            this.masterKey = new byte[32];
            this.scrypt = scrypt;
            this.accounts = new Dictionary<UInt160, UserWalletAccount>();
            using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(iv);
                rng.GetBytes(salt);
                rng.GetBytes(masterKey);
            }
            Version version = Assembly.GetExecutingAssembly().GetName().Version;
            byte[] versionBuffer = new byte[sizeof(int) * 4];
            BinaryPrimitives.WriteInt32LittleEndian(versionBuffer, version.Major);
            BinaryPrimitives.WriteInt32LittleEndian(versionBuffer.AsSpan(4), version.Minor);
            BinaryPrimitives.WriteInt32LittleEndian(versionBuffer.AsSpan(8), version.Build);
            BinaryPrimitives.WriteInt32LittleEndian(versionBuffer.AsSpan(12), version.Revision);
            BuildDatabase();
            SaveStoredData(""IV"", iv);
            SaveStoredData(""Salt"", salt);
            SaveStoredData(""PasswordHash"", passwordKey.Concat(salt).ToArray().Sha256());
            SaveStoredData(""MasterKey"", Encrypt(masterKey, passwordKey, iv));
            SaveStoredData(""Version"", versionBuffer);
            SaveStoredData(""ScryptN"", this.scrypt.N);
            SaveStoredData(""ScryptR"", this.scrypt.R);
            SaveStoredData(""ScryptP"", this.scrypt.P);
        }

        private void AddAccount(UserWalletAccount account)
        {
            lock (accounts)
            {
                if (accounts.TryGetValue(account.ScriptHash, out UserWalletAccount account_old))
                {
                    if (account.Contract == null)
                    {
                        account.Contract = account_old.Contract;
                    }
                }
                accounts[account.ScriptHash] = account;
            }
            lock (db_lock)
            {
                using WalletDataContext ctx = new(Path);
                if (account.HasKey)
                {
                    string passphrase = Encoding.UTF8.GetString(masterKey);
                    Account db_account = ctx.Accounts.FirstOrDefault(p => p.PublicKeyHash == account.Key.PublicKeyHash.ToArray());
                    if (db_account == null)
                    {
                        db_account = ctx.Accounts.Add(new Account
                        {
                            Nep2key = account.Key.Export(passphrase, ProtocolSettings.AddressVersion, scrypt.N, scrypt.R, scrypt.P),
                            PublicKeyHash = account.Key.PublicKeyHash.ToArray()
                        }).Entity;
                    }
                    else
                    {
                        db_account.Nep2key = account.Key.Export(passphrase, ProtocolSettings.AddressVersion, scrypt.N, scrypt.R, scrypt.P);
                    }
                }
                if (account.Contract != null)
                {
                    Contract db_contract = ctx.Contracts.FirstOrDefault(p => p.ScriptHash == account.Contract.ScriptHash.ToArray());
                    if (db_contract != null)
                    {
                        db_contract.PublicKeyHash = account.Key.PublicKeyHash.ToArray();
                    }
                    else
                    {
                        ctx.Contracts.Add(new Contract
                        {
                            RawData = ((VerificationContract)account.Contract).ToArray(),
                            ScriptHash = account.Contract.ScriptHash.ToArray(),
                            PublicKeyHash = account.Key.PublicKeyHash.ToArray()
                        });
                    }
                }
                //add address
                {
                    Address db_address = ctx.Addresses.FirstOrDefault(p => p.ScriptHash == account.ScriptHash.ToArray());
                    if (db_address == null)
                    {
                        ctx.Addresses.Add(new Address
                        {
                            ScriptHash = account.ScriptHash.ToArray()
                        });
                    }
                }
                ctx.SaveChanges();
            }
        }

        private void BuildDatabase()
        {
            using WalletDataContext ctx = new(Path);
            ctx.Database.EnsureDeleted();
            ctx.Database.EnsureCreated();
        }

        public override bool ChangePassword(string oldPassword, string newPassword)
        {
            if (!VerifyPassword(oldPassword)) return false;
            byte[] passwordKey = newPassword.ToAesKey();
            try
            {
                SaveStoredData(""PasswordHash"", passwordKey.Concat(salt).ToArray().Sha256());
                SaveStoredData(""MasterKey"", Encrypt(masterKey, passwordKey, iv));
                return true;
            }
            finally
            {
                Array.Clear(passwordKey, 0, passwordKey.Length);
            }
        }

        public override bool Contains(UInt160 scriptHash)
        {
            lock (accounts)
            {
                return accounts.ContainsKey(scriptHash);
            }
        }

        /// <summary>
        /// Creates a new wallet at the specified path.
        /// </summary>
        /// <param name=""path"">The path of the wallet.</param>
        /// <param name=""password"">The password of the wallet.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used by the wallet.</param>
        /// <param name=""scrypt"">The parameters of the SCrypt algorithm used for encrypting and decrypting the private keys in the wallet.</param>
        /// <returns>The created wallet.</returns>
        public static UserWallet Create(string path, string password, ProtocolSettings settings, ScryptParameters scrypt = null)
        {
            return new UserWallet(path, password.ToAesKey(), settings, scrypt ?? ScryptParameters.Default);
        }

        /// <summary>
        /// Creates a new wallet at the specified path.
        /// </summary>
        /// <param name=""path"">The path of the wallet.</param>
        /// <param name=""password"">The password of the wallet.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used by the wallet.</param>
        /// <param name=""scrypt"">The parameters of the SCrypt algorithm used for encrypting and decrypting the private keys in the wallet.</param>
        /// <returns>The created wallet.</returns>
        public static UserWallet Create(string path, SecureString password, ProtocolSettings settings, ScryptParameters scrypt = null)
        {
            return new UserWallet(path, password.ToAesKey(), settings, scrypt ?? ScryptParameters.Default);
        }

        public override WalletAccount CreateAccount(byte[] privateKey)
        {
            KeyPair key = new(privateKey);
            VerificationContract contract = new()
            {
                Script = SmartContract.Contract.CreateSignatureRedeemScript(key.PublicKey),
                ParameterList = new[] { ContractParameterType.Signature }
            };
            UserWalletAccount account = new(contract.ScriptHash, ProtocolSettings)
            {
                Key = key,
                Contract = contract
            };
            AddAccount(account);
            return account;
        }

        public override WalletAccount CreateAccount(SmartContract.Contract contract, KeyPair key = null)
        {
            if (contract is not VerificationContract verification_contract)
            {
                verification_contract = new VerificationContract
                {
                    Script = contract.Script,
                    ParameterList = contract.ParameterList
                };
            }
            UserWalletAccount account = new(verification_contract.ScriptHash, ProtocolSettings)
            {
                Key = key,
                Contract = verification_contract
            };
            AddAccount(account);
            return account;
        }

        public override WalletAccount CreateAccount(UInt160 scriptHash)
        {
            UserWalletAccount account = new(scriptHash, ProtocolSettings);
            AddAccount(account);
            return account;
        }

        public override void Delete()
        {
            using WalletDataContext ctx = new(Path);
            ctx.Database.EnsureDeleted();
        }

        public override bool DeleteAccount(UInt160 scriptHash)
        {
            UserWalletAccount account;
            lock (accounts)
            {
                if (accounts.TryGetValue(scriptHash, out account))
                    accounts.Remove(scriptHash);
            }
            if (account != null)
            {
                lock (db_lock)
                {
                    using WalletDataContext ctx = new(Path);
                    if (account.HasKey)
                    {
                        Account db_account = ctx.Accounts.First(p => p.PublicKeyHash == account.Key.PublicKeyHash.ToArray());
                        ctx.Accounts.Remove(db_account);
                    }
                    if (account.Contract != null)
                    {
                        Contract db_contract = ctx.Contracts.First(p => p.ScriptHash == scriptHash.ToArray());
                        ctx.Contracts.Remove(db_contract);
                    }
                    //delete address
                    {
                        Address db_address = ctx.Addresses.First(p => p.ScriptHash == scriptHash.ToArray());
                        ctx.Addresses.Remove(db_address);
                    }
                    ctx.SaveChanges();
                }
                return true;
            }
            return false;
        }

        public override WalletAccount GetAccount(UInt160 scriptHash)
        {
            lock (accounts)
            {
                accounts.TryGetValue(scriptHash, out UserWalletAccount account);
                return account;
            }
        }

        public override IEnumerable<WalletAccount> GetAccounts()
        {
            lock (accounts)
            {
                foreach (UserWalletAccount account in accounts.Values)
                    yield return account;
            }
        }

        private Dictionary<UInt160, UserWalletAccount> LoadAccounts()
        {
            using WalletDataContext ctx = new(Path);
            string passphrase = Encoding.UTF8.GetString(masterKey);
            Dictionary<UInt160, UserWalletAccount> accounts = ctx.Addresses.Select(p => p.ScriptHash).AsEnumerable().Select(p => new UserWalletAccount(new UInt160(p), ProtocolSettings)).ToDictionary(p => p.ScriptHash);
            foreach (Contract db_contract in ctx.Contracts.Include(p => p.Account))
            {
                VerificationContract contract = db_contract.RawData.AsSerializable<VerificationContract>();
                UserWalletAccount account = accounts[contract.ScriptHash];
                account.Contract = contract;
                account.Key = new KeyPair(GetPrivateKeyFromNEP2(db_contract.Account.Nep2key, passphrase, ProtocolSettings.AddressVersion, scrypt.N, scrypt.R, scrypt.P));
            }
            return accounts;
        }

        private byte[] LoadStoredData(string name)
        {
            using WalletDataContext ctx = new(Path);
            return ctx.Keys.FirstOrDefault(p => p.Name == name)?.Value;
        }

        /// <summary>
        /// Opens a wallet at the specified path.
        /// </summary>
        /// <param name=""path"">The path of the wallet.</param>
        /// <param name=""password"">The password of the wallet.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used by the wallet.</param>
        /// <returns>The opened wallet.</returns>
        public static UserWallet Open(string path, string password, ProtocolSettings settings)
        {
            return new UserWallet(path, password.ToAesKey(), settings);
        }

        /// <summary>
        /// Opens a wallet at the specified path.
        /// </summary>
        /// <param name=""path"">The path of the wallet.</param>
        /// <param name=""password"">The password of the wallet.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used by the wallet.</param>
        /// <returns>The opened wallet.</returns>
        public static UserWallet Open(string path, SecureString password, ProtocolSettings settings)
        {
            return new UserWallet(path, password.ToAesKey(), settings);
        }

        private void SaveStoredData(string name, int value)
        {
            byte[] data = new byte[sizeof(int)];
            BinaryPrimitives.WriteInt32LittleEndian(data, value);
            SaveStoredData(name, data);
        }

        private void SaveStoredData(string name, byte[] value)
        {
            lock (db_lock)
            {
                using WalletDataContext ctx = new(Path);
                SaveStoredData(ctx, name, value);
                ctx.SaveChanges();
            }
        }

        private static void SaveStoredData(WalletDataContext ctx, string name, byte[] value)
        {
            Key key = ctx.Keys.FirstOrDefault(p => p.Name == name);
            if (key == null)
            {
                ctx.Keys.Add(new Key
                {
                    Name = name,
                    Value = value
                });
            }
            else
            {
                key.Value = value;
            }
        }

        public override bool VerifyPassword(string password)
        {
            return password.ToAesKey().Concat(salt).ToArray().Sha256().SequenceEqual(LoadStoredData(""PasswordHash""));
        }

        private static byte[] Encrypt(byte[] data, byte[] key, byte[] iv)
        {
            if (data == null || key == null || iv == null) throw new ArgumentNullException();
            if (data.Length % 16 != 0 || key.Length != 32 || iv.Length != 16) throw new ArgumentException();
            using Aes aes = Aes.Create();
            aes.Padding = PaddingMode.None;
            using ICryptoTransform encryptor = aes.CreateEncryptor(key, iv);
            return encryptor.TransformFinalBlock(data, 0, data.Length);
        }

        private static byte[] Decrypt(byte[] data, byte[] key, byte[] iv)
        {
            if (data == null || key == null || iv == null) throw new ArgumentNullException();
            if (data.Length % 16 != 0 || key.Length != 32 || iv.Length != 16) throw new ArgumentException();
            using Aes aes = Aes.Create();
            aes.Padding = PaddingMode.None;
            using ICryptoTransform decryptor = aes.CreateDecryptor(key, iv);
            return decryptor.TransformFinalBlock(data, 0, data.Length);
        }
    }",1,777 587 2000 58 2001 123 773 780 755 2002 61 744 40 41 59 773 780 574 91 93 2003 59 773 780 574 91 93 2004 59 773 780 574 91 93 2005 59 773 780 2006 2007 59 773 780 2008 60 2009 44 2010 62 2011 59 777 763 815 2012 328 2013 40 2014 41 59 777 763 2015 2015 123 2016 123 574 91 93 2017 61 2018 40 362 41 59 688 40 2017 323 752 309 2017 46 2019 60 1503 41 792 744 2015 40 1500 44 1500 41 59 704 2020 61 2021 46 2022 40 2017 41 59 704 2023 61 2021 46 2022 40 2017 46 2024 40 1502 41 41 59 704 2025 61 2021 46 2022 40 2017 46 2024 40 1502 41 41 59 704 2026 61 2021 46 2022 40 2017 46 2024 40 1503 41 41 59 792 744 2015 40 2020 44 2023 44 2025 44 2026 41 59 125 125 773 2000 40 815 2027 44 574 91 93 2028 44 2029 2030 41 58 563 40 2027 44 2030 41 123 823 46 2004 61 2031 40 362 41 59 574 91 93 2032 61 2031 40 362 41 59 688 40 2032 340 752 307 33 2032 46 2033 40 2028 46 2034 40 2004 41 46 2035 40 41 46 2036 40 41 41 41 825 744 2037 40 41 59 823 46 2003 61 2031 40 362 41 59 823 46 2005 61 2038 40 2031 40 362 41 44 2028 44 2003 41 59 823 46 2007 61 744 2006 40 2039 46 2040 40 2031 40 362 41 41 44 2039 46 2040 40 2031 40 362 41 41 44 2039 46 2040 40 2031 40 362 41 41 41 59 823 46 2011 61 2041 40 41 59 125 773 2000 40 815 2027 44 574 91 93 2028 44 2029 2030 44 2006 2007 41 58 563 40 2027 44 2030 41 123 823 46 2003 61 744 574 91 1503 93 59 823 46 2004 61 744 574 91 1503 93 59 823 46 2005 61 744 574 91 1503 93 59 823 46 2007 61 2007 59 823 46 2011 61 744 2008 60 2009 44 2010 62 40 41 59 860 40 2042 2043 61 2042 46 2044 40 41 41 123 2043 46 2045 40 2003 41 59 2043 46 2045 40 2004 41 59 2043 46 2045 40 2005 41 59 125 2015 2046 61 2047 46 2048 40 41 46 2049 40 41 46 2015 59 574 91 93 2050 61 744 574 91 805 40 704 41 42 1502 93 59 2051 46 2052 40 2050 44 2046 46 2053 41 59 2051 46 2052 40 2050 46 2054 40 1502 41 44 2046 46 2055 41 59 2051 46 2052 40 2050 46 2054 40 1502 41 44 2046 46 2056 41 59 2051 46 2052 40 2050 46 2054 40 1503 41 44 2046 46 2057 41 59 2058 40 41 59 2059 40 362 44 2003 41 59 2059 40 362 44 2004 41 59 2059 40 362 44 2028 46 2060 40 2004 41 46 2061 40 41 46 2062 40 41 41 59 2059 40 362 44 2063 40 2005 44 2028 44 2003 41 41 59 2059 40 362 44 2050 41 59 2059 40 362 44 823 46 2007 46 2064 41 59 2059 40 362 44 823 46 2007 46 2065 41 59 2059 40 362 44 823 46 2007 46 2066 41 59 125 773 865 2067 40 2010 2068 41 123 725 40 2011 41 123 688 40 2011 46 2069 40 2068 46 2070 44 762 2010 2071 41 41 123 688 40 2068 46 2072 323 752 41 123 2068 46 2072 61 2071 46 2072 59 125 125 2011 91 2068 46 2070 93 61 2068 59 125 725 40 2002 41 123 860 2073 2074 61 744 40 2014 41 59 688 40 2068 46 2075 41 123 815 2076 61 2077 46 2078 46 2079 40 2005 41 59 2080 2081 61 2074 46 2082 46 2083 40 2084 328 2084 46 2085 323 2068 46 2086 46 2085 46 2087 40 41 41 59 688 40 2081 323 752 41 123 2081 61 2074 46 2082 46 2088 40 744 2080 123 2089 61 2068 46 2086 46 2090 40 2076 44 2029 46 2091 44 2007 46 2092 44 2007 46 2093 44 2007 46 2094 41 44 2085 61 2068 46 2086 46 2085 46 2087 40 41 125 41 46 2095 59 125 630 123 2081 46 2096 61 2068 46 2086 46 2097 40 2076 44 2029 46 2098 44 2007 46 2099 44 2007 46 2100 44 2007 46 2101 41 59 125 125 688 40 2068 46 2102 340 752 41 123 2102 2103 61 2074 46 2104 46 2105 40 2106 328 2106 46 2107 323 2068 46 2102 46 2107 46 2108 40 41 41 59 688 40 2103 340 752 41 123 2103 46 2109 61 2068 46 2110 46 2109 46 2108 40 41 59 125 630 123 2074 46 2104 46 2111 40 744 2102 123 2112 61 40 40 2113 41 2068 46 2102 41 46 2108 40 41 44 2107 61 2068 46 2102 46 2107 46 2108 40 41 44 2114 61 2068 46 2115 46 2114 46 2108 40 41 125 41 59 125 125 330 123 2116 2117 61 2074 46 2118 46 2119 40 2120 328 2120 46 2121 323 2068 46 2121 46 2122 40 41 41 59 688 40 2117 323 752 41 123 2074 46 2118 46 2123 40 744 2116 123 2121 61 2068 46 2121 46 2122 40 41 125 41 59 125 125 2074 46 2124 40 41 59 125 125 773 865 2125 40 41 123 860 2126 2127 61 744 40 2014 41 59 2127 46 2128 46 2129 40 41 59 2127 46 2128 46 2130 40 41 59 125 777 763 569 2131 40 815 2132 44 815 2133 41 123 688 40 33 2134 40 2132 41 41 792 655 59 574 91 93 2028 61 2133 46 2135 40 41 59 830 123 2136 40 362 44 2028 46 2137 40 2004 41 46 2138 40 41 46 2139 40 41 41 59 2136 40 362 44 2140 40 2005 44 2028 44 2003 41 41 59 792 829 59 125 658 123 2141 46 2142 40 2028 44 1500 44 2028 46 2143 41 59 125 125 777 763 569 2144 40 2009 2145 41 123 725 40 2011 41 123 792 2011 46 2146 40 2145 41 59 125 125 331 777 809 2000 2147 40 815 2027 44 815 2148 44 2029 2030 44 2006 2007 61 752 41 123 792 744 2000 40 2027 44 2148 46 2149 40 41 44 2030 44 2007 343 2006 46 2150 41 59 125 331 777 809 2000 2147 40 815 2027 44 2151 2148 44 2029 2030 44 2006 2007 61 752 41 123 792 744 2000 40 2027 44 2148 46 2152 40 41 44 2030 44 2007 343 2006 46 2153 41 59 125 777 763 2154 2155 40 574 91 93 2156 41 123 2157 2158 61 744 40 2156 41 59 2159 2160 61 744 40 41 123 2161 61 2162 46 2163 46 2164 40 2158 46 2165 41 44 2166 61 744 91 93 123 2167 46 2168 125 125 59 2010 2068 61 744 40 2160 46 2169 44 2029 41 123 2170 61 2158 44 2171 61 2160 125 59 2067 40 2068 41 59 792 2068 59 125 777 763 2154 2155 40 2172 46 2173 2174 44 2175 2176 61 752 41 123 688 40 2174 712 2177 2178 2179 41 123 2179 61 744 2178 123 2180 61 2174 46 2180 44 2181 61 2174 46 2181 125 59 125 2010 2068 61 744 40 2179 46 2182 44 2029 41 123 2183 61 2176 44 2173 61 2179 125 59 2067 40 2068 41 59 792 2068 59 125 777 763 2154 2155 40 2009 2145 41 123 2010 2068 61 744 40 2145 44 2029 41 59 2067 40 2068 41 59 792 2068 59 125 777 763 865 2184 40 41 123 860 2185 2186 61 744 40 2014 41 59 2186 46 2187 46 2188 40 41 59 125 777 763 569 2189 40 2009 2145 41 123 2010 2068 59 725 40 2011 41 123 688 40 2011 46 2190 40 2145 44 762 2068 41 41 2011 46 2191 40 2145 41 59 125 688 40 2068 340 752 41 123 725 40 2002 41 123 860 2192 2193 61 744 40 2014 41 59 688 40 2068 46 2194 41 123 2195 2196 61 2193 46 2197 46 2198 40 2199 328 2199 46 2200 323 2068 46 2201 46 2200 46 2202 40 41 41 59 2193 46 2197 46 2203 40 2196 41 59 125 688 40 2068 46 2173 340 752 41 123 2173 2204 61 2193 46 2205 46 2206 40 2207 328 2207 46 2208 323 2145 46 2209 40 41 41 59 2193 46 2205 46 2210 40 2204 41 59 125 330 123 2211 2212 61 2193 46 2213 46 2214 40 2215 328 2215 46 2216 323 2145 46 2217 40 41 41 59 2193 46 2213 46 2218 40 2212 41 59 125 2193 46 2219 40 41 59 125 792 829 59 125 792 655 59 125 777 763 2154 2220 40 2009 2145 41 123 725 40 2011 41 123 2011 46 2221 40 2145 44 762 2010 2068 41 59 792 2068 59 125 125 777 763 2222 60 2154 62 2223 40 41 123 725 40 2011 41 123 665 40 2010 2068 696 2011 46 2224 41 2225 792 2068 59 125 125 773 2008 60 2009 44 2010 62 2226 40 41 123 860 2227 2228 61 744 40 2014 41 59 815 2229 61 2230 46 2231 46 2232 40 2005 41 59 2008 60 2009 44 2010 62 2011 61 2228 46 2233 46 2234 40 2235 328 2235 46 2236 41 46 2237 40 41 46 2234 40 2235 328 744 2010 40 744 2009 40 2235 41 44 2029 41 41 46 2238 40 2235 328 2235 46 2236 41 59 665 40 2173 2239 696 2228 46 2240 46 2241 40 2235 328 2235 46 2242 41 41 123 2243 2174 61 2239 46 2244 46 2245 60 2243 62 40 41 59 2010 2068 61 2011 91 2174 46 2236 93 59 2068 46 2173 61 2174 59 2068 46 2246 61 744 2175 40 2247 40 2239 46 2242 46 2248 44 2229 44 2029 46 2249 44 2007 46 2250 44 2007 46 2251 44 2007 46 2252 41 41 59 125 792 2011 59 125 773 574 91 93 2253 40 815 2254 41 123 860 2255 2256 61 744 40 2014 41 59 792 2256 46 2257 46 2258 40 2259 328 2259 46 2012 323 2254 41 346 2260 59 125 331 777 809 2000 2261 40 815 2027 44 815 2148 44 2029 2030 41 123 792 744 2000 40 2027 44 2148 46 2262 40 41 44 2030 41 59 125 331 777 809 2000 2261 40 815 2027 44 2151 2148 44 2029 2030 41 123 792 744 2000 40 2027 44 2148 46 2263 40 41 44 2030 41 59 125 773 865 2264 40 815 2254 44 704 2265 41 123 574 91 93 2266 61 744 574 91 805 40 704 41 93 59 2267 46 2268 40 2266 44 2265 41 59 2264 40 2254 44 2266 41 59 125 773 865 2264 40 815 2254 44 574 91 93 2265 41 123 725 40 2002 41 123 860 2269 2270 61 744 40 2014 41 59 2264 40 2270 44 2254 44 2265 41 59 2270 46 2271 40 41 59 125 125 773 809 865 2264 40 2272 2273 44 815 2254 44 574 91 93 2265 41 123 2274 2176 61 2273 46 2275 46 2276 40 2277 328 2277 46 2012 323 2254 41 59 688 40 2176 323 752 41 123 2273 46 2275 46 2278 40 744 2274 123 2012 61 2254 44 2279 61 2265 125 41 59 125 630 123 2176 46 2280 61 2265 59 125 125 777 763 569 2281 40 815 2148 41 123 792 2148 46 2282 40 41 46 2283 40 2004 41 46 2284 40 41 46 2285 40 41 46 2286 40 2253 40 362 41 41 59 125 773 809 574 91 93 2287 40 574 91 93 2288 44 574 91 93 2176 44 574 91 93 2003 41 123 688 40 2288 323 752 309 2176 323 752 309 2003 323 752 41 825 744 2289 40 41 59 688 40 2288 46 2290 37 1503 340 1500 309 2176 46 2290 340 1503 309 2003 46 2290 340 1503 41 825 744 2291 40 41 59 860 2292 2293 61 2292 46 2147 40 41 59 2293 46 2294 61 2295 46 2296 59 860 2297 2298 61 2293 46 2299 40 2176 44 2003 41 59 792 2298 46 2300 40 2288 44 1500 44 2288 46 2290 41 59 125 773 809 574 91 93 2301 40 574 91 93 2288 44 574 91 93 2176 44 574 91 93 2003 41 123 688 40 2288 323 752 309 2176 323 752 309 2003 323 752 41 825 744 2302 40 41 59 688 40 2288 46 2303 37 1503 340 1500 309 2176 46 2303 340 1503 309 2003 46 2303 340 1503 41 825 744 2304 40 41 59 860 2305 2306 61 2305 46 2147 40 41 59 2306 46 2307 61 2308 46 2309 59 860 2310 2311 61 2306 46 2312 40 2176 44 2003 41 59 792 2311 46 2313 40 2288 44 1500 44 2288 46 2303 41 59 125 125 ,"{'AvgLine': 12, 'CountLine': 400, 'CountStmt': 181, 'MaxNesting': 3, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 136, 'MaxEssential': 3, 'SumEssential': 41, 'AvgCyclomatic': 1, 'CountLineCode': 341, 'CountStmtDecl': 63, 'MaxCyclomatic': 8, 'SumCyclomatic': 58, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 27, 'CountSemicolon': 132, 'CountDeclMethod': 27, 'CountLineCodeExe': 181, 'CountLineComment': 32, 'CountClassCoupled': 30, 'CountClassDerived': 0, 'CountDeclProperty': 2, 'CountLineCodeDecl': 70, 'CountLineInactive': 0, 'CountDeclMethodAll': 66, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.09', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 67, 'CountDeclClassMethod': 7, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 16, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 58, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 11, 'CountDeclInstanceMethod': 20, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 23, 'CountDeclInstanceVariable': 6, 'PercentLackOfCohesionModified': 61, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 6, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
89395,C#,"    public class ControllerWindow : Window
    {
        private readonly PlayerIndex _playerIndex;
        private readonly InputConfig _inputConfig;

        private bool _isWaitingForInput;

#pragma warning disable CS0649, IDE0044
        [GUI] Adjustment   _controllerStrongRumble;
        [GUI] Adjustment   _controllerWeakRumble;
        [GUI] Adjustment   _controllerDeadzoneLeft;
        [GUI] Adjustment   _controllerDeadzoneRight;
        [GUI] Adjustment   _controllerTriggerThreshold;
        [GUI] Adjustment   _slotNumber;
        [GUI] Adjustment   _altSlotNumber;
        [GUI] Adjustment   _sensitivity;
        [GUI] Adjustment   _gyroDeadzone;
        [GUI] CheckButton  _enableMotion;
        [GUI] CheckButton  _enableCemuHook;
        [GUI] CheckButton  _mirrorInput;
        [GUI] Entry        _dsuServerHost;
        [GUI] Entry        _dsuServerPort;
        [GUI] ComboBoxText _inputDevice;
        [GUI] ComboBoxText _profile;
        [GUI] Box          _settingsBox;
        [GUI] Box          _motionAltBox;
        [GUI] Box          _motionBox;
        [GUI] Box          _dsuServerHostBox;
        [GUI] Box          _dsuServerPortBox;
        [GUI] Box          _motionControllerSlot;
        [GUI] Grid         _leftStickKeyboard;
        [GUI] Grid         _leftStickController;
        [GUI] Box          _deadZoneLeftBox;
        [GUI] Grid         _rightStickKeyboard;
        [GUI] Grid         _rightStickController;
        [GUI] Box          _deadZoneRightBox;
        [GUI] Grid         _leftSideTriggerBox;
        [GUI] Grid         _rightSideTriggerBox;
        [GUI] Box          _triggerThresholdBox;
        [GUI] ComboBoxText _controllerType;
        [GUI] ToggleButton _lStick;
        [GUI] CheckButton  _invertLStickX;
        [GUI] CheckButton  _invertLStickY;
        [GUI] ToggleButton _lStickUp;
        [GUI] ToggleButton _lStickDown;
        [GUI] ToggleButton _lStickLeft;
        [GUI] ToggleButton _lStickRight;
        [GUI] ToggleButton _lStickButton;
        [GUI] ToggleButton _dpadUp;
        [GUI] ToggleButton _dpadDown;
        [GUI] ToggleButton _dpadLeft;
        [GUI] ToggleButton _dpadRight;
        [GUI] ToggleButton _minus;
        [GUI] ToggleButton _l;
        [GUI] ToggleButton _zL;
        [GUI] ToggleButton _rStick;
        [GUI] CheckButton  _invertRStickX;
        [GUI] CheckButton  _invertRStickY;
        [GUI] ToggleButton _rStickUp;
        [GUI] ToggleButton _rStickDown;
        [GUI] ToggleButton _rStickLeft;
        [GUI] ToggleButton _rStickRight;
        [GUI] ToggleButton _rStickButton;
        [GUI] ToggleButton _a;
        [GUI] ToggleButton _b;
        [GUI] ToggleButton _x;
        [GUI] ToggleButton _y;
        [GUI] ToggleButton _plus;
        [GUI] ToggleButton _r;
        [GUI] ToggleButton _zR;
        [GUI] ToggleButton _lSl;
        [GUI] ToggleButton _lSr;
        [GUI] ToggleButton _rSl;
        [GUI] ToggleButton _rSr;
        [GUI] Image        _controllerImage;
        [GUI] CheckButton  _enableRumble;
        [GUI] Box          _rumbleBox;
#pragma warning restore CS0649, IDE0044

        private MainWindow _mainWindow;
        private IGamepadDriver _gtk3KeyboardDriver;
        private IGamepad _selectedGamepad;
        private bool _mousePressed;
        private bool _middleMousePressed;

        public ControllerWindow(MainWindow mainWindow, PlayerIndex controllerId) : this(mainWindow, new Builder(""Ryujinx.Ui.Windows.ControllerWindow.glade""), controllerId) { }

        private ControllerWindow(MainWindow mainWindow, Builder builder, PlayerIndex controllerId) : base(builder.GetObject(""_controllerWin"").Handle)
        {
            _mainWindow = mainWindow;
            _selectedGamepad = null;

            // NOTE: To get input in this window, we need to bind a custom keyboard driver instead of using the InputManager one as the main window isn't focused...
            _gtk3KeyboardDriver = new GTK3KeyboardDriver(this);

            Icon = new Gdk.Pixbuf(Assembly.GetExecutingAssembly(), ""Ryujinx.Ui.Resources.Logo_Ryujinx.png"");

            builder.Autoconnect(this);

            _playerIndex = controllerId;
            _inputConfig = ConfigurationState.Instance.Hid.InputConfig.Value.Find(inputConfig => inputConfig.PlayerIndex == _playerIndex);

            Title = $""Ryujinx - Controller Settings - {_playerIndex}"";

            if (_playerIndex == PlayerIndex.Handheld)
            {
                _controllerType.Append(ControllerType.Handheld.ToString(), ""Handheld"");
                _controllerType.Sensitive = false;
            }
            else
            {
                _controllerType.Append(ControllerType.ProController.ToString(), ""Pro Controller"");
                _controllerType.Append(ControllerType.JoyconPair.ToString(), ""Joycon Pair"");
                _controllerType.Append(ControllerType.JoyconLeft.ToString(), ""Joycon Left"");
                _controllerType.Append(ControllerType.JoyconRight.ToString(), ""Joycon Right"");
            }

            _controllerType.Active = 0; // Set initial value to first in list.

            // Bind Events.
            _lStick.Clicked         += ButtonForStick_Pressed;
            _lStickUp.Clicked       += Button_Pressed;
            _lStickDown.Clicked     += Button_Pressed;
            _lStickLeft.Clicked     += Button_Pressed;
            _lStickRight.Clicked    += Button_Pressed;
            _lStickButton.Clicked   += Button_Pressed;
            _dpadUp.Clicked         += Button_Pressed;
            _dpadDown.Clicked       += Button_Pressed;
            _dpadLeft.Clicked       += Button_Pressed;
            _dpadRight.Clicked      += Button_Pressed;
            _minus.Clicked          += Button_Pressed;
            _l.Clicked              += Button_Pressed;
            _zL.Clicked             += Button_Pressed;
            _lSl.Clicked            += Button_Pressed;
            _lSr.Clicked            += Button_Pressed;
            _rStick.Clicked         += ButtonForStick_Pressed;
            _rStickUp.Clicked       += Button_Pressed;
            _rStickDown.Clicked     += Button_Pressed;
            _rStickLeft.Clicked     += Button_Pressed;
            _rStickRight.Clicked    += Button_Pressed;
            _rStickButton.Clicked   += Button_Pressed;
            _a.Clicked              += Button_Pressed;
            _b.Clicked              += Button_Pressed;
            _x.Clicked              += Button_Pressed;
            _y.Clicked              += Button_Pressed;
            _plus.Clicked           += Button_Pressed;
            _r.Clicked              += Button_Pressed;
            _zR.Clicked             += Button_Pressed;
            _rSl.Clicked            += Button_Pressed;
            _rSr.Clicked            += Button_Pressed;
            _enableCemuHook.Clicked += CemuHookCheckButtonPressed;

            // Setup current values.
            UpdateInputDeviceList();
            SetAvailableOptions();

            ClearValues();
            if (_inputDevice.ActiveId != null)
            {
                SetCurrentValues();
            }

            mainWindow.InputManager.GamepadDriver.OnGamepadConnected += HandleOnGamepadConnected;
            mainWindow.InputManager.GamepadDriver.OnGamepadDisconnected += HandleOnGamepadDisconnected;

            if (_mainWindow.RendererWidget != null)
            {
                _mainWindow.RendererWidget.NpadManager.BlockInputUpdates();
            }
        }

        private void CemuHookCheckButtonPressed(object sender, EventArgs e)
        {
            UpdateCemuHookSpecificFieldsVisibility();
        }

        private void HandleOnGamepadDisconnected(string id)
        {
            Application.Invoke(delegate
            {
                UpdateInputDeviceList();
            });
        }

        private void HandleOnGamepadConnected(string id)
        {
            Application.Invoke(delegate
            {
                UpdateInputDeviceList();
            });
        }

        protected override void OnDestroyed()
        {
            _mainWindow.InputManager.GamepadDriver.OnGamepadConnected -= HandleOnGamepadConnected;
            _mainWindow.InputManager.GamepadDriver.OnGamepadDisconnected -= HandleOnGamepadDisconnected;

            if (_mainWindow.RendererWidget != null)
            {
                _mainWindow.RendererWidget.NpadManager.UnblockInputUpdates();
            }

            _selectedGamepad?.Dispose();

            _gtk3KeyboardDriver.Dispose();
        }

        private static string GetShrinkedGamepadName(string str)
        {
            const string ShrinkChars = ""..."";
            const int MaxSize = 50;

            if (str.Length > MaxSize)
            {
                return str.Substring(0, MaxSize - ShrinkChars.Length) + ShrinkChars;
            }

            return str;
        }

        private void UpdateInputDeviceList()
        {
            _inputDevice.RemoveAll();
            _inputDevice.Append(""disabled"", ""Disabled"");
            _inputDevice.SetActiveId(""disabled"");

            foreach (string id in _mainWindow.InputManager.KeyboardDriver.GamepadsIds)
            {
                IGamepad gamepad = _mainWindow.InputManager.KeyboardDriver.GetGamepad(id);

                if (gamepad != null)
                {
                    _inputDevice.Append($""keyboard/{id}"", GetShrinkedGamepadName($""{gamepad.Name} ({id})""));

                    gamepad.Dispose();
                }
            }

            foreach (string id in _mainWindow.InputManager.GamepadDriver.GamepadsIds)
            {
                IGamepad gamepad = _mainWindow.InputManager.GamepadDriver.GetGamepad(id);

                if (gamepad != null)
                {
                    _inputDevice.Append($""controller/{id}"", GetShrinkedGamepadName($""{gamepad.Name} ({id})""));

                    gamepad.Dispose();
                }
            }

            switch (_inputConfig)
            {
                case StandardKeyboardInputConfig keyboard:
                    _inputDevice.SetActiveId($""keyboard/{keyboard.Id}"");
                    break;
                case StandardControllerInputConfig controller:
                    _inputDevice.SetActiveId($""controller/{controller.Id}"");
                    break;
            }
        }

        private void UpdateCemuHookSpecificFieldsVisibility()
        {
            if (_enableCemuHook.Active)
            {
                _dsuServerHostBox.Show();
                _dsuServerPortBox.Show();
                _motionControllerSlot.Show();
                _motionAltBox.Show();
                _mirrorInput.Show();
            }
            else
            {
                _dsuServerHostBox.Hide();
                _dsuServerPortBox.Hide();
                _motionControllerSlot.Hide();
                _motionAltBox.Hide();
                _mirrorInput.Hide();
            }
        }

        private void SetAvailableOptions()
        {
            if (_inputDevice.ActiveId != null && _inputDevice.ActiveId.StartsWith(""keyboard""))
            {
                ShowAll();
                _leftStickController.Hide();
                _rightStickController.Hide();
                _deadZoneLeftBox.Hide();
                _deadZoneRightBox.Hide();
                _triggerThresholdBox.Hide();
                _motionBox.Hide();
                _rumbleBox.Hide();
            }
            else if (_inputDevice.ActiveId != null && _inputDevice.ActiveId.StartsWith(""controller""))
            {
                ShowAll();
                _leftStickKeyboard.Hide();
                _rightStickKeyboard.Hide();

                UpdateCemuHookSpecificFieldsVisibility();
            }
            else
            {
                _settingsBox.Hide();
            }

            ClearValues();
        }

        private void SetCurrentValues()
        {
            SetControllerSpecificFields();

            SetProfiles();

            if (_inputDevice.ActiveId.StartsWith(""keyboard"") && _inputConfig is StandardKeyboardInputConfig)
            {
                SetValues(_inputConfig);
            }
            else if (_inputDevice.ActiveId.StartsWith(""controller"") && _inputConfig is StandardControllerInputConfig)
            {
                SetValues(_inputConfig);
            }
        }

        private void SetControllerSpecificFields()
        {
            _leftSideTriggerBox.Hide();
            _rightSideTriggerBox.Hide();
            _motionAltBox.Hide();

            switch (_controllerType.ActiveId)
            {
                case ""JoyconLeft"":
                    _leftSideTriggerBox.Show();
                    break;
                case ""JoyconRight"":
                    _rightSideTriggerBox.Show();
                    break;
                case ""JoyconPair"":
                    _motionAltBox.Show();
                    break;
            }

            _controllerImage.Pixbuf = _controllerType.ActiveId switch
            {
                ""ProController"" => new Gdk.Pixbuf(Assembly.GetExecutingAssembly(), ""Ryujinx.Ui.Resources.Controller_ProCon.svg"", 400, 400),
                ""JoyconLeft""    => new Gdk.Pixbuf(Assembly.GetExecutingAssembly(), ""Ryujinx.Ui.Resources.Controller_JoyConLeft.svg"", 400, 500),
                ""JoyconRight""   => new Gdk.Pixbuf(Assembly.GetExecutingAssembly(), ""Ryujinx.Ui.Resources.Controller_JoyConRight.svg"", 400, 500),
                _               => new Gdk.Pixbuf(Assembly.GetExecutingAssembly(), ""Ryujinx.Ui.Resources.Controller_JoyConPair.svg"", 400, 500),
            };
        }

        private void ClearValues()
        {
            _lStick.Label                     = ""Unbound"";
            _lStickUp.Label                   = ""Unbound"";
            _lStickDown.Label                 = ""Unbound"";
            _lStickLeft.Label                 = ""Unbound"";
            _lStickRight.Label                = ""Unbound"";
            _lStickButton.Label               = ""Unbound"";
            _dpadUp.Label                     = ""Unbound"";
            _dpadDown.Label                   = ""Unbound"";
            _dpadLeft.Label                   = ""Unbound"";
            _dpadRight.Label                  = ""Unbound"";
            _minus.Label                      = ""Unbound"";
            _l.Label                          = ""Unbound"";
            _zL.Label                         = ""Unbound"";
            _lSl.Label                        = ""Unbound"";
            _lSr.Label                        = ""Unbound"";
            _rStick.Label                     = ""Unbound"";
            _rStickUp.Label                   = ""Unbound"";
            _rStickDown.Label                 = ""Unbound"";
            _rStickLeft.Label                 = ""Unbound"";
            _rStickRight.Label                = ""Unbound"";
            _rStickButton.Label               = ""Unbound"";
            _a.Label                          = ""Unbound"";
            _b.Label                          = ""Unbound"";
            _x.Label                          = ""Unbound"";
            _y.Label                          = ""Unbound"";
            _plus.Label                       = ""Unbound"";
            _r.Label                          = ""Unbound"";
            _zR.Label                         = ""Unbound"";
            _rSl.Label                        = ""Unbound"";
            _rSr.Label                        = ""Unbound"";
            _controllerStrongRumble.Value     = 1;
            _controllerWeakRumble.Value       = 1;
            _controllerDeadzoneLeft.Value     = 0;
            _controllerDeadzoneRight.Value    = 0;
            _controllerTriggerThreshold.Value = 0;
            _mirrorInput.Active               = false;
            _enableMotion.Active              = false;
            _enableCemuHook.Active            = false;
            _slotNumber.Value                 = 0;
            _altSlotNumber.Value              = 0;
            _sensitivity.Value                = 100;
            _gyroDeadzone.Value               = 1;
            _dsuServerHost.Buffer.Text        = """";
            _dsuServerPort.Buffer.Text        = """";
            _enableRumble.Active              = false;
        }

        private void SetValues(InputConfig config)
        {
            switch (config)
            {
                case StandardKeyboardInputConfig keyboardConfig:
                    if (!_controllerType.SetActiveId(keyboardConfig.ControllerType.ToString()))
                    {
                        _controllerType.SetActiveId(_playerIndex == PlayerIndex.Handheld
                            ? ControllerType.Handheld.ToString()
                            : ControllerType.ProController.ToString());
                    }

                    _lStickUp.Label            = keyboardConfig.LeftJoyconStick.StickUp.ToString();
                    _lStickDown.Label          = keyboardConfig.LeftJoyconStick.StickDown.ToString();
                    _lStickLeft.Label          = keyboardConfig.LeftJoyconStick.StickLeft.ToString();
                    _lStickRight.Label         = keyboardConfig.LeftJoyconStick.StickRight.ToString();
                    _lStickButton.Label        = keyboardConfig.LeftJoyconStick.StickButton.ToString();
                    _dpadUp.Label              = keyboardConfig.LeftJoycon.DpadUp.ToString();
                    _dpadDown.Label            = keyboardConfig.LeftJoycon.DpadDown.ToString();
                    _dpadLeft.Label            = keyboardConfig.LeftJoycon.DpadLeft.ToString();
                    _dpadRight.Label           = keyboardConfig.LeftJoycon.DpadRight.ToString();
                    _minus.Label               = keyboardConfig.LeftJoycon.ButtonMinus.ToString();
                    _l.Label                   = keyboardConfig.LeftJoycon.ButtonL.ToString();
                    _zL.Label                  = keyboardConfig.LeftJoycon.ButtonZl.ToString();
                    _lSl.Label                 = keyboardConfig.LeftJoycon.ButtonSl.ToString();
                    _lSr.Label                 = keyboardConfig.LeftJoycon.ButtonSr.ToString();
                    _rStickUp.Label            = keyboardConfig.RightJoyconStick.StickUp.ToString();
                    _rStickDown.Label          = keyboardConfig.RightJoyconStick.StickDown.ToString();
                    _rStickLeft.Label          = keyboardConfig.RightJoyconStick.StickLeft.ToString();
                    _rStickRight.Label         = keyboardConfig.RightJoyconStick.StickRight.ToString();
                    _rStickButton.Label        = keyboardConfig.RightJoyconStick.StickButton.ToString();
                    _a.Label                   = keyboardConfig.RightJoycon.ButtonA.ToString();
                    _b.Label                   = keyboardConfig.RightJoycon.ButtonB.ToString();
                    _x.Label                   = keyboardConfig.RightJoycon.ButtonX.ToString();
                    _y.Label                   = keyboardConfig.RightJoycon.ButtonY.ToString();
                    _plus.Label                = keyboardConfig.RightJoycon.ButtonPlus.ToString();
                    _r.Label                   = keyboardConfig.RightJoycon.ButtonR.ToString();
                    _zR.Label                  = keyboardConfig.RightJoycon.ButtonZr.ToString();
                    _rSl.Label                 = keyboardConfig.RightJoycon.ButtonSl.ToString();
                    _rSr.Label                 = keyboardConfig.RightJoycon.ButtonSr.ToString();
                    break;

                case StandardControllerInputConfig controllerConfig:
                    if (!_controllerType.SetActiveId(controllerConfig.ControllerType.ToString()))
                    {
                        _controllerType.SetActiveId(_playerIndex == PlayerIndex.Handheld
                            ? ControllerType.Handheld.ToString()
                            : ControllerType.ProController.ToString());
                    }

                    _lStick.Label                     = controllerConfig.LeftJoyconStick.Joystick.ToString();
                    _invertLStickX.Active             = controllerConfig.LeftJoyconStick.InvertStickX;
                    _invertLStickY.Active             = controllerConfig.LeftJoyconStick.InvertStickY;
                    _lStickButton.Label               = controllerConfig.LeftJoyconStick.StickButton.ToString();
                    _dpadUp.Label                     = controllerConfig.LeftJoycon.DpadUp.ToString();
                    _dpadDown.Label                   = controllerConfig.LeftJoycon.DpadDown.ToString();
                    _dpadLeft.Label                   = controllerConfig.LeftJoycon.DpadLeft.ToString();
                    _dpadRight.Label                  = controllerConfig.LeftJoycon.DpadRight.ToString();
                    _minus.Label                      = controllerConfig.LeftJoycon.ButtonMinus.ToString();
                    _l.Label                          = controllerConfig.LeftJoycon.ButtonL.ToString();
                    _zL.Label                         = controllerConfig.LeftJoycon.ButtonZl.ToString();
                    _lSl.Label                        = controllerConfig.LeftJoycon.ButtonSl.ToString();
                    _lSr.Label                        = controllerConfig.LeftJoycon.ButtonSr.ToString();
                    _rStick.Label                     = controllerConfig.RightJoyconStick.Joystick.ToString();
                    _invertRStickX.Active             = controllerConfig.RightJoyconStick.InvertStickX;
                    _invertRStickY.Active             = controllerConfig.RightJoyconStick.InvertStickY;
                    _rStickButton.Label               = controllerConfig.RightJoyconStick.StickButton.ToString();
                    _a.Label                          = controllerConfig.RightJoycon.ButtonA.ToString();
                    _b.Label                          = controllerConfig.RightJoycon.ButtonB.ToString();
                    _x.Label                          = controllerConfig.RightJoycon.ButtonX.ToString();
                    _y.Label                          = controllerConfig.RightJoycon.ButtonY.ToString();
                    _plus.Label                       = controllerConfig.RightJoycon.ButtonPlus.ToString();
                    _r.Label                          = controllerConfig.RightJoycon.ButtonR.ToString();
                    _zR.Label                         = controllerConfig.RightJoycon.ButtonZr.ToString();
                    _rSl.Label                        = controllerConfig.RightJoycon.ButtonSl.ToString();
                    _rSr.Label                        = controllerConfig.RightJoycon.ButtonSr.ToString();
                    _controllerStrongRumble.Value     = controllerConfig.Rumble.StrongRumble;
                    _controllerWeakRumble.Value       = controllerConfig.Rumble.WeakRumble;
                    _enableRumble.Active              = controllerConfig.Rumble.EnableRumble;
                    _controllerDeadzoneLeft.Value     = controllerConfig.DeadzoneLeft;
                    _controllerDeadzoneRight.Value    = controllerConfig.DeadzoneRight;
                    _controllerTriggerThreshold.Value = controllerConfig.TriggerThreshold;
                    _sensitivity.Value                = controllerConfig.Motion.Sensitivity;
                    _gyroDeadzone.Value               = controllerConfig.Motion.GyroDeadzone;
                    _enableMotion.Active              = controllerConfig.Motion.EnableMotion;
                    _enableCemuHook.Active            = controllerConfig.Motion.MotionBackend == MotionInputBackendType.CemuHook;

                    if (controllerConfig.Motion is CemuHookMotionConfigController cemuHookMotionConfig)
                    {
                        _slotNumber.Value             = cemuHookMotionConfig.Slot;
                        _altSlotNumber.Value          = cemuHookMotionConfig.AltSlot;
                        _mirrorInput.Active           = cemuHookMotionConfig.MirrorInput;
                        _dsuServerHost.Buffer.Text    = cemuHookMotionConfig.DsuServerHost;
                        _dsuServerPort.Buffer.Text    = cemuHookMotionConfig.DsuServerPort.ToString();
                    }

                    break;
            }
        }

        private InputConfig GetValues()
        {
            if (_inputDevice.ActiveId.StartsWith(""keyboard""))
            {
                Enum.TryParse(_lStickUp.Label,     out Key lStickUp);
                Enum.TryParse(_lStickDown.Label,   out Key lStickDown);
                Enum.TryParse(_lStickLeft.Label,   out Key lStickLeft);
                Enum.TryParse(_lStickRight.Label,  out Key lStickRight);
                Enum.TryParse(_lStickButton.Label, out Key lStickButton);
                Enum.TryParse(_dpadUp.Label,       out Key lDPadUp);
                Enum.TryParse(_dpadDown.Label,     out Key lDPadDown);
                Enum.TryParse(_dpadLeft.Label,     out Key lDPadLeft);
                Enum.TryParse(_dpadRight.Label,    out Key lDPadRight);
                Enum.TryParse(_minus.Label,        out Key lButtonMinus);
                Enum.TryParse(_l.Label,            out Key lButtonL);
                Enum.TryParse(_zL.Label,           out Key lButtonZl);
                Enum.TryParse(_lSl.Label,          out Key lButtonSl);
                Enum.TryParse(_lSr.Label,          out Key lButtonSr);

                Enum.TryParse(_rStickUp.Label,     out Key rStickUp);
                Enum.TryParse(_rStickDown.Label,   out Key rStickDown);
                Enum.TryParse(_rStickLeft.Label,   out Key rStickLeft);
                Enum.TryParse(_rStickRight.Label,  out Key rStickRight);
                Enum.TryParse(_rStickButton.Label, out Key rStickButton);
                Enum.TryParse(_a.Label,            out Key rButtonA);
                Enum.TryParse(_b.Label,            out Key rButtonB);
                Enum.TryParse(_x.Label,            out Key rButtonX);
                Enum.TryParse(_y.Label,            out Key rButtonY);
                Enum.TryParse(_plus.Label,         out Key rButtonPlus);
                Enum.TryParse(_r.Label,            out Key rButtonR);
                Enum.TryParse(_zR.Label,           out Key rButtonZr);
                Enum.TryParse(_rSl.Label,          out Key rButtonSl);
                Enum.TryParse(_rSr.Label,          out Key rButtonSr);

                return new StandardKeyboardInputConfig
                {
                    Backend          = InputBackendType.WindowKeyboard,
                    Version          = InputConfig.CurrentVersion,
                    Id               = _inputDevice.ActiveId.Split(""/"")[1],
                    ControllerType   = Enum.Parse<ControllerType>(_controllerType.ActiveId),
                    PlayerIndex      = _playerIndex,
                    LeftJoycon       = new LeftJoyconCommonConfig<Key>
                    {
                        ButtonMinus  = lButtonMinus,
                        ButtonL      = lButtonL,
                        ButtonZl     = lButtonZl,
                        ButtonSl     = lButtonSl,
                        ButtonSr     = lButtonSr,
                        DpadUp       = lDPadUp,
                        DpadDown     = lDPadDown,
                        DpadLeft     = lDPadLeft,
                        DpadRight    = lDPadRight
                    },
                    LeftJoyconStick = new JoyconConfigKeyboardStick<Key>
                    {
                        StickUp      = lStickUp,
                        StickDown    = lStickDown,
                        StickLeft    = lStickLeft,
                        StickRight   = lStickRight,
                        StickButton  = lStickButton,
                    },
                    RightJoycon      = new RightJoyconCommonConfig<Key>
                    {
                        ButtonA      = rButtonA,
                        ButtonB      = rButtonB,
                        ButtonX      = rButtonX,
                        ButtonY      = rButtonY,
                        ButtonPlus   = rButtonPlus,
                        ButtonR      = rButtonR,
                        ButtonZr     = rButtonZr,
                        ButtonSl     = rButtonSl,
                        ButtonSr     = rButtonSr
                    },
                    RightJoyconStick = new JoyconConfigKeyboardStick<Key>
                    {
                        StickUp      = rStickUp,
                        StickDown    = rStickDown,
                        StickLeft    = rStickLeft,
                        StickRight   = rStickRight,
                        StickButton  = rStickButton,
                    },
                };
            }
            
            if (_inputDevice.ActiveId.StartsWith(""controller""))
            {
                Enum.TryParse(_lStick.Label,      out ConfigStickInputId lStick);
                Enum.TryParse(_lStickButton.Label, out ConfigGamepadInputId lStickButton);
                Enum.TryParse(_minus.Label,        out ConfigGamepadInputId lButtonMinus);
                Enum.TryParse(_l.Label,            out ConfigGamepadInputId lButtonL);
                Enum.TryParse(_zL.Label,           out ConfigGamepadInputId lButtonZl);
                Enum.TryParse(_lSl.Label,          out ConfigGamepadInputId lButtonSl);
                Enum.TryParse(_lSr.Label,          out ConfigGamepadInputId lButtonSr);
                Enum.TryParse(_dpadUp.Label,       out ConfigGamepadInputId lDPadUp);
                Enum.TryParse(_dpadDown.Label,     out ConfigGamepadInputId lDPadDown);
                Enum.TryParse(_dpadLeft.Label,     out ConfigGamepadInputId lDPadLeft);
                Enum.TryParse(_dpadRight.Label,    out ConfigGamepadInputId lDPadRight);

                Enum.TryParse(_rStick.Label,      out ConfigStickInputId rStick);
                Enum.TryParse(_rStickButton.Label, out ConfigGamepadInputId rStickButton);
                Enum.TryParse(_a.Label,            out ConfigGamepadInputId rButtonA);
                Enum.TryParse(_b.Label,            out ConfigGamepadInputId rButtonB);
                Enum.TryParse(_x.Label,            out ConfigGamepadInputId rButtonX);
                Enum.TryParse(_y.Label,            out ConfigGamepadInputId rButtonY);
                Enum.TryParse(_plus.Label,         out ConfigGamepadInputId rButtonPlus);
                Enum.TryParse(_r.Label,            out ConfigGamepadInputId rButtonR);
                Enum.TryParse(_zR.Label,           out ConfigGamepadInputId rButtonZr);
                Enum.TryParse(_rSl.Label,          out ConfigGamepadInputId rButtonSl);
                Enum.TryParse(_rSr.Label,          out ConfigGamepadInputId rButtonSr);

                int.TryParse(_dsuServerPort.Buffer.Text, out int port);

                MotionConfigController motionConfig;

                if (_enableCemuHook.Active)
                {
                    motionConfig      = new CemuHookMotionConfigController
                    {
                        MotionBackend = MotionInputBackendType.CemuHook,
                        EnableMotion  = _enableMotion.Active,
                        Sensitivity   = (int)_sensitivity.Value,
                        GyroDeadzone  = _gyroDeadzone.Value,
                        MirrorInput   = _mirrorInput.Active,
                        Slot          = (int)_slotNumber.Value,
                        AltSlot       = (int)_altSlotNumber.Value,
                        DsuServerHost = _dsuServerHost.Buffer.Text,
                        DsuServerPort = port
                    };
                }
                else
                {
                    motionConfig      = new StandardMotionConfigController
                    {
                        MotionBackend = MotionInputBackendType.GamepadDriver,
                        EnableMotion  = _enableMotion.Active,
                        Sensitivity   = (int)_sensitivity.Value,
                        GyroDeadzone  = _gyroDeadzone.Value,
                    };
                }

                return new StandardControllerInputConfig
                {
                    Backend          = InputBackendType.GamepadSDL2,
                    Version          = InputConfig.CurrentVersion,
                    Id               = _inputDevice.ActiveId.Split(""/"")[1].Split("" "")[0],
                    ControllerType   = Enum.Parse<ControllerType>(_controllerType.ActiveId),
                    PlayerIndex      = _playerIndex,
                    DeadzoneLeft     = (float)_controllerDeadzoneLeft.Value,
                    DeadzoneRight    = (float)_controllerDeadzoneRight.Value,
                    TriggerThreshold = (float)_controllerTriggerThreshold.Value,
                    LeftJoycon       = new LeftJoyconCommonConfig<ConfigGamepadInputId>
                    {
                        ButtonMinus  = lButtonMinus,
                        ButtonL      = lButtonL,
                        ButtonZl     = lButtonZl,
                        ButtonSl     = lButtonSl,
                        ButtonSr     = lButtonSr,
                        DpadUp       = lDPadUp,
                        DpadDown     = lDPadDown,
                        DpadLeft     = lDPadLeft,
                        DpadRight    = lDPadRight
                    },
                    LeftJoyconStick = new JoyconConfigControllerStick<ConfigGamepadInputId, ConfigStickInputId>
                    {
                        InvertStickX = _invertLStickX.Active,
                        Joystick     = lStick,
                        InvertStickY = _invertLStickY.Active,
                        StickButton  = lStickButton,
                    },
                    RightJoycon      = new RightJoyconCommonConfig<ConfigGamepadInputId>
                    {
                        ButtonA      = rButtonA,
                        ButtonB      = rButtonB,
                        ButtonX      = rButtonX,
                        ButtonY      = rButtonY,
                        ButtonPlus   = rButtonPlus,
                        ButtonR      = rButtonR,
                        ButtonZr     = rButtonZr,
                        ButtonSl     = rButtonSl,
                        ButtonSr     = rButtonSr
                    },
                    RightJoyconStick = new JoyconConfigControllerStick<ConfigGamepadInputId, ConfigStickInputId>
                    {
                        InvertStickX = _invertRStickX.Active,
                        Joystick     = rStick,
                        InvertStickY = _invertRStickY.Active,
                        StickButton  = rStickButton,
                    },
                    Motion           = motionConfig,
                    Rumble           = new RumbleConfigController
                    {
                        StrongRumble = (float)_controllerStrongRumble.Value,
                        WeakRumble   = (float)_controllerWeakRumble.Value,
                        EnableRumble = _enableRumble.Active
                    }
                };
            }

            if (!_inputDevice.ActiveId.StartsWith(""disabled""))
            {
                GtkDialog.CreateErrorDialog(""Invalid data detected in one or more fields; the configuration was not saved."");
            }

            return null;
        }

        private string GetProfileBasePath()
        {
            if (_inputDevice.ActiveId.StartsWith(""keyboard""))
            {
                return System.IO.Path.Combine(AppDataManager.ProfilesDirPath, ""keyboard"");
            }
            else if (_inputDevice.ActiveId.StartsWith(""controller""))
            {
                return System.IO.Path.Combine(AppDataManager.ProfilesDirPath, ""controller"");
            }

            return AppDataManager.ProfilesDirPath;
        }

        //
        // Events
        //
        private void InputDevice_Changed(object sender, EventArgs args)
        {
            SetAvailableOptions();
            SetControllerSpecificFields();

            _selectedGamepad?.Dispose();
            _selectedGamepad = null;

            if (_inputDevice.ActiveId != null)
            {
                SetProfiles();

                string id = GetCurrentGamepadId();

                if (_inputDevice.ActiveId.StartsWith(""keyboard""))
                {
                    if (_inputConfig is StandardKeyboardInputConfig)
                    {
                        SetValues(_inputConfig);
                    }

                    if (_mainWindow.InputManager.KeyboardDriver is GTK3KeyboardDriver)
                    {
                        // NOTE: To get input in this window, we need to bind a custom keyboard driver instead of using the InputManager one as the main window isn't focused...
                        _selectedGamepad = _gtk3KeyboardDriver.GetGamepad(id);
                    }
                    else
                    {
                        _selectedGamepad = _mainWindow.InputManager.KeyboardDriver.GetGamepad(id);
                    }
                }
                else if (_inputDevice.ActiveId.StartsWith(""controller""))
                {
                    if (_inputConfig is StandardControllerInputConfig)
                    {
                        SetValues(_inputConfig);
                    }

                    _selectedGamepad = _mainWindow.InputManager.GamepadDriver.GetGamepad(id);
                }
            }
        }

        private string GetCurrentGamepadId()
        {
            if (_inputDevice.ActiveId == null || _inputDevice.ActiveId == ""disabled"")
            {
                return null;
            }

            return _inputDevice.ActiveId.Split(""/"")[1].Split("" "")[0];
        }

        private void Controller_Changed(object sender, EventArgs args)
        {
            SetControllerSpecificFields();
        }

        private IButtonAssigner CreateButtonAssigner(bool forStick)
        {
            IButtonAssigner assigner;

            if (_inputDevice.ActiveId.StartsWith(""keyboard""))
            {
                assigner = new KeyboardKeyAssigner((IKeyboard)_selectedGamepad);
            }
            else if (_inputDevice.ActiveId.StartsWith(""controller""))
            {
                assigner = new GamepadButtonAssigner(_selectedGamepad, (float)_controllerTriggerThreshold.Value, forStick);
            }
            else
            {
                throw new Exception(""Controller not supported"");
            }
            
            return assigner;
        }

        private void HandleButtonPressed(ToggleButton button, bool forStick)
        {
            if (_isWaitingForInput)
            {
                button.Active = false;

                return;
            }

            _mousePressed = false;

            ButtonPressEvent += MouseClick;

            IButtonAssigner assigner = CreateButtonAssigner(forStick);

            _isWaitingForInput = true;

            // Open GTK3 keyboard for cancel operations
            IKeyboard keyboard = (IKeyboard)_gtk3KeyboardDriver.GetGamepad(""0"");

            Thread inputThread = new Thread(() =>
            {
                assigner.Initialize();

                while (true)
                {
                    Thread.Sleep(10);
                    assigner.ReadInput();

                    if (_mousePressed || keyboard.IsPressed(Ryujinx.Input.Key.Escape) || assigner.HasAnyButtonPressed() || assigner.ShouldCancel())
                    {
                        break;
                    }
                }

                string pressedButton = assigner.GetPressedButton();

                Application.Invoke(delegate
                {
                    if (_middleMousePressed)
                    {
                        button.Label = ""Unbound"";
                    }
                    else if (pressedButton != """")
                    {
                        button.Label = pressedButton;
                    }

                    _middleMousePressed = false;

                    ButtonPressEvent -= MouseClick;
                    keyboard.Dispose();

                    button.Active = false;
                    _isWaitingForInput = false;
                });
            });

            inputThread.Name = ""GUI.InputThread"";
            inputThread.IsBackground = true;
            inputThread.Start();
        }

        private void Button_Pressed(object sender, EventArgs args)
        {
            HandleButtonPressed((ToggleButton)sender, false);
        }

        private void ButtonForStick_Pressed(object sender, EventArgs args)
        {
            HandleButtonPressed((ToggleButton)sender, true);
        }

        private void MouseClick(object sender, ButtonPressEventArgs args)
        {
            _mousePressed = true;
            _middleMousePressed = args.Event.Button == 2;
        }

        private void SetProfiles()
        {
            _profile.RemoveAll();

            string basePath = GetProfileBasePath();

            if (!Directory.Exists(basePath))
            {
                Directory.CreateDirectory(basePath);
            }

            if (_inputDevice.ActiveId == null|| _inputDevice.ActiveId.Equals(""disabled""))
            {
                _profile.Append(""default"", ""None"");
            }
            else
            {
                _profile.Append(""default"", ""Default"");

                foreach (string profile in Directory.GetFiles(basePath, ""*.*"", SearchOption.AllDirectories))
                {
                    _profile.Append(System.IO.Path.GetFileName(profile), System.IO.Path.GetFileNameWithoutExtension(profile));
                }
            }

            _profile.SetActiveId(""default"");
        }

        private void ProfileLoad_Activated(object sender, EventArgs args)
        {
            ((ToggleButton)sender).SetStateFlags(StateFlags.Normal, true);

            if (_inputDevice.ActiveId == ""disabled"" || _profile.ActiveId == null) return;

            InputConfig config = null;
            int         pos    = _profile.Active;

            if (_profile.ActiveId == ""default"")
            {
                if (_inputDevice.ActiveId.StartsWith(""keyboard""))
                {
                    config = new StandardKeyboardInputConfig
                    {
                        Version          = InputConfig.CurrentVersion,
                        Backend          = InputBackendType.WindowKeyboard,
                        Id               = null,
                        ControllerType   = ControllerType.ProController,
                        LeftJoycon       = new LeftJoyconCommonConfig<Key>
                        {
                            DpadUp       = Key.Up,
                            DpadDown     = Key.Down,
                            DpadLeft     = Key.Left,
                            DpadRight    = Key.Right,
                            ButtonMinus  = Key.Minus,
                            ButtonL      = Key.E,
                            ButtonZl     = Key.Q,
                            ButtonSl     = Key.Unbound,
                            ButtonSr     = Key.Unbound
                        },

                        LeftJoyconStick  = new JoyconConfigKeyboardStick<Key>
                        {
                            StickUp      = Key.W,
                            StickDown    = Key.S,
                            StickLeft    = Key.A,
                            StickRight   = Key.D,
                            StickButton  = Key.F,
                        },

                        RightJoycon      = new RightJoyconCommonConfig<Key>
                        {
                            ButtonA      = Key.Z,
                            ButtonB      = Key.X,
                            ButtonX      = Key.C,
                            ButtonY      = Key.V,
                            ButtonPlus   = Key.Plus,
                            ButtonR      = Key.U,
                            ButtonZr     = Key.O,
                            ButtonSl     = Key.Unbound,
                            ButtonSr     = Key.Unbound
                        },

                        RightJoyconStick = new JoyconConfigKeyboardStick<Key>
                        {
                            StickUp      = Key.I,
                            StickDown    = Key.K,
                            StickLeft    = Key.J,
                            StickRight   = Key.L,
                            StickButton  = Key.H,
                        }
                    };
                }
                else if (_inputDevice.ActiveId.StartsWith(""controller""))
                {
                    bool isNintendoStyle = _inputDevice.ActiveText.Contains(""Nintendo"");

                    config = new StandardControllerInputConfig
                    {
                        Version          = InputConfig.CurrentVersion,
                        Backend          = InputBackendType.GamepadSDL2,
                        Id               = null,
                        ControllerType   = ControllerType.JoyconPair,
                        DeadzoneLeft     = 0.1f,
                        DeadzoneRight    = 0.1f,
                        TriggerThreshold = 0.5f,
                        LeftJoycon = new LeftJoyconCommonConfig<ConfigGamepadInputId>
                        {
                            DpadUp       = ConfigGamepadInputId.DpadUp,
                            DpadDown     = ConfigGamepadInputId.DpadDown,
                            DpadLeft     = ConfigGamepadInputId.DpadLeft,
                            DpadRight    = ConfigGamepadInputId.DpadRight,
                            ButtonMinus  = ConfigGamepadInputId.Minus,
                            ButtonL      = ConfigGamepadInputId.LeftShoulder,
                            ButtonZl     = ConfigGamepadInputId.LeftTrigger,
                            ButtonSl     = ConfigGamepadInputId.Unbound,
                            ButtonSr     = ConfigGamepadInputId.Unbound,
                        },

                        LeftJoyconStick = new JoyconConfigControllerStick<ConfigGamepadInputId, ConfigStickInputId>
                        {
                            Joystick     = ConfigStickInputId.Left,
                            StickButton  = ConfigGamepadInputId.LeftStick,
                            InvertStickX = false,
                            InvertStickY = false,
                        },

                        RightJoycon = new RightJoyconCommonConfig<ConfigGamepadInputId>
                        {
                            ButtonA      = isNintendoStyle ? ConfigGamepadInputId.A : ConfigGamepadInputId.B,
                            ButtonB      = isNintendoStyle ? ConfigGamepadInputId.B : ConfigGamepadInputId.A,
                            ButtonX      = isNintendoStyle ? ConfigGamepadInputId.X : ConfigGamepadInputId.Y,
                            ButtonY      = isNintendoStyle ? ConfigGamepadInputId.Y : ConfigGamepadInputId.X,
                            ButtonPlus   = ConfigGamepadInputId.Plus,
                            ButtonR      = ConfigGamepadInputId.RightShoulder,
                            ButtonZr     = ConfigGamepadInputId.RightTrigger,
                            ButtonSl     = ConfigGamepadInputId.Unbound,
                            ButtonSr     = ConfigGamepadInputId.Unbound,
                        },

                        RightJoyconStick = new JoyconConfigControllerStick<ConfigGamepadInputId, ConfigStickInputId>
                        {
                            Joystick     = ConfigStickInputId.Right,
                            StickButton  = ConfigGamepadInputId.RightStick,
                            InvertStickX = false,
                            InvertStickY = false,
                        },

                        Motion = new StandardMotionConfigController
                        {
                            MotionBackend = MotionInputBackendType.GamepadDriver,
                            EnableMotion = true,
                            Sensitivity  = 100,
                            GyroDeadzone = 1,
                        },
                        Rumble = new RumbleConfigController
                        {
                            StrongRumble = 1f,
                            WeakRumble   = 1f,
                            EnableRumble = false
                        }
                    };
                }
            }
            else
            {
                string path = System.IO.Path.Combine(GetProfileBasePath(), _profile.ActiveId);

                if (!File.Exists(path))
                {
                    if (pos >= 0)
                    {
                        _profile.Remove(pos);
                    }

                    return;
                }

                try
                {
                    using (Stream stream = File.OpenRead(path))
                    {
                        config = JsonHelper.Deserialize<InputConfig>(stream);
                    }
                }
                catch (JsonException) { }
            }

            SetValues(config);
        }

        private void ProfileAdd_Activated(object sender, EventArgs args)
        {
            ((ToggleButton)sender).SetStateFlags(StateFlags.Normal, true);

            if (_inputDevice.ActiveId == ""disabled"") return;

            InputConfig   inputConfig   = GetValues();
            ProfileDialog profileDialog = new ProfileDialog();

            if (inputConfig == null) return;

            if (profileDialog.Run() == (int)ResponseType.Ok)
            {
                string path = System.IO.Path.Combine(GetProfileBasePath(), profileDialog.FileName);
                string jsonString;

                jsonString = JsonHelper.Serialize(inputConfig, true);

                File.WriteAllText(path, jsonString);
            }

            profileDialog.Dispose();

            SetProfiles();
        }

        private void ProfileRemove_Activated(object sender, EventArgs args)
        {
            ((ToggleButton) sender).SetStateFlags(StateFlags.Normal, true);

            if (_inputDevice.ActiveId == ""disabled"" || _profile.ActiveId == ""default"" || _profile.ActiveId == null) return;

            MessageDialog confirmDialog = GtkDialog.CreateConfirmationDialog(""Deleting Profile"", ""This action is irreversible, are you sure you want to continue?"");

            if (confirmDialog.Run() == (int)ResponseType.Yes)
            {
                string path = System.IO.Path.Combine(GetProfileBasePath(), _profile.ActiveId);

                if (File.Exists(path))
                {
                    File.Delete(path);
                }

                SetProfiles();
            }
        }

        private void SaveToggle_Activated(object sender, EventArgs args)
        {
            InputConfig inputConfig = GetValues();

            var newConfig = new List<InputConfig>();
            newConfig.AddRange(ConfigurationState.Instance.Hid.InputConfig.Value);

            if (_inputConfig == null && inputConfig != null)
            {
                newConfig.Add(inputConfig);
            }
            else
            {
                if (_inputDevice.ActiveId == ""disabled"")
                {
                    newConfig.Remove(_inputConfig);
                }
                else if (inputConfig != null)
                {
                    int index = newConfig.IndexOf(_inputConfig);

                    newConfig[index] = inputConfig;
                }
            }

            if (_mainWindow.RendererWidget != null)
            {
                _mainWindow.RendererWidget.NpadManager.ReloadConfiguration(newConfig, ConfigurationState.Instance.Hid.EnableKeyboard, ConfigurationState.Instance.Hid.EnableMouse);
            }

            // Atomically replace and signal input change.
            // NOTE: Do not modify InputConfig.Value directly as other code depends on the on-change event.
            ConfigurationState.Instance.Hid.InputConfig.Value = newConfig;

            ConfigurationState.Instance.ToFileFormat().SaveConfig(Program.ConfigurationPath);

            Dispose();
        }

        private void CloseToggle_Activated(object sender, EventArgs args)
        {
            Dispose();
        }
    }",1,777 587 2000 58 2001 123 773 780 2002 2003 59 773 780 2004 2005 59 773 569 2006 59 35 769 2007 2008 2009 44 2010 91 2011 93 2012 2013 59 91 2011 93 2012 2014 59 91 2011 93 2012 2015 59 91 2011 93 2012 2016 59 91 2011 93 2012 2017 59 91 2011 93 2012 2018 59 91 2011 93 2012 2019 59 91 2011 93 2012 2020 59 91 2011 93 2012 2021 59 91 2011 93 2022 2023 59 91 2011 93 2022 2024 59 91 2011 93 2022 2025 59 91 2011 93 2026 2027 59 91 2011 93 2026 2028 59 91 2011 93 2029 2030 59 91 2011 93 2029 2031 59 91 2011 93 2032 2033 59 91 2011 93 2032 2034 59 91 2011 93 2032 2035 59 91 2011 93 2032 2036 59 91 2011 93 2032 2037 59 91 2011 93 2032 2038 59 91 2011 93 2039 2040 59 91 2011 93 2039 2041 59 91 2011 93 2032 2042 59 91 2011 93 2039 2043 59 91 2011 93 2039 2044 59 91 2011 93 2032 2045 59 91 2011 93 2039 2046 59 91 2011 93 2039 2047 59 91 2011 93 2032 2048 59 91 2011 93 2029 2049 59 91 2011 93 2050 2051 59 91 2011 93 2022 2052 59 91 2011 93 2022 2053 59 91 2011 93 2050 2054 59 91 2011 93 2050 2055 59 91 2011 93 2050 2056 59 91 2011 93 2050 2057 59 91 2011 93 2050 2058 59 91 2011 93 2050 2059 59 91 2011 93 2050 2060 59 91 2011 93 2050 2061 59 91 2011 93 2050 2062 59 91 2011 93 2050 2063 59 91 2011 93 2050 2064 59 91 2011 93 2050 2065 59 91 2011 93 2050 2066 59 91 2011 93 2022 2067 59 91 2011 93 2022 2068 59 91 2011 93 2050 2069 59 91 2011 93 2050 2070 59 91 2011 93 2050 2071 59 91 2011 93 2050 2072 59 91 2011 93 2050 2073 59 91 2011 93 2050 2074 59 91 2011 93 2050 2075 59 91 2011 93 2050 2076 59 91 2011 93 2050 2077 59 91 2011 93 2050 2078 59 91 2011 93 2050 2079 59 91 2011 93 2050 2080 59 91 2011 93 2050 2081 59 91 2011 93 2050 2082 59 91 2011 93 2050 2083 59 91 2011 93 2050 2084 59 91 2011 93 2085 2086 59 91 2011 93 2022 2087 59 91 2011 93 2032 2088 59 35 769 2007 2089 2009 44 2010 773 2090 2091 59 773 2092 2093 59 773 2094 2095 59 773 569 2096 59 773 569 2097 59 777 2000 40 2090 2098 44 2002 2099 41 58 823 40 2098 44 744 2100 40 362 41 44 2099 41 123 125 773 2000 40 2090 2098 44 2100 2101 44 2002 2099 41 58 563 40 2101 46 2102 40 362 41 46 2103 41 123 2091 61 2098 59 2095 61 752 59 330 2093 61 744 2104 40 823 41 59 2105 61 744 2106 46 2107 40 2108 46 2109 40 41 44 362 41 59 2101 46 2110 40 823 41 59 2003 61 2099 59 2005 61 2111 46 2112 46 2113 46 2004 46 2114 46 2115 40 2116 328 2116 46 2002 323 2003 41 59 2117 61 36 362 59 688 40 2003 323 2002 46 2118 41 123 2049 46 2119 40 2120 46 2118 46 2121 40 41 44 362 41 59 2049 46 2122 61 655 59 125 630 123 2049 46 2123 40 2124 46 2125 46 2126 40 41 44 362 41 59 2049 46 2123 40 2124 46 2127 46 2126 40 41 44 362 41 59 2049 46 2123 40 2124 46 2128 46 2126 40 41 44 362 41 59 2049 46 2123 40 2124 46 2129 46 2126 40 41 44 362 41 59 125 2049 46 2130 61 1500 59 330 330 2051 46 2131 348 2132 59 2054 46 2131 348 2133 59 2055 46 2131 348 2133 59 2056 46 2131 348 2133 59 2057 46 2131 348 2133 59 2058 46 2131 348 2133 59 2059 46 2131 348 2133 59 2060 46 2131 348 2133 59 2061 46 2131 348 2133 59 2062 46 2131 348 2133 59 2063 46 2131 348 2133 59 2064 46 2131 348 2133 59 2065 46 2131 348 2133 59 2081 46 2131 348 2133 59 2082 46 2131 348 2133 59 2066 46 2131 348 2132 59 2069 46 2131 348 2133 59 2070 46 2131 348 2133 59 2071 46 2131 348 2133 59 2072 46 2131 348 2133 59 2073 46 2131 348 2133 59 2074 46 2131 348 2133 59 2075 46 2131 348 2133 59 2076 46 2131 348 2133 59 2077 46 2131 348 2133 59 2078 46 2131 348 2133 59 2079 46 2131 348 2133 59 2080 46 2131 348 2133 59 2083 46 2131 348 2133 59 2084 46 2131 348 2133 59 2024 46 2131 348 2134 59 330 2135 40 41 59 2136 40 41 59 2137 40 41 59 688 40 2030 46 2138 340 752 41 123 2139 40 41 59 125 2098 46 2140 46 2141 46 2142 348 2143 59 2098 46 2140 46 2141 46 2144 348 2145 59 688 40 2091 46 2146 340 752 41 123 2091 46 2146 46 2147 46 2148 40 41 59 125 125 773 865 2149 40 755 2150 44 2151 2152 41 123 2153 40 41 59 125 773 865 2154 40 815 2155 41 123 2156 46 2157 40 618 123 2158 40 41 59 125 41 59 125 773 865 2159 40 815 2155 41 123 2160 46 2161 40 618 123 2162 40 41 59 125 41 59 125 775 763 865 2163 40 41 123 2091 46 2164 46 2165 46 2166 337 2159 59 2091 46 2164 46 2165 46 2167 337 2154 59 688 40 2091 46 2168 340 752 41 123 2091 46 2168 46 2169 46 2170 40 41 59 125 2095 346 2171 40 41 59 2093 46 2171 40 41 59 125 773 809 815 2172 40 815 2173 41 123 601 815 2174 61 362 59 601 704 2175 61 1503 59 688 40 2173 46 2176 62 2175 41 123 792 2173 46 2177 40 1500 44 2175 45 2174 46 2176 41 43 2174 59 125 792 2173 59 125 773 865 2178 40 41 123 2030 46 2179 40 41 59 2030 46 2180 40 362 44 362 41 59 2030 46 2181 40 362 41 59 665 40 815 2155 696 2091 46 2182 46 2183 46 2184 41 123 2094 2185 61 2091 46 2182 46 2183 46 2186 40 2155 41 59 688 40 2185 340 752 41 123 2030 46 2180 40 36 362 44 2172 40 36 362 41 41 59 2185 46 2187 40 41 59 125 125 665 40 815 2155 696 2091 46 2182 46 2188 46 2184 41 123 2094 2189 61 2091 46 2182 46 2188 46 2190 40 2155 41 59 688 40 2189 340 752 41 123 2030 46 2180 40 36 362 44 2172 40 36 362 41 41 59 2189 46 2191 40 41 59 125 125 819 40 2005 41 123 579 2192 2193 58 2030 46 2181 40 36 362 41 59 572 59 579 2194 2195 58 2030 46 2181 40 36 362 41 59 572 59 125 125 773 865 2196 40 41 123 688 40 2024 46 2197 41 123 2036 46 2198 40 41 59 2037 46 2198 40 41 59 2038 46 2198 40 41 59 2034 46 2198 40 41 59 2025 46 2198 40 41 59 125 630 123 2036 46 2199 40 41 59 2037 46 2199 40 41 59 2038 46 2199 40 41 59 2034 46 2199 40 41 59 2025 46 2199 40 41 59 125 125 773 865 2200 40 41 123 688 40 2030 46 2201 340 752 307 2030 46 2201 46 2202 40 362 41 41 123 2203 40 41 59 2041 46 2204 40 41 59 2044 46 2204 40 41 59 2042 46 2204 40 41 59 2045 46 2204 40 41 59 2048 46 2204 40 41 59 2035 46 2204 40 41 59 2088 46 2204 40 41 59 125 630 688 40 2030 46 2201 340 752 307 2030 46 2201 46 2202 40 362 41 41 123 2205 40 41 59 2040 46 2206 40 41 59 2043 46 2206 40 41 59 2196 40 41 59 125 630 123 2033 46 2207 40 41 59 125 2208 40 41 59 125 773 865 2209 40 41 123 2210 40 41 59 2211 40 41 59 688 40 2030 46 2212 46 2213 40 362 41 307 2005 712 2214 41 123 2215 40 2005 41 59 125 630 688 40 2030 46 2212 46 2213 40 362 41 307 2005 712 2216 41 123 2217 40 2005 41 59 125 125 773 865 2218 40 41 123 2046 46 2219 40 41 59 2047 46 2219 40 41 59 2034 46 2219 40 41 59 819 40 2049 46 2220 41 123 579 362 58 2046 46 2221 40 41 59 572 59 579 362 58 2047 46 2221 40 41 59 572 59 579 362 58 2034 46 2221 40 41 59 572 59 125 2086 46 2222 61 2049 46 2220 819 123 362 328 744 2223 46 2222 40 2224 46 2225 40 41 44 362 44 1504 44 1504 41 44 362 328 744 2223 46 2222 40 2224 46 2225 40 41 44 362 44 1504 44 1504 41 44 362 328 744 2223 46 2222 40 2224 46 2225 40 41 44 362 44 1504 44 1504 41 44 2226 328 744 2223 46 2222 40 2224 46 2225 40 41 44 362 44 1504 44 1504 41 44 125 59 125 773 865 2227 40 41 123 2051 46 2228 61 362 59 2054 46 2228 61 362 59 2055 46 2228 61 362 59 2056 46 2228 61 362 59 2057 46 2228 61 362 59 2058 46 2228 61 362 59 2059 46 2228 61 362 59 2060 46 2228 61 362 59 2061 46 2228 61 362 59 2062 46 2228 61 362 59 2063 46 2228 61 362 59 2064 46 2228 61 362 59 2065 46 2228 61 362 59 2081 46 2228 61 362 59 2082 46 2228 61 362 59 2066 46 2228 61 362 59 2069 46 2228 61 362 59 2070 46 2228 61 362 59 2071 46 2228 61 362 59 2072 46 2228 61 362 59 2073 46 2228 61 362 59 2074 46 2228 61 362 59 2075 46 2228 61 362 59 2076 46 2228 61 362 59 2077 46 2228 61 362 59 2078 46 2228 61 362 59 2079 46 2228 61 362 59 2080 46 2228 61 362 59 2083 46 2228 61 362 59 2084 46 2228 61 362 59 2013 46 2229 61 1501 59 2014 46 2229 61 1501 59 2015 46 2229 61 1500 59 2016 46 2229 61 1500 59 2017 46 2229 61 1500 59 2025 46 2230 61 655 59 2023 46 2230 61 655 59 2024 46 2230 61 655 59 2018 46 2229 61 1500 59 2019 46 2229 61 1500 59 2020 46 2229 61 1503 59 2021 46 2229 61 1501 59 2027 46 2231 46 2232 61 362 59 2028 46 2231 46 2232 61 362 59 2087 46 2230 61 655 59 125 773 865 2233 40 2004 2234 41 123 819 40 2234 41 123 579 2235 2236 58 688 40 33 2049 46 2237 40 2236 46 2238 46 2239 40 41 41 41 123 2049 46 2237 40 2003 323 2002 46 2240 63 2238 46 2240 46 2239 40 41 58 2238 46 2241 46 2239 40 41 41 59 125 2054 46 2242 61 2236 46 2243 46 2244 46 2239 40 41 59 2055 46 2242 61 2236 46 2243 46 2245 46 2239 40 41 59 2056 46 2242 61 2236 46 2243 46 2246 46 2239 40 41 59 2057 46 2242 61 2236 46 2243 46 2247 46 2239 40 41 59 2058 46 2242 61 2236 46 2243 46 2248 46 2239 40 41 59 2059 46 2242 61 2236 46 2249 46 2250 46 2239 40 41 59 2060 46 2242 61 2236 46 2249 46 2251 46 2239 40 41 59 2061 46 2242 61 2236 46 2249 46 2252 46 2239 40 41 59 2062 46 2242 61 2236 46 2249 46 2253 46 2239 40 41 59 2063 46 2242 61 2236 46 2249 46 2254 46 2239 40 41 59 2064 46 2242 61 2236 46 2249 46 2255 46 2239 40 41 59 2065 46 2242 61 2236 46 2249 46 2256 46 2239 40 41 59 2081 46 2242 61 2236 46 2249 46 2257 46 2239 40 41 59 2082 46 2242 61 2236 46 2249 46 2258 46 2239 40 41 59 2069 46 2242 61 2236 46 2259 46 2244 46 2239 40 41 59 2070 46 2242 61 2236 46 2259 46 2245 46 2239 40 41 59 2071 46 2242 61 2236 46 2259 46 2246 46 2239 40 41 59 2072 46 2242 61 2236 46 2259 46 2247 46 2239 40 41 59 2073 46 2242 61 2236 46 2259 46 2248 46 2239 40 41 59 2074 46 2242 61 2236 46 2260 46 2261 46 2239 40 41 59 2075 46 2242 61 2236 46 2260 46 2262 46 2239 40 41 59 2076 46 2242 61 2236 46 2260 46 2263 46 2239 40 41 59 2077 46 2242 61 2236 46 2260 46 2264 46 2239 40 41 59 2078 46 2242 61 2236 46 2260 46 2265 46 2239 40 41 59 2079 46 2242 61 2236 46 2260 46 2266 46 2239 40 41 59 2080 46 2242 61 2236 46 2260 46 2267 46 2239 40 41 59 2083 46 2242 61 2236 46 2260 46 2257 46 2239 40 41 59 2084 46 2242 61 2236 46 2260 46 2258 46 2239 40 41 59 572 59 579 2268 2269 58 688 40 33 2049 46 2237 40 2269 46 2238 46 2239 40 41 41 41 123 2049 46 2237 40 2003 323 2002 46 2270 63 2238 46 2270 46 2239 40 41 58 2238 46 2271 46 2239 40 41 41 59 125 2051 46 2242 61 2269 46 2243 46 2272 46 2239 40 41 59 2052 46 2273 61 2269 46 2243 46 2274 59 2053 46 2273 61 2269 46 2243 46 2275 59 2058 46 2242 61 2269 46 2243 46 2248 46 2239 40 41 59 2059 46 2242 61 2269 46 2249 46 2250 46 2239 40 41 59 2060 46 2242 61 2269 46 2249 46 2251 46 2239 40 41 59 2061 46 2242 61 2269 46 2249 46 2252 46 2239 40 41 59 2062 46 2242 61 2269 46 2249 46 2253 46 2239 40 41 59 2063 46 2242 61 2269 46 2249 46 2254 46 2239 40 41 59 2064 46 2242 61 2269 46 2249 46 2255 46 2239 40 41 59 2065 46 2242 61 2269 46 2249 46 2256 46 2239 40 41 59 2081 46 2242 61 2269 46 2249 46 2257 46 2239 40 41 59 2082 46 2242 61 2269 46 2249 46 2258 46 2239 40 41 59 2066 46 2242 61 2269 46 2259 46 2272 46 2239 40 41 59 2067 46 2273 61 2269 46 2259 46 2274 59 2068 46 2273 61 2269 46 2259 46 2275 59 2073 46 2242 61 2269 46 2259 46 2248 46 2239 40 41 59 2074 46 2242 61 2269 46 2260 46 2261 46 2239 40 41 59 2075 46 2242 61 2269 46 2260 46 2262 46 2239 40 41 59 2076 46 2242 61 2269 46 2260 46 2263 46 2239 40 41 59 2077 46 2242 61 2269 46 2260 46 2264 46 2239 40 41 59 2078 46 2242 61 2269 46 2260 46 2265 46 2239 40 41 59 2079 46 2242 61 2269 46 2260 46 2266 46 2239 40 41 59 2080 46 2242 61 2269 46 2260 46 2267 46 2239 40 41 59 2083 46 2242 61 2269 46 2260 46 2257 46 2239 40 41 59 2084 46 2242 61 2269 46 2260 46 2258 46 2239 40 41 59 2013 46 2276 61 2269 46 2277 46 2278 59 2014 46 2276 61 2269 46 2277 46 2279 59 2087 46 2273 61 2269 46 2277 46 2280 59 2015 46 2276 61 2269 46 2281 59 2016 46 2276 61 2269 46 2282 59 2017 46 2276 61 2269 46 2283 59 2020 46 2276 61 2269 46 2284 46 2285 59 2021 46 2276 61 2269 46 2284 46 2286 59 2023 46 2273 61 2269 46 2284 46 2287 59 2024 46 2273 61 2269 46 2284 46 2288 323 2289 46 2290 59 688 40 2269 46 2284 712 2291 2292 41 123 2018 46 2276 61 2292 46 2293 59 2019 46 2276 61 2292 46 2294 59 2025 46 2273 61 2292 46 2295 59 2027 46 2296 46 2297 61 2292 46 2298 59 2028 46 2296 46 2297 61 2292 46 2299 46 2239 40 41 59 125 572 59 125 125 773 2004 2300 40 41 123 688 40 2030 46 2301 46 2302 40 362 41 41 123 2303 46 2304 40 2054 46 2305 44 762 2306 2307 41 59 2303 46 2304 40 2055 46 2305 44 762 2306 2308 41 59 2303 46 2304 40 2056 46 2305 44 762 2306 2309 41 59 2303 46 2304 40 2057 46 2305 44 762 2306 2310 41 59 2303 46 2304 40 2058 46 2305 44 762 2306 2311 41 59 2303 46 2304 40 2059 46 2305 44 762 2306 2312 41 59 2303 46 2304 40 2060 46 2305 44 762 2306 2313 41 59 2303 46 2304 40 2061 46 2305 44 762 2306 2314 41 59 2303 46 2304 40 2062 46 2305 44 762 2306 2315 41 59 2303 46 2304 40 2063 46 2305 44 762 2306 2316 41 59 2303 46 2304 40 2064 46 2305 44 762 2306 2317 41 59 2303 46 2304 40 2065 46 2305 44 762 2306 2318 41 59 2303 46 2304 40 2081 46 2305 44 762 2306 2319 41 59 2303 46 2304 40 2082 46 2305 44 762 2306 2320 41 59 2303 46 2304 40 2069 46 2305 44 762 2306 2321 41 59 2303 46 2304 40 2070 46 2305 44 762 2306 2322 41 59 2303 46 2304 40 2071 46 2305 44 762 2306 2323 41 59 2303 46 2304 40 2072 46 2305 44 762 2306 2324 41 59 2303 46 2304 40 2073 46 2305 44 762 2306 2325 41 59 2303 46 2304 40 2074 46 2305 44 762 2306 2326 41 59 2303 46 2304 40 2075 46 2305 44 762 2306 2327 41 59 2303 46 2304 40 2076 46 2305 44 762 2306 2328 41 59 2303 46 2304 40 2077 46 2305 44 762 2306 2329 41 59 2303 46 2304 40 2078 46 2305 44 762 2306 2330 41 59 2303 46 2304 40 2079 46 2305 44 762 2306 2331 41 59 2303 46 2304 40 2080 46 2305 44 762 2306 2332 41 59 2303 46 2304 40 2083 46 2305 44 762 2306 2333 41 59 2303 46 2304 40 2084 46 2305 44 762 2306 2334 41 59 792 744 2335 123 2336 61 2337 46 2338 44 2339 61 2004 46 2340 44 2341 61 2030 46 2301 46 2342 40 362 41 91 1501 93 44 2343 61 2303 46 2344 60 2343 62 40 2049 46 2301 41 44 2002 61 2003 44 2345 61 744 2346 60 2306 62 123 2347 61 2316 44 2348 61 2317 44 2349 61 2318 44 2350 61 2319 44 2351 61 2320 44 2352 61 2312 44 2353 61 2313 44 2354 61 2314 44 2355 61 2315 125 44 2356 61 744 2357 60 2306 62 123 2358 61 2307 44 2359 61 2308 44 2360 61 2309 44 2361 61 2310 44 2362 61 2311 44 125 44 2363 61 744 2364 60 2306 62 123 2365 61 2326 44 2366 61 2327 44 2367 61 2328 44 2368 61 2329 44 2369 61 2330 44 2370 61 2331 44 2371 61 2332 44 2372 61 2333 44 2373 61 2334 125 44 2374 61 744 2357 60 2306 62 123 2375 61 2321 44 2376 61 2322 44 2377 61 2323 44 2378 61 2324 44 2379 61 2325 44 125 44 125 59 125 688 40 2030 46 2301 46 2302 40 362 41 41 123 2380 46 2381 40 2051 46 2382 44 762 2383 2384 41 59 2380 46 2381 40 2058 46 2382 44 762 2385 2386 41 59 2380 46 2381 40 2063 46 2382 44 762 2385 2387 41 59 2380 46 2381 40 2064 46 2382 44 762 2385 2388 41 59 2380 46 2381 40 2065 46 2382 44 762 2385 2389 41 59 2380 46 2381 40 2081 46 2382 44 762 2385 2390 41 59 2380 46 2381 40 2082 46 2382 44 762 2385 2391 41 59 2380 46 2381 40 2059 46 2382 44 762 2385 2392 41 59 2380 46 2381 40 2060 46 2382 44 762 2385 2393 41 59 2380 46 2381 40 2061 46 2382 44 762 2385 2394 41 59 2380 46 2381 40 2062 46 2382 44 762 2385 2395 41 59 2380 46 2381 40 2066 46 2382 44 762 2383 2396 41 59 2380 46 2381 40 2073 46 2382 44 762 2385 2397 41 59 2380 46 2381 40 2074 46 2382 44 762 2385 2398 41 59 2380 46 2381 40 2075 46 2382 44 762 2385 2399 41 59 2380 46 2381 40 2076 46 2382 44 762 2385 2400 41 59 2380 46 2381 40 2077 46 2382 44 762 2385 2401 41 59 2380 46 2381 40 2078 46 2382 44 762 2385 2402 41 59 2380 46 2381 40 2079 46 2382 44 762 2385 2403 41 59 2380 46 2381 40 2080 46 2382 44 762 2385 2404 41 59 2380 46 2381 40 2083 46 2382 44 762 2385 2405 41 59 2380 46 2381 40 2084 46 2382 44 762 2385 2406 41 59 704 46 2381 40 2028 46 2407 46 2408 44 762 704 2409 41 59 2410 2411 59 688 40 2024 46 2412 41 123 2411 61 744 2413 123 2414 61 2415 46 2416 44 2417 61 2023 46 2412 44 2418 61 40 704 41 2020 46 2419 44 2420 61 2021 46 2419 44 2421 61 2025 46 2412 44 2422 61 40 704 41 2018 46 2419 44 2423 61 40 704 41 2019 46 2419 44 2424 61 2027 46 2407 46 2408 44 2425 61 2409 125 59 125 630 123 2411 61 744 2426 123 2427 61 2428 46 2429 44 2430 61 2023 46 2412 44 2431 61 40 704 41 2020 46 2432 44 2433 61 2021 46 2432 44 125 59 125 792 744 2434 123 2435 61 2436 46 2437 44 2438 61 2004 46 2439 44 2440 61 2030 46 2301 46 2441 40 362 41 91 1501 93 46 2441 40 362 41 91 1500 93 44 2442 61 2380 46 2443 60 2442 62 40 2049 46 2301 41 44 2002 61 2003 44 2444 61 40 660 41 2015 46 2445 44 2446 61 40 660 41 2016 46 2445 44 2447 61 40 660 41 2017 46 2445 44 2448 61 744 2449 60 2385 62 123 2450 61 2387 44 2451 61 2388 44 2452 61 2389 44 2453 61 2390 44 2454 61 2391 44 2455 61 2392 44 2456 61 2393 44 2457 61 2394 44 2458 61 2395 125 44 2459 61 744 2460 60 2385 44 2383 62 123 2461 61 2052 46 2412 44 2462 61 2384 44 2463 61 2053 46 2412 44 2464 61 2386 44 125 44 2465 61 744 2466 60 2385 62 123 2467 61 2398 44 2468 61 2399 44 2469 61 2400 44 2470 61 2401 44 2471 61 2402 44 2472 61 2403 44 2473 61 2404 44 2474 61 2405 44 2475 61 2406 125 44 2476 61 744 2460 60 2385 44 2383 62 123 2477 61 2067 46 2412 44 2478 61 2396 44 2479 61 2068 46 2412 44 2480 61 2397 44 125 44 2481 61 2411 44 2482 61 744 2483 123 2484 61 40 660 41 2013 46 2445 44 2485 61 40 660 41 2014 46 2445 44 2486 61 2087 46 2412 125 125 59 125 688 40 33 2030 46 2301 46 2302 40 362 41 41 123 2487 46 2488 40 362 41 59 125 792 752 59 125 773 815 2489 40 41 123 688 40 2030 46 2490 46 2491 40 362 41 41 123 792 2492 46 2493 46 2494 46 2495 40 2496 46 2497 44 362 41 59 125 630 688 40 2030 46 2490 46 2491 40 362 41 41 123 792 2498 46 2499 46 2500 46 2501 40 2502 46 2503 44 362 41 59 125 792 2504 46 2505 59 125 330 330 330 773 865 2506 40 755 2150 44 2151 2507 41 123 2200 40 41 59 2218 40 41 59 2095 346 2508 40 41 59 2095 61 752 59 688 40 2030 46 2509 340 752 41 123 2510 40 41 59 815 2155 61 2511 40 41 59 688 40 2030 46 2509 46 2512 40 362 41 41 123 688 40 2005 712 2513 41 123 2233 40 2005 41 59 125 688 40 2091 46 2514 46 2515 712 2516 41 123 330 2095 61 2093 46 2517 40 2155 41 59 125 630 123 2095 61 2091 46 2514 46 2515 46 2518 40 2155 41 59 125 125 630 688 40 2030 46 2509 46 2512 40 362 41 41 123 688 40 2005 712 2519 41 123 2233 40 2005 41 59 125 2095 61 2091 46 2520 46 2521 46 2522 40 2155 41 59 125 125 125 773 815 2523 40 41 123 688 40 2030 46 2524 323 752 309 2030 46 2524 323 362 41 123 792 752 59 125 792 2030 46 2524 46 2525 40 362 41 91 1501 93 46 2525 40 362 41 91 1500 93 59 125 773 865 2526 40 755 2150 44 2151 2507 41 123 2218 40 41 59 125 773 2527 2528 40 569 2529 41 123 2527 2530 59 688 40 2030 46 2531 46 2532 40 362 41 41 123 2530 61 744 2533 40 40 2534 41 2095 41 59 125 630 688 40 2030 46 2531 46 2532 40 362 41 41 123 2530 61 744 2535 40 2095 44 40 660 41 2017 46 2536 44 2529 41 59 125 630 123 825 744 2537 40 362 41 59 125 792 2530 59 125 773 865 2538 40 2050 2539 44 569 2529 41 123 688 40 2006 41 123 2539 46 2540 61 655 59 792 59 125 2096 61 655 59 2541 348 2542 59 2527 2543 61 2528 40 2529 41 59 2006 61 829 59 330 2544 2545 61 40 2544 41 2093 46 2546 40 362 41 59 2547 2548 61 744 2547 40 40 41 328 123 2543 46 2549 40 41 59 870 40 829 41 123 2547 46 2550 40 1502 41 59 2543 46 2551 40 41 59 688 40 2096 309 2545 46 2552 40 2553 46 2554 46 2555 46 2556 41 309 2543 46 2557 40 41 309 2543 46 2558 40 41 41 123 572 59 125 125 815 2559 61 2543 46 2560 40 41 59 2561 46 2562 40 618 123 688 40 2097 41 123 2539 46 2563 61 362 59 125 630 688 40 2559 340 362 41 123 2539 46 2564 61 2559 59 125 2097 61 655 59 2541 337 2542 59 2545 46 2565 40 41 59 2539 46 2566 61 655 59 2006 61 655 59 125 41 59 125 41 59 2548 46 2567 61 362 59 2548 46 2568 61 829 59 2548 46 2569 40 41 59 125 773 865 2570 40 755 2150 44 2151 2507 41 123 2538 40 40 2050 41 2150 44 655 41 59 125 773 865 2571 40 755 2150 44 2151 2507 41 123 2538 40 40 2050 41 2150 44 829 41 59 125 773 865 2572 40 755 2150 44 2573 2507 41 123 2096 61 829 59 2097 61 2507 46 2574 46 2575 323 1502 59 125 773 865 2576 40 41 123 2031 46 2577 40 41 59 815 2578 61 2489 40 41 59 688 40 33 2579 46 2580 40 2578 41 41 123 2579 46 2581 40 2578 41 59 125 688 40 2030 46 2582 323 752 309 2030 46 2582 46 2583 40 362 41 41 123 2031 46 2584 40 362 44 362 41 59 125 630 123 2031 46 2585 40 362 44 362 41 59 665 40 815 2586 696 2579 46 2587 40 2578 44 362 44 2588 46 2589 41 41 123 2031 46 2585 40 2590 46 2591 46 2592 46 2593 40 2586 41 44 2590 46 2591 46 2592 46 2594 40 2586 41 41 59 125 125 2031 46 2595 40 362 41 59 125 773 865 2596 40 755 2150 44 2151 2507 41 123 40 40 2050 41 2150 41 46 2597 40 2598 46 2599 44 829 41 59 688 40 2030 46 2600 323 362 309 2031 46 2600 323 752 41 792 59 2004 2234 61 752 59 704 2601 61 2031 46 2602 59 688 40 2031 46 2600 323 362 41 123 688 40 2030 46 2600 46 2603 40 362 41 41 123 2234 61 744 2604 123 2605 61 2004 46 2606 44 2607 61 2608 46 2609 44 2610 61 752 44 2611 61 2611 46 2612 44 2613 61 744 2614 60 2615 62 123 2616 61 2615 46 2617 44 2618 61 2615 46 2619 44 2620 61 2615 46 2621 44 2622 61 2615 46 2623 44 2624 61 2615 46 2625 44 2626 61 2615 46 2627 44 2628 61 2615 46 2629 44 2630 61 2615 46 2631 44 2632 61 2615 46 2631 125 44 2633 61 744 2634 60 2615 62 123 2635 61 2615 46 2636 44 2637 61 2615 46 2638 44 2639 61 2615 46 2640 44 2641 61 2615 46 2642 44 2643 61 2615 46 2644 44 125 44 2645 61 744 2646 60 2615 62 123 2647 61 2615 46 2648 44 2649 61 2615 46 2650 44 2651 61 2615 46 2652 44 2653 61 2615 46 2654 44 2655 61 2615 46 2656 44 2657 61 2615 46 2658 44 2659 61 2615 46 2660 44 2661 61 2615 46 2662 44 2663 61 2615 46 2662 125 44 2664 61 744 2634 60 2615 62 123 2665 61 2615 46 2666 44 2667 61 2615 46 2668 44 2669 61 2615 46 2670 44 2671 61 2615 46 2672 44 2673 61 2615 46 2674 44 125 125 59 125 630 688 40 2030 46 2600 46 2603 40 362 41 41 123 569 2675 61 2030 46 2676 46 2677 40 362 41 59 2234 61 744 2678 123 2679 61 2004 46 2680 44 2681 61 2682 46 2683 44 2684 61 752 44 2685 61 2685 46 2686 44 2687 61 1500 44 2688 61 1500 44 2689 61 1500 44 2690 61 744 2691 60 2692 62 123 2693 61 2692 46 2693 44 2694 61 2692 46 2694 44 2695 61 2692 46 2695 44 2696 61 2692 46 2696 44 2697 61 2692 46 2698 44 2699 61 2692 46 2700 44 2701 61 2692 46 2702 44 2703 61 2692 46 2704 44 2705 61 2692 46 2704 44 125 44 2706 61 744 2707 60 2692 44 2708 62 123 2709 61 2708 46 2710 44 2711 61 2692 46 2712 44 2713 61 655 44 2714 61 655 44 125 44 2715 61 744 2716 60 2692 62 123 2717 61 2675 63 2692 46 2718 58 2692 46 2719 44 2720 61 2675 63 2692 46 2719 58 2692 46 2718 44 2721 61 2675 63 2692 46 2722 58 2692 46 2723 44 2724 61 2675 63 2692 46 2723 58 2692 46 2722 44 2725 61 2692 46 2726 44 2727 61 2692 46 2728 44 2729 61 2692 46 2730 44 2731 61 2692 46 2732 44 2733 61 2692 46 2732 44 125 44 2734 61 744 2707 60 2692 44 2708 62 123 2735 61 2708 46 2736 44 2737 61 2692 46 2738 44 2739 61 655 44 2740 61 655 44 125 44 2741 61 744 2742 123 2743 61 2744 46 2745 44 2746 61 829 44 2747 61 1503 44 2748 61 1501 44 125 44 2749 61 744 2750 123 2751 61 1501 44 2752 61 1501 44 2753 61 655 125 125 59 125 125 630 123 815 2754 61 2755 46 2756 46 2757 46 2758 40 2489 40 41 44 2031 46 2600 41 59 688 40 33 2759 46 2760 40 2754 41 41 123 688 40 2601 325 1500 41 123 2031 46 2761 40 2601 41 59 125 792 59 125 830 123 860 40 2762 2763 61 2759 46 2764 40 2754 41 41 123 2234 61 2765 46 2766 60 2004 62 40 2763 41 59 125 125 580 40 2767 41 123 125 125 2233 40 2234 41 59 125 773 865 2768 40 755 2150 44 2151 2507 41 123 40 40 2050 41 2150 41 46 2769 40 2770 46 2771 44 829 41 59 688 40 2030 46 2772 323 362 41 792 59 2004 2773 61 2300 40 41 59 2774 2775 61 744 2774 40 41 59 688 40 2773 323 752 41 792 59 688 40 2775 46 2776 40 41 323 40 704 41 2777 46 2778 41 123 815 2779 61 2780 46 2781 46 2782 46 2783 40 2489 40 41 44 2775 46 2784 41 59 815 2785 59 2785 61 2786 46 2787 40 2773 44 829 41 59 2788 46 2789 40 2779 44 2785 41 59 125 2775 46 2790 40 41 59 2576 40 41 59 125 773 865 2791 40 755 2150 44 2151 2507 41 123 40 40 2050 41 2150 41 46 2792 40 2793 46 2794 44 829 41 59 688 40 2030 46 2795 323 362 309 2031 46 2795 323 362 309 2031 46 2795 323 752 41 792 59 2796 2797 61 2798 46 2799 40 362 44 362 41 59 688 40 2797 46 2800 40 41 323 40 704 41 2801 46 2802 41 123 815 2803 61 2804 46 2805 46 2806 46 2807 40 2489 40 41 44 2031 46 2795 41 59 688 40 2808 46 2809 40 2803 41 41 123 2808 46 2810 40 2803 41 59 125 2576 40 41 59 125 125 773 865 2811 40 755 2150 44 2151 2507 41 123 2004 2812 61 2300 40 41 59 2813 2814 61 744 2815 60 2004 62 40 41 59 2814 46 2816 40 2817 46 2818 46 2819 46 2004 46 2820 41 59 688 40 2005 323 752 307 2812 340 752 41 123 2814 46 2821 40 2812 41 59 125 630 123 688 40 2030 46 2822 323 362 41 123 2814 46 2823 40 2005 41 59 125 630 688 40 2812 340 752 41 123 704 2824 61 2814 46 2825 40 2005 41 59 2814 91 2824 93 61 2812 59 125 125 688 40 2091 46 2826 340 752 41 123 2091 46 2826 46 2827 46 2828 40 2814 44 2817 46 2818 46 2819 46 2829 44 2817 46 2818 46 2819 46 2830 41 59 125 330 330 2817 46 2818 46 2819 46 2004 46 2820 61 2814 59 2817 46 2818 46 2831 40 41 46 2832 40 2833 46 2834 41 59 2835 40 41 59 125 773 865 2836 40 755 2150 44 2151 2507 41 123 2837 40 41 59 125 125 ,"{'AvgLine': 34, 'CountLine': 1164, 'CountStmt': 561, 'MaxNesting': 3, 'AvgLineCode': 30, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 446, 'MaxEssential': 4, 'SumEssential': 47, 'AvgCyclomatic': 3, 'CountLineCode': 1009, 'CountStmtDecl': 133, 'MaxCyclomatic': 12, 'SumCyclomatic': 102, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 143, 'CountSemicolon': 469, 'CountDeclMethod': 30, 'CountLineCodeExe': 673, 'CountLineComment': 11, 'CountClassCoupled': 57, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 134, 'CountLineInactive': 0, 'CountDeclMethodAll': 36, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.01', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 13, 'SumCyclomaticStrict': 115, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 3, 'CountDeclMethodPublic': 1, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 12, 'PercentLackOfCohesion': 89, 'SumCyclomaticModified': 98, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 28, 'CountDeclInstanceMethod': 29, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 50, 'CountDeclInstanceVariable': 77, 'PercentLackOfCohesionModified': 72, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 77, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79851,C#,"    public sealed class NeoToken : FungibleToken<NeoToken.NeoAccountState>
    {
        public override string Symbol => ""NEO"";
        public override byte Decimals => 0;

        /// <summary>
        /// Indicates the total amount of NEO.
        /// </summary>
        public BigInteger TotalAmount { get; }

        /// <summary>
        /// Indicates the effective voting turnout in NEO. The voted candidates will only be effective when the voting turnout exceeds this value.
        /// </summary>
        public const decimal EffectiveVoterTurnout = 0.2M;

        private const byte Prefix_VotersCount = 1;
        private const byte Prefix_Candidate = 33;
        private const byte Prefix_Committee = 14;
        private const byte Prefix_GasPerBlock = 29;
        private const byte Prefix_RegisterPrice = 13;
        private const byte Prefix_VoterRewardPerCommittee = 23;

        private const byte NeoHolderRewardRatio = 10;
        private const byte CommitteeRewardRatio = 10;
        private const byte VoterRewardRatio = 80;

        internal NeoToken()
        {
            this.TotalAmount = 100000000 * Factor;
        }

        public override BigInteger TotalSupply(DataCache snapshot)
        {
            return TotalAmount;
        }

        internal override async ContractTask OnBalanceChanging(ApplicationEngine engine, UInt160 account, NeoAccountState state, BigInteger amount)
        {
            await DistributeGas(engine, account, state);
            if (amount.IsZero) return;
            if (state.VoteTo is null) return;
            engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_VotersCount)).Add(amount);
            StorageKey key = CreateStorageKey(Prefix_Candidate).Add(state.VoteTo);
            CandidateState candidate = engine.Snapshot.GetAndChange(key).GetInteroperable<CandidateState>();
            candidate.Votes += amount;
            CheckCandidate(engine.Snapshot, state.VoteTo, candidate);
        }

        private async ContractTask DistributeGas(ApplicationEngine engine, UInt160 account, NeoAccountState state)
        {
            // PersistingBlock is null when running under the debugger
            if (engine.PersistingBlock is null) return;

            BigInteger gas = CalculateBonus(engine.Snapshot, state.VoteTo, state.Balance, state.BalanceHeight, engine.PersistingBlock.Index);
            state.BalanceHeight = engine.PersistingBlock.Index;
            await GAS.Mint(engine, account, gas, true);
        }

        private BigInteger CalculateBonus(DataCache snapshot, ECPoint vote, BigInteger value, uint start, uint end)
        {
            if (value.IsZero || start >= end) return BigInteger.Zero;
            if (value.Sign < 0) throw new ArgumentOutOfRangeException(nameof(value));

            BigInteger neoHolderReward = CalculateNeoHolderReward(snapshot, value, start, end);
            if (vote is null) return neoHolderReward;

            byte[] border = CreateStorageKey(Prefix_VoterRewardPerCommittee).Add(vote).ToArray();
            byte[] keyStart = CreateStorageKey(Prefix_VoterRewardPerCommittee).Add(vote).AddBigEndian(start).ToArray();
            (_, var item) = snapshot.FindRange(keyStart, border, SeekDirection.Backward).FirstOrDefault();
            BigInteger startRewardPerNeo = item ?? BigInteger.Zero;

            byte[] keyEnd = CreateStorageKey(Prefix_VoterRewardPerCommittee).Add(vote).AddBigEndian(end).ToArray();
            (_, item) = snapshot.FindRange(keyEnd, border, SeekDirection.Backward).FirstOrDefault();
            BigInteger endRewardPerNeo = item ?? BigInteger.Zero;

            return neoHolderReward + value * (endRewardPerNeo - startRewardPerNeo) / 100000000L;
        }

        private BigInteger CalculateNeoHolderReward(DataCache snapshot, BigInteger value, uint start, uint end)
        {
            BigInteger sum = 0;
            foreach (var (index, gasPerBlock) in GetSortedGasRecords(snapshot, end - 1))
            {
                if (index > start)
                {
                    sum += gasPerBlock * (end - index);
                    end = index;
                }
                else
                {
                    sum += gasPerBlock * (end - start);
                    break;
                }
            }
            return value * sum * NeoHolderRewardRatio / 100 / TotalAmount;
        }

        private void CheckCandidate(DataCache snapshot, ECPoint pubkey, CandidateState candidate)
        {
            if (!candidate.Registered && candidate.Votes.IsZero)
            {
                foreach (var (rewardKey, _) in snapshot.Find(CreateStorageKey(Prefix_VoterRewardPerCommittee).Add(pubkey).ToArray()).ToArray())
                    snapshot.Delete(rewardKey);
                snapshot.Delete(CreateStorageKey(Prefix_Candidate).Add(pubkey));
            }
        }

        /// <summary>
        /// Determine whether the votes should be recounted at the specified height.
        /// </summary>
        /// <param name=""height"">The height to be checked.</param>
        /// <param name=""committeeMembersCount"">The number of committee members in the system.</param>
        /// <returns><see langword=""true""/> if the votes should be recounted; otherwise, <see langword=""false""/>.</returns>
        public static bool ShouldRefreshCommittee(uint height, int committeeMembersCount) => height % committeeMembersCount == 0;

        internal override ContractTask Initialize(ApplicationEngine engine)
        {
            var cachedCommittee = new CachedCommittee(engine.ProtocolSettings.StandbyCommittee.Select(p => (p, BigInteger.Zero)));
            engine.Snapshot.Add(CreateStorageKey(Prefix_Committee), new StorageItem(cachedCommittee));
            engine.Snapshot.Add(CreateStorageKey(Prefix_VotersCount), new StorageItem(System.Array.Empty<byte>()));
            engine.Snapshot.Add(CreateStorageKey(Prefix_GasPerBlock).AddBigEndian(0u), new StorageItem(5 * GAS.Factor));
            engine.Snapshot.Add(CreateStorageKey(Prefix_RegisterPrice), new StorageItem(1000 * GAS.Factor));
            return Mint(engine, Contract.GetBFTAddress(engine.ProtocolSettings.StandbyValidators), TotalAmount, false);
        }

        internal override ContractTask OnPersist(ApplicationEngine engine)
        {
            // Set next committee
            if (ShouldRefreshCommittee(engine.PersistingBlock.Index, engine.ProtocolSettings.CommitteeMembersCount))
            {
                StorageItem storageItem = engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_Committee));
                var cachedCommittee = storageItem.GetInteroperable<CachedCommittee>();
                cachedCommittee.Clear();
                cachedCommittee.AddRange(ComputeCommitteeMembers(engine.Snapshot, engine.ProtocolSettings));
            }
            return ContractTask.CompletedTask;
        }

        internal override async ContractTask PostPersist(ApplicationEngine engine)
        {
            // Distribute GAS for committee

            int m = engine.ProtocolSettings.CommitteeMembersCount;
            int n = engine.ProtocolSettings.ValidatorsCount;
            int index = (int)(engine.PersistingBlock.Index % (uint)m);
            var gasPerBlock = GetGasPerBlock(engine.Snapshot);
            var committee = GetCommitteeFromCache(engine.Snapshot);
            var pubkey = committee.ElementAt(index).PublicKey;
            var account = Contract.CreateSignatureRedeemScript(pubkey).ToScriptHash();
            await GAS.Mint(engine, account, gasPerBlock * CommitteeRewardRatio / 100, false);

            // Record the cumulative reward of the voters of committee

            if (ShouldRefreshCommittee(engine.PersistingBlock.Index, m))
            {
                BigInteger voterRewardOfEachCommittee = gasPerBlock * VoterRewardRatio * 100000000L * m / (m + n) / 100; // Zoom in 100000000 times, and the final calculation should be divided 100000000L
                for (index = 0; index < committee.Count; index++)
                {
                    var member = committee.ElementAt(index);
                    var factor = index < n ? 2 : 1; // The `voter` rewards of validator will double than other committee's
                    if (member.Votes > 0)
                    {
                        BigInteger voterSumRewardPerNEO = factor * voterRewardOfEachCommittee / member.Votes;
                        StorageKey voterRewardKey = CreateStorageKey(Prefix_VoterRewardPerCommittee).Add(member.PublicKey).AddBigEndian(engine.PersistingBlock.Index + 1);
                        byte[] border = CreateStorageKey(Prefix_VoterRewardPerCommittee).Add(member.PublicKey).ToArray();
                        (_, var item) = engine.Snapshot.FindRange(voterRewardKey.ToArray(), border, SeekDirection.Backward).FirstOrDefault();
                        voterSumRewardPerNEO += (item ?? BigInteger.Zero);
                        engine.Snapshot.Add(voterRewardKey, new StorageItem(voterSumRewardPerNEO));
                    }
                }
            }
        }

        [ContractMethod(CpuFee = 1 << 15, RequiredCallFlags = CallFlags.States)]
        private void SetGasPerBlock(ApplicationEngine engine, BigInteger gasPerBlock)
        {
            if (gasPerBlock < 0 || gasPerBlock > 10 * GAS.Factor)
                throw new ArgumentOutOfRangeException(nameof(gasPerBlock));
            if (!CheckCommittee(engine)) throw new InvalidOperationException();

            uint index = engine.PersistingBlock.Index + 1;
            StorageItem entry = engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_GasPerBlock).AddBigEndian(index), () => new StorageItem(gasPerBlock));
            entry.Set(gasPerBlock);
        }

        /// <summary>
        /// Gets the amount of GAS generated in each block.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <returns>The amount of GAS generated.</returns>
        [ContractMethod(CpuFee = 1 << 15, RequiredCallFlags = CallFlags.ReadStates)]
        public BigInteger GetGasPerBlock(DataCache snapshot)
        {
            return GetSortedGasRecords(snapshot, Ledger.CurrentIndex(snapshot) + 1).First().GasPerBlock;
        }

        [ContractMethod(CpuFee = 1 << 15, RequiredCallFlags = CallFlags.States)]
        private void SetRegisterPrice(ApplicationEngine engine, long registerPrice)
        {
            if (registerPrice <= 0)
                throw new ArgumentOutOfRangeException(nameof(registerPrice));
            if (!CheckCommittee(engine)) throw new InvalidOperationException();
            engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_RegisterPrice)).Set(registerPrice);
        }

        /// <summary>
        /// Gets the fees to be paid to register as a candidate.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <returns>The amount of the fees.</returns>
        [ContractMethod(CpuFee = 1 << 15, RequiredCallFlags = CallFlags.ReadStates)]
        public long GetRegisterPrice(DataCache snapshot)
        {
            return (long)(BigInteger)snapshot[CreateStorageKey(Prefix_RegisterPrice)];
        }

        private IEnumerable<(uint Index, BigInteger GasPerBlock)> GetSortedGasRecords(DataCache snapshot, uint end)
        {
            byte[] key = CreateStorageKey(Prefix_GasPerBlock).AddBigEndian(end).ToArray();
            byte[] boundary = CreateStorageKey(Prefix_GasPerBlock).ToArray();
            return snapshot.FindRange(key, boundary, SeekDirection.Backward)
                .Select(u => (BinaryPrimitives.ReadUInt32BigEndian(u.Key.Key.AsSpan(^sizeof(uint))), (BigInteger)u.Value));
        }

        /// <summary>
        /// Get the amount of unclaimed GAS in the specified account.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""account"">The account to check.</param>
        /// <param name=""end"">The block index used when calculating GAS.</param>
        /// <returns>The amount of unclaimed GAS.</returns>
        [ContractMethod(CpuFee = 1 << 17, RequiredCallFlags = CallFlags.ReadStates)]
        public BigInteger UnclaimedGas(DataCache snapshot, UInt160 account, uint end)
        {
            StorageItem storage = snapshot.TryGet(CreateStorageKey(Prefix_Account).Add(account));
            if (storage is null) return BigInteger.Zero;
            NeoAccountState state = storage.GetInteroperable<NeoAccountState>();
            return CalculateBonus(snapshot, state.VoteTo, state.Balance, state.BalanceHeight, end);
        }

        [ContractMethod(RequiredCallFlags = CallFlags.States)]
        private bool RegisterCandidate(ApplicationEngine engine, ECPoint pubkey)
        {
            if (!engine.CheckWitnessInternal(Contract.CreateSignatureRedeemScript(pubkey).ToScriptHash()))
                return false;
            engine.AddGas(GetRegisterPrice(engine.Snapshot));
            StorageKey key = CreateStorageKey(Prefix_Candidate).Add(pubkey);
            StorageItem item = engine.Snapshot.GetAndChange(key, () => new StorageItem(new CandidateState()));
            CandidateState state = item.GetInteroperable<CandidateState>();
            state.Registered = true;
            return true;
        }

        [ContractMethod(CpuFee = 1 << 16, RequiredCallFlags = CallFlags.States)]
        private bool UnregisterCandidate(ApplicationEngine engine, ECPoint pubkey)
        {
            if (!engine.CheckWitnessInternal(Contract.CreateSignatureRedeemScript(pubkey).ToScriptHash()))
                return false;
            StorageKey key = CreateStorageKey(Prefix_Candidate).Add(pubkey);
            if (engine.Snapshot.TryGet(key) is null) return true;
            StorageItem item = engine.Snapshot.GetAndChange(key);
            CandidateState state = item.GetInteroperable<CandidateState>();
            state.Registered = false;
            CheckCandidate(engine.Snapshot, pubkey, state);
            return true;
        }

        [ContractMethod(CpuFee = 1 << 16, RequiredCallFlags = CallFlags.States)]
        private async ContractTask<bool> Vote(ApplicationEngine engine, UInt160 account, ECPoint voteTo)
        {
            if (!engine.CheckWitnessInternal(account)) return false;
            NeoAccountState state_account = engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_Account).Add(account))?.GetInteroperable<NeoAccountState>();
            if (state_account is null) return false;
            CandidateState validator_new = null;
            if (voteTo != null)
            {
                validator_new = engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_Candidate).Add(voteTo))?.GetInteroperable<CandidateState>();
                if (validator_new is null) return false;
                if (!validator_new.Registered) return false;
            }
            if (state_account.VoteTo is null ^ voteTo is null)
            {
                StorageItem item = engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_VotersCount));
                if (state_account.VoteTo is null)
                    item.Add(state_account.Balance);
                else
                    item.Add(-state_account.Balance);
            }
            await DistributeGas(engine, account, state_account);
            if (state_account.VoteTo != null)
            {
                StorageKey key = CreateStorageKey(Prefix_Candidate).Add(state_account.VoteTo);
                StorageItem storage_validator = engine.Snapshot.GetAndChange(key);
                CandidateState state_validator = storage_validator.GetInteroperable<CandidateState>();
                state_validator.Votes -= state_account.Balance;
                CheckCandidate(engine.Snapshot, state_account.VoteTo, state_validator);
            }
            state_account.VoteTo = voteTo;
            if (validator_new != null)
            {
                validator_new.Votes += state_account.Balance;
            }
            return true;
        }

        /// <summary>
        /// Gets all registered candidates.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <returns>All the registered candidates.</returns>
        [ContractMethod(CpuFee = 1 << 22, RequiredCallFlags = CallFlags.ReadStates)]
        public (ECPoint PublicKey, BigInteger Votes)[] GetCandidates(DataCache snapshot)
        {
            byte[] prefix_key = CreateStorageKey(Prefix_Candidate).ToArray();
            return snapshot.Find(prefix_key).Select(p =>
            (
                p.Key.Key.AsSerializable<ECPoint>(1),
                p.Value.GetInteroperable<CandidateState>()
            )).Where(p => p.Item2.Registered).Select(p => (p.Item1, p.Item2.Votes)).ToArray();
        }

        /// <summary>
        /// Gets all the members of the committee.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <returns>The public keys of the members.</returns>
        [ContractMethod(CpuFee = 1 << 16, RequiredCallFlags = CallFlags.ReadStates)]
        public ECPoint[] GetCommittee(DataCache snapshot)
        {
            return GetCommitteeFromCache(snapshot).Select(p => p.PublicKey).OrderBy(p => p).ToArray();
        }

        /// <summary>
        /// Get account state.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""account"">account</param>
        /// <returns>The state of the account.</returns>
        [ContractMethod(CpuFee = 1 << 15, RequiredCallFlags = CallFlags.ReadStates)]
        public NeoAccountState GetAccountState(DataCache snapshot, UInt160 account)
        {
            return snapshot.TryGet(CreateStorageKey(Prefix_Account).Add(account))?.GetInteroperable<NeoAccountState>();
        }

        /// <summary>
        /// Gets the address of the committee.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <returns>The address of the committee.</returns>
        public UInt160 GetCommitteeAddress(DataCache snapshot)
        {
            ECPoint[] committees = GetCommittee(snapshot);
            return Contract.CreateMultiSigRedeemScript(committees.Length - (committees.Length - 1) / 2, committees).ToScriptHash();
        }

        private CachedCommittee GetCommitteeFromCache(DataCache snapshot)
        {
            return snapshot[CreateStorageKey(Prefix_Committee)].GetInteroperable<CachedCommittee>();
        }

        /// <summary>
        /// Computes the validators of the next block.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> used during computing.</param>
        /// <returns>The public keys of the validators.</returns>
        public ECPoint[] ComputeNextBlockValidators(DataCache snapshot, ProtocolSettings settings)
        {
            return ComputeCommitteeMembers(snapshot, settings).Select(p => p.PublicKey).Take(settings.ValidatorsCount).OrderBy(p => p).ToArray();
        }

        private IEnumerable<(ECPoint PublicKey, BigInteger Votes)> ComputeCommitteeMembers(DataCache snapshot, ProtocolSettings settings)
        {
            decimal votersCount = (decimal)(BigInteger)snapshot[CreateStorageKey(Prefix_VotersCount)];
            decimal voterTurnout = votersCount / (decimal)TotalAmount;
            var candidates = GetCandidates(snapshot);
            if (voterTurnout < EffectiveVoterTurnout || candidates.Length < settings.CommitteeMembersCount)
                return settings.StandbyCommittee.Select(p => (p, candidates.FirstOrDefault(k => k.PublicKey.Equals(p)).Votes));
            return candidates.OrderByDescending(p => p.Votes).ThenBy(p => p.PublicKey).Take(settings.CommitteeMembersCount);
        }

        [ContractMethod(CpuFee = 1 << 16, RequiredCallFlags = CallFlags.ReadStates)]
        private ECPoint[] GetNextBlockValidators(ApplicationEngine engine)
        {
            return GetNextBlockValidators(engine.Snapshot, engine.ProtocolSettings.ValidatorsCount);
        }

        /// <summary>
        /// Gets the validators of the next block.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""validatorsCount"">The number of validators in the system.</param>
        /// <returns>The public keys of the validators.</returns>
        public ECPoint[] GetNextBlockValidators(DataCache snapshot, int validatorsCount)
        {
            return GetCommitteeFromCache(snapshot)
                .Take(validatorsCount)
                .Select(p => p.PublicKey)
                .OrderBy(p => p)
                .ToArray();
        }

        /// <summary>
        /// Represents the account state of <see cref=""NeoToken""/>.
        /// </summary>
        public class NeoAccountState : AccountState
        {
            /// <summary>
            /// The height of the block where the balance changed last time.
            /// </summary>
            public uint BalanceHeight;

            /// <summary>
            /// The voting target of the account. This field can be <see langword=""null""/>.
            /// </summary>
            public ECPoint VoteTo;

            public override void FromStackItem(StackItem stackItem)
            {
                base.FromStackItem(stackItem);
                Struct @struct = (Struct)stackItem;
                BalanceHeight = (uint)@struct[1].GetInteger();
                VoteTo = @struct[2].IsNull ? null : @struct[2].GetSpan().AsSerializable<ECPoint>();
            }

            public override StackItem ToStackItem(ReferenceCounter referenceCounter)
            {
                Struct @struct = (Struct)base.ToStackItem(referenceCounter);
                @struct.Add(BalanceHeight);
                @struct.Add(VoteTo?.ToArray() ?? StackItem.Null);
                return @struct;
            }
        }

        internal class CandidateState : IInteroperable
        {
            public bool Registered = true;
            public BigInteger Votes;

            public void FromStackItem(StackItem stackItem)
            {
                Struct @struct = (Struct)stackItem;
                Registered = @struct[0].GetBoolean();
                Votes = @struct[1].GetInteger();
            }

            public StackItem ToStackItem(ReferenceCounter referenceCounter)
            {
                return new Struct(referenceCounter) { Registered, Votes };
            }
        }

        internal class CachedCommittee : List<(ECPoint PublicKey, BigInteger Votes)>, IInteroperable
        {
            public CachedCommittee()
            {
            }

            public CachedCommittee(IEnumerable<(ECPoint PublicKey, BigInteger Votes)> collection) : base(collection)
            {
            }

            public void FromStackItem(StackItem stackItem)
            {
                foreach (StackItem item in (VM.Types.Array)stackItem)
                {
                    Struct @struct = (Struct)item;
                    Add((@struct[0].GetSpan().AsSerializable<ECPoint>(), @struct[1].GetInteger()));
                }
            }

            public StackItem ToStackItem(ReferenceCounter referenceCounter)
            {
                return new VM.Types.Array(referenceCounter, this.Select(p => new Struct(referenceCounter, new StackItem[] { p.PublicKey.ToArray(), p.Votes })));
            }
        }
    }",1,777 798 587 2000 58 2001 60 2000 46 2002 62 123 777 763 815 2003 328 362 59 777 763 574 2004 328 1500 59 331 777 2005 2006 123 2007 59 125 331 777 601 609 2008 61 1500 59 773 601 574 2009 61 1501 59 773 601 574 2010 61 1503 59 773 601 574 2011 61 1503 59 773 601 574 2012 61 1503 59 773 601 574 2013 61 1503 59 773 601 574 2014 61 1503 59 773 601 574 2015 61 1502 59 773 601 574 2016 61 1502 59 773 601 574 2017 61 1503 59 710 2000 40 41 123 823 46 2006 61 1509 42 2018 59 125 777 763 2005 2019 40 2020 2021 41 123 792 2006 59 125 710 763 2022 2023 2024 40 2025 2026 44 2027 2028 44 2002 2029 44 2005 2030 41 123 2031 2032 40 2026 44 2028 44 2029 41 59 688 40 2030 46 2033 41 792 59 688 40 2029 46 2034 712 752 41 792 59 2026 46 2035 46 2036 40 2037 40 2009 41 41 46 2038 40 2030 41 59 2039 2040 61 2037 40 2010 41 46 2038 40 2029 46 2034 41 59 2041 2042 61 2026 46 2035 46 2036 40 2040 41 46 2043 60 2041 62 40 41 59 2042 46 2044 348 2030 59 2045 40 2026 46 2035 44 2029 46 2034 44 2042 41 59 125 773 2022 2023 2046 40 2025 2026 44 2027 2028 44 2002 2029 41 123 330 688 40 2026 46 2047 712 752 41 792 59 2005 2048 61 2049 40 2026 46 2050 44 2029 46 2051 44 2029 46 2052 44 2029 46 2053 44 2026 46 2047 46 2054 41 59 2029 46 2053 61 2026 46 2047 46 2054 59 2055 2056 46 2057 40 2026 44 2028 44 2048 44 829 41 59 125 773 2005 2058 40 2020 2021 44 2059 2060 44 2005 2061 44 842 2062 44 842 2063 41 123 688 40 2061 46 2064 309 2062 325 2063 41 792 2005 46 2065 59 688 40 2061 46 2066 60 1500 41 825 744 2067 40 2068 40 2061 41 41 59 2005 2069 61 2070 40 2021 44 2061 44 2062 44 2063 41 59 688 40 2060 712 752 41 792 2069 59 574 91 93 2071 61 2072 40 2014 41 46 2073 40 2060 41 46 2074 40 41 59 574 91 93 2075 61 2072 40 2014 41 46 2073 40 2060 41 46 2076 40 2062 41 46 2074 40 41 59 40 2077 44 2078 2079 41 61 2021 46 2080 40 2075 44 2071 44 2081 46 2082 41 46 2083 40 41 59 2005 2084 61 2079 343 2005 46 2065 59 574 91 93 2085 61 2072 40 2014 41 46 2073 40 2060 41 46 2076 40 2063 41 46 2074 40 41 59 40 2077 44 2079 41 61 2021 46 2080 40 2085 44 2071 44 2081 46 2082 41 46 2083 40 41 59 2005 2086 61 2079 343 2005 46 2065 59 792 2069 43 2061 42 40 2086 45 2084 41 47 1509 59 125 773 2005 2087 40 2020 2021 44 2005 2061 44 842 2062 44 842 2063 41 123 2005 2088 61 1500 59 665 40 2089 40 2090 44 2091 41 696 2092 40 2021 44 2063 45 1501 41 41 123 688 40 2090 62 2062 41 123 2088 348 2091 42 40 2063 45 2090 41 59 2063 61 2090 59 125 630 123 2088 348 2091 42 40 2063 45 2062 41 59 572 59 125 125 792 2061 42 2088 42 2015 47 1503 47 2006 59 125 773 865 2093 40 2020 2021 44 2059 2094 44 2095 2096 41 123 688 40 33 2096 46 2097 307 2096 46 2098 46 2099 41 123 665 40 2100 40 2101 44 2102 41 696 2021 46 2103 40 2104 40 2014 41 46 2105 40 2094 41 46 2106 40 41 41 46 2106 40 41 41 2021 46 2107 40 2101 41 59 2021 46 2107 40 2104 40 2010 41 46 2105 40 2094 41 41 59 125 125 331 777 809 569 2108 40 842 2109 44 704 2110 41 328 2109 37 2110 323 1500 59 710 763 2023 2111 40 2025 2026 41 123 2112 2113 61 744 2114 40 2026 46 2115 46 2116 46 2117 40 2118 328 40 2118 44 2005 46 2119 41 41 41 59 2026 46 2120 46 2121 40 2122 40 2011 41 44 744 2123 40 2113 41 41 59 2026 46 2120 46 2121 40 2122 40 2009 41 44 744 2123 40 2124 46 2125 46 2126 60 574 62 40 41 41 41 59 2026 46 2120 46 2121 40 2122 40 2012 41 46 2127 40 1500 41 44 744 2123 40 1502 42 2128 46 2129 41 41 59 2026 46 2120 46 2121 40 2122 40 2013 41 44 744 2123 40 1504 42 2128 46 2129 41 41 59 792 2130 40 2026 44 2131 46 2132 40 2026 46 2115 46 2133 41 44 2006 44 655 41 59 125 710 763 2023 2134 40 2025 2026 41 123 330 688 40 2108 40 2026 46 2135 46 2136 44 2026 46 2137 46 2138 41 41 123 2139 2140 61 2026 46 2141 46 2142 40 2143 40 2011 41 41 59 2144 2145 61 2140 46 2146 60 2147 62 40 41 59 2145 46 2148 40 41 59 2145 46 2149 40 2150 40 2026 46 2141 44 2026 46 2137 41 41 59 125 792 2023 46 2151 59 125 710 763 2022 2023 2152 40 2025 2026 41 123 330 704 2153 61 2026 46 2154 46 2155 59 704 2156 61 2026 46 2154 46 2157 59 704 2158 61 40 704 41 40 2026 46 2159 46 2160 37 40 842 41 2153 41 59 2161 2162 61 2163 40 2026 46 2164 41 59 2161 2165 61 2166 40 2026 46 2164 41 59 2161 2094 61 2165 46 2167 40 2158 41 46 2168 59 2161 2028 61 2169 46 2170 40 2094 41 46 2171 40 41 59 2172 2173 46 2174 40 2026 44 2028 44 2162 42 2016 47 1503 44 655 41 59 330 688 40 2108 40 2026 46 2159 46 2160 44 2153 41 41 123 2005 2175 61 2162 42 2017 42 1509 42 2153 47 40 2153 43 2156 41 47 1503 59 330 664 40 2158 61 1500 59 2158 60 2165 46 2176 59 2158 349 41 123 2161 2177 61 2165 46 2167 40 2158 41 59 2161 2178 61 2158 60 2156 63 1502 58 1501 59 330 688 40 2177 46 2179 62 1500 41 123 2005 2180 61 2178 42 2175 47 2177 46 2179 59 2181 2182 61 2183 40 2014 41 46 2184 40 2177 46 2168 41 46 2185 40 2026 46 2159 46 2160 43 1501 41 59 574 91 93 2186 61 2183 40 2014 41 46 2184 40 2177 46 2168 41 46 2187 40 41 59 40 2188 44 2161 2189 41 61 2026 46 2164 46 2190 40 2182 46 2187 40 41 44 2186 44 2191 46 2192 41 46 2193 40 41 59 2180 348 40 2189 343 2005 46 2194 41 59 2026 46 2164 46 2184 40 2182 44 744 2195 40 2180 41 41 59 125 125 125 125 91 2196 40 2197 61 1501 332 1503 44 2198 61 2199 46 2200 41 93 773 865 2201 40 2025 2026 44 2005 2202 41 123 688 40 2202 60 1500 309 2202 62 1502 42 2203 46 2204 41 825 744 2205 40 2206 40 2202 41 41 59 688 40 33 2207 40 2026 41 41 825 744 2208 40 41 59 842 2209 61 2026 46 2210 46 2211 43 1501 59 2212 2213 61 2026 46 2214 46 2215 40 2216 40 2012 41 46 2217 40 2209 41 44 40 41 328 744 2212 40 2202 41 41 59 2213 46 2218 40 2202 41 59 125 331 91 2196 40 2197 61 1501 332 1503 44 2198 61 2199 46 2219 41 93 777 2005 2220 40 2020 2021 41 123 792 2221 40 2021 44 2222 46 2223 40 2021 41 43 1501 41 46 2224 40 41 46 2225 59 125 91 2196 40 2197 61 1501 332 1503 44 2198 61 2199 46 2200 41 93 773 865 2226 40 2025 2026 44 726 2227 41 123 688 40 2227 329 1500 41 825 744 2228 40 2229 40 2227 41 41 59 688 40 33 2230 40 2026 41 41 825 744 2231 40 41 59 2026 46 2232 46 2233 40 2234 40 2013 41 41 46 2235 40 2227 41 59 125 331 91 2196 40 2197 61 1501 332 1503 44 2198 61 2199 46 2219 41 93 777 726 2236 40 2020 2021 41 123 792 40 726 41 40 2005 41 2021 91 2237 40 2013 41 93 59 125 773 2238 60 40 842 2239 44 2005 2240 41 62 2241 40 2020 2021 44 842 2063 41 123 574 91 93 2242 61 2243 40 2012 41 46 2244 40 2063 41 46 2245 40 41 59 574 91 93 2246 61 2243 40 2012 41 46 2245 40 41 59 792 2021 46 2247 40 2242 44 2246 44 2248 46 2249 41 46 2250 40 2251 328 40 2252 46 2253 40 2251 46 2254 46 2254 46 2255 40 94 805 40 842 41 41 41 44 40 2005 41 2251 46 2256 41 41 59 125 331 91 2196 40 2197 61 1501 332 1503 44 2198 61 2199 46 2219 41 93 777 2005 2257 40 2020 2021 44 2027 2028 44 842 2063 41 123 2258 2259 61 2021 46 2260 40 2261 40 2262 41 46 2263 40 2028 41 41 59 688 40 2259 712 752 41 792 2005 46 2264 59 2002 2029 61 2259 46 2265 60 2002 62 40 41 59 792 2058 40 2021 44 2029 46 2266 44 2029 46 2267 44 2029 46 2268 44 2063 41 59 125 91 2196 40 2198 61 2199 46 2200 41 93 773 569 2269 40 2025 2026 44 2059 2094 41 123 688 40 33 2026 46 2270 40 2271 46 2272 40 2094 41 46 2273 40 41 41 41 792 655 59 2026 46 2274 40 2236 40 2026 46 2275 41 41 59 2276 2277 61 2278 40 2010 41 46 2279 40 2094 41 59 2280 2281 61 2026 46 2275 46 2282 40 2277 44 40 41 328 744 2280 40 744 2095 40 41 41 41 59 2095 2029 61 2281 46 2283 60 2095 62 40 41 59 2029 46 2284 61 829 59 792 829 59 125 91 2196 40 2197 61 1501 332 1503 44 2198 61 2199 46 2200 41 93 773 569 2285 40 2025 2026 44 2059 2094 41 123 688 40 33 2026 46 2286 40 2287 46 2288 40 2094 41 46 2289 40 41 41 41 792 655 59 2290 2291 61 2292 40 2010 41 46 2293 40 2094 41 59 688 40 2026 46 2294 46 2295 40 2291 41 712 752 41 792 829 59 2296 2297 61 2026 46 2294 46 2298 40 2291 41 59 2095 2029 61 2297 46 2299 60 2095 62 40 41 59 2029 46 2300 61 655 59 2093 40 2026 46 2294 44 2094 44 2029 41 59 792 829 59 125 91 2196 40 2197 61 1501 332 1503 44 2198 61 2199 46 2200 41 93 773 2022 2023 60 569 62 2301 40 2025 2026 44 2027 2028 44 2059 2302 41 123 688 40 33 2026 46 2303 40 2028 41 41 792 655 59 2002 2304 61 2026 46 2305 46 2306 40 2307 40 2308 41 46 2309 40 2028 41 41 346 2310 60 2002 62 40 41 59 688 40 2304 712 752 41 792 655 59 2095 2311 61 752 59 688 40 2302 340 752 41 123 2311 61 2026 46 2305 46 2306 40 2307 40 2010 41 46 2309 40 2302 41 41 346 2310 60 2095 62 40 41 59 688 40 2311 712 752 41 792 655 59 688 40 33 2311 46 2312 41 792 655 59 125 688 40 2304 46 2313 712 752 94 2302 712 752 41 123 2314 2315 61 2026 46 2305 46 2306 40 2307 40 2009 41 41 59 688 40 2304 46 2313 712 752 41 2315 46 2309 40 2304 46 2316 41 59 630 2315 46 2309 40 45 2304 46 2316 41 59 125 2317 2046 40 2026 44 2028 44 2304 41 59 688 40 2304 46 2313 340 752 41 123 2318 2319 61 2307 40 2010 41 46 2309 40 2304 46 2313 41 59 2320 2321 61 2026 46 2305 46 2306 40 2319 41 59 2095 2322 61 2321 46 2310 60 2095 62 40 41 59 2322 46 2323 337 2304 46 2324 59 2093 40 2026 46 2305 44 2304 46 2313 44 2322 41 59 125 2304 46 2313 61 2302 59 688 40 2311 340 752 41 123 2311 46 2325 348 2304 46 2326 59 125 792 829 59 125 331 91 2196 40 2197 61 1501 332 1503 44 2198 61 2199 46 2219 41 93 777 40 2059 2327 44 2005 2328 41 91 93 2329 40 2020 2021 41 123 574 91 93 2330 61 2331 40 2010 41 46 2332 40 41 59 792 2021 46 2333 40 2330 41 46 2334 40 2335 328 40 2335 46 2336 46 2336 46 2337 60 2059 62 40 1501 41 44 2335 46 2338 46 2339 60 2095 62 40 41 41 41 46 2340 40 2335 328 2335 46 2341 46 2342 41 46 2334 40 2335 328 40 2335 46 2343 44 2335 46 2341 46 2328 41 41 46 2332 40 41 59 125 331 91 2196 40 2197 61 1501 332 1503 44 2198 61 2199 46 2219 41 93 777 2059 91 93 2344 40 2020 2021 41 123 792 2345 40 2021 41 46 2346 40 2347 328 2347 46 2327 41 46 2348 40 2347 328 2347 41 46 2349 40 41 59 125 331 91 2196 40 2197 61 1501 332 1503 44 2198 61 2199 46 2219 41 93 777 2002 2350 40 2020 2021 44 2027 2028 41 123 792 2021 46 2351 40 2352 40 2353 41 46 2354 40 2028 41 41 346 2355 60 2002 62 40 41 59 125 331 777 2027 2356 40 2020 2021 41 123 2059 91 93 2357 61 2344 40 2021 41 59 792 2358 46 2359 40 2357 46 2360 45 40 2357 46 2360 45 1501 41 47 1502 44 2357 41 46 2361 40 41 59 125 773 2362 2363 40 2020 2021 41 123 792 2021 91 2364 40 2011 41 93 46 2365 60 2362 62 40 41 59 125 331 777 2059 91 93 2366 40 2020 2021 44 2367 2368 41 123 792 2369 40 2021 44 2368 41 46 2370 40 2371 328 2371 46 2327 41 46 2372 40 2368 46 2373 41 46 2374 40 2371 328 2371 41 46 2375 40 41 59 125 773 2238 60 40 2059 2327 44 2005 2328 41 62 2376 40 2020 2021 44 2367 2368 41 123 609 2377 61 40 609 41 40 2005 41 2021 91 2378 40 2009 41 93 59 609 2379 61 2377 47 40 609 41 2006 59 2380 2381 61 2329 40 2021 41 59 688 40 2379 60 2008 309 2381 46 2382 60 2368 46 2383 41 792 2368 46 2384 46 2385 40 2386 328 40 2386 44 2381 46 2387 40 2388 328 2388 46 2327 46 2389 40 2386 41 41 46 2328 41 41 59 792 2381 46 2390 40 2386 328 2386 46 2328 41 46 2391 40 2386 328 2386 46 2327 41 46 2392 40 2368 46 2383 41 59 125 91 2196 40 2197 61 1501 332 1503 44 2198 61 2199 46 2219 41 93 773 2059 91 93 2393 40 2025 2026 41 123 792 2393 40 2026 46 2394 44 2026 46 2367 46 2395 41 59 125 331 777 2059 91 93 2393 40 2020 2021 44 704 2396 41 123 792 2363 40 2021 41 46 2397 40 2396 41 46 2398 40 2399 328 2399 46 2327 41 46 2400 40 2399 328 2399 41 46 2401 40 41 59 125 331 777 587 2002 58 2402 123 331 777 842 2403 59 331 777 2059 2404 59 777 763 865 2405 40 2406 2407 41 123 563 46 2405 40 2407 41 59 2408 64 816 61 40 2408 41 2407 59 2403 61 40 842 41 64 816 91 1501 93 46 2409 40 41 59 2404 61 64 816 91 1502 93 46 2410 63 752 58 64 816 91 1502 93 46 2411 40 41 46 2412 60 2059 62 40 41 59 125 777 763 2406 2413 40 2414 2415 41 123 2416 64 816 61 40 2416 41 563 46 2413 40 2415 41 59 64 816 46 2417 40 2403 41 59 64 816 46 2417 40 2404 346 2418 40 41 343 2406 46 2419 41 59 792 64 816 59 125 125 710 587 2095 58 2420 123 777 569 2421 61 829 59 777 2005 2328 59 777 865 2422 40 2423 2424 41 123 2425 64 816 61 40 2425 41 2424 59 2421 61 64 816 91 1500 93 46 2426 40 41 59 2328 61 64 816 91 1501 93 46 2427 40 41 59 125 777 2423 2428 40 2429 2430 41 123 792 744 2431 40 2430 41 123 2421 44 2328 125 59 125 125 710 587 2362 58 2432 60 40 2059 2327 44 2005 2328 41 62 44 2420 123 777 2362 40 41 123 125 777 2362 40 2238 60 40 2059 2327 44 2005 2328 41 62 2433 41 58 563 40 2433 41 123 125 777 865 2434 40 2435 2436 41 123 665 40 2435 2437 696 40 2438 46 2439 46 2440 41 2436 41 123 2441 64 816 61 40 2441 41 2437 59 2442 40 40 64 816 91 1500 93 46 2443 40 41 46 2444 60 2059 62 40 41 44 64 816 91 1501 93 46 2445 40 41 41 41 59 125 125 777 2435 2446 40 2447 2448 41 123 792 744 2449 46 2450 46 2451 40 2448 44 823 46 2452 40 2453 328 744 2454 40 2448 44 744 2435 91 93 123 2453 46 2327 46 2455 40 41 44 2453 46 2328 125 41 41 41 59 125 125 125 ,"{'AvgLine': 8, 'CountLine': 477, 'CountStmt': 238, 'MaxNesting': 3, 'AvgLineCode': 8, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 163, 'MaxEssential': 6, 'SumEssential': 63, 'AvgCyclomatic': 2, 'CountLineCode': 349, 'CountStmtDecl': 112, 'MaxCyclomatic': 10, 'SumCyclomatic': 78, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 53, 'CountSemicolon': 163, 'CountDeclMethod': 32, 'CountLineCodeExe': 222, 'CountLineComment': 77, 'CountClassCoupled': 32, 'CountClassDerived': 0, 'CountDeclProperty': 3, 'CountLineCodeDecl': 75, 'CountLineInactive': 0, 'CountDeclMethodAll': 73, 'MaxInheritanceTree': 2, 'RatioCommentToCode': '0.22', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 82, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 14, 'CountDeclPropertyAuto': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 10, 'PercentLackOfCohesion': 83, 'SumCyclomaticModified': 78, 'CountDeclClassVariable': 10, 'CountDeclMethodPrivate': 13, 'CountDeclInstanceMethod': 31, 'CountDeclMethodInternal': 5, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 22, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 61, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79733,C#,"    public class ContractParametersContext
    {
        private class ContextItem
        {
            public readonly byte[] Script;
            public readonly ContractParameter[] Parameters;
            public readonly Dictionary<ECPoint, byte[]> Signatures;

            public ContextItem(Contract contract)
            {
                this.Script = contract.Script;
                this.Parameters = contract.ParameterList.Select(p => new ContractParameter { Type = p }).ToArray();
                this.Signatures = new Dictionary<ECPoint, byte[]>();
            }

            public ContextItem(JObject json)
            {
                this.Script = Convert.FromBase64String(json[""script""].AsString());
                this.Parameters = ((JArray)json[""parameters""]).Select(p => ContractParameter.FromJson(p)).ToArray();
                this.Signatures = json[""signatures""].Properties.Select(p => new
                {
                    PublicKey = ECPoint.Parse(p.Key, ECCurve.Secp256r1),
                    Signature = Convert.FromBase64String(p.Value.AsString())
                }).ToDictionary(p => p.PublicKey, p => p.Signature);
            }

            public JObject ToJson()
            {
                JObject json = new();
                json[""script""] = Convert.ToBase64String(Script);
                json[""parameters""] = new JArray(Parameters.Select(p => p.ToJson()));
                json[""signatures""] = new JObject();
                foreach (var signature in Signatures)
                    json[""signatures""][signature.Key.ToString()] = Convert.ToBase64String(signature.Value);
                return json;
            }
        }

        /// <summary>
        /// The <see cref=""IVerifiable""/> to add witnesses.
        /// </summary>
        public readonly IVerifiable Verifiable;

        /// <summary>
        /// The snapshot used to read data.
        /// </summary>
        public readonly DataCache Snapshot;

        /// <summary>
        /// The magic number of the network.
        /// </summary>
        public readonly uint Network;

        private readonly Dictionary<UInt160, ContextItem> ContextItems;

        /// <summary>
        /// Determines whether all witnesses are ready to be added.
        /// </summary>
        public bool Completed
        {
            get
            {
                if (ContextItems.Count < ScriptHashes.Count)
                    return false;
                return ContextItems.Values.All(p => p != null && p.Parameters.All(q => q.Value != null));
            }
        }

        private UInt160[] _ScriptHashes = null;
        /// <summary>
        /// Gets the script hashes to be verified for the <see cref=""Verifiable""/>.
        /// </summary>
        public IReadOnlyList<UInt160> ScriptHashes => _ScriptHashes ??= Verifiable.GetScriptHashesForVerifying(Snapshot);

        /// <summary>
        /// Initializes a new instance of the <see cref=""ContractParametersContext""/> class.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""verifiable"">The <see cref=""IVerifiable""/> to add witnesses.</param>
        /// <param name=""network"">The magic number of the network.</param>
        public ContractParametersContext(DataCache snapshot, IVerifiable verifiable, uint network)
        {
            this.Verifiable = verifiable;
            this.Snapshot = snapshot;
            this.ContextItems = new Dictionary<UInt160, ContextItem>();
            this.Network = network;
        }

        /// <summary>
        /// Adds a parameter to the specified witness script.
        /// </summary>
        /// <param name=""contract"">The contract contains the script.</param>
        /// <param name=""index"">The index of the parameter.</param>
        /// <param name=""parameter"">The value of the parameter.</param>
        /// <returns><see langword=""true""/> if the parameter is added successfully; otherwise, <see langword=""false""/>.</returns>
        public bool Add(Contract contract, int index, object parameter)
        {
            ContextItem item = CreateItem(contract);
            if (item == null) return false;
            item.Parameters[index].Value = parameter;
            return true;
        }

        /// <summary>
        /// Adds parameters to the specified witness script.
        /// </summary>
        /// <param name=""contract"">The contract contains the script.</param>
        /// <param name=""parameters"">The values of the parameters.</param>
        /// <returns><see langword=""true""/> if the parameters are added successfully; otherwise, <see langword=""false""/>.</returns>
        public bool Add(Contract contract, params object[] parameters)
        {
            ContextItem item = CreateItem(contract);
            if (item == null) return false;
            for (int index = 0; index < parameters.Length; index++)
            {
                item.Parameters[index].Value = parameters[index];
            }
            return true;
        }

        /// <summary>
        /// Adds a signature to the specified witness script.
        /// </summary>
        /// <param name=""contract"">The contract contains the script.</param>
        /// <param name=""pubkey"">The public key for the signature.</param>
        /// <param name=""signature"">The signature.</param>
        /// <returns><see langword=""true""/> if the signature is added successfully; otherwise, <see langword=""false""/>.</returns>
        public bool AddSignature(Contract contract, ECPoint pubkey, byte[] signature)
        {
            if (contract.Script.IsMultiSigContract(out _, out ECPoint[] points))
            {
                if (!points.Contains(pubkey)) return false;
                ContextItem item = CreateItem(contract);
                if (item == null) return false;
                if (item.Parameters.All(p => p.Value != null)) return false;
                if (!item.Signatures.TryAdd(pubkey, signature))
                    return false;
                if (item.Signatures.Count == contract.ParameterList.Length)
                {
                    Dictionary<ECPoint, int> dic = points.Select((p, i) => new
                    {
                        PublicKey = p,
                        Index = i
                    }).ToDictionary(p => p.PublicKey, p => p.Index);
                    byte[][] sigs = item.Signatures.Select(p => new
                    {
                        Signature = p.Value,
                        Index = dic[p.Key]
                    }).OrderByDescending(p => p.Index).Select(p => p.Signature).ToArray();
                    for (int i = 0; i < sigs.Length; i++)
                        if (!Add(contract, i, sigs[i]))
                            throw new InvalidOperationException();
                }
                return true;
            }
            else
            {
                int index = -1;
                for (int i = 0; i < contract.ParameterList.Length; i++)
                    if (contract.ParameterList[i] == ContractParameterType.Signature)
                        if (index >= 0)
                            throw new NotSupportedException();
                        else
                            index = i;

                if (index == -1)
                {
                    // unable to find ContractParameterType.Signature in contract.ParameterList 
                    // return now to prevent array index out of bounds exception
                    return false;
                }
                ContextItem item = CreateItem(contract);
                if (item == null) return false;
                if (!item.Signatures.TryAdd(pubkey, signature))
                    return false;
                item.Parameters[index].Value = signature;
                return true;
            }
        }

        private ContextItem CreateItem(Contract contract)
        {
            if (ContextItems.TryGetValue(contract.ScriptHash, out ContextItem item))
                return item;
            if (!ScriptHashes.Contains(contract.ScriptHash))
                return null;
            item = new ContextItem(contract);
            ContextItems.Add(contract.ScriptHash, item);
            return item;
        }

        /// <summary>
        /// Converts the context from a JSON object.
        /// </summary>
        /// <param name=""json"">The context represented by a JSON object.</param>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <returns>The converted context.</returns>
        public static ContractParametersContext FromJson(JObject json, DataCache snapshot)
        {
            var type = typeof(ContractParametersContext).GetTypeInfo().Assembly.GetType(json[""type""].AsString());
            if (!typeof(IVerifiable).IsAssignableFrom(type)) throw new FormatException();

            var verifiable = (IVerifiable)Activator.CreateInstance(type);
            using (MemoryStream ms = new(Convert.FromBase64String(json[""data""].AsString()), false))
            using (BinaryReader reader = new(ms, Utility.StrictUTF8))
            {
                verifiable.DeserializeUnsigned(reader);
            }
            if (json.ContainsProperty(""hash""))
            {
                UInt256 hash = UInt256.Parse(json[""hash""].GetString());
                if (hash != verifiable.Hash) throw new FormatException();
            }
            ContractParametersContext context = new(snapshot, verifiable, (uint)json[""network""].GetInt32());
            foreach (var property in json[""items""].Properties)
            {
                context.ContextItems.Add(UInt160.Parse(property.Key), new ContextItem(property.Value));
            }
            return context;
        }

        /// <summary>
        /// Gets the parameter with the specified index from the witness script.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the witness script.</param>
        /// <param name=""index"">The specified index.</param>
        /// <returns>The parameter with the specified index.</returns>
        public ContractParameter GetParameter(UInt160 scriptHash, int index)
        {
            return GetParameters(scriptHash)?[index];
        }

        /// <summary>
        /// Gets the parameters from the witness script.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the witness script.</param>
        /// <returns>The parameters from the witness script.</returns>
        public IReadOnlyList<ContractParameter> GetParameters(UInt160 scriptHash)
        {
            if (!ContextItems.TryGetValue(scriptHash, out ContextItem item))
                return null;
            return item.Parameters;
        }

        /// <summary>
        /// Gets the signatures from the witness script.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the witness script.</param>
        /// <returns>The signatures from the witness script.</returns>
        public IReadOnlyDictionary<ECPoint, byte[]> GetSignatures(UInt160 scriptHash)
        {
            if (!ContextItems.TryGetValue(scriptHash, out ContextItem item))
                return null;
            return item.Signatures;
        }

        /// <summary>
        /// Gets the witness script with the specified hash.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the witness script.</param>
        /// <returns>The witness script.</returns>
        public byte[] GetScript(UInt160 scriptHash)
        {
            if (!ContextItems.TryGetValue(scriptHash, out ContextItem item))
                return null;
            return item.Script;
        }

        /// <summary>
        /// Gets the witnesses of the <see cref=""Verifiable""/>.
        /// </summary>
        /// <returns>The witnesses of the <see cref=""Verifiable""/>.</returns>
        /// <exception cref=""InvalidOperationException"">The witnesses are not ready to be added.</exception>
        public Witness[] GetWitnesses()
        {
            if (!Completed) throw new InvalidOperationException();
            Witness[] witnesses = new Witness[ScriptHashes.Count];
            for (int i = 0; i < ScriptHashes.Count; i++)
            {
                ContextItem item = ContextItems[ScriptHashes[i]];
                using ScriptBuilder sb = new();
                for (int j = item.Parameters.Length - 1; j >= 0; j--)
                {
                    sb.EmitPush(item.Parameters[j]);
                }
                witnesses[i] = new Witness
                {
                    InvocationScript = sb.ToArray(),
                    VerificationScript = item.Script ?? Array.Empty<byte>()
                };
            }
            return witnesses;
        }

        /// <summary>
        /// Parses the context from a JSON <see cref=""string""/>.
        /// </summary>
        /// <param name=""value"">The JSON <see cref=""string""/>.</param>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <returns>The parsed context.</returns>
        public static ContractParametersContext Parse(string value, DataCache snapshot)
        {
            return FromJson(JObject.Parse(value), snapshot);
        }

        /// <summary>
        /// Converts the context to a JSON object.
        /// </summary>
        /// <returns>The context represented by a JSON object.</returns>
        public JObject ToJson()
        {
            JObject json = new();
            json[""type""] = Verifiable.GetType().FullName;
            json[""hash""] = Verifiable.Hash.ToString();
            using (MemoryStream ms = new())
            using (BinaryWriter writer = new(ms, Utility.StrictUTF8))
            {
                Verifiable.SerializeUnsigned(writer);
                writer.Flush();
                json[""data""] = Convert.ToBase64String(ms.ToArray());
            }
            json[""items""] = new JObject();
            foreach (var item in ContextItems)
                json[""items""][item.Key.ToString()] = item.Value.ToJson();
            json[""network""] = Network;
            return json;
        }

        public override string ToString()
        {
            return ToJson().ToString();
        }
    }",1,777 587 2000 123 773 587 2001 123 777 780 574 91 93 2002 59 777 780 2003 91 93 2004 59 777 780 2005 60 2006 44 574 91 93 62 2007 59 777 2001 40 2008 2009 41 123 823 46 2002 61 2009 46 2002 59 823 46 2004 61 2009 46 2010 46 2011 40 2012 328 744 2003 123 2013 61 2012 125 41 46 2014 40 41 59 823 46 2007 61 744 2005 60 2006 44 574 91 93 62 40 41 59 125 777 2001 40 2015 2016 41 123 823 46 2002 61 2017 46 2018 40 2016 91 362 93 46 2019 40 41 41 59 823 46 2004 61 40 40 2020 41 2016 91 362 93 41 46 2021 40 2022 328 2003 46 2023 40 2022 41 41 46 2024 40 41 59 823 46 2007 61 2016 91 362 93 46 2025 46 2021 40 2022 328 744 123 2026 61 2006 46 2027 40 2022 46 2028 44 2029 46 2030 41 44 2031 61 2017 46 2018 40 2022 46 2032 46 2019 40 41 41 125 41 46 2033 40 2022 328 2022 46 2034 44 2022 328 2022 46 2035 41 59 125 777 2015 2036 40 41 123 2015 2016 61 744 40 41 59 2016 91 362 93 61 2037 46 2038 40 2002 41 59 2016 91 362 93 61 744 2039 40 2004 46 2040 40 2041 328 2041 46 2036 40 41 41 41 59 2016 91 362 93 61 744 2015 40 41 59 665 40 2042 2043 696 2007 41 2016 91 362 93 91 2043 46 2044 46 2045 40 41 93 61 2037 46 2038 40 2043 46 2046 41 59 792 2016 59 125 125 331 777 780 2047 2048 59 331 777 780 2049 2050 59 331 777 780 842 2051 59 773 780 2052 60 2053 44 2001 62 2054 59 331 777 569 2055 123 2056 123 688 40 2054 46 2057 60 2058 46 2057 41 792 655 59 792 2054 46 2059 46 2060 40 2061 328 2061 340 752 307 2061 46 2062 46 2060 40 2063 328 2063 46 2064 340 752 41 41 59 125 125 773 2053 91 93 2065 61 752 59 331 777 2066 60 2053 62 2067 328 2065 343 61 2048 46 2068 40 2050 41 59 331 777 2000 40 2049 2069 44 2047 2070 44 842 2071 41 123 823 46 2048 61 2070 59 823 46 2050 61 2069 59 823 46 2054 61 744 2052 60 2053 44 2001 62 40 41 59 823 46 2051 61 2071 59 125 331 777 569 2072 40 2073 2074 44 704 2075 44 755 2076 41 123 2001 2077 61 2078 40 2074 41 59 688 40 2077 323 752 41 792 655 59 2077 46 2079 91 2075 93 46 2080 61 2076 59 792 829 59 125 331 777 569 2072 40 2073 2074 44 766 755 91 93 2081 41 123 2001 2082 61 2083 40 2074 41 59 688 40 2082 323 752 41 792 655 59 664 40 704 2075 61 1500 59 2075 60 2081 46 2084 59 2075 349 41 123 2082 46 2085 91 2075 93 46 2086 61 2081 91 2075 93 59 125 792 829 59 125 331 777 569 2087 40 2073 2074 44 2088 2089 44 574 91 93 2090 41 123 688 40 2074 46 2091 46 2092 40 762 2093 44 762 2088 91 93 2094 41 41 123 688 40 33 2094 46 2095 40 2089 41 41 792 655 59 2001 2096 61 2097 40 2074 41 59 688 40 2096 323 752 41 792 655 59 688 40 2096 46 2098 46 2099 40 2100 328 2100 46 2101 340 752 41 41 792 655 59 688 40 33 2096 46 2102 46 2103 40 2089 44 2090 41 41 792 655 59 688 40 2096 46 2102 46 2104 323 2074 46 2105 46 2106 41 123 2052 60 2088 44 704 62 2107 61 2094 46 2108 40 40 2100 44 2109 41 328 744 123 2110 61 2100 44 2111 61 2109 125 41 46 2112 40 2100 328 2100 46 2113 44 2100 328 2100 46 2114 41 59 574 91 93 91 93 2115 61 2096 46 2102 46 2108 40 2100 328 744 123 2116 61 2100 46 2101 44 2114 61 2107 91 2100 46 2117 93 125 41 46 2118 40 2100 328 2100 46 2114 41 46 2108 40 2100 328 2100 46 2119 41 46 2120 40 41 59 664 40 704 2109 61 1500 59 2109 60 2115 46 2106 59 2109 349 41 688 40 33 2072 40 2074 44 2109 44 2115 91 2109 93 41 41 825 744 2121 40 41 59 125 792 829 59 125 630 123 704 2075 61 45 1501 59 664 40 704 2122 61 1500 59 2122 60 2074 46 2123 46 2124 59 2122 349 41 688 40 2074 46 2123 91 2122 93 323 2125 46 2126 41 688 40 2075 325 1500 41 825 744 2127 40 41 59 630 2075 61 2122 59 688 40 2075 323 45 1501 41 123 330 330 792 655 59 125 2001 2128 61 2129 40 2074 41 59 688 40 2128 323 752 41 792 655 59 688 40 33 2128 46 2130 46 2131 40 2089 44 2090 41 41 792 655 59 2128 46 2132 91 2075 93 46 2133 61 2090 59 792 829 59 125 125 773 2001 2134 40 2073 2074 41 123 688 40 2054 46 2135 40 2074 46 2136 44 762 2001 2137 41 41 792 2137 59 688 40 33 2067 46 2138 40 2074 46 2136 41 41 792 752 59 2137 61 744 2001 40 2074 41 59 2054 46 2072 40 2074 46 2136 44 2137 41 59 792 2137 59 125 331 777 809 2000 2139 40 2140 2141 44 2049 2069 41 123 2142 2143 61 836 40 2000 41 46 2144 40 41 46 2145 46 2146 40 2141 91 362 93 46 2147 40 41 41 59 688 40 33 836 40 2047 41 46 2148 40 2143 41 41 825 744 2149 40 41 59 2142 2070 61 40 2047 41 2150 46 2151 40 2143 41 59 860 40 2152 2153 61 744 40 2154 46 2155 40 2141 91 362 93 46 2147 40 41 41 44 655 41 41 860 40 2156 2157 61 744 40 2153 44 2158 46 2159 41 41 123 2070 46 2160 40 2157 41 59 125 688 40 2141 46 2161 40 362 41 41 123 2162 2163 61 2162 46 2164 40 2141 91 362 93 46 2165 40 41 41 59 688 40 2163 340 2070 46 2166 41 825 744 2149 40 41 59 125 2000 2167 61 744 40 2069 44 2070 44 40 842 41 2141 91 362 93 46 2168 40 41 41 59 665 40 2142 2169 696 2141 91 362 93 46 2170 41 123 2167 46 2054 46 2072 40 2053 46 2171 40 2169 46 2172 41 44 744 2001 40 2169 46 2173 41 41 59 125 792 2167 59 125 331 777 2174 2175 40 2053 2176 44 704 2075 41 123 792 2177 40 2176 41 63 91 2075 93 59 125 331 777 2066 60 2174 62 2178 40 2053 2176 41 123 688 40 33 2054 46 2179 40 2176 44 762 2001 2180 41 41 792 752 59 792 2180 46 2181 59 125 331 777 2182 60 2088 44 574 91 93 62 2183 40 2053 2176 41 123 688 40 33 2054 46 2184 40 2176 44 762 2001 2185 41 41 792 752 59 792 2185 46 2186 59 125 331 777 574 91 93 2187 40 2053 2176 41 123 688 40 33 2054 46 2188 40 2176 44 762 2001 2189 41 41 792 752 59 792 2189 46 2190 59 125 331 777 2191 91 93 2192 40 41 123 688 40 33 2055 41 825 744 2193 40 41 59 2191 91 93 2194 61 744 2191 91 2067 46 2195 93 59 664 40 704 2196 61 1500 59 2196 60 2067 46 2195 59 2196 349 41 123 2001 2197 61 2054 91 2067 91 2196 93 93 59 860 2198 2199 61 744 40 41 59 664 40 704 2200 61 2197 46 2201 46 2202 45 1501 59 2200 325 1500 59 2200 338 41 123 2199 46 2203 40 2197 46 2201 91 2200 93 41 59 125 2194 91 2196 93 61 744 2191 123 2204 61 2199 46 2205 40 41 44 2206 61 2197 46 2207 343 2208 46 2209 60 574 62 40 41 125 59 125 792 2194 59 125 331 777 809 2000 2210 40 815 2211 44 2049 2069 41 123 792 2139 40 2140 46 2210 40 2211 41 44 2069 41 59 125 331 777 2140 2212 40 41 123 2140 2141 61 744 40 41 59 2141 91 362 93 61 2048 46 2213 40 41 46 2214 59 2141 91 362 93 61 2048 46 2215 46 2216 40 41 59 860 40 2217 2218 61 744 40 41 41 860 40 2219 2220 61 744 40 2218 44 2221 46 2222 41 41 123 2048 46 2223 40 2220 41 59 2220 46 2224 40 41 59 2141 91 362 93 61 2225 46 2226 40 2218 46 2227 40 41 41 59 125 2141 91 362 93 61 744 2140 40 41 59 665 40 2228 2229 696 2054 41 2141 91 362 93 91 2229 46 2230 46 2216 40 41 93 61 2229 46 2231 46 2212 40 41 59 2141 91 362 93 61 2051 59 792 2141 59 125 777 763 815 2232 40 41 123 792 2212 40 41 46 2232 40 41 59 125 125 ,"{'AvgLine': 11, 'CountLine': 333, 'CountStmt': 159, 'MaxNesting': 4, 'AvgLineCode': 11, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 118, 'MaxEssential': 15, 'SumEssential': 40, 'AvgCyclomatic': 3, 'CountLineCode': 223, 'CountStmtDecl': 50, 'MaxCyclomatic': 15, 'SumCyclomatic': 51, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 25, 'CountSemicolon': 103, 'CountDeclMethod': 16, 'CountLineCodeExe': 126, 'CountLineComment': 85, 'CountClassCoupled': 29, 'CountClassDerived': 0, 'CountDeclProperty': 2, 'CountLineCodeDecl': 49, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.38', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 15, 'SumCyclomaticStrict': 51, 'CountDeclClassMethod': 2, 'AvgCyclomaticModified': 3, 'CountDeclMethodPublic': 15, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 15, 'PercentLackOfCohesion': 78, 'SumCyclomaticModified': 51, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 14, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 21, 'CountDeclInstanceVariable': 5, 'PercentLackOfCohesionModified': 46, 'CountDeclInstanceVariablePublic': 3, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79738,C#,"    public class NEP6Wallet : Wallet
    {
        private string password;
        private string name;
        private Version version;
        private readonly Dictionary<UInt160, NEP6Account> accounts;
        private readonly JObject extra;

        /// <summary>
        /// The parameters of the SCrypt algorithm used for encrypting and decrypting the private keys in the wallet.
        /// </summary>
        public readonly ScryptParameters Scrypt;

        public override string Name => name;

        /// <summary>
        /// The version of the wallet standard. It is currently fixed at 1.0 and will be used for functional upgrades in the future.
        /// </summary>
        public override Version Version => version;

        /// <summary>
        /// Loads or creates a wallet at the specified path.
        /// </summary>
        /// <param name=""path"">The path of the wallet file.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used by the wallet.</param>
        /// <param name=""name"">The name of the wallet. If the wallet is loaded from an existing file, this parameter is ignored.</param>
        public NEP6Wallet(string path, ProtocolSettings settings, string name = null) : base(path, settings)
        {
            if (File.Exists(path))
            {
                JObject wallet = JObject.Parse(File.ReadAllBytes(path));
                LoadFromJson(wallet, out Scrypt, out accounts, out extra);
            }
            else
            {
                this.name = name;
                this.version = Version.Parse(""1.0"");
                this.Scrypt = ScryptParameters.Default;
                this.accounts = new Dictionary<UInt160, NEP6Account>();
                this.extra = JObject.Null;
            }
        }

        /// <summary>
        /// Loads the wallet with the specified JSON string.
        /// </summary>
        /// <param name=""path"">The path of the wallet.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used by the wallet.</param>
        /// <param name=""json"">The JSON object representing the wallet.</param>
        public NEP6Wallet(string path, ProtocolSettings settings, JObject json) : base(path, settings)
        {
            LoadFromJson(json, out Scrypt, out accounts, out extra);
        }

        private void LoadFromJson(JObject wallet, out ScryptParameters scrypt, out Dictionary<UInt160, NEP6Account> accounts, out JObject extra)
        {
            this.version = Version.Parse(wallet[""version""].AsString());
            this.name = wallet[""name""]?.AsString();
            scrypt = ScryptParameters.FromJson(wallet[""scrypt""]);
            accounts = ((JArray)wallet[""accounts""]).Select(p => NEP6Account.FromJson(p, this)).ToDictionary(p => p.ScriptHash);
            extra = wallet[""extra""];
        }

        private void AddAccount(NEP6Account account)
        {
            lock (accounts)
            {
                if (accounts.TryGetValue(account.ScriptHash, out NEP6Account account_old))
                {
                    account.Label = account_old.Label;
                    account.IsDefault = account_old.IsDefault;
                    account.Lock = account_old.Lock;
                    if (account.Contract == null)
                    {
                        account.Contract = account_old.Contract;
                    }
                    else
                    {
                        NEP6Contract contract_old = (NEP6Contract)account_old.Contract;
                        if (contract_old != null)
                        {
                            NEP6Contract contract = (NEP6Contract)account.Contract;
                            contract.ParameterNames = contract_old.ParameterNames;
                            contract.Deployed = contract_old.Deployed;
                        }
                    }
                    account.Extra = account_old.Extra;
                }
                accounts[account.ScriptHash] = account;
            }
        }

        public override bool Contains(UInt160 scriptHash)
        {
            lock (accounts)
            {
                return accounts.ContainsKey(scriptHash);
            }
        }

        public override WalletAccount CreateAccount(byte[] privateKey)
        {
            if (privateKey is null) throw new ArgumentNullException(nameof(privateKey));
            KeyPair key = new(privateKey);
            if (key.PublicKey.IsInfinity) throw new ArgumentException(null, nameof(privateKey));
            NEP6Contract contract = new()
            {
                Script = Contract.CreateSignatureRedeemScript(key.PublicKey),
                ParameterList = new[] { ContractParameterType.Signature },
                ParameterNames = new[] { ""signature"" },
                Deployed = false
            };
            NEP6Account account = new(this, contract.ScriptHash, key, password)
            {
                Contract = contract
            };
            AddAccount(account);
            return account;
        }

        public override WalletAccount CreateAccount(Contract contract, KeyPair key = null)
        {
            if (contract is not NEP6Contract nep6contract)
            {
                nep6contract = new NEP6Contract
                {
                    Script = contract.Script,
                    ParameterList = contract.ParameterList,
                    ParameterNames = contract.ParameterList.Select((p, i) => $""parameter{i}"").ToArray(),
                    Deployed = false
                };
            }
            NEP6Account account;
            if (key == null)
                account = new NEP6Account(this, nep6contract.ScriptHash);
            else
                account = new NEP6Account(this, nep6contract.ScriptHash, key, password);
            account.Contract = nep6contract;
            AddAccount(account);
            return account;
        }

        public override WalletAccount CreateAccount(UInt160 scriptHash)
        {
            NEP6Account account = new(this, scriptHash);
            AddAccount(account);
            return account;
        }

        /// <summary>
        /// Decrypts the specified NEP-2 string with the password of the wallet.
        /// </summary>
        /// <param name=""nep2key"">The NEP-2 string to decrypt.</param>
        /// <returns>The decrypted private key.</returns>
        public KeyPair DecryptKey(string nep2key)
        {
            return new KeyPair(GetPrivateKeyFromNEP2(nep2key, password, ProtocolSettings.AddressVersion, Scrypt.N, Scrypt.R, Scrypt.P));
        }

        public override void Delete()
        {
            if (File.Exists(Path)) File.Delete(Path);
        }

        public override bool DeleteAccount(UInt160 scriptHash)
        {
            lock (accounts)
            {
                return accounts.Remove(scriptHash);
            }
        }

        public override WalletAccount GetAccount(UInt160 scriptHash)
        {
            lock (accounts)
            {
                accounts.TryGetValue(scriptHash, out NEP6Account account);
                return account;
            }
        }

        public override IEnumerable<WalletAccount> GetAccounts()
        {
            lock (accounts)
            {
                foreach (NEP6Account account in accounts.Values)
                    yield return account;
            }
        }

        public WalletAccount GetDefaultAccount()
        {
            NEP6Account first = null;
            lock (accounts)
            {
                foreach (NEP6Account account in accounts.Values)
                {
                    if (account.IsDefault) return account;
                    if (first == null) first = account;
                }
            }
            return first;
        }

        public override WalletAccount Import(X509Certificate2 cert)
        {
            KeyPair key;
            using (ECDsa ecdsa = cert.GetECDsaPrivateKey())
            {
                key = new KeyPair(ecdsa.ExportParameters(true).D);
            }
            NEP6Contract contract = new()
            {
                Script = Contract.CreateSignatureRedeemScript(key.PublicKey),
                ParameterList = new[] { ContractParameterType.Signature },
                ParameterNames = new[] { ""signature"" },
                Deployed = false
            };
            NEP6Account account = new(this, contract.ScriptHash, key, password)
            {
                Contract = contract
            };
            AddAccount(account);
            return account;
        }

        public override WalletAccount Import(string wif)
        {
            KeyPair key = new(GetPrivateKeyFromWIF(wif));
            NEP6Contract contract = new()
            {
                Script = Contract.CreateSignatureRedeemScript(key.PublicKey),
                ParameterList = new[] { ContractParameterType.Signature },
                ParameterNames = new[] { ""signature"" },
                Deployed = false
            };
            NEP6Account account = new(this, contract.ScriptHash, key, password)
            {
                Contract = contract
            };
            AddAccount(account);
            return account;
        }

        public override WalletAccount Import(string nep2, string passphrase, int N = 16384, int r = 8, int p = 8)
        {
            KeyPair key = new(GetPrivateKeyFromNEP2(nep2, passphrase, ProtocolSettings.AddressVersion, N, r, p));
            NEP6Contract contract = new()
            {
                Script = Contract.CreateSignatureRedeemScript(key.PublicKey),
                ParameterList = new[] { ContractParameterType.Signature },
                ParameterNames = new[] { ""signature"" },
                Deployed = false
            };
            NEP6Account account;
            if (Scrypt.N == 16384 && Scrypt.R == 8 && Scrypt.P == 8)
                account = new NEP6Account(this, contract.ScriptHash, nep2);
            else
                account = new NEP6Account(this, contract.ScriptHash, key, passphrase);
            account.Contract = contract;
            AddAccount(account);
            return account;
        }

        internal void Lock()
        {
            password = null;
        }

        /// <summary>
        /// Migrates the accounts from <see cref=""UserWallet""/> to a new <see cref=""NEP6Wallet""/>.
        /// </summary>
        /// <param name=""path"">The path of the new wallet file.</param>
        /// <param name=""db3path"">The path of the db3 wallet file.</param>
        /// <param name=""password"">The password of the wallets.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used by the wallet.</param>
        /// <returns>The created new wallet.</returns>
        public static NEP6Wallet Migrate(string path, string db3path, string password, ProtocolSettings settings)
        {
            UserWallet wallet_old = UserWallet.Open(db3path, password, settings);
            NEP6Wallet wallet_new = new(path, settings, wallet_old.Name);
            using (wallet_new.Unlock(password))
            {
                foreach (WalletAccount account in wallet_old.GetAccounts())
                {
                    wallet_new.CreateAccount(account.Contract, account.GetKey());
                }
            }
            return wallet_new;
        }

        /// <summary>
        /// Saves the wallet to the file.
        /// </summary>
        public void Save()
        {
            JObject wallet = new();
            wallet[""name""] = name;
            wallet[""version""] = version.ToString();
            wallet[""scrypt""] = Scrypt.ToJson();
            wallet[""accounts""] = new JArray(accounts.Values.Select(p => p.ToJson()));
            wallet[""extra""] = extra;
            File.WriteAllText(Path, wallet.ToString());
        }

        /// <summary>
        /// Unlocks the wallet with the specified password.
        /// </summary>
        /// <param name=""password"">The password of the wallet.</param>
        /// <returns>The object that can be disposed to lock the wallet again.</returns>
        public IDisposable Unlock(string password)
        {
            if (!VerifyPassword(password))
                throw new CryptographicException();
            this.password = password;
            return new WalletLocker(this);
        }

        public override bool VerifyPassword(string password)
        {
            lock (accounts)
            {
                NEP6Account account = accounts.Values.FirstOrDefault(p => !p.Decrypted);
                if (account == null)
                {
                    account = accounts.Values.FirstOrDefault(p => p.HasKey);
                }
                if (account == null) return true;
                if (account.Decrypted)
                {
                    return account.VerifyPassword(password);
                }
                else
                {
                    try
                    {
                        account.GetKey(password);
                        return true;
                    }
                    catch (FormatException)
                    {
                        return false;
                    }
                }
            }
        }

        public override bool ChangePassword(string oldPassword, string newPassword)
        {
            bool succeed = true;
            lock (accounts)
            {
                Parallel.ForEach(accounts.Values, (account, state) =>
                {
                    if (!account.ChangePasswordPrepare(oldPassword, newPassword))
                    {
                        state.Stop();
                        succeed = false;
                    }
                });
            }
            if (succeed)
            {
                foreach (NEP6Account account in accounts.Values)
                    account.ChangePasswordCommit();
                if (password != null)
                    password = newPassword;
            }
            else
            {
                foreach (NEP6Account account in accounts.Values)
                    account.ChangePasswordRoolback();
            }
            return succeed;
        }
    }",1,777 587 2000 58 2001 123 773 815 2002 59 773 815 2003 59 773 2004 2005 59 773 780 2006 60 2007 44 2008 62 2009 59 773 780 2010 2011 59 331 777 780 2012 2013 59 777 763 815 2014 328 2003 59 331 777 763 2004 2004 328 2005 59 331 777 2000 40 815 2015 44 2016 2017 44 815 2003 61 752 41 58 563 40 2015 44 2017 41 123 688 40 2018 46 2019 40 2015 41 41 123 2010 2020 61 2010 46 2021 40 2018 46 2022 40 2015 41 41 59 2023 40 2020 44 762 2013 44 762 2009 44 762 2011 41 59 125 630 123 823 46 2003 61 2003 59 823 46 2005 61 2004 46 2024 40 362 41 59 823 46 2013 61 2012 46 2025 59 823 46 2009 61 744 2006 60 2007 44 2008 62 40 41 59 823 46 2011 61 2010 46 2026 59 125 125 331 777 2000 40 815 2015 44 2016 2017 44 2010 2027 41 58 563 40 2015 44 2017 41 123 2028 40 2027 44 762 2013 44 762 2009 44 762 2011 41 59 125 773 865 2029 40 2010 2030 44 762 2012 2031 44 762 2006 60 2007 44 2008 62 2009 44 762 2010 2011 41 123 823 46 2005 61 2004 46 2032 40 2030 91 362 93 46 2033 40 41 41 59 823 46 2003 61 2030 91 362 93 346 2033 40 41 59 2031 61 2012 46 2034 40 2030 91 362 93 41 59 2009 61 40 40 2035 41 2030 91 362 93 41 46 2036 40 2037 328 2008 46 2034 40 2037 44 823 41 41 46 2038 40 2037 328 2037 46 2039 41 59 2011 61 2030 91 362 93 59 125 773 865 2040 40 2008 2041 41 123 725 40 2009 41 123 688 40 2009 46 2042 40 2041 46 2043 44 762 2008 2044 41 41 123 2041 46 2045 61 2044 46 2045 59 2041 46 2046 61 2044 46 2046 59 2041 46 2047 61 2044 46 2047 59 688 40 2041 46 2048 323 752 41 123 2041 46 2048 61 2044 46 2048 59 125 630 123 2049 2050 61 40 2049 41 2044 46 2048 59 688 40 2050 340 752 41 123 2049 2051 61 40 2049 41 2041 46 2048 59 2051 46 2052 61 2050 46 2052 59 2051 46 2053 61 2050 46 2053 59 125 125 2041 46 2054 61 2044 46 2054 59 125 2009 91 2041 46 2043 93 61 2041 59 125 125 777 763 569 2055 40 2007 2056 41 123 725 40 2009 41 123 792 2009 46 2057 40 2056 41 59 125 125 777 763 2058 2059 40 574 91 93 2060 41 123 688 40 2060 712 752 41 825 744 2061 40 2062 40 2060 41 41 59 2063 2064 61 744 40 2060 41 59 688 40 2064 46 2065 46 2066 41 825 744 2067 40 752 44 2062 40 2060 41 41 59 2068 2069 61 744 40 41 123 2070 61 2071 46 2072 40 2064 46 2065 41 44 2073 61 744 91 93 123 2074 46 2075 125 44 2076 61 744 91 93 123 362 125 44 2077 61 655 125 59 2008 2041 61 744 40 823 44 2069 46 2078 44 2064 44 2002 41 123 2079 61 2069 125 59 2040 40 2041 41 59 792 2041 59 125 777 763 2058 2059 40 2080 2081 44 2082 2083 61 752 41 123 688 40 2081 712 2084 2085 2086 41 123 2086 61 744 2085 123 2087 61 2081 46 2087 44 2088 61 2081 46 2088 44 2089 61 2081 46 2088 46 2090 40 40 2091 44 2092 41 328 36 362 41 46 2093 40 41 44 2094 61 655 125 59 125 2008 2041 59 688 40 2083 323 752 41 2041 61 744 2008 40 823 44 2086 46 2095 41 59 630 2041 61 744 2008 40 823 44 2086 46 2095 44 2083 44 2002 41 59 2041 46 2080 61 2086 59 2040 40 2041 41 59 792 2041 59 125 777 763 2058 2059 40 2007 2056 41 123 2008 2041 61 744 40 823 44 2056 41 59 2040 40 2041 41 59 792 2041 59 125 331 777 2082 2096 40 815 2097 41 123 792 744 2082 40 2098 40 2097 44 2002 44 2016 46 2099 44 2013 46 2100 44 2013 46 2101 44 2013 46 2102 41 41 59 125 777 763 865 2103 40 41 123 688 40 2104 46 2105 40 2106 41 41 2104 46 2103 40 2106 41 59 125 777 763 569 2107 40 2007 2056 41 123 725 40 2009 41 123 792 2009 46 2108 40 2056 41 59 125 125 777 763 2058 2109 40 2007 2056 41 123 725 40 2009 41 123 2009 46 2110 40 2056 44 762 2008 2041 41 59 792 2041 59 125 125 777 763 2111 60 2058 62 2112 40 41 123 725 40 2009 41 123 665 40 2008 2041 696 2009 46 2113 41 2114 792 2041 59 125 125 777 2058 2115 40 41 123 2008 2116 61 752 59 725 40 2009 41 123 665 40 2008 2041 696 2009 46 2117 41 123 688 40 2041 46 2118 41 792 2041 59 688 40 2116 323 752 41 2116 61 2041 59 125 125 792 2116 59 125 777 763 2058 2119 40 2120 2121 41 123 2082 2083 59 860 40 2122 2123 61 2121 46 2124 40 41 41 123 2083 61 744 2082 40 2123 46 2125 40 829 41 46 2126 41 59 125 2127 2081 61 744 40 41 123 2128 61 2080 46 2129 40 2083 46 2130 41 44 2131 61 744 91 93 123 2132 46 2133 125 44 2134 61 744 91 93 123 362 125 44 2135 61 655 125 59 2008 2041 61 744 40 823 44 2081 46 2136 44 2083 44 2002 41 123 2080 61 2081 125 59 2040 40 2041 41 59 792 2041 59 125 777 763 2058 2119 40 815 2137 41 123 2082 2083 61 744 40 2138 40 2137 41 41 59 2139 2081 61 744 40 41 123 2140 61 2080 46 2141 40 2083 46 2142 41 44 2143 61 744 91 93 123 2144 46 2145 125 44 2146 61 744 91 93 123 362 125 44 2147 61 655 125 59 2008 2041 61 744 40 823 44 2081 46 2148 44 2083 44 2002 41 123 2080 61 2081 125 59 2040 40 2041 41 59 792 2041 59 125 777 763 2058 2119 40 815 2149 44 815 2150 44 704 2151 61 1506 44 704 2152 61 1502 44 704 2153 61 1502 41 123 2082 2083 61 744 40 2154 40 2149 44 2150 44 2016 46 2155 44 2151 44 2152 44 2153 41 41 59 2156 2081 61 744 40 41 123 2157 61 2080 46 2158 40 2083 46 2159 41 44 2160 61 744 91 93 123 2161 46 2162 125 44 2163 61 744 91 93 123 362 125 44 2164 61 655 125 59 2008 2041 59 688 40 2013 46 2151 323 1506 307 2013 46 2165 323 1502 307 2013 46 2166 323 1502 41 2041 61 744 2008 40 823 44 2081 46 2167 44 2149 41 59 630 2041 61 744 2008 40 823 44 2081 46 2167 44 2083 44 2150 41 59 2041 46 2080 61 2081 59 2040 40 2041 41 59 792 2041 59 125 710 865 2168 40 41 123 2002 61 752 59 125 331 777 809 2000 2169 40 815 2015 44 815 2170 44 815 2002 44 2016 2017 41 123 2171 2172 61 2171 46 2173 40 2170 44 2002 44 2017 41 59 2000 2174 61 744 40 2015 44 2017 44 2172 46 2014 41 59 860 40 2174 46 2175 40 2002 41 41 123 665 40 2058 2041 696 2172 46 2112 40 41 41 123 2174 46 2059 40 2041 46 2080 44 2041 46 2176 40 41 41 59 125 125 792 2174 59 125 331 777 865 2177 40 41 123 2010 2030 61 744 40 41 59 2030 91 362 93 61 2003 59 2030 91 362 93 61 2005 46 2178 40 41 59 2030 91 362 93 61 2013 46 2179 40 41 59 2030 91 362 93 61 744 2180 40 2009 46 2181 46 2182 40 2153 328 2153 46 2179 40 41 41 41 59 2030 91 362 93 61 2011 59 2183 46 2184 40 2185 44 2030 46 2178 40 41 41 59 125 331 777 2186 2187 40 815 2002 41 123 688 40 33 2188 40 2002 41 41 825 744 2189 40 41 59 823 46 2002 61 2002 59 792 744 2190 40 823 41 59 125 777 763 569 2191 40 815 2002 41 123 725 40 2009 41 123 2008 2041 61 2009 46 2192 46 2193 40 2153 328 33 2153 46 2194 41 59 688 40 2041 323 752 41 123 2041 61 2009 46 2192 46 2193 40 2153 328 2153 46 2195 41 59 125 688 40 2041 323 752 41 792 829 59 688 40 2041 46 2194 41 123 792 2041 46 2191 40 2002 41 59 125 630 123 830 123 2041 46 2196 40 2002 41 59 792 829 59 125 580 40 2197 41 123 792 655 59 125 125 125 125 777 763 569 2198 40 815 2199 44 815 2200 41 123 569 2201 61 829 59 725 40 2009 41 123 2202 46 2203 40 2009 46 2204 44 40 2041 44 2205 41 328 123 688 40 33 2041 46 2206 40 2199 44 2200 41 41 123 2205 46 2207 40 41 59 2201 61 655 59 125 125 41 59 125 688 40 2201 41 123 665 40 2008 2041 696 2009 46 2208 41 2041 46 2209 40 41 59 688 40 2002 340 752 41 2002 61 2200 59 125 630 123 665 40 2008 2041 696 2009 46 2210 41 2041 46 2211 40 41 59 125 792 2201 59 125 125 ,"{'AvgLine': 12, 'CountLine': 376, 'CountStmt': 167, 'MaxNesting': 4, 'AvgLineCode': 12, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 115, 'MaxEssential': 4, 'SumEssential': 37, 'AvgCyclomatic': 1, 'CountLineCode': 311, 'CountStmtDecl': 55, 'MaxCyclomatic': 5, 'SumCyclomatic': 55, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 26, 'CountSemicolon': 108, 'CountDeclMethod': 25, 'CountLineCodeExe': 158, 'CountLineComment': 39, 'CountClassCoupled': 26, 'CountClassDerived': 0, 'CountDeclProperty': 2, 'CountLineCodeDecl': 64, 'CountLineInactive': 0, 'CountDeclMethodAll': 64, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.13', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 57, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 22, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 76, 'SumCyclomaticModified': 55, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 24, 'CountDeclMethodInternal': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 19, 'CountDeclInstanceVariable': 6, 'PercentLackOfCohesionModified': 69, 'CountDeclInstanceVariablePublic': 1, 'CountDeclInstanceVariablePrivate': 5, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79986,C#,"    public static class BinarySerializer
    {
        private class ContainerPlaceholder : StackItem
        {
            public override StackItemType Type { get; }
            public int ElementCount { get; }

            public ContainerPlaceholder(StackItemType type, int count)
            {
                Type = type;
                ElementCount = count;
            }

            public override bool Equals(StackItem other) => throw new NotSupportedException();

            public override int GetHashCode() => throw new NotSupportedException();

            public override bool GetBoolean() => throw new NotSupportedException();
        }

        /// <summary>
        /// Deserializes a <see cref=""StackItem""/> from byte array.
        /// </summary>
        /// <param name=""data"">The byte array to parse.</param>
        /// <param name=""limits"">The limits for the deserialization.</param>
        /// <param name=""referenceCounter"">The <see cref=""ReferenceCounter""/> used by the <see cref=""StackItem""/>.</param>
        /// <returns>The deserialized <see cref=""StackItem""/>.</returns>
        public static StackItem Deserialize(byte[] data, ExecutionEngineLimits limits, ReferenceCounter referenceCounter = null)
        {
            using MemoryStream ms = new(data, false);
            using BinaryReader reader = new(ms, Utility.StrictUTF8, true);
            return Deserialize(reader, limits with { MaxItemSize = (uint)data.Length }, referenceCounter);
        }

        /// <summary>
        /// Deserializes a <see cref=""StackItem""/> from byte array.
        /// </summary>
        /// <param name=""data"">The byte array to parse.</param>
        /// <param name=""limits"">The limits for the deserialization.</param>
        /// <param name=""referenceCounter"">The <see cref=""ReferenceCounter""/> used by the <see cref=""StackItem""/>.</param>
        /// <returns>The deserialized <see cref=""StackItem""/>.</returns>
        public static unsafe StackItem Deserialize(ReadOnlySpan<byte> data, ExecutionEngineLimits limits, ReferenceCounter referenceCounter = null)
        {
            if (data.IsEmpty) throw new FormatException();
            fixed (byte* pointer = data)
            {
                using UnmanagedMemoryStream ms = new(pointer, data.Length);
                using BinaryReader reader = new(ms, Utility.StrictUTF8, true);
                return Deserialize(reader, limits with { MaxItemSize = (uint)data.Length }, referenceCounter);
            }
        }

        /// <summary>
        /// Deserializes a <see cref=""StackItem""/> from <see cref=""BinaryReader""/>.
        /// </summary>
        /// <param name=""reader"">The <see cref=""BinaryReader""/> for reading data.</param>
        /// <param name=""limits"">The limits for the deserialization.</param>
        /// <param name=""referenceCounter"">The <see cref=""ReferenceCounter""/> used by the <see cref=""StackItem""/>.</param>
        /// <returns>The deserialized <see cref=""StackItem""/>.</returns>
        public static StackItem Deserialize(BinaryReader reader, ExecutionEngineLimits limits, ReferenceCounter referenceCounter)
        {
            Stack<StackItem> deserialized = new();
            int undeserialized = 1;
            while (undeserialized-- > 0)
            {
                StackItemType type = (StackItemType)reader.ReadByte();
                switch (type)
                {
                    case StackItemType.Any:
                        deserialized.Push(StackItem.Null);
                        break;
                    case StackItemType.Boolean:
                        deserialized.Push(reader.ReadBoolean());
                        break;
                    case StackItemType.Integer:
                        deserialized.Push(new BigInteger(reader.ReadVarBytes(Integer.MaxSize)));
                        break;
                    case StackItemType.ByteString:
                        deserialized.Push(reader.ReadVarBytes((int)limits.MaxItemSize));
                        break;
                    case StackItemType.Buffer:
                        Buffer buffer = new((int)reader.ReadVarInt(limits.MaxItemSize));
                        reader.FillBuffer(buffer.InnerBuffer);
                        deserialized.Push(buffer);
                        break;
                    case StackItemType.Array:
                    case StackItemType.Struct:
                        {
                            int count = (int)reader.ReadVarInt(limits.MaxStackSize);
                            deserialized.Push(new ContainerPlaceholder(type, count));
                            undeserialized += count;
                        }
                        break;
                    case StackItemType.Map:
                        {
                            int count = (int)reader.ReadVarInt(limits.MaxStackSize);
                            deserialized.Push(new ContainerPlaceholder(type, count));
                            undeserialized += count * 2;
                        }
                        break;
                    default:
                        throw new FormatException();
                }
                if (deserialized.Count > limits.MaxStackSize) throw new FormatException();
            }
            Stack<StackItem> stack_temp = new();
            while (deserialized.Count > 0)
            {
                StackItem item = deserialized.Pop();
                if (item is ContainerPlaceholder placeholder)
                {
                    switch (placeholder.Type)
                    {
                        case StackItemType.Array:
                            Array array = new(referenceCounter);
                            for (int i = 0; i < placeholder.ElementCount; i++)
                                array.Add(stack_temp.Pop());
                            item = array;
                            break;
                        case StackItemType.Struct:
                            Struct @struct = new(referenceCounter);
                            for (int i = 0; i < placeholder.ElementCount; i++)
                                @struct.Add(stack_temp.Pop());
                            item = @struct;
                            break;
                        case StackItemType.Map:
                            Map map = new(referenceCounter);
                            for (int i = 0; i < placeholder.ElementCount; i++)
                            {
                                StackItem key = stack_temp.Pop();
                                StackItem value = stack_temp.Pop();
                                map[(PrimitiveType)key] = value;
                            }
                            item = map;
                            break;
                    }
                }
                stack_temp.Push(item);
            }
            return stack_temp.Peek();
        }

        /// <summary>
        /// Serializes a <see cref=""StackItem""/> to byte array.
        /// </summary>
        /// <param name=""item"">The <see cref=""StackItem""/> to be serialized.</param>
        /// <param name=""maxSize"">The maximum size of the result.</param>
        /// <returns>The serialized byte array.</returns>
        public static byte[] Serialize(StackItem item, uint maxSize)
        {
            using MemoryStream ms = new();
            using BinaryWriter writer = new(ms, Utility.StrictUTF8, true);
            Serialize(writer, item, maxSize);
            writer.Flush();
            return ms.ToArray();
        }

        /// <summary>
        /// Serializes a <see cref=""StackItem""/> into <see cref=""BinaryWriter""/>.
        /// </summary>
        /// <param name=""writer"">The <see cref=""BinaryWriter""/> for writing data.</param>
        /// <param name=""item"">The <see cref=""StackItem""/> to be serialized.</param>
        /// <param name=""maxSize"">The maximum size of the result.</param>
        public static void Serialize(BinaryWriter writer, StackItem item, uint maxSize)
        {
            HashSet<CompoundType> serialized = new(ReferenceEqualityComparer.Instance);
            Stack<StackItem> unserialized = new();
            unserialized.Push(item);
            while (unserialized.Count > 0)
            {
                item = unserialized.Pop();
                writer.Write((byte)item.Type);
                switch (item)
                {
                    case Null _:
                        break;
                    case Boolean _:
                        writer.Write(item.GetBoolean());
                        break;
                    case Integer _:
                    case ByteString _:
                    case Buffer _:
                        writer.WriteVarBytes(item.GetSpan());
                        break;
                    case Array array:
                        if (!serialized.Add(array))
                            throw new NotSupportedException();
                        writer.WriteVarInt(array.Count);
                        for (int i = array.Count - 1; i >= 0; i--)
                            unserialized.Push(array[i]);
                        break;
                    case Map map:
                        if (!serialized.Add(map))
                            throw new NotSupportedException();
                        writer.WriteVarInt(map.Count);
                        foreach (var pair in map.Reverse())
                        {
                            unserialized.Push(pair.Value);
                            unserialized.Push(pair.Key);
                        }
                        break;
                    default:
                        throw new NotSupportedException();
                }
                writer.Flush();
                if (writer.BaseStream.Position > maxSize)
                    throw new InvalidOperationException();
            }
        }
    }",1,777 809 587 2000 123 773 587 2001 58 2002 123 777 763 2003 2004 123 2005 59 125 777 704 2006 123 2007 59 125 777 2001 40 2003 2008 44 704 2009 41 123 2004 61 2008 59 2006 61 2009 59 125 777 763 569 2010 40 2002 2011 41 328 825 744 2012 40 41 59 777 763 704 2013 40 41 328 825 744 2012 40 41 59 777 763 569 2014 40 41 328 825 744 2012 40 41 59 125 331 777 809 2002 2015 40 574 91 93 2016 44 2017 2018 44 2019 2020 61 752 41 123 860 2021 2022 61 744 40 2016 44 655 41 59 860 2023 2024 61 744 40 2022 44 2025 46 2026 44 829 41 59 792 2015 40 2024 44 2018 2027 123 2028 61 40 842 41 2016 46 2029 125 44 2020 41 59 125 331 777 809 854 2002 2015 40 2030 60 574 62 2016 44 2017 2018 44 2019 2020 61 752 41 123 688 40 2016 46 2031 41 825 744 2032 40 41 59 659 40 574 42 2033 61 2016 41 123 860 2034 2035 61 744 40 2033 44 2016 46 2036 41 59 860 2037 2038 61 744 40 2035 44 2039 46 2040 44 829 41 59 792 2015 40 2038 44 2018 2041 123 2042 61 40 842 41 2016 46 2036 125 44 2020 41 59 125 125 331 777 809 2002 2015 40 2043 2044 44 2017 2018 44 2019 2020 41 123 2045 60 2002 62 2046 61 744 40 41 59 704 2047 61 1501 59 870 40 2047 338 62 1500 41 123 2048 2049 61 40 2048 41 2044 46 2050 40 41 59 819 40 2049 41 123 579 2048 46 2051 58 2046 46 2052 40 2002 46 2053 41 59 572 59 579 2048 46 2054 58 2046 46 2052 40 2044 46 2055 40 41 41 59 572 59 579 2048 46 2056 58 2046 46 2052 40 744 2057 40 2044 46 2058 40 2056 46 2059 41 41 41 59 572 59 579 2048 46 2060 58 2046 46 2052 40 2044 46 2058 40 40 704 41 2018 46 2061 41 41 59 572 59 579 2048 46 2062 58 2062 2063 61 744 40 40 704 41 2044 46 2064 40 2018 46 2061 41 41 59 2044 46 2065 40 2063 46 2066 41 59 2046 46 2052 40 2063 41 59 572 59 579 2048 46 2067 58 579 2048 46 2068 58 123 704 2069 61 40 704 41 2044 46 2064 40 2018 46 2070 41 59 2046 46 2052 40 744 2001 40 2049 44 2069 41 41 59 2047 348 2069 59 125 572 59 579 2048 46 2071 58 123 704 2072 61 40 704 41 2044 46 2064 40 2018 46 2073 41 59 2046 46 2052 40 744 2001 40 2049 44 2072 41 41 59 2047 348 2072 42 1502 59 125 572 59 613 58 825 744 2074 40 41 59 125 688 40 2046 46 2075 62 2018 46 2076 41 825 744 2077 40 41 59 125 2045 60 2002 62 2078 61 744 40 41 59 870 40 2046 46 2079 62 1500 41 123 2002 2080 61 2046 46 2081 40 41 59 688 40 2080 712 2001 2082 41 123 819 40 2082 46 2083 41 123 579 2084 46 2085 58 2085 2086 61 744 40 2020 41 59 664 40 704 2087 61 1500 59 2087 60 2082 46 2088 59 2087 349 41 2086 46 2089 40 2078 46 2081 40 41 41 59 2080 61 2086 59 572 59 579 2084 46 2090 58 2090 64 816 61 744 40 2020 41 59 664 40 704 2087 61 1500 59 2087 60 2082 46 2088 59 2087 349 41 64 816 46 2089 40 2078 46 2081 40 41 41 59 2080 61 64 816 59 572 59 579 2084 46 2091 58 2091 2092 61 744 40 2020 41 59 664 40 704 2087 61 1500 59 2087 60 2082 46 2088 59 2087 349 41 123 2002 2093 61 2078 46 2081 40 41 59 2002 2094 61 2078 46 2081 40 41 59 2092 91 40 2095 41 2093 93 61 2094 59 125 2080 61 2092 59 572 59 125 125 2078 46 2096 40 2080 41 59 125 792 2078 46 2097 40 41 59 125 331 777 809 574 91 93 2098 40 2002 2099 44 842 2100 41 123 860 2101 2102 61 744 40 41 59 860 2103 2104 61 744 40 2102 44 2105 46 2106 44 829 41 59 2098 40 2104 44 2099 44 2100 41 59 2104 46 2107 40 41 59 792 2102 46 2108 40 41 59 125 331 777 809 865 2098 40 2109 2110 44 2002 2099 44 842 2100 41 123 2111 60 2112 62 2113 61 744 40 2114 46 2115 41 59 2116 60 2002 62 2117 61 744 40 41 59 2117 46 2118 40 2099 41 59 870 40 2117 46 2119 62 1500 41 123 2099 61 2117 46 2120 40 41 59 2110 46 2121 40 40 574 41 2099 46 2122 41 59 819 40 2099 41 123 579 2123 2124 58 572 59 579 2125 2124 58 2110 46 2121 40 2099 46 2126 40 41 41 59 572 59 579 2127 2124 58 579 2128 2124 58 579 2129 2124 58 2110 46 2130 40 2099 46 2131 40 41 41 59 572 59 579 2132 2133 58 688 40 33 2113 46 2134 40 2133 41 41 825 744 2135 40 41 59 2110 46 2136 40 2133 46 2119 41 59 664 40 704 2137 61 2133 46 2119 45 1501 59 2137 325 1500 59 2137 338 41 2117 46 2118 40 2133 91 2137 93 41 59 572 59 579 2138 2139 58 688 40 33 2113 46 2134 40 2139 41 41 825 744 2135 40 41 59 2110 46 2136 40 2139 46 2119 41 59 665 40 2140 2141 696 2139 46 2142 40 41 41 123 2117 46 2118 40 2141 46 2143 41 59 2117 46 2118 40 2141 46 2144 41 59 125 572 59 613 58 825 744 2135 40 41 59 125 2110 46 2145 40 41 59 688 40 2110 46 2146 46 2147 62 2100 41 825 744 2148 40 41 59 125 125 125 ,"{'AvgLine': 30, 'CountLine': 210, 'CountStmt': 117, 'MaxNesting': 4, 'AvgLineCode': 30, 'AvgEssential': 4, 'AvgLineBlank': 0, 'CountStmtExe': 89, 'MaxEssential': 10, 'SumEssential': 23, 'AvgCyclomatic': 7, 'CountLineCode': 168, 'CountStmtDecl': 34, 'MaxCyclomatic': 19, 'SumCyclomatic': 37, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountSemicolon': 92, 'CountDeclMethod': 5, 'CountLineCodeExe': 123, 'CountLineComment': 33, 'CountClassCoupled': 31, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 21, 'CountLineInactive': 0, 'CountDeclMethodAll': 11, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.20', 'AvgCyclomaticStrict': 7, 'MaxCyclomaticStrict': 19, 'SumCyclomaticStrict': 37, 'CountDeclClassMethod': 5, 'AvgCyclomaticModified': 4, 'CountDeclMethodPublic': 5, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 10, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 22, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 25, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79961,C#,"    internal class ByteArrayEqualityComparer : IEqualityComparer<byte[]>
    {
        public static readonly ByteArrayEqualityComparer Default = new();

        public unsafe bool Equals(byte[] x, byte[] y)
        {
            if (ReferenceEquals(x, y)) return true;
            if (x is null || y is null) return false;
            int len = x.Length;
            if (len != y.Length) return false;
            if (len == 0) return true;
            fixed (byte* xp = x, yp = y)
            {
                long* xlp = (long*)xp, ylp = (long*)yp;
                for (; len >= 8; len -= 8)
                {
                    if (*xlp != *ylp) return false;
                    xlp++;
                    ylp++;
                }
                byte* xbp = (byte*)xlp, ybp = (byte*)ylp;
                for (; len > 0; len--)
                {
                    if (*xbp != *ybp) return false;
                    xbp++;
                    ybp++;
                }
            }
            return true;
        }

        public int GetHashCode(byte[] obj)
        {
            unchecked
            {
                int hash = 17;
                foreach (byte element in obj)
                    hash = hash * 31 + element;
                return hash;
            }
        }
    }",1,710 587 2000 58 2001 60 574 91 93 62 123 777 809 780 2000 2002 61 744 40 41 59 777 854 569 2003 40 574 91 93 2004 44 574 91 93 2005 41 123 688 40 2006 40 2004 44 2005 41 41 792 829 59 688 40 2004 712 752 309 2005 712 752 41 792 655 59 704 2007 61 2004 46 2008 59 688 40 2007 340 2005 46 2008 41 792 655 59 688 40 2007 323 1500 41 792 829 59 659 40 574 42 2009 61 2004 44 2010 61 2005 41 123 726 42 2011 61 40 726 42 41 2009 44 2012 61 40 726 42 41 2010 59 664 40 59 2007 325 1502 59 2007 337 1502 41 123 688 40 42 2011 340 42 2012 41 792 655 59 2011 349 59 2012 349 59 125 574 42 2013 61 40 574 42 41 2011 44 2014 61 40 574 42 41 2012 59 664 40 59 2007 62 1500 59 2007 338 41 123 688 40 42 2013 340 42 2014 41 792 655 59 2013 349 59 2014 349 59 125 125 792 829 59 125 777 704 2015 40 574 91 93 2016 41 123 849 123 704 2017 61 1503 59 665 40 574 2018 696 2016 41 2017 61 2017 42 1503 43 2018 59 792 2017 59 125 125 125 ,"{'AvgLine': 18, 'CountLine': 42, 'CountStmt': 34, 'MaxNesting': 2, 'AvgLineCode': 18, 'AvgEssential': 5, 'AvgLineBlank': 0, 'CountStmtExe': 26, 'MaxEssential': 9, 'SumEssential': 10, 'AvgCyclomatic': 5, 'CountLineCode': 40, 'CountStmtDecl': 8, 'MaxCyclomatic': 9, 'SumCyclomatic': 11, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 2, 'CountSemicolon': 22, 'CountDeclMethod': 2, 'CountLineCodeExe': 23, 'CountLineComment': 0, 'CountClassCoupled': 5, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 8, 'CountLineInactive': 0, 'CountDeclMethodAll': 8, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 6, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 12, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 5, 'CountDeclMethodPublic': 2, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 100, 'SumCyclomaticModified': 11, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 2, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 0, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 100, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79911,C#,"    public class UT_BigDecimal
    {
        [TestMethod]
        public void TestChangeDecimals()
        {
            BigDecimal originalValue = new(new BigInteger(12300), 5);
            BigDecimal result1 = originalValue.ChangeDecimals(7);
            result1.Value.Should().Be(new BigInteger(1230000));
            result1.Decimals.Should().Be(7);
            BigDecimal result2 = originalValue.ChangeDecimals(3);
            result2.Value.Should().Be(new BigInteger(123));
            result2.Decimals.Should().Be(3);
            BigDecimal result3 = originalValue.ChangeDecimals(5);
            result3.Value.Should().Be(originalValue.Value);
            Action action = () => originalValue.ChangeDecimals(2);
            action.Should().Throw<ArgumentOutOfRangeException>();
        }

        [TestMethod]
        public void TestBigDecimalConstructor()
        {
            BigDecimal value = new(new BigInteger(45600), 7);
            value.Value.Should().Be(new BigInteger(45600));
            value.Decimals.Should().Be(7);

            value = new BigDecimal(new BigInteger(0), 5);
            value.Value.Should().Be(new BigInteger(0));
            value.Decimals.Should().Be(5);

            value = new BigDecimal(new BigInteger(-10), 0);
            value.Value.Should().Be(new BigInteger(-10));
            value.Decimals.Should().Be(0);

            value = new BigDecimal(123.456789M, 6);
            value.Value.Should().Be(new BigInteger(123456789));
            value.Decimals.Should().Be(6);

            value = new BigDecimal(-123.45M, 3);
            value.Value.Should().Be(new BigInteger(-123450));
            value.Decimals.Should().Be(3);

            value = new BigDecimal(123.45M, 2);
            value.Value.Should().Be(new BigInteger(12345));
            value.Decimals.Should().Be(2);

            value = new BigDecimal(123M, 0);
            value.Value.Should().Be(new BigInteger(123));
            value.Decimals.Should().Be(0);

            value = new BigDecimal(0M, 0);
            value.Value.Should().Be(new BigInteger(0));
            value.Decimals.Should().Be(0);

            value = new BigDecimal(5.5M, 1);
            var b = new BigDecimal(55M);
            value.Value.Should().Be(b.Value);
        }

        [TestMethod]
        public void TestGetDecimals()
        {
            BigDecimal value = new(new BigInteger(45600), 7);
            value.Sign.Should().Be(1);
            value = new BigDecimal(new BigInteger(0), 5);
            value.Sign.Should().Be(0);
            value = new BigDecimal(new BigInteger(-10), 0);
            value.Sign.Should().Be(-1);
        }

        [TestMethod]
        public void TestCompareDecimals()
        {
            BigDecimal a = new(5.5M, 1);
            BigDecimal b = new(55M);
            BigDecimal c = new(55M, 1);
            a.Equals(b).Should().Be(false);
            a.Equals(c).Should().Be(false);
            b.Equals(c).Should().Be(true);
            a.CompareTo(b).Should().Be(-1);
            a.CompareTo(c).Should().Be(-1);
            b.CompareTo(c).Should().Be(0);
        }

        [TestMethod]
        public void TestGetSign()
        {
            BigDecimal value = new(new BigInteger(45600), 7);
            value.Sign.Should().Be(1);
            value = new BigDecimal(new BigInteger(0), 5);
            value.Sign.Should().Be(0);
            value = new BigDecimal(new BigInteger(-10), 0);
            value.Sign.Should().Be(-1);
        }

        [TestMethod]
        public void TestParse()
        {
            string s = ""12345"";
            byte decimals = 0;
            BigDecimal.Parse(s, decimals).Should().Be(new BigDecimal(new BigInteger(12345), 0));

            s = ""abcdEfg"";
            Action action = () => BigDecimal.Parse(s, decimals);
            action.Should().Throw<FormatException>();
        }

        [TestMethod]
        public void TestToString()
        {
            BigDecimal value = new(new BigInteger(100000), 5);
            value.ToString().Should().Be(""1"");
            value = new BigDecimal(new BigInteger(123456), 5);
            value.ToString().Should().Be(""1.23456"");
        }

        [TestMethod]
        public void TestTryParse()
        {
            string s = ""12345"";
            byte decimals = 0;
            BigDecimal.TryParse(s, decimals, out BigDecimal result).Should().BeTrue();
            result.Should().Be(new BigDecimal(new BigInteger(12345), 0));

            s = ""12345E-5"";
            decimals = 5;
            BigDecimal.TryParse(s, decimals, out result).Should().BeTrue();
            result.Should().Be(new BigDecimal(new BigInteger(12345), 5));

            s = ""abcdEfg"";
            BigDecimal.TryParse(s, decimals, out result).Should().BeFalse();
            result.Should().Be(default(BigDecimal));

            s = ""123.45"";
            decimals = 2;
            BigDecimal.TryParse(s, decimals, out result).Should().BeTrue();
            result.Should().Be(new BigDecimal(new BigInteger(12345), 2));

            s = ""123.45E-5"";
            decimals = 7;
            BigDecimal.TryParse(s, decimals, out result).Should().BeTrue();
            result.Should().Be(new BigDecimal(new BigInteger(12345), 7));

            s = ""12345E-5"";
            decimals = 3;
            BigDecimal.TryParse(s, decimals, out result).Should().BeFalse();
            result.Should().Be(default(BigDecimal));

            s = ""1.2345"";
            decimals = 3;
            BigDecimal.TryParse(s, decimals, out result).Should().BeFalse();
            result.Should().Be(default(BigDecimal));

            s = ""1.2345E-5"";
            decimals = 3;
            BigDecimal.TryParse(s, decimals, out result).Should().BeFalse();
            result.Should().Be(default(BigDecimal));

            s = ""12345"";
            decimals = 3;
            BigDecimal.TryParse(s, decimals, out result).Should().BeTrue();
            result.Should().Be(new BigDecimal(new BigInteger(12345000), 3));

            s = ""12345E-2"";
            decimals = 3;
            BigDecimal.TryParse(s, decimals, out result).Should().BeTrue();
            result.Should().Be(new BigDecimal(new BigInteger(123450), 3));

            s = ""123.45"";
            decimals = 3;
            BigDecimal.TryParse(s, decimals, out result).Should().BeTrue();
            result.Should().Be(new BigDecimal(new BigInteger(123450), 3));

            s = ""123.45E3"";
            decimals = 3;
            BigDecimal.TryParse(s, decimals, out result).Should().BeTrue();
            result.Should().Be(new BigDecimal(new BigInteger(123450000), 3));

            s = ""a456bcdfg"";
            decimals = 0;
            BigDecimal.TryParse(s, decimals, out result).Should().BeFalse();
            result.Should().Be(default(BigDecimal));

            s = ""a456bce-5"";
            decimals = 5;
            BigDecimal.TryParse(s, decimals, out result).Should().BeFalse();
            result.Should().Be(default(BigDecimal));

            s = ""a4.56bcd"";
            decimals = 5;
            BigDecimal.TryParse(s, decimals, out result).Should().BeFalse();
            result.Should().Be(default(BigDecimal));

            s = ""a4.56bce3"";
            decimals = 2;
            BigDecimal.TryParse(s, decimals, out result).Should().BeFalse();
            result.Should().Be(default(BigDecimal));

            s = ""a456bcd"";
            decimals = 2;
            BigDecimal.TryParse(s, decimals, out result).Should().BeFalse();
            result.Should().Be(default(BigDecimal));

            s = ""a456bcdE3"";
            decimals = 2;
            BigDecimal.TryParse(s, decimals, out result).Should().BeFalse();
            result.Should().Be(default(BigDecimal));

            s = ""a456b.cd"";
            decimals = 5;
            BigDecimal.TryParse(s, decimals, out result).Should().BeFalse();
            result.Should().Be(default(BigDecimal));

            s = ""a456b.cdE3"";
            decimals = 5;
            BigDecimal.TryParse(s, decimals, out result).Should().BeFalse();
            result.Should().Be(default(BigDecimal));
        }
    }",1,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 2003 2004 61 744 40 744 2005 40 1506 41 44 1502 41 59 2003 2006 61 2004 46 2007 40 1502 41 59 2006 46 2008 46 2009 40 41 46 2010 40 744 2005 40 1508 41 41 59 2006 46 2011 46 2009 40 41 46 2010 40 1502 41 59 2003 2012 61 2004 46 2007 40 1502 41 59 2012 46 2008 46 2009 40 41 46 2010 40 744 2005 40 1504 41 41 59 2012 46 2011 46 2009 40 41 46 2010 40 1502 41 59 2003 2013 61 2004 46 2007 40 1502 41 59 2013 46 2008 46 2009 40 41 46 2010 40 2004 46 2008 41 59 2014 2015 61 40 41 328 2004 46 2007 40 1502 41 59 2015 46 2009 40 41 46 2016 60 2017 62 40 41 59 125 91 2001 93 777 865 2018 40 41 123 2019 2020 61 744 40 744 2021 40 1506 41 44 1502 41 59 2020 46 2022 46 2023 40 41 46 2024 40 744 2021 40 1506 41 41 59 2020 46 2025 46 2023 40 41 46 2024 40 1502 41 59 2020 61 744 2019 40 744 2021 40 1500 41 44 1502 41 59 2020 46 2022 46 2023 40 41 46 2024 40 744 2021 40 1500 41 41 59 2020 46 2025 46 2023 40 41 46 2024 40 1502 41 59 2020 61 744 2019 40 744 2021 40 45 1502 41 44 1500 41 59 2020 46 2022 46 2023 40 41 46 2024 40 744 2021 40 45 1502 41 41 59 2020 46 2025 46 2023 40 41 46 2024 40 1500 41 59 2020 61 744 2019 40 1504 44 1502 41 59 2020 46 2022 46 2023 40 41 46 2024 40 744 2021 40 1510 41 41 59 2020 46 2025 46 2023 40 41 46 2024 40 1502 41 59 2020 61 744 2019 40 45 1504 44 1502 41 59 2020 46 2022 46 2023 40 41 46 2024 40 744 2021 40 45 1507 41 41 59 2020 46 2025 46 2023 40 41 46 2024 40 1502 41 59 2020 61 744 2019 40 1504 44 1502 41 59 2020 46 2022 46 2023 40 41 46 2024 40 744 2021 40 1506 41 41 59 2020 46 2025 46 2023 40 41 46 2024 40 1502 41 59 2020 61 744 2019 40 1504 44 1500 41 59 2020 46 2022 46 2023 40 41 46 2024 40 744 2021 40 1504 41 41 59 2020 46 2025 46 2023 40 41 46 2024 40 1500 41 59 2020 61 744 2019 40 1500 44 1500 41 59 2020 46 2022 46 2023 40 41 46 2024 40 744 2021 40 1500 41 41 59 2020 46 2025 46 2023 40 41 46 2024 40 1500 41 59 2020 61 744 2019 40 1502 44 1501 41 59 2026 2027 61 744 2019 40 1503 41 59 2020 46 2022 46 2023 40 41 46 2024 40 2027 46 2022 41 59 125 91 2001 93 777 865 2028 40 41 123 2029 2030 61 744 40 744 2031 40 1506 41 44 1502 41 59 2030 46 2032 46 2033 40 41 46 2034 40 1501 41 59 2030 61 744 2029 40 744 2031 40 1500 41 44 1502 41 59 2030 46 2032 46 2033 40 41 46 2034 40 1500 41 59 2030 61 744 2029 40 744 2031 40 45 1502 41 44 1500 41 59 2030 46 2032 46 2033 40 41 46 2034 40 45 1501 41 59 125 91 2001 93 777 865 2035 40 41 123 2036 2037 61 744 40 1502 44 1501 41 59 2036 2038 61 744 40 1503 41 59 2036 2039 61 744 40 1503 44 1501 41 59 2037 46 2040 40 2038 41 46 2041 40 41 46 2042 40 655 41 59 2037 46 2040 40 2039 41 46 2041 40 41 46 2042 40 655 41 59 2038 46 2040 40 2039 41 46 2041 40 41 46 2042 40 829 41 59 2037 46 2043 40 2038 41 46 2041 40 41 46 2042 40 45 1501 41 59 2037 46 2043 40 2039 41 46 2041 40 41 46 2042 40 45 1501 41 59 2038 46 2043 40 2039 41 46 2041 40 41 46 2042 40 1500 41 59 125 91 2001 93 777 865 2044 40 41 123 2045 2046 61 744 40 744 2047 40 1506 41 44 1502 41 59 2046 46 2048 46 2049 40 41 46 2050 40 1501 41 59 2046 61 744 2045 40 744 2047 40 1500 41 44 1502 41 59 2046 46 2048 46 2049 40 41 46 2050 40 1500 41 59 2046 61 744 2045 40 744 2047 40 45 1502 41 44 1500 41 59 2046 46 2048 46 2049 40 41 46 2050 40 45 1501 41 59 125 91 2001 93 777 865 2051 40 41 123 815 2052 61 362 59 574 2053 61 1500 59 2054 46 2055 40 2052 44 2053 41 46 2056 40 41 46 2057 40 744 2054 40 744 2058 40 1506 41 44 1500 41 41 59 2052 61 362 59 2059 2060 61 40 41 328 2054 46 2055 40 2052 44 2053 41 59 2060 46 2056 40 41 46 2061 60 2062 62 40 41 59 125 91 2001 93 777 865 2063 40 41 123 2064 2065 61 744 40 744 2066 40 1506 41 44 1502 41 59 2065 46 2067 40 41 46 2068 40 41 46 2069 40 362 41 59 2065 61 744 2064 40 744 2066 40 1507 41 44 1502 41 59 2065 46 2067 40 41 46 2068 40 41 46 2069 40 362 41 59 125 91 2001 93 777 865 2070 40 41 123 815 2071 61 362 59 574 2072 61 1500 59 2073 46 2074 40 2071 44 2072 44 762 2073 2075 41 46 2076 40 41 46 2077 40 41 59 2075 46 2076 40 41 46 2078 40 744 2073 40 744 2079 40 1506 41 44 1500 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2077 40 41 59 2075 46 2076 40 41 46 2078 40 744 2073 40 744 2079 40 1506 41 44 1502 41 41 59 2071 61 362 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2080 40 41 59 2075 46 2076 40 41 46 2078 40 613 40 2073 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2077 40 41 59 2075 46 2076 40 41 46 2078 40 744 2073 40 744 2079 40 1506 41 44 1502 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2077 40 41 59 2075 46 2076 40 41 46 2078 40 744 2073 40 744 2079 40 1506 41 44 1502 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2080 40 41 59 2075 46 2076 40 41 46 2078 40 613 40 2073 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2080 40 41 59 2075 46 2076 40 41 46 2078 40 613 40 2073 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2080 40 41 59 2075 46 2076 40 41 46 2078 40 613 40 2073 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2077 40 41 59 2075 46 2076 40 41 46 2078 40 744 2073 40 744 2079 40 1509 41 44 1502 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2077 40 41 59 2075 46 2076 40 41 46 2078 40 744 2073 40 744 2079 40 1507 41 44 1502 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2077 40 41 59 2075 46 2076 40 41 46 2078 40 744 2073 40 744 2079 40 1507 41 44 1502 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2077 40 41 59 2075 46 2076 40 41 46 2078 40 744 2073 40 744 2079 40 1510 41 44 1502 41 41 59 2071 61 362 59 2072 61 1500 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2080 40 41 59 2075 46 2076 40 41 46 2078 40 613 40 2073 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2080 40 41 59 2075 46 2076 40 41 46 2078 40 613 40 2073 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2080 40 41 59 2075 46 2076 40 41 46 2078 40 613 40 2073 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2080 40 41 59 2075 46 2076 40 41 46 2078 40 613 40 2073 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2080 40 41 59 2075 46 2076 40 41 46 2078 40 613 40 2073 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2080 40 41 59 2075 46 2076 40 41 46 2078 40 613 40 2073 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2080 40 41 59 2075 46 2076 40 41 46 2078 40 613 40 2073 41 41 59 2071 61 362 59 2072 61 1502 59 2073 46 2074 40 2071 44 2072 44 762 2075 41 46 2076 40 41 46 2080 40 41 59 2075 46 2076 40 41 46 2078 40 613 40 2073 41 41 59 125 125 ,"{'AvgLine': 25, 'CountLine': 218, 'CountStmt': 157, 'MaxNesting': 0, 'AvgLineCode': 21, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 134, 'MaxEssential': 1, 'SumEssential': 10, 'AvgCyclomatic': 1, 'CountLineCode': 183, 'CountStmtDecl': 27, 'MaxCyclomatic': 1, 'SumCyclomatic': 10, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 35, 'CountSemicolon': 148, 'CountDeclMethod': 8, 'CountLineCodeExe': 148, 'CountLineComment': 0, 'CountClassCoupled': 7, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 35, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 10, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 8, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 10, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 8, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79827,C#,"    public class ContractParameter
    {
        /// <summary>
        /// The type of the parameter.
        /// </summary>
        public ContractParameterType Type;

        /// <summary>
        /// The value of the parameter.
        /// </summary>
        public object Value;

        /// <summary>
        /// Initializes a new instance of the <see cref=""ContractParameter""/> class.
        /// </summary>
        public ContractParameter() { }

        /// <summary>
        /// Initializes a new instance of the <see cref=""ContractParameter""/> class with the specified type.
        /// </summary>
        /// <param name=""type"">The type of the parameter.</param>
        public ContractParameter(ContractParameterType type)
        {
            this.Type = type;
            this.Value = type switch
            {
                ContractParameterType.Any => null,
                ContractParameterType.Signature => new byte[64],
                ContractParameterType.Boolean => false,
                ContractParameterType.Integer => 0,
                ContractParameterType.Hash160 => new UInt160(),
                ContractParameterType.Hash256 => new UInt256(),
                ContractParameterType.ByteArray => Array.Empty<byte>(),
                ContractParameterType.PublicKey => ECCurve.Secp256r1.G,
                ContractParameterType.String => """",
                ContractParameterType.Array => new List<ContractParameter>(),
                ContractParameterType.Map => new List<KeyValuePair<ContractParameter, ContractParameter>>(),
                _ => throw new ArgumentException(null, nameof(type)),
            };
        }

        /// <summary>
        /// Converts the parameter from a JSON object.
        /// </summary>
        /// <param name=""json"">The parameter represented by a JSON object.</param>
        /// <returns>The converted parameter.</returns>
        public static ContractParameter FromJson(JObject json)
        {
            ContractParameter parameter = new()
            {
                Type = Enum.Parse<ContractParameterType>(json[""type""].GetString())
            };
            if (json[""value""] != null)
                parameter.Value = parameter.Type switch
                {
                    ContractParameterType.Signature or ContractParameterType.ByteArray => Convert.FromBase64String(json[""value""].AsString()),
                    ContractParameterType.Boolean => json[""value""].AsBoolean(),
                    ContractParameterType.Integer => BigInteger.Parse(json[""value""].AsString()),
                    ContractParameterType.Hash160 => UInt160.Parse(json[""value""].AsString()),
                    ContractParameterType.Hash256 => UInt256.Parse(json[""value""].AsString()),
                    ContractParameterType.PublicKey => ECPoint.Parse(json[""value""].AsString(), ECCurve.Secp256r1),
                    ContractParameterType.String => json[""value""].AsString(),
                    ContractParameterType.Array => ((JArray)json[""value""]).Select(p => FromJson(p)).ToList(),
                    ContractParameterType.Map => ((JArray)json[""value""]).Select(p => new KeyValuePair<ContractParameter, ContractParameter>(FromJson(p[""key""]), FromJson(p[""value""]))).ToList(),
                    _ => throw new ArgumentException(null, nameof(json)),
                };
            return parameter;
        }

        /// <summary>
        /// Sets the value of the parameter.
        /// </summary>
        /// <param name=""text"">The <see cref=""string""/> form of the value.</param>
        public void SetValue(string text)
        {
            switch (Type)
            {
                case ContractParameterType.Signature:
                    byte[] signature = text.HexToBytes();
                    if (signature.Length != 64) throw new FormatException();
                    Value = signature;
                    break;
                case ContractParameterType.Boolean:
                    Value = string.Equals(text, bool.TrueString, StringComparison.OrdinalIgnoreCase);
                    break;
                case ContractParameterType.Integer:
                    Value = BigInteger.Parse(text);
                    break;
                case ContractParameterType.Hash160:
                    Value = UInt160.Parse(text);
                    break;
                case ContractParameterType.Hash256:
                    Value = UInt256.Parse(text);
                    break;
                case ContractParameterType.ByteArray:
                    Value = text.HexToBytes();
                    break;
                case ContractParameterType.PublicKey:
                    Value = ECPoint.Parse(text, ECCurve.Secp256r1);
                    break;
                case ContractParameterType.String:
                    Value = text;
                    break;
                default:
                    throw new ArgumentException();
            }
        }

        /// <summary>
        /// Converts the parameter to a JSON object.
        /// </summary>
        /// <returns>The parameter represented by a JSON object.</returns>
        public JObject ToJson()
        {
            return ToJson(this, null);
        }

        private static JObject ToJson(ContractParameter parameter, HashSet<ContractParameter> context)
        {
            JObject json = new();
            json[""type""] = parameter.Type;
            if (parameter.Value != null)
                switch (parameter.Type)
                {
                    case ContractParameterType.Signature:
                    case ContractParameterType.ByteArray:
                        json[""value""] = Convert.ToBase64String((byte[])parameter.Value);
                        break;
                    case ContractParameterType.Boolean:
                        json[""value""] = (bool)parameter.Value;
                        break;
                    case ContractParameterType.Integer:
                    case ContractParameterType.Hash160:
                    case ContractParameterType.Hash256:
                    case ContractParameterType.PublicKey:
                    case ContractParameterType.String:
                        json[""value""] = parameter.Value.ToString();
                        break;
                    case ContractParameterType.Array:
                        if (context is null)
                            context = new HashSet<ContractParameter>();
                        else if (context.Contains(parameter))
                            throw new InvalidOperationException();
                        context.Add(parameter);
                        json[""value""] = new JArray(((IList<ContractParameter>)parameter.Value).Select(p => ToJson(p, context)));
                        break;
                    case ContractParameterType.Map:
                        if (context is null)
                            context = new HashSet<ContractParameter>();
                        else if (context.Contains(parameter))
                            throw new InvalidOperationException();
                        context.Add(parameter);
                        json[""value""] = new JArray(((IList<KeyValuePair<ContractParameter, ContractParameter>>)parameter.Value).Select(p =>
                        {
                            JObject item = new();
                            item[""key""] = ToJson(p.Key, context);
                            item[""value""] = ToJson(p.Value, context);
                            return item;
                        }));
                        break;
                }
            return json;
        }

        public override string ToString()
        {
            return ToString(this, null);
        }

        private static string ToString(ContractParameter parameter, HashSet<ContractParameter> context)
        {
            switch (parameter.Value)
            {
                case null:
                    return ""(null)"";
                case byte[] data:
                    return data.ToHexString();
                case IList<ContractParameter> data:
                    if (context is null) context = new HashSet<ContractParameter>();
                    if (context.Contains(parameter))
                    {
                        return ""(array)"";
                    }
                    else
                    {
                        context.Add(parameter);
                        StringBuilder sb = new();
                        sb.Append('[');
                        foreach (ContractParameter item in data)
                        {
                            sb.Append(ToString(item, context));
                            sb.Append("", "");
                        }
                        if (data.Count > 0)
                            sb.Length -= 2;
                        sb.Append(']');
                        return sb.ToString();
                    }
                case IList<KeyValuePair<ContractParameter, ContractParameter>> data:
                    if (context is null) context = new HashSet<ContractParameter>();
                    if (context.Contains(parameter))
                    {
                        return ""(map)"";
                    }
                    else
                    {
                        context.Add(parameter);
                        StringBuilder sb = new();
                        sb.Append('[');
                        foreach (var item in data)
                        {
                            sb.Append('{');
                            sb.Append(ToString(item.Key, context));
                            sb.Append(',');
                            sb.Append(ToString(item.Value, context));
                            sb.Append('}');
                            sb.Append("", "");
                        }
                        if (data.Count > 0)
                            sb.Length -= 2;
                        sb.Append(']');
                        return sb.ToString();
                    }
                default:
                    return parameter.Value.ToString();
            }
        }
    }",1,777 587 2000 123 331 777 2001 2002 59 331 777 755 2003 59 331 777 2000 40 41 123 125 331 777 2000 40 2001 2004 41 123 823 46 2002 61 2004 59 823 46 2003 61 2004 819 123 2001 46 2005 328 752 44 2001 46 2006 328 744 574 91 1503 93 44 2001 46 2007 328 655 44 2001 46 2008 328 1500 44 2001 46 2009 328 744 2010 40 41 44 2001 46 2011 328 744 2012 40 41 44 2001 46 2013 328 2014 46 2015 60 574 62 40 41 44 2001 46 2016 328 2017 46 2018 46 2019 44 2001 46 2020 328 362 44 2001 46 2014 328 744 2021 60 2000 62 40 41 44 2001 46 2022 328 744 2021 60 2023 60 2000 44 2000 355 40 41 44 2024 328 825 744 2025 40 752 44 2026 40 2004 41 41 44 125 59 125 331 777 809 2000 2027 40 2028 2029 41 123 2000 2030 61 744 40 41 123 2002 61 2031 46 2032 60 2001 62 40 2029 91 362 93 46 2033 40 41 41 125 59 688 40 2029 91 362 93 340 752 41 2030 46 2003 61 2030 46 2002 819 123 2001 46 2034 2035 2001 46 2036 328 2037 46 2038 40 2029 91 362 93 46 2039 40 41 41 44 2001 46 2040 328 2029 91 362 93 46 2041 40 41 44 2001 46 2042 328 2043 46 2044 40 2029 91 362 93 46 2039 40 41 41 44 2001 46 2045 328 2046 46 2044 40 2029 91 362 93 46 2039 40 41 41 44 2001 46 2047 328 2048 46 2044 40 2029 91 362 93 46 2039 40 41 41 44 2001 46 2049 328 2050 46 2044 40 2029 91 362 93 46 2039 40 41 44 2051 46 2052 41 44 2001 46 2053 328 2029 91 362 93 46 2039 40 41 44 2001 46 2054 328 40 40 2055 41 2029 91 362 93 41 46 2056 40 2057 328 2027 40 2057 41 41 46 2058 40 41 44 2001 46 2059 328 40 40 2055 41 2029 91 362 93 41 46 2056 40 2057 328 744 2060 60 2000 44 2000 62 40 2027 40 2057 91 362 93 41 44 2027 40 2057 91 362 93 41 41 41 46 2058 40 41 44 2061 328 825 744 2062 40 752 44 2063 40 2029 41 41 44 125 59 792 2030 59 125 331 777 865 2064 40 815 2065 41 123 819 40 2002 41 123 579 2001 46 2066 58 574 91 93 2067 61 2065 46 2068 40 41 59 688 40 2067 46 2069 340 1503 41 825 744 2070 40 41 59 2003 61 2067 59 572 59 579 2001 46 2071 58 2003 61 815 46 2072 40 2065 44 569 46 2073 44 2074 46 2075 41 59 572 59 579 2001 46 2076 58 2003 61 2077 46 2078 40 2065 41 59 572 59 579 2001 46 2079 58 2003 61 2080 46 2078 40 2065 41 59 572 59 579 2001 46 2081 58 2003 61 2082 46 2078 40 2065 41 59 572 59 579 2001 46 2083 58 2003 61 2065 46 2068 40 41 59 572 59 579 2001 46 2084 58 2003 61 2085 46 2078 40 2065 44 2086 46 2087 41 59 572 59 579 2001 46 2088 58 2003 61 2065 59 572 59 613 58 825 744 2089 40 41 59 125 125 331 777 2028 2090 40 41 123 792 2090 40 823 44 752 41 59 125 773 809 2028 2090 40 2000 2091 44 2092 60 2000 62 2093 41 123 2028 2029 61 744 40 41 59 2029 91 362 93 61 2091 46 2002 59 688 40 2091 46 2003 340 752 41 819 40 2091 46 2002 41 123 579 2001 46 2094 58 579 2001 46 2095 58 2029 91 362 93 61 2096 46 2097 40 40 574 91 93 41 2091 46 2003 41 59 572 59 579 2001 46 2098 58 2029 91 362 93 61 40 569 41 2091 46 2003 59 572 59 579 2001 46 2099 58 579 2001 46 2100 58 579 2001 46 2101 58 579 2001 46 2102 58 579 2001 46 2103 58 2029 91 362 93 61 2091 46 2003 46 2104 40 41 59 572 59 579 2001 46 2105 58 688 40 2093 712 752 41 2093 61 744 2092 60 2000 62 40 41 59 630 688 40 2093 46 2106 40 2091 41 41 825 744 2107 40 41 59 2093 46 2108 40 2091 41 59 2029 91 362 93 61 744 2109 40 40 40 2110 60 2000 62 41 2091 46 2003 41 46 2111 40 2112 328 2090 40 2112 44 2093 41 41 41 59 572 59 579 2001 46 2113 58 688 40 2093 712 752 41 2093 61 744 2092 60 2000 62 40 41 59 630 688 40 2093 46 2106 40 2091 41 41 825 744 2107 40 41 59 2093 46 2108 40 2091 41 59 2029 91 362 93 61 744 2109 40 40 40 2110 60 2114 60 2000 44 2000 355 41 2091 46 2003 41 46 2111 40 2112 328 123 2028 2115 61 744 40 41 59 2115 91 362 93 61 2090 40 2112 46 2116 44 2093 41 59 2115 91 362 93 61 2090 40 2112 46 2003 44 2093 41 59 792 2115 59 125 41 41 59 572 59 125 792 2029 59 125 777 763 815 2117 40 41 123 792 2117 40 823 44 752 41 59 125 773 809 815 2117 40 2000 2091 44 2092 60 2000 62 2093 41 123 819 40 2091 46 2003 41 123 579 752 58 792 362 59 579 574 91 93 2118 58 792 2118 46 2119 40 41 59 579 2120 60 2000 62 2118 58 688 40 2093 712 752 41 2093 61 744 2092 60 2000 62 40 41 59 688 40 2093 46 2121 40 2091 41 41 123 792 362 59 125 630 123 2093 46 2122 40 2091 41 59 2123 2124 61 744 40 41 59 2124 46 2125 40 314 41 59 665 40 2000 2126 696 2118 41 123 2124 46 2125 40 2117 40 2126 44 2093 41 41 59 2124 46 2125 40 362 41 59 125 688 40 2118 46 2127 62 1500 41 2124 46 2128 337 1502 59 2124 46 2125 40 314 41 59 792 2124 46 2117 40 41 59 125 579 2120 60 2129 60 2000 44 2000 355 2118 58 688 40 2093 712 752 41 2093 61 744 2092 60 2000 62 40 41 59 688 40 2093 46 2121 40 2091 41 41 123 792 362 59 125 630 123 2093 46 2130 40 2091 41 59 2131 2132 61 744 40 41 59 2132 46 2133 40 314 41 59 665 40 2134 2135 696 2118 41 123 2132 46 2133 40 314 41 59 2132 46 2133 40 2117 40 2135 46 2136 44 2093 41 41 59 2132 46 2133 40 314 41 59 2132 46 2133 40 2117 40 2135 46 2003 44 2093 41 41 59 2132 46 2133 40 314 41 59 2132 46 2133 40 362 41 59 125 688 40 2118 46 2137 62 1500 41 2132 46 2138 337 1502 59 2132 46 2133 40 314 41 59 792 2132 46 2117 40 41 59 125 613 58 792 2091 46 2003 46 2117 40 41 59 125 125 125 ,"{'AvgLine': 23, 'CountLine': 228, 'CountStmt': 105, 'MaxNesting': 3, 'AvgLineCode': 23, 'AvgEssential': 4, 'AvgLineBlank': 0, 'CountStmtExe': 89, 'MaxEssential': 11, 'SumEssential': 37, 'AvgCyclomatic': 5, 'CountLineCode': 193, 'CountStmtDecl': 17, 'MaxCyclomatic': 16, 'SumCyclomatic': 49, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 9, 'CountSemicolon': 78, 'CountDeclMethod': 8, 'CountLineCodeExe': 143, 'CountLineComment': 26, 'CountClassCoupled': 21, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 18, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.13', 'AvgCyclomaticStrict': 5, 'MaxCyclomaticStrict': 16, 'SumCyclomaticStrict': 49, 'CountDeclClassMethod': 3, 'AvgCyclomaticModified': 3, 'CountDeclMethodPublic': 6, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 10, 'PercentLackOfCohesion': 43, 'SumCyclomaticModified': 30, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 5, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 12, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 25, 'CountDeclInstanceVariablePublic': 2, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79849,C#,"    public class UT_IOHelper
    {
        [TestMethod]
        public void TestAsSerializableGeneric()
        {
            byte[] caseArray = new byte[] { 0x00,0x00,0x00,0x00,0x00,
                                            0x00,0x00,0x00,0x00,0x00,
                                            0x00,0x00,0x00,0x00,0x00,
                                            0x00,0x00,0x00,0x00,0x00 };
            UInt160 result = Neo.IO.Helper.AsSerializable<UInt160>(caseArray);
            Assert.AreEqual(UInt160.Zero, result);
        }

        [TestMethod]
        public void TestReadFixedBytes()
        {
            byte[] data = new byte[] { 0x01, 0x02, 0x03, 0x04 };

            // Less data

            using (var reader = new BinaryReader(new MemoryStream(data), Encoding.UTF8, false))
            {
                byte[] result = Neo.IO.Helper.ReadFixedBytes(reader, 3);

                Assert.AreEqual(""010203"", result.ToHexString());
                Assert.AreEqual(3, reader.BaseStream.Position);
            }

            // Same data

            using (var reader = new BinaryReader(new MemoryStream(data), Encoding.UTF8, false))
            {
                byte[] result = Neo.IO.Helper.ReadFixedBytes(reader, 4);

                Assert.AreEqual(""01020304"", result.ToHexString());
                Assert.AreEqual(4, reader.BaseStream.Position);
            }

            // More data

            using (var reader = new BinaryReader(new MemoryStream(data), Encoding.UTF8, false))
            {
                Assert.ThrowsException<FormatException>(() => Neo.IO.Helper.ReadFixedBytes(reader, 5));
                Assert.AreEqual(4, reader.BaseStream.Position);
            }
        }

        [TestMethod]
        public void TestNullableArray()
        {
            var caseArray = new UInt160[]
            {
                null, UInt160.Zero, new UInt160(
                new byte[] {
                    0xAA,0x00,0x00,0x00,0x00,
                    0xBB,0x00,0x00,0x00,0x00,
                    0xCC,0x00,0x00,0x00,0x00,
                    0xDD,0x00,0x00,0x00,0x00
                })
            };

            byte[] data;
            using (var stream = new MemoryStream())
            using (var writter = new BinaryWriter(stream))
            {
                Neo.IO.Helper.WriteNullableArray(writter, caseArray);
                data = stream.ToArray();
            }

            // Read Error

            using (var stream = new MemoryStream(data))
            using (var reader = new BinaryReader(stream))
            {
                Assert.ThrowsException<FormatException>(() => Neo.IO.Helper.ReadNullableArray<UInt160>(reader, 2));
            }

            // Read 100%

            using (var stream = new MemoryStream(data))
            using (var reader = new BinaryReader(stream))
            {
                var read = Neo.IO.Helper.ReadNullableArray<UInt160>(reader);
                CollectionAssert.AreEqual(caseArray, read);
            }
        }

        [TestMethod]
        public void TestAsSerializable()
        {
            for (int i = 0; i < 2; i++)
            {
                if (i == 0)
                {
                    byte[] caseArray = new byte[] { 0x00,0x00,0x00,0x00,0x00,
                                                    0x00,0x00,0x00,0x00,0x00,
                                                    0x00,0x00,0x00,0x00,0x00,
                                                    0x00,0x00,0x00,0x00,0x00 };
                    ISerializable result = Neo.IO.Helper.AsSerializable(caseArray, typeof(UInt160));
                    Assert.AreEqual(UInt160.Zero, result);
                }
                else
                {
                    Action action = () => Neo.IO.Helper.AsSerializable(new byte[0], typeof(Double));
                    action.Should().Throw<InvalidCastException>();
                }
            }
        }

        [TestMethod]
        public void TestCompression()
        {
            var data = new byte[] { 1, 2, 3, 4 };
            var byteArray = Neo.IO.Helper.CompressLz4(data);
            var result = Neo.IO.Helper.DecompressLz4(byteArray, byte.MaxValue);

            CollectionAssert.AreEqual(result, data);

            // Compress

            data = new byte[255];
            for (int x = 0; x < data.Length; x++) data[x] = 1;

            byteArray = Neo.IO.Helper.CompressLz4(data);
            result = Neo.IO.Helper.DecompressLz4(byteArray, byte.MaxValue);

            Assert.IsTrue(byteArray.Length < result.Length);
            CollectionAssert.AreEqual(result, data);

            // Error max length

            Assert.ThrowsException<FormatException>(() => Neo.IO.Helper.DecompressLz4(byteArray, byte.MaxValue - 1));
            Assert.ThrowsException<FormatException>(() => Neo.IO.Helper.DecompressLz4(byteArray, -1));

            // Error length

            byteArray[0]++;
            Assert.ThrowsException<FormatException>(() => Neo.IO.Helper.DecompressLz4(byteArray, byte.MaxValue));
        }

        [TestMethod]
        public void TestAsSerializableArray()
        {
            byte[] byteArray = Neo.IO.Helper.ToByteArray(new UInt160[] { UInt160.Zero });
            UInt160[] result = Neo.IO.Helper.AsSerializableArray<UInt160>(byteArray);
            Assert.AreEqual(1, result.Length);
            Assert.AreEqual(UInt160.Zero, result[0]);
        }

        [TestMethod]
        public void TestGetVarSizeInt()
        {
            for (int i = 0; i < 3; i++)
            {
                if (i == 0)
                {
                    int result = Neo.IO.Helper.GetVarSize(1);
                    Assert.AreEqual(1, result);
                }
                else if (i == 1)
                {
                    int result = Neo.IO.Helper.GetVarSize(0xFFFF);
                    Assert.AreEqual(3, result);
                }
                else
                {
                    int result = Neo.IO.Helper.GetVarSize(0xFFFFFF);
                    Assert.AreEqual(5, result);
                }
            }
        }
        enum TestEnum0 : sbyte
        {
            case1 = 1, case2 = 2
        }

        enum TestEnum1 : byte
        {
            case1 = 1, case2 = 2
        }

        enum TestEnum2 : short
        {
            case1 = 1, case2 = 2
        }

        enum TestEnum3 : ushort
        {
            case1 = 1, case2 = 2
        }

        enum TestEnum4 : int
        {
            case1 = 1, case2 = 2
        }

        enum TestEnum5 : uint
        {
            case1 = 1, case2 = 2
        }

        enum TestEnum6 : long
        {
            case1 = 1, case2 = 2
        }

        [TestMethod]
        public void TestGetVarSizeGeneric()
        {
            for (int i = 0; i < 9; i++)
            {
                if (i == 0)
                {
                    int result = Neo.IO.Helper.GetVarSize(new UInt160[] { UInt160.Zero });
                    Assert.AreEqual(21, result);
                }
                else if (i == 1)//sbyte
                {
                    List<TestEnum0> initList = new List<TestEnum0>
                    {
                        TestEnum0.case1
                    };
                    IReadOnlyCollection<TestEnum0> testList = initList.AsReadOnly();
                    int result = Neo.IO.Helper.GetVarSize(testList);
                    Assert.AreEqual(2, result);
                }
                else if (i == 2)//byte
                {
                    List<TestEnum1> initList = new List<TestEnum1>
                    {
                        TestEnum1.case1
                    };
                    IReadOnlyCollection<TestEnum1> testList = initList.AsReadOnly();
                    int result = Neo.IO.Helper.GetVarSize(testList);
                    Assert.AreEqual(2, result);
                }
                else if (i == 3)//short
                {
                    List<TestEnum2> initList = new List<TestEnum2>
                    {
                        TestEnum2.case1
                    };
                    IReadOnlyCollection<TestEnum2> testList = initList.AsReadOnly();
                    int result = Neo.IO.Helper.GetVarSize(testList);
                    Assert.AreEqual(3, result);
                }
                else if (i == 4)//ushort
                {
                    List<TestEnum3> initList = new List<TestEnum3>
                    {
                        TestEnum3.case1
                    };
                    IReadOnlyCollection<TestEnum3> testList = initList.AsReadOnly();
                    int result = Neo.IO.Helper.GetVarSize(testList);
                    Assert.AreEqual(3, result);
                }
                else if (i == 5)//int
                {
                    List<TestEnum4> initList = new List<TestEnum4>
                    {
                        TestEnum4.case1
                    };
                    IReadOnlyCollection<TestEnum4> testList = initList.AsReadOnly();
                    int result = Neo.IO.Helper.GetVarSize(testList);
                    Assert.AreEqual(5, result);
                }
                else if (i == 6)//uint
                {
                    List<TestEnum5> initList = new List<TestEnum5>
                    {
                        TestEnum5.case1
                    };
                    IReadOnlyCollection<TestEnum5> testList = initList.AsReadOnly();
                    int result = Neo.IO.Helper.GetVarSize(testList);
                    Assert.AreEqual(5, result);
                }
                else if (i == 7)//long
                {
                    List<TestEnum6> initList = new List<TestEnum6>
                    {
                        TestEnum6.case1
                    };
                    IReadOnlyCollection<TestEnum6> testList = initList.AsReadOnly();
                    int result = Neo.IO.Helper.GetVarSize(testList);
                    Assert.AreEqual(9, result);
                }
                else if (i == 8)
                {
                    List<int> initList = new List<int>
                    {
                        1
                    };
                    IReadOnlyCollection<int> testList = initList.AsReadOnly();
                    int result = Neo.IO.Helper.GetVarSize<int>(testList);
                    Assert.AreEqual(5, result);
                }
            }
        }

        [TestMethod]
        public void TestGetVarSizeString()
        {
            int result = Neo.IO.Helper.GetVarSize(""AA"");
            Assert.AreEqual(3, result);
        }

        [TestMethod]
        public void TestReadFixedString()
        {
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);
            Neo.IO.Helper.WriteFixedString(writer, ""AA"", Encoding.UTF8.GetBytes(""AA"").Length + 1);
            stream.Seek(0, SeekOrigin.Begin);
            BinaryReader reader = new BinaryReader(stream);
            string result = Neo.IO.Helper.ReadFixedString(reader, Encoding.UTF8.GetBytes(""AA"").Length + 1);
            Assert.AreEqual(""AA"", result);
        }

        [TestMethod]
        public void TestReadSerializable()
        {
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);
            Neo.IO.Helper.Write(writer, UInt160.Zero);
            stream.Seek(0, SeekOrigin.Begin);
            BinaryReader reader = new BinaryReader(stream);
            UInt160 result = Neo.IO.Helper.ReadSerializable<UInt160>(reader);
            Assert.AreEqual(UInt160.Zero, result);
        }

        [TestMethod]
        public void TestReadSerializableArray()
        {
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);
            Neo.IO.Helper.Write(writer, new UInt160[] { UInt160.Zero });
            stream.Seek(0, SeekOrigin.Begin);
            BinaryReader reader = new BinaryReader(stream);
            UInt160[] resultArray = Neo.IO.Helper.ReadSerializableArray<UInt160>(reader);
            Assert.AreEqual(1, resultArray.Length);
            Assert.AreEqual(UInt160.Zero, resultArray[0]);
        }

        [TestMethod]
        public void TestReadVarBytes()
        {
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);
            Neo.IO.Helper.WriteVarBytes(writer, new byte[] { 0xAA, 0xAA });
            stream.Seek(0, SeekOrigin.Begin);
            BinaryReader reader = new BinaryReader(stream);
            byte[] byteArray = Neo.IO.Helper.ReadVarBytes(reader, 10);
            Assert.AreEqual(Encoding.Default.GetString(new byte[] { 0xAA, 0xAA }), Encoding.Default.GetString(byteArray));
        }

        [TestMethod]
        public void TestReadVarInt()
        {
            for (int i = 0; i < 4; i++)
            {
                if (i == 0)
                {
                    MemoryStream stream = new MemoryStream();
                    BinaryWriter writer = new BinaryWriter(stream);
                    Neo.IO.Helper.WriteVarInt(writer, 0xFFFF);
                    stream.Seek(0, SeekOrigin.Begin);
                    BinaryReader reader = new BinaryReader(stream);
                    ulong result = Neo.IO.Helper.ReadVarInt(reader, 0xFFFF);
                    Assert.AreEqual((ulong)0xFFFF, result);
                }
                else if (i == 1)
                {
                    MemoryStream stream = new MemoryStream();
                    BinaryWriter writer = new BinaryWriter(stream);
                    Neo.IO.Helper.WriteVarInt(writer, 0xFFFFFFFF);
                    stream.Seek(0, SeekOrigin.Begin);
                    BinaryReader reader = new BinaryReader(stream);
                    ulong result = Neo.IO.Helper.ReadVarInt(reader, 0xFFFFFFFF);
                    Assert.AreEqual(0xFFFFFFFF, result);
                }
                else
                {
                    MemoryStream stream = new MemoryStream();
                    BinaryWriter writer = new BinaryWriter(stream);
                    Neo.IO.Helper.WriteVarInt(writer, 0xFFFFFFFFFF);
                    stream.Seek(0, SeekOrigin.Begin);
                    BinaryReader reader = new BinaryReader(stream);
                    Action action = () => Neo.IO.Helper.ReadVarInt(reader, 0xFFFFFFFF);
                    action.Should().Throw<FormatException>();
                }
            }
        }

        [TestMethod]
        public void TestReadVarString()
        {
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);
            Neo.IO.Helper.WriteVarString(writer, ""AAAAAAA"");
            stream.Seek(0, SeekOrigin.Begin);
            BinaryReader reader = new BinaryReader(stream);
            string result = Neo.IO.Helper.ReadVarString(reader, 10);
            stream.Seek(0, SeekOrigin.Begin);
            Assert.AreEqual(""AAAAAAA"", result);
        }

        [TestMethod]
        public void TestToArray()
        {
            byte[] byteArray = Neo.IO.Helper.ToArray(UInt160.Zero);
            Assert.AreEqual(Encoding.Default.GetString(new byte[] { 0x00,0x00,0x00,0x00,0x00,
                                                                    0x00,0x00,0x00,0x00,0x00,
                                                                    0x00,0x00,0x00,0x00,0x00,
                                                                    0x00,0x00,0x00,0x00,0x00}), Encoding.Default.GetString(byteArray));
        }

        [TestMethod]
        public void TestToByteArrayGeneric()
        {
            byte[] byteArray = Neo.IO.Helper.ToByteArray(new UInt160[] { UInt160.Zero });
            Assert.AreEqual(Encoding.Default.GetString(new byte[] { 0x01,0x00,0x00,0x00,0x00,0x00,
                                                                         0x00,0x00,0x00,0x00,0x00,
                                                                         0x00,0x00,0x00,0x00,0x00,
                                                                         0x00,0x00,0x00,0x00,0x00}), Encoding.Default.GetString(byteArray));
        }

        [TestMethod]
        public void TestWrite()
        {
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);
            Neo.IO.Helper.Write(writer, UInt160.Zero);
            stream.Seek(0, SeekOrigin.Begin);
            byte[] byteArray = new byte[stream.Length];
            stream.Read(byteArray, 0, (int)stream.Length);
            Assert.AreEqual(Encoding.Default.GetString(new byte[] { 0x00,0x00,0x00,0x00,0x00,
                                                                    0x00,0x00,0x00,0x00,0x00,
                                                                    0x00,0x00,0x00,0x00,0x00,
                                                                    0x00,0x00,0x00,0x00,0x00}), Encoding.Default.GetString(byteArray));
        }

        [TestMethod]
        public void TestWriteGeneric()
        {
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);
            Neo.IO.Helper.Write(writer, new UInt160[] { UInt160.Zero });
            stream.Seek(0, SeekOrigin.Begin);
            byte[] byteArray = new byte[stream.Length];
            stream.Read(byteArray, 0, (int)stream.Length);
            Assert.AreEqual(Encoding.Default.GetString(new byte[] { 0x01,0x00,0x00,0x00,0x00,0x00,
                                                                         0x00,0x00,0x00,0x00,0x00,
                                                                         0x00,0x00,0x00,0x00,0x00,
                                                                         0x00,0x00,0x00,0x00,0x00}), Encoding.Default.GetString(byteArray));
        }

        [TestMethod]
        public void TestWriteFixedString()
        {
            for (int i = 0; i < 5; i++)
            {
                if (i == 0)
                {
                    MemoryStream stream = new MemoryStream();
                    BinaryWriter writer = new BinaryWriter(stream);
                    Action action = () => Neo.IO.Helper.WriteFixedString(writer, null, 0);
                    action.Should().Throw<ArgumentNullException>();
                }
                else if (i == 1)
                {
                    MemoryStream stream = new MemoryStream();
                    BinaryWriter writer = new BinaryWriter(stream);
                    Action action = () => Neo.IO.Helper.WriteFixedString(writer, ""AA"", Encoding.UTF8.GetBytes(""AA"").Length - 1);
                    action.Should().Throw<ArgumentException>();
                }
                else if (i == 2)
                {
                    MemoryStream stream = new MemoryStream();
                    BinaryWriter writer = new BinaryWriter(stream);
                    Action action = () => Neo.IO.Helper.WriteFixedString(writer, ""拉拉"", Encoding.UTF8.GetBytes(""拉拉"").Length - 1);
                    action.Should().Throw<ArgumentException>();
                }
                else if (i == 3)
                {
                    MemoryStream stream = new MemoryStream();
                    BinaryWriter writer = new BinaryWriter(stream);
                    Neo.IO.Helper.WriteFixedString(writer, ""AA"", Encoding.UTF8.GetBytes(""AA"").Length + 1);
                    stream.Seek(0, SeekOrigin.Begin);
                    byte[] byteArray = new byte[stream.Length];
                    stream.Read(byteArray, 0, (int)stream.Length);
                    byte[] newArray = new byte[Encoding.UTF8.GetBytes(""AA"").Length + 1];
                    Encoding.UTF8.GetBytes(""AA"").CopyTo(newArray, 0);
                    Assert.AreEqual(Encoding.Default.GetString(newArray), Encoding.Default.GetString(byteArray));
                }
            }
        }

        [TestMethod]
        public void TestWriteVarBytes()
        {
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);
            Neo.IO.Helper.WriteVarBytes(writer, new byte[] { 0xAA });
            stream.Seek(0, SeekOrigin.Begin);
            byte[] byteArray = new byte[stream.Length];
            stream.Read(byteArray, 0, (int)stream.Length);
            Assert.AreEqual(Encoding.Default.GetString(new byte[] { 0x01, 0xAA }), Encoding.Default.GetString(byteArray));
        }

        [TestMethod]
        public void TestWriteVarInt()
        {
            for (int i = 0; i < 5; i++)
            {
                if (i == 0)
                {
                    MemoryStream stream = new MemoryStream();
                    BinaryWriter writer = new BinaryWriter(stream);
                    Action action = () => Neo.IO.Helper.WriteVarInt(writer, -1);
                    action.Should().Throw<ArgumentOutOfRangeException>();
                }
                else if (i == 1)
                {
                    MemoryStream stream = new MemoryStream();
                    BinaryWriter writer = new BinaryWriter(stream);
                    Neo.IO.Helper.WriteVarInt(writer, 0xFC);
                    stream.Seek(0, SeekOrigin.Begin);
                    byte[] byteArray = new byte[stream.Length];
                    stream.Read(byteArray, 0, (int)stream.Length);
                    Assert.AreEqual(0xFC, byteArray[0]);
                }
                else if (i == 2)
                {
                    MemoryStream stream = new MemoryStream();
                    BinaryWriter writer = new BinaryWriter(stream);
                    Neo.IO.Helper.WriteVarInt(writer, 0xFFFF);
                    stream.Seek(0, SeekOrigin.Begin);
                    byte[] byteArray = new byte[stream.Length];
                    stream.Read(byteArray, 0, (int)stream.Length);
                    Assert.AreEqual(0xFD, byteArray[0]);
                    Assert.AreEqual(Encoding.Default.GetString(new byte[] { 0xFF, 0xFF }), Encoding.Default.GetString(byteArray.Skip(1).Take(byteArray.Length - 1).ToArray()));
                }
                else if (i == 3)
                {
                    MemoryStream stream = new MemoryStream();
                    BinaryWriter writer = new BinaryWriter(stream);
                    Neo.IO.Helper.WriteVarInt(writer, 0xFFFFFFFF);
                    stream.Seek(0, SeekOrigin.Begin);
                    byte[] byteArray = new byte[stream.Length];
                    stream.Read(byteArray, 0, (int)stream.Length);
                    Assert.AreEqual(0xFE, byteArray[0]);
                    Assert.AreEqual(0xFFFFFFFF, BitConverter.ToUInt32(byteArray, 1));
                }
                else
                {
                    MemoryStream stream = new MemoryStream();
                    BinaryWriter writer = new BinaryWriter(stream);
                    Neo.IO.Helper.WriteVarInt(writer, 0xAEFFFFFFFF);
                    stream.Seek(0, SeekOrigin.Begin);
                    byte[] byteArray = new byte[stream.Length];
                    stream.Read(byteArray, 0, (int)stream.Length);
                    Assert.AreEqual(0xFF, byteArray[0]);
                    Assert.AreEqual(Encoding.Default.GetString(new byte[] { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00 }), Encoding.Default.GetString(byteArray.Skip(1).Take(byteArray.Length - 1).ToArray()));
                }
            }
        }

        [TestMethod]
        public void TestWriteVarString()
        {
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);
            Neo.IO.Helper.WriteVarString(writer, ""a"");
            stream.Seek(0, SeekOrigin.Begin);
            byte[] byteArray = new byte[stream.Length];
            stream.Read(byteArray, 0, (int)stream.Length);
            Assert.AreEqual(0x01, byteArray[0]);
            Assert.AreEqual(0x61, byteArray[1]);
        }
    }",1,777 587 2000 123 91 2001 93 777 865 2002 40 41 123 574 91 93 2003 61 744 574 91 93 123 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 125 59 2004 2005 61 2006 46 2007 46 2008 46 2009 60 2004 62 40 2003 41 59 2010 46 2011 40 2004 46 2012 44 2005 41 59 125 91 2001 93 777 865 2013 40 41 123 574 91 93 2014 61 744 574 91 93 123 1501 44 1502 44 1502 44 1502 125 59 330 860 40 2015 2016 61 744 2017 40 744 2018 40 2014 41 44 2019 46 2020 44 655 41 41 123 574 91 93 2021 61 2022 46 2023 46 2024 46 2025 40 2016 44 1502 41 59 2026 46 2027 40 362 44 2021 46 2028 40 41 41 59 2026 46 2027 40 1502 44 2016 46 2029 46 2030 41 59 125 330 860 40 2015 2016 61 744 2017 40 744 2018 40 2014 41 44 2019 46 2020 44 655 41 41 123 574 91 93 2031 61 2032 46 2033 46 2034 46 2035 40 2016 44 1502 41 59 2036 46 2037 40 362 44 2031 46 2038 40 41 41 59 2036 46 2037 40 1502 44 2016 46 2039 46 2040 41 59 125 330 860 40 2015 2016 61 744 2017 40 744 2018 40 2014 41 44 2019 46 2020 44 655 41 41 123 2041 46 2042 60 2043 62 40 40 41 328 2044 46 2045 46 2046 46 2047 40 2016 44 1502 41 41 59 2041 46 2048 40 1502 44 2016 46 2049 46 2050 41 59 125 125 91 2001 93 777 865 2051 40 41 123 2052 2053 61 744 2054 91 93 123 752 44 2054 46 2055 44 744 2054 40 744 574 91 93 123 1504 44 1500 44 1500 44 1500 44 1500 44 1504 44 1500 44 1500 44 1500 44 1500 44 1504 44 1500 44 1500 44 1500 44 1500 44 1504 44 1500 44 1500 44 1500 44 1500 125 41 125 59 574 91 93 2056 59 860 40 2052 2057 61 744 2058 40 41 41 860 40 2052 2059 61 744 2060 40 2057 41 41 123 2061 46 2062 46 2063 46 2064 40 2059 44 2053 41 59 2056 61 2057 46 2065 40 41 59 125 330 860 40 2052 2057 61 744 2058 40 2056 41 41 860 40 2052 2066 61 744 2067 40 2057 41 41 123 2068 46 2069 60 2070 62 40 40 41 328 2071 46 2072 46 2073 46 2074 60 2054 62 40 2066 44 1502 41 41 59 125 330 860 40 2052 2057 61 744 2058 40 2056 41 41 860 40 2052 2066 61 744 2067 40 2057 41 41 123 2052 2075 61 2076 46 2077 46 2078 46 2079 60 2054 62 40 2066 41 59 2080 46 2081 40 2053 44 2075 41 59 125 125 91 2001 93 777 865 2082 40 41 123 664 40 704 2083 61 1500 59 2083 60 1502 59 2083 349 41 123 688 40 2083 323 1500 41 123 574 91 93 2084 61 744 574 91 93 123 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 125 59 2085 2086 61 2087 46 2088 46 2089 46 2090 40 2084 44 836 40 2091 41 41 59 2092 46 2093 40 2091 46 2094 44 2086 41 59 125 630 123 2095 2096 61 40 41 328 2097 46 2098 46 2099 46 2100 40 744 574 91 1500 93 44 836 40 2101 41 41 59 2096 46 2102 40 41 46 2103 60 2104 62 40 41 59 125 125 125 91 2001 93 777 865 2105 40 41 123 2106 2107 61 744 574 91 93 123 1501 44 1502 44 1502 44 1502 125 59 2106 2108 61 2109 46 2110 46 2111 46 2112 40 2107 41 59 2106 2113 61 2109 46 2110 46 2111 46 2114 40 2108 44 574 46 2115 41 59 2116 46 2117 40 2113 44 2107 41 59 330 2107 61 744 574 91 1504 93 59 664 40 704 2118 61 1500 59 2118 60 2107 46 2119 59 2118 349 41 2107 91 2118 93 61 1501 59 2108 61 2109 46 2110 46 2111 46 2112 40 2107 41 59 2113 61 2109 46 2110 46 2111 46 2114 40 2108 44 574 46 2115 41 59 2120 46 2121 40 2108 46 2119 60 2113 46 2119 41 59 2116 46 2117 40 2113 44 2107 41 59 330 2120 46 2122 60 2123 62 40 40 41 328 2109 46 2110 46 2111 46 2114 40 2108 44 574 46 2115 45 1501 41 41 59 2120 46 2122 60 2123 62 40 40 41 328 2109 46 2110 46 2111 46 2114 40 2108 44 45 1501 41 41 59 330 2108 91 1500 93 349 59 2120 46 2122 60 2123 62 40 40 41 328 2109 46 2110 46 2111 46 2114 40 2108 44 574 46 2115 41 41 59 125 91 2001 93 777 865 2124 40 41 123 574 91 93 2125 61 2126 46 2127 46 2128 46 2129 40 744 2130 91 93 123 2130 46 2131 125 41 59 2130 91 93 2132 61 2126 46 2127 46 2128 46 2133 60 2130 62 40 2125 41 59 2134 46 2135 40 1501 44 2132 46 2136 41 59 2134 46 2135 40 2130 46 2137 44 2132 91 1500 93 41 59 125 91 2001 93 777 865 2138 40 41 123 664 40 704 2139 61 1500 59 2139 60 1502 59 2139 349 41 123 688 40 2139 323 1500 41 123 704 2140 61 2141 46 2142 46 2143 46 2144 40 1501 41 59 2145 46 2146 40 1501 44 2140 41 59 125 630 688 40 2139 323 1501 41 123 704 2147 61 2148 46 2149 46 2150 46 2151 40 1506 41 59 2152 46 2153 40 1502 44 2147 41 59 125 630 123 704 2154 61 2155 46 2156 46 2157 46 2158 40 1509 41 59 2159 46 2160 40 1502 44 2154 41 59 125 125 125 640 2161 58 797 123 2162 61 1501 44 2163 61 1502 125 640 2164 58 574 123 2165 61 1501 44 2166 61 1502 125 640 2167 58 803 123 2168 61 1501 44 2169 61 1502 125 640 2170 58 859 123 2171 61 1501 44 2172 61 1502 125 640 2173 58 704 123 2174 61 1501 44 2175 61 1502 125 640 2176 58 842 123 2177 61 1501 44 2178 61 1502 125 640 2179 58 726 123 2180 61 1501 44 2181 61 1502 125 91 2001 93 777 865 2182 40 41 123 664 40 704 2183 61 1500 59 2183 60 1502 59 2183 349 41 123 688 40 2183 323 1500 41 123 704 2184 61 2185 46 2186 46 2187 46 2188 40 744 2189 91 93 123 2189 46 2190 125 41 59 2191 46 2192 40 1503 44 2184 41 59 125 630 688 40 2183 323 1501 41 330 123 2193 60 2161 62 2194 61 744 2193 60 2161 62 123 2161 46 2195 125 59 2196 60 2161 62 2197 61 2194 46 2198 40 41 59 704 2199 61 2200 46 2201 46 2202 46 2203 40 2197 41 59 2204 46 2205 40 1502 44 2199 41 59 125 630 688 40 2183 323 1502 41 330 123 2206 60 2164 62 2207 61 744 2206 60 2164 62 123 2164 46 2208 125 59 2209 60 2164 62 2210 61 2207 46 2211 40 41 59 704 2212 61 2213 46 2214 46 2215 46 2216 40 2210 41 59 2217 46 2218 40 1502 44 2212 41 59 125 630 688 40 2183 323 1502 41 330 123 2219 60 2167 62 2220 61 744 2219 60 2167 62 123 2167 46 2221 125 59 2222 60 2167 62 2223 61 2220 46 2224 40 41 59 704 2225 61 2226 46 2227 46 2228 46 2229 40 2223 41 59 2230 46 2231 40 1502 44 2225 41 59 125 630 688 40 2183 323 1502 41 330 123 2232 60 2170 62 2233 61 744 2232 60 2170 62 123 2170 46 2234 125 59 2235 60 2170 62 2236 61 2233 46 2237 40 41 59 704 2238 61 2239 46 2240 46 2241 46 2242 40 2236 41 59 2243 46 2244 40 1502 44 2238 41 59 125 630 688 40 2183 323 1502 41 330 123 2245 60 2173 62 2246 61 744 2245 60 2173 62 123 2173 46 2247 125 59 2248 60 2173 62 2249 61 2246 46 2250 40 41 59 704 2251 61 2252 46 2253 46 2254 46 2255 40 2249 41 59 2256 46 2257 40 1502 44 2251 41 59 125 630 688 40 2183 323 1502 41 330 123 2258 60 2176 62 2259 61 744 2258 60 2176 62 123 2176 46 2260 125 59 2261 60 2176 62 2262 61 2259 46 2263 40 41 59 704 2264 61 2265 46 2266 46 2267 46 2268 40 2262 41 59 2269 46 2270 40 1502 44 2264 41 59 125 630 688 40 2183 323 1502 41 330 123 2271 60 2179 62 2272 61 744 2271 60 2179 62 123 2179 46 2273 125 59 2274 60 2179 62 2275 61 2272 46 2276 40 41 59 704 2277 61 2278 46 2279 46 2280 46 2281 40 2275 41 59 2282 46 2283 40 1502 44 2277 41 59 125 630 688 40 2183 323 1502 41 123 2284 60 704 62 2285 61 744 2284 60 704 62 123 1501 125 59 2286 60 704 62 2287 61 2285 46 2288 40 41 59 704 2289 61 2290 46 2291 46 2292 46 2293 60 704 62 40 2287 41 59 2294 46 2295 40 1502 44 2289 41 59 125 125 125 91 2001 93 777 865 2296 40 41 123 704 2297 61 2298 46 2299 46 2300 46 2301 40 362 41 59 2302 46 2303 40 1502 44 2297 41 59 125 91 2001 93 777 865 2304 40 41 123 2305 2306 61 744 2305 40 41 59 2307 2308 61 744 2307 40 2306 41 59 2309 46 2310 46 2311 46 2312 40 2308 44 362 44 2313 46 2314 46 2315 40 362 41 46 2316 43 1501 41 59 2306 46 2317 40 1500 44 2318 46 2319 41 59 2320 2321 61 744 2320 40 2306 41 59 815 2322 61 2309 46 2310 46 2311 46 2323 40 2321 44 2313 46 2314 46 2315 40 362 41 46 2316 43 1501 41 59 2324 46 2325 40 362 44 2322 41 59 125 91 2001 93 777 865 2326 40 41 123 2327 2328 61 744 2327 40 41 59 2329 2330 61 744 2329 40 2328 41 59 2331 46 2332 46 2333 46 2334 40 2330 44 2335 46 2336 41 59 2328 46 2337 40 1500 44 2338 46 2339 41 59 2340 2341 61 744 2340 40 2328 41 59 2335 2342 61 2331 46 2332 46 2333 46 2343 60 2335 62 40 2341 41 59 2344 46 2345 40 2335 46 2336 44 2342 41 59 125 91 2001 93 777 865 2346 40 41 123 2347 2348 61 744 2347 40 41 59 2349 2350 61 744 2349 40 2348 41 59 2351 46 2352 46 2353 46 2354 40 2350 44 744 2355 91 93 123 2355 46 2356 125 41 59 2348 46 2357 40 1500 44 2358 46 2359 41 59 2360 2361 61 744 2360 40 2348 41 59 2355 91 93 2362 61 2351 46 2352 46 2353 46 2363 60 2355 62 40 2361 41 59 2364 46 2365 40 1501 44 2362 46 2366 41 59 2364 46 2365 40 2355 46 2367 44 2362 91 1500 93 41 59 125 91 2001 93 777 865 2368 40 41 123 2369 2370 61 744 2369 40 41 59 2371 2372 61 744 2371 40 2370 41 59 2373 46 2374 46 2375 46 2376 40 2372 44 744 574 91 93 123 1504 44 1504 125 41 59 2370 46 2377 40 1500 44 2378 46 2379 41 59 2380 2381 61 744 2380 40 2370 41 59 574 91 93 2382 61 2373 46 2374 46 2375 46 2383 40 2381 44 1502 41 59 2384 46 2385 40 2386 46 2387 46 2388 40 744 574 91 93 123 1504 44 1504 125 41 44 2386 46 2387 46 2388 40 2382 41 41 59 125 91 2001 93 777 865 2389 40 41 123 664 40 704 2390 61 1500 59 2390 60 1502 59 2390 349 41 123 688 40 2390 323 1500 41 123 2391 2392 61 744 2391 40 41 59 2393 2394 61 744 2393 40 2392 41 59 2395 46 2396 46 2397 46 2398 40 2394 44 1506 41 59 2392 46 2399 40 1500 44 2400 46 2401 41 59 2402 2403 61 744 2402 40 2392 41 59 848 2404 61 2395 46 2396 46 2397 46 2405 40 2403 44 1506 41 59 2406 46 2407 40 40 848 41 1506 44 2404 41 59 125 630 688 40 2390 323 1501 41 123 2408 2409 61 744 2408 40 41 59 2410 2411 61 744 2410 40 2409 41 59 2412 46 2413 46 2414 46 2415 40 2411 44 1511 41 59 2409 46 2416 40 1500 44 2417 46 2418 41 59 2419 2420 61 744 2419 40 2409 41 59 848 2421 61 2412 46 2413 46 2414 46 2422 40 2420 44 1511 41 59 2423 46 2424 40 1511 44 2421 41 59 125 630 123 2425 2426 61 744 2425 40 41 59 2427 2428 61 744 2427 40 2426 41 59 2429 46 2430 46 2431 46 2432 40 2428 44 1514 41 59 2426 46 2433 40 1500 44 2434 46 2435 41 59 2436 2437 61 744 2436 40 2426 41 59 2438 2439 61 40 41 328 2429 46 2430 46 2431 46 2440 40 2437 44 1511 41 59 2439 46 2441 40 41 46 2442 60 2443 62 40 41 59 125 125 125 91 2001 93 777 865 2444 40 41 123 2445 2446 61 744 2445 40 41 59 2447 2448 61 744 2447 40 2446 41 59 2449 46 2450 46 2451 46 2452 40 2448 44 362 41 59 2446 46 2453 40 1500 44 2454 46 2455 41 59 2456 2457 61 744 2456 40 2446 41 59 815 2458 61 2449 46 2450 46 2451 46 2459 40 2457 44 1502 41 59 2446 46 2453 40 1500 44 2454 46 2455 41 59 2460 46 2461 40 362 44 2458 41 59 125 91 2001 93 777 865 2462 40 41 123 574 91 93 2463 61 2464 46 2465 46 2466 46 2467 40 2468 46 2469 41 59 2470 46 2471 40 2472 46 2473 46 2474 40 744 574 91 93 123 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 125 41 44 2472 46 2473 46 2474 40 2463 41 41 59 125 91 2001 93 777 865 2475 40 41 123 574 91 93 2476 61 2477 46 2478 46 2479 46 2480 40 744 2481 91 93 123 2481 46 2482 125 41 59 2483 46 2484 40 2485 46 2486 46 2487 40 744 574 91 93 123 1501 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 125 41 44 2485 46 2486 46 2487 40 2476 41 41 59 125 91 2001 93 777 865 2488 40 41 123 2489 2490 61 744 2489 40 41 59 2491 2492 61 744 2491 40 2490 41 59 2493 46 2494 46 2495 46 2496 40 2492 44 2497 46 2498 41 59 2490 46 2499 40 1500 44 2500 46 2501 41 59 574 91 93 2502 61 744 574 91 2490 46 2503 93 59 2490 46 2504 40 2502 44 1500 44 40 704 41 2490 46 2503 41 59 2505 46 2506 40 2507 46 2508 46 2509 40 744 574 91 93 123 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 125 41 44 2507 46 2508 46 2509 40 2502 41 41 59 125 91 2001 93 777 865 2510 40 41 123 2511 2512 61 744 2511 40 41 59 2513 2514 61 744 2513 40 2512 41 59 2515 46 2516 46 2517 46 2518 40 2514 44 744 2519 91 93 123 2519 46 2520 125 41 59 2512 46 2521 40 1500 44 2522 46 2523 41 59 574 91 93 2524 61 744 574 91 2512 46 2525 93 59 2512 46 2526 40 2524 44 1500 44 40 704 41 2512 46 2525 41 59 2527 46 2528 40 2529 46 2530 46 2531 40 744 574 91 93 123 1501 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 44 1500 125 41 44 2529 46 2530 46 2531 40 2524 41 41 59 125 91 2001 93 777 865 2532 40 41 123 664 40 704 2533 61 1500 59 2533 60 1502 59 2533 349 41 123 688 40 2533 323 1500 41 123 2534 2535 61 744 2534 40 41 59 2536 2537 61 744 2536 40 2535 41 59 2538 2539 61 40 41 328 2540 46 2541 46 2542 46 2543 40 2537 44 752 44 1500 41 59 2539 46 2544 40 41 46 2545 60 2546 62 40 41 59 125 630 688 40 2533 323 1501 41 123 2547 2548 61 744 2547 40 41 59 2549 2550 61 744 2549 40 2548 41 59 2551 2552 61 40 41 328 2553 46 2554 46 2555 46 2556 40 2550 44 362 44 2557 46 2558 46 2559 40 362 41 46 2560 45 1501 41 59 2552 46 2561 40 41 46 2562 60 2563 62 40 41 59 125 630 688 40 2533 323 1502 41 123 2564 2565 61 744 2564 40 41 59 2566 2567 61 744 2566 40 2565 41 59 2568 2569 61 40 41 328 2570 46 2571 46 2572 46 2573 40 2567 44 362 44 2574 46 2575 46 2576 40 362 41 46 2577 45 1501 41 59 2569 46 2578 40 41 46 2579 60 2580 62 40 41 59 125 630 688 40 2533 323 1502 41 123 2581 2582 61 744 2581 40 41 59 2583 2584 61 744 2583 40 2582 41 59 2585 46 2586 46 2587 46 2588 40 2584 44 362 44 2589 46 2590 46 2591 40 362 41 46 2592 43 1501 41 59 2582 46 2593 40 1500 44 2594 46 2595 41 59 574 91 93 2596 61 744 574 91 2582 46 2592 93 59 2582 46 2597 40 2596 44 1500 44 40 704 41 2582 46 2592 41 59 574 91 93 2598 61 744 574 91 2589 46 2590 46 2591 40 362 41 46 2592 43 1501 93 59 2589 46 2590 46 2591 40 362 41 46 2599 40 2598 44 1500 41 59 2600 46 2601 40 2589 46 2602 46 2603 40 2598 41 44 2589 46 2602 46 2603 40 2596 41 41 59 125 125 125 91 2001 93 777 865 2604 40 41 123 2605 2606 61 744 2605 40 41 59 2607 2608 61 744 2607 40 2606 41 59 2609 46 2610 46 2611 46 2612 40 2608 44 744 574 91 93 123 1504 125 41 59 2606 46 2613 40 1500 44 2614 46 2615 41 59 574 91 93 2616 61 744 574 91 2606 46 2617 93 59 2606 46 2618 40 2616 44 1500 44 40 704 41 2606 46 2617 41 59 2619 46 2620 40 2621 46 2622 46 2623 40 744 574 91 93 123 1501 44 1504 125 41 44 2621 46 2622 46 2623 40 2616 41 41 59 125 91 2001 93 777 865 2624 40 41 123 664 40 704 2625 61 1500 59 2625 60 1502 59 2625 349 41 123 688 40 2625 323 1500 41 123 2626 2627 61 744 2626 40 41 59 2628 2629 61 744 2628 40 2627 41 59 2630 2631 61 40 41 328 2632 46 2633 46 2634 46 2635 40 2629 44 45 1501 41 59 2631 46 2636 40 41 46 2637 60 2638 62 40 41 59 125 630 688 40 2625 323 1501 41 123 2639 2640 61 744 2639 40 41 59 2641 2642 61 744 2641 40 2640 41 59 2643 46 2644 46 2645 46 2646 40 2642 44 1504 41 59 2640 46 2647 40 1500 44 2648 46 2649 41 59 574 91 93 2650 61 744 574 91 2640 46 2651 93 59 2640 46 2652 40 2650 44 1500 44 40 704 41 2640 46 2651 41 59 2653 46 2654 40 1504 44 2650 91 1500 93 41 59 125 630 688 40 2625 323 1502 41 123 2655 2656 61 744 2655 40 41 59 2657 2658 61 744 2657 40 2656 41 59 2659 46 2660 46 2661 46 2662 40 2658 44 1506 41 59 2656 46 2663 40 1500 44 2664 46 2665 41 59 574 91 93 2666 61 744 574 91 2656 46 2667 93 59 2656 46 2668 40 2666 44 1500 44 40 704 41 2656 46 2667 41 59 2669 46 2670 40 1504 44 2666 91 1500 93 41 59 2669 46 2670 40 2671 46 2672 46 2673 40 744 574 91 93 123 1504 44 1504 125 41 44 2671 46 2672 46 2673 40 2666 46 2674 40 1501 41 46 2675 40 2666 46 2667 45 1501 41 46 2676 40 41 41 41 59 125 630 688 40 2625 323 1502 41 123 2677 2678 61 744 2677 40 41 59 2679 2680 61 744 2679 40 2678 41 59 2681 46 2682 46 2683 46 2684 40 2680 44 1511 41 59 2678 46 2685 40 1500 44 2686 46 2687 41 59 574 91 93 2688 61 744 574 91 2678 46 2689 93 59 2678 46 2690 40 2688 44 1500 44 40 704 41 2678 46 2689 41 59 2691 46 2692 40 1504 44 2688 91 1500 93 41 59 2691 46 2692 40 1511 44 2693 46 2694 40 2688 44 1501 41 41 59 125 630 123 2695 2696 61 744 2695 40 41 59 2697 2698 61 744 2697 40 2696 41 59 2699 46 2700 46 2701 46 2702 40 2698 44 1513 41 59 2696 46 2703 40 1500 44 2704 46 2705 41 59 574 91 93 2706 61 744 574 91 2696 46 2707 93 59 2696 46 2708 40 2706 44 1500 44 40 704 41 2696 46 2707 41 59 2709 46 2710 40 1504 44 2706 91 1500 93 41 59 2709 46 2710 40 2711 46 2712 46 2713 40 744 574 91 93 123 1504 44 1504 44 1504 44 1504 44 1504 44 1500 44 1500 44 1500 125 41 44 2711 46 2712 46 2713 40 2706 46 2714 40 1501 41 46 2715 40 2706 46 2707 45 1501 41 46 2716 40 41 41 41 59 125 125 125 91 2001 93 777 865 2717 40 41 123 2718 2719 61 744 2718 40 41 59 2720 2721 61 744 2720 40 2719 41 59 2722 46 2723 46 2724 46 2725 40 2721 44 362 41 59 2719 46 2726 40 1500 44 2727 46 2728 41 59 574 91 93 2729 61 744 574 91 2719 46 2730 93 59 2719 46 2731 40 2729 44 1500 44 40 704 41 2719 46 2730 41 59 2732 46 2733 40 1501 44 2729 91 1500 93 41 59 2732 46 2733 40 1503 44 2729 91 1501 93 41 59 125 125 ,"{'AvgLine': 21, 'CountLine': 580, 'CountStmt': 314, 'MaxNesting': 2, 'AvgLineCode': 20, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 254, 'MaxEssential': 1, 'SumEssential': 34, 'AvgCyclomatic': 2, 'CountLineCode': 522, 'CountStmtDecl': 157, 'MaxCyclomatic': 11, 'SumCyclomatic': 63, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 50, 'CountSemicolon': 245, 'CountDeclMethod': 23, 'CountLineCodeExe': 304, 'CountLineComment': 15, 'CountClassCoupled': 18, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 193, 'CountLineInactive': 0, 'CountDeclMethodAll': 29, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.03', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 11, 'SumCyclomaticStrict': 63, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 23, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 11, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 63, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 23, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 12, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79885,C#,"    public class UT_NeoToken
    {
        private DataCache _snapshot;
        private Block _persistingBlock;

        [TestInitialize]
        public void TestSetup()
        {
            _snapshot = TestBlockchain.GetTestSnapshot();
            _persistingBlock = new Block
            {
                Header = new Header(),
                Transactions = Array.Empty<Transaction>()
            };
        }

        [TestMethod]
        public void Check_Name() => NativeContract.NEO.Name.Should().Be(nameof(NeoToken));

        [TestMethod]
        public void Check_Symbol() => NativeContract.NEO.Symbol(_snapshot).Should().Be(""NEO"");

        [TestMethod]
        public void Check_Decimals() => NativeContract.NEO.Decimals(_snapshot).Should().Be(0);

        [TestMethod]
        public void Check_Vote()
        {
            var snapshot = _snapshot.CreateSnapshot();
            var persistingBlock = new Block { Header = new Header { Index = 1000 } };

            byte[] from = Contract.GetBFTAddress(ProtocolSettings.Default.StandbyValidators).ToArray();

            // No signature

            var ret = Check_Vote(snapshot, from, null, false, persistingBlock);
            ret.Result.Should().BeFalse();
            ret.State.Should().BeTrue();

            // Wrong address

            ret = Check_Vote(snapshot, new byte[19], null, false, persistingBlock);
            ret.Result.Should().BeFalse();
            ret.State.Should().BeFalse();

            // Wrong ec

            ret = Check_Vote(snapshot, from, new byte[19], true, persistingBlock);
            ret.Result.Should().BeFalse();
            ret.State.Should().BeFalse();

            // no registered

            var fakeAddr = new byte[20];
            fakeAddr[0] = 0x5F;
            fakeAddr[5] = 0xFF;

            ret = Check_Vote(snapshot, fakeAddr, null, true, persistingBlock);
            ret.Result.Should().BeFalse();
            ret.State.Should().BeTrue();

            // no registered

            var accountState = snapshot.TryGet(CreateStorageKey(20, from)).GetInteroperable<NeoAccountState>();
            accountState.VoteTo = null;
            ret = Check_Vote(snapshot, from, ECCurve.Secp256r1.G.ToArray(), true, persistingBlock);
            ret.Result.Should().BeFalse();
            ret.State.Should().BeTrue();
            accountState.VoteTo.Should().BeNull();

            // normal case

            snapshot.Add(CreateStorageKey(33, ECCurve.Secp256r1.G.ToArray()), new StorageItem(new CandidateState()));
            ret = Check_Vote(snapshot, from, ECCurve.Secp256r1.G.ToArray(), true, persistingBlock);
            ret.Result.Should().BeTrue();
            ret.State.Should().BeTrue();
            accountState.VoteTo.Should().Be(ECCurve.Secp256r1.G);
        }

        [TestMethod]
        public void Check_Vote_Sameaccounts()
        {
            var snapshot = _snapshot.CreateSnapshot();
            var persistingBlock = new Block { Header = new Header { Index = 1000 } };

            byte[] from = Contract.GetBFTAddress(ProtocolSettings.Default.StandbyValidators).ToArray();
            var accountState = snapshot.TryGet(CreateStorageKey(20, from)).GetInteroperable<NeoAccountState>();
            accountState.Balance = 100;
            snapshot.Add(CreateStorageKey(33, ECCurve.Secp256r1.G.ToArray()), new StorageItem(new CandidateState()));
            var ret = Check_Vote(snapshot, from, ECCurve.Secp256r1.G.ToArray(), true, persistingBlock);
            ret.Result.Should().BeTrue();
            ret.State.Should().BeTrue();
            accountState.VoteTo.Should().Be(ECCurve.Secp256r1.G);

            //two account vote for the same account
            var stateValidator = snapshot.GetAndChange(CreateStorageKey(33, ECCurve.Secp256r1.G.ToArray())).GetInteroperable<CandidateState>();
            stateValidator.Votes.Should().Be(100);
            var G_Account = Contract.CreateSignatureContract(ECCurve.Secp256r1.G).ScriptHash.ToArray();
            snapshot.Add(CreateStorageKey(20, G_Account), new StorageItem(new NeoAccountState { Balance = 200 }));
            var secondAccount = snapshot.TryGet(CreateStorageKey(20, G_Account)).GetInteroperable<NeoAccountState>();
            secondAccount.Balance.Should().Be(200);
            ret = Check_Vote(snapshot, G_Account, ECCurve.Secp256r1.G.ToArray(), true, persistingBlock);
            ret.Result.Should().BeTrue();
            ret.State.Should().BeTrue();
            stateValidator.Votes.Should().Be(300);
        }

        [TestMethod]
        public void Check_Vote_ChangeVote()
        {
            var snapshot = _snapshot.CreateSnapshot();
            var persistingBlock = new Block { Header = new Header { Index = 1000 } };
            //from vote to G
            byte[] from = ProtocolSettings.Default.StandbyValidators[0].ToArray();
            var from_Account = Contract.CreateSignatureContract(ProtocolSettings.Default.StandbyValidators[0]).ScriptHash.ToArray();
            snapshot.Add(CreateStorageKey(20, from_Account), new StorageItem(new NeoAccountState()));
            var accountState = snapshot.TryGet(CreateStorageKey(20, from_Account)).GetInteroperable<NeoAccountState>();
            accountState.Balance = 100;
            snapshot.Add(CreateStorageKey(33, ECCurve.Secp256r1.G.ToArray()), new StorageItem(new CandidateState()));
            var ret = Check_Vote(snapshot, from_Account, ECCurve.Secp256r1.G.ToArray(), true, persistingBlock);
            ret.Result.Should().BeTrue();
            ret.State.Should().BeTrue();
            accountState.VoteTo.Should().Be(ECCurve.Secp256r1.G);

            //from change vote to itself
            var G_stateValidator = snapshot.GetAndChange(CreateStorageKey(33, ECCurve.Secp256r1.G.ToArray())).GetInteroperable<CandidateState>();
            G_stateValidator.Votes.Should().Be(100);
            var G_Account = Contract.CreateSignatureContract(ECCurve.Secp256r1.G).ScriptHash.ToArray();
            snapshot.Add(CreateStorageKey(20, G_Account), new StorageItem(new NeoAccountState { Balance = 200 }));
            snapshot.Add(CreateStorageKey(33, from), new StorageItem(new CandidateState()));
            ret = Check_Vote(snapshot, from_Account, from, true, persistingBlock);
            ret.Result.Should().BeTrue();
            ret.State.Should().BeTrue();
            G_stateValidator.Votes.Should().Be(0);
            var from_stateValidator = snapshot.GetAndChange(CreateStorageKey(33, from)).GetInteroperable<CandidateState>();
            from_stateValidator.Votes.Should().Be(100);
        }

        [TestMethod]
        public void Check_Vote_VoteToNull()
        {
            var snapshot = _snapshot.CreateSnapshot();
            var persistingBlock = new Block { Header = new Header { Index = 1000 } };

            byte[] from = ProtocolSettings.Default.StandbyValidators[0].ToArray();
            var from_Account = Contract.CreateSignatureContract(ProtocolSettings.Default.StandbyValidators[0]).ScriptHash.ToArray();
            snapshot.Add(CreateStorageKey(20, from_Account), new StorageItem(new NeoAccountState()));
            var accountState = snapshot.TryGet(CreateStorageKey(20, from_Account)).GetInteroperable<NeoAccountState>();
            accountState.Balance = 100;
            snapshot.Add(CreateStorageKey(33, ECCurve.Secp256r1.G.ToArray()), new StorageItem(new CandidateState()));
            var ret = Check_Vote(snapshot, from_Account, ECCurve.Secp256r1.G.ToArray(), true, persistingBlock);
            ret.Result.Should().BeTrue();
            ret.State.Should().BeTrue();
            accountState.VoteTo.Should().Be(ECCurve.Secp256r1.G);

            //from vote to null account G votes becomes 0
            var G_stateValidator = snapshot.GetAndChange(CreateStorageKey(33, ECCurve.Secp256r1.G.ToArray())).GetInteroperable<CandidateState>();
            G_stateValidator.Votes.Should().Be(100);
            var G_Account = Contract.CreateSignatureContract(ECCurve.Secp256r1.G).ScriptHash.ToArray();
            snapshot.Add(CreateStorageKey(20, G_Account), new StorageItem(new NeoAccountState { Balance = 200 }));
            snapshot.Add(CreateStorageKey(33, from), new StorageItem(new CandidateState()));
            ret = Check_Vote(snapshot, from_Account, null, true, persistingBlock);
            ret.Result.Should().BeTrue();
            ret.State.Should().BeTrue();
            G_stateValidator.Votes.Should().Be(0);
            accountState.VoteTo.Should().Be(null);
        }

        [TestMethod]
        public void Check_UnclaimedGas()
        {
            var snapshot = _snapshot.CreateSnapshot();
            var persistingBlock = new Block { Header = new Header { Index = 1000 } };

            byte[] from = Contract.GetBFTAddress(ProtocolSettings.Default.StandbyValidators).ToArray();

            var unclaim = Check_UnclaimedGas(snapshot, from, persistingBlock);
            unclaim.Value.Should().Be(new BigInteger(0.5 * 1000 * 100000000L));
            unclaim.State.Should().BeTrue();

            unclaim = Check_UnclaimedGas(snapshot, new byte[19], persistingBlock);
            unclaim.Value.Should().Be(BigInteger.Zero);
            unclaim.State.Should().BeFalse();
        }

        [TestMethod]
        public void Check_RegisterValidator()
        {
            var snapshot = _snapshot.CreateSnapshot();

            var keyCount = snapshot.GetChangeSet().Count();
            var point = ProtocolSettings.Default.StandbyValidators[0].EncodePoint(true).Clone() as byte[];

            var ret = Check_RegisterValidator(snapshot, point, _persistingBlock); // Exists
            ret.State.Should().BeTrue();
            ret.Result.Should().BeTrue();

            snapshot.GetChangeSet().Count().Should().Be(++keyCount); // No changes

            point[20]++; // fake point
            ret = Check_RegisterValidator(snapshot, point, _persistingBlock); // New

            ret.State.Should().BeTrue();
            ret.Result.Should().BeTrue();

            snapshot.GetChangeSet().Count().Should().Be(keyCount + 1); // New validator

            // Check GetRegisteredValidators

            var members = NativeContract.NEO.GetCandidates(snapshot);
            Assert.AreEqual(2, members.Length);
        }

        [TestMethod]
        public void Check_UnregisterCandidate()
        {
            var snapshot = _snapshot.CreateSnapshot();

            var keyCount = snapshot.GetChangeSet().Count();
            var point = ProtocolSettings.Default.StandbyValidators[0].EncodePoint(true);

            //without register
            var ret = Check_UnregisterCandidate(snapshot, point, _persistingBlock);
            ret.State.Should().BeTrue();
            ret.Result.Should().BeTrue();
            snapshot.GetChangeSet().Count().Should().Be(keyCount);

            //register and then unregister
            ret = Check_RegisterValidator(snapshot, point, _persistingBlock);
            StorageItem item = snapshot.GetAndChange(CreateStorageKey(33, point));
            item.Size.Should().Be(7);
            ret.State.Should().BeTrue();
            ret.Result.Should().BeTrue();

            var members = NativeContract.NEO.GetCandidates(snapshot);
            Assert.AreEqual(1, members.Length);
            snapshot.GetChangeSet().Count().Should().Be(keyCount + 1);
            StorageKey key = CreateStorageKey(33, point);
            snapshot.TryGet(key).Should().NotBeNull();

            ret = Check_UnregisterCandidate(snapshot, point, _persistingBlock);
            ret.State.Should().BeTrue();
            ret.Result.Should().BeTrue();
            snapshot.GetChangeSet().Count().Should().Be(keyCount);

            members = NativeContract.NEO.GetCandidates(snapshot);
            Assert.AreEqual(0, members.Length);
            snapshot.TryGet(key).Should().BeNull();

            //register with votes, then unregister
            ret = Check_RegisterValidator(snapshot, point, _persistingBlock);
            ret.State.Should().BeTrue();
            var G_Account = Contract.CreateSignatureContract(ECCurve.Secp256r1.G).ScriptHash.ToArray();
            snapshot.Add(CreateStorageKey(20, G_Account), new StorageItem(new NeoAccountState()));
            var accountState = snapshot.TryGet(CreateStorageKey(20, G_Account)).GetInteroperable<NeoAccountState>();
            accountState.Balance = 100;
            Check_Vote(snapshot, G_Account, ProtocolSettings.Default.StandbyValidators[0].ToArray(), true, _persistingBlock);
            ret = Check_UnregisterCandidate(snapshot, point, _persistingBlock);
            ret.State.Should().BeTrue();
            ret.Result.Should().BeTrue();
            snapshot.TryGet(key).Should().NotBeNull();
            StorageItem pointItem = snapshot.TryGet(key);
            CandidateState pointState = pointItem.GetInteroperable<CandidateState>();
            pointState.Registered.Should().BeFalse();
            pointState.Votes.Should().Be(100);

            //vote fail
            ret = Check_Vote(snapshot, G_Account, ProtocolSettings.Default.StandbyValidators[0].ToArray(), true, _persistingBlock);
            ret.State.Should().BeTrue();
            ret.Result.Should().BeFalse();
            accountState.VoteTo.Should().Be(ProtocolSettings.Default.StandbyValidators[0]);
        }

        [TestMethod]
        public void Check_GetCommittee()
        {
            var snapshot = _snapshot.CreateSnapshot();
            var keyCount = snapshot.GetChangeSet().Count();
            var point = ProtocolSettings.Default.StandbyValidators[0].EncodePoint(true);
            var persistingBlock = _persistingBlock;

            //register with votes with 20000000
            var G_Account = Contract.CreateSignatureContract(ECCurve.Secp256r1.G).ScriptHash.ToArray();
            snapshot.Add(CreateStorageKey(20, G_Account), new StorageItem(new NeoAccountState()));
            var accountState = snapshot.TryGet(CreateStorageKey(20, G_Account)).GetInteroperable<NeoAccountState>();
            accountState.Balance = 20000000;
            var ret = Check_RegisterValidator(snapshot, ECCurve.Secp256r1.G.ToArray(), persistingBlock);
            ret.State.Should().BeTrue();
            ret.Result.Should().BeTrue();
            ret = Check_Vote(snapshot, G_Account, ECCurve.Secp256r1.G.ToArray(), true, persistingBlock);
            ret.State.Should().BeTrue();
            ret.Result.Should().BeTrue();

            var committeemembers = NativeContract.NEO.GetCommittee(snapshot);
            var defaultCommittee = ProtocolSettings.Default.StandbyCommittee.OrderBy(p => p).ToArray();
            committeemembers.GetType().Should().Be(typeof(ECPoint[]));
            for (int i = 0; i < ProtocolSettings.Default.CommitteeMembersCount; i++)
            {
                committeemembers[i].Should().Be(defaultCommittee[i]);
            }

            //register more candidates, committee member change
            persistingBlock = new Block
            {
                Header = new Header
                {
                    Index = (uint)ProtocolSettings.Default.CommitteeMembersCount,
                    MerkleRoot = UInt256.Zero,
                    NextConsensus = UInt160.Zero,
                    PrevHash = UInt256.Zero,
                    Witness = new Witness() { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() }
                },
                Transactions = Array.Empty<Transaction>()
            };
            for (int i = 0; i < ProtocolSettings.Default.CommitteeMembersCount - 1; i++)
            {
                ret = Check_RegisterValidator(snapshot, ProtocolSettings.Default.StandbyCommittee[i].ToArray(), persistingBlock);
                ret.State.Should().BeTrue();
                ret.Result.Should().BeTrue();
            }

            Check_OnPersist(snapshot, persistingBlock).Should().BeTrue();

            committeemembers = NativeContract.NEO.GetCommittee(snapshot);
            committeemembers.Length.Should().Be(ProtocolSettings.Default.CommitteeMembersCount);
            committeemembers.Contains(ECCurve.Secp256r1.G).Should().BeTrue();
            for (int i = 0; i < ProtocolSettings.Default.CommitteeMembersCount - 1; i++)
            {
                committeemembers.Contains(ProtocolSettings.Default.StandbyCommittee[i]).Should().BeTrue();
            }
            committeemembers.Contains(ProtocolSettings.Default.StandbyCommittee[ProtocolSettings.Default.CommitteeMembersCount - 1]).Should().BeFalse();
        }

        [TestMethod]
        public void Check_Transfer()
        {
            var snapshot = _snapshot.CreateSnapshot();
            var persistingBlock = new Block { Header = new Header { Index = 1000 } };

            byte[] from = Contract.GetBFTAddress(ProtocolSettings.Default.StandbyValidators).ToArray();
            byte[] to = new byte[20];

            var keyCount = snapshot.GetChangeSet().Count();

            // Check unclaim

            var unclaim = Check_UnclaimedGas(snapshot, from, persistingBlock);
            unclaim.Value.Should().Be(new BigInteger(0.5 * 1000 * 100000000L));
            unclaim.State.Should().BeTrue();

            // Transfer

            NativeContract.NEO.Transfer(snapshot, from, to, BigInteger.One, false, persistingBlock).Should().BeFalse(); // Not signed
            NativeContract.NEO.Transfer(snapshot, from, to, BigInteger.One, true, persistingBlock).Should().BeTrue();
            NativeContract.NEO.BalanceOf(snapshot, from).Should().Be(99999999);
            NativeContract.NEO.BalanceOf(snapshot, to).Should().Be(1);

            var (from_balance, _, _) = GetAccountState(snapshot, new UInt160(from));
            var (to_balance, _, _) = GetAccountState(snapshot, new UInt160(to));

            from_balance.Should().Be(99999999);
            to_balance.Should().Be(1);

            // Check unclaim

            unclaim = Check_UnclaimedGas(snapshot, from, persistingBlock);
            unclaim.Value.Should().Be(new BigInteger(0));
            unclaim.State.Should().BeTrue();

            snapshot.GetChangeSet().Count().Should().Be(keyCount + 4); // Gas + new balance

            // Return balance

            keyCount = snapshot.GetChangeSet().Count();

            NativeContract.NEO.Transfer(snapshot, to, from, BigInteger.One, true, persistingBlock).Should().BeTrue();
            NativeContract.NEO.BalanceOf(snapshot, to).Should().Be(0);
            snapshot.GetChangeSet().Count().Should().Be(keyCount - 1);  // Remove neo balance from address two

            // Bad inputs

            Assert.ThrowsException<ArgumentOutOfRangeException>(() => NativeContract.NEO.Transfer(snapshot, from, to, BigInteger.MinusOne, true, persistingBlock));
            Assert.ThrowsException<ArgumentOutOfRangeException>(() => NativeContract.NEO.Transfer(snapshot, new byte[19], to, BigInteger.One, false, persistingBlock));
            Assert.ThrowsException<ArgumentOutOfRangeException>(() => NativeContract.NEO.Transfer(snapshot, from, new byte[19], BigInteger.One, false, persistingBlock));

            // More than balance

            NativeContract.NEO.Transfer(snapshot, to, from, new BigInteger(2), true, persistingBlock).Should().BeFalse();
        }

        [TestMethod]
        public void Check_BalanceOf()
        {
            var snapshot = _snapshot.CreateSnapshot();
            byte[] account = Contract.GetBFTAddress(ProtocolSettings.Default.StandbyValidators).ToArray();

            NativeContract.NEO.BalanceOf(snapshot, account).Should().Be(100_000_000);

            account[5]++; // Without existing balance

            NativeContract.NEO.BalanceOf(snapshot, account).Should().Be(0);
        }

        [TestMethod]
        public void Check_CommitteeBonus()
        {
            var snapshot = _snapshot.CreateSnapshot();
            var persistingBlock = new Block
            {
                Header = new Header
                {
                    Index = 1,
                    Witness = new Witness() { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() },
                    MerkleRoot = UInt256.Zero,
                    NextConsensus = UInt160.Zero,
                    PrevHash = UInt256.Zero
                },
                Transactions = Array.Empty<Transaction>()
            };

            Check_PostPersist(snapshot, persistingBlock).Should().BeTrue();

            var committee = ProtocolSettings.Default.StandbyCommittee;
            NativeContract.GAS.BalanceOf(snapshot, Contract.CreateSignatureContract(committee[0]).ScriptHash.ToArray()).Should().Be(50000000);
            NativeContract.GAS.BalanceOf(snapshot, Contract.CreateSignatureContract(committee[1]).ScriptHash.ToArray()).Should().Be(50000000);
            NativeContract.GAS.BalanceOf(snapshot, Contract.CreateSignatureContract(committee[2]).ScriptHash.ToArray()).Should().Be(0);
        }

        [TestMethod]
        public void Check_Initialize()
        {
            var snapshot = _snapshot.CreateSnapshot();

            // StandbyValidators

            Check_GetCommittee(snapshot, null);
        }

        [TestMethod]
        public void TestCalculateBonus()
        {
            var snapshot = _snapshot.CreateSnapshot();
            var persistingBlock = new Block();

            StorageKey key = CreateStorageKey(20, UInt160.Zero.ToArray());

            // Fault: balance < 0

            snapshot.Add(key, new StorageItem(new NeoAccountState
            {
                Balance = -100
            }));
            Action action = () => NativeContract.NEO.UnclaimedGas(snapshot, UInt160.Zero, 10).Should().Be(new BigInteger(0));
            action.Should().Throw<ArgumentOutOfRangeException>();
            snapshot.Delete(key);

            // Fault range: start >= end

            snapshot.GetAndChange(key, () => new StorageItem(new NeoAccountState
            {
                Balance = 100,
                BalanceHeight = 100
            }));
            action = () => NativeContract.NEO.UnclaimedGas(snapshot, UInt160.Zero, 10).Should().Be(new BigInteger(0));
            snapshot.Delete(key);

            // Fault range: start >= end

            snapshot.GetAndChange(key, () => new StorageItem(new NeoAccountState
            {
                Balance = 100,
                BalanceHeight = 100
            }));
            action = () => NativeContract.NEO.UnclaimedGas(snapshot, UInt160.Zero, 10).Should().Be(new BigInteger(0));
            snapshot.Delete(key);

            // Normal 1) votee is non exist

            snapshot.GetAndChange(key, () => new StorageItem(new NeoAccountState
            {
                Balance = 100
            }));
            NativeContract.NEO.UnclaimedGas(snapshot, UInt160.Zero, 100).Should().Be(new BigInteger(0.5 * 100 * 100));
            snapshot.Delete(key);

            // Normal 2) votee is not committee

            snapshot.GetAndChange(key, () => new StorageItem(new NeoAccountState
            {
                Balance = 100,
                VoteTo = ECCurve.Secp256r1.G
            }));
            NativeContract.NEO.UnclaimedGas(snapshot, UInt160.Zero, 100).Should().Be(new BigInteger(0.5 * 100 * 100));
            snapshot.Delete(key);

            // Normal 3) votee is committee

            snapshot.GetAndChange(key, () => new StorageItem(new NeoAccountState
            {
                Balance = 100,
                VoteTo = ProtocolSettings.Default.StandbyCommittee[0]
            }));
            snapshot.Add(new KeyBuilder(NativeContract.NEO.Id, 23).Add(ProtocolSettings.Default.StandbyCommittee[0]).AddBigEndian(uint.MaxValue - 50), new StorageItem() { Value = new BigInteger(50 * 10000L).ToByteArray() });
            NativeContract.NEO.UnclaimedGas(snapshot, UInt160.Zero, 100).Should().Be(new BigInteger(50 * 100));
            snapshot.Delete(key);
        }

        [TestMethod]
        public void TestGetNextBlockValidators1()
        {
            var snapshot = TestBlockchain.GetTestSnapshot();
            var result = (VM.Types.Array)NativeContract.NEO.Call(snapshot, ""getNextBlockValidators"");
            result.Count.Should().Be(7);
            result[0].GetSpan().ToHexString().Should().Be(""02486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a70"");
            result[1].GetSpan().ToHexString().Should().Be(""024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d"");
            result[2].GetSpan().ToHexString().Should().Be(""02aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e"");
            result[3].GetSpan().ToHexString().Should().Be(""03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c"");
            result[4].GetSpan().ToHexString().Should().Be(""03b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a"");
            result[5].GetSpan().ToHexString().Should().Be(""02ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba554"");
            result[6].GetSpan().ToHexString().Should().Be(""02df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e895093"");
        }

        [TestMethod]
        public void TestGetNextBlockValidators2()
        {
            var snapshot = _snapshot.CreateSnapshot();
            var result = NativeContract.NEO.GetNextBlockValidators(snapshot, 7);
            result.Length.Should().Be(7);
            result[0].ToArray().ToHexString().Should().Be(""02486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a70"");
            result[1].ToArray().ToHexString().Should().Be(""024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d"");
            result[2].ToArray().ToHexString().Should().Be(""02aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e"");
            result[3].ToArray().ToHexString().Should().Be(""03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c"");
            result[4].ToArray().ToHexString().Should().Be(""03b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a"");
            result[5].ToArray().ToHexString().Should().Be(""02ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba554"");
            result[6].ToArray().ToHexString().Should().Be(""02df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e895093"");
        }

        [TestMethod]
        public void TestGetCandidates1()
        {
            var snapshot = TestBlockchain.GetTestSnapshot();
            var array = (VM.Types.Array)NativeContract.NEO.Call(snapshot, ""getCandidates"");
            array.Count.Should().Be(0);
        }

        [TestMethod]
        public void TestGetCandidates2()
        {
            var snapshot = _snapshot.CreateSnapshot();
            var result = NativeContract.NEO.GetCandidates(snapshot);
            result.Length.Should().Be(0);

            StorageKey key = NativeContract.NEO.CreateStorageKey(33, ECCurve.Secp256r1.G);
            snapshot.Add(key, new StorageItem(new CandidateState()));
            NativeContract.NEO.GetCandidates(snapshot).Length.Should().Be(1);
        }

        [TestMethod]
        public void TestCheckCandidate()
        {
            var snapshot = _snapshot.CreateSnapshot();
            var committee = NativeContract.NEO.GetCommittee(snapshot);
            var point = committee[0].EncodePoint(true);

            // Prepare Prefix_VoterRewardPerCommittee
            var storageKey = new KeyBuilder(NativeContract.NEO.Id, 23).Add(committee[0]).AddBigEndian(20);
            snapshot.Add(storageKey, new StorageItem(new BigInteger(1000)));

            // Prepare Candidate
            storageKey = new KeyBuilder(NativeContract.NEO.Id, 33).Add(committee[0]);
            snapshot.Add(storageKey, new StorageItem(new CandidateState { Registered = true, Votes = BigInteger.One }));

            storageKey = new KeyBuilder(NativeContract.NEO.Id, 23).Add(committee[0]);
            snapshot.Find(storageKey.ToArray()).ToArray().Length.Should().Be(1);

            // Pre-persist
            var persistingBlock = new Block
            {
                Header = new Header
                {
                    Index = 21,
                    Witness = new Witness() { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() },
                    MerkleRoot = UInt256.Zero,
                    NextConsensus = UInt160.Zero,
                    PrevHash = UInt256.Zero
                },
                Transactions = Array.Empty<Transaction>()
            };
            Check_OnPersist(snapshot, persistingBlock).Should().BeTrue();

            // Clear votes
            storageKey = new KeyBuilder(NativeContract.NEO.Id, 33).Add(committee[0]);
            snapshot.GetAndChange(storageKey).GetInteroperable<CandidateState>().Votes = BigInteger.Zero;

            // Unregister candidate, remove
            var ret = Check_UnregisterCandidate(snapshot, point, persistingBlock);
            ret.State.Should().BeTrue();
            ret.Result.Should().BeTrue();

            storageKey = new KeyBuilder(NativeContract.NEO.Id, 23).Add(committee[0]);
            snapshot.Find(storageKey.ToArray()).ToArray().Length.Should().Be(0);

            // Post-persist
            Check_PostPersist(snapshot, persistingBlock).Should().BeTrue();

            storageKey = new KeyBuilder(NativeContract.NEO.Id, 23).Add(committee[0]);
            snapshot.Find(storageKey.ToArray()).ToArray().Length.Should().Be(1);
        }

        [TestMethod]
        public void TestGetCommittee()
        {
            var snapshot = TestBlockchain.GetTestSnapshot();
            var result = (VM.Types.Array)NativeContract.NEO.Call(snapshot, ""getCommittee"");
            result.Count.Should().Be(21);
            result[0].GetSpan().ToHexString().Should().Be(""020f2887f41474cfeb11fd262e982051c1541418137c02a0f4961af911045de639"");
            result[1].GetSpan().ToHexString().Should().Be(""03204223f8c86b8cd5c89ef12e4f0dbb314172e9241e30c9ef2293790793537cf0"");
            result[2].GetSpan().ToHexString().Should().Be(""0222038884bbd1d8ff109ed3bdef3542e768eef76c1247aea8bc8171f532928c30"");
            result[3].GetSpan().ToHexString().Should().Be(""0226933336f1b75baa42d42b71d9091508b638046d19abd67f4e119bf64a7cfb4d"");
            result[4].GetSpan().ToHexString().Should().Be(""023a36c72844610b4d34d1968662424011bf783ca9d984efa19a20babf5582f3fe"");
            result[5].GetSpan().ToHexString().Should().Be(""03409f31f0d66bdc2f70a9730b66fe186658f84a8018204db01c106edc36553cd0"");
            result[6].GetSpan().ToHexString().Should().Be(""02486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a70"");
            result[7].GetSpan().ToHexString().Should().Be(""024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d"");
            result[8].GetSpan().ToHexString().Should().Be(""02504acbc1f4b3bdad1d86d6e1a08603771db135a73e61c9d565ae06a1938cd2ad"");
            result[9].GetSpan().ToHexString().Should().Be(""03708b860c1de5d87f5b151a12c2a99feebd2e8b315ee8e7cf8aa19692a9e18379"");
            result[10].GetSpan().ToHexString().Should().Be(""0288342b141c30dc8ffcde0204929bb46aed5756b41ef4a56778d15ada8f0c6654"");
            result[11].GetSpan().ToHexString().Should().Be(""02a62c915cf19c7f19a50ec217e79fac2439bbaad658493de0c7d8ffa92ab0aa62"");
            result[12].GetSpan().ToHexString().Should().Be(""02aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e"");
            result[13].GetSpan().ToHexString().Should().Be(""03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c"");
            result[14].GetSpan().ToHexString().Should().Be(""03b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a"");
            result[15].GetSpan().ToHexString().Should().Be(""03c6aa6e12638b36e88adc1ccdceac4db9929575c3e03576c617c49cce7114a050"");
            result[16].GetSpan().ToHexString().Should().Be(""02ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba554"");
            result[17].GetSpan().ToHexString().Should().Be(""02cd5a5547119e24feaa7c2a0f37b8c9366216bab7054de0065c9be42084003c8a"");
            result[18].GetSpan().ToHexString().Should().Be(""03cdcea66032b82f5c30450e381e5295cae85c5e6943af716cc6b646352a6067dc"");
            result[19].GetSpan().ToHexString().Should().Be(""03d281b42002647f0113f36c7b8efb30db66078dfaaa9ab3ff76d043a98d512fde"");
            result[20].GetSpan().ToHexString().Should().Be(""02df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e895093"");
        }

        [TestMethod]
        public void TestGetValidators()
        {
            var snapshot = _snapshot.CreateSnapshot();
            var result = NativeContract.NEO.ComputeNextBlockValidators(snapshot, ProtocolSettings.Default);
            result[0].ToArray().ToHexString().Should().Be(""02486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a70"");
            result[1].ToArray().ToHexString().Should().Be(""024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d"");
            result[2].ToArray().ToHexString().Should().Be(""02aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e"");
            result[3].ToArray().ToHexString().Should().Be(""03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c"");
            result[4].ToArray().ToHexString().Should().Be(""03b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a"");
            result[5].ToArray().ToHexString().Should().Be(""02ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba554"");
            result[6].ToArray().ToHexString().Should().Be(""02df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e895093"");
        }

        [TestMethod]
        public void TestOnBalanceChanging()
        {
            var ret = Transfer4TesingOnBalanceChanging(new BigInteger(0), false);
            ret.Result.Should().BeTrue();
            ret.State.Should().BeTrue();

            ret = Transfer4TesingOnBalanceChanging(new BigInteger(1), false);
            ret.Result.Should().BeTrue();
            ret.State.Should().BeTrue();

            ret = Transfer4TesingOnBalanceChanging(new BigInteger(1), true);
            ret.Result.Should().BeTrue();
            ret.State.Should().BeTrue();
        }

        [TestMethod]
        public void TestTotalSupply()
        {
            var snapshot = _snapshot.CreateSnapshot();
            NativeContract.NEO.TotalSupply(snapshot).Should().Be(new BigInteger(100000000));
        }

        [TestMethod]
        public void TestEconomicParameter()
        {
            const byte Prefix_CurrentBlock = 12;
            var snapshot = _snapshot.CreateSnapshot();
            var persistingBlock = new Block { Header = new Header() };

            (BigInteger, bool) result = Check_GetGasPerBlock(snapshot, persistingBlock);
            result.Item2.Should().BeTrue();
            result.Item1.Should().Be(5 * NativeContract.GAS.Factor);

            persistingBlock = new Block { Header = new Header { Index = 10 } };
            (VM.Types.Boolean, bool) result1 = Check_SetGasPerBlock(snapshot, 10 * NativeContract.GAS.Factor, persistingBlock);
            result1.Item2.Should().BeTrue();
            result1.Item1.GetBoolean().Should().BeTrue();

            var height = snapshot[NativeContract.Ledger.CreateStorageKey(Prefix_CurrentBlock)].GetInteroperable<HashIndexState>();
            height.Index = persistingBlock.Index + 1;
            result = Check_GetGasPerBlock(snapshot, persistingBlock);
            result.Item2.Should().BeTrue();
            result.Item1.Should().Be(10 * NativeContract.GAS.Factor);

            // Check calculate bonus
            StorageItem storage = snapshot.GetOrAdd(CreateStorageKey(20, UInt160.Zero.ToArray()), () => new StorageItem(new NeoAccountState()));
            NeoAccountState state = storage.GetInteroperable<NeoAccountState>();
            state.Balance = 1000;
            state.BalanceHeight = 0;
            height.Index = 0; // Fake Height=0
            NativeContract.NEO.UnclaimedGas(snapshot, UInt160.Zero, persistingBlock.Index + 2).Should().Be(6500);
        }

        [TestMethod]
        public void TestClaimGas()
        {
            var snapshot = _snapshot.CreateSnapshot();

            // Initialize block
            snapshot.Add(CreateStorageKey(1), new StorageItem(new BigInteger(30000000)));

            ECPoint[] standbyCommittee = ProtocolSettings.Default.StandbyCommittee.OrderBy(p => p).ToArray();
            CachedCommittee cachedCommittee = new();
            for (var i = 0; i < ProtocolSettings.Default.CommitteeMembersCount; i++)
            {
                ECPoint member = standbyCommittee[i];
                snapshot.Add(new KeyBuilder(NativeContract.NEO.Id, 33).Add(member), new StorageItem(new CandidateState()
                {
                    Registered = true,
                    Votes = 200 * 10000
                }));
                cachedCommittee.Add((member, 200 * 10000));
            }
            snapshot.GetOrAdd(new KeyBuilder(NativeContract.NEO.Id, 14), () => new StorageItem()).Value = BinarySerializer.Serialize(cachedCommittee.ToStackItem(null), 4096);

            var item = snapshot.GetAndChange(new KeyBuilder(NativeContract.NEO.Id, 1), () => new StorageItem());
            item.Value = ((BigInteger)2100 * 10000L).ToByteArray();

            var persistingBlock = new Block
            {
                Header = new Header
                {
                    Index = 0,
                    Witness = new Witness() { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() },
                    MerkleRoot = UInt256.Zero,
                    NextConsensus = UInt160.Zero,
                    PrevHash = UInt256.Zero
                },
                Transactions = Array.Empty<Transaction>()
            };
            Check_PostPersist(snapshot, persistingBlock).Should().BeTrue();

            var committee = ProtocolSettings.Default.StandbyCommittee.OrderBy(p => p).ToArray();
            var accountA = committee[0];
            var accountB = committee[ProtocolSettings.Default.CommitteeMembersCount - 1];
            NativeContract.NEO.BalanceOf(snapshot, Contract.CreateSignatureContract(accountA).ScriptHash).Should().Be(0);

            StorageItem storageItem = snapshot.TryGet(new KeyBuilder(NativeContract.NEO.Id, 23).Add(accountA).AddBigEndian(1));
            new BigInteger(storageItem.Value).Should().Be(30000000000);

            snapshot.TryGet(new KeyBuilder(NativeContract.NEO.Id, 23).Add(accountB).AddBigEndian(uint.MaxValue - 1)).Should().BeNull();

            // Next block

            persistingBlock = new Block
            {
                Header = new Header
                {
                    Index = 1,
                    Witness = new Witness() { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() },
                    MerkleRoot = UInt256.Zero,
                    NextConsensus = UInt160.Zero,
                    PrevHash = UInt256.Zero
                },
                Transactions = Array.Empty<Transaction>()
            };
            Check_PostPersist(snapshot, persistingBlock).Should().BeTrue();

            NativeContract.NEO.BalanceOf(snapshot, Contract.CreateSignatureContract(committee[1]).ScriptHash).Should().Be(0);

            storageItem = snapshot.TryGet(new KeyBuilder(NativeContract.NEO.Id, 23).Add(committee[1]).AddBigEndian(1));
            new BigInteger(storageItem.Value).Should().Be(30000000000);

            // Next block

            persistingBlock = new Block
            {
                Header = new Header
                {
                    Index = 21,
                    Witness = new Witness() { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() },
                    MerkleRoot = UInt256.Zero,
                    NextConsensus = UInt160.Zero,
                    PrevHash = UInt256.Zero
                },
                Transactions = Array.Empty<Transaction>()
            };
            Check_PostPersist(snapshot, persistingBlock).Should().BeTrue();

            accountA = ProtocolSettings.Default.StandbyCommittee.OrderBy(p => p).ToArray()[2];
            NativeContract.NEO.BalanceOf(snapshot, Contract.CreateSignatureContract(committee[2]).ScriptHash).Should().Be(0);

            storageItem = snapshot.TryGet(new KeyBuilder(NativeContract.NEO.Id, 23).Add(committee[2]).AddBigEndian(22));
            new BigInteger(storageItem.Value).Should().Be(30000000000 * 2);

            // Claim GAS

            var account = Contract.CreateSignatureContract(committee[2]).ScriptHash;
            snapshot.Add(new KeyBuilder(NativeContract.NEO.Id, 20).Add(account), new StorageItem(new NeoAccountState
            {
                BalanceHeight = 3,
                Balance = 200 * 10000 - 2 * 100,
                VoteTo = committee[2]
            }));
            NativeContract.NEO.BalanceOf(snapshot, account).Should().Be(1999800);
            BigInteger value = NativeContract.NEO.UnclaimedGas(snapshot, account, 29 + 3);
            value.Should().Be(1999800 * 30000000000 / 100000000L + (1999800L * 10 * 5 * 29 / 100));
        }

        [TestMethod]
        public void TestUnclaimedGas()
        {
            var snapshot = _snapshot.CreateSnapshot();
            NativeContract.NEO.UnclaimedGas(snapshot, UInt160.Zero, 10).Should().Be(new BigInteger(0));
            snapshot.Add(CreateStorageKey(20, UInt160.Zero.ToArray()), new StorageItem(new NeoAccountState()));
            NativeContract.NEO.UnclaimedGas(snapshot, UInt160.Zero, 10).Should().Be(new BigInteger(0));
        }

        [TestMethod]
        public void TestVote()
        {
            var snapshot = _snapshot.CreateSnapshot();
            UInt160 account = UInt160.Parse(""01ff00ff00ff00ff00ff00ff00ff00ff00ff00a4"");
            StorageKey keyAccount = CreateStorageKey(20, account.ToArray());
            StorageKey keyValidator = CreateStorageKey(33, ECCurve.Secp256r1.G.ToArray());
            var ret = Check_Vote(snapshot, account.ToArray(), ECCurve.Secp256r1.G.ToArray(), false, _persistingBlock);
            ret.State.Should().BeTrue();
            ret.Result.Should().BeFalse();

            ret = Check_Vote(snapshot, account.ToArray(), ECCurve.Secp256r1.G.ToArray(), true, _persistingBlock);
            ret.State.Should().BeTrue();
            ret.Result.Should().BeFalse();

            snapshot.Add(keyAccount, new StorageItem(new NeoAccountState()));
            ret = Check_Vote(snapshot, account.ToArray(), ECCurve.Secp256r1.G.ToArray(), true, _persistingBlock);
            ret.State.Should().BeTrue();
            ret.Result.Should().BeFalse();

            var (_, _, vote_to_null) = GetAccountState(snapshot, account);
            vote_to_null.Should().BeNull();

            snapshot.Delete(keyAccount);
            snapshot.GetAndChange(keyAccount, () => new StorageItem(new NeoAccountState
            {
                VoteTo = ECCurve.Secp256r1.G
            }));
            snapshot.Add(keyValidator, new StorageItem(new CandidateState()));
            ret = Check_Vote(snapshot, account.ToArray(), ECCurve.Secp256r1.G.ToArray(), true, _persistingBlock);
            ret.State.Should().BeTrue();
            ret.Result.Should().BeTrue();

            var (_, _, voteto) = GetAccountState(snapshot, account);
            voteto.ToHexString().Should().Be(ECCurve.Secp256r1.G.ToArray().ToHexString());
        }

        internal (bool State, bool Result) Transfer4TesingOnBalanceChanging(BigInteger amount, bool addVotes)
        {
            var snapshot = _snapshot.CreateSnapshot();
            var engine = ApplicationEngine.Create(TriggerType.Application, TestBlockchain.TheNeoSystem.GenesisBlock, snapshot, TestBlockchain.TheNeoSystem.GenesisBlock, settings: TestBlockchain.TheNeoSystem.Settings);
            ScriptBuilder sb = new();
            var tmp = engine.ScriptContainer.GetScriptHashesForVerifying(engine.Snapshot);
            UInt160 from = engine.ScriptContainer.GetScriptHashesForVerifying(engine.Snapshot)[0];
            if (addVotes)
            {
                snapshot.Add(CreateStorageKey(20, from.ToArray()), new StorageItem(new NeoAccountState
                {
                    VoteTo = ECCurve.Secp256r1.G,
                    Balance = new BigInteger(1000)
                }));
                snapshot.Add(NativeContract.NEO.CreateStorageKey(33, ECCurve.Secp256r1.G), new StorageItem(new CandidateState()));
            }
            else
            {
                snapshot.Add(CreateStorageKey(20, from.ToArray()), new StorageItem(new NeoAccountState
                {
                    Balance = new BigInteger(1000)
                }));
            }

            sb.EmitDynamicCall(NativeContract.NEO.Hash, ""transfer"", from, UInt160.Zero, amount, null);
            engine.LoadScript(sb.ToArray());
            engine.Execute();
            var result = engine.ResultStack.Peek();
            result.GetType().Should().Be(typeof(VM.Types.Boolean));
            return (true, result.GetBoolean());
        }

        internal static bool Check_OnPersist(DataCache snapshot, Block persistingBlock)
        {
            var script = new ScriptBuilder();
            script.EmitSysCall(ApplicationEngine.System_Contract_NativeOnPersist);
            var engine = ApplicationEngine.Create(TriggerType.OnPersist, null, snapshot, persistingBlock, settings: TestBlockchain.TheNeoSystem.Settings);
            engine.LoadScript(script.ToArray());

            return engine.Execute() == VMState.HALT;
        }

        internal static bool Check_PostPersist(DataCache snapshot, Block persistingBlock)
        {
            using var script = new ScriptBuilder();
            script.EmitSysCall(ApplicationEngine.System_Contract_NativePostPersist);
            using var engine = ApplicationEngine.Create(TriggerType.PostPersist, null, snapshot, persistingBlock, settings: TestBlockchain.TheNeoSystem.Settings);
            engine.LoadScript(script.ToArray());

            return engine.Execute() == VMState.HALT;
        }

        internal static (BigInteger Value, bool State) Check_GetGasPerBlock(DataCache snapshot, Block persistingBlock)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application, null, snapshot, persistingBlock, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(NativeContract.NEO.Hash, ""getGasPerBlock"");
            engine.LoadScript(script.ToArray());

            if (engine.Execute() == VMState.FAULT)
            {
                return (BigInteger.Zero, false);
            }

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Integer));

            return (((VM.Types.Integer)result).GetInteger(), true);
        }

        internal static (VM.Types.Boolean Value, bool State) Check_SetGasPerBlock(DataCache snapshot, BigInteger gasPerBlock, Block persistingBlock)
        {
            UInt160 committeeMultiSigAddr = NativeContract.NEO.GetCommitteeAddress(snapshot);
            using var engine = ApplicationEngine.Create(TriggerType.Application, new Nep17NativeContractExtensions.ManualWitness(committeeMultiSigAddr), snapshot, persistingBlock, settings: TestBlockchain.TheNeoSystem.Settings);

            var script = new ScriptBuilder();
            script.EmitDynamicCall(NativeContract.NEO.Hash, ""setGasPerBlock"", gasPerBlock);
            engine.LoadScript(script.ToArray());

            if (engine.Execute() == VMState.FAULT)
            {
                return (false, false);
            }

            return (true, true);
        }

        internal static (bool State, bool Result) Check_Vote(DataCache snapshot, byte[] account, byte[] pubkey, bool signAccount, Block persistingBlock)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application,
                new Nep17NativeContractExtensions.ManualWitness(signAccount ? new UInt160(account) : UInt160.Zero), snapshot, persistingBlock, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(NativeContract.NEO.Hash, ""vote"", account, pubkey);
            engine.LoadScript(script.ToArray());

            if (engine.Execute() == VMState.FAULT)
            {
                return (false, false);
            }

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Boolean));

            return (true, result.GetBoolean());
        }

        internal static (bool State, bool Result) Check_RegisterValidator(DataCache snapshot, byte[] pubkey, Block persistingBlock)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application,
                new Nep17NativeContractExtensions.ManualWitness(Contract.CreateSignatureRedeemScript(ECPoint.DecodePoint(pubkey, ECCurve.Secp256r1)).ToScriptHash()), snapshot, persistingBlock, settings: TestBlockchain.TheNeoSystem.Settings, gas: 1100_00000000);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(NativeContract.NEO.Hash, ""registerCandidate"", pubkey);
            engine.LoadScript(script.ToArray());

            if (engine.Execute() == VMState.FAULT)
            {
                return (false, false);
            }

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Boolean));

            return (true, result.GetBoolean());
        }

        internal static ECPoint[] Check_GetCommittee(DataCache snapshot, Block persistingBlock)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application, null, snapshot, persistingBlock, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(NativeContract.NEO.Hash, ""getCommittee"");
            engine.LoadScript(script.ToArray());

            engine.Execute().Should().Be(VMState.HALT);

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Array));

            return (result as VM.Types.Array).Select(u => u.GetSpan().AsSerializable<ECPoint>()).ToArray();
        }

        internal static (BigInteger Value, bool State) Check_UnclaimedGas(DataCache snapshot, byte[] address, Block persistingBlock)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application, null, snapshot, persistingBlock, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(NativeContract.NEO.Hash, ""unclaimedGas"", address, persistingBlock.Index);
            engine.LoadScript(script.ToArray());

            if (engine.Execute() == VMState.FAULT)
            {
                return (BigInteger.Zero, false);
            }

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Integer));

            return (result.GetInteger(), true);
        }

        internal static void CheckValidator(ECPoint eCPoint, DataCache.Trackable trackable)
        {
            var st = new BigInteger(trackable.Item.Value);
            st.Should().Be(0);

            trackable.Key.Key.Should().BeEquivalentTo(new byte[] { 33 }.Concat(eCPoint.EncodePoint(true)));
        }

        internal static void CheckBalance(byte[] account, DataCache.Trackable trackable, BigInteger balance, BigInteger height, ECPoint voteTo)
        {
            var st = (VM.Types.Struct)BinarySerializer.Deserialize(trackable.Item.Value, ExecutionEngineLimits.Default);

            st.Count.Should().Be(3);
            st.Select(u => u.GetType()).ToArray().Should().BeEquivalentTo(new Type[] { typeof(VM.Types.Integer), typeof(VM.Types.Integer), typeof(VM.Types.ByteString) }); // Balance

            st[0].GetInteger().Should().Be(balance); // Balance
            st[1].GetInteger().Should().Be(height);  // BalanceHeight
            st[2].GetSpan().AsSerializable<ECPoint>().Should().BeEquivalentTo(voteTo);  // Votes

            trackable.Key.Key.Should().BeEquivalentTo(new byte[] { 20 }.Concat(account));
        }

        internal static StorageKey CreateStorageKey(byte prefix, byte[] key = null)
        {
            StorageKey storageKey = new()
            {
                Id = NativeContract.NEO.Id,
                Key = new byte[sizeof(byte) + (key?.Length ?? 0)]
            };
            storageKey.Key[0] = prefix;
            key?.CopyTo(storageKey.Key.AsSpan(1));
            return storageKey;
        }

        internal static (bool State, bool Result) Check_UnregisterCandidate(DataCache snapshot, byte[] pubkey, Block persistingBlock)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application,
                new Nep17NativeContractExtensions.ManualWitness(Contract.CreateSignatureRedeemScript(ECPoint.DecodePoint(pubkey, ECCurve.Secp256r1)).ToScriptHash()), snapshot, persistingBlock, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(NativeContract.NEO.Hash, ""unregisterCandidate"", pubkey);
            engine.LoadScript(script.ToArray());

            if (engine.Execute() == VMState.FAULT)
            {
                return (false, false);
            }

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Boolean));

            return (true, result.GetBoolean());
        }

        internal static (BigInteger balance, BigInteger height, byte[] voteto) GetAccountState(DataCache snapshot, UInt160 account)
        {
            using var engine = ApplicationEngine.Create(TriggerType.Application, null, snapshot, settings: TestBlockchain.TheNeoSystem.Settings);

            using var script = new ScriptBuilder();
            script.EmitDynamicCall(NativeContract.NEO.Hash, ""getAccountState"", account);
            engine.LoadScript(script.ToArray());

            engine.Execute().Should().Be(VMState.HALT);

            var result = engine.ResultStack.Pop();
            result.Should().BeOfType(typeof(VM.Types.Struct));

            VM.Types.Struct state = (result as VM.Types.Struct);
            var balance = state[0].GetInteger();
            var height = state[1].GetInteger();
            var voteto = state[2].IsNull ? null : state[2].GetSpan().ToArray();
            return (balance, height, voteto);
        }
    }",1,777 587 2000 123 773 2001 2002 59 773 2003 2004 59 91 2005 93 777 865 2006 40 41 123 2002 61 2007 46 2008 40 41 59 2004 61 744 2003 123 2009 61 744 2009 40 41 44 2010 61 2011 46 2012 60 2013 62 40 41 125 59 125 91 2014 93 777 865 2015 40 41 328 2016 46 2017 46 2018 46 2019 40 41 46 2020 40 2021 40 2022 41 41 59 91 2014 93 777 865 2023 40 41 328 2016 46 2017 46 2024 40 2002 41 46 2019 40 41 46 2020 40 362 41 59 91 2014 93 777 865 2025 40 41 328 2016 46 2017 46 2026 40 2002 41 46 2019 40 41 46 2020 40 1500 41 59 91 2014 93 777 865 2027 40 41 123 2028 2029 61 2002 46 2030 40 41 59 2028 2031 61 744 2003 123 2032 61 744 2032 123 2033 61 1504 125 125 59 574 91 93 2034 61 2035 46 2036 40 2037 46 2038 46 2039 41 46 2040 40 41 59 330 2028 2041 61 2027 40 2029 44 2034 44 752 44 655 44 2031 41 59 2041 46 2042 46 2019 40 41 46 2043 40 41 59 2041 46 2044 46 2019 40 41 46 2045 40 41 59 330 2041 61 2027 40 2029 44 744 574 91 1503 93 44 752 44 655 44 2031 41 59 2041 46 2042 46 2019 40 41 46 2043 40 41 59 2041 46 2044 46 2019 40 41 46 2043 40 41 59 330 2041 61 2027 40 2029 44 2034 44 744 574 91 1503 93 44 829 44 2031 41 59 2041 46 2042 46 2019 40 41 46 2043 40 41 59 2041 46 2044 46 2019 40 41 46 2043 40 41 59 330 2028 2046 61 744 574 91 1503 93 59 2046 91 1500 93 61 1503 59 2046 91 1502 93 61 1504 59 2041 61 2027 40 2029 44 2046 44 752 44 829 44 2031 41 59 2041 46 2042 46 2019 40 41 46 2043 40 41 59 2041 46 2044 46 2019 40 41 46 2045 40 41 59 330 2028 2047 61 2029 46 2048 40 2049 40 1503 44 2034 41 41 46 2050 60 2051 62 40 41 59 2047 46 2052 61 752 59 2041 61 2027 40 2029 44 2034 44 2053 46 2054 46 2055 46 2040 40 41 44 829 44 2031 41 59 2041 46 2042 46 2019 40 41 46 2043 40 41 59 2041 46 2044 46 2019 40 41 46 2045 40 41 59 2047 46 2052 46 2019 40 41 46 2056 40 41 59 330 2029 46 2057 40 2049 40 1503 44 2053 46 2054 46 2055 46 2040 40 41 41 44 744 2058 40 744 2059 40 41 41 41 59 2041 61 2027 40 2029 44 2034 44 2053 46 2054 46 2055 46 2040 40 41 44 829 44 2031 41 59 2041 46 2042 46 2019 40 41 46 2045 40 41 59 2041 46 2044 46 2019 40 41 46 2045 40 41 59 2047 46 2052 46 2019 40 41 46 2020 40 2053 46 2054 46 2055 41 59 125 91 2014 93 777 865 2060 40 41 123 2061 2062 61 2002 46 2063 40 41 59 2061 2064 61 744 2003 123 2065 61 744 2065 123 2066 61 1504 125 125 59 574 91 93 2067 61 2068 46 2069 40 2070 46 2071 46 2072 41 46 2073 40 41 59 2061 2074 61 2062 46 2075 40 2076 40 1503 44 2067 41 41 46 2077 60 2078 62 40 41 59 2074 46 2079 61 1503 59 2062 46 2080 40 2076 40 1503 44 2081 46 2082 46 2083 46 2073 40 41 41 44 744 2084 40 744 2085 40 41 41 41 59 2061 2086 61 2027 40 2062 44 2067 44 2081 46 2082 46 2083 46 2073 40 41 44 829 44 2064 41 59 2086 46 2087 46 2019 40 41 46 2088 40 41 59 2086 46 2089 46 2019 40 41 46 2088 40 41 59 2074 46 2090 46 2019 40 41 46 2020 40 2081 46 2082 46 2083 41 59 330 2061 2091 61 2062 46 2092 40 2076 40 1503 44 2081 46 2082 46 2083 46 2073 40 41 41 41 46 2077 60 2085 62 40 41 59 2091 46 2093 46 2019 40 41 46 2020 40 1503 41 59 2061 2094 61 2068 46 2095 40 2081 46 2082 46 2083 41 46 2096 46 2073 40 41 59 2062 46 2080 40 2076 40 1503 44 2094 41 44 744 2084 40 744 2078 123 2079 61 1504 125 41 41 59 2061 2097 61 2062 46 2075 40 2076 40 1503 44 2094 41 41 46 2077 60 2078 62 40 41 59 2097 46 2079 46 2019 40 41 46 2020 40 1504 41 59 2086 61 2027 40 2062 44 2094 44 2081 46 2082 46 2083 46 2073 40 41 44 829 44 2064 41 59 2086 46 2087 46 2019 40 41 46 2088 40 41 59 2086 46 2089 46 2019 40 41 46 2088 40 41 59 2091 46 2093 46 2019 40 41 46 2020 40 1504 41 59 125 91 2014 93 777 865 2098 40 41 123 2099 2100 61 2002 46 2101 40 41 59 2099 2102 61 744 2003 123 2103 61 744 2103 123 2104 61 1504 125 125 59 330 574 91 93 2105 61 2106 46 2107 46 2108 91 1500 93 46 2109 40 41 59 2099 2110 61 2111 46 2112 40 2106 46 2107 46 2108 91 1500 93 41 46 2113 46 2109 40 41 59 2100 46 2114 40 2115 40 1503 44 2110 41 44 744 2116 40 744 2117 40 41 41 41 59 2099 2118 61 2100 46 2119 40 2115 40 1503 44 2110 41 41 46 2120 60 2117 62 40 41 59 2118 46 2121 61 1503 59 2100 46 2114 40 2115 40 1503 44 2122 46 2123 46 2124 46 2109 40 41 41 44 744 2116 40 744 2125 40 41 41 41 59 2099 2126 61 2027 40 2100 44 2110 44 2122 46 2123 46 2124 46 2109 40 41 44 829 44 2102 41 59 2126 46 2127 46 2019 40 41 46 2128 40 41 59 2126 46 2129 46 2019 40 41 46 2128 40 41 59 2118 46 2130 46 2019 40 41 46 2020 40 2122 46 2123 46 2124 41 59 330 2099 2131 61 2100 46 2132 40 2115 40 1503 44 2122 46 2123 46 2124 46 2109 40 41 41 41 46 2120 60 2125 62 40 41 59 2131 46 2133 46 2019 40 41 46 2020 40 1503 41 59 2099 2134 61 2111 46 2112 40 2122 46 2123 46 2124 41 46 2113 46 2109 40 41 59 2100 46 2114 40 2115 40 1503 44 2134 41 44 744 2116 40 744 2117 123 2121 61 1504 125 41 41 59 2100 46 2114 40 2115 40 1503 44 2105 41 44 744 2116 40 744 2125 40 41 41 41 59 2126 61 2027 40 2100 44 2110 44 2105 44 829 44 2102 41 59 2126 46 2127 46 2019 40 41 46 2128 40 41 59 2126 46 2129 46 2019 40 41 46 2128 40 41 59 2131 46 2133 46 2019 40 41 46 2020 40 1500 41 59 2099 2135 61 2100 46 2132 40 2115 40 1503 44 2105 41 41 46 2120 60 2125 62 40 41 59 2135 46 2133 46 2019 40 41 46 2020 40 1503 41 59 125 91 2014 93 777 865 2136 40 41 123 2137 2138 61 2002 46 2139 40 41 59 2137 2140 61 744 2003 123 2141 61 744 2141 123 2142 61 1504 125 125 59 574 91 93 2143 61 2144 46 2145 46 2146 91 1500 93 46 2147 40 41 59 2137 2148 61 2149 46 2150 40 2144 46 2145 46 2146 91 1500 93 41 46 2151 46 2147 40 41 59 2138 46 2152 40 2153 40 1503 44 2148 41 44 744 2154 40 744 2155 40 41 41 41 59 2137 2156 61 2138 46 2157 40 2153 40 1503 44 2148 41 41 46 2158 60 2155 62 40 41 59 2156 46 2159 61 1503 59 2138 46 2152 40 2153 40 1503 44 2160 46 2161 46 2162 46 2147 40 41 41 44 744 2154 40 744 2163 40 41 41 41 59 2137 2164 61 2027 40 2138 44 2148 44 2160 46 2161 46 2162 46 2147 40 41 44 829 44 2140 41 59 2164 46 2165 46 2019 40 41 46 2166 40 41 59 2164 46 2167 46 2019 40 41 46 2166 40 41 59 2156 46 2168 46 2019 40 41 46 2020 40 2160 46 2161 46 2162 41 59 330 2137 2169 61 2138 46 2170 40 2153 40 1503 44 2160 46 2161 46 2162 46 2147 40 41 41 41 46 2158 60 2163 62 40 41 59 2169 46 2171 46 2019 40 41 46 2020 40 1503 41 59 2137 2172 61 2149 46 2150 40 2160 46 2161 46 2162 41 46 2151 46 2147 40 41 59 2138 46 2152 40 2153 40 1503 44 2172 41 44 744 2154 40 744 2155 123 2159 61 1504 125 41 41 59 2138 46 2152 40 2153 40 1503 44 2143 41 44 744 2154 40 744 2163 40 41 41 41 59 2164 61 2027 40 2138 44 2148 44 752 44 829 44 2140 41 59 2164 46 2165 46 2019 40 41 46 2166 40 41 59 2164 46 2167 46 2019 40 41 46 2166 40 41 59 2169 46 2171 46 2019 40 41 46 2020 40 1500 41 59 2156 46 2168 46 2019 40 41 46 2020 40 752 41 59 125 91 2014 93 777 865 2173 40 41 123 2174 2175 61 2002 46 2176 40 41 59 2174 2177 61 744 2003 123 2178 61 744 2178 123 2179 61 1504 125 125 59 574 91 93 2180 61 2181 46 2182 40 2183 46 2184 46 2185 41 46 2186 40 41 59 2174 2187 61 2173 40 2175 44 2180 44 2177 41 59 2187 46 2188 46 2019 40 41 46 2020 40 744 2189 40 1500 42 1504 42 1509 41 41 59 2187 46 2190 46 2019 40 41 46 2191 40 41 59 2187 61 2173 40 2175 44 744 574 91 1503 93 44 2177 41 59 2187 46 2188 46 2019 40 41 46 2020 40 2189 46 2192 41 59 2187 46 2190 46 2019 40 41 46 2193 40 41 59 125 91 2014 93 777 865 2194 40 41 123 2195 2196 61 2002 46 2197 40 41 59 2195 2198 61 2196 46 2199 40 41 46 2200 40 41 59 2195 2201 61 2202 46 2203 46 2204 91 1500 93 46 2205 40 829 41 46 2206 40 41 552 574 91 93 59 2195 2207 61 2194 40 2196 44 2201 44 2004 41 59 330 2207 46 2208 46 2019 40 41 46 2209 40 41 59 2207 46 2210 46 2019 40 41 46 2209 40 41 59 2196 46 2199 40 41 46 2200 40 41 46 2019 40 41 46 2020 40 349 2198 41 59 330 2201 91 1503 93 349 59 330 2207 61 2194 40 2196 44 2201 44 2004 41 59 330 2207 46 2208 46 2019 40 41 46 2209 40 41 59 2207 46 2210 46 2019 40 41 46 2209 40 41 59 2196 46 2199 40 41 46 2200 40 41 46 2019 40 41 46 2020 40 2198 43 1501 41 59 330 330 2195 2211 61 2016 46 2017 46 2212 40 2196 41 59 2213 46 2214 40 1502 44 2211 46 2215 41 59 125 91 2014 93 777 865 2216 40 41 123 2217 2218 61 2002 46 2219 40 41 59 2217 2220 61 2218 46 2221 40 41 46 2222 40 41 59 2217 2223 61 2224 46 2225 46 2226 91 1500 93 46 2227 40 829 41 59 330 2217 2228 61 2216 40 2218 44 2223 44 2004 41 59 2228 46 2229 46 2019 40 41 46 2230 40 41 59 2228 46 2231 46 2019 40 41 46 2230 40 41 59 2218 46 2221 40 41 46 2222 40 41 46 2019 40 41 46 2020 40 2220 41 59 330 2228 61 2194 40 2218 44 2223 44 2004 41 59 2232 2233 61 2218 46 2234 40 2235 40 1503 44 2223 41 41 59 2233 46 2236 46 2019 40 41 46 2020 40 1502 41 59 2228 46 2229 46 2019 40 41 46 2230 40 41 59 2228 46 2231 46 2019 40 41 46 2230 40 41 59 2217 2237 61 2016 46 2017 46 2238 40 2218 41 59 2239 46 2240 40 1501 44 2237 46 2241 41 59 2218 46 2221 40 41 46 2222 40 41 46 2019 40 41 46 2020 40 2220 43 1501 41 59 2242 2243 61 2235 40 1503 44 2223 41 59 2218 46 2244 40 2243 41 46 2019 40 41 46 2245 40 41 59 2228 61 2216 40 2218 44 2223 44 2004 41 59 2228 46 2229 46 2019 40 41 46 2230 40 41 59 2228 46 2231 46 2019 40 41 46 2230 40 41 59 2218 46 2221 40 41 46 2222 40 41 46 2019 40 41 46 2020 40 2220 41 59 2237 61 2016 46 2017 46 2238 40 2218 41 59 2239 46 2240 40 1500 44 2237 46 2241 41 59 2218 46 2244 40 2243 41 46 2019 40 41 46 2246 40 41 59 330 2228 61 2194 40 2218 44 2223 44 2004 41 59 2228 46 2229 46 2019 40 41 46 2230 40 41 59 2217 2247 61 2248 46 2249 40 2250 46 2251 46 2252 41 46 2253 46 2254 40 41 59 2218 46 2255 40 2235 40 1503 44 2247 41 44 744 2232 40 744 2256 40 41 41 41 59 2217 2257 61 2218 46 2244 40 2235 40 1503 44 2247 41 41 46 2258 60 2256 62 40 41 59 2257 46 2259 61 1503 59 2027 40 2218 44 2247 44 2224 46 2225 46 2226 91 1500 93 46 2254 40 41 44 829 44 2004 41 59 2228 61 2216 40 2218 44 2223 44 2004 41 59 2228 46 2229 46 2019 40 41 46 2230 40 41 59 2228 46 2231 46 2019 40 41 46 2230 40 41 59 2218 46 2244 40 2243 41 46 2019 40 41 46 2245 40 41 59 2232 2260 61 2218 46 2244 40 2243 41 59 2261 2262 61 2260 46 2258 60 2261 62 40 41 59 2262 46 2263 46 2019 40 41 46 2264 40 41 59 2262 46 2265 46 2019 40 41 46 2020 40 1503 41 59 330 2228 61 2027 40 2218 44 2247 44 2224 46 2225 46 2226 91 1500 93 46 2254 40 41 44 829 44 2004 41 59 2228 46 2229 46 2019 40 41 46 2230 40 41 59 2228 46 2231 46 2019 40 41 46 2264 40 41 59 2257 46 2266 46 2019 40 41 46 2020 40 2224 46 2225 46 2226 91 1500 93 41 59 125 91 2014 93 777 865 2267 40 41 123 2268 2269 61 2002 46 2270 40 41 59 2268 2271 61 2269 46 2272 40 41 46 2273 40 41 59 2268 2274 61 2275 46 2276 46 2277 91 1500 93 46 2278 40 829 41 59 2268 2279 61 2004 59 330 2268 2280 61 2281 46 2282 40 2283 46 2284 46 2285 41 46 2286 46 2287 40 41 59 2269 46 2288 40 2289 40 1503 44 2280 41 44 744 2290 40 744 2291 40 41 41 41 59 2268 2292 61 2269 46 2293 40 2289 40 1503 44 2280 41 41 46 2294 60 2291 62 40 41 59 2292 46 2295 61 1509 59 2268 2296 61 2194 40 2269 44 2283 46 2284 46 2285 46 2287 40 41 44 2279 41 59 2296 46 2297 46 2019 40 41 46 2298 40 41 59 2296 46 2299 46 2019 40 41 46 2298 40 41 59 2296 61 2027 40 2269 44 2280 44 2283 46 2284 46 2285 46 2287 40 41 44 829 44 2279 41 59 2296 46 2297 46 2019 40 41 46 2298 40 41 59 2296 46 2299 46 2019 40 41 46 2298 40 41 59 2268 2300 61 2016 46 2017 46 2301 40 2269 41 59 2268 2302 61 2275 46 2276 46 2303 46 2304 40 2305 328 2305 41 46 2287 40 41 59 2300 46 2306 40 41 46 2019 40 41 46 2020 40 836 40 2307 91 93 41 41 59 664 40 704 2308 61 1500 59 2308 60 2275 46 2276 46 2309 59 2308 349 41 123 2300 91 2308 93 46 2019 40 41 46 2020 40 2302 91 2308 93 41 59 125 330 2279 61 744 2003 123 2310 61 744 2310 123 2311 61 40 842 41 2275 46 2276 46 2309 44 2312 61 2313 46 2314 44 2315 61 2316 46 2314 44 2317 61 2313 46 2314 44 2318 61 744 2318 40 41 123 2319 61 2320 46 2321 60 574 62 40 41 44 2322 61 2320 46 2321 60 574 62 40 41 125 125 44 2323 61 2324 46 2325 60 2326 62 40 41 125 59 664 40 704 2308 61 1500 59 2308 60 2275 46 2276 46 2309 45 1501 59 2308 349 41 123 2296 61 2194 40 2269 44 2275 46 2276 46 2303 91 2308 93 46 2287 40 41 44 2279 41 59 2296 46 2297 46 2019 40 41 46 2298 40 41 59 2296 46 2299 46 2019 40 41 46 2298 40 41 59 125 2327 40 2269 44 2279 41 46 2019 40 41 46 2298 40 41 59 2300 61 2016 46 2017 46 2301 40 2269 41 59 2300 46 2328 46 2019 40 41 46 2020 40 2275 46 2276 46 2309 41 59 2300 46 2329 40 2283 46 2284 46 2285 41 46 2019 40 41 46 2298 40 41 59 664 40 704 2308 61 1500 59 2308 60 2275 46 2276 46 2309 45 1501 59 2308 349 41 123 2300 46 2329 40 2275 46 2276 46 2303 91 2308 93 41 46 2019 40 41 46 2298 40 41 59 125 2300 46 2329 40 2275 46 2276 46 2303 91 2275 46 2276 46 2309 45 1501 93 41 46 2019 40 41 46 2330 40 41 59 125 91 2014 93 777 865 2331 40 41 123 2332 2333 61 2002 46 2334 40 41 59 2332 2335 61 744 2003 123 2336 61 744 2336 123 2337 61 1504 125 125 59 574 91 93 2338 61 2339 46 2340 40 2341 46 2342 46 2343 41 46 2344 40 41 59 574 91 93 2345 61 744 574 91 1503 93 59 2332 2346 61 2333 46 2347 40 41 46 2348 40 41 59 330 2332 2349 61 2173 40 2333 44 2338 44 2335 41 59 2349 46 2350 46 2019 40 41 46 2020 40 744 2351 40 1500 42 1504 42 1509 41 41 59 2349 46 2352 46 2019 40 41 46 2353 40 41 59 330 2016 46 2017 46 2354 40 2333 44 2338 44 2345 44 2351 46 2355 44 655 44 2335 41 46 2019 40 41 46 2356 40 41 59 330 2016 46 2017 46 2354 40 2333 44 2338 44 2345 44 2351 46 2355 44 829 44 2335 41 46 2019 40 41 46 2353 40 41 59 2016 46 2017 46 2357 40 2333 44 2338 41 46 2019 40 41 46 2020 40 1509 41 59 2016 46 2017 46 2357 40 2333 44 2345 41 46 2019 40 41 46 2020 40 1501 41 59 2332 40 2358 44 2359 44 2359 41 61 2360 40 2333 44 744 2361 40 2338 41 41 59 2332 40 2362 44 2359 44 2359 41 61 2360 40 2333 44 744 2361 40 2345 41 41 59 2358 46 2019 40 41 46 2020 40 1509 41 59 2362 46 2019 40 41 46 2020 40 1501 41 59 330 2349 61 2173 40 2333 44 2338 44 2335 41 59 2349 46 2350 46 2019 40 41 46 2020 40 744 2351 40 1500 41 41 59 2349 46 2352 46 2019 40 41 46 2353 40 41 59 2333 46 2347 40 41 46 2348 40 41 46 2019 40 41 46 2020 40 2346 43 1502 41 59 330 330 2346 61 2333 46 2347 40 41 46 2348 40 41 59 2016 46 2017 46 2354 40 2333 44 2345 44 2338 44 2351 46 2355 44 829 44 2335 41 46 2019 40 41 46 2353 40 41 59 2016 46 2017 46 2357 40 2333 44 2345 41 46 2019 40 41 46 2020 40 1500 41 59 2333 46 2347 40 41 46 2348 40 41 46 2019 40 41 46 2020 40 2346 45 1501 41 59 330 330 2363 46 2364 60 2365 62 40 40 41 328 2016 46 2017 46 2354 40 2333 44 2338 44 2345 44 2351 46 2366 44 829 44 2335 41 41 59 2363 46 2364 60 2365 62 40 40 41 328 2016 46 2017 46 2354 40 2333 44 744 574 91 1503 93 44 2345 44 2351 46 2355 44 655 44 2335 41 41 59 2363 46 2364 60 2365 62 40 40 41 328 2016 46 2017 46 2354 40 2333 44 2338 44 744 574 91 1503 93 44 2351 46 2355 44 655 44 2335 41 41 59 330 2016 46 2017 46 2354 40 2333 44 2345 44 2338 44 744 2351 40 1502 41 44 829 44 2335 41 46 2019 40 41 46 2356 40 41 59 125 91 2014 93 777 865 2367 40 41 123 2368 2369 61 2002 46 2370 40 41 59 574 91 93 2371 61 2372 46 2373 40 2374 46 2375 46 2376 41 46 2377 40 41 59 2016 46 2017 46 2378 40 2369 44 2371 41 46 2019 40 41 46 2020 40 1503 41 59 2371 91 1502 93 349 59 330 2016 46 2017 46 2378 40 2369 44 2371 41 46 2019 40 41 46 2020 40 1500 41 59 125 91 2014 93 777 865 2379 40 41 123 2380 2381 61 2002 46 2382 40 41 59 2380 2383 61 744 2003 123 2384 61 744 2384 123 2385 61 1501 44 2386 61 744 2386 40 41 123 2387 61 2388 46 2389 60 574 62 40 41 44 2390 61 2388 46 2389 60 574 62 40 41 125 44 2391 61 2392 46 2393 44 2394 61 2395 46 2393 44 2396 61 2392 46 2393 125 44 2397 61 2398 46 2399 60 2400 62 40 41 125 59 2401 40 2381 44 2383 41 46 2019 40 41 46 2402 40 41 59 2380 2403 61 2404 46 2405 46 2406 59 2016 46 2407 46 2408 40 2381 44 2409 46 2410 40 2403 91 1500 93 41 46 2411 46 2412 40 41 41 46 2019 40 41 46 2020 40 1509 41 59 2016 46 2407 46 2408 40 2381 44 2409 46 2410 40 2403 91 1501 93 41 46 2411 46 2412 40 41 41 46 2019 40 41 46 2020 40 1509 41 59 2016 46 2407 46 2408 40 2381 44 2409 46 2410 40 2403 91 1502 93 41 46 2411 46 2412 40 41 41 46 2019 40 41 46 2020 40 1500 41 59 125 91 2014 93 777 865 2413 40 41 123 2414 2415 61 2002 46 2416 40 41 59 330 2267 40 2415 44 752 41 59 125 91 2014 93 777 865 2417 40 41 123 2418 2419 61 2002 46 2420 40 41 59 2418 2421 61 744 2003 40 41 59 2422 2423 61 2424 40 1503 44 2425 46 2426 46 2427 40 41 41 59 330 2419 46 2428 40 2423 44 744 2429 40 744 2430 123 2431 61 45 1503 125 41 41 59 2432 2433 61 40 41 328 2016 46 2017 46 2434 40 2419 44 2425 46 2426 44 1502 41 46 2019 40 41 46 2020 40 744 2435 40 1500 41 41 59 2433 46 2019 40 41 46 2436 60 2437 62 40 41 59 2419 46 2438 40 2423 41 59 330 2419 46 2439 40 2423 44 40 41 328 744 2429 40 744 2430 123 2440 61 1503 44 2441 61 1503 125 41 41 59 2433 61 40 41 328 2016 46 2017 46 2434 40 2419 44 2425 46 2426 44 1502 41 46 2019 40 41 46 2020 40 744 2435 40 1500 41 41 59 2419 46 2438 40 2423 41 59 330 2419 46 2439 40 2423 44 40 41 328 744 2429 40 744 2430 123 2442 61 1503 44 2443 61 1503 125 41 41 59 2433 61 40 41 328 2016 46 2017 46 2434 40 2419 44 2425 46 2426 44 1502 41 46 2019 40 41 46 2020 40 744 2435 40 1500 41 41 59 2419 46 2438 40 2423 41 59 330 2419 46 2439 40 2423 44 40 41 328 744 2429 40 744 2430 123 2444 61 1503 125 41 41 59 2016 46 2017 46 2434 40 2419 44 2425 46 2426 44 1503 41 46 2019 40 41 46 2020 40 744 2435 40 1500 42 1503 42 1503 41 41 59 2419 46 2438 40 2423 41 59 330 2419 46 2439 40 2423 44 40 41 328 744 2429 40 744 2430 123 2445 61 1503 44 2446 61 2447 46 2448 46 2449 125 41 41 59 2016 46 2017 46 2434 40 2419 44 2425 46 2426 44 1503 41 46 2019 40 41 46 2020 40 744 2435 40 1500 42 1503 42 1503 41 41 59 2419 46 2438 40 2423 41 59 330 2419 46 2439 40 2423 44 40 41 328 744 2429 40 744 2430 123 2450 61 1503 44 2451 61 2452 46 2453 46 2454 91 1500 93 125 41 41 59 2419 46 2428 40 744 2455 40 2016 46 2017 46 2456 44 1503 41 46 2428 40 2457 46 2458 46 2459 91 1500 93 41 46 2460 40 842 46 2461 45 1503 41 44 744 2429 40 41 123 2462 61 744 2435 40 1503 42 1505 41 46 2463 40 41 125 41 59 2016 46 2017 46 2434 40 2419 44 2425 46 2426 44 1503 41 46 2019 40 41 46 2020 40 744 2435 40 1503 42 1503 41 41 59 2419 46 2438 40 2423 41 59 125 91 2014 93 777 865 2464 40 41 123 2465 2466 61 2467 46 2468 40 41 59 2465 2469 61 40 2470 46 2471 46 2472 41 2016 46 2017 46 2473 40 2466 44 362 41 59 2469 46 2474 46 2019 40 41 46 2020 40 1502 41 59 2469 91 1500 93 46 2475 40 41 46 2476 40 41 46 2019 40 41 46 2020 40 362 41 59 2469 91 1501 93 46 2475 40 41 46 2476 40 41 46 2019 40 41 46 2020 40 362 41 59 2469 91 1502 93 46 2475 40 41 46 2476 40 41 46 2019 40 41 46 2020 40 362 41 59 2469 91 1502 93 46 2475 40 41 46 2476 40 41 46 2019 40 41 46 2020 40 362 41 59 2469 91 1502 93 46 2475 40 41 46 2476 40 41 46 2019 40 41 46 2020 40 362 41 59 2469 91 1502 93 46 2475 40 41 46 2476 40 41 46 2019 40 41 46 2020 40 362 41 59 2469 91 1502 93 46 2475 40 41 46 2476 40 41 46 2019 40 41 46 2020 40 362 41 59 125 91 2014 93 777 865 2477 40 41 123 2478 2479 61 2002 46 2480 40 41 59 2478 2481 61 2016 46 2017 46 2482 40 2479 44 1502 41 59 2481 46 2483 46 2019 40 41 46 2020 40 1502 41 59 2481 91 1500 93 46 2484 40 41 46 2485 40 41 46 2019 40 41 46 2020 40 362 41 59 2481 91 1501 93 46 2484 40 41 46 2485 40 41 46 2019 40 41 46 2020 40 362 41 59 2481 91 1502 93 46 2484 40 41 46 2485 40 41 46 2019 40 41 46 2020 40 362 41 59 2481 91 1502 93 46 2484 40 41 46 2485 40 41 46 2019 40 41 46 2020 40 362 41 59 2481 91 1502 93 46 2484 40 41 46 2485 40 41 46 2019 40 41 46 2020 40 362 41 59 2481 91 1502 93 46 2484 40 41 46 2485 40 41 46 2019 40 41 46 2020 40 362 41 59 2481 91 1502 93 46 2484 40 41 46 2485 40 41 46 2019 40 41 46 2020 40 362 41 59 125 91 2014 93 777 865 2486 40 41 123 2487 2488 61 2489 46 2490 40 41 59 2487 2491 61 40 2492 46 2493 46 2494 41 2016 46 2017 46 2495 40 2488 44 362 41 59 2491 46 2496 46 2019 40 41 46 2020 40 1500 41 59 125 91 2014 93 777 865 2497 40 41 123 2498 2499 61 2002 46 2500 40 41 59 2498 2501 61 2016 46 2017 46 2502 40 2499 41 59 2501 46 2503 46 2019 40 41 46 2020 40 1500 41 59 2504 2505 61 2016 46 2017 46 2506 40 1503 44 2507 46 2508 46 2509 41 59 2499 46 2510 40 2505 44 744 2511 40 744 2512 40 41 41 41 59 2016 46 2017 46 2502 40 2499 41 46 2503 46 2019 40 41 46 2020 40 1501 41 59 125 91 2014 93 777 865 2513 40 41 123 2514 2515 61 2002 46 2516 40 41 59 2514 2517 61 2016 46 2017 46 2518 40 2515 41 59 2514 2519 61 2517 91 1500 93 46 2520 40 829 41 59 330 2514 2521 61 744 2522 40 2016 46 2017 46 2523 44 1503 41 46 2524 40 2517 91 1500 93 41 46 2525 40 1503 41 59 2515 46 2524 40 2521 44 744 2526 40 744 2527 40 1504 41 41 41 59 330 2521 61 744 2522 40 2016 46 2017 46 2523 44 1503 41 46 2524 40 2517 91 1500 93 41 59 2515 46 2524 40 2521 44 744 2526 40 744 2528 123 2529 61 829 44 2530 61 2527 46 2531 125 41 41 59 2521 61 744 2522 40 2016 46 2017 46 2523 44 1503 41 46 2524 40 2517 91 1500 93 41 59 2515 46 2532 40 2521 46 2533 40 41 41 46 2533 40 41 46 2534 46 2019 40 41 46 2020 40 1501 41 59 330 2514 2535 61 744 2003 123 2536 61 744 2536 123 2537 61 1503 44 2538 61 744 2538 40 41 123 2539 61 2540 46 2541 60 574 62 40 41 44 2542 61 2540 46 2541 60 574 62 40 41 125 44 2543 61 2544 46 2545 44 2546 61 2547 46 2545 44 2548 61 2544 46 2545 125 44 2549 61 2550 46 2551 60 2552 62 40 41 125 59 2553 40 2515 44 2535 41 46 2019 40 41 46 2554 40 41 59 330 2521 61 744 2522 40 2016 46 2017 46 2523 44 1503 41 46 2524 40 2517 91 1500 93 41 59 2515 46 2555 40 2521 41 46 2556 60 2528 62 40 41 46 2557 61 2527 46 2558 59 330 2514 2559 61 2216 40 2515 44 2519 44 2535 41 59 2559 46 2560 46 2019 40 41 46 2554 40 41 59 2559 46 2561 46 2019 40 41 46 2554 40 41 59 2521 61 744 2522 40 2016 46 2017 46 2523 44 1503 41 46 2524 40 2517 91 1500 93 41 59 2515 46 2532 40 2521 46 2533 40 41 41 46 2533 40 41 46 2534 46 2019 40 41 46 2020 40 1500 41 59 330 2562 40 2515 44 2535 41 46 2019 40 41 46 2554 40 41 59 2521 61 744 2522 40 2016 46 2017 46 2523 44 1503 41 46 2524 40 2517 91 1500 93 41 59 2515 46 2532 40 2521 46 2533 40 41 41 46 2533 40 41 46 2534 46 2019 40 41 46 2020 40 1501 41 59 125 91 2014 93 777 865 2563 40 41 123 2564 2565 61 2566 46 2567 40 41 59 2564 2568 61 40 2569 46 2570 46 2571 41 2016 46 2017 46 2572 40 2565 44 362 41 59 2568 46 2573 46 2019 40 41 46 2020 40 1503 41 59 2568 91 1500 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1501 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1502 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1502 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1502 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1502 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1502 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1502 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1502 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1502 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1502 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1503 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1503 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1503 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1503 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1503 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1503 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1503 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1503 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1503 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 2568 91 1503 93 46 2574 40 41 46 2575 40 41 46 2019 40 41 46 2020 40 362 41 59 125 91 2014 93 777 865 2576 40 41 123 2577 2578 61 2002 46 2579 40 41 59 2577 2580 61 2016 46 2017 46 2581 40 2578 44 2582 46 2583 41 59 2580 91 1500 93 46 2584 40 41 46 2585 40 41 46 2019 40 41 46 2020 40 362 41 59 2580 91 1501 93 46 2584 40 41 46 2585 40 41 46 2019 40 41 46 2020 40 362 41 59 2580 91 1502 93 46 2584 40 41 46 2585 40 41 46 2019 40 41 46 2020 40 362 41 59 2580 91 1502 93 46 2584 40 41 46 2585 40 41 46 2019 40 41 46 2020 40 362 41 59 2580 91 1502 93 46 2584 40 41 46 2585 40 41 46 2019 40 41 46 2020 40 362 41 59 2580 91 1502 93 46 2584 40 41 46 2585 40 41 46 2019 40 41 46 2020 40 362 41 59 2580 91 1502 93 46 2584 40 41 46 2585 40 41 46 2019 40 41 46 2020 40 362 41 59 125 91 2014 93 777 865 2586 40 41 123 2587 2588 61 2589 40 744 2590 40 1500 41 44 655 41 59 2588 46 2591 46 2019 40 41 46 2592 40 41 59 2588 46 2593 46 2019 40 41 46 2592 40 41 59 2588 61 2589 40 744 2590 40 1501 41 44 655 41 59 2588 46 2591 46 2019 40 41 46 2592 40 41 59 2588 46 2593 46 2019 40 41 46 2592 40 41 59 2588 61 2589 40 744 2590 40 1501 41 44 829 41 59 2588 46 2591 46 2019 40 41 46 2592 40 41 59 2588 46 2593 46 2019 40 41 46 2592 40 41 59 125 91 2014 93 777 865 2594 40 41 123 2595 2596 61 2002 46 2597 40 41 59 2016 46 2017 46 2598 40 2596 41 46 2019 40 41 46 2020 40 744 2599 40 1509 41 41 59 125 91 2014 93 777 865 2600 40 41 123 601 574 2601 61 1503 59 2602 2603 61 2002 46 2604 40 41 59 2602 2605 61 744 2003 123 2606 61 744 2606 40 41 125 59 40 2607 44 569 41 2608 61 2609 40 2603 44 2605 41 59 2608 46 2610 46 2019 40 41 46 2611 40 41 59 2608 46 2612 46 2019 40 41 46 2020 40 1502 42 2016 46 2613 46 2614 41 59 2605 61 744 2003 123 2615 61 744 2615 123 2616 61 1502 125 125 59 40 2617 46 2618 46 2619 44 569 41 2620 61 2621 40 2603 44 1502 42 2016 46 2613 46 2614 44 2605 41 59 2620 46 2610 46 2019 40 41 46 2611 40 41 59 2620 46 2612 46 2622 40 41 46 2019 40 41 46 2611 40 41 59 2602 2623 61 2603 91 2016 46 2624 46 2625 40 2601 41 93 46 2626 60 2627 62 40 41 59 2623 46 2628 61 2605 46 2628 43 1501 59 2608 61 2609 40 2603 44 2605 41 59 2608 46 2610 46 2019 40 41 46 2611 40 41 59 2608 46 2612 46 2019 40 41 46 2020 40 1502 42 2016 46 2613 46 2614 41 59 330 2629 2630 61 2603 46 2631 40 2625 40 1503 44 2632 46 2633 46 2634 40 41 41 44 40 41 328 744 2629 40 744 2635 40 41 41 41 59 2635 2636 61 2630 46 2626 60 2635 62 40 41 59 2636 46 2637 61 1504 59 2636 46 2638 61 1500 59 2623 46 2628 61 1500 59 330 2016 46 2017 46 2639 40 2603 44 2632 46 2633 44 2605 46 2628 43 1502 41 46 2019 40 41 46 2020 40 1505 41 59 125 91 2014 93 777 865 2640 40 41 123 2641 2642 61 2002 46 2643 40 41 59 330 2642 46 2644 40 2645 40 1501 41 44 744 2646 40 744 2647 40 1509 41 41 41 59 2648 91 93 2649 61 2650 46 2651 46 2652 46 2653 40 2654 328 2654 41 46 2655 40 41 59 2656 2657 61 744 40 41 59 664 40 2641 2658 61 1500 59 2658 60 2650 46 2651 46 2659 59 2658 349 41 123 2648 2660 61 2649 91 2658 93 59 2642 46 2644 40 744 2661 40 2016 46 2017 46 2662 44 1503 41 46 2644 40 2660 41 44 744 2646 40 744 2663 40 41 123 2664 61 829 44 2665 61 1504 42 1505 125 41 41 59 2657 46 2644 40 40 2660 44 1504 42 1505 41 41 59 125 2642 46 2666 40 744 2667 40 2016 46 2017 46 2668 44 1503 41 44 40 41 328 744 2646 40 41 41 46 2669 61 2670 46 2671 40 2657 46 2672 40 752 41 44 1505 41 59 2641 2673 61 2642 46 2674 40 744 2667 40 2016 46 2017 46 2668 44 1501 41 44 40 41 328 744 2646 40 41 41 59 2673 46 2669 61 40 40 2647 41 1505 42 1505 41 46 2675 40 41 59 2641 2676 61 744 2003 123 2677 61 744 2677 123 2678 61 1500 44 2679 61 744 2679 40 41 123 2680 61 2681 46 2682 60 574 62 40 41 44 2683 61 2681 46 2682 60 574 62 40 41 125 44 2684 61 2685 46 2686 44 2687 61 2688 46 2686 44 2689 61 2685 46 2686 125 44 2690 61 2691 46 2692 60 2693 62 40 41 125 59 2694 40 2642 44 2676 41 46 2019 40 41 46 2695 40 41 59 2641 2696 61 2650 46 2651 46 2652 46 2653 40 2654 328 2654 41 46 2655 40 41 59 2641 2697 61 2696 91 1500 93 59 2641 2698 61 2696 91 2650 46 2651 46 2659 45 1501 93 59 2016 46 2017 46 2699 40 2642 44 2700 46 2701 40 2697 41 46 2702 41 46 2019 40 41 46 2020 40 1500 41 59 2646 2703 61 2642 46 2704 40 744 2667 40 2016 46 2017 46 2668 44 1503 41 46 2644 40 2697 41 46 2705 40 1501 41 41 59 744 2647 40 2703 46 2669 41 46 2019 40 41 46 2020 40 1512 41 59 2642 46 2704 40 744 2667 40 2016 46 2017 46 2668 44 1503 41 46 2644 40 2698 41 46 2705 40 842 46 2706 45 1501 41 41 46 2019 40 41 46 2707 40 41 59 330 2676 61 744 2003 123 2708 61 744 2708 123 2709 61 1501 44 2710 61 744 2710 40 41 123 2711 61 2712 46 2713 60 574 62 40 41 44 2714 61 2712 46 2713 60 574 62 40 41 125 44 2715 61 2716 46 2717 44 2718 61 2719 46 2717 44 2720 61 2716 46 2717 125 44 2721 61 2722 46 2723 60 2724 62 40 41 125 59 2694 40 2642 44 2676 41 46 2019 40 41 46 2695 40 41 59 2016 46 2017 46 2699 40 2642 44 2700 46 2701 40 2696 91 1501 93 41 46 2702 41 46 2019 40 41 46 2020 40 1500 41 59 2703 61 2642 46 2704 40 744 2667 40 2016 46 2017 46 2668 44 1503 41 46 2644 40 2696 91 1501 93 41 46 2705 40 1501 41 41 59 744 2647 40 2703 46 2669 41 46 2019 40 41 46 2020 40 1512 41 59 330 2676 61 744 2003 123 2725 61 744 2725 123 2726 61 1503 44 2727 61 744 2727 40 41 123 2728 61 2729 46 2730 60 574 62 40 41 44 2731 61 2729 46 2730 60 574 62 40 41 125 44 2732 61 2733 46 2734 44 2735 61 2736 46 2734 44 2737 61 2733 46 2734 125 44 2738 61 2739 46 2740 60 2741 62 40 41 125 59 2694 40 2642 44 2676 41 46 2019 40 41 46 2695 40 41 59 2697 61 2650 46 2651 46 2652 46 2653 40 2654 328 2654 41 46 2655 40 41 91 1502 93 59 2016 46 2017 46 2699 40 2642 44 2700 46 2701 40 2696 91 1502 93 41 46 2702 41 46 2019 40 41 46 2020 40 1500 41 59 2703 61 2642 46 2704 40 744 2667 40 2016 46 2017 46 2668 44 1503 41 46 2644 40 2696 91 1502 93 41 46 2705 40 1503 41 41 59 744 2647 40 2703 46 2669 41 46 2019 40 41 46 2020 40 1512 42 1502 41 59 330 2641 2742 61 2700 46 2701 40 2696 91 1502 93 41 46 2702 59 2642 46 2644 40 744 2667 40 2016 46 2017 46 2668 44 1503 41 46 2644 40 2742 41 44 744 2646 40 744 2743 123 2744 61 1502 44 2745 61 1504 42 1505 45 1502 42 1503 44 2746 61 2696 91 1502 93 125 41 41 59 2016 46 2017 46 2699 40 2642 44 2742 41 46 2019 40 41 46 2020 40 1508 41 59 2647 2747 61 2016 46 2017 46 2748 40 2642 44 2742 44 1503 43 1502 41 59 2747 46 2019 40 41 46 2020 40 1508 42 1512 47 1509 43 40 1508 42 1502 42 1502 42 1503 47 1503 41 41 59 125 91 2014 93 777 865 2749 40 41 123 2750 2751 61 2002 46 2752 40 41 59 2016 46 2017 46 2753 40 2751 44 2754 46 2755 44 1502 41 46 2019 40 41 46 2020 40 744 2756 40 1500 41 41 59 2751 46 2757 40 2758 40 1503 44 2754 46 2755 46 2759 40 41 41 44 744 2760 40 744 2761 40 41 41 41 59 2016 46 2017 46 2753 40 2751 44 2754 46 2755 44 1502 41 46 2019 40 41 46 2020 40 744 2756 40 1500 41 41 59 125 91 2014 93 777 865 2762 40 41 123 2763 2764 61 2002 46 2765 40 41 59 2766 2767 61 2766 46 2768 40 362 41 59 2769 2770 61 2771 40 1503 44 2767 46 2772 40 41 41 59 2769 2773 61 2771 40 1503 44 2774 46 2775 46 2776 46 2772 40 41 41 59 2763 2777 61 2027 40 2764 44 2767 46 2772 40 41 44 2774 46 2775 46 2776 46 2772 40 41 44 655 44 2004 41 59 2777 46 2778 46 2019 40 41 46 2779 40 41 59 2777 46 2780 46 2019 40 41 46 2781 40 41 59 2777 61 2027 40 2764 44 2767 46 2772 40 41 44 2774 46 2775 46 2776 46 2772 40 41 44 829 44 2004 41 59 2777 46 2778 46 2019 40 41 46 2779 40 41 59 2777 46 2780 46 2019 40 41 46 2781 40 41 59 2764 46 2782 40 2770 44 744 2783 40 744 2784 40 41 41 41 59 2777 61 2027 40 2764 44 2767 46 2772 40 41 44 2774 46 2775 46 2776 46 2772 40 41 44 829 44 2004 41 59 2777 46 2778 46 2019 40 41 46 2779 40 41 59 2777 46 2780 46 2019 40 41 46 2781 40 41 59 2763 40 2785 44 2785 44 2786 41 61 2787 40 2764 44 2767 41 59 2786 46 2019 40 41 46 2788 40 41 59 2764 46 2789 40 2770 41 59 2764 46 2790 40 2770 44 40 41 328 744 2783 40 744 2784 123 2791 61 2774 46 2775 46 2776 125 41 41 59 2764 46 2782 40 2773 44 744 2783 40 744 2792 40 41 41 41 59 2777 61 2027 40 2764 44 2767 46 2772 40 41 44 2774 46 2775 46 2776 46 2772 40 41 44 829 44 2004 41 59 2777 46 2778 46 2019 40 41 46 2779 40 41 59 2777 46 2780 46 2019 40 41 46 2779 40 41 59 2763 40 2785 44 2785 44 2793 41 61 2787 40 2764 44 2767 41 59 2793 46 2794 40 41 46 2019 40 41 46 2020 40 2774 46 2775 46 2776 46 2772 40 41 46 2794 40 41 41 59 125 710 40 569 2795 44 569 2796 41 2797 40 2798 2799 44 569 2800 41 123 2801 2802 61 2002 46 2803 40 41 59 2801 2804 61 2805 46 2806 40 2807 46 2808 44 2809 46 2810 46 2811 44 2802 44 2809 46 2810 46 2811 44 2812 58 2809 46 2810 46 2813 41 59 2814 2815 61 744 40 41 59 2801 2816 61 2804 46 2817 46 2818 40 2804 46 2819 41 59 2820 2821 61 2804 46 2817 46 2818 40 2804 46 2819 41 91 1500 93 59 688 40 2800 41 123 2802 46 2822 40 2823 40 1503 44 2821 46 2824 40 41 41 44 744 2825 40 744 2826 123 2827 61 2828 46 2829 46 2830 44 2831 61 744 2798 40 1504 41 125 41 41 59 2802 46 2822 40 2016 46 2017 46 2823 40 1503 44 2832 46 2833 46 2834 41 44 744 2825 40 744 2835 40 41 41 41 59 125 630 123 2802 46 2836 40 2837 40 1503 44 2821 46 2838 40 41 41 44 744 2839 40 744 2840 123 2841 61 744 2798 40 1504 41 125 41 41 59 125 2815 46 2842 40 2016 46 2017 46 2843 44 362 44 2821 44 2820 46 2844 44 2799 44 752 41 59 2804 46 2845 40 2815 46 2846 40 41 41 59 2804 46 2847 40 41 59 2801 2848 61 2804 46 2849 46 2850 40 41 59 2848 46 2851 40 41 46 2019 40 41 46 2020 40 836 40 2852 46 2853 46 2854 41 41 59 792 40 829 44 2848 46 2855 40 41 41 59 125 710 809 569 2856 40 2001 2857 44 2003 2858 41 123 2859 2860 61 744 2861 40 41 59 2860 46 2862 40 2863 46 2864 41 59 2859 2865 61 2863 46 2866 40 2867 46 2868 44 752 44 2857 44 2858 44 2869 58 2870 46 2871 46 2872 41 59 2865 46 2873 40 2860 46 2874 40 41 41 59 792 2865 46 2875 40 41 323 2876 46 2877 59 125 710 809 569 2878 40 2001 2857 44 2003 2858 41 123 860 2879 2880 61 744 2881 40 41 59 2880 46 2882 40 2883 46 2884 41 59 860 2879 2885 61 2883 46 2886 40 2887 46 2888 44 752 44 2857 44 2858 44 2889 58 2890 46 2891 46 2892 41 59 2885 46 2893 40 2880 46 2894 40 41 41 59 792 2885 46 2895 40 41 323 2896 46 2897 59 125 710 809 40 2798 2898 44 569 2795 41 2899 40 2001 2857 44 2003 2858 41 123 860 2900 2901 61 2902 46 2903 40 2904 46 2905 44 752 44 2857 44 2858 44 2906 58 2907 46 2908 46 2909 41 59 860 2900 2910 61 744 2911 40 41 59 2910 46 2912 40 2016 46 2017 46 2913 44 362 41 59 2901 46 2914 40 2910 46 2915 40 41 41 59 688 40 2901 46 2916 40 41 323 2917 46 2918 41 123 792 40 2798 46 2919 44 655 41 59 125 2900 2920 61 2901 46 2921 46 2922 40 41 59 2920 46 2019 40 41 46 2923 40 836 40 2924 46 2925 46 2926 41 41 59 792 40 40 40 2924 46 2925 46 2926 41 2920 41 46 2927 40 41 44 829 41 59 125 710 809 40 2928 46 2929 46 2930 2898 44 569 2795 41 2931 40 2001 2857 44 2798 2932 44 2003 2858 41 123 2933 2934 61 2016 46 2017 46 2935 40 2857 41 59 860 2936 2937 61 2938 46 2939 40 2940 46 2941 44 744 2942 46 2943 40 2934 41 44 2857 44 2858 44 2944 58 2945 46 2946 46 2947 41 59 2936 2948 61 744 2949 40 41 59 2948 46 2950 40 2016 46 2017 46 2951 44 362 44 2932 41 59 2937 46 2952 40 2948 46 2953 40 41 41 59 688 40 2937 46 2954 40 41 323 2955 46 2956 41 123 792 40 655 44 655 41 59 125 792 40 829 44 829 41 59 125 710 809 40 569 2795 44 569 2796 41 2027 40 2001 2857 44 574 91 93 2957 44 574 91 93 2958 44 569 2959 44 2003 2858 41 123 860 2960 2961 61 2962 46 2963 40 2964 46 2965 44 744 2966 46 2967 40 2959 63 744 2968 40 2957 41 58 2968 46 2969 41 44 2857 44 2858 44 2970 58 2971 46 2972 46 2973 41 59 860 2960 2974 61 744 2975 40 41 59 2974 46 2976 40 2016 46 2017 46 2977 44 362 44 2957 44 2958 41 59 2961 46 2978 40 2974 46 2979 40 41 41 59 688 40 2961 46 2980 40 41 323 2981 46 2982 41 123 792 40 655 44 655 41 59 125 2960 2983 61 2961 46 2984 46 2985 40 41 59 2983 46 2019 40 41 46 2986 40 836 40 2928 46 2929 46 2930 41 41 59 792 40 829 44 2983 46 2987 40 41 41 59 125 710 809 40 569 2795 44 569 2796 41 2194 40 2001 2857 44 574 91 93 2958 44 2003 2858 41 123 860 2988 2989 61 2990 46 2991 40 2992 46 2993 44 744 2994 46 2995 40 2996 46 2997 40 2998 46 2999 40 2958 44 3000 46 3001 41 41 46 3002 40 41 41 44 2857 44 2858 44 3003 58 3004 46 3005 46 3006 44 3007 58 1505 41 59 860 2988 3008 61 744 3009 40 41 59 3008 46 3010 40 2016 46 2017 46 3011 44 362 44 2958 41 59 2989 46 3012 40 3008 46 3013 40 41 41 59 688 40 2989 46 3014 40 41 323 3015 46 3016 41 123 792 40 655 44 655 41 59 125 2988 3017 61 2989 46 3018 46 3019 40 41 59 3017 46 2019 40 41 46 3020 40 836 40 2928 46 2929 46 2930 41 41 59 792 40 829 44 3017 46 3021 40 41 41 59 125 710 809 3022 91 93 2267 40 2001 2857 44 2003 2858 41 123 860 3023 3024 61 3025 46 3026 40 3027 46 3028 44 752 44 2857 44 2858 44 3029 58 3030 46 3031 46 3032 41 59 860 3023 3033 61 744 3034 40 41 59 3033 46 3035 40 2016 46 2017 46 3036 44 362 41 59 3024 46 3037 40 3033 46 3038 40 41 41 59 3024 46 3039 40 41 46 2019 40 41 46 2020 40 3040 46 3041 41 59 3023 3042 61 3024 46 3043 46 3044 40 41 59 3042 46 2019 40 41 46 3045 40 836 40 2928 46 2929 46 3046 41 41 59 792 40 3042 552 2928 46 2929 46 3046 41 46 3047 40 3048 328 3048 46 3049 40 41 46 3050 60 3022 62 40 41 41 46 3038 40 41 59 125 710 809 40 2798 2898 44 569 2795 41 2173 40 2001 2857 44 574 91 93 3051 44 2003 2858 41 123 860 3052 3053 61 3054 46 3055 40 3056 46 3057 44 752 44 2857 44 2858 44 3058 58 3059 46 3060 46 3061 41 59 860 3052 3062 61 744 3063 40 41 59 3062 46 3064 40 2016 46 2017 46 3065 44 362 44 3051 44 2858 46 3066 41 59 3053 46 3067 40 3062 46 3068 40 41 41 59 688 40 3053 46 3069 40 41 323 3070 46 3071 41 123 792 40 2798 46 3072 44 655 41 59 125 3052 3073 61 3053 46 3074 46 3075 40 41 59 3073 46 2019 40 41 46 3076 40 836 40 2928 46 2929 46 3077 41 41 59 792 40 3073 46 3078 40 41 44 829 41 59 125 710 809 865 3079 40 3022 3080 44 2001 46 3081 3082 41 123 3083 3084 61 744 2798 40 3082 46 3085 46 2898 41 59 3084 46 2019 40 41 46 2020 40 1500 41 59 3082 46 3086 46 3086 46 2019 40 41 46 3087 40 744 574 91 93 123 1503 125 46 3088 40 3080 46 3089 40 829 41 41 41 59 125 710 809 865 3090 40 574 91 93 2957 44 2001 46 3081 3082 44 2798 3091 44 2798 3092 44 3022 3093 41 123 3094 3095 61 40 2928 46 2929 46 3096 41 3097 46 3098 40 3082 46 3099 46 2898 44 3100 46 3101 41 59 3095 46 3102 46 2019 40 41 46 2020 40 1502 41 59 3095 46 3103 40 3104 328 3104 46 3105 40 41 41 46 3106 40 41 46 2019 40 41 46 3107 40 744 3108 91 93 123 836 40 2928 46 2929 46 3109 41 44 836 40 2928 46 2929 46 3109 41 44 836 40 2928 46 2929 46 3110 41 125 41 59 330 3095 91 1500 93 46 3111 40 41 46 2019 40 41 46 2020 40 3091 41 59 330 3095 91 1501 93 46 3111 40 41 46 2019 40 41 46 2020 40 3092 41 59 330 3095 91 1502 93 46 3112 40 41 46 3113 60 3022 62 40 41 46 2019 40 41 46 3107 40 3093 41 59 330 3082 46 3114 46 3114 46 2019 40 41 46 3107 40 744 574 91 93 123 1503 125 46 3115 40 2957 41 41 59 125 710 809 3116 3117 40 574 3118 44 574 91 93 3119 61 752 41 123 3116 3120 61 744 40 41 123 3121 61 2016 46 2017 46 3121 44 3122 61 744 574 91 805 40 574 41 43 40 3119 346 3123 343 1500 41 93 125 59 3120 46 3124 91 1500 93 61 3118 59 3119 346 3125 40 3120 46 3124 46 3126 40 1501 41 41 59 792 3120 59 125 710 809 40 569 2795 44 569 2796 41 2216 40 2001 2857 44 574 91 93 2958 44 2003 2858 41 123 860 3127 3128 61 3129 46 3130 40 3131 46 3132 44 744 3133 46 3134 40 3135 46 3136 40 3022 46 3137 40 2958 44 3138 46 3139 41 41 46 3140 40 41 41 44 2857 44 2858 44 3141 58 3142 46 3143 46 3144 41 59 860 3127 3145 61 744 3146 40 41 59 3145 46 3147 40 2016 46 2017 46 3148 44 362 44 2958 41 59 3128 46 3149 40 3145 46 3150 40 41 41 59 688 40 3128 46 3151 40 41 323 3152 46 3153 41 123 792 40 655 44 655 41 59 125 3127 3154 61 3128 46 3155 46 3156 40 41 59 3154 46 2019 40 41 46 3157 40 836 40 2928 46 2929 46 2930 41 41 59 792 40 829 44 3154 46 3158 40 41 41 59 125 710 809 40 2798 3091 44 2798 3092 44 574 91 93 3159 41 3160 40 2001 2857 44 3161 2957 41 123 860 3162 3163 61 3164 46 3165 40 3166 46 3167 44 752 44 2857 44 3168 58 3169 46 3170 46 3171 41 59 860 3162 3172 61 744 3173 40 41 59 3172 46 3174 40 2016 46 2017 46 3175 44 362 44 2957 41 59 3163 46 3176 40 3172 46 3177 40 41 41 59 3163 46 3178 40 41 46 2019 40 41 46 2020 40 3179 46 3180 41 59 3162 3181 61 3163 46 3182 46 3183 40 41 59 3181 46 2019 40 41 46 3184 40 836 40 2928 46 2929 46 3185 41 41 59 2928 46 2929 46 3185 3186 61 40 3181 552 2928 46 2929 46 3185 41 59 3162 3091 61 3186 91 1500 93 46 3187 40 41 59 3162 3092 61 3186 91 1501 93 46 3187 40 41 59 3162 3159 61 3186 91 1502 93 46 3188 63 752 58 3186 91 1502 93 46 3189 40 41 46 3177 40 41 59 792 40 3091 44 3092 44 3159 41 59 125 125 ,"{'AvgLine': 23, 'CountLine': 1095, 'CountStmt': 590, 'MaxNesting': 1, 'AvgLineCode': 18, 'AvgEssential': 1, 'AvgLineBlank': 3, 'CountStmtExe': 524, 'MaxEssential': 1, 'SumEssential': 65, 'AvgCyclomatic': 1, 'CountLineCode': 853, 'CountStmtDecl': 198, 'MaxCyclomatic': 4, 'SumCyclomatic': 78, 'AvgLineComment': 1, 'CountClassBase': 1, 'CountLineBlank': 201, 'CountSemicolon': 551, 'CountDeclMethod': 44, 'CountLineCodeExe': 710, 'CountLineComment': 55, 'CountClassCoupled': 52, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 159, 'CountLineInactive': 0, 'CountDeclMethodAll': 50, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 78, 'CountDeclClassMethod': 13, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 30, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 64, 'SumCyclomaticModified': 78, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 31, 'CountDeclMethodInternal': 14, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 46, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 63, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79751,C#,"    public class UT_Transaction
    {
        Transaction uut;

        [TestInitialize]
        public void TestSetup()
        {
            uut = new Transaction();
        }

        [TestMethod]
        public void Script_Get()
        {
            uut.Script.Should().BeNull();
        }

        [TestMethod]
        public void FromStackItem()
        {
            Assert.ThrowsException<NotSupportedException>(() => ((IInteroperable)uut).FromStackItem(VM.Types.StackItem.Null));
        }

        [TestMethod]
        public void TestEquals()
        {
            Assert.IsTrue(uut.Equals(uut));
            Assert.IsFalse(uut.Equals(null));
        }

        [TestMethod]
        public void InventoryType_Get()
        {
            ((IInventory)uut).InventoryType.Should().Be(InventoryType.TX);
        }

        [TestMethod]
        public void Script_Set()
        {
            byte[] val = TestUtils.GetByteArray(32, 0x42);
            uut.Script = val;
            uut.Script.Length.Should().Be(32);
            for (int i = 0; i < val.Length; i++)
            {
                uut.Script[i].Should().Be(val[i]);
            }
        }

        [TestMethod]
        public void Gas_Get()
        {
            uut.SystemFee.Should().Be(0);
        }

        [TestMethod]
        public void Gas_Set()
        {
            long val = 4200000000;
            uut.SystemFee = val;
            uut.SystemFee.Should().Be(val);
        }

        [TestMethod]
        public void Size_Get()
        {
            uut.Script = TestUtils.GetByteArray(32, 0x42);
            uut.Signers = Array.Empty<Signer>();
            uut.Attributes = Array.Empty<TransactionAttribute>();
            uut.Witnesses = new[]
            {
                new Witness
                {
                    InvocationScript = Array.Empty<byte>(),
                    VerificationScript = Array.Empty<byte>()
                }
            };

            uut.Version.Should().Be(0);
            uut.Script.Length.Should().Be(32);
            uut.Script.GetVarSize().Should().Be(33);
            uut.Size.Should().Be(63);
        }

        [TestMethod]
        public void FeeIsMultiSigContract()
        {
            var walletA = TestUtils.GenerateTestWallet();
            var walletB = TestUtils.GenerateTestWallet();
            var snapshot = TestBlockchain.GetTestSnapshot();

            using var unlockA = walletA.Unlock(""123"");
            using var unlockB = walletB.Unlock(""123"");
            var a = walletA.CreateAccount();
            var b = walletB.CreateAccount();

            var multiSignContract = Contract.CreateMultiSigContract(2,
                new ECPoint[]
                {
                        a.GetKey().PublicKey,
                        b.GetKey().PublicKey
                });

            walletA.CreateAccount(multiSignContract, a.GetKey());
            var acc = walletB.CreateAccount(multiSignContract, b.GetKey());

            // Fake balance

            var key = NativeContract.GAS.CreateStorageKey(20, acc.ScriptHash);
            var entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));

            entry.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;

            snapshot.Commit();

            // Make transaction

            var tx = walletA.MakeTransaction(snapshot, new TransferOutput[]
            {
                    new TransferOutput()
                    {
                         AssetId = NativeContract.GAS.Hash,
                         ScriptHash = acc.ScriptHash,
                         Value = new BigDecimal(BigInteger.One,8)
                    }
            }, acc.ScriptHash);

            Assert.IsNotNull(tx);

            // Sign

            var wrongData = new ContractParametersContext(snapshot, tx, ProtocolSettings.Default.Network + 1);
            Assert.IsFalse(walletA.Sign(wrongData));

            var data = new ContractParametersContext(snapshot, tx, ProtocolSettings.Default.Network);
            Assert.IsTrue(walletA.Sign(data));
            Assert.IsTrue(walletB.Sign(data));
            Assert.IsTrue(data.Completed);

            tx.Witnesses = data.GetWitnesses();

            // Fast check

            Assert.IsTrue(tx.VerifyWitnesses(ProtocolSettings.Default, snapshot, tx.NetworkFee));

            // Check

            long verificationGas = 0;
            foreach (var witness in tx.Witnesses)
            {
                using ApplicationEngine engine = ApplicationEngine.Create(TriggerType.Verification, tx, snapshot, settings: TestBlockchain.TheNeoSystem.Settings, gas: tx.NetworkFee);
                engine.LoadScript(witness.VerificationScript);
                engine.LoadScript(witness.InvocationScript);
                Assert.AreEqual(VMState.HALT, engine.Execute());
                Assert.AreEqual(1, engine.ResultStack.Count);
                Assert.IsTrue(engine.ResultStack.Pop().GetBoolean());
                verificationGas += engine.GasConsumed;
            }

            var sizeGas = tx.Size * NativeContract.Policy.GetFeePerByte(snapshot);
            Assert.AreEqual(1967100, verificationGas);
            Assert.AreEqual(348000, sizeGas);
            Assert.AreEqual(2315100, tx.NetworkFee);
        }

        [TestMethod]
        public void FeeIsSignatureContractDetailed()
        {
            var wallet = TestUtils.GenerateTestWallet();
            var snapshot = TestBlockchain.GetTestSnapshot();

            using var unlock = wallet.Unlock(""123"");
            var acc = wallet.CreateAccount();

            // Fake balance

            var key = NativeContract.GAS.CreateStorageKey(20, acc.ScriptHash);

            var entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));

            entry.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;

            snapshot.Commit();

            // Make transaction

            // self-transfer of 1e-8 GAS
            var tx = wallet.MakeTransaction(snapshot, new TransferOutput[]
            {
                    new TransferOutput()
                    {
                         AssetId = NativeContract.GAS.Hash,
                         ScriptHash = acc.ScriptHash,
                         Value = new BigDecimal(BigInteger.One,8)
                    }
            }, acc.ScriptHash);

            Assert.IsNotNull(tx);
            Assert.IsNull(tx.Witnesses);

            // check pre-computed network fee (already guessing signature sizes)
            tx.NetworkFee.Should().Be(1228520L);

            // ----
            // Sign
            // ----

            var data = new ContractParametersContext(snapshot, tx, ProtocolSettings.Default.Network);
            // 'from' is always required as witness
            // if not included on cosigner with a scope, its scope should be considered 'CalledByEntry'
            data.ScriptHashes.Count.Should().Be(1);
            data.ScriptHashes[0].Should().BeEquivalentTo(acc.ScriptHash);
            // will sign tx
            bool signed = wallet.Sign(data);
            Assert.IsTrue(signed);
            // get witnesses from signed 'data'
            tx.Witnesses = data.GetWitnesses();
            tx.Witnesses.Length.Should().Be(1);

            // Fast check

            Assert.IsTrue(tx.VerifyWitnesses(ProtocolSettings.Default, snapshot, tx.NetworkFee));

            // Check

            long verificationGas = 0;
            foreach (var witness in tx.Witnesses)
            {
                using ApplicationEngine engine = ApplicationEngine.Create(TriggerType.Verification, tx, snapshot, settings: TestBlockchain.TheNeoSystem.Settings, gas: tx.NetworkFee);
                engine.LoadScript(witness.VerificationScript);
                engine.LoadScript(witness.InvocationScript);
                Assert.AreEqual(VMState.HALT, engine.Execute());
                Assert.AreEqual(1, engine.ResultStack.Count);
                Assert.IsTrue(engine.ResultStack.Pop().GetBoolean());
                verificationGas += engine.GasConsumed;
            }

            // ------------------
            // check tx_size cost
            // ------------------
            Assert.AreEqual(245, tx.Size);

            // will verify tx size, step by step

            // Part I
            Assert.AreEqual(25, Transaction.HeaderSize);
            // Part II
            Assert.AreEqual(1, tx.Attributes.GetVarSize());
            Assert.AreEqual(0, tx.Attributes.Length);
            Assert.AreEqual(1, tx.Signers.Length);
            // Note that Data size and Usage size are different (because of first byte on GetVarSize())
            Assert.AreEqual(22, tx.Signers.GetVarSize());
            // Part III
            Assert.AreEqual(88, tx.Script.GetVarSize());
            // Part IV
            Assert.AreEqual(109, tx.Witnesses.GetVarSize());
            // I + II + III + IV
            Assert.AreEqual(25 + 22 + 1 + 88 + 109, tx.Size);

            Assert.AreEqual(1000, NativeContract.Policy.GetFeePerByte(snapshot));
            var sizeGas = tx.Size * NativeContract.Policy.GetFeePerByte(snapshot);

            // final check: verification_cost and tx_size
            Assert.AreEqual(245000, sizeGas);
            Assert.AreEqual(983520, verificationGas);

            // final assert
            Assert.AreEqual(tx.NetworkFee, verificationGas + sizeGas);
        }

        [TestMethod]
        public void FeeIsSignatureContract_TestScope_Global()
        {
            var wallet = TestUtils.GenerateTestWallet();
            var snapshot = TestBlockchain.GetTestSnapshot();

            // no password on this wallet
            using var unlock = wallet.Unlock("""");
            var acc = wallet.CreateAccount();

            // Fake balance

            var key = NativeContract.GAS.CreateStorageKey(20, acc.ScriptHash);

            var entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));

            entry.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;

            snapshot.Commit();

            // Make transaction
            // Manually creating script

            byte[] script;
            using (ScriptBuilder sb = new())
            {
                // self-transfer of 1e-8 GAS
                BigInteger value = new BigDecimal(BigInteger.One, 8).Value;
                sb.EmitDynamicCall(NativeContract.GAS.Hash, ""transfer"", acc.ScriptHash, acc.ScriptHash, value, null);
                sb.Emit(OpCode.ASSERT);
                script = sb.ToArray();
            }

            // trying global scope
            var signers = new Signer[]{ new Signer
                {
                    Account = acc.ScriptHash,
                    Scopes = WitnessScope.Global
                } };

            // using this...

            var tx = wallet.MakeTransaction(snapshot, script, acc.ScriptHash, signers);

            Assert.IsNotNull(tx);
            Assert.IsNull(tx.Witnesses);

            // ----
            // Sign
            // ----

            var data = new ContractParametersContext(snapshot, tx, ProtocolSettings.Default.Network);
            bool signed = wallet.Sign(data);
            Assert.IsTrue(signed);

            // get witnesses from signed 'data'
            tx.Witnesses = data.GetWitnesses();
            tx.Witnesses.Length.Should().Be(1);

            // Fast check
            Assert.IsTrue(tx.VerifyWitnesses(ProtocolSettings.Default, snapshot, tx.NetworkFee));

            // Check
            long verificationGas = 0;
            foreach (var witness in tx.Witnesses)
            {
                using ApplicationEngine engine = ApplicationEngine.Create(TriggerType.Verification, tx, snapshot, settings: TestBlockchain.TheNeoSystem.Settings, gas: tx.NetworkFee);
                engine.LoadScript(witness.VerificationScript);
                engine.LoadScript(witness.InvocationScript);
                Assert.AreEqual(VMState.HALT, engine.Execute());
                Assert.AreEqual(1, engine.ResultStack.Count);
                Assert.IsTrue(engine.ResultStack.Pop().GetBoolean());
                verificationGas += engine.GasConsumed;
            }
            // get sizeGas
            var sizeGas = tx.Size * NativeContract.Policy.GetFeePerByte(snapshot);
            // final check on sum: verification_cost + tx_size
            Assert.AreEqual(1228520, verificationGas + sizeGas);
            // final assert
            Assert.AreEqual(tx.NetworkFee, verificationGas + sizeGas);
        }

        [TestMethod]
        public void FeeIsSignatureContract_TestScope_CurrentHash_GAS()
        {
            var wallet = TestUtils.GenerateTestWallet();
            var snapshot = TestBlockchain.GetTestSnapshot();

            // no password on this wallet
            using var unlock = wallet.Unlock("""");
            var acc = wallet.CreateAccount();

            // Fake balance

            var key = NativeContract.GAS.CreateStorageKey(20, acc.ScriptHash);

            var entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));

            entry.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;

            snapshot.Commit();

            // Make transaction
            // Manually creating script

            byte[] script;
            using (ScriptBuilder sb = new())
            {
                // self-transfer of 1e-8 GAS
                BigInteger value = new BigDecimal(BigInteger.One, 8).Value;
                sb.EmitDynamicCall(NativeContract.GAS.Hash, ""transfer"", acc.ScriptHash, acc.ScriptHash, value, null);
                sb.Emit(OpCode.ASSERT);
                script = sb.ToArray();
            }

            // trying global scope
            var signers = new Signer[]{ new Signer
                {
                    Account = acc.ScriptHash,
                    Scopes = WitnessScope.CustomContracts,
                    AllowedContracts = new[] { NativeContract.GAS.Hash }
                } };

            // using this...

            var tx = wallet.MakeTransaction(snapshot, script, acc.ScriptHash, signers);

            Assert.IsNotNull(tx);
            Assert.IsNull(tx.Witnesses);

            // ----
            // Sign
            // ----

            var data = new ContractParametersContext(snapshot, tx, ProtocolSettings.Default.Network);
            bool signed = wallet.Sign(data);
            Assert.IsTrue(signed);

            // get witnesses from signed 'data'
            tx.Witnesses = data.GetWitnesses();
            tx.Witnesses.Length.Should().Be(1);

            // Fast check
            Assert.IsTrue(tx.VerifyWitnesses(ProtocolSettings.Default, snapshot, tx.NetworkFee));

            // Check
            long verificationGas = 0;
            foreach (var witness in tx.Witnesses)
            {
                using ApplicationEngine engine = ApplicationEngine.Create(TriggerType.Verification, tx, snapshot, settings: TestBlockchain.TheNeoSystem.Settings, gas: tx.NetworkFee);
                engine.LoadScript(witness.VerificationScript);
                engine.LoadScript(witness.InvocationScript);
                Assert.AreEqual(VMState.HALT, engine.Execute());
                Assert.AreEqual(1, engine.ResultStack.Count);
                Assert.IsTrue(engine.ResultStack.Pop().GetBoolean());
                verificationGas += engine.GasConsumed;
            }
            // get sizeGas
            var sizeGas = tx.Size * NativeContract.Policy.GetFeePerByte(snapshot);
            // final check on sum: verification_cost + tx_size
            Assert.AreEqual(1249520, verificationGas + sizeGas);
            // final assert
            Assert.AreEqual(tx.NetworkFee, verificationGas + sizeGas);
        }

        [TestMethod]
        public void FeeIsSignatureContract_TestScope_CalledByEntry_Plus_GAS()
        {
            var wallet = TestUtils.GenerateTestWallet();
            var snapshot = TestBlockchain.GetTestSnapshot();

            // no password on this wallet
            using var unlock = wallet.Unlock("""");
            var acc = wallet.CreateAccount();

            // Fake balance

            var key = NativeContract.GAS.CreateStorageKey(20, acc.ScriptHash);

            var entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));

            entry.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;

            snapshot.Commit();

            // Make transaction
            // Manually creating script

            byte[] script;
            using (ScriptBuilder sb = new())
            {
                // self-transfer of 1e-8 GAS
                BigInteger value = new BigDecimal(BigInteger.One, 8).Value;
                sb.EmitDynamicCall(NativeContract.GAS.Hash, ""transfer"", acc.ScriptHash, acc.ScriptHash, value, null);
                sb.Emit(OpCode.ASSERT);
                script = sb.ToArray();
            }

            // trying CalledByEntry together with GAS
            var signers = new Signer[]{ new Signer
                {
                    Account = acc.ScriptHash,
                    // This combination is supposed to actually be an OR,
                    // where it's valid in both Entry and also for Custom hash provided (in any execution level)
                    // it would be better to test this in the future including situations where a deeper call level uses this custom witness successfully
                    Scopes = WitnessScope.CustomContracts | WitnessScope.CalledByEntry,
                    AllowedContracts = new[] { NativeContract.GAS.Hash }
                } };

            // using this...

            var tx = wallet.MakeTransaction(snapshot, script, acc.ScriptHash, signers);

            Assert.IsNotNull(tx);
            Assert.IsNull(tx.Witnesses);

            // ----
            // Sign
            // ----

            var data = new ContractParametersContext(snapshot, tx, ProtocolSettings.Default.Network);
            bool signed = wallet.Sign(data);
            Assert.IsTrue(signed);

            // get witnesses from signed 'data'
            tx.Witnesses = data.GetWitnesses();
            tx.Witnesses.Length.Should().Be(1);

            // Fast check
            Assert.IsTrue(tx.VerifyWitnesses(ProtocolSettings.Default, snapshot, tx.NetworkFee));

            // Check
            long verificationGas = 0;
            foreach (var witness in tx.Witnesses)
            {
                using ApplicationEngine engine = ApplicationEngine.Create(TriggerType.Verification, tx, snapshot, settings: TestBlockchain.TheNeoSystem.Settings, gas: tx.NetworkFee);
                engine.LoadScript(witness.VerificationScript);
                engine.LoadScript(witness.InvocationScript);
                Assert.AreEqual(VMState.HALT, engine.Execute());
                Assert.AreEqual(1, engine.ResultStack.Count);
                Assert.IsTrue(engine.ResultStack.Pop().GetBoolean());
                verificationGas += engine.GasConsumed;
            }
            // get sizeGas
            var sizeGas = tx.Size * NativeContract.Policy.GetFeePerByte(snapshot);
            // final check on sum: verification_cost + tx_size
            Assert.AreEqual(1249520, verificationGas + sizeGas);
            // final assert
            Assert.AreEqual(tx.NetworkFee, verificationGas + sizeGas);
        }

        [TestMethod]
        public void FeeIsSignatureContract_TestScope_CurrentHash_NEO_FAULT()
        {
            var wallet = TestUtils.GenerateTestWallet();
            var snapshot = TestBlockchain.GetTestSnapshot();

            // no password on this wallet
            using var unlock = wallet.Unlock("""");
            var acc = wallet.CreateAccount();

            // Fake balance

            var key = NativeContract.GAS.CreateStorageKey(20, acc.ScriptHash);

            var entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));

            entry.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;

            // Make transaction
            // Manually creating script

            byte[] script;
            using (ScriptBuilder sb = new())
            {
                // self-transfer of 1e-8 GAS
                BigInteger value = new BigDecimal(BigInteger.One, 8).Value;
                sb.EmitDynamicCall(NativeContract.GAS.Hash, ""transfer"", acc.ScriptHash, acc.ScriptHash, value);
                sb.Emit(OpCode.ASSERT);
                script = sb.ToArray();
            }

            // trying global scope
            var signers = new Signer[]{ new Signer
                {
                    Account = acc.ScriptHash,
                    Scopes = WitnessScope.CustomContracts,
                    AllowedContracts = new[] { NativeContract.NEO.Hash }
                } };

            // using this...

            // expects FAULT on execution of 'transfer' Application script
            // due to lack of a valid witness validation
            Transaction tx = null;
            Assert.ThrowsException<InvalidOperationException>(() => tx = wallet.MakeTransaction(snapshot, script, acc.ScriptHash, signers));
            Assert.IsNull(tx);
        }

        [TestMethod]
        public void FeeIsSignatureContract_TestScope_CurrentHash_NEO_GAS()
        {
            var wallet = TestUtils.GenerateTestWallet();
            var snapshot = TestBlockchain.GetTestSnapshot();

            // no password on this wallet
            using var unlock = wallet.Unlock("""");
            var acc = wallet.CreateAccount();

            // Fake balance

            var key = NativeContract.GAS.CreateStorageKey(20, acc.ScriptHash);

            var entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));

            entry.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;

            snapshot.Commit();

            // Make transaction
            // Manually creating script

            byte[] script;
            using (ScriptBuilder sb = new())
            {
                // self-transfer of 1e-8 GAS
                BigInteger value = new BigDecimal(BigInteger.One, 8).Value;
                sb.EmitDynamicCall(NativeContract.GAS.Hash, ""transfer"", acc.ScriptHash, acc.ScriptHash, value, null);
                sb.Emit(OpCode.ASSERT);
                script = sb.ToArray();
            }

            // trying two custom hashes, for same target account
            var signers = new Signer[]{ new Signer
                {
                    Account = acc.ScriptHash,
                    Scopes = WitnessScope.CustomContracts,
                    AllowedContracts = new[] { NativeContract.NEO.Hash, NativeContract.GAS.Hash }
                } };

            // using this...

            var tx = wallet.MakeTransaction(snapshot, script, acc.ScriptHash, signers);

            Assert.IsNotNull(tx);
            Assert.IsNull(tx.Witnesses);

            // ----
            // Sign
            // ----

            var data = new ContractParametersContext(snapshot, tx, ProtocolSettings.Default.Network);
            bool signed = wallet.Sign(data);
            Assert.IsTrue(signed);

            // get witnesses from signed 'data'
            tx.Witnesses = data.GetWitnesses();
            // only a single witness should exist
            tx.Witnesses.Length.Should().Be(1);
            // no attributes must exist
            tx.Attributes.Length.Should().Be(0);
            // one cosigner must exist
            tx.Signers.Length.Should().Be(1);

            // Fast check
            Assert.IsTrue(tx.VerifyWitnesses(ProtocolSettings.Default, snapshot, tx.NetworkFee));

            // Check
            long verificationGas = 0;
            foreach (var witness in tx.Witnesses)
            {
                using ApplicationEngine engine = ApplicationEngine.Create(TriggerType.Verification, tx, snapshot, settings: TestBlockchain.TheNeoSystem.Settings, gas: tx.NetworkFee);
                engine.LoadScript(witness.VerificationScript);
                engine.LoadScript(witness.InvocationScript);
                Assert.AreEqual(VMState.HALT, engine.Execute());
                Assert.AreEqual(1, engine.ResultStack.Count);
                Assert.IsTrue(engine.ResultStack.Pop().GetBoolean());
                verificationGas += engine.GasConsumed;
            }
            // get sizeGas
            var sizeGas = tx.Size * NativeContract.Policy.GetFeePerByte(snapshot);
            // final check on sum: verification_cost + tx_size
            Assert.AreEqual(1269520, verificationGas + sizeGas);
            // final assert
            Assert.AreEqual(tx.NetworkFee, verificationGas + sizeGas);
        }

        [TestMethod]
        public void FeeIsSignatureContract_TestScope_NoScopeFAULT()
        {
            var wallet = TestUtils.GenerateTestWallet();
            var snapshot = TestBlockchain.GetTestSnapshot();

            // no password on this wallet
            using var unlock = wallet.Unlock("""");
            var acc = wallet.CreateAccount();

            // Fake balance

            var key = NativeContract.GAS.CreateStorageKey(20, acc.ScriptHash);

            var entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));

            entry.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;

            // Make transaction
            // Manually creating script

            byte[] script;
            using (ScriptBuilder sb = new())
            {
                // self-transfer of 1e-8 GAS
                BigInteger value = new BigDecimal(BigInteger.One, 8).Value;
                sb.EmitDynamicCall(NativeContract.GAS.Hash, ""transfer"", acc.ScriptHash, acc.ScriptHash, value);
                sb.Emit(OpCode.ASSERT);
                script = sb.ToArray();
            }

            // trying with no scope
            var attributes = Array.Empty<TransactionAttribute>();
            var signers = new Signer[]{ new Signer
                {
                    Account = acc.ScriptHash,
                    Scopes = WitnessScope.CustomContracts,
                    AllowedContracts = new[] { NativeContract.NEO.Hash, NativeContract.GAS.Hash }
                } };

            // using this...

            // expects FAULT on execution of 'transfer' Application script
            // due to lack of a valid witness validation
            Transaction tx = null;
            Assert.ThrowsException<InvalidOperationException>(() => tx = wallet.MakeTransaction(snapshot, script, acc.ScriptHash, signers, attributes));
            Assert.IsNull(tx);
        }

        [TestMethod]
        public void FeeIsSignatureContract_UnexistingVerificationContractFAULT()
        {
            var wallet = TestUtils.GenerateTestWallet();
            var snapshot = TestBlockchain.GetTestSnapshot();

            // no password on this wallet
            using var unlock = wallet.Unlock("""");
            var acc = wallet.CreateAccount();

            // Fake balance

            var key = NativeContract.GAS.CreateStorageKey(20, acc.ScriptHash);

            var entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));

            entry.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;

            snapshot.Commit();

            // Make transaction
            // Manually creating script

            byte[] script;
            using (ScriptBuilder sb = new())
            {
                // self-transfer of 1e-8 GAS
                BigInteger value = new BigDecimal(BigInteger.One, 8).Value;
                sb.EmitDynamicCall(NativeContract.GAS.Hash, ""transfer"", acc.ScriptHash, acc.ScriptHash, value, null);
                sb.Emit(OpCode.ASSERT);
                script = sb.ToArray();
            }

            // trying global scope
            var signers = new Signer[]{ new Signer
                {
                    Account = acc.ScriptHash,
                    Scopes = WitnessScope.Global
                } };

            // creating new wallet with missing account for test
            var walletWithoutAcc = TestUtils.GenerateTestWallet();

            // using this...

            Transaction tx = null;
            // expects ArgumentException on execution of 'CalculateNetworkFee' due to
            // null witness_script (no account in the wallet, no corresponding witness
            // and no verification contract for the signer)
            Assert.ThrowsException<ArgumentException>(() => walletWithoutAcc.MakeTransaction(snapshot, script, acc.ScriptHash, signers));
            Assert.IsNull(tx);
        }

        [TestMethod]
        public void Transaction_Reverify_Hashes_Length_Unequal_To_Witnesses_Length()
        {
            var snapshot = TestBlockchain.GetTestSnapshot();
            Transaction txSimple = new()
            {
                Version = 0x00,
                Nonce = 0x01020304,
                SystemFee = (long)BigInteger.Pow(10, 8), // 1 GAS 
                NetworkFee = 0x0000000000000001,
                ValidUntilBlock = 0x01020304,
                Attributes = Array.Empty<TransactionAttribute>(),
                Signers = new[]{
                    new Signer
                    {
                        Account = UInt160.Parse(""0x0001020304050607080900010203040506070809""),
                        Scopes = WitnessScope.Global
                    }
                },
                Script = new byte[] { (byte)OpCode.PUSH1 },
                Witnesses = Array.Empty<Witness>()
            };
            UInt160[] hashes = txSimple.GetScriptHashesForVerifying(snapshot);
            Assert.AreEqual(1, hashes.Length);
            Assert.AreNotEqual(VerifyResult.Succeed, txSimple.VerifyStateDependent(ProtocolSettings.Default, snapshot, new TransactionVerificationContext()));
        }

        [TestMethod]
        public void Transaction_Serialize_Deserialize_Simple()
        {
            // good and simple transaction
            Transaction txSimple = new()
            {
                Version = 0x00,
                Nonce = 0x01020304,
                SystemFee = (long)BigInteger.Pow(10, 8), // 1 GAS 
                NetworkFee = 0x0000000000000001,
                ValidUntilBlock = 0x01020304,
                Signers = new Signer[] { new Signer() { Account = UInt160.Zero } },
                Attributes = Array.Empty<TransactionAttribute>(),
                Script = new byte[] { (byte)OpCode.PUSH1 },
                Witnesses = new Witness[] { new Witness() { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() } }
            };

            byte[] sTx = txSimple.ToArray();

            // detailed hexstring info (basic checking)
            sTx.ToHexString().Should().Be(
                ""00"" + // version
                ""04030201"" + // nonce
                ""00e1f50500000000"" + // system fee (1 GAS)
                ""0100000000000000"" + // network fee (1 satoshi)
                ""04030201"" + // timelimit 
                ""01000000000000000000000000000000000000000000"" + // empty signer
                ""00"" + // no attributes
                ""0111"" + // push1 script
                ""010000""); // empty witnesses

            // try to deserialize
            Transaction tx2 = Neo.IO.Helper.AsSerializable<Transaction>(sTx);

            tx2.Version.Should().Be(0x00);
            tx2.Nonce.Should().Be(0x01020304);
            tx2.Sender.Should().Be(UInt160.Zero);
            tx2.SystemFee.Should().Be(0x0000000005f5e100); // 1 GAS (long)BigInteger.Pow(10, 8)
            tx2.NetworkFee.Should().Be(0x0000000000000001);
            tx2.ValidUntilBlock.Should().Be(0x01020304);
            tx2.Attributes.Should().BeEquivalentTo(Array.Empty<TransactionAttribute>());
            tx2.Signers.Should().BeEquivalentTo(new[]
            {
                new Signer
                {
                    Account = UInt160.Zero,
                    AllowedContracts = Array.Empty<UInt160>(),
                    AllowedGroups = Array.Empty<ECPoint>(),
                    Rules = Array.Empty<WitnessRule>()
                }
            });
            tx2.Script.Should().BeEquivalentTo(new byte[] { (byte)OpCode.PUSH1 });
            tx2.Witnesses.Should().BeEquivalentTo(new Witness[] { new Witness() { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() } });
        }

        [TestMethod]
        public void Transaction_Serialize_Deserialize_DistinctCosigners()
        {
            // cosigners must be distinct (regarding account)

            Transaction txDoubleCosigners = new()
            {
                Version = 0x00,
                Nonce = 0x01020304,
                SystemFee = (long)BigInteger.Pow(10, 8), // 1 GAS 
                NetworkFee = 0x0000000000000001,
                ValidUntilBlock = 0x01020304,
                Attributes = Array.Empty<TransactionAttribute>(),
                Signers = new Signer[]
                {
                    new Signer()
                    {
                        Account = UInt160.Parse(""0x0001020304050607080900010203040506070809""),
                        Scopes = WitnessScope.Global
                    },
                    new Signer()
                    {
                        Account = UInt160.Parse(""0x0001020304050607080900010203040506070809""), // same account as above
                        Scopes = WitnessScope.CalledByEntry // different scope, but still, same account (cannot do that)
                    }
                },
                Script = new byte[] { (byte)OpCode.PUSH1 },
                Witnesses = new Witness[] { new Witness() { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() } }
            };

            byte[] sTx = txDoubleCosigners.ToArray();

            // no need for detailed hexstring here (see basic tests for it)
            sTx.ToHexString().Should().Be(""000403020100e1f5050000000001000000000000000403020102090807060504030201000908070605040302010080090807060504030201000908070605040302010001000111010000"");

            // back to transaction (should fail, due to non-distinct cosigners)
            Transaction tx2 = null;
            Assert.ThrowsException<FormatException>(() =>
                tx2 = Neo.IO.Helper.AsSerializable<Transaction>(sTx)
            );
            Assert.IsNull(tx2);
        }


        [TestMethod]
        public void Transaction_Serialize_Deserialize_MaxSizeCosigners()
        {
            // cosigners must respect count

            int maxCosigners = 16;

            // --------------------------------------
            // this should pass (respecting max size)

            var cosigners1 = new Signer[maxCosigners];
            for (int i = 0; i < cosigners1.Length; i++)
            {
                string hex = i.ToString(""X4"");
                while (hex.Length < 40)
                    hex = hex.Insert(0, ""0"");
                cosigners1[i] = new Signer
                {
                    Account = UInt160.Parse(hex),
                    Scopes = WitnessScope.CalledByEntry
                };
            }

            Transaction txCosigners1 = new()
            {
                Version = 0x00,
                Nonce = 0x01020304,
                SystemFee = (long)BigInteger.Pow(10, 8), // 1 GAS 
                NetworkFee = 0x0000000000000001,
                ValidUntilBlock = 0x01020304,
                Attributes = Array.Empty<TransactionAttribute>(),
                Signers = cosigners1, // max + 1 (should fail)
                Script = new byte[] { (byte)OpCode.PUSH1 },
                Witnesses = new Witness[] { new Witness() { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() } }
            };

            byte[] sTx1 = txCosigners1.ToArray();

            // back to transaction (should fail, due to non-distinct cosigners)
            Assert.ThrowsException<FormatException>(() => Neo.IO.Helper.AsSerializable<Transaction>(sTx1));

            // ----------------------------
            // this should fail (max + 1)

            var cosigners = new Signer[maxCosigners + 1];
            for (var i = 0; i < maxCosigners + 1; i++)
            {
                string hex = i.ToString(""X4"");
                while (hex.Length < 40)
                    hex = hex.Insert(0, ""0"");
                cosigners[i] = new Signer
                {
                    Account = UInt160.Parse(hex)
                };
            }

            Transaction txCosigners = new()
            {
                Version = 0x00,
                Nonce = 0x01020304,
                SystemFee = (long)BigInteger.Pow(10, 8), // 1 GAS 
                NetworkFee = 0x0000000000000001,
                ValidUntilBlock = 0x01020304,
                Attributes = Array.Empty<TransactionAttribute>(),
                Signers = cosigners, // max + 1 (should fail)
                Script = new byte[] { (byte)OpCode.PUSH1 },
                Witnesses = new Witness[] { new Witness() { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() } }
            };

            byte[] sTx2 = txCosigners.ToArray();

            // back to transaction (should fail, due to non-distinct cosigners)
            Transaction tx2 = null;
            Assert.ThrowsException<FormatException>(() =>
                tx2 = Neo.IO.Helper.AsSerializable<Transaction>(sTx2)
            );
            Assert.IsNull(tx2);
        }

        [TestMethod]
        public void FeeIsSignatureContract_TestScope_FeeOnly_Default()
        {
            // Global is supposed to be default

            Signer cosigner = new();
            cosigner.Scopes.Should().Be(WitnessScope.None);

            var wallet = TestUtils.GenerateTestWallet();
            var snapshot = TestBlockchain.GetTestSnapshot();

            // no password on this wallet
            using var unlock = wallet.Unlock("""");
            var acc = wallet.CreateAccount();

            // Fake balance

            var key = NativeContract.GAS.CreateStorageKey(20, acc.ScriptHash);

            var entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));

            entry.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;

            snapshot.Commit();

            // Make transaction
            // Manually creating script

            byte[] script;
            using (ScriptBuilder sb = new())
            {
                // self-transfer of 1e-8 GAS
                BigInteger value = new BigDecimal(BigInteger.One, 8).Value;
                sb.EmitDynamicCall(NativeContract.GAS.Hash, ""transfer"", acc.ScriptHash, acc.ScriptHash, value, null);
                sb.Emit(OpCode.ASSERT);
                script = sb.ToArray();
            }

            // try to use fee only inside the smart contract
            var signers = new Signer[]{ new Signer
                {
                    Account = acc.ScriptHash,
                    Scopes =  WitnessScope.None
                } };

            Assert.ThrowsException<InvalidOperationException>(() => wallet.MakeTransaction(snapshot, script, acc.ScriptHash, signers));

            // change to global scope
            signers[0].Scopes = WitnessScope.Global;

            var tx = wallet.MakeTransaction(snapshot, script, acc.ScriptHash, signers);

            Assert.IsNotNull(tx);
            Assert.IsNull(tx.Witnesses);

            // ----
            // Sign
            // ----

            var data = new ContractParametersContext(snapshot, tx, ProtocolSettings.Default.Network);
            bool signed = wallet.Sign(data);
            Assert.IsTrue(signed);

            // get witnesses from signed 'data'
            tx.Witnesses = data.GetWitnesses();
            tx.Witnesses.Length.Should().Be(1);

            // Fast check
            Assert.IsTrue(tx.VerifyWitnesses(ProtocolSettings.Default, snapshot, tx.NetworkFee));

            // Check
            long verificationGas = 0;
            foreach (var witness in tx.Witnesses)
            {
                using ApplicationEngine engine = ApplicationEngine.Create(TriggerType.Verification, tx, snapshot, settings: TestBlockchain.TheNeoSystem.Settings, gas: tx.NetworkFee);
                engine.LoadScript(witness.VerificationScript);
                engine.LoadScript(witness.InvocationScript);
                Assert.AreEqual(VMState.HALT, engine.Execute());
                Assert.AreEqual(1, engine.ResultStack.Count);
                Assert.IsTrue(engine.ResultStack.Pop().GetBoolean());
                verificationGas += engine.GasConsumed;
            }
            // get sizeGas
            var sizeGas = tx.Size * NativeContract.Policy.GetFeePerByte(snapshot);
            // final check on sum: verification_cost + tx_size
            Assert.AreEqual(1228520, verificationGas + sizeGas);
            // final assert
            Assert.AreEqual(tx.NetworkFee, verificationGas + sizeGas);
        }

        [TestMethod]
        public void ToJson()
        {
            uut.Script = TestUtils.GetByteArray(32, 0x42);
            uut.SystemFee = 4200000000;
            uut.Signers = new Signer[] { new Signer() { Account = UInt160.Zero } };
            uut.Attributes = Array.Empty<TransactionAttribute>();
            uut.Witnesses = new[]
            {
                new Witness
                {
                    InvocationScript = Array.Empty<byte>(),
                    VerificationScript = Array.Empty<byte>()
                }
            };

            JObject jObj = uut.ToJson(ProtocolSettings.Default);
            jObj.Should().NotBeNull();
            jObj[""hash""].AsString().Should().Be(""0x0ab073429086d9e48fc87386122917989705d1c81fe4a60bf90e2fc228de3146"");
            jObj[""size""].AsNumber().Should().Be(84);
            jObj[""version""].AsNumber().Should().Be(0);
            ((JArray)jObj[""attributes""]).Count.Should().Be(0);
            jObj[""netfee""].AsString().Should().Be(""0"");
            jObj[""script""].AsString().Should().Be(""QiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA="");
            jObj[""sysfee""].AsString().Should().Be(""4200000000"");
        }

        [TestMethod]
        public void Test_GetAttribute()
        {
            var tx = new Transaction()
            {
                Attributes = Array.Empty<TransactionAttribute>(),
                NetworkFee = 0,
                Nonce = (uint)Environment.TickCount,
                Script = new byte[Transaction.MaxTransactionSize],
                Signers = new Signer[] { new Signer() { Account = UInt160.Zero } },
                SystemFee = 0,
                ValidUntilBlock = 0,
                Version = 0,
                Witnesses = Array.Empty<Witness>(),
            };

            Assert.IsNull(tx.GetAttribute<OracleResponse>());
            Assert.IsNull(tx.GetAttribute<HighPriorityAttribute>());

            tx.Attributes = new TransactionAttribute[] { new HighPriorityAttribute() };

            Assert.IsNull(tx.GetAttribute<OracleResponse>());
            Assert.IsNotNull(tx.GetAttribute<HighPriorityAttribute>());
        }

        [TestMethod]
        public void Test_VerifyStateIndependent()
        {
            var tx = new Transaction()
            {
                Attributes = Array.Empty<TransactionAttribute>(),
                NetworkFee = 0,
                Nonce = (uint)Environment.TickCount,
                Script = new byte[Transaction.MaxTransactionSize],
                Signers = new Signer[] { new Signer() { Account = UInt160.Zero } },
                SystemFee = 0,
                ValidUntilBlock = 0,
                Version = 0,
                Witnesses = new[]
                {
                    new Witness
                    {
                        InvocationScript = Array.Empty<byte>(),
                        VerificationScript = Array.Empty<byte>()
                    }
                }
            };
            tx.VerifyStateIndependent(ProtocolSettings.Default).Should().Be(VerifyResult.OverSize);
            tx.Script = Array.Empty<byte>();
            tx.VerifyStateIndependent(ProtocolSettings.Default).Should().Be(VerifyResult.Succeed);

            var walletA = TestUtils.GenerateTestWallet();
            var walletB = TestUtils.GenerateTestWallet();
            var snapshot = TestBlockchain.GetTestSnapshot();

            using var unlockA = walletA.Unlock(""123"");
            using var unlockB = walletB.Unlock(""123"");
            var a = walletA.CreateAccount();
            var b = walletB.CreateAccount();

            var multiSignContract = Contract.CreateMultiSigContract(2,
                new ECPoint[]
                {
                        a.GetKey().PublicKey,
                        b.GetKey().PublicKey
                });

            walletA.CreateAccount(multiSignContract, a.GetKey());
            var acc = walletB.CreateAccount(multiSignContract, b.GetKey());

            // Fake balance

            var key = NativeContract.GAS.CreateStorageKey(20, acc.ScriptHash);
            var entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));

            entry.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;

            snapshot.Commit();

            // Make transaction

            tx = walletA.MakeTransaction(snapshot, new TransferOutput[]
            {
                    new TransferOutput()
                    {
                         AssetId = NativeContract.GAS.Hash,
                         ScriptHash = acc.ScriptHash,
                         Value = new BigDecimal(BigInteger.One,8)
                    }
            }, acc.ScriptHash);

            // Sign

            var data = new ContractParametersContext(snapshot, tx, ProtocolSettings.Default.Network);
            Assert.IsTrue(walletA.Sign(data));
            Assert.IsTrue(walletB.Sign(data));
            Assert.IsTrue(data.Completed);

            tx.Witnesses = data.GetWitnesses();
            tx.VerifyStateIndependent(ProtocolSettings.Default).Should().Be(VerifyResult.Succeed);

            // Different hash

            tx.Witnesses[0] = new Witness()
            {
                VerificationScript = walletB.GetAccounts().First().Contract.Script,
                InvocationScript = tx.Witnesses[0].InvocationScript.ToArray()
            };
            tx.VerifyStateIndependent(ProtocolSettings.Default).Should().Be(VerifyResult.Invalid);
        }

        [TestMethod]
        public void Test_VerifyStateDependent()
        {
            var snapshot = TestBlockchain.GetTestSnapshot();
            var height = NativeContract.Ledger.CurrentIndex(snapshot);
            var tx = new Transaction()
            {
                Attributes = Array.Empty<TransactionAttribute>(),
                NetworkFee = 55000,
                Nonce = (uint)Environment.TickCount,
                Script = Array.Empty<byte>(),
                Signers = new Signer[] { new Signer() { Account = UInt160.Zero } },
                SystemFee = 0,
                ValidUntilBlock = height + 1,
                Version = 0,
                Witnesses = new Witness[] {
                    new Witness() { InvocationScript = Array.Empty<byte>(), VerificationScript = Array.Empty<byte>() },
                    new Witness() { InvocationScript = Array.Empty<byte>(), VerificationScript = new byte[1] }
                }
            };

            // Fake balance

            var key = NativeContract.GAS.CreateStorageKey(20, tx.Sender);
            var balance = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));
            balance.GetInteroperable<AccountState>().Balance = tx.NetworkFee;

            tx.VerifyStateDependent(ProtocolSettings.Default, snapshot, new TransactionVerificationContext()).Should().Be(VerifyResult.Invalid);
            balance.GetInteroperable<AccountState>().Balance = 0;
            tx.SystemFee = 10;
            tx.VerifyStateDependent(ProtocolSettings.Default, snapshot, new TransactionVerificationContext()).Should().Be(VerifyResult.InsufficientFunds);

            var walletA = TestUtils.GenerateTestWallet();
            var walletB = TestUtils.GenerateTestWallet();

            using var unlockA = walletA.Unlock(""123"");
            using var unlockB = walletB.Unlock(""123"");
            var a = walletA.CreateAccount();
            var b = walletB.CreateAccount();

            var multiSignContract = Contract.CreateMultiSigContract(2,
                new ECPoint[]
                {
                        a.GetKey().PublicKey,
                        b.GetKey().PublicKey
                });

            walletA.CreateAccount(multiSignContract, a.GetKey());
            var acc = walletB.CreateAccount(multiSignContract, b.GetKey());

            // Fake balance

            snapshot = TestBlockchain.GetTestSnapshot();
            key = NativeContract.GAS.CreateStorageKey(20, acc.ScriptHash);
            balance = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));
            balance.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;

            // Make transaction

            snapshot.Commit();
            tx = walletA.MakeTransaction(snapshot, new TransferOutput[]
            {
                    new TransferOutput()
                    {
                         AssetId = NativeContract.GAS.Hash,
                         ScriptHash = acc.ScriptHash,
                         Value = new BigDecimal(BigInteger.One,8)
                    }
            }, acc.ScriptHash);

            // Sign

            var data = new ContractParametersContext(snapshot, tx, ProtocolSettings.Default.Network);
            Assert.IsTrue(walletA.Sign(data));
            Assert.IsTrue(walletB.Sign(data));
            Assert.IsTrue(data.Completed);

            tx.Witnesses = data.GetWitnesses();
            tx.VerifyStateDependent(ProtocolSettings.Default, snapshot, new TransactionVerificationContext()).Should().Be(VerifyResult.Succeed);
        }

        [TestMethod]
        public void Test_VerifyStateInDependent_Multi()
        {
            var txData = Convert.FromBase64String(
                ""AHXd31W0NlsAAAAAAJRGawAAAAAA3g8CAAGSs5x3qmDym1fBc87ZF/F/0yGm6wEAXwsDAOQLVAIAAAAMFLqZBJj+L0XZPXNHHM9MBfCza5HnDBSSs5x3qmDym1fBc87ZF/F/0yGm6xTAHwwIdHJhbnNmZXIMFM924ovQBixKR47jVWEBExnzz6TSQWJ9W1I5Af1KAQxAnZvOQOCdkM+j22dS5SdEncZVYVVi1F26MhheNzNImTD4Ekw5kFR6Fojs7gD57Bdeuo8tLS1UXpzflmKcQ3pniAxAYvGgxtokrk6PVdduxCBwVbdfie+ZxiaDsjK0FYregl24cDr2v5cTLHrURVfJJ1is+4G6Jaer7nB1JrDrw+Qt6QxATA5GdR4rKFPPPQQ24+42OP2tz0HylG1LlANiOtIdag3ZPkUfZiBfEGoOteRD1O0UnMdJP4Su7PFhDuCdHu4MlwxAuGFEk2m/rdruleBGYz8DIzExJtwb/TsFxZdHxo4VV8ktv2Nh71Fwhg2bhW2tq8hV6RK2GFXNAU72KAgf/Qv6BQxA0j3srkwY333KvGNtw7ZvSG8X36Tqu000CEtDx4SMOt8qhVYGMr9PClsUVcYFHdrJaodilx8ewXDHNIq+OnS7SfwVDCEDAJt1QOEPJWLl/Y+snq7CUWaliybkEjSP9ahpJ7+sIqIMIQMCBenO+upaHfxYCvIMjVqiRouwFI8aXkYF/GIsgOYEugwhAhS68M7qOmbxfn4eg56iX9i+1s2C5rtuaCUBiQZfRP8BDCECPpsy6om5TQZuZJsST9UOOW7pE2no4qauGxHBcNAiJW0MIQNAjc1BY5b2R4OsWH6h4Vk8V9n+qIDIpqGSDpKiWUd4BgwhAqeDS+mzLimB0VfLW706y0LP0R6lw7ECJNekTpjFkQ8bDCECuixw9ZlvNXpDGYcFhZ+uLP6hPhFyligAdys9WIqdSr0XQZ7Q3Do="");

            var tx = new Transaction();
            ((ISerializable)tx).Deserialize(new BinaryReader(new MemoryStream(txData)));

            var settings = new ProtocolSettings() { Network = 844378958 };
            var result = tx.VerifyStateIndependent(settings);
            Assert.AreEqual(VerifyResult.Succeed, result);
        }
    }",1,777 587 2000 123 2001 2002 59 91 2003 93 777 865 2004 40 41 123 2002 61 744 2001 40 41 59 125 91 2005 93 777 865 2006 40 41 123 2002 46 2007 46 2008 40 41 46 2009 40 41 59 125 91 2005 93 777 865 2010 40 41 123 2011 46 2012 60 2013 62 40 40 41 328 40 40 2014 41 2002 41 46 2010 40 2015 46 2016 46 2017 46 2018 41 41 59 125 91 2005 93 777 865 2019 40 41 123 2020 46 2021 40 2002 46 2022 40 2002 41 41 59 2020 46 2023 40 2002 46 2022 40 752 41 41 59 125 91 2005 93 777 865 2024 40 41 123 40 40 2025 41 2002 41 46 2026 46 2027 40 41 46 2028 40 2026 46 2029 41 59 125 91 2005 93 777 865 2030 40 41 123 574 91 93 2031 61 2032 46 2033 40 1503 44 1503 41 59 2002 46 2034 61 2031 59 2002 46 2034 46 2035 46 2036 40 41 46 2037 40 1503 41 59 664 40 704 2038 61 1500 59 2038 60 2031 46 2035 59 2038 349 41 123 2002 46 2034 91 2038 93 46 2036 40 41 46 2037 40 2031 91 2038 93 41 59 125 125 91 2005 93 777 865 2039 40 41 123 2002 46 2040 46 2041 40 41 46 2042 40 1500 41 59 125 91 2005 93 777 865 2043 40 41 123 726 2044 61 1511 59 2002 46 2045 61 2044 59 2002 46 2045 46 2046 40 41 46 2047 40 2044 41 59 125 91 2005 93 777 865 2048 40 41 123 2002 46 2049 61 2050 46 2051 40 1503 44 1503 41 59 2002 46 2052 61 2053 46 2054 60 2055 62 40 41 59 2002 46 2056 61 2053 46 2054 60 2057 62 40 41 59 2002 46 2058 61 744 91 93 123 744 2059 123 2060 61 2053 46 2054 60 574 62 40 41 44 2061 61 2053 46 2054 60 574 62 40 41 125 125 59 2002 46 2062 46 2063 40 41 46 2064 40 1500 41 59 2002 46 2049 46 2065 46 2063 40 41 46 2064 40 1503 41 59 2002 46 2049 46 2066 40 41 46 2063 40 41 46 2064 40 1503 41 59 2002 46 2067 46 2063 40 41 46 2064 40 1503 41 59 125 91 2005 93 777 865 2068 40 41 123 2069 2070 61 2071 46 2072 40 41 59 2069 2073 61 2071 46 2072 40 41 59 2069 2074 61 2075 46 2076 40 41 59 860 2069 2077 61 2070 46 2078 40 362 41 59 860 2069 2079 61 2073 46 2078 40 362 41 59 2069 2080 61 2070 46 2081 40 41 59 2069 2082 61 2073 46 2081 40 41 59 2069 2083 61 2084 46 2085 40 1502 44 744 2086 91 93 123 2080 46 2087 40 41 46 2088 44 2082 46 2087 40 41 46 2088 125 41 59 2070 46 2081 40 2083 44 2080 46 2089 40 41 41 59 2069 2090 61 2073 46 2081 40 2083 44 2082 46 2089 40 41 41 59 330 2069 2091 61 2092 46 2093 46 2094 40 1503 44 2090 46 2095 41 59 2069 2096 61 2074 46 2097 40 2091 44 40 41 328 744 2098 40 744 2099 40 41 41 41 59 2096 46 2100 60 2099 62 40 41 46 2101 61 1505 42 2092 46 2093 46 2102 59 2074 46 2103 40 41 59 330 2069 2104 61 2070 46 2105 40 2074 44 744 2106 91 93 123 744 2106 40 41 123 2107 61 2092 46 2093 46 2108 44 2095 61 2090 46 2095 44 2109 61 744 2110 40 2111 46 2112 44 1502 41 125 125 44 2090 46 2095 41 59 2113 46 2114 40 2104 41 59 330 2069 2115 61 744 2116 40 2074 44 2104 44 2117 46 2118 46 2119 43 1501 41 59 2113 46 2120 40 2070 46 2121 40 2115 41 41 59 2069 2122 61 744 2116 40 2074 44 2104 44 2117 46 2118 46 2119 41 59 2113 46 2123 40 2070 46 2121 40 2122 41 41 59 2113 46 2123 40 2073 46 2121 40 2122 41 41 59 2113 46 2123 40 2122 46 2124 41 59 2104 46 2125 61 2122 46 2126 40 41 59 330 2113 46 2123 40 2104 46 2127 40 2117 46 2118 44 2074 44 2104 46 2128 41 41 59 330 726 2129 61 1500 59 665 40 2069 2130 696 2104 46 2125 41 123 860 2131 2132 61 2131 46 2133 40 2134 46 2135 44 2104 44 2074 44 2136 58 2075 46 2137 46 2138 44 2139 58 2104 46 2128 41 59 2132 46 2140 40 2130 46 2141 41 59 2132 46 2140 40 2130 46 2142 41 59 2113 46 2143 40 2144 46 2145 44 2132 46 2146 40 41 41 59 2113 46 2143 40 1501 44 2132 46 2147 46 2148 41 59 2113 46 2123 40 2132 46 2147 46 2149 40 41 46 2150 40 41 41 59 2129 348 2132 46 2151 59 125 2069 2152 61 2104 46 2153 42 2092 46 2154 46 2155 40 2074 41 59 2113 46 2156 40 1508 44 2129 41 59 2113 46 2156 40 1507 44 2152 41 59 2113 46 2156 40 1508 44 2104 46 2128 41 59 125 91 2005 93 777 865 2157 40 41 123 2158 2159 61 2160 46 2161 40 41 59 2158 2162 61 2163 46 2164 40 41 59 860 2158 2165 61 2159 46 2166 40 362 41 59 2158 2167 61 2159 46 2168 40 41 59 330 2158 2169 61 2170 46 2171 46 2172 40 1503 44 2167 46 2173 41 59 2158 2174 61 2162 46 2175 40 2169 44 40 41 328 744 2176 40 744 2177 40 41 41 41 59 2174 46 2178 60 2177 62 40 41 46 2179 61 1505 42 2170 46 2171 46 2180 59 2162 46 2181 40 41 59 330 330 2158 2182 61 2159 46 2183 40 2162 44 744 2184 91 93 123 744 2184 40 41 123 2185 61 2170 46 2171 46 2186 44 2173 61 2167 46 2173 44 2187 61 744 2188 40 2189 46 2190 44 1502 41 125 125 44 2167 46 2173 41 59 2191 46 2192 40 2182 41 59 2191 46 2193 40 2182 46 2194 41 59 330 2182 46 2195 46 2196 40 41 46 2197 40 1508 41 59 330 330 330 2158 2198 61 744 2199 40 2162 44 2182 44 2200 46 2201 46 2202 41 59 330 330 2198 46 2203 46 2204 46 2196 40 41 46 2197 40 1501 41 59 2198 46 2203 91 1500 93 46 2196 40 41 46 2205 40 2167 46 2173 41 59 330 569 2206 61 2159 46 2207 40 2198 41 59 2191 46 2208 40 2206 41 59 330 2182 46 2194 61 2198 46 2209 40 41 59 2182 46 2194 46 2210 46 2196 40 41 46 2197 40 1501 41 59 330 2191 46 2208 40 2182 46 2211 40 2200 46 2201 44 2162 44 2182 46 2195 41 41 59 330 726 2212 61 1500 59 665 40 2158 2213 696 2182 46 2194 41 123 860 2214 2215 61 2214 46 2216 40 2217 46 2218 44 2182 44 2162 44 2219 58 2163 46 2220 46 2221 44 2222 58 2182 46 2195 41 59 2215 46 2223 40 2213 46 2224 41 59 2215 46 2223 40 2213 46 2225 41 59 2191 46 2226 40 2227 46 2228 44 2215 46 2229 40 41 41 59 2191 46 2226 40 1501 44 2215 46 2230 46 2204 41 59 2191 46 2208 40 2215 46 2230 46 2231 40 41 46 2232 40 41 41 59 2212 348 2215 46 2233 59 125 330 330 330 2191 46 2234 40 1504 44 2182 46 2235 41 59 330 330 2191 46 2234 40 1503 44 2001 46 2236 41 59 330 2191 46 2234 40 1501 44 2182 46 2237 46 2238 40 41 41 59 2191 46 2234 40 1500 44 2182 46 2237 46 2210 41 59 2191 46 2234 40 1501 44 2182 46 2239 46 2210 41 59 330 2191 46 2234 40 1503 44 2182 46 2239 46 2238 40 41 41 59 330 2191 46 2234 40 1503 44 2182 46 2240 46 2238 40 41 41 59 330 2191 46 2234 40 1504 44 2182 46 2194 46 2238 40 41 41 59 330 2191 46 2234 40 1503 43 1503 43 1501 43 1503 43 1504 44 2182 46 2235 41 59 2191 46 2234 40 1504 44 2170 46 2241 46 2242 40 2162 41 41 59 2158 2243 61 2182 46 2235 42 2170 46 2241 46 2242 40 2162 41 59 330 2191 46 2234 40 1507 44 2243 41 59 2191 46 2234 40 1507 44 2212 41 59 330 2191 46 2234 40 2182 46 2195 44 2212 43 2243 41 59 125 91 2005 93 777 865 2244 40 41 123 2245 2246 61 2247 46 2248 40 41 59 2245 2249 61 2250 46 2251 40 41 59 330 860 2245 2252 61 2246 46 2253 40 362 41 59 2245 2254 61 2246 46 2255 40 41 59 330 2245 2256 61 2257 46 2258 46 2259 40 1503 44 2254 46 2260 41 59 2245 2261 61 2249 46 2262 40 2256 44 40 41 328 744 2263 40 744 2264 40 41 41 41 59 2261 46 2265 60 2264 62 40 41 46 2266 61 1505 42 2257 46 2258 46 2267 59 2249 46 2268 40 41 59 330 330 574 91 93 2269 59 860 40 2270 2271 61 744 40 41 41 123 330 2272 2273 61 744 2274 40 2272 46 2275 44 1502 41 46 2276 59 2271 46 2277 40 2257 46 2258 46 2278 44 362 44 2254 46 2260 44 2254 46 2260 44 2273 44 752 41 59 2271 46 2279 40 2280 46 2281 41 59 2269 61 2271 46 2282 40 41 59 125 330 2245 2283 61 744 2284 91 93 123 744 2284 123 2285 61 2254 46 2260 44 2286 61 2287 46 2288 125 125 59 330 2245 2289 61 2246 46 2290 40 2249 44 2269 44 2254 46 2260 44 2283 41 59 2291 46 2292 40 2289 41 59 2291 46 2293 40 2289 46 2294 41 59 330 330 330 2245 2295 61 744 2296 40 2249 44 2289 44 2297 46 2298 46 2299 41 59 569 2300 61 2246 46 2301 40 2295 41 59 2291 46 2302 40 2300 41 59 330 2289 46 2294 61 2295 46 2303 40 41 59 2289 46 2294 46 2304 46 2305 40 41 46 2306 40 1501 41 59 330 2291 46 2302 40 2289 46 2307 40 2297 46 2298 44 2249 44 2289 46 2308 41 41 59 330 726 2309 61 1500 59 665 40 2245 2310 696 2289 46 2294 41 123 860 2311 2312 61 2311 46 2313 40 2314 46 2315 44 2289 44 2249 44 2316 58 2250 46 2317 46 2318 44 2319 58 2289 46 2308 41 59 2312 46 2320 40 2310 46 2321 41 59 2312 46 2320 40 2310 46 2322 41 59 2291 46 2323 40 2324 46 2325 44 2312 46 2326 40 41 41 59 2291 46 2323 40 1501 44 2312 46 2327 46 2328 41 59 2291 46 2302 40 2312 46 2327 46 2329 40 41 46 2330 40 41 41 59 2309 348 2312 46 2331 59 125 330 2245 2332 61 2289 46 2333 42 2257 46 2334 46 2335 40 2249 41 59 330 2291 46 2336 40 1508 44 2309 43 2332 41 59 330 2291 46 2336 40 2289 46 2308 44 2309 43 2332 41 59 125 91 2005 93 777 865 2337 40 41 123 2338 2339 61 2340 46 2341 40 41 59 2338 2342 61 2343 46 2344 40 41 59 330 860 2338 2345 61 2339 46 2346 40 362 41 59 2338 2347 61 2339 46 2348 40 41 59 330 2338 2349 61 2350 46 2351 46 2352 40 1503 44 2347 46 2353 41 59 2338 2354 61 2342 46 2355 40 2349 44 40 41 328 744 2356 40 744 2357 40 41 41 41 59 2354 46 2358 60 2357 62 40 41 46 2359 61 1505 42 2350 46 2351 46 2360 59 2342 46 2361 40 41 59 330 330 574 91 93 2362 59 860 40 2363 2364 61 744 40 41 41 123 330 2365 2366 61 744 2367 40 2365 46 2368 44 1502 41 46 2369 59 2364 46 2370 40 2350 46 2351 46 2371 44 362 44 2347 46 2353 44 2347 46 2353 44 2366 44 752 41 59 2364 46 2372 40 2373 46 2374 41 59 2362 61 2364 46 2375 40 41 59 125 330 2338 2376 61 744 2377 91 93 123 744 2377 123 2378 61 2347 46 2353 44 2379 61 2380 46 2381 44 2382 61 744 91 93 123 2350 46 2351 46 2383 125 125 125 59 330 2338 2384 61 2339 46 2385 40 2342 44 2362 44 2347 46 2353 44 2376 41 59 2386 46 2387 40 2384 41 59 2386 46 2388 40 2384 46 2389 41 59 330 330 330 2338 2390 61 744 2391 40 2342 44 2384 44 2392 46 2393 46 2394 41 59 569 2395 61 2339 46 2396 40 2390 41 59 2386 46 2397 40 2395 41 59 330 2384 46 2389 61 2390 46 2398 40 41 59 2384 46 2389 46 2399 46 2400 40 41 46 2401 40 1501 41 59 330 2386 46 2397 40 2384 46 2402 40 2392 46 2393 44 2342 44 2384 46 2403 41 41 59 330 726 2404 61 1500 59 665 40 2338 2405 696 2384 46 2389 41 123 860 2406 2407 61 2406 46 2408 40 2409 46 2410 44 2384 44 2342 44 2411 58 2343 46 2412 46 2413 44 2414 58 2384 46 2403 41 59 2407 46 2415 40 2405 46 2416 41 59 2407 46 2415 40 2405 46 2417 41 59 2386 46 2418 40 2419 46 2420 44 2407 46 2421 40 41 41 59 2386 46 2418 40 1501 44 2407 46 2422 46 2423 41 59 2386 46 2397 40 2407 46 2422 46 2424 40 41 46 2425 40 41 41 59 2404 348 2407 46 2426 59 125 330 2338 2427 61 2384 46 2428 42 2350 46 2429 46 2430 40 2342 41 59 330 2386 46 2431 40 1508 44 2404 43 2427 41 59 330 2386 46 2431 40 2384 46 2403 44 2404 43 2427 41 59 125 91 2005 93 777 865 2432 40 41 123 2433 2434 61 2435 46 2436 40 41 59 2433 2437 61 2438 46 2439 40 41 59 330 860 2433 2440 61 2434 46 2441 40 362 41 59 2433 2442 61 2434 46 2443 40 41 59 330 2433 2444 61 2445 46 2446 46 2447 40 1503 44 2442 46 2448 41 59 2433 2449 61 2437 46 2450 40 2444 44 40 41 328 744 2451 40 744 2452 40 41 41 41 59 2449 46 2453 60 2452 62 40 41 46 2454 61 1505 42 2445 46 2446 46 2455 59 2437 46 2456 40 41 59 330 330 574 91 93 2457 59 860 40 2458 2459 61 744 40 41 41 123 330 2460 2461 61 744 2462 40 2460 46 2463 44 1502 41 46 2464 59 2459 46 2465 40 2445 46 2446 46 2466 44 362 44 2442 46 2448 44 2442 46 2448 44 2461 44 752 41 59 2459 46 2467 40 2468 46 2469 41 59 2457 61 2459 46 2470 40 41 59 125 330 2433 2471 61 744 2472 91 93 123 744 2472 123 2473 61 2442 46 2448 44 330 330 330 2474 61 2475 46 2476 124 2475 46 2477 44 2478 61 744 91 93 123 2445 46 2446 46 2479 125 125 125 59 330 2433 2480 61 2434 46 2481 40 2437 44 2457 44 2442 46 2448 44 2471 41 59 2482 46 2483 40 2480 41 59 2482 46 2484 40 2480 46 2485 41 59 330 330 330 2433 2486 61 744 2487 40 2437 44 2480 44 2488 46 2489 46 2490 41 59 569 2491 61 2434 46 2492 40 2486 41 59 2482 46 2493 40 2491 41 59 330 2480 46 2485 61 2486 46 2494 40 41 59 2480 46 2485 46 2495 46 2496 40 41 46 2497 40 1501 41 59 330 2482 46 2493 40 2480 46 2498 40 2488 46 2489 44 2437 44 2480 46 2499 41 41 59 330 726 2500 61 1500 59 665 40 2433 2501 696 2480 46 2485 41 123 860 2502 2503 61 2502 46 2504 40 2505 46 2506 44 2480 44 2437 44 2507 58 2438 46 2508 46 2509 44 2510 58 2480 46 2499 41 59 2503 46 2511 40 2501 46 2512 41 59 2503 46 2511 40 2501 46 2513 41 59 2482 46 2514 40 2515 46 2516 44 2503 46 2517 40 41 41 59 2482 46 2514 40 1501 44 2503 46 2518 46 2519 41 59 2482 46 2493 40 2503 46 2518 46 2520 40 41 46 2521 40 41 41 59 2500 348 2503 46 2522 59 125 330 2433 2523 61 2480 46 2524 42 2445 46 2525 46 2526 40 2437 41 59 330 2482 46 2527 40 1508 44 2500 43 2523 41 59 330 2482 46 2527 40 2480 46 2499 44 2500 43 2523 41 59 125 91 2005 93 777 865 2528 40 41 123 2529 2530 61 2531 46 2532 40 41 59 2529 2533 61 2534 46 2535 40 41 59 330 860 2529 2536 61 2530 46 2537 40 362 41 59 2529 2538 61 2530 46 2539 40 41 59 330 2529 2540 61 2541 46 2542 46 2543 40 1503 44 2538 46 2544 41 59 2529 2545 61 2533 46 2546 40 2540 44 40 41 328 744 2547 40 744 2548 40 41 41 41 59 2545 46 2549 60 2548 62 40 41 46 2550 61 1505 42 2541 46 2542 46 2551 59 330 330 574 91 93 2552 59 860 40 2553 2554 61 744 40 41 41 123 330 2555 2556 61 744 2557 40 2555 46 2558 44 1502 41 46 2559 59 2554 46 2560 40 2541 46 2542 46 2561 44 362 44 2538 46 2544 44 2538 46 2544 44 2556 41 59 2554 46 2562 40 2563 46 2564 41 59 2552 61 2554 46 2565 40 41 59 125 330 2529 2566 61 744 2567 91 93 123 744 2567 123 2568 61 2538 46 2544 44 2569 61 2570 46 2571 44 2572 61 744 91 93 123 2541 46 2573 46 2574 125 125 125 59 330 330 330 2001 2575 61 752 59 2576 46 2577 60 2578 62 40 40 41 328 2575 61 2530 46 2579 40 2533 44 2552 44 2538 46 2544 44 2566 41 41 59 2576 46 2580 40 2575 41 59 125 91 2005 93 777 865 2581 40 41 123 2582 2583 61 2584 46 2585 40 41 59 2582 2586 61 2587 46 2588 40 41 59 330 860 2582 2589 61 2583 46 2590 40 362 41 59 2582 2591 61 2583 46 2592 40 41 59 330 2582 2593 61 2594 46 2595 46 2596 40 1503 44 2591 46 2597 41 59 2582 2598 61 2586 46 2599 40 2593 44 40 41 328 744 2600 40 744 2601 40 41 41 41 59 2598 46 2602 60 2601 62 40 41 46 2603 61 1505 42 2594 46 2595 46 2604 59 2586 46 2605 40 41 59 330 330 574 91 93 2606 59 860 40 2607 2608 61 744 40 41 41 123 330 2609 2610 61 744 2611 40 2609 46 2612 44 1502 41 46 2613 59 2608 46 2614 40 2594 46 2595 46 2615 44 362 44 2591 46 2597 44 2591 46 2597 44 2610 44 752 41 59 2608 46 2616 40 2617 46 2618 41 59 2606 61 2608 46 2619 40 41 59 125 330 2582 2620 61 744 2621 91 93 123 744 2621 123 2622 61 2591 46 2597 44 2623 61 2624 46 2625 44 2626 61 744 91 93 123 2594 46 2627 46 2628 44 2594 46 2595 46 2628 125 125 125 59 330 2582 2629 61 2583 46 2630 40 2586 44 2606 44 2591 46 2597 44 2620 41 59 2631 46 2632 40 2629 41 59 2631 46 2633 40 2629 46 2634 41 59 330 330 330 2582 2635 61 744 2636 40 2586 44 2629 44 2637 46 2638 46 2639 41 59 569 2640 61 2583 46 2641 40 2635 41 59 2631 46 2642 40 2640 41 59 330 2629 46 2634 61 2635 46 2643 40 41 59 330 2629 46 2634 46 2644 46 2645 40 41 46 2646 40 1501 41 59 330 2629 46 2647 46 2644 46 2645 40 41 46 2646 40 1500 41 59 330 2629 46 2648 46 2644 46 2645 40 41 46 2646 40 1501 41 59 330 2631 46 2642 40 2629 46 2649 40 2637 46 2638 44 2586 44 2629 46 2650 41 41 59 330 726 2651 61 1500 59 665 40 2582 2652 696 2629 46 2634 41 123 860 2653 2654 61 2653 46 2655 40 2656 46 2657 44 2629 44 2586 44 2658 58 2587 46 2659 46 2660 44 2661 58 2629 46 2650 41 59 2654 46 2662 40 2652 46 2663 41 59 2654 46 2662 40 2652 46 2664 41 59 2631 46 2665 40 2666 46 2667 44 2654 46 2668 40 41 41 59 2631 46 2665 40 1501 44 2654 46 2669 46 2670 41 59 2631 46 2642 40 2654 46 2669 46 2671 40 41 46 2672 40 41 41 59 2651 348 2654 46 2673 59 125 330 2582 2674 61 2629 46 2675 42 2594 46 2676 46 2677 40 2586 41 59 330 2631 46 2678 40 1508 44 2651 43 2674 41 59 330 2631 46 2678 40 2629 46 2650 44 2651 43 2674 41 59 125 91 2005 93 777 865 2679 40 41 123 2680 2681 61 2682 46 2683 40 41 59 2680 2684 61 2685 46 2686 40 41 59 330 860 2680 2687 61 2681 46 2688 40 362 41 59 2680 2689 61 2681 46 2690 40 41 59 330 2680 2691 61 2692 46 2693 46 2694 40 1503 44 2689 46 2695 41 59 2680 2696 61 2684 46 2697 40 2691 44 40 41 328 744 2698 40 744 2699 40 41 41 41 59 2696 46 2700 60 2699 62 40 41 46 2701 61 1505 42 2692 46 2693 46 2702 59 330 330 574 91 93 2703 59 860 40 2704 2705 61 744 40 41 41 123 330 2706 2707 61 744 2708 40 2706 46 2709 44 1502 41 46 2710 59 2705 46 2711 40 2692 46 2693 46 2712 44 362 44 2689 46 2695 44 2689 46 2695 44 2707 41 59 2705 46 2713 40 2714 46 2715 41 59 2703 61 2705 46 2716 40 41 59 125 330 2680 2717 61 2718 46 2719 60 2720 62 40 41 59 2680 2721 61 744 2722 91 93 123 744 2722 123 2723 61 2689 46 2695 44 2724 61 2725 46 2726 44 2727 61 744 91 93 123 2692 46 2728 46 2729 44 2692 46 2693 46 2729 125 125 125 59 330 330 330 2001 2730 61 752 59 2731 46 2732 60 2733 62 40 40 41 328 2730 61 2681 46 2734 40 2684 44 2703 44 2689 46 2695 44 2721 44 2717 41 41 59 2731 46 2735 40 2730 41 59 125 91 2005 93 777 865 2736 40 41 123 2737 2738 61 2739 46 2740 40 41 59 2737 2741 61 2742 46 2743 40 41 59 330 860 2737 2744 61 2738 46 2745 40 362 41 59 2737 2746 61 2738 46 2747 40 41 59 330 2737 2748 61 2749 46 2750 46 2751 40 1503 44 2746 46 2752 41 59 2737 2753 61 2741 46 2754 40 2748 44 40 41 328 744 2755 40 744 2756 40 41 41 41 59 2753 46 2757 60 2756 62 40 41 46 2758 61 1505 42 2749 46 2750 46 2759 59 2741 46 2760 40 41 59 330 330 574 91 93 2761 59 860 40 2762 2763 61 744 40 41 41 123 330 2764 2765 61 744 2766 40 2764 46 2767 44 1502 41 46 2768 59 2763 46 2769 40 2749 46 2750 46 2770 44 362 44 2746 46 2752 44 2746 46 2752 44 2765 44 752 41 59 2763 46 2771 40 2772 46 2773 41 59 2761 61 2763 46 2774 40 41 59 125 330 2737 2775 61 744 2776 91 93 123 744 2776 123 2777 61 2746 46 2752 44 2778 61 2779 46 2780 125 125 59 330 2737 2781 61 2739 46 2740 40 41 59 330 2001 2782 61 752 59 330 330 330 2783 46 2784 60 2785 62 40 40 41 328 2781 46 2786 40 2741 44 2761 44 2746 46 2752 44 2775 41 41 59 2783 46 2787 40 2782 41 59 125 91 2005 93 777 865 2788 40 41 123 2789 2790 61 2791 46 2792 40 41 59 2001 2793 61 744 40 41 123 2794 61 1500 44 2795 61 1509 44 2796 61 40 726 41 2797 46 2798 40 1502 44 1502 41 44 330 2799 61 1501 44 2800 61 1509 44 2801 61 2802 46 2803 60 2804 62 40 41 44 2805 61 744 91 93 123 744 2806 123 2807 61 2808 46 2809 40 362 41 44 2810 61 2811 46 2812 125 125 44 2813 61 744 574 91 93 123 40 574 41 2814 46 2815 125 44 2816 61 2802 46 2803 60 2817 62 40 41 125 59 2818 91 93 2819 61 2793 46 2820 40 2790 41 59 2821 46 2822 40 1501 44 2819 46 2823 41 59 2821 46 2824 40 2825 46 2826 44 2793 46 2827 40 2828 46 2829 44 2790 44 744 2830 40 41 41 41 59 125 91 2005 93 777 865 2831 40 41 123 330 2001 2832 61 744 40 41 123 2833 61 1500 44 2834 61 1509 44 2835 61 40 726 41 2836 46 2837 40 1502 44 1502 41 44 330 2838 61 1501 44 2839 61 1509 44 2840 61 744 2841 91 93 123 744 2841 40 41 123 2842 61 2843 46 2844 125 125 44 2845 61 2846 46 2847 60 2848 62 40 41 44 2849 61 744 574 91 93 123 40 574 41 2850 46 2851 125 44 2852 61 744 2853 91 93 123 744 2853 40 41 123 2854 61 2846 46 2847 60 574 62 40 41 44 2855 61 2846 46 2847 60 574 62 40 41 125 125 125 59 574 91 93 2856 61 2832 46 2857 40 41 59 330 2856 46 2858 40 41 46 2859 40 41 46 2860 40 362 43 330 362 43 330 362 43 330 362 43 330 362 43 330 362 43 330 362 43 330 362 43 330 362 41 59 330 330 2001 2861 61 2862 46 2863 46 2864 46 2865 60 2001 62 40 2856 41 59 2861 46 2866 46 2859 40 41 46 2860 40 1500 41 59 2861 46 2867 46 2859 40 41 46 2860 40 1509 41 59 2861 46 2868 46 2859 40 41 46 2860 40 2869 46 2870 41 59 2861 46 2871 46 2859 40 41 46 2860 40 1509 41 59 330 2861 46 2872 46 2859 40 41 46 2860 40 1501 41 59 2861 46 2873 46 2859 40 41 46 2860 40 1509 41 59 2861 46 2874 46 2859 40 41 46 2875 40 2876 46 2877 60 2878 62 40 41 41 59 2861 46 2879 46 2859 40 41 46 2875 40 744 91 93 123 744 2880 123 2881 61 2869 46 2870 44 2882 61 2876 46 2877 60 2869 62 40 41 44 2883 61 2876 46 2877 60 2884 62 40 41 44 2885 61 2876 46 2877 60 2886 62 40 41 125 125 41 59 2861 46 2887 46 2859 40 41 46 2875 40 744 574 91 93 123 40 574 41 2888 46 2889 125 41 59 2861 46 2890 46 2859 40 41 46 2875 40 744 2891 91 93 123 744 2891 40 41 123 2892 61 2876 46 2877 60 574 62 40 41 44 2893 61 2876 46 2877 60 574 62 40 41 125 125 41 59 125 91 2005 93 777 865 2894 40 41 123 330 2001 2895 61 744 40 41 123 2896 61 1500 44 2897 61 1509 44 2898 61 40 726 41 2899 46 2900 40 1502 44 1502 41 44 330 2901 61 1501 44 2902 61 1509 44 2903 61 2904 46 2905 60 2906 62 40 41 44 2907 61 744 2908 91 93 123 744 2908 40 41 123 2909 61 2910 46 2911 40 362 41 44 2912 61 2913 46 2914 125 44 744 2908 40 41 123 2915 61 2916 46 2917 40 362 41 44 330 2918 61 2919 46 2920 330 125 125 44 2921 61 744 574 91 93 123 40 574 41 2922 46 2923 125 44 2924 61 744 2925 91 93 123 744 2925 40 41 123 2926 61 2904 46 2905 60 574 62 40 41 44 2927 61 2904 46 2905 60 574 62 40 41 125 125 125 59 574 91 93 2928 61 2895 46 2929 40 41 59 330 2928 46 2930 40 41 46 2931 40 41 46 2932 40 362 41 59 330 2001 2933 61 752 59 2934 46 2935 60 2936 62 40 40 41 328 2933 61 2937 46 2938 46 2939 46 2940 60 2001 62 40 2928 41 41 59 2934 46 2941 40 2933 41 59 125 91 2005 93 777 865 2942 40 41 123 330 704 2943 61 1503 59 330 330 2944 2945 61 744 2946 91 2943 93 59 664 40 704 2947 61 1500 59 2947 60 2945 46 2948 59 2947 349 41 123 815 2949 61 2947 46 2950 40 362 41 59 870 40 2949 46 2948 60 1503 41 2949 61 2949 46 2951 40 1500 44 362 41 59 2945 91 2947 93 61 744 2946 123 2952 61 2953 46 2954 40 2949 41 44 2955 61 2956 46 2957 125 59 125 2001 2958 61 744 40 41 123 2959 61 1500 44 2960 61 1509 44 2961 61 40 726 41 2962 46 2963 40 1502 44 1502 41 44 330 2964 61 1501 44 2965 61 1509 44 2966 61 2967 46 2968 60 2969 62 40 41 44 2970 61 2945 44 330 2971 61 744 574 91 93 123 40 574 41 2972 46 2973 125 44 2974 61 744 2975 91 93 123 744 2975 40 41 123 2976 61 2967 46 2968 60 574 62 40 41 44 2977 61 2967 46 2968 60 574 62 40 41 125 125 125 59 574 91 93 2978 61 2958 46 2979 40 41 59 330 2980 46 2981 60 2982 62 40 40 41 328 2983 46 2984 46 2985 46 2986 60 2001 62 40 2978 41 41 59 330 330 2944 2987 61 744 2946 91 2943 43 1501 93 59 664 40 2944 2947 61 1500 59 2947 60 2943 43 1501 59 2947 349 41 123 815 2988 61 2947 46 2989 40 362 41 59 870 40 2988 46 2948 60 1503 41 2988 61 2988 46 2990 40 1500 44 362 41 59 2987 91 2947 93 61 744 2946 123 2991 61 2992 46 2993 40 2988 41 125 59 125 2001 2994 61 744 40 41 123 2995 61 1500 44 2996 61 1509 44 2997 61 40 726 41 2998 46 2999 40 1502 44 1502 41 44 330 3000 61 1501 44 3001 61 1509 44 3002 61 3003 46 3004 60 3005 62 40 41 44 3006 61 2987 44 330 3007 61 744 574 91 93 123 40 574 41 3008 46 3009 125 44 3010 61 744 3011 91 93 123 744 3011 40 41 123 3012 61 3003 46 3004 60 574 62 40 41 44 3013 61 3003 46 3004 60 574 62 40 41 125 125 125 59 574 91 93 3014 61 2994 46 2979 40 41 59 330 2001 3015 61 752 59 2980 46 2981 60 2982 62 40 40 41 328 3015 61 2983 46 2984 46 2985 46 2986 60 2001 62 40 3014 41 41 59 2980 46 3016 40 3015 41 59 125 91 2005 93 777 865 3017 40 41 123 330 3018 3019 61 744 40 41 59 3019 46 3020 46 3021 40 41 46 3022 40 3023 46 3024 41 59 3025 3026 61 3027 46 3028 40 41 59 3025 3029 61 3030 46 3031 40 41 59 330 860 3025 3032 61 3026 46 3033 40 362 41 59 3025 3034 61 3026 46 3035 40 41 59 330 3025 3036 61 3037 46 3038 46 3039 40 1503 44 3034 46 3040 41 59 3025 3041 61 3029 46 3042 40 3036 44 40 41 328 744 3043 40 744 3044 40 41 41 41 59 3041 46 3045 60 3044 62 40 41 46 3046 61 1505 42 3037 46 3038 46 3047 59 3029 46 3048 40 41 59 330 330 574 91 93 3049 59 860 40 3050 3051 61 744 40 41 41 123 330 3052 3053 61 744 3054 40 3052 46 3055 44 1502 41 46 3056 59 3051 46 3057 40 3037 46 3038 46 3058 44 362 44 3034 46 3040 44 3034 46 3040 44 3053 44 752 41 59 3051 46 3059 40 3060 46 3061 41 59 3049 61 3051 46 3062 40 41 59 125 330 3025 3063 61 744 3018 91 93 123 744 3018 123 3064 61 3034 46 3040 44 3020 61 3023 46 3024 125 125 59 3065 46 3066 60 3067 62 40 40 41 328 3026 46 3068 40 3029 44 3049 44 3034 46 3040 44 3063 41 41 59 330 3063 91 1500 93 46 3020 61 3023 46 3069 59 3025 3070 61 3026 46 3068 40 3029 44 3049 44 3034 46 3040 44 3063 41 59 3065 46 3071 40 3070 41 59 3065 46 3072 40 3070 46 3073 41 59 330 330 330 3025 3074 61 744 3075 40 3029 44 3070 44 3076 46 3077 46 3078 41 59 569 3079 61 3026 46 3080 40 3074 41 59 3065 46 3081 40 3079 41 59 330 3070 46 3073 61 3074 46 3082 40 41 59 3070 46 3073 46 3083 46 3021 40 41 46 3022 40 1501 41 59 330 3065 46 3081 40 3070 46 3084 40 3076 46 3077 44 3029 44 3070 46 3085 41 41 59 330 726 3086 61 1500 59 665 40 3025 3087 696 3070 46 3073 41 123 860 3088 3089 61 3088 46 3090 40 3091 46 3092 44 3070 44 3029 44 3093 58 3030 46 3094 46 3095 44 3096 58 3070 46 3085 41 59 3089 46 3097 40 3087 46 3098 41 59 3089 46 3097 40 3087 46 3099 41 59 3065 46 3100 40 3101 46 3102 44 3089 46 3103 40 41 41 59 3065 46 3100 40 1501 44 3089 46 3104 46 3105 41 59 3065 46 3081 40 3089 46 3104 46 3106 40 41 46 3107 40 41 41 59 3086 348 3089 46 3108 59 125 330 3025 3109 61 3070 46 3110 42 3037 46 3111 46 3112 40 3029 41 59 330 3065 46 3113 40 1508 44 3086 43 3109 41 59 330 3065 46 3113 40 3070 46 3085 44 3086 43 3109 41 59 125 91 2005 93 777 865 3114 40 41 123 2002 46 3115 61 3116 46 3117 40 1503 44 1503 41 59 2002 46 3118 61 1511 59 2002 46 3119 61 744 3120 91 93 123 744 3120 40 41 123 3121 61 3122 46 3123 125 125 59 2002 46 3124 61 3125 46 3126 60 3127 62 40 41 59 2002 46 3128 61 744 91 93 123 744 3129 123 3130 61 3125 46 3126 60 574 62 40 41 44 3131 61 3125 46 3126 60 574 62 40 41 125 125 59 3132 3133 61 2002 46 3114 40 3134 46 3135 41 59 3133 46 3136 40 41 46 3137 40 41 59 3133 91 362 93 46 3138 40 41 46 3136 40 41 46 3139 40 362 41 59 3133 91 362 93 46 3140 40 41 46 3136 40 41 46 3139 40 1503 41 59 3133 91 362 93 46 3140 40 41 46 3136 40 41 46 3139 40 1500 41 59 40 40 3141 41 3133 91 362 93 41 46 3142 46 3136 40 41 46 3139 40 1500 41 59 3133 91 362 93 46 3138 40 41 46 3136 40 41 46 3139 40 362 41 59 3133 91 362 93 46 3138 40 41 46 3136 40 41 46 3139 40 362 41 59 3133 91 362 93 46 3138 40 41 46 3136 40 41 46 3139 40 362 41 59 125 91 2005 93 777 865 3143 40 41 123 3144 3145 61 744 2001 40 41 123 3146 61 3147 46 3148 60 3149 62 40 41 44 3150 61 1500 44 3151 61 40 842 41 3152 46 3153 44 3154 61 744 574 91 2001 46 3155 93 44 3156 61 744 3157 91 93 123 744 3157 40 41 123 3158 61 3159 46 3160 125 125 44 3161 61 1500 44 3162 61 1500 44 3163 61 1500 44 3164 61 3147 46 3148 60 3165 62 40 41 44 125 59 3166 46 3167 40 3145 46 3168 60 3169 62 40 41 41 59 3166 46 3167 40 3145 46 3168 60 3170 62 40 41 41 59 3145 46 3171 61 744 3172 91 93 123 744 3170 40 41 125 59 3166 46 3167 40 3145 46 3168 60 3169 62 40 41 41 59 3166 46 3173 40 3145 46 3168 60 3170 62 40 41 41 59 125 91 2005 93 777 865 3174 40 41 123 3175 3176 61 744 2001 40 41 123 3177 61 3178 46 3179 60 3180 62 40 41 44 3181 61 1500 44 3182 61 40 842 41 3183 46 3184 44 3185 61 744 574 91 2001 46 3186 93 44 3187 61 744 3188 91 93 123 744 3188 40 41 123 3189 61 3190 46 3191 125 125 44 3192 61 1500 44 3193 61 1500 44 3194 61 1500 44 3195 61 744 91 93 123 744 3196 123 3197 61 3178 46 3179 60 574 62 40 41 44 3198 61 3178 46 3179 60 574 62 40 41 125 125 125 59 3176 46 3199 40 3200 46 3201 41 46 3202 40 41 46 3203 40 3204 46 3205 41 59 3176 46 3206 61 3207 46 3208 60 574 62 40 41 59 3176 46 3199 40 3200 46 3201 41 46 3202 40 41 46 3203 40 3204 46 3209 41 59 3175 3210 61 3211 46 3212 40 41 59 3175 3213 61 3211 46 3212 40 41 59 3175 3214 61 3215 46 3216 40 41 59 860 3175 3217 61 3210 46 3218 40 362 41 59 860 3175 3219 61 3213 46 3218 40 362 41 59 3175 3220 61 3210 46 3221 40 41 59 3175 3222 61 3213 46 3221 40 41 59 3175 3223 61 3224 46 3225 40 1502 44 744 3226 91 93 123 3220 46 3227 40 41 46 3228 44 3222 46 3227 40 41 46 3228 125 41 59 3210 46 3221 40 3223 44 3220 46 3229 40 41 41 59 3175 3230 61 3213 46 3221 40 3223 44 3222 46 3229 40 41 41 59 330 3175 3231 61 3232 46 3233 46 3234 40 1503 44 3230 46 3235 41 59 3175 3236 61 3214 46 3237 40 3231 44 40 41 328 744 3238 40 744 3239 40 41 41 41 59 3236 46 3240 60 3239 62 40 41 46 3241 61 1505 42 3232 46 3233 46 3242 59 3214 46 3243 40 41 59 330 3176 61 3210 46 3244 40 3214 44 744 3245 91 93 123 744 3245 40 41 123 3246 61 3232 46 3233 46 3247 44 3235 61 3230 46 3235 44 3248 61 744 3249 40 3250 46 3251 44 1502 41 125 125 44 3230 46 3235 41 59 330 3175 3252 61 744 3253 40 3214 44 3176 44 3200 46 3201 46 3254 41 59 3255 46 3256 40 3210 46 3257 40 3252 41 41 59 3255 46 3256 40 3213 46 3257 40 3252 41 41 59 3255 46 3256 40 3252 46 3258 41 59 3176 46 3259 61 3252 46 3260 40 41 59 3176 46 3199 40 3200 46 3201 41 46 3202 40 41 46 3203 40 3204 46 3209 41 59 330 3176 46 3259 91 1500 93 61 744 3261 40 41 123 3262 61 3213 46 3263 40 41 46 3264 40 41 46 3224 46 3206 44 3265 61 3176 46 3259 91 1500 93 46 3265 46 3266 40 41 125 59 3176 46 3199 40 3200 46 3201 41 46 3202 40 41 46 3203 40 3204 46 3267 41 59 125 91 2005 93 777 865 3268 40 41 123 3269 3270 61 3271 46 3272 40 41 59 3269 3273 61 3274 46 3275 46 3276 40 3270 41 59 3269 3277 61 744 2001 40 41 123 3278 61 3279 46 3280 60 3281 62 40 41 44 3282 61 1506 44 3283 61 40 842 41 3284 46 3285 44 3286 61 3279 46 3280 60 574 62 40 41 44 3287 61 744 3288 91 93 123 744 3288 40 41 123 3289 61 3290 46 3291 125 125 44 3292 61 1500 44 3293 61 3273 43 1501 44 3294 61 1500 44 3295 61 744 3296 91 93 123 744 3296 40 41 123 3297 61 3279 46 3280 60 574 62 40 41 44 3298 61 3279 46 3280 60 574 62 40 41 125 44 744 3296 40 41 123 3299 61 3279 46 3280 60 574 62 40 41 44 3300 61 744 574 91 1501 93 125 125 125 59 330 3269 3301 61 3274 46 3302 46 3303 40 1503 44 3277 46 3304 41 59 3269 3305 61 3270 46 3306 40 3301 44 40 41 328 744 3307 40 744 3308 40 41 41 41 59 3305 46 3309 60 3308 62 40 41 46 3310 61 3277 46 3311 59 3277 46 3312 40 3313 46 3314 44 3270 44 744 3315 40 41 41 46 3316 40 41 46 3317 40 3318 46 3319 41 59 3305 46 3309 60 3308 62 40 41 46 3310 61 1500 59 3277 46 3320 61 1502 59 3277 46 3312 40 3313 46 3314 44 3270 44 744 3315 40 41 41 46 3316 40 41 46 3317 40 3318 46 3321 41 59 3269 3322 61 3323 46 3324 40 41 59 3269 3325 61 3323 46 3324 40 41 59 860 3269 3326 61 3322 46 3327 40 362 41 59 860 3269 3328 61 3325 46 3327 40 362 41 59 3269 3329 61 3322 46 3330 40 41 59 3269 3331 61 3325 46 3330 40 41 59 3269 3332 61 3333 46 3334 40 1502 44 744 3335 91 93 123 3329 46 3336 40 41 46 3337 44 3331 46 3336 40 41 46 3337 125 41 59 3322 46 3330 40 3332 44 3329 46 3338 40 41 41 59 3269 3339 61 3325 46 3330 40 3332 44 3331 46 3338 40 41 41 59 330 3270 61 3271 46 3272 40 41 59 3301 61 3274 46 3302 46 3303 40 1503 44 3339 46 3340 41 59 3305 61 3270 46 3306 40 3301 44 40 41 328 744 3307 40 744 3308 40 41 41 41 59 3305 46 3309 60 3308 62 40 41 46 3310 61 1505 42 3274 46 3302 46 3341 59 330 3270 46 3342 40 41 59 3277 61 3322 46 3343 40 3270 44 744 3344 91 93 123 744 3344 40 41 123 3345 61 3274 46 3302 46 3346 44 3340 61 3339 46 3340 44 3347 61 744 3348 40 3349 46 3350 44 1502 41 125 125 44 3339 46 3340 41 59 330 3269 3351 61 744 3352 40 3270 44 3277 44 3313 46 3314 46 3353 41 59 3354 46 3355 40 3322 46 3356 40 3351 41 41 59 3354 46 3355 40 3325 46 3356 40 3351 41 41 59 3354 46 3355 40 3351 46 3357 41 59 3277 46 3358 61 3351 46 3359 40 41 59 3277 46 3312 40 3313 46 3314 44 3270 44 744 3315 40 41 41 46 3316 40 41 46 3317 40 3318 46 3360 41 59 125 91 2005 93 777 865 3361 40 41 123 3362 3363 61 3364 46 3365 40 362 41 59 3362 3366 61 744 2001 40 41 59 40 40 3367 41 3366 41 46 3368 40 744 3369 40 744 3370 40 3363 41 41 41 59 3362 3371 61 744 3372 40 41 123 3373 61 1510 125 59 3362 3374 61 3366 46 3375 40 3371 41 59 3376 46 3377 40 3378 46 3379 44 3374 41 59 125 125 ,"{'AvgLine': 43, 'CountLine': 1285, 'CountStmt': 487, 'MaxNesting': 2, 'AvgLineCode': 30, 'AvgEssential': 1, 'AvgLineBlank': 7, 'CountStmtExe': 408, 'MaxEssential': 1, 'SumEssential': 49, 'AvgCyclomatic': 1, 'CountLineCode': 873, 'CountStmtDecl': 202, 'MaxCyclomatic': 5, 'SumCyclomatic': 61, 'AvgLineComment': 6, 'CountClassBase': 1, 'CountLineBlank': 245, 'CountSemicolon': 460, 'CountDeclMethod': 28, 'CountLineCodeExe': 643, 'CountLineComment': 186, 'CountClassCoupled': 52, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 269, 'CountLineInactive': 0, 'CountDeclMethodAll': 34, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.21', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 61, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 28, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 5, 'PercentLackOfCohesion': 67, 'SumCyclomaticModified': 61, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 28, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 44, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 67, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79992,C#,"    public sealed class Murmur128 : HashAlgorithm
    {
        private const ulong c1 = 0x87c37b91114253d5;
        private const ulong c2 = 0x4cf5ad432745937f;
        private const int r1 = 31;
        private const int r2 = 33;
        private const uint m = 5;
        private const uint n1 = 0x52dce729;
        private const uint n2 = 0x38495ab5;

        private readonly uint seed;
        private int length;

        public override int HashSize => 128;

        private ulong H1 { get; set; }
        private ulong H2 { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref=""Murmur128""/> class with the specified seed.
        /// </summary>
        /// <param name=""seed"">The seed to be used.</param>
        public Murmur128(uint seed)
        {
            this.seed = seed;
            Initialize();
        }

        protected override void HashCore(byte[] array, int ibStart, int cbSize)
        {
            length += cbSize;
            int remainder = cbSize & 15;
            int alignedLength = ibStart + (cbSize - remainder);
            for (int i = ibStart; i < alignedLength; i += 16)
            {
                ulong k1 = BinaryPrimitives.ReadUInt64LittleEndian(array.AsSpan(i));
                k1 *= c1;
                k1 = BitOperations.RotateLeft(k1, r1);
                k1 *= c2;
                H1 ^= k1;
                H1 = BitOperations.RotateLeft(H1, 27);
                H1 += H2;
                H1 = H1 * m + n1;

                ulong k2 = BinaryPrimitives.ReadUInt64LittleEndian(array.AsSpan(i + 8));
                k2 *= c2;
                k2 = BitOperations.RotateLeft(k2, r2);
                k2 *= c1;
                H2 ^= k2;
                H2 = BitOperations.RotateLeft(H2, 31);
                H2 += H1;
                H2 = H2 * m + n2;
            }

            if (remainder > 0)
            {
                ulong remainingBytesL = 0, remainingBytesH = 0;
                switch (remainder)
                {
                    case 15: remainingBytesH ^= (ulong)array[alignedLength + 14] << 48; goto case 14;
                    case 14: remainingBytesH ^= (ulong)array[alignedLength + 13] << 40; goto case 13;
                    case 13: remainingBytesH ^= (ulong)array[alignedLength + 12] << 32; goto case 12;
                    case 12: remainingBytesH ^= (ulong)array[alignedLength + 11] << 24; goto case 11;
                    case 11: remainingBytesH ^= (ulong)array[alignedLength + 10] << 16; goto case 10;
                    case 10: remainingBytesH ^= (ulong)array[alignedLength + 9] << 8; goto case 9;
                    case 9: remainingBytesH ^= (ulong)array[alignedLength + 8] << 0; goto case 8;
                    case 8: remainingBytesL ^= (ulong)array[alignedLength + 7] << 56; goto case 7;
                    case 7: remainingBytesL ^= (ulong)array[alignedLength + 6] << 48; goto case 6;
                    case 6: remainingBytesL ^= (ulong)array[alignedLength + 5] << 40; goto case 5;
                    case 5: remainingBytesL ^= (ulong)array[alignedLength + 4] << 32; goto case 4;
                    case 4: remainingBytesL ^= (ulong)array[alignedLength + 3] << 24; goto case 3;
                    case 3: remainingBytesL ^= (ulong)array[alignedLength + 2] << 16; goto case 2;
                    case 2: remainingBytesL ^= (ulong)array[alignedLength + 1] << 8; goto case 1;
                    case 1: remainingBytesL ^= (ulong)array[alignedLength] << 0; break;
                }

                H2 ^= BitOperations.RotateLeft(remainingBytesH * c2, r2) * c1;
                H1 ^= BitOperations.RotateLeft(remainingBytesL * c1, r1) * c2;
            }
        }

        protected override byte[] HashFinal()
        {
            ulong len = (ulong)length;
            H1 ^= len; H2 ^= len;

            H1 += H2;
            H2 += H1;

            H1 = FMix(H1);
            H2 = FMix(H2);

            H1 += H2;
            H2 += H1;

            var buffer = new byte[sizeof(ulong) * 2];
            Span<byte> bytes = buffer;

            BinaryPrimitives.WriteUInt64LittleEndian(bytes, H1);
            BinaryPrimitives.WriteUInt64LittleEndian(bytes[sizeof(ulong)..], H2);

            return buffer;
        }

        public override void Initialize()
        {
            H1 = H2 = seed;
            length = 0;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static ulong FMix(ulong h)
        {
            h = (h ^ (h >> 33)) * 0xff51afd7ed558ccd;
            h = (h ^ (h >> 33)) * 0xc4ceb9fe1a85ec53;

            return (h ^ (h >> 33));
        }
    }",1,777 798 587 2000 58 2001 123 773 601 848 2002 61 1520 59 773 601 848 2003 61 1520 59 773 601 704 2004 61 1503 59 773 601 704 2005 61 1503 59 773 601 842 2006 61 1502 59 773 601 842 2007 61 1511 59 773 601 842 2008 61 1510 59 773 780 842 2009 59 773 704 2010 59 777 763 704 2011 328 1504 59 773 848 2012 123 2013 59 2014 59 125 773 848 2015 123 2016 59 2017 59 125 331 777 2000 40 842 2009 41 123 823 46 2009 61 2009 59 2018 40 41 59 125 775 763 865 2019 40 574 91 93 2020 44 704 2021 44 704 2022 41 123 2010 348 2022 59 704 2023 61 2022 38 1503 59 704 2024 61 2021 43 40 2022 45 2023 41 59 664 40 704 2025 61 2021 59 2025 60 2024 59 2025 348 1503 41 123 848 2026 61 2027 46 2028 40 2020 46 2029 40 2025 41 41 59 2026 363 2002 59 2026 61 2030 46 2031 40 2026 44 2004 41 59 2026 363 2003 59 2012 366 2026 59 2012 61 2030 46 2031 40 2012 44 1503 41 59 2012 348 2015 59 2012 61 2012 42 2006 43 2007 59 848 2032 61 2027 46 2028 40 2020 46 2029 40 2025 43 1502 41 41 59 2032 363 2003 59 2032 61 2030 46 2031 40 2032 44 2005 41 59 2032 363 2002 59 2015 366 2032 59 2015 61 2030 46 2031 40 2015 44 1503 41 59 2015 348 2012 59 2015 61 2015 42 2006 43 2008 59 125 688 40 2023 62 1500 41 123 848 2033 61 1500 44 2034 61 1500 59 819 40 2023 41 123 579 1503 58 2034 366 40 848 41 2020 91 2024 43 1503 93 332 1503 59 677 579 1503 59 579 1503 58 2034 366 40 848 41 2020 91 2024 43 1503 93 332 1503 59 677 579 1503 59 579 1503 58 2034 366 40 848 41 2020 91 2024 43 1503 93 332 1503 59 677 579 1503 59 579 1503 58 2034 366 40 848 41 2020 91 2024 43 1503 93 332 1503 59 677 579 1503 59 579 1503 58 2034 366 40 848 41 2020 91 2024 43 1502 93 332 1503 59 677 579 1502 59 579 1502 58 2034 366 40 848 41 2020 91 2024 43 1502 93 332 1502 59 677 579 1502 59 579 1502 58 2034 366 40 848 41 2020 91 2024 43 1502 93 332 1500 59 677 579 1502 59 579 1502 58 2033 366 40 848 41 2020 91 2024 43 1502 93 332 1503 59 677 579 1502 59 579 1502 58 2033 366 40 848 41 2020 91 2024 43 1502 93 332 1503 59 677 579 1502 59 579 1502 58 2033 366 40 848 41 2020 91 2024 43 1502 93 332 1503 59 677 579 1502 59 579 1502 58 2033 366 40 848 41 2020 91 2024 43 1502 93 332 1503 59 677 579 1502 59 579 1502 58 2033 366 40 848 41 2020 91 2024 43 1502 93 332 1503 59 677 579 1502 59 579 1502 58 2033 366 40 848 41 2020 91 2024 43 1502 93 332 1503 59 677 579 1502 59 579 1502 58 2033 366 40 848 41 2020 91 2024 43 1501 93 332 1502 59 677 579 1501 59 579 1501 58 2033 366 40 848 41 2020 91 2024 93 332 1500 59 572 59 125 2015 366 2035 46 2036 40 2034 42 2003 44 2005 41 42 2002 59 2012 366 2035 46 2036 40 2033 42 2002 44 2004 41 42 2003 59 125 125 775 763 574 91 93 2037 40 41 123 848 2038 61 40 848 41 2010 59 2012 366 2038 59 2015 366 2038 59 2012 348 2015 59 2015 348 2012 59 2012 61 2039 40 2012 41 59 2015 61 2039 40 2015 41 59 2012 348 2015 59 2015 348 2012 59 2040 2041 61 744 574 91 805 40 848 41 42 1502 93 59 2042 60 574 62 2043 61 2041 59 2044 46 2045 40 2043 44 2012 41 59 2044 46 2045 40 2043 91 805 40 848 41 46 46 93 44 2015 41 59 792 2041 59 125 777 763 865 2046 40 41 123 2012 61 2015 61 2009 59 2010 61 1500 59 125 91 2047 40 2048 46 2049 41 93 773 809 848 2050 40 848 2051 41 123 2051 61 40 2051 94 40 2051 355 1503 41 41 42 1521 59 2051 61 40 2051 94 40 2051 355 1503 41 41 42 1521 59 792 40 2051 94 40 2051 355 1503 41 41 59 125 125 ,"{'AvgLine': 9, 'CountLine': 119, 'CountStmt': 100, 'MaxNesting': 2, 'AvgLineCode': 8, 'AvgEssential': 2, 'AvgLineBlank': 1, 'CountStmtExe': 71, 'MaxEssential': 17, 'SumEssential': 21, 'AvgCyclomatic': 2, 'CountLineCode': 97, 'CountStmtDecl': 31, 'MaxCyclomatic': 18, 'SumCyclomatic': 22, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 18, 'CountSemicolon': 89, 'CountDeclMethod': 10, 'CountLineCodeExe': 60, 'CountLineComment': 4, 'CountClassCoupled': 6, 'CountClassDerived': 0, 'CountDeclProperty': 3, 'CountLineCodeDecl': 27, 'CountLineInactive': 0, 'CountDeclMethodAll': 16, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.04', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 18, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 2, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 54, 'SumCyclomaticModified': 8, 'CountDeclClassVariable': 7, 'CountDeclMethodPrivate': 5, 'CountDeclInstanceMethod': 9, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 2, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 41, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79829,C#,"    public class ContractManifest : IInteroperable
    {
        /// <summary>
        /// The maximum length of a manifest.
        /// </summary>
        public const int MaxLength = ushort.MaxValue;

        /// <summary>
        /// The name of the contract.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// The groups of the contract.
        /// </summary>
        public ContractGroup[] Groups { get; set; }

        /// <summary>
        /// Indicates which standards the contract supports. It can be a list of NEPs.
        /// </summary>
        public string[] SupportedStandards { get; set; }

        /// <summary>
        /// The ABI of the contract.
        /// </summary>
        public ContractAbi Abi { get; set; }

        /// <summary>
        /// The permissions of the contract.
        /// </summary>
        public ContractPermission[] Permissions { get; set; }

        /// <summary>
        /// The trusted contracts and groups of the contract.
        /// If a contract is trusted, the user interface will not give any warnings when called by the contract.
        /// </summary>
        public WildcardContainer<ContractPermissionDescriptor> Trusts { get; set; }

        /// <summary>
        /// Custom user data.
        /// </summary>
        public JObject Extra { get; set; }

        void IInteroperable.FromStackItem(StackItem stackItem)
        {
            Struct @struct = (Struct)stackItem;
            Name = @struct[0].GetString();
            Groups = ((Array)@struct[1]).Select(p => p.ToInteroperable<ContractGroup>()).ToArray();
            if (((Map)@struct[2]).Count != 0)
                throw new ArgumentException(null, nameof(stackItem));
            SupportedStandards = ((Array)@struct[3]).Select(p => p.GetString()).ToArray();
            Abi = @struct[4].ToInteroperable<ContractAbi>();
            Permissions = ((Array)@struct[5]).Select(p => p.ToInteroperable<ContractPermission>()).ToArray();
            Trusts = @struct[6] switch
            {
                Null => WildcardContainer<ContractPermissionDescriptor>.CreateWildcard(),
                Array array => WildcardContainer<ContractPermissionDescriptor>.Create(array.Select(p => new ContractPermissionDescriptor(p.GetSpan())).ToArray()),
                _ => throw new ArgumentException(null, nameof(stackItem))
            };
            Extra = JObject.Parse(@struct[7].GetSpan());
        }

        public StackItem ToStackItem(ReferenceCounter referenceCounter)
        {
            return new Struct(referenceCounter)
            {
                Name,
                new Array(referenceCounter, Groups.Select(p => p.ToStackItem(referenceCounter))),
                new Map(referenceCounter),
                new Array(referenceCounter, SupportedStandards.Select(p => (StackItem)p)),
                Abi.ToStackItem(referenceCounter),
                new Array(referenceCounter, Permissions.Select(p => p.ToStackItem(referenceCounter))),
                Trusts.IsWildcard ? StackItem.Null : new Array(referenceCounter, Trusts.Select(p => (StackItem)p.ToArray())),
                Extra is null ? ""null"" : Extra.ToByteArray(false)
            };
        }

        /// <summary>
        /// Converts the manifest from a JSON object.
        /// </summary>
        /// <param name=""json"">The manifest represented by a JSON object.</param>
        /// <returns>The converted manifest.</returns>
        public static ContractManifest FromJson(JObject json)
        {
            ContractManifest manifest = new()
            {
                Name = json[""name""].GetString(),
                Groups = ((JArray)json[""groups""]).Select(u => ContractGroup.FromJson(u)).ToArray(),
                SupportedStandards = ((JArray)json[""supportedstandards""]).Select(u => u.GetString()).ToArray(),
                Abi = ContractAbi.FromJson(json[""abi""]),
                Permissions = ((JArray)json[""permissions""]).Select(u => ContractPermission.FromJson(u)).ToArray(),
                Trusts = WildcardContainer<ContractPermissionDescriptor>.FromJson(json[""trusts""], u => ContractPermissionDescriptor.FromJson(u)),
                Extra = json[""extra""]
            };
            if (string.IsNullOrEmpty(manifest.Name))
                throw new FormatException();
            _ = manifest.Groups.ToDictionary(p => p.PubKey);
            if (json[""features""].Properties.Count != 0)
                throw new FormatException();
            if (manifest.SupportedStandards.Any(p => string.IsNullOrEmpty(p)))
                throw new FormatException();
            _ = manifest.SupportedStandards.ToDictionary(p => p);
            _ = manifest.Permissions.ToDictionary(p => p.Contract);
            _ = manifest.Trusts.ToDictionary(p => p);
            return manifest;
        }

        /// <summary>
        /// Parse the manifest from a byte array containing JSON data.
        /// </summary>
        /// <param name=""json"">The byte array containing JSON data.</param>
        /// <returns>The parsed manifest.</returns>
        public static ContractManifest Parse(ReadOnlySpan<byte> json)
        {
            if (json.Length > MaxLength) throw new ArgumentException(null, nameof(json));
            return FromJson(JObject.Parse(json));
        }

        /// <summary>
        /// Parse the manifest from a JSON <see cref=""string""/>.
        /// </summary>
        /// <param name=""json"">The JSON <see cref=""string""/>.</param>
        /// <returns>The parsed manifest.</returns>
        public static ContractManifest Parse(string json) => Parse(Utility.StrictUTF8.GetBytes(json));

        /// <summary>
        /// Converts the manifest to a JSON object.
        /// </summary>
        /// <returns>The manifest represented by a JSON object.</returns>
        public JObject ToJson()
        {
            return new JObject
            {
                [""name""] = Name,
                [""groups""] = Groups.Select(u => u.ToJson()).ToArray(),
                [""features""] = new JObject(),
                [""supportedstandards""] = SupportedStandards.Select(u => new JString(u)).ToArray(),
                [""abi""] = Abi.ToJson(),
                [""permissions""] = Permissions.Select(p => p.ToJson()).ToArray(),
                [""trusts""] = Trusts.ToJson(p => p.ToJson()),
                [""extra""] = Extra
            };
        }

        /// <summary>
        /// Determines whether the manifest is valid.
        /// </summary>
        /// <param name=""hash"">The hash of the contract.</param>
        /// <returns><see langword=""true""/> if the manifest is valid; otherwise, <see langword=""false""/>.</returns>
        public bool IsValid(UInt160 hash)
        {
            return Groups.All(u => u.IsValid(hash));
        }
    }",1,777 587 2000 58 2001 123 331 777 601 704 2002 61 859 46 2003 59 331 777 815 2004 123 2005 59 2006 59 125 331 777 2007 91 93 2008 123 2009 59 2010 59 125 331 777 815 91 93 2011 123 2012 59 2013 59 125 331 777 2014 2015 123 2016 59 2017 59 125 331 777 2018 91 93 2019 123 2020 59 2021 59 125 331 777 2022 60 2023 62 2024 123 2025 59 2026 59 125 331 777 2027 2028 123 2029 59 2030 59 125 865 2001 46 2031 40 2032 2033 41 123 2034 64 816 61 40 2034 41 2033 59 2004 61 64 816 91 1500 93 46 2035 40 41 59 2008 61 40 40 2036 41 64 816 91 1501 93 41 46 2037 40 2038 328 2038 46 2039 60 2007 62 40 41 41 46 2040 40 41 59 688 40 40 40 2041 41 64 816 91 1502 93 41 46 2042 340 1500 41 825 744 2043 40 752 44 2044 40 2033 41 41 59 2011 61 40 40 2036 41 64 816 91 1502 93 41 46 2037 40 2038 328 2038 46 2035 40 41 41 46 2040 40 41 59 2015 61 64 816 91 1502 93 46 2039 60 2014 62 40 41 59 2019 61 40 40 2036 41 64 816 91 1502 93 41 46 2037 40 2038 328 2038 46 2039 60 2018 62 40 41 41 46 2040 40 41 59 2024 61 64 816 91 1502 93 819 123 2045 328 2022 60 2023 62 46 2046 40 41 44 2036 2047 328 2022 60 2023 62 46 2048 40 2047 46 2037 40 2038 328 744 2023 40 2038 46 2049 40 41 41 41 46 2040 40 41 41 44 2050 328 825 744 2043 40 752 44 2044 40 2033 41 41 125 59 2028 61 2027 46 2051 40 64 816 91 1502 93 46 2052 40 41 41 59 125 777 2032 2053 40 2054 2055 41 123 792 744 2056 40 2055 41 123 2004 44 744 2057 40 2055 44 2008 46 2058 40 2059 328 2059 46 2053 40 2055 41 41 41 44 744 2060 40 2055 41 44 744 2057 40 2055 44 2011 46 2058 40 2059 328 40 2032 41 2059 41 41 44 2015 46 2053 40 2055 41 44 744 2057 40 2055 44 2019 46 2058 40 2059 328 2059 46 2053 40 2055 41 41 41 44 2024 46 2061 63 2032 46 2062 58 744 2057 40 2055 44 2024 46 2058 40 2059 328 40 2032 41 2059 46 2063 40 41 41 41 44 2028 712 752 63 362 58 2028 46 2064 40 655 41 125 59 125 331 777 809 2000 2065 40 2027 2066 41 123 2000 2067 61 744 40 41 123 2004 61 2066 91 362 93 46 2068 40 41 44 2008 61 40 40 2069 41 2066 91 362 93 41 46 2070 40 2071 328 2007 46 2065 40 2071 41 41 46 2072 40 41 44 2011 61 40 40 2069 41 2066 91 362 93 41 46 2070 40 2071 328 2071 46 2068 40 41 41 46 2072 40 41 44 2015 61 2014 46 2065 40 2066 91 362 93 41 44 2019 61 40 40 2069 41 2066 91 362 93 41 46 2070 40 2071 328 2018 46 2065 40 2071 41 41 46 2072 40 41 44 2024 61 2022 60 2023 62 46 2065 40 2066 91 362 93 44 2071 328 2023 46 2065 40 2071 41 41 44 2028 61 2066 91 362 93 125 59 688 40 815 46 2073 40 2067 46 2004 41 41 825 744 2074 40 41 59 2075 61 2067 46 2008 46 2076 40 2077 328 2077 46 2078 41 59 688 40 2066 91 362 93 46 2079 46 2080 340 1500 41 825 744 2074 40 41 59 688 40 2067 46 2011 46 2081 40 2077 328 815 46 2073 40 2077 41 41 41 825 744 2074 40 41 59 2075 61 2067 46 2011 46 2076 40 2077 328 2077 41 59 2075 61 2067 46 2019 46 2076 40 2077 328 2077 46 2082 41 59 2075 61 2067 46 2024 46 2076 40 2077 328 2077 41 59 792 2067 59 125 331 777 809 2000 2083 40 2084 60 574 62 2066 41 123 688 40 2066 46 2085 62 2002 41 825 744 2086 40 752 44 2087 40 2066 41 41 59 792 2065 40 2027 46 2083 40 2066 41 41 59 125 331 777 809 2000 2083 40 815 2066 41 328 2083 40 2088 46 2089 46 2090 40 2066 41 41 59 331 777 2027 2091 40 41 123 792 744 2027 123 91 362 93 61 2004 44 91 362 93 61 2008 46 2092 40 2093 328 2093 46 2091 40 41 41 46 2094 40 41 44 91 362 93 61 744 2027 40 41 44 91 362 93 61 2011 46 2092 40 2093 328 744 2095 40 2093 41 41 46 2094 40 41 44 91 362 93 61 2015 46 2091 40 41 44 91 362 93 61 2019 46 2092 40 2096 328 2096 46 2091 40 41 41 46 2094 40 41 44 91 362 93 61 2024 46 2091 40 2096 328 2096 46 2091 40 41 41 44 91 362 93 61 2028 125 59 125 331 777 569 2097 40 2098 2099 41 123 792 2008 46 2100 40 2101 328 2101 46 2097 40 2099 41 41 59 125 125 ,"{'AvgLine': 3, 'CountLine': 154, 'CountStmt': 59, 'MaxNesting': 1, 'AvgLineCode': 3, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 27, 'MaxEssential': 4, 'SumEssential': 32, 'AvgCyclomatic': 1, 'CountLineCode': 91, 'CountStmtDecl': 32, 'MaxCyclomatic': 4, 'SumCyclomatic': 36, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 14, 'CountSemicolon': 39, 'CountDeclMethod': 21, 'CountLineCodeExe': 59, 'CountLineComment': 49, 'CountClassCoupled': 23, 'CountClassDerived': 0, 'CountDeclProperty': 7, 'CountLineCodeDecl': 17, 'CountLineInactive': 0, 'CountDeclMethodAll': 27, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.54', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 4, 'SumCyclomaticStrict': 36, 'CountDeclClassMethod': 3, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 20, 'CountDeclPropertyAuto': 7, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 44, 'SumCyclomaticModified': 36, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 18, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 19, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 34, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79899,C#,"    public class UT_Wallet
    {
        private static KeyPair glkey;
        private static string nep2Key;

        [ClassInitialize]
        public static void ClassInit(TestContext ctx)
        {
            glkey = UT_Crypto.GenerateCertainKey(32);
            nep2Key = glkey.Export(""pwd"", ProtocolSettings.Default.AddressVersion, 2, 1, 1);
        }

        [TestMethod]
        public void TestContains()
        {
            MyWallet wallet = new();
            Action action = () => wallet.Contains(UInt160.Zero);
            action.Should().NotThrow();
        }

        [TestMethod]
        public void TestCreateAccount1()
        {
            MyWallet wallet = new();
            wallet.CreateAccount(new byte[32]).Should().NotBeNull();
        }

        [TestMethod]
        public void TestCreateAccount2()
        {
            MyWallet wallet = new();
            Contract contract = Contract.Create(new ContractParameterType[] { ContractParameterType.Boolean }, new byte[] { 1 });
            WalletAccount account = wallet.CreateAccount(contract, UT_Crypto.GenerateCertainKey(32).PrivateKey);
            account.Should().NotBeNull();

            wallet = new();
            account = wallet.CreateAccount(contract, (byte[])(null));
            account.Should().NotBeNull();
        }

        [TestMethod]
        public void TestCreateAccount3()
        {
            MyWallet wallet = new();
            Contract contract = Contract.Create(new ContractParameterType[] { ContractParameterType.Boolean }, new byte[] { 1 });
            wallet.CreateAccount(contract, glkey).Should().NotBeNull();
        }

        [TestMethod]
        public void TestCreateAccount4()
        {
            MyWallet wallet = new();
            wallet.CreateAccount(UInt160.Zero).Should().NotBeNull();
        }

        [TestMethod]
        public void TestGetName()
        {
            MyWallet wallet = new();
            wallet.Name.Should().Be(""MyWallet"");
        }

        [TestMethod]
        public void TestGetVersion()
        {
            MyWallet wallet = new();
            wallet.Version.Should().Be(Version.Parse(""0.0.1""));
        }

        [TestMethod]
        public void TestGetAccount1()
        {
            MyWallet wallet = new();
            wallet.CreateAccount(UInt160.Parse(""0x7efe7ee0d3e349e085388c351955e5172605de66""));
            WalletAccount account = wallet.GetAccount(ECCurve.Secp256r1.G);
            account.ScriptHash.Should().Be(UInt160.Parse(""0x7efe7ee0d3e349e085388c351955e5172605de66""));
        }

        [TestMethod]
        public void TestGetAccount2()
        {
            MyWallet wallet = new();
            Action action = () => wallet.GetAccount(UInt160.Zero);
            action.Should().NotThrow();
        }

        [TestMethod]
        public void TestGetAccounts()
        {
            MyWallet wallet = new();
            Action action = () => wallet.GetAccounts();
            action.Should().NotThrow();
        }

        [TestMethod]
        public void TestGetAvailable()
        {
            MyWallet wallet = new();
            Contract contract = Contract.Create(new ContractParameterType[] { ContractParameterType.Boolean }, new byte[] { 1 });
            WalletAccount account = wallet.CreateAccount(contract, glkey.PrivateKey);
            account.Lock = false;

            // Fake balance
            var snapshot = TestBlockchain.GetTestSnapshot();
            var key = NativeContract.GAS.CreateStorageKey(20, account.ScriptHash);
            var entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));
            entry.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;
            snapshot.Commit();

            wallet.GetAvailable(snapshot, NativeContract.GAS.Hash).Should().Be(new BigDecimal(new BigInteger(1000000000000M), 8));

            entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));
            entry.GetInteroperable<AccountState>().Balance = 0;
            snapshot.Commit();
        }

        [TestMethod]
        public void TestGetBalance()
        {
            MyWallet wallet = new();
            Contract contract = Contract.Create(new ContractParameterType[] { ContractParameterType.Boolean }, new byte[] { 1 });
            WalletAccount account = wallet.CreateAccount(contract, glkey.PrivateKey);
            account.Lock = false;

            // Fake balance
            var snapshot = TestBlockchain.GetTestSnapshot();
            var key = NativeContract.GAS.CreateStorageKey(20, account.ScriptHash);
            var entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));
            entry.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;
            snapshot.Commit();

            wallet.GetBalance(snapshot, UInt160.Zero, new UInt160[] { account.ScriptHash }).Should().Be(new BigDecimal(BigInteger.Zero, 0));
            wallet.GetBalance(snapshot, NativeContract.GAS.Hash, new UInt160[] { account.ScriptHash }).Should().Be(new BigDecimal(new BigInteger(1000000000000M), 8));

            entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));
            entry.GetInteroperable<AccountState>().Balance = 0;
            snapshot.Commit();
        }

        [TestMethod]
        public void TestGetPrivateKeyFromNEP2()
        {
            Action action = () => Wallet.GetPrivateKeyFromNEP2(null, null, ProtocolSettings.Default.AddressVersion, 2, 1, 1);
            action.Should().Throw<ArgumentNullException>();

            action = () => Wallet.GetPrivateKeyFromNEP2(""TestGetPrivateKeyFromNEP2"", null, ProtocolSettings.Default.AddressVersion, 2, 1, 1);
            action.Should().Throw<ArgumentNullException>();

            action = () => Wallet.GetPrivateKeyFromNEP2(""3vQB7B6MrGQZaxCuFg4oh"", ""TestGetPrivateKeyFromNEP2"", ProtocolSettings.Default.AddressVersion, 2, 1, 1);
            action.Should().Throw<FormatException>();

            action = () => Wallet.GetPrivateKeyFromNEP2(nep2Key, ""Test"", ProtocolSettings.Default.AddressVersion, 2, 1, 1);
            action.Should().Throw<FormatException>();

            Wallet.GetPrivateKeyFromNEP2(nep2Key, ""pwd"", ProtocolSettings.Default.AddressVersion, 2, 1, 1).Should().BeEquivalentTo(new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 });
        }

        [TestMethod]
        public void TestGetPrivateKeyFromWIF()
        {
            Action action = () => Wallet.GetPrivateKeyFromWIF(null);
            action.Should().Throw<ArgumentNullException>();

            action = () => Wallet.GetPrivateKeyFromWIF(""3vQB7B6MrGQZaxCuFg4oh"");
            action.Should().Throw<FormatException>();

            Wallet.GetPrivateKeyFromWIF(""L3tgppXLgdaeqSGSFw1Go3skBiy8vQAM7YMXvTHsKQtE16PBncSU"").Should().BeEquivalentTo(new byte[] { 199, 19, 77, 111, 216, 231, 61, 129, 158, 130, 117, 92, 100, 201, 55, 136, 216, 219, 9, 97, 146, 158, 2, 90, 83, 54, 60, 76, 192, 42, 105, 98 });
        }

        [TestMethod]
        public void TestImport1()
        {
            MyWallet wallet = new();
            wallet.Import(""L3tgppXLgdaeqSGSFw1Go3skBiy8vQAM7YMXvTHsKQtE16PBncSU"").Should().NotBeNull();
        }

        [TestMethod]
        public void TestImport2()
        {
            MyWallet wallet = new();
            wallet.Import(nep2Key, ""pwd"", 2, 1, 1).Should().NotBeNull();
        }

        [TestMethod]
        public void TestMakeTransaction1()
        {
            var snapshot = TestBlockchain.GetTestSnapshot();
            MyWallet wallet = new();
            Contract contract = Contract.Create(new ContractParameterType[] { ContractParameterType.Boolean }, new byte[] { 1 });
            WalletAccount account = wallet.CreateAccount(contract, glkey.PrivateKey);
            account.Lock = false;

            Action action = () => wallet.MakeTransaction(snapshot, new TransferOutput[]
            {
                new TransferOutput()
                {
                     AssetId = NativeContract.GAS.Hash,
                     ScriptHash = account.ScriptHash,
                     Value = new BigDecimal(BigInteger.One,8),
                     Data = ""Dec 12th""
                }
            }, UInt160.Zero);
            action.Should().Throw<InvalidOperationException>();

            action = () => wallet.MakeTransaction(snapshot, new TransferOutput[]
            {
                new TransferOutput()
                {
                     AssetId = NativeContract.GAS.Hash,
                     ScriptHash = account.ScriptHash,
                     Value = new BigDecimal(BigInteger.One,8),
                     Data = ""Dec 12th""
                }
            }, account.ScriptHash);
            action.Should().Throw<InvalidOperationException>();

            action = () => wallet.MakeTransaction(snapshot, new TransferOutput[]
            {
                new TransferOutput()
                {
                     AssetId = UInt160.Zero,
                     ScriptHash = account.ScriptHash,
                     Value = new BigDecimal(BigInteger.One,8),
                     Data = ""Dec 12th""
                }
            }, account.ScriptHash);
            action.Should().Throw<InvalidOperationException>();

            // Fake balance
            var key = NativeContract.GAS.CreateStorageKey(20, account.ScriptHash);
            var entry1 = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));
            entry1.GetInteroperable<AccountState>().Balance = 10000 * NativeContract.GAS.Factor;

            key = NativeContract.NEO.CreateStorageKey(20, account.ScriptHash);
            var entry2 = snapshot.GetAndChange(key, () => new StorageItem(new NeoToken.NeoAccountState()));
            entry2.GetInteroperable<NeoToken.NeoAccountState>().Balance = 10000 * NativeContract.NEO.Factor;

            snapshot.Commit();

            var tx = wallet.MakeTransaction(snapshot, new TransferOutput[]
            {
                new TransferOutput()
                {
                     AssetId = NativeContract.GAS.Hash,
                     ScriptHash = account.ScriptHash,
                     Value = new BigDecimal(BigInteger.One,8)
                }
            });
            tx.Should().NotBeNull();

            tx = wallet.MakeTransaction(snapshot, new TransferOutput[]
            {
                new TransferOutput()
                {
                     AssetId = NativeContract.NEO.Hash,
                     ScriptHash = account.ScriptHash,
                     Value = new BigDecimal(BigInteger.One,8),
                     Data = ""Dec 12th""
                }
            });
            tx.Should().NotBeNull();

            entry1 = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));
            entry2 = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));
            entry1.GetInteroperable<AccountState>().Balance = 0;
            entry2.GetInteroperable<NeoToken.NeoAccountState>().Balance = 0;
            snapshot.Commit();
        }

        [TestMethod]
        public void TestMakeTransaction2()
        {
            var snapshot = TestBlockchain.GetTestSnapshot();
            MyWallet wallet = new();
            Action action = () => wallet.MakeTransaction(snapshot, Array.Empty<byte>(), null, null, Array.Empty<TransactionAttribute>());
            action.Should().Throw<InvalidOperationException>();

            Contract contract = Contract.Create(new ContractParameterType[] { ContractParameterType.Boolean }, new byte[] { 1 });
            WalletAccount account = wallet.CreateAccount(contract, glkey.PrivateKey);
            account.Lock = false;

            // Fake balance
            var key = NativeContract.GAS.CreateStorageKey(20, account.ScriptHash);
            var entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));
            entry.GetInteroperable<AccountState>().Balance = 1000000 * NativeContract.GAS.Factor;
            snapshot.Commit();

            var tx = wallet.MakeTransaction(snapshot, Array.Empty<byte>(), account.ScriptHash, new[]{ new Signer()
            {
                Account = account.ScriptHash,
                Scopes = WitnessScope.CalledByEntry
            }}, Array.Empty<TransactionAttribute>());

            tx.Should().NotBeNull();

            tx = wallet.MakeTransaction(snapshot, Array.Empty<byte>(), null, null, Array.Empty<TransactionAttribute>());
            tx.Should().NotBeNull();

            entry = snapshot.GetAndChange(key, () => new StorageItem(new AccountState()));
            entry.GetInteroperable<AccountState>().Balance = 0;
            snapshot.Commit();
        }

        [TestMethod]
        public void TestVerifyPassword()
        {
            MyWallet wallet = new();
            Action action = () => wallet.VerifyPassword(""Test"");
            action.Should().NotThrow();
        }
    }",1,777 587 2000 123 773 809 2001 2002 59 773 809 815 2003 59 91 2004 93 777 809 865 2005 40 2006 2007 41 123 2002 61 2008 46 2009 40 1503 41 59 2003 61 2002 46 2010 40 362 44 2011 46 2012 46 2013 44 1502 44 1501 44 1501 41 59 125 91 2014 93 777 865 2015 40 41 123 2016 2017 61 744 40 41 59 2018 2019 61 40 41 328 2017 46 2020 40 2021 46 2022 41 59 2019 46 2023 40 41 46 2024 40 41 59 125 91 2014 93 777 865 2025 40 41 123 2026 2027 61 744 40 41 59 2027 46 2028 40 744 574 91 1503 93 41 46 2029 40 41 46 2030 40 41 59 125 91 2014 93 777 865 2031 40 41 123 2032 2033 61 744 40 41 59 2034 2035 61 2034 46 2036 40 744 2037 91 93 123 2037 46 2038 125 44 744 574 91 93 123 1501 125 41 59 2039 2040 61 2033 46 2041 40 2035 44 2042 46 2043 40 1503 41 46 2044 41 59 2040 46 2045 40 41 46 2046 40 41 59 2033 61 744 40 41 59 2040 61 2033 46 2041 40 2035 44 40 574 91 93 41 40 752 41 41 59 2040 46 2045 40 41 46 2046 40 41 59 125 91 2014 93 777 865 2047 40 41 123 2048 2049 61 744 40 41 59 2050 2051 61 2050 46 2052 40 744 2053 91 93 123 2053 46 2054 125 44 744 574 91 93 123 1501 125 41 59 2049 46 2055 40 2051 44 2002 41 46 2056 40 41 46 2057 40 41 59 125 91 2014 93 777 865 2058 40 41 123 2059 2060 61 744 40 41 59 2060 46 2061 40 2062 46 2063 41 46 2064 40 41 46 2065 40 41 59 125 91 2014 93 777 865 2066 40 41 123 2067 2068 61 744 40 41 59 2068 46 2069 46 2070 40 41 46 2071 40 362 41 59 125 91 2014 93 777 865 2072 40 41 123 2073 2074 61 744 40 41 59 2074 46 2075 46 2076 40 41 46 2077 40 2075 46 2078 40 362 41 41 59 125 91 2014 93 777 865 2079 40 41 123 2080 2081 61 744 40 41 59 2081 46 2082 40 2083 46 2084 40 362 41 41 59 2085 2086 61 2081 46 2087 40 2088 46 2089 46 2090 41 59 2086 46 2091 46 2092 40 41 46 2093 40 2083 46 2084 40 362 41 41 59 125 91 2014 93 777 865 2094 40 41 123 2095 2096 61 744 40 41 59 2097 2098 61 40 41 328 2096 46 2099 40 2100 46 2101 41 59 2098 46 2102 40 41 46 2103 40 41 59 125 91 2014 93 777 865 2104 40 41 123 2105 2106 61 744 40 41 59 2107 2108 61 40 41 328 2106 46 2109 40 41 59 2108 46 2110 40 41 46 2111 40 41 59 125 91 2014 93 777 865 2112 40 41 123 2113 2114 61 744 40 41 59 2115 2116 61 2115 46 2117 40 744 2118 91 93 123 2118 46 2119 125 44 744 574 91 93 123 1501 125 41 59 2120 2121 61 2114 46 2122 40 2116 44 2002 46 2123 41 59 2121 46 2124 61 655 59 330 2125 2126 61 2127 46 2128 40 41 59 2125 2129 61 2130 46 2131 46 2132 40 1503 44 2121 46 2133 41 59 2125 2134 61 2126 46 2135 40 2129 44 40 41 328 744 2136 40 744 2137 40 41 41 41 59 2134 46 2138 60 2137 62 40 41 46 2139 61 1505 42 2130 46 2131 46 2140 59 2126 46 2141 40 41 59 2114 46 2142 40 2126 44 2130 46 2131 46 2143 41 46 2144 40 41 46 2145 40 744 2146 40 744 2147 40 1513 41 44 1502 41 41 59 2134 61 2126 46 2135 40 2129 44 40 41 328 744 2136 40 744 2137 40 41 41 41 59 2134 46 2138 60 2137 62 40 41 46 2139 61 1500 59 2126 46 2141 40 41 59 125 91 2014 93 777 865 2148 40 41 123 2149 2150 61 744 40 41 59 2151 2152 61 2151 46 2153 40 744 2154 91 93 123 2154 46 2155 125 44 744 574 91 93 123 1501 125 41 59 2156 2157 61 2150 46 2158 40 2152 44 2002 46 2159 41 59 2157 46 2160 61 655 59 330 2161 2162 61 2163 46 2164 40 41 59 2161 2165 61 2166 46 2167 46 2168 40 1503 44 2157 46 2169 41 59 2161 2170 61 2162 46 2171 40 2165 44 40 41 328 744 2172 40 744 2173 40 41 41 41 59 2170 46 2174 60 2173 62 40 41 46 2175 61 1505 42 2166 46 2167 46 2176 59 2162 46 2177 40 41 59 2150 46 2178 40 2162 44 2179 46 2180 44 744 2179 91 93 123 2157 46 2169 125 41 46 2181 40 41 46 2182 40 744 2183 40 2184 46 2180 44 1500 41 41 59 2150 46 2178 40 2162 44 2166 46 2167 46 2185 44 744 2179 91 93 123 2157 46 2169 125 41 46 2181 40 41 46 2182 40 744 2183 40 744 2184 40 1513 41 44 1502 41 41 59 2170 61 2162 46 2171 40 2165 44 40 41 328 744 2172 40 744 2173 40 41 41 41 59 2170 46 2174 60 2173 62 40 41 46 2175 61 1500 59 2162 46 2177 40 41 59 125 91 2014 93 777 865 2186 40 41 123 2187 2188 61 40 41 328 2189 46 2190 40 752 44 752 44 2191 46 2192 46 2193 44 1502 44 1501 44 1501 41 59 2188 46 2194 40 41 46 2195 60 2196 62 40 41 59 2188 61 40 41 328 2189 46 2190 40 362 44 752 44 2191 46 2192 46 2193 44 1502 44 1501 44 1501 41 59 2188 46 2194 40 41 46 2195 60 2196 62 40 41 59 2188 61 40 41 328 2189 46 2190 40 362 44 362 44 2191 46 2192 46 2193 44 1502 44 1501 44 1501 41 59 2188 46 2194 40 41 46 2195 60 2197 62 40 41 59 2188 61 40 41 328 2189 46 2190 40 2003 44 362 44 2191 46 2192 46 2193 44 1502 44 1501 44 1501 41 59 2188 46 2194 40 41 46 2195 60 2197 62 40 41 59 2189 46 2190 40 2003 44 362 44 2191 46 2192 46 2193 44 1502 44 1501 44 1501 41 46 2194 40 41 46 2198 40 744 574 91 93 123 1500 44 1501 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1502 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 44 1503 125 41 59 125 91 2014 93 777 865 2199 40 41 123 2200 2201 61 40 41 328 2202 46 2203 40 752 41 59 2201 46 2204 40 41 46 2205 60 2206 62 40 41 59 2201 61 40 41 328 2202 46 2203 40 362 41 59 2201 46 2204 40 41 46 2205 60 2207 62 40 41 59 2202 46 2203 40 362 41 46 2204 40 41 46 2208 40 744 574 91 93 123 1504 44 1503 44 1503 44 1504 44 1504 44 1504 44 1503 44 1504 44 1504 44 1504 44 1504 44 1503 44 1503 44 1504 44 1503 44 1504 44 1504 44 1504 44 1502 44 1503 44 1504 44 1504 44 1502 44 1503 44 1503 44 1503 44 1503 44 1503 44 1504 44 1503 44 1504 44 1503 125 41 59 125 91 2014 93 777 865 2209 40 41 123 2210 2211 61 744 40 41 59 2211 46 2212 40 362 41 46 2213 40 41 46 2214 40 41 59 125 91 2014 93 777 865 2215 40 41 123 2216 2217 61 744 40 41 59 2217 46 2218 40 2003 44 362 44 1502 44 1501 44 1501 41 46 2219 40 41 46 2220 40 41 59 125 91 2014 93 777 865 2221 40 41 123 2222 2223 61 2224 46 2225 40 41 59 2226 2227 61 744 40 41 59 2228 2229 61 2228 46 2230 40 744 2231 91 93 123 2231 46 2232 125 44 744 574 91 93 123 1501 125 41 59 2233 2234 61 2227 46 2235 40 2229 44 2002 46 2236 41 59 2234 46 2237 61 655 59 2238 2239 61 40 41 328 2227 46 2240 40 2223 44 744 2241 91 93 123 744 2241 40 41 123 2242 61 2243 46 2244 46 2245 44 2246 61 2234 46 2246 44 2247 61 744 2248 40 2249 46 2250 44 1502 41 44 2251 61 362 125 125 44 2252 46 2253 41 59 2239 46 2254 40 41 46 2255 60 2256 62 40 41 59 2239 61 40 41 328 2227 46 2240 40 2223 44 744 2241 91 93 123 744 2241 40 41 123 2257 61 2258 46 2259 46 2260 44 2261 61 2234 46 2261 44 2262 61 744 2263 40 2264 46 2265 44 1502 41 44 2266 61 362 125 125 44 2234 46 2267 41 59 2239 46 2254 40 41 46 2255 60 2256 62 40 41 59 2239 61 40 41 328 2227 46 2240 40 2223 44 744 2241 91 93 123 744 2241 40 41 123 2268 61 2252 46 2253 44 2267 61 2234 46 2267 44 2269 61 744 2270 40 2271 46 2272 44 1502 41 44 2273 61 362 125 125 44 2234 46 2267 41 59 2239 46 2254 40 41 46 2255 60 2256 62 40 41 59 330 2222 2274 61 2275 46 2276 46 2277 40 1503 44 2234 46 2267 41 59 2222 2278 61 2223 46 2279 40 2274 44 40 41 328 744 2280 40 744 2281 40 41 41 41 59 2278 46 2282 60 2281 62 40 41 46 2283 61 1505 42 2275 46 2276 46 2284 59 2274 61 2275 46 2285 46 2277 40 1503 44 2234 46 2267 41 59 2222 2286 61 2223 46 2279 40 2274 44 40 41 328 744 2280 40 744 2287 46 2288 40 41 41 41 59 2286 46 2282 60 2287 46 2288 62 40 41 46 2283 61 1505 42 2275 46 2285 46 2284 59 2223 46 2289 40 41 59 2222 2290 61 2227 46 2240 40 2223 44 744 2241 91 93 123 744 2241 40 41 123 2291 61 2275 46 2276 46 2292 44 2267 61 2234 46 2267 44 2293 61 744 2294 40 2295 46 2296 44 1502 41 125 125 41 59 2290 46 2254 40 41 46 2297 40 41 59 2290 61 2227 46 2240 40 2223 44 744 2241 91 93 123 744 2241 40 41 123 2298 61 2275 46 2285 46 2299 44 2267 61 2234 46 2267 44 2300 61 744 2301 40 2302 46 2303 44 1502 41 44 2304 61 362 125 125 41 59 2290 46 2254 40 41 46 2297 40 41 59 2278 61 2223 46 2279 40 2274 44 40 41 328 744 2280 40 744 2281 40 41 41 41 59 2286 61 2223 46 2279 40 2274 44 40 41 328 744 2280 40 744 2281 40 41 41 41 59 2278 46 2282 60 2281 62 40 41 46 2283 61 1500 59 2286 46 2282 60 2287 46 2288 62 40 41 46 2283 61 1500 59 2223 46 2289 40 41 59 125 91 2014 93 777 865 2305 40 41 123 2306 2307 61 2308 46 2309 40 41 59 2310 2311 61 744 40 41 59 2312 2313 61 40 41 328 2311 46 2314 40 2307 44 2315 46 2316 60 574 62 40 41 44 752 44 752 44 2315 46 2316 60 2317 62 40 41 41 59 2313 46 2318 40 41 46 2319 60 2320 62 40 41 59 2321 2322 61 2321 46 2323 40 744 2324 91 93 123 2324 46 2325 125 44 744 574 91 93 123 1501 125 41 59 2326 2327 61 2311 46 2328 40 2322 44 2002 46 2329 41 59 2327 46 2330 61 655 59 330 2306 2331 61 2332 46 2333 46 2334 40 1503 44 2327 46 2335 41 59 2306 2336 61 2307 46 2337 40 2331 44 40 41 328 744 2338 40 744 2339 40 41 41 41 59 2336 46 2340 60 2339 62 40 41 46 2341 61 1507 42 2332 46 2333 46 2342 59 2307 46 2343 40 41 59 2306 2344 61 2311 46 2314 40 2307 44 2315 46 2316 60 574 62 40 41 44 2327 46 2335 44 744 91 93 123 744 2345 40 41 123 2346 61 2327 46 2335 44 2347 61 2348 46 2349 125 125 44 2315 46 2316 60 2317 62 40 41 41 59 2344 46 2318 40 41 46 2350 40 41 59 2344 61 2311 46 2314 40 2307 44 2315 46 2316 60 574 62 40 41 44 752 44 752 44 2315 46 2316 60 2317 62 40 41 41 59 2344 46 2318 40 41 46 2350 40 41 59 2336 61 2307 46 2337 40 2331 44 40 41 328 744 2338 40 744 2339 40 41 41 41 59 2336 46 2340 60 2339 62 40 41 46 2341 61 1500 59 2307 46 2343 40 41 59 125 91 2014 93 777 865 2351 40 41 123 2352 2353 61 744 40 41 59 2354 2355 61 40 41 328 2353 46 2356 40 362 41 59 2355 46 2357 40 41 46 2358 40 41 59 125 125 ,"{'AvgLine': 13, 'CountLine': 311, 'CountStmt': 149, 'MaxNesting': 0, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 1, 'CountStmtExe': 101, 'MaxEssential': 1, 'SumEssential': 44, 'AvgCyclomatic': 1, 'CountLineCode': 259, 'CountStmtDecl': 75, 'MaxCyclomatic': 1, 'SumCyclomatic': 44, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 48, 'CountSemicolon': 128, 'CountDeclMethod': 20, 'CountLineCodeExe': 158, 'CountLineComment': 4, 'CountClassCoupled': 33, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 98, 'CountLineInactive': 0, 'CountDeclMethodAll': 26, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.02', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 1, 'SumCyclomaticStrict': 44, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 20, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 1, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 44, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 19, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 30, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 77, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
89966,C#,"    public class AudioProcessor : IDisposable
    {
        private const int MaxBufferedFrames = 5;
        private const int TargetBufferedFrames = 3;

        private enum MailboxMessage : uint
        {
            Start,
            Stop,
            RenderStart,
            RenderEnd
        }

        private class RendererSession
        {
            public CommandList CommandList;
            public int RenderingLimit;
            public ulong AppletResourceId;
        }

        private Mailbox<MailboxMessage> _mailbox;
        private RendererSession[] _sessionCommandList;
        private Thread _workerThread;

        public IHardwareDevice[] OutputDevices { get; private set; }

        private long _lastTime;
        private long _playbackEnds;
        private ManualResetEvent _event;

        private ManualResetEvent _pauseEvent;

        public AudioProcessor()
        {
            _event = new ManualResetEvent(false);
        }

        private static uint GetHardwareChannelCount(IHardwareDeviceDriver deviceDriver)
        {
            // Get the real device driver (In case the compat layer is on top of it).
            deviceDriver = deviceDriver.GetRealDeviceDriver();

            if (deviceDriver.SupportsChannelCount(6))
            {
                return 6;
            }
            else
            {
                // NOTE: We default to stereo as this will get downmixed to mono by the compat layer if it's not compatible.
                return 2;
            }
        }

        public void Start(IHardwareDeviceDriver deviceDriver)
        {
            OutputDevices = new IHardwareDevice[Constants.AudioRendererSessionCountMax];

            // TODO: Before enabling this, we need up-mixing from stereo to 5.1.
            // uint channelCount = GetHardwareChannelCount(deviceDriver);
            uint channelCount = 2;

            for (int i = 0; i < OutputDevices.Length; i++)
            {
                // TODO: Don't hardcode sample rate.
                OutputDevices[i] = new HardwareDeviceImpl(deviceDriver, channelCount, Constants.TargetSampleRate);
            }

            _mailbox = new Mailbox<MailboxMessage>();
            _sessionCommandList = new RendererSession[Constants.AudioRendererSessionCountMax];
            _event.Reset();
            _lastTime = PerformanceCounter.ElapsedNanoseconds;
            _pauseEvent = deviceDriver.GetPauseEvent();

            StartThread();

            _mailbox.SendMessage(MailboxMessage.Start);

            if (_mailbox.ReceiveResponse() != MailboxMessage.Start)
            {
                throw new InvalidOperationException(""Audio Processor Start response was invalid!"");
            }
        }

        public void Stop()
        {
            _mailbox.SendMessage(MailboxMessage.Stop);

            if (_mailbox.ReceiveResponse() != MailboxMessage.Stop)
            {
                throw new InvalidOperationException(""Audio Processor Stop response was invalid!"");
            }

            foreach (IHardwareDevice device in OutputDevices)
            {
                device.Dispose();
            }
        }

        public void Send(int sessionId, CommandList commands, int renderingLimit, ulong appletResourceId)
        {
            _sessionCommandList[sessionId] = new RendererSession
            {
                CommandList = commands,
                RenderingLimit = renderingLimit,
                AppletResourceId = appletResourceId
            };
        }

        public void Signal()
        {
            _mailbox.SendMessage(MailboxMessage.RenderStart);
        }

        public void Wait()
        {
            if (_mailbox.ReceiveResponse() != MailboxMessage.RenderEnd)
            {
                throw new InvalidOperationException(""Audio Processor Wait response was invalid!"");
            }

            long increment = Constants.AudioProcessorMaxUpdateTimeTarget;

            long timeNow = PerformanceCounter.ElapsedNanoseconds;

            if (timeNow > _playbackEnds)
            {
                // Playback has restarted.
                _playbackEnds = timeNow;
            }

            _playbackEnds += increment;

            // The number of frames we are behind where the timer says we should be.
            long framesBehind = (timeNow - _lastTime) / increment;

            // The number of frames yet to play on the backend.
            long bufferedFrames = (_playbackEnds - timeNow) / increment + framesBehind;

            // If we've entered a situation where a lot of buffers will be queued on the backend,
            // Skip some audio frames so that playback can catch up.
            if (bufferedFrames > MaxBufferedFrames)
            {
                // Skip a few frames so that we're not too far behind. (the target number of frames)
                _lastTime += increment * (bufferedFrames - TargetBufferedFrames);
            }

            while (timeNow < _lastTime + increment)
            {
                _event.WaitOne(1);

                timeNow = PerformanceCounter.ElapsedNanoseconds;
            }

            _lastTime += increment;
        }

        private void StartThread()
        {
            _workerThread = new Thread(Work)
            {
                Name = ""AudioProcessor.Worker""
            };

            _workerThread.Start();
        }

        private void Work()
        {
            if (_mailbox.ReceiveMessage() != MailboxMessage.Start)
            {
                throw new InvalidOperationException(""Audio Processor Start message was invalid!"");
            }

            _mailbox.SendResponse(MailboxMessage.Start);
            _mailbox.SendResponse(MailboxMessage.RenderEnd);

            Logger.Info?.Print(LogClass.AudioRenderer, ""Starting audio processor"");

            while (true)
            {
                _pauseEvent?.WaitOne();

                MailboxMessage message = _mailbox.ReceiveMessage();

                if (message == MailboxMessage.Stop)
                {
                    break;
                }

                if (message == MailboxMessage.RenderStart)
                {
                    long startTicks = PerformanceCounter.ElapsedNanoseconds;

                    for (int i = 0; i < _sessionCommandList.Length; i++)
                    {
                        if (_sessionCommandList[i] != null)
                        {
                            _sessionCommandList[i].CommandList.Process(OutputDevices[i]);
                            _sessionCommandList[i].CommandList.Dispose();
                            _sessionCommandList[i] = null;
                        }
                    }

                    long endTicks = PerformanceCounter.ElapsedNanoseconds;

                    long elapsedTime = endTicks - startTicks;

                    if (Constants.AudioProcessorMaxUpdateTime < elapsedTime)
                    {
                        Logger.Debug?.Print(LogClass.AudioRenderer, $""DSP too slow (exceeded by {elapsedTime - Constants.AudioProcessorMaxUpdateTime}ns)"");
                    }

                    _mailbox.SendResponse(MailboxMessage.RenderEnd);
                }
            }

            Logger.Info?.Print(LogClass.AudioRenderer, ""Stopping audio processor"");
            _mailbox.SendResponse(MailboxMessage.Stop);
        }

        public void Dispose()
        {
            Dispose(true);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                _event.Dispose();
            }
        }
    }",1,777 587 2000 58 2001 123 773 601 704 2002 61 1502 59 773 601 704 2003 61 1502 59 773 640 2004 58 842 123 2005 44 2006 44 2007 44 2008 125 773 587 2009 123 777 2010 2010 59 777 704 2011 59 777 848 2012 59 125 773 2013 60 2004 62 2014 59 773 2009 91 93 2015 59 773 2016 2017 59 777 2018 91 93 2019 123 2020 59 773 2021 59 125 773 726 2022 59 773 726 2023 59 773 2024 2025 59 773 2024 2026 59 777 2000 40 41 123 2025 61 744 2024 40 655 41 59 125 773 809 842 2027 40 2028 2029 41 123 330 2029 61 2029 46 2030 40 41 59 688 40 2029 46 2031 40 1502 41 41 123 792 1502 59 125 630 123 330 792 1502 59 125 125 777 865 2032 40 2028 2029 41 123 2019 61 744 2018 91 2033 46 2034 93 59 330 330 842 2035 61 1502 59 664 40 704 2036 61 1500 59 2036 60 2019 46 2037 59 2036 349 41 123 330 2019 91 2036 93 61 744 2038 40 2029 44 2035 44 2033 46 2039 41 59 125 2014 61 744 2013 60 2004 62 40 41 59 2015 61 744 2009 91 2033 46 2034 93 59 2025 46 2040 40 41 59 2022 61 2041 46 2042 59 2026 61 2029 46 2043 40 41 59 2044 40 41 59 2014 46 2045 40 2004 46 2032 41 59 688 40 2014 46 2046 40 41 340 2004 46 2032 41 123 825 744 2047 40 362 41 59 125 125 777 865 2048 40 41 123 2014 46 2049 40 2004 46 2048 41 59 688 40 2014 46 2050 40 41 340 2004 46 2048 41 123 825 744 2051 40 362 41 59 125 665 40 2018 2052 696 2019 41 123 2052 46 2053 40 41 59 125 125 777 865 2054 40 704 2055 44 2056 2057 44 704 2058 44 848 2059 41 123 2015 91 2055 93 61 744 2009 123 2056 61 2057 44 2060 61 2058 44 2061 61 2059 125 59 125 777 865 2062 40 41 123 2014 46 2063 40 2004 46 2064 41 59 125 777 865 2065 40 41 123 688 40 2014 46 2066 40 41 340 2004 46 2067 41 123 825 744 2068 40 362 41 59 125 726 2069 61 2070 46 2071 59 726 2072 61 2073 46 2074 59 688 40 2072 62 2023 41 123 330 2023 61 2072 59 125 2023 348 2069 59 330 726 2075 61 40 2072 45 2022 41 47 2069 59 330 726 2076 61 40 2023 45 2072 41 47 2069 43 2075 59 330 330 688 40 2076 62 2002 41 123 330 2022 348 2069 42 40 2076 45 2003 41 59 125 870 40 2072 60 2022 43 2069 41 123 2025 46 2077 40 1501 41 59 2072 61 2073 46 2074 59 125 2022 348 2069 59 125 773 865 2078 40 41 123 2017 61 744 2016 40 2079 41 123 2080 61 362 125 59 2017 46 2032 40 41 59 125 773 865 2081 40 41 123 688 40 2014 46 2082 40 41 340 2004 46 2032 41 123 825 744 2083 40 362 41 59 125 2014 46 2084 40 2004 46 2032 41 59 2014 46 2084 40 2004 46 2085 41 59 2086 46 2087 346 2088 40 2089 46 2090 44 362 41 59 870 40 829 41 123 2026 346 2091 40 41 59 2004 2092 61 2014 46 2082 40 41 59 688 40 2092 323 2004 46 2048 41 123 572 59 125 688 40 2092 323 2004 46 2093 41 123 726 2094 61 2095 46 2096 59 664 40 704 2097 61 1500 59 2097 60 2015 46 2098 59 2097 349 41 123 688 40 2015 91 2097 93 340 752 41 123 2015 91 2097 93 46 2056 46 2099 40 2019 91 2097 93 41 59 2015 91 2097 93 46 2056 46 2100 40 41 59 2015 91 2097 93 61 752 59 125 125 726 2101 61 2095 46 2096 59 726 2102 61 2101 45 2094 59 688 40 2103 46 2104 60 2102 41 123 2086 46 2105 346 2088 40 2089 46 2090 44 36 362 41 59 125 2014 46 2084 40 2004 46 2085 41 59 125 125 2086 46 2087 346 2088 40 2089 46 2090 44 362 41 59 2014 46 2084 40 2004 46 2048 41 59 125 777 865 2106 40 41 123 2106 40 829 41 59 125 775 864 865 2106 40 569 2107 41 123 688 40 2107 41 123 2025 46 2106 40 41 59 125 125 125 ,"{'AvgLine': 14, 'CountLine': 233, 'CountStmt': 102, 'MaxNesting': 4, 'AvgLineCode': 11, 'AvgEssential': 1, 'AvgLineBlank': 2, 'CountStmtExe': 63, 'MaxEssential': 4, 'SumEssential': 14, 'AvgCyclomatic': 2, 'CountLineCode': 173, 'CountStmtDecl': 40, 'MaxCyclomatic': 8, 'SumCyclomatic': 28, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 49, 'CountSemicolon': 70, 'CountDeclMethod': 13, 'CountLineCodeExe': 76, 'CountLineComment': 11, 'CountClassCoupled': 18, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 40, 'CountLineInactive': 0, 'CountDeclMethodAll': 19, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.06', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 28, 'CountDeclClassMethod': 1, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 8, 'CountDeclPropertyAuto': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 76, 'SumCyclomaticModified': 28, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 12, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 11, 'CountDeclInstanceVariable': 7, 'PercentLackOfCohesionModified': 69, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 7, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79790,C#,"    internal class ECFieldElement : IComparable<ECFieldElement>, IEquatable<ECFieldElement>
    {
        internal readonly BigInteger Value;
        private readonly ECCurve curve;

        public ECFieldElement(BigInteger value, ECCurve curve)
        {
            if (curve is null)
                throw new ArgumentNullException(nameof(curve));
            if (value >= curve.Q)
                throw new ArgumentException(""x value too large in field element"");
            this.Value = value;
            this.curve = curve;
        }

        public int CompareTo(ECFieldElement other)
        {
            if (ReferenceEquals(this, other)) return 0;
            if (!curve.Equals(other.curve)) throw new InvalidOperationException(""Invalid comparision for points with different curves"");
            return Value.CompareTo(other.Value);
        }

        public override bool Equals(object obj)
        {
            if (obj == this)
                return true;

            if (obj is not ECFieldElement other)
                return false;

            return Equals(other);
        }

        public bool Equals(ECFieldElement other)
        {
            return Value.Equals(other.Value) && curve.Equals(other.curve);
        }

        private static BigInteger[] FastLucasSequence(BigInteger p, BigInteger P, BigInteger Q, BigInteger k)
        {
            int n = (int)k.GetBitLength();
            int s = k.GetLowestSetBit();

            BigInteger Uh = 1;
            BigInteger Vl = 2;
            BigInteger Vh = P;
            BigInteger Ql = 1;
            BigInteger Qh = 1;

            for (int j = n - 1; j >= s + 1; --j)
            {
                Ql = (Ql * Qh).Mod(p);

                if (k.TestBit(j))
                {
                    Qh = (Ql * Q).Mod(p);
                    Uh = (Uh * Vh).Mod(p);
                    Vl = (Vh * Vl - P * Ql).Mod(p);
                    Vh = ((Vh * Vh) - (Qh << 1)).Mod(p);
                }
                else
                {
                    Qh = Ql;
                    Uh = (Uh * Vl - Ql).Mod(p);
                    Vh = (Vh * Vl - P * Ql).Mod(p);
                    Vl = ((Vl * Vl) - (Ql << 1)).Mod(p);
                }
            }

            Ql = (Ql * Qh).Mod(p);
            Qh = (Ql * Q).Mod(p);
            Uh = (Uh * Vl - Ql).Mod(p);
            Vl = (Vh * Vl - P * Ql).Mod(p);
            Ql = (Ql * Qh).Mod(p);

            for (int j = 1; j <= s; ++j)
            {
                Uh = Uh * Vl * p;
                Vl = ((Vl * Vl) - (Ql << 1)).Mod(p);
                Ql = (Ql * Ql).Mod(p);
            }

            return new BigInteger[] { Uh, Vl };
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }

        public ECFieldElement Sqrt()
        {
            if (curve.Q.TestBit(1))
            {
                ECFieldElement z = new(BigInteger.ModPow(Value, (curve.Q >> 2) + 1, curve.Q), curve);
                return z.Square().Equals(this) ? z : null;
            }
            BigInteger qMinusOne = curve.Q - 1;
            BigInteger legendreExponent = qMinusOne >> 1;
            if (BigInteger.ModPow(Value, legendreExponent, curve.Q) != 1)
                return null;
            BigInteger u = qMinusOne >> 2;
            BigInteger k = (u << 1) + 1;
            BigInteger Q = this.Value;
            BigInteger fourQ = (Q << 2).Mod(curve.Q);
            BigInteger U, V;
            do
            {
                Random rand = new();
                BigInteger P;
                do
                {
                    P = rand.NextBigInteger((int)curve.Q.GetBitLength());
                }
                while (P >= curve.Q || BigInteger.ModPow(P * P - fourQ, legendreExponent, curve.Q) != qMinusOne);
                BigInteger[] result = FastLucasSequence(curve.Q, P, Q, k);
                U = result[0];
                V = result[1];
                if ((V * V).Mod(curve.Q) == fourQ)
                {
                    if (V.TestBit(0))
                    {
                        V += curve.Q;
                    }
                    V >>= 1;
                    return new ECFieldElement(V, curve);
                }
            }
            while (U.Equals(BigInteger.One) || U.Equals(qMinusOne));
            return null;
        }

        public ECFieldElement Square()
        {
            return new ECFieldElement((Value * Value).Mod(curve.Q), curve);
        }

        public byte[] ToByteArray()
        {
            byte[] data = Value.ToByteArray(isUnsigned: true, isBigEndian: true);
            if (data.Length == 32)
                return data;
            byte[] buffer = new byte[32];
            Buffer.BlockCopy(data, 0, buffer, buffer.Length - data.Length, data.Length);
            return buffer;
        }

        public static ECFieldElement operator -(ECFieldElement x)
        {
            return new ECFieldElement((-x.Value).Mod(x.curve.Q), x.curve);
        }

        public static ECFieldElement operator *(ECFieldElement x, ECFieldElement y)
        {
            return new ECFieldElement((x.Value * y.Value).Mod(x.curve.Q), x.curve);
        }

        public static ECFieldElement operator /(ECFieldElement x, ECFieldElement y)
        {
            return new ECFieldElement((x.Value * y.Value.ModInverse(x.curve.Q)).Mod(x.curve.Q), x.curve);
        }

        public static ECFieldElement operator +(ECFieldElement x, ECFieldElement y)
        {
            return new ECFieldElement((x.Value + y.Value).Mod(x.curve.Q), x.curve);
        }

        public static ECFieldElement operator -(ECFieldElement x, ECFieldElement y)
        {
            return new ECFieldElement((x.Value - y.Value).Mod(x.curve.Q), x.curve);
        }
    }",1,710 587 2000 58 2001 60 2000 62 44 2002 60 2000 62 123 710 780 2003 2004 59 773 780 2005 2006 59 777 2000 40 2003 2007 44 2005 2006 41 123 688 40 2006 712 752 41 825 744 2008 40 2009 40 2006 41 41 59 688 40 2007 325 2006 46 2010 41 825 744 2011 40 362 41 59 823 46 2004 61 2007 59 823 46 2006 61 2006 59 125 777 704 2012 40 2000 2013 41 123 688 40 2014 40 823 44 2013 41 41 792 1500 59 688 40 33 2006 46 2015 40 2013 46 2006 41 41 825 744 2016 40 362 41 59 792 2004 46 2012 40 2013 46 2004 41 59 125 777 763 569 2017 40 755 2018 41 123 688 40 2018 323 823 41 792 829 59 688 40 2018 712 2019 2000 2013 41 792 655 59 792 2017 40 2013 41 59 125 777 569 2017 40 2000 2013 41 123 792 2004 46 2017 40 2013 46 2004 41 307 2006 46 2017 40 2013 46 2006 41 59 125 773 809 2003 91 93 2020 40 2003 2021 44 2003 2022 44 2003 2023 44 2003 2024 41 123 704 2025 61 40 704 41 2024 46 2026 40 41 59 704 2027 61 2024 46 2028 40 41 59 2003 2029 61 1501 59 2003 2030 61 1502 59 2003 2031 61 2022 59 2003 2032 61 1501 59 2003 2033 61 1501 59 664 40 704 2034 61 2025 45 1501 59 2034 325 2027 43 1501 59 338 2034 41 123 2032 61 40 2032 42 2033 41 46 2035 40 2021 41 59 688 40 2024 46 2036 40 2034 41 41 123 2033 61 40 2032 42 2023 41 46 2035 40 2021 41 59 2029 61 40 2029 42 2031 41 46 2035 40 2021 41 59 2030 61 40 2031 42 2030 45 2022 42 2032 41 46 2035 40 2021 41 59 2031 61 40 40 2031 42 2031 41 45 40 2033 332 1501 41 41 46 2035 40 2021 41 59 125 630 123 2033 61 2032 59 2029 61 40 2029 42 2030 45 2032 41 46 2035 40 2021 41 59 2031 61 40 2031 42 2030 45 2022 42 2032 41 46 2035 40 2021 41 59 2030 61 40 40 2030 42 2030 41 45 40 2032 332 1501 41 41 46 2035 40 2021 41 59 125 125 2032 61 40 2032 42 2033 41 46 2037 40 2021 41 59 2033 61 40 2032 42 2023 41 46 2037 40 2021 41 59 2029 61 40 2029 42 2030 45 2032 41 46 2037 40 2021 41 59 2030 61 40 2031 42 2030 45 2022 42 2032 41 46 2037 40 2021 41 59 2032 61 40 2032 42 2033 41 46 2037 40 2021 41 59 664 40 704 2034 61 1501 59 2034 329 2027 59 349 2034 41 123 2029 61 2029 42 2030 42 2021 59 2030 61 40 40 2030 42 2030 41 45 40 2032 332 1501 41 41 46 2037 40 2021 41 59 2032 61 40 2032 42 2032 41 46 2037 40 2021 41 59 125 792 744 2003 91 93 123 2029 44 2030 125 59 125 777 763 704 2038 40 41 123 792 2004 46 2038 40 41 59 125 777 2000 2039 40 41 123 688 40 2006 46 2023 46 2040 40 1501 41 41 123 2000 2041 61 744 40 2003 46 2042 40 2004 44 40 2006 46 2023 355 1502 41 43 1501 44 2006 46 2023 41 44 2006 41 59 792 2041 46 2043 40 41 46 2017 40 823 41 63 2041 58 752 59 125 2003 2044 61 2006 46 2023 45 1501 59 2003 2045 61 2044 355 1501 59 688 40 2003 46 2046 40 2004 44 2045 44 2006 46 2023 41 340 1501 41 792 752 59 2003 2047 61 2044 355 1502 59 2003 2024 61 40 2047 332 1501 41 43 1501 59 2003 2023 61 823 46 2004 59 2003 2048 61 40 2023 332 1502 41 46 2049 40 2006 46 2023 41 59 2003 2050 44 2051 59 624 123 2052 2053 61 744 40 41 59 2003 2022 59 624 123 2022 61 2053 46 2054 40 40 704 41 2006 46 2023 46 2055 40 41 41 59 125 870 40 2022 325 2006 46 2023 309 2003 46 2046 40 2022 42 2022 45 2048 44 2045 44 2006 46 2023 41 340 2044 41 59 2003 91 93 2056 61 2020 40 2006 46 2023 44 2022 44 2023 44 2024 41 59 2050 61 2056 91 1500 93 59 2051 61 2056 91 1501 93 59 688 40 40 2051 42 2051 41 46 2049 40 2006 46 2023 41 323 2048 41 123 688 40 2051 46 2040 40 1500 41 41 123 2051 348 2006 46 2023 59 125 2051 358 1501 59 792 744 2000 40 2051 44 2006 41 59 125 125 870 40 2050 46 2017 40 2003 46 2057 41 309 2050 46 2017 40 2044 41 41 59 792 752 59 125 777 2000 2058 40 41 123 792 744 2000 40 40 2004 42 2004 41 46 2059 40 2006 46 2023 41 44 2006 41 59 125 777 574 91 93 2060 40 41 123 574 91 93 2061 61 2004 46 2060 40 2062 58 829 44 2063 58 829 41 59 688 40 2061 46 2064 323 1503 41 792 2061 59 574 91 93 2065 61 744 574 91 1503 93 59 2066 46 2067 40 2061 44 1500 44 2065 44 2065 46 2064 45 2061 46 2064 44 2061 46 2064 41 59 792 2065 59 125 777 809 2000 758 45 40 2000 2068 41 123 792 744 2000 40 40 45 2068 46 2004 41 46 2069 40 2068 46 2006 46 2023 41 44 2068 46 2006 41 59 125 777 809 2000 758 42 40 2000 2068 44 2000 2070 41 123 792 744 2000 40 40 2068 46 2004 42 2070 46 2004 41 46 2071 40 2068 46 2006 46 2023 41 44 2068 46 2006 41 59 125 777 809 2000 758 47 40 2000 2068 44 2000 2070 41 123 792 744 2000 40 40 2068 46 2004 42 2070 46 2004 46 2072 40 2068 46 2006 46 2023 41 41 46 2073 40 2068 46 2006 46 2023 41 44 2068 46 2006 41 59 125 777 809 2000 758 43 40 2000 2068 44 2000 2070 41 123 792 744 2000 40 40 2068 46 2004 43 2070 46 2004 41 46 2074 40 2068 46 2006 46 2023 41 44 2068 46 2006 41 59 125 777 809 2000 758 45 40 2000 2068 44 2000 2070 41 123 792 744 2000 40 40 2068 46 2004 45 2070 46 2004 41 46 2075 40 2068 46 2006 46 2023 41 44 2068 46 2006 41 59 125 125 ,"{'AvgLine': 10, 'CountLine': 172, 'CountStmt': 105, 'MaxNesting': 3, 'AvgLineCode': 10, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 71, 'MaxEssential': 5, 'SumEssential': 24, 'AvgCyclomatic': 2, 'CountLineCode': 150, 'CountStmtDecl': 39, 'MaxCyclomatic': 8, 'SumCyclomatic': 31, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 22, 'CountSemicolon': 76, 'CountDeclMethod': 14, 'CountLineCodeExe': 83, 'CountLineComment': 0, 'CountClassCoupled': 11, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 37, 'CountLineInactive': 0, 'CountDeclMethodAll': 20, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.00', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 34, 'CountDeclClassMethod': 6, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 13, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 21, 'SumCyclomaticModified': 31, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 8, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 5, 'CountDeclInstanceVariable': 2, 'PercentLackOfCohesionModified': 14, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 1, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79842,C#,"    class HashSetCache<T> : IReadOnlyCollection<T> where T : IEquatable<T>
    {
        /// <summary>
        /// Sets where the Hashes are stored
        /// </summary>      
        private readonly LinkedList<HashSet<T>> sets = new();

        /// <summary>
        /// Maximum capacity of each bucket inside each HashSet of <see cref=""sets""/>.
        /// </summary>        
        private readonly int bucketCapacity;

        /// <summary>
        /// Maximum number of buckets for the LinkedList, meaning its maximum cardinality.
        /// </summary>
        private readonly int maxBucketCount;

        /// <summary>
        /// Entry count
        /// </summary>
        public int Count { get; private set; }

        public HashSetCache(int bucketCapacity, int maxBucketCount = 10)
        {
            if (bucketCapacity <= 0) throw new ArgumentOutOfRangeException($""{nameof(bucketCapacity)} should be greater than 0"");
            if (maxBucketCount <= 0) throw new ArgumentOutOfRangeException($""{nameof(maxBucketCount)} should be greater than 0"");

            this.Count = 0;
            this.bucketCapacity = bucketCapacity;
            this.maxBucketCount = maxBucketCount;
            sets.AddFirst(new HashSet<T>());
        }

        public bool Add(T item)
        {
            if (Contains(item)) return false;
            Count++;
            if (sets.First.Value.Count < bucketCapacity) return sets.First.Value.Add(item);
            var newSet = new HashSet<T>
            {
                item
            };
            sets.AddFirst(newSet);
            if (sets.Count > maxBucketCount)
            {
                Count -= sets.Last.Value.Count;
                sets.RemoveLast();
            }
            return true;
        }

        public bool Contains(T item)
        {
            foreach (var set in sets)
            {
                if (set.Contains(item)) return true;
            }
            return false;
        }

        public void ExceptWith(IEnumerable<T> items)
        {
            List<HashSet<T>> removeList = null;
            foreach (var item in items)
            {
                foreach (var set in sets)
                {
                    if (set.Remove(item))
                    {
                        Count--;
                        if (set.Count == 0)
                        {
                            removeList ??= new List<HashSet<T>>();
                            removeList.Add(set);
                        }
                        break;
                    }
                }
            }
            if (removeList == null) return;
            foreach (var set in removeList)
            {
                sets.Remove(set);
            }
        }

        public IEnumerator<T> GetEnumerator()
        {
            foreach (var set in sets)
            {
                foreach (var item in set)
                {
                    yield return item;
                }
            }
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }",1,587 2000 60 2001 62 58 2002 60 2001 62 2003 2001 58 2004 60 2001 62 123 331 773 780 2005 60 2006 60 2001 355 2007 61 744 40 41 59 331 773 780 704 2008 59 331 773 780 704 2009 59 331 777 704 2010 123 2011 59 773 2012 59 125 777 2000 40 704 2008 44 704 2009 61 1502 41 123 688 40 2008 329 1500 41 825 744 2013 40 36 362 41 59 688 40 2009 329 1500 41 825 744 2013 40 36 362 41 59 823 46 2010 61 1500 59 823 46 2008 61 2008 59 823 46 2009 61 2009 59 2007 46 2014 40 744 2006 60 2001 62 40 41 41 59 125 777 569 2015 40 2001 2016 41 123 688 40 2017 40 2016 41 41 792 655 59 2010 349 59 688 40 2007 46 2018 46 2019 46 2010 60 2008 41 792 2007 46 2018 46 2019 46 2015 40 2016 41 59 2020 2021 61 744 2006 60 2001 62 123 2016 125 59 2007 46 2022 40 2021 41 59 688 40 2007 46 2010 62 2009 41 123 2010 337 2007 46 2023 46 2019 46 2010 59 2007 46 2024 40 41 59 125 792 829 59 125 777 569 2025 40 2001 2016 41 123 665 40 2026 2027 696 2007 41 123 688 40 2027 46 2025 40 2016 41 41 792 829 59 125 792 655 59 125 777 865 2028 40 2029 60 2001 62 2030 41 123 2031 60 2006 60 2001 355 2032 61 752 59 665 40 2033 2016 696 2030 41 123 665 40 2033 2034 696 2007 41 123 688 40 2034 46 2035 40 2016 41 41 123 2010 338 59 688 40 2034 46 2010 323 1500 41 123 2032 343 61 744 2031 60 2006 60 2001 355 40 41 59 2032 46 2015 40 2034 41 59 125 572 59 125 125 125 688 40 2032 323 752 41 792 59 665 40 2033 2036 696 2032 41 123 2007 46 2037 40 2036 41 59 125 125 777 2038 60 2001 62 2039 40 41 123 665 40 2040 2041 696 2007 41 123 665 40 2040 2016 696 2041 41 123 2042 792 2016 59 125 125 125 2038 2029 46 2039 40 41 328 2039 40 41 59 125 ,"{'AvgLine': 8, 'CountLine': 99, 'CountStmt': 53, 'MaxNesting': 4, 'AvgLineCode': 8, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 39, 'MaxEssential': 4, 'SumEssential': 15, 'AvgCyclomatic': 3, 'CountLineCode': 77, 'CountStmtDecl': 15, 'MaxCyclomatic': 8, 'SumCyclomatic': 22, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 10, 'CountSemicolon': 30, 'CountDeclMethod': 8, 'CountLineCodeExe': 36, 'CountLineComment': 12, 'CountClassCoupled': 10, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 14, 'CountLineInactive': 0, 'CountDeclMethodAll': 14, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.16', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 8, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 3, 'CountDeclMethodPublic': 6, 'CountDeclPropertyAuto': 1, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 8, 'PercentLackOfCohesion': 50, 'SumCyclomaticModified': 22, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 8, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 4, 'CountDeclInstanceVariable': 3, 'PercentLackOfCohesionModified': 45, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 3, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79757,C#,"    public class Transaction : IEquatable<Transaction>, IInventory, IInteroperable
    {
        /// <summary>
        /// The maximum size of a transaction.
        /// </summary>
        public const int MaxTransactionSize = 102400;

        /// <summary>
        /// The maximum number of attributes that can be contained within a transaction.
        /// </summary>
        public const int MaxTransactionAttributes = 16;

        private byte version;
        private uint nonce;
        private long sysfee;
        private long netfee;
        private uint validUntilBlock;
        private Signer[] _signers;
        private TransactionAttribute[] attributes;
        private byte[] script;
        private Witness[] witnesses;

        /// <summary>
        /// The size of a transaction header.
        /// </summary>
        public const int HeaderSize =
            sizeof(byte) +  //Version
            sizeof(uint) +  //Nonce
            sizeof(long) +  //SystemFee
            sizeof(long) +  //NetworkFee
            sizeof(uint);   //ValidUntilBlock

        private Dictionary<Type, TransactionAttribute[]> _attributesCache;
        /// <summary>
        /// The attributes of the transaction.
        /// </summary>
        public TransactionAttribute[] Attributes
        {
            get => attributes;
            set { attributes = value; _attributesCache = null; _hash = null; _size = 0; }
        }

        /// <summary>
        /// The <see cref=""NetworkFee""/> for the transaction divided by its <see cref=""Size""/>.
        /// </summary>
        public long FeePerByte => NetworkFee / Size;

        private UInt256 _hash = null;
        public UInt256 Hash
        {
            get
            {
                if (_hash == null)
                {
                    _hash = this.CalculateHash();
                }
                return _hash;
            }
        }

        InventoryType IInventory.InventoryType => InventoryType.TX;

        /// <summary>
        /// The network fee of the transaction.
        /// </summary>
        public long NetworkFee //Distributed to consensus nodes.
        {
            get => netfee;
            set { netfee = value; _hash = null; }
        }

        /// <summary>
        /// The nonce of the transaction.
        /// </summary>
        public uint Nonce
        {
            get => nonce;
            set { nonce = value; _hash = null; }
        }

        /// <summary>
        /// The script of the transaction.
        /// </summary>
        public byte[] Script
        {
            get => script;
            set { script = value; _hash = null; _size = 0; }
        }

        /// <summary>
        /// The sender is the first signer of the transaction, regardless of its <see cref=""WitnessScope""/>.
        /// </summary>
        /// <remarks>Note: The sender will pay the fees of the transaction.</remarks>
        public UInt160 Sender => _signers[0].Account;

        /// <summary>
        /// The signers of the transaction.
        /// </summary>
        public Signer[] Signers
        {
            get => _signers;
            set { _signers = value; _hash = null; _size = 0; }
        }

        private int _size;
        public int Size
        {
            get
            {
                if (_size == 0)
                {
                    _size = HeaderSize +
                        Signers.GetVarSize() +      // Signers
                        Attributes.GetVarSize() +   // Attributes
                        Script.GetVarSize() +       // Script
                        Witnesses.GetVarSize();     // Witnesses
                }
                return _size;
            }
        }

        /// <summary>
        /// The system fee of the transaction.
        /// </summary>
        public long SystemFee //Fee to be burned.
        {
            get => sysfee;
            set { sysfee = value; _hash = null; }
        }

        /// <summary>
        /// Indicates that the transaction is only valid before this block height.
        /// </summary>
        public uint ValidUntilBlock
        {
            get => validUntilBlock;
            set { validUntilBlock = value; _hash = null; }
        }

        /// <summary>
        /// The version of the transaction.
        /// </summary>
        public byte Version
        {
            get => version;
            set { version = value; _hash = null; }
        }

        public Witness[] Witnesses
        {
            get => witnesses;
            set { witnesses = value; _size = 0; }
        }

        void ISerializable.Deserialize(BinaryReader reader)
        {
            int startPosition = -1;
            if (reader.BaseStream.CanSeek)
                startPosition = (int)reader.BaseStream.Position;
            DeserializeUnsigned(reader);
            Witnesses = reader.ReadSerializableArray<Witness>(Signers.Length);
            if (Witnesses.Length != Signers.Length) throw new FormatException();
            if (startPosition >= 0)
                _size = (int)reader.BaseStream.Position - startPosition;
        }

        private static IEnumerable<TransactionAttribute> DeserializeAttributes(BinaryReader reader, int maxCount)
        {
            int count = (int)reader.ReadVarInt((ulong)maxCount);
            HashSet<TransactionAttributeType> hashset = new();
            while (count-- > 0)
            {
                TransactionAttribute attribute = TransactionAttribute.DeserializeFrom(reader);
                if (!attribute.AllowMultiple && !hashset.Add(attribute.Type))
                    throw new FormatException();
                yield return attribute;
            }
        }

        private static IEnumerable<Signer> DeserializeSigners(BinaryReader reader, int maxCount)
        {
            int count = (int)reader.ReadVarInt((ulong)maxCount);
            if (count == 0) throw new FormatException();
            HashSet<UInt160> hashset = new();
            for (int i = 0; i < count; i++)
            {
                Signer signer = reader.ReadSerializable<Signer>();
                if (!hashset.Add(signer.Account)) throw new FormatException();
                yield return signer;
            }
        }

        public void DeserializeUnsigned(BinaryReader reader)
        {
            Version = reader.ReadByte();
            if (Version > 0) throw new FormatException();
            Nonce = reader.ReadUInt32();
            SystemFee = reader.ReadInt64();
            if (SystemFee < 0) throw new FormatException();
            NetworkFee = reader.ReadInt64();
            if (NetworkFee < 0) throw new FormatException();
            if (SystemFee + NetworkFee < SystemFee) throw new FormatException();
            ValidUntilBlock = reader.ReadUInt32();
            Signers = DeserializeSigners(reader, MaxTransactionAttributes).ToArray();
            Attributes = DeserializeAttributes(reader, MaxTransactionAttributes - Signers.Length).ToArray();
            Script = reader.ReadVarBytes(ushort.MaxValue);
            if (Script.Length == 0) throw new FormatException();
        }

        public bool Equals(Transaction other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;
            return Hash.Equals(other.Hash);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as Transaction);
        }

        void IInteroperable.FromStackItem(StackItem stackItem)
        {
            throw new NotSupportedException();
        }

        /// <summary>
        /// Gets the attribute of the specified type.
        /// </summary>
        /// <typeparam name=""T"">The type of the attribute.</typeparam>
        /// <returns>The first attribute of this type. Or <see langword=""null""/> if there is no attribute of this type.</returns>
        public T GetAttribute<T>() where T : TransactionAttribute
        {
            return GetAttributes<T>().FirstOrDefault();
        }

        /// <summary>
        /// Gets all attributes of the specified type.
        /// </summary>
        /// <typeparam name=""T"">The type of the attributes.</typeparam>
        /// <returns>All the attributes of this type.</returns>
        public IEnumerable<T> GetAttributes<T>() where T : TransactionAttribute
        {
            _attributesCache ??= attributes.GroupBy(p => p.GetType()).ToDictionary(p => p.Key, p => p.ToArray());
            if (_attributesCache.TryGetValue(typeof(T), out var result))
                return result.OfType<T>();
            return Enumerable.Empty<T>();
        }

        public override int GetHashCode()
        {
            return Hash.GetHashCode();
        }

        public UInt160[] GetScriptHashesForVerifying(DataCache snapshot)
        {
            return Signers.Select(p => p.Account).ToArray();
        }

        void ISerializable.Serialize(BinaryWriter writer)
        {
            ((IVerifiable)this).SerializeUnsigned(writer);
            writer.Write(Witnesses);
        }

        void IVerifiable.SerializeUnsigned(BinaryWriter writer)
        {
            writer.Write(Version);
            writer.Write(Nonce);
            writer.Write(SystemFee);
            writer.Write(NetworkFee);
            writer.Write(ValidUntilBlock);
            writer.Write(Signers);
            writer.Write(Attributes);
            writer.WriteVarBytes(Script);
        }

        /// <summary>
        /// Converts the transaction to a JSON object.
        /// </summary>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> used during the conversion.</param>
        /// <returns>The transaction represented by a JSON object.</returns>
        public JObject ToJson(ProtocolSettings settings)
        {
            JObject json = new();
            json[""hash""] = Hash.ToString();
            json[""size""] = Size;
            json[""version""] = Version;
            json[""nonce""] = Nonce;
            json[""sender""] = Sender.ToAddress(settings.AddressVersion);
            json[""sysfee""] = SystemFee.ToString();
            json[""netfee""] = NetworkFee.ToString();
            json[""validuntilblock""] = ValidUntilBlock;
            json[""signers""] = Signers.Select(p => p.ToJson()).ToArray();
            json[""attributes""] = Attributes.Select(p => p.ToJson()).ToArray();
            json[""script""] = Convert.ToBase64String(Script);
            json[""witnesses""] = Witnesses.Select(p => p.ToJson()).ToArray();
            return json;
        }

        /// <summary>
        /// Verifies the transaction.
        /// </summary>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> used to verify the transaction.</param>
        /// <param name=""snapshot"">The snapshot used to verify the transaction.</param>
        /// <param name=""context"">The <see cref=""TransactionVerificationContext""/> used to verify the transaction.</param>
        /// <returns>The result of the verification.</returns>
        public VerifyResult Verify(ProtocolSettings settings, DataCache snapshot, TransactionVerificationContext context)
        {
            VerifyResult result = VerifyStateIndependent(settings);
            if (result != VerifyResult.Succeed) return result;
            return VerifyStateDependent(settings, snapshot, context);
        }

        /// <summary>
        /// Verifies the state-dependent part of the transaction.
        /// </summary>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> used to verify the transaction.</param>
        /// <param name=""snapshot"">The snapshot used to verify the transaction.</param>
        /// <param name=""context"">The <see cref=""TransactionVerificationContext""/> used to verify the transaction.</param>
        /// <returns>The result of the verification.</returns>
        public virtual VerifyResult VerifyStateDependent(ProtocolSettings settings, DataCache snapshot, TransactionVerificationContext context)
        {
            uint height = NativeContract.Ledger.CurrentIndex(snapshot);
            if (ValidUntilBlock <= height || ValidUntilBlock > height + settings.MaxValidUntilBlockIncrement)
                return VerifyResult.Expired;
            UInt160[] hashes = GetScriptHashesForVerifying(snapshot);
            foreach (UInt160 hash in hashes)
                if (NativeContract.Policy.IsBlocked(snapshot, hash))
                    return VerifyResult.PolicyFail;
            if (!(context?.CheckTransaction(this, snapshot) ?? true)) return VerifyResult.InsufficientFunds;
            foreach (TransactionAttribute attribute in Attributes)
                if (!attribute.Verify(snapshot, this))
                    return VerifyResult.InvalidAttribute;
            long net_fee = NetworkFee - Size * NativeContract.Policy.GetFeePerByte(snapshot);
            if (net_fee < 0) return VerifyResult.InsufficientFunds;

            if (net_fee > MaxVerificationGas) net_fee = MaxVerificationGas;
            uint execFeeFactor = NativeContract.Policy.GetExecFeeFactor(snapshot);
            for (int i = 0; i < hashes.Length; i++)
            {
                if (witnesses[i].VerificationScript.IsSignatureContract())
                    net_fee -= execFeeFactor * SignatureContractCost();
                else if (witnesses[i].VerificationScript.IsMultiSigContract(out int m, out int n))
                {
                    net_fee -= execFeeFactor * MultiSignatureContractCost(m, n);
                }
                else
                {
                    if (!this.VerifyWitness(settings, snapshot, hashes[i], witnesses[i], net_fee, out long fee))
                        return VerifyResult.Invalid;
                    net_fee -= fee;
                }
                if (net_fee < 0) return VerifyResult.InsufficientFunds;
            }
            return VerifyResult.Succeed;
        }

        /// <summary>
        /// Verifies the state-independent part of the transaction.
        /// </summary>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> used to verify the transaction.</param>
        /// <returns>The result of the verification.</returns>
        public virtual VerifyResult VerifyStateIndependent(ProtocolSettings settings)
        {
            if (Size > MaxTransactionSize) return VerifyResult.OverSize;
            try
            {
                _ = new Script(Script, true);
            }
            catch (BadScriptException)
            {
                return VerifyResult.InvalidScript;
            }
            UInt160[] hashes = GetScriptHashesForVerifying(null);
            for (int i = 0; i < hashes.Length; i++)
            {
                if (witnesses[i].VerificationScript.IsSignatureContract())
                {
                    if (hashes[i] != witnesses[i].ScriptHash) return VerifyResult.Invalid;
                    var pubkey = witnesses[i].VerificationScript.AsSpan(2..35);
                    try
                    {
                        if (!Crypto.VerifySignature(this.GetSignData(settings.Network), witnesses[i].InvocationScript.AsSpan(2), pubkey, ECCurve.Secp256r1))
                            return VerifyResult.InvalidSignature;
                    }
                    catch
                    {
                        return VerifyResult.Invalid;
                    }
                }
                else if (witnesses[i].VerificationScript.IsMultiSigContract(out var m, out ECPoint[] points))
                {
                    if (hashes[i] != witnesses[i].ScriptHash) return VerifyResult.Invalid;
                    var signatures = GetMultiSignatures(witnesses[i].InvocationScript);
                    if (signatures.Length != m) return VerifyResult.Invalid;
                    var n = points.Length;
                    var message = this.GetSignData(settings.Network);
                    try
                    {
                        for (int x = 0, y = 0; x < m && y < n;)
                        {
                            if (Crypto.VerifySignature(message, signatures[x], points[y]))
                                x++;
                            y++;
                            if (m - x > n - y)
                                return VerifyResult.InvalidSignature;
                        }
                    }
                    catch
                    {
                        return VerifyResult.Invalid;
                    }
                }
            }
            return VerifyResult.Succeed;
        }

        public StackItem ToStackItem(ReferenceCounter referenceCounter)
        {
            return new Array(referenceCounter, new StackItem[]
            {
                // Computed properties
                Hash.ToArray(),

                // Transaction properties
                (int)Version,
                Nonce,
                Sender.ToArray(),
                SystemFee,
                NetworkFee,
                ValidUntilBlock,
                Script,
            });
        }

        private static byte[][] GetMultiSignatures(byte[] script)
        {
            int i = 0;
            var signatures = new List<byte[]>();
            while (i < script.Length)
            {
                if (script[i++] != (byte)OpCode.PUSHDATA1) return null;
                if (i + 65 > script.Length) return null;
                if (script[i++] != 64) return null;
                signatures.Add(script[i..(i + 64)]);
                i += 64;
            }
            return signatures.ToArray();
        }
    }",1,777 587 2000 58 2001 60 2000 62 44 2002 44 2003 123 331 777 601 704 2004 61 1507 59 331 777 601 704 2005 61 1503 59 773 574 2006 59 773 842 2007 59 773 726 2008 59 773 726 2009 59 773 842 2010 59 773 2011 91 93 2012 59 773 2013 91 93 2014 59 773 574 91 93 2015 59 773 2016 91 93 2017 59 331 777 601 704 2018 61 805 40 574 41 43 330 805 40 842 41 43 330 805 40 726 41 43 330 805 40 726 41 43 330 805 40 842 41 59 330 773 2019 60 2020 44 2013 91 93 62 2021 59 331 777 2013 91 93 2022 123 2023 328 2014 59 2024 123 2014 61 2025 59 2021 61 752 59 2026 61 752 59 2027 61 1500 59 125 125 331 777 726 2028 328 2029 47 2030 59 773 2031 2032 61 752 59 777 2031 2033 123 2034 123 688 40 2032 323 752 41 123 2032 61 823 46 2035 40 41 59 125 792 2032 59 125 125 2036 2002 46 2036 328 2036 46 2037 59 331 777 726 2029 330 123 2038 328 2009 59 2039 123 2009 61 2040 59 2032 61 752 59 125 125 331 777 842 2041 123 2042 328 2007 59 2043 123 2007 61 2044 59 2032 61 752 59 125 125 331 777 574 91 93 2045 123 2046 328 2015 59 2047 123 2015 61 2048 59 2032 61 752 59 2049 61 1500 59 125 125 331 777 2050 2051 328 2012 91 1500 93 46 2052 59 331 777 2011 91 93 2053 123 2054 328 2012 59 2055 123 2012 61 2056 59 2032 61 752 59 2057 61 1500 59 125 125 773 704 2058 59 777 704 2030 123 2059 123 688 40 2058 323 1500 41 123 2058 61 2018 43 2053 46 2060 40 41 43 330 2022 46 2060 40 41 43 330 2045 46 2060 40 41 43 330 2061 46 2060 40 41 59 330 125 792 2058 59 125 125 331 777 726 2062 330 123 2063 328 2008 59 2064 123 2008 61 2065 59 2032 61 752 59 125 125 331 777 842 2066 123 2067 328 2010 59 2068 123 2010 61 2069 59 2032 61 752 59 125 125 331 777 574 2070 123 2071 328 2006 59 2072 123 2006 61 2073 59 2032 61 752 59 125 125 777 2016 91 93 2074 123 2075 328 2017 59 2076 123 2017 61 2077 59 2058 61 1500 59 125 125 865 2078 46 2079 40 2080 2081 41 123 704 2082 61 45 1501 59 688 40 2081 46 2083 46 2084 41 2082 61 40 704 41 2081 46 2083 46 2085 59 2086 40 2081 41 59 2074 61 2081 46 2087 60 2016 62 40 2053 46 2088 41 59 688 40 2074 46 2088 340 2053 46 2088 41 825 744 2089 40 41 59 688 40 2082 325 1500 41 2058 61 40 704 41 2081 46 2083 46 2085 45 2082 59 125 773 809 2090 60 2013 62 2091 40 2080 2081 44 704 2092 41 123 704 2093 61 40 704 41 2081 46 2094 40 40 848 41 2092 41 59 2095 60 2096 62 2097 61 744 40 41 59 870 40 2093 338 62 1500 41 123 2013 2098 61 2013 46 2099 40 2081 41 59 688 40 33 2098 46 2100 307 33 2097 46 2101 40 2098 46 2020 41 41 825 744 2102 40 41 59 2103 792 2098 59 125 125 773 809 2090 60 2011 62 2104 40 2080 2081 44 704 2092 41 123 704 2105 61 40 704 41 2081 46 2106 40 40 848 41 2092 41 59 688 40 2105 323 1500 41 825 744 2107 40 41 59 2108 60 2050 62 2109 61 744 40 41 59 664 40 704 2110 61 1500 59 2110 60 2105 59 2110 349 41 123 2011 2111 61 2081 46 2112 60 2011 62 40 41 59 688 40 33 2109 46 2113 40 2111 46 2052 41 41 825 744 2107 40 41 59 2114 792 2111 59 125 125 777 865 2115 40 2080 2081 41 123 2070 61 2081 46 2116 40 41 59 688 40 2070 62 1500 41 825 744 2117 40 41 59 2041 61 2081 46 2118 40 41 59 2062 61 2081 46 2119 40 41 59 688 40 2062 60 1500 41 825 744 2117 40 41 59 2029 61 2081 46 2119 40 41 59 688 40 2029 60 1500 41 825 744 2117 40 41 59 688 40 2062 43 2029 60 2062 41 825 744 2117 40 41 59 2066 61 2081 46 2118 40 41 59 2053 61 2104 40 2081 44 2005 41 46 2120 40 41 59 2022 61 2091 40 2081 44 2005 45 2053 46 2121 41 46 2120 40 41 59 2045 61 2081 46 2122 40 859 46 2123 41 59 688 40 2045 46 2121 323 1500 41 825 744 2117 40 41 59 125 777 569 2124 40 2000 2125 41 123 688 40 2125 712 752 41 792 655 59 688 40 2126 40 823 44 2125 41 41 792 829 59 792 2033 46 2124 40 2125 46 2033 41 59 125 777 763 569 2124 40 755 2127 41 123 792 2124 40 2127 552 2000 41 59 125 865 2003 46 2128 40 2129 2130 41 123 825 744 2131 40 41 59 125 331 777 2132 2133 60 2132 62 40 41 2134 2132 58 2013 123 792 2135 60 2132 62 40 41 46 2136 40 41 59 125 331 777 2090 60 2132 62 2137 60 2132 62 40 41 2134 2132 58 2013 123 2021 343 61 2014 46 2138 40 2139 328 2139 46 2140 40 41 41 46 2141 40 2139 328 2139 46 2142 44 2139 328 2139 46 2143 40 41 41 59 688 40 2021 46 2144 40 836 40 2132 41 44 762 2145 2146 41 41 792 2146 46 2147 60 2132 62 40 41 59 792 2148 46 2149 60 2132 62 40 41 59 125 777 763 704 2150 40 41 123 792 2033 46 2150 40 41 59 125 777 2050 91 93 2151 40 2152 2153 41 123 792 2053 46 2154 40 2155 328 2155 46 2052 41 46 2156 40 41 59 125 865 2078 46 2157 40 2158 2159 41 123 40 40 2160 41 823 41 46 2161 40 2159 41 59 2159 46 2162 40 2074 41 59 125 865 2163 46 2164 40 2158 2159 41 123 2159 46 2165 40 2070 41 59 2159 46 2165 40 2041 41 59 2159 46 2165 40 2062 41 59 2159 46 2165 40 2029 41 59 2159 46 2165 40 2066 41 59 2159 46 2165 40 2053 41 59 2159 46 2165 40 2022 41 59 2159 46 2166 40 2045 41 59 125 331 777 2167 2168 40 2169 2170 41 123 2167 2171 61 744 40 41 59 2171 91 362 93 61 2033 46 2172 40 41 59 2171 91 362 93 61 2030 59 2171 91 362 93 61 2070 59 2171 91 362 93 61 2041 59 2171 91 362 93 61 2051 46 2173 40 2170 46 2174 41 59 2171 91 362 93 61 2062 46 2172 40 41 59 2171 91 362 93 61 2029 46 2172 40 41 59 2171 91 362 93 61 2066 59 2171 91 362 93 61 2053 46 2175 40 2176 328 2176 46 2168 40 41 41 46 2177 40 41 59 2171 91 362 93 61 2022 46 2175 40 2176 328 2176 46 2168 40 41 41 46 2177 40 41 59 2171 91 362 93 61 2178 46 2179 40 2045 41 59 2171 91 362 93 61 2074 46 2175 40 2176 328 2176 46 2168 40 41 41 46 2177 40 41 59 792 2171 59 125 331 777 2180 2181 40 2169 2170 44 2152 2153 44 2182 2183 41 123 2180 2184 61 2185 40 2170 41 59 688 40 2184 340 2180 46 2186 41 792 2184 59 792 2187 40 2170 44 2153 44 2183 41 59 125 331 777 864 2180 2188 40 2169 2170 44 2152 2153 44 2182 2183 41 123 842 2189 61 2190 46 2191 46 2192 40 2153 41 59 688 40 2066 329 2189 309 2066 62 2189 43 2170 46 2193 41 792 2180 46 2194 59 2050 91 93 2195 61 2151 40 2153 41 59 665 40 2050 2196 696 2195 41 688 40 2190 46 2197 46 2198 40 2153 44 2196 41 41 792 2180 46 2199 59 688 40 33 40 2183 346 2200 40 823 44 2153 41 343 829 41 41 792 2180 46 2201 59 665 40 2013 2202 696 2022 41 688 40 33 2202 46 2181 40 2153 44 823 41 41 792 2180 46 2203 59 726 2204 61 2029 45 2030 42 2190 46 2197 46 2205 40 2153 41 59 688 40 2204 60 1500 41 792 2180 46 2201 59 688 40 2204 62 2206 41 2204 61 2206 59 842 2207 61 2190 46 2197 46 2208 40 2153 41 59 664 40 704 2209 61 1500 59 2209 60 2195 46 2210 59 2209 349 41 123 688 40 2017 91 2209 93 46 2211 46 2212 40 41 41 2204 337 2207 42 2213 40 41 59 630 688 40 2017 91 2209 93 46 2211 46 2214 40 762 704 2215 44 762 704 2216 41 41 123 2204 337 2207 42 2217 40 2215 44 2216 41 59 125 630 123 688 40 33 823 46 2218 40 2170 44 2153 44 2195 91 2209 93 44 2017 91 2209 93 44 2204 44 762 726 2219 41 41 792 2180 46 2220 59 2204 337 2219 59 125 688 40 2204 60 1500 41 792 2180 46 2201 59 125 792 2180 46 2221 59 125 331 777 864 2180 2222 40 2169 2170 41 123 688 40 2030 62 2004 41 792 2180 46 2223 59 830 123 2224 61 744 2045 40 2045 44 829 41 59 125 580 40 2225 41 123 792 2180 46 2226 59 125 2050 91 93 2227 61 2151 40 752 41 59 664 40 704 2228 61 1500 59 2228 60 2227 46 2229 59 2228 349 41 123 688 40 2017 91 2228 93 46 2230 46 2231 40 41 41 123 688 40 2227 91 2228 93 340 2017 91 2228 93 46 2232 41 792 2180 46 2233 59 2234 2235 61 2017 91 2228 93 46 2230 46 2236 40 1502 41 59 830 123 688 40 33 2237 46 2238 40 823 46 2239 40 2170 46 2240 41 44 2017 91 2228 93 46 2241 46 2236 40 1502 41 44 2235 44 2242 46 2243 41 41 792 2180 46 2244 59 125 580 123 792 2180 46 2233 59 125 125 630 688 40 2017 91 2228 93 46 2230 46 2245 40 762 2246 2247 44 762 2248 91 93 2249 41 41 123 688 40 2227 91 2228 93 340 2017 91 2228 93 46 2250 41 792 2180 46 2251 59 2246 2252 61 2253 40 2017 91 2228 93 46 2254 41 59 688 40 2252 46 2229 340 2247 41 792 2180 46 2251 59 2246 2255 61 2249 46 2229 59 2246 2256 61 823 46 2257 40 2170 46 2258 41 59 830 123 664 40 704 2259 61 1500 44 2260 61 1500 59 2259 60 2247 307 2260 60 2255 59 41 123 688 40 2261 46 2262 40 2256 44 2252 91 2259 93 44 2249 91 2260 93 41 41 2259 349 59 2260 349 59 688 40 2247 45 2259 62 2255 45 2260 41 792 2180 46 2263 59 125 125 580 123 792 2180 46 2251 59 125 125 125 792 2180 46 2264 59 125 777 2129 2265 40 2266 2267 41 123 792 744 2268 40 2267 44 744 2129 91 93 123 330 2033 46 2269 40 41 44 330 40 704 41 2070 44 2041 44 2051 46 2269 40 41 44 2062 44 2029 44 2066 44 2045 44 125 41 59 125 773 809 574 91 93 91 93 2270 40 574 91 93 2015 41 123 704 2271 61 1500 59 2272 2273 61 744 2274 60 574 91 93 62 40 41 59 870 40 2271 60 2015 46 2275 41 123 688 40 2015 91 2271 349 93 340 40 574 41 2276 46 2277 41 792 752 59 688 40 2271 43 1503 62 2015 46 2275 41 792 752 59 688 40 2015 91 2271 349 93 340 1503 41 792 752 59 2273 46 2278 40 2015 91 2271 46 46 40 2271 43 1503 41 93 41 59 2271 348 1503 59 125 792 2273 46 2279 40 41 59 125 125 ,"{'AvgLine': 6, 'CountLine': 451, 'CountStmt': 263, 'MaxNesting': 5, 'AvgLineCode': 6, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 184, 'MaxEssential': 14, 'SumEssential': 67, 'AvgCyclomatic': 2, 'CountLineCode': 337, 'CountStmtDecl': 93, 'MaxCyclomatic': 15, 'SumCyclomatic': 75, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 38, 'CountSemicolon': 172, 'CountDeclMethod': 42, 'CountLineCodeExe': 170, 'CountLineComment': 87, 'CountClassCoupled': 39, 'CountClassDerived': 0, 'CountDeclProperty': 14, 'CountLineCodeDecl': 94, 'CountLineInactive': 0, 'CountDeclMethodAll': 48, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.26', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 16, 'SumCyclomaticStrict': 78, 'CountDeclClassMethod': 3, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 34, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 15, 'PercentLackOfCohesion': 92, 'SumCyclomaticModified': 75, 'CountDeclClassVariable': 3, 'CountDeclMethodPrivate': 8, 'CountDeclInstanceMethod': 39, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 30, 'CountDeclInstanceVariable': 12, 'PercentLackOfCohesionModified': 75, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 12, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
80016,C#,"    public class RIPEMD160Managed : HashAlgorithm
    {
        private readonly byte[] _buffer;
        private long _count; // Number of bytes in the hashed message
        private readonly uint[] _stateMD160;
        private readonly uint[] _blockDWords;

        public override int HashSize => 160;

        /// <summary>
        /// Initializes a new instance of the <see cref=""RIPEMD160Managed""/> class.
        /// </summary>
        public RIPEMD160Managed()
        {
            _stateMD160 = new uint[5];
            _blockDWords = new uint[16];
            _buffer = new byte[64];

            InitializeState();
        }

        public override void Initialize()
        {
            InitializeState();

            // Zeroize potentially sensitive information.
            Array.Clear(_blockDWords, 0, _blockDWords.Length);
            Array.Clear(_buffer, 0, _buffer.Length);
        }

        [SecuritySafeCritical]
        protected override void HashCore(byte[] rgb, int ibStart, int cbSize)
        {
            HashData(rgb, ibStart, cbSize);
        }

        [SecuritySafeCritical]
        protected override byte[] HashFinal()
        {
            return EndHash();
        }

        private void InitializeState()
        {
            _count = 0;

            // Use the same chaining values (IVs) as in SHA1, 
            // The convention is little endian however (same as MD4)
            _stateMD160[0] = 0x67452301;
            _stateMD160[1] = 0xefcdab89;
            _stateMD160[2] = 0x98badcfe;
            _stateMD160[3] = 0x10325476;
            _stateMD160[4] = 0xc3d2e1f0;
        }

        [SecurityCritical]
        private unsafe void HashData(byte[] partIn, int ibStart, int cbSize)
        {
            int bufferLen;
            int partInLen = cbSize;
            int partInBase = ibStart;

            /* Compute length of buffer */
            bufferLen = (int)(_count & 0x3f);

            /* Update number of bytes */
            _count += partInLen;

            fixed (uint* stateMD160 = _stateMD160)
            {
                fixed (byte* buffer = _buffer)
                {
                    fixed (uint* blockDWords = _blockDWords)
                    {
                        if ((bufferLen > 0) && (bufferLen + partInLen >= 64))
                        {
                            Buffer.BlockCopy(partIn, partInBase, _buffer, bufferLen, 64 - bufferLen);
                            partInBase += (64 - bufferLen);
                            partInLen -= (64 - bufferLen);
                            MDTransform(blockDWords, stateMD160, buffer);
                            bufferLen = 0;
                        }

                        /* Copy input to temporary buffer and hash */
                        while (partInLen >= 64)
                        {
                            Buffer.BlockCopy(partIn, partInBase, _buffer, 0, 64);
                            partInBase += 64;
                            partInLen -= 64;
                            MDTransform(blockDWords, stateMD160, buffer);
                        }

                        if (partInLen > 0)
                        {
                            Buffer.BlockCopy(partIn, partInBase, _buffer, bufferLen, partInLen);
                        }
                    }
                }
            }
        }

        [SecurityCritical]
        private byte[] EndHash()
        {
            byte[] pad;
            int padLen;
            long bitCount;
            byte[] hash = new byte[20];

            /* Compute padding: 80 00 00 ... 00 00 <bit count>
             */

            padLen = 64 - (int)(_count & 0x3f);
            if (padLen <= 8)
                padLen += 64;

            pad = new byte[padLen];
            pad[0] = 0x80;

            //  Convert count to bit count
            bitCount = _count * 8;

            // The convention for RIPEMD is little endian (the same as MD4)
            pad[padLen - 1] = (byte)((bitCount >> 56) & 0xff);
            pad[padLen - 2] = (byte)((bitCount >> 48) & 0xff);
            pad[padLen - 3] = (byte)((bitCount >> 40) & 0xff);
            pad[padLen - 4] = (byte)((bitCount >> 32) & 0xff);
            pad[padLen - 5] = (byte)((bitCount >> 24) & 0xff);
            pad[padLen - 6] = (byte)((bitCount >> 16) & 0xff);
            pad[padLen - 7] = (byte)((bitCount >> 8) & 0xff);
            pad[padLen - 8] = (byte)((bitCount >> 0) & 0xff);

            /* Digest padding */
            HashData(pad, 0, pad.Length);

            /* Store digest */
            DWORDToLittleEndian(hash, _stateMD160, 5);

            return hash;
        }

        [SecurityCritical]
        private static unsafe void MDTransform(uint* blockDWords, uint* state, byte* block)
        {
            uint aa = state[0];
            uint bb = state[1];
            uint cc = state[2];
            uint dd = state[3];
            uint ee = state[4];

            uint aaa = aa;
            uint bbb = bb;
            uint ccc = cc;
            uint ddd = dd;
            uint eee = ee;

            DWORDFromLittleEndian(blockDWords, 16, block);

            /*
                As we don't have macros in C# and we don't want to pay the cost of a function call
                (which BTW is quite important here as we would have to pass 5 args by ref in 
                16 * 10 = 160 function calls)
                we'll prefer a less compact code to a less performant code
            */

            // Left Round 1 
            // FF(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[0], 11);
            aa += blockDWords[0] + F(bb, cc, dd);
            aa = (aa << 11 | aa >> (32 - 11)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // FF(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[1], 14);
            ee += blockDWords[1] + F(aa, bb, cc);
            ee = (ee << 14 | ee >> (32 - 14)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // FF(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[2], 15);
            dd += blockDWords[2] + F(ee, aa, bb);
            dd = (dd << 15 | dd >> (32 - 15)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // FF(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[3], 12);
            cc += blockDWords[3] + F(dd, ee, aa);
            cc = (cc << 12 | cc >> (32 - 12)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // FF(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[4], 5);
            bb += blockDWords[4] + F(cc, dd, ee);
            bb = (bb << 5 | bb >> (32 - 5)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // FF(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[5], 8);
            aa += blockDWords[5] + F(bb, cc, dd);
            aa = (aa << 8 | aa >> (32 - 8)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // FF(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[6], 7);
            ee += blockDWords[6] + F(aa, bb, cc);
            ee = (ee << 7 | ee >> (32 - 7)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // FF(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[7], 9);
            dd += blockDWords[7] + F(ee, aa, bb);
            dd = (dd << 9 | dd >> (32 - 9)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // FF(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[8], 11);
            cc += blockDWords[8] + F(dd, ee, aa);
            cc = (cc << 11 | cc >> (32 - 11)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // FF(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[9], 13);
            bb += blockDWords[9] + F(cc, dd, ee);
            bb = (bb << 13 | bb >> (32 - 13)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // FF(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[10], 14);
            aa += blockDWords[10] + F(bb, cc, dd);
            aa = (aa << 14 | aa >> (32 - 14)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // FF(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[11], 15);
            ee += blockDWords[11] + F(aa, bb, cc);
            ee = (ee << 15 | ee >> (32 - 15)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // FF(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[12], 6);
            dd += blockDWords[12] + F(ee, aa, bb);
            dd = (dd << 6 | dd >> (32 - 6)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // FF(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[13], 7);
            cc += blockDWords[13] + F(dd, ee, aa);
            cc = (cc << 7 | cc >> (32 - 7)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // FF(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[14], 9);
            bb += blockDWords[14] + F(cc, dd, ee);
            bb = (bb << 9 | bb >> (32 - 9)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // FF(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[15], 8);
            aa += blockDWords[15] + F(bb, cc, dd);
            aa = (aa << 8 | aa >> (32 - 8)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // Left Round 2 
            // GG(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[7], 7);
            ee += G(aa, bb, cc) + blockDWords[7] + 0x5a827999;
            ee = (ee << 7 | ee >> (32 - 7)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // GG(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[4], 6);
            dd += G(ee, aa, bb) + blockDWords[4] + 0x5a827999;
            dd = (dd << 6 | dd >> (32 - 6)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // GG(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[13], 8);
            cc += G(dd, ee, aa) + blockDWords[13] + 0x5a827999;
            cc = (cc << 8 | cc >> (32 - 8)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // GG(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[1], 13);
            bb += G(cc, dd, ee) + blockDWords[1] + 0x5a827999;
            bb = (bb << 13 | bb >> (32 - 13)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // GG(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[10], 11);
            aa += G(bb, cc, dd) + blockDWords[10] + 0x5a827999;
            aa = (aa << 11 | aa >> (32 - 11)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // GG(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[6], 9);
            ee += G(aa, bb, cc) + blockDWords[6] + 0x5a827999;
            ee = (ee << 9 | ee >> (32 - 9)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // GG(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[15], 7);
            dd += G(ee, aa, bb) + blockDWords[15] + 0x5a827999;
            dd = (dd << 7 | dd >> (32 - 7)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // GG(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[3], 15);
            cc += G(dd, ee, aa) + blockDWords[3] + 0x5a827999;
            cc = (cc << 15 | cc >> (32 - 15)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // GG(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[12], 7);
            bb += G(cc, dd, ee) + blockDWords[12] + 0x5a827999;
            bb = (bb << 7 | bb >> (32 - 7)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // GG(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[0], 12);
            aa += G(bb, cc, dd) + blockDWords[0] + 0x5a827999;
            aa = (aa << 12 | aa >> (32 - 12)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // GG(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[9], 15);
            ee += G(aa, bb, cc) + blockDWords[9] + 0x5a827999;
            ee = (ee << 15 | ee >> (32 - 15)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // GG(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[5], 9);
            dd += G(ee, aa, bb) + blockDWords[5] + 0x5a827999;
            dd = (dd << 9 | dd >> (32 - 9)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // GG(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[2], 11);
            cc += G(dd, ee, aa) + blockDWords[2] + 0x5a827999;
            cc = (cc << 11 | cc >> (32 - 11)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // GG(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[14], 7);
            bb += G(cc, dd, ee) + blockDWords[14] + 0x5a827999;
            bb = (bb << 7 | bb >> (32 - 7)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // GG(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[11], 13);
            aa += G(bb, cc, dd) + blockDWords[11] + 0x5a827999;
            aa = (aa << 13 | aa >> (32 - 13)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // GG(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[8], 12);
            ee += G(aa, bb, cc) + blockDWords[8] + 0x5a827999;
            ee = (ee << 12 | ee >> (32 - 12)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // Left Round 3 
            // HH(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[3], 11);
            dd += H(ee, aa, bb) + blockDWords[3] + 0x6ed9eba1;
            dd = (dd << 11 | dd >> (32 - 11)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // HH(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[10], 13);
            cc += H(dd, ee, aa) + blockDWords[10] + 0x6ed9eba1;
            cc = (cc << 13 | cc >> (32 - 13)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // HH(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[14], 6);
            bb += H(cc, dd, ee) + blockDWords[14] + 0x6ed9eba1;
            bb = (bb << 6 | bb >> (32 - 6)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // HH(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[4], 7);
            aa += H(bb, cc, dd) + blockDWords[4] + 0x6ed9eba1;
            aa = (aa << 7 | aa >> (32 - 7)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // HH(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[9], 14);
            ee += H(aa, bb, cc) + blockDWords[9] + 0x6ed9eba1;
            ee = (ee << 14 | ee >> (32 - 14)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // HH(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[15], 9);
            dd += H(ee, aa, bb) + blockDWords[15] + 0x6ed9eba1;
            dd = (dd << 9 | dd >> (32 - 9)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // HH(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[8], 13);
            cc += H(dd, ee, aa) + blockDWords[8] + 0x6ed9eba1;
            cc = (cc << 13 | cc >> (32 - 13)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // HH(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[1], 15);
            bb += H(cc, dd, ee) + blockDWords[1] + 0x6ed9eba1;
            bb = (bb << 15 | bb >> (32 - 15)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // HH(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[2], 14);
            aa += H(bb, cc, dd) + blockDWords[2] + 0x6ed9eba1;
            aa = (aa << 14 | aa >> (32 - 14)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // HH(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[7], 8);
            ee += H(aa, bb, cc) + blockDWords[7] + 0x6ed9eba1;
            ee = (ee << 8 | ee >> (32 - 8)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // HH(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[0], 13);
            dd += H(ee, aa, bb) + blockDWords[0] + 0x6ed9eba1;
            dd = (dd << 13 | dd >> (32 - 13)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // HH(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[6], 6);
            cc += H(dd, ee, aa) + blockDWords[6] + 0x6ed9eba1;
            cc = (cc << 6 | cc >> (32 - 6)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // HH(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[13], 5);
            bb += H(cc, dd, ee) + blockDWords[13] + 0x6ed9eba1;
            bb = (bb << 5 | bb >> (32 - 5)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // HH(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[11], 12);
            aa += H(bb, cc, dd) + blockDWords[11] + 0x6ed9eba1;
            aa = (aa << 12 | aa >> (32 - 12)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // HH(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[5], 7);
            ee += H(aa, bb, cc) + blockDWords[5] + 0x6ed9eba1;
            ee = (ee << 7 | ee >> (32 - 7)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // HH(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[12], 5);
            dd += H(ee, aa, bb) + blockDWords[12] + 0x6ed9eba1;
            dd = (dd << 5 | dd >> (32 - 5)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // Left Round 4 
            // II(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[1], 11);
            cc += I(dd, ee, aa) + blockDWords[1] + 0x8f1bbcdc;
            cc = (cc << 11 | cc >> (32 - 11)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // II(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[9], 12);
            bb += I(cc, dd, ee) + blockDWords[9] + 0x8f1bbcdc;
            bb = (bb << 12 | bb >> (32 - 12)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // II(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[11], 14);
            aa += I(bb, cc, dd) + blockDWords[11] + 0x8f1bbcdc;
            aa = (aa << 14 | aa >> (32 - 14)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // II(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[10], 15);
            ee += I(aa, bb, cc) + blockDWords[10] + 0x8f1bbcdc;
            ee = (ee << 15 | ee >> (32 - 15)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // II(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[0], 14);
            dd += I(ee, aa, bb) + blockDWords[0] + 0x8f1bbcdc;
            dd = (dd << 14 | dd >> (32 - 14)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // II(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[8], 15);
            cc += I(dd, ee, aa) + blockDWords[8] + 0x8f1bbcdc;
            cc = (cc << 15 | cc >> (32 - 15)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // II(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[12], 9);
            bb += I(cc, dd, ee) + blockDWords[12] + 0x8f1bbcdc;
            bb = (bb << 9 | bb >> (32 - 9)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // II(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[4], 8);
            aa += I(bb, cc, dd) + blockDWords[4] + 0x8f1bbcdc;
            aa = (aa << 8 | aa >> (32 - 8)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // II(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[13], 9);
            ee += I(aa, bb, cc) + blockDWords[13] + 0x8f1bbcdc;
            ee = (ee << 9 | ee >> (32 - 9)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // II(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[3], 14);
            dd += I(ee, aa, bb) + blockDWords[3] + 0x8f1bbcdc;
            dd = (dd << 14 | dd >> (32 - 14)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // II(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[7], 5);
            cc += I(dd, ee, aa) + blockDWords[7] + 0x8f1bbcdc;
            cc = (cc << 5 | cc >> (32 - 5)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // II(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[15], 6);
            bb += I(cc, dd, ee) + blockDWords[15] + 0x8f1bbcdc;
            bb = (bb << 6 | bb >> (32 - 6)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // II(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[14], 8);
            aa += I(bb, cc, dd) + blockDWords[14] + 0x8f1bbcdc;
            aa = (aa << 8 | aa >> (32 - 8)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // II(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[5], 6);
            ee += I(aa, bb, cc) + blockDWords[5] + 0x8f1bbcdc;
            ee = (ee << 6 | ee >> (32 - 6)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // II(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[6], 5);
            dd += I(ee, aa, bb) + blockDWords[6] + 0x8f1bbcdc;
            dd = (dd << 5 | dd >> (32 - 5)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // II(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[2], 12);
            cc += I(dd, ee, aa) + blockDWords[2] + 0x8f1bbcdc;
            cc = (cc << 12 | cc >> (32 - 12)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // Left Round 5 
            // JJ(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[4], 9);
            bb += J(cc, dd, ee) + blockDWords[4] + 0xa953fd4e;
            bb = (bb << 9 | bb >> (32 - 9)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // JJ(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[0], 15);
            aa += J(bb, cc, dd) + blockDWords[0] + 0xa953fd4e;
            aa = (aa << 15 | aa >> (32 - 15)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // JJ(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[5], 5);
            ee += J(aa, bb, cc) + blockDWords[5] + 0xa953fd4e;
            ee = (ee << 5 | ee >> (32 - 5)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // JJ(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[9], 11);
            dd += J(ee, aa, bb) + blockDWords[9] + 0xa953fd4e;
            dd = (dd << 11 | dd >> (32 - 11)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // JJ(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[7], 6);
            cc += J(dd, ee, aa) + blockDWords[7] + 0xa953fd4e;
            cc = (cc << 6 | cc >> (32 - 6)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // JJ(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[12], 8);
            bb += J(cc, dd, ee) + blockDWords[12] + 0xa953fd4e;
            bb = (bb << 8 | bb >> (32 - 8)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // JJ(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[2], 13);
            aa += J(bb, cc, dd) + blockDWords[2] + 0xa953fd4e;
            aa = (aa << 13 | aa >> (32 - 13)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // JJ(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[10], 12);
            ee += J(aa, bb, cc) + blockDWords[10] + 0xa953fd4e;
            ee = (ee << 12 | ee >> (32 - 12)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // JJ(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[14], 5);
            dd += J(ee, aa, bb) + blockDWords[14] + 0xa953fd4e;
            dd = (dd << 5 | dd >> (32 - 5)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // JJ(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[1], 12);
            cc += J(dd, ee, aa) + blockDWords[1] + 0xa953fd4e;
            cc = (cc << 12 | cc >> (32 - 12)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // JJ(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[3], 13);
            bb += J(cc, dd, ee) + blockDWords[3] + 0xa953fd4e;
            bb = (bb << 13 | bb >> (32 - 13)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // JJ(ref aa, ref bb, ref cc, ref dd, ref ee, blockDWords[8], 14);
            aa += J(bb, cc, dd) + blockDWords[8] + 0xa953fd4e;
            aa = (aa << 14 | aa >> (32 - 14)) + ee;
            cc = (cc << 10 | cc >> (32 - 10));

            // JJ(ref ee, ref aa, ref bb, ref cc, ref dd, blockDWords[11], 11);
            ee += J(aa, bb, cc) + blockDWords[11] + 0xa953fd4e;
            ee = (ee << 11 | ee >> (32 - 11)) + dd;
            bb = (bb << 10 | bb >> (32 - 10));

            // JJ(ref dd, ref ee, ref aa, ref bb, ref cc, blockDWords[6], 8);
            dd += J(ee, aa, bb) + blockDWords[6] + 0xa953fd4e;
            dd = (dd << 8 | dd >> (32 - 8)) + cc;
            aa = (aa << 10 | aa >> (32 - 10));

            // JJ(ref cc, ref dd, ref ee, ref aa, ref bb, blockDWords[15], 5);
            cc += J(dd, ee, aa) + blockDWords[15] + 0xa953fd4e;
            cc = (cc << 5 | cc >> (32 - 5)) + bb;
            ee = (ee << 10 | ee >> (32 - 10));

            // JJ(ref bb, ref cc, ref dd, ref ee, ref aa, blockDWords[13], 6);
            bb += J(cc, dd, ee) + blockDWords[13] + 0xa953fd4e;
            bb = (bb << 6 | bb >> (32 - 6)) + aa;
            dd = (dd << 10 | dd >> (32 - 10));

            // Parallel Right Round 1 
            // JJJ(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[5], 8);
            aaa += J(bbb, ccc, ddd) + blockDWords[5] + 0x50a28be6;
            aaa = (aaa << 8 | aaa >> (32 - 8)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // JJJ(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[14], 9);
            eee += J(aaa, bbb, ccc) + blockDWords[14] + 0x50a28be6;
            eee = (eee << 9 | eee >> (32 - 9)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // JJJ(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[7], 9);
            ddd += J(eee, aaa, bbb) + blockDWords[7] + 0x50a28be6;
            ddd = (ddd << 9 | ddd >> (32 - 9)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // JJJ(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[0], 11);
            ccc += J(ddd, eee, aaa) + blockDWords[0] + 0x50a28be6;
            ccc = (ccc << 11 | ccc >> (32 - 11)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // JJJ(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[9], 13);
            bbb += J(ccc, ddd, eee) + blockDWords[9] + 0x50a28be6;
            bbb = (bbb << 13 | bbb >> (32 - 13)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // JJJ(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[2], 15);
            aaa += J(bbb, ccc, ddd) + blockDWords[2] + 0x50a28be6;
            aaa = (aaa << 15 | aaa >> (32 - 15)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // JJJ(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[11], 15);
            eee += J(aaa, bbb, ccc) + blockDWords[11] + 0x50a28be6;
            eee = (eee << 15 | eee >> (32 - 15)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // JJJ(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[4], 5);
            ddd += J(eee, aaa, bbb) + blockDWords[4] + 0x50a28be6;
            ddd = (ddd << 5 | ddd >> (32 - 5)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // JJJ(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[13], 7);
            ccc += J(ddd, eee, aaa) + blockDWords[13] + 0x50a28be6;
            ccc = (ccc << 7 | ccc >> (32 - 7)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // JJJ(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[6], 7);
            bbb += J(ccc, ddd, eee) + blockDWords[6] + 0x50a28be6;
            bbb = (bbb << 7 | bbb >> (32 - 7)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // JJJ(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[15], 8);
            aaa += J(bbb, ccc, ddd) + blockDWords[15] + 0x50a28be6;
            aaa = (aaa << 8 | aaa >> (32 - 8)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // JJJ(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[8], 11);
            eee += J(aaa, bbb, ccc) + blockDWords[8] + 0x50a28be6;
            eee = (eee << 11 | eee >> (32 - 11)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // JJJ(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[1], 14);
            ddd += J(eee, aaa, bbb) + blockDWords[1] + 0x50a28be6;
            ddd = (ddd << 14 | ddd >> (32 - 14)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // JJJ(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[10], 14);
            ccc += J(ddd, eee, aaa) + blockDWords[10] + 0x50a28be6;
            ccc = (ccc << 14 | ccc >> (32 - 14)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // JJJ(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[3], 12);
            bbb += J(ccc, ddd, eee) + blockDWords[3] + 0x50a28be6;
            bbb = (bbb << 12 | bbb >> (32 - 12)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // JJJ(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[12], 6);
            aaa += J(bbb, ccc, ddd) + blockDWords[12] + 0x50a28be6;
            aaa = (aaa << 6 | aaa >> (32 - 6)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // Parallel Right Round 2 
            // III(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[6], 9); 
            eee += I(aaa, bbb, ccc) + blockDWords[6] + 0x5c4dd124;
            eee = (eee << 9 | eee >> (32 - 9)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // III(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[11], 13);
            ddd += I(eee, aaa, bbb) + blockDWords[11] + 0x5c4dd124;
            ddd = (ddd << 13 | ddd >> (32 - 13)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // III(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[3], 15);
            ccc += I(ddd, eee, aaa) + blockDWords[3] + 0x5c4dd124;
            ccc = (ccc << 15 | ccc >> (32 - 15)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // III(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[7], 7);
            bbb += I(ccc, ddd, eee) + blockDWords[7] + 0x5c4dd124;
            bbb = (bbb << 7 | bbb >> (32 - 7)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // III(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[0], 12);
            aaa += I(bbb, ccc, ddd) + blockDWords[0] + 0x5c4dd124;
            aaa = (aaa << 12 | aaa >> (32 - 12)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // III(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[13], 8);
            eee += I(aaa, bbb, ccc) + blockDWords[13] + 0x5c4dd124;
            eee = (eee << 8 | eee >> (32 - 8)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // III(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[5], 9);
            ddd += I(eee, aaa, bbb) + blockDWords[5] + 0x5c4dd124;
            ddd = (ddd << 9 | ddd >> (32 - 9)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // III(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[10], 11);
            ccc += I(ddd, eee, aaa) + blockDWords[10] + 0x5c4dd124;
            ccc = (ccc << 11 | ccc >> (32 - 11)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // III(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[14], 7);
            bbb += I(ccc, ddd, eee) + blockDWords[14] + 0x5c4dd124;
            bbb = (bbb << 7 | bbb >> (32 - 7)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // III(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[15], 7);
            aaa += I(bbb, ccc, ddd) + blockDWords[15] + 0x5c4dd124;
            aaa = (aaa << 7 | aaa >> (32 - 7)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // III(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[8], 12);
            eee += I(aaa, bbb, ccc) + blockDWords[8] + 0x5c4dd124;
            eee = (eee << 12 | eee >> (32 - 12)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // III(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[12], 7);
            ddd += I(eee, aaa, bbb) + blockDWords[12] + 0x5c4dd124;
            ddd = (ddd << 7 | ddd >> (32 - 7)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // III(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[4], 6);
            ccc += I(ddd, eee, aaa) + blockDWords[4] + 0x5c4dd124;
            ccc = (ccc << 6 | ccc >> (32 - 6)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // III(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[9], 15);
            bbb += I(ccc, ddd, eee) + blockDWords[9] + 0x5c4dd124;
            bbb = (bbb << 15 | bbb >> (32 - 15)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // III(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[1], 13);
            aaa += I(bbb, ccc, ddd) + blockDWords[1] + 0x5c4dd124;
            aaa = (aaa << 13 | aaa >> (32 - 13)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // III(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[2], 11);
            eee += I(aaa, bbb, ccc) + blockDWords[2] + 0x5c4dd124;
            eee = (eee << 11 | eee >> (32 - 11)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // Parallel Right Round 3
            // HHH(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[15], 9);
            ddd += H(eee, aaa, bbb) + blockDWords[15] + 0x6d703ef3;
            ddd = (ddd << 9 | ddd >> (32 - 9)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // HHH(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[5], 7);
            ccc += H(ddd, eee, aaa) + blockDWords[5] + 0x6d703ef3;
            ccc = (ccc << 7 | ccc >> (32 - 7)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // HHH(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[1], 15);
            bbb += H(ccc, ddd, eee) + blockDWords[1] + 0x6d703ef3;
            bbb = (bbb << 15 | bbb >> (32 - 15)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // HHH(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[3], 11);
            aaa += H(bbb, ccc, ddd) + blockDWords[3] + 0x6d703ef3;
            aaa = (aaa << 11 | aaa >> (32 - 11)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // HHH(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[7], 8);
            eee += H(aaa, bbb, ccc) + blockDWords[7] + 0x6d703ef3;
            eee = (eee << 8 | eee >> (32 - 8)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // HHH(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[14], 6);
            ddd += H(eee, aaa, bbb) + blockDWords[14] + 0x6d703ef3;
            ddd = (ddd << 6 | ddd >> (32 - 6)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // HHH(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[6], 6);
            ccc += H(ddd, eee, aaa) + blockDWords[6] + 0x6d703ef3;
            ccc = (ccc << 6 | ccc >> (32 - 6)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // HHH(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[9], 14);
            bbb += H(ccc, ddd, eee) + blockDWords[9] + 0x6d703ef3;
            bbb = (bbb << 14 | bbb >> (32 - 14)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // HHH(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[11], 12);
            aaa += H(bbb, ccc, ddd) + blockDWords[11] + 0x6d703ef3;
            aaa = (aaa << 12 | aaa >> (32 - 12)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // HHH(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[8], 13);
            eee += H(aaa, bbb, ccc) + blockDWords[8] + 0x6d703ef3;
            eee = (eee << 13 | eee >> (32 - 13)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // HHH(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[12], 5);
            ddd += H(eee, aaa, bbb) + blockDWords[12] + 0x6d703ef3;
            ddd = (ddd << 5 | ddd >> (32 - 5)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // HHH(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[2], 14);
            ccc += H(ddd, eee, aaa) + blockDWords[2] + 0x6d703ef3;
            ccc = (ccc << 14 | ccc >> (32 - 14)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // HHH(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[10], 13);
            bbb += H(ccc, ddd, eee) + blockDWords[10] + 0x6d703ef3;
            bbb = (bbb << 13 | bbb >> (32 - 13)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // HHH(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[0], 13);
            aaa += H(bbb, ccc, ddd) + blockDWords[0] + 0x6d703ef3;
            aaa = (aaa << 13 | aaa >> (32 - 13)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // HHH(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[4], 7);
            eee += H(aaa, bbb, ccc) + blockDWords[4] + 0x6d703ef3;
            eee = (eee << 7 | eee >> (32 - 7)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // HHH(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[13], 5);
            ddd += H(eee, aaa, bbb) + blockDWords[13] + 0x6d703ef3;
            ddd = (ddd << 5 | ddd >> (32 - 5)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // Parallel Right Round 4
            // GGG(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[8], 15);
            ccc += G(ddd, eee, aaa) + blockDWords[8] + 0x7a6d76e9;
            ccc = (ccc << 15 | ccc >> (32 - 15)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // GGG(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[6], 5);
            bbb += G(ccc, ddd, eee) + blockDWords[6] + 0x7a6d76e9;
            bbb = (bbb << 5 | bbb >> (32 - 5)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // GGG(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[4], 8);
            aaa += G(bbb, ccc, ddd) + blockDWords[4] + 0x7a6d76e9;
            aaa = (aaa << 8 | aaa >> (32 - 8)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // GGG(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[1], 11);
            eee += G(aaa, bbb, ccc) + blockDWords[1] + 0x7a6d76e9;
            eee = (eee << 11 | eee >> (32 - 11)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // GGG(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[3], 14);
            ddd += G(eee, aaa, bbb) + blockDWords[3] + 0x7a6d76e9;
            ddd = (ddd << 14 | ddd >> (32 - 14)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // GGG(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[11], 14);
            ccc += G(ddd, eee, aaa) + blockDWords[11] + 0x7a6d76e9;
            ccc = (ccc << 14 | ccc >> (32 - 14)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // GGG(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[15], 6);
            bbb += G(ccc, ddd, eee) + blockDWords[15] + 0x7a6d76e9;
            bbb = (bbb << 6 | bbb >> (32 - 6)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // GGG(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[0], 14);
            aaa += G(bbb, ccc, ddd) + blockDWords[0] + 0x7a6d76e9;
            aaa = (aaa << 14 | aaa >> (32 - 14)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // GGG(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[5], 6);
            eee += G(aaa, bbb, ccc) + blockDWords[5] + 0x7a6d76e9;
            eee = (eee << 6 | eee >> (32 - 6)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // GGG(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[12], 9);
            ddd += G(eee, aaa, bbb) + blockDWords[12] + 0x7a6d76e9;
            ddd = (ddd << 9 | ddd >> (32 - 9)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // GGG(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[2], 12);
            ccc += G(ddd, eee, aaa) + blockDWords[2] + 0x7a6d76e9;
            ccc = (ccc << 12 | ccc >> (32 - 12)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // GGG(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[13], 9);
            bbb += G(ccc, ddd, eee) + blockDWords[13] + 0x7a6d76e9;
            bbb = (bbb << 9 | bbb >> (32 - 9)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // GGG(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[9], 12);
            aaa += G(bbb, ccc, ddd) + blockDWords[9] + 0x7a6d76e9;
            aaa = (aaa << 12 | aaa >> (32 - 12)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // GGG(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[7], 5);
            eee += G(aaa, bbb, ccc) + blockDWords[7] + 0x7a6d76e9;
            eee = (eee << 5 | eee >> (32 - 5)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // GGG(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[10], 15);
            ddd += G(eee, aaa, bbb) + blockDWords[10] + 0x7a6d76e9;
            ddd = (ddd << 15 | ddd >> (32 - 15)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // GGG(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[14], 8);
            ccc += G(ddd, eee, aaa) + blockDWords[14] + 0x7a6d76e9;
            ccc = (ccc << 8 | ccc >> (32 - 8)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // Parallel Right Round 5 
            // FFF(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[12], 8);
            bbb += F(ccc, ddd, eee) + blockDWords[12];
            bbb = (bbb << 8 | bbb >> (32 - 8)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // FFF(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[15], 5);
            aaa += F(bbb, ccc, ddd) + blockDWords[15];
            aaa = (aaa << 5 | aaa >> (32 - 5)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // FFF(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[10], 12);
            eee += F(aaa, bbb, ccc) + blockDWords[10];
            eee = (eee << 12 | eee >> (32 - 12)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // FFF(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[4], 9);
            ddd += F(eee, aaa, bbb) + blockDWords[4];
            ddd = (ddd << 9 | ddd >> (32 - 9)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // FFF(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[1], 12);
            ccc += F(ddd, eee, aaa) + blockDWords[1];
            ccc = (ccc << 12 | ccc >> (32 - 12)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // FFF(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[5], 5);
            bbb += F(ccc, ddd, eee) + blockDWords[5];
            bbb = (bbb << 5 | bbb >> (32 - 5)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // FFF(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[8], 14);
            aaa += F(bbb, ccc, ddd) + blockDWords[8];
            aaa = (aaa << 14 | aaa >> (32 - 14)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // FFF(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[7], 6);
            eee += F(aaa, bbb, ccc) + blockDWords[7];
            eee = (eee << 6 | eee >> (32 - 6)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // FFF(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[6], 8);
            ddd += F(eee, aaa, bbb) + blockDWords[6];
            ddd = (ddd << 8 | ddd >> (32 - 8)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // FFF(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[2], 13);
            ccc += F(ddd, eee, aaa) + blockDWords[2];
            ccc = (ccc << 13 | ccc >> (32 - 13)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // FFF(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[13], 6);
            bbb += F(ccc, ddd, eee) + blockDWords[13];
            bbb = (bbb << 6 | bbb >> (32 - 6)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // FFF(ref aaa, ref bbb, ref ccc, ref ddd, ref eee, blockDWords[14], 5);
            aaa += F(bbb, ccc, ddd) + blockDWords[14];
            aaa = (aaa << 5 | aaa >> (32 - 5)) + eee;
            ccc = (ccc << 10 | ccc >> (32 - 10));

            // FFF(ref eee, ref aaa, ref bbb, ref ccc, ref ddd, blockDWords[0], 15);
            eee += F(aaa, bbb, ccc) + blockDWords[0];
            eee = (eee << 15 | eee >> (32 - 15)) + ddd;
            bbb = (bbb << 10 | bbb >> (32 - 10));

            // FFF(ref ddd, ref eee, ref aaa, ref bbb, ref ccc, blockDWords[3], 13);
            ddd += F(eee, aaa, bbb) + blockDWords[3];
            ddd = (ddd << 13 | ddd >> (32 - 13)) + ccc;
            aaa = (aaa << 10 | aaa >> (32 - 10));

            // FFF(ref ccc, ref ddd, ref eee, ref aaa, ref bbb, blockDWords[9], 11);
            ccc += F(ddd, eee, aaa) + blockDWords[9];
            ccc = (ccc << 11 | ccc >> (32 - 11)) + bbb;
            eee = (eee << 10 | eee >> (32 - 10));

            // FFF(ref bbb, ref ccc, ref ddd, ref eee, ref aaa, blockDWords[11], 11);
            bbb += F(ccc, ddd, eee) + blockDWords[11];
            bbb = (bbb << 11 | bbb >> (32 - 11)) + aaa;
            ddd = (ddd << 10 | ddd >> (32 - 10));

            // Update the state of the hash object
            ddd += cc + state[1];
            state[1] = state[2] + dd + eee;
            state[2] = state[3] + ee + aaa;
            state[3] = state[4] + aa + bbb;
            state[4] = state[0] + bb + ccc;
            state[0] = ddd;
        }

        private static uint F(uint x, uint y, uint z)
        {
            return (x ^ y ^ z);
        }

        private static uint G(uint x, uint y, uint z)
        {
            return ((x & y) | (~x & z));
        }

        private static uint H(uint x, uint y, uint z)
        {
            return ((x | ~y) ^ z);
        }

        private static uint I(uint x, uint y, uint z)
        {
            return ((x & z) | (y & ~z));
        }

        private static uint J(uint x, uint y, uint z)
        {
            return (x ^ (y | ~z));
        }

        [SecurityCritical]
        private unsafe static void DWORDFromLittleEndian(uint* x, int digits, byte* block)
        {
            int i;
            int j;

            for (i = 0, j = 0; i < digits; i++, j += 4)
                x[i] = (uint)(block[j] | (block[j + 1] << 8) | (block[j + 2] << 16) | (block[j + 3] << 24));
        }

        private static void DWORDToLittleEndian(byte[] block, uint[] x, int digits)
        {
            int i;
            int j;

            for (i = 0, j = 0; i < digits; i++, j += 4)
            {
                block[j] = (byte)(x[i] & 0xff);
                block[j + 1] = (byte)((x[i] >> 8) & 0xff);
                block[j + 2] = (byte)((x[i] >> 16) & 0xff);
                block[j + 3] = (byte)((x[i] >> 24) & 0xff);
            }
        }
    }",1,777 587 2000 58 2001 123 773 780 574 91 93 2002 59 773 726 2003 59 330 773 780 842 91 93 2004 59 773 780 842 91 93 2005 59 777 763 704 2006 328 1504 59 331 777 2000 40 41 123 2004 61 744 842 91 1502 93 59 2005 61 744 842 91 1503 93 59 2002 61 744 574 91 1503 93 59 2007 40 41 59 125 777 763 865 2008 40 41 123 2009 40 41 59 330 2010 46 2011 40 2005 44 1500 44 2005 46 2012 41 59 2010 46 2011 40 2002 44 1500 44 2002 46 2012 41 59 125 91 2013 93 775 763 865 2014 40 574 91 93 2015 44 704 2016 44 704 2017 41 123 2018 40 2015 44 2016 44 2017 41 59 125 91 2013 93 775 763 574 91 93 2019 40 41 123 792 2020 40 41 59 125 773 865 2021 40 41 123 2003 61 1500 59 330 330 2004 91 1500 93 61 1511 59 2004 91 1501 93 61 1511 59 2004 91 1502 93 61 1511 59 2004 91 1502 93 61 1510 59 2004 91 1502 93 61 1511 59 125 91 2022 93 773 854 865 2023 40 574 91 93 2024 44 704 2016 44 704 2017 41 123 704 2025 59 704 2026 61 2017 59 704 2027 61 2016 59 305 2025 61 40 704 41 40 2003 38 1503 41 59 305 2003 348 2026 59 659 40 842 42 2028 61 2004 41 123 659 40 574 42 2029 61 2002 41 123 659 40 842 42 2030 61 2005 41 123 688 40 40 2025 62 1500 41 307 40 2025 43 2026 325 1503 41 41 123 2031 46 2032 40 2024 44 2027 44 2002 44 2025 44 1503 45 2025 41 59 2027 348 40 1503 45 2025 41 59 2026 337 40 1503 45 2025 41 59 2033 40 2030 44 2028 44 2029 41 59 2025 61 1500 59 125 305 870 40 2026 325 1503 41 123 2034 46 2035 40 2024 44 2027 44 2002 44 1500 44 1503 41 59 2027 348 1503 59 2026 337 1503 59 2036 40 2030 44 2028 44 2029 41 59 125 688 40 2026 62 1500 41 123 2037 46 2038 40 2024 44 2027 44 2002 44 2025 44 2026 41 59 125 125 125 125 125 91 2022 93 773 574 91 93 2039 40 41 123 574 91 93 2040 59 704 2041 59 726 2042 59 574 91 93 2043 61 744 574 91 1503 93 59 305 2041 61 1503 45 40 704 41 40 2003 38 1503 41 59 688 40 2041 329 1502 41 2041 348 1503 59 2040 61 744 574 91 2041 93 59 2040 91 1500 93 61 1504 59 330 2042 61 2003 42 1502 59 330 2040 91 2041 45 1501 93 61 40 574 41 40 40 2042 355 1503 41 38 1504 41 59 2040 91 2041 45 1502 93 61 40 574 41 40 40 2042 355 1503 41 38 1504 41 59 2040 91 2041 45 1502 93 61 40 574 41 40 40 2042 355 1503 41 38 1504 41 59 2040 91 2041 45 1502 93 61 40 574 41 40 40 2042 355 1503 41 38 1504 41 59 2040 91 2041 45 1502 93 61 40 574 41 40 40 2042 355 1503 41 38 1504 41 59 2040 91 2041 45 1502 93 61 40 574 41 40 40 2042 355 1503 41 38 1504 41 59 2040 91 2041 45 1502 93 61 40 574 41 40 40 2042 355 1502 41 38 1504 41 59 2040 91 2041 45 1502 93 61 40 574 41 40 40 2042 355 1500 41 38 1504 41 59 305 2023 40 2040 44 1500 44 2040 46 2044 41 59 305 2045 40 2043 44 2004 44 1502 41 59 792 2043 59 125 91 2022 93 773 809 854 865 2046 40 842 42 2047 44 842 42 2048 44 574 42 2049 41 123 842 2050 61 2048 91 1500 93 59 842 2051 61 2048 91 1501 93 59 842 2052 61 2048 91 1502 93 59 842 2053 61 2048 91 1502 93 59 842 2054 61 2048 91 1502 93 59 842 2055 61 2050 59 842 2056 61 2051 59 842 2057 61 2052 59 842 2058 61 2053 59 842 2059 61 2054 59 2060 40 2047 44 1503 44 2049 41 59 305 330 330 2050 348 2047 91 1500 93 43 2061 40 2051 44 2052 44 2053 41 59 2050 61 40 2050 332 1503 124 2050 355 40 1503 45 1503 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2047 91 1501 93 43 2061 40 2050 44 2051 44 2052 41 59 2054 61 40 2054 332 1503 124 2054 355 40 1503 45 1503 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2047 91 1502 93 43 2061 40 2054 44 2050 44 2051 41 59 2053 61 40 2053 332 1503 124 2053 355 40 1503 45 1503 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2047 91 1502 93 43 2061 40 2053 44 2054 44 2050 41 59 2052 61 40 2052 332 1503 124 2052 355 40 1503 45 1503 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2047 91 1502 93 43 2061 40 2052 44 2053 44 2054 41 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2047 91 1502 93 43 2061 40 2051 44 2052 44 2053 41 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2047 91 1502 93 43 2061 40 2050 44 2051 44 2052 41 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2047 91 1502 93 43 2061 40 2054 44 2050 44 2051 41 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2047 91 1502 93 43 2061 40 2053 44 2054 44 2050 41 59 2052 61 40 2052 332 1503 124 2052 355 40 1503 45 1503 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2047 91 1502 93 43 2061 40 2052 44 2053 44 2054 41 59 2051 61 40 2051 332 1503 124 2051 355 40 1503 45 1503 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2047 91 1502 93 43 2061 40 2051 44 2052 44 2053 41 59 2050 61 40 2050 332 1503 124 2050 355 40 1503 45 1503 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2047 91 1503 93 43 2061 40 2050 44 2051 44 2052 41 59 2054 61 40 2054 332 1503 124 2054 355 40 1503 45 1503 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2047 91 1503 93 43 2061 40 2054 44 2050 44 2051 41 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2047 91 1503 93 43 2061 40 2053 44 2054 44 2050 41 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2047 91 1503 93 43 2061 40 2052 44 2053 44 2054 41 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2047 91 1503 93 43 2061 40 2051 44 2052 44 2053 41 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 330 2054 348 2062 40 2050 44 2051 44 2052 41 43 2047 91 1502 93 43 1511 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2062 40 2054 44 2050 44 2051 41 43 2047 91 1502 93 43 1511 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2062 40 2053 44 2054 44 2050 41 43 2047 91 1503 93 43 1511 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2062 40 2052 44 2053 44 2054 41 43 2047 91 1501 93 43 1511 59 2051 61 40 2051 332 1503 124 2051 355 40 1503 45 1503 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2062 40 2051 44 2052 44 2053 41 43 2047 91 1502 93 43 1511 59 2050 61 40 2050 332 1503 124 2050 355 40 1503 45 1503 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2062 40 2050 44 2051 44 2052 41 43 2047 91 1502 93 43 1511 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2062 40 2054 44 2050 44 2051 41 43 2047 91 1503 93 43 1511 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2062 40 2053 44 2054 44 2050 41 43 2047 91 1502 93 43 1511 59 2052 61 40 2052 332 1503 124 2052 355 40 1503 45 1503 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2062 40 2052 44 2053 44 2054 41 43 2047 91 1503 93 43 1511 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2062 40 2051 44 2052 44 2053 41 43 2047 91 1500 93 43 1511 59 2050 61 40 2050 332 1503 124 2050 355 40 1503 45 1503 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2062 40 2050 44 2051 44 2052 41 43 2047 91 1502 93 43 1511 59 2054 61 40 2054 332 1503 124 2054 355 40 1503 45 1503 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2062 40 2054 44 2050 44 2051 41 43 2047 91 1502 93 43 1511 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2062 40 2053 44 2054 44 2050 41 43 2047 91 1502 93 43 1511 59 2052 61 40 2052 332 1503 124 2052 355 40 1503 45 1503 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2062 40 2052 44 2053 44 2054 41 43 2047 91 1503 93 43 1511 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2062 40 2051 44 2052 44 2053 41 43 2047 91 1503 93 43 1511 59 2050 61 40 2050 332 1503 124 2050 355 40 1503 45 1503 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2062 40 2050 44 2051 44 2052 41 43 2047 91 1502 93 43 1511 59 2054 61 40 2054 332 1503 124 2054 355 40 1503 45 1503 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 330 2053 348 2063 40 2054 44 2050 44 2051 41 43 2047 91 1502 93 43 1511 59 2053 61 40 2053 332 1503 124 2053 355 40 1503 45 1503 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2063 40 2053 44 2054 44 2050 41 43 2047 91 1502 93 43 1511 59 2052 61 40 2052 332 1503 124 2052 355 40 1503 45 1503 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2063 40 2052 44 2053 44 2054 41 43 2047 91 1503 93 43 1511 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2063 40 2051 44 2052 44 2053 41 43 2047 91 1502 93 43 1511 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2063 40 2050 44 2051 44 2052 41 43 2047 91 1502 93 43 1511 59 2054 61 40 2054 332 1503 124 2054 355 40 1503 45 1503 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2063 40 2054 44 2050 44 2051 41 43 2047 91 1503 93 43 1511 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2063 40 2053 44 2054 44 2050 41 43 2047 91 1502 93 43 1511 59 2052 61 40 2052 332 1503 124 2052 355 40 1503 45 1503 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2063 40 2052 44 2053 44 2054 41 43 2047 91 1501 93 43 1511 59 2051 61 40 2051 332 1503 124 2051 355 40 1503 45 1503 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2063 40 2051 44 2052 44 2053 41 43 2047 91 1502 93 43 1511 59 2050 61 40 2050 332 1503 124 2050 355 40 1503 45 1503 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2063 40 2050 44 2051 44 2052 41 43 2047 91 1502 93 43 1511 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2063 40 2054 44 2050 44 2051 41 43 2047 91 1500 93 43 1511 59 2053 61 40 2053 332 1503 124 2053 355 40 1503 45 1503 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2063 40 2053 44 2054 44 2050 41 43 2047 91 1502 93 43 1511 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2063 40 2052 44 2053 44 2054 41 43 2047 91 1503 93 43 1511 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2063 40 2051 44 2052 44 2053 41 43 2047 91 1503 93 43 1511 59 2050 61 40 2050 332 1503 124 2050 355 40 1503 45 1503 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2063 40 2050 44 2051 44 2052 41 43 2047 91 1502 93 43 1511 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2063 40 2054 44 2050 44 2051 41 43 2047 91 1503 93 43 1511 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 330 2052 348 2064 40 2053 44 2054 44 2050 41 43 2047 91 1501 93 43 1511 59 2052 61 40 2052 332 1503 124 2052 355 40 1503 45 1503 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2064 40 2052 44 2053 44 2054 41 43 2047 91 1502 93 43 1511 59 2051 61 40 2051 332 1503 124 2051 355 40 1503 45 1503 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2064 40 2051 44 2052 44 2053 41 43 2047 91 1503 93 43 1511 59 2050 61 40 2050 332 1503 124 2050 355 40 1503 45 1503 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2064 40 2050 44 2051 44 2052 41 43 2047 91 1502 93 43 1511 59 2054 61 40 2054 332 1503 124 2054 355 40 1503 45 1503 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2064 40 2054 44 2050 44 2051 41 43 2047 91 1500 93 43 1511 59 2053 61 40 2053 332 1503 124 2053 355 40 1503 45 1503 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2064 40 2053 44 2054 44 2050 41 43 2047 91 1502 93 43 1511 59 2052 61 40 2052 332 1503 124 2052 355 40 1503 45 1503 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2064 40 2052 44 2053 44 2054 41 43 2047 91 1503 93 43 1511 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2064 40 2051 44 2052 44 2053 41 43 2047 91 1502 93 43 1511 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2064 40 2050 44 2051 44 2052 41 43 2047 91 1503 93 43 1511 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2064 40 2054 44 2050 44 2051 41 43 2047 91 1502 93 43 1511 59 2053 61 40 2053 332 1503 124 2053 355 40 1503 45 1503 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2064 40 2053 44 2054 44 2050 41 43 2047 91 1502 93 43 1511 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2064 40 2052 44 2053 44 2054 41 43 2047 91 1503 93 43 1511 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2064 40 2051 44 2052 44 2053 41 43 2047 91 1503 93 43 1511 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2064 40 2050 44 2051 44 2052 41 43 2047 91 1502 93 43 1511 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2064 40 2054 44 2050 44 2051 41 43 2047 91 1502 93 43 1511 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2064 40 2053 44 2054 44 2050 41 43 2047 91 1502 93 43 1511 59 2052 61 40 2052 332 1503 124 2052 355 40 1503 45 1503 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 330 2051 348 2065 40 2052 44 2053 44 2054 41 43 2047 91 1502 93 43 1511 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2065 40 2051 44 2052 44 2053 41 43 2047 91 1500 93 43 1511 59 2050 61 40 2050 332 1503 124 2050 355 40 1503 45 1503 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2065 40 2050 44 2051 44 2052 41 43 2047 91 1502 93 43 1511 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2065 40 2054 44 2050 44 2051 41 43 2047 91 1502 93 43 1511 59 2053 61 40 2053 332 1503 124 2053 355 40 1503 45 1503 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2065 40 2053 44 2054 44 2050 41 43 2047 91 1502 93 43 1511 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2065 40 2052 44 2053 44 2054 41 43 2047 91 1503 93 43 1511 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2065 40 2051 44 2052 44 2053 41 43 2047 91 1502 93 43 1511 59 2050 61 40 2050 332 1503 124 2050 355 40 1503 45 1503 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2065 40 2050 44 2051 44 2052 41 43 2047 91 1502 93 43 1511 59 2054 61 40 2054 332 1503 124 2054 355 40 1503 45 1503 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2065 40 2054 44 2050 44 2051 41 43 2047 91 1503 93 43 1511 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2065 40 2053 44 2054 44 2050 41 43 2047 91 1501 93 43 1511 59 2052 61 40 2052 332 1503 124 2052 355 40 1503 45 1503 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2065 40 2052 44 2053 44 2054 41 43 2047 91 1502 93 43 1511 59 2051 61 40 2051 332 1503 124 2051 355 40 1503 45 1503 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 2050 348 2065 40 2051 44 2052 44 2053 41 43 2047 91 1502 93 43 1511 59 2050 61 40 2050 332 1503 124 2050 355 40 1503 45 1503 41 41 43 2054 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 59 330 2054 348 2065 40 2050 44 2051 44 2052 41 43 2047 91 1503 93 43 1511 59 2054 61 40 2054 332 1503 124 2054 355 40 1503 45 1503 41 41 43 2053 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 59 330 2053 348 2065 40 2054 44 2050 44 2051 41 43 2047 91 1502 93 43 1511 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 43 2052 59 2050 61 40 2050 332 1502 124 2050 355 40 1503 45 1502 41 41 59 330 2052 348 2065 40 2053 44 2054 44 2050 41 43 2047 91 1503 93 43 1511 59 2052 61 40 2052 332 1502 124 2052 355 40 1503 45 1502 41 41 43 2051 59 2054 61 40 2054 332 1502 124 2054 355 40 1503 45 1502 41 41 59 330 2051 348 2065 40 2052 44 2053 44 2054 41 43 2047 91 1503 93 43 1511 59 2051 61 40 2051 332 1502 124 2051 355 40 1503 45 1502 41 41 43 2050 59 2053 61 40 2053 332 1502 124 2053 355 40 1503 45 1502 41 41 59 330 330 2055 348 2065 40 2056 44 2057 44 2058 41 43 2047 91 1502 93 43 1511 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2065 40 2055 44 2056 44 2057 41 43 2047 91 1503 93 43 1511 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2065 40 2059 44 2055 44 2056 41 43 2047 91 1502 93 43 1511 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2065 40 2058 44 2059 44 2055 41 43 2047 91 1500 93 43 1511 59 2057 61 40 2057 332 1503 124 2057 355 40 1503 45 1503 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2065 40 2057 44 2058 44 2059 41 43 2047 91 1502 93 43 1511 59 2056 61 40 2056 332 1503 124 2056 355 40 1503 45 1503 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2065 40 2056 44 2057 44 2058 41 43 2047 91 1502 93 43 1511 59 2055 61 40 2055 332 1503 124 2055 355 40 1503 45 1503 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2065 40 2055 44 2056 44 2057 41 43 2047 91 1503 93 43 1511 59 2059 61 40 2059 332 1503 124 2059 355 40 1503 45 1503 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2065 40 2059 44 2055 44 2056 41 43 2047 91 1502 93 43 1511 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2065 40 2058 44 2059 44 2055 41 43 2047 91 1503 93 43 1511 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2065 40 2057 44 2058 44 2059 41 43 2047 91 1502 93 43 1511 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2065 40 2056 44 2057 44 2058 41 43 2047 91 1503 93 43 1511 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2065 40 2055 44 2056 44 2057 41 43 2047 91 1502 93 43 1511 59 2059 61 40 2059 332 1503 124 2059 355 40 1503 45 1503 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2065 40 2059 44 2055 44 2056 41 43 2047 91 1501 93 43 1511 59 2058 61 40 2058 332 1503 124 2058 355 40 1503 45 1503 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2065 40 2058 44 2059 44 2055 41 43 2047 91 1502 93 43 1511 59 2057 61 40 2057 332 1503 124 2057 355 40 1503 45 1503 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2065 40 2057 44 2058 44 2059 41 43 2047 91 1502 93 43 1511 59 2056 61 40 2056 332 1503 124 2056 355 40 1503 45 1503 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2065 40 2056 44 2057 44 2058 41 43 2047 91 1503 93 43 1511 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 330 2059 348 2064 40 2055 44 2056 44 2057 41 43 2047 91 1502 93 43 1511 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2064 40 2059 44 2055 44 2056 41 43 2047 91 1503 93 43 1511 59 2058 61 40 2058 332 1503 124 2058 355 40 1503 45 1503 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2064 40 2058 44 2059 44 2055 41 43 2047 91 1502 93 43 1511 59 2057 61 40 2057 332 1503 124 2057 355 40 1503 45 1503 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2064 40 2057 44 2058 44 2059 41 43 2047 91 1502 93 43 1511 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2064 40 2056 44 2057 44 2058 41 43 2047 91 1500 93 43 1511 59 2055 61 40 2055 332 1503 124 2055 355 40 1503 45 1503 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2064 40 2055 44 2056 44 2057 41 43 2047 91 1503 93 43 1511 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2064 40 2059 44 2055 44 2056 41 43 2047 91 1502 93 43 1511 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2064 40 2058 44 2059 44 2055 41 43 2047 91 1502 93 43 1511 59 2057 61 40 2057 332 1503 124 2057 355 40 1503 45 1503 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2064 40 2057 44 2058 44 2059 41 43 2047 91 1503 93 43 1511 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2064 40 2056 44 2057 44 2058 41 43 2047 91 1503 93 43 1511 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2064 40 2055 44 2056 44 2057 41 43 2047 91 1502 93 43 1511 59 2059 61 40 2059 332 1503 124 2059 355 40 1503 45 1503 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2064 40 2059 44 2055 44 2056 41 43 2047 91 1503 93 43 1511 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2064 40 2058 44 2059 44 2055 41 43 2047 91 1502 93 43 1511 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2064 40 2057 44 2058 44 2059 41 43 2047 91 1502 93 43 1511 59 2056 61 40 2056 332 1503 124 2056 355 40 1503 45 1503 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2064 40 2056 44 2057 44 2058 41 43 2047 91 1501 93 43 1511 59 2055 61 40 2055 332 1503 124 2055 355 40 1503 45 1503 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2064 40 2055 44 2056 44 2057 41 43 2047 91 1502 93 43 1511 59 2059 61 40 2059 332 1503 124 2059 355 40 1503 45 1503 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 330 2058 348 2063 40 2059 44 2055 44 2056 41 43 2047 91 1503 93 43 1511 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2063 40 2058 44 2059 44 2055 41 43 2047 91 1502 93 43 1511 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2063 40 2057 44 2058 44 2059 41 43 2047 91 1501 93 43 1511 59 2056 61 40 2056 332 1503 124 2056 355 40 1503 45 1503 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2063 40 2056 44 2057 44 2058 41 43 2047 91 1502 93 43 1511 59 2055 61 40 2055 332 1503 124 2055 355 40 1503 45 1503 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2063 40 2055 44 2056 44 2057 41 43 2047 91 1502 93 43 1511 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2063 40 2059 44 2055 44 2056 41 43 2047 91 1503 93 43 1511 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2063 40 2058 44 2059 44 2055 41 43 2047 91 1502 93 43 1511 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2063 40 2057 44 2058 44 2059 41 43 2047 91 1502 93 43 1511 59 2056 61 40 2056 332 1503 124 2056 355 40 1503 45 1503 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2063 40 2056 44 2057 44 2058 41 43 2047 91 1503 93 43 1511 59 2055 61 40 2055 332 1503 124 2055 355 40 1503 45 1503 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2063 40 2055 44 2056 44 2057 41 43 2047 91 1502 93 43 1511 59 2059 61 40 2059 332 1503 124 2059 355 40 1503 45 1503 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2063 40 2059 44 2055 44 2056 41 43 2047 91 1503 93 43 1511 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2063 40 2058 44 2059 44 2055 41 43 2047 91 1502 93 43 1511 59 2057 61 40 2057 332 1503 124 2057 355 40 1503 45 1503 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2063 40 2057 44 2058 44 2059 41 43 2047 91 1502 93 43 1511 59 2056 61 40 2056 332 1503 124 2056 355 40 1503 45 1503 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2063 40 2056 44 2057 44 2058 41 43 2047 91 1500 93 43 1511 59 2055 61 40 2055 332 1503 124 2055 355 40 1503 45 1503 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2063 40 2055 44 2056 44 2057 41 43 2047 91 1502 93 43 1511 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2063 40 2059 44 2055 44 2056 41 43 2047 91 1503 93 43 1511 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 330 2057 348 2062 40 2058 44 2059 44 2055 41 43 2047 91 1502 93 43 1511 59 2057 61 40 2057 332 1503 124 2057 355 40 1503 45 1503 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2062 40 2057 44 2058 44 2059 41 43 2047 91 1502 93 43 1511 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2062 40 2056 44 2057 44 2058 41 43 2047 91 1502 93 43 1511 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2062 40 2055 44 2056 44 2057 41 43 2047 91 1501 93 43 1511 59 2059 61 40 2059 332 1503 124 2059 355 40 1503 45 1503 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2062 40 2059 44 2055 44 2056 41 43 2047 91 1502 93 43 1511 59 2058 61 40 2058 332 1503 124 2058 355 40 1503 45 1503 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2062 40 2058 44 2059 44 2055 41 43 2047 91 1503 93 43 1511 59 2057 61 40 2057 332 1503 124 2057 355 40 1503 45 1503 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2062 40 2057 44 2058 44 2059 41 43 2047 91 1503 93 43 1511 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2062 40 2056 44 2057 44 2058 41 43 2047 91 1500 93 43 1511 59 2055 61 40 2055 332 1503 124 2055 355 40 1503 45 1503 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2062 40 2055 44 2056 44 2057 41 43 2047 91 1502 93 43 1511 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2062 40 2059 44 2055 44 2056 41 43 2047 91 1503 93 43 1511 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2062 40 2058 44 2059 44 2055 41 43 2047 91 1502 93 43 1511 59 2057 61 40 2057 332 1503 124 2057 355 40 1503 45 1503 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2062 40 2057 44 2058 44 2059 41 43 2047 91 1503 93 43 1511 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2062 40 2056 44 2057 44 2058 41 43 2047 91 1502 93 43 1511 59 2055 61 40 2055 332 1503 124 2055 355 40 1503 45 1503 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2062 40 2055 44 2056 44 2057 41 43 2047 91 1502 93 43 1511 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2062 40 2059 44 2055 44 2056 41 43 2047 91 1502 93 43 1511 59 2058 61 40 2058 332 1503 124 2058 355 40 1503 45 1503 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2062 40 2058 44 2059 44 2055 41 43 2047 91 1503 93 43 1511 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 330 2056 348 2061 40 2057 44 2058 44 2059 41 43 2047 91 1503 93 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2061 40 2056 44 2057 44 2058 41 43 2047 91 1503 93 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2061 40 2055 44 2056 44 2057 41 43 2047 91 1502 93 59 2059 61 40 2059 332 1503 124 2059 355 40 1503 45 1503 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2061 40 2059 44 2055 44 2056 41 43 2047 91 1502 93 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2061 40 2058 44 2059 44 2055 41 43 2047 91 1501 93 59 2057 61 40 2057 332 1503 124 2057 355 40 1503 45 1503 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2061 40 2057 44 2058 44 2059 41 43 2047 91 1502 93 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2061 40 2056 44 2057 44 2058 41 43 2047 91 1502 93 59 2055 61 40 2055 332 1503 124 2055 355 40 1503 45 1503 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2061 40 2055 44 2056 44 2057 41 43 2047 91 1502 93 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2061 40 2059 44 2055 44 2056 41 43 2047 91 1502 93 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2061 40 2058 44 2059 44 2055 41 43 2047 91 1502 93 59 2057 61 40 2057 332 1503 124 2057 355 40 1503 45 1503 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2061 40 2057 44 2058 44 2059 41 43 2047 91 1503 93 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2055 348 2061 40 2056 44 2057 44 2058 41 43 2047 91 1503 93 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 43 2059 59 2057 61 40 2057 332 1502 124 2057 355 40 1503 45 1502 41 41 59 330 2059 348 2061 40 2055 44 2056 44 2057 41 43 2047 91 1500 93 59 2059 61 40 2059 332 1503 124 2059 355 40 1503 45 1503 41 41 43 2058 59 2056 61 40 2056 332 1502 124 2056 355 40 1503 45 1502 41 41 59 330 2058 348 2061 40 2059 44 2055 44 2056 41 43 2047 91 1502 93 59 2058 61 40 2058 332 1503 124 2058 355 40 1503 45 1503 41 41 43 2057 59 2055 61 40 2055 332 1502 124 2055 355 40 1503 45 1502 41 41 59 330 2057 348 2061 40 2058 44 2059 44 2055 41 43 2047 91 1502 93 59 2057 61 40 2057 332 1503 124 2057 355 40 1503 45 1503 41 41 43 2056 59 2059 61 40 2059 332 1502 124 2059 355 40 1503 45 1502 41 41 59 330 2056 348 2061 40 2057 44 2058 44 2059 41 43 2047 91 1503 93 59 2056 61 40 2056 332 1503 124 2056 355 40 1503 45 1503 41 41 43 2055 59 2058 61 40 2058 332 1502 124 2058 355 40 1503 45 1502 41 41 59 330 2058 348 2052 43 2048 91 1501 93 59 2048 91 1501 93 61 2048 91 1502 93 43 2053 43 2059 59 2048 91 1502 93 61 2048 91 1502 93 43 2054 43 2055 59 2048 91 1502 93 61 2048 91 1502 93 43 2050 43 2056 59 2048 91 1502 93 61 2048 91 1500 93 43 2051 43 2057 59 2048 91 1500 93 61 2058 59 125 773 809 842 2066 40 842 2067 44 842 2068 44 842 2069 41 123 792 40 2067 94 2068 94 2069 41 59 125 773 809 842 2070 40 842 2067 44 842 2068 44 842 2069 41 123 792 40 40 2067 38 2068 41 124 40 126 2067 38 2069 41 41 59 125 773 809 842 2071 40 842 2067 44 842 2068 44 842 2069 41 123 792 40 40 2067 124 126 2068 41 94 2069 41 59 125 773 809 842 2072 40 842 2067 44 842 2068 44 842 2069 41 123 792 40 40 2067 38 2069 41 124 40 2068 38 126 2069 41 41 59 125 773 809 842 2073 40 842 2067 44 842 2068 44 842 2069 41 123 792 40 2067 94 40 2068 124 126 2069 41 41 59 125 91 2022 93 773 854 809 865 2074 40 842 42 2067 44 704 2075 44 574 42 2049 41 123 704 2076 59 704 2077 59 664 40 2076 61 1500 44 2077 61 1500 59 2076 60 2075 59 2076 349 44 2077 348 1502 41 2067 91 2076 93 61 40 842 41 40 2049 91 2077 93 124 40 2049 91 2077 43 1501 93 332 1502 41 124 40 2049 91 2077 43 1502 93 332 1503 41 124 40 2049 91 2077 43 1502 93 332 1503 41 41 59 125 773 809 865 2078 40 574 91 93 2049 44 842 91 93 2067 44 704 2075 41 123 704 2079 59 704 2080 59 664 40 2079 61 1500 44 2080 61 1500 59 2079 60 2075 59 2079 349 44 2080 348 1502 41 123 2049 91 2080 93 61 40 574 41 40 2067 91 2079 93 38 1504 41 59 2049 91 2080 43 1501 93 61 40 574 41 40 40 2067 91 2079 93 355 1502 41 38 1504 41 59 2049 91 2080 43 1502 93 61 40 574 41 40 40 2067 91 2079 93 355 1503 41 38 1504 41 59 2049 91 2080 43 1502 93 61 40 574 41 40 40 2067 91 2079 93 355 1503 41 38 1504 41 59 125 125 125 ,"{'AvgLine': 62, 'CountLine': 1033, 'CountStmt': 595, 'MaxNesting': 1, 'AvgLineCode': 39, 'AvgEssential': 1, 'AvgLineBlank': 11, 'CountStmtExe': 553, 'MaxEssential': 1, 'SumEssential': 15, 'AvgCyclomatic': 1, 'CountLineCode': 643, 'CountStmtDecl': 42, 'MaxCyclomatic': 4, 'SumCyclomatic': 21, 'AvgLineComment': 11, 'CountClassBase': 1, 'CountLineBlank': 198, 'CountSemicolon': 570, 'CountDeclMethod': 16, 'CountLineCodeExe': 562, 'CountLineComment': 193, 'CountClassCoupled': 8, 'CountClassDerived': 0, 'CountDeclProperty': 1, 'CountLineCodeDecl': 48, 'CountLineInactive': 0, 'CountDeclMethodAll': 22, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.30', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 5, 'SumCyclomaticStrict': 22, 'CountDeclClassMethod': 8, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 3, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 4, 'PercentLackOfCohesion': 79, 'SumCyclomaticModified': 21, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 11, 'CountDeclInstanceMethod': 8, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 3, 'CountDeclInstanceVariable': 4, 'PercentLackOfCohesionModified': 59, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 4, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79732,C#,"    public abstract class Wallet
    {
        /// <summary>
        /// The <see cref=""Neo.ProtocolSettings""/> to be used by the wallet.
        /// </summary>
        public ProtocolSettings ProtocolSettings { get; }

        /// <summary>
        /// The name of the wallet.
        /// </summary>
        public abstract string Name { get; }

        /// <summary>
        /// The path of the wallet.
        /// </summary>
        public string Path { get; }

        /// <summary>
        /// The version of the wallet.
        /// </summary>
        public abstract Version Version { get; }

        /// <summary>
        /// Changes the password of the wallet.
        /// </summary>
        /// <param name=""oldPassword"">The old password of the wallet.</param>
        /// <param name=""newPassword"">The new password to be used.</param>
        /// <returns><see langword=""true""/> if the password is changed successfully; otherwise, <see langword=""false""/>.</returns>
        public abstract bool ChangePassword(string oldPassword, string newPassword);

        /// <summary>
        /// Determines whether the specified account is included in the wallet.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the account.</param>
        /// <returns><see langword=""true""/> if the account is included in the wallet; otherwise, <see langword=""false""/>.</returns>
        public abstract bool Contains(UInt160 scriptHash);

        /// <summary>
        /// Creates a standard account with the specified private key.
        /// </summary>
        /// <param name=""privateKey"">The private key of the account.</param>
        /// <returns>The created account.</returns>
        public abstract WalletAccount CreateAccount(byte[] privateKey);

        /// <summary>
        /// Creates a contract account for the wallet.
        /// </summary>
        /// <param name=""contract"">The contract of the account.</param>
        /// <param name=""key"">The private key of the account.</param>
        /// <returns>The created account.</returns>
        public abstract WalletAccount CreateAccount(Contract contract, KeyPair key = null);

        /// <summary>
        /// Creates a watch-only account for the wallet.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the account.</param>
        /// <returns>The created account.</returns>
        public abstract WalletAccount CreateAccount(UInt160 scriptHash);

        /// <summary>
        /// Deletes the entire database of the wallet.
        /// </summary>
        public abstract void Delete();

        /// <summary>
        /// Deletes an account from the wallet.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the account.</param>
        /// <returns><see langword=""true""/> if the account is removed; otherwise, <see langword=""false""/>.</returns>
        public abstract bool DeleteAccount(UInt160 scriptHash);

        /// <summary>
        /// Gets the account with the specified hash.
        /// </summary>
        /// <param name=""scriptHash"">The hash of the account.</param>
        /// <returns>The account with the specified hash.</returns>
        public abstract WalletAccount GetAccount(UInt160 scriptHash);

        /// <summary>
        /// Gets all the accounts from the wallet.
        /// </summary>
        /// <returns>All accounts in the wallet.</returns>
        public abstract IEnumerable<WalletAccount> GetAccounts();

        /// <summary>
        /// Initializes a new instance of the <see cref=""Wallet""/> class.
        /// </summary>
        /// <param name=""path"">The path of the wallet file.</param>
        /// <param name=""settings"">The <see cref=""Neo.ProtocolSettings""/> to be used by the wallet.</param>
        protected Wallet(string path, ProtocolSettings settings)
        {
            this.ProtocolSettings = settings;
            this.Path = path;
        }

        /// <summary>
        /// Creates a standard account for the wallet.
        /// </summary>
        /// <returns>The created account.</returns>
        public WalletAccount CreateAccount()
        {
            byte[] privateKey = new byte[32];
        generate:
            try
            {
                using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
                {
                    rng.GetBytes(privateKey);
                }
                return CreateAccount(privateKey);
            }
            catch (ArgumentException)
            {
                goto generate;
            }
            finally
            {
                Array.Clear(privateKey, 0, privateKey.Length);
            }
        }

        /// <summary>
        /// Creates a contract account for the wallet.
        /// </summary>
        /// <param name=""contract"">The contract of the account.</param>
        /// <param name=""privateKey"">The private key of the account.</param>
        /// <returns>The created account.</returns>
        public WalletAccount CreateAccount(Contract contract, byte[] privateKey)
        {
            if (privateKey == null) return CreateAccount(contract);
            return CreateAccount(contract, new KeyPair(privateKey));
        }

        private static List<(UInt160 Account, BigInteger Value)> FindPayingAccounts(List<(UInt160 Account, BigInteger Value)> orderedAccounts, BigInteger amount)
        {
            var result = new List<(UInt160 Account, BigInteger Value)>();
            BigInteger sum_balance = orderedAccounts.Select(p => p.Value).Sum();
            if (sum_balance == amount)
            {
                result.AddRange(orderedAccounts);
                orderedAccounts.Clear();
            }
            else
            {
                for (int i = 0; i < orderedAccounts.Count; i++)
                {
                    if (orderedAccounts[i].Value < amount)
                        continue;
                    if (orderedAccounts[i].Value == amount)
                    {
                        result.Add(orderedAccounts[i]);
                        orderedAccounts.RemoveAt(i);
                    }
                    else
                    {
                        result.Add((orderedAccounts[i].Account, amount));
                        orderedAccounts[i] = (orderedAccounts[i].Account, orderedAccounts[i].Value - amount);
                    }
                    break;
                }
                if (result.Count == 0)
                {
                    int i = orderedAccounts.Count - 1;
                    while (orderedAccounts[i].Value <= amount)
                    {
                        result.Add(orderedAccounts[i]);
                        amount -= orderedAccounts[i].Value;
                        orderedAccounts.RemoveAt(i);
                        i--;
                    }
                    if (amount > 0)
                    {
                        for (i = 0; i < orderedAccounts.Count; i++)
                        {
                            if (orderedAccounts[i].Value < amount)
                                continue;
                            if (orderedAccounts[i].Value == amount)
                            {
                                result.Add(orderedAccounts[i]);
                                orderedAccounts.RemoveAt(i);
                            }
                            else
                            {
                                result.Add((orderedAccounts[i].Account, amount));
                                orderedAccounts[i] = (orderedAccounts[i].Account, orderedAccounts[i].Value - amount);
                            }
                            break;
                        }
                    }
                }
            }
            return result;
        }

        /// <summary>
        /// Gets the account with the specified public key.
        /// </summary>
        /// <param name=""pubkey"">The public key of the account.</param>
        /// <returns>The account with the specified public key.</returns>
        public WalletAccount GetAccount(ECPoint pubkey)
        {
            return GetAccount(Contract.CreateSignatureRedeemScript(pubkey).ToScriptHash());
        }

        /// <summary>
        /// Gets the available balance for the specified asset in the wallet.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""asset_id"">The id of the asset.</param>
        /// <returns>The available balance for the specified asset.</returns>
        public BigDecimal GetAvailable(DataCache snapshot, UInt160 asset_id)
        {
            UInt160[] accounts = GetAccounts().Where(p => !p.WatchOnly).Select(p => p.ScriptHash).ToArray();
            return GetBalance(snapshot, asset_id, accounts);
        }

        /// <summary>
        /// Gets the balance for the specified asset in the wallet.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""asset_id"">The id of the asset.</param>
        /// <param name=""accounts"">The accounts to be counted.</param>
        /// <returns>The balance for the specified asset.</returns>
        public BigDecimal GetBalance(DataCache snapshot, UInt160 asset_id, params UInt160[] accounts)
        {
            byte[] script;
            using (ScriptBuilder sb = new())
            {
                sb.EmitPush(0);
                foreach (UInt160 account in accounts)
                {
                    sb.EmitDynamicCall(asset_id, ""balanceOf"", CallFlags.ReadOnly, account);
                    sb.Emit(OpCode.ADD);
                }
                sb.EmitDynamicCall(asset_id, ""decimals"", CallFlags.ReadOnly);
                script = sb.ToArray();
            }
            using ApplicationEngine engine = ApplicationEngine.Run(script, snapshot, settings: ProtocolSettings, gas: 0_60000000L * accounts.Length);
            if (engine.State == VMState.FAULT)
                return new BigDecimal(BigInteger.Zero, 0);
            byte decimals = (byte)engine.ResultStack.Pop().GetInteger();
            BigInteger amount = engine.ResultStack.Pop().GetInteger();
            return new BigDecimal(amount, decimals);
        }

        private static byte[] Decrypt(byte[] data, byte[] key)
        {
            using Aes aes = Aes.Create();
            aes.Key = key;
            aes.Mode = CipherMode.ECB;
            aes.Padding = PaddingMode.None;
            using ICryptoTransform decryptor = aes.CreateDecryptor();
            return decryptor.TransformFinalBlock(data, 0, data.Length);
        }

        /// <summary>
        /// Decodes a private key from the specified NEP-2 string.
        /// </summary>
        /// <param name=""nep2"">The NEP-2 string to be decoded.</param>
        /// <param name=""passphrase"">The passphrase of the private key.</param>
        /// <param name=""version"">The address version of NEO system.</param>
        /// <param name=""N"">The N field of the <see cref=""ScryptParameters""/> to be used.</param>
        /// <param name=""r"">The R field of the <see cref=""ScryptParameters""/> to be used.</param>
        /// <param name=""p"">The P field of the <see cref=""ScryptParameters""/> to be used.</param>
        /// <returns>The decoded private key.</returns>
        public static byte[] GetPrivateKeyFromNEP2(string nep2, string passphrase, byte version, int N = 16384, int r = 8, int p = 8)
        {
            if (nep2 == null) throw new ArgumentNullException(nameof(nep2));
            if (passphrase == null) throw new ArgumentNullException(nameof(passphrase));
            byte[] data = nep2.Base58CheckDecode();
            if (data.Length != 39 || data[0] != 0x01 || data[1] != 0x42 || data[2] != 0xe0)
                throw new FormatException();
            byte[] addresshash = new byte[4];
            Buffer.BlockCopy(data, 3, addresshash, 0, 4);
            byte[] datapassphrase = Encoding.UTF8.GetBytes(passphrase);
            byte[] derivedkey = SCrypt.Generate(datapassphrase, addresshash, N, r, p, 64);
            Array.Clear(datapassphrase, 0, datapassphrase.Length);
            byte[] derivedhalf1 = derivedkey[..32];
            byte[] derivedhalf2 = derivedkey[32..];
            Array.Clear(derivedkey, 0, derivedkey.Length);
            byte[] encryptedkey = new byte[32];
            Buffer.BlockCopy(data, 7, encryptedkey, 0, 32);
            Array.Clear(data, 0, data.Length);
            byte[] prikey = XOR(Decrypt(encryptedkey, derivedhalf2), derivedhalf1);
            Array.Clear(derivedhalf1, 0, derivedhalf1.Length);
            Array.Clear(derivedhalf2, 0, derivedhalf2.Length);
            ECPoint pubkey = Cryptography.ECC.ECCurve.Secp256r1.G * prikey;
            UInt160 script_hash = Contract.CreateSignatureRedeemScript(pubkey).ToScriptHash();
            string address = script_hash.ToAddress(version);
            if (!Encoding.ASCII.GetBytes(address).Sha256().Sha256().AsSpan(0, 4).SequenceEqual(addresshash))
                throw new FormatException();
            return prikey;
        }

        /// <summary>
        /// Decodes a private key from the specified WIF string.
        /// </summary>
        /// <param name=""wif"">The WIF string to be decoded.</param>
        /// <returns>The decoded private key.</returns>
        public static byte[] GetPrivateKeyFromWIF(string wif)
        {
            if (wif is null) throw new ArgumentNullException(nameof(wif));
            byte[] data = wif.Base58CheckDecode();
            if (data.Length != 34 || data[0] != 0x80 || data[33] != 0x01)
                throw new FormatException();
            byte[] privateKey = new byte[32];
            Buffer.BlockCopy(data, 1, privateKey, 0, privateKey.Length);
            Array.Clear(data, 0, data.Length);
            return privateKey;
        }

        private static Signer[] GetSigners(UInt160 sender, Signer[] cosigners)
        {
            for (int i = 0; i < cosigners.Length; i++)
            {
                if (cosigners[i].Account.Equals(sender))
                {
                    if (i == 0) return cosigners;
                    List<Signer> list = new(cosigners);
                    list.RemoveAt(i);
                    list.Insert(0, cosigners[i]);
                    return list.ToArray();
                }
            }
            return cosigners.Prepend(new Signer
            {
                Account = sender,
                Scopes = WitnessScope.None
            }).ToArray();
        }

        /// <summary>
        /// Imports an account from a <see cref=""X509Certificate2""/>.
        /// </summary>
        /// <param name=""cert"">The <see cref=""X509Certificate2""/> to import.</param>
        /// <returns>The imported account.</returns>
        public virtual WalletAccount Import(X509Certificate2 cert)
        {
            byte[] privateKey;
            using (ECDsa ecdsa = cert.GetECDsaPrivateKey())
            {
                privateKey = ecdsa.ExportParameters(true).D;
            }
            WalletAccount account = CreateAccount(privateKey);
            Array.Clear(privateKey, 0, privateKey.Length);
            return account;
        }

        /// <summary>
        /// Imports an account from the specified WIF string.
        /// </summary>
        /// <param name=""wif"">The WIF string to import.</param>
        /// <returns>The imported account.</returns>
        public virtual WalletAccount Import(string wif)
        {
            byte[] privateKey = GetPrivateKeyFromWIF(wif);
            WalletAccount account = CreateAccount(privateKey);
            Array.Clear(privateKey, 0, privateKey.Length);
            return account;
        }

        /// <summary>
        /// Imports an account from the specified NEP-2 string.
        /// </summary>
        /// <param name=""nep2"">The NEP-2 string to import.</param>
        /// <param name=""passphrase"">The passphrase of the private key.</param>
        /// <param name=""N"">The N field of the <see cref=""ScryptParameters""/> to be used.</param>
        /// <param name=""r"">The R field of the <see cref=""ScryptParameters""/> to be used.</param>
        /// <param name=""p"">The P field of the <see cref=""ScryptParameters""/> to be used.</param>
        /// <returns>The imported account.</returns>
        public virtual WalletAccount Import(string nep2, string passphrase, int N = 16384, int r = 8, int p = 8)
        {
            byte[] privateKey = GetPrivateKeyFromNEP2(nep2, passphrase, ProtocolSettings.AddressVersion, N, r, p);
            WalletAccount account = CreateAccount(privateKey);
            Array.Clear(privateKey, 0, privateKey.Length);
            return account;
        }

        /// <summary>
        /// Makes a transaction to transfer assets.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""outputs"">The array of <see cref=""TransferOutput""/> that contain the asset, amount, and targets of the transfer.</param>
        /// <param name=""from"">The account to transfer from.</param>
        /// <param name=""cosigners"">The cosigners to be added to the transction.</param>
        /// <returns>The created transction.</returns>
        public Transaction MakeTransaction(DataCache snapshot, TransferOutput[] outputs, UInt160 from = null, Signer[] cosigners = null)
        {
            UInt160[] accounts;
            if (from is null)
            {
                accounts = GetAccounts().Where(p => !p.Lock && !p.WatchOnly).Select(p => p.ScriptHash).ToArray();
            }
            else
            {
                accounts = new[] { from };
            }
            Dictionary<UInt160, Signer> cosignerList = cosigners?.ToDictionary(p => p.Account) ?? new Dictionary<UInt160, Signer>();
            byte[] script;
            List<(UInt160 Account, BigInteger Value)> balances_gas = null;
            using (ScriptBuilder sb = new())
            {
                foreach (var (assetId, group, sum) in outputs.GroupBy(p => p.AssetId, (k, g) => (k, g, g.Select(p => p.Value.Value).Sum())))
                {
                    var balances = new List<(UInt160 Account, BigInteger Value)>();
                    foreach (UInt160 account in accounts)
                    {
                        using ScriptBuilder sb2 = new();
                        sb2.EmitDynamicCall(assetId, ""balanceOf"", CallFlags.ReadOnly, account);
                        using ApplicationEngine engine = ApplicationEngine.Run(sb2.ToArray(), snapshot, settings: ProtocolSettings);
                        if (engine.State != VMState.HALT)
                            throw new InvalidOperationException($""Execution for {assetId}.balanceOf('{account}' fault"");
                        BigInteger value = engine.ResultStack.Pop().GetInteger();
                        if (value.Sign > 0) balances.Add((account, value));
                    }
                    BigInteger sum_balance = balances.Select(p => p.Value).Sum();
                    if (sum_balance < sum)
                        throw new InvalidOperationException($""It does not have enough balance, expected: {sum} found: {sum_balance}"");
                    foreach (TransferOutput output in group)
                    {
                        balances = balances.OrderBy(p => p.Value).ToList();
                        var balances_used = FindPayingAccounts(balances, output.Value.Value);
                        foreach (var (account, value) in balances_used)
                        {
                            if (cosignerList.TryGetValue(account, out Signer signer))
                            {
                                if (signer.Scopes != WitnessScope.Global)
                                    signer.Scopes |= WitnessScope.CalledByEntry;
                            }
                            else
                            {
                                cosignerList.Add(account, new Signer
                                {
                                    Account = account,
                                    Scopes = WitnessScope.CalledByEntry
                                });
                            }
                            sb.EmitDynamicCall(output.AssetId, ""transfer"", account, output.ScriptHash, value, output.Data);
                            sb.Emit(OpCode.ASSERT);
                        }
                    }
                    if (assetId.Equals(NativeContract.GAS.Hash))
                        balances_gas = balances;
                }
                script = sb.ToArray();
            }
            if (balances_gas is null)
                balances_gas = accounts.Select(p => (Account: p, Value: NativeContract.GAS.BalanceOf(snapshot, p))).Where(p => p.Value.Sign > 0).ToList();

            return MakeTransaction(snapshot, script, cosignerList.Values.ToArray(), Array.Empty<TransactionAttribute>(), balances_gas);
        }

        /// <summary>
        /// Makes a transaction to run a smart contract.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""script"">The script to be loaded in the transaction.</param>
        /// <param name=""sender"">The sender of the transaction.</param>
        /// <param name=""cosigners"">The cosigners to be added to the transction.</param>
        /// <param name=""attributes"">The attributes to be added to the transction.</param>
        /// <param name=""maxGas"">The maximum gas that can be spent to execute the script.</param>
        /// <returns>The created transction.</returns>
        public Transaction MakeTransaction(DataCache snapshot, byte[] script, UInt160 sender = null, Signer[] cosigners = null, TransactionAttribute[] attributes = null, long maxGas = ApplicationEngine.TestModeGas)
        {
            UInt160[] accounts;
            if (sender is null)
            {
                accounts = GetAccounts().Where(p => !p.Lock && !p.WatchOnly).Select(p => p.ScriptHash).ToArray();
            }
            else
            {
                accounts = new[] { sender };
            }
            var balances_gas = accounts.Select(p => (Account: p, Value: NativeContract.GAS.BalanceOf(snapshot, p))).Where(p => p.Value.Sign > 0).ToList();
            return MakeTransaction(snapshot, script, cosigners ?? Array.Empty<Signer>(), attributes ?? Array.Empty<TransactionAttribute>(), balances_gas, maxGas);
        }

        private Transaction MakeTransaction(DataCache snapshot, byte[] script, Signer[] cosigners, TransactionAttribute[] attributes, List<(UInt160 Account, BigInteger Value)> balances_gas, long maxGas = ApplicationEngine.TestModeGas)
        {
            Random rand = new();
            foreach (var (account, value) in balances_gas)
            {
                Transaction tx = new()
                {
                    Version = 0,
                    Nonce = (uint)rand.Next(),
                    Script = script,
                    ValidUntilBlock = NativeContract.Ledger.CurrentIndex(snapshot) + ProtocolSettings.MaxValidUntilBlockIncrement,
                    Signers = GetSigners(account, cosigners),
                    Attributes = attributes,
                };

                // will try to execute 'transfer' script to check if it works 
                using (ApplicationEngine engine = ApplicationEngine.Run(script, snapshot.CreateSnapshot(), tx, settings: ProtocolSettings, gas: maxGas))
                {
                    if (engine.State == VMState.FAULT)
                    {
                        throw new InvalidOperationException($""Failed execution for '{Convert.ToBase64String(script)}'"", engine.FaultException);
                    }
                    tx.SystemFee = engine.GasConsumed;
                }

                tx.NetworkFee = CalculateNetworkFee(snapshot, tx);
                if (value >= tx.SystemFee + tx.NetworkFee) return tx;
            }
            throw new InvalidOperationException(""Insufficient GAS"");
        }

        /// <summary>
        /// Calculates the network fee for the specified transaction.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""tx"">The transaction to calculate.</param>
        /// <returns>The network fee of the transaction.</returns>
        public long CalculateNetworkFee(DataCache snapshot, Transaction tx)
        {
            UInt160[] hashes = tx.GetScriptHashesForVerifying(snapshot);

            // base size for transaction: includes const_header + signers + attributes + script + hashes
            int size = Transaction.HeaderSize + tx.Signers.GetVarSize() + tx.Attributes.GetVarSize() + tx.Script.GetVarSize() + IO.Helper.GetVarSize(hashes.Length);
            uint exec_fee_factor = NativeContract.Policy.GetExecFeeFactor(snapshot);
            long networkFee = 0;
            int index = -1;
            foreach (UInt160 hash in hashes)
            {
                index++;
                byte[] witness_script = GetAccount(hash)?.Contract?.Script;
                byte[] invocationScript = null;

                if (tx.Witnesses != null)
                {
                    if (witness_script is null)
                    {
                        // Try to find the script in the witnesses
                        Witness witness = tx.Witnesses[index];
                        witness_script = witness?.VerificationScript;

                        if (witness_script is null || witness_script.Length == 0)
                        {
                            // Then it's a contract-based witness, so try to get the corresponding invocation script for it
                            invocationScript = witness?.InvocationScript;
                        }
                    }
                }

                if (witness_script is null || witness_script.Length == 0)
                {
                    var contract = NativeContract.ContractManagement.GetContract(snapshot, hash);
                    if (contract is null)
                        throw new ArgumentException($""The smart contract or address {hash} is not found"");
                    var md = contract.Manifest.Abi.GetMethod(""verify"", -1);
                    if (md is null)
                        throw new ArgumentException($""The smart contract {contract.Hash} haven't got verify method"");
                    if (md.ReturnType != ContractParameterType.Boolean)
                        throw new ArgumentException(""The verify method doesn't return boolean value."");
                    if (md.Parameters.Length > 0 && invocationScript is null)
                        throw new ArgumentException(""The verify method requires parameters that need to be passed via the witness' invocation script."");

                    // Empty verification and non-empty invocation scripts
                    var invSize = invocationScript != null ? invocationScript.GetVarSize() : Array.Empty<byte>().GetVarSize();
                    size += Array.Empty<byte>().GetVarSize() + invSize;

                    // Check verify cost
                    using ApplicationEngine engine = ApplicationEngine.Create(TriggerType.Verification, tx, snapshot.CreateSnapshot(), settings: ProtocolSettings);
                    engine.LoadContract(contract, md, CallFlags.ReadOnly);
                    if (invocationScript != null) engine.LoadScript(invocationScript, configureState: p => p.CallFlags = CallFlags.None);
                    if (engine.Execute() == VMState.FAULT) throw new ArgumentException($""Smart contract {contract.Hash} verification fault."");
                    if (!engine.ResultStack.Pop().GetBoolean()) throw new ArgumentException($""Smart contract {contract.Hash} returns false."");

                    networkFee += engine.GasConsumed;
                }
                else if (witness_script.IsSignatureContract())
                {
                    size += 67 + witness_script.GetVarSize();
                    networkFee += exec_fee_factor * SignatureContractCost();
                }
                else if (witness_script.IsMultiSigContract(out int m, out int n))
                {
                    int size_inv = 66 * m;
                    size += IO.Helper.GetVarSize(size_inv) + size_inv + witness_script.GetVarSize();
                    networkFee += exec_fee_factor * MultiSignatureContractCost(m, n);
                }
                else
                {
                    //We can support more contract types in the future.
                }
            }
            networkFee += size * NativeContract.Policy.GetFeePerByte(snapshot);
            return networkFee;
        }

        /// <summary>
        /// Signs the <see cref=""IVerifiable""/> in the specified <see cref=""ContractParametersContext""/> with the wallet.
        /// </summary>
        /// <param name=""context"">The <see cref=""ContractParametersContext""/> to be used.</param>
        /// <returns><see langword=""true""/> if the signature is successfully added to the context; otherwise, <see langword=""false""/>.</returns>
        public bool Sign(ContractParametersContext context)
        {
            if (context.Network != ProtocolSettings.Network) return false;
            bool fSuccess = false;
            foreach (UInt160 scriptHash in context.ScriptHashes)
            {
                WalletAccount account = GetAccount(scriptHash);

                if (account != null)
                {
                    // Try to sign self-contained multiSig

                    Contract multiSigContract = account.Contract;

                    if (multiSigContract != null &&
                        multiSigContract.Script.IsMultiSigContract(out int m, out ECPoint[] points))
                    {
                        foreach (var point in points)
                        {
                            account = GetAccount(point);
                            if (account?.HasKey != true) continue;
                            KeyPair key = account.GetKey();
                            byte[] signature = context.Verifiable.Sign(key, context.Network);
                            fSuccess |= context.AddSignature(multiSigContract, key.PublicKey, signature);
                            if (fSuccess) m--;
                            if (context.Completed || m <= 0) break;
                        }
                        continue;
                    }
                    else if (account.HasKey)
                    {
                        // Try to sign with regular accounts
                        KeyPair key = account.GetKey();
                        byte[] signature = context.Verifiable.Sign(key, context.Network);
                        fSuccess |= context.AddSignature(account.Contract, key.PublicKey, signature);
                        continue;
                    }
                }

                // Try Smart contract verification

                var contract = NativeContract.ContractManagement.GetContract(context.Snapshot, scriptHash);

                if (contract != null)
                {
                    var deployed = new DeployedContract(contract);

                    // Only works with verify without parameters

                    if (deployed.ParameterList.Length == 0)
                    {
                        fSuccess |= context.Add(deployed);
                    }
                }
            }

            return fSuccess;
        }

        /// <summary>
        /// Checks that the specified password is correct for the wallet.
        /// </summary>
        /// <param name=""password"">The password to be checked.</param>
        /// <returns><see langword=""true""/> if the password is correct; otherwise, <see langword=""false""/>.</returns>
        public abstract bool VerifyPassword(string password);
    }",1,777 539 587 2000 123 331 777 2001 2001 123 2002 59 125 331 777 539 815 2003 123 2004 59 125 331 777 815 2005 123 2006 59 125 331 777 539 2007 2007 123 2008 59 125 331 777 539 569 2009 40 815 2010 44 815 2011 41 59 331 777 539 569 2012 40 2013 2014 41 59 331 777 539 2015 2016 40 574 91 93 2017 41 59 331 777 539 2015 2016 40 2018 2019 44 2020 2021 61 752 41 59 331 777 539 2015 2016 40 2013 2014 41 59 331 777 539 865 2022 40 41 59 331 777 539 569 2023 40 2013 2014 41 59 331 777 539 2015 2024 40 2013 2014 41 59 331 777 539 2025 60 2015 62 2026 40 41 59 331 775 2000 40 815 2027 44 2001 2028 41 123 823 46 2001 61 2028 59 823 46 2005 61 2027 59 125 331 777 2015 2016 40 41 123 574 91 93 2017 61 744 574 91 1503 93 59 2029 58 830 123 860 40 2030 2031 61 2030 46 2032 40 41 41 123 2031 46 2033 40 2017 41 59 125 792 2016 40 2017 41 59 125 580 40 2034 41 123 677 2029 59 125 658 123 2035 46 2036 40 2017 44 1500 44 2017 46 2037 41 59 125 125 331 777 2015 2016 40 2018 2019 44 574 91 93 2017 41 123 688 40 2017 323 752 41 792 2016 40 2019 41 59 792 2016 40 2019 44 744 2020 40 2017 41 41 59 125 773 809 2038 60 40 2013 2039 44 2040 2041 41 62 2042 40 2038 60 40 2013 2039 44 2040 2041 41 62 2043 44 2040 2044 41 123 2045 2046 61 744 2038 60 40 2013 2039 44 2040 2041 41 62 40 41 59 2040 2047 61 2043 46 2048 40 2049 328 2049 46 2041 41 46 2050 40 41 59 688 40 2047 323 2044 41 123 2046 46 2051 40 2043 41 59 2043 46 2052 40 41 59 125 630 123 664 40 704 2053 61 1500 59 2053 60 2043 46 2054 59 2053 349 41 123 688 40 2043 91 2053 93 46 2041 60 2044 41 605 59 688 40 2043 91 2053 93 46 2041 323 2044 41 123 2046 46 2055 40 2043 91 2053 93 41 59 2043 46 2056 40 2053 41 59 125 630 123 2046 46 2057 40 40 2043 91 2053 93 46 2039 44 2044 41 41 59 2043 91 2053 93 61 40 2043 91 2053 93 46 2039 44 2043 91 2053 93 46 2041 45 2044 41 59 125 572 59 125 688 40 2046 46 2054 323 1500 41 123 704 2053 61 2043 46 2054 45 1501 59 870 40 2043 91 2053 93 46 2041 329 2044 41 123 2046 46 2058 40 2043 91 2053 93 41 59 2044 337 2043 91 2053 93 46 2041 59 2043 46 2059 40 2053 41 59 2053 338 59 125 688 40 2044 62 1500 41 123 664 40 2053 61 1500 59 2053 60 2043 46 2054 59 2053 349 41 123 688 40 2043 91 2053 93 46 2041 60 2044 41 605 59 688 40 2043 91 2053 93 46 2041 323 2044 41 123 2046 46 2060 40 2043 91 2053 93 41 59 2043 46 2061 40 2053 41 59 125 630 123 2046 46 2062 40 40 2043 91 2053 93 46 2039 44 2044 41 41 59 2043 91 2053 93 61 40 2043 91 2053 93 46 2039 44 2043 91 2053 93 46 2041 45 2044 41 59 125 572 59 125 125 125 125 792 2046 59 125 331 777 2015 2024 40 2063 2064 41 123 792 2024 40 2018 46 2065 40 2064 41 46 2066 40 41 41 59 125 331 777 2067 2068 40 2069 2070 44 2013 2071 41 123 2013 91 93 2072 61 2026 40 41 46 2073 40 2074 328 33 2074 46 2075 41 46 2076 40 2074 328 2074 46 2077 41 46 2078 40 41 59 792 2079 40 2070 44 2071 44 2072 41 59 125 331 777 2067 2080 40 2069 2070 44 2013 2071 44 766 2013 91 93 2081 41 123 574 91 93 2082 59 860 40 2083 2084 61 744 40 41 41 123 2084 46 2085 40 1500 41 59 665 40 2013 2086 696 2081 41 123 2084 46 2087 40 2071 44 362 44 2088 46 2089 44 2086 41 59 2084 46 2090 40 2091 46 2092 41 59 125 2084 46 2093 40 2071 44 362 44 2094 46 2095 41 59 2082 61 2084 46 2096 40 41 59 125 860 2097 2098 61 2097 46 2099 40 2082 44 2070 44 2028 58 2001 44 2100 58 1500 42 2081 46 2101 41 59 688 40 2098 46 2102 323 2103 46 2104 41 792 744 2067 40 2040 46 2105 44 1500 41 59 574 2106 61 40 574 41 2098 46 2107 46 2108 40 41 46 2109 40 41 59 2040 2044 61 2098 46 2107 46 2108 40 41 46 2109 40 41 59 792 744 2067 40 2044 44 2106 41 59 125 773 809 574 91 93 2110 40 574 91 93 2111 44 574 91 93 2021 41 123 860 2112 2113 61 2112 46 2114 40 41 59 2113 46 2115 61 2021 59 2113 46 2116 61 2117 46 2118 59 2113 46 2119 61 2120 46 2121 59 860 2122 2123 61 2113 46 2124 40 41 59 792 2123 46 2125 40 2111 44 1500 44 2111 46 2126 41 59 125 331 777 809 574 91 93 2127 40 815 2128 44 815 2129 44 574 2130 44 704 2131 61 1506 44 704 2132 61 1502 44 704 2133 61 1502 41 123 688 40 2128 323 752 41 825 744 2134 40 2135 40 2128 41 41 59 688 40 2129 323 752 41 825 744 2134 40 2135 40 2129 41 41 59 574 91 93 2111 61 2128 46 2136 40 41 59 688 40 2111 46 2137 340 1503 309 2111 91 1500 93 340 1501 309 2111 91 1501 93 340 1503 309 2111 91 1502 93 340 1504 41 825 744 2138 40 41 59 574 91 93 2139 61 744 574 91 1502 93 59 2140 46 2141 40 2111 44 1502 44 2139 44 1500 44 1502 41 59 574 91 93 2142 61 2143 46 2144 46 2145 40 2129 41 59 574 91 93 2146 61 2147 46 2148 40 2142 44 2139 44 2131 44 2132 44 2133 44 1503 41 59 2149 46 2150 40 2142 44 1500 44 2142 46 2137 41 59 574 91 93 2151 61 2146 91 46 46 1503 93 59 574 91 93 2152 61 2146 91 1503 93 59 2149 46 2150 40 2146 44 1500 44 2146 46 2137 41 59 574 91 93 2153 61 744 574 91 1503 93 59 2140 46 2141 40 2111 44 1502 44 2153 44 1500 44 1503 41 59 2149 46 2150 40 2111 44 1500 44 2111 46 2137 41 59 574 91 93 2154 61 2155 40 2110 40 2153 44 2152 41 44 2151 41 59 2149 46 2150 40 2151 44 1500 44 2151 46 2137 41 59 2149 46 2150 40 2152 44 1500 44 2152 46 2137 41 59 2063 2064 61 2156 46 2157 46 2158 46 2159 46 2160 42 2154 59 2013 2161 61 2018 46 2162 40 2064 41 46 2163 40 41 59 815 2164 61 2161 46 2165 40 2130 41 59 688 40 33 2143 46 2166 46 2145 40 2164 41 46 2167 40 41 46 2167 40 41 46 2168 40 1500 44 1502 41 46 2169 40 2139 41 41 825 744 2138 40 41 59 792 2154 59 125 331 777 809 574 91 93 2170 40 815 2171 41 123 688 40 2171 712 752 41 825 744 2172 40 2173 40 2171 41 41 59 574 91 93 2111 61 2171 46 2174 40 41 59 688 40 2111 46 2175 340 1503 309 2111 91 1500 93 340 1504 309 2111 91 1503 93 340 1501 41 825 744 2176 40 41 59 574 91 93 2017 61 744 574 91 1503 93 59 2177 46 2178 40 2111 44 1501 44 2017 44 1500 44 2017 46 2175 41 59 2179 46 2180 40 2111 44 1500 44 2111 46 2175 41 59 792 2017 59 125 773 809 2181 91 93 2182 40 2013 2183 44 2181 91 93 2184 41 123 664 40 704 2185 61 1500 59 2185 60 2184 46 2186 59 2185 349 41 123 688 40 2184 91 2185 93 46 2039 46 2187 40 2183 41 41 123 688 40 2185 323 1500 41 792 2184 59 2038 60 2181 62 2188 61 744 40 2184 41 59 2188 46 2189 40 2185 41 59 2188 46 2190 40 1500 44 2184 91 2185 93 41 59 792 2188 46 2191 40 41 59 125 125 792 2184 46 2192 40 744 2181 123 2039 61 2183 44 2193 61 2194 46 2195 125 41 46 2196 40 41 59 125 331 777 864 2015 2197 40 2198 2199 41 123 574 91 93 2017 59 860 40 2200 2201 61 2199 46 2202 40 41 41 123 2017 61 2201 46 2203 40 829 41 46 2204 59 125 2015 2205 61 2016 40 2017 41 59 2206 46 2207 40 2017 44 1500 44 2017 46 2208 41 59 792 2205 59 125 331 777 864 2015 2197 40 815 2171 41 123 574 91 93 2017 61 2170 40 2171 41 59 2015 2209 61 2016 40 2017 41 59 2210 46 2211 40 2017 44 1500 44 2017 46 2212 41 59 792 2209 59 125 331 777 864 2015 2197 40 815 2128 44 815 2129 44 704 2131 61 1506 44 704 2132 61 1502 44 704 2133 61 1502 41 123 574 91 93 2017 61 2127 40 2128 44 2129 44 2001 46 2213 44 2131 44 2132 44 2133 41 59 2015 2214 61 2016 40 2017 41 59 2215 46 2216 40 2017 44 1500 44 2017 46 2217 41 59 792 2214 59 125 331 777 2218 2219 40 2069 2070 44 2220 91 93 2221 44 2013 2222 61 752 44 2181 91 93 2184 61 752 41 123 2013 91 93 2081 59 688 40 2222 712 752 41 123 2081 61 2026 40 41 46 2223 40 2133 328 33 2133 46 2224 307 33 2133 46 2225 41 46 2226 40 2133 328 2133 46 2227 41 46 2228 40 41 59 125 630 123 2081 61 744 91 93 123 2222 125 59 125 2229 60 2013 44 2181 62 2230 61 2184 346 2231 40 2133 328 2133 46 2039 41 343 744 2229 60 2013 44 2181 62 40 41 59 574 91 93 2232 59 2038 60 40 2013 2039 44 2040 2041 41 62 2233 61 752 59 860 40 2234 2235 61 744 40 41 41 123 665 40 2236 40 2237 44 2238 44 2239 41 696 2221 46 2240 40 2133 328 2133 46 2241 44 40 2242 44 2243 41 328 40 2242 44 2243 44 2243 46 2244 40 2133 328 2133 46 2041 46 2041 41 46 2245 40 41 41 41 41 123 2236 2246 61 744 2038 60 40 2013 2039 44 2040 2041 41 62 40 41 59 665 40 2013 2247 696 2081 41 123 860 2234 2248 61 744 40 41 59 2248 46 2249 40 2237 44 362 44 2250 46 2251 44 2247 41 59 860 2252 2253 61 2252 46 2254 40 2248 46 2255 40 41 44 2070 44 2028 58 2001 41 59 688 40 2253 46 2256 340 2257 46 2258 41 825 744 2259 40 36 362 41 59 2040 2260 61 2253 46 2261 46 2262 40 41 46 2263 40 41 59 688 40 2260 46 2264 62 1500 41 2246 46 2265 40 40 2247 44 2260 41 41 59 125 2040 2266 61 2246 46 2244 40 2133 328 2133 46 2041 41 46 2245 40 41 59 688 40 2266 60 2239 41 825 744 2267 40 36 362 41 59 665 40 2220 2268 696 2238 41 123 2246 61 2246 46 2269 40 2133 328 2133 46 2041 41 46 2270 40 41 59 2236 2271 61 2042 40 2246 44 2268 46 2041 46 2041 41 59 665 40 2236 40 2247 44 2272 41 696 2271 41 123 688 40 2230 46 2273 40 2247 44 762 2181 2274 41 41 123 688 40 2274 46 2275 340 2276 46 2277 41 2274 46 2275 347 2276 46 2278 59 125 630 123 2230 46 2279 40 2247 44 744 2181 123 2039 61 2247 44 2280 61 2281 46 2282 125 41 59 125 2235 46 2283 40 2268 46 2241 44 362 44 2247 44 2268 46 2284 44 2272 44 2268 46 2285 41 59 2235 46 2286 40 2287 46 2288 41 59 125 125 688 40 2237 46 2289 40 2290 46 2291 46 2292 41 41 2233 61 2246 59 125 2232 61 2235 46 2293 40 41 59 125 688 40 2233 712 752 41 2233 61 2081 46 2294 40 2133 328 40 2039 58 2133 44 2041 58 2295 46 2296 46 2297 40 2070 44 2133 41 41 41 46 2298 40 2133 328 2133 46 2041 46 2299 62 1500 41 46 2300 40 41 59 792 2219 40 2070 44 2232 44 2230 46 2301 46 2302 40 41 44 2303 46 2304 60 2305 62 40 41 44 2233 41 59 125 331 777 2218 2219 40 2069 2070 44 574 91 93 2306 44 2013 2183 61 752 44 2181 91 93 2184 61 752 44 2307 91 93 2308 61 752 44 726 2309 61 2310 46 2311 41 123 2013 91 93 2081 59 688 40 2183 712 752 41 123 2081 61 2026 40 41 46 2312 40 2133 328 33 2133 46 2313 307 33 2133 46 2314 41 46 2315 40 2133 328 2133 46 2316 41 46 2317 40 41 59 125 630 123 2081 61 744 91 93 123 2183 125 59 125 2318 2319 61 2081 46 2320 40 2133 328 40 2039 58 2133 44 2041 58 2321 46 2322 46 2323 40 2070 44 2133 41 41 41 46 2324 40 2133 328 2133 46 2041 46 2325 62 1500 41 46 2326 40 41 59 792 2219 40 2070 44 2306 44 2184 343 2327 46 2328 60 2181 62 40 41 44 2308 343 2327 46 2328 60 2307 62 40 41 44 2319 44 2309 41 59 125 773 2218 2219 40 2069 2070 44 574 91 93 2306 44 2181 91 93 2184 44 2307 91 93 2308 44 2038 60 40 2013 2039 44 2040 2041 41 62 2329 44 726 2309 61 2310 46 2311 41 123 2330 2331 61 744 40 41 59 665 40 2332 40 2333 44 2334 41 696 2329 41 123 2218 2335 61 744 40 41 123 2007 61 1500 44 2336 61 40 842 41 2331 46 2337 40 41 44 2338 61 2306 44 2339 61 2340 46 2341 46 2342 40 2070 41 43 2001 46 2343 44 2344 61 2182 40 2333 44 2184 41 44 2345 61 2308 44 125 59 330 860 40 2310 2346 61 2310 46 2347 40 2306 44 2070 46 2348 40 41 44 2335 44 2028 58 2001 44 2349 58 2309 41 41 123 688 40 2346 46 2350 323 2351 46 2352 41 123 825 744 2353 40 36 362 44 2346 46 2354 41 59 125 2335 46 2355 61 2346 46 2356 59 125 2335 46 2357 61 2358 40 2070 44 2335 41 59 688 40 2334 325 2335 46 2359 43 2335 46 2357 41 792 2335 59 125 825 744 2360 40 362 41 59 125 331 777 726 2361 40 2069 2070 44 2218 2362 41 123 2013 91 93 2363 61 2362 46 2364 40 2070 41 59 330 704 2365 61 2218 46 2366 43 2362 46 2367 46 2368 40 41 43 2362 46 2369 46 2368 40 41 43 2362 46 2370 46 2368 40 41 43 2371 46 2372 46 2368 40 2363 46 2373 41 59 842 2374 61 2375 46 2376 46 2377 40 2070 41 59 726 2378 61 1500 59 704 2379 61 45 1501 59 665 40 2013 2380 696 2363 41 123 2379 349 59 574 91 93 2381 61 2024 40 2380 41 346 2018 346 2370 59 574 91 93 2382 61 752 59 688 40 2362 46 2383 340 752 41 123 688 40 2381 712 752 41 123 330 2384 2385 61 2362 46 2383 91 2379 93 59 2381 61 2385 346 2386 59 688 40 2381 712 752 309 2381 46 2373 323 1500 41 123 330 2382 61 2385 346 2387 59 125 125 125 688 40 2381 712 752 309 2381 46 2373 323 1500 41 123 2388 2019 61 2375 46 2389 46 2390 40 2070 44 2380 41 59 688 40 2019 712 752 41 825 744 2391 40 36 362 41 59 2388 2392 61 2019 46 2393 46 2394 46 2395 40 362 44 45 1501 41 59 688 40 2392 712 752 41 825 744 2391 40 36 362 41 59 688 40 2392 46 2396 340 2397 46 2398 41 825 744 2391 40 362 41 59 688 40 2392 46 2399 46 2373 62 1500 307 2382 712 752 41 825 744 2391 40 362 41 59 330 2388 2400 61 2382 340 752 63 2382 46 2368 40 41 58 2401 46 2402 60 574 62 40 41 46 2368 40 41 59 2365 348 2401 46 2402 60 574 62 40 41 46 2368 40 41 43 2400 59 330 860 2310 2403 61 2310 46 2404 40 2405 46 2406 44 2362 44 2070 46 2407 40 41 44 2028 58 2001 41 59 2403 46 2408 40 2019 44 2392 44 2409 46 2410 41 59 688 40 2382 340 752 41 2403 46 2411 40 2382 44 2412 58 2133 328 2133 46 2409 61 2409 46 2413 41 59 688 40 2403 46 2414 40 41 323 2415 46 2416 41 825 744 2391 40 36 362 41 59 688 40 33 2403 46 2417 46 2418 40 41 46 2419 40 41 41 825 744 2391 40 36 362 41 59 2378 348 2403 46 2420 59 125 630 688 40 2381 46 2421 40 41 41 123 2365 348 1503 43 2381 46 2368 40 41 59 2378 348 2374 42 2422 40 41 59 125 630 688 40 2381 46 2423 40 762 704 2424 44 762 704 2425 41 41 123 704 2426 61 1503 42 2424 59 2365 348 2371 46 2372 46 2368 40 2426 41 43 2426 43 2381 46 2368 40 41 59 2378 348 2374 42 2427 40 2424 44 2425 41 59 125 630 123 330 125 125 2378 348 2365 42 2375 46 2376 46 2428 40 2070 41 59 792 2378 59 125 331 777 569 2429 40 2430 2431 41 123 688 40 2431 46 2432 340 2001 46 2432 41 792 655 59 569 2433 61 655 59 665 40 2013 2014 696 2431 46 2434 41 123 2015 2435 61 2024 40 2014 41 59 688 40 2435 340 752 41 123 330 2018 2436 61 2435 46 2018 59 688 40 2436 340 752 307 2436 46 2437 46 2438 40 762 704 2439 44 762 2063 91 93 2440 41 41 123 665 40 2441 2442 696 2440 41 123 2435 61 2024 40 2442 41 59 688 40 2435 346 2443 340 829 41 605 59 2020 2021 61 2435 46 2444 40 41 59 574 91 93 2445 61 2431 46 2446 46 2429 40 2021 44 2431 46 2432 41 59 2433 347 2431 46 2447 40 2436 44 2021 46 2448 44 2445 41 59 688 40 2433 41 2439 338 59 688 40 2431 46 2449 309 2439 329 1500 41 572 59 125 605 59 125 630 688 40 2435 46 2450 41 123 330 2020 2021 61 2435 46 2451 40 41 59 574 91 93 2452 61 2431 46 2453 46 2429 40 2021 44 2431 46 2432 41 59 2433 347 2431 46 2454 40 2435 46 2018 44 2021 46 2455 44 2452 41 59 605 59 125 125 330 2456 2019 61 2457 46 2458 46 2459 40 2431 46 2460 44 2014 41 59 688 40 2019 340 752 41 123 2456 2461 61 744 2462 40 2019 41 59 330 688 40 2461 46 2463 46 2464 323 1500 41 123 2433 347 2431 46 2465 40 2461 41 59 125 125 125 792 2433 59 125 331 777 539 569 2466 40 815 2467 41 59 125 ,"{'AvgLine': 19, 'CountLine': 662, 'CountStmt': 296, 'MaxNesting': 6, 'AvgLineCode': 18, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 231, 'MaxEssential': 9, 'SumEssential': 75, 'AvgCyclomatic': 3, 'CountLineCode': 443, 'CountStmtDecl': 101, 'MaxCyclomatic': 16, 'SumCyclomatic': 101, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 51, 'CountSemicolon': 209, 'CountDeclMethod': 33, 'CountLineCodeExe': 261, 'CountLineComment': 168, 'CountClassCoupled': 57, 'CountClassDerived': 3, 'CountDeclProperty': 4, 'CountLineCodeDecl': 102, 'CountLineInactive': 0, 'CountDeclMethodAll': 39, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.38', 'AvgCyclomaticStrict': 4, 'MaxCyclomaticStrict': 19, 'SumCyclomaticStrict': 113, 'CountDeclClassMethod': 5, 'AvgCyclomaticModified': 3, 'CountDeclMethodPublic': 28, 'CountDeclPropertyAuto': 4, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 16, 'PercentLackOfCohesion': 78, 'SumCyclomaticModified': 101, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 4, 'CountDeclInstanceMethod': 28, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 1, 'CountClassCoupledModified': 47, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 73, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79805,C#,"    public abstract class Plugin : IDisposable
    {
        /// <summary>
        /// A list of all loaded plugins.
        /// </summary>
        public static readonly List<Plugin> Plugins = new();

        internal static readonly List<ILogPlugin> Loggers = new();
        internal static readonly Dictionary<string, IStorageProvider> Storages = new();
        internal static readonly List<IPersistencePlugin> PersistencePlugins = new();
        internal static readonly List<IP2PPlugin> P2PPlugins = new();
        internal static readonly List<IMemoryPoolTxObserverPlugin> TxObserverPlugins = new();

        /// <summary>
        /// The directory containing the plugin dll files. Files can be contained in any subdirectory.
        /// </summary>
        public static readonly string PluginsDirectory = Combine(GetDirectoryName(Assembly.GetEntryAssembly().Location), ""Plugins"");

        private static readonly FileSystemWatcher configWatcher;

        /// <summary>
        /// Indicates the location of the plugin configuration file.
        /// </summary>
        public virtual string ConfigFile => Combine(PluginsDirectory, GetType().Assembly.GetName().Name, ""config.json"");

        /// <summary>
        /// Indicates the name of the plugin.
        /// </summary>
        public virtual string Name => GetType().Name;

        /// <summary>
        /// Indicates the description of the plugin.
        /// </summary>
        public virtual string Description => """";

        /// <summary>
        /// Indicates the location of the plugin dll file.
        /// </summary>
        public virtual string Path => Combine(PluginsDirectory, GetType().Assembly.ManifestModule.ScopeName);

        /// <summary>
        /// Indicates the version of the plugin.
        /// </summary>
        public virtual Version Version => GetType().Assembly.GetName().Version;

        static Plugin()
        {
            if (Directory.Exists(PluginsDirectory))
            {
                configWatcher = new FileSystemWatcher(PluginsDirectory)
                {
                    EnableRaisingEvents = true,
                    IncludeSubdirectories = true,
                    NotifyFilter = NotifyFilters.CreationTime | NotifyFilters.LastWrite | NotifyFilters.Size,
                };
                configWatcher.Changed += ConfigWatcher_Changed;
                configWatcher.Created += ConfigWatcher_Changed;
                AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref=""Plugin""/> class.
        /// </summary>
        protected Plugin()
        {
            Plugins.Add(this);

            if (this is ILogPlugin logger) Loggers.Add(logger);
            if (this is IStorageProvider storage) Storages.Add(Name, storage);
            if (this is IP2PPlugin p2p) P2PPlugins.Add(p2p);
            if (this is IPersistencePlugin persistence) PersistencePlugins.Add(persistence);
            if (this is IMemoryPoolTxObserverPlugin txObserver) TxObserverPlugins.Add(txObserver);
            if (this is IApplicationEngineProvider provider) ApplicationEngine.SetApplicationEngineProvider(provider);

            Configure();
        }

        /// <summary>
        /// Called when the plugin is loaded and need to load the configure file, or the configuration file has been modified and needs to be reconfigured.
        /// </summary>
        protected virtual void Configure()
        {
        }

        private static void ConfigWatcher_Changed(object sender, FileSystemEventArgs e)
        {
            switch (GetExtension(e.Name))
            {
                case "".json"":
                    try
                    {
                        Plugins.FirstOrDefault(p => p.ConfigFile == e.FullPath)?.Configure();
                    }
                    catch (FormatException) { }
                    break;
                case "".dll"":
                    if (e.ChangeType != WatcherChangeTypes.Created) return;
                    if (GetDirectoryName(e.FullPath) != PluginsDirectory) return;
                    try
                    {
                        LoadPlugin(Assembly.Load(File.ReadAllBytes(e.FullPath)));
                    }
                    catch { }
                    break;
            }
        }

        private static Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)
        {
            if (args.Name.Contains("".resources""))
                return null;

            AssemblyName an = new(args.Name);

            Assembly assembly = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.FullName == args.Name);
            if (assembly is null)
                assembly = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.GetName().Name == an.Name);
            if (assembly != null) return assembly;

            string filename = an.Name + "".dll"";
            string path = filename;
            if (!File.Exists(path)) path = Combine(GetDirectoryName(Assembly.GetEntryAssembly().Location), filename);
            if (!File.Exists(path)) path = Combine(PluginsDirectory, filename);
            if (!File.Exists(path)) path = Combine(PluginsDirectory, args.RequestingAssembly.GetName().Name, filename);
            if (!File.Exists(path)) return null;

            try
            {
                return Assembly.Load(File.ReadAllBytes(path));
            }
            catch (Exception ex)
            {
                Utility.Log(nameof(Plugin), LogLevel.Error, ex);
                return null;
            }
        }

        public virtual void Dispose()
        {
        }

        /// <summary>
        /// Loads the configuration file from the path of <see cref=""ConfigFile""/>.
        /// </summary>
        /// <returns>The content of the configuration file read.</returns>
        protected IConfigurationSection GetConfiguration()
        {
            return new ConfigurationBuilder().AddJsonFile(ConfigFile, optional: true).Build().GetSection(""PluginConfiguration"");
        }

        private static void LoadPlugin(Assembly assembly)
        {
            foreach (Type type in assembly.ExportedTypes)
            {
                if (!type.IsSubclassOf(typeof(Plugin))) continue;
                if (type.IsAbstract) continue;

                ConstructorInfo constructor = type.GetConstructor(Type.EmptyTypes);
                try
                {
                    constructor?.Invoke(null);
                }
                catch (Exception ex)
                {
                    Utility.Log(nameof(Plugin), LogLevel.Error, ex);
                }
            }
        }

        internal static void LoadPlugins()
        {
            if (!Directory.Exists(PluginsDirectory)) return;
            List<Assembly> assemblies = new();
            foreach (string filename in Directory.EnumerateFiles(PluginsDirectory, ""*.dll"", SearchOption.TopDirectoryOnly))
            {
                try
                {
                    assemblies.Add(Assembly.Load(File.ReadAllBytes(filename)));
                }
                catch { }
            }
            foreach (Assembly assembly in assemblies)
            {
                LoadPlugin(assembly);
            }
        }

        /// <summary>
        /// Write a log for the plugin.
        /// </summary>
        /// <param name=""message"">The message of the log.</param>
        /// <param name=""level"">The level of the log.</param>
        protected void Log(object message, LogLevel level = LogLevel.Info)
        {
            Utility.Log($""{nameof(Plugin)}:{Name}"", level, message);
        }

        /// <summary>
        /// Called when a message to the plugins is received. The messnage is sent by calling <see cref=""SendMessage""/>.
        /// </summary>
        /// <param name=""message"">The received message.</param>
        /// <returns><see langword=""true""/> if the <paramref name=""message""/> has been handled; otherwise, <see langword=""false""/>.</returns>
        /// <remarks>If a message has been handled by a plugin, the other plugins won't receive it anymore.</remarks>
        protected virtual bool OnMessage(object message)
        {
            return false;
        }

        /// <summary>
        /// Called when a <see cref=""NeoSystem""/> is loaded.
        /// </summary>
        /// <param name=""system"">The loaded <see cref=""NeoSystem""/>.</param>
        internal protected virtual void OnSystemLoaded(NeoSystem system)
        {
        }

        /// <summary>
        /// Sends a message to all plugins. It can be handled by <see cref=""OnMessage""/>.
        /// </summary>
        /// <param name=""message"">The message to send.</param>
        /// <returns><see langword=""true""/> if the <paramref name=""message""/> is handled by a plugin; otherwise, <see langword=""false""/>.</returns>
        public static bool SendMessage(object message)
        {
            foreach (Plugin plugin in Plugins)
                if (plugin.OnMessage(message))
                    return true;
            return false;
        }
    }",1,777 539 587 2000 58 2001 123 331 777 809 780 2002 60 2000 62 2003 61 744 40 41 59 710 809 780 2002 60 2004 62 2005 61 744 40 41 59 710 809 780 2006 60 815 44 2007 62 2008 61 744 40 41 59 710 809 780 2002 60 2009 62 2010 61 744 40 41 59 710 809 780 2002 60 2011 62 2012 61 744 40 41 59 710 809 780 2002 60 2013 62 2014 61 744 40 41 59 331 777 809 780 815 2015 61 2016 40 2017 40 2018 46 2019 40 41 46 2020 41 44 362 41 59 773 809 780 2021 2022 59 331 777 864 815 2023 328 2016 40 2015 44 2024 40 41 46 2018 46 2025 40 41 46 2026 44 362 41 59 331 777 864 815 2026 328 2024 40 41 46 2026 59 331 777 864 815 2027 328 362 59 331 777 864 815 2028 328 2016 40 2015 44 2024 40 41 46 2018 46 2029 46 2030 41 59 331 777 864 2031 2031 328 2024 40 41 46 2018 46 2025 40 41 46 2031 59 809 2000 40 41 123 688 40 2032 46 2033 40 2015 41 41 123 2022 61 744 2021 40 2015 41 123 2034 61 829 44 2035 61 829 44 2036 61 2037 46 2038 124 2037 46 2039 124 2037 46 2040 44 125 59 2022 46 2041 348 2042 59 2022 46 2043 348 2042 59 2044 46 2045 46 2046 348 2047 59 125 125 331 775 2000 40 41 123 2003 46 2048 40 823 41 59 688 40 823 712 2004 2049 41 2005 46 2048 40 2049 41 59 688 40 823 712 2007 2050 41 2008 46 2048 40 2026 44 2050 41 59 688 40 823 712 2011 2051 41 2012 46 2048 40 2051 41 59 688 40 823 712 2009 2052 41 2010 46 2048 40 2052 41 59 688 40 823 712 2013 2053 41 2014 46 2048 40 2053 41 59 688 40 823 712 2054 2055 41 2056 46 2057 40 2055 41 59 2058 40 41 59 125 331 775 864 865 2059 40 41 123 125 773 809 865 2060 40 755 2061 44 2062 2063 41 123 819 40 2064 40 2063 46 2026 41 41 123 579 362 58 830 123 2003 46 2065 40 2066 328 2066 46 2023 323 2063 46 2067 41 346 2059 40 41 59 125 580 40 2068 41 123 125 572 59 579 362 58 688 40 2063 46 2069 340 2070 46 2071 41 792 59 688 40 2017 40 2063 46 2072 41 340 2015 41 792 59 830 123 2073 40 2018 46 2074 40 2075 46 2076 40 2063 46 2072 41 41 41 59 125 580 123 125 572 59 125 125 773 809 2018 2077 40 755 2061 44 2078 2079 41 123 688 40 2079 46 2026 46 2080 40 362 41 41 792 752 59 2081 2082 61 744 40 2079 46 2026 41 59 2018 2083 61 2084 46 2085 46 2086 40 41 46 2087 40 2088 328 2088 46 2089 323 2079 46 2026 41 59 688 40 2083 712 752 41 2083 61 2084 46 2085 46 2086 40 41 46 2087 40 2088 328 2088 46 2025 40 41 46 2026 323 2082 46 2026 41 59 688 40 2083 340 752 41 792 2083 59 815 2090 61 2082 46 2026 43 362 59 815 2091 61 2090 59 688 40 33 2092 46 2093 40 2091 41 41 2091 61 2016 40 2017 40 2018 46 2019 40 41 46 2020 41 44 2090 41 59 688 40 33 2092 46 2093 40 2091 41 41 2091 61 2016 40 2015 44 2090 41 59 688 40 33 2092 46 2093 40 2091 41 41 2091 61 2016 40 2015 44 2079 46 2094 46 2025 40 41 46 2026 44 2090 41 59 688 40 33 2092 46 2093 40 2091 41 41 792 752 59 830 123 792 2018 46 2095 40 2092 46 2096 40 2091 41 41 59 125 580 40 2097 2098 41 123 2099 46 2100 40 2101 40 2000 41 44 2102 46 2103 44 2098 41 59 792 752 59 125 125 777 864 865 2104 40 41 123 125 331 775 2105 2106 40 41 123 792 744 2107 40 41 46 2108 40 2023 44 2109 58 829 41 46 2110 40 41 46 2111 40 362 41 59 125 773 809 865 2112 40 2018 2113 41 123 665 40 2114 2115 696 2113 46 2116 41 123 688 40 33 2115 46 2117 40 836 40 2000 41 41 41 605 59 688 40 2115 46 2118 41 605 59 2119 2120 61 2115 46 2121 40 2114 46 2122 41 59 830 123 2120 346 2123 40 752 41 59 125 580 40 2124 2125 41 123 2126 46 2127 40 2128 40 2000 41 44 2129 46 2130 44 2125 41 59 125 125 125 710 809 865 2131 40 41 123 688 40 33 2132 46 2133 40 2015 41 41 792 59 2002 60 2018 62 2134 61 744 40 41 59 665 40 815 2135 696 2132 46 2136 40 2015 44 362 44 2137 46 2138 41 41 123 830 123 2134 46 2139 40 2018 46 2140 40 2141 46 2142 40 2135 41 41 41 59 125 580 123 125 125 665 40 2018 2113 696 2134 41 123 2112 40 2113 41 59 125 125 331 775 865 2143 40 755 2144 44 2145 2146 61 2145 46 2147 41 123 2148 46 2143 40 36 362 44 2146 44 2144 41 59 125 331 775 864 569 2149 40 755 2144 41 123 792 655 59 125 331 710 775 864 865 2150 40 2151 2152 41 123 125 331 777 809 569 2153 40 755 2144 41 123 665 40 2000 2154 696 2003 41 688 40 2154 46 2149 40 2144 41 41 792 829 59 792 655 59 125 125 ,"{'AvgLine': 7, 'CountLine': 230, 'CountStmt': 103, 'MaxNesting': 2, 'AvgLineCode': 7, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 73, 'MaxEssential': 5, 'SumEssential': 29, 'AvgCyclomatic': 2, 'CountLineCode': 151, 'CountStmtDecl': 33, 'MaxCyclomatic': 9, 'SumCyclomatic': 47, 'AvgLineComment': 0, 'CountClassBase': 2, 'CountLineBlank': 28, 'CountSemicolon': 59, 'CountDeclMethod': 18, 'CountLineCodeExe': 78, 'CountLineComment': 51, 'CountClassCoupled': 24, 'CountClassDerived': 2, 'CountDeclProperty': 5, 'CountLineCodeDecl': 33, 'CountLineInactive': 0, 'CountDeclMethodAll': 24, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.34', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 47, 'CountDeclClassMethod': 6, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 7, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 89, 'SumCyclomaticModified': 46, 'CountDeclClassVariable': 8, 'CountDeclMethodPrivate': 3, 'CountDeclInstanceMethod': 12, 'CountDeclMethodInternal': 1, 'CountDeclMethodProtected': 5, 'CountClassCoupledModified': 20, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 88, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 1, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79726,C#,"    public class ECPoint : IComparable<ECPoint>, IEquatable<ECPoint>, ISerializable
    {
        internal ECFieldElement X, Y;
        internal readonly ECCurve Curve;
        private byte[] _compressedPoint, _uncompressedPoint;

        /// <summary>
        /// Indicates whether it is a point at infinity.
        /// </summary>
        public bool IsInfinity
        {
            get { return X == null && Y == null; }
        }

        public int Size => IsInfinity ? 1 : 33;

        private static IO.Caching.ECPointCache pointCacheK1 { get; } = new(1000);
        private static IO.Caching.ECPointCache pointCacheR1 { get; } = new(1000);

        /// <summary>
        /// Initializes a new instance of the <see cref=""ECPoint""/> class with the secp256r1 curve.
        /// </summary>
        public ECPoint() : this(null, null, ECCurve.Secp256r1) { }

        internal ECPoint(ECFieldElement x, ECFieldElement y, ECCurve curve)
        {
            if ((x is null ^ y is null) || (curve is null))
                throw new ArgumentException(""Exactly one of the field elements is null"");
            this.X = x;
            this.Y = y;
            this.Curve = curve;
        }

        public int CompareTo(ECPoint other)
        {
            if (!Curve.Equals(other.Curve)) throw new InvalidOperationException(""Invalid comparision for points with different curves"");
            if (ReferenceEquals(this, other)) return 0;
            int result = X.CompareTo(other.X);
            if (result != 0) return result;
            return Y.CompareTo(other.Y);
        }

        /// <summary>
        /// Decode an <see cref=""ECPoint""/> object from a sequence of byte.
        /// </summary>
        /// <param name=""encoded"">The sequence of byte to be decoded.</param>
        /// <param name=""curve"">The <see cref=""ECCurve""/> object used to construct the <see cref=""ECPoint""/>.</param>
        /// <returns>The decoded point.</returns>
        public static ECPoint DecodePoint(ReadOnlySpan<byte> encoded, ECCurve curve)
        {
            ECPoint p = null;
            switch (encoded[0])
            {
                case 0x02: // compressed
                case 0x03: // compressed
                    {
                        if (encoded.Length != (curve.ExpectedECPointLength + 1))
                            throw new FormatException(""Incorrect length for compressed encoding"");
                        p = DecompressPoint(encoded, curve);
                        break;
                    }
                case 0x04: // uncompressed
                    {
                        if (encoded.Length != (2 * curve.ExpectedECPointLength + 1))
                            throw new FormatException(""Incorrect length for uncompressed/hybrid encoding"");
                        BigInteger X1 = new(encoded[1..(1 + curve.ExpectedECPointLength)], isUnsigned: true, isBigEndian: true);
                        BigInteger Y1 = new(encoded[(1 + curve.ExpectedECPointLength)..], isUnsigned: true, isBigEndian: true);
                        p = new ECPoint(new ECFieldElement(X1, curve), new ECFieldElement(Y1, curve), curve)
                        {
                            _uncompressedPoint = encoded.ToArray()
                        };
                        break;
                    }
                default:
                    throw new FormatException(""Invalid point encoding "" + encoded[0]);
            }
            return p;
        }

        private static ECPoint DecompressPoint(ReadOnlySpan<byte> encoded, ECCurve curve)
        {
            ECPointCache pointCache = null;
            if (curve == ECCurve.Secp256k1) pointCache = pointCacheK1;
            else if (curve == ECCurve.Secp256r1) pointCache = pointCacheR1;
            else throw new FormatException(""Invalid curve "" + curve);

            byte[] compressedPoint = encoded.ToArray();
            if (!pointCache.TryGet(compressedPoint, out ECPoint p))
            {
                int yTilde = encoded[0] & 1;
                BigInteger X1 = new(encoded[1..], isUnsigned: true, isBigEndian: true);
                p = DecompressPoint(yTilde, X1, curve);
                p._compressedPoint = compressedPoint;
                pointCache.Add(p);
            }
            return p;
        }

        private static ECPoint DecompressPoint(int yTilde, BigInteger X1, ECCurve curve)
        {
            ECFieldElement x = new(X1, curve);
            ECFieldElement alpha = x * (x.Square() + curve.A) + curve.B;
            ECFieldElement beta = alpha.Sqrt();

            //
            // if we can't find a sqrt we haven't got a point on the
            // curve - run!
            //
            if (beta == null)
                throw new ArithmeticException(""Invalid point compression"");

            BigInteger betaValue = beta.Value;
            int bit0 = betaValue.IsEven ? 0 : 1;

            if (bit0 != yTilde)
            {
                // Use the other root
                beta = new ECFieldElement(curve.Q - betaValue, curve);
            }

            return new ECPoint(x, beta, curve);
        }

        void ISerializable.Deserialize(BinaryReader reader)
        {
            ECPoint p = DeserializeFrom(reader, Curve);
            X = p.X;
            Y = p.Y;
        }

        /// <summary>
        /// Deserializes an <see cref=""ECPoint""/> object from a <see cref=""BinaryReader""/>.
        /// </summary>
        /// <param name=""reader"">The <see cref=""BinaryReader""/> for reading data.</param>
        /// <param name=""curve"">The <see cref=""ECCurve""/> object used to construct the <see cref=""ECPoint""/>.</param>
        /// <returns>The deserialized point.</returns>
        public static ECPoint DeserializeFrom(BinaryReader reader, ECCurve curve)
        {
            Span<byte> buffer = stackalloc byte[1 + curve.ExpectedECPointLength * 2];
            buffer[0] = reader.ReadByte();
            switch (buffer[0])
            {
                case 0x02:
                case 0x03:
                    {
                        if (reader.Read(buffer[1..(1 + curve.ExpectedECPointLength)]) != curve.ExpectedECPointLength)
                        {
                            throw new FormatException();
                        }
                        return DecodePoint(buffer[..(1 + curve.ExpectedECPointLength)], curve);
                    }
                case 0x04:
                    {
                        if (reader.Read(buffer[1..(1 + curve.ExpectedECPointLength * 2)]) != curve.ExpectedECPointLength * 2)
                        {
                            throw new FormatException();
                        }
                        return DecodePoint(buffer, curve);
                    }
                default:
                    throw new FormatException(""Invalid point encoding "" + buffer[0]);
            }
        }

        /// <summary>
        /// Encodes an <see cref=""ECPoint""/> object to a byte array.
        /// </summary>
        /// <param name=""commpressed"">Indicates whether to encode it in a compressed format.</param>
        /// <returns>The encoded point.</returns>
        /// <remarks>Note: The return should't be modified because it could be cached.</remarks>
        public byte[] EncodePoint(bool commpressed)
        {
            if (IsInfinity) return new byte[1];
            byte[] data;
            if (commpressed)
            {
                if (_compressedPoint != null) return _compressedPoint;
                data = new byte[33];
            }
            else
            {
                if (_uncompressedPoint != null) return _uncompressedPoint;
                data = new byte[65];
                byte[] yBytes = Y.Value.ToByteArray(isUnsigned: true, isBigEndian: true);
                Buffer.BlockCopy(yBytes, 0, data, 65 - yBytes.Length, yBytes.Length);
            }
            byte[] xBytes = X.Value.ToByteArray(isUnsigned: true, isBigEndian: true);
            Buffer.BlockCopy(xBytes, 0, data, 33 - xBytes.Length, xBytes.Length);
            data[0] = commpressed ? Y.Value.IsEven ? (byte)0x02 : (byte)0x03 : (byte)0x04;
            if (commpressed) _compressedPoint = data;
            else _uncompressedPoint = data;
            return data;
        }

        public bool Equals(ECPoint other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            if (IsInfinity && other.IsInfinity) return true;
            if (IsInfinity || other.IsInfinity) return false;
            return X.Equals(other.X) && Y.Equals(other.Y);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as ECPoint);
        }

        /// <summary>
        /// Constructs an <see cref=""ECPoint""/> object from a byte array.
        /// </summary>
        /// <param name=""bytes"">The byte array to be used to construct the object.</param>
        /// <param name=""curve"">The <see cref=""ECCurve""/> object used to construct the <see cref=""ECPoint""/>.</param>
        /// <returns>The decoded point.</returns>
        public static ECPoint FromBytes(byte[] bytes, ECCurve curve)
        {
            return bytes.Length switch
            {
                33 or 65 => DecodePoint(bytes, curve),
                64 or 72 => DecodePoint(Concat(new byte[] { 0x04 }, bytes[^64..]), curve),
                96 or 104 => DecodePoint(Concat(new byte[] { 0x04 }, bytes[^96..^32]), curve),
                _ => throw new FormatException(),
            };
        }

        public override int GetHashCode()
        {
            return X.GetHashCode() + Y.GetHashCode();
        }

        internal static ECPoint Multiply(ECPoint p, BigInteger k)
        {
            // floor(log2(k))
            int m = (int)k.GetBitLength();

            // width of the Window NAF
            sbyte width;

            // Required length of precomputation array
            int reqPreCompLen;

            // Determine optimal width and corresponding length of precomputation
            // array based on literature values
            if (m < 13)
            {
                width = 2;
                reqPreCompLen = 1;
            }
            else if (m < 41)
            {
                width = 3;
                reqPreCompLen = 2;
            }
            else if (m < 121)
            {
                width = 4;
                reqPreCompLen = 4;
            }
            else if (m < 337)
            {
                width = 5;
                reqPreCompLen = 8;
            }
            else if (m < 897)
            {
                width = 6;
                reqPreCompLen = 16;
            }
            else if (m < 2305)
            {
                width = 7;
                reqPreCompLen = 32;
            }
            else
            {
                width = 8;
                reqPreCompLen = 127;
            }

            // The length of the precomputation array
            int preCompLen = 1;

            ECPoint[] preComp = new ECPoint[] { p };
            ECPoint twiceP = p.Twice();

            if (preCompLen < reqPreCompLen)
            {
                // Precomputation array must be made bigger, copy existing preComp
                // array into the larger new preComp array
                ECPoint[] oldPreComp = preComp;
                preComp = new ECPoint[reqPreCompLen];
                Array.Copy(oldPreComp, 0, preComp, 0, preCompLen);

                for (int i = preCompLen; i < reqPreCompLen; i++)
                {
                    // Compute the new ECPoints for the precomputation array.
                    // The values 1, 3, 5, ..., 2^(width-1)-1 times p are
                    // computed
                    preComp[i] = twiceP + preComp[i - 1];
                }
            }

            // Compute the Window NAF of the desired width
            sbyte[] wnaf = WindowNaf(width, k);
            int l = wnaf.Length;

            // Apply the Window NAF to p using the precomputed ECPoint values.
            ECPoint q = p.Curve.Infinity;
            for (int i = l - 1; i >= 0; i--)
            {
                q = q.Twice();

                if (wnaf[i] != 0)
                {
                    if (wnaf[i] > 0)
                    {
                        q += preComp[(wnaf[i] - 1) / 2];
                    }
                    else
                    {
                        // wnaf[i] < 0
                        q -= preComp[(-wnaf[i] - 1) / 2];
                    }
                }
            }

            return q;
        }

        /// <summary>
        /// Parse the <see cref=""ECPoint""/> object from a <see cref=""string""/>.
        /// </summary>
        /// <param name=""value"">The <see cref=""string""/> to be parsed.</param>
        /// <param name=""curve"">The <see cref=""ECCurve""/> object used to construct the <see cref=""ECPoint""/>.</param>
        /// <returns>The parsed point.</returns>
        public static ECPoint Parse(string value, ECCurve curve)
        {
            return DecodePoint(value.HexToBytes(), curve);
        }

        void ISerializable.Serialize(BinaryWriter writer)
        {
            writer.Write(EncodePoint(true));
        }

        public override string ToString()
        {
            return EncodePoint(true).ToHexString();
        }

        /// <summary>
        /// Try parse the <see cref=""ECPoint""/> object from a <see cref=""string""/>.
        /// </summary>
        /// <param name=""value"">The <see cref=""string""/> to be parsed.</param>
        /// <param name=""curve"">The <see cref=""ECCurve""/> object used to construct the <see cref=""ECPoint""/>.</param>
        /// <param name=""point"">The parsed point.</param>
        /// <returns><see langword=""true""/> if <paramref name=""value""/> was converted successfully; otherwise, <see langword=""false""/>.</returns>
        public static bool TryParse(string value, ECCurve curve, out ECPoint point)
        {
            try
            {
                point = Parse(value, curve);
                return true;
            }
            catch (FormatException)
            {
                point = null;
                return false;
            }
        }

        internal ECPoint Twice()
        {
            if (this.IsInfinity)
                return this;
            if (this.Y.Value.Sign == 0)
                return Curve.Infinity;
            ECFieldElement TWO = new(2, Curve);
            ECFieldElement THREE = new(3, Curve);
            ECFieldElement gamma = (this.X.Square() * THREE + Curve.A) / (Y * TWO);
            ECFieldElement x3 = gamma.Square() - this.X * TWO;
            ECFieldElement y3 = gamma * (this.X - x3) - this.Y;
            return new ECPoint(x3, y3, Curve);
        }

        private static sbyte[] WindowNaf(sbyte width, BigInteger k)
        {
            sbyte[] wnaf = new sbyte[k.GetBitLength() + 1];
            short pow2wB = (short)(1 << width);
            int i = 0;
            int length = 0;
            while (k.Sign > 0)
            {
                if (!k.IsEven)
                {
                    BigInteger remainder = k % pow2wB;
                    if (remainder.TestBit(width - 1))
                    {
                        wnaf[i] = (sbyte)(remainder - pow2wB);
                    }
                    else
                    {
                        wnaf[i] = (sbyte)remainder;
                    }
                    k -= wnaf[i];
                    length = i;
                }
                else
                {
                    wnaf[i] = 0;
                }
                k >>= 1;
                i++;
            }
            length++;
            sbyte[] wnafShort = new sbyte[length];
            Array.Copy(wnaf, 0, wnafShort, 0, length);
            return wnafShort;
        }

        public static ECPoint operator -(ECPoint x)
        {
            return new ECPoint(x.X, -x.Y, x.Curve);
        }

        public static ECPoint operator *(ECPoint p, byte[] n)
        {
            if (p == null || n == null)
                throw new ArgumentNullException();
            if (n.Length != 32)
                throw new ArgumentException(null, nameof(n));
            if (p.IsInfinity)
                return p;
            BigInteger k = new(n, isUnsigned: true, isBigEndian: true);
            if (k.Sign == 0)
                return p.Curve.Infinity;
            return Multiply(p, k);
        }

        public static ECPoint operator +(ECPoint x, ECPoint y)
        {
            if (x.IsInfinity)
                return y;
            if (y.IsInfinity)
                return x;
            if (x.X.Equals(y.X))
            {
                if (x.Y.Equals(y.Y))
                    return x.Twice();
                return x.Curve.Infinity;
            }
            ECFieldElement gamma = (y.Y - x.Y) / (y.X - x.X);
            ECFieldElement x3 = gamma.Square() - x.X - y.X;
            ECFieldElement y3 = gamma * (x.X - x3) - x.Y;
            return new ECPoint(x3, y3, x.Curve);
        }

        public static ECPoint operator -(ECPoint x, ECPoint y)
        {
            if (y.IsInfinity)
                return x;
            return x + (-y);
        }
    }",1,777 587 2000 58 2001 60 2000 62 44 2002 60 2000 62 44 2003 123 710 2004 2005 44 2006 59 710 780 2007 2008 59 773 574 91 93 2009 44 2010 59 331 777 569 2011 123 2012 123 792 2005 323 752 307 2006 323 752 59 125 125 777 704 2013 328 2011 63 1501 58 1503 59 773 809 2014 46 2015 46 2016 2017 123 2018 59 125 61 744 40 1504 41 59 773 809 2014 46 2015 46 2016 2019 123 2020 59 125 61 744 40 1504 41 59 331 777 2000 40 41 58 823 40 752 44 752 44 2007 46 2021 41 123 125 710 2000 40 2004 2022 44 2004 2023 44 2007 2024 41 123 688 40 40 2022 712 752 94 2023 712 752 41 309 40 2024 712 752 41 41 825 744 2025 40 362 41 59 823 46 2005 61 2022 59 823 46 2006 61 2023 59 823 46 2008 61 2024 59 125 777 704 2026 40 2000 2027 41 123 688 40 33 2008 46 2028 40 2027 46 2008 41 41 825 744 2029 40 362 41 59 688 40 2030 40 823 44 2027 41 41 792 1500 59 704 2031 61 2005 46 2026 40 2027 46 2005 41 59 688 40 2031 340 1500 41 792 2031 59 792 2006 46 2026 40 2027 46 2006 41 59 125 331 777 809 2000 2032 40 2033 60 574 62 2034 44 2007 2024 41 123 2000 2035 61 752 59 819 40 2034 91 1500 93 41 123 579 1502 58 330 579 1502 58 330 123 688 40 2034 46 2036 340 40 2024 46 2037 43 1501 41 41 825 744 2038 40 362 41 59 2035 61 2039 40 2034 44 2024 41 59 572 59 125 579 1502 58 330 123 688 40 2034 46 2040 340 40 1502 42 2024 46 2041 43 1501 41 41 825 744 2042 40 362 41 59 2043 2044 61 744 40 2034 91 1501 40 1501 43 2024 46 2041 41 93 44 2045 58 829 44 2046 58 829 41 59 2043 2047 61 744 40 2034 91 40 1501 43 2024 46 2041 41 46 46 93 44 2045 58 829 44 2046 58 829 41 59 2035 61 744 2000 40 744 2004 40 2044 44 2024 41 44 744 2004 40 2047 44 2024 41 44 2024 41 123 2010 61 2034 46 2048 40 41 125 59 572 59 125 613 58 825 744 2049 40 362 43 2034 91 1500 93 41 59 125 792 2035 59 125 773 809 2000 2050 40 2033 60 574 62 2034 44 2007 2024 41 123 2016 2051 61 752 59 688 40 2024 323 2007 46 2052 41 2051 61 2017 59 630 688 40 2024 323 2007 46 2021 41 2051 61 2019 59 630 825 744 2053 40 362 43 2024 41 59 574 91 93 2054 61 2034 46 2055 40 41 59 688 40 33 2051 46 2056 40 2054 44 762 2000 2057 41 41 123 704 2058 61 2034 91 1500 93 38 1501 59 2059 2060 61 744 40 2034 91 1501 93 44 2061 58 829 44 2062 58 829 41 59 2057 61 2050 40 2058 44 2060 44 2024 41 59 2057 46 2009 61 2054 59 2051 46 2063 40 2057 41 59 125 792 2057 59 125 773 809 2000 2050 40 704 2064 44 2065 2066 44 2007 2024 41 123 2004 2022 61 744 40 2066 44 2024 41 59 2004 2067 61 2022 42 40 2022 46 2068 40 41 43 2024 46 2069 41 43 2024 46 2070 59 2004 2071 61 2067 46 2072 40 41 59 330 330 330 330 688 40 2071 323 752 41 825 744 2073 40 362 41 59 2065 2074 61 2071 46 2075 59 704 2076 61 2074 46 2077 63 1500 58 1501 59 688 40 2076 340 2064 41 123 330 2071 61 744 2004 40 2024 46 2078 45 2074 44 2024 41 59 125 792 744 2000 40 2022 44 2071 44 2024 41 59 125 865 2003 46 2079 40 2080 2081 41 123 2000 2082 61 2083 40 2081 44 2008 41 59 2005 61 2082 46 2005 59 2006 61 2082 46 2006 59 125 331 777 809 2000 2084 40 2080 2081 44 2007 2024 41 123 2085 60 574 62 2086 61 808 574 91 1501 43 2024 46 2087 42 1502 93 59 2086 91 1500 93 61 2081 46 2088 40 41 59 819 40 2086 91 1500 93 41 123 579 1502 58 579 1502 58 123 688 40 2081 46 2089 40 2086 91 1501 40 1501 43 2024 46 2087 41 93 41 340 2024 46 2087 41 123 825 744 2090 40 41 59 125 792 2032 40 2086 91 46 46 40 1501 43 2024 46 2087 41 93 44 2024 41 59 125 579 1502 58 123 688 40 2081 46 2091 40 2086 91 1501 40 1501 43 2024 46 2087 42 1502 41 93 41 340 2024 46 2087 42 1502 41 123 825 744 2092 40 41 59 125 792 2032 40 2086 44 2024 41 59 125 613 58 825 744 2093 40 362 43 2086 91 1500 93 41 59 125 125 331 777 574 91 93 2094 40 569 2095 41 123 688 40 2011 41 792 744 574 91 1501 93 59 574 91 93 2096 59 688 40 2095 41 123 688 40 2009 340 752 41 792 2009 59 2096 61 744 574 91 1503 93 59 125 630 123 688 40 2010 340 752 41 792 2010 59 2096 61 744 574 91 1503 93 59 574 91 93 2097 61 2006 46 2098 46 2099 40 2100 58 829 44 2101 58 829 41 59 2102 46 2103 40 2097 44 1500 44 2096 44 1503 45 2097 46 2104 44 2097 46 2104 41 59 125 574 91 93 2105 61 2005 46 2106 46 2107 40 2108 58 829 44 2109 58 829 41 59 2110 46 2111 40 2105 44 1500 44 2096 44 1503 45 2105 46 2112 44 2105 46 2112 41 59 2096 91 1500 93 61 2095 63 2006 46 2106 46 2113 63 40 574 41 1502 58 40 574 41 1502 58 40 574 41 1502 59 688 40 2095 41 2009 61 2096 59 630 2010 61 2096 59 792 2096 59 125 777 569 2114 40 2000 2027 41 123 688 40 2115 40 823 44 2027 41 41 792 829 59 688 40 2027 712 752 41 792 655 59 688 40 2011 307 2027 46 2011 41 792 829 59 688 40 2011 309 2027 46 2011 41 792 655 59 792 2005 46 2114 40 2027 46 2005 41 307 2006 46 2114 40 2027 46 2006 41 59 125 777 763 569 2114 40 755 2116 41 123 792 2114 40 2116 552 2000 41 59 125 331 777 809 2000 2117 40 574 91 93 2118 44 2007 2024 41 123 792 2118 46 2119 819 123 1503 2120 1503 328 2032 40 2118 44 2024 41 44 1503 2120 1503 328 2032 40 2121 40 744 574 91 93 123 1502 125 44 2118 91 94 1503 93 41 44 2024 41 44 1503 2120 1504 328 2032 40 2121 40 744 574 91 93 123 1502 125 44 2118 91 94 1503 94 1503 93 41 44 2024 41 44 2122 328 825 744 2123 40 41 44 125 59 125 777 763 704 2124 40 41 123 792 2005 46 2124 40 41 43 2006 46 2124 40 41 59 125 710 809 2000 2125 40 2000 2126 44 2065 2127 41 123 330 704 2128 61 40 704 41 2127 46 2129 40 41 59 330 797 2130 59 330 704 2131 59 330 330 688 40 2128 60 1503 41 123 2130 61 1502 59 2131 61 1501 59 125 630 688 40 2128 60 1503 41 123 2130 61 1502 59 2131 61 1502 59 125 630 688 40 2128 60 1504 41 123 2130 61 1502 59 2131 61 1502 59 125 630 688 40 2128 60 1504 41 123 2130 61 1502 59 2131 61 1502 59 125 630 688 40 2128 60 1504 41 123 2130 61 1502 59 2131 61 1503 59 125 630 688 40 2128 60 1505 41 123 2130 61 1502 59 2131 61 1503 59 125 630 123 2130 61 1502 59 2131 61 1504 59 125 330 704 2132 61 1501 59 2000 91 93 2133 61 744 2000 91 93 123 2126 125 59 2000 2134 61 2126 46 2135 40 41 59 688 40 2132 60 2131 41 123 330 330 2000 91 93 2136 61 2133 59 2133 61 744 2000 91 2131 93 59 2137 46 2138 40 2136 44 1500 44 2133 44 1500 44 2132 41 59 664 40 704 2139 61 2132 59 2139 60 2131 59 2139 349 41 123 330 330 330 2133 91 2139 93 61 2134 43 2133 91 2139 45 1501 93 59 125 125 330 797 91 93 2140 61 2141 40 2130 44 2127 41 59 704 2142 61 2140 46 2143 59 330 2000 2144 61 2126 46 2008 46 2145 59 664 40 704 2146 61 2142 45 1501 59 2146 325 1500 59 2146 338 41 123 2144 61 2144 46 2135 40 41 59 688 40 2140 91 2146 93 340 1500 41 123 688 40 2140 91 2146 93 62 1500 41 123 2144 348 2133 91 40 2140 91 2146 93 45 1501 41 47 1502 93 59 125 630 123 330 2144 337 2133 91 40 45 2140 91 2146 93 45 1501 41 47 1502 93 59 125 125 125 792 2144 59 125 331 777 809 2000 2147 40 815 2148 44 2007 2024 41 123 792 2032 40 2148 46 2149 40 41 44 2024 41 59 125 865 2003 46 2150 40 2151 2152 41 123 2152 46 2153 40 2094 40 829 41 41 59 125 777 763 815 2154 40 41 123 792 2094 40 829 41 46 2155 40 41 59 125 331 777 809 569 2156 40 815 2148 44 2007 2024 44 762 2000 2157 41 123 830 123 2157 61 2147 40 2148 44 2024 41 59 792 829 59 125 580 40 2158 41 123 2157 61 752 59 792 655 59 125 125 710 2000 2159 40 41 123 688 40 823 46 2011 41 792 823 59 688 40 823 46 2006 46 2160 46 2161 323 1500 41 792 2008 46 2162 59 2004 2163 61 744 40 1502 44 2008 41 59 2004 2164 61 744 40 1502 44 2008 41 59 2004 2165 61 40 823 46 2005 46 2166 40 41 42 2164 43 2008 46 2167 41 47 40 2006 42 2163 41 59 2004 2168 61 2165 46 2166 40 41 45 823 46 2005 42 2163 59 2004 2169 61 2165 42 40 823 46 2005 45 2168 41 45 823 46 2006 59 792 744 2000 40 2168 44 2169 44 2008 41 59 125 773 809 797 91 93 2170 40 797 2171 44 2065 2127 41 123 797 91 93 2172 61 744 797 91 2127 46 2173 40 41 43 1501 93 59 803 2174 61 40 803 41 40 1501 332 2171 41 59 704 2175 61 1500 59 704 2176 61 1500 59 870 40 2127 46 2177 62 1500 41 123 688 40 33 2127 46 2178 41 123 2065 2179 61 2127 37 2174 59 688 40 2179 46 2180 40 2171 45 1501 41 41 123 2172 91 2175 93 61 40 797 41 40 2179 45 2174 41 59 125 630 123 2172 91 2175 93 61 40 797 41 2179 59 125 2127 337 2172 91 2175 93 59 2176 61 2175 59 125 630 123 2172 91 2175 93 61 1500 59 125 2127 358 1501 59 2175 349 59 125 2176 349 59 797 91 93 2181 61 744 797 91 2176 93 59 2182 46 2183 40 2172 44 1500 44 2181 44 1500 44 2176 41 59 792 2181 59 125 777 809 2000 758 45 40 2000 2022 41 123 792 744 2000 40 2022 46 2005 44 45 2022 46 2006 44 2022 46 2008 41 59 125 777 809 2000 758 42 40 2000 2126 44 574 91 93 2184 41 123 688 40 2126 323 752 309 2184 323 752 41 825 744 2185 40 41 59 688 40 2184 46 2186 340 1503 41 825 744 2187 40 752 44 2188 40 2184 41 41 59 688 40 2126 46 2011 41 792 2126 59 2065 2127 61 744 40 2184 44 2189 58 829 44 2190 58 829 41 59 688 40 2127 46 2191 323 1500 41 792 2126 46 2008 46 2192 59 792 2125 40 2126 44 2127 41 59 125 777 809 2000 758 43 40 2000 2022 44 2000 2023 41 123 688 40 2022 46 2011 41 792 2023 59 688 40 2023 46 2011 41 792 2022 59 688 40 2022 46 2005 46 2114 40 2023 46 2005 41 41 123 688 40 2022 46 2006 46 2114 40 2023 46 2006 41 41 792 2022 46 2159 40 41 59 792 2022 46 2008 46 2193 59 125 2004 2194 61 40 2023 46 2006 45 2022 46 2006 41 47 40 2023 46 2005 45 2022 46 2005 41 59 2004 2195 61 2194 46 2196 40 41 45 2022 46 2005 45 2023 46 2005 59 2004 2197 61 2194 42 40 2022 46 2005 45 2195 41 45 2022 46 2006 59 792 744 2000 40 2195 44 2197 44 2022 46 2008 41 59 125 777 809 2000 758 45 40 2000 2022 44 2000 2023 41 123 688 40 2023 46 2011 41 792 2022 59 792 2022 43 40 45 2023 41 59 125 125 ,"{'AvgLine': 13, 'CountLine': 464, 'CountStmt': 240, 'MaxNesting': 3, 'AvgLineCode': 12, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 174, 'MaxEssential': 5, 'SumEssential': 55, 'AvgCyclomatic': 3, 'CountLineCode': 359, 'CountStmtDecl': 80, 'MaxCyclomatic': 12, 'SumCyclomatic': 81, 'AvgLineComment': 0, 'CountClassBase': 3, 'CountLineBlank': 43, 'CountSemicolon': 163, 'CountDeclMethod': 28, 'CountLineCodeExe': 208, 'CountLineComment': 65, 'CountClassCoupled': 23, 'CountClassDerived': 0, 'CountDeclProperty': 4, 'CountLineCodeDecl': 76, 'CountLineInactive': 0, 'CountDeclMethodAll': 34, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.18', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 12, 'SumCyclomaticStrict': 86, 'CountDeclClassMethod': 15, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 18, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 12, 'PercentLackOfCohesion': 77, 'SumCyclomaticModified': 77, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 7, 'CountDeclInstanceMethod': 13, 'CountDeclMethodInternal': 3, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 14, 'CountDeclInstanceVariable': 5, 'PercentLackOfCohesionModified': 40, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 2, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 3, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79815,C#,"    public abstract class NativeContract
    {
        private static readonly List<NativeContract> contractsList = new();
        private static readonly Dictionary<UInt160, NativeContract> contractsDictionary = new();
        private readonly Dictionary<int, ContractMethodMetadata> methods = new();
        private static int id_counter = 0;

        #region Named Native Contracts

        /// <summary>
        /// Gets the instance of the <see cref=""Native.ContractManagement""/> class.
        /// </summary>
        public static ContractManagement ContractManagement { get; } = new();

        /// <summary>
        /// Gets the instance of the <see cref=""Native.StdLib""/> class.
        /// </summary>
        public static StdLib StdLib { get; } = new();

        /// <summary>
        /// Gets the instance of the <see cref=""Native.CryptoLib""/> class.
        /// </summary>
        public static CryptoLib CryptoLib { get; } = new();

        /// <summary>
        /// Gets the instance of the <see cref=""LedgerContract""/> class.
        /// </summary>
        public static LedgerContract Ledger { get; } = new();

        /// <summary>
        /// Gets the instance of the <see cref=""NeoToken""/> class.
        /// </summary>
        public static NeoToken NEO { get; } = new();

        /// <summary>
        /// Gets the instance of the <see cref=""GasToken""/> class.
        /// </summary>
        public static GasToken GAS { get; } = new();

        /// <summary>
        /// Gets the instance of the <see cref=""PolicyContract""/> class.
        /// </summary>
        public static PolicyContract Policy { get; } = new();

        /// <summary>
        /// Gets the instance of the <see cref=""Native.RoleManagement""/> class.
        /// </summary>
        public static RoleManagement RoleManagement { get; } = new();

        /// <summary>
        /// Gets the instance of the <see cref=""OracleContract""/> class.
        /// </summary>
        public static OracleContract Oracle { get; } = new();

        #endregion

        /// <summary>
        /// Gets all native contracts.
        /// </summary>
        public static IReadOnlyCollection<NativeContract> Contracts { get; } = contractsList;

        /// <summary>
        /// The name of the native contract.
        /// </summary>
        public string Name => GetType().Name;

        /// <summary>
        /// The nef of the native contract.
        /// </summary>
        public NefFile Nef { get; }

        /// <summary>
        /// The hash of the native contract.
        /// </summary>
        public UInt160 Hash { get; }

        /// <summary>
        /// The id of the native contract.
        /// </summary>
        public int Id { get; } = --id_counter;

        /// <summary>
        /// The manifest of the native contract.
        /// </summary>
        public ContractManifest Manifest { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref=""NativeContract""/> class.
        /// </summary>
        protected NativeContract()
        {
            List<ContractMethodMetadata> descriptors = new();
            foreach (MemberInfo member in GetType().GetMembers(BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public))
            {
                ContractMethodAttribute attribute = member.GetCustomAttribute<ContractMethodAttribute>();
                if (attribute is null) continue;
                descriptors.Add(new ContractMethodMetadata(member, attribute));
            }
            descriptors = descriptors.OrderBy(p => p.Name).ThenBy(p => p.Parameters.Length).ToList();
            byte[] script;
            using (ScriptBuilder sb = new())
            {
                foreach (ContractMethodMetadata method in descriptors)
                {
                    method.Descriptor.Offset = sb.Length;
                    sb.EmitPush(0); //version
                    methods.Add(sb.Length, method);
                    sb.EmitSysCall(ApplicationEngine.System_Contract_CallNative);
                    sb.Emit(OpCode.RET);
                }
                script = sb.ToArray();
            }
            this.Nef = new NefFile
            {
                Compiler = ""neo-core-v3.0"",
                Source = string.Empty,
                Tokens = Array.Empty<MethodToken>(),
                Script = script
            };
            this.Nef.CheckSum = NefFile.ComputeChecksum(Nef);
            this.Hash = Helper.GetContractHash(UInt160.Zero, 0, Name);
            this.Manifest = new ContractManifest
            {
                Name = Name,
                Groups = Array.Empty<ContractGroup>(),
                SupportedStandards = Array.Empty<string>(),
                Abi = new ContractAbi()
                {
                    Events = Array.Empty<ContractEventDescriptor>(),
                    Methods = descriptors.Select(p => p.Descriptor).ToArray()
                },
                Permissions = new[] { ContractPermission.DefaultPermission },
                Trusts = WildcardContainer<ContractPermissionDescriptor>.Create(),
                Extra = null
            };
            contractsList.Add(this);
            contractsDictionary.Add(Hash, this);
        }

        /// <summary>
        /// Checks whether the committee has witnessed the current transaction.
        /// </summary>
        /// <param name=""engine"">The <see cref=""ApplicationEngine""/> that is executing the contract.</param>
        /// <returns><see langword=""true""/> if the committee has witnessed the current transaction; otherwise, <see langword=""false""/>.</returns>
        protected static bool CheckCommittee(ApplicationEngine engine)
        {
            UInt160 committeeMultiSigAddr = NEO.GetCommitteeAddress(engine.Snapshot);
            return engine.CheckWitnessInternal(committeeMultiSigAddr);
        }

        private protected KeyBuilder CreateStorageKey(byte prefix)
        {
            return new KeyBuilder(Id, prefix);
        }

        /// <summary>
        /// Gets the native contract with the specified hash.
        /// </summary>
        /// <param name=""hash"">The hash of the native contract.</param>
        /// <returns>The native contract with the specified hash.</returns>
        public static NativeContract GetContract(UInt160 hash)
        {
            contractsDictionary.TryGetValue(hash, out var contract);
            return contract;
        }

        internal async void Invoke(ApplicationEngine engine, byte version)
        {
            try
            {
                if (version != 0)
                    throw new InvalidOperationException($""The native contract of version {version} is not active."");
                ExecutionContext context = engine.CurrentContext;
                ContractMethodMetadata method = methods[context.InstructionPointer];
                ExecutionContextState state = context.GetState<ExecutionContextState>();
                if (!state.CallFlags.HasFlag(method.RequiredCallFlags))
                    throw new InvalidOperationException($""Cannot call this method with the flag {state.CallFlags}."");
                engine.AddGas(method.CpuFee * Policy.GetExecFeeFactor(engine.Snapshot) + method.StorageFee * Policy.GetStoragePrice(engine.Snapshot));
                List<object> parameters = new();
                if (method.NeedApplicationEngine) parameters.Add(engine);
                if (method.NeedSnapshot) parameters.Add(engine.Snapshot);
                for (int i = 0; i < method.Parameters.Length; i++)
                    parameters.Add(engine.Convert(context.EvaluationStack.Pop(), method.Parameters[i]));
                object returnValue = method.Handler.Invoke(this, parameters.ToArray());
                if (returnValue is ContractTask task)
                {
                    await task;
                    returnValue = task.GetResult();
                }
                if (method.Handler.ReturnType != typeof(void) && method.Handler.ReturnType != typeof(ContractTask))
                {
                    context.EvaluationStack.Push(engine.Convert(returnValue));
                }
            }
            catch (Exception ex)
            {
                engine.Throw(ex);
            }
        }

        /// <summary>
        /// Determine whether the specified contract is a native contract.
        /// </summary>
        /// <param name=""hash"">The hash of the contract.</param>
        /// <returns><see langword=""true""/> if the contract is native; otherwise, <see langword=""false""/>.</returns>
        public static bool IsNative(UInt160 hash)
        {
            return contractsDictionary.ContainsKey(hash);
        }

        internal virtual ContractTask Initialize(ApplicationEngine engine)
        {
            return ContractTask.CompletedTask;
        }

        internal virtual ContractTask OnPersist(ApplicationEngine engine)
        {
            return ContractTask.CompletedTask;
        }

        internal virtual ContractTask PostPersist(ApplicationEngine engine)
        {
            return ContractTask.CompletedTask;
        }
    }",1,777 539 587 2000 123 773 809 780 2001 60 2000 62 2002 61 744 40 41 59 773 809 780 2003 60 2004 44 2000 62 2005 61 744 40 41 59 773 780 2003 60 704 44 2006 62 2007 61 744 40 41 59 773 809 704 2008 61 1500 59 35 784 331 777 809 2009 2009 123 2010 59 125 61 744 40 41 59 331 777 809 2011 2011 123 2012 59 125 61 744 40 41 59 331 777 809 2013 2013 123 2014 59 125 61 744 40 41 59 331 777 809 2015 2016 123 2017 59 125 61 744 40 41 59 331 777 809 2018 2019 123 2020 59 125 61 744 40 41 59 331 777 809 2021 2022 123 2023 59 125 61 744 40 41 59 331 777 809 2024 2025 123 2026 59 125 61 744 40 41 59 331 777 809 2027 2027 123 2028 59 125 61 744 40 41 59 331 777 809 2029 2030 123 2031 59 125 61 744 40 41 59 35 637 331 777 809 2032 60 2000 62 2033 123 2034 59 125 61 2002 59 331 777 815 2035 328 2036 40 41 46 2035 59 331 777 2037 2038 123 2039 59 125 331 777 2004 2040 123 2041 59 125 331 777 704 2042 123 2043 59 125 61 338 2008 59 331 777 2044 2045 123 2046 59 125 331 775 2000 40 41 123 2001 60 2006 62 2047 61 744 40 41 59 665 40 2048 2049 696 2036 40 41 46 2050 40 2051 46 2052 124 2051 46 2053 124 2051 46 2054 124 2051 46 2055 41 41 123 2056 2057 61 2049 46 2058 60 2056 62 40 41 59 688 40 2057 712 752 41 605 59 2047 46 2059 40 744 2006 40 2049 44 2057 41 41 59 125 2047 61 2047 46 2060 40 2061 328 2061 46 2035 41 46 2062 40 2061 328 2061 46 2063 46 2064 41 46 2065 40 41 59 574 91 93 2066 59 860 40 2067 2068 61 744 40 41 41 123 665 40 2006 2069 696 2047 41 123 2069 46 2070 46 2071 61 2068 46 2064 59 2068 46 2072 40 1500 41 59 330 2007 46 2073 40 2068 46 2064 44 2069 41 59 2068 46 2074 40 2075 46 2076 41 59 2068 46 2077 40 2078 46 2079 41 59 125 2066 61 2068 46 2080 40 41 59 125 823 46 2038 61 744 2037 123 2081 61 362 44 2082 61 815 46 2083 44 2084 61 2085 46 2083 60 2086 62 40 41 44 2087 61 2066 125 59 823 46 2038 46 2088 61 2037 46 2089 40 2038 41 59 823 46 2040 61 2090 46 2091 40 2004 46 2092 44 1500 44 2035 41 59 823 46 2045 61 744 2044 123 2035 61 2035 44 2093 61 2094 46 2095 60 2096 62 40 41 44 2097 61 2094 46 2095 60 815 62 40 41 44 2098 61 744 2099 40 41 123 2100 61 2094 46 2095 60 2101 62 40 41 44 2102 61 2047 46 2103 40 2061 328 2061 46 2104 41 46 2105 40 41 125 44 2106 61 744 91 93 123 2107 46 2108 125 44 2109 61 2110 60 2111 62 46 2112 40 41 44 2113 61 752 125 59 2002 46 2114 40 823 41 59 2005 46 2114 40 2040 44 823 41 59 125 331 775 809 569 2115 40 2116 2117 41 123 2004 2118 61 2019 46 2119 40 2117 46 2120 41 59 792 2117 46 2121 40 2118 41 59 125 773 775 2122 2123 40 574 2124 41 123 792 744 2122 40 2042 44 2124 41 59 125 331 777 809 2000 2125 40 2004 2126 41 123 2005 46 2127 40 2126 44 762 2128 2129 41 59 792 2129 59 125 710 2130 865 2131 40 2116 2117 44 574 2132 41 123 830 123 688 40 2132 340 1500 41 825 744 2133 40 36 362 41 59 2134 2135 61 2117 46 2136 59 2006 2137 61 2007 91 2135 46 2138 93 59 2139 2140 61 2135 46 2141 60 2139 62 40 41 59 688 40 33 2140 46 2142 46 2143 40 2137 46 2144 41 41 825 744 2133 40 36 362 41 59 2117 46 2145 40 2137 46 2146 42 2025 46 2147 40 2117 46 2148 41 43 2137 46 2149 42 2025 46 2150 40 2117 46 2148 41 41 59 2001 60 755 62 2151 61 744 40 41 59 688 40 2137 46 2152 41 2151 46 2153 40 2117 41 59 688 40 2137 46 2154 41 2151 46 2153 40 2117 46 2148 41 59 664 40 704 2155 61 1500 59 2155 60 2137 46 2156 46 2157 59 2155 349 41 2151 46 2153 40 2117 46 2158 40 2135 46 2159 46 2160 40 41 44 2137 46 2156 91 2155 93 41 41 59 755 2161 61 2137 46 2162 46 2131 40 823 44 2151 46 2163 40 41 41 59 688 40 2161 712 2164 2165 41 123 2166 2165 59 2161 61 2165 46 2167 40 41 59 125 688 40 2137 46 2162 46 2168 340 836 40 865 41 307 2137 46 2162 46 2168 340 836 40 2164 41 41 123 2135 46 2159 46 2169 40 2117 46 2158 40 2161 41 41 59 125 125 580 40 2170 2171 41 123 2117 46 2172 40 2171 41 59 125 125 331 777 809 569 2173 40 2004 2126 41 123 792 2005 46 2174 40 2126 41 59 125 710 864 2175 2176 40 2116 2117 41 123 792 2175 46 2177 59 125 710 864 2175 2178 40 2116 2117 41 123 792 2175 46 2179 59 125 710 864 2175 2180 40 2116 2117 41 123 792 2175 46 2181 59 125 125 ,"{'AvgLine': 4, 'CountLine': 225, 'CountStmt': 99, 'MaxNesting': 2, 'AvgLineCode': 4, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 50, 'MaxEssential': 4, 'SumEssential': 17, 'AvgCyclomatic': 1, 'CountLineCode': 134, 'CountStmtDecl': 53, 'MaxCyclomatic': 9, 'SumCyclomatic': 23, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 26, 'CountSemicolon': 74, 'CountDeclMethod': 24, 'CountLineCodeExe': 82, 'CountLineComment': 64, 'CountClassCoupled': 39, 'CountClassDerived': 8, 'CountDeclProperty': 15, 'CountLineCodeDecl': 39, 'CountLineInactive': 0, 'CountDeclMethodAll': 30, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.48', 'AvgCyclomaticStrict': 1, 'MaxCyclomaticStrict': 10, 'SumCyclomaticStrict': 24, 'CountDeclClassMethod': 13, 'AvgCyclomaticModified': 1, 'CountDeclMethodPublic': 17, 'CountDeclPropertyAuto': 4, 'CountLinePreprocessor': 2, 'MaxCyclomaticModified': 9, 'PercentLackOfCohesion': 93, 'SumCyclomaticModified': 23, 'CountDeclClassVariable': 3, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 11, 'CountDeclMethodInternal': 4, 'CountDeclMethodProtected': 3, 'CountClassCoupledModified': 31, 'CountDeclInstanceVariable': 1, 'PercentLackOfCohesionModified': 93, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 1, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79722,C#,"    public static class Helper
    {
        /// <summary>
        /// Converts a byte array to an <see cref=""ISerializable""/> object.
        /// </summary>
        /// <typeparam name=""T"">The type to convert to.</typeparam>
        /// <param name=""value"">The byte array to be converted.</param>
        /// <param name=""start"">The offset into the byte array from which to begin using data.</param>
        /// <returns>The converted <see cref=""ISerializable""/> object.</returns>
        public static T AsSerializable<T>(this byte[] value, int start = 0) where T : ISerializable, new()
        {
            using MemoryStream ms = new(value, start, value.Length - start, false);
            using BinaryReader reader = new(ms, Utility.StrictUTF8, true);
            return reader.ReadSerializable<T>();
        }

        /// <summary>
        /// Converts a byte array to an <see cref=""ISerializable""/> object.
        /// </summary>
        /// <typeparam name=""T"">The type to convert to.</typeparam>
        /// <param name=""value"">The byte array to be converted.</param>
        /// <returns>The converted <see cref=""ISerializable""/> object.</returns>
        public static unsafe T AsSerializable<T>(this ReadOnlySpan<byte> value) where T : ISerializable, new()
        {
            if (value.IsEmpty) throw new FormatException();
            fixed (byte* pointer = value)
            {
                using UnmanagedMemoryStream ms = new(pointer, value.Length);
                using BinaryReader reader = new(ms, Utility.StrictUTF8, true);
                return reader.ReadSerializable<T>();
            }
        }

        /// <summary>
        /// Converts a byte array to an <see cref=""ISerializable""/> object.
        /// </summary>
        /// <param name=""value"">The byte array to be converted.</param>
        /// <param name=""type"">The type to convert to.</param>
        /// <returns>The converted <see cref=""ISerializable""/> object.</returns>
        public static ISerializable AsSerializable(this byte[] value, Type type)
        {
            if (!typeof(ISerializable).GetTypeInfo().IsAssignableFrom(type))
                throw new InvalidCastException();
            ISerializable serializable = (ISerializable)Activator.CreateInstance(type);
            using MemoryStream ms = new(value, false);
            using BinaryReader reader = new(ms, Utility.StrictUTF8, true);
            serializable.Deserialize(reader);
            return serializable;
        }

        /// <summary>
        /// Converts a byte array to an <see cref=""ISerializable""/> array.
        /// </summary>
        /// <typeparam name=""T"">The type of the array element.</typeparam>
        /// <param name=""value"">The byte array to be converted.</param>
        /// <param name=""max"">The maximum number of elements contained in the converted array.</param>
        /// <returns>The converted <see cref=""ISerializable""/> array.</returns>
        public static T[] AsSerializableArray<T>(this byte[] value, int max = 0x1000000) where T : ISerializable, new()
        {
            using MemoryStream ms = new(value, false);
            using BinaryReader reader = new(ms, Utility.StrictUTF8, true);
            return reader.ReadSerializableArray<T>(max);
        }

        /// <summary>
        /// Converts a byte array to an <see cref=""ISerializable""/> array.
        /// </summary>
        /// <typeparam name=""T"">The type of the array element.</typeparam>
        /// <param name=""value"">The byte array to be converted.</param>
        /// <param name=""max"">The maximum number of elements contained in the converted array.</param>
        /// <returns>The converted <see cref=""ISerializable""/> array.</returns>
        public static unsafe T[] AsSerializableArray<T>(this ReadOnlySpan<byte> value, int max = 0x1000000) where T : ISerializable, new()
        {
            if (value.IsEmpty) throw new FormatException();
            fixed (byte* pointer = value)
            {
                using UnmanagedMemoryStream ms = new(pointer, value.Length);
                using BinaryReader reader = new(ms, Utility.StrictUTF8, true);
                return reader.ReadSerializableArray<T>(max);
            }
        }

        /// <summary>
        /// Compresses the specified data using the LZ4 algorithm.
        /// </summary>
        /// <param name=""data"">The data to be compressed.</param>
        /// <returns>The compressed data.</returns>
        public static byte[] CompressLz4(this byte[] data)
        {
            int maxLength = LZ4Codec.MaximumOutputSize(data.Length);
            using var buffer = MemoryPool<byte>.Shared.Rent(maxLength);
            int length = LZ4Codec.Encode(data, buffer.Memory.Span);
            byte[] result = new byte[sizeof(uint) + length];
            BinaryPrimitives.WriteInt32LittleEndian(result, data.Length);
            buffer.Memory[..length].CopyTo(result.AsMemory(4));
            return result;
        }

        /// <summary>
        /// Decompresses the specified data using the LZ4 algorithm.
        /// </summary>
        /// <param name=""data"">The compressed data.</param>
        /// <param name=""maxOutput"">The maximum data size after decompression.</param>
        /// <returns>The original data.</returns>
        public static byte[] DecompressLz4(this byte[] data, int maxOutput)
        {
            int length = BinaryPrimitives.ReadInt32LittleEndian(data);
            if (length < 0 || length > maxOutput) throw new FormatException();
            byte[] result = new byte[length];
            if (LZ4Codec.Decode(data.AsSpan(4), result) != length)
                throw new FormatException();
            return result;
        }

        /// <summary>
        /// Fills the buffer with the data in the specified <see cref=""BinaryReader""/>.
        /// </summary>
        /// <param name=""reader"">The <see cref=""BinaryReader""/> to be used.</param>
        /// <param name=""buffer"">The buffer used to store data.</param>
        public static void FillBuffer(this BinaryReader reader, Span<byte> buffer)
        {
            while (!buffer.IsEmpty)
            {
                int count = reader.Read(buffer);
                if (count == 0) throw new EndOfStreamException();
                buffer = buffer[count..];
            }
        }

        /// <summary>
        /// Gets the size of variable-length of the data.
        /// </summary>
        /// <param name=""value"">The length of the data.</param>
        /// <returns>The size of variable-length of the data.</returns>
        public static int GetVarSize(int value)
        {
            if (value < 0xFD)
                return sizeof(byte);
            else if (value <= 0xFFFF)
                return sizeof(byte) + sizeof(ushort);
            else
                return sizeof(byte) + sizeof(uint);
        }

        /// <summary>
        /// Gets the size of the specified array encoded in variable-length encoding.
        /// </summary>
        /// <typeparam name=""T"">The type of the array element.</typeparam>
        /// <param name=""value"">The specified array.</param>
        /// <returns>The size of the array.</returns>
        public static int GetVarSize<T>(this IReadOnlyCollection<T> value)
        {
            int value_size;
            Type t = typeof(T);
            if (typeof(ISerializable).IsAssignableFrom(t))
            {
                value_size = value.OfType<ISerializable>().Sum(p => p.Size);
            }
            else if (t.GetTypeInfo().IsEnum)
            {
                int element_size;
                Type u = t.GetTypeInfo().GetEnumUnderlyingType();
                if (u == typeof(sbyte) || u == typeof(byte))
                    element_size = 1;
                else if (u == typeof(short) || u == typeof(ushort))
                    element_size = 2;
                else if (u == typeof(int) || u == typeof(uint))
                    element_size = 4;
                else //if (u == typeof(long) || u == typeof(ulong))
                    element_size = 8;
                value_size = value.Count * element_size;
            }
            else
            {
                value_size = value.Count * Marshal.SizeOf<T>();
            }
            return GetVarSize(value.Count) + value_size;
        }

        /// <summary>
        /// Gets the size of the specified <see cref=""string""/> encoded in variable-length encoding.
        /// </summary>
        /// <param name=""value"">The specified <see cref=""string""/>.</param>
        /// <returns>The size of the <see cref=""string""/>.</returns>
        public static int GetVarSize(this string value)
        {
            int size = Utility.StrictUTF8.GetByteCount(value);
            return GetVarSize(size) + size;
        }

        /// <summary>
        /// Reads a byte array of the specified size from a <see cref=""BinaryReader""/>.
        /// </summary>
        /// <param name=""reader"">The <see cref=""BinaryReader""/> for reading data.</param>
        /// <param name=""size"">The size of the byte array.</param>
        /// <returns>The byte array read from the <see cref=""BinaryReader""/>.</returns>
        public static byte[] ReadFixedBytes(this BinaryReader reader, int size)
        {
            var index = 0;
            var data = new byte[size];

            while (size > 0)
            {
                var bytesRead = reader.Read(data, index, size);

                if (bytesRead <= 0)
                {
                    throw new FormatException();
                }

                size -= bytesRead;
                index += bytesRead;
            }

            return data;
        }

        /// <summary>
        /// Reads a <see cref=""string""/> of the specified length from a <see cref=""BinaryReader""/>.
        /// </summary>
        /// <param name=""reader"">The <see cref=""BinaryReader""/> for reading data.</param>
        /// <param name=""length"">The length of the <see cref=""string""/>.</param>
        /// <returns>The <see cref=""string""/> read from the <see cref=""BinaryReader""/>.</returns>
        public static string ReadFixedString(this BinaryReader reader, int length)
        {
            byte[] data = reader.ReadFixedBytes(length);
            return Utility.StrictUTF8.GetString(data.TakeWhile(p => p != 0).ToArray());
        }

        /// <summary>
        /// Reads an <see cref=""ISerializable""/> array from a <see cref=""BinaryReader""/>.
        /// </summary>
        /// <typeparam name=""T"">The type of the array element.</typeparam>
        /// <param name=""reader"">The <see cref=""BinaryReader""/> for reading data.</param>
        /// <param name=""max"">The maximum number of elements in the array.</param>
        /// <returns>The array read from the <see cref=""BinaryReader""/>.</returns>
        public static T[] ReadNullableArray<T>(this BinaryReader reader, int max = 0x1000000) where T : class, ISerializable, new()
        {
            T[] array = new T[reader.ReadVarInt((ulong)max)];
            for (int i = 0; i < array.Length; i++)
                array[i] = reader.ReadBoolean() ? reader.ReadSerializable<T>() : null;
            return array;
        }

        /// <summary>
        /// Reads an <see cref=""ISerializable""/> object from a <see cref=""BinaryReader""/>.
        /// </summary>
        /// <typeparam name=""T"">The type of the <see cref=""ISerializable""/> object.</typeparam>
        /// <param name=""reader"">The <see cref=""BinaryReader""/> for reading data.</param>
        /// <returns>The object read from the <see cref=""BinaryReader""/>.</returns>
        public static T ReadSerializable<T>(this BinaryReader reader) where T : ISerializable, new()
        {
            T obj = new();
            obj.Deserialize(reader);
            return obj;
        }

        /// <summary>
        /// Reads an <see cref=""ISerializable""/> array from a <see cref=""BinaryReader""/>.
        /// </summary>
        /// <typeparam name=""T"">The type of the array element.</typeparam>
        /// <param name=""reader"">The <see cref=""BinaryReader""/> for reading data.</param>
        /// <param name=""max"">The maximum number of elements in the array.</param>
        /// <returns>The array read from the <see cref=""BinaryReader""/>.</returns>
        public static T[] ReadSerializableArray<T>(this BinaryReader reader, int max = 0x1000000) where T : ISerializable, new()
        {
            T[] array = new T[reader.ReadVarInt((ulong)max)];
            for (int i = 0; i < array.Length; i++)
            {
                array[i] = new T();
                array[i].Deserialize(reader);
            }
            return array;
        }

        /// <summary>
        /// Reads a byte array from a <see cref=""BinaryReader""/>.
        /// </summary>
        /// <param name=""reader"">The <see cref=""BinaryReader""/> for reading data.</param>
        /// <param name=""max"">The maximum size of the byte array.</param>
        /// <returns>The byte array read from the <see cref=""BinaryReader""/>.</returns>
        public static byte[] ReadVarBytes(this BinaryReader reader, int max = 0x1000000)
        {
            return reader.ReadFixedBytes((int)reader.ReadVarInt((ulong)max));
        }

        /// <summary>
        /// Reads an integer from a <see cref=""BinaryReader""/>.
        /// </summary>
        /// <param name=""reader"">The <see cref=""BinaryReader""/> for reading data.</param>
        /// <param name=""max"">The maximum value of the integer.</param>
        /// <returns>The integer read from the <see cref=""BinaryReader""/>.</returns>
        public static ulong ReadVarInt(this BinaryReader reader, ulong max = ulong.MaxValue)
        {
            byte fb = reader.ReadByte();
            ulong value;
            if (fb == 0xFD)
                value = reader.ReadUInt16();
            else if (fb == 0xFE)
                value = reader.ReadUInt32();
            else if (fb == 0xFF)
                value = reader.ReadUInt64();
            else
                value = fb;
            if (value > max) throw new FormatException();
            return value;
        }

        /// <summary>
        /// Reads a <see cref=""string""/> from a <see cref=""BinaryReader""/>.
        /// </summary>
        /// <param name=""reader"">The <see cref=""BinaryReader""/> for reading data.</param>
        /// <param name=""max"">The maximum size of the <see cref=""string""/>.</param>
        /// <returns>The <see cref=""string""/> read from the <see cref=""BinaryReader""/>.</returns>
        public static string ReadVarString(this BinaryReader reader, int max = 0x1000000)
        {
            return Utility.StrictUTF8.GetString(reader.ReadVarBytes(max));
        }

        /// <summary>
        /// Converts an <see cref=""ISerializable""/> object to a byte array.
        /// </summary>
        /// <param name=""value"">The <see cref=""ISerializable""/> object to be converted.</param>
        /// <returns>The converted byte array.</returns>
        public static byte[] ToArray(this ISerializable value)
        {
            using MemoryStream ms = new();
            using BinaryWriter writer = new(ms, Utility.StrictUTF8, true);
            value.Serialize(writer);
            writer.Flush();
            return ms.ToArray();
        }

        /// <summary>
        /// Converts an <see cref=""ISerializable""/> array to a byte array.
        /// </summary>
        /// <typeparam name=""T"">The type of the array element.</typeparam>
        /// <param name=""value"">The <see cref=""ISerializable""/> array to be converted.</param>
        /// <returns>The converted byte array.</returns>
        public static byte[] ToByteArray<T>(this IReadOnlyCollection<T> value) where T : ISerializable
        {
            using MemoryStream ms = new();
            using BinaryWriter writer = new(ms, Utility.StrictUTF8, true);
            writer.Write(value);
            writer.Flush();
            return ms.ToArray();
        }

        /// <summary>
        /// Writes an <see cref=""ISerializable""/> object into a <see cref=""BinaryWriter""/>.
        /// </summary>
        /// <param name=""writer"">The <see cref=""BinaryWriter""/> for writing data.</param>
        /// <param name=""value"">The <see cref=""ISerializable""/> object to be written.</param>
        public static void Write(this BinaryWriter writer, ISerializable value)
        {
            value.Serialize(writer);
        }

        /// <summary>
        /// Writes an <see cref=""ISerializable""/> array into a <see cref=""BinaryWriter""/>.
        /// </summary>
        /// <typeparam name=""T"">The type of the array element.</typeparam>
        /// <param name=""writer"">The <see cref=""BinaryWriter""/> for writing data.</param>
        /// <param name=""value"">The <see cref=""ISerializable""/> array to be written.</param>
        public static void Write<T>(this BinaryWriter writer, IReadOnlyCollection<T> value) where T : ISerializable
        {
            writer.WriteVarInt(value.Count);
            foreach (T item in value)
            {
                item.Serialize(writer);
            }
        }

        /// <summary>
        /// Writes a <see cref=""string""/> into a <see cref=""BinaryWriter""/>.
        /// </summary>
        /// <param name=""writer"">The <see cref=""BinaryWriter""/> for writing data.</param>
        /// <param name=""value"">The <see cref=""string""/> to be written.</param>
        /// <param name=""length"">The fixed size of the <see cref=""string""/>.</param>
        public static void WriteFixedString(this BinaryWriter writer, string value, int length)
        {
            if (value == null)
                throw new ArgumentNullException(nameof(value));
            if (value.Length > length)
                throw new ArgumentException(null, nameof(value));
            byte[] bytes = Utility.StrictUTF8.GetBytes(value);
            if (bytes.Length > length)
                throw new ArgumentException(null, nameof(value));
            writer.Write(bytes);
            if (bytes.Length < length)
                writer.Write(stackalloc byte[length - bytes.Length]);
        }

        /// <summary>
        /// Writes an <see cref=""ISerializable""/> array into a <see cref=""BinaryWriter""/>.
        /// </summary>
        /// <typeparam name=""T"">The type of the array element.</typeparam>
        /// <param name=""writer"">The <see cref=""BinaryWriter""/> for writing data.</param>
        /// <param name=""value"">The <see cref=""ISerializable""/> array to be written.</param>
        public static void WriteNullableArray<T>(this BinaryWriter writer, T[] value) where T : class, ISerializable
        {
            writer.WriteVarInt(value.Length);
            foreach (var item in value)
            {
                bool isNull = item is null;
                writer.Write(!isNull);
                if (isNull) continue;
                item.Serialize(writer);
            }
        }

        /// <summary>
        /// Writes a byte array into a <see cref=""BinaryWriter""/>.
        /// </summary>
        /// <param name=""writer"">The <see cref=""BinaryWriter""/> for writing data.</param>
        /// <param name=""value"">The byte array to be written.</param>
        public static void WriteVarBytes(this BinaryWriter writer, ReadOnlySpan<byte> value)
        {
            writer.WriteVarInt(value.Length);
            writer.Write(value);
        }

        /// <summary>
        /// Writes an integer into a <see cref=""BinaryWriter""/>.
        /// </summary>
        /// <param name=""writer"">The <see cref=""BinaryWriter""/> for writing data.</param>
        /// <param name=""value"">The integer to be written.</param>
        public static void WriteVarInt(this BinaryWriter writer, long value)
        {
            if (value < 0)
                throw new ArgumentOutOfRangeException(nameof(value));
            if (value < 0xFD)
            {
                writer.Write((byte)value);
            }
            else if (value <= 0xFFFF)
            {
                writer.Write((byte)0xFD);
                writer.Write((ushort)value);
            }
            else if (value <= 0xFFFFFFFF)
            {
                writer.Write((byte)0xFE);
                writer.Write((uint)value);
            }
            else
            {
                writer.Write((byte)0xFF);
                writer.Write(value);
            }
        }

        /// <summary>
        /// Writes a <see cref=""string""/> into a <see cref=""BinaryWriter""/>.
        /// </summary>
        /// <param name=""writer"">The <see cref=""BinaryWriter""/> for writing data.</param>
        /// <param name=""value"">The <see cref=""string""/> to be written.</param>
        public static void WriteVarString(this BinaryWriter writer, string value)
        {
            writer.WriteVarBytes(Utility.StrictUTF8.GetBytes(value));
        }
    }",1,777 809 587 2000 123 331 777 809 2001 2002 60 2001 62 40 823 574 91 93 2003 44 704 2004 61 1500 41 2005 2001 58 2006 44 744 40 41 123 860 2007 2008 61 744 40 2003 44 2004 44 2003 46 2009 45 2004 44 655 41 59 860 2010 2011 61 744 40 2008 44 2012 46 2013 44 829 41 59 792 2011 46 2014 60 2001 62 40 41 59 125 331 777 809 854 2001 2002 60 2001 62 40 823 2015 60 574 62 2003 41 2005 2001 58 2006 44 744 40 41 123 688 40 2003 46 2016 41 825 744 2017 40 41 59 659 40 574 42 2018 61 2003 41 123 860 2019 2020 61 744 40 2018 44 2003 46 2021 41 59 860 2022 2023 61 744 40 2020 44 2024 46 2025 44 829 41 59 792 2023 46 2026 60 2001 62 40 41 59 125 125 331 777 809 2006 2002 40 823 574 91 93 2003 44 2027 2028 41 123 688 40 33 836 40 2006 41 46 2029 40 41 46 2030 40 2028 41 41 825 744 2031 40 41 59 2006 2032 61 40 2006 41 2033 46 2034 40 2028 41 59 860 2035 2036 61 744 40 2003 44 655 41 59 860 2037 2038 61 744 40 2036 44 2039 46 2040 44 829 41 59 2032 46 2041 40 2038 41 59 792 2032 59 125 331 777 809 2001 91 93 2042 60 2001 62 40 823 574 91 93 2003 44 704 2043 61 1509 41 2005 2001 58 2006 44 744 40 41 123 860 2044 2045 61 744 40 2003 44 655 41 59 860 2046 2047 61 744 40 2045 44 2048 46 2049 44 829 41 59 792 2047 46 2050 60 2001 62 40 2043 41 59 125 331 777 809 854 2001 91 93 2042 60 2001 62 40 823 2015 60 574 62 2003 44 704 2043 61 1509 41 2005 2001 58 2006 44 744 40 41 123 688 40 2003 46 2051 41 825 744 2052 40 41 59 659 40 574 42 2053 61 2003 41 123 860 2054 2055 61 744 40 2053 44 2003 46 2056 41 59 860 2057 2058 61 744 40 2055 44 2059 46 2060 44 829 41 59 792 2058 46 2061 60 2001 62 40 2043 41 59 125 125 331 777 809 574 91 93 2062 40 823 574 91 93 2063 41 123 704 2064 61 2065 46 2066 40 2063 46 2067 41 59 860 2068 2069 61 2070 60 574 62 46 2071 46 2072 40 2064 41 59 704 2073 61 2065 46 2074 40 2063 44 2069 46 2075 46 2076 41 59 574 91 93 2077 61 744 574 91 805 40 842 41 43 2073 93 59 2078 46 2079 40 2077 44 2063 46 2067 41 59 2069 46 2075 91 46 46 2073 93 46 2080 40 2077 46 2081 40 1502 41 41 59 792 2077 59 125 331 777 809 574 91 93 2082 40 823 574 91 93 2063 44 704 2083 41 123 704 2084 61 2085 46 2086 40 2063 41 59 688 40 2084 60 1500 309 2084 62 2083 41 825 744 2087 40 41 59 574 91 93 2088 61 744 574 91 2084 93 59 688 40 2089 46 2090 40 2063 46 2091 40 1502 41 44 2088 41 340 2084 41 825 744 2087 40 41 59 792 2088 59 125 331 777 809 865 2092 40 823 2093 2094 44 2095 60 574 62 2096 41 123 870 40 33 2096 46 2097 41 123 704 2098 61 2094 46 2099 40 2096 41 59 688 40 2098 323 1500 41 825 744 2100 40 41 59 2096 61 2096 91 2098 46 46 93 59 125 125 331 777 809 704 2101 40 704 2003 41 123 688 40 2003 60 1504 41 792 805 40 574 41 59 630 688 40 2003 329 1506 41 792 805 40 574 41 43 805 40 859 41 59 630 792 805 40 574 41 43 805 40 842 41 59 125 331 777 809 704 2101 60 2001 62 40 823 2102 60 2001 62 2003 41 123 704 2103 59 2027 2104 61 836 40 2001 41 59 688 40 836 40 2006 41 46 2105 40 2104 41 41 123 2103 61 2003 46 2106 60 2006 62 40 41 46 2107 40 2108 328 2108 46 2109 41 59 125 630 688 40 2104 46 2110 40 41 46 2111 41 123 704 2112 59 2027 2113 61 2104 46 2110 40 41 46 2114 40 41 59 688 40 2113 323 836 40 797 41 309 2113 323 836 40 574 41 41 2112 61 1501 59 630 688 40 2113 323 836 40 803 41 309 2113 323 836 40 859 41 41 2112 61 1502 59 630 688 40 2113 323 836 40 704 41 309 2113 323 836 40 842 41 41 2112 61 1502 59 630 330 2112 61 1502 59 2103 61 2003 46 2115 42 2112 59 125 630 123 2103 61 2003 46 2116 42 2117 46 2118 60 2001 62 40 41 59 125 792 2101 40 2003 46 2119 41 43 2103 59 125 331 777 809 704 2101 40 823 815 2003 41 123 704 2120 61 2121 46 2122 46 2123 40 2003 41 59 792 2101 40 2120 41 43 2120 59 125 331 777 809 574 91 93 2124 40 823 2093 2094 44 704 2125 41 123 2126 2127 61 1500 59 2126 2063 61 744 574 91 2125 93 59 870 40 2125 62 1500 41 123 2126 2128 61 2094 46 2129 40 2063 44 2127 44 2125 41 59 688 40 2128 329 1500 41 123 825 744 2130 40 41 59 125 2125 337 2128 59 2127 348 2128 59 125 792 2063 59 125 331 777 809 815 2131 40 823 2093 2094 44 704 2132 41 123 574 91 93 2063 61 2094 46 2124 40 2132 41 59 792 2133 46 2134 46 2135 40 2063 46 2136 40 2137 328 2137 340 1500 41 46 2138 40 41 41 59 125 331 777 809 2001 91 93 2139 60 2001 62 40 823 2093 2094 44 704 2043 61 1509 41 2005 2001 58 587 44 2006 44 744 40 41 123 2001 91 93 2140 61 744 2001 91 2094 46 2141 40 40 848 41 2043 41 93 59 664 40 704 2142 61 1500 59 2142 60 2140 46 2143 59 2142 349 41 2140 91 2142 93 61 2094 46 2144 40 41 63 2094 46 2145 60 2001 62 40 41 58 752 59 792 2140 59 125 331 777 809 2001 2146 60 2001 62 40 823 2093 2094 41 2005 2001 58 2006 44 744 40 41 123 2001 2147 61 744 40 41 59 2147 46 2148 40 2094 41 59 792 2147 59 125 331 777 809 2001 91 93 2149 60 2001 62 40 823 2093 2094 44 704 2043 61 1509 41 2005 2001 58 2006 44 744 40 41 123 2001 91 93 2150 61 744 2001 91 2094 46 2151 40 40 848 41 2043 41 93 59 664 40 704 2152 61 1500 59 2152 60 2150 46 2153 59 2152 349 41 123 2150 91 2152 93 61 744 2001 40 41 59 2150 91 2152 93 46 2154 40 2094 41 59 125 792 2150 59 125 331 777 809 574 91 93 2155 40 823 2093 2094 44 704 2043 61 1509 41 123 792 2094 46 2124 40 40 704 41 2094 46 2156 40 40 848 41 2043 41 41 59 125 331 777 809 848 2157 40 823 2093 2094 44 848 2043 61 848 46 2158 41 123 574 2159 61 2094 46 2160 40 41 59 848 2003 59 688 40 2159 323 1504 41 2003 61 2094 46 2161 40 41 59 630 688 40 2159 323 1504 41 2003 61 2094 46 2162 40 41 59 630 688 40 2159 323 1504 41 2003 61 2094 46 2163 40 41 59 630 2003 61 2159 59 688 40 2003 62 2043 41 825 744 2164 40 41 59 792 2003 59 125 331 777 809 815 2165 40 823 2093 2094 44 704 2043 61 1509 41 123 792 2166 46 2167 46 2168 40 2094 46 2155 40 2043 41 41 59 125 331 777 809 574 91 93 2169 40 823 2006 2003 41 123 860 2170 2171 61 744 40 41 59 860 2172 2173 61 744 40 2171 44 2174 46 2175 44 829 41 59 2003 46 2176 40 2173 41 59 2173 46 2177 40 41 59 792 2171 46 2169 40 41 59 125 331 777 809 574 91 93 2178 60 2001 62 40 823 2102 60 2001 62 2003 41 2005 2001 58 2006 123 860 2179 2180 61 744 40 41 59 860 2181 2182 61 744 40 2180 44 2183 46 2184 44 829 41 59 2182 46 2185 40 2003 41 59 2182 46 2186 40 41 59 792 2180 46 2169 40 41 59 125 331 777 809 865 2187 40 823 2188 2189 44 2006 2003 41 123 2003 46 2190 40 2189 41 59 125 331 777 809 865 2187 60 2001 62 40 823 2188 2189 44 2102 60 2001 62 2003 41 2005 2001 58 2006 123 2189 46 2191 40 2003 46 2192 41 59 665 40 2001 2193 696 2003 41 123 2193 46 2194 40 2189 41 59 125 125 331 777 809 865 2195 40 823 2188 2189 44 815 2003 44 704 2132 41 123 688 40 2003 323 752 41 825 744 2196 40 2197 40 2003 41 41 59 688 40 2003 46 2198 62 2132 41 825 744 2199 40 752 44 2197 40 2003 41 41 59 574 91 93 2200 61 2201 46 2202 46 2203 40 2003 41 59 688 40 2200 46 2198 62 2132 41 825 744 2199 40 752 44 2197 40 2003 41 41 59 2189 46 2187 40 2200 41 59 688 40 2200 46 2198 60 2132 41 2189 46 2187 40 808 574 91 2132 45 2200 46 2198 93 41 59 125 331 777 809 865 2204 60 2001 62 40 823 2188 2189 44 2001 91 93 2003 41 2005 2001 58 587 44 2006 123 2189 46 2205 40 2003 46 2206 41 59 665 40 2207 2208 696 2003 41 123 569 2209 61 2208 712 752 59 2189 46 2187 40 33 2209 41 59 688 40 2209 41 605 59 2208 46 2210 40 2189 41 59 125 125 331 777 809 865 2211 40 823 2188 2189 44 2015 60 574 62 2003 41 123 2189 46 2212 40 2003 46 2213 41 59 2189 46 2187 40 2003 41 59 125 331 777 809 865 2214 40 823 2188 2189 44 726 2003 41 123 688 40 2003 60 1500 41 825 744 2215 40 2216 40 2003 41 41 59 688 40 2003 60 1504 41 123 2189 46 2187 40 40 574 41 2003 41 59 125 630 688 40 2003 329 1506 41 123 2189 46 2187 40 40 574 41 1504 41 59 2189 46 2187 40 40 859 41 2003 41 59 125 630 688 40 2003 329 1511 41 123 2189 46 2187 40 40 574 41 1504 41 59 2189 46 2187 40 40 842 41 2003 41 59 125 630 123 2189 46 2187 40 40 574 41 1504 41 59 2189 46 2187 40 2003 41 59 125 125 331 777 809 865 2217 40 823 2188 2189 44 815 2003 41 123 2189 46 2211 40 2218 46 2219 46 2220 40 2003 41 41 59 125 125 ,"{'AvgLine': 9, 'CountLine': 462, 'CountStmt': 169, 'MaxNesting': 2, 'AvgLineCode': 9, 'AvgEssential': 1, 'AvgLineBlank': 0, 'CountStmtExe': 128, 'MaxEssential': 4, 'SumEssential': 43, 'AvgCyclomatic': 2, 'CountLineCode': 267, 'CountStmtDecl': 54, 'MaxCyclomatic': 6, 'SumCyclomatic': 64, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 31, 'CountSemicolon': 120, 'CountDeclMethod': 28, 'CountLineCodeExe': 147, 'CountLineComment': 165, 'CountClassCoupled': 27, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 58, 'CountLineInactive': 0, 'CountDeclMethodAll': 34, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.62', 'AvgCyclomaticStrict': 2, 'MaxCyclomaticStrict': 9, 'SumCyclomaticStrict': 68, 'CountDeclClassMethod': 28, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 28, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 6, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 64, 'CountDeclClassVariable': 0, 'CountDeclMethodPrivate': 0, 'CountDeclInstanceMethod': 0, 'CountDeclMethodInternal': 0, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 14, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79753,C#,"    public static class Helper
    {
        /// <summary>
        /// The maximum GAS that can be consumed when <see cref=""VerifyWitnesses""/> is called.
        /// </summary>
        public const long MaxVerificationGas = 1_50000000;

        /// <summary>
        /// Calculates the verification fee for a signature address.
        /// </summary>
        /// <returns>The calculated cost.</returns>
        public static long SignatureContractCost() =>
            ApplicationEngine.OpCodePrices[OpCode.PUSHDATA1] * 2 +
            ApplicationEngine.OpCodePrices[OpCode.SYSCALL] +
            ApplicationEngine.CheckSigPrice;

        /// <summary>
        /// Calculates the verification fee for a multi-signature address.
        /// </summary>
        /// <param name=""m"">The minimum number of correct signatures that need to be provided in order for the verification to pass.</param>
        /// <param name=""n"">The number of public keys in the account.</param>
        /// <returns>The calculated cost.</returns>
        public static long MultiSignatureContractCost(int m, int n)
        {
            long fee = ApplicationEngine.OpCodePrices[OpCode.PUSHDATA1] * (m + n);
            using (ScriptBuilder sb = new())
                fee += ApplicationEngine.OpCodePrices[(OpCode)sb.EmitPush(m).ToArray()[0]];
            using (ScriptBuilder sb = new())
                fee += ApplicationEngine.OpCodePrices[(OpCode)sb.EmitPush(n).ToArray()[0]];
            fee += ApplicationEngine.OpCodePrices[OpCode.SYSCALL];
            fee += ApplicationEngine.CheckSigPrice * n;
            return fee;
        }

        /// <summary>
        /// Check the correctness of the script and ABI.
        /// </summary>
        /// <param name=""script"">The script of the contract.</param>
        /// <param name=""abi"">The ABI of the contract.</param>
        public static void Check(byte[] script, ContractAbi abi)
        {
            Check(new Script(script, true), abi);
        }

        /// <summary>
        /// Check the correctness of the script and ABI.
        /// </summary>
        /// <param name=""script"">The script of the contract.</param>
        /// <param name=""abi"">The ABI of the contract.</param>
        /// <remarks>Note: The <see cref=""Script""/> passed to this method should be constructed with strict mode.</remarks>
        public static void Check(this Script script, ContractAbi abi)
        {
            foreach (ContractMethodDescriptor method in abi.Methods)
                script.GetInstruction(method.Offset);
            abi.GetMethod(string.Empty, 0); // Trigger the construction of ContractAbi.methodDictionary to check the uniqueness of the method names.
            _ = abi.Events.ToDictionary(p => p.Name); // Check the uniqueness of the event names.
        }

        /// <summary>
        /// Computes the hash of a deployed contract.
        /// </summary>
        /// <param name=""sender"">The sender of the transaction that deployed the contract.</param>
        /// <param name=""nefCheckSum"">The checksum of the nef file of the contract.</param>
        /// <param name=""name"">The name of the contract.</param>
        /// <returns>The hash of the contract.</returns>
        public static UInt160 GetContractHash(UInt160 sender, uint nefCheckSum, string name)
        {
            using var sb = new ScriptBuilder();
            sb.Emit(OpCode.ABORT);
            sb.EmitPush(sender);
            sb.EmitPush(nefCheckSum);
            sb.EmitPush(name);

            return sb.ToArray().ToScriptHash();
        }

        /// <summary>
        /// Gets the script hash of the specified <see cref=""ExecutionContext""/>.
        /// </summary>
        /// <param name=""context"">The specified <see cref=""ExecutionContext""/>.</param>
        /// <returns>The script hash of the context.</returns>
        public static UInt160 GetScriptHash(this ExecutionContext context)
        {
            return context.GetState<ExecutionContextState>().ScriptHash;
        }

        /// <summary>
        /// Determines whether the specified contract is a multi-signature contract.
        /// </summary>
        /// <param name=""script"">The script of the contract.</param>
        /// <returns><see langword=""true""/> if the contract is a multi-signature contract; otherwise, <see langword=""false""/>.</returns>
        public static bool IsMultiSigContract(this byte[] script)
        {
            return IsMultiSigContract(script, out _, out _, null);
        }

        /// <summary>
        /// Determines whether the specified contract is a multi-signature contract.
        /// </summary>
        /// <param name=""script"">The script of the contract.</param>
        /// <param name=""m"">The minimum number of correct signatures that need to be provided in order for the verification to pass.</param>
        /// <param name=""n"">The number of public keys in the account.</param>
        /// <returns><see langword=""true""/> if the contract is a multi-signature contract; otherwise, <see langword=""false""/>.</returns>
        public static bool IsMultiSigContract(this byte[] script, out int m, out int n)
        {
            return IsMultiSigContract(script, out m, out n, null);
        }

        /// <summary>
        /// Determines whether the specified contract is a multi-signature contract.
        /// </summary>
        /// <param name=""script"">The script of the contract.</param>
        /// <param name=""m"">The minimum number of correct signatures that need to be provided in order for the verification to pass.</param>
        /// <param name=""points"">The public keys in the account.</param>
        /// <returns><see langword=""true""/> if the contract is a multi-signature contract; otherwise, <see langword=""false""/>.</returns>
        public static bool IsMultiSigContract(this byte[] script, out int m, out ECPoint[] points)
        {
            List<ECPoint> list = new();
            if (IsMultiSigContract(script, out m, out _, list))
            {
                points = list.ToArray();
                return true;
            }
            else
            {
                points = null;
                return false;
            }
        }

        private static bool IsMultiSigContract(byte[] script, out int m, out int n, List<ECPoint> points)
        {
            m = 0; n = 0;
            int i = 0;
            if (script.Length < 42) return false;
            switch (script[i])
            {
                case (byte)OpCode.PUSHINT8:
                    m = script[++i];
                    ++i;
                    break;
                case (byte)OpCode.PUSHINT16:
                    m = BinaryPrimitives.ReadUInt16LittleEndian(script.AsSpan(++i));
                    i += 2;
                    break;
                case byte b when b >= (byte)OpCode.PUSH1 && b <= (byte)OpCode.PUSH16:
                    m = b - (byte)OpCode.PUSH0;
                    ++i;
                    break;
                default:
                    return false;
            }
            if (m < 1 || m > 1024) return false;
            while (script[i] == (byte)OpCode.PUSHDATA1)
            {
                if (script.Length <= i + 35) return false;
                if (script[++i] != 33) return false;
                points?.Add(ECPoint.DecodePoint(script.AsSpan(i + 1, 33), ECCurve.Secp256r1));
                i += 34;
                ++n;
            }
            if (n < m || n > 1024) return false;
            switch (script[i])
            {
                case (byte)OpCode.PUSHINT8:
                    if (script.Length <= i + 1 || n != script[++i]) return false;
                    ++i;
                    break;
                case (byte)OpCode.PUSHINT16:
                    if (script.Length < i + 3 || n != BinaryPrimitives.ReadUInt16LittleEndian(script.AsSpan(++i))) return false;
                    i += 2;
                    break;
                case byte b when b >= (byte)OpCode.PUSH1 && b <= (byte)OpCode.PUSH16:
                    if (n != b - (byte)OpCode.PUSH0) return false;
                    ++i;
                    break;
                default:
                    return false;
            }
            if (script.Length != i + 5) return false;
            if (script[i++] != (byte)OpCode.SYSCALL) return false;
            if (BinaryPrimitives.ReadUInt32LittleEndian(script.AsSpan(i)) != ApplicationEngine.System_Crypto_CheckMultisig)
                return false;
            return true;
        }

        /// <summary>
        /// Determines whether the specified contract is a signature contract.
        /// </summary>
        /// <param name=""script"">The script of the contract.</param>
        /// <returns><see langword=""true""/> if the contract is a signature contract; otherwise, <see langword=""false""/>.</returns>
        public static bool IsSignatureContract(this byte[] script)
        {
            if (script.Length != 40) return false;
            if (script[0] != (byte)OpCode.PUSHDATA1
                || script[1] != 33
                || script[35] != (byte)OpCode.SYSCALL
                || BinaryPrimitives.ReadUInt32LittleEndian(script.AsSpan(36)) != ApplicationEngine.System_Crypto_CheckSig)
                return false;
            return true;
        }

        /// <summary>
        /// Determines whether the specified contract is a standard contract. A standard contract is either a signature contract or a multi-signature contract.
        /// </summary>
        /// <param name=""script"">The script of the contract.</param>
        /// <returns><see langword=""true""/> if the contract is a standard contract; otherwise, <see langword=""false""/>.</returns>
        public static bool IsStandardContract(this byte[] script)
        {
            return script.IsSignatureContract() || script.IsMultiSigContract();
        }

        /// <summary>
        /// Convert the <see cref=""StackItem""/> to an <see cref=""IInteroperable""/>.
        /// </summary>
        /// <typeparam name=""T"">The type of the <see cref=""IInteroperable""/>.</typeparam>
        /// <param name=""item"">The <see cref=""StackItem""/> to convert.</param>
        /// <returns>The converted <see cref=""IInteroperable""/>.</returns>
        public static T ToInteroperable<T>(this StackItem item) where T : IInteroperable, new()
        {
            T t = new();
            t.FromStackItem(item);
            return t;
        }

        /// <summary>
        /// Computes the hash of the specified script.
        /// </summary>
        /// <param name=""script"">The specified script.</param>
        /// <returns>The hash of the script.</returns>
        public static UInt160 ToScriptHash(this byte[] script)
        {
            return new UInt160(Crypto.Hash160(script));
        }

        /// <summary>
        /// Computes the hash of the specified script.
        /// </summary>
        /// <param name=""script"">The specified script.</param>
        /// <returns>The hash of the script.</returns>
        public static UInt160 ToScriptHash(this ReadOnlySpan<byte> script)
        {
            return new UInt160(Crypto.Hash160(script));
        }

        /// <summary>
        /// Verifies the witnesses of the specified <see cref=""IVerifiable""/>.
        /// </summary>
        /// <param name=""verifiable"">The <see cref=""IVerifiable""/> to be verified.</param>
        /// <param name=""settings"">The <see cref=""ProtocolSettings""/> to be used for the verification.</param>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""gas"">The maximum GAS that can be used.</param>
        /// <returns><see langword=""true""/> if the <see cref=""IVerifiable""/> is verified as valid; otherwise, <see langword=""false""/>.</returns>
        public static bool VerifyWitnesses(this IVerifiable verifiable, ProtocolSettings settings, DataCache snapshot, long gas)
        {
            if (gas < 0) return false;
            if (gas > MaxVerificationGas) gas = MaxVerificationGas;

            UInt160[] hashes;
            try
            {
                hashes = verifiable.GetScriptHashesForVerifying(snapshot);
            }
            catch (InvalidOperationException)
            {
                return false;
            }
            if (hashes.Length != verifiable.Witnesses.Length) return false;
            for (int i = 0; i < hashes.Length; i++)
            {
                if (!verifiable.VerifyWitness(settings, snapshot, hashes[i], verifiable.Witnesses[i], gas, out long fee))
                    return false;
                gas -= fee;
            }
            return true;
        }

        internal static bool VerifyWitness(this IVerifiable verifiable, ProtocolSettings settings, DataCache snapshot, UInt160 hash, Witness witness, long gas, out long fee)
        {
            fee = 0;
            Script invocationScript;
            try
            {
                invocationScript = new Script(witness.InvocationScript, true);
            }
            catch (BadScriptException)
            {
                return false;
            }
            using (ApplicationEngine engine = ApplicationEngine.Create(TriggerType.Verification, verifiable, snapshot?.CreateSnapshot(), null, settings, gas))
            {
                if (witness.VerificationScript.Length == 0)
                {
                    ContractState cs = NativeContract.ContractManagement.GetContract(snapshot, hash);
                    if (cs is null) return false;
                    ContractMethodDescriptor md = cs.Manifest.Abi.GetMethod(""verify"", -1);
                    if (md?.ReturnType != ContractParameterType.Boolean) return false;
                    engine.LoadContract(cs, md, CallFlags.ReadOnly);
                }
                else
                {
                    if (NativeContract.IsNative(hash)) return false;
                    if (hash != witness.ScriptHash) return false;
                    Script verificationScript;
                    try
                    {
                        verificationScript = new Script(witness.VerificationScript, true);
                    }
                    catch (BadScriptException)
                    {
                        return false;
                    }
                    engine.LoadScript(verificationScript, initialPosition: 0, configureState: p =>
                    {
                        p.CallFlags = CallFlags.ReadOnly;
                        p.ScriptHash = hash;
                    });
                }

                engine.LoadScript(invocationScript, configureState: p => p.CallFlags = CallFlags.None);

                if (engine.Execute() == VMState.FAULT) return false;
                if (!engine.ResultStack.Peek().GetBoolean()) return false;
                fee = engine.GasConsumed;
            }
            return true;
        }
    }",1,777 809 587 2000 123 331 777 601 726 2001 61 1501 59 331 777 809 726 2002 40 41 328 2003 46 2004 91 2005 46 2006 93 42 1502 43 2003 46 2004 91 2005 46 2007 93 43 2003 46 2008 59 331 777 809 726 2009 40 704 2010 44 704 2011 41 123 726 2012 61 2003 46 2004 91 2005 46 2006 93 42 40 2010 43 2011 41 59 860 40 2013 2014 61 744 40 41 41 2012 348 2003 46 2004 91 40 2005 41 2014 46 2015 40 2010 41 46 2016 40 41 91 1500 93 93 59 860 40 2013 2014 61 744 40 41 41 2012 348 2003 46 2004 91 40 2005 41 2014 46 2015 40 2011 41 46 2016 40 41 91 1500 93 93 59 2012 348 2003 46 2004 91 2005 46 2007 93 59 2012 348 2003 46 2008 42 2011 59 792 2012 59 125 331 777 809 865 2017 40 574 91 93 2018 44 2019 2020 41 123 2017 40 744 2021 40 2018 44 829 41 44 2020 41 59 125 331 777 809 865 2017 40 823 2022 2018 44 2019 2020 41 123 665 40 2023 2024 696 2020 46 2025 41 2018 46 2026 40 2024 46 2027 41 59 2020 46 2028 40 815 46 2029 44 1500 41 59 330 2030 61 2020 46 2031 46 2032 40 2033 328 2033 46 2034 41 59 330 125 331 777 809 2035 2036 40 2035 2037 44 842 2038 44 815 2039 41 123 860 2040 2041 61 744 2042 40 41 59 2041 46 2043 40 2005 46 2044 41 59 2041 46 2045 40 2037 41 59 2041 46 2045 40 2038 41 59 2041 46 2045 40 2039 41 59 792 2041 46 2046 40 41 46 2047 40 41 59 125 331 777 809 2035 2048 40 823 2049 2050 41 123 792 2050 46 2051 60 2052 62 40 41 46 2053 59 125 331 777 809 569 2054 40 823 574 91 93 2018 41 123 792 2054 40 2018 44 762 2055 44 762 2055 44 752 41 59 125 331 777 809 569 2054 40 823 574 91 93 2018 44 762 704 2010 44 762 704 2011 41 123 792 2054 40 2018 44 762 2010 44 762 2011 44 752 41 59 125 331 777 809 569 2054 40 823 574 91 93 2018 44 762 704 2010 44 762 2056 91 93 2057 41 123 2058 60 2056 62 2059 61 744 40 41 59 688 40 2054 40 2018 44 762 2010 44 762 2060 44 2059 41 41 123 2057 61 2059 46 2061 40 41 59 792 829 59 125 630 123 2057 61 752 59 792 655 59 125 125 773 809 569 2054 40 574 91 93 2018 44 762 704 2010 44 762 704 2011 44 2062 60 2056 62 2057 41 123 2010 61 1500 59 2011 61 1500 59 704 2063 61 1500 59 688 40 2018 46 2064 60 1503 41 792 655 59 819 40 2018 91 2063 93 41 123 579 40 574 41 2005 46 2065 58 2010 61 2018 91 349 2063 93 59 349 2063 59 572 59 579 40 574 41 2005 46 2066 58 2010 61 2067 46 2068 40 2018 46 2069 40 349 2063 41 41 59 2063 348 1502 59 572 59 579 574 2070 2071 2070 325 40 574 41 2005 46 2072 307 2070 329 40 574 41 2005 46 2073 58 2010 61 2070 45 40 574 41 2005 46 2074 59 349 2063 59 572 59 613 58 792 655 59 125 688 40 2010 60 1501 309 2010 62 1505 41 792 655 59 870 40 2018 91 2063 93 323 40 574 41 2005 46 2006 41 123 688 40 2018 46 2064 329 2063 43 1503 41 792 655 59 688 40 2018 91 349 2063 93 340 1503 41 792 655 59 2057 346 2075 40 2056 46 2076 40 2018 46 2077 40 2063 43 1501 44 1503 41 44 2078 46 2079 41 41 59 2063 348 1503 59 349 2011 59 125 688 40 2011 60 2010 309 2011 62 1505 41 792 655 59 819 40 2018 91 2063 93 41 123 579 40 574 41 2005 46 2080 58 688 40 2018 46 2064 329 2063 43 1501 309 2011 340 2018 91 349 2063 93 41 792 655 59 349 2063 59 572 59 579 40 574 41 2005 46 2081 58 688 40 2018 46 2064 60 2063 43 1502 309 2011 340 2082 46 2083 40 2018 46 2084 40 349 2063 41 41 41 792 655 59 2063 348 1502 59 572 59 579 574 2085 2086 2085 325 40 574 41 2005 46 2087 307 2085 329 40 574 41 2005 46 2088 58 688 40 2011 340 2085 45 40 574 41 2005 46 2089 41 792 655 59 349 2063 59 572 59 613 58 792 655 59 125 688 40 2018 46 2064 340 2063 43 1502 41 792 655 59 688 40 2018 91 2063 349 93 340 40 574 41 2005 46 2007 41 792 655 59 688 40 2090 46 2091 40 2018 46 2092 40 2063 41 41 340 2003 46 2093 41 792 655 59 792 829 59 125 331 777 809 569 2094 40 823 574 91 93 2018 41 123 688 40 2018 46 2095 340 1503 41 792 655 59 688 40 2018 91 1500 93 340 40 574 41 2005 46 2006 309 2018 91 1501 93 340 1503 309 2018 91 1503 93 340 40 574 41 2005 46 2007 309 2096 46 2097 40 2018 46 2098 40 1503 41 41 340 2003 46 2099 41 792 655 59 792 829 59 125 331 777 809 569 2100 40 823 574 91 93 2018 41 123 792 2018 46 2094 40 41 309 2018 46 2054 40 41 59 125 331 777 809 2101 2102 60 2101 62 40 823 2103 2104 41 2105 2101 58 2106 44 744 40 41 123 2101 2107 61 744 40 41 59 2107 46 2108 40 2104 41 59 792 2107 59 125 331 777 809 2035 2109 40 823 574 91 93 2018 41 123 792 744 2035 40 2110 46 2111 40 2018 41 41 59 125 331 777 809 2035 2109 40 823 2112 60 574 62 2018 41 123 792 744 2035 40 2113 46 2114 40 2018 41 41 59 125 331 777 809 569 2115 40 823 2116 2117 44 2118 2119 44 2120 2121 44 726 2122 41 123 688 40 2122 60 1500 41 792 655 59 688 40 2122 62 2001 41 2122 61 2001 59 2035 91 93 2123 59 830 123 2123 61 2117 46 2124 40 2121 41 59 125 580 40 2125 41 123 792 655 59 125 688 40 2123 46 2126 340 2117 46 2127 46 2126 41 792 655 59 664 40 704 2128 61 1500 59 2128 60 2123 46 2126 59 2128 349 41 123 688 40 33 2117 46 2129 40 2119 44 2121 44 2123 91 2128 93 44 2117 46 2127 91 2128 93 44 2122 44 762 726 2130 41 41 792 655 59 2122 337 2130 59 125 792 829 59 125 710 809 569 2131 40 823 2116 2117 44 2118 2119 44 2120 2121 44 2035 2132 44 2133 2134 44 726 2122 44 762 726 2135 41 123 2135 61 1500 59 2022 2136 59 830 123 2136 61 744 2022 40 2134 46 2137 44 829 41 59 125 580 40 2138 41 123 792 655 59 125 860 40 2003 2139 61 2003 46 2140 40 2141 46 2142 44 2117 44 2121 346 2143 40 41 44 752 44 2119 44 2122 41 41 123 688 40 2134 46 2144 46 2145 323 1500 41 123 2146 2147 61 2148 46 2149 46 2150 40 2121 44 2132 41 59 688 40 2147 712 752 41 792 655 59 2151 2152 61 2147 46 2153 46 2154 46 2155 40 362 44 45 1501 41 59 688 40 2152 346 2156 340 2157 46 2158 41 792 655 59 2139 46 2159 40 2147 44 2152 44 2160 46 2161 41 59 125 630 123 688 40 2162 46 2163 40 2132 41 41 792 655 59 688 40 2132 340 2134 46 2164 41 792 655 59 2022 2165 59 830 123 2165 61 744 2022 40 2134 46 2144 44 829 41 59 125 580 40 2138 41 123 792 655 59 125 2139 46 2166 40 2165 44 2167 58 1500 44 2168 58 2169 328 123 2169 46 2170 61 2170 46 2171 59 2169 46 2164 61 2132 59 125 41 59 125 2139 46 2172 40 2136 44 2173 58 2174 328 2174 46 2175 61 2175 46 2176 41 59 688 40 2139 46 2177 40 41 323 2178 46 2179 41 792 655 59 688 40 33 2139 46 2180 46 2181 40 41 46 2182 40 41 41 792 655 59 2135 61 2139 46 2183 59 125 792 829 59 125 125 ,"{'AvgLine': 12, 'CountLine': 328, 'CountStmt': 156, 'MaxNesting': 3, 'AvgLineCode': 12, 'AvgEssential': 3, 'AvgLineBlank': 0, 'CountStmtExe': 129, 'MaxEssential': 19, 'SumEssential': 54, 'AvgCyclomatic': 3, 'CountLineCode': 218, 'CountStmtDecl': 29, 'MaxCyclomatic': 19, 'SumCyclomatic': 57, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 21, 'CountSemicolon': 103, 'CountDeclMethod': 17, 'CountLineCodeExe': 146, 'CountLineComment': 91, 'CountClassCoupled': 32, 'CountClassDerived': 0, 'CountDeclProperty': 0, 'CountLineCodeDecl': 13, 'CountLineInactive': 0, 'CountDeclMethodAll': 23, 'MaxInheritanceTree': 0, 'RatioCommentToCode': '0.42', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 25, 'SumCyclomaticStrict': 67, 'CountDeclClassMethod': 17, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 15, 'CountDeclPropertyAuto': 0, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 15, 'PercentLackOfCohesion': 0, 'SumCyclomaticModified': 53, 'CountDeclClassVariable': 1, 'CountDeclMethodPrivate': 1, 'CountDeclInstanceMethod': 0, 'CountDeclMethodInternal': 1, 'CountDeclMethodProtected': 0, 'CountClassCoupledModified': 25, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 0, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
79854,C#,"    public abstract class FungibleToken<TState> : NativeContract
        where TState : AccountState, new()
    {
        /// <summary>
        /// The symbol of the token.
        /// </summary>
        [ContractMethod]
        public abstract string Symbol { get; }

        /// <summary>
        /// The number of decimal places of the token.
        /// </summary>
        [ContractMethod]
        public abstract byte Decimals { get; }

        /// <summary>
        /// The factor used when calculating the displayed value of the token value.
        /// </summary>
        public BigInteger Factor { get; }

        /// <summary>
        /// The prefix for storing total supply.
        /// </summary>
        protected const byte Prefix_TotalSupply = 11;

        /// <summary>
        /// The prefix for storing account states.
        /// </summary>
        protected const byte Prefix_Account = 20;

        /// <summary>
        /// Initializes a new instance of the <see cref=""FungibleToken{TState}""/> class.
        /// </summary>
        protected FungibleToken()
        {
            this.Factor = BigInteger.Pow(10, Decimals);

            Manifest.SupportedStandards = new[] { ""NEP-17"" };

            var events = new List<ContractEventDescriptor>(Manifest.Abi.Events)
            {
                new ContractEventDescriptor
                {
                    Name = ""Transfer"",
                    Parameters = new ContractParameterDefinition[]
                    {
                        new ContractParameterDefinition()
                        {
                            Name = ""from"",
                            Type = ContractParameterType.Hash160
                        },
                        new ContractParameterDefinition()
                        {
                            Name = ""to"",
                            Type = ContractParameterType.Hash160
                        },
                        new ContractParameterDefinition()
                        {
                            Name = ""amount"",
                            Type = ContractParameterType.Integer
                        }
                    }
                }
            };

            Manifest.Abi.Events = events.ToArray();
        }

        internal async ContractTask Mint(ApplicationEngine engine, UInt160 account, BigInteger amount, bool callOnPayment)
        {
            if (amount.Sign < 0) throw new ArgumentOutOfRangeException(nameof(amount));
            if (amount.IsZero) return;
            StorageItem storage = engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_Account).Add(account), () => new StorageItem(new TState()));
            TState state = storage.GetInteroperable<TState>();
            await OnBalanceChanging(engine, account, state, amount);
            state.Balance += amount;
            storage = engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_TotalSupply), () => new StorageItem(BigInteger.Zero));
            storage.Add(amount);
            await PostTransfer(engine, null, account, amount, StackItem.Null, callOnPayment);
        }

        internal async ContractTask Burn(ApplicationEngine engine, UInt160 account, BigInteger amount)
        {
            if (amount.Sign < 0) throw new ArgumentOutOfRangeException(nameof(amount));
            if (amount.IsZero) return;
            StorageKey key = CreateStorageKey(Prefix_Account).Add(account);
            StorageItem storage = engine.Snapshot.GetAndChange(key);
            TState state = storage.GetInteroperable<TState>();
            if (state.Balance < amount) throw new InvalidOperationException();
            await OnBalanceChanging(engine, account, state, -amount);
            if (state.Balance == amount)
                engine.Snapshot.Delete(key);
            else
                state.Balance -= amount;
            storage = engine.Snapshot.GetAndChange(CreateStorageKey(Prefix_TotalSupply));
            storage.Add(-amount);
            await PostTransfer(engine, account, null, amount, StackItem.Null, false);
        }

        /// <summary>
        /// Gets the total supply of the token.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <returns>The total supply of the token.</returns>
        [ContractMethod(CpuFee = 1 << 15, RequiredCallFlags = CallFlags.ReadStates)]
        public virtual BigInteger TotalSupply(DataCache snapshot)
        {
            StorageItem storage = snapshot.TryGet(CreateStorageKey(Prefix_TotalSupply));
            if (storage is null) return BigInteger.Zero;
            return storage;
        }

        /// <summary>
        /// Gets the balance of the specified account.
        /// </summary>
        /// <param name=""snapshot"">The snapshot used to read data.</param>
        /// <param name=""account"">The owner of the account.</param>
        /// <returns>The balance of the account. Or 0 if the account doesn't exist.</returns>
        [ContractMethod(CpuFee = 1 << 15, RequiredCallFlags = CallFlags.ReadStates)]
        public virtual BigInteger BalanceOf(DataCache snapshot, UInt160 account)
        {
            StorageItem storage = snapshot.TryGet(CreateStorageKey(Prefix_Account).Add(account));
            if (storage is null) return BigInteger.Zero;
            return storage.GetInteroperable<TState>().Balance;
        }

        [ContractMethod(CpuFee = 1 << 17, StorageFee = 50, RequiredCallFlags = CallFlags.States | CallFlags.AllowCall | CallFlags.AllowNotify)]
        private protected async ContractTask<bool> Transfer(ApplicationEngine engine, UInt160 from, UInt160 to, BigInteger amount, StackItem data)
        {
            if (from is null) throw new ArgumentNullException(nameof(from));
            if (to is null) throw new ArgumentNullException(nameof(to));
            if (amount.Sign < 0) throw new ArgumentOutOfRangeException(nameof(amount));
            if (!from.Equals(engine.CallingScriptHash) && !engine.CheckWitnessInternal(from))
                return false;
            StorageKey key_from = CreateStorageKey(Prefix_Account).Add(from);
            StorageItem storage_from = engine.Snapshot.GetAndChange(key_from);
            if (amount.IsZero)
            {
                if (storage_from != null)
                {
                    TState state_from = storage_from.GetInteroperable<TState>();
                    await OnBalanceChanging(engine, from, state_from, amount);
                }
            }
            else
            {
                if (storage_from is null) return false;
                TState state_from = storage_from.GetInteroperable<TState>();
                if (state_from.Balance < amount) return false;
                if (from.Equals(to))
                {
                    await OnBalanceChanging(engine, from, state_from, BigInteger.Zero);
                }
                else
                {
                    await OnBalanceChanging(engine, from, state_from, -amount);
                    if (state_from.Balance == amount)
                        engine.Snapshot.Delete(key_from);
                    else
                        state_from.Balance -= amount;
                    StorageKey key_to = CreateStorageKey(Prefix_Account).Add(to);
                    StorageItem storage_to = engine.Snapshot.GetAndChange(key_to, () => new StorageItem(new TState()));
                    TState state_to = storage_to.GetInteroperable<TState>();
                    await OnBalanceChanging(engine, to, state_to, amount);
                    state_to.Balance += amount;
                }
            }
            await PostTransfer(engine, from, to, amount, data, true);
            return true;
        }

        internal virtual ContractTask OnBalanceChanging(ApplicationEngine engine, UInt160 account, TState state, BigInteger amount)
        {
            return ContractTask.CompletedTask;
        }

        private async ContractTask PostTransfer(ApplicationEngine engine, UInt160 from, UInt160 to, BigInteger amount, StackItem data, bool callOnPayment)
        {
            // Send notification

            engine.SendNotification(Hash, ""Transfer"",
                new Array { from?.ToArray() ?? StackItem.Null, to?.ToArray() ?? StackItem.Null, amount });

            // Check if it's a wallet or smart contract

            if (!callOnPayment || to is null || ContractManagement.GetContract(engine.Snapshot, to) is null) return;

            // Call onNEP17Payment method

            await engine.CallFromNativeContract(Hash, to, ""onNEP17Payment"", from?.ToArray() ?? StackItem.Null, amount, data);
        }
    }",1,777 539 587 2000 60 2001 62 58 2002 2003 2001 58 2004 44 744 40 41 123 331 91 2005 93 777 539 815 2006 123 2007 59 125 331 91 2005 93 777 539 574 2008 123 2009 59 125 331 777 2010 2011 123 2012 59 125 331 775 601 574 2013 61 1503 59 331 775 601 574 2014 61 1503 59 331 775 2000 40 41 123 823 46 2011 61 2010 46 2015 40 1502 44 2008 41 59 2016 46 2017 61 744 91 93 123 362 125 59 2018 2019 61 744 2020 60 2021 62 40 2016 46 2022 46 2023 41 123 744 2021 123 2024 61 362 44 2025 61 744 2026 91 93 123 744 2026 40 41 123 2024 61 362 44 2027 61 2028 46 2029 125 44 744 2026 40 41 123 2024 61 362 44 2030 61 2031 46 2032 125 44 744 2026 40 41 123 2024 61 362 44 2033 61 2034 46 2035 125 125 125 125 59 2016 46 2022 46 2023 61 2019 46 2036 40 41 59 125 710 2037 2038 2039 40 2040 2041 44 2042 2043 44 2010 2044 44 569 2045 41 123 688 40 2044 46 2046 60 1500 41 825 744 2047 40 2048 40 2044 41 41 59 688 40 2044 46 2049 41 792 59 2050 2051 61 2041 46 2052 46 2053 40 2054 40 2014 41 46 2055 40 2043 41 44 40 41 328 744 2050 40 744 2001 40 41 41 41 59 2001 2056 61 2051 46 2057 60 2001 62 40 41 59 2058 2059 40 2041 44 2043 44 2056 44 2044 41 59 2056 46 2060 348 2044 59 2051 61 2041 46 2052 46 2053 40 2054 40 2013 41 44 40 41 328 744 2050 40 2010 46 2061 41 41 59 2051 46 2055 40 2044 41 59 2058 2062 40 2041 44 752 44 2043 44 2044 44 2063 46 2064 44 2045 41 59 125 710 2037 2038 2065 40 2040 2041 44 2042 2043 44 2010 2044 41 123 688 40 2044 46 2066 60 1500 41 825 744 2067 40 2068 40 2044 41 41 59 688 40 2044 46 2069 41 792 59 2070 2071 61 2072 40 2014 41 46 2073 40 2043 41 59 2074 2075 61 2041 46 2076 46 2077 40 2071 41 59 2001 2078 61 2075 46 2079 60 2001 62 40 41 59 688 40 2078 46 2080 60 2044 41 825 744 2081 40 41 59 2082 2083 40 2041 44 2043 44 2078 44 45 2044 41 59 688 40 2078 46 2080 323 2044 41 2041 46 2076 46 2084 40 2071 41 59 630 2078 46 2080 337 2044 59 2075 61 2041 46 2076 46 2077 40 2072 40 2013 41 41 59 2075 46 2073 40 45 2044 41 59 2082 2085 40 2041 44 2043 44 752 44 2044 44 2086 46 2087 44 655 41 59 125 331 91 2005 40 2088 61 1501 332 1503 44 2089 61 2090 46 2091 41 93 777 864 2010 2092 40 2093 2094 41 123 2095 2096 61 2094 46 2097 40 2098 40 2013 41 41 59 688 40 2096 712 752 41 792 2010 46 2099 59 792 2096 59 125 331 91 2005 40 2088 61 1501 332 1503 44 2089 61 2090 46 2091 41 93 777 864 2010 2100 40 2093 2094 44 2042 2043 41 123 2101 2102 61 2094 46 2103 40 2104 40 2014 41 46 2105 40 2043 41 41 59 688 40 2102 712 752 41 792 2010 46 2106 59 792 2102 46 2107 60 2001 62 40 41 46 2108 59 125 91 2005 40 2088 61 1501 332 1503 44 2109 61 1503 44 2089 61 2090 46 2110 124 2090 46 2111 124 2090 46 2112 41 93 773 775 2037 2038 60 569 62 2113 40 2040 2041 44 2042 2114 44 2042 2115 44 2010 2044 44 2116 2117 41 123 688 40 2114 712 752 41 825 744 2118 40 2119 40 2114 41 41 59 688 40 2115 712 752 41 825 744 2118 40 2119 40 2115 41 41 59 688 40 2044 46 2120 60 1500 41 825 744 2121 40 2119 40 2044 41 41 59 688 40 33 2114 46 2122 40 2041 46 2123 41 307 33 2041 46 2124 40 2114 41 41 792 655 59 2125 2126 61 2127 40 2014 41 46 2128 40 2114 41 59 2129 2130 61 2041 46 2131 46 2132 40 2126 41 59 688 40 2044 46 2133 41 123 688 40 2130 340 752 41 123 2001 2134 61 2130 46 2135 60 2001 62 40 41 59 2136 2137 40 2041 44 2114 44 2134 44 2044 41 59 125 125 630 123 688 40 2130 712 752 41 792 655 59 2001 2138 61 2130 46 2139 60 2001 62 40 41 59 688 40 2138 46 2140 60 2044 41 792 655 59 688 40 2114 46 2122 40 2115 41 41 123 2141 2142 40 2041 44 2114 44 2138 44 2010 46 2143 41 59 125 630 123 2144 2145 40 2041 44 2114 44 2138 44 45 2044 41 59 688 40 2138 46 2140 323 2044 41 2041 46 2131 46 2146 40 2126 41 59 630 2138 46 2140 337 2044 59 2125 2147 61 2127 40 2014 41 46 2128 40 2115 41 59 2129 2148 61 2041 46 2131 46 2132 40 2147 44 40 41 328 744 2129 40 744 2001 40 41 41 41 59 2001 2149 61 2148 46 2139 60 2001 62 40 41 59 2144 2145 40 2041 44 2115 44 2149 44 2044 41 59 2149 46 2140 348 2044 59 125 125 2150 2151 40 2041 44 2114 44 2115 44 2044 44 2117 44 829 41 59 792 829 59 125 710 864 2038 2152 40 2040 2041 44 2042 2043 44 2001 2153 44 2010 2044 41 123 792 2038 46 2154 59 125 773 2037 2038 2155 40 2040 2041 44 2042 2114 44 2042 2115 44 2010 2044 44 2116 2117 44 569 2045 41 123 330 2041 46 2156 40 2157 44 362 44 744 2158 123 2114 346 2159 40 41 343 2116 46 2160 44 2115 346 2159 40 41 343 2116 46 2160 44 2044 125 41 59 330 688 40 33 2045 309 2115 712 752 309 2161 46 2162 40 2041 46 2163 44 2115 41 712 752 41 792 59 330 2164 2041 46 2165 40 2157 44 2115 44 362 44 2114 346 2166 40 41 343 2116 46 2167 44 2044 44 2117 41 59 125 125 ,"{'AvgLine': 12, 'CountLine': 192, 'CountStmt': 93, 'MaxNesting': 3, 'AvgLineCode': 11, 'AvgEssential': 2, 'AvgLineBlank': 0, 'CountStmtExe': 76, 'MaxEssential': 8, 'SumEssential': 23, 'AvgCyclomatic': 2, 'CountLineCode': 140, 'CountStmtDecl': 32, 'MaxCyclomatic': 11, 'SumCyclomatic': 30, 'AvgLineComment': 0, 'CountClassBase': 1, 'CountLineBlank': 20, 'CountSemicolon': 62, 'CountDeclMethod': 11, 'CountLineCodeExe': 82, 'CountLineComment': 32, 'CountClassCoupled': 25, 'CountClassDerived': 2, 'CountDeclProperty': 3, 'CountLineCodeDecl': 36, 'CountLineInactive': 0, 'CountDeclMethodAll': 41, 'MaxInheritanceTree': 1, 'RatioCommentToCode': '0.23', 'AvgCyclomaticStrict': 3, 'MaxCyclomaticStrict': 12, 'SumCyclomaticStrict': 33, 'CountDeclClassMethod': 0, 'AvgCyclomaticModified': 2, 'CountDeclMethodPublic': 5, 'CountDeclPropertyAuto': 3, 'CountLinePreprocessor': 0, 'MaxCyclomaticModified': 11, 'PercentLackOfCohesion': 87, 'SumCyclomaticModified': 30, 'CountDeclClassVariable': 2, 'CountDeclMethodPrivate': 2, 'CountDeclInstanceMethod': 11, 'CountDeclMethodInternal': 3, 'CountDeclMethodProtected': 2, 'CountClassCoupledModified': 21, 'CountDeclInstanceVariable': 0, 'PercentLackOfCohesionModified': 87, 'CountDeclInstanceVariablePublic': 0, 'CountDeclInstanceVariablePrivate': 0, 'CountDeclMethodProtectedInternal': 0, 'CountDeclInstanceVariableInternal': 0, 'CountDeclInstanceVariableProtected': 0, 'CountDeclInstanceVariableProtectedInternal': 0}"
